
build/build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/build/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004259

Program Header:
0x70000001 off    0x000191cc vaddr 0x000091cc paddr 0x000091cc align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009284 memsz 0x00009284 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009284 align 2**16
         filesz 0x000000d8 memsz 0x000000d8 flags rw-
    LOAD off    0x000200d8 vaddr 0x100000d8 paddr 0x100000d8 align 2**16
         filesz 0x00000000 memsz 0x00000350 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            000091b4  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000d8  10000000  00009284  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200d8  2**2  CONTENTS
  3 .bss             00000350  100000d8  100000d8  000200d8  2**3  ALLOC
  4 .ARM.extab       00000018  000091b4  000091b4  000191b4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  000091cc  000091cc  000191cc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200d8  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200d8  2**2  CONTENTS
  8 .noinit          00000000  10000428  10000428  000200d8  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200d8  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020108  2**0  CONTENTS, READONLY
 11 .debug_info      0006dd9e  00000000  00000000  00020186  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00003f3a  00000000  00000000  0008df24  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000f10  00000000  00000000  00091e5e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000e90  00000000  00000000  00092d6e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00006775  00000000  00000000  00093bfe  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002e29d  00000000  00000000  0009a373  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00004e9c  00000000  00000000  000c8610  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000d8 l    d  .bss	00000000 .bss
000091b4 l    d  .ARM.extab	00000000 .ARM.extab
000091cc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000428 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
000090d0 l     O .text	00000004 config::kSystemClockRateMhz
000090d4 l     O .text	00000004 config::kRtosFrequency
000056f8 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00005714 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
1000006c l     O .data	00000004 (anonymous namespace)::system_controller
10000408 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
1000040c l     O .bss	0000000c (anonymous namespace)::uart0
10000418 l     O .bss	0000000c (anonymous namespace)::system_timer
00005a8c l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005ab0 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00009100 l     O .text	0000000c sjsu::InitializePlatform()::file
00009134 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00005be0 l     F .text	00000128 __static_initialization_and_destruction_0(int, int)
00005d08 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000d8 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000dc l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000004fa l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000516 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000060a l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000626 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000064a l     F .text	00000026 _Unwind_GetGR
00008874 l     O .text	00000028 sjsu::PID::SetLimits(float, float)::__PRETTY_FUNCTION__
00000bcc l     F .text	00000030 NVIC_EnableIRQ
00000bfc l     F .text	00000030 NVIC_DisableIRQ
00000c2c l     F .text	00000054 NVIC_SetPriority
00008580 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
000085d0 l     O .text	00000031 sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__
00008604 l     O .text	00000043 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__
00001528 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003720 l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000018e4 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00001900 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00008648 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
000086cc l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00008748 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00002318 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000881c l     O .text	00000055 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000087e0 l     O .text	0000003b sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__
00008790 l     O .text	0000004f sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000083e8 l     O .text	00000004 linear_actuator_min_velocity
000083ec l     O .text	00000004 linear_actuator_max_velocity
000083f0 l     O .text	00000004 motor_controller_freq
000083f8 l     O .text	00000008 motor_controller_min_pulse
00008400 l     O .text	00000008 motor_controller_max_pulse
00008408 l     O .text	00000009 main::file
00008414 l     O .text	00000009 main::file
00008420 l     O .text	00000009 main::file
0000842c l     O .text	00000009 main::file
00008438 l     O .text	00000009 main::file
00008444 l     O .text	00000009 main::file
00008574 l     O .text	0000000b main::__PRETTY_FUNCTION__
00003bf8 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003e08 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00003e2c l     F .text	0000001c float units::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003e48 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00003e6c l     F .text	0000021c __static_initialization_and_destruction_0(int, int)
00004088 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
00004248 l       .text	00000000 handler2_address_const
000042ac l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
000042f0 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
10000380 l     O .bss	00000064 pxReadyTasksLists
100003e4 l     O .bss	00000004 uxTopReadyPriority
100003e8 l     O .bss	00000004 xYieldPending
100003ec l     O .bss	00000004 uxSchedulerSuspended
100003f0 l     O .bss	00000004 ulTaskSwitchedInTime
100003f4 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00004448 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00004464 l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
0000448a l     F .text	0000002e _strlen(char const*)
000044b8 l     F .text	00000028 _is_digit(char)
000044e0 l     F .text	00000048 _atoi(char const**)
00004528 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
0000476a l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
0000483a l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00008b28 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
0000491c l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00004d60 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
00005d40 l       .text	00000000 pxCurrentTCBConst2
00005db0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
000067a8 l     F .text	00000012 selfrel_offset31
000067bc l     F .text	00000060 search_EIT_table
0000681c l     F .text	00000028 __gnu_unwind_get_pr_addr
00006844 l     F .text	000000a4 get_eit_entry
000068e8 l     F .text	00000058 restore_non_core_regs
00006940 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
0000694c l     F .text	00000004 __gnu_unwind_24bit.isra.1
00006950 l     F .text	00000002 _Unwind_DebugHook
00006954 l     F .text	0000003e unwind_phase2
00006994 l     F .text	000000c6 unwind_phase2_forced
00006b64 l     F .text	00000018 _Unwind_GetGR
00006ba8 l     F .text	0000001a _Unwind_SetGR
00006c34 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00007340 l     F .text	00000038 next_unwind_byte
00007378 l     F .text	0000001a _Unwind_GetGR.constprop.0
00007394 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000078 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000006b0  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
000072f8 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00006a60 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000083e0  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005854  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00003940  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00004134  w    F .text	0000006c sjsu::InitializeBssSection()
000043d0 g     F .text	00000010 _getpid
00005e28 g     F .text	00000024 _putchar
000082e0  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
10000378  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1PeripheralCommon
00003234  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000589c  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
0000833c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00000408  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
000018ca  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000396  w    F .text	00000018 std::numeric_limits<float>::epsilon()
00002c60  w    F .text	000001b0 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000058  w    O .data	00000004 sjsu::newlib::in
0000177e  w    F .text	0000001e units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const
00006194 g     F .text	0000005a .hidden __floatdidf
1000036c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001090  w    F .text	00000044 sjsu::lpc40xx::Gpio::Toggle() const
00002c0c  w    F .text	00000020 sjsu::Pwm::Pwm()
00001858  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
0000847c  w    O .text	00000014 vtable for sjsu::Adc
00007798 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00005634 g     F .text	00000038 printf
00000000 g       *ABS*	00000000 __vectors_start__
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1PeripheralCommon
00002ee0  w    F .text	00000056 sjsu::lpc40xx::Pwm::GetDutyCycle() const
00001460  w    F .text	00000078 sjsu::MotorController::MotorController(sjsu::Pwm&, sjsu::Gpio&)
00003884  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000173a  w    F .text	00000028 sjsu::MotorController::SetDirection(bool)
0000380c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00003d5a  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001460  w    F .text	00000078 sjsu::MotorController::MotorController(sjsu::Pwm&, sjsu::Gpio&)
00002a98  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
00000f74  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
0000073c  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
000071b4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
000072d4 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00009284 g       .ARM.exidx	00000000 __exidx_end
00008294  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00005ae4 g     F .text	00000014 ThreadRuntimeCounter
00006f08 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000064  w    O .data	00000004 sjsu::cortex::InterruptController::scb
000083c4  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm1
00003184  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
00001aa0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
1000037c g     O .bss	00000004 pxCurrentTCB
00007684 g     F .text	0000000a .hidden _Unwind_GetRegionStart
000072d4 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
000082d8  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
000012cc  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeRising() const
00008384  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
0000179c  w    F .text	000000bc sjsu::MotorController::SetAngularVelocity(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000424 g     O .bss	00000004 errno
00009284 g       .ARM.exidx	00000000 _etext
00003754  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000d24  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00001b98  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
0000731c g     F .text	00000022 .hidden _Unwind_Backtrace
000090d8  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
00003a3e  w    F .text	00000094 units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> sjsu::Map<float, float, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> >(float, float, float, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000100  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
0000629c g     F .text	00000160 .hidden __aeabi_fadd
10000400  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00006298 g     F .text	00000164 .hidden __subsf3
0000838c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00001c64  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00008364  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00007194 g     F .text	00000018 .hidden __restore_core_regs
000071d4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
0000048c  w    F .text	0000002c units::literals::operator"" _rpm(unsigned long long)
00003c6c  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000082d0  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00008490  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00005774  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
000083b4  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kMode
00008298  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00002034  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00006a5c g     F .text	00000004 .hidden _Unwind_GetCFA
00007710 g     F .text	00000016 memcpy
00001d5c  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005dd0 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00001762  w    F .text	0000001c float units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const
00002f58  w    F .text	000000cc sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006b7c g     F .text	0000002a .hidden _Unwind_VRS_Set
0000611c g     F .text	00000022 .hidden __floatsidf
10000374  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
000064ac g     F .text	00000000 .hidden __aeabi_uldivmod
10000428 g       .noinit	00000000 _noinit
00001c7c  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000914  w    F .text	000000a0 sjsu::PID::PID(float*, float*, float*, float, float, float)
00000824  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
000043fc g     F .text	0000004c puts
00002924  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000020d4  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
000038aa  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
10000068  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
000019cc  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00002504  w    F .text	00000020 sjsu::Uart::Uart()
000083a0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
00007736 g     F .text	00000050 _raise_r
00006404 g     F .text	0000001c .hidden __aeabi_i2f
000028d0  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
000028a0  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
00005d50 g     F .text	00000066 xPortPendSVHandler
000083b8  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kCountInput
10000000 g       *ABS*	00000000 __base_RamLoc64
00000dd4  w    F .text	0000001e sjsu::Gpio::SetLow() const
00000b4c  w    F .text	00000050 sjsu::PID::SetLimits(float, float)
000004b8  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000ce8  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
000077bc g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00006bc4 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00003680  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
000060fc g     F .text	0000001e .hidden __aeabi_ui2d
000057ec  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
000015d6  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)
0000310c  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)
10010000 g       *ABS*	00000000 StackTop
00002c2c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
00001cf8  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000064dc g     F .text	000002cc .hidden __udivmoddi4
00005e78 g     F .text	00000000 .hidden __aeabi_drsub
000000fc g       .text	00000000 bss_section_table
0000829c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000059b0  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00002860  w    F .text	00000040 sjsu::lpc40xx::Adc::BurstMode(bool)
0000083a  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
000071c4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00002524  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00006f14 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00006f10  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
000058e0  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000364  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
0000731c g     F .text	00000022 .hidden ___Unwind_Backtrace
000007e0  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00002748  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
000006f8  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00006140 g     F .text	00000042 .hidden __extendsfdf2
0000837c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00005e84 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100003f8  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
000091cc g       .ARM.extab	00000000 __exidx_start
00000df2  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
000076c8 g     F .text	00000048 __libc_init_array
0000224c  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
0000728c g     F .text	00000022 .hidden ___Unwind_RaiseException
0000143c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
000022f4  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000057cc  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00002b48  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
000076b8 g     F .text	0000000e abort
000072b0 g     F .text	00000022 .hidden ___Unwind_Resume
000022dc  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000060fc g     F .text	0000001e .hidden __floatunsidf
10000038  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
000082c4  w    O .text	00000009 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file
10000350  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000031bc  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00002278  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00005db8 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00001328  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeFalling() const
000082a0  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00003cc6  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
000026f2  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00005e6c g     F .text	0000000a std::terminate()
000003d4  w    F .text	00000034 units::detail::abs(float)
000061f0 g     F .text	0000009e .hidden __aeabi_d2f
000071dc g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000082d4  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
000016b8  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00006298 g     F .text	00000164 .hidden __aeabi_fsub
00002618  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
000036cc  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00004230 g     F .text	00000026 ArmHardFaultHandler
10000370  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
000012a2  w    F .text	00000028 sjsu::lpc40xx::Gpio::DetachInterrupt() const
10000204  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
0000159c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000428 g       .bss	00000000 _ebss
00008510  w    O .text	00000018 vtable for sjsu::Pwm
000009b4  w    F .text	00000198 sjsu::PID::Calculate()
000026a4  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
000084c8  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00003980  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
0000055c  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001a48  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
0000053a  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006430 g     F .text	0000007c .hidden __floatdisf
000090e4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
000041b4 g     F .text	0000007c GetRegistersFromStack
00008390  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
00002524  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000014d8  w    F .text	00000032 sjsu::MotorController::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
000083d0  w    O .text	00000008 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005e84 g     F .text	00000276 .hidden __aeabi_dadd
000028d0  w    F .text	00000020 sjsu::Adc::Adc()
00006184 g     F .text	0000006a .hidden __aeabi_ul2d
000071ac g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00005af8  w    F .text	000000b8 sjsu::InitializePlatform()
00003024  w    F .text	0000008c sjsu::lpc40xx::Pwm::EnablePwm(bool) const
000035fc  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
00009154 g     O .text	00000020 __sf_fake_stderr
00000ee4  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00005e5c g     F .text	00000010 std::get_terminate()
00002504  w    F .text	00000020 sjsu::Uart::Uart()
000072b0 g     F .text	00000022 .hidden _Unwind_Resume
00000e0e  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00006b2c g     F .text	0000000c .hidden _Unwind_DeleteException
0000854c  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
1000021c  w    O .bss	00000100 sjsu::lpc40xx::Gpio::interrupthandlers
00006b28 g     F .text	00000002 .hidden _Unwind_Complete
00001b50  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000344  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00001694  w    F .text	00000024 sjsu::MotorController::SetAngularVelocityBounds(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00000000 g       *ABS*	00000000 __base_Flash
0000910c  w    O .text	00000014 vtable for sjsu::cortex::SystemTimer
00009120  w    O .text	00000014 vtable for sjsu::SystemTimer
000082f0  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
10010000 g       *ABS*	00000000 __top_RamLoc64
10000368  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00003b4e  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000d8 g       .bss	00000000 _bss
00005e80 g     F .text	0000027a .hidden __aeabi_dsub
00008324  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00002ae8  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
00008394  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
00006184 g     F .text	0000006a .hidden __floatundidf
00005e4c g     F .text	00000006 __cxa_pure_virtual
00001d34  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00001180  w    F .text	0000003c sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const
00006404 g     F .text	0000001c .hidden __floatsisf
00008354  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000348  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007398 g     F .text	000002c4 .hidden __gnu_unwind_execute
00002c2c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
1000000c  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000354  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00001930  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000071bc g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000bb4  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00003b9e  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
0000378a  w    F .text	00000082 float sjsu::Map<float, float, float>(float, float, float, float, float)
000018a8  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
000077d0  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
10000428 g       .noinit	00000000 _end_noinit
10000104  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00001a24  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00004300 g     F .text	000000c4 vTaskSwitchContext
0000207c  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
000082dc  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00005820  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
000082a4  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000037e  w    F .text	00000018 std::numeric_limits<float>::min()
00006ad4 g     F .text	00000044 .hidden __gnu_Unwind_Resume
1000031c  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
00005838  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
0000566c  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00003ad2  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
1000035c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
0000611c g     F .text	00000022 .hidden __aeabi_i2d
00008388  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
0000835c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
000071cc g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
000059c8  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008450  w    O .text	00000018 vtable for sjsu::lpc40xx::Pwm
10000358  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00006420 g     F .text	0000008c .hidden __floatundisf
0000728c g     F .text	00000022 .hidden _Unwind_RaiseException
000076b4  w    F .text	00000002 .hidden __aeabi_ldiv0
10000010  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
000041a0  w    F .text	00000014 sjsu::SystemInitialize()
000015be  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00002c0c  w    F .text	00000020 sjsu::Pwm::Pwm()
000063fc g     F .text	00000024 .hidden __aeabi_ui2f
00002090  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
000000e4 g       .text	00000000 data_section_table
100000f8  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
000030ce  w    F .text	0000003e sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const
00001384  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeRising() const
10000360  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
000015fa  w    F .text	00000070 sjsu::MotorController::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00005de8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00000434  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00009174 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
000083d8  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file
000083bc  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin1
00001fb8  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
000057ec  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
00002e10  w    F .text	000000d0 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const
00007726 g     F .text	00000010 memset
000011f0  w    F .text	00000018 unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)
00003268 g     F .text	00000394 main
000056b0  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00000e1c  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
0000839c  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00006430 g     F .text	0000007c .hidden __aeabi_l2f
00003130  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00000f20  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
000056d0  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
000090ec  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
0000855c  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
000061f0 g     F .text	0000009e .hidden __truncdfsf2
000039a4  w    F .text	0000009a float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)
0000031c g       .text	00000000 __init_array_end
00005d20 g     F .text	00000026 vPortSVCHandler
00006194 g     F .text	0000005a .hidden __aeabi_l2d
000030b0  w    F .text	0000001e sjsu::lpc40xx::Pwm::GetMatchRegisters() const
000082e8  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
1000005c  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006420 g     F .text	0000008c .hidden __aeabi_ul2f
000057cc  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00005738  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000460  w    F .text	0000002c units::literals::operator"" _rpm(long double)
0000112c  w    F .text	00000054 sjsu::lpc40xx::Gpio::ValidPortCheck() const
00006ac0 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000031a0  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00003848  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00006b18 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000054  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
000090c8  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
000038ce  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
00007194 g     F .text	00000018 .hidden restore_core_regs
00001a64  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00007278 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00008374  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
000010d4  w    F .text	00000040 sjsu::lpc40xx::Gpio::Read() const
000058c0  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00003142  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000024  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00002f36  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000283c  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00006290 g     F .text	0000016c .hidden __aeabi_frsub
000076ac g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000074 g     O .data	00000004 _impure_ptr
000082ec  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
0000150a  w    F .text	0000001e units::linear_scale<float>::operator()() const
00008398  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00001c28  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00005794  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
0000316a  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
00000d58  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00008468  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
000036f0  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00005974  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00007690 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
0000830c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000003ae  w    F .text	00000026 std::signbit(float)
000028f0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
00001274  w    F .text	0000002e sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
0000101c  w    F .text	00000074 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
00004258 g     F .text	00000054 ArmResetHandler
00003922  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
000016d2  w    F .text	00000068 sjsu::MotorController::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000028f0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
00006b38 g     F .text	0000002a .hidden _Unwind_VRS_Get
00000efc  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000070 g     O .data	00000004 __cxxabiv1::__terminate_handler
00007264 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00001ad4  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
0000084c  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00001b08  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
0000765c g     F .text	00000028 .hidden __gnu_unwind_frame
00002b00  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
000072f8 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
00001544  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
100000d8 g       .data	00000000 _edata
00002818  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00000f9c  w    F .text	00000080 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
00008528  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
000013e0  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeFalling() const
0000297c  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00005bb0  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
1000034c  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00000e58  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
000082f4  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00001ca0  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00001208  w    F .text	0000006c sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const
10000000 g       *ABS*	00000000 __base_RAM
000063fc g     F .text	00000024 .hidden __floatunsisf
00005e52 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00007220 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000043e0 g     F .text	0000001a _kill
00004098  w    F .text	0000009c sjsu::InitializeDataSection()
00003d02  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00000804  w    F .text	00000020 sjsu::DefaultUptime()
00009194 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
000083b0  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
0000828c  w    O .text	00000008 sjsu::PID::SetLimits(float, float)::file
0000030c g       .text	00000000 __init_array_start
000076b4  w    F .text	00000002 .hidden __aeabi_idiv0
000083a8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
000036a6  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000043c4 g     F .text	0000000c _exit
0000836c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000008  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
000004da  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000021b4  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00001114  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
000008f8  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000b9c  w    F .text	00000018 sjsu::Pin::GetPort() const
000077c0 g     F .text	00000010 strlen
00000c80  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000000  w    O .data	00000004 sjsu::Uptime
00006f0c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00003af4  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001ef0  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005e08 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000082b4  w    O .text	00000004 sjsu::lpc40xx::Gpio::kInterruptController
00000670  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00006140 g     F .text	00000042 .hidden __aeabi_f2d
000076a4 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00002200  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
0000166a  w    F .text	0000002a sjsu::MotorController::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00003c14  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000cb4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00005e80 g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
00001be0  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00003632  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000082b8  w    O .text	00000009 sjsu::lpc40xx::Gpio::ValidPortCheck() const::file
00000e70  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
000082e4  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
000011bc  w    F .text	00000034 sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const
000084ac  w    O .text	0000001c vtable for sjsu::Uart
0000629c g     F .text	00000160 .hidden __addsf3
0000395e  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
000038fc  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
00000914  w    F .text	000000a0 sjsu::PID::PID(float*, float*, float*, float, float, float)
000090dc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
10000060  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00002558  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00007788 g     F .text	00000010 raise
000084ec  w    O .text	00000024 vtable for sjsu::MotorController



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 59 42 00 00 95 57 00 00 31 42 00 00     ....YB...W..1B..
      10:	95 57 00 00 95 57 00 00 95 57 00 00 00 00 00 00     .W...W...W......
	...
      2c:	21 5d 00 00 95 57 00 00 00 00 00 00 51 5d 00 00     !]...W......Q]..
      3c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      4c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      5c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      6c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      7c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      8c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      9c:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      ac:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      bc:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      cc:	95 57 00 00 95 57 00 00 95 57 00 00 95 57 00 00     .W...W...W...W..
      dc:	95 57 00 00 95 57 00 00                             .W...W..

000000e4 <data_section_table>:
      e4:	00009284 	.word	0x00009284
      e8:	10000000 	.word	0x10000000
      ec:	000000d8 	.word	0x000000d8
      f0:	00009284 	.word	0x00009284
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000d8 	.word	0x100000d8
     100:	00000350 	.word	0x00000350
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	00004089 	.word	0x00004089
     314:	000042f1 	.word	0x000042f1
     318:	00005d09 	.word	0x00005d09

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000d8 	.word	0x100000d8
     344:	00000000 	.word	0x00000000
     348:	000091cc 	.word	0x000091cc

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000dc 	.word	0x100000dc
     364:	000091cc 	.word	0x000091cc

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
     37e:	b480      	push	{r7}
     380:	af00      	add	r7, sp, #0
     382:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     386:	ee07 3a90 	vmov	s15, r3
     38a:	eeb0 0a67 	vmov.f32	s0, s15
     38e:	46bd      	mov	sp, r7
     390:	f85d 7b04 	ldr.w	r7, [sp], #4
     394:	4770      	bx	lr

00000396 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
     396:	b480      	push	{r7}
     398:	af00      	add	r7, sp, #0
     39a:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
     39e:	ee07 3a90 	vmov	s15, r3
     3a2:	eeb0 0a67 	vmov.f32	s0, s15
     3a6:	46bd      	mov	sp, r7
     3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ac:	4770      	bx	lr

000003ae <std::signbit(float)>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }
     3ae:	b480      	push	{r7}
     3b0:	b083      	sub	sp, #12
     3b2:	af00      	add	r7, sp, #0
     3b4:	ed87 0a01 	vstr	s0, [r7, #4]
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     3be:	2b00      	cmp	r3, #0
     3c0:	bf14      	ite	ne
     3c2:	2301      	movne	r3, #1
     3c4:	2300      	moveq	r3, #0
     3c6:	b2db      	uxtb	r3, r3
     3c8:	4618      	mov	r0, r3
     3ca:	370c      	adds	r7, #12
     3cc:	46bd      	mov	sp, r7
     3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
     3d2:	4770      	bx	lr

000003d4 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
     3d4:	b480      	push	{r7}
     3d6:	b083      	sub	sp, #12
     3d8:	af00      	add	r7, sp, #0
     3da:	ed87 0a01 	vstr	s0, [r7, #4]
			return x < 0 ? -x : x;
     3de:	edd7 7a01 	vldr	s15, [r7, #4]
     3e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     3ea:	d504      	bpl.n	3f6 <units::detail::abs(float)+0x22>
     3ec:	edd7 7a01 	vldr	s15, [r7, #4]
     3f0:	eef1 7a67 	vneg.f32	s15, s15
     3f4:	e001      	b.n	3fa <units::detail::abs(float)+0x26>
     3f6:	edd7 7a01 	vldr	s15, [r7, #4]
		}
     3fa:	eeb0 0a67 	vmov.f32	s0, s15
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     408:	b580      	push	{r7, lr}
     40a:	b084      	sub	sp, #16
     40c:	af00      	add	r7, sp, #0
     40e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
     412:	e9d7 0100 	ldrd	r0, r1, [r7]
     416:	f006 f803 	bl	6420 <__aeabi_ul2f>
     41a:	4602      	mov	r2, r0
     41c:	f107 030c 	add.w	r3, r7, #12
     420:	ee00 2a10 	vmov	s0, r2
     424:	4618      	mov	r0, r3
     426:	f000 f888 	bl	53a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     42a:	68fb      	ldr	r3, [r7, #12]
     42c:	4618      	mov	r0, r3
     42e:	3710      	adds	r7, #16
     430:	46bd      	mov	sp, r7
     432:	bd80      	pop	{r7, pc}

00000434 <units::literals::operator"" _MHz(unsigned long long)>:
     434:	b580      	push	{r7, lr}
     436:	b084      	sub	sp, #16
     438:	af00      	add	r7, sp, #0
     43a:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     43e:	e9d7 0100 	ldrd	r0, r1, [r7]
     442:	f005 ffed 	bl	6420 <__aeabi_ul2f>
     446:	4602      	mov	r2, r0
     448:	f107 030c 	add.w	r3, r7, #12
     44c:	ee00 2a10 	vmov	s0, r2
     450:	4618      	mov	r0, r3
     452:	f000 f831 	bl	4b8 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     456:	68fb      	ldr	r3, [r7, #12]
     458:	4618      	mov	r0, r3
     45a:	3710      	adds	r7, #16
     45c:	46bd      	mov	sp, r7
     45e:	bd80      	pop	{r7, pc}

00000460 <units::literals::operator"" _rpm(long double)>:
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_ANGULAR_VELOCITY_UNITS)
	UNIT_ADD(angular_velocity, radians_per_second, radians_per_second, rad_per_s, unit<std::ratio<1>, units::category::angular_velocity_unit>)
	//UNIT_ADD(angular_velocity, degrees_per_second, degrees_per_second, deg_per_s, compound_unit<angle::degrees, inverse<time::seconds>>)
	UNIT_ADD(angular_velocity, revolutions_per_minute, revolutions_per_minute, rpm, unit<std::ratio<2, 60>, radians_per_second, std::ratio<1>>)
     460:	b580      	push	{r7, lr}
     462:	b084      	sub	sp, #16
     464:	af00      	add	r7, sp, #0
     466:	ed87 0b00 	vstr	d0, [r7]

// Constants for the Linear Actuator Motor Controllers
constexpr units::angular_velocity::revolutions_per_minute_t \
    linear_actuator_min_velocity = 0_rpm;
constexpr units::angular_velocity::revolutions_per_minute_t \
    linear_actuator_max_velocity = 0.1_rpm;
     46a:	e9d7 0100 	ldrd	r0, r1, [r7]
     46e:	f005 febf 	bl	61f0 <__aeabi_d2f>
     472:	4602      	mov	r2, r0
     474:	f107 030c 	add.w	r3, r7, #12
     478:	ee00 2a10 	vmov	s0, r2
     47c:	4618      	mov	r0, r3
     47e:	f000 ffdd 	bl	143c <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     482:	68fb      	ldr	r3, [r7, #12]
     484:	4618      	mov	r0, r3
     486:	3710      	adds	r7, #16
     488:	46bd      	mov	sp, r7
     48a:	bd80      	pop	{r7, pc}

0000048c <units::literals::operator"" _rpm(unsigned long long)>:
     48c:	b580      	push	{r7, lr}
     48e:	b084      	sub	sp, #16
     490:	af00      	add	r7, sp, #0
     492:	e9c7 0100 	strd	r0, r1, [r7]
public:
  // We will utilize the revolutions per minute feature of the units library.
  // This will make setting the speed of motors more natural.
  static constexpr units::frequency::hertz_t kDefaultFrequency  = 50_Hz;
  static constexpr units::angular_velocity::\
      revolutions_per_minute_t kDefaultMinRotation              = 0_rpm;
     496:	e9d7 0100 	ldrd	r0, r1, [r7]
     49a:	f005 ffc1 	bl	6420 <__aeabi_ul2f>
     49e:	4602      	mov	r2, r0
     4a0:	f107 030c 	add.w	r3, r7, #12
     4a4:	ee00 2a10 	vmov	s0, r2
     4a8:	4618      	mov	r0, r3
     4aa:	f000 ffc7 	bl	143c <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     4ae:	68fb      	ldr	r3, [r7, #12]
     4b0:	4618      	mov	r0, r3
     4b2:	3710      	adds	r7, #16
     4b4:	46bd      	mov	sp, r7
     4b6:	bd80      	pop	{r7, pc}

000004b8 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     4b8:	b580      	push	{r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
     4c0:	ed87 0a00 	vstr	s0, [r7]
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	463a      	mov	r2, r7
     4c8:	4611      	mov	r1, r2
     4ca:	4618      	mov	r0, r3
     4cc:	f000 f805 	bl	4da <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	4618      	mov	r0, r3
     4d4:	3708      	adds	r7, #8
     4d6:	46bd      	mov	sp, r7
     4d8:	bd80      	pop	{r7, pc}

000004da <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     4da:	b480      	push	{r7}
     4dc:	b083      	sub	sp, #12
     4de:	af00      	add	r7, sp, #0
     4e0:	6078      	str	r0, [r7, #4]
     4e2:	6039      	str	r1, [r7, #0]
     4e4:	683b      	ldr	r3, [r7, #0]
     4e6:	681a      	ldr	r2, [r3, #0]
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	601a      	str	r2, [r3, #0]
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	4618      	mov	r0, r3
     4f0:	370c      	adds	r7, #12
     4f2:	46bd      	mov	sp, r7
     4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f8:	4770      	bx	lr

000004fa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     4fa:	b580      	push	{r7, lr}
     4fc:	b086      	sub	sp, #24
     4fe:	af00      	add	r7, sp, #0
     500:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     502:	6878      	ldr	r0, [r7, #4]
     504:	f000 f807 	bl	516 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     508:	eef0 7a40 	vmov.f32	s15, s0
	}
     50c:	eeb0 0a67 	vmov.f32	s0, s15
     510:	3718      	adds	r7, #24
     512:	46bd      	mov	sp, r7
     514:	bd80      	pop	{r7, pc}

00000516 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     516:	b480      	push	{r7}
     518:	b085      	sub	sp, #20
     51a:	af00      	add	r7, sp, #0
     51c:	60f8      	str	r0, [r7, #12]
     51e:	7239      	strb	r1, [r7, #8]
     520:	713a      	strb	r2, [r7, #4]
     522:	703b      	strb	r3, [r7, #0]
			return value;
     524:	68fb      	ldr	r3, [r7, #12]
     526:	681b      	ldr	r3, [r3, #0]
     528:	ee07 3a90 	vmov	s15, r3
		}
     52c:	eeb0 0a67 	vmov.f32	s0, s15
     530:	3714      	adds	r7, #20
     532:	46bd      	mov	sp, r7
     534:	f85d 7b04 	ldr.w	r7, [sp], #4
     538:	4770      	bx	lr

0000053a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     53a:	b580      	push	{r7, lr}
     53c:	b082      	sub	sp, #8
     53e:	af00      	add	r7, sp, #0
     540:	6078      	str	r0, [r7, #4]
     542:	ed87 0a00 	vstr	s0, [r7]
     546:	687b      	ldr	r3, [r7, #4]
     548:	463a      	mov	r2, r7
     54a:	4611      	mov	r1, r2
     54c:	4618      	mov	r0, r3
     54e:	f7ff ffc4 	bl	4da <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     552:	687b      	ldr	r3, [r7, #4]
     554:	4618      	mov	r0, r3
     556:	3708      	adds	r7, #8
     558:	46bd      	mov	sp, r7
     55a:	bd80      	pop	{r7, pc}

0000055c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     55c:	b580      	push	{r7, lr}
     55e:	ed2d 8b04 	vpush	{d8-d9}
     562:	b082      	sub	sp, #8
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	ed93 8a00 	vldr	s16, [r3]
     570:	683b      	ldr	r3, [r7, #0]
     572:	4618      	mov	r0, r3
     574:	f000 f849 	bl	60a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     578:	eef0 7a40 	vmov.f32	s15, s0
     57c:	ee78 7a67 	vsub.f32	s15, s16, s15
     580:	eeb0 0a67 	vmov.f32	s0, s15
     584:	f7ff ff26 	bl	3d4 <units::detail::abs(float)>
     588:	eef0 8a40 	vmov.f32	s17, s0
     58c:	f7ff ff03 	bl	396 <std::numeric_limits<float>::epsilon()>
     590:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     594:	687b      	ldr	r3, [r7, #4]
     596:	ed93 8a00 	vldr	s16, [r3]
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	4618      	mov	r0, r3
     59e:	f000 f834 	bl	60a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     5a2:	eef0 7a40 	vmov.f32	s15, s0
     5a6:	ee78 7a27 	vadd.f32	s15, s16, s15
     5aa:	eeb0 0a67 	vmov.f32	s0, s15
     5ae:	f7ff ff11 	bl	3d4 <units::detail::abs(float)>
     5b2:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     5b6:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     5ba:	eef4 8ae7 	vcmpe.f32	s17, s15
     5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5c2:	d419      	bmi.n	5f8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	ed93 8a00 	vldr	s16, [r3]
     5ca:	683b      	ldr	r3, [r7, #0]
     5cc:	4618      	mov	r0, r3
     5ce:	f000 f81c 	bl	60a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     5d2:	eef0 7a40 	vmov.f32	s15, s0
     5d6:	ee78 7a67 	vsub.f32	s15, s16, s15
     5da:	eeb0 0a67 	vmov.f32	s0, s15
     5de:	f7ff fef9 	bl	3d4 <units::detail::abs(float)>
     5e2:	eeb0 8a40 	vmov.f32	s16, s0
     5e6:	f7ff feca 	bl	37e <std::numeric_limits<float>::min()>
     5ea:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     5ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
     5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5f6:	d501      	bpl.n	5fc <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
     5f8:	2301      	movs	r3, #1
     5fa:	e000      	b.n	5fe <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
     5fc:	2300      	movs	r3, #0
		}
     5fe:	4618      	mov	r0, r3
     600:	3708      	adds	r7, #8
     602:	46bd      	mov	sp, r7
     604:	ecbd 8b04 	vpop	{d8-d9}
     608:	bd80      	pop	{r7, pc}

0000060a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     60a:	b580      	push	{r7, lr}
     60c:	b086      	sub	sp, #24
     60e:	af00      	add	r7, sp, #0
     610:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     612:	6878      	ldr	r0, [r7, #4]
     614:	f000 f807 	bl	626 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     618:	eef0 7a40 	vmov.f32	s15, s0
	}
     61c:	eeb0 0a67 	vmov.f32	s0, s15
     620:	3718      	adds	r7, #24
     622:	46bd      	mov	sp, r7
     624:	bd80      	pop	{r7, pc}

00000626 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     626:	b480      	push	{r7}
     628:	b085      	sub	sp, #20
     62a:	af00      	add	r7, sp, #0
     62c:	60f8      	str	r0, [r7, #12]
     62e:	7239      	strb	r1, [r7, #8]
     630:	713a      	strb	r2, [r7, #4]
     632:	703b      	strb	r3, [r7, #0]
			return value;
     634:	68fb      	ldr	r3, [r7, #12]
     636:	681b      	ldr	r3, [r3, #0]
     638:	ee07 3a90 	vmov	s15, r3
		}
     63c:	eeb0 0a67 	vmov.f32	s0, s15
     640:	3714      	adds	r7, #20
     642:	46bd      	mov	sp, r7
     644:	f85d 7b04 	ldr.w	r7, [sp], #4
     648:	4770      	bx	lr

0000064a <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     64a:	b580      	push	{r7, lr}
     64c:	b086      	sub	sp, #24
     64e:	af02      	add	r7, sp, #8
     650:	6078      	str	r0, [r7, #4]
     652:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     654:	683a      	ldr	r2, [r7, #0]
     656:	f107 030c 	add.w	r3, r7, #12
     65a:	9300      	str	r3, [sp, #0]
     65c:	2300      	movs	r3, #0
     65e:	2100      	movs	r1, #0
     660:	6878      	ldr	r0, [r7, #4]
     662:	f006 fa69 	bl	6b38 <_Unwind_VRS_Get>
      return val;
     666:	68fb      	ldr	r3, [r7, #12]
    }
     668:	4618      	mov	r0, r3
     66a:	3710      	adds	r7, #16
     66c:	46bd      	mov	sp, r7
     66e:	bd80      	pop	{r7, pc}

00000670 <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
     670:	b480      	push	{r7}
     672:	b085      	sub	sp, #20
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     67a:	60fb      	str	r3, [r7, #12]
  switch (target)
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	2b00      	cmp	r3, #0
     680:	d002      	beq.n	688 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     682:	2b01      	cmp	r3, #1
     684:	d003      	beq.n	68e <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     686:	e005      	b.n	694 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     68a:	60fb      	str	r3, [r7, #12]
     68c:	e002      	b.n	694 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     68e:	4b07      	ldr	r3, [pc, #28]	; (6ac <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     690:	60fb      	str	r3, [r7, #12]
     692:	bf00      	nop
  }
  return result;
     694:	68fb      	ldr	r3, [r7, #12]
}
     696:	4618      	mov	r0, r3
     698:	3714      	adds	r7, #20
     69a:	46bd      	mov	sp, r7
     69c:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a0:	4770      	bx	lr
     6a2:	bf00      	nop
     6a4:	000077d8 	.word	0x000077d8
     6a8:	000077e0 	.word	0x000077e0
     6ac:	000077ec 	.word	0x000077ec

000006b0 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b084      	sub	sp, #16
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
     6b8:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     6ba:	683b      	ldr	r3, [r7, #0]
     6bc:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     6be:	210f      	movs	r1, #15
     6c0:	6878      	ldr	r0, [r7, #4]
     6c2:	f7ff ffc2 	bl	64a <_Unwind_GetGR>
     6c6:	4603      	mov	r3, r0
     6c8:	f023 0301 	bic.w	r3, r3, #1
     6cc:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     6ce:	68fb      	ldr	r3, [r7, #12]
     6d0:	6819      	ldr	r1, [r3, #0]
     6d2:	68bb      	ldr	r3, [r7, #8]
     6d4:	3b04      	subs	r3, #4
     6d6:	461a      	mov	r2, r3
     6d8:	4806      	ldr	r0, [pc, #24]	; (6f4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     6da:	f004 ffab 	bl	5634 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     6de:	68fb      	ldr	r3, [r7, #12]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	1c5a      	adds	r2, r3, #1
     6e4:	68fb      	ldr	r3, [r7, #12]
     6e6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     6e8:	2300      	movs	r3, #0
}
     6ea:	4618      	mov	r0, r3
     6ec:	3710      	adds	r7, #16
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop
     6f4:	000077f8 	.word	0x000077f8

000006f8 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     6f8:	b580      	push	{r7, lr}
     6fa:	b084      	sub	sp, #16
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
     700:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     702:	683b      	ldr	r3, [r7, #0]
     704:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     706:	210f      	movs	r1, #15
     708:	6878      	ldr	r0, [r7, #4]
     70a:	f7ff ff9e 	bl	64a <_Unwind_GetGR>
     70e:	4603      	mov	r3, r0
     710:	f023 0301 	bic.w	r3, r3, #1
     714:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     716:	68bb      	ldr	r3, [r7, #8]
     718:	3b04      	subs	r3, #4
     71a:	4619      	mov	r1, r3
     71c:	4806      	ldr	r0, [pc, #24]	; (738 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     71e:	f004 ff89 	bl	5634 <printf>
  (*depth)++;
     722:	68fb      	ldr	r3, [r7, #12]
     724:	681b      	ldr	r3, [r3, #0]
     726:	1c5a      	adds	r2, r3, #1
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     72c:	2300      	movs	r3, #0
}
     72e:	4618      	mov	r0, r3
     730:	3710      	adds	r7, #16
     732:	46bd      	mov	sp, r7
     734:	bd80      	pop	{r7, pc}
     736:	bf00      	nop
     738:	00007808 	.word	0x00007808

0000073c <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     73c:	b580      	push	{r7, lr}
     73e:	b084      	sub	sp, #16
     740:	af00      	add	r7, sp, #0
     742:	4603      	mov	r3, r0
     744:	6039      	str	r1, [r7, #0]
     746:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     748:	2300      	movs	r3, #0
     74a:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     74c:	f107 030c 	add.w	r3, r7, #12
     750:	4619      	mov	r1, r3
     752:	481a      	ldr	r0, [pc, #104]	; (7bc <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     754:	f006 fde2 	bl	731c <_Unwind_Backtrace>
    if (final_address)
     758:	683b      	ldr	r3, [r7, #0]
     75a:	2b00      	cmp	r3, #0
     75c:	d005      	beq.n	76a <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     75e:	68fb      	ldr	r3, [r7, #12]
     760:	683a      	ldr	r2, [r7, #0]
     762:	4619      	mov	r1, r3
     764:	4816      	ldr	r0, [pc, #88]	; (7c0 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     766:	f004 ff65 	bl	5634 <printf>
    }

    if (show_make_command)
     76a:	79fb      	ldrb	r3, [r7, #7]
     76c:	2b00      	cmp	r3, #0
     76e:	d020      	beq.n	7b2 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     770:	4814      	ldr	r0, [pc, #80]	; (7c4 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     772:	f004 ff5f 	bl	5634 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     776:	4814      	ldr	r0, [pc, #80]	; (7c8 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     778:	f004 ff5c 	bl	5634 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     77c:	2000      	movs	r0, #0
     77e:	f7ff ff77 	bl	670 <sjsu::build::Stringify(sjsu::build::Target)>
     782:	4603      	mov	r3, r0
     784:	4619      	mov	r1, r3
     786:	4811      	ldr	r0, [pc, #68]	; (7cc <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     788:	f004 ff54 	bl	5634 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     78c:	f107 030c 	add.w	r3, r7, #12
     790:	4619      	mov	r1, r3
     792:	480f      	ldr	r0, [pc, #60]	; (7d0 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     794:	f006 fdc2 	bl	731c <_Unwind_Backtrace>
      if (final_address)
     798:	683b      	ldr	r3, [r7, #0]
     79a:	2b00      	cmp	r3, #0
     79c:	d003      	beq.n	7a6 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     79e:	6839      	ldr	r1, [r7, #0]
     7a0:	480c      	ldr	r0, [pc, #48]	; (7d4 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     7a2:	f004 ff47 	bl	5634 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     7a6:	480c      	ldr	r0, [pc, #48]	; (7d8 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     7a8:	f004 ff44 	bl	5634 <printf>
      printf(
     7ac:	480b      	ldr	r0, [pc, #44]	; (7dc <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     7ae:	f003 fe25 	bl	43fc <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     7b2:	bf00      	nop
     7b4:	3710      	adds	r7, #16
     7b6:	46bd      	mov	sp, r7
     7b8:	bd80      	pop	{r7, pc}
     7ba:	bf00      	nop
     7bc:	000006b1 	.word	0x000006b1
     7c0:	00007810 	.word	0x00007810
     7c4:	0000781c 	.word	0x0000781c
     7c8:	00007854 	.word	0x00007854
     7cc:	00007860 	.word	0x00007860
     7d0:	000006f9 	.word	0x000006f9
     7d4:	0000787c 	.word	0x0000787c
     7d8:	00007884 	.word	0x00007884
     7dc:	0000788c 	.word	0x0000788c

000007e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     7e0:	b490      	push	{r4, r7}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
     7e6:	6078      	str	r0, [r7, #4]
     7e8:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     7ea:	683b      	ldr	r3, [r7, #0]
     7ec:	e9d3 3400 	ldrd	r3, r4, [r3]
     7f0:	687a      	ldr	r2, [r7, #4]
     7f2:	e9c2 3400 	strd	r3, r4, [r2]
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	4618      	mov	r0, r3
     7fa:	3708      	adds	r7, #8
     7fc:	46bd      	mov	sp, r7
     7fe:	bc90      	pop	{r4, r7}
     800:	4770      	bx	lr
     802:	Address 0x0000000000000802 is out of bounds.


00000804 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
     80a:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	2200      	movs	r2, #0
     810:	4903      	ldr	r1, [pc, #12]	; (820 <sjsu::DefaultUptime()+0x1c>)
     812:	4618      	mov	r0, r3
     814:	f002 fef2 	bl	35fc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     818:	6878      	ldr	r0, [r7, #4]
     81a:	3708      	adds	r7, #8
     81c:	46bd      	mov	sp, r7
     81e:	bd80      	pop	{r7, pc}
     820:	100000f8 	.word	0x100000f8

00000824 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     824:	b480      	push	{r7}
     826:	b083      	sub	sp, #12
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
     82c:	2300      	movs	r3, #0
     82e:	4618      	mov	r0, r3
     830:	370c      	adds	r7, #12
     832:	46bd      	mov	sp, r7
     834:	f85d 7b04 	ldr.w	r7, [sp], #4
     838:	4770      	bx	lr

0000083a <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     83a:	b580      	push	{r7, lr}
     83c:	af00      	add	r7, sp, #0
     83e:	2000      	movs	r0, #0
     840:	f7ff fff0 	bl	824 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     844:	4603      	mov	r3, r0
     846:	4618      	mov	r0, r3
     848:	bd80      	pop	{r7, pc}
     84a:	Address 0x000000000000084a is out of bounds.


0000084c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     84c:	b590      	push	{r4, r7, lr}
     84e:	b093      	sub	sp, #76	; 0x4c
     850:	af00      	add	r7, sp, #0
     852:	e9c7 0102 	strd	r0, r1, [r7, #8]
     856:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     85a:	e9c7 3406 	strd	r3, r4, [r7, #24]
     85e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     862:	f107 0338 	add.w	r3, r7, #56	; 0x38
     866:	4618      	mov	r0, r3
     868:	f002 fc6b 	bl	3142 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     86c:	f107 0238 	add.w	r2, r7, #56	; 0x38
     870:	f107 0318 	add.w	r3, r7, #24
     874:	4611      	mov	r1, r2
     876:	4618      	mov	r0, r3
     878:	f002 fedb 	bl	3632 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     87c:	4603      	mov	r3, r0
     87e:	2b00      	cmp	r3, #0
     880:	d004      	beq.n	88c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     882:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     886:	e9c7 3404 	strd	r3, r4, [r7, #16]
     88a:	e011      	b.n	8b0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     88c:	4b19      	ldr	r3, [pc, #100]	; (8f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     88e:	681b      	ldr	r3, [r3, #0]
     890:	f107 0230 	add.w	r2, r7, #48	; 0x30
     894:	4610      	mov	r0, r2
     896:	4798      	blx	r3
     898:	463b      	mov	r3, r7
     89a:	f107 0218 	add.w	r2, r7, #24
     89e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     8a2:	4618      	mov	r0, r3
     8a4:	f003 f926 	bl	3af4 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     8a8:	e9d7 3400 	ldrd	r3, r4, [r7]
     8ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     8b0:	2301      	movs	r3, #1
     8b2:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     8b4:	4b0f      	ldr	r3, [pc, #60]	; (8f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
     8bc:	4610      	mov	r0, r2
     8be:	4798      	blx	r3
     8c0:	f107 0210 	add.w	r2, r7, #16
     8c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
     8c8:	4611      	mov	r1, r2
     8ca:	4618      	mov	r0, r3
     8cc:	f003 f93f 	bl	3b4e <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     8d0:	4603      	mov	r3, r0
     8d2:	2b00      	cmp	r3, #0
     8d4:	d009      	beq.n	8ea <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     8d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
     8da:	4618      	mov	r0, r3
     8dc:	f7ff ffa2 	bl	824 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     8e0:	4603      	mov	r3, r0
     8e2:	2b00      	cmp	r3, #0
     8e4:	d0e6      	beq.n	8b4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     8e6:	2300      	movs	r3, #0
     8e8:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     8ec:	4618      	mov	r0, r3
     8ee:	374c      	adds	r7, #76	; 0x4c
     8f0:	46bd      	mov	sp, r7
     8f2:	bd90      	pop	{r4, r7, pc}
     8f4:	10000000 	.word	0x10000000

000008f8 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	af00      	add	r7, sp, #0
     8fe:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     902:	e9d7 0100 	ldrd	r0, r1, [r7]
     906:	f7ff ffa1 	bl	84c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     90a:	bf00      	nop
     90c:	3708      	adds	r7, #8
     90e:	46bd      	mov	sp, r7
     910:	bd80      	pop	{r7, pc}
     912:	Address 0x0000000000000912 is out of bounds.


00000914 <sjsu::PID::PID(float*, float*, float*, float, float, float)>:
namespace sjsu
{
class PID
{
public:
  PID(float *Input, float *Output, float *Setpoint, float KP, float KI, float KD)
     914:	b480      	push	{r7}
     916:	b089      	sub	sp, #36	; 0x24
     918:	af00      	add	r7, sp, #0
     91a:	61f8      	str	r0, [r7, #28]
     91c:	61b9      	str	r1, [r7, #24]
     91e:	617a      	str	r2, [r7, #20]
     920:	613b      	str	r3, [r7, #16]
     922:	ed87 0a03 	vstr	s0, [r7, #12]
     926:	edc7 0a02 	vstr	s1, [r7, #8]
     92a:	ed87 1a01 	vstr	s2, [r7, #4]
  {
     92e:	69fb      	ldr	r3, [r7, #28]
     930:	2264      	movs	r2, #100	; 0x64
     932:	601a      	str	r2, [r3, #0]
     934:	69fb      	ldr	r3, [r7, #28]
     936:	f04f 0200 	mov.w	r2, #0
     93a:	625a      	str	r2, [r3, #36]	; 0x24
     93c:	69fb      	ldr	r3, [r7, #28]
     93e:	4a1b      	ldr	r2, [pc, #108]	; (9ac <sjsu::PID::PID(float*, float*, float*, float, float, float)+0x98>)
     940:	629a      	str	r2, [r3, #40]	; 0x28
    //stopwatch.Calibrate();
    //stopwatch.Start();
    input = Input;
     942:	69fb      	ldr	r3, [r7, #28]
     944:	69ba      	ldr	r2, [r7, #24]
     946:	609a      	str	r2, [r3, #8]
    output = Output;
     948:	69fb      	ldr	r3, [r7, #28]
     94a:	697a      	ldr	r2, [r7, #20]
     94c:	60da      	str	r2, [r3, #12]
    set_point = Setpoint;
     94e:	69fb      	ldr	r3, [r7, #28]
     950:	693a      	ldr	r2, [r7, #16]
     952:	611a      	str	r2, [r3, #16]
    Kp = KP;
     954:	69fb      	ldr	r3, [r7, #28]
     956:	68fa      	ldr	r2, [r7, #12]
     958:	615a      	str	r2, [r3, #20]
    Ki = KI * (sample_time/1000);
     95a:	69fb      	ldr	r3, [r7, #28]
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	4a14      	ldr	r2, [pc, #80]	; (9b0 <sjsu::PID::PID(float*, float*, float*, float, float, float)+0x9c>)
     960:	fba2 2303 	umull	r2, r3, r2, r3
     964:	099b      	lsrs	r3, r3, #6
     966:	ee07 3a90 	vmov	s15, r3
     96a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     96e:	edd7 7a02 	vldr	s15, [r7, #8]
     972:	ee67 7a27 	vmul.f32	s15, s14, s15
     976:	69fb      	ldr	r3, [r7, #28]
     978:	edc3 7a06 	vstr	s15, [r3, #24]
    Kd = KD / (sample_time/1000);
     97c:	69fb      	ldr	r3, [r7, #28]
     97e:	681b      	ldr	r3, [r3, #0]
     980:	4a0b      	ldr	r2, [pc, #44]	; (9b0 <sjsu::PID::PID(float*, float*, float*, float, float, float)+0x9c>)
     982:	fba2 2303 	umull	r2, r3, r2, r3
     986:	099b      	lsrs	r3, r3, #6
     988:	ee07 3a90 	vmov	s15, r3
     98c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     990:	edd7 6a01 	vldr	s13, [r7, #4]
     994:	eec6 7a87 	vdiv.f32	s15, s13, s14
     998:	69fb      	ldr	r3, [r7, #28]
     99a:	edc3 7a07 	vstr	s15, [r3, #28]
  }
     99e:	69fb      	ldr	r3, [r7, #28]
     9a0:	4618      	mov	r0, r3
     9a2:	3724      	adds	r7, #36	; 0x24
     9a4:	46bd      	mov	sp, r7
     9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     9aa:	4770      	bx	lr
     9ac:	437f0000 	.word	0x437f0000
     9b0:	10624dd3 	.word	0x10624dd3

000009b4 <sjsu::PID::Calculate()>:

  void Calculate()
     9b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
     9b8:	b08c      	sub	sp, #48	; 0x30
     9ba:	af04      	add	r7, sp, #16
     9bc:	6078      	str	r0, [r7, #4]
  {
    //printf("Kp: %f\n", Kp);
    float error = *set_point - *input;
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	691b      	ldr	r3, [r3, #16]
     9c2:	ed93 7a00 	vldr	s14, [r3]
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	689b      	ldr	r3, [r3, #8]
     9ca:	edd3 7a00 	vldr	s15, [r3]
     9ce:	ee77 7a67 	vsub.f32	s15, s14, s15
     9d2:	edc7 7a07 	vstr	s15, [r7, #28]
    float dinput = *input - last_input;
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	689b      	ldr	r3, [r3, #8]
     9da:	ed93 7a00 	vldr	s14, [r3]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	edd3 7a01 	vldr	s15, [r3, #4]
     9e4:	ee77 7a67 	vsub.f32	s15, s14, s15
     9e8:	edc7 7a06 	vstr	s15, [r7, #24]
    //printf("input: %f, setpoint: %f\n", *input, *set_point);
    //printf("error: %f, dinput: %f\n", error, dinput);
    float ki_adjust = Ki * error;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	edd3 7a06 	vldr	s15, [r3, #24]
     9f2:	ed97 7a07 	vldr	s14, [r7, #28]
     9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
     9fa:	edc7 7a05 	vstr	s15, [r7, #20]
    output_sum += ki_adjust;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	ed93 7a08 	vldr	s14, [r3, #32]
     a04:	edd7 7a05 	vldr	s15, [r7, #20]
     a08:	ee77 7a27 	vadd.f32	s15, s14, s15
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	edc3 7a08 	vstr	s15, [r3, #32]
    //printf("output sum: %f\n", output_sum);
    //output_sum -= Kp * dinput;

    output_sum = (output_sum > out_max) ? out_max:output_sum;
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	ed93 7a08 	vldr	s14, [r3, #32]
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
     a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
     a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a26:	dd02      	ble.n	a2e <sjsu::PID::Calculate()+0x7a>
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a2c:	e001      	b.n	a32 <sjsu::PID::Calculate()+0x7e>
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	6a1b      	ldr	r3, [r3, #32]
     a32:	687a      	ldr	r2, [r7, #4]
     a34:	6213      	str	r3, [r2, #32]
    output_sum = (output_sum < out_min) ? out_min:output_sum;
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	ed93 7a08 	vldr	s14, [r3, #32]
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
     a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
     a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a4a:	d502      	bpl.n	a52 <sjsu::PID::Calculate()+0x9e>
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a50:	e001      	b.n	a56 <sjsu::PID::Calculate()+0xa2>
     a52:	687b      	ldr	r3, [r7, #4]
     a54:	6a1b      	ldr	r3, [r3, #32]
     a56:	687a      	ldr	r2, [r7, #4]
     a58:	6213      	str	r3, [r2, #32]
    printf("output_sum: %f\n", output_sum);
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	6a1b      	ldr	r3, [r3, #32]
     a5e:	4618      	mov	r0, r3
     a60:	f005 fb6e 	bl	6140 <__aeabi_f2d>
     a64:	4603      	mov	r3, r0
     a66:	460c      	mov	r4, r1
     a68:	461a      	mov	r2, r3
     a6a:	4623      	mov	r3, r4
     a6c:	4835      	ldr	r0, [pc, #212]	; (b44 <sjsu::PID::Calculate()+0x190>)
     a6e:	f004 fde1 	bl	5634 <printf>

    float out = Kp * error;
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	edd3 7a05 	vldr	s15, [r3, #20]
     a78:	ed97 7a07 	vldr	s14, [r7, #28]
     a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
     a80:	edc7 7a04 	vstr	s15, [r7, #16]
    //printf("out: %f\n", out);
    //printf("Kd * dinput = %f * %f = %f\n", Kd, dinput, Kd*dinput);
    //printf("out + output_sum - (Kd * dinput) = %f + %f - (%f * %f) = %f\n", out, output_sum, Kd, dinput, (out+(output_sum -(Kd*dinput))));
    float kd_adjust = Kd * dinput;
     a84:	687b      	ldr	r3, [r7, #4]
     a86:	edd3 7a07 	vldr	s15, [r3, #28]
     a8a:	ed97 7a06 	vldr	s14, [r7, #24]
     a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
     a92:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("output_sum - kd_adjust = %f - %f = %f\n", output_sum, kd_adjust, output_sum - kd_adjust);
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	6a1b      	ldr	r3, [r3, #32]
     a9a:	4618      	mov	r0, r3
     a9c:	f005 fb50 	bl	6140 <__aeabi_f2d>
     aa0:	4680      	mov	r8, r0
     aa2:	4689      	mov	r9, r1
     aa4:	68f8      	ldr	r0, [r7, #12]
     aa6:	f005 fb4b 	bl	6140 <__aeabi_f2d>
     aaa:	4604      	mov	r4, r0
     aac:	460d      	mov	r5, r1
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	ed93 7a08 	vldr	s14, [r3, #32]
     ab4:	edd7 7a03 	vldr	s15, [r7, #12]
     ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
     abc:	ee17 0a90 	vmov	r0, s15
     ac0:	f005 fb3e 	bl	6140 <__aeabi_f2d>
     ac4:	4602      	mov	r2, r0
     ac6:	460b      	mov	r3, r1
     ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
     acc:	e9cd 4500 	strd	r4, r5, [sp]
     ad0:	4642      	mov	r2, r8
     ad2:	464b      	mov	r3, r9
     ad4:	481c      	ldr	r0, [pc, #112]	; (b48 <sjsu::PID::Calculate()+0x194>)
     ad6:	f004 fdad 	bl	5634 <printf>
    out += output_sum - kd_adjust;
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	ed93 7a08 	vldr	s14, [r3, #32]
     ae0:	edd7 7a03 	vldr	s15, [r7, #12]
     ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
     ae8:	ed97 7a04 	vldr	s14, [r7, #16]
     aec:	ee77 7a27 	vadd.f32	s15, s14, s15
     af0:	edc7 7a04 	vstr	s15, [r7, #16]
    //printf("out: %f\n", out);
    out = (out > out_max) ? out_max:out;
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
     afa:	ed97 7a04 	vldr	s14, [r7, #16]
     afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
     b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b06:	dd02      	ble.n	b0e <sjsu::PID::Calculate()+0x15a>
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b0c:	e000      	b.n	b10 <sjsu::PID::Calculate()+0x15c>
     b0e:	693b      	ldr	r3, [r7, #16]
     b10:	613b      	str	r3, [r7, #16]
    out = (out < out_min) ? out_min:out;
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
     b18:	ed97 7a04 	vldr	s14, [r7, #16]
     b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b24:	d502      	bpl.n	b2c <sjsu::PID::Calculate()+0x178>
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b2a:	e000      	b.n	b2e <sjsu::PID::Calculate()+0x17a>
     b2c:	693b      	ldr	r3, [r7, #16]
     b2e:	613b      	str	r3, [r7, #16]
    //printf("out: %f, output: %f\n", out,*output);
    *output = out;
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	68db      	ldr	r3, [r3, #12]
     b34:	693a      	ldr	r2, [r7, #16]
     b36:	601a      	str	r2, [r3, #0]
  return;
     b38:	bf00      	nop
  }
     b3a:	3720      	adds	r7, #32
     b3c:	46bd      	mov	sp, r7
     b3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
     b42:	bf00      	nop
     b44:	000078e0 	.word	0x000078e0
     b48:	000078f0 	.word	0x000078f0

00000b4c <sjsu::PID::SetLimits(float, float)>:
    Ki = KI * (sample_time/1000);
    Kd = KD / (sample_time/1000);
    return;
  }

  void SetLimits(float min, float max)
     b4c:	b580      	push	{r7, lr}
     b4e:	b084      	sub	sp, #16
     b50:	af00      	add	r7, sp, #0
     b52:	60f8      	str	r0, [r7, #12]
     b54:	ed87 0a02 	vstr	s0, [r7, #8]
     b58:	edc7 0a01 	vstr	s1, [r7, #4]
  {
    if(min < max)
     b5c:	ed97 7a02 	vldr	s14, [r7, #8]
     b60:	edd7 7a01 	vldr	s15, [r7, #4]
     b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
     b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b6c:	d506      	bpl.n	b7c <sjsu::PID::SetLimits(float, float)+0x30>
    {
      out_min = min;
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	68ba      	ldr	r2, [r7, #8]
     b72:	625a      	str	r2, [r3, #36]	; 0x24
      out_max = max;
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	687a      	ldr	r2, [r7, #4]
     b78:	629a      	str	r2, [r3, #40]	; 0x28
    }
    else
    {
        LOG_ERROR("Minimum value must be less than Maximum value");
    }
    return;
     b7a:	e006      	b.n	b8a <sjsu::PID::SetLimits(float, float)+0x3e>
        LOG_ERROR("Minimum value must be less than Maximum value");
     b7c:	2348      	movs	r3, #72	; 0x48
     b7e:	4a04      	ldr	r2, [pc, #16]	; (b90 <sjsu::PID::SetLimits(float, float)+0x44>)
     b80:	4904      	ldr	r1, [pc, #16]	; (b94 <sjsu::PID::SetLimits(float, float)+0x48>)
     b82:	4805      	ldr	r0, [pc, #20]	; (b98 <sjsu::PID::SetLimits(float, float)+0x4c>)
     b84:	f004 fd56 	bl	5634 <printf>
    return;
     b88:	bf00      	nop
  }
     b8a:	3710      	adds	r7, #16
     b8c:	46bd      	mov	sp, r7
     b8e:	bd80      	pop	{r7, pc}
     b90:	00008874 	.word	0x00008874
     b94:	0000828c 	.word	0x0000828c
     b98:	00007918 	.word	0x00007918

00000b9c <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     b9c:	b480      	push	{r7}
     b9e:	b083      	sub	sp, #12
     ba0:	af00      	add	r7, sp, #0
     ba2:	6078      	str	r0, [r7, #4]
  {
    return port_;
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	791b      	ldrb	r3, [r3, #4]
  }
     ba8:	4618      	mov	r0, r3
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     bb4:	b480      	push	{r7}
     bb6:	b083      	sub	sp, #12
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     bbc:	687b      	ldr	r3, [r7, #4]
     bbe:	795b      	ldrb	r3, [r3, #5]
  }
     bc0:	4618      	mov	r0, r3
     bc2:	370c      	adds	r7, #12
     bc4:	46bd      	mov	sp, r7
     bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     bca:	4770      	bx	lr

00000bcc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     bcc:	b480      	push	{r7}
     bce:	b083      	sub	sp, #12
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	f003 021f 	and.w	r2, r3, #31
     bda:	4907      	ldr	r1, [pc, #28]	; (bf8 <NVIC_EnableIRQ+0x2c>)
     bdc:	687b      	ldr	r3, [r7, #4]
     bde:	095b      	lsrs	r3, r3, #5
     be0:	2001      	movs	r0, #1
     be2:	fa00 f202 	lsl.w	r2, r0, r2
     be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     bea:	bf00      	nop
     bec:	370c      	adds	r7, #12
     bee:	46bd      	mov	sp, r7
     bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf4:	4770      	bx	lr
     bf6:	bf00      	nop
     bf8:	e000e100 	.word	0xe000e100

00000bfc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     bfc:	b480      	push	{r7}
     bfe:	b083      	sub	sp, #12
     c00:	af00      	add	r7, sp, #0
     c02:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	f003 021f 	and.w	r2, r3, #31
     c0a:	4907      	ldr	r1, [pc, #28]	; (c28 <NVIC_DisableIRQ+0x2c>)
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	095b      	lsrs	r3, r3, #5
     c10:	2001      	movs	r0, #1
     c12:	fa00 f202 	lsl.w	r2, r0, r2
     c16:	3320      	adds	r3, #32
     c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     c1c:	bf00      	nop
     c1e:	370c      	adds	r7, #12
     c20:	46bd      	mov	sp, r7
     c22:	f85d 7b04 	ldr.w	r7, [sp], #4
     c26:	4770      	bx	lr
     c28:	e000e100 	.word	0xe000e100

00000c2c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     c2c:	b480      	push	{r7}
     c2e:	b083      	sub	sp, #12
     c30:	af00      	add	r7, sp, #0
     c32:	6078      	str	r0, [r7, #4]
     c34:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	2b00      	cmp	r3, #0
     c3a:	da0b      	bge.n	c54 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c3c:	683b      	ldr	r3, [r7, #0]
     c3e:	b2da      	uxtb	r2, r3
     c40:	490d      	ldr	r1, [pc, #52]	; (c78 <NVIC_SetPriority+0x4c>)
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	f003 030f 	and.w	r3, r3, #15
     c48:	3b04      	subs	r3, #4
     c4a:	0152      	lsls	r2, r2, #5
     c4c:	b2d2      	uxtb	r2, r2
     c4e:	440b      	add	r3, r1
     c50:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     c52:	e00a      	b.n	c6a <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c54:	683b      	ldr	r3, [r7, #0]
     c56:	b2db      	uxtb	r3, r3
     c58:	4a08      	ldr	r2, [pc, #32]	; (c7c <NVIC_SetPriority+0x50>)
     c5a:	6879      	ldr	r1, [r7, #4]
     c5c:	4608      	mov	r0, r1
     c5e:	015b      	lsls	r3, r3, #5
     c60:	b2d9      	uxtb	r1, r3
     c62:	1813      	adds	r3, r2, r0
     c64:	460a      	mov	r2, r1
     c66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     c6a:	bf00      	nop
     c6c:	370c      	adds	r7, #12
     c6e:	46bd      	mov	sp, r7
     c70:	f85d 7b04 	ldr.w	r7, [sp], #4
     c74:	4770      	bx	lr
     c76:	bf00      	nop
     c78:	e000ed00 	.word	0xe000ed00
     c7c:	e000e100 	.word	0xe000e100

00000c80 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     c80:	b580      	push	{r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	af00      	add	r7, sp, #0
     c86:	6078      	str	r0, [r7, #4]
     c88:	460b      	mov	r3, r1
     c8a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     c8c:	4b08      	ldr	r3, [pc, #32]	; (cb0 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     c8e:	78f9      	ldrb	r1, [r7, #3]
     c90:	781a      	ldrb	r2, [r3, #0]
     c92:	785b      	ldrb	r3, [r3, #1]
     c94:	021b      	lsls	r3, r3, #8
     c96:	431a      	orrs	r2, r3
     c98:	2300      	movs	r3, #0
     c9a:	f362 030f 	bfi	r3, r2, #0, #16
     c9e:	461a      	mov	r2, r3
     ca0:	6878      	ldr	r0, [r7, #4]
     ca2:	f000 f859 	bl	d58 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     ca6:	bf00      	nop
     ca8:	3708      	adds	r7, #8
     caa:	46bd      	mov	sp, r7
     cac:	bd80      	pop	{r7, pc}
     cae:	bf00      	nop
     cb0:	00008294 	.word	0x00008294

00000cb4 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     cb4:	b580      	push	{r7, lr}
     cb6:	b082      	sub	sp, #8
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
     cbc:	460b      	mov	r3, r1
     cbe:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     cc0:	4b08      	ldr	r3, [pc, #32]	; (ce4 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     cc2:	78f9      	ldrb	r1, [r7, #3]
     cc4:	781a      	ldrb	r2, [r3, #0]
     cc6:	785b      	ldrb	r3, [r3, #1]
     cc8:	021b      	lsls	r3, r3, #8
     cca:	431a      	orrs	r2, r3
     ccc:	2300      	movs	r3, #0
     cce:	f362 030f 	bfi	r3, r2, #0, #16
     cd2:	461a      	mov	r2, r3
     cd4:	6878      	ldr	r0, [r7, #4]
     cd6:	f000 f83f 	bl	d58 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     cda:	bf00      	nop
     cdc:	3708      	adds	r7, #8
     cde:	46bd      	mov	sp, r7
     ce0:	bd80      	pop	{r7, pc}
     ce2:	bf00      	nop
     ce4:	00008298 	.word	0x00008298

00000ce8 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     ce8:	b580      	push	{r7, lr}
     cea:	b082      	sub	sp, #8
     cec:	af00      	add	r7, sp, #0
     cee:	6078      	str	r0, [r7, #4]
     cf0:	460b      	mov	r3, r1
     cf2:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     cf4:	78fb      	ldrb	r3, [r7, #3]
     cf6:	f083 0301 	eor.w	r3, r3, #1
     cfa:	b2db      	uxtb	r3, r3
     cfc:	4619      	mov	r1, r3
     cfe:	4b08      	ldr	r3, [pc, #32]	; (d20 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     d00:	781a      	ldrb	r2, [r3, #0]
     d02:	785b      	ldrb	r3, [r3, #1]
     d04:	021b      	lsls	r3, r3, #8
     d06:	431a      	orrs	r2, r3
     d08:	2300      	movs	r3, #0
     d0a:	f362 030f 	bfi	r3, r2, #0, #16
     d0e:	461a      	mov	r2, r3
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	f000 f821 	bl	d58 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     d16:	bf00      	nop
     d18:	3708      	adds	r7, #8
     d1a:	46bd      	mov	sp, r7
     d1c:	bd80      	pop	{r7, pc}
     d1e:	bf00      	nop
     d20:	0000829c 	.word	0x0000829c

00000d24 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     d24:	b580      	push	{r7, lr}
     d26:	b082      	sub	sp, #8
     d28:	af00      	add	r7, sp, #0
     d2a:	6078      	str	r0, [r7, #4]
     d2c:	460b      	mov	r3, r1
     d2e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     d30:	78f9      	ldrb	r1, [r7, #3]
     d32:	4b08      	ldr	r3, [pc, #32]	; (d54 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     d34:	781a      	ldrb	r2, [r3, #0]
     d36:	785b      	ldrb	r3, [r3, #1]
     d38:	021b      	lsls	r3, r3, #8
     d3a:	431a      	orrs	r2, r3
     d3c:	2300      	movs	r3, #0
     d3e:	f362 030f 	bfi	r3, r2, #0, #16
     d42:	461a      	mov	r2, r3
     d44:	6878      	ldr	r0, [r7, #4]
     d46:	f000 f807 	bl	d58 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     d4a:	bf00      	nop
     d4c:	3708      	adds	r7, #8
     d4e:	46bd      	mov	sp, r7
     d50:	bd80      	pop	{r7, pc}
     d52:	bf00      	nop
     d54:	000082a0 	.word	0x000082a0

00000d58 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     d58:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5a:	b087      	sub	sp, #28
     d5c:	af00      	add	r7, sp, #0
     d5e:	60f8      	str	r0, [r7, #12]
     d60:	460b      	mov	r3, r1
     d62:	80ba      	strh	r2, [r7, #4]
     d64:	72fb      	strb	r3, [r7, #11]
     d66:	68fb      	ldr	r3, [r7, #12]
     d68:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     d6a:	4b19      	ldr	r3, [pc, #100]	; (dd0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     d6c:	681c      	ldr	r4, [r3, #0]
     d6e:	693b      	ldr	r3, [r7, #16]
     d70:	4618      	mov	r0, r3
     d72:	f7ff ff13 	bl	b9c <sjsu::Pin::GetPort() const>
     d76:	4603      	mov	r3, r0
     d78:	461d      	mov	r5, r3
     d7a:	693b      	ldr	r3, [r7, #16]
     d7c:	4618      	mov	r0, r3
     d7e:	f7ff ff19 	bl	bb4 <sjsu::Pin::GetPin() const>
     d82:	4603      	mov	r3, r0
     d84:	461a      	mov	r2, r3
     d86:	016b      	lsls	r3, r5, #5
     d88:	4413      	add	r3, r2
     d8a:	009b      	lsls	r3, r3, #2
     d8c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	7af9      	ldrb	r1, [r7, #11]
     d92:	687a      	ldr	r2, [r7, #4]
     d94:	4618      	mov	r0, r3
     d96:	f002 fc73 	bl	3680 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     d9a:	4605      	mov	r5, r0
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     da0:	4b0b      	ldr	r3, [pc, #44]	; (dd0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     da2:	681c      	ldr	r4, [r3, #0]
     da4:	697b      	ldr	r3, [r7, #20]
     da6:	4618      	mov	r0, r3
     da8:	f7ff fef8 	bl	b9c <sjsu::Pin::GetPort() const>
     dac:	4603      	mov	r3, r0
     dae:	461e      	mov	r6, r3
     db0:	697b      	ldr	r3, [r7, #20]
     db2:	4618      	mov	r0, r3
     db4:	f7ff fefe 	bl	bb4 <sjsu::Pin::GetPin() const>
     db8:	4603      	mov	r3, r0
     dba:	461a      	mov	r2, r3
     dbc:	0173      	lsls	r3, r6, #5
     dbe:	4413      	add	r3, r2
     dc0:	009b      	lsls	r3, r3, #2
     dc2:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     dc4:	601d      	str	r5, [r3, #0]
  }
     dc6:	bf00      	nop
     dc8:	371c      	adds	r7, #28
     dca:	46bd      	mov	sp, r7
     dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dce:	bf00      	nop
     dd0:	10000100 	.word	0x10000100

00000dd4 <sjsu::Gpio::SetLow() const>:

  void SetHigh() const
  {
    Set(State::kHigh);
  }
  void SetLow() const
     dd4:	b580      	push	{r7, lr}
     dd6:	b082      	sub	sp, #8
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	3304      	adds	r3, #4
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	2100      	movs	r1, #0
     de6:	6878      	ldr	r0, [r7, #4]
     de8:	4798      	blx	r3
  }
     dea:	bf00      	nop
     dec:	3708      	adds	r7, #8
     dee:	46bd      	mov	sp, r7
     df0:	bd80      	pop	{r7, pc}

00000df2 <sjsu::Gpio::SetAsOutput() const>:
  void SetAsInput() const
  {
    SetDirection(Direction::kInput);
  }
  void SetAsOutput() const
     df2:	b580      	push	{r7, lr}
     df4:	b082      	sub	sp, #8
     df6:	af00      	add	r7, sp, #0
     df8:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	2101      	movs	r1, #1
     e02:	6878      	ldr	r0, [r7, #4]
     e04:	4798      	blx	r3
  }
     e06:	bf00      	nop
     e08:	3708      	adds	r7, #8
     e0a:	46bd      	mov	sp, r7
     e0c:	bd80      	pop	{r7, pc}

00000e0e <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     e0e:	b480      	push	{r7}
     e10:	af00      	add	r7, sp, #0
     e12:	bf00      	nop
     e14:	46bd      	mov	sp, r7
     e16:	f85d 7b04 	ldr.w	r7, [sp], #4
     e1a:	4770      	bx	lr

00000e1c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     e1c:	b580      	push	{r7, lr}
     e1e:	b082      	sub	sp, #8
     e20:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     e22:	4b09      	ldr	r3, [pc, #36]	; (e48 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	9300      	str	r3, [sp, #0]
     e28:	231d      	movs	r3, #29
     e2a:	4a08      	ldr	r2, [pc, #32]	; (e4c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     e2c:	4908      	ldr	r1, [pc, #32]	; (e50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     e2e:	4809      	ldr	r0, [pc, #36]	; (e54 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     e30:	f004 fc00 	bl	5634 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     e34:	4b04      	ldr	r3, [pc, #16]	; (e48 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	3b10      	subs	r3, #16
     e3a:	4618      	mov	r0, r3
     e3c:	f7ff fede 	bl	bfc <NVIC_DisableIRQ>
  }
     e40:	bf00      	nop
     e42:	46bd      	mov	sp, r7
     e44:	bd80      	pop	{r7, pc}
     e46:	bf00      	nop
     e48:	10000004 	.word	0x10000004
     e4c:	00008580 	.word	0x00008580
     e50:	000082a4 	.word	0x000082a4
     e54:	00007980 	.word	0x00007980

00000e58 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     e58:	b480      	push	{r7}
     e5a:	b083      	sub	sp, #12
     e5c:	af00      	add	r7, sp, #0
     e5e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     e60:	2340      	movs	r3, #64	; 0x40
     e62:	4618      	mov	r0, r3
     e64:	370c      	adds	r7, #12
     e66:	46bd      	mov	sp, r7
     e68:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6c:	4770      	bx	lr
     e6e:	Address 0x0000000000000e6e is out of bounds.


00000e70 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     e70:	b580      	push	{r7, lr}
     e72:	b084      	sub	sp, #16
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	4618      	mov	r0, r3
     e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
     e80:	461a      	mov	r2, r3
     e82:	2100      	movs	r1, #0
     e84:	f006 fc4f 	bl	7726 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     e88:	2300      	movs	r3, #0
     e8a:	60fb      	str	r3, [r7, #12]
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	2b0f      	cmp	r3, #15
     e90:	d808      	bhi.n	ea4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	68fa      	ldr	r2, [r7, #12]
     e96:	4911      	ldr	r1, [pc, #68]	; (edc <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     e9c:	68fb      	ldr	r3, [r7, #12]
     e9e:	3301      	adds	r3, #1
     ea0:	60fb      	str	r3, [r7, #12]
     ea2:	e7f3      	b.n	e8c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     ea4:	2310      	movs	r3, #16
     ea6:	60bb      	str	r3, [r7, #8]
     ea8:	6878      	ldr	r0, [r7, #4]
     eaa:	f7ff ffd5 	bl	e58 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     eae:	4602      	mov	r2, r0
     eb0:	68bb      	ldr	r3, [r7, #8]
     eb2:	4293      	cmp	r3, r2
     eb4:	bf34      	ite	cc
     eb6:	2301      	movcc	r3, #1
     eb8:	2300      	movcs	r3, #0
     eba:	b2db      	uxtb	r3, r3
     ebc:	2b00      	cmp	r3, #0
     ebe:	d008      	beq.n	ed2 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	68ba      	ldr	r2, [r7, #8]
     ec4:	4906      	ldr	r1, [pc, #24]	; (ee0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     eca:	68bb      	ldr	r3, [r7, #8]
     ecc:	3301      	adds	r3, #1
     ece:	60bb      	str	r3, [r7, #8]
     ed0:	e7ea      	b.n	ea8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     ed2:	bf00      	nop
    }
     ed4:	6878      	ldr	r0, [r7, #4]
     ed6:	3710      	adds	r7, #16
     ed8:	46bd      	mov	sp, r7
     eda:	bd80      	pop	{r7, pc}
     edc:	00000e0f 	.word	0x00000e0f
     ee0:	00000e1d 	.word	0x00000e1d

00000ee4 <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
     ee4:	b480      	push	{r7}
     ee6:	b083      	sub	sp, #12
     ee8:	af00      	add	r7, sp, #0
     eea:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
     eec:	687b      	ldr	r3, [r7, #4]
     eee:	3310      	adds	r3, #16
  }
     ef0:	4618      	mov	r0, r3
     ef2:	370c      	adds	r7, #12
     ef4:	46bd      	mov	sp, r7
     ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
     efa:	4770      	bx	lr

00000efc <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
     f04:	6878      	ldr	r0, [r7, #4]
     f06:	f7ff ffed 	bl	ee4 <sjsu::cortex::InterruptController::IrqToIndex(int)>
     f0a:	4603      	mov	r3, r0
     f0c:	009b      	lsls	r3, r3, #2
     f0e:	4a03      	ldr	r2, [pc, #12]	; (f1c <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
     f10:	4413      	add	r3, r2
  }
     f12:	4618      	mov	r0, r3
     f14:	3708      	adds	r7, #8
     f16:	46bd      	mov	sp, r7
     f18:	bd80      	pop	{r7, pc}
     f1a:	bf00      	nop
     f1c:	10000104 	.word	0x10000104

00000f20 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
     f20:	b084      	sub	sp, #16
     f22:	b590      	push	{r4, r7, lr}
     f24:	b085      	sub	sp, #20
     f26:	af00      	add	r7, sp, #0
     f28:	6078      	str	r0, [r7, #4]
     f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
     f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
     f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f34:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
     f36:	6abc      	ldr	r4, [r7, #40]	; 0x28
     f38:	68f8      	ldr	r0, [r7, #12]
     f3a:	f7ff ffdf 	bl	efc <sjsu::cortex::InterruptController::GetVector(int)>
     f3e:	4603      	mov	r3, r0
     f40:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
     f42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     f46:	2b00      	cmp	r3, #0
     f48:	d005      	beq.n	f56 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
     f4a:	68fb      	ldr	r3, [r7, #12]
     f4c:	2b00      	cmp	r3, #0
     f4e:	db02      	blt.n	f56 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
     f50:	68f8      	ldr	r0, [r7, #12]
     f52:	f7ff fe3b 	bl	bcc <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
     f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f58:	2b00      	cmp	r3, #0
     f5a:	db04      	blt.n	f66 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
     f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f5e:	4619      	mov	r1, r3
     f60:	68f8      	ldr	r0, [r7, #12]
     f62:	f7ff fe63 	bl	c2c <NVIC_SetPriority>
    }
  }
     f66:	bf00      	nop
     f68:	3714      	adds	r7, #20
     f6a:	46bd      	mov	sp, r7
     f6c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
     f70:	b004      	add	sp, #16
     f72:	4770      	bx	lr

00000f74 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
     f74:	b580      	push	{r7, lr}
     f76:	b082      	sub	sp, #8
     f78:	af00      	add	r7, sp, #0
     f7a:	6078      	str	r0, [r7, #4]
     f7c:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
     f7e:	6838      	ldr	r0, [r7, #0]
     f80:	f7ff fe3c 	bl	bfc <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
     f84:	6838      	ldr	r0, [r7, #0]
     f86:	f7ff ffb9 	bl	efc <sjsu::cortex::InterruptController::GetVector(int)>
     f8a:	4602      	mov	r2, r0
     f8c:	4b02      	ldr	r3, [pc, #8]	; (f98 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
     f8e:	6013      	str	r3, [r2, #0]
  }
     f90:	bf00      	nop
     f92:	3708      	adds	r7, #8
     f94:	46bd      	mov	sp, r7
     f96:	bd80      	pop	{r7, pc}
     f98:	00000e1d 	.word	0x00000e1d

00000f9c <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
  }
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  void SetDirection(Direction direction) const override
     f9c:	b590      	push	{r4, r7, lr}
     f9e:	b085      	sub	sp, #20
     fa0:	af00      	add	r7, sp, #0
     fa2:	6078      	str	r0, [r7, #4]
     fa4:	460b      	mov	r3, r1
     fa6:	70fb      	strb	r3, [r7, #3]
  {
    pin_.SetPinFunction(kGpioFunction);
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	3308      	adds	r3, #8
     fac:	2100      	movs	r1, #0
     fae:	4618      	mov	r0, r3
     fb0:	f7ff fe66 	bl	c80 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>
    volatile uint32_t * dir_register = &gpio_port[pin_.GetPort()]->DIR;
     fb4:	687b      	ldr	r3, [r7, #4]
     fb6:	3308      	adds	r3, #8
     fb8:	4618      	mov	r0, r3
     fba:	f7ff fdef 	bl	b9c <sjsu::Pin::GetPort() const>
     fbe:	4603      	mov	r3, r0
     fc0:	461a      	mov	r2, r3
     fc2:	4b15      	ldr	r3, [pc, #84]	; (1018 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x7c>)
     fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     fc8:	60fb      	str	r3, [r7, #12]

    if (direction == Direction::kInput)
     fca:	78fb      	ldrb	r3, [r7, #3]
     fcc:	2b00      	cmp	r3, #0
     fce:	d10f      	bne.n	ff0 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x54>
    {
      *dir_register = bit::Clear(*dir_register, pin_.GetPin());
     fd0:	68fb      	ldr	r3, [r7, #12]
     fd2:	681c      	ldr	r4, [r3, #0]
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	3308      	adds	r3, #8
     fd8:	4618      	mov	r0, r3
     fda:	f7ff fdeb 	bl	bb4 <sjsu::Pin::GetPin() const>
     fde:	4603      	mov	r3, r0
     fe0:	4619      	mov	r1, r3
     fe2:	4620      	mov	r0, r4
     fe4:	f002 fb5f 	bl	36a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     fe8:	4602      	mov	r2, r0
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	601a      	str	r2, [r3, #0]
    }
    else
    {
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
    }
  }
     fee:	e00e      	b.n	100e <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x72>
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	681c      	ldr	r4, [r3, #0]
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	3308      	adds	r3, #8
     ff8:	4618      	mov	r0, r3
     ffa:	f7ff fddb 	bl	bb4 <sjsu::Pin::GetPin() const>
     ffe:	4603      	mov	r3, r0
    1000:	4619      	mov	r1, r3
    1002:	4620      	mov	r0, r4
    1004:	f002 fb62 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1008:	4602      	mov	r2, r0
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	601a      	str	r2, [r3, #0]
  }
    100e:	bf00      	nop
    1010:	3714      	adds	r7, #20
    1012:	46bd      	mov	sp, r7
    1014:	bd90      	pop	{r4, r7, pc}
    1016:	bf00      	nop
    1018:	10000204 	.word	0x10000204

0000101c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) const override
    101c:	b590      	push	{r4, r7, lr}
    101e:	b083      	sub	sp, #12
    1020:	af00      	add	r7, sp, #0
    1022:	6078      	str	r0, [r7, #4]
    1024:	460b      	mov	r3, r1
    1026:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
    1028:	78fb      	ldrb	r3, [r7, #3]
    102a:	2b01      	cmp	r3, #1
    102c:	d115      	bne.n	105a <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x3e>
    {
      gpio_port[pin_.GetPort()]->SET = (1 << pin_.GetPin());
    102e:	687b      	ldr	r3, [r7, #4]
    1030:	3308      	adds	r3, #8
    1032:	4618      	mov	r0, r3
    1034:	f7ff fdbe 	bl	bb4 <sjsu::Pin::GetPin() const>
    1038:	4603      	mov	r3, r0
    103a:	461a      	mov	r2, r3
    103c:	2301      	movs	r3, #1
    103e:	4093      	lsls	r3, r2
    1040:	461c      	mov	r4, r3
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	3308      	adds	r3, #8
    1046:	4618      	mov	r0, r3
    1048:	f7ff fda8 	bl	b9c <sjsu::Pin::GetPort() const>
    104c:	4603      	mov	r3, r0
    104e:	461a      	mov	r2, r3
    1050:	4b0e      	ldr	r3, [pc, #56]	; (108c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
    1052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1056:	619c      	str	r4, [r3, #24]
    }
    else
    {
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
    }
  }
    1058:	e014      	b.n	1084 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x68>
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	3308      	adds	r3, #8
    105e:	4618      	mov	r0, r3
    1060:	f7ff fda8 	bl	bb4 <sjsu::Pin::GetPin() const>
    1064:	4603      	mov	r3, r0
    1066:	461a      	mov	r2, r3
    1068:	2301      	movs	r3, #1
    106a:	4093      	lsls	r3, r2
    106c:	461c      	mov	r4, r3
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	3308      	adds	r3, #8
    1072:	4618      	mov	r0, r3
    1074:	f7ff fd92 	bl	b9c <sjsu::Pin::GetPort() const>
    1078:	4603      	mov	r3, r0
    107a:	461a      	mov	r2, r3
    107c:	4b03      	ldr	r3, [pc, #12]	; (108c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
    107e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1082:	61dc      	str	r4, [r3, #28]
  }
    1084:	bf00      	nop
    1086:	370c      	adds	r7, #12
    1088:	46bd      	mov	sp, r7
    108a:	bd90      	pop	{r4, r7, pc}
    108c:	10000204 	.word	0x10000204

00001090 <sjsu::lpc40xx::Gpio::Toggle() const>:
  // Toggle the output of a GPIO output pin
  void Toggle() const override
    1090:	b590      	push	{r4, r7, lr}
    1092:	b083      	sub	sp, #12
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
  {
    gpio_port[pin_.GetPort()]->PIN ^= (1 << pin_.GetPin());
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	3308      	adds	r3, #8
    109c:	4618      	mov	r0, r3
    109e:	f7ff fd89 	bl	bb4 <sjsu::Pin::GetPin() const>
    10a2:	4603      	mov	r3, r0
    10a4:	461a      	mov	r2, r3
    10a6:	2301      	movs	r3, #1
    10a8:	fa03 f402 	lsl.w	r4, r3, r2
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	3308      	adds	r3, #8
    10b0:	4618      	mov	r0, r3
    10b2:	f7ff fd73 	bl	b9c <sjsu::Pin::GetPort() const>
    10b6:	4603      	mov	r3, r0
    10b8:	461a      	mov	r2, r3
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <sjsu::lpc40xx::Gpio::Toggle() const+0x40>)
    10bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    10c0:	695a      	ldr	r2, [r3, #20]
    10c2:	4621      	mov	r1, r4
    10c4:	404a      	eors	r2, r1
    10c6:	615a      	str	r2, [r3, #20]
  }
    10c8:	bf00      	nop
    10ca:	370c      	adds	r7, #12
    10cc:	46bd      	mov	sp, r7
    10ce:	bd90      	pop	{r4, r7, pc}
    10d0:	10000204 	.word	0x10000204

000010d4 <sjsu::lpc40xx::Gpio::Read() const>:
  // Returns the current State state of the pin
  bool Read() const override
    10d4:	b590      	push	{r4, r7, lr}
    10d6:	b083      	sub	sp, #12
    10d8:	af00      	add	r7, sp, #0
    10da:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port[pin_.GetPort()]->PIN, pin_.GetPin());
    10dc:	687b      	ldr	r3, [r7, #4]
    10de:	3308      	adds	r3, #8
    10e0:	4618      	mov	r0, r3
    10e2:	f7ff fd5b 	bl	b9c <sjsu::Pin::GetPort() const>
    10e6:	4603      	mov	r3, r0
    10e8:	461a      	mov	r2, r3
    10ea:	4b09      	ldr	r3, [pc, #36]	; (1110 <sjsu::lpc40xx::Gpio::Read() const+0x3c>)
    10ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    10f0:	695c      	ldr	r4, [r3, #20]
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	3308      	adds	r3, #8
    10f6:	4618      	mov	r0, r3
    10f8:	f7ff fd5c 	bl	bb4 <sjsu::Pin::GetPin() const>
    10fc:	4603      	mov	r3, r0
    10fe:	4619      	mov	r1, r3
    1100:	4620      	mov	r0, r4
    1102:	f002 faf5 	bl	36f0 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    1106:	4603      	mov	r3, r0
  }
    1108:	4618      	mov	r0, r3
    110a:	370c      	adds	r7, #12
    110c:	46bd      	mov	sp, r7
    110e:	bd90      	pop	{r4, r7, pc}
    1110:	10000204 	.word	0x10000204

00001114 <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
    1114:	b480      	push	{r7}
    1116:	b083      	sub	sp, #12
    1118:	af00      	add	r7, sp, #0
    111a:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	3308      	adds	r3, #8
  }
    1120:	4618      	mov	r0, r3
    1122:	370c      	adds	r7, #12
    1124:	46bd      	mov	sp, r7
    1126:	f85d 7b04 	ldr.w	r7, [sp], #4
    112a:	4770      	bx	lr

0000112c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck() const
    112c:	b580      	push	{r7, lr}
    112e:	b086      	sub	sp, #24
    1130:	af02      	add	r7, sp, #8
    1132:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = (interupt_port_ <= 1);
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	791b      	ldrb	r3, [r3, #4]
    1138:	2b01      	cmp	r3, #1
    113a:	bf94      	ite	ls
    113c:	2301      	movls	r3, #1
    113e:	2300      	movhi	r3, #0
    1140:	b2db      	uxtb	r3, r3
    1142:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(is_valid,
    1144:	7bfb      	ldrb	r3, [r7, #15]
    1146:	f083 0301 	eor.w	r3, r3, #1
    114a:	b2db      	uxtb	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	d00c      	beq.n	116a <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x3e>
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	3308      	adds	r3, #8
    1154:	4618      	mov	r0, r3
    1156:	f7ff fd21 	bl	b9c <sjsu::Pin::GetPort() const>
    115a:	4603      	mov	r3, r0
    115c:	9300      	str	r3, [sp, #0]
    115e:	237d      	movs	r3, #125	; 0x7d
    1160:	4a04      	ldr	r2, [pc, #16]	; (1174 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x48>)
    1162:	4905      	ldr	r1, [pc, #20]	; (1178 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x4c>)
    1164:	4805      	ldr	r0, [pc, #20]	; (117c <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x50>)
    1166:	f004 fa65 	bl	5634 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_.GetPort());
    return is_valid;
    116a:	7bfb      	ldrb	r3, [r7, #15]
  }
    116c:	4618      	mov	r0, r3
    116e:	3710      	adds	r7, #16
    1170:	46bd      	mov	sp, r7
    1172:	bd80      	pop	{r7, pc}
    1174:	000085d0 	.word	0x000085d0
    1178:	000082b8 	.word	0x000082b8
    117c:	00007a00 	.word	0x00007a00

00001180 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) const
    1180:	b5b0      	push	{r4, r5, r7, lr}
    1182:	b082      	sub	sp, #8
    1184:	af00      	add	r7, sp, #0
    1186:	6078      	str	r0, [r7, #4]
    1188:	6039      	str	r1, [r7, #0]
  {
    ValidPortCheck();
    118a:	6878      	ldr	r0, [r7, #4]
    118c:	f7ff ffce 	bl	112c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    interrupthandlers[interupt_port_][pin_.GetPin()] = function;
    1190:	683c      	ldr	r4, [r7, #0]
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	791b      	ldrb	r3, [r3, #4]
    1196:	461d      	mov	r5, r3
    1198:	687b      	ldr	r3, [r7, #4]
    119a:	3308      	adds	r3, #8
    119c:	4618      	mov	r0, r3
    119e:	f7ff fd09 	bl	bb4 <sjsu::Pin::GetPin() const>
    11a2:	4603      	mov	r3, r0
    11a4:	4619      	mov	r1, r3
    11a6:	4a04      	ldr	r2, [pc, #16]	; (11b8 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const+0x38>)
    11a8:	016b      	lsls	r3, r5, #5
    11aa:	440b      	add	r3, r1
    11ac:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  }
    11b0:	bf00      	nop
    11b2:	3708      	adds	r7, #8
    11b4:	46bd      	mov	sp, r7
    11b6:	bdb0      	pop	{r4, r5, r7, pc}
    11b8:	1000021c 	.word	0x1000021c

000011bc <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() const
    11bc:	b590      	push	{r4, r7, lr}
    11be:	b083      	sub	sp, #12
    11c0:	af00      	add	r7, sp, #0
    11c2:	6078      	str	r0, [r7, #4]
  {
    interrupthandlers[interupt_port_][pin_.GetPin()] = nullptr;
    11c4:	687b      	ldr	r3, [r7, #4]
    11c6:	791b      	ldrb	r3, [r3, #4]
    11c8:	461c      	mov	r4, r3
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	3308      	adds	r3, #8
    11ce:	4618      	mov	r0, r3
    11d0:	f7ff fcf0 	bl	bb4 <sjsu::Pin::GetPin() const>
    11d4:	4603      	mov	r3, r0
    11d6:	4619      	mov	r1, r3
    11d8:	4a04      	ldr	r2, [pc, #16]	; (11ec <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const+0x30>)
    11da:	0163      	lsls	r3, r4, #5
    11dc:	440b      	add	r3, r1
    11de:	2100      	movs	r1, #0
    11e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
    11e4:	bf00      	nop
    11e6:	370c      	adds	r7, #12
    11e8:	46bd      	mov	sp, r7
    11ea:	bd90      	pop	{r4, r7, pc}
    11ec:	1000021c 	.word	0x1000021c

000011f0 <unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
    11f0:	b480      	push	{r7}
    11f2:	b083      	sub	sp, #12
    11f4:	af00      	add	r7, sp, #0
    11f6:	4603      	mov	r3, r0
    11f8:	71fb      	strb	r3, [r7, #7]
{
  return static_cast<Type>(enum_type_value);
    11fa:	79fb      	ldrb	r3, [r7, #7]
}
    11fc:	4618      	mov	r0, r3
    11fe:	370c      	adds	r7, #12
    1200:	46bd      	mov	sp, r7
    1202:	f85d 7b04 	ldr.w	r7, [sp], #4
    1206:	4770      	bx	lr

00001208 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) const
    1208:	b580      	push	{r7, lr}
    120a:	b084      	sub	sp, #16
    120c:	af02      	add	r7, sp, #8
    120e:	6078      	str	r0, [r7, #4]
    1210:	460b      	mov	r3, r1
    1212:	70fb      	strb	r3, [r7, #3]
  {
    ValidPortCheck();
    1214:	6878      	ldr	r0, [r7, #4]
    1216:	f7ff ff89 	bl	112c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    switch (edge)
    121a:	78fb      	ldrb	r3, [r7, #3]
    121c:	2b01      	cmp	r3, #1
    121e:	d008      	beq.n	1232 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x2a>
    1220:	2b01      	cmp	r3, #1
    1222:	d302      	bcc.n	122a <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x22>
    1224:	2b02      	cmp	r3, #2
    1226:	d008      	beq.n	123a <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x32>
    1228:	e00e      	b.n	1248 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x40>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
    122a:	6878      	ldr	r0, [r7, #4]
    122c:	f000 f84e 	bl	12cc <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        break;
    1230:	e016      	b.n	1260 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
    1232:	6878      	ldr	r0, [r7, #4]
    1234:	f000 f878 	bl	1328 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
    1238:	e012      	b.n	1260 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
    123a:	6878      	ldr	r0, [r7, #4]
    123c:	f000 f846 	bl	12cc <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        SetEdgeFalling();
    1240:	6878      	ldr	r0, [r7, #4]
    1242:	f000 f871 	bl	1328 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
    1246:	e00b      	b.n	1260 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      default:
      {
        LOG_WARNING(
    1248:	78fb      	ldrb	r3, [r7, #3]
    124a:	4618      	mov	r0, r3
    124c:	f7ff ffd0 	bl	11f0 <unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)>
    1250:	4603      	mov	r3, r0
    1252:	9300      	str	r3, [sp, #0]
    1254:	23a9      	movs	r3, #169	; 0xa9
    1256:	4a04      	ldr	r2, [pc, #16]	; (1268 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x60>)
    1258:	4904      	ldr	r1, [pc, #16]	; (126c <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x64>)
    125a:	4805      	ldr	r0, [pc, #20]	; (1270 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x68>)
    125c:	f004 f9ea 	bl	5634 <printf>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
    1260:	bf00      	nop
    1262:	3708      	adds	r7, #8
    1264:	46bd      	mov	sp, r7
    1266:	bd80      	pop	{r7, pc}
    1268:	00008604 	.word	0x00008604
    126c:	000082c4 	.word	0x000082c4
    1270:	00007a90 	.word	0x00007a90

00001274 <sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:
    }
  }

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) const override
    1274:	b580      	push	{r7, lr}
    1276:	b084      	sub	sp, #16
    1278:	af00      	add	r7, sp, #0
    127a:	60f8      	str	r0, [r7, #12]
    127c:	60b9      	str	r1, [r7, #8]
    127e:	4613      	mov	r3, r2
    1280:	71fb      	strb	r3, [r7, #7]
  {
    ValidPortCheck();
    1282:	68f8      	ldr	r0, [r7, #12]
    1284:	f7ff ff52 	bl	112c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    SetInterruptRoutine(function);
    1288:	68b9      	ldr	r1, [r7, #8]
    128a:	68f8      	ldr	r0, [r7, #12]
    128c:	f7ff ff78 	bl	1180 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>
    SetInterruptEdge(edge);
    1290:	79fb      	ldrb	r3, [r7, #7]
    1292:	4619      	mov	r1, r3
    1294:	68f8      	ldr	r0, [r7, #12]
    1296:	f7ff ffb7 	bl	1208 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>
  }
    129a:	bf00      	nop
    129c:	3710      	adds	r7, #16
    129e:	46bd      	mov	sp, r7
    12a0:	bd80      	pop	{r7, pc}

000012a2 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() const override
    12a2:	b580      	push	{r7, lr}
    12a4:	b082      	sub	sp, #8
    12a6:	af00      	add	r7, sp, #0
    12a8:	6078      	str	r0, [r7, #4]
  {
    ValidPortCheck();
    12aa:	6878      	ldr	r0, [r7, #4]
    12ac:	f7ff ff3e 	bl	112c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    ClearInterruptRoutine();
    12b0:	6878      	ldr	r0, [r7, #4]
    12b2:	f7ff ff83 	bl	11bc <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>
    ClearEdgeRising();
    12b6:	6878      	ldr	r0, [r7, #4]
    12b8:	f000 f864 	bl	1384 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>
    ClearEdgeFalling();
    12bc:	6878      	ldr	r0, [r7, #4]
    12be:	f000 f88f 	bl	13e0 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>
  }
    12c2:	bf00      	nop
    12c4:	3708      	adds	r7, #8
    12c6:	46bd      	mov	sp, r7
    12c8:	bd80      	pop	{r7, pc}
    12ca:	Address 0x00000000000012ca is out of bounds.


000012cc <sjsu::lpc40xx::Gpio::SetEdgeRising() const>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising() const
    12cc:	b590      	push	{r4, r7, lr}
    12ce:	b083      	sub	sp, #12
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_.GetPin());
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	3308      	adds	r3, #8
    12d8:	4618      	mov	r0, r3
    12da:	f7ff fc6b 	bl	bb4 <sjsu::Pin::GetPin() const>
    12de:	4603      	mov	r3, r0
    12e0:	461a      	mov	r2, r3
    12e2:	2301      	movs	r3, #1
    12e4:	fa03 f002 	lsl.w	r0, r3, r2
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	791b      	ldrb	r3, [r3, #4]
    12ec:	4619      	mov	r1, r3
    12ee:	4a0d      	ldr	r2, [pc, #52]	; (1324 <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
    12f0:	460b      	mov	r3, r1
    12f2:	009b      	lsls	r3, r3, #2
    12f4:	440b      	add	r3, r1
    12f6:	009b      	lsls	r3, r3, #2
    12f8:	4413      	add	r3, r2
    12fa:	330c      	adds	r3, #12
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	681a      	ldr	r2, [r3, #0]
    1300:	4604      	mov	r4, r0
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	791b      	ldrb	r3, [r3, #4]
    1306:	4618      	mov	r0, r3
    1308:	4906      	ldr	r1, [pc, #24]	; (1324 <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
    130a:	4603      	mov	r3, r0
    130c:	009b      	lsls	r3, r3, #2
    130e:	4403      	add	r3, r0
    1310:	009b      	lsls	r3, r3, #2
    1312:	440b      	add	r3, r1
    1314:	330c      	adds	r3, #12
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	4322      	orrs	r2, r4
    131a:	601a      	str	r2, [r3, #0]
  }
    131c:	bf00      	nop
    131e:	370c      	adds	r7, #12
    1320:	46bd      	mov	sp, r7
    1322:	bd90      	pop	{r4, r7, pc}
    1324:	1000031c 	.word	0x1000031c

00001328 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling() const
    1328:	b590      	push	{r4, r7, lr}
    132a:	b083      	sub	sp, #12
    132c:	af00      	add	r7, sp, #0
    132e:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_.GetPin());
    1330:	687b      	ldr	r3, [r7, #4]
    1332:	3308      	adds	r3, #8
    1334:	4618      	mov	r0, r3
    1336:	f7ff fc3d 	bl	bb4 <sjsu::Pin::GetPin() const>
    133a:	4603      	mov	r3, r0
    133c:	461a      	mov	r2, r3
    133e:	2301      	movs	r3, #1
    1340:	fa03 f002 	lsl.w	r0, r3, r2
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	791b      	ldrb	r3, [r3, #4]
    1348:	4619      	mov	r1, r3
    134a:	4a0d      	ldr	r2, [pc, #52]	; (1380 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
    134c:	460b      	mov	r3, r1
    134e:	009b      	lsls	r3, r3, #2
    1350:	440b      	add	r3, r1
    1352:	009b      	lsls	r3, r3, #2
    1354:	4413      	add	r3, r2
    1356:	3310      	adds	r3, #16
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	681a      	ldr	r2, [r3, #0]
    135c:	4604      	mov	r4, r0
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	791b      	ldrb	r3, [r3, #4]
    1362:	4618      	mov	r0, r3
    1364:	4906      	ldr	r1, [pc, #24]	; (1380 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
    1366:	4603      	mov	r3, r0
    1368:	009b      	lsls	r3, r3, #2
    136a:	4403      	add	r3, r0
    136c:	009b      	lsls	r3, r3, #2
    136e:	440b      	add	r3, r1
    1370:	3310      	adds	r3, #16
    1372:	681b      	ldr	r3, [r3, #0]
    1374:	4322      	orrs	r2, r4
    1376:	601a      	str	r2, [r3, #0]
  }
    1378:	bf00      	nop
    137a:	370c      	adds	r7, #12
    137c:	46bd      	mov	sp, r7
    137e:	bd90      	pop	{r4, r7, pc}
    1380:	1000031c 	.word	0x1000031c

00001384 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising() const
    1384:	b590      	push	{r4, r7, lr}
    1386:	b083      	sub	sp, #12
    1388:	af00      	add	r7, sp, #0
    138a:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_.GetPin());
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	3308      	adds	r3, #8
    1390:	4618      	mov	r0, r3
    1392:	f7ff fc0f 	bl	bb4 <sjsu::Pin::GetPin() const>
    1396:	4603      	mov	r3, r0
    1398:	461a      	mov	r2, r3
    139a:	2301      	movs	r3, #1
    139c:	4093      	lsls	r3, r2
    139e:	43d8      	mvns	r0, r3
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	791b      	ldrb	r3, [r3, #4]
    13a4:	4619      	mov	r1, r3
    13a6:	4a0d      	ldr	r2, [pc, #52]	; (13dc <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
    13a8:	460b      	mov	r3, r1
    13aa:	009b      	lsls	r3, r3, #2
    13ac:	440b      	add	r3, r1
    13ae:	009b      	lsls	r3, r3, #2
    13b0:	4413      	add	r3, r2
    13b2:	330c      	adds	r3, #12
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	4604      	mov	r4, r0
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	791b      	ldrb	r3, [r3, #4]
    13be:	4618      	mov	r0, r3
    13c0:	4906      	ldr	r1, [pc, #24]	; (13dc <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
    13c2:	4603      	mov	r3, r0
    13c4:	009b      	lsls	r3, r3, #2
    13c6:	4403      	add	r3, r0
    13c8:	009b      	lsls	r3, r3, #2
    13ca:	440b      	add	r3, r1
    13cc:	330c      	adds	r3, #12
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	4022      	ands	r2, r4
    13d2:	601a      	str	r2, [r3, #0]
  }
    13d4:	bf00      	nop
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	bd90      	pop	{r4, r7, pc}
    13dc:	1000031c 	.word	0x1000031c

000013e0 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling() const
    13e0:	b590      	push	{r4, r7, lr}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_.GetPin());
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	3308      	adds	r3, #8
    13ec:	4618      	mov	r0, r3
    13ee:	f7ff fbe1 	bl	bb4 <sjsu::Pin::GetPin() const>
    13f2:	4603      	mov	r3, r0
    13f4:	461a      	mov	r2, r3
    13f6:	2301      	movs	r3, #1
    13f8:	4093      	lsls	r3, r2
    13fa:	43d8      	mvns	r0, r3
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	791b      	ldrb	r3, [r3, #4]
    1400:	4619      	mov	r1, r3
    1402:	4a0d      	ldr	r2, [pc, #52]	; (1438 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
    1404:	460b      	mov	r3, r1
    1406:	009b      	lsls	r3, r3, #2
    1408:	440b      	add	r3, r1
    140a:	009b      	lsls	r3, r3, #2
    140c:	4413      	add	r3, r2
    140e:	3310      	adds	r3, #16
    1410:	681b      	ldr	r3, [r3, #0]
    1412:	681a      	ldr	r2, [r3, #0]
    1414:	4604      	mov	r4, r0
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	791b      	ldrb	r3, [r3, #4]
    141a:	4618      	mov	r0, r3
    141c:	4906      	ldr	r1, [pc, #24]	; (1438 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
    141e:	4603      	mov	r3, r0
    1420:	009b      	lsls	r3, r3, #2
    1422:	4403      	add	r3, r0
    1424:	009b      	lsls	r3, r3, #2
    1426:	440b      	add	r3, r1
    1428:	3310      	adds	r3, #16
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	4022      	ands	r2, r4
    142e:	601a      	str	r2, [r3, #0]
  }
    1430:	bf00      	nop
    1432:	370c      	adds	r7, #12
    1434:	46bd      	mov	sp, r7
    1436:	bd90      	pop	{r4, r7, pc}
    1438:	1000031c 	.word	0x1000031c

0000143c <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
    1442:	6078      	str	r0, [r7, #4]
    1444:	ed87 0a00 	vstr	s0, [r7]
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	463a      	mov	r2, r7
    144c:	4611      	mov	r1, r2
    144e:	4618      	mov	r0, r3
    1450:	f7ff f843 	bl	4da <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	4618      	mov	r0, r3
    1458:	3708      	adds	r7, #8
    145a:	46bd      	mov	sp, r7
    145c:	bd80      	pop	{r7, pc}
    145e:	Address 0x000000000000145e is out of bounds.


00001460 <sjsu::MotorController::MotorController(sjsu::Pwm&, sjsu::Gpio&)>:
  static constexpr std::chrono::microseconds kDefaultMinPulse   = 0us;
  static constexpr std::chrono::microseconds kDefaultMaxPulse   = 2000us;

  // References to the PWM pin and the direction gpio are passed into the 
  // constructor so that the class has direct access to them.
  explicit constexpr MotorController(sjsu::Pwm & pwm, sjsu::Gpio & gpio)
    1460:	b590      	push	{r4, r7, lr}
    1462:	b087      	sub	sp, #28
    1464:	af00      	add	r7, sp, #0
    1466:	60f8      	str	r0, [r7, #12]
    1468:	60b9      	str	r1, [r7, #8]
    146a:	607a      	str	r2, [r7, #4]
    direction_pin_(gpio),
    waveform_period_(0),
    pulse_lower_bound_(kDefaultMinPulse),
    pulse_upper_bound_(kDefaultMaxPulse),
    min_rotation_(kDefaultMinRotation),
    max_rotation_(kDefaultMaxRotation)
    146c:	4a18      	ldr	r2, [pc, #96]	; (14d0 <sjsu::MotorController::MotorController(sjsu::Pwm&, sjsu::Gpio&)+0x70>)
    146e:	68fb      	ldr	r3, [r7, #12]
    1470:	601a      	str	r2, [r3, #0]
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	68ba      	ldr	r2, [r7, #8]
    1476:	605a      	str	r2, [r3, #4]
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	687a      	ldr	r2, [r7, #4]
    147c:	609a      	str	r2, [r3, #8]
    147e:	68fb      	ldr	r3, [r7, #12]
    1480:	f103 0210 	add.w	r2, r3, #16
    1484:	2300      	movs	r3, #0
    1486:	617b      	str	r3, [r7, #20]
    1488:	f107 0314 	add.w	r3, r7, #20
    148c:	4619      	mov	r1, r3
    148e:	4610      	mov	r0, r2
    1490:	f001 fe3c 	bl	310c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    1494:	68fa      	ldr	r2, [r7, #12]
    1496:	f04f 0300 	mov.w	r3, #0
    149a:	f04f 0400 	mov.w	r4, #0
    149e:	e9c2 3406 	strd	r3, r4, [r2, #24]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    14a8:	f04f 0400 	mov.w	r4, #0
    14ac:	e9c2 3408 	strd	r3, r4, [r2, #32]
    14b0:	68fb      	ldr	r3, [r7, #12]
    14b2:	f04f 0200 	mov.w	r2, #0
    14b6:	629a      	str	r2, [r3, #40]	; 0x28
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	f04f 0200 	mov.w	r2, #0
    14be:	62da      	str	r2, [r3, #44]	; 0x2c
    14c0:	68fb      	ldr	r3, [r7, #12]
    14c2:	4a04      	ldr	r2, [pc, #16]	; (14d4 <sjsu::MotorController::MotorController(sjsu::Pwm&, sjsu::Gpio&)+0x74>)
    14c4:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
    14c6:	68fb      	ldr	r3, [r7, #12]
    14c8:	4618      	mov	r0, r3
    14ca:	371c      	adds	r7, #28
    14cc:	46bd      	mov	sp, r7
    14ce:	bd90      	pop	{r4, r7, pc}
    14d0:	000084f4 	.word	0x000084f4
    14d4:	41200000 	.word	0x41200000

000014d8 <sjsu::MotorController::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // This initializes the PWM with the frequency passed in. If no arguments are 
  // given, it will default to 50 Hz
  virtual void Initialize(
    14d8:	b580      	push	{r7, lr}
    14da:	b082      	sub	sp, #8
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
    14e0:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    mc_pwm_.Initialize(frequency);
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	685a      	ldr	r2, [r3, #4]
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	685b      	ldr	r3, [r3, #4]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	6839      	ldr	r1, [r7, #0]
    14f0:	4610      	mov	r0, r2
    14f2:	4798      	blx	r3
    SetFrequency(frequency);
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	681b      	ldr	r3, [r3, #0]
    14f8:	3304      	adds	r3, #4
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	6839      	ldr	r1, [r7, #0]
    14fe:	6878      	ldr	r0, [r7, #4]
    1500:	4798      	blx	r3
  }
    1502:	bf00      	nop
    1504:	3708      	adds	r7, #8
    1506:	46bd      	mov	sp, r7
    1508:	bd80      	pop	{r7, pc}

0000150a <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    150a:	b480      	push	{r7}
    150c:	b083      	sub	sp, #12
    150e:	af00      	add	r7, sp, #0
    1510:	6078      	str	r0, [r7, #4]
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	ee07 3a90 	vmov	s15, r3
    151a:	eeb0 0a67 	vmov.f32	s0, s15
    151e:	370c      	adds	r7, #12
    1520:	46bd      	mov	sp, r7
    1522:	f85d 7b04 	ldr.w	r7, [sp], #4
    1526:	4770      	bx	lr

00001528 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    1528:	b580      	push	{r7, lr}
    152a:	b086      	sub	sp, #24
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    1530:	6878      	ldr	r0, [r7, #4]
    1532:	f002 f8f5 	bl	3720 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    1536:	eef0 7a40 	vmov.f32	s15, s0
	}
    153a:	eeb0 0a67 	vmov.f32	s0, s15
    153e:	3718      	adds	r7, #24
    1540:	46bd      	mov	sp, r7
    1542:	bd80      	pop	{r7, pc}

00001544 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1544:	b580      	push	{r7, lr}
    1546:	ed2d 8b02 	vpush	{d8}
    154a:	b084      	sub	sp, #16
    154c:	af00      	add	r7, sp, #0
    154e:	6078      	str	r0, [r7, #4]
    1550:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	4618      	mov	r0, r3
    1556:	f7ff ffd8 	bl	150a <units::linear_scale<float>::operator()() const>
    155a:	eeb0 8a40 	vmov.f32	s16, s0
    155e:	683b      	ldr	r3, [r7, #0]
    1560:	4618      	mov	r0, r3
    1562:	f7ff ffd2 	bl	150a <units::linear_scale<float>::operator()() const>
    1566:	eef0 7a40 	vmov.f32	s15, s0
    156a:	edc7 7a03 	vstr	s15, [r7, #12]
    156e:	f107 030c 	add.w	r3, r7, #12
    1572:	4618      	mov	r0, r3
    1574:	f7ff ffd8 	bl	1528 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1578:	eeb0 7a40 	vmov.f32	s14, s0
    157c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1580:	f107 0308 	add.w	r3, r7, #8
    1584:	eeb0 0a67 	vmov.f32	s0, s15
    1588:	4618      	mov	r0, r3
    158a:	f000 f807 	bl	159c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    158e:	68bb      	ldr	r3, [r7, #8]
	}
    1590:	4618      	mov	r0, r3
    1592:	3710      	adds	r7, #16
    1594:	46bd      	mov	sp, r7
    1596:	ecbd 8b02 	vpop	{d8}
    159a:	bd80      	pop	{r7, pc}

0000159c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    159c:	b580      	push	{r7, lr}
    159e:	b082      	sub	sp, #8
    15a0:	af00      	add	r7, sp, #0
    15a2:	6078      	str	r0, [r7, #4]
    15a4:	ed87 0a00 	vstr	s0, [r7]
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	463a      	mov	r2, r7
    15ac:	4611      	mov	r1, r2
    15ae:	4618      	mov	r0, r3
    15b0:	f7fe ff93 	bl	4da <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	4618      	mov	r0, r3
    15b8:	3708      	adds	r7, #8
    15ba:	46bd      	mov	sp, r7
    15bc:	bd80      	pop	{r7, pc}

000015be <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    15be:	b580      	push	{r7, lr}
    15c0:	b082      	sub	sp, #8
    15c2:	af00      	add	r7, sp, #0
    15c4:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    15c6:	6878      	ldr	r0, [r7, #4]
    15c8:	f002 f8c4 	bl	3754 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    15cc:	4603      	mov	r3, r0
		}
    15ce:	4618      	mov	r0, r3
    15d0:	3708      	adds	r7, #8
    15d2:	46bd      	mov	sp, r7
    15d4:	bd80      	pop	{r7, pc}

000015d6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    15d6:	b490      	push	{r4, r7}
    15d8:	b082      	sub	sp, #8
    15da:	af00      	add	r7, sp, #0
    15dc:	6078      	str	r0, [r7, #4]
    15de:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    15e0:	683b      	ldr	r3, [r7, #0]
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	f04f 0400 	mov.w	r4, #0
    15e8:	687a      	ldr	r2, [r7, #4]
    15ea:	e9c2 3400 	strd	r3, r4, [r2]
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	4618      	mov	r0, r3
    15f2:	3708      	adds	r7, #8
    15f4:	46bd      	mov	sp, r7
    15f6:	bc90      	pop	{r4, r7}
    15f8:	4770      	bx	lr

000015fa <sjsu::MotorController::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // This will set the frequency to the value specified. If no arguments are 
  // given, it will default to 50 Hz
  virtual void SetFrequency(
    15fa:	b590      	push	{r4, r7, lr}
    15fc:	b089      	sub	sp, #36	; 0x24
    15fe:	af00      	add	r7, sp, #0
    1600:	6078      	str	r0, [r7, #4]
    1602:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    mc_pwm_.SetFrequency(frequency);
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	685a      	ldr	r2, [r3, #4]
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	685b      	ldr	r3, [r3, #4]
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	330c      	adds	r3, #12
    1610:	681b      	ldr	r3, [r3, #0]
    1612:	6839      	ldr	r1, [r7, #0]
    1614:	4610      	mov	r0, r2
    1616:	4798      	blx	r3
    waveform_period_ =
        std::chrono::microseconds((1_MHz / frequency).to<uint32_t>());
    1618:	f04f 0001 	mov.w	r0, #1
    161c:	f04f 0100 	mov.w	r1, #0
    1620:	f7fe ff08 	bl	434 <units::literals::operator"" _MHz(unsigned long long)>
    1624:	4603      	mov	r3, r0
    1626:	61fb      	str	r3, [r7, #28]
    1628:	463a      	mov	r2, r7
    162a:	f107 031c 	add.w	r3, r7, #28
    162e:	4611      	mov	r1, r2
    1630:	4618      	mov	r0, r3
    1632:	f7ff ff87 	bl	1544 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1636:	4603      	mov	r3, r0
    1638:	61bb      	str	r3, [r7, #24]
    163a:	f107 0318 	add.w	r3, r7, #24
    163e:	4618      	mov	r0, r3
    1640:	f7ff ffbd 	bl	15be <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1644:	4603      	mov	r3, r0
    1646:	617b      	str	r3, [r7, #20]
    1648:	f107 0214 	add.w	r2, r7, #20
    164c:	f107 0308 	add.w	r3, r7, #8
    1650:	4611      	mov	r1, r2
    1652:	4618      	mov	r0, r3
    1654:	f7ff ffbf 	bl	15d6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    waveform_period_ =
    1658:	687a      	ldr	r2, [r7, #4]
    165a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    165e:	e9c2 3404 	strd	r3, r4, [r2, #16]
  }
    1662:	bf00      	nop
    1664:	3724      	adds	r7, #36	; 0x24
    1666:	46bd      	mov	sp, r7
    1668:	bd90      	pop	{r4, r7, pc}

0000166a <sjsu::MotorController::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  // This sets the bounds of the pulse width of the PWM signal in the case that
  // there is an operational range of duty cycles. It will default to 0 us and 
  // 2000 us, respectively, in the case that no inputs are specified.
  virtual void SetPulseBounds(std::chrono::microseconds lower=kDefaultMinPulse,
    166a:	b490      	push	{r4, r7}
    166c:	b084      	sub	sp, #16
    166e:	af00      	add	r7, sp, #0
    1670:	60f8      	str	r0, [r7, #12]
    1672:	e9c7 2300 	strd	r2, r3, [r7]
                              std::chrono::microseconds upper=kDefaultMaxPulse)
  {
    pulse_lower_bound_ = lower;
    1676:	68fa      	ldr	r2, [r7, #12]
    1678:	e9d7 3400 	ldrd	r3, r4, [r7]
    167c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    pulse_upper_bound_ = upper;
    1680:	68fa      	ldr	r2, [r7, #12]
    1682:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1686:	e9c2 3408 	strd	r3, r4, [r2, #32]
  }
    168a:	bf00      	nop
    168c:	3710      	adds	r7, #16
    168e:	46bd      	mov	sp, r7
    1690:	bc90      	pop	{r4, r7}
    1692:	4770      	bx	lr

00001694 <sjsu::MotorController::SetAngularVelocityBounds(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // This sets the minimum and maximum speeds at which the motor will operate. 
  // It will default to 0 rpm and 10 rpm, respectively, if no arguments are 
  // passed.
  virtual void SetAngularVelocityBounds(
    1694:	b480      	push	{r7}
    1696:	b085      	sub	sp, #20
    1698:	af00      	add	r7, sp, #0
    169a:	60f8      	str	r0, [r7, #12]
    169c:	60b9      	str	r1, [r7, #8]
    169e:	607a      	str	r2, [r7, #4]
      units::angular_velocity::revolutions_per_minute_t min=kDefaultMinRotation,
      units::angular_velocity::revolutions_per_minute_t max=kDefaultMaxRotation)
  {
    min_rotation_ = min;
    16a0:	68fb      	ldr	r3, [r7, #12]
    16a2:	68ba      	ldr	r2, [r7, #8]
    16a4:	629a      	str	r2, [r3, #40]	; 0x28
    max_rotation_ = max;
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	687a      	ldr	r2, [r7, #4]
    16aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
    16ac:	bf00      	nop
    16ae:	3714      	adds	r7, #20
    16b0:	46bd      	mov	sp, r7
    16b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b6:	4770      	bx	lr

000016b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    16b8:	b490      	push	{r4, r7}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
	{ return __r; }
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	e9d3 3400 	ldrd	r3, r4, [r3]
    16c6:	4618      	mov	r0, r3
    16c8:	4621      	mov	r1, r4
    16ca:	3708      	adds	r7, #8
    16cc:	46bd      	mov	sp, r7
    16ce:	bc90      	pop	{r4, r7}
    16d0:	4770      	bx	lr

000016d2 <sjsu::MotorController::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  virtual void SetPulseWidthInMicroseconds(
    16d2:	b5b0      	push	{r4, r5, r7, lr}
    16d4:	ed2d 8b02 	vpush	{d8}
    16d8:	b084      	sub	sp, #16
    16da:	af00      	add	r7, sp, #0
    16dc:	60f8      	str	r0, [r7, #12]
    16de:	e9c7 2300 	strd	r2, r3, [r7]
      std::chrono::microseconds pulse_width)
  {
    mc_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    16e2:	68fb      	ldr	r3, [r7, #12]
    16e4:	685d      	ldr	r5, [r3, #4]
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	685b      	ldr	r3, [r3, #4]
                            static_cast<float>(waveform_period_.count()));
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	3304      	adds	r3, #4
    16ee:	681c      	ldr	r4, [r3, #0]
    mc_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    16f0:	463b      	mov	r3, r7
    16f2:	4618      	mov	r0, r3
    16f4:	f7ff ffe0 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    16f8:	4602      	mov	r2, r0
    16fa:	460b      	mov	r3, r1
    16fc:	4610      	mov	r0, r2
    16fe:	4619      	mov	r1, r3
    1700:	f004 fe96 	bl	6430 <__aeabi_l2f>
    1704:	ee08 0a10 	vmov	s16, r0
                            static_cast<float>(waveform_period_.count()));
    1708:	68fb      	ldr	r3, [r7, #12]
    170a:	3310      	adds	r3, #16
    170c:	4618      	mov	r0, r3
    170e:	f7ff ffd3 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1712:	4602      	mov	r2, r0
    1714:	460b      	mov	r3, r1
    1716:	4610      	mov	r0, r2
    1718:	4619      	mov	r1, r3
    171a:	f004 fe89 	bl	6430 <__aeabi_l2f>
    171e:	ee07 0a10 	vmov	s14, r0
    mc_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    1722:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1726:	eeb0 0a67 	vmov.f32	s0, s15
    172a:	4628      	mov	r0, r5
    172c:	47a0      	blx	r4
  }
    172e:	bf00      	nop
    1730:	3710      	adds	r7, #16
    1732:	46bd      	mov	sp, r7
    1734:	ecbd 8b02 	vpop	{d8}
    1738:	bdb0      	pop	{r4, r5, r7, pc}

0000173a <sjsu::MotorController::SetDirection(bool)>:

  virtual void SetDirection(bool direction)
    173a:	b580      	push	{r7, lr}
    173c:	b082      	sub	sp, #8
    173e:	af00      	add	r7, sp, #0
    1740:	6078      	str	r0, [r7, #4]
    1742:	460b      	mov	r3, r1
    1744:	70fb      	strb	r3, [r7, #3]
  {
    direction_pin_.Set(static_cast<Gpio::State>(direction));
    1746:	687b      	ldr	r3, [r7, #4]
    1748:	689a      	ldr	r2, [r3, #8]
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	689b      	ldr	r3, [r3, #8]
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	3304      	adds	r3, #4
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	78f9      	ldrb	r1, [r7, #3]
    1756:	4610      	mov	r0, r2
    1758:	4798      	blx	r3
  }
    175a:	bf00      	nop
    175c:	3708      	adds	r7, #8
    175e:	46bd      	mov	sp, r7
    1760:	bd80      	pop	{r7, pc}

00001762 <float units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>:
		inline constexpr Ty to() const noexcept
    1762:	b580      	push	{r7, lr}
    1764:	b082      	sub	sp, #8
    1766:	af00      	add	r7, sp, #0
    1768:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    176a:	6878      	ldr	r0, [r7, #4]
    176c:	f000 f807 	bl	177e <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    1770:	eef0 7a40 	vmov.f32	s15, s0
		}
    1774:	eeb0 0a67 	vmov.f32	s0, s15
    1778:	3708      	adds	r7, #8
    177a:	46bd      	mov	sp, r7
    177c:	bd80      	pop	{r7, pc}

0000177e <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    177e:	b580      	push	{r7, lr}
    1780:	b082      	sub	sp, #8
    1782:	af00      	add	r7, sp, #0
    1784:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	4618      	mov	r0, r3
    178a:	f7ff febe 	bl	150a <units::linear_scale<float>::operator()() const>
    178e:	eef0 7a40 	vmov.f32	s15, s0
		}
    1792:	eeb0 0a67 	vmov.f32	s0, s15
    1796:	3708      	adds	r7, #8
    1798:	46bd      	mov	sp, r7
    179a:	bd80      	pop	{r7, pc}

0000179c <sjsu::MotorController::SetAngularVelocity(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void SetAngularVelocity(
    179c:	b5b0      	push	{r4, r5, r7, lr}
    179e:	ed2d 8b04 	vpush	{d8-d9}
    17a2:	b086      	sub	sp, #24
    17a4:	af00      	add	r7, sp, #0
    17a6:	6078      	str	r0, [r7, #4]
    17a8:	6039      	str	r1, [r7, #0]
      units::angular_velocity::revolutions_per_minute_t vel)
  {

    float pulse_width = Map(vel.to<float>(),
    17aa:	463b      	mov	r3, r7
    17ac:	4618      	mov	r0, r3
    17ae:	f7ff ffd8 	bl	1762 <float units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    17b2:	eeb0 8a40 	vmov.f32	s16, s0
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	3328      	adds	r3, #40	; 0x28
    17ba:	4618      	mov	r0, r3
    17bc:	f7ff ffd1 	bl	1762 <float units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    17c0:	eef0 8a40 	vmov.f32	s17, s0
    17c4:	687b      	ldr	r3, [r7, #4]
    17c6:	332c      	adds	r3, #44	; 0x2c
    17c8:	4618      	mov	r0, r3
    17ca:	f7ff ffca 	bl	1762 <float units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    17ce:	eeb0 9a40 	vmov.f32	s18, s0
                            min_rotation_.to<float>(),
                            max_rotation_.to<float>(),
                            static_cast<float>(pulse_lower_bound_.count()),
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	3318      	adds	r3, #24
    17d6:	4618      	mov	r0, r3
    17d8:	f7ff ff6e 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    17dc:	4603      	mov	r3, r0
    17de:	460c      	mov	r4, r1
    float pulse_width = Map(vel.to<float>(),
    17e0:	4618      	mov	r0, r3
    17e2:	4621      	mov	r1, r4
    17e4:	f004 fe24 	bl	6430 <__aeabi_l2f>
    17e8:	4605      	mov	r5, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	3320      	adds	r3, #32
    17ee:	4618      	mov	r0, r3
    17f0:	f7ff ff62 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    17f4:	4603      	mov	r3, r0
    17f6:	460c      	mov	r4, r1
    float pulse_width = Map(vel.to<float>(),
    17f8:	4618      	mov	r0, r3
    17fa:	4621      	mov	r1, r4
    17fc:	f004 fe18 	bl	6430 <__aeabi_l2f>
    1800:	4603      	mov	r3, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    1802:	ee02 3a10 	vmov	s4, r3
    1806:	ee01 5a90 	vmov	s3, r5
    180a:	eeb0 1a49 	vmov.f32	s2, s18
    180e:	eef0 0a68 	vmov.f32	s1, s17
    1812:	eeb0 0a48 	vmov.f32	s0, s16
    1816:	f001 ffb8 	bl	378a <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    181a:	ed87 0a05 	vstr	s0, [r7, #20]

    SetPulseWidthInMicroseconds(
        std::chrono::microseconds(static_cast<uint32_t>(pulse_width)));
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	3310      	adds	r3, #16
    1824:	681c      	ldr	r4, [r3, #0]
    1826:	edd7 7a05 	vldr	s15, [r7, #20]
    182a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    182e:	ee17 3a90 	vmov	r3, s15
    1832:	613b      	str	r3, [r7, #16]
    SetPulseWidthInMicroseconds(
    1834:	f107 0210 	add.w	r2, r7, #16
    1838:	f107 0308 	add.w	r3, r7, #8
    183c:	4611      	mov	r1, r2
    183e:	4618      	mov	r0, r3
    1840:	f7ff fec9 	bl	15d6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    1844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    1848:	6878      	ldr	r0, [r7, #4]
    184a:	47a0      	blx	r4
  }
    184c:	bf00      	nop
    184e:	3718      	adds	r7, #24
    1850:	46bd      	mov	sp, r7
    1852:	ecbd 8b04 	vpop	{d8-d9}
    1856:	bdb0      	pop	{r4, r5, r7, pc}

00001858 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    1858:	b580      	push	{r7, lr}
    185a:	b086      	sub	sp, #24
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
    1860:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	3308      	adds	r3, #8
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	6839      	ldr	r1, [r7, #0]
    186c:	6878      	ldr	r0, [r7, #4]
    186e:	4798      	blx	r3
    1870:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    1872:	f04f 0300 	mov.w	r3, #0
    1876:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    1878:	697b      	ldr	r3, [r7, #20]
    187a:	2b00      	cmp	r3, #0
    187c:	d00f      	beq.n	189e <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	330c      	adds	r3, #12
    1884:	681b      	ldr	r3, [r3, #0]
    1886:	6878      	ldr	r0, [r7, #4]
    1888:	4798      	blx	r3
    188a:	4603      	mov	r3, r0
    188c:	613b      	str	r3, [r7, #16]
    188e:	f107 0310 	add.w	r3, r7, #16
    1892:	6979      	ldr	r1, [r7, #20]
    1894:	4618      	mov	r0, r3
    1896:	f001 ffb9 	bl	380c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    189a:	4603      	mov	r3, r0
    189c:	60fb      	str	r3, [r7, #12]
    }
    return result;
    189e:	68fb      	ldr	r3, [r7, #12]
  }
    18a0:	4618      	mov	r0, r3
    18a2:	3718      	adds	r7, #24
    18a4:	46bd      	mov	sp, r7
    18a6:	bd80      	pop	{r7, pc}

000018a8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    18a8:	b490      	push	{r4, r7}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
    18b0:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    18b2:	683b      	ldr	r3, [r7, #0]
    18b4:	e9d3 3400 	ldrd	r3, r4, [r3]
    18b8:	687a      	ldr	r2, [r7, #4]
    18ba:	e9c2 3400 	strd	r3, r4, [r2]
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	4618      	mov	r0, r3
    18c2:	3708      	adds	r7, #8
    18c4:	46bd      	mov	sp, r7
    18c6:	bc90      	pop	{r4, r7}
    18c8:	4770      	bx	lr

000018ca <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    18ca:	b490      	push	{r4, r7}
    18cc:	b082      	sub	sp, #8
    18ce:	af00      	add	r7, sp, #0
    18d0:	6078      	str	r0, [r7, #4]
	{ return __r; }
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	e9d3 3400 	ldrd	r3, r4, [r3]
    18d8:	4618      	mov	r0, r3
    18da:	4621      	mov	r1, r4
    18dc:	3708      	adds	r7, #8
    18de:	46bd      	mov	sp, r7
    18e0:	bc90      	pop	{r4, r7}
    18e2:	4770      	bx	lr

000018e4 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    18e4:	b580      	push	{r7, lr}
    18e6:	b086      	sub	sp, #24
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    18ec:	6878      	ldr	r0, [r7, #4]
    18ee:	f000 f807 	bl	1900 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    18f2:	eef0 7a40 	vmov.f32	s15, s0
	}
    18f6:	eeb0 0a67 	vmov.f32	s0, s15
    18fa:	3718      	adds	r7, #24
    18fc:	46bd      	mov	sp, r7
    18fe:	bd80      	pop	{r7, pc}

00001900 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    1900:	b480      	push	{r7}
    1902:	b085      	sub	sp, #20
    1904:	af00      	add	r7, sp, #0
    1906:	60f8      	str	r0, [r7, #12]
    1908:	7239      	strb	r1, [r7, #8]
    190a:	713a      	strb	r2, [r7, #4]
    190c:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    190e:	68fb      	ldr	r3, [r7, #12]
    1910:	edd3 7a00 	vldr	s15, [r3]
    1914:	ed9f 7a05 	vldr	s14, [pc, #20]	; 192c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    1918:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    191c:	eeb0 0a67 	vmov.f32	s0, s15
    1920:	3714      	adds	r7, #20
    1922:	46bd      	mov	sp, r7
    1924:	f85d 7b04 	ldr.w	r7, [sp], #4
    1928:	4770      	bx	lr
    192a:	bf00      	nop
    192c:	49742400 	.word	0x49742400

00001930 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
    1930:	b580      	push	{r7, lr}
    1932:	b084      	sub	sp, #16
    1934:	af00      	add	r7, sp, #0
    1936:	6078      	str	r0, [r7, #4]
    1938:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    193a:	2100      	movs	r1, #0
    193c:	6878      	ldr	r0, [r7, #4]
    193e:	f000 f8e3 	bl	1b08 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    1942:	f04f 000c 	mov.w	r0, #12
    1946:	f04f 0100 	mov.w	r1, #0
    194a:	f7fe fd73 	bl	434 <units::literals::operator"" _MHz(unsigned long long)>
    194e:	4603      	mov	r3, r0
    1950:	60bb      	str	r3, [r7, #8]
    1952:	f107 0208 	add.w	r2, r7, #8
    1956:	463b      	mov	r3, r7
    1958:	4611      	mov	r1, r2
    195a:	4618      	mov	r0, r3
    195c:	f001 ff74 	bl	3848 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1960:	4603      	mov	r3, r0
    1962:	2b00      	cmp	r3, #0
    1964:	d00f      	beq.n	1986 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    1966:	4b16      	ldr	r3, [pc, #88]	; (19c0 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    1968:	683a      	ldr	r2, [r7, #0]
    196a:	6819      	ldr	r1, [r3, #0]
    196c:	6878      	ldr	r0, [r7, #4]
    196e:	f000 fabf 	bl	1ef0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    1972:	2101      	movs	r1, #1
    1974:	6878      	ldr	r0, [r7, #4]
    1976:	f000 f8eb 	bl	1b50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    197a:	463b      	mov	r3, r7
    197c:	4619      	mov	r1, r3
    197e:	4811      	ldr	r0, [pc, #68]	; (19c4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    1980:	f001 ff80 	bl	3884 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1984:	e007      	b.n	1996 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    1986:	2100      	movs	r1, #0
    1988:	6878      	ldr	r0, [r7, #4]
    198a:	f000 f8e1 	bl	1b50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    198e:	490e      	ldr	r1, [pc, #56]	; (19c8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    1990:	480c      	ldr	r0, [pc, #48]	; (19c4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    1992:	f001 ff77 	bl	3884 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    1996:	2101      	movs	r1, #1
    1998:	6878      	ldr	r0, [r7, #4]
    199a:	f000 fb0d 	bl	1fb8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    199e:	23ff      	movs	r3, #255	; 0xff
    19a0:	733b      	strb	r3, [r7, #12]
    19a2:	f107 030c 	add.w	r3, r7, #12
    19a6:	2201      	movs	r2, #1
    19a8:	4619      	mov	r1, r3
    19aa:	6878      	ldr	r0, [r7, #4]
    19ac:	f000 f80e 	bl	19cc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    19b0:	2100      	movs	r1, #0
    19b2:	6878      	ldr	r0, [r7, #4]
    19b4:	f000 fb3e 	bl	2034 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    19b8:	bf00      	nop
    19ba:	3710      	adds	r7, #16
    19bc:	46bd      	mov	sp, r7
    19be:	bd80      	pop	{r7, pc}
    19c0:	000082d0 	.word	0x000082d0
    19c4:	10000008 	.word	0x10000008
    19c8:	000082d8 	.word	0x000082d8

000019cc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    19cc:	b580      	push	{r7, lr}
    19ce:	b084      	sub	sp, #16
    19d0:	af00      	add	r7, sp, #0
    19d2:	60f8      	str	r0, [r7, #12]
    19d4:	60b9      	str	r1, [r7, #8]
    19d6:	4613      	mov	r3, r2
    19d8:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    19da:	79fb      	ldrb	r3, [r7, #7]
    19dc:	2b04      	cmp	r3, #4
    19de:	d90d      	bls.n	19fc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
    19e0:	23b2      	movs	r3, #178	; 0xb2
    19e2:	4a0b      	ldr	r2, [pc, #44]	; (1a10 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    19e4:	490b      	ldr	r1, [pc, #44]	; (1a14 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    19e6:	480c      	ldr	r0, [pc, #48]	; (1a18 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    19e8:	f003 fe24 	bl	5634 <printf>
    19ec:	480b      	ldr	r0, [pc, #44]	; (1a1c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    19ee:	f002 fd05 	bl	43fc <puts>
    19f2:	2100      	movs	r1, #0
    19f4:	2001      	movs	r0, #1
    19f6:	f7fe fea1 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    19fa:	e7fe      	b.n	19fa <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
    19fc:	4b08      	ldr	r3, [pc, #32]	; (1a20 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	79fa      	ldrb	r2, [r7, #7]
    1a02:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    1a06:	bf00      	nop
    1a08:	3710      	adds	r7, #16
    1a0a:	46bd      	mov	sp, r7
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	bf00      	nop
    1a10:	00008648 	.word	0x00008648
    1a14:	000082f4 	.word	0x000082f4
    1a18:	00007b30 	.word	0x00007b30
    1a1c:	00007bd0 	.word	0x00007bd0
    1a20:	10000348 	.word	0x10000348

00001a24 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    1a24:	b480      	push	{r7}
    1a26:	b083      	sub	sp, #12
    1a28:	af00      	add	r7, sp, #0
    1a2a:	6078      	str	r0, [r7, #4]
    1a2c:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    1a2e:	4b05      	ldr	r3, [pc, #20]	; (1a44 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    1a36:	4618      	mov	r0, r3
    1a38:	370c      	adds	r7, #12
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop
    1a44:	10000348 	.word	0x10000348

00001a48 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    1a48:	b480      	push	{r7}
    1a4a:	b083      	sub	sp, #12
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    1a50:	4b03      	ldr	r3, [pc, #12]	; (1a60 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    1a52:	681b      	ldr	r3, [r3, #0]
  }
    1a54:	4618      	mov	r0, r3
    1a56:	370c      	adds	r7, #12
    1a58:	46bd      	mov	sp, r7
    1a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a5e:	4770      	bx	lr
    1a60:	10000008 	.word	0x10000008

00001a64 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    1a64:	b480      	push	{r7}
    1a66:	b085      	sub	sp, #20
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
    1a6c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    1a6e:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a76:	683a      	ldr	r2, [r7, #0]
    1a78:	7812      	ldrb	r2, [r2, #0]
    1a7a:	4611      	mov	r1, r2
    1a7c:	2201      	movs	r2, #1
    1a7e:	408a      	lsls	r2, r1
    1a80:	4013      	ands	r3, r2
    1a82:	2b00      	cmp	r3, #0
    1a84:	bf14      	ite	ne
    1a86:	2301      	movne	r3, #1
    1a88:	2300      	moveq	r3, #0
    1a8a:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    1a8c:	7bfb      	ldrb	r3, [r7, #15]
  }
    1a8e:	4618      	mov	r0, r3
    1a90:	3714      	adds	r7, #20
    1a92:	46bd      	mov	sp, r7
    1a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a98:	4770      	bx	lr
    1a9a:	bf00      	nop
    1a9c:	10000348 	.word	0x10000348

00001aa0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    1aa0:	b590      	push	{r4, r7, lr}
    1aa2:	b083      	sub	sp, #12
    1aa4:	af00      	add	r7, sp, #0
    1aa6:	6078      	str	r0, [r7, #4]
    1aa8:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    1aaa:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    1ab2:	683b      	ldr	r3, [r7, #0]
    1ab4:	781b      	ldrb	r3, [r3, #0]
    1ab6:	4619      	mov	r1, r3
    system_controller->PCONP =
    1ab8:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    1aba:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    1abc:	4610      	mov	r0, r2
    1abe:	f001 fe05 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1ac2:	4603      	mov	r3, r0
    system_controller->PCONP =
    1ac4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    1ac8:	bf00      	nop
    1aca:	370c      	adds	r7, #12
    1acc:	46bd      	mov	sp, r7
    1ace:	bd90      	pop	{r4, r7, pc}
    1ad0:	10000348 	.word	0x10000348

00001ad4 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    1ad4:	b590      	push	{r4, r7, lr}
    1ad6:	b083      	sub	sp, #12
    1ad8:	af00      	add	r7, sp, #0
    1ada:	6078      	str	r0, [r7, #4]
    1adc:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    1ade:	4b09      	ldr	r3, [pc, #36]	; (1b04 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    1ae6:	683b      	ldr	r3, [r7, #0]
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	4619      	mov	r1, r3
    system_controller->PCONP =
    1aec:	4b05      	ldr	r3, [pc, #20]	; (1b04 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    1aee:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    1af0:	4610      	mov	r0, r2
    1af2:	f001 fdd8 	bl	36a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    1af6:	4603      	mov	r3, r0
    system_controller->PCONP =
    1af8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    1afc:	bf00      	nop
    1afe:	370c      	adds	r7, #12
    1b00:	46bd      	mov	sp, r7
    1b02:	bd90      	pop	{r4, r7, pc}
    1b04:	10000348 	.word	0x10000348

00001b08 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    1b08:	b590      	push	{r4, r7, lr}
    1b0a:	b083      	sub	sp, #12
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	6078      	str	r0, [r7, #4]
    1b10:	460b      	mov	r3, r1
    1b12:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    1b14:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    1b1c:	8879      	ldrh	r1, [r7, #2]
    1b1e:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    1b20:	681c      	ldr	r4, [r3, #0]
    1b22:	4b0a      	ldr	r3, [pc, #40]	; (1b4c <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    1b24:	781a      	ldrb	r2, [r3, #0]
    1b26:	785b      	ldrb	r3, [r3, #1]
    1b28:	021b      	lsls	r3, r3, #8
    1b2a:	431a      	orrs	r2, r3
    1b2c:	2300      	movs	r3, #0
    1b2e:	f362 030f 	bfi	r3, r2, #0, #16
    1b32:	461a      	mov	r2, r3
    1b34:	f001 feb9 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1b38:	4603      	mov	r3, r0
    1b3a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    1b3e:	bf00      	nop
    1b40:	370c      	adds	r7, #12
    1b42:	46bd      	mov	sp, r7
    1b44:	bd90      	pop	{r4, r7, pc}
    1b46:	bf00      	nop
    1b48:	10000348 	.word	0x10000348
    1b4c:	000082dc 	.word	0x000082dc

00001b50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    1b50:	b590      	push	{r4, r7, lr}
    1b52:	b083      	sub	sp, #12
    1b54:	af00      	add	r7, sp, #0
    1b56:	6078      	str	r0, [r7, #4]
    1b58:	460b      	mov	r3, r1
    1b5a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    1b5c:	4b0c      	ldr	r3, [pc, #48]	; (1b90 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    1b64:	8879      	ldrh	r1, [r7, #2]
    1b66:	4b0a      	ldr	r3, [pc, #40]	; (1b90 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    1b68:	681c      	ldr	r4, [r3, #0]
    1b6a:	4b0a      	ldr	r3, [pc, #40]	; (1b94 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    1b6c:	781a      	ldrb	r2, [r3, #0]
    1b6e:	785b      	ldrb	r3, [r3, #1]
    1b70:	021b      	lsls	r3, r3, #8
    1b72:	431a      	orrs	r2, r3
    1b74:	2300      	movs	r3, #0
    1b76:	f362 030f 	bfi	r3, r2, #0, #16
    1b7a:	461a      	mov	r2, r3
    1b7c:	f001 fe95 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1b80:	4603      	mov	r3, r0
    1b82:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    1b86:	bf00      	nop
    1b88:	370c      	adds	r7, #12
    1b8a:	46bd      	mov	sp, r7
    1b8c:	bd90      	pop	{r4, r7, pc}
    1b8e:	bf00      	nop
    1b90:	10000348 	.word	0x10000348
    1b94:	000082e8 	.word	0x000082e8

00001b98 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    1b98:	b590      	push	{r4, r7, lr}
    1b9a:	b083      	sub	sp, #12
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	6078      	str	r0, [r7, #4]
    1ba0:	460b      	mov	r3, r1
    1ba2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    1ba4:	4b0c      	ldr	r3, [pc, #48]	; (1bd8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    1bac:	8879      	ldrh	r1, [r7, #2]
    1bae:	4b0a      	ldr	r3, [pc, #40]	; (1bd8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    1bb0:	681c      	ldr	r4, [r3, #0]
    1bb2:	4b0a      	ldr	r3, [pc, #40]	; (1bdc <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    1bb4:	781a      	ldrb	r2, [r3, #0]
    1bb6:	785b      	ldrb	r3, [r3, #1]
    1bb8:	021b      	lsls	r3, r3, #8
    1bba:	431a      	orrs	r2, r3
    1bbc:	2300      	movs	r3, #0
    1bbe:	f362 030f 	bfi	r3, r2, #0, #16
    1bc2:	461a      	mov	r2, r3
    1bc4:	f001 fe71 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1bc8:	4603      	mov	r3, r0
    1bca:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    1bce:	bf00      	nop
    1bd0:	370c      	adds	r7, #12
    1bd2:	46bd      	mov	sp, r7
    1bd4:	bd90      	pop	{r4, r7, pc}
    1bd6:	bf00      	nop
    1bd8:	10000348 	.word	0x10000348
    1bdc:	000082ec 	.word	0x000082ec

00001be0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    1be0:	b590      	push	{r4, r7, lr}
    1be2:	b083      	sub	sp, #12
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	460b      	mov	r3, r1
    1bea:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    1bec:	4b0c      	ldr	r3, [pc, #48]	; (1c20 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    1bee:	681b      	ldr	r3, [r3, #0]
    1bf0:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    1bf4:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    1bf6:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    1bf8:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    1bfa:	4b0a      	ldr	r3, [pc, #40]	; (1c24 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    1bfc:	781a      	ldrb	r2, [r3, #0]
    1bfe:	785b      	ldrb	r3, [r3, #1]
    1c00:	021b      	lsls	r3, r3, #8
    1c02:	431a      	orrs	r2, r3
    1c04:	2300      	movs	r3, #0
    1c06:	f362 030f 	bfi	r3, r2, #0, #16
    1c0a:	461a      	mov	r2, r3
    1c0c:	f001 fe4d 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1c10:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    1c12:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    1c16:	bf00      	nop
    1c18:	370c      	adds	r7, #12
    1c1a:	46bd      	mov	sp, r7
    1c1c:	bd90      	pop	{r4, r7, pc}
    1c1e:	bf00      	nop
    1c20:	10000348 	.word	0x10000348
    1c24:	000082f0 	.word	0x000082f0

00001c28 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    1c28:	b580      	push	{r7, lr}
    1c2a:	ed2d 8b02 	vpush	{d8}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
    1c32:	6078      	str	r0, [r7, #4]
    1c34:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	ed93 8a00 	vldr	s16, [r3]
    1c3c:	683b      	ldr	r3, [r7, #0]
    1c3e:	4618      	mov	r0, r3
    1c40:	f7fe fc5b 	bl	4fa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1c44:	eef0 7a40 	vmov.f32	s15, s0
    1c48:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c50:	bf4c      	ite	mi
    1c52:	2301      	movmi	r3, #1
    1c54:	2300      	movpl	r3, #0
    1c56:	b2db      	uxtb	r3, r3
		}
    1c58:	4618      	mov	r0, r3
    1c5a:	3708      	adds	r7, #8
    1c5c:	46bd      	mov	sp, r7
    1c5e:	ecbd 8b02 	vpop	{d8}
    1c62:	bd80      	pop	{r7, pc}

00001c64 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1c6c:	6878      	ldr	r0, [r7, #4]
    1c6e:	f000 f805 	bl	1c7c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1c72:	4603      	mov	r3, r0
		}
    1c74:	4618      	mov	r0, r3
    1c76:	3708      	adds	r7, #8
    1c78:	46bd      	mov	sp, r7
    1c7a:	bd80      	pop	{r7, pc}

00001c7c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b082      	sub	sp, #8
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	4618      	mov	r0, r3
    1c88:	f7ff fc3f 	bl	150a <units::linear_scale<float>::operator()() const>
    1c8c:	eef0 7a40 	vmov.f32	s15, s0
    1c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1c94:	ee17 3a90 	vmov	r3, s15
		}
    1c98:	4618      	mov	r0, r3
    1c9a:	3708      	adds	r7, #8
    1c9c:	46bd      	mov	sp, r7
    1c9e:	bd80      	pop	{r7, pc}

00001ca0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1ca0:	b580      	push	{r7, lr}
    1ca2:	ed2d 8b02 	vpush	{d8}
    1ca6:	b084      	sub	sp, #16
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
    1cac:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	4618      	mov	r0, r3
    1cb2:	f7ff fc2a 	bl	150a <units::linear_scale<float>::operator()() const>
    1cb6:	eeb0 8a40 	vmov.f32	s16, s0
    1cba:	683b      	ldr	r3, [r7, #0]
    1cbc:	4618      	mov	r0, r3
    1cbe:	f7ff fc24 	bl	150a <units::linear_scale<float>::operator()() const>
    1cc2:	eef0 7a40 	vmov.f32	s15, s0
    1cc6:	edc7 7a03 	vstr	s15, [r7, #12]
    1cca:	f107 030c 	add.w	r3, r7, #12
    1cce:	4618      	mov	r0, r3
    1cd0:	f7fe fc13 	bl	4fa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1cd4:	eeb0 7a40 	vmov.f32	s14, s0
    1cd8:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1cdc:	f107 0308 	add.w	r3, r7, #8
    1ce0:	eeb0 0a67 	vmov.f32	s0, s15
    1ce4:	4618      	mov	r0, r3
    1ce6:	f7ff fc59 	bl	159c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1cea:	68bb      	ldr	r3, [r7, #8]
	}
    1cec:	4618      	mov	r0, r3
    1cee:	3710      	adds	r7, #16
    1cf0:	46bd      	mov	sp, r7
    1cf2:	ecbd 8b02 	vpop	{d8}
    1cf6:	bd80      	pop	{r7, pc}

00001cf8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b084      	sub	sp, #16
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	6078      	str	r0, [r7, #4]
    1d00:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	4618      	mov	r0, r3
    1d06:	f7ff fc00 	bl	150a <units::linear_scale<float>::operator()() const>
    1d0a:	eeb0 7a40 	vmov.f32	s14, s0
    1d0e:	683b      	ldr	r3, [r7, #0]
    1d10:	ee07 3a90 	vmov	s15, r3
    1d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1d18:	ee77 7a27 	vadd.f32	s15, s14, s15
    1d1c:	f107 030c 	add.w	r3, r7, #12
    1d20:	eeb0 0a67 	vmov.f32	s0, s15
    1d24:	4618      	mov	r0, r3
    1d26:	f7ff fc39 	bl	159c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1d2a:	68fb      	ldr	r3, [r7, #12]
	}
    1d2c:	4618      	mov	r0, r3
    1d2e:	3710      	adds	r7, #16
    1d30:	46bd      	mov	sp, r7
    1d32:	bd80      	pop	{r7, pc}

00001d34 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1d34:	b580      	push	{r7, lr}
    1d36:	b082      	sub	sp, #8
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	4618      	mov	r0, r3
    1d40:	f7ff fbe3 	bl	150a <units::linear_scale<float>::operator()() const>
    1d44:	eef0 7a40 	vmov.f32	s15, s0
    1d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1d4c:	ee17 3a90 	vmov	r3, s15
    1d50:	b29b      	uxth	r3, r3
		}
    1d52:	4618      	mov	r0, r3
    1d54:	3708      	adds	r7, #8
    1d56:	46bd      	mov	sp, r7
    1d58:	bd80      	pop	{r7, pc}
    1d5a:	Address 0x0000000000001d5a is out of bounds.


00001d5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    1d5c:	b590      	push	{r4, r7, lr}
    1d5e:	b08d      	sub	sp, #52	; 0x34
    1d60:	af00      	add	r7, sp, #0
    1d62:	60f8      	str	r0, [r7, #12]
    1d64:	60b9      	str	r1, [r7, #8]
    1d66:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    1d68:	f44f 70c0 	mov.w	r0, #384	; 0x180
    1d6c:	f04f 0100 	mov.w	r1, #0
    1d70:	f7fe fb60 	bl	434 <units::literals::operator"" _MHz(unsigned long long)>
    1d74:	4603      	mov	r3, r0
    1d76:	613b      	str	r3, [r7, #16]
    1d78:	f107 0210 	add.w	r2, r7, #16
    1d7c:	1d3b      	adds	r3, r7, #4
    1d7e:	4611      	mov	r1, r2
    1d80:	4618      	mov	r0, r3
    1d82:	f7ff ff51 	bl	1c28 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1d86:	4603      	mov	r3, r0
    1d88:	f083 0301 	eor.w	r3, r3, #1
    1d8c:	b2db      	uxtb	r3, r3
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d114      	bne.n	1dbc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    1d92:	f04f 000c 	mov.w	r0, #12
    1d96:	f04f 0100 	mov.w	r1, #0
    1d9a:	f7fe fb4b 	bl	434 <units::literals::operator"" _MHz(unsigned long long)>
    1d9e:	4603      	mov	r3, r0
    1da0:	617b      	str	r3, [r7, #20]
    1da2:	f107 0214 	add.w	r2, r7, #20
    1da6:	1d3b      	adds	r3, r7, #4
    1da8:	4611      	mov	r1, r2
    1daa:	4618      	mov	r0, r3
    1dac:	f001 fd4c 	bl	3848 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1db0:	4603      	mov	r3, r0
    1db2:	f083 0301 	eor.w	r3, r3, #1
    1db6:	b2db      	uxtb	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d001      	beq.n	1dc0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    1dbc:	2301      	movs	r3, #1
    1dbe:	e000      	b.n	1dc2 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    1dc0:	2300      	movs	r3, #0
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d00d      	beq.n	1de2 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
    1dc6:	23f6      	movs	r3, #246	; 0xf6
    1dc8:	4a43      	ldr	r2, [pc, #268]	; (1ed8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    1dca:	4944      	ldr	r1, [pc, #272]	; (1edc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    1dcc:	4844      	ldr	r0, [pc, #272]	; (1ee0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    1dce:	f003 fc31 	bl	5634 <printf>
    1dd2:	4844      	ldr	r0, [pc, #272]	; (1ee4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    1dd4:	f002 fb12 	bl	43fc <puts>
    1dd8:	2100      	movs	r1, #0
    1dda:	2001      	movs	r0, #1
    1ddc:	f7fe fcae 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    1de0:	e7fe      	b.n	1de0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    1de2:	2301      	movs	r3, #1
    1de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    1de8:	1d3b      	adds	r3, r7, #4
    1dea:	4618      	mov	r0, r3
    1dec:	f7ff ff3a 	bl	1c64 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1df0:	4604      	mov	r4, r0
    1df2:	f107 0308 	add.w	r3, r7, #8
    1df6:	4618      	mov	r0, r3
    1df8:	f7ff ff34 	bl	1c64 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1dfc:	4603      	mov	r3, r0
    1dfe:	fbb4 f2f3 	udiv	r2, r4, r3
    1e02:	fb03 f302 	mul.w	r3, r3, r2
    1e06:	1ae3      	subs	r3, r4, r3
    1e08:	2b00      	cmp	r3, #0
    1e0a:	bf14      	ite	ne
    1e0c:	2301      	movne	r3, #1
    1e0e:	2300      	moveq	r3, #0
    1e10:	b2db      	uxtb	r3, r3
    1e12:	2b00      	cmp	r3, #0
    1e14:	d017      	beq.n	1e46 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    1e16:	f107 0208 	add.w	r2, r7, #8
    1e1a:	1d3b      	adds	r3, r7, #4
    1e1c:	4611      	mov	r1, r2
    1e1e:	4618      	mov	r0, r3
    1e20:	f7ff ff3e 	bl	1ca0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1e24:	4603      	mov	r3, r0
    1e26:	61fb      	str	r3, [r7, #28]
    1e28:	f107 031c 	add.w	r3, r7, #28
    1e2c:	2101      	movs	r1, #1
    1e2e:	4618      	mov	r0, r3
    1e30:	f7ff ff62 	bl	1cf8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    1e34:	4603      	mov	r3, r0
    1e36:	61bb      	str	r3, [r7, #24]
      multiplier_value =
    1e38:	f107 0318 	add.w	r3, r7, #24
    1e3c:	4618      	mov	r0, r3
    1e3e:	f001 fc89 	bl	3754 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1e42:	62b8      	str	r0, [r7, #40]	; 0x28
    1e44:	e00e      	b.n	1e64 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    1e46:	f107 0208 	add.w	r2, r7, #8
    1e4a:	1d3b      	adds	r3, r7, #4
    1e4c:	4611      	mov	r1, r2
    1e4e:	4618      	mov	r0, r3
    1e50:	f7ff ff26 	bl	1ca0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1e54:	4603      	mov	r3, r0
    1e56:	623b      	str	r3, [r7, #32]
      multiplier_value =
    1e58:	f107 0320 	add.w	r3, r7, #32
    1e5c:	4618      	mov	r0, r3
    1e5e:	f001 fc79 	bl	3754 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1e62:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    1e64:	2301      	movs	r3, #1
    1e66:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    1e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d02d      	beq.n	1ecc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    1e70:	f107 0308 	add.w	r3, r7, #8
    1e74:	4618      	mov	r0, r3
    1e76:	f7ff ff5d 	bl	1d34 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    1e7a:	4603      	mov	r3, r0
    1e7c:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    1e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e80:	b29b      	uxth	r3, r3
    1e82:	fb12 f303 	smulbb	r3, r2, r3
    1e86:	b29b      	uxth	r3, r3
    1e88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    1e8a:	fb12 f303 	smulbb	r3, r2, r3
    1e8e:	b29b      	uxth	r3, r3
    1e90:	005b      	lsls	r3, r3, #1
    1e92:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    1e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    1e96:	2b9b      	cmp	r3, #155	; 0x9b
    1e98:	d903      	bls.n	1ea2 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
    1e9a:	2300      	movs	r3, #0
    1e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    1ea0:	e7e2      	b.n	1e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    1ea2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    1ea4:	005b      	lsls	r3, r3, #1
    1ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    1ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    1eaa:	2b07      	cmp	r3, #7
    1eac:	d9dc      	bls.n	1e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
    1eae:	f44f 7389 	mov.w	r3, #274	; 0x112
    1eb2:	4a09      	ldr	r2, [pc, #36]	; (1ed8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    1eb4:	490c      	ldr	r1, [pc, #48]	; (1ee8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    1eb6:	480d      	ldr	r0, [pc, #52]	; (1eec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    1eb8:	f003 fbbc 	bl	5634 <printf>
    1ebc:	4809      	ldr	r0, [pc, #36]	; (1ee4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    1ebe:	f002 fa9d 	bl	43fc <puts>
    1ec2:	2100      	movs	r1, #0
    1ec4:	2001      	movs	r0, #1
    1ec6:	f7fe fc39 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    1eca:	e7fe      	b.n	1eca <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    1ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    1ece:	4618      	mov	r0, r3
    1ed0:	3734      	adds	r7, #52	; 0x34
    1ed2:	46bd      	mov	sp, r7
    1ed4:	bd90      	pop	{r4, r7, pc}
    1ed6:	bf00      	nop
    1ed8:	000086cc 	.word	0x000086cc
    1edc:	0000830c 	.word	0x0000830c
    1ee0:	00007be8 	.word	0x00007be8
    1ee4:	00007bd0 	.word	0x00007bd0
    1ee8:	00008324 	.word	0x00008324
    1eec:	00007cd8 	.word	0x00007cd8

00001ef0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b086      	sub	sp, #24
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	60f8      	str	r0, [r7, #12]
    1ef8:	60b9      	str	r1, [r7, #8]
    1efa:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    1efc:	2301      	movs	r3, #1
    1efe:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    1f00:	687a      	ldr	r2, [r7, #4]
    1f02:	68b9      	ldr	r1, [r7, #8]
    1f04:	68f8      	ldr	r0, [r7, #12]
    1f06:	f7ff ff29 	bl	1d5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    1f0a:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1f0c:	2100      	movs	r1, #0
    1f0e:	68f8      	ldr	r0, [r7, #12]
    1f10:	f7ff fdfa 	bl	1b08 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1f14:	2100      	movs	r1, #0
    1f16:	68f8      	ldr	r0, [r7, #12]
    1f18:	f7ff fe1a 	bl	1b50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1f1c:	2100      	movs	r1, #0
    1f1e:	68f8      	ldr	r0, [r7, #12]
    1f20:	f7ff fe3a 	bl	1b98 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1f24:	2100      	movs	r1, #0
    1f26:	68f8      	ldr	r0, [r7, #12]
    1f28:	f7ff fe5a 	bl	1be0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1f2c:	4b21      	ldr	r3, [pc, #132]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1f34:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1f38:	693b      	ldr	r3, [r7, #16]
    1f3a:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1f3c:	4b1d      	ldr	r3, [pc, #116]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f3e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1f40:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    1f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1f46:	4b1b      	ldr	r3, [pc, #108]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f48:	681b      	ldr	r3, [r3, #0]
    1f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1f4e:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    1f52:	8afb      	ldrh	r3, [r7, #22]
    1f54:	015b      	lsls	r3, r3, #5
    1f56:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1f58:	4b16      	ldr	r3, [pc, #88]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f5a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1f5c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    1f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    1f62:	4b14      	ldr	r3, [pc, #80]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1f6a:	4b12      	ldr	r3, [pc, #72]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f6c:	681b      	ldr	r3, [r3, #0]
    1f6e:	f042 0201 	orr.w	r2, r2, #1
    1f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    1f76:	4b0f      	ldr	r3, [pc, #60]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	22aa      	movs	r2, #170	; 0xaa
    1f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    1f80:	4b0c      	ldr	r3, [pc, #48]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	2255      	movs	r2, #85	; 0x55
    1f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    1f8a:	4b0a      	ldr	r3, [pc, #40]	; (1fb4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1f92:	210a      	movs	r1, #10
    1f94:	4618      	mov	r0, r3
    1f96:	f001 fbab 	bl	36f0 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    1f9a:	4603      	mov	r3, r0
    1f9c:	f083 0301 	eor.w	r3, r3, #1
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d001      	beq.n	1faa <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    1fa6:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    1fa8:	e7ef      	b.n	1f8a <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    1faa:	bf00      	nop
    1fac:	3718      	adds	r7, #24
    1fae:	46bd      	mov	sp, r7
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	bf00      	nop
    1fb4:	10000348 	.word	0x10000348

00001fb8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    1fb8:	b590      	push	{r4, r7, lr}
    1fba:	b083      	sub	sp, #12
    1fbc:	af00      	add	r7, sp, #0
    1fbe:	6078      	str	r0, [r7, #4]
    1fc0:	460b      	mov	r3, r1
    1fc2:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    1fc4:	78fb      	ldrb	r3, [r7, #3]
    1fc6:	2b1f      	cmp	r3, #31
    1fc8:	d90e      	bls.n	1fe8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    1fca:	f44f 73a9 	mov.w	r3, #338	; 0x152
    1fce:	4a13      	ldr	r2, [pc, #76]	; (201c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    1fd0:	4913      	ldr	r1, [pc, #76]	; (2020 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    1fd2:	4814      	ldr	r0, [pc, #80]	; (2024 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    1fd4:	f003 fb2e 	bl	5634 <printf>
    1fd8:	4813      	ldr	r0, [pc, #76]	; (2028 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    1fda:	f002 fa0f 	bl	43fc <puts>
    1fde:	2100      	movs	r1, #0
    1fe0:	2001      	movs	r0, #1
    1fe2:	f7fe fbab 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    1fe6:	e7fe      	b.n	1fe6 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    1fe8:	4b10      	ldr	r3, [pc, #64]	; (202c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    1fea:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    1fec:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    1ff0:	4b0e      	ldr	r3, [pc, #56]	; (202c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    1ff2:	681c      	ldr	r4, [r3, #0]
    1ff4:	4b0e      	ldr	r3, [pc, #56]	; (2030 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    1ff6:	78f9      	ldrb	r1, [r7, #3]
    1ff8:	781a      	ldrb	r2, [r3, #0]
    1ffa:	785b      	ldrb	r3, [r3, #1]
    1ffc:	021b      	lsls	r3, r3, #8
    1ffe:	431a      	orrs	r2, r3
    2000:	2300      	movs	r3, #0
    2002:	f362 030f 	bfi	r3, r2, #0, #16
    2006:	461a      	mov	r2, r3
    2008:	f001 fb3a 	bl	3680 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    200c:	4603      	mov	r3, r0
    200e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    2012:	bf00      	nop
    2014:	370c      	adds	r7, #12
    2016:	46bd      	mov	sp, r7
    2018:	bd90      	pop	{r4, r7, pc}
    201a:	bf00      	nop
    201c:	00008748 	.word	0x00008748
    2020:	0000833c 	.word	0x0000833c
    2024:	00007d80 	.word	0x00007d80
    2028:	00007bd0 	.word	0x00007bd0
    202c:	10000348 	.word	0x10000348
    2030:	000082e4 	.word	0x000082e4

00002034 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    2034:	b590      	push	{r4, r7, lr}
    2036:	b083      	sub	sp, #12
    2038:	af00      	add	r7, sp, #0
    203a:	6078      	str	r0, [r7, #4]
    203c:	460b      	mov	r3, r1
    203e:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    2040:	4b0c      	ldr	r3, [pc, #48]	; (2074 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    2048:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    204a:	4b0a      	ldr	r3, [pc, #40]	; (2074 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    204c:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    204e:	4b0a      	ldr	r3, [pc, #40]	; (2078 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    2050:	781a      	ldrb	r2, [r3, #0]
    2052:	785b      	ldrb	r3, [r3, #1]
    2054:	021b      	lsls	r3, r3, #8
    2056:	431a      	orrs	r2, r3
    2058:	2300      	movs	r3, #0
    205a:	f362 030f 	bfi	r3, r2, #0, #16
    205e:	461a      	mov	r2, r3
    2060:	f001 fc23 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2064:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    2066:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    206a:	bf00      	nop
    206c:	370c      	adds	r7, #12
    206e:	46bd      	mov	sp, r7
    2070:	bd90      	pop	{r4, r7, pc}
    2072:	bf00      	nop
    2074:	10000348 	.word	0x10000348
    2078:	000082e0 	.word	0x000082e0

0000207c <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    207c:	b480      	push	{r7}
    207e:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    2080:	4b02      	ldr	r3, [pc, #8]	; (208c <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    2082:	4618      	mov	r0, r3
    2084:	46bd      	mov	sp, r7
    2086:	f85d 7b04 	ldr.w	r7, [sp], #4
    208a:	4770      	bx	lr
    208c:	1000000c 	.word	0x1000000c

00002090 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  void Write(std::initializer_list<uint8_t> data) const
  {
    Write(data.begin(), data.size());
  }
  /// Wait to receive just 1 byte
  uint8_t Read(std::chrono::microseconds timeout =
    2090:	b5b0      	push	{r4, r5, r7, lr}
    2092:	b088      	sub	sp, #32
    2094:	af02      	add	r7, sp, #8
    2096:	60f8      	str	r0, [r7, #12]
    2098:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    209c:	68fb      	ldr	r3, [r7, #12]
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	330c      	adds	r3, #12
    20a2:	681d      	ldr	r5, [r3, #0]
    20a4:	f107 0117 	add.w	r1, r7, #23
    20a8:	e9d7 3400 	ldrd	r3, r4, [r7]
    20ac:	e9cd 3400 	strd	r3, r4, [sp]
    20b0:	2201      	movs	r2, #1
    20b2:	68f8      	ldr	r0, [r7, #12]
    20b4:	47a8      	blx	r5
    20b6:	4603      	mov	r3, r0
    20b8:	2b01      	cmp	r3, #1
    20ba:	bf0c      	ite	eq
    20bc:	2301      	moveq	r3, #1
    20be:	2300      	movne	r3, #0
    20c0:	b2db      	uxtb	r3, r3
    20c2:	2b00      	cmp	r3, #0
    20c4:	d001      	beq.n	20ca <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    20c6:	23ff      	movs	r3, #255	; 0xff
    20c8:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    20ca:	7dfb      	ldrb	r3, [r7, #23]
  }
    20cc:	4618      	mov	r0, r3
    20ce:	3718      	adds	r7, #24
    20d0:	46bd      	mov	sp, r7
    20d2:	bdb0      	pop	{r4, r5, r7, pc}

000020d4 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
  uint32_t divide_add   = 0;
  uint32_t multiply     = 1;
};

constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    20d4:	b480      	push	{r7}
    20d6:	b089      	sub	sp, #36	; 0x24
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	2200      	movs	r2, #0
    20e4:	601a      	str	r2, [r3, #0]
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	2200      	movs	r2, #0
    20ea:	605a      	str	r2, [r3, #4]
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	2201      	movs	r2, #1
    20f0:	609a      	str	r2, [r3, #8]
  bool finished = false;
    20f2:	2300      	movs	r3, #0
    20f4:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    20f6:	2300      	movs	r3, #0
    20f8:	61bb      	str	r3, [r7, #24]
    20fa:	69bb      	ldr	r3, [r7, #24]
    20fc:	2b0e      	cmp	r3, #14
    20fe:	dc4f      	bgt.n	21a0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    2100:	7ffb      	ldrb	r3, [r7, #31]
    2102:	2b00      	cmp	r3, #0
    2104:	d14c      	bne.n	21a0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    2106:	69bb      	ldr	r3, [r7, #24]
    2108:	3301      	adds	r3, #1
    210a:	617b      	str	r3, [r7, #20]
    210c:	697b      	ldr	r3, [r7, #20]
    210e:	2b0e      	cmp	r3, #14
    2110:	dc42      	bgt.n	2198 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    2112:	7ffb      	ldrb	r3, [r7, #31]
    2114:	2b00      	cmp	r3, #0
    2116:	d13f      	bne.n	2198 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    2118:	69bb      	ldr	r3, [r7, #24]
    211a:	ee07 3a90 	vmov	s15, r3
    211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2122:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    2126:	697b      	ldr	r3, [r7, #20]
    2128:	ee07 3a90 	vmov	s15, r3
    212c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2130:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    2134:	edd7 6a04 	vldr	s13, [r7, #16]
    2138:	ed97 7a03 	vldr	s14, [r7, #12]
    213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    2140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2144:	ee77 7a87 	vadd.f32	s15, s15, s14
    2148:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    214c:	edd7 7a02 	vldr	s15, [r7, #8]
    2150:	ed9f 7a17 	vldr	s14, [pc, #92]	; 21b0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    2154:	ee77 7a87 	vadd.f32	s15, s15, s14
    2158:	ed97 7a00 	vldr	s14, [r7]
    215c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2164:	d814      	bhi.n	2190 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    2166:	edd7 7a02 	vldr	s15, [r7, #8]
    216a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 21b0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    216e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    2172:	ed97 7a00 	vldr	s14, [r7]
    2176:	eeb4 7ae7 	vcmpe.f32	s14, s15
    217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    217e:	db07      	blt.n	2190 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    2180:	69ba      	ldr	r2, [r7, #24]
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    2186:	697a      	ldr	r2, [r7, #20]
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	609a      	str	r2, [r3, #8]
        finished          = true;
    218c:	2301      	movs	r3, #1
    218e:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    2190:	697b      	ldr	r3, [r7, #20]
    2192:	3301      	adds	r3, #1
    2194:	617b      	str	r3, [r7, #20]
    2196:	e7b9      	b.n	210c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    2198:	69bb      	ldr	r3, [r7, #24]
    219a:	3301      	adds	r3, #1
    219c:	61bb      	str	r3, [r7, #24]
    219e:	e7ac      	b.n	20fa <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    21a0:	bf00      	nop
}
    21a2:	6878      	ldr	r0, [r7, #4]
    21a4:	3724      	adds	r7, #36	; 0x24
    21a6:	46bd      	mov	sp, r7
    21a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ac:	4770      	bx	lr
    21ae:	bf00      	nop
    21b0:	3d4ccccd 	.word	0x3d4ccccd

000021b4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:

constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    21b4:	b480      	push	{r7}
    21b6:	b087      	sub	sp, #28
    21b8:	af00      	add	r7, sp, #0
    21ba:	ed87 0a03 	vstr	s0, [r7, #12]
    21be:	edc7 0a02 	vstr	s1, [r7, #8]
    21c2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	ee07 3a90 	vmov	s15, r3
    21ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21ce:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    21d2:	edd7 7a03 	vldr	s15, [r7, #12]
    21d6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    21da:	ee27 7a87 	vmul.f32	s14, s15, s14
    21de:	edd7 7a02 	vldr	s15, [r7, #8]
    21e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    21e6:	ed97 7a05 	vldr	s14, [r7, #20]
    21ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
    21ee:	eef0 7a66 	vmov.f32	s15, s13
}
    21f2:	eeb0 0a67 	vmov.f32	s0, s15
    21f6:	371c      	adds	r7, #28
    21f8:	46bd      	mov	sp, r7
    21fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    21fe:	4770      	bx	lr

00002200 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:

constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    2200:	b480      	push	{r7}
    2202:	b087      	sub	sp, #28
    2204:	af00      	add	r7, sp, #0
    2206:	ed87 0a03 	vstr	s0, [r7, #12]
    220a:	edc7 0a02 	vstr	s1, [r7, #8]
    220e:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	ee07 3a90 	vmov	s15, r3
    2216:	eef8 7a67 	vcvt.f32.u32	s15, s15
    221a:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    221e:	edd7 7a03 	vldr	s15, [r7, #12]
    2222:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    2226:	ee27 7a87 	vmul.f32	s14, s15, s14
    222a:	edd7 7a02 	vldr	s15, [r7, #8]
    222e:	ee67 7a27 	vmul.f32	s15, s14, s15
    2232:	ed97 7a05 	vldr	s14, [r7, #20]
    2236:	eec7 6a27 	vdiv.f32	s13, s14, s15
    223a:	eef0 7a66 	vmov.f32	s15, s13
}
    223e:	eeb0 0a67 	vmov.f32	s0, s15
    2242:	371c      	adds	r7, #28
    2244:	46bd      	mov	sp, r7
    2246:	f85d 7b04 	ldr.w	r7, [sp], #4
    224a:	4770      	bx	lr

0000224c <sjsu::lpc40xx::uart::RoundFloat(float)>:

constexpr float RoundFloat(float value)
{
    224c:	b480      	push	{r7}
    224e:	b083      	sub	sp, #12
    2250:	af00      	add	r7, sp, #0
    2252:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    2256:	edd7 7a01 	vldr	s15, [r7, #4]
    225a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    225e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    226a:	eeb0 0a67 	vmov.f32	s0, s15
    226e:	370c      	adds	r7, #12
    2270:	46bd      	mov	sp, r7
    2272:	f85d 7b04 	ldr.w	r7, [sp], #4
    2276:	4770      	bx	lr

00002278 <sjsu::lpc40xx::uart::IsDecmial(float)>:

constexpr bool IsDecmial(float value)
{
    2278:	b580      	push	{r7, lr}
    227a:	b086      	sub	sp, #24
    227c:	af00      	add	r7, sp, #0
    227e:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    2282:	2300      	movs	r3, #0
    2284:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    2286:	ed97 0a01 	vldr	s0, [r7, #4]
    228a:	f7ff ffdf 	bl	224c <sjsu::lpc40xx::uart::RoundFloat(float)>
    228e:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    2292:	ed97 7a01 	vldr	s14, [r7, #4]
    2296:	edd7 7a04 	vldr	s15, [r7, #16]
    229a:	ee77 7a67 	vsub.f32	s15, s14, s15
    229e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    22a2:	edd7 7a03 	vldr	s15, [r7, #12]
    22a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 22d4 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    22aa:	eef4 7ac7 	vcmpe.f32	s15, s14
    22ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22b2:	db0a      	blt.n	22ca <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    22b4:	edd7 7a03 	vldr	s15, [r7, #12]
    22b8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 22d8 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    22bc:	eef4 7ac7 	vcmpe.f32	s15, s14
    22c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22c4:	d801      	bhi.n	22ca <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    22c6:	2301      	movs	r3, #1
    22c8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    22ca:	7dfb      	ldrb	r3, [r7, #23]
}
    22cc:	4618      	mov	r0, r3
    22ce:	3718      	adds	r7, #24
    22d0:	46bd      	mov	sp, r7
    22d2:	bd80      	pop	{r7, pc}
    22d4:	bd4ccccd 	.word	0xbd4ccccd
    22d8:	3d4ccccd 	.word	0x3d4ccccd

000022dc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    22e4:	6878      	ldr	r0, [r7, #4]
    22e6:	f000 f805 	bl	22f4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    22ea:	4603      	mov	r3, r0
	}
    22ec:	4618      	mov	r0, r3
    22ee:	3708      	adds	r7, #8
    22f0:	46bd      	mov	sp, r7
    22f2:	bd80      	pop	{r7, pc}

000022f4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    22f4:	b580      	push	{r7, lr}
    22f6:	b082      	sub	sp, #8
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	4618      	mov	r0, r3
    2300:	f7ff f903 	bl	150a <units::linear_scale<float>::operator()() const>
    2304:	eef0 7a40 	vmov.f32	s15, s0
    2308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    230c:	ee17 3a90 	vmov	r3, s15
		}
    2310:	4618      	mov	r0, r3
    2312:	3708      	adds	r7, #8
    2314:	46bd      	mov	sp, r7
    2316:	bd80      	pop	{r7, pc}

00002318 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
  kDone
};

constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    2318:	b590      	push	{r4, r7, lr}
    231a:	b091      	sub	sp, #68	; 0x44
    231c:	af00      	add	r7, sp, #0
    231e:	61f8      	str	r0, [r7, #28]
    2320:	61b9      	str	r1, [r7, #24]
    2322:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    2324:	f107 0314 	add.w	r3, r7, #20
    2328:	4618      	mov	r0, r3
    232a:	f7ff ffd7 	bl	22dc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    232e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    2330:	2300      	movs	r3, #0
    2332:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    2334:	69fb      	ldr	r3, [r7, #28]
    2336:	2200      	movs	r2, #0
    2338:	601a      	str	r2, [r3, #0]
    233a:	69fb      	ldr	r3, [r7, #28]
    233c:	2200      	movs	r2, #0
    233e:	605a      	str	r2, [r3, #4]
    2340:	69fb      	ldr	r3, [r7, #28]
    2342:	2201      	movs	r2, #1
    2344:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    2346:	69bb      	ldr	r3, [r7, #24]
    2348:	ee07 3a90 	vmov	s15, r3
    234c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2350:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    2354:	f04f 0300 	mov.w	r3, #0
    2358:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    235a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    235e:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    2360:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    2364:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    2366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    236c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    236e:	2b04      	cmp	r3, #4
    2370:	f000 80be 	beq.w	24f0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    2374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2376:	2b03      	cmp	r3, #3
    2378:	f200 80b8 	bhi.w	24ec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    237c:	a201      	add	r2, pc, #4	; (adr r2, 2384 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2382:	bf00      	nop
    2384:	00002395 	.word	0x00002395
    2388:	000023ef 	.word	0x000023ef
    238c:	0000244f 	.word	0x0000244f
    2390:	000024bf 	.word	0x000024bf
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    2394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    2396:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    239a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    239e:	f7ff ff09 	bl	21b4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    23a2:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    23a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    23aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    23ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    23b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    23b6:	d505      	bpl.n	23c4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    23b8:	69fb      	ldr	r3, [r7, #28]
    23ba:	2200      	movs	r2, #0
    23bc:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    23be:	2304      	movs	r3, #4
    23c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    23c2:	e094      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    23c4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    23c8:	f7ff ff56 	bl	2278 <sjsu::lpc40xx::uart::IsDecmial(float)>
    23cc:	4603      	mov	r3, r0
    23ce:	2b00      	cmp	r3, #0
    23d0:	d00a      	beq.n	23e8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    23d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    23d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    23da:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    23de:	69fb      	ldr	r3, [r7, #28]
    23e0:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    23e2:	2304      	movs	r3, #4
    23e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    23e6:	e082      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    23e8:	2301      	movs	r3, #1
    23ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    23ec:	e07f      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    23ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    23f0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    23f4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    23f8:	f7ff fedc 	bl	21b4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    23fc:	eef0 7a40 	vmov.f32	s15, s0
    2400:	eeb0 0a67 	vmov.f32	s0, s15
    2404:	f7ff ff22 	bl	224c <sjsu::lpc40xx::uart::RoundFloat(float)>
    2408:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    240c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    240e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    2412:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    2416:	f7ff fef3 	bl	2200 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    241a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    241e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    2422:	ed9f 7a36 	vldr	s14, [pc, #216]	; 24fc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    2426:	eef4 7ac7 	vcmpe.f32	s15, s14
    242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    242e:	db0b      	blt.n	2448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    2430:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    2434:	ed9f 7a32 	vldr	s14, [pc, #200]	; 2500 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    2438:	eef4 7ac7 	vcmpe.f32	s15, s14
    243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2440:	d802      	bhi.n	2448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    2442:	2303      	movs	r3, #3
    2444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    2446:	e052      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    2448:	2302      	movs	r3, #2
    244a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    244c:	e04f      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    244e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    2452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2456:	ee77 7a87 	vadd.f32	s15, s15, s14
    245a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    245e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    2462:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    2466:	eef4 7ac7 	vcmpe.f32	s15, s14
    246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    246e:	dd02      	ble.n	2476 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    2470:	2304      	movs	r3, #4
    2472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    2474:	e03b      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    2476:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    247a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    247e:	eef4 7ac7 	vcmpe.f32	s15, s14
    2482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2486:	dd0f      	ble.n	24a8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    2488:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    248c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2490:	ee77 7a87 	vadd.f32	s15, s15, s14
    2494:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    2498:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    249c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    24a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    24a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    24a8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    24ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    24b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    24b4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    24b8:	2301      	movs	r3, #1
    24ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    24bc:	e017      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    24be:	69fc      	ldr	r4, [r7, #28]
    24c0:	463b      	mov	r3, r7
    24c2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    24c6:	4618      	mov	r0, r3
    24c8:	f7ff fe04 	bl	20d4 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    24cc:	463b      	mov	r3, r7
    24ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    24d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    24d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    24da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    24de:	ee17 2a90 	vmov	r2, s15
    24e2:	69fb      	ldr	r3, [r7, #28]
    24e4:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    24e6:	2304      	movs	r3, #4
    24e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    24ea:	e000      	b.n	24ee <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    24ec:	bf00      	nop
  while (state != States::kDone)
    24ee:	e73d      	b.n	236c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    24f0:	bf00      	nop
}
    24f2:	69f8      	ldr	r0, [r7, #28]
    24f4:	3744      	adds	r7, #68	; 0x44
    24f6:	46bd      	mov	sp, r7
    24f8:	bd90      	pop	{r4, r7, pc}
    24fa:	bf00      	nop
    24fc:	3f8ccccd 	.word	0x3f8ccccd
    2500:	3ff33333 	.word	0x3ff33333

00002504 <sjsu::Uart::Uart()>:
class Uart
    2504:	b480      	push	{r7}
    2506:	b083      	sub	sp, #12
    2508:	af00      	add	r7, sp, #0
    250a:	6078      	str	r0, [r7, #4]
    250c:	4a04      	ldr	r2, [pc, #16]	; (2520 <sjsu::Uart::Uart()+0x1c>)
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	601a      	str	r2, [r3, #0]
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	4618      	mov	r0, r3
    2516:	370c      	adds	r7, #12
    2518:	46bd      	mov	sp, r7
    251a:	f85d 7b04 	ldr.w	r7, [sp], #4
    251e:	4770      	bx	lr
    2520:	000084b4 	.word	0x000084b4

00002524 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
      .tx_function_id = 0b101,
      .rx_function_id = 0b011,
    };
  };

  explicit constexpr Uart(const Port_t & port,
    2524:	b580      	push	{r7, lr}
    2526:	b084      	sub	sp, #16
    2528:	af00      	add	r7, sp, #0
    252a:	60f8      	str	r0, [r7, #12]
    252c:	60b9      	str	r1, [r7, #8]
    252e:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    2530:	68fb      	ldr	r3, [r7, #12]
    2532:	4618      	mov	r0, r3
    2534:	f7ff ffe6 	bl	2504 <sjsu::Uart::Uart()>
    2538:	4a06      	ldr	r2, [pc, #24]	; (2554 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	601a      	str	r2, [r3, #0]
    253e:	68fb      	ldr	r3, [r7, #12]
    2540:	68ba      	ldr	r2, [r7, #8]
    2542:	605a      	str	r2, [r3, #4]
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	687a      	ldr	r2, [r7, #4]
    2548:	609a      	str	r2, [r3, #8]
  {
  }
    254a:	68fb      	ldr	r3, [r7, #12]
    254c:	4618      	mov	r0, r3
    254e:	3710      	adds	r7, #16
    2550:	46bd      	mov	sp, r7
    2552:	bd80      	pop	{r7, pc}
    2554:	00008498 	.word	0x00008498

00002558 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    2558:	b580      	push	{r7, lr}
    255a:	b084      	sub	sp, #16
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    2562:	2307      	movs	r3, #7
    2564:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    2566:	687b      	ldr	r3, [r7, #4]
    2568:	6898      	ldr	r0, [r3, #8]
    256a:	687b      	ldr	r3, [r7, #4]
    256c:	689b      	ldr	r3, [r3, #8]
    256e:	681b      	ldr	r3, [r3, #0]
    2570:	3314      	adds	r3, #20
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	687a      	ldr	r2, [r7, #4]
    2576:	6852      	ldr	r2, [r2, #4]
    2578:	3204      	adds	r2, #4
    257a:	4611      	mov	r1, r2
    257c:	4798      	blx	r3

    SetBaudRate(baud_rate);
    257e:	6839      	ldr	r1, [r7, #0]
    2580:	6878      	ldr	r0, [r7, #4]
    2582:	f000 f849 	bl	2618 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	685b      	ldr	r3, [r3, #4]
    258a:	68d8      	ldr	r0, [r3, #12]
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	685b      	ldr	r3, [r3, #4]
    2590:	68db      	ldr	r3, [r3, #12]
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	687a      	ldr	r2, [r7, #4]
    2598:	6852      	ldr	r2, [r2, #4]
    259a:	7c12      	ldrb	r2, [r2, #16]
    259c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    25a0:	b2d2      	uxtb	r2, r2
    25a2:	4611      	mov	r1, r2
    25a4:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	685b      	ldr	r3, [r3, #4]
    25aa:	6898      	ldr	r0, [r3, #8]
    25ac:	687b      	ldr	r3, [r7, #4]
    25ae:	685b      	ldr	r3, [r3, #4]
    25b0:	689b      	ldr	r3, [r3, #8]
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	687a      	ldr	r2, [r7, #4]
    25b8:	6852      	ldr	r2, [r2, #4]
    25ba:	7c12      	ldrb	r2, [r2, #16]
    25bc:	f3c2 0202 	ubfx	r2, r2, #0, #3
    25c0:	b2d2      	uxtb	r2, r2
    25c2:	4611      	mov	r1, r2
    25c4:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	685b      	ldr	r3, [r3, #4]
    25ca:	68da      	ldr	r2, [r3, #12]
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	685b      	ldr	r3, [r3, #4]
    25d0:	68db      	ldr	r3, [r3, #12]
    25d2:	681b      	ldr	r3, [r3, #0]
    25d4:	3304      	adds	r3, #4
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	2102      	movs	r1, #2
    25da:	4610      	mov	r0, r2
    25dc:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	685b      	ldr	r3, [r3, #4]
    25e2:	689a      	ldr	r2, [r3, #8]
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	685b      	ldr	r3, [r3, #4]
    25e8:	689b      	ldr	r3, [r3, #8]
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	3304      	adds	r3, #4
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	2102      	movs	r1, #2
    25f2:	4610      	mov	r0, r2
    25f4:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	685b      	ldr	r3, [r3, #4]
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	7a1b      	ldrb	r3, [r3, #8]
    25fe:	b2da      	uxtb	r2, r3
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	685b      	ldr	r3, [r3, #4]
    2604:	681b      	ldr	r3, [r3, #0]
    2606:	f042 0207 	orr.w	r2, r2, #7
    260a:	b2d2      	uxtb	r2, r2
    260c:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    260e:	2300      	movs	r3, #0
  }
    2610:	4618      	mov	r0, r3
    2612:	3710      	adds	r7, #16
    2614:	46bd      	mov	sp, r7
    2616:	bd80      	pop	{r7, pc}

00002618 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    2618:	b580      	push	{r7, lr}
    261a:	b086      	sub	sp, #24
    261c:	af00      	add	r7, sp, #0
    261e:	6078      	str	r0, [r7, #4]
    2620:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	689a      	ldr	r2, [r3, #8]
    2626:	687b      	ldr	r3, [r7, #4]
    2628:	685b      	ldr	r3, [r3, #4]
    262a:	3304      	adds	r3, #4
    262c:	4619      	mov	r1, r3
    262e:	4610      	mov	r0, r2
    2630:	f7ff f912 	bl	1858 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    2634:	4602      	mov	r2, r0
    2636:	f107 0308 	add.w	r3, r7, #8
    263a:	6839      	ldr	r1, [r7, #0]
    263c:	4618      	mov	r0, r3
    263e:	f7ff fe6b 	bl	2318 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    2642:	2380      	movs	r3, #128	; 0x80
    2644:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    2646:	68bb      	ldr	r3, [r7, #8]
    2648:	0a1b      	lsrs	r3, r3, #8
    264a:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    264c:	68bb      	ldr	r3, [r7, #8]
    264e:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    2650:	693b      	ldr	r3, [r7, #16]
    2652:	b2db      	uxtb	r3, r3
    2654:	011b      	lsls	r3, r3, #4
    2656:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	b2db      	uxtb	r3, r3
    265c:	f003 030f 	and.w	r3, r3, #15
    2660:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    2662:	4313      	orrs	r3, r2
    2664:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	685b      	ldr	r3, [r3, #4]
    266a:	681b      	ldr	r3, [r3, #0]
    266c:	2280      	movs	r2, #128	; 0x80
    266e:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	685b      	ldr	r3, [r3, #4]
    2674:	681b      	ldr	r3, [r3, #0]
    2676:	7dba      	ldrb	r2, [r7, #22]
    2678:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	685b      	ldr	r3, [r3, #4]
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	7d7a      	ldrb	r2, [r7, #21]
    2682:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	685b      	ldr	r3, [r3, #4]
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	7d3a      	ldrb	r2, [r7, #20]
    268c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	685b      	ldr	r3, [r3, #4]
    2694:	681b      	ldr	r3, [r3, #0]
    2696:	2203      	movs	r2, #3
    2698:	731a      	strb	r2, [r3, #12]
    return true;
    269a:	2301      	movs	r3, #1
  }
    269c:	4618      	mov	r0, r3
    269e:	3718      	adds	r7, #24
    26a0:	46bd      	mov	sp, r7
    26a2:	bd80      	pop	{r7, pc}

000026a4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    26a4:	b580      	push	{r7, lr}
    26a6:	b086      	sub	sp, #24
    26a8:	af00      	add	r7, sp, #0
    26aa:	60f8      	str	r0, [r7, #12]
    26ac:	60b9      	str	r1, [r7, #8]
    26ae:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    26b0:	2300      	movs	r3, #0
    26b2:	617b      	str	r3, [r7, #20]
    26b4:	697a      	ldr	r2, [r7, #20]
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	429a      	cmp	r2, r3
    26ba:	d216      	bcs.n	26ea <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    26bc:	68ba      	ldr	r2, [r7, #8]
    26be:	697b      	ldr	r3, [r7, #20]
    26c0:	441a      	add	r2, r3
    26c2:	68fb      	ldr	r3, [r7, #12]
    26c4:	685b      	ldr	r3, [r3, #4]
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	7812      	ldrb	r2, [r2, #0]
    26ca:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    26cc:	68f8      	ldr	r0, [r7, #12]
    26ce:	f000 f8b5 	bl	283c <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    26d2:	4603      	mov	r3, r0
    26d4:	f083 0301 	eor.w	r3, r3, #1
    26d8:	b2db      	uxtb	r3, r3
    26da:	2b00      	cmp	r3, #0
    26dc:	d001      	beq.n	26e2 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    26de:	bf00      	nop
      while (!TransmissionComplete())
    26e0:	e7f4      	b.n	26cc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    26e2:	697b      	ldr	r3, [r7, #20]
    26e4:	3301      	adds	r3, #1
    26e6:	617b      	str	r3, [r7, #20]
    26e8:	e7e4      	b.n	26b4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    26ea:	bf00      	nop
    26ec:	3718      	adds	r7, #24
    26ee:	46bd      	mov	sp, r7
    26f0:	bd80      	pop	{r7, pc}

000026f2 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    26f2:	b590      	push	{r4, r7, lr}
    26f4:	b083      	sub	sp, #12
    26f6:	af00      	add	r7, sp, #0
    26f8:	6078      	str	r0, [r7, #4]
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    26fe:	4618      	mov	r0, r3
    2700:	f000 f88a 	bl	2818 <sjsu::lpc40xx::Uart::HasData() const>
    2704:	4603      	mov	r3, r0
    2706:	2b00      	cmp	r3, #0
    2708:	d010      	beq.n	272c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    270e:	685b      	ldr	r3, [r3, #4]
    2710:	681b      	ldr	r3, [r3, #0]
    2712:	781b      	ldrb	r3, [r3, #0]
    2714:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    271a:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    2720:	6813      	ldr	r3, [r2, #0]
    2722:	1c58      	adds	r0, r3, #1
    2724:	6010      	str	r0, [r2, #0]
    2726:	440b      	add	r3, r1
    2728:	4622      	mov	r2, r4
    272a:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    2730:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    2736:	429a      	cmp	r2, r3
    2738:	d301      	bcc.n	273e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    273a:	2301      	movs	r3, #1
    273c:	e000      	b.n	2740 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    273e:	2300      	movs	r3, #0
    });
    2740:	4618      	mov	r0, r3
    2742:	370c      	adds	r7, #12
    2744:	46bd      	mov	sp, r7
    2746:	bd90      	pop	{r4, r7, pc}

00002748 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    2748:	b590      	push	{r4, r7, lr}
    274a:	b09d      	sub	sp, #116	; 0x74
    274c:	af00      	add	r7, sp, #0
    274e:	6178      	str	r0, [r7, #20]
    2750:	6139      	str	r1, [r7, #16]
    2752:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    2754:	2300      	movs	r3, #0
    2756:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    2758:	697b      	ldr	r3, [r7, #20]
    275a:	643b      	str	r3, [r7, #64]	; 0x40
    275c:	f107 0310 	add.w	r3, r7, #16
    2760:	647b      	str	r3, [r7, #68]	; 0x44
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	64bb      	str	r3, [r7, #72]	; 0x48
    2766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    276a:	64fb      	str	r3, [r7, #76]	; 0x4c
    276c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    2770:	e9c7 3408 	strd	r3, r4, [r7, #32]
    2774:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    2778:	f107 0340 	add.w	r3, r7, #64	; 0x40
    277c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    277e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    2782:	f107 0360 	add.w	r3, r7, #96	; 0x60
    2786:	4618      	mov	r0, r3
    2788:	f000 fcdb 	bl	3142 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    278c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    2790:	f107 0320 	add.w	r3, r7, #32
    2794:	4611      	mov	r1, r2
    2796:	4618      	mov	r0, r3
    2798:	f000 ff4b 	bl	3632 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    279c:	4603      	mov	r3, r0
    279e:	2b00      	cmp	r3, #0
    27a0:	d004      	beq.n	27ac <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    27a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    27a6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    27aa:	e011      	b.n	27d0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    27ac:	4b19      	ldr	r3, [pc, #100]	; (2814 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
    27b4:	4610      	mov	r0, r2
    27b6:	4798      	blx	r3
    27b8:	463b      	mov	r3, r7
    27ba:	f107 0220 	add.w	r2, r7, #32
    27be:	f107 0158 	add.w	r1, r7, #88	; 0x58
    27c2:	4618      	mov	r0, r3
    27c4:	f001 f996 	bl	3af4 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    27c8:	e9d7 3400 	ldrd	r3, r4, [r7]
    27cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    27d0:	2301      	movs	r3, #1
    27d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    27d4:	4b0f      	ldr	r3, [pc, #60]	; (2814 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
    27dc:	4610      	mov	r0, r2
    27de:	4798      	blx	r3
    27e0:	f107 0218 	add.w	r2, r7, #24
    27e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
    27e8:	4611      	mov	r1, r2
    27ea:	4618      	mov	r0, r3
    27ec:	f001 f9af 	bl	3b4e <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    27f0:	4603      	mov	r3, r0
    27f2:	2b00      	cmp	r3, #0
    27f4:	d009      	beq.n	280a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    27f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    27fa:	4618      	mov	r0, r3
    27fc:	f7ff ff79 	bl	26f2 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    2800:	4603      	mov	r3, r0
    2802:	2b00      	cmp	r3, #0
    2804:	d0e6      	beq.n	27d4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    2806:	2300      	movs	r3, #0
    2808:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    280a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    280c:	4618      	mov	r0, r3
    280e:	3774      	adds	r7, #116	; 0x74
    2810:	46bd      	mov	sp, r7
    2812:	bd90      	pop	{r4, r7, pc}
    2814:	10000000 	.word	0x10000000

00002818 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    2818:	b580      	push	{r7, lr}
    281a:	b082      	sub	sp, #8
    281c:	af00      	add	r7, sp, #0
    281e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	685b      	ldr	r3, [r3, #4]
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	7d1b      	ldrb	r3, [r3, #20]
    2828:	b2db      	uxtb	r3, r3
    282a:	2100      	movs	r1, #0
    282c:	4618      	mov	r0, r3
    282e:	f001 f84e 	bl	38ce <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    2832:	4603      	mov	r3, r0
  }
    2834:	4618      	mov	r0, r3
    2836:	3708      	adds	r7, #8
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}

0000283c <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  bool TransmissionComplete() const
    283c:	b580      	push	{r7, lr}
    283e:	b082      	sub	sp, #8
    2840:	af00      	add	r7, sp, #0
    2842:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	685b      	ldr	r3, [r3, #4]
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	7d1b      	ldrb	r3, [r3, #20]
    284c:	b2db      	uxtb	r3, r3
    284e:	2105      	movs	r1, #5
    2850:	4618      	mov	r0, r3
    2852:	f001 f83c 	bl	38ce <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    2856:	4603      	mov	r3, r0
  }
    2858:	4618      	mov	r0, r3
    285a:	3708      	adds	r7, #8
    285c:	46bd      	mov	sp, r7
    285e:	bd80      	pop	{r7, pc}

00002860 <sjsu::lpc40xx::Adc::BurstMode(bool)>:
  /// it's input channels without CPU intervention, meaning that the CPU can
  /// simply read back the value in the conversion register to get the current
  /// converted voltage.
  ///
  /// @param turn_burst_mode_on: if true, will turn on burst mode.
  static void BurstMode(bool turn_burst_mode_on = true)
    2860:	b590      	push	{r4, r7, lr}
    2862:	b083      	sub	sp, #12
    2864:	af00      	add	r7, sp, #0
    2866:	4603      	mov	r3, r0
    2868:	71fb      	strb	r3, [r7, #7]
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
    286a:	4b0b      	ldr	r3, [pc, #44]	; (2898 <sjsu::lpc40xx::Adc::BurstMode(bool)+0x38>)
    286c:	681b      	ldr	r3, [r3, #0]
    286e:	6818      	ldr	r0, [r3, #0]
    adc_base->CR =
    2870:	4b09      	ldr	r3, [pc, #36]	; (2898 <sjsu::lpc40xx::Adc::BurstMode(bool)+0x38>)
    2872:	681c      	ldr	r4, [r3, #0]
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
    2874:	4b09      	ldr	r3, [pc, #36]	; (289c <sjsu::lpc40xx::Adc::BurstMode(bool)+0x3c>)
    2876:	79f9      	ldrb	r1, [r7, #7]
    2878:	781a      	ldrb	r2, [r3, #0]
    287a:	785b      	ldrb	r3, [r3, #1]
    287c:	021b      	lsls	r3, r3, #8
    287e:	431a      	orrs	r2, r3
    2880:	2300      	movs	r3, #0
    2882:	f362 030f 	bfi	r3, r2, #0, #16
    2886:	461a      	mov	r2, r3
    2888:	f001 f838 	bl	38fc <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    288c:	4603      	mov	r3, r0
    adc_base->CR =
    288e:	6023      	str	r3, [r4, #0]
  }
    2890:	bf00      	nop
    2892:	370c      	adds	r7, #12
    2894:	46bd      	mov	sp, r7
    2896:	bd90      	pop	{r4, r7, pc}
    2898:	1000034c 	.word	0x1000034c
    289c:	0000838c 	.word	0x0000838c

000028a0 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    28a0:	b580      	push	{r7, lr}
    28a2:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    28a4:	4b08      	ldr	r3, [pc, #32]	; (28c8 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    28a6:	681b      	ldr	r3, [r3, #0]
    28a8:	6818      	ldr	r0, [r3, #0]
    28aa:	4b08      	ldr	r3, [pc, #32]	; (28cc <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    28ac:	781a      	ldrb	r2, [r3, #0]
    28ae:	785b      	ldrb	r3, [r3, #1]
    28b0:	021b      	lsls	r3, r3, #8
    28b2:	431a      	orrs	r2, r3
    28b4:	2300      	movs	r3, #0
    28b6:	f362 030f 	bfi	r3, r2, #0, #16
    28ba:	4619      	mov	r1, r3
    28bc:	f001 f831 	bl	3922 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    28c0:	4603      	mov	r3, r0
  }
    28c2:	4618      	mov	r0, r3
    28c4:	bd80      	pop	{r7, pc}
    28c6:	bf00      	nop
    28c8:	1000034c 	.word	0x1000034c
    28cc:	0000838c 	.word	0x0000838c

000028d0 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    28d0:	b480      	push	{r7}
    28d2:	b083      	sub	sp, #12
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
    28d8:	4a04      	ldr	r2, [pc, #16]	; (28ec <sjsu::Adc::Adc()+0x1c>)
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	601a      	str	r2, [r3, #0]
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	4618      	mov	r0, r3
    28e2:	370c      	adds	r7, #12
    28e4:	46bd      	mov	sp, r7
    28e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28ea:	4770      	bx	lr
    28ec:	00008484 	.word	0x00008484

000028f0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    28f0:	b580      	push	{r7, lr}
    28f2:	b084      	sub	sp, #16
    28f4:	af00      	add	r7, sp, #0
    28f6:	60f8      	str	r0, [r7, #12]
    28f8:	60b9      	str	r1, [r7, #8]
    28fa:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    28fc:	68fb      	ldr	r3, [r7, #12]
    28fe:	4618      	mov	r0, r3
    2900:	f7ff ffe6 	bl	28d0 <sjsu::Adc::Adc()>
    2904:	4a06      	ldr	r2, [pc, #24]	; (2920 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    2906:	68fb      	ldr	r3, [r7, #12]
    2908:	601a      	str	r2, [r3, #0]
    290a:	68fb      	ldr	r3, [r7, #12]
    290c:	68ba      	ldr	r2, [r7, #8]
    290e:	605a      	str	r2, [r3, #4]
    2910:	68fb      	ldr	r3, [r7, #12]
    2912:	687a      	ldr	r2, [r7, #4]
    2914:	609a      	str	r2, [r3, #8]
  {
  }
    2916:	68fb      	ldr	r3, [r7, #12]
    2918:	4618      	mov	r0, r3
    291a:	3710      	adds	r7, #16
    291c:	46bd      	mov	sp, r7
    291e:	bd80      	pop	{r7, pc}
    2920:	00008470 	.word	0x00008470

00002924 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2924:	b580      	push	{r7, lr}
    2926:	ed2d 8b02 	vpush	{d8}
    292a:	b084      	sub	sp, #16
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
    2930:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	4618      	mov	r0, r3
    2936:	f7fe fde8 	bl	150a <units::linear_scale<float>::operator()() const>
    293a:	eeb0 8a40 	vmov.f32	s16, s0
    293e:	683b      	ldr	r3, [r7, #0]
    2940:	4618      	mov	r0, r3
    2942:	f7fe fde2 	bl	150a <units::linear_scale<float>::operator()() const>
    2946:	eef0 7a40 	vmov.f32	s15, s0
    294a:	edc7 7a03 	vstr	s15, [r7, #12]
    294e:	f107 030c 	add.w	r3, r7, #12
    2952:	4618      	mov	r0, r3
    2954:	f7fd fe59 	bl	60a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2958:	eeb0 7a40 	vmov.f32	s14, s0
    295c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    2960:	f107 0308 	add.w	r3, r7, #8
    2964:	eeb0 0a67 	vmov.f32	s0, s15
    2968:	4618      	mov	r0, r3
    296a:	f7fe fe17 	bl	159c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    296e:	68bb      	ldr	r3, [r7, #8]
	}
    2970:	4618      	mov	r0, r3
    2972:	3710      	adds	r7, #16
    2974:	46bd      	mov	sp, r7
    2976:	ecbd 8b02 	vpop	{d8}
    297a:	bd80      	pop	{r7, pc}

0000297c <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    297c:	b580      	push	{r7, lr}
    297e:	b086      	sub	sp, #24
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	689a      	ldr	r2, [r3, #8]
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	3314      	adds	r3, #20
    2990:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    2992:	493c      	ldr	r1, [pc, #240]	; (2a84 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    2994:	4610      	mov	r0, r2
    2996:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	685b      	ldr	r3, [r3, #4]
    299c:	6818      	ldr	r0, [r3, #0]
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	685b      	ldr	r3, [r3, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	681b      	ldr	r3, [r3, #0]
    29a6:	681b      	ldr	r3, [r3, #0]
    29a8:	687a      	ldr	r2, [r7, #4]
    29aa:	6852      	ldr	r2, [r2, #4]
    29ac:	7912      	ldrb	r2, [r2, #4]
    29ae:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    29b2:	b2d2      	uxtb	r2, r2
    29b4:	4611      	mov	r1, r2
    29b6:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
    29bc:	681a      	ldr	r2, [r3, #0]
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	685b      	ldr	r3, [r3, #4]
    29c2:	681b      	ldr	r3, [r3, #0]
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	3304      	adds	r3, #4
    29c8:	681b      	ldr	r3, [r3, #0]
    29ca:	2100      	movs	r1, #0
    29cc:	4610      	mov	r0, r2
    29ce:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	685b      	ldr	r3, [r3, #4]
    29d4:	681a      	ldr	r2, [r3, #0]
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	685b      	ldr	r3, [r3, #4]
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	330c      	adds	r3, #12
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	2101      	movs	r1, #1
    29e4:	4610      	mov	r0, r2
    29e6:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    29ec:	4925      	ldr	r1, [pc, #148]	; (2a84 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    29ee:	4618      	mov	r0, r3
    29f0:	f7fe ff32 	bl	1858 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    29f4:	4603      	mov	r3, r0
    29f6:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    29f8:	f107 0308 	add.w	r3, r7, #8
    29fc:	4922      	ldr	r1, [pc, #136]	; (2a88 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    29fe:	4618      	mov	r0, r3
    2a00:	f7ff ff90 	bl	2924 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2a04:	4603      	mov	r3, r0
    2a06:	60fb      	str	r3, [r7, #12]
    2a08:	f107 030c 	add.w	r3, r7, #12
    2a0c:	4618      	mov	r0, r3
    2a0e:	f7fe fdd6 	bl	15be <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    2a12:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    2a14:	4b1d      	ldr	r3, [pc, #116]	; (2a8c <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	681b      	ldr	r3, [r3, #0]
    2a1a:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    2a1c:	4b1c      	ldr	r3, [pc, #112]	; (2a90 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    2a1e:	781a      	ldrb	r2, [r3, #0]
    2a20:	785b      	ldrb	r3, [r3, #1]
    2a22:	021b      	lsls	r3, r3, #8
    2a24:	431a      	orrs	r2, r3
    2a26:	2300      	movs	r3, #0
    2a28:	f362 030f 	bfi	r3, r2, #0, #16
    2a2c:	4619      	mov	r1, r3
    2a2e:	6978      	ldr	r0, [r7, #20]
    2a30:	f000 ff86 	bl	3940 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2a34:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    2a36:	4b17      	ldr	r3, [pc, #92]	; (2a94 <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    2a38:	781a      	ldrb	r2, [r3, #0]
    2a3a:	785b      	ldrb	r3, [r3, #1]
    2a3c:	021b      	lsls	r3, r3, #8
    2a3e:	431a      	orrs	r2, r3
    2a40:	2300      	movs	r3, #0
    2a42:	f362 030f 	bfi	r3, r2, #0, #16
    2a46:	461a      	mov	r2, r3
    2a48:	6939      	ldr	r1, [r7, #16]
    2a4a:	6978      	ldr	r0, [r7, #20]
    2a4c:	f000 ff2d 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2a50:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    2a52:	f7ff ff25 	bl	28a0 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    2a56:	4603      	mov	r3, r0
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d00a      	beq.n	2a72 <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	685b      	ldr	r3, [r3, #4]
    2a60:	791b      	ldrb	r3, [r3, #4]
    2a62:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2a66:	b2db      	uxtb	r3, r3
    2a68:	4619      	mov	r1, r3
    2a6a:	6978      	ldr	r0, [r7, #20]
    2a6c:	f000 fe2e 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2a70:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    2a72:	4b06      	ldr	r3, [pc, #24]	; (2a8c <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    2a74:	681b      	ldr	r3, [r3, #0]
    2a76:	697a      	ldr	r2, [r7, #20]
    2a78:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    2a7a:	2300      	movs	r3, #0
  }
    2a7c:	4618      	mov	r0, r3
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}
    2a84:	000082d4 	.word	0x000082d4
    2a88:	000083b0 	.word	0x000083b0
    2a8c:	1000034c 	.word	0x1000034c
    2a90:	00008390 	.word	0x00008390
    2a94:	00008388 	.word	0x00008388

00002a98 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    2a98:	b580      	push	{r7, lr}
    2a9a:	b084      	sub	sp, #16
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    2aa0:	6878      	ldr	r0, [r7, #4]
    2aa2:	f000 f851 	bl	2b48 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    2aa6:	4b0e      	ldr	r3, [pc, #56]	; (2ae0 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    2aa8:	681b      	ldr	r3, [r3, #0]
    2aaa:	687a      	ldr	r2, [r7, #4]
    2aac:	6852      	ldr	r2, [r2, #4]
    2aae:	7912      	ldrb	r2, [r2, #4]
    2ab0:	f3c2 0202 	ubfx	r2, r2, #0, #3
    2ab4:	b2d2      	uxtb	r2, r2
    2ab6:	3204      	adds	r2, #4
    2ab8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    2abc:	4b09      	ldr	r3, [pc, #36]	; (2ae4 <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    2abe:	781a      	ldrb	r2, [r3, #0]
    2ac0:	785b      	ldrb	r3, [r3, #1]
    2ac2:	021b      	lsls	r3, r3, #8
    2ac4:	431a      	orrs	r2, r3
    2ac6:	2300      	movs	r3, #0
    2ac8:	f362 030f 	bfi	r3, r2, #0, #16
    2acc:	4619      	mov	r1, r3
    2ace:	f000 ff46 	bl	395e <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2ad2:	60f8      	str	r0, [r7, #12]
    return result;
    2ad4:	68fb      	ldr	r3, [r7, #12]
  }
    2ad6:	4618      	mov	r0, r3
    2ad8:	3710      	adds	r7, #16
    2ada:	46bd      	mov	sp, r7
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop
    2ae0:	1000034c 	.word	0x1000034c
    2ae4:	00008398 	.word	0x00008398

00002ae8 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    2ae8:	b480      	push	{r7}
    2aea:	b083      	sub	sp, #12
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    2af0:	230c      	movs	r3, #12
  }
    2af2:	4618      	mov	r0, r3
    2af4:	370c      	adds	r7, #12
    2af6:	46bd      	mov	sp, r7
    2af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2afc:	4770      	bx	lr
    2afe:	Address 0x0000000000002afe is out of bounds.


00002b00 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    2b00:	b580      	push	{r7, lr}
    2b02:	b082      	sub	sp, #8
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    2b08:	4b0d      	ldr	r3, [pc, #52]	; (2b40 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    2b0a:	681b      	ldr	r3, [r3, #0]
    2b0c:	687a      	ldr	r2, [r7, #4]
    2b0e:	6852      	ldr	r2, [r2, #4]
    2b10:	7912      	ldrb	r2, [r2, #4]
    2b12:	f3c2 0202 	ubfx	r2, r2, #0, #3
    2b16:	b2d2      	uxtb	r2, r2
    2b18:	3204      	adds	r2, #4
    2b1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    2b1e:	4b09      	ldr	r3, [pc, #36]	; (2b44 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    2b20:	781a      	ldrb	r2, [r3, #0]
    2b22:	785b      	ldrb	r3, [r3, #1]
    2b24:	021b      	lsls	r3, r3, #8
    2b26:	431a      	orrs	r2, r3
    2b28:	2300      	movs	r3, #0
    2b2a:	f362 030f 	bfi	r3, r2, #0, #16
    2b2e:	4619      	mov	r1, r3
    2b30:	f000 fef7 	bl	3922 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2b34:	4603      	mov	r3, r0
  }
    2b36:	4618      	mov	r0, r3
    2b38:	3708      	adds	r7, #8
    2b3a:	46bd      	mov	sp, r7
    2b3c:	bd80      	pop	{r7, pc}
    2b3e:	bf00      	nop
    2b40:	1000034c 	.word	0x1000034c
    2b44:	0000839c 	.word	0x0000839c

00002b48 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    2b48:	b590      	push	{r4, r7, lr}
    2b4a:	b085      	sub	sp, #20
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    2b50:	f7ff fea6 	bl	28a0 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    2b54:	4603      	mov	r3, r0
    2b56:	2b00      	cmp	r3, #0
    2b58:	d013      	beq.n	2b82 <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    2b5a:	4b29      	ldr	r3, [pc, #164]	; (2c00 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    2b5c:	681b      	ldr	r3, [r3, #0]
    2b5e:	6818      	ldr	r0, [r3, #0]
    2b60:	4b27      	ldr	r3, [pc, #156]	; (2c00 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    2b62:	681c      	ldr	r4, [r3, #0]
    2b64:	4b27      	ldr	r3, [pc, #156]	; (2c04 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    2b66:	781a      	ldrb	r2, [r3, #0]
    2b68:	785b      	ldrb	r3, [r3, #1]
    2b6a:	021b      	lsls	r3, r3, #8
    2b6c:	431a      	orrs	r2, r3
    2b6e:	2300      	movs	r3, #0
    2b70:	f362 030f 	bfi	r3, r2, #0, #16
    2b74:	461a      	mov	r2, r3
    2b76:	2100      	movs	r1, #0
    2b78:	f000 ff02 	bl	3980 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    2b7c:	4603      	mov	r3, r0
    2b7e:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    2b80:	e03a      	b.n	2bf8 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    2b82:	687b      	ldr	r3, [r7, #4]
    2b84:	685b      	ldr	r3, [r3, #4]
    2b86:	791b      	ldrb	r3, [r3, #4]
    2b88:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2b8c:	b2db      	uxtb	r3, r3
    2b8e:	461a      	mov	r2, r3
    2b90:	2301      	movs	r3, #1
    2b92:	4093      	lsls	r3, r2
    2b94:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    2b96:	4b1a      	ldr	r3, [pc, #104]	; (2c00 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    2b9c:	4b18      	ldr	r3, [pc, #96]	; (2c00 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    2b9e:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    2ba0:	4b19      	ldr	r3, [pc, #100]	; (2c08 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    2ba2:	781a      	ldrb	r2, [r3, #0]
    2ba4:	785b      	ldrb	r3, [r3, #1]
    2ba6:	021b      	lsls	r3, r3, #8
    2ba8:	431a      	orrs	r2, r3
    2baa:	2300      	movs	r3, #0
    2bac:	f362 030f 	bfi	r3, r2, #0, #16
    2bb0:	461a      	mov	r2, r3
    2bb2:	68f9      	ldr	r1, [r7, #12]
    2bb4:	f000 fe79 	bl	38aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    2bb8:	4603      	mov	r3, r0
      adc_base->CR =
    2bba:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    2bbc:	4b10      	ldr	r3, [pc, #64]	; (2c00 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    2bbe:	681b      	ldr	r3, [r3, #0]
    2bc0:	6818      	ldr	r0, [r3, #0]
    2bc2:	4b0f      	ldr	r3, [pc, #60]	; (2c00 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    2bc4:	681c      	ldr	r4, [r3, #0]
    2bc6:	4b0f      	ldr	r3, [pc, #60]	; (2c04 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    2bc8:	781a      	ldrb	r2, [r3, #0]
    2bca:	785b      	ldrb	r3, [r3, #1]
    2bcc:	021b      	lsls	r3, r3, #8
    2bce:	431a      	orrs	r2, r3
    2bd0:	2300      	movs	r3, #0
    2bd2:	f362 030f 	bfi	r3, r2, #0, #16
    2bd6:	461a      	mov	r2, r3
    2bd8:	2101      	movs	r1, #1
    2bda:	f000 fed1 	bl	3980 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    2bde:	4603      	mov	r3, r0
    2be0:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    2be2:	6878      	ldr	r0, [r7, #4]
    2be4:	f7ff ff8c 	bl	2b00 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    2be8:	4603      	mov	r3, r0
    2bea:	f083 0301 	eor.w	r3, r3, #1
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d001      	beq.n	2bf8 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    2bf4:	bf00      	nop
      while (!HasConversionFinished())
    2bf6:	e7f4      	b.n	2be2 <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    2bf8:	bf00      	nop
    2bfa:	3714      	adds	r7, #20
    2bfc:	46bd      	mov	sp, r7
    2bfe:	bd90      	pop	{r4, r7, pc}
    2c00:	1000034c 	.word	0x1000034c
    2c04:	00008394 	.word	0x00008394
    2c08:	00008384 	.word	0x00008384

00002c0c <sjsu::Pwm::Pwm()>:
#include "utility/status.hpp"
#include "utility/units.hpp"

namespace sjsu
{
class Pwm
    2c0c:	b480      	push	{r7}
    2c0e:	b083      	sub	sp, #12
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
    2c14:	4a04      	ldr	r2, [pc, #16]	; (2c28 <sjsu::Pwm::Pwm()+0x1c>)
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	601a      	str	r2, [r3, #0]
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	4618      	mov	r0, r3
    2c1e:	370c      	adds	r7, #12
    2c20:	46bd      	mov	sp, r7
    2c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c26:	4770      	bx	lr
    2c28:	00008518 	.word	0x00008518

00002c2c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>:
      .channel         = 6,
      .pin_function_id = 0b001,
    };
  };

  explicit constexpr Pwm(const Channel_t & channel,
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b084      	sub	sp, #16
    2c30:	af00      	add	r7, sp, #0
    2c32:	60f8      	str	r0, [r7, #12]
    2c34:	60b9      	str	r1, [r7, #8]
    2c36:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    2c38:	68fb      	ldr	r3, [r7, #12]
    2c3a:	4618      	mov	r0, r3
    2c3c:	f7ff ffe6 	bl	2c0c <sjsu::Pwm::Pwm()>
    2c40:	4a06      	ldr	r2, [pc, #24]	; (2c5c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)+0x30>)
    2c42:	68fb      	ldr	r3, [r7, #12]
    2c44:	601a      	str	r2, [r3, #0]
    2c46:	68fb      	ldr	r3, [r7, #12]
    2c48:	68ba      	ldr	r2, [r7, #8]
    2c4a:	605a      	str	r2, [r3, #4]
    2c4c:	68fb      	ldr	r3, [r7, #12]
    2c4e:	687a      	ldr	r2, [r7, #4]
    2c50:	609a      	str	r2, [r3, #8]
  {
  }
    2c52:	68fb      	ldr	r3, [r7, #12]
    2c54:	4618      	mov	r0, r3
    2c56:	3710      	adds	r7, #16
    2c58:	46bd      	mov	sp, r7
    2c5a:	bd80      	pop	{r7, pc}
    2c5c:	00008458 	.word	0x00008458

00002c60 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  /// @param frequency_hz - Pulse width modulation frequency
  Status Initialize(units::frequency::hertz_t frequency_hz) const override
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b085      	sub	sp, #20
    2c64:	af00      	add	r7, sp, #0
    2c66:	6078      	str	r0, [r7, #4]
    2c68:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(1 <= channel_.channel && channel_.channel <= 6,
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	685b      	ldr	r3, [r3, #4]
    2c6e:	7a1b      	ldrb	r3, [r3, #8]
    2c70:	f003 0307 	and.w	r3, r3, #7
    2c74:	b2db      	uxtb	r3, r3
    2c76:	2b00      	cmp	r3, #0
    2c78:	d007      	beq.n	2c8a <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x2a>
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	685b      	ldr	r3, [r3, #4]
    2c7e:	7a1b      	ldrb	r3, [r3, #8]
    2c80:	f003 0307 	and.w	r3, r3, #7
    2c84:	b2db      	uxtb	r3, r3
    2c86:	2b07      	cmp	r3, #7
    2c88:	d10d      	bne.n	2ca6 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x46>
    2c8a:	2389      	movs	r3, #137	; 0x89
    2c8c:	4a5a      	ldr	r2, [pc, #360]	; (2df8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x198>)
    2c8e:	495b      	ldr	r1, [pc, #364]	; (2dfc <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x19c>)
    2c90:	485b      	ldr	r0, [pc, #364]	; (2e00 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a0>)
    2c92:	f002 fccf 	bl	5634 <printf>
    2c96:	485b      	ldr	r0, [pc, #364]	; (2e04 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    2c98:	f001 fbb0 	bl	43fc <puts>
    2c9c:	2100      	movs	r1, #0
    2c9e:	2001      	movs	r0, #1
    2ca0:	f7fd fd4c 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    2ca4:	e7fe      	b.n	2ca4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x44>
                     "Channel must be between 1 and 6 on LPC40xx platforms.");

    system_controller_.PowerUpPeripheral(channel_.peripheral.power_on_id);
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	6898      	ldr	r0, [r3, #8]
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	689b      	ldr	r3, [r3, #8]
    2cae:	681b      	ldr	r3, [r3, #0]
    2cb0:	3314      	adds	r3, #20
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	687a      	ldr	r2, [r7, #4]
    2cb6:	6852      	ldr	r2, [r2, #4]
    2cb8:	6812      	ldr	r2, [r2, #0]
    2cba:	3204      	adds	r2, #4
    2cbc:	4611      	mov	r1, r2
    2cbe:	4798      	blx	r3
    // Set prescalar to 1 so the input frequency to the PWM peripheral is equal
    // to the peripheral clock frequency.
    //
    // PR = Prescale register = defines the maximum value for the prescaler
    channel_.peripheral.registers->PR = 0;
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	685b      	ldr	r3, [r3, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	2200      	movs	r2, #0
    2cca:	60da      	str	r2, [r3, #12]
    // PC = Prescale counter. Set to 0 to cause the timer counter to increment
    // after each peripheral clock tick.
    channel_.peripheral.registers->PC = 0;
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	685b      	ldr	r3, [r3, #4]
    2cd0:	681b      	ldr	r3, [r3, #0]
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	2200      	movs	r2, #0
    2cd6:	611a      	str	r2, [r3, #16]
    // Mode 0x0 means increment time counter (TC) after the peripheral clock
    // has cycled the amount inside of the prescale.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kMode);
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	685b      	ldr	r3, [r3, #4]
    2cdc:	681b      	ldr	r3, [r3, #0]
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	685b      	ldr	r3, [r3, #4]
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	681c      	ldr	r4, [r3, #0]
    2cea:	4b47      	ldr	r3, [pc, #284]	; (2e08 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    2cec:	781a      	ldrb	r2, [r3, #0]
    2cee:	785b      	ldrb	r3, [r3, #1]
    2cf0:	021b      	lsls	r3, r3, #8
    2cf2:	431a      	orrs	r2, r3
    2cf4:	2300      	movs	r3, #0
    2cf6:	f362 030f 	bfi	r3, r2, #0, #16
    2cfa:	461a      	mov	r2, r3
    2cfc:	2100      	movs	r1, #0
    2cfe:	f000 fe3f 	bl	3980 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    2d02:	4603      	mov	r3, r0
    2d04:	6723      	str	r3, [r4, #112]	; 0x70
    // 0x0 for this register says to use the TC for input counts.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kCountInput);
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	685b      	ldr	r3, [r3, #4]
    2d0a:	681b      	ldr	r3, [r3, #0]
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	685b      	ldr	r3, [r3, #4]
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	681c      	ldr	r4, [r3, #0]
    2d18:	4b3c      	ldr	r3, [pc, #240]	; (2e0c <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    2d1a:	781a      	ldrb	r2, [r3, #0]
    2d1c:	785b      	ldrb	r3, [r3, #1]
    2d1e:	021b      	lsls	r3, r3, #8
    2d20:	431a      	orrs	r2, r3
    2d22:	2300      	movs	r3, #0
    2d24:	f362 030f 	bfi	r3, r2, #0, #16
    2d28:	461a      	mov	r2, r3
    2d2a:	2100      	movs	r1, #0
    2d2c:	f000 fe28 	bl	3980 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    2d30:	4603      	mov	r3, r0
    2d32:	6723      	str	r3, [r4, #112]	; 0x70
    // Match register 0 is used to generate the desired frequency. If the time
    // counter TC is equal to MR0
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	685b      	ldr	r3, [r3, #4]
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	3304      	adds	r3, #4
    2d40:	4619      	mov	r1, r3
    2d42:	4610      	mov	r0, r2
    2d44:	f7fe fd88 	bl	1858 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    2d48:	4603      	mov	r3, r0
    2d4a:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    2d4c:	463a      	mov	r2, r7
    2d4e:	f107 0308 	add.w	r3, r7, #8
    2d52:	4611      	mov	r1, r2
    2d54:	4618      	mov	r0, r3
    2d56:	f7ff fde5 	bl	2924 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2d5a:	4603      	mov	r3, r0
    2d5c:	60fb      	str	r3, [r7, #12]
    channel_.peripheral.registers->MR0 =
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	685b      	ldr	r3, [r3, #4]
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    2d66:	f107 030c 	add.w	r3, r7, #12
    2d6a:	4618      	mov	r0, r3
    2d6c:	f7fe fc27 	bl	15be <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    2d70:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    2d72:	61a3      	str	r3, [r4, #24]
    // Sets match register 0 to reset when TC and Match 0 match each other,
    // meaning that the PWM pulse will cycle continuously.
    channel_.peripheral.registers->MCR = bit::Set(
        channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset.position);
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	685b      	ldr	r3, [r3, #4]
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	681b      	ldr	r3, [r3, #0]
    2d7c:	695a      	ldr	r2, [r3, #20]
    2d7e:	2301      	movs	r3, #1
    channel_.peripheral.registers->MCR = bit::Set(
    2d80:	4619      	mov	r1, r3
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	685b      	ldr	r3, [r3, #4]
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	681c      	ldr	r4, [r3, #0]
    2d8a:	4610      	mov	r0, r2
    2d8c:	f000 fc9e 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2d90:	4603      	mov	r3, r0
    2d92:	6163      	str	r3, [r4, #20]
    // Enables PWM TC and PC for counting and enables PWM mode
    EnablePwm();
    2d94:	2101      	movs	r1, #1
    2d96:	6878      	ldr	r0, [r7, #4]
    2d98:	f000 f944 	bl	3024 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    // Enables PWM[channel] output
    channel_.peripheral.registers->PCR =
        bit::Set(channel_.peripheral.registers->PCR,
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	685b      	ldr	r3, [r3, #4]
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	681b      	ldr	r3, [r3, #0]
    2da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 OutputControl::kEnableOutput.position + channel_.channel);
    2da6:	2308      	movs	r3, #8
    2da8:	4619      	mov	r1, r3
    2daa:	687b      	ldr	r3, [r7, #4]
    2dac:	685b      	ldr	r3, [r3, #4]
    2dae:	7a1b      	ldrb	r3, [r3, #8]
    2db0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2db4:	b2db      	uxtb	r3, r3
    2db6:	440b      	add	r3, r1
        bit::Set(channel_.peripheral.registers->PCR,
    2db8:	4619      	mov	r1, r3
    channel_.peripheral.registers->PCR =
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	685b      	ldr	r3, [r3, #4]
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->PCR,
    2dc2:	4610      	mov	r0, r2
    2dc4:	f000 fc82 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2dc8:	4603      	mov	r3, r0
    channel_.peripheral.registers->PCR =
    2dca:	64e3      	str	r3, [r4, #76]	; 0x4c

    channel_.pin.SetPinFunction(channel_.pin_function_id);
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	685b      	ldr	r3, [r3, #4]
    2dd0:	6858      	ldr	r0, [r3, #4]
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	685b      	ldr	r3, [r3, #4]
    2dd6:	685b      	ldr	r3, [r3, #4]
    2dd8:	681b      	ldr	r3, [r3, #0]
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	687a      	ldr	r2, [r7, #4]
    2dde:	6852      	ldr	r2, [r2, #4]
    2de0:	7a12      	ldrb	r2, [r2, #8]
    2de2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    2de6:	b2d2      	uxtb	r2, r2
    2de8:	4611      	mov	r1, r2
    2dea:	4798      	blx	r3

    return Status::kSuccess;
    2dec:	2300      	movs	r3, #0
  }
    2dee:	4618      	mov	r0, r3
    2df0:	3714      	adds	r7, #20
    2df2:	46bd      	mov	sp, r7
    2df4:	bd90      	pop	{r4, r7, pc}
    2df6:	bf00      	nop
    2df8:	0000881c 	.word	0x0000881c
    2dfc:	000083d0 	.word	0x000083d0
    2e00:	00007e1c 	.word	0x00007e1c
    2e04:	00007bd0 	.word	0x00007bd0
    2e08:	000083b4 	.word	0x000083b4
    2e0c:	000083b8 	.word	0x000083b8

00002e10 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>:

  void SetDutyCycle(float duty_cycle) const override
    2e10:	b590      	push	{r4, r7, lr}
    2e12:	b083      	sub	sp, #12
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
    2e18:	ed87 0a00 	vstr	s0, [r7]
  {
    SJ2_ASSERT_FATAL(0.0f <= duty_cycle && duty_cycle <= 1.0f,
    2e1c:	edd7 7a00 	vldr	s15, [r7]
    2e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2e28:	bfac      	ite	ge
    2e2a:	2301      	movge	r3, #1
    2e2c:	2300      	movlt	r3, #0
    2e2e:	b2db      	uxtb	r3, r3
    2e30:	f083 0301 	eor.w	r3, r3, #1
    2e34:	b2db      	uxtb	r3, r3
    2e36:	2b00      	cmp	r3, #0
    2e38:	d110      	bne.n	2e5c <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x4c>
    2e3a:	edd7 7a00 	vldr	s15, [r7]
    2e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2e42:	eef4 7ac7 	vcmpe.f32	s15, s14
    2e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2e4a:	bf94      	ite	ls
    2e4c:	2301      	movls	r3, #1
    2e4e:	2300      	movhi	r3, #0
    2e50:	b2db      	uxtb	r3, r3
    2e52:	f083 0301 	eor.w	r3, r3, #1
    2e56:	b2db      	uxtb	r3, r3
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d00d      	beq.n	2e78 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x68>
    2e5c:	23b5      	movs	r3, #181	; 0xb5
    2e5e:	4a1c      	ldr	r2, [pc, #112]	; (2ed0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc0>)
    2e60:	491c      	ldr	r1, [pc, #112]	; (2ed4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc4>)
    2e62:	481d      	ldr	r0, [pc, #116]	; (2ed8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc8>)
    2e64:	f002 fbe6 	bl	5634 <printf>
    2e68:	481c      	ldr	r0, [pc, #112]	; (2edc <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xcc>)
    2e6a:	f001 fac7 	bl	43fc <puts>
    2e6e:	2100      	movs	r1, #0
    2e70:	2001      	movs	r0, #1
    2e72:	f7fd fc63 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    2e76:	e7fe      	b.n	2e76 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x66>
                     "duty_cycle of Duty Cycle provided is out of bounds.");
    GetMatchRegisters()[channel_.channel] = CalculateDutyCycle(duty_cycle);
    2e78:	ed97 0a00 	vldr	s0, [r7]
    2e7c:	6878      	ldr	r0, [r7, #4]
    2e7e:	f000 f926 	bl	30ce <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>
    2e82:	4604      	mov	r4, r0
    2e84:	6878      	ldr	r0, [r7, #4]
    2e86:	f000 f913 	bl	30b0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    2e8a:	4602      	mov	r2, r0
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	685b      	ldr	r3, [r3, #4]
    2e90:	7a1b      	ldrb	r3, [r3, #8]
    2e92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2e96:	b2db      	uxtb	r3, r3
    2e98:	009b      	lsls	r3, r3, #2
    2e9a:	4413      	add	r3, r2
    2e9c:	601c      	str	r4, [r3, #0]
    channel_.peripheral.registers->LER |= (1 << channel_.channel);
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	685b      	ldr	r3, [r3, #4]
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2ea8:	687b      	ldr	r3, [r7, #4]
    2eaa:	685b      	ldr	r3, [r3, #4]
    2eac:	7a1b      	ldrb	r3, [r3, #8]
    2eae:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2eb2:	b2db      	uxtb	r3, r3
    2eb4:	4619      	mov	r1, r3
    2eb6:	2301      	movs	r3, #1
    2eb8:	408b      	lsls	r3, r1
    2eba:	4619      	mov	r1, r3
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	685b      	ldr	r3, [r3, #4]
    2ec0:	681b      	ldr	r3, [r3, #0]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	430a      	orrs	r2, r1
    2ec6:	651a      	str	r2, [r3, #80]	; 0x50
  }
    2ec8:	bf00      	nop
    2eca:	370c      	adds	r7, #12
    2ecc:	46bd      	mov	sp, r7
    2ece:	bd90      	pop	{r4, r7, pc}
    2ed0:	000087e0 	.word	0x000087e0
    2ed4:	000083d8 	.word	0x000083d8
    2ed8:	00007ef0 	.word	0x00007ef0
    2edc:	00007bd0 	.word	0x00007bd0

00002ee0 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>:

  float GetDutyCycle() const override
    2ee0:	b580      	push	{r7, lr}
    2ee2:	ed2d 8b02 	vpush	{d8}
    2ee6:	b082      	sub	sp, #8
    2ee8:	af00      	add	r7, sp, #0
    2eea:	6078      	str	r0, [r7, #4]
  {
    return (static_cast<float>(GetMatchRegisters()[channel_.channel]) /
    2eec:	6878      	ldr	r0, [r7, #4]
    2eee:	f000 f8df 	bl	30b0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    2ef2:	4602      	mov	r2, r0
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	685b      	ldr	r3, [r3, #4]
    2ef8:	7a1b      	ldrb	r3, [r3, #8]
    2efa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2efe:	b2db      	uxtb	r3, r3
    2f00:	009b      	lsls	r3, r3, #2
    2f02:	4413      	add	r3, r2
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	ee07 3a90 	vmov	s15, r3
    2f0a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
            static_cast<float>(GetMatchRegisters()[0]));
    2f0e:	6878      	ldr	r0, [r7, #4]
    2f10:	f000 f8ce 	bl	30b0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    2f14:	4603      	mov	r3, r0
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	ee07 3a90 	vmov	s15, r3
    2f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2f20:	ee88 7a27 	vdiv.f32	s14, s16, s15
    2f24:	eef0 7a47 	vmov.f32	s15, s14
  }
    2f28:	eeb0 0a67 	vmov.f32	s0, s15
    2f2c:	3708      	adds	r7, #8
    2f2e:	46bd      	mov	sp, r7
    2f30:	ecbd 8b02 	vpop	{d8}
    2f34:	bd80      	pop	{r7, pc}

00002f36 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2f36:	b580      	push	{r7, lr}
    2f38:	b082      	sub	sp, #8
    2f3a:	af00      	add	r7, sp, #0
    2f3c:	6078      	str	r0, [r7, #4]
    2f3e:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    2f40:	6839      	ldr	r1, [r7, #0]
    2f42:	6878      	ldr	r0, [r7, #4]
    2f44:	f7fd fb0a 	bl	55c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2f48:	4603      	mov	r3, r0
    2f4a:	f083 0301 	eor.w	r3, r3, #1
    2f4e:	b2db      	uxtb	r3, r3
		}
    2f50:	4618      	mov	r0, r3
    2f52:	3708      	adds	r7, #8
    2f54:	46bd      	mov	sp, r7
    2f56:	bd80      	pop	{r7, pc}

00002f58 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetFrequency(units::frequency::hertz_t frequency_hz) const override
    2f58:	b590      	push	{r4, r7, lr}
    2f5a:	b087      	sub	sp, #28
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	6078      	str	r0, [r7, #4]
    2f60:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(frequency_hz != 0_Hz, "Pwm Frequency cannot be zero Hz.");
    2f62:	f04f 0000 	mov.w	r0, #0
    2f66:	f04f 0100 	mov.w	r1, #0
    2f6a:	f7fd fa4d 	bl	408 <units::literals::operator"" _Hz(unsigned long long)>
    2f6e:	4603      	mov	r3, r0
    2f70:	60fb      	str	r3, [r7, #12]
    2f72:	f107 020c 	add.w	r2, r7, #12
    2f76:	463b      	mov	r3, r7
    2f78:	4611      	mov	r1, r2
    2f7a:	4618      	mov	r0, r3
    2f7c:	f7ff ffdb 	bl	2f36 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2f80:	4603      	mov	r3, r0
    2f82:	f083 0301 	eor.w	r3, r3, #1
    2f86:	b2db      	uxtb	r3, r3
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d00d      	beq.n	2fa8 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x50>
    2f8c:	23c2      	movs	r3, #194	; 0xc2
    2f8e:	4a21      	ldr	r2, [pc, #132]	; (3014 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xbc>)
    2f90:	4921      	ldr	r1, [pc, #132]	; (3018 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2f92:	4822      	ldr	r0, [pc, #136]	; (301c <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    2f94:	f002 fb4e 	bl	5634 <printf>
    2f98:	4821      	ldr	r0, [pc, #132]	; (3020 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc8>)
    2f9a:	f001 fa2f 	bl	43fc <puts>
    2f9e:	2100      	movs	r1, #0
    2fa0:	2001      	movs	r0, #1
    2fa2:	f7fd fbcb 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    2fa6:	e7fe      	b.n	2fa6 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x4e>
    // Disables PWM mode; this will reset all counters to 0
    // And allow us to update MR0
    float previous_duty_cycle = GetDutyCycle();
    2fa8:	6878      	ldr	r0, [r7, #4]
    2faa:	f7ff ff99 	bl	2ee0 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    2fae:	ed87 0a05 	vstr	s0, [r7, #20]
    EnablePwm(false);
    2fb2:	2100      	movs	r1, #0
    2fb4:	6878      	ldr	r0, [r7, #4]
    2fb6:	f000 f835 	bl	3024 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	685b      	ldr	r3, [r3, #4]
    2fc2:	681b      	ldr	r3, [r3, #0]
    2fc4:	3304      	adds	r3, #4
    2fc6:	4619      	mov	r1, r3
    2fc8:	4610      	mov	r0, r2
    2fca:	f7fe fc45 	bl	1858 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    2fce:	4603      	mov	r3, r0
    2fd0:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    2fd2:	463a      	mov	r2, r7
    2fd4:	f107 0308 	add.w	r3, r7, #8
    2fd8:	4611      	mov	r1, r2
    2fda:	4618      	mov	r0, r3
    2fdc:	f7ff fca2 	bl	2924 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2fe0:	4603      	mov	r3, r0
    2fe2:	613b      	str	r3, [r7, #16]
    channel_.peripheral.registers->MR0 =
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	685b      	ldr	r3, [r3, #4]
    2fe8:	681b      	ldr	r3, [r3, #0]
    2fea:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    2fec:	f107 0310 	add.w	r3, r7, #16
    2ff0:	4618      	mov	r0, r3
    2ff2:	f7fe fae4 	bl	15be <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    2ff6:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    2ff8:	61a3      	str	r3, [r4, #24]
    SetDutyCycle(previous_duty_cycle);
    2ffa:	ed97 0a05 	vldr	s0, [r7, #20]
    2ffe:	6878      	ldr	r0, [r7, #4]
    3000:	f7ff ff06 	bl	2e10 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    EnablePwm();
    3004:	2101      	movs	r1, #1
    3006:	6878      	ldr	r0, [r7, #4]
    3008:	f000 f80c 	bl	3024 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
  }
    300c:	bf00      	nop
    300e:	371c      	adds	r7, #28
    3010:	46bd      	mov	sp, r7
    3012:	bd90      	pop	{r4, r7, pc}
    3014:	00008790 	.word	0x00008790
    3018:	000083e0 	.word	0x000083e0
    301c:	00007fbc 	.word	0x00007fbc
    3020:	00007bd0 	.word	0x00007bd0

00003024 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>:
      result = kPeripheralFrequency / match_register0;
    }
    return result;
  }

  void EnablePwm(bool enable = true) const
    3024:	b580      	push	{r7, lr}
    3026:	b084      	sub	sp, #16
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
    302c:	460b      	mov	r3, r1
    302e:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pwm_timer = &channel_.peripheral.registers->TCR;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	685b      	ldr	r3, [r3, #4]
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	681b      	ldr	r3, [r3, #0]
    3038:	3304      	adds	r3, #4
    303a:	60fb      	str	r3, [r7, #12]
    if (enable)
    303c:	78fb      	ldrb	r3, [r7, #3]
    303e:	2b00      	cmp	r3, #0
    3040:	d028      	beq.n	3094 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0x70>
    {
      // Reset the Timer Counter
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterReset.position);
    3042:	68fb      	ldr	r3, [r7, #12]
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	2201      	movs	r2, #1
    3048:	4611      	mov	r1, r2
    304a:	4618      	mov	r0, r3
    304c:	f000 fb3e 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    3050:	4602      	mov	r2, r0
    3052:	68fb      	ldr	r3, [r7, #12]
    3054:	601a      	str	r2, [r3, #0]
      // Clear reset and allow timer to count
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kCounterReset.position);
    3056:	68fb      	ldr	r3, [r7, #12]
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	2201      	movs	r2, #1
    305c:	4611      	mov	r1, r2
    305e:	4618      	mov	r0, r3
    3060:	f000 fb21 	bl	36a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    3064:	4602      	mov	r2, r0
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	601a      	str	r2, [r3, #0]
      // Enable PWM output
      *pwm_timer = bit::Set(*pwm_timer, Timer::kPwmEnable.position);
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	2203      	movs	r2, #3
    3070:	4611      	mov	r1, r2
    3072:	4618      	mov	r0, r3
    3074:	f000 fb2a 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    3078:	4602      	mov	r2, r0
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	601a      	str	r2, [r3, #0]
      // Enable counting
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterEnable.position);
    307e:	68fb      	ldr	r3, [r7, #12]
    3080:	681b      	ldr	r3, [r3, #0]
    3082:	2200      	movs	r2, #0
    3084:	4611      	mov	r1, r2
    3086:	4618      	mov	r0, r3
    3088:	f000 fb20 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    308c:	4602      	mov	r2, r0
    308e:	68fb      	ldr	r3, [r7, #12]
    3090:	601a      	str	r2, [r3, #0]
    else
    {
      // Disable PWM output
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable.position);
    }
  }
    3092:	e009      	b.n	30a8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0x84>
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable.position);
    3094:	68fb      	ldr	r3, [r7, #12]
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	2203      	movs	r2, #3
    309a:	4611      	mov	r1, r2
    309c:	4618      	mov	r0, r3
    309e:	f000 fb02 	bl	36a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    30a2:	4602      	mov	r2, r0
    30a4:	68fb      	ldr	r3, [r7, #12]
    30a6:	601a      	str	r2, [r3, #0]
  }
    30a8:	bf00      	nop
    30aa:	3710      	adds	r7, #16
    30ac:	46bd      	mov	sp, r7
    30ae:	bd80      	pop	{r7, pc}

000030b0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>:

  volatile uint32_t * GetMatchRegisters() const
    30b0:	b480      	push	{r7}
    30b2:	b083      	sub	sp, #12
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
  {
    return &channel_.peripheral.registers->MR0;
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	685b      	ldr	r3, [r3, #4]
    30bc:	681b      	ldr	r3, [r3, #0]
    30be:	681b      	ldr	r3, [r3, #0]
    30c0:	3318      	adds	r3, #24
  }
    30c2:	4618      	mov	r0, r3
    30c4:	370c      	adds	r7, #12
    30c6:	46bd      	mov	sp, r7
    30c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    30cc:	4770      	bx	lr

000030ce <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>:

  uint32_t CalculateDutyCycle(float percent) const
    30ce:	b580      	push	{r7, lr}
    30d0:	b084      	sub	sp, #16
    30d2:	af00      	add	r7, sp, #0
    30d4:	6078      	str	r0, [r7, #4]
    30d6:	ed87 0a00 	vstr	s0, [r7]
  {
    float pwm_period = static_cast<float>(GetMatchRegisters()[0]);
    30da:	6878      	ldr	r0, [r7, #4]
    30dc:	f7ff ffe8 	bl	30b0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    30e0:	4603      	mov	r3, r0
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	ee07 3a90 	vmov	s15, r3
    30e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    30ec:	edc7 7a03 	vstr	s15, [r7, #12]
    return static_cast<uint32_t>(percent * pwm_period);
    30f0:	ed97 7a00 	vldr	s14, [r7]
    30f4:	edd7 7a03 	vldr	s15, [r7, #12]
    30f8:	ee67 7a27 	vmul.f32	s15, s14, s15
    30fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3100:	ee17 3a90 	vmov	r3, s15
  }
    3104:	4618      	mov	r0, r3
    3106:	3710      	adds	r7, #16
    3108:	46bd      	mov	sp, r7
    310a:	bd80      	pop	{r7, pc}

0000310c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    310c:	b490      	push	{r4, r7}
    310e:	b082      	sub	sp, #8
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
    3114:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    3116:	683b      	ldr	r3, [r7, #0]
    3118:	681b      	ldr	r3, [r3, #0]
    311a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    311e:	687a      	ldr	r2, [r7, #4]
    3120:	e9c2 3400 	strd	r3, r4, [r2]
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	4618      	mov	r0, r3
    3128:	3708      	adds	r7, #8
    312a:	46bd      	mov	sp, r7
    312c:	bc90      	pop	{r4, r7}
    312e:	4770      	bx	lr

00003130 <std::chrono::duration_values<long long>::max()>:
	max()
    3130:	b598      	push	{r3, r4, r7, lr}
    3132:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    3134:	f7fd f918 	bl	368 <std::numeric_limits<long long>::max()>
    3138:	4603      	mov	r3, r0
    313a:	460c      	mov	r4, r1
    313c:	4618      	mov	r0, r3
    313e:	4621      	mov	r1, r4
    3140:	bd98      	pop	{r3, r4, r7, pc}

00003142 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    3142:	b590      	push	{r4, r7, lr}
    3144:	b085      	sub	sp, #20
    3146:	af00      	add	r7, sp, #0
    3148:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    314a:	f7ff fff1 	bl	3130 <std::chrono::duration_values<long long>::max()>
    314e:	4603      	mov	r3, r0
    3150:	460c      	mov	r4, r1
    3152:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3156:	f107 0308 	add.w	r3, r7, #8
    315a:	4619      	mov	r1, r3
    315c:	6878      	ldr	r0, [r7, #4]
    315e:	f7fd fb3f 	bl	7e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    3162:	6878      	ldr	r0, [r7, #4]
    3164:	3714      	adds	r7, #20
    3166:	46bd      	mov	sp, r7
    3168:	bd90      	pop	{r4, r7, pc}

0000316a <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    316a:	b580      	push	{r7, lr}
    316c:	b082      	sub	sp, #8
    316e:	af00      	add	r7, sp, #0
    3170:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	4618      	mov	r0, r3
    3176:	f000 f805 	bl	3184 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
    317a:	6878      	ldr	r0, [r7, #4]
    317c:	3708      	adds	r7, #8
    317e:	46bd      	mov	sp, r7
    3180:	bd80      	pop	{r7, pc}
    3182:	Address 0x0000000000003182 is out of bounds.


00003184 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    3184:	b580      	push	{r7, lr}
    3186:	b082      	sub	sp, #8
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    318c:	4903      	ldr	r1, [pc, #12]	; (319c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
    318e:	6878      	ldr	r0, [r7, #4]
    3190:	f7fe fb8a 	bl	18a8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    3194:	6878      	ldr	r0, [r7, #4]
    3196:	3708      	adds	r7, #8
    3198:	46bd      	mov	sp, r7
    319a:	bd80      	pop	{r7, pc}
    319c:	000077d0 	.word	0x000077d0

000031a0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    31a0:	b580      	push	{r7, lr}
    31a2:	b082      	sub	sp, #8
    31a4:	af00      	add	r7, sp, #0
    31a6:	6078      	str	r0, [r7, #4]
    31a8:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	6839      	ldr	r1, [r7, #0]
    31ae:	4618      	mov	r0, r3
    31b0:	f000 f804 	bl	31bc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    31b4:	6878      	ldr	r0, [r7, #4]
    31b6:	3708      	adds	r7, #8
    31b8:	46bd      	mov	sp, r7
    31ba:	bd80      	pop	{r7, pc}

000031bc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    31bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31be:	b085      	sub	sp, #20
    31c0:	af00      	add	r7, sp, #0
    31c2:	6078      	str	r0, [r7, #4]
    31c4:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    31c6:	6838      	ldr	r0, [r7, #0]
    31c8:	f7fe fb7f 	bl	18ca <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    31cc:	4605      	mov	r5, r0
    31ce:	460e      	mov	r6, r1
    31d0:	462b      	mov	r3, r5
    31d2:	4634      	mov	r4, r6
    31d4:	f04f 0100 	mov.w	r1, #0
    31d8:	f04f 0200 	mov.w	r2, #0
    31dc:	0162      	lsls	r2, r4, #5
    31de:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    31e2:	0159      	lsls	r1, r3, #5
    31e4:	460b      	mov	r3, r1
    31e6:	4614      	mov	r4, r2
    31e8:	1b5b      	subs	r3, r3, r5
    31ea:	eb64 0406 	sbc.w	r4, r4, r6
    31ee:	f04f 0100 	mov.w	r1, #0
    31f2:	f04f 0200 	mov.w	r2, #0
    31f6:	00a2      	lsls	r2, r4, #2
    31f8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    31fc:	0099      	lsls	r1, r3, #2
    31fe:	460b      	mov	r3, r1
    3200:	4614      	mov	r4, r2
    3202:	195b      	adds	r3, r3, r5
    3204:	eb44 0406 	adc.w	r4, r4, r6
    3208:	f04f 0100 	mov.w	r1, #0
    320c:	f04f 0200 	mov.w	r2, #0
    3210:	00e2      	lsls	r2, r4, #3
    3212:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    3216:	00d9      	lsls	r1, r3, #3
    3218:	460b      	mov	r3, r1
    321a:	4614      	mov	r4, r2
    321c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3220:	f107 0308 	add.w	r3, r7, #8
    3224:	4619      	mov	r1, r3
    3226:	6878      	ldr	r0, [r7, #4]
    3228:	f7fd fada 	bl	7e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    322c:	6878      	ldr	r0, [r7, #4]
    322e:	3714      	adds	r7, #20
    3230:	46bd      	mov	sp, r7
    3232:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003234 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    3234:	b590      	push	{r4, r7, lr}
    3236:	b085      	sub	sp, #20
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
    323c:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    323e:	f107 0308 	add.w	r3, r7, #8
    3242:	6839      	ldr	r1, [r7, #0]
    3244:	4618      	mov	r0, r3
    3246:	f7ff ffab 	bl	31a0 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    324a:	f107 0308 	add.w	r3, r7, #8
    324e:	4618      	mov	r0, r3
    3250:	f7fe fa32 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3254:	4603      	mov	r3, r0
    3256:	460c      	mov	r4, r1
    3258:	687a      	ldr	r2, [r7, #4]
    325a:	e9c2 3400 	strd	r3, r4, [r2]
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	4618      	mov	r0, r3
    3262:	3714      	adds	r7, #20
    3264:	46bd      	mov	sp, r7
    3266:	bd90      	pop	{r4, r7, pc}

00003268 <main>:
constexpr units::frequency::hertz_t motor_controller_freq = 20_Hz;
constexpr std::chrono::microseconds motor_controller_min_pulse = 0us;
constexpr std::chrono::microseconds motor_controller_max_pulse = 50us;

int main()
{
    3268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    326c:	ed2d 8b02 	vpush	{d8}
    3270:	b0ba      	sub	sp, #232	; 0xe8
    3272:	af04      	add	r7, sp, #16
                              DefaultSystemController())
    3274:	f7fe ff02 	bl	207c <sjsu::lpc40xx::DefaultSystemController()>
    3278:	4603      	mov	r3, r0
    float f;
    uint32_t ui;
  }rec;

  // Declare peripheral objects
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    327a:	461a      	mov	r2, r3
    327c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
    3280:	49c1      	ldr	r1, [pc, #772]	; (3588 <main+0x320>)
    3282:	4618      	mov	r0, r3
    3284:	f7ff f94e 	bl	2524 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    3288:	f7fe fef8 	bl	207c <sjsu::lpc40xx::DefaultSystemController()>
    328c:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    328e:	461a      	mov	r2, r3
    3290:	f107 0394 	add.w	r3, r7, #148	; 0x94
    3294:	49bd      	ldr	r1, [pc, #756]	; (358c <main+0x324>)
    3296:	4618      	mov	r0, r3
    3298:	f7ff fb2a 	bl	28f0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    329c:	f7fe feee 	bl	207c <sjsu::lpc40xx::DefaultSystemController()>
    32a0:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_0(sjsu::lpc40xx::Pwm::Channel::kPwm1);
    32a2:	461a      	mov	r2, r3
    32a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
    32a8:	49b9      	ldr	r1, [pc, #740]	; (3590 <main+0x328>)
    32aa:	4618      	mov	r0, r3
    32ac:	f7ff fcbe 	bl	2c2c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
  sjsu::lpc40xx::Gpio p1_01(1, 1);
    32b0:	4bb8      	ldr	r3, [pc, #736]	; (3594 <main+0x32c>)
    32b2:	677b      	str	r3, [r7, #116]	; 0x74
    32b4:	2300      	movs	r3, #0
    32b6:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
    32ba:	4bb7      	ldr	r3, [pc, #732]	; (3598 <main+0x330>)
    32bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    32be:	2301      	movs	r3, #1
    32c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    32c4:	2301      	movs	r3, #1
    32c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    32ca:	4bb4      	ldr	r3, [pc, #720]	; (359c <main+0x334>)
    32cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  p1_01.SetAsOutput();
    32d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
    32d4:	4618      	mov	r0, r3
    32d6:	f7fd fd8c 	bl	df2 <sjsu::Gpio::SetAsOutput() const>
  p1_01.SetLow();
    32da:	f107 0374 	add.w	r3, r7, #116	; 0x74
    32de:	4618      	mov	r0, r3
    32e0:	f7fd fd78 	bl	dd4 <sjsu::Gpio::SetLow() const>
  LOG_INFO("direction gpio (p1_0) initialized");
    32e4:	2327      	movs	r3, #39	; 0x27
    32e6:	4aae      	ldr	r2, [pc, #696]	; (35a0 <main+0x338>)
    32e8:	49ae      	ldr	r1, [pc, #696]	; (35a4 <main+0x33c>)
    32ea:	48af      	ldr	r0, [pc, #700]	; (35a8 <main+0x340>)
    32ec:	f002 f9a2 	bl	5634 <printf>

  adc2.Initialize();
    32f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
    32f4:	4618      	mov	r0, r3
    32f6:	f7ff fb41 	bl	297c <sjsu::lpc40xx::Adc::Initialize() const>
  adc2.BurstMode(true);
    32fa:	2001      	movs	r0, #1
    32fc:	f7ff fab0 	bl	2860 <sjsu::lpc40xx::Adc::BurstMode(bool)>
  LOG_INFO("adc2 initialized");
    3300:	232b      	movs	r3, #43	; 0x2b
    3302:	4aa7      	ldr	r2, [pc, #668]	; (35a0 <main+0x338>)
    3304:	49a9      	ldr	r1, [pc, #676]	; (35ac <main+0x344>)
    3306:	48aa      	ldr	r0, [pc, #680]	; (35b0 <main+0x348>)
    3308:	f002 f994 	bl	5634 <printf>
  uart2.Initialize(38400);
    330c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
    3310:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    3314:	4618      	mov	r0, r3
    3316:	f7ff f91f 	bl	2558 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    331a:	232d      	movs	r3, #45	; 0x2d
    331c:	4aa0      	ldr	r2, [pc, #640]	; (35a0 <main+0x338>)
    331e:	49a5      	ldr	r1, [pc, #660]	; (35b4 <main+0x34c>)
    3320:	48a5      	ldr	r0, [pc, #660]	; (35b8 <main+0x350>)
    3322:	f002 f987 	bl	5634 <printf>

  float pid_input = 0;
    3326:	f04f 0300 	mov.w	r3, #0
    332a:	673b      	str	r3, [r7, #112]	; 0x70
  float pid_output = 0;
    332c:	f04f 0300 	mov.w	r3, #0
    3330:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t LA_position = 0;
    3332:	2300      	movs	r3, #0
    3334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  float set_point = 0;
    3338:	f04f 0300 	mov.w	r3, #0
    333c:	66bb      	str	r3, [r7, #104]	; 0x68
  sjsu::PID pid_controller(&pid_input, &pid_output, &set_point, 0.1, 0.1, 0.1);
    333e:	f107 0368 	add.w	r3, r7, #104	; 0x68
    3342:	f107 026c 	add.w	r2, r7, #108	; 0x6c
    3346:	f107 0170 	add.w	r1, r7, #112	; 0x70
    334a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
    334e:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 35bc <main+0x354>
    3352:	eddf 0a9a 	vldr	s1, [pc, #616]	; 35bc <main+0x354>
    3356:	ed9f 0a99 	vldr	s0, [pc, #612]	; 35bc <main+0x354>
    335a:	f7fd fadb 	bl	914 <sjsu::PID::PID(float*, float*, float*, float, float, float)>
  pid_controller.SetLimits(-3.3, 3.3);
    335e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    3362:	eddf 0a97 	vldr	s1, [pc, #604]	; 35c0 <main+0x358>
    3366:	ed9f 0a97 	vldr	s0, [pc, #604]	; 35c4 <main+0x35c>
    336a:	4618      	mov	r0, r3
    336c:	f7fd fbee 	bl	b4c <sjsu::PID::SetLimits(float, float)>
  LOG_INFO("PID controller initialized");
    3370:	2335      	movs	r3, #53	; 0x35
    3372:	4a8b      	ldr	r2, [pc, #556]	; (35a0 <main+0x338>)
    3374:	4994      	ldr	r1, [pc, #592]	; (35c8 <main+0x360>)
    3376:	4895      	ldr	r0, [pc, #596]	; (35cc <main+0x364>)
    3378:	f002 f95c 	bl	5634 <printf>

  sjsu::MotorController linear_actuator(p2_0, p1_01);
    337c:	f107 0274 	add.w	r2, r7, #116	; 0x74
    3380:	f107 0188 	add.w	r1, r7, #136	; 0x88
    3384:	f107 0308 	add.w	r3, r7, #8
    3388:	4618      	mov	r0, r3
    338a:	f7fe f869 	bl	1460 <sjsu::MotorController::MotorController(sjsu::Pwm&, sjsu::Gpio&)>
  linear_actuator.Initialize(motor_controller_freq);
    338e:	4b90      	ldr	r3, [pc, #576]	; (35d0 <main+0x368>)
    3390:	f107 0208 	add.w	r2, r7, #8
    3394:	6819      	ldr	r1, [r3, #0]
    3396:	4610      	mov	r0, r2
    3398:	f7fe f89e 	bl	14d8 <sjsu::MotorController::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator.SetPulseBounds(motor_controller_min_pulse, 
    339c:	4a8d      	ldr	r2, [pc, #564]	; (35d4 <main+0x36c>)
    339e:	f107 0108 	add.w	r1, r7, #8
    33a2:	4b8d      	ldr	r3, [pc, #564]	; (35d8 <main+0x370>)
    33a4:	e9d3 3400 	ldrd	r3, r4, [r3]
    33a8:	e9cd 3400 	strd	r3, r4, [sp]
    33ac:	e9d2 2300 	ldrd	r2, r3, [r2]
    33b0:	4608      	mov	r0, r1
    33b2:	f7fe f95a 	bl	166a <sjsu::MotorController::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
                                 motor_controller_max_pulse);
  linear_actuator.SetAngularVelocityBounds(linear_actuator_min_velocity, 
    33b6:	4a89      	ldr	r2, [pc, #548]	; (35dc <main+0x374>)
    33b8:	4b89      	ldr	r3, [pc, #548]	; (35e0 <main+0x378>)
    33ba:	f107 0008 	add.w	r0, r7, #8
    33be:	6812      	ldr	r2, [r2, #0]
    33c0:	6819      	ldr	r1, [r3, #0]
    33c2:	f7fe f967 	bl	1694 <sjsu::MotorController::SetAngularVelocityBounds(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
                                           linear_actuator_max_velocity);
  LOG_INFO("Motor controller initialized");
    33c6:	233d      	movs	r3, #61	; 0x3d
    33c8:	4a75      	ldr	r2, [pc, #468]	; (35a0 <main+0x338>)
    33ca:	4986      	ldr	r1, [pc, #536]	; (35e4 <main+0x37c>)
    33cc:	4886      	ldr	r0, [pc, #536]	; (35e8 <main+0x380>)
    33ce:	f002 f931 	bl	5634 <printf>

  bool prev_sign = false;
    33d2:	2300      	movs	r3, #0
    33d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  units::angular_velocity::revolutions_per_minute_t prev_vel = 0_rpm;
    33d8:	f04f 0300 	mov.w	r3, #0
    33dc:	607b      	str	r3, [r7, #4]
  while (true)
  {
    // LA_position = adc2.Read();
    pid_input = sjsu::Map(adc2.Read(), 0, 4095, 0.0f, 3.3f);
    33de:	f107 0394 	add.w	r3, r7, #148	; 0x94
    33e2:	4618      	mov	r0, r3
    33e4:	f7ff fb58 	bl	2a98 <sjsu::lpc40xx::Adc::Read() const>
    33e8:	4603      	mov	r3, r0
    33ea:	eddf 0a75 	vldr	s1, [pc, #468]	; 35c0 <main+0x358>
    33ee:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 35ec <main+0x384>
    33f2:	f640 72ff 	movw	r2, #4095	; 0xfff
    33f6:	2100      	movs	r1, #0
    33f8:	4618      	mov	r0, r3
    33fa:	f000 fad3 	bl	39a4 <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>
    33fe:	eef0 7a40 	vmov.f32	s15, s0
    3402:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    // Receive a float (Glove data) over UART
    for (size_t i = 0; i < 4; i++)
    3406:	2300      	movs	r3, #0
    3408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    340c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    3410:	2b03      	cmp	r3, #3
    3412:	d81c      	bhi.n	344e <main+0x1e6>
    {
      uint8_t receive = uart2.Read();
    3414:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    3418:	4618      	mov	r0, r3
    341a:	f7ff fe92 	bl	3142 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    341e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
    3422:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
    3426:	4608      	mov	r0, r1
    3428:	f7fe fe32 	bl	2090 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    342c:	4603      	mov	r3, r0
    342e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
      rec.ui = (rec.ui << 8) | receive;
    3432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    3436:	021a      	lsls	r2, r3, #8
    3438:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
    343c:	4313      	orrs	r3, r2
    343e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (size_t i = 0; i < 4; i++)
    3442:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    3446:	3301      	adds	r3, #1
    3448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    344c:	e7de      	b.n	340c <main+0x1a4>
    }
    LOG_INFO("Read value %f over UART", rec.f);
    344e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    3452:	4618      	mov	r0, r3
    3454:	f002 fe74 	bl	6140 <__aeabi_f2d>
    3458:	4603      	mov	r3, r0
    345a:	460c      	mov	r4, r1
    345c:	e9cd 3400 	strd	r3, r4, [sp]
    3460:	234b      	movs	r3, #75	; 0x4b
    3462:	4a4f      	ldr	r2, [pc, #316]	; (35a0 <main+0x338>)
    3464:	4962      	ldr	r1, [pc, #392]	; (35f0 <main+0x388>)
    3466:	4863      	ldr	r0, [pc, #396]	; (35f4 <main+0x38c>)
    3468:	f002 f8e4 	bl	5634 <printf>
    set_point = rec.f;
    346c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    3470:	66bb      	str	r3, [r7, #104]	; 0x68
    // Run the recieved data through the PID algorithm
    pid_controller.Calculate();
    3472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    3476:	4618      	mov	r0, r3
    3478:	f7fd fa9c 	bl	9b4 <sjsu::PID::Calculate()>

    printf("\nPOT value: %1.5f\nLA value: %1.5f\n PID value: %1.5f\n",
        rec.f, pid_input, pid_output);
    347c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    printf("\nPOT value: %1.5f\nLA value: %1.5f\n PID value: %1.5f\n",
    3480:	4618      	mov	r0, r3
    3482:	f002 fe5d 	bl	6140 <__aeabi_f2d>
    3486:	4680      	mov	r8, r0
    3488:	4689      	mov	r9, r1
    348a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    348c:	4618      	mov	r0, r3
    348e:	f002 fe57 	bl	6140 <__aeabi_f2d>
    3492:	4604      	mov	r4, r0
    3494:	460d      	mov	r5, r1
    3496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    3498:	4618      	mov	r0, r3
    349a:	f002 fe51 	bl	6140 <__aeabi_f2d>
    349e:	4602      	mov	r2, r0
    34a0:	460b      	mov	r3, r1
    34a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    34a6:	e9cd 4500 	strd	r4, r5, [sp]
    34aa:	4642      	mov	r2, r8
    34ac:	464b      	mov	r3, r9
    34ae:	4852      	ldr	r0, [pc, #328]	; (35f8 <main+0x390>)
    34b0:	f002 f8c0 	bl	5634 <printf>
    // Map the output from the PID controller to proper units for the LA 
    units::angular_velocity::revolutions_per_minute_t converted_output 
        = sjsu::Map(pid_output, -3.3f, 3.3f, 0_rpm, 0.1_rpm);
    34b4:	ed97 8a1b 	vldr	s16, [r7, #108]	; 0x6c
    34b8:	f04f 0000 	mov.w	r0, #0
    34bc:	f04f 0100 	mov.w	r1, #0
    34c0:	f7fc ffe4 	bl	48c <units::literals::operator"" _rpm(unsigned long long)>
    34c4:	4604      	mov	r4, r0
    34c6:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 3580 <main+0x318>
    34ca:	f7fc ffc9 	bl	460 <units::literals::operator"" _rpm(long double)>
    34ce:	4603      	mov	r3, r0
    34d0:	4619      	mov	r1, r3
    34d2:	4620      	mov	r0, r4
    34d4:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 35c0 <main+0x358>
    34d8:	eddf 0a3a 	vldr	s1, [pc, #232]	; 35c4 <main+0x35c>
    34dc:	eeb0 0a48 	vmov.f32	s0, s16
    34e0:	f000 faad 	bl	3a3e <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> sjsu::Map<float, float, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> >(float, float, float, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
    34e4:	4603      	mov	r3, r0
    34e6:	603b      	str	r3, [r7, #0]
    if(prev_vel != converted_output)
    34e8:	463a      	mov	r2, r7
    34ea:	1d3b      	adds	r3, r7, #4
    34ec:	4611      	mov	r1, r2
    34ee:	4618      	mov	r0, r3
    34f0:	f000 faef 	bl	3ad2 <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    34f4:	4603      	mov	r3, r0
    34f6:	2b00      	cmp	r3, #0
    34f8:	d005      	beq.n	3506 <main+0x29e>
    {
      linear_actuator.SetAngularVelocity(converted_output);
    34fa:	f107 0308 	add.w	r3, r7, #8
    34fe:	6839      	ldr	r1, [r7, #0]
    3500:	4618      	mov	r0, r3
    3502:	f7fe f94b 	bl	179c <sjsu::MotorController::SetAngularVelocity(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
    }
    if(signbit(pid_output) != prev_sign)
    3506:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
    350a:	eeb0 0a67 	vmov.f32	s0, s15
    350e:	f7fc ff4e 	bl	3ae <std::signbit(float)>
    3512:	4603      	mov	r3, r0
    3514:	461a      	mov	r2, r3
    3516:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    351a:	4293      	cmp	r3, r2
    351c:	bf14      	ite	ne
    351e:	2301      	movne	r3, #1
    3520:	2300      	moveq	r3, #0
    3522:	b2db      	uxtb	r3, r3
    3524:	2b00      	cmp	r3, #0
    3526:	d016      	beq.n	3556 <main+0x2ee>
    {
      linear_actuator.SetDirection(signbit(pid_output));
    3528:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
    352c:	eeb0 0a67 	vmov.f32	s0, s15
    3530:	f7fc ff3d 	bl	3ae <std::signbit(float)>
    3534:	4603      	mov	r3, r0
    3536:	461a      	mov	r2, r3
    3538:	f107 0308 	add.w	r3, r7, #8
    353c:	4611      	mov	r1, r2
    353e:	4618      	mov	r0, r3
    3540:	f7fe f8fb 	bl	173a <sjsu::MotorController::SetDirection(bool)>
      prev_sign = signbit(pid_output);
    3544:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
    3548:	eeb0 0a67 	vmov.f32	s0, s15
    354c:	f7fc ff2f 	bl	3ae <std::signbit(float)>
    3550:	4603      	mov	r3, r0
    3552:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    }
    // Delay 100 ms
    sjsu::Delay(100ms);
    3556:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    355a:	4618      	mov	r0, r3
    355c:	f7ff fe05 	bl	316a <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
    3560:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
    3564:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
    3568:	4611      	mov	r1, r2
    356a:	4618      	mov	r0, r3
    356c:	f7ff fe62 	bl	3234 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    3570:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
    3574:	f7fd f9c0 	bl	8f8 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
    3578:	e731      	b.n	33de <main+0x176>
    357a:	bf00      	nop
    357c:	f3af 8000 	nop.w
    3580:	9999999a 	.word	0x9999999a
    3584:	3fb99999 	.word	0x3fb99999
    3588:	10000010 	.word	0x10000010
    358c:	000083a8 	.word	0x000083a8
    3590:	000083c4 	.word	0x000083c4
    3594:	00008530 	.word	0x00008530
    3598:	00008564 	.word	0x00008564
    359c:	000082b4 	.word	0x000082b4
    35a0:	00008574 	.word	0x00008574
    35a4:	00008408 	.word	0x00008408
    35a8:	00008060 	.word	0x00008060
    35ac:	00008414 	.word	0x00008414
    35b0:	000080bc 	.word	0x000080bc
    35b4:	00008420 	.word	0x00008420
    35b8:	00008108 	.word	0x00008108
    35bc:	3dcccccd 	.word	0x3dcccccd
    35c0:	40533333 	.word	0x40533333
    35c4:	c0533333 	.word	0xc0533333
    35c8:	0000842c 	.word	0x0000842c
    35cc:	00008154 	.word	0x00008154
    35d0:	000083f0 	.word	0x000083f0
    35d4:	000083f8 	.word	0x000083f8
    35d8:	00008400 	.word	0x00008400
    35dc:	000083ec 	.word	0x000083ec
    35e0:	000083e8 	.word	0x000083e8
    35e4:	00008438 	.word	0x00008438
    35e8:	000081a8 	.word	0x000081a8
    35ec:	00000000 	.word	0x00000000
    35f0:	00008444 	.word	0x00008444
    35f4:	00008200 	.word	0x00008200
    35f8:	00008254 	.word	0x00008254

000035fc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    35fc:	b590      	push	{r4, r7, lr}
    35fe:	b087      	sub	sp, #28
    3600:	af00      	add	r7, sp, #0
    3602:	60f8      	str	r0, [r7, #12]
    3604:	60b9      	str	r1, [r7, #8]
    3606:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    3608:	68bb      	ldr	r3, [r7, #8]
    360a:	e9d3 3400 	ldrd	r3, r4, [r3]
    360e:	1c59      	adds	r1, r3, #1
    3610:	f144 0200 	adc.w	r2, r4, #0
    3614:	68b8      	ldr	r0, [r7, #8]
    3616:	e9c0 1200 	strd	r1, r2, [r0]
    361a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    361e:	f107 0310 	add.w	r3, r7, #16
    3622:	4619      	mov	r1, r3
    3624:	68f8      	ldr	r0, [r7, #12]
    3626:	f7fd f8db 	bl	7e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    362a:	68f8      	ldr	r0, [r7, #12]
    362c:	371c      	adds	r7, #28
    362e:	46bd      	mov	sp, r7
    3630:	bd90      	pop	{r4, r7, pc}

00003632 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    3632:	b5f0      	push	{r4, r5, r6, r7, lr}
    3634:	b087      	sub	sp, #28
    3636:	af00      	add	r7, sp, #0
    3638:	6078      	str	r0, [r7, #4]
    363a:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	e9d3 3400 	ldrd	r3, r4, [r3]
    3642:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3646:	f107 0308 	add.w	r3, r7, #8
    364a:	4618      	mov	r0, r3
    364c:	f7fe f834 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3650:	4605      	mov	r5, r0
    3652:	460e      	mov	r6, r1
    3654:	683b      	ldr	r3, [r7, #0]
    3656:	e9d3 3400 	ldrd	r3, r4, [r3]
    365a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    365e:	f107 0310 	add.w	r3, r7, #16
    3662:	4618      	mov	r0, r3
    3664:	f7fe f828 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3668:	4603      	mov	r3, r0
    366a:	460c      	mov	r4, r1
    366c:	42a6      	cmp	r6, r4
    366e:	bf06      	itte	eq
    3670:	429d      	cmpeq	r5, r3
    3672:	2301      	moveq	r3, #1
    3674:	2300      	movne	r3, #0
    3676:	b2db      	uxtb	r3, r3
      }
    3678:	4618      	mov	r0, r3
    367a:	371c      	adds	r7, #28
    367c:	46bd      	mov	sp, r7
    367e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003680 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	60f8      	str	r0, [r7, #12]
    3688:	460b      	mov	r3, r1
    368a:	80ba      	strh	r2, [r7, #4]
    368c:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    368e:	793b      	ldrb	r3, [r7, #4]
    3690:	461a      	mov	r2, r3
    3692:	797b      	ldrb	r3, [r7, #5]
    3694:	7af9      	ldrb	r1, [r7, #11]
    3696:	68f8      	ldr	r0, [r7, #12]
    3698:	f000 fa81 	bl	3b9e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    369c:	4603      	mov	r3, r0
}
    369e:	4618      	mov	r0, r3
    36a0:	3710      	adds	r7, #16
    36a2:	46bd      	mov	sp, r7
    36a4:	bd80      	pop	{r7, pc}

000036a6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    36a6:	b480      	push	{r7}
    36a8:	b083      	sub	sp, #12
    36aa:	af00      	add	r7, sp, #0
    36ac:	6078      	str	r0, [r7, #4]
    36ae:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    36b0:	2201      	movs	r2, #1
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	fa02 f303 	lsl.w	r3, r2, r3
    36b8:	43db      	mvns	r3, r3
    36ba:	461a      	mov	r2, r3
    36bc:	687b      	ldr	r3, [r7, #4]
    36be:	4013      	ands	r3, r2
}
    36c0:	4618      	mov	r0, r3
    36c2:	370c      	adds	r7, #12
    36c4:	46bd      	mov	sp, r7
    36c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ca:	4770      	bx	lr

000036cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    36cc:	b480      	push	{r7}
    36ce:	b083      	sub	sp, #12
    36d0:	af00      	add	r7, sp, #0
    36d2:	6078      	str	r0, [r7, #4]
    36d4:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    36d6:	2201      	movs	r2, #1
    36d8:	683b      	ldr	r3, [r7, #0]
    36da:	fa02 f303 	lsl.w	r3, r2, r3
    36de:	461a      	mov	r2, r3
    36e0:	687b      	ldr	r3, [r7, #4]
    36e2:	4313      	orrs	r3, r2
}
    36e4:	4618      	mov	r0, r3
    36e6:	370c      	adds	r7, #12
    36e8:	46bd      	mov	sp, r7
    36ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ee:	4770      	bx	lr

000036f0 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    36f0:	b480      	push	{r7}
    36f2:	b083      	sub	sp, #12
    36f4:	af00      	add	r7, sp, #0
    36f6:	6078      	str	r0, [r7, #4]
    36f8:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    36fa:	2201      	movs	r2, #1
    36fc:	683b      	ldr	r3, [r7, #0]
    36fe:	fa02 f303 	lsl.w	r3, r2, r3
    3702:	461a      	mov	r2, r3
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	4013      	ands	r3, r2
    3708:	2b00      	cmp	r3, #0
    370a:	bf14      	ite	ne
    370c:	2301      	movne	r3, #1
    370e:	2300      	moveq	r3, #0
    3710:	b2db      	uxtb	r3, r3
}
    3712:	4618      	mov	r0, r3
    3714:	370c      	adds	r7, #12
    3716:	46bd      	mov	sp, r7
    3718:	f85d 7b04 	ldr.w	r7, [sp], #4
    371c:	4770      	bx	lr
    371e:	Address 0x000000000000371e is out of bounds.


00003720 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	60f8      	str	r0, [r7, #12]
    3728:	7239      	strb	r1, [r7, #8]
    372a:	713a      	strb	r2, [r7, #4]
    372c:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    372e:	68fb      	ldr	r3, [r7, #12]
    3730:	edd3 7a00 	vldr	s15, [r3]
    3734:	ed9f 7a06 	vldr	s14, [pc, #24]	; 3750 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    3738:	eec7 6a87 	vdiv.f32	s13, s15, s14
    373c:	eef0 7a66 	vmov.f32	s15, s13
		}
    3740:	eeb0 0a67 	vmov.f32	s0, s15
    3744:	3714      	adds	r7, #20
    3746:	46bd      	mov	sp, r7
    3748:	f85d 7b04 	ldr.w	r7, [sp], #4
    374c:	4770      	bx	lr
    374e:	bf00      	nop
    3750:	49742400 	.word	0x49742400

00003754 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    3754:	b580      	push	{r7, lr}
    3756:	b084      	sub	sp, #16
    3758:	af00      	add	r7, sp, #0
    375a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	4618      	mov	r0, r3
    3760:	f7fd fed3 	bl	150a <units::linear_scale<float>::operator()() const>
    3764:	eef0 7a40 	vmov.f32	s15, s0
    3768:	edc7 7a03 	vstr	s15, [r7, #12]
    376c:	f107 030c 	add.w	r3, r7, #12
    3770:	4618      	mov	r0, r3
    3772:	f000 fa41 	bl	3bf8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3776:	eef0 7a40 	vmov.f32	s15, s0
    377a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    377e:	ee17 3a90 	vmov	r3, s15
		}
    3782:	4618      	mov	r0, r3
    3784:	3710      	adds	r7, #16
    3786:	46bd      	mov	sp, r7
    3788:	bd80      	pop	{r7, pc}

0000378a <float sjsu::Map<float, float, float>(float, float, float, float, float)>:
/// @param current_minimum current minimum value that the value can reach
/// @param current_maximum current maximum value that the value can reach
/// @param new_minimum the new minimum value to scale and shift the old value to
/// @param new_maximum the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    378a:	b480      	push	{r7}
    378c:	b08f      	sub	sp, #60	; 0x3c
    378e:	af00      	add	r7, sp, #0
    3790:	ed87 0a05 	vstr	s0, [r7, #20]
    3794:	edc7 0a04 	vstr	s1, [r7, #16]
    3798:	ed87 1a03 	vstr	s2, [r7, #12]
    379c:	edc7 1a02 	vstr	s3, [r7, #8]
    37a0:	ed87 2a01 	vstr	s4, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    37a4:	697b      	ldr	r3, [r7, #20]
    37a6:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    37b0:	68bb      	ldr	r3, [r7, #8]
    37b2:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    37b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    37bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    37c0:	ee77 6a67 	vsub.f32	s13, s14, s15
    37c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    37c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    37cc:	ee37 7a67 	vsub.f32	s14, s14, s15
    37d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    37d4:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    37d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    37dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    37e0:	ee37 7a67 	vsub.f32	s14, s14, s15
    37e4:	edd7 7a08 	vldr	s15, [r7, #32]
    37e8:	ee67 7a27 	vmul.f32	s15, s14, s15
    37ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    37f0:	ee77 7a27 	vadd.f32	s15, s14, s15
    37f4:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    37f8:	69fb      	ldr	r3, [r7, #28]
    37fa:	ee07 3a90 	vmov	s15, r3
};
    37fe:	eeb0 0a67 	vmov.f32	s0, s15
    3802:	373c      	adds	r7, #60	; 0x3c
    3804:	46bd      	mov	sp, r7
    3806:	f85d 7b04 	ldr.w	r7, [sp], #4
    380a:	4770      	bx	lr

0000380c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    380c:	b580      	push	{r7, lr}
    380e:	b084      	sub	sp, #16
    3810:	af00      	add	r7, sp, #0
    3812:	6078      	str	r0, [r7, #4]
    3814:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	4618      	mov	r0, r3
    381a:	f7fd fe76 	bl	150a <units::linear_scale<float>::operator()() const>
    381e:	eef0 6a40 	vmov.f32	s13, s0
    3822:	683b      	ldr	r3, [r7, #0]
    3824:	ee07 3a90 	vmov	s15, r3
    3828:	eef8 7a67 	vcvt.f32.u32	s15, s15
    382c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    3830:	f107 030c 	add.w	r3, r7, #12
    3834:	eeb0 0a47 	vmov.f32	s0, s14
    3838:	4618      	mov	r0, r3
    383a:	f7fc fe7e 	bl	53a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    383e:	68fb      	ldr	r3, [r7, #12]
	}
    3840:	4618      	mov	r0, r3
    3842:	3710      	adds	r7, #16
    3844:	46bd      	mov	sp, r7
    3846:	bd80      	pop	{r7, pc}

00003848 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3848:	b580      	push	{r7, lr}
    384a:	ed2d 8b02 	vpush	{d8}
    384e:	b082      	sub	sp, #8
    3850:	af00      	add	r7, sp, #0
    3852:	6078      	str	r0, [r7, #4]
    3854:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	ed93 8a00 	vldr	s16, [r3]
    385c:	683b      	ldr	r3, [r7, #0]
    385e:	4618      	mov	r0, r3
    3860:	f7fc fe4b 	bl	4fa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3864:	eef0 7a40 	vmov.f32	s15, s0
    3868:	eeb4 8ae7 	vcmpe.f32	s16, s15
    386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3870:	bfcc      	ite	gt
    3872:	2301      	movgt	r3, #1
    3874:	2300      	movle	r3, #0
    3876:	b2db      	uxtb	r3, r3
		}
    3878:	4618      	mov	r0, r3
    387a:	3708      	adds	r7, #8
    387c:	46bd      	mov	sp, r7
    387e:	ecbd 8b02 	vpop	{d8}
    3882:	bd80      	pop	{r7, pc}

00003884 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
    388a:	6078      	str	r0, [r7, #4]
    388c:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    388e:	683b      	ldr	r3, [r7, #0]
    3890:	4618      	mov	r0, r3
    3892:	f7fe f827 	bl	18e4 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3896:	eef0 7a40 	vmov.f32	s15, s0
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    38a0:	687b      	ldr	r3, [r7, #4]
		}
    38a2:	4618      	mov	r0, r3
    38a4:	3708      	adds	r7, #8
    38a6:	46bd      	mov	sp, r7
    38a8:	bd80      	pop	{r7, pc}

000038aa <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    38aa:	b580      	push	{r7, lr}
    38ac:	b084      	sub	sp, #16
    38ae:	af00      	add	r7, sp, #0
    38b0:	60f8      	str	r0, [r7, #12]
    38b2:	60b9      	str	r1, [r7, #8]
    38b4:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    38b6:	793b      	ldrb	r3, [r7, #4]
    38b8:	461a      	mov	r2, r3
    38ba:	797b      	ldrb	r3, [r7, #5]
    38bc:	68b9      	ldr	r1, [r7, #8]
    38be:	68f8      	ldr	r0, [r7, #12]
    38c0:	f000 f9a8 	bl	3c14 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    38c4:	4603      	mov	r3, r0
}
    38c6:	4618      	mov	r0, r3
    38c8:	3710      	adds	r7, #16
    38ca:	46bd      	mov	sp, r7
    38cc:	bd80      	pop	{r7, pc}

000038ce <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    38ce:	b480      	push	{r7}
    38d0:	b083      	sub	sp, #12
    38d2:	af00      	add	r7, sp, #0
    38d4:	4603      	mov	r3, r0
    38d6:	6039      	str	r1, [r7, #0]
    38d8:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    38da:	79fa      	ldrb	r2, [r7, #7]
    38dc:	683b      	ldr	r3, [r7, #0]
    38de:	fa42 f303 	asr.w	r3, r2, r3
    38e2:	f003 0301 	and.w	r3, r3, #1
    38e6:	2b00      	cmp	r3, #0
    38e8:	bf14      	ite	ne
    38ea:	2301      	movne	r3, #1
    38ec:	2300      	moveq	r3, #0
    38ee:	b2db      	uxtb	r3, r3
}
    38f0:	4618      	mov	r0, r3
    38f2:	370c      	adds	r7, #12
    38f4:	46bd      	mov	sp, r7
    38f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38fa:	4770      	bx	lr

000038fc <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    38fc:	b580      	push	{r7, lr}
    38fe:	b084      	sub	sp, #16
    3900:	af00      	add	r7, sp, #0
    3902:	60f8      	str	r0, [r7, #12]
    3904:	460b      	mov	r3, r1
    3906:	80ba      	strh	r2, [r7, #4]
    3908:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    390a:	793b      	ldrb	r3, [r7, #4]
    390c:	461a      	mov	r2, r3
    390e:	797b      	ldrb	r3, [r7, #5]
    3910:	7af9      	ldrb	r1, [r7, #11]
    3912:	68f8      	ldr	r0, [r7, #12]
    3914:	f000 f9aa 	bl	3c6c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    3918:	4603      	mov	r3, r0
}
    391a:	4618      	mov	r0, r3
    391c:	3710      	adds	r7, #16
    391e:	46bd      	mov	sp, r7
    3920:	bd80      	pop	{r7, pc}

00003922 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    3922:	b580      	push	{r7, lr}
    3924:	b082      	sub	sp, #8
    3926:	af00      	add	r7, sp, #0
    3928:	6078      	str	r0, [r7, #4]
    392a:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    392c:	783b      	ldrb	r3, [r7, #0]
    392e:	4619      	mov	r1, r3
    3930:	6878      	ldr	r0, [r7, #4]
    3932:	f7ff fedd 	bl	36f0 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    3936:	4603      	mov	r3, r0
}
    3938:	4618      	mov	r0, r3
    393a:	3708      	adds	r7, #8
    393c:	46bd      	mov	sp, r7
    393e:	bd80      	pop	{r7, pc}

00003940 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    3940:	b580      	push	{r7, lr}
    3942:	b082      	sub	sp, #8
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    394a:	783b      	ldrb	r3, [r7, #0]
    394c:	4619      	mov	r1, r3
    394e:	6878      	ldr	r0, [r7, #4]
    3950:	f7ff febc 	bl	36cc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    3954:	4603      	mov	r3, r0
}
    3956:	4618      	mov	r0, r3
    3958:	3708      	adds	r7, #8
    395a:	46bd      	mov	sp, r7
    395c:	bd80      	pop	{r7, pc}

0000395e <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    395e:	b580      	push	{r7, lr}
    3960:	b082      	sub	sp, #8
    3962:	af00      	add	r7, sp, #0
    3964:	6078      	str	r0, [r7, #4]
    3966:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    3968:	783b      	ldrb	r3, [r7, #0]
    396a:	4619      	mov	r1, r3
    396c:	787b      	ldrb	r3, [r7, #1]
    396e:	461a      	mov	r2, r3
    3970:	6878      	ldr	r0, [r7, #4]
    3972:	f000 f9a8 	bl	3cc6 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    3976:	4603      	mov	r3, r0
}
    3978:	4618      	mov	r0, r3
    397a:	3708      	adds	r7, #8
    397c:	46bd      	mov	sp, r7
    397e:	bd80      	pop	{r7, pc}

00003980 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    3980:	b580      	push	{r7, lr}
    3982:	b084      	sub	sp, #16
    3984:	af00      	add	r7, sp, #0
    3986:	60f8      	str	r0, [r7, #12]
    3988:	60b9      	str	r1, [r7, #8]
    398a:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    398c:	793b      	ldrb	r3, [r7, #4]
    398e:	461a      	mov	r2, r3
    3990:	797b      	ldrb	r3, [r7, #5]
    3992:	68b9      	ldr	r1, [r7, #8]
    3994:	68f8      	ldr	r0, [r7, #12]
    3996:	f000 f9b4 	bl	3d02 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    399a:	4603      	mov	r3, r0
}
    399c:	4618      	mov	r0, r3
    399e:	3710      	adds	r7, #16
    39a0:	46bd      	mov	sp, r7
    39a2:	bd80      	pop	{r7, pc}

000039a4 <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>:
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    39a4:	b480      	push	{r7}
    39a6:	b08f      	sub	sp, #60	; 0x3c
    39a8:	af00      	add	r7, sp, #0
    39aa:	6178      	str	r0, [r7, #20]
    39ac:	6139      	str	r1, [r7, #16]
    39ae:	60fa      	str	r2, [r7, #12]
    39b0:	ed87 0a02 	vstr	s0, [r7, #8]
    39b4:	edc7 0a01 	vstr	s1, [r7, #4]
  float map_value   = static_cast<float>(value);
    39b8:	697b      	ldr	r3, [r7, #20]
    39ba:	ee07 3a90 	vmov	s15, r3
    39be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    39c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    39c6:	693b      	ldr	r3, [r7, #16]
    39c8:	ee07 3a90 	vmov	s15, r3
    39cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    39d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    39d4:	68fb      	ldr	r3, [r7, #12]
    39d6:	ee07 3a90 	vmov	s15, r3
    39da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    39de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    39e2:	68bb      	ldr	r3, [r7, #8]
    39e4:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    39ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    39ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    39f2:	ee77 6a67 	vsub.f32	s13, s14, s15
    39f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    39fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    39fe:	ee37 7a67 	vsub.f32	s14, s14, s15
    3a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3a06:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    3a0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    3a0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3a12:	ee37 7a67 	vsub.f32	s14, s14, s15
    3a16:	edd7 7a08 	vldr	s15, [r7, #32]
    3a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
    3a1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    3a22:	ee77 7a27 	vadd.f32	s15, s14, s15
    3a26:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    3a2a:	69fb      	ldr	r3, [r7, #28]
    3a2c:	ee07 3a90 	vmov	s15, r3
};
    3a30:	eeb0 0a67 	vmov.f32	s0, s15
    3a34:	373c      	adds	r7, #60	; 0x3c
    3a36:	46bd      	mov	sp, r7
    3a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a3c:	4770      	bx	lr

00003a3e <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> sjsu::Map<float, float, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> >(float, float, float, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    3a3e:	b580      	push	{r7, lr}
    3a40:	b08e      	sub	sp, #56	; 0x38
    3a42:	af00      	add	r7, sp, #0
    3a44:	ed87 0a05 	vstr	s0, [r7, #20]
    3a48:	edc7 0a04 	vstr	s1, [r7, #16]
    3a4c:	ed87 1a03 	vstr	s2, [r7, #12]
    3a50:	60b8      	str	r0, [r7, #8]
    3a52:	6079      	str	r1, [r7, #4]
  float map_value   = static_cast<float>(value);
    3a54:	697b      	ldr	r3, [r7, #20]
    3a56:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    3a58:	693b      	ldr	r3, [r7, #16]
    3a5a:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    3a5c:	68fb      	ldr	r3, [r7, #12]
    3a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    3a60:	f107 0308 	add.w	r3, r7, #8
    3a64:	4618      	mov	r0, r3
    3a66:	f7fd fe8a 	bl	177e <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    3a6a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    3a6e:	1d3b      	adds	r3, r7, #4
    3a70:	4618      	mov	r0, r3
    3a72:	f7fd fe84 	bl	177e <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    3a76:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    3a7a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    3a7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    3a82:	ee77 6a67 	vsub.f32	s13, s14, s15
    3a86:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    3a8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
    3a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3a96:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    3a9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    3a9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3aa2:	ee37 7a67 	vsub.f32	s14, s14, s15
    3aa6:	edd7 7a08 	vldr	s15, [r7, #32]
    3aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
    3aae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    3ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
    3ab6:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    3aba:	f107 0318 	add.w	r3, r7, #24
    3abe:	ed97 0a07 	vldr	s0, [r7, #28]
    3ac2:	4618      	mov	r0, r3
    3ac4:	f7fd fcba 	bl	143c <units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3ac8:	69bb      	ldr	r3, [r7, #24]
};
    3aca:	4618      	mov	r0, r3
    3acc:	3738      	adds	r7, #56	; 0x38
    3ace:	46bd      	mov	sp, r7
    3ad0:	bd80      	pop	{r7, pc}

00003ad2 <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3ad2:	b580      	push	{r7, lr}
    3ad4:	b082      	sub	sp, #8
    3ad6:	af00      	add	r7, sp, #0
    3ad8:	6078      	str	r0, [r7, #4]
    3ada:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    3adc:	6839      	ldr	r1, [r7, #0]
    3ade:	6878      	ldr	r0, [r7, #4]
    3ae0:	f000 f93b 	bl	3d5a <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3ae4:	4603      	mov	r3, r0
    3ae6:	f083 0301 	eor.w	r3, r3, #1
    3aea:	b2db      	uxtb	r3, r3
		}
    3aec:	4618      	mov	r0, r3
    3aee:	3708      	adds	r7, #8
    3af0:	46bd      	mov	sp, r7
    3af2:	bd80      	pop	{r7, pc}

00003af4 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    3af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3af6:	b08b      	sub	sp, #44	; 0x2c
    3af8:	af00      	add	r7, sp, #0
    3afa:	60f8      	str	r0, [r7, #12]
    3afc:	60b9      	str	r1, [r7, #8]
    3afe:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    3b00:	68bb      	ldr	r3, [r7, #8]
    3b02:	e9d3 3400 	ldrd	r3, r4, [r3]
    3b06:	e9c7 3406 	strd	r3, r4, [r7, #24]
    3b0a:	f107 0318 	add.w	r3, r7, #24
    3b0e:	4618      	mov	r0, r3
    3b10:	f7fd fdd2 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3b14:	4605      	mov	r5, r0
    3b16:	460e      	mov	r6, r1
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	e9d3 3400 	ldrd	r3, r4, [r3]
    3b1e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    3b22:	f107 0320 	add.w	r3, r7, #32
    3b26:	4618      	mov	r0, r3
    3b28:	f7fd fdc6 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3b2c:	460a      	mov	r2, r1
    3b2e:	4601      	mov	r1, r0
    3b30:	194b      	adds	r3, r1, r5
    3b32:	eb42 0406 	adc.w	r4, r2, r6
    3b36:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3b3a:	f107 0310 	add.w	r3, r7, #16
    3b3e:	4619      	mov	r1, r3
    3b40:	68f8      	ldr	r0, [r7, #12]
    3b42:	f7fc fe4d 	bl	7e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    3b46:	68f8      	ldr	r0, [r7, #12]
    3b48:	372c      	adds	r7, #44	; 0x2c
    3b4a:	46bd      	mov	sp, r7
    3b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b4e <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    3b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b50:	b087      	sub	sp, #28
    3b52:	af00      	add	r7, sp, #0
    3b54:	6078      	str	r0, [r7, #4]
    3b56:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	e9d3 3400 	ldrd	r3, r4, [r3]
    3b5e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3b62:	f107 0308 	add.w	r3, r7, #8
    3b66:	4618      	mov	r0, r3
    3b68:	f7fd fda6 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3b6c:	4605      	mov	r5, r0
    3b6e:	460e      	mov	r6, r1
    3b70:	683b      	ldr	r3, [r7, #0]
    3b72:	e9d3 3400 	ldrd	r3, r4, [r3]
    3b76:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3b7a:	f107 0310 	add.w	r3, r7, #16
    3b7e:	4618      	mov	r0, r3
    3b80:	f7fd fd9a 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3b84:	4603      	mov	r3, r0
    3b86:	460c      	mov	r4, r1
    3b88:	429d      	cmp	r5, r3
    3b8a:	eb76 0304 	sbcs.w	r3, r6, r4
    3b8e:	bfb4      	ite	lt
    3b90:	2301      	movlt	r3, #1
    3b92:	2300      	movge	r3, #0
    3b94:	b2db      	uxtb	r3, r3
      }
    3b96:	4618      	mov	r0, r3
    3b98:	371c      	adds	r7, #28
    3b9a:	46bd      	mov	sp, r7
    3b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b9e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3b9e:	b480      	push	{r7}
    3ba0:	b089      	sub	sp, #36	; 0x24
    3ba2:	af00      	add	r7, sp, #0
    3ba4:	60f8      	str	r0, [r7, #12]
    3ba6:	607a      	str	r2, [r7, #4]
    3ba8:	603b      	str	r3, [r7, #0]
    3baa:	460b      	mov	r3, r1
    3bac:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3bb2:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3bb4:	2320      	movs	r3, #32
    3bb6:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3bb8:	683b      	ldr	r3, [r7, #0]
    3bba:	f1c3 0320 	rsb	r3, r3, #32
    3bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3bc2:	fa22 f303 	lsr.w	r3, r2, r3
    3bc6:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3bc8:	697a      	ldr	r2, [r7, #20]
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	fa02 f303 	lsl.w	r3, r2, r3
    3bd0:	43db      	mvns	r3, r3
    3bd2:	68fa      	ldr	r2, [r7, #12]
    3bd4:	4013      	ands	r3, r2
    3bd6:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3bd8:	7afa      	ldrb	r2, [r7, #11]
    3bda:	697b      	ldr	r3, [r7, #20]
    3bdc:	401a      	ands	r2, r3
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	fa02 f303 	lsl.w	r3, r2, r3
    3be4:	68fa      	ldr	r2, [r7, #12]
    3be6:	4313      	orrs	r3, r2
    3be8:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3bea:	68fb      	ldr	r3, [r7, #12]
}
    3bec:	4618      	mov	r0, r3
    3bee:	3724      	adds	r7, #36	; 0x24
    3bf0:	46bd      	mov	sp, r7
    3bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf6:	4770      	bx	lr

00003bf8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b086      	sub	sp, #24
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3c00:	6878      	ldr	r0, [r7, #4]
    3c02:	f000 f901 	bl	3e08 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3c06:	eef0 7a40 	vmov.f32	s15, s0
	}
    3c0a:	eeb0 0a67 	vmov.f32	s0, s15
    3c0e:	3718      	adds	r7, #24
    3c10:	46bd      	mov	sp, r7
    3c12:	bd80      	pop	{r7, pc}

00003c14 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3c14:	b480      	push	{r7}
    3c16:	b089      	sub	sp, #36	; 0x24
    3c18:	af00      	add	r7, sp, #0
    3c1a:	60f8      	str	r0, [r7, #12]
    3c1c:	60b9      	str	r1, [r7, #8]
    3c1e:	607a      	str	r2, [r7, #4]
    3c20:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c26:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3c28:	2320      	movs	r3, #32
    3c2a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	f1c3 0320 	rsb	r3, r3, #32
    3c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c36:	fa22 f303 	lsr.w	r3, r2, r3
    3c3a:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3c3c:	697a      	ldr	r2, [r7, #20]
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	fa02 f303 	lsl.w	r3, r2, r3
    3c44:	43db      	mvns	r3, r3
    3c46:	68fa      	ldr	r2, [r7, #12]
    3c48:	4013      	ands	r3, r2
    3c4a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3c4c:	68ba      	ldr	r2, [r7, #8]
    3c4e:	697b      	ldr	r3, [r7, #20]
    3c50:	401a      	ands	r2, r3
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	fa02 f303 	lsl.w	r3, r2, r3
    3c58:	68fa      	ldr	r2, [r7, #12]
    3c5a:	4313      	orrs	r3, r2
    3c5c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3c5e:	68fb      	ldr	r3, [r7, #12]
}
    3c60:	4618      	mov	r0, r3
    3c62:	3724      	adds	r7, #36	; 0x24
    3c64:	46bd      	mov	sp, r7
    3c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6a:	4770      	bx	lr

00003c6c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3c6c:	b480      	push	{r7}
    3c6e:	b089      	sub	sp, #36	; 0x24
    3c70:	af00      	add	r7, sp, #0
    3c72:	60f8      	str	r0, [r7, #12]
    3c74:	607a      	str	r2, [r7, #4]
    3c76:	603b      	str	r3, [r7, #0]
    3c78:	460b      	mov	r3, r1
    3c7a:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c80:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3c82:	2320      	movs	r3, #32
    3c84:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3c86:	683b      	ldr	r3, [r7, #0]
    3c88:	f1c3 0320 	rsb	r3, r3, #32
    3c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c90:	fa22 f303 	lsr.w	r3, r2, r3
    3c94:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3c96:	697a      	ldr	r2, [r7, #20]
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	fa02 f303 	lsl.w	r3, r2, r3
    3c9e:	43db      	mvns	r3, r3
    3ca0:	68fa      	ldr	r2, [r7, #12]
    3ca2:	4013      	ands	r3, r2
    3ca4:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3ca6:	7afa      	ldrb	r2, [r7, #11]
    3ca8:	697b      	ldr	r3, [r7, #20]
    3caa:	401a      	ands	r2, r3
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	fa02 f303 	lsl.w	r3, r2, r3
    3cb2:	68fa      	ldr	r2, [r7, #12]
    3cb4:	4313      	orrs	r3, r2
    3cb6:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3cb8:	68fb      	ldr	r3, [r7, #12]
}
    3cba:	4618      	mov	r0, r3
    3cbc:	3724      	adds	r7, #36	; 0x24
    3cbe:	46bd      	mov	sp, r7
    3cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cc4:	4770      	bx	lr

00003cc6 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    3cc6:	b480      	push	{r7}
    3cc8:	b089      	sub	sp, #36	; 0x24
    3cca:	af00      	add	r7, sp, #0
    3ccc:	60f8      	str	r0, [r7, #12]
    3cce:	60b9      	str	r1, [r7, #8]
    3cd0:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cd6:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3cd8:	2320      	movs	r3, #32
    3cda:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	f1c3 0320 	rsb	r3, r3, #32
    3ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3ce6:	fa22 f303 	lsr.w	r3, r2, r3
    3cea:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    3cec:	68fa      	ldr	r2, [r7, #12]
    3cee:	68bb      	ldr	r3, [r7, #8]
    3cf0:	40da      	lsrs	r2, r3
    3cf2:	697b      	ldr	r3, [r7, #20]
    3cf4:	4013      	ands	r3, r2
}
    3cf6:	4618      	mov	r0, r3
    3cf8:	3724      	adds	r7, #36	; 0x24
    3cfa:	46bd      	mov	sp, r7
    3cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d00:	4770      	bx	lr

00003d02 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3d02:	b480      	push	{r7}
    3d04:	b089      	sub	sp, #36	; 0x24
    3d06:	af00      	add	r7, sp, #0
    3d08:	60f8      	str	r0, [r7, #12]
    3d0a:	60b9      	str	r1, [r7, #8]
    3d0c:	607a      	str	r2, [r7, #4]
    3d0e:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d14:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3d16:	2320      	movs	r3, #32
    3d18:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3d1a:	683b      	ldr	r3, [r7, #0]
    3d1c:	f1c3 0320 	rsb	r3, r3, #32
    3d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d24:	fa22 f303 	lsr.w	r3, r2, r3
    3d28:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3d2a:	697a      	ldr	r2, [r7, #20]
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	fa02 f303 	lsl.w	r3, r2, r3
    3d32:	43db      	mvns	r3, r3
    3d34:	68fa      	ldr	r2, [r7, #12]
    3d36:	4013      	ands	r3, r2
    3d38:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3d3a:	68ba      	ldr	r2, [r7, #8]
    3d3c:	697b      	ldr	r3, [r7, #20]
    3d3e:	401a      	ands	r2, r3
    3d40:	687b      	ldr	r3, [r7, #4]
    3d42:	fa02 f303 	lsl.w	r3, r2, r3
    3d46:	68fa      	ldr	r2, [r7, #12]
    3d48:	4313      	orrs	r3, r2
    3d4a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3d4c:	68fb      	ldr	r3, [r7, #12]
}
    3d4e:	4618      	mov	r0, r3
    3d50:	3724      	adds	r7, #36	; 0x24
    3d52:	46bd      	mov	sp, r7
    3d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d58:	4770      	bx	lr

00003d5a <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3d5a:	b580      	push	{r7, lr}
    3d5c:	ed2d 8b04 	vpush	{d8-d9}
    3d60:	b082      	sub	sp, #8
    3d62:	af00      	add	r7, sp, #0
    3d64:	6078      	str	r0, [r7, #4]
    3d66:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	ed93 8a00 	vldr	s16, [r3]
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	4618      	mov	r0, r3
    3d72:	f000 f85b 	bl	3e2c <float units::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3d76:	eef0 7a40 	vmov.f32	s15, s0
    3d7a:	ee78 7a67 	vsub.f32	s15, s16, s15
    3d7e:	eeb0 0a67 	vmov.f32	s0, s15
    3d82:	f7fc fb27 	bl	3d4 <units::detail::abs(float)>
    3d86:	eef0 8a40 	vmov.f32	s17, s0
    3d8a:	f7fc fb04 	bl	396 <std::numeric_limits<float>::epsilon()>
    3d8e:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	ed93 8a00 	vldr	s16, [r3]
    3d98:	683b      	ldr	r3, [r7, #0]
    3d9a:	4618      	mov	r0, r3
    3d9c:	f000 f846 	bl	3e2c <float units::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3da0:	eef0 7a40 	vmov.f32	s15, s0
    3da4:	ee78 7a27 	vadd.f32	s15, s16, s15
    3da8:	eeb0 0a67 	vmov.f32	s0, s15
    3dac:	f7fc fb12 	bl	3d4 <units::detail::abs(float)>
    3db0:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
    3db4:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    3db8:	eef4 8ae7 	vcmpe.f32	s17, s15
    3dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dc0:	d419      	bmi.n	3df6 <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	ed93 8a00 	vldr	s16, [r3]
    3dc8:	683b      	ldr	r3, [r7, #0]
    3dca:	4618      	mov	r0, r3
    3dcc:	f000 f82e 	bl	3e2c <float units::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3dd0:	eef0 7a40 	vmov.f32	s15, s0
    3dd4:	ee78 7a67 	vsub.f32	s15, s16, s15
    3dd8:	eeb0 0a67 	vmov.f32	s0, s15
    3ddc:	f7fc fafa 	bl	3d4 <units::detail::abs(float)>
    3de0:	eeb0 8a40 	vmov.f32	s16, s0
    3de4:	f7fc facb 	bl	37e <std::numeric_limits<float>::min()>
    3de8:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
    3dec:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3df4:	d501      	bpl.n	3dfa <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
    3df6:	2301      	movs	r3, #1
    3df8:	e000      	b.n	3dfc <bool units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
    3dfa:	2300      	movs	r3, #0
		}
    3dfc:	4618      	mov	r0, r3
    3dfe:	3708      	adds	r7, #8
    3e00:	46bd      	mov	sp, r7
    3e02:	ecbd 8b04 	vpop	{d8-d9}
    3e06:	bd80      	pop	{r7, pc}

00003e08 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3e08:	b480      	push	{r7}
    3e0a:	b085      	sub	sp, #20
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	60f8      	str	r0, [r7, #12]
    3e10:	7239      	strb	r1, [r7, #8]
    3e12:	713a      	strb	r2, [r7, #4]
    3e14:	703b      	strb	r3, [r7, #0]
			return value;
    3e16:	68fb      	ldr	r3, [r7, #12]
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	ee07 3a90 	vmov	s15, r3
		}
    3e1e:	eeb0 0a67 	vmov.f32	s0, s15
    3e22:	3714      	adds	r7, #20
    3e24:	46bd      	mov	sp, r7
    3e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2a:	4770      	bx	lr

00003e2c <float units::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b086      	sub	sp, #24
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3e34:	6878      	ldr	r0, [r7, #4]
    3e36:	f000 f807 	bl	3e48 <float units::detail::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3e3a:	eef0 7a40 	vmov.f32	s15, s0
	}
    3e3e:	eeb0 0a67 	vmov.f32	s0, s15
    3e42:	3718      	adds	r7, #24
    3e44:	46bd      	mov	sp, r7
    3e46:	bd80      	pop	{r7, pc}

00003e48 <float units::detail::convert<units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<2ll, 60ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3e48:	b480      	push	{r7}
    3e4a:	b085      	sub	sp, #20
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	60f8      	str	r0, [r7, #12]
    3e50:	7239      	strb	r1, [r7, #8]
    3e52:	713a      	strb	r2, [r7, #4]
    3e54:	703b      	strb	r3, [r7, #0]
			return value;
    3e56:	68fb      	ldr	r3, [r7, #12]
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	ee07 3a90 	vmov	s15, r3
		}
    3e5e:	eeb0 0a67 	vmov.f32	s0, s15
    3e62:	3714      	adds	r7, #20
    3e64:	46bd      	mov	sp, r7
    3e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6a:	4770      	bx	lr

00003e6c <__static_initialization_and_destruction_0(int, int)>:
  return 0;
}
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
    3e74:	6039      	str	r1, [r7, #0]
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	2b01      	cmp	r3, #1
    3e7a:	f040 80b8 	bne.w	3fee <__static_initialization_and_destruction_0(int, int)+0x182>
    3e7e:	683b      	ldr	r3, [r7, #0]
    3e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3e84:	4293      	cmp	r3, r2
    3e86:	f040 80b2 	bne.w	3fee <__static_initialization_and_destruction_0(int, int)+0x182>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    3e8a:	4b5b      	ldr	r3, [pc, #364]	; (3ff8 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	f003 0301 	and.w	r3, r3, #1
    3e92:	2b00      	cmp	r3, #0
    3e94:	d105      	bne.n	3ea2 <__static_initialization_and_destruction_0(int, int)+0x36>
    3e96:	4b58      	ldr	r3, [pc, #352]	; (3ff8 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    3e98:	2201      	movs	r2, #1
    3e9a:	601a      	str	r2, [r3, #0]
    3e9c:	4a57      	ldr	r2, [pc, #348]	; (3ffc <__static_initialization_and_destruction_0(int, int)+0x190>)
    3e9e:	4b58      	ldr	r3, [pc, #352]	; (4000 <__static_initialization_and_destruction_0(int, int)+0x194>)
    3ea0:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    3ea2:	4b58      	ldr	r3, [pc, #352]	; (4004 <__static_initialization_and_destruction_0(int, int)+0x198>)
    3ea4:	681b      	ldr	r3, [r3, #0]
    3ea6:	f003 0301 	and.w	r3, r3, #1
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d106      	bne.n	3ebc <__static_initialization_and_destruction_0(int, int)+0x50>
    3eae:	4b55      	ldr	r3, [pc, #340]	; (4004 <__static_initialization_and_destruction_0(int, int)+0x198>)
    3eb0:	2201      	movs	r2, #1
    3eb2:	601a      	str	r2, [r3, #0]
    3eb4:	4b54      	ldr	r3, [pc, #336]	; (4008 <__static_initialization_and_destruction_0(int, int)+0x19c>)
    3eb6:	4618      	mov	r0, r3
    3eb8:	f7fc ffda 	bl	e70 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    3ebc:	4b53      	ldr	r3, [pc, #332]	; (400c <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	f003 0301 	and.w	r3, r3, #1
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d114      	bne.n	3ef2 <__static_initialization_and_destruction_0(int, int)+0x86>
    3ec8:	4b50      	ldr	r3, [pc, #320]	; (400c <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    3eca:	2201      	movs	r2, #1
    3ecc:	601a      	str	r2, [r3, #0]
  };
    3ece:	4a50      	ldr	r2, [pc, #320]	; (4010 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    3ed0:	4b50      	ldr	r3, [pc, #320]	; (4014 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    3ed2:	601a      	str	r2, [r3, #0]
    3ed4:	4a50      	ldr	r2, [pc, #320]	; (4018 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    3ed6:	4b4f      	ldr	r3, [pc, #316]	; (4014 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    3ed8:	605a      	str	r2, [r3, #4]
    3eda:	4a50      	ldr	r2, [pc, #320]	; (401c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    3edc:	4b4d      	ldr	r3, [pc, #308]	; (4014 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    3ede:	609a      	str	r2, [r3, #8]
    3ee0:	4a4f      	ldr	r2, [pc, #316]	; (4020 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    3ee2:	4b4c      	ldr	r3, [pc, #304]	; (4014 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    3ee4:	60da      	str	r2, [r3, #12]
    3ee6:	4a4f      	ldr	r2, [pc, #316]	; (4024 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    3ee8:	4b4a      	ldr	r3, [pc, #296]	; (4014 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    3eea:	611a      	str	r2, [r3, #16]
    3eec:	4a4e      	ldr	r2, [pc, #312]	; (4028 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    3eee:	4b49      	ldr	r3, [pc, #292]	; (4014 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    3ef0:	615a      	str	r2, [r3, #20]
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfPorts] = {
    3ef2:	4b4e      	ldr	r3, [pc, #312]	; (402c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	f003 0301 	and.w	r3, r3, #1
    3efa:	2b00      	cmp	r3, #0
    3efc:	d122      	bne.n	3f44 <__static_initialization_and_destruction_0(int, int)+0xd8>
    3efe:	4b4b      	ldr	r3, [pc, #300]	; (402c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    3f00:	2201      	movs	r2, #1
    3f02:	601a      	str	r2, [r3, #0]
  };
    3f04:	4b4a      	ldr	r3, [pc, #296]	; (4030 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    3f06:	4a4b      	ldr	r2, [pc, #300]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f08:	3204      	adds	r2, #4
  };
    3f0a:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    3f0c:	4a49      	ldr	r2, [pc, #292]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f0e:	3208      	adds	r2, #8
  };
    3f10:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO0IntClr),
    3f12:	4a48      	ldr	r2, [pc, #288]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f14:	320c      	adds	r2, #12
  };
    3f16:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    3f18:	4a46      	ldr	r2, [pc, #280]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f1a:	3210      	adds	r2, #16
  };
    3f1c:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    3f1e:	4a45      	ldr	r2, [pc, #276]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f20:	3214      	adds	r2, #20
  };
    3f22:	611a      	str	r2, [r3, #16]
    3f24:	3314      	adds	r3, #20
    { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    3f26:	4a43      	ldr	r2, [pc, #268]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f28:	3224      	adds	r2, #36	; 0x24
  };
    3f2a:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    3f2c:	4a41      	ldr	r2, [pc, #260]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f2e:	3228      	adds	r2, #40	; 0x28
  };
    3f30:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO2IntClr),
    3f32:	4a40      	ldr	r2, [pc, #256]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f34:	322c      	adds	r2, #44	; 0x2c
  };
    3f36:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    3f38:	4a3e      	ldr	r2, [pc, #248]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f3a:	3230      	adds	r2, #48	; 0x30
  };
    3f3c:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) }
    3f3e:	4a3d      	ldr	r2, [pc, #244]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f40:	3234      	adds	r2, #52	; 0x34
  };
    3f42:	611a      	str	r2, [r3, #16]
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    3f44:	4b3c      	ldr	r3, [pc, #240]	; (4038 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	f003 0301 	and.w	r3, r3, #1
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d106      	bne.n	3f5e <__static_initialization_and_destruction_0(int, int)+0xf2>
    3f50:	4b39      	ldr	r3, [pc, #228]	; (4038 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    3f52:	2201      	movs	r2, #1
    3f54:	601a      	str	r2, [r3, #0]
    3f56:	4b37      	ldr	r3, [pc, #220]	; (4034 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3f58:	461a      	mov	r2, r3
    3f5a:	4b38      	ldr	r3, [pc, #224]	; (403c <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    3f5c:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    3f5e:	4b38      	ldr	r3, [pc, #224]	; (4040 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    3f60:	681b      	ldr	r3, [r3, #0]
    3f62:	f003 0301 	and.w	r3, r3, #1
    3f66:	2b00      	cmp	r3, #0
    3f68:	d105      	bne.n	3f76 <__static_initialization_and_destruction_0(int, int)+0x10a>
    3f6a:	4b35      	ldr	r3, [pc, #212]	; (4040 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    3f6c:	2201      	movs	r2, #1
    3f6e:	601a      	str	r2, [r3, #0]
    3f70:	4a34      	ldr	r2, [pc, #208]	; (4044 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    3f72:	4b35      	ldr	r3, [pc, #212]	; (4048 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    3f74:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    3f76:	4b35      	ldr	r3, [pc, #212]	; (404c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	f003 0301 	and.w	r3, r3, #1
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d105      	bne.n	3f8e <__static_initialization_and_destruction_0(int, int)+0x122>
    3f82:	4b32      	ldr	r3, [pc, #200]	; (404c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    3f84:	2201      	movs	r2, #1
    3f86:	601a      	str	r2, [r3, #0]
    };
    3f88:	4a31      	ldr	r2, [pc, #196]	; (4050 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    3f8a:	4b32      	ldr	r3, [pc, #200]	; (4054 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    3f8c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    3f8e:	4b32      	ldr	r3, [pc, #200]	; (4058 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	f003 0301 	and.w	r3, r3, #1
    3f96:	2b00      	cmp	r3, #0
    3f98:	d105      	bne.n	3fa6 <__static_initialization_and_destruction_0(int, int)+0x13a>
    3f9a:	4b2f      	ldr	r3, [pc, #188]	; (4058 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    3f9c:	2201      	movs	r2, #1
    3f9e:	601a      	str	r2, [r3, #0]
    };
    3fa0:	4a2e      	ldr	r2, [pc, #184]	; (405c <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    3fa2:	4b2f      	ldr	r3, [pc, #188]	; (4060 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    3fa4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    3fa6:	4b2f      	ldr	r3, [pc, #188]	; (4064 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    3fa8:	681b      	ldr	r3, [r3, #0]
    3faa:	f003 0301 	and.w	r3, r3, #1
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d105      	bne.n	3fbe <__static_initialization_and_destruction_0(int, int)+0x152>
    3fb2:	4b2c      	ldr	r3, [pc, #176]	; (4064 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    3fb4:	2201      	movs	r2, #1
    3fb6:	601a      	str	r2, [r3, #0]
    };
    3fb8:	4a2b      	ldr	r2, [pc, #172]	; (4068 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    3fba:	4b2c      	ldr	r3, [pc, #176]	; (406c <__static_initialization_and_destruction_0(int, int)+0x200>)
    3fbc:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    3fbe:	4b2c      	ldr	r3, [pc, #176]	; (4070 <__static_initialization_and_destruction_0(int, int)+0x204>)
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	f003 0301 	and.w	r3, r3, #1
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d105      	bne.n	3fd6 <__static_initialization_and_destruction_0(int, int)+0x16a>
    3fca:	4b29      	ldr	r3, [pc, #164]	; (4070 <__static_initialization_and_destruction_0(int, int)+0x204>)
    3fcc:	2201      	movs	r2, #1
    3fce:	601a      	str	r2, [r3, #0]
    3fd0:	4a28      	ldr	r2, [pc, #160]	; (4074 <__static_initialization_and_destruction_0(int, int)+0x208>)
    3fd2:	4b29      	ldr	r3, [pc, #164]	; (4078 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    3fd4:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm1PeripheralCommon = {
    3fd6:	4b29      	ldr	r3, [pc, #164]	; (407c <__static_initialization_and_destruction_0(int, int)+0x210>)
    3fd8:	681b      	ldr	r3, [r3, #0]
    3fda:	f003 0301 	and.w	r3, r3, #1
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d105      	bne.n	3fee <__static_initialization_and_destruction_0(int, int)+0x182>
    3fe2:	4b26      	ldr	r3, [pc, #152]	; (407c <__static_initialization_and_destruction_0(int, int)+0x210>)
    3fe4:	2201      	movs	r2, #1
    3fe6:	601a      	str	r2, [r3, #0]
    };
    3fe8:	4a25      	ldr	r2, [pc, #148]	; (4080 <__static_initialization_and_destruction_0(int, int)+0x214>)
    3fea:	4b26      	ldr	r3, [pc, #152]	; (4084 <__static_initialization_and_destruction_0(int, int)+0x218>)
    3fec:	601a      	str	r2, [r3, #0]
    3fee:	bf00      	nop
    3ff0:	3708      	adds	r7, #8
    3ff2:	46bd      	mov	sp, r7
    3ff4:	bd80      	pop	{r7, pc}
    3ff6:	bf00      	nop
    3ff8:	10000350 	.word	0x10000350
    3ffc:	4002c000 	.word	0x4002c000
    4000:	10000100 	.word	0x10000100
    4004:	10000354 	.word	0x10000354
    4008:	10000104 	.word	0x10000104
    400c:	10000358 	.word	0x10000358
    4010:	20098000 	.word	0x20098000
    4014:	10000204 	.word	0x10000204
    4018:	20098020 	.word	0x20098020
    401c:	20098040 	.word	0x20098040
    4020:	20098060 	.word	0x20098060
    4024:	20098080 	.word	0x20098080
    4028:	200980a0 	.word	0x200980a0
    402c:	1000035c 	.word	0x1000035c
    4030:	1000031c 	.word	0x1000031c
    4034:	40028080 	.word	0x40028080
    4038:	10000360 	.word	0x10000360
    403c:	10000344 	.word	0x10000344
    4040:	10000364 	.word	0x10000364
    4044:	400fc000 	.word	0x400fc000
    4048:	10000348 	.word	0x10000348
    404c:	10000368 	.word	0x10000368
    4050:	40098000 	.word	0x40098000
    4054:	10000010 	.word	0x10000010
    4058:	1000036c 	.word	0x1000036c
    405c:	4009c000 	.word	0x4009c000
    4060:	10000024 	.word	0x10000024
    4064:	10000370 	.word	0x10000370
    4068:	400a4000 	.word	0x400a4000
    406c:	10000038 	.word	0x10000038
    4070:	10000374 	.word	0x10000374
    4074:	40034000 	.word	0x40034000
    4078:	1000034c 	.word	0x1000034c
    407c:	10000378 	.word	0x10000378
    4080:	40018000 	.word	0x40018000
    4084:	1000004c 	.word	0x1000004c

00004088 <_GLOBAL__sub_I_main>:
    4088:	b580      	push	{r7, lr}
    408a:	af00      	add	r7, sp, #0
    408c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4090:	2001      	movs	r0, #1
    4092:	f7ff feeb 	bl	3e6c <__static_initialization_and_destruction_0(int, int)>
    4096:	bd80      	pop	{r7, pc}

00004098 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    4098:	b480      	push	{r7}
    409a:	b087      	sub	sp, #28
    409c:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    409e:	2300      	movs	r3, #0
    40a0:	617b      	str	r3, [r7, #20]
    40a2:	697a      	ldr	r2, [r7, #20]
    40a4:	4613      	mov	r3, r2
    40a6:	005b      	lsls	r3, r3, #1
    40a8:	4413      	add	r3, r2
    40aa:	009b      	lsls	r3, r3, #2
    40ac:	4a1f      	ldr	r2, [pc, #124]	; (412c <sjsu::InitializeDataSection()+0x94>)
    40ae:	4413      	add	r3, r2
    40b0:	4a1f      	ldr	r2, [pc, #124]	; (4130 <sjsu::InitializeDataSection()+0x98>)
    40b2:	4293      	cmp	r3, r2
    40b4:	d233      	bcs.n	411e <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    40b6:	491d      	ldr	r1, [pc, #116]	; (412c <sjsu::InitializeDataSection()+0x94>)
    40b8:	697a      	ldr	r2, [r7, #20]
    40ba:	4613      	mov	r3, r2
    40bc:	005b      	lsls	r3, r3, #1
    40be:	4413      	add	r3, r2
    40c0:	009b      	lsls	r3, r3, #2
    40c2:	440b      	add	r3, r1
    40c4:	681b      	ldr	r3, [r3, #0]
    40c6:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    40c8:	4918      	ldr	r1, [pc, #96]	; (412c <sjsu::InitializeDataSection()+0x94>)
    40ca:	697a      	ldr	r2, [r7, #20]
    40cc:	4613      	mov	r3, r2
    40ce:	005b      	lsls	r3, r3, #1
    40d0:	4413      	add	r3, r2
    40d2:	009b      	lsls	r3, r3, #2
    40d4:	440b      	add	r3, r1
    40d6:	685b      	ldr	r3, [r3, #4]
    40d8:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    40da:	4914      	ldr	r1, [pc, #80]	; (412c <sjsu::InitializeDataSection()+0x94>)
    40dc:	697a      	ldr	r2, [r7, #20]
    40de:	4613      	mov	r3, r2
    40e0:	005b      	lsls	r3, r3, #1
    40e2:	4413      	add	r3, r2
    40e4:	009b      	lsls	r3, r3, #2
    40e6:	440b      	add	r3, r1
    40e8:	3308      	adds	r3, #8
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    40ee:	2300      	movs	r3, #0
    40f0:	613b      	str	r3, [r7, #16]
    40f2:	693a      	ldr	r2, [r7, #16]
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	429a      	cmp	r2, r3
    40f8:	d20d      	bcs.n	4116 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    40fa:	693b      	ldr	r3, [r7, #16]
    40fc:	009b      	lsls	r3, r3, #2
    40fe:	68fa      	ldr	r2, [r7, #12]
    4100:	441a      	add	r2, r3
    4102:	693b      	ldr	r3, [r7, #16]
    4104:	009b      	lsls	r3, r3, #2
    4106:	68b9      	ldr	r1, [r7, #8]
    4108:	440b      	add	r3, r1
    410a:	6812      	ldr	r2, [r2, #0]
    410c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    410e:	693b      	ldr	r3, [r7, #16]
    4110:	3301      	adds	r3, #1
    4112:	613b      	str	r3, [r7, #16]
    4114:	e7ed      	b.n	40f2 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    4116:	697b      	ldr	r3, [r7, #20]
    4118:	3301      	adds	r3, #1
    411a:	617b      	str	r3, [r7, #20]
    411c:	e7c1      	b.n	40a2 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    411e:	bf00      	nop
    4120:	371c      	adds	r7, #28
    4122:	46bd      	mov	sp, r7
    4124:	f85d 7b04 	ldr.w	r7, [sp], #4
    4128:	4770      	bx	lr
    412a:	bf00      	nop
    412c:	000000e4 	.word	0x000000e4
    4130:	000000fc 	.word	0x000000fc

00004134 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    4134:	b480      	push	{r7}
    4136:	b085      	sub	sp, #20
    4138:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    413a:	2300      	movs	r3, #0
    413c:	60fb      	str	r3, [r7, #12]
    413e:	68fb      	ldr	r3, [r7, #12]
    4140:	00db      	lsls	r3, r3, #3
    4142:	4a15      	ldr	r2, [pc, #84]	; (4198 <sjsu::InitializeBssSection()+0x64>)
    4144:	4413      	add	r3, r2
    4146:	4a15      	ldr	r2, [pc, #84]	; (419c <sjsu::InitializeBssSection()+0x68>)
    4148:	4293      	cmp	r3, r2
    414a:	d21e      	bcs.n	418a <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    414c:	4a12      	ldr	r2, [pc, #72]	; (4198 <sjsu::InitializeBssSection()+0x64>)
    414e:	68fb      	ldr	r3, [r7, #12]
    4150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4154:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    4156:	4a10      	ldr	r2, [pc, #64]	; (4198 <sjsu::InitializeBssSection()+0x64>)
    4158:	68fb      	ldr	r3, [r7, #12]
    415a:	00db      	lsls	r3, r3, #3
    415c:	4413      	add	r3, r2
    415e:	685b      	ldr	r3, [r3, #4]
    4160:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    4162:	2300      	movs	r3, #0
    4164:	60bb      	str	r3, [r7, #8]
    4166:	68ba      	ldr	r2, [r7, #8]
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	429a      	cmp	r2, r3
    416c:	d209      	bcs.n	4182 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    416e:	68bb      	ldr	r3, [r7, #8]
    4170:	009b      	lsls	r3, r3, #2
    4172:	687a      	ldr	r2, [r7, #4]
    4174:	4413      	add	r3, r2
    4176:	2200      	movs	r2, #0
    4178:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    417a:	68bb      	ldr	r3, [r7, #8]
    417c:	3301      	adds	r3, #1
    417e:	60bb      	str	r3, [r7, #8]
    4180:	e7f1      	b.n	4166 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    4182:	68fb      	ldr	r3, [r7, #12]
    4184:	3301      	adds	r3, #1
    4186:	60fb      	str	r3, [r7, #12]
    4188:	e7d9      	b.n	413e <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    418a:	bf00      	nop
    418c:	3714      	adds	r7, #20
    418e:	46bd      	mov	sp, r7
    4190:	f85d 7b04 	ldr.w	r7, [sp], #4
    4194:	4770      	bx	lr
    4196:	bf00      	nop
    4198:	000000fc 	.word	0x000000fc
    419c:	0000010c 	.word	0x0000010c

000041a0 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    41a0:	b580      	push	{r7, lr}
    41a2:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    41a4:	f7ff ff78 	bl	4098 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    41a8:	f7ff ffc4 	bl	4134 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    41ac:	f003 fa8c 	bl	76c8 <__libc_init_array>
}
    41b0:	bf00      	nop
    41b2:	bd80      	pop	{r7, pc}

000041b4 <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    41b4:	b580      	push	{r7, lr}
    41b6:	b08c      	sub	sp, #48	; 0x30
    41b8:	af02      	add	r7, sp, #8
    41ba:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	685b      	ldr	r3, [r3, #4]
    41c6:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	689b      	ldr	r3, [r3, #8]
    41cc:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	68db      	ldr	r3, [r3, #12]
    41d2:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	691b      	ldr	r3, [r3, #16]
    41d8:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	695b      	ldr	r3, [r3, #20]
    41de:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	699b      	ldr	r3, [r3, #24]
    41e4:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	69db      	ldr	r3, [r3, #28]
    41ea:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    41ec:	480d      	ldr	r0, [pc, #52]	; (4224 <GetRegistersFromStack+0x70>)
    41ee:	f001 fa21 	bl	5634 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    41f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    41f4:	6a3a      	ldr	r2, [r7, #32]
    41f6:	69f8      	ldr	r0, [r7, #28]
    41f8:	69bb      	ldr	r3, [r7, #24]
    41fa:	9300      	str	r3, [sp, #0]
    41fc:	4603      	mov	r3, r0
    41fe:	480a      	ldr	r0, [pc, #40]	; (4228 <GetRegistersFromStack+0x74>)
    4200:	f001 fa18 	bl	5634 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    4204:	6979      	ldr	r1, [r7, #20]
    4206:	693a      	ldr	r2, [r7, #16]
    4208:	68f8      	ldr	r0, [r7, #12]
    420a:	68bb      	ldr	r3, [r7, #8]
    420c:	9300      	str	r3, [sp, #0]
    420e:	4603      	mov	r3, r0
    4210:	4806      	ldr	r0, [pc, #24]	; (422c <GetRegistersFromStack+0x78>)
    4212:	f001 fa0f 	bl	5634 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	4619      	mov	r1, r3
    421a:	2001      	movs	r0, #1
    421c:	f7fc fa8e 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    4220:	e7fe      	b.n	4220 <GetRegistersFromStack+0x6c>
    4222:	bf00      	nop
    4224:	00008a24 	.word	0x00008a24
    4228:	00008a50 	.word	0x00008a50
    422c:	00008a84 	.word	0x00008a84

00004230 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    4230:	b480      	push	{r7}
    4232:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    4234:	f01e 0f04 	tst.w	lr, #4
    4238:	bf0c      	ite	eq
    423a:	f3ef 8008 	mrseq	r0, MSP
    423e:	f3ef 8009 	mrsne	r0, PSP
    4242:	6981      	ldr	r1, [r0, #24]
    4244:	4a00      	ldr	r2, [pc, #0]	; (4248 <handler2_address_const>)
    4246:	4710      	bx	r2

00004248 <handler2_address_const>:
    4248:	000041b5 	.word	0x000041b5
    }
  }
    424c:	bf00      	nop
    424e:	46bd      	mov	sp, r7
    4250:	f85d 7b04 	ldr.w	r7, [sp], #4
    4254:	4770      	bx	lr
    4256:	Address 0x0000000000004256 is out of bounds.


00004258 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    4258:	b580      	push	{r7, lr}
    425a:	b084      	sub	sp, #16
    425c:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    425e:	4b10      	ldr	r3, [pc, #64]	; (42a0 <ArmResetHandler+0x48>)
    4260:	60fb      	str	r3, [r7, #12]
    4262:	68fb      	ldr	r3, [r7, #12]
    4264:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    4266:	683b      	ldr	r3, [r7, #0]
    4268:	f383 8809 	msr	PSP, r3
    426c:	68fb      	ldr	r3, [r7, #12]
    426e:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    4276:	f7ff ff93 	bl	41a0 <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    427a:	f001 fc3d 	bl	5af8 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    427e:	f7fe fff3 	bl	3268 <main>
    4282:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    4284:	68bb      	ldr	r3, [r7, #8]
    4286:	2b00      	cmp	r3, #0
    4288:	db04      	blt.n	4294 <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    428a:	68b9      	ldr	r1, [r7, #8]
    428c:	4805      	ldr	r0, [pc, #20]	; (42a4 <ArmResetHandler+0x4c>)
    428e:	f001 f9d1 	bl	5634 <printf>
    4292:	e003      	b.n	429c <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    4294:	68b9      	ldr	r1, [r7, #8]
    4296:	4804      	ldr	r0, [pc, #16]	; (42a8 <ArmResetHandler+0x50>)
    4298:	f001 f9cc 	bl	5634 <printf>
    429c:	e7fe      	b.n	429c <ArmResetHandler+0x44>
    429e:	bf00      	nop
    42a0:	10010000 	.word	0x10010000
    42a4:	00008abc 	.word	0x00008abc
    42a8:	00008af0 	.word	0x00008af0

000042ac <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    42ac:	b580      	push	{r7, lr}
    42ae:	b082      	sub	sp, #8
    42b0:	af00      	add	r7, sp, #0
    42b2:	6078      	str	r0, [r7, #4]
    42b4:	6039      	str	r1, [r7, #0]
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	2b01      	cmp	r3, #1
    42ba:	d111      	bne.n	42e0 <__static_initialization_and_destruction_0(int, int)+0x34>
    42bc:	683b      	ldr	r3, [r7, #0]
    42be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    42c2:	4293      	cmp	r3, r2
    42c4:	d10c      	bne.n	42e0 <__static_initialization_and_destruction_0(int, int)+0x34>
    42c6:	4b08      	ldr	r3, [pc, #32]	; (42e8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	f003 0301 	and.w	r3, r3, #1
    42ce:	2b00      	cmp	r3, #0
    42d0:	d106      	bne.n	42e0 <__static_initialization_and_destruction_0(int, int)+0x34>
    42d2:	4b05      	ldr	r3, [pc, #20]	; (42e8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    42d4:	2201      	movs	r2, #1
    42d6:	601a      	str	r2, [r3, #0]
    42d8:	4b04      	ldr	r3, [pc, #16]	; (42ec <__static_initialization_and_destruction_0(int, int)+0x40>)
    42da:	4618      	mov	r0, r3
    42dc:	f7fc fdc8 	bl	e70 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    42e0:	bf00      	nop
    42e2:	3708      	adds	r7, #8
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}
    42e8:	10000354 	.word	0x10000354
    42ec:	10000104 	.word	0x10000104

000042f0 <_GLOBAL__sub_I_GetRegistersFromStack>:
    42f0:	b580      	push	{r7, lr}
    42f2:	af00      	add	r7, sp, #0
    42f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    42f8:	2001      	movs	r0, #1
    42fa:	f7ff ffd7 	bl	42ac <__static_initialization_and_destruction_0(int, int)>
    42fe:	bd80      	pop	{r7, pc}

00004300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4300:	b580      	push	{r7, lr}
    4302:	b084      	sub	sp, #16
    4304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4306:	4b28      	ldr	r3, [pc, #160]	; (43a8 <vTaskSwitchContext+0xa8>)
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	2b00      	cmp	r3, #0
    430c:	d003      	beq.n	4316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    430e:	4b27      	ldr	r3, [pc, #156]	; (43ac <vTaskSwitchContext+0xac>)
    4310:	2201      	movs	r2, #1
    4312:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4314:	e043      	b.n	439e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    4316:	4b25      	ldr	r3, [pc, #148]	; (43ac <vTaskSwitchContext+0xac>)
    4318:	2200      	movs	r2, #0
    431a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    431c:	f001 fbe2 	bl	5ae4 <ThreadRuntimeCounter>
    4320:	4602      	mov	r2, r0
    4322:	4b23      	ldr	r3, [pc, #140]	; (43b0 <vTaskSwitchContext+0xb0>)
    4324:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    4326:	4b22      	ldr	r3, [pc, #136]	; (43b0 <vTaskSwitchContext+0xb0>)
    4328:	681a      	ldr	r2, [r3, #0]
    432a:	4b22      	ldr	r3, [pc, #136]	; (43b4 <vTaskSwitchContext+0xb4>)
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	429a      	cmp	r2, r3
    4330:	d909      	bls.n	4346 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    4332:	4b21      	ldr	r3, [pc, #132]	; (43b8 <vTaskSwitchContext+0xb8>)
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	6d59      	ldr	r1, [r3, #84]	; 0x54
    4338:	4a1d      	ldr	r2, [pc, #116]	; (43b0 <vTaskSwitchContext+0xb0>)
    433a:	6810      	ldr	r0, [r2, #0]
    433c:	4a1d      	ldr	r2, [pc, #116]	; (43b4 <vTaskSwitchContext+0xb4>)
    433e:	6812      	ldr	r2, [r2, #0]
    4340:	1a82      	subs	r2, r0, r2
    4342:	440a      	add	r2, r1
    4344:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    4346:	4b1a      	ldr	r3, [pc, #104]	; (43b0 <vTaskSwitchContext+0xb0>)
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	4a1a      	ldr	r2, [pc, #104]	; (43b4 <vTaskSwitchContext+0xb4>)
    434c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    434e:	4b1b      	ldr	r3, [pc, #108]	; (43bc <vTaskSwitchContext+0xbc>)
    4350:	681b      	ldr	r3, [r3, #0]
    4352:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	fab3 f383 	clz	r3, r3
    435a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    435c:	78fb      	ldrb	r3, [r7, #3]
    435e:	f1c3 031f 	rsb	r3, r3, #31
    4362:	60fb      	str	r3, [r7, #12]
    4364:	68fa      	ldr	r2, [r7, #12]
    4366:	4613      	mov	r3, r2
    4368:	009b      	lsls	r3, r3, #2
    436a:	4413      	add	r3, r2
    436c:	009b      	lsls	r3, r3, #2
    436e:	4a14      	ldr	r2, [pc, #80]	; (43c0 <vTaskSwitchContext+0xc0>)
    4370:	4413      	add	r3, r2
    4372:	60bb      	str	r3, [r7, #8]
    4374:	68bb      	ldr	r3, [r7, #8]
    4376:	685b      	ldr	r3, [r3, #4]
    4378:	685a      	ldr	r2, [r3, #4]
    437a:	68bb      	ldr	r3, [r7, #8]
    437c:	605a      	str	r2, [r3, #4]
    437e:	68bb      	ldr	r3, [r7, #8]
    4380:	685a      	ldr	r2, [r3, #4]
    4382:	68bb      	ldr	r3, [r7, #8]
    4384:	3308      	adds	r3, #8
    4386:	429a      	cmp	r2, r3
    4388:	d104      	bne.n	4394 <vTaskSwitchContext+0x94>
    438a:	68bb      	ldr	r3, [r7, #8]
    438c:	685b      	ldr	r3, [r3, #4]
    438e:	685a      	ldr	r2, [r3, #4]
    4390:	68bb      	ldr	r3, [r7, #8]
    4392:	605a      	str	r2, [r3, #4]
    4394:	68bb      	ldr	r3, [r7, #8]
    4396:	685b      	ldr	r3, [r3, #4]
    4398:	68db      	ldr	r3, [r3, #12]
    439a:	4a07      	ldr	r2, [pc, #28]	; (43b8 <vTaskSwitchContext+0xb8>)
    439c:	6013      	str	r3, [r2, #0]
}
    439e:	bf00      	nop
    43a0:	3710      	adds	r7, #16
    43a2:	46bd      	mov	sp, r7
    43a4:	bd80      	pop	{r7, pc}
    43a6:	bf00      	nop
    43a8:	100003ec 	.word	0x100003ec
    43ac:	100003e8 	.word	0x100003e8
    43b0:	100003f4 	.word	0x100003f4
    43b4:	100003f0 	.word	0x100003f0
    43b8:	1000037c 	.word	0x1000037c
    43bc:	100003e4 	.word	0x100003e4
    43c0:	10000380 	.word	0x10000380

000043c4 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    43c4:	b480      	push	{r7}
    43c6:	b083      	sub	sp, #12
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    43cc:	bf00      	nop
    while (1)
    43ce:	e7fd      	b.n	43cc <_exit+0x8>

000043d0 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    43d0:	b480      	push	{r7}
    43d2:	af00      	add	r7, sp, #0
    return 1;
    43d4:	2301      	movs	r3, #1
  }
    43d6:	4618      	mov	r0, r3
    43d8:	46bd      	mov	sp, r7
    43da:	f85d 7b04 	ldr.w	r7, [sp], #4
    43de:	4770      	bx	lr

000043e0 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    43e0:	b480      	push	{r7}
    43e2:	b083      	sub	sp, #12
    43e4:	af00      	add	r7, sp, #0
    43e6:	6078      	str	r0, [r7, #4]
    43e8:	6039      	str	r1, [r7, #0]
    return -1;
    43ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    43ee:	4618      	mov	r0, r3
    43f0:	370c      	adds	r7, #12
    43f2:	46bd      	mov	sp, r7
    43f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43f8:	4770      	bx	lr
    43fa:	Address 0x00000000000043fa is out of bounds.


000043fc <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    43fc:	b580      	push	{r7, lr}
    43fe:	b084      	sub	sp, #16
    4400:	af00      	add	r7, sp, #0
    4402:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    4404:	6878      	ldr	r0, [r7, #4]
    4406:	f003 f9db 	bl	77c0 <strlen>
    440a:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    440c:	2300      	movs	r3, #0
    440e:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    4410:	4b0b      	ldr	r3, [pc, #44]	; (4440 <puts+0x44>)
    4412:	681b      	ldr	r3, [r3, #0]
    4414:	68f9      	ldr	r1, [r7, #12]
    4416:	6878      	ldr	r0, [r7, #4]
    4418:	4798      	blx	r3
    441a:	4602      	mov	r2, r0
    441c:	68bb      	ldr	r3, [r7, #8]
    441e:	4413      	add	r3, r2
    4420:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    4422:	4b07      	ldr	r3, [pc, #28]	; (4440 <puts+0x44>)
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	2101      	movs	r1, #1
    4428:	4806      	ldr	r0, [pc, #24]	; (4444 <puts+0x48>)
    442a:	4798      	blx	r3
    442c:	4602      	mov	r2, r0
    442e:	68bb      	ldr	r3, [r7, #8]
    4430:	4413      	add	r3, r2
    4432:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    4434:	68bb      	ldr	r3, [r7, #8]
  }
    4436:	4618      	mov	r0, r3
    4438:	3710      	adds	r7, #16
    443a:	46bd      	mov	sp, r7
    443c:	bd80      	pop	{r7, pc}
    443e:	bf00      	nop
    4440:	10000054 	.word	0x10000054
    4444:	00008b24 	.word	0x00008b24

00004448 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    4448:	b480      	push	{r7}
    444a:	b085      	sub	sp, #20
    444c:	af00      	add	r7, sp, #0
    444e:	60b9      	str	r1, [r7, #8]
    4450:	607a      	str	r2, [r7, #4]
    4452:	603b      	str	r3, [r7, #0]
    4454:	4603      	mov	r3, r0
    4456:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    4458:	bf00      	nop
    445a:	3714      	adds	r7, #20
    445c:	46bd      	mov	sp, r7
    445e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4462:	4770      	bx	lr

00004464 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    4464:	b580      	push	{r7, lr}
    4466:	b084      	sub	sp, #16
    4468:	af00      	add	r7, sp, #0
    446a:	60b9      	str	r1, [r7, #8]
    446c:	607a      	str	r2, [r7, #4]
    446e:	603b      	str	r3, [r7, #0]
    4470:	4603      	mov	r3, r0
    4472:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    4474:	7bfb      	ldrb	r3, [r7, #15]
    4476:	2b00      	cmp	r3, #0
    4478:	d003      	beq.n	4482 <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    447a:	7bfb      	ldrb	r3, [r7, #15]
    447c:	4618      	mov	r0, r3
    447e:	f001 fcd3 	bl	5e28 <_putchar>
  }
}
    4482:	bf00      	nop
    4484:	3710      	adds	r7, #16
    4486:	46bd      	mov	sp, r7
    4488:	bd80      	pop	{r7, pc}

0000448a <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    448a:	b480      	push	{r7}
    448c:	b085      	sub	sp, #20
    448e:	af00      	add	r7, sp, #0
    4490:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    4492:	687b      	ldr	r3, [r7, #4]
    4494:	60fb      	str	r3, [r7, #12]
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	2b00      	cmp	r3, #0
    449c:	d003      	beq.n	44a6 <_strlen(char const*)+0x1c>
    449e:	68fb      	ldr	r3, [r7, #12]
    44a0:	3301      	adds	r3, #1
    44a2:	60fb      	str	r3, [r7, #12]
    44a4:	e7f7      	b.n	4496 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    44a6:	68fa      	ldr	r2, [r7, #12]
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	1ad3      	subs	r3, r2, r3
}
    44ac:	4618      	mov	r0, r3
    44ae:	3714      	adds	r7, #20
    44b0:	46bd      	mov	sp, r7
    44b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b6:	4770      	bx	lr

000044b8 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    44b8:	b480      	push	{r7}
    44ba:	b083      	sub	sp, #12
    44bc:	af00      	add	r7, sp, #0
    44be:	4603      	mov	r3, r0
    44c0:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    44c2:	79fb      	ldrb	r3, [r7, #7]
    44c4:	2b2f      	cmp	r3, #47	; 0x2f
    44c6:	d904      	bls.n	44d2 <_is_digit(char)+0x1a>
    44c8:	79fb      	ldrb	r3, [r7, #7]
    44ca:	2b39      	cmp	r3, #57	; 0x39
    44cc:	d801      	bhi.n	44d2 <_is_digit(char)+0x1a>
    44ce:	2301      	movs	r3, #1
    44d0:	e000      	b.n	44d4 <_is_digit(char)+0x1c>
    44d2:	2300      	movs	r3, #0
}
    44d4:	4618      	mov	r0, r3
    44d6:	370c      	adds	r7, #12
    44d8:	46bd      	mov	sp, r7
    44da:	f85d 7b04 	ldr.w	r7, [sp], #4
    44de:	4770      	bx	lr

000044e0 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b084      	sub	sp, #16
    44e4:	af00      	add	r7, sp, #0
    44e6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    44e8:	2300      	movs	r3, #0
    44ea:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	781b      	ldrb	r3, [r3, #0]
    44f2:	4618      	mov	r0, r3
    44f4:	f7ff ffe0 	bl	44b8 <_is_digit(char)>
    44f8:	4603      	mov	r3, r0
    44fa:	2b00      	cmp	r3, #0
    44fc:	d00f      	beq.n	451e <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    44fe:	68fa      	ldr	r2, [r7, #12]
    4500:	4613      	mov	r3, r2
    4502:	009b      	lsls	r3, r3, #2
    4504:	4413      	add	r3, r2
    4506:	005b      	lsls	r3, r3, #1
    4508:	4618      	mov	r0, r3
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	681b      	ldr	r3, [r3, #0]
    450e:	1c59      	adds	r1, r3, #1
    4510:	687a      	ldr	r2, [r7, #4]
    4512:	6011      	str	r1, [r2, #0]
    4514:	781b      	ldrb	r3, [r3, #0]
    4516:	4403      	add	r3, r0
    4518:	3b30      	subs	r3, #48	; 0x30
    451a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    451c:	e7e6      	b.n	44ec <_atoi(char const**)+0xc>
  }
  return i;
    451e:	68fb      	ldr	r3, [r7, #12]
}
    4520:	4618      	mov	r0, r3
    4522:	3710      	adds	r7, #16
    4524:	46bd      	mov	sp, r7
    4526:	bd80      	pop	{r7, pc}

00004528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    4528:	b590      	push	{r4, r7, lr}
    452a:	b089      	sub	sp, #36	; 0x24
    452c:	af00      	add	r7, sp, #0
    452e:	60f8      	str	r0, [r7, #12]
    4530:	60b9      	str	r1, [r7, #8]
    4532:	607a      	str	r2, [r7, #4]
    4534:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    453a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    453c:	f003 0302 	and.w	r3, r3, #2
    4540:	2b00      	cmp	r3, #0
    4542:	d10e      	bne.n	4562 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    4544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4548:	429a      	cmp	r2, r3
    454a:	d20a      	bcs.n	4562 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    454e:	2b1f      	cmp	r3, #31
    4550:	d807      	bhi.n	4562 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    4552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4554:	1c5a      	adds	r2, r3, #1
    4556:	637a      	str	r2, [r7, #52]	; 0x34
    4558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    455a:	4413      	add	r3, r2
    455c:	2230      	movs	r2, #48	; 0x30
    455e:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4560:	e7eb      	b.n	453a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4564:	f003 0302 	and.w	r3, r3, #2
    4568:	2b00      	cmp	r3, #0
    456a:	d113      	bne.n	4594 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    456e:	f003 0301 	and.w	r3, r3, #1
    4572:	2b00      	cmp	r3, #0
    4574:	d00e      	beq.n	4594 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    4576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    457a:	429a      	cmp	r2, r3
    457c:	d20a      	bcs.n	4594 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4580:	2b1f      	cmp	r3, #31
    4582:	d807      	bhi.n	4594 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    4584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4586:	1c5a      	adds	r2, r3, #1
    4588:	637a      	str	r2, [r7, #52]	; 0x34
    458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    458c:	4413      	add	r3, r2
    458e:	2230      	movs	r2, #48	; 0x30
    4590:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4592:	e7e6      	b.n	4562 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    4594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4596:	f003 0310 	and.w	r3, r3, #16
    459a:	2b00      	cmp	r3, #0
    459c:	d058      	beq.n	4650 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    45a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    45a4:	2b00      	cmp	r3, #0
    45a6:	d116      	bne.n	45d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    45a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45aa:	2b00      	cmp	r3, #0
    45ac:	d013      	beq.n	45d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    45ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    45b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    45b2:	429a      	cmp	r2, r3
    45b4:	d003      	beq.n	45be <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    45b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    45b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    45ba:	429a      	cmp	r2, r3
    45bc:	d10b      	bne.n	45d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    45be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45c0:	3b01      	subs	r3, #1
    45c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    45c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45c6:	2b00      	cmp	r3, #0
    45c8:	d005      	beq.n	45d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    45ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    45cc:	2b10      	cmp	r3, #16
    45ce:	d102      	bne.n	45d6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    45d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45d2:	3b01      	subs	r3, #1
    45d4:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    45d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    45d8:	2b10      	cmp	r3, #16
    45da:	d10f      	bne.n	45fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    45dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    45de:	f003 0320 	and.w	r3, r3, #32
    45e2:	2b00      	cmp	r3, #0
    45e4:	d10a      	bne.n	45fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    45e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45e8:	2b1f      	cmp	r3, #31
    45ea:	d807      	bhi.n	45fc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    45ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45ee:	1c5a      	adds	r2, r3, #1
    45f0:	637a      	str	r2, [r7, #52]	; 0x34
    45f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    45f4:	4413      	add	r3, r2
    45f6:	2278      	movs	r2, #120	; 0x78
    45f8:	701a      	strb	r2, [r3, #0]
    45fa:	e01f      	b.n	463c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    45fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    45fe:	2b10      	cmp	r3, #16
    4600:	d10f      	bne.n	4622 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    4602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4604:	f003 0320 	and.w	r3, r3, #32
    4608:	2b00      	cmp	r3, #0
    460a:	d00a      	beq.n	4622 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    460e:	2b1f      	cmp	r3, #31
    4610:	d807      	bhi.n	4622 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    4612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4614:	1c5a      	adds	r2, r3, #1
    4616:	637a      	str	r2, [r7, #52]	; 0x34
    4618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    461a:	4413      	add	r3, r2
    461c:	2258      	movs	r2, #88	; 0x58
    461e:	701a      	strb	r2, [r3, #0]
    4620:	e00c      	b.n	463c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4624:	2b02      	cmp	r3, #2
    4626:	d109      	bne.n	463c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    4628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    462a:	2b1f      	cmp	r3, #31
    462c:	d806      	bhi.n	463c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4630:	1c5a      	adds	r2, r3, #1
    4632:	637a      	str	r2, [r7, #52]	; 0x34
    4634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4636:	4413      	add	r3, r2
    4638:	2262      	movs	r2, #98	; 0x62
    463a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    463e:	2b1f      	cmp	r3, #31
    4640:	d806      	bhi.n	4650 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    4642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4644:	1c5a      	adds	r2, r3, #1
    4646:	637a      	str	r2, [r7, #52]	; 0x34
    4648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    464a:	4413      	add	r3, r2
    464c:	2230      	movs	r2, #48	; 0x30
    464e:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    4650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4652:	2b00      	cmp	r3, #0
    4654:	d014      	beq.n	4680 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    4656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    465a:	429a      	cmp	r2, r3
    465c:	d110      	bne.n	4680 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    465e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    4662:	2b00      	cmp	r3, #0
    4664:	d109      	bne.n	467a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    4666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4668:	f003 0304 	and.w	r3, r3, #4
    466c:	2b00      	cmp	r3, #0
    466e:	d104      	bne.n	467a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    4670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4672:	f003 0308 	and.w	r3, r3, #8
    4676:	2b00      	cmp	r3, #0
    4678:	d002      	beq.n	4680 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    467c:	3b01      	subs	r3, #1
    467e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    4680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4682:	2b1f      	cmp	r3, #31
    4684:	d824      	bhi.n	46d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    4686:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    468a:	2b00      	cmp	r3, #0
    468c:	d007      	beq.n	469e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4690:	1c5a      	adds	r2, r3, #1
    4692:	637a      	str	r2, [r7, #52]	; 0x34
    4694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4696:	4413      	add	r3, r2
    4698:	222d      	movs	r2, #45	; 0x2d
    469a:	701a      	strb	r2, [r3, #0]
    469c:	e018      	b.n	46d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    469e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46a0:	f003 0304 	and.w	r3, r3, #4
    46a4:	2b00      	cmp	r3, #0
    46a6:	d007      	beq.n	46b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    46a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46aa:	1c5a      	adds	r2, r3, #1
    46ac:	637a      	str	r2, [r7, #52]	; 0x34
    46ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    46b0:	4413      	add	r3, r2
    46b2:	222b      	movs	r2, #43	; 0x2b
    46b4:	701a      	strb	r2, [r3, #0]
    46b6:	e00b      	b.n	46d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    46b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46ba:	f003 0308 	and.w	r3, r3, #8
    46be:	2b00      	cmp	r3, #0
    46c0:	d006      	beq.n	46d0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    46c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46c4:	1c5a      	adds	r2, r3, #1
    46c6:	637a      	str	r2, [r7, #52]	; 0x34
    46c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    46ca:	4413      	add	r3, r2
    46cc:	2220      	movs	r2, #32
    46ce:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    46d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46d2:	f003 0302 	and.w	r3, r3, #2
    46d6:	2b00      	cmp	r3, #0
    46d8:	d116      	bne.n	4708 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    46da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46dc:	f003 0301 	and.w	r3, r3, #1
    46e0:	2b00      	cmp	r3, #0
    46e2:	d111      	bne.n	4708 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    46e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46e6:	61fb      	str	r3, [r7, #28]
    46e8:	69fa      	ldr	r2, [r7, #28]
    46ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    46ec:	429a      	cmp	r2, r3
    46ee:	d20b      	bcs.n	4708 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    46f0:	687a      	ldr	r2, [r7, #4]
    46f2:	1c53      	adds	r3, r2, #1
    46f4:	607b      	str	r3, [r7, #4]
    46f6:	68fc      	ldr	r4, [r7, #12]
    46f8:	683b      	ldr	r3, [r7, #0]
    46fa:	68b9      	ldr	r1, [r7, #8]
    46fc:	2020      	movs	r0, #32
    46fe:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4700:	69fb      	ldr	r3, [r7, #28]
    4702:	3301      	adds	r3, #1
    4704:	61fb      	str	r3, [r7, #28]
    4706:	e7ef      	b.n	46e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    4708:	2300      	movs	r3, #0
    470a:	61bb      	str	r3, [r7, #24]
    470c:	69ba      	ldr	r2, [r7, #24]
    470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4710:	429a      	cmp	r2, r3
    4712:	d211      	bcs.n	4738 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    4714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4716:	69bb      	ldr	r3, [r7, #24]
    4718:	1ad3      	subs	r3, r2, r3
    471a:	3b01      	subs	r3, #1
    471c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    471e:	4413      	add	r3, r2
    4720:	7818      	ldrb	r0, [r3, #0]
    4722:	687a      	ldr	r2, [r7, #4]
    4724:	1c53      	adds	r3, r2, #1
    4726:	607b      	str	r3, [r7, #4]
    4728:	68fc      	ldr	r4, [r7, #12]
    472a:	683b      	ldr	r3, [r7, #0]
    472c:	68b9      	ldr	r1, [r7, #8]
    472e:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    4730:	69bb      	ldr	r3, [r7, #24]
    4732:	3301      	adds	r3, #1
    4734:	61bb      	str	r3, [r7, #24]
    4736:	e7e9      	b.n	470c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    4738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    473a:	f003 0302 	and.w	r3, r3, #2
    473e:	2b00      	cmp	r3, #0
    4740:	d00e      	beq.n	4760 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    4742:	687a      	ldr	r2, [r7, #4]
    4744:	697b      	ldr	r3, [r7, #20]
    4746:	1ad3      	subs	r3, r2, r3
    4748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    474a:	429a      	cmp	r2, r3
    474c:	d908      	bls.n	4760 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    474e:	687a      	ldr	r2, [r7, #4]
    4750:	1c53      	adds	r3, r2, #1
    4752:	607b      	str	r3, [r7, #4]
    4754:	68fc      	ldr	r4, [r7, #12]
    4756:	683b      	ldr	r3, [r7, #0]
    4758:	68b9      	ldr	r1, [r7, #8]
    475a:	2020      	movs	r0, #32
    475c:	47a0      	blx	r4
    while (idx - start_idx < width) {
    475e:	e7f0      	b.n	4742 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    4760:	687b      	ldr	r3, [r7, #4]
}
    4762:	4618      	mov	r0, r3
    4764:	3724      	adds	r7, #36	; 0x24
    4766:	46bd      	mov	sp, r7
    4768:	bd90      	pop	{r4, r7, pc}

0000476a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    476a:	b580      	push	{r7, lr}
    476c:	b096      	sub	sp, #88	; 0x58
    476e:	af08      	add	r7, sp, #32
    4770:	60f8      	str	r0, [r7, #12]
    4772:	60b9      	str	r1, [r7, #8]
    4774:	607a      	str	r2, [r7, #4]
    4776:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    4778:	2300      	movs	r3, #0
    477a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    477e:	2b00      	cmp	r3, #0
    4780:	d103      	bne.n	478a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    4782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4784:	f023 0310 	bic.w	r3, r3, #16
    4788:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4790:	2b00      	cmp	r3, #0
    4792:	d002      	beq.n	479a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    4794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4796:	2b00      	cmp	r3, #0
    4798:	d034      	beq.n	4804 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    479c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    479e:	fbb3 f2f2 	udiv	r2, r3, r2
    47a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    47a4:	fb01 f202 	mul.w	r2, r1, r2
    47a8:	1a9b      	subs	r3, r3, r2
    47aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    47ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    47b2:	2b09      	cmp	r3, #9
    47b4:	d804      	bhi.n	47c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    47b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    47ba:	3330      	adds	r3, #48	; 0x30
    47bc:	b2da      	uxtb	r2, r3
    47be:	e00d      	b.n	47dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    47c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47c2:	f003 0320 	and.w	r3, r3, #32
    47c6:	2b00      	cmp	r3, #0
    47c8:	d001      	beq.n	47ce <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    47ca:	2241      	movs	r2, #65	; 0x41
    47cc:	e000      	b.n	47d0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    47ce:	2261      	movs	r2, #97	; 0x61
    47d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    47d4:	4413      	add	r3, r2
    47d6:	b2db      	uxtb	r3, r3
    47d8:	3b0a      	subs	r3, #10
    47da:	b2da      	uxtb	r2, r3
    47dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47de:	1c59      	adds	r1, r3, #1
    47e0:	6379      	str	r1, [r7, #52]	; 0x34
    47e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
    47e6:	440b      	add	r3, r1
    47e8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    47ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    47ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    47f0:	fbb2 f3f3 	udiv	r3, r2, r3
    47f4:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    47f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    47f8:	2b00      	cmp	r3, #0
    47fa:	d003      	beq.n	4804 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    47fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47fe:	2b1f      	cmp	r3, #31
    4800:	d800      	bhi.n	4804 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    4802:	e7ca      	b.n	479a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    4804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4806:	9306      	str	r3, [sp, #24]
    4808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    480a:	9305      	str	r3, [sp, #20]
    480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    480e:	9304      	str	r3, [sp, #16]
    4810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4812:	9303      	str	r3, [sp, #12]
    4814:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    4818:	9302      	str	r3, [sp, #8]
    481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    481c:	9301      	str	r3, [sp, #4]
    481e:	f107 0310 	add.w	r3, r7, #16
    4822:	9300      	str	r3, [sp, #0]
    4824:	683b      	ldr	r3, [r7, #0]
    4826:	687a      	ldr	r2, [r7, #4]
    4828:	68b9      	ldr	r1, [r7, #8]
    482a:	68f8      	ldr	r0, [r7, #12]
    482c:	f7ff fe7c 	bl	4528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    4830:	4603      	mov	r3, r0
}
    4832:	4618      	mov	r0, r3
    4834:	3738      	adds	r7, #56	; 0x38
    4836:	46bd      	mov	sp, r7
    4838:	bd80      	pop	{r7, pc}

0000483a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    483a:	b590      	push	{r4, r7, lr}
    483c:	b097      	sub	sp, #92	; 0x5c
    483e:	af08      	add	r7, sp, #32
    4840:	60f8      	str	r0, [r7, #12]
    4842:	60b9      	str	r1, [r7, #8]
    4844:	607a      	str	r2, [r7, #4]
    4846:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    4848:	2300      	movs	r3, #0
    484a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    484c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    4850:	4323      	orrs	r3, r4
    4852:	d103      	bne.n	485c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    4854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4856:	f023 0310 	bic.w	r3, r3, #16
    485a:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    485c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4862:	2b00      	cmp	r3, #0
    4864:	d003      	beq.n	486e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    4866:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    486a:	4323      	orrs	r3, r4
    486c:	d03a      	beq.n	48e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    486e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    4872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    4876:	f001 fe19 	bl	64ac <__aeabi_uldivmod>
    487a:	461c      	mov	r4, r3
    487c:	4613      	mov	r3, r2
    487e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    4882:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    4886:	2b09      	cmp	r3, #9
    4888:	d804      	bhi.n	4894 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    488a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    488e:	3330      	adds	r3, #48	; 0x30
    4890:	b2da      	uxtb	r2, r3
    4892:	e00d      	b.n	48b0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    4894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4896:	f003 0320 	and.w	r3, r3, #32
    489a:	2b00      	cmp	r3, #0
    489c:	d001      	beq.n	48a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    489e:	2241      	movs	r2, #65	; 0x41
    48a0:	e000      	b.n	48a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    48a2:	2261      	movs	r2, #97	; 0x61
    48a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    48a8:	4413      	add	r3, r2
    48aa:	b2db      	uxtb	r3, r3
    48ac:	3b0a      	subs	r3, #10
    48ae:	b2da      	uxtb	r2, r3
    48b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48b2:	1c59      	adds	r1, r3, #1
    48b4:	6379      	str	r1, [r7, #52]	; 0x34
    48b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
    48ba:	440b      	add	r3, r1
    48bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    48c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    48c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    48c8:	f001 fdf0 	bl	64ac <__aeabi_uldivmod>
    48cc:	4603      	mov	r3, r0
    48ce:	460c      	mov	r4, r1
    48d0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    48d4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    48d8:	4323      	orrs	r3, r4
    48da:	d003      	beq.n	48e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    48dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48de:	2b1f      	cmp	r3, #31
    48e0:	d800      	bhi.n	48e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    48e2:	e7c4      	b.n	486e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    48e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    48e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    48e8:	9206      	str	r2, [sp, #24]
    48ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    48ec:	9205      	str	r2, [sp, #20]
    48ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    48f0:	9204      	str	r2, [sp, #16]
    48f2:	9303      	str	r3, [sp, #12]
    48f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    48f8:	9302      	str	r3, [sp, #8]
    48fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48fc:	9301      	str	r3, [sp, #4]
    48fe:	f107 0310 	add.w	r3, r7, #16
    4902:	9300      	str	r3, [sp, #0]
    4904:	683b      	ldr	r3, [r7, #0]
    4906:	687a      	ldr	r2, [r7, #4]
    4908:	68b9      	ldr	r1, [r7, #8]
    490a:	68f8      	ldr	r0, [r7, #12]
    490c:	f7ff fe0c 	bl	4528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    4910:	4603      	mov	r3, r0
}
    4912:	4618      	mov	r0, r3
    4914:	373c      	adds	r7, #60	; 0x3c
    4916:	46bd      	mov	sp, r7
    4918:	bd90      	pop	{r4, r7, pc}
    491a:	Address 0x000000000000491a is out of bounds.


0000491c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    491c:	b590      	push	{r4, r7, lr}
    491e:	b09b      	sub	sp, #108	; 0x6c
    4920:	af00      	add	r7, sp, #0
    4922:	6178      	str	r0, [r7, #20]
    4924:	6139      	str	r1, [r7, #16]
    4926:	60fa      	str	r2, [r7, #12]
    4928:	60bb      	str	r3, [r7, #8]
    492a:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    492e:	68fb      	ldr	r3, [r7, #12]
    4930:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    4932:	e9d7 0100 	ldrd	r0, r1, [r7]
    4936:	f001 fc5b 	bl	61f0 <__aeabi_d2f>
    493a:	4603      	mov	r3, r0
    493c:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    493e:	2300      	movs	r3, #0
    4940:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    4942:	f04f 0300 	mov.w	r3, #0
    4946:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    4948:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    494c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    494e:	2300      	movs	r3, #0
    4950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    4954:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    4958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4960:	d50a      	bpl.n	4978 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    4962:	2301      	movs	r3, #1
    4964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    4968:	ed9f 7aab 	vldr	s14, [pc, #684]	; 4c18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    496c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    4970:	ee77 7a67 	vsub.f32	s15, s14, s15
    4974:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    4978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4980:	2b00      	cmp	r3, #0
    4982:	d101      	bne.n	4988 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    4984:	2306      	movs	r3, #6
    4986:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    4988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    498a:	2b1f      	cmp	r3, #31
    498c:	d80f      	bhi.n	49ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    498e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4990:	2b09      	cmp	r3, #9
    4992:	d90c      	bls.n	49ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    4994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4996:	1c5a      	adds	r2, r3, #1
    4998:	663a      	str	r2, [r7, #96]	; 0x60
    499a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    499e:	4413      	add	r3, r2
    49a0:	2230      	movs	r2, #48	; 0x30
    49a2:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    49a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    49a8:	3b01      	subs	r3, #1
    49aa:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    49ac:	e7ec      	b.n	4988 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    49ae:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    49b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    49b6:	ee17 3a90 	vmov	r3, s15
    49ba:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    49bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    49be:	ee07 3a90 	vmov	s15, r3
    49c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    49c6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    49ca:	ee37 7a67 	vsub.f32	s14, s14, s15
    49ce:	4a93      	ldr	r2, [pc, #588]	; (4c1c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    49d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    49d2:	009b      	lsls	r3, r3, #2
    49d4:	4413      	add	r3, r2
    49d6:	edd3 7a00 	vldr	s15, [r3]
    49da:	ee67 7a27 	vmul.f32	s15, s14, s15
    49de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    49e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    49e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    49ea:	ee17 3a90 	vmov	r3, s15
    49ee:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    49f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    49f2:	ee07 3a90 	vmov	s15, r3
    49f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    49fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    49fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    4a02:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    4a06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4a0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
    4a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a16:	dd18      	ble.n	4a4a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    4a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a1a:	3301      	adds	r3, #1
    4a1c:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    4a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a20:	ee07 3a90 	vmov	s15, r3
    4a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    4a28:	4a7c      	ldr	r2, [pc, #496]	; (4c1c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    4a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4a2c:	009b      	lsls	r3, r3, #2
    4a2e:	4413      	add	r3, r2
    4a30:	edd3 7a00 	vldr	s15, [r3]
    4a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a3c:	db19      	blt.n	4a72 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    4a3e:	2300      	movs	r3, #0
    4a40:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    4a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a44:	3301      	adds	r3, #1
    4a46:	65bb      	str	r3, [r7, #88]	; 0x58
    4a48:	e013      	b.n	4a72 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    4a4a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4a4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4a52:	eef4 7a47 	vcmp.f32	s15, s14
    4a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a5a:	d10a      	bne.n	4a72 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    4a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d004      	beq.n	4a6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    4a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a64:	f003 0301 	and.w	r3, r3, #1
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d002      	beq.n	4a72 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    4a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a6e:	3301      	adds	r3, #1
    4a70:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    4a72:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    4a76:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 4c20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    4a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
    4a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a82:	dd01      	ble.n	4a88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    4a84:	2300      	movs	r3, #0
    4a86:	e166      	b.n	4d56 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    4a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d129      	bne.n	4ae2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    4a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a90:	ee07 3a90 	vmov	s15, r3
    4a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4a98:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    4a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
    4aa0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    4aa4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4aa8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4aac:	eef4 7ac7 	vcmpe.f32	s15, s14
    4ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ab4:	dd03      	ble.n	4abe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    4ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4ab8:	3301      	adds	r3, #1
    4aba:	65bb      	str	r3, [r7, #88]	; 0x58
    4abc:	e062      	b.n	4b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    4abe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4ac2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4ac6:	eef4 7a47 	vcmp.f32	s15, s14
    4aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ace:	d159      	bne.n	4b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    4ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4ad2:	f003 0301 	and.w	r3, r3, #1
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d054      	beq.n	4b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    4ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4adc:	3301      	adds	r3, #1
    4ade:	65bb      	str	r3, [r7, #88]	; 0x58
    4ae0:	e050      	b.n	4b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    4ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4ae4:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4ae8:	2b1f      	cmp	r3, #31
    4aea:	d828      	bhi.n	4b3e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    4aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4aee:	3b01      	subs	r3, #1
    4af0:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    4af2:	6d79      	ldr	r1, [r7, #84]	; 0x54
    4af4:	4b4b      	ldr	r3, [pc, #300]	; (4c24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    4af6:	fba3 2301 	umull	r2, r3, r3, r1
    4afa:	08da      	lsrs	r2, r3, #3
    4afc:	4613      	mov	r3, r2
    4afe:	009b      	lsls	r3, r3, #2
    4b00:	4413      	add	r3, r2
    4b02:	005b      	lsls	r3, r3, #1
    4b04:	1aca      	subs	r2, r1, r3
    4b06:	b2d3      	uxtb	r3, r2
    4b08:	3330      	adds	r3, #48	; 0x30
    4b0a:	b2d9      	uxtb	r1, r3
    4b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b0e:	1c5a      	adds	r2, r3, #1
    4b10:	663a      	str	r2, [r7, #96]	; 0x60
    4b12:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4b16:	4413      	add	r3, r2
    4b18:	460a      	mov	r2, r1
    4b1a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    4b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4b20:	4a40      	ldr	r2, [pc, #256]	; (4c24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    4b22:	fba2 2303 	umull	r2, r3, r2, r3
    4b26:	08db      	lsrs	r3, r3, #3
    4b28:	657b      	str	r3, [r7, #84]	; 0x54
    4b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	bf0c      	ite	eq
    4b30:	2301      	moveq	r3, #1
    4b32:	2300      	movne	r3, #0
    4b34:	b2db      	uxtb	r3, r3
    4b36:	2b00      	cmp	r3, #0
    4b38:	d100      	bne.n	4b3c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4b3a:	e7d4      	b.n	4ae6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    4b3c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b40:	2b1f      	cmp	r3, #31
    4b42:	d806      	bhi.n	4b52 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    4b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4b46:	1e5a      	subs	r2, r3, #1
    4b48:	653a      	str	r2, [r7, #80]	; 0x50
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d001      	beq.n	4b52 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    4b4e:	2301      	movs	r3, #1
    4b50:	e000      	b.n	4b54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    4b52:	2300      	movs	r3, #0
    4b54:	2b00      	cmp	r3, #0
    4b56:	d009      	beq.n	4b6c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    4b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b5a:	1c5a      	adds	r2, r3, #1
    4b5c:	663a      	str	r2, [r7, #96]	; 0x60
    4b5e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4b62:	4413      	add	r3, r2
    4b64:	2230      	movs	r2, #48	; 0x30
    4b66:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4b6a:	e7e8      	b.n	4b3e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b6e:	2b1f      	cmp	r3, #31
    4b70:	d808      	bhi.n	4b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    4b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b74:	1c5a      	adds	r2, r3, #1
    4b76:	663a      	str	r2, [r7, #96]	; 0x60
    4b78:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4b7c:	4413      	add	r3, r2
    4b7e:	222e      	movs	r2, #46	; 0x2e
    4b80:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b86:	2b1f      	cmp	r3, #31
    4b88:	d829      	bhi.n	4bde <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    4b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4b8c:	4b26      	ldr	r3, [pc, #152]	; (4c28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    4b8e:	fb83 1302 	smull	r1, r3, r3, r2
    4b92:	1099      	asrs	r1, r3, #2
    4b94:	17d3      	asrs	r3, r2, #31
    4b96:	1ac9      	subs	r1, r1, r3
    4b98:	460b      	mov	r3, r1
    4b9a:	009b      	lsls	r3, r3, #2
    4b9c:	440b      	add	r3, r1
    4b9e:	005b      	lsls	r3, r3, #1
    4ba0:	1ad1      	subs	r1, r2, r3
    4ba2:	b2cb      	uxtb	r3, r1
    4ba4:	3330      	adds	r3, #48	; 0x30
    4ba6:	b2d9      	uxtb	r1, r3
    4ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4baa:	1c5a      	adds	r2, r3, #1
    4bac:	663a      	str	r2, [r7, #96]	; 0x60
    4bae:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4bb2:	4413      	add	r3, r2
    4bb4:	460a      	mov	r2, r1
    4bb6:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    4bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4bbc:	4a1a      	ldr	r2, [pc, #104]	; (4c28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    4bbe:	fb82 1203 	smull	r1, r2, r2, r3
    4bc2:	1092      	asrs	r2, r2, #2
    4bc4:	17db      	asrs	r3, r3, #31
    4bc6:	1ad3      	subs	r3, r2, r3
    4bc8:	65bb      	str	r3, [r7, #88]	; 0x58
    4bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4bcc:	2b00      	cmp	r3, #0
    4bce:	bf0c      	ite	eq
    4bd0:	2301      	moveq	r3, #1
    4bd2:	2300      	movne	r3, #0
    4bd4:	b2db      	uxtb	r3, r3
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d100      	bne.n	4bdc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4bda:	e7d3      	b.n	4b84 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    4bdc:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4be2:	f003 0302 	and.w	r3, r3, #2
    4be6:	2b00      	cmp	r3, #0
    4be8:	d120      	bne.n	4c2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4bee:	f003 0301 	and.w	r3, r3, #1
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d01a      	beq.n	4c2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4bf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4bf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4bfa:	429a      	cmp	r2, r3
    4bfc:	d216      	bcs.n	4c2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c00:	2b1f      	cmp	r3, #31
    4c02:	d813      	bhi.n	4c2c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    4c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c06:	1c5a      	adds	r2, r3, #1
    4c08:	663a      	str	r2, [r7, #96]	; 0x60
    4c0a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4c0e:	4413      	add	r3, r2
    4c10:	2230      	movs	r2, #48	; 0x30
    4c12:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4c16:	e7e2      	b.n	4bde <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    4c18:	00000000 	.word	0x00000000
    4c1c:	00008b28 	.word	0x00008b28
    4c20:	4f000000 	.word	0x4f000000
    4c24:	cccccccd 	.word	0xcccccccd
    4c28:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    4c2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4c30:	429a      	cmp	r2, r3
    4c32:	d112      	bne.n	4c5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    4c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    4c38:	2b00      	cmp	r3, #0
    4c3a:	d10b      	bne.n	4c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    4c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4c40:	f003 0304 	and.w	r3, r3, #4
    4c44:	2b00      	cmp	r3, #0
    4c46:	d105      	bne.n	4c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    4c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4c4c:	f003 0308 	and.w	r3, r3, #8
    4c50:	2b00      	cmp	r3, #0
    4c52:	d002      	beq.n	4c5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    4c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c56:	3b01      	subs	r3, #1
    4c58:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c5c:	2b1f      	cmp	r3, #31
    4c5e:	d82c      	bhi.n	4cba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    4c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    4c64:	2b00      	cmp	r3, #0
    4c66:	d009      	beq.n	4c7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    4c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c6a:	1c5a      	adds	r2, r3, #1
    4c6c:	663a      	str	r2, [r7, #96]	; 0x60
    4c6e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4c72:	4413      	add	r3, r2
    4c74:	222d      	movs	r2, #45	; 0x2d
    4c76:	f803 2c50 	strb.w	r2, [r3, #-80]
    4c7a:	e01e      	b.n	4cba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    4c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4c80:	f003 0304 	and.w	r3, r3, #4
    4c84:	2b00      	cmp	r3, #0
    4c86:	d009      	beq.n	4c9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    4c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4c8a:	1c5a      	adds	r2, r3, #1
    4c8c:	663a      	str	r2, [r7, #96]	; 0x60
    4c8e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4c92:	4413      	add	r3, r2
    4c94:	222b      	movs	r2, #43	; 0x2b
    4c96:	f803 2c50 	strb.w	r2, [r3, #-80]
    4c9a:	e00e      	b.n	4cba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    4c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4ca0:	f003 0308 	and.w	r3, r3, #8
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d008      	beq.n	4cba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    4ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4caa:	1c5a      	adds	r2, r3, #1
    4cac:	663a      	str	r2, [r7, #96]	; 0x60
    4cae:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4cb2:	4413      	add	r3, r2
    4cb4:	2220      	movs	r2, #32
    4cb6:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4cbe:	f003 0302 	and.w	r3, r3, #2
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d117      	bne.n	4cf6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    4cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4cca:	f003 0301 	and.w	r3, r3, #1
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d111      	bne.n	4cf6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    4cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    4cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4cd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4cda:	429a      	cmp	r2, r3
    4cdc:	d20b      	bcs.n	4cf6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    4cde:	68fa      	ldr	r2, [r7, #12]
    4ce0:	1c53      	adds	r3, r2, #1
    4ce2:	60fb      	str	r3, [r7, #12]
    4ce4:	697c      	ldr	r4, [r7, #20]
    4ce6:	68bb      	ldr	r3, [r7, #8]
    4ce8:	6939      	ldr	r1, [r7, #16]
    4cea:	2020      	movs	r0, #32
    4cec:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4cf0:	3301      	adds	r3, #1
    4cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    4cf4:	e7ef      	b.n	4cd6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    4cf6:	2300      	movs	r3, #0
    4cf8:	64bb      	str	r3, [r7, #72]	; 0x48
    4cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4cfe:	429a      	cmp	r2, r3
    4d00:	d213      	bcs.n	4d2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    4d02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4d06:	1ad3      	subs	r3, r2, r3
    4d08:	3b01      	subs	r3, #1
    4d0a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4d0e:	4413      	add	r3, r2
    4d10:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    4d14:	68fa      	ldr	r2, [r7, #12]
    4d16:	1c53      	adds	r3, r2, #1
    4d18:	60fb      	str	r3, [r7, #12]
    4d1a:	697c      	ldr	r4, [r7, #20]
    4d1c:	68bb      	ldr	r3, [r7, #8]
    4d1e:	6939      	ldr	r1, [r7, #16]
    4d20:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    4d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4d24:	3301      	adds	r3, #1
    4d26:	64bb      	str	r3, [r7, #72]	; 0x48
    4d28:	e7e7      	b.n	4cfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    4d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4d2e:	f003 0302 	and.w	r3, r3, #2
    4d32:	2b00      	cmp	r3, #0
    4d34:	d00e      	beq.n	4d54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    4d36:	68fa      	ldr	r2, [r7, #12]
    4d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4d3a:	1ad3      	subs	r3, r2, r3
    4d3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    4d3e:	429a      	cmp	r2, r3
    4d40:	d908      	bls.n	4d54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    4d42:	68fa      	ldr	r2, [r7, #12]
    4d44:	1c53      	adds	r3, r2, #1
    4d46:	60fb      	str	r3, [r7, #12]
    4d48:	697c      	ldr	r4, [r7, #20]
    4d4a:	68bb      	ldr	r3, [r7, #8]
    4d4c:	6939      	ldr	r1, [r7, #16]
    4d4e:	2020      	movs	r0, #32
    4d50:	47a0      	blx	r4
    while (idx - start_idx < width) {
    4d52:	e7f0      	b.n	4d36 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    4d54:	68fb      	ldr	r3, [r7, #12]
}
    4d56:	4618      	mov	r0, r3
    4d58:	376c      	adds	r7, #108	; 0x6c
    4d5a:	46bd      	mov	sp, r7
    4d5c:	bd90      	pop	{r4, r7, pc}
    4d5e:	bf00      	nop

00004d60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    4d60:	b5b0      	push	{r4, r5, r7, lr}
    4d62:	b0a0      	sub	sp, #128	; 0x80
    4d64:	af0a      	add	r7, sp, #40	; 0x28
    4d66:	60f8      	str	r0, [r7, #12]
    4d68:	60b9      	str	r1, [r7, #8]
    4d6a:	607a      	str	r2, [r7, #4]
    4d6c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    4d6e:	2300      	movs	r3, #0
    4d70:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    4d72:	68bb      	ldr	r3, [r7, #8]
    4d74:	2b00      	cmp	r3, #0
    4d76:	d101      	bne.n	4d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    4d78:	4ba2      	ldr	r3, [pc, #648]	; (5004 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    4d7a:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    4d7c:	683b      	ldr	r3, [r7, #0]
    4d7e:	781b      	ldrb	r3, [r3, #0]
    4d80:	2b00      	cmp	r3, #0
    4d82:	f000 8445 	beq.w	5610 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    4d86:	683b      	ldr	r3, [r7, #0]
    4d88:	781b      	ldrb	r3, [r3, #0]
    4d8a:	2b25      	cmp	r3, #37	; 0x25
    4d8c:	d00d      	beq.n	4daa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    4d8e:	683b      	ldr	r3, [r7, #0]
    4d90:	7818      	ldrb	r0, [r3, #0]
    4d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4d94:	1c53      	adds	r3, r2, #1
    4d96:	647b      	str	r3, [r7, #68]	; 0x44
    4d98:	68fc      	ldr	r4, [r7, #12]
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	68b9      	ldr	r1, [r7, #8]
    4d9e:	47a0      	blx	r4
      format++;
    4da0:	683b      	ldr	r3, [r7, #0]
    4da2:	3301      	adds	r3, #1
    4da4:	603b      	str	r3, [r7, #0]
      continue;
    4da6:	f000 bc31 	b.w	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    4daa:	683b      	ldr	r3, [r7, #0]
    4dac:	3301      	adds	r3, #1
    4dae:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    4db0:	2300      	movs	r3, #0
    4db2:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    4db4:	683b      	ldr	r3, [r7, #0]
    4db6:	781b      	ldrb	r3, [r3, #0]
    4db8:	3b20      	subs	r3, #32
    4dba:	2b10      	cmp	r3, #16
    4dbc:	d856      	bhi.n	4e6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    4dbe:	a201      	add	r2, pc, #4	; (adr r2, 4dc4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    4dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4dc4:	00004e45 	.word	0x00004e45
    4dc8:	00004e6d 	.word	0x00004e6d
    4dcc:	00004e6d 	.word	0x00004e6d
    4dd0:	00004e59 	.word	0x00004e59
    4dd4:	00004e6d 	.word	0x00004e6d
    4dd8:	00004e6d 	.word	0x00004e6d
    4ddc:	00004e6d 	.word	0x00004e6d
    4de0:	00004e6d 	.word	0x00004e6d
    4de4:	00004e6d 	.word	0x00004e6d
    4de8:	00004e6d 	.word	0x00004e6d
    4dec:	00004e6d 	.word	0x00004e6d
    4df0:	00004e31 	.word	0x00004e31
    4df4:	00004e6d 	.word	0x00004e6d
    4df8:	00004e1d 	.word	0x00004e1d
    4dfc:	00004e6d 	.word	0x00004e6d
    4e00:	00004e6d 	.word	0x00004e6d
    4e04:	00004e09 	.word	0x00004e09
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    4e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e0a:	f043 0301 	orr.w	r3, r3, #1
    4e0e:	657b      	str	r3, [r7, #84]	; 0x54
    4e10:	683b      	ldr	r3, [r7, #0]
    4e12:	3301      	adds	r3, #1
    4e14:	603b      	str	r3, [r7, #0]
    4e16:	2301      	movs	r3, #1
    4e18:	64bb      	str	r3, [r7, #72]	; 0x48
    4e1a:	e02a      	b.n	4e72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    4e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e1e:	f043 0302 	orr.w	r3, r3, #2
    4e22:	657b      	str	r3, [r7, #84]	; 0x54
    4e24:	683b      	ldr	r3, [r7, #0]
    4e26:	3301      	adds	r3, #1
    4e28:	603b      	str	r3, [r7, #0]
    4e2a:	2301      	movs	r3, #1
    4e2c:	64bb      	str	r3, [r7, #72]	; 0x48
    4e2e:	e020      	b.n	4e72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    4e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e32:	f043 0304 	orr.w	r3, r3, #4
    4e36:	657b      	str	r3, [r7, #84]	; 0x54
    4e38:	683b      	ldr	r3, [r7, #0]
    4e3a:	3301      	adds	r3, #1
    4e3c:	603b      	str	r3, [r7, #0]
    4e3e:	2301      	movs	r3, #1
    4e40:	64bb      	str	r3, [r7, #72]	; 0x48
    4e42:	e016      	b.n	4e72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    4e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e46:	f043 0308 	orr.w	r3, r3, #8
    4e4a:	657b      	str	r3, [r7, #84]	; 0x54
    4e4c:	683b      	ldr	r3, [r7, #0]
    4e4e:	3301      	adds	r3, #1
    4e50:	603b      	str	r3, [r7, #0]
    4e52:	2301      	movs	r3, #1
    4e54:	64bb      	str	r3, [r7, #72]	; 0x48
    4e56:	e00c      	b.n	4e72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    4e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e5a:	f043 0310 	orr.w	r3, r3, #16
    4e5e:	657b      	str	r3, [r7, #84]	; 0x54
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	3301      	adds	r3, #1
    4e64:	603b      	str	r3, [r7, #0]
    4e66:	2301      	movs	r3, #1
    4e68:	64bb      	str	r3, [r7, #72]	; 0x48
    4e6a:	e002      	b.n	4e72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    4e6c:	2300      	movs	r3, #0
    4e6e:	64bb      	str	r3, [r7, #72]	; 0x48
    4e70:	bf00      	nop
      }
    } while (n);
    4e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4e74:	2b00      	cmp	r3, #0
    4e76:	d000      	beq.n	4e7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    4e78:	e79c      	b.n	4db4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    4e7a:	2300      	movs	r3, #0
    4e7c:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	781b      	ldrb	r3, [r3, #0]
    4e82:	4618      	mov	r0, r3
    4e84:	f7ff fb18 	bl	44b8 <_is_digit(char)>
    4e88:	4603      	mov	r3, r0
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d005      	beq.n	4e9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    4e8e:	463b      	mov	r3, r7
    4e90:	4618      	mov	r0, r3
    4e92:	f7ff fb25 	bl	44e0 <_atoi(char const**)>
    4e96:	6538      	str	r0, [r7, #80]	; 0x50
    4e98:	e018      	b.n	4ecc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    4e9a:	683b      	ldr	r3, [r7, #0]
    4e9c:	781b      	ldrb	r3, [r3, #0]
    4e9e:	2b2a      	cmp	r3, #42	; 0x2a
    4ea0:	d114      	bne.n	4ecc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    4ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4ea4:	1d1a      	adds	r2, r3, #4
    4ea6:	66ba      	str	r2, [r7, #104]	; 0x68
    4ea8:	681b      	ldr	r3, [r3, #0]
    4eaa:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    4eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4eae:	2b00      	cmp	r3, #0
    4eb0:	da07      	bge.n	4ec2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    4eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4eb4:	f043 0302 	orr.w	r3, r3, #2
    4eb8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    4eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ebc:	425b      	negs	r3, r3
    4ebe:	653b      	str	r3, [r7, #80]	; 0x50
    4ec0:	e001      	b.n	4ec6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    4ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ec4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    4ec6:	683b      	ldr	r3, [r7, #0]
    4ec8:	3301      	adds	r3, #1
    4eca:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    4ecc:	2300      	movs	r3, #0
    4ece:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    4ed0:	683b      	ldr	r3, [r7, #0]
    4ed2:	781b      	ldrb	r3, [r3, #0]
    4ed4:	2b2e      	cmp	r3, #46	; 0x2e
    4ed6:	d124      	bne.n	4f22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    4ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4ede:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    4ee0:	683b      	ldr	r3, [r7, #0]
    4ee2:	3301      	adds	r3, #1
    4ee4:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    4ee6:	683b      	ldr	r3, [r7, #0]
    4ee8:	781b      	ldrb	r3, [r3, #0]
    4eea:	4618      	mov	r0, r3
    4eec:	f7ff fae4 	bl	44b8 <_is_digit(char)>
    4ef0:	4603      	mov	r3, r0
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d005      	beq.n	4f02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    4ef6:	463b      	mov	r3, r7
    4ef8:	4618      	mov	r0, r3
    4efa:	f7ff faf1 	bl	44e0 <_atoi(char const**)>
    4efe:	64f8      	str	r0, [r7, #76]	; 0x4c
    4f00:	e00f      	b.n	4f22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    4f02:	683b      	ldr	r3, [r7, #0]
    4f04:	781b      	ldrb	r3, [r3, #0]
    4f06:	2b2a      	cmp	r3, #42	; 0x2a
    4f08:	d10b      	bne.n	4f22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    4f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4f0c:	1d1a      	adds	r2, r3, #4
    4f0e:	66ba      	str	r2, [r7, #104]	; 0x68
    4f10:	681b      	ldr	r3, [r3, #0]
    4f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    4f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4f16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    4f1c:	683b      	ldr	r3, [r7, #0]
    4f1e:	3301      	adds	r3, #1
    4f20:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    4f22:	683b      	ldr	r3, [r7, #0]
    4f24:	781b      	ldrb	r3, [r3, #0]
    4f26:	3b68      	subs	r3, #104	; 0x68
    4f28:	2b12      	cmp	r3, #18
    4f2a:	d867      	bhi.n	4ffc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    4f2c:	a201      	add	r2, pc, #4	; (adr r2, 4f34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    4f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4f32:	bf00      	nop
    4f34:	00004fa7 	.word	0x00004fa7
    4f38:	00004ffd 	.word	0x00004ffd
    4f3c:	00004fdd 	.word	0x00004fdd
    4f40:	00004ffd 	.word	0x00004ffd
    4f44:	00004f81 	.word	0x00004f81
    4f48:	00004ffd 	.word	0x00004ffd
    4f4c:	00004ffd 	.word	0x00004ffd
    4f50:	00004ffd 	.word	0x00004ffd
    4f54:	00004ffd 	.word	0x00004ffd
    4f58:	00004ffd 	.word	0x00004ffd
    4f5c:	00004ffd 	.word	0x00004ffd
    4f60:	00004ffd 	.word	0x00004ffd
    4f64:	00004fcd 	.word	0x00004fcd
    4f68:	00004ffd 	.word	0x00004ffd
    4f6c:	00004ffd 	.word	0x00004ffd
    4f70:	00004ffd 	.word	0x00004ffd
    4f74:	00004ffd 	.word	0x00004ffd
    4f78:	00004ffd 	.word	0x00004ffd
    4f7c:	00004fed 	.word	0x00004fed
      case 'l' :
        flags |= FLAGS_LONG;
    4f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4f86:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4f88:	683b      	ldr	r3, [r7, #0]
    4f8a:	3301      	adds	r3, #1
    4f8c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    4f8e:	683b      	ldr	r3, [r7, #0]
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	2b6c      	cmp	r3, #108	; 0x6c
    4f94:	d134      	bne.n	5000 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    4f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4f9c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4f9e:	683b      	ldr	r3, [r7, #0]
    4fa0:	3301      	adds	r3, #1
    4fa2:	603b      	str	r3, [r7, #0]
        }
        break;
    4fa4:	e02c      	b.n	5000 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    4fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4fac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4fae:	683b      	ldr	r3, [r7, #0]
    4fb0:	3301      	adds	r3, #1
    4fb2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    4fb4:	683b      	ldr	r3, [r7, #0]
    4fb6:	781b      	ldrb	r3, [r3, #0]
    4fb8:	2b68      	cmp	r3, #104	; 0x68
    4fba:	d125      	bne.n	5008 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    4fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4fc2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4fc4:	683b      	ldr	r3, [r7, #0]
    4fc6:	3301      	adds	r3, #1
    4fc8:	603b      	str	r3, [r7, #0]
        }
        break;
    4fca:	e01d      	b.n	5008 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4fd2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4fd4:	683b      	ldr	r3, [r7, #0]
    4fd6:	3301      	adds	r3, #1
    4fd8:	603b      	str	r3, [r7, #0]
        break;
    4fda:	e016      	b.n	500a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4fe2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4fe4:	683b      	ldr	r3, [r7, #0]
    4fe6:	3301      	adds	r3, #1
    4fe8:	603b      	str	r3, [r7, #0]
        break;
    4fea:	e00e      	b.n	500a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4ff2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4ff4:	683b      	ldr	r3, [r7, #0]
    4ff6:	3301      	adds	r3, #1
    4ff8:	603b      	str	r3, [r7, #0]
        break;
    4ffa:	e006      	b.n	500a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    4ffc:	bf00      	nop
    4ffe:	e004      	b.n	500a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    5000:	bf00      	nop
    5002:	e002      	b.n	500a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    5004:	00004449 	.word	0x00004449
        break;
    5008:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    500a:	683b      	ldr	r3, [r7, #0]
    500c:	781b      	ldrb	r3, [r3, #0]
    500e:	3b25      	subs	r3, #37	; 0x25
    5010:	2b53      	cmp	r3, #83	; 0x53
    5012:	f200 82ee 	bhi.w	55f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    5016:	a201      	add	r2, pc, #4	; (adr r2, 501c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    5018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    501c:	000055db 	.word	0x000055db
    5020:	000055f3 	.word	0x000055f3
    5024:	000055f3 	.word	0x000055f3
    5028:	000055f3 	.word	0x000055f3
    502c:	000055f3 	.word	0x000055f3
    5030:	000055f3 	.word	0x000055f3
    5034:	000055f3 	.word	0x000055f3
    5038:	000055f3 	.word	0x000055f3
    503c:	000055f3 	.word	0x000055f3
    5040:	000055f3 	.word	0x000055f3
    5044:	000055f3 	.word	0x000055f3
    5048:	000055f3 	.word	0x000055f3
    504c:	000055f3 	.word	0x000055f3
    5050:	000055f3 	.word	0x000055f3
    5054:	000055f3 	.word	0x000055f3
    5058:	000055f3 	.word	0x000055f3
    505c:	000055f3 	.word	0x000055f3
    5060:	000055f3 	.word	0x000055f3
    5064:	000055f3 	.word	0x000055f3
    5068:	000055f3 	.word	0x000055f3
    506c:	000055f3 	.word	0x000055f3
    5070:	000055f3 	.word	0x000055f3
    5074:	000055f3 	.word	0x000055f3
    5078:	000055f3 	.word	0x000055f3
    507c:	000055f3 	.word	0x000055f3
    5080:	000055f3 	.word	0x000055f3
    5084:	000055f3 	.word	0x000055f3
    5088:	000055f3 	.word	0x000055f3
    508c:	000055f3 	.word	0x000055f3
    5090:	000055f3 	.word	0x000055f3
    5094:	000055f3 	.word	0x000055f3
    5098:	000055f3 	.word	0x000055f3
    509c:	000055f3 	.word	0x000055f3
    50a0:	000053f9 	.word	0x000053f9
    50a4:	000055f3 	.word	0x000055f3
    50a8:	000055f3 	.word	0x000055f3
    50ac:	000055f3 	.word	0x000055f3
    50b0:	000055f3 	.word	0x000055f3
    50b4:	000055f3 	.word	0x000055f3
    50b8:	000055f3 	.word	0x000055f3
    50bc:	000055f3 	.word	0x000055f3
    50c0:	000055f3 	.word	0x000055f3
    50c4:	000055f3 	.word	0x000055f3
    50c8:	000055f3 	.word	0x000055f3
    50cc:	000055f3 	.word	0x000055f3
    50d0:	000055f3 	.word	0x000055f3
    50d4:	000055f3 	.word	0x000055f3
    50d8:	000055f3 	.word	0x000055f3
    50dc:	000055f3 	.word	0x000055f3
    50e0:	000055f3 	.word	0x000055f3
    50e4:	000055f3 	.word	0x000055f3
    50e8:	0000516d 	.word	0x0000516d
    50ec:	000055f3 	.word	0x000055f3
    50f0:	000055f3 	.word	0x000055f3
    50f4:	000055f3 	.word	0x000055f3
    50f8:	000055f3 	.word	0x000055f3
    50fc:	000055f3 	.word	0x000055f3
    5100:	000055f3 	.word	0x000055f3
    5104:	000055f3 	.word	0x000055f3
    5108:	000055f3 	.word	0x000055f3
    510c:	000055f3 	.word	0x000055f3
    5110:	0000516d 	.word	0x0000516d
    5114:	00005435 	.word	0x00005435
    5118:	0000516d 	.word	0x0000516d
    511c:	000055f3 	.word	0x000055f3
    5120:	000053f9 	.word	0x000053f9
    5124:	000055f3 	.word	0x000055f3
    5128:	000055f3 	.word	0x000055f3
    512c:	0000516d 	.word	0x0000516d
    5130:	000055f3 	.word	0x000055f3
    5134:	000055f3 	.word	0x000055f3
    5138:	000055f3 	.word	0x000055f3
    513c:	000055f3 	.word	0x000055f3
    5140:	000055f3 	.word	0x000055f3
    5144:	0000516d 	.word	0x0000516d
    5148:	00005593 	.word	0x00005593
    514c:	000055f3 	.word	0x000055f3
    5150:	000055f3 	.word	0x000055f3
    5154:	000054bd 	.word	0x000054bd
    5158:	000055f3 	.word	0x000055f3
    515c:	0000516d 	.word	0x0000516d
    5160:	000055f3 	.word	0x000055f3
    5164:	000055f3 	.word	0x000055f3
    5168:	0000516d 	.word	0x0000516d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    516c:	683b      	ldr	r3, [r7, #0]
    516e:	781b      	ldrb	r3, [r3, #0]
    5170:	2b78      	cmp	r3, #120	; 0x78
    5172:	d003      	beq.n	517c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    5174:	683b      	ldr	r3, [r7, #0]
    5176:	781b      	ldrb	r3, [r3, #0]
    5178:	2b58      	cmp	r3, #88	; 0x58
    517a:	d102      	bne.n	5182 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    517c:	2310      	movs	r3, #16
    517e:	643b      	str	r3, [r7, #64]	; 0x40
    5180:	e013      	b.n	51aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    5182:	683b      	ldr	r3, [r7, #0]
    5184:	781b      	ldrb	r3, [r3, #0]
    5186:	2b6f      	cmp	r3, #111	; 0x6f
    5188:	d102      	bne.n	5190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    518a:	2308      	movs	r3, #8
    518c:	643b      	str	r3, [r7, #64]	; 0x40
    518e:	e00c      	b.n	51aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    5190:	683b      	ldr	r3, [r7, #0]
    5192:	781b      	ldrb	r3, [r3, #0]
    5194:	2b62      	cmp	r3, #98	; 0x62
    5196:	d102      	bne.n	519e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    5198:	2302      	movs	r3, #2
    519a:	643b      	str	r3, [r7, #64]	; 0x40
    519c:	e005      	b.n	51aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    519e:	230a      	movs	r3, #10
    51a0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    51a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51a4:	f023 0310 	bic.w	r3, r3, #16
    51a8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    51aa:	683b      	ldr	r3, [r7, #0]
    51ac:	781b      	ldrb	r3, [r3, #0]
    51ae:	2b58      	cmp	r3, #88	; 0x58
    51b0:	d103      	bne.n	51ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    51b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51b4:	f043 0320 	orr.w	r3, r3, #32
    51b8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	781b      	ldrb	r3, [r3, #0]
    51be:	2b69      	cmp	r3, #105	; 0x69
    51c0:	d007      	beq.n	51d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    51c2:	683b      	ldr	r3, [r7, #0]
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	2b64      	cmp	r3, #100	; 0x64
    51c8:	d003      	beq.n	51d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    51ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51cc:	f023 030c 	bic.w	r3, r3, #12
    51d0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    51d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    51d8:	2b00      	cmp	r3, #0
    51da:	d003      	beq.n	51e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    51dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51de:	f023 0301 	bic.w	r3, r3, #1
    51e2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    51e4:	683b      	ldr	r3, [r7, #0]
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	2b69      	cmp	r3, #105	; 0x69
    51ea:	d004      	beq.n	51f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    51ec:	683b      	ldr	r3, [r7, #0]
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	2b64      	cmp	r3, #100	; 0x64
    51f2:	f040 808d 	bne.w	5310 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    51f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    51fc:	2b00      	cmp	r3, #0
    51fe:	d02e      	beq.n	525e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    5200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5202:	3307      	adds	r3, #7
    5204:	f023 0307 	bic.w	r3, r3, #7
    5208:	f103 0208 	add.w	r2, r3, #8
    520c:	66ba      	str	r2, [r7, #104]	; 0x68
    520e:	e9d3 3400 	ldrd	r3, r4, [r3]
    5212:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5216:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    521a:	2b00      	cmp	r3, #0
    521c:	f174 0200 	sbcs.w	r2, r4, #0
    5220:	da02      	bge.n	5228 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    5222:	425b      	negs	r3, r3
    5224:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    5228:	4619      	mov	r1, r3
    522a:	4622      	mov	r2, r4
    522c:	697b      	ldr	r3, [r7, #20]
    522e:	0fdb      	lsrs	r3, r3, #31
    5230:	b2d8      	uxtb	r0, r3
    5232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5234:	f04f 0400 	mov.w	r4, #0
    5238:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    523a:	9508      	str	r5, [sp, #32]
    523c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    523e:	9507      	str	r5, [sp, #28]
    5240:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    5242:	9506      	str	r5, [sp, #24]
    5244:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5248:	9002      	str	r0, [sp, #8]
    524a:	e9cd 1200 	strd	r1, r2, [sp]
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5252:	68b9      	ldr	r1, [r7, #8]
    5254:	68f8      	ldr	r0, [r7, #12]
    5256:	f7ff faf0 	bl	483a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    525a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    525c:	e0c8      	b.n	53f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    525e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5260:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5264:	2b00      	cmp	r3, #0
    5266:	d01e      	beq.n	52a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    5268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    526a:	1d1a      	adds	r2, r3, #4
    526c:	66ba      	str	r2, [r7, #104]	; 0x68
    526e:	681b      	ldr	r3, [r3, #0]
    5270:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5272:	69fb      	ldr	r3, [r7, #28]
    5274:	2b00      	cmp	r3, #0
    5276:	bfb8      	it	lt
    5278:	425b      	neglt	r3, r3
    527a:	4619      	mov	r1, r3
    527c:	69fb      	ldr	r3, [r7, #28]
    527e:	0fdb      	lsrs	r3, r3, #31
    5280:	b2db      	uxtb	r3, r3
    5282:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5284:	9205      	str	r2, [sp, #20]
    5286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5288:	9204      	str	r2, [sp, #16]
    528a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    528c:	9203      	str	r2, [sp, #12]
    528e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5290:	9202      	str	r2, [sp, #8]
    5292:	9301      	str	r3, [sp, #4]
    5294:	9100      	str	r1, [sp, #0]
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    529a:	68b9      	ldr	r1, [r7, #8]
    529c:	68f8      	ldr	r0, [r7, #12]
    529e:	f7ff fa64 	bl	476a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    52a2:	6478      	str	r0, [r7, #68]	; 0x44
          }
    52a4:	e0a4      	b.n	53f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    52a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    52a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    52ac:	2b00      	cmp	r3, #0
    52ae:	d005      	beq.n	52bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    52b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    52b2:	1d1a      	adds	r2, r3, #4
    52b4:	66ba      	str	r2, [r7, #104]	; 0x68
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	b2db      	uxtb	r3, r3
    52ba:	e00e      	b.n	52da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    52bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    52be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    52c2:	2b00      	cmp	r3, #0
    52c4:	d005      	beq.n	52d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    52c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    52c8:	1d1a      	adds	r2, r3, #4
    52ca:	66ba      	str	r2, [r7, #104]	; 0x68
    52cc:	681b      	ldr	r3, [r3, #0]
    52ce:	b21b      	sxth	r3, r3
    52d0:	e003      	b.n	52da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    52d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    52d4:	1d1a      	adds	r2, r3, #4
    52d6:	66ba      	str	r2, [r7, #104]	; 0x68
    52d8:	681b      	ldr	r3, [r3, #0]
    52da:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    52dc:	6a3b      	ldr	r3, [r7, #32]
    52de:	2b00      	cmp	r3, #0
    52e0:	bfb8      	it	lt
    52e2:	425b      	neglt	r3, r3
    52e4:	4619      	mov	r1, r3
    52e6:	6a3b      	ldr	r3, [r7, #32]
    52e8:	0fdb      	lsrs	r3, r3, #31
    52ea:	b2db      	uxtb	r3, r3
    52ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    52ee:	9205      	str	r2, [sp, #20]
    52f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    52f2:	9204      	str	r2, [sp, #16]
    52f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    52f6:	9203      	str	r2, [sp, #12]
    52f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    52fa:	9202      	str	r2, [sp, #8]
    52fc:	9301      	str	r3, [sp, #4]
    52fe:	9100      	str	r1, [sp, #0]
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5304:	68b9      	ldr	r1, [r7, #8]
    5306:	68f8      	ldr	r0, [r7, #12]
    5308:	f7ff fa2f 	bl	476a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    530c:	6478      	str	r0, [r7, #68]	; 0x44
          }
    530e:	e06f      	b.n	53f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    5310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5312:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5316:	2b00      	cmp	r3, #0
    5318:	d020      	beq.n	535c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    531a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    531c:	3307      	adds	r3, #7
    531e:	f023 0307 	bic.w	r3, r3, #7
    5322:	f103 0208 	add.w	r2, r3, #8
    5326:	66ba      	str	r2, [r7, #104]	; 0x68
    5328:	e9d3 3400 	ldrd	r3, r4, [r3]
    532c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    532e:	4611      	mov	r1, r2
    5330:	f04f 0200 	mov.w	r2, #0
    5334:	6d78      	ldr	r0, [r7, #84]	; 0x54
    5336:	9008      	str	r0, [sp, #32]
    5338:	6d38      	ldr	r0, [r7, #80]	; 0x50
    533a:	9007      	str	r0, [sp, #28]
    533c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    533e:	9006      	str	r0, [sp, #24]
    5340:	e9cd 1204 	strd	r1, r2, [sp, #16]
    5344:	2200      	movs	r2, #0
    5346:	9202      	str	r2, [sp, #8]
    5348:	e9cd 3400 	strd	r3, r4, [sp]
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5350:	68b9      	ldr	r1, [r7, #8]
    5352:	68f8      	ldr	r0, [r7, #12]
    5354:	f7ff fa71 	bl	483a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    5358:	6478      	str	r0, [r7, #68]	; 0x44
    535a:	e049      	b.n	53f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    535c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5362:	2b00      	cmp	r3, #0
    5364:	d016      	beq.n	5394 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    5366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5368:	1d1a      	adds	r2, r3, #4
    536a:	66ba      	str	r2, [r7, #104]	; 0x68
    536c:	681b      	ldr	r3, [r3, #0]
    536e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5370:	9205      	str	r2, [sp, #20]
    5372:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5374:	9204      	str	r2, [sp, #16]
    5376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5378:	9203      	str	r2, [sp, #12]
    537a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    537c:	9202      	str	r2, [sp, #8]
    537e:	2200      	movs	r2, #0
    5380:	9201      	str	r2, [sp, #4]
    5382:	9300      	str	r3, [sp, #0]
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5388:	68b9      	ldr	r1, [r7, #8]
    538a:	68f8      	ldr	r0, [r7, #12]
    538c:	f7ff f9ed 	bl	476a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5390:	6478      	str	r0, [r7, #68]	; 0x44
    5392:	e02d      	b.n	53f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    5394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5396:	f003 0340 	and.w	r3, r3, #64	; 0x40
    539a:	2b00      	cmp	r3, #0
    539c:	d005      	beq.n	53aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    539e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    53a0:	1d1a      	adds	r2, r3, #4
    53a2:	66ba      	str	r2, [r7, #104]	; 0x68
    53a4:	681b      	ldr	r3, [r3, #0]
    53a6:	b2db      	uxtb	r3, r3
    53a8:	e00e      	b.n	53c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    53aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    53ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    53b0:	2b00      	cmp	r3, #0
    53b2:	d005      	beq.n	53c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    53b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    53b6:	1d1a      	adds	r2, r3, #4
    53b8:	66ba      	str	r2, [r7, #104]	; 0x68
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	b29b      	uxth	r3, r3
    53be:	e003      	b.n	53c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    53c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    53c2:	1d1a      	adds	r2, r3, #4
    53c4:	66ba      	str	r2, [r7, #104]	; 0x68
    53c6:	681b      	ldr	r3, [r3, #0]
    53c8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    53ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    53cc:	9305      	str	r3, [sp, #20]
    53ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    53d0:	9304      	str	r3, [sp, #16]
    53d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53d4:	9303      	str	r3, [sp, #12]
    53d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53d8:	9302      	str	r3, [sp, #8]
    53da:	2300      	movs	r3, #0
    53dc:	9301      	str	r3, [sp, #4]
    53de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    53e0:	9300      	str	r3, [sp, #0]
    53e2:	687b      	ldr	r3, [r7, #4]
    53e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    53e6:	68b9      	ldr	r1, [r7, #8]
    53e8:	68f8      	ldr	r0, [r7, #12]
    53ea:	f7ff f9be 	bl	476a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    53ee:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    53f0:	683b      	ldr	r3, [r7, #0]
    53f2:	3301      	adds	r3, #1
    53f4:	603b      	str	r3, [r7, #0]
        break;
    53f6:	e109      	b.n	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    53f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    53fa:	3307      	adds	r3, #7
    53fc:	f023 0307 	bic.w	r3, r3, #7
    5400:	f103 0208 	add.w	r2, r3, #8
    5404:	66ba      	str	r2, [r7, #104]	; 0x68
    5406:	ed93 7b00 	vldr	d7, [r3]
    540a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    540c:	9302      	str	r3, [sp, #8]
    540e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5410:	9301      	str	r3, [sp, #4]
    5412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5414:	9300      	str	r3, [sp, #0]
    5416:	eeb0 0a47 	vmov.f32	s0, s14
    541a:	eef0 0a67 	vmov.f32	s1, s15
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5422:	68b9      	ldr	r1, [r7, #8]
    5424:	68f8      	ldr	r0, [r7, #12]
    5426:	f7ff fa79 	bl	491c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    542a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    542c:	683b      	ldr	r3, [r7, #0]
    542e:	3301      	adds	r3, #1
    5430:	603b      	str	r3, [r7, #0]
        break;
    5432:	e0eb      	b.n	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    5434:	2301      	movs	r3, #1
    5436:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    5438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    543a:	f003 0302 	and.w	r3, r3, #2
    543e:	2b00      	cmp	r3, #0
    5440:	d113      	bne.n	546a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    5442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5444:	1c5a      	adds	r2, r3, #1
    5446:	63fa      	str	r2, [r7, #60]	; 0x3c
    5448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    544a:	429a      	cmp	r2, r3
    544c:	bf8c      	ite	hi
    544e:	2301      	movhi	r3, #1
    5450:	2300      	movls	r3, #0
    5452:	b2db      	uxtb	r3, r3
    5454:	2b00      	cmp	r3, #0
    5456:	d008      	beq.n	546a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    5458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    545a:	1c53      	adds	r3, r2, #1
    545c:	647b      	str	r3, [r7, #68]	; 0x44
    545e:	68fc      	ldr	r4, [r7, #12]
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	68b9      	ldr	r1, [r7, #8]
    5464:	2020      	movs	r0, #32
    5466:	47a0      	blx	r4
          while (l++ < width) {
    5468:	e7eb      	b.n	5442 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    546a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    546c:	1d1a      	adds	r2, r3, #4
    546e:	66ba      	str	r2, [r7, #104]	; 0x68
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	b2d8      	uxtb	r0, r3
    5474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5476:	1c53      	adds	r3, r2, #1
    5478:	647b      	str	r3, [r7, #68]	; 0x44
    547a:	68fc      	ldr	r4, [r7, #12]
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	68b9      	ldr	r1, [r7, #8]
    5480:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    5482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5484:	f003 0302 	and.w	r3, r3, #2
    5488:	2b00      	cmp	r3, #0
    548a:	d013      	beq.n	54b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    548e:	1c5a      	adds	r2, r3, #1
    5490:	63fa      	str	r2, [r7, #60]	; 0x3c
    5492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5494:	429a      	cmp	r2, r3
    5496:	bf8c      	ite	hi
    5498:	2301      	movhi	r3, #1
    549a:	2300      	movls	r3, #0
    549c:	b2db      	uxtb	r3, r3
    549e:	2b00      	cmp	r3, #0
    54a0:	d008      	beq.n	54b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    54a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    54a4:	1c53      	adds	r3, r2, #1
    54a6:	647b      	str	r3, [r7, #68]	; 0x44
    54a8:	68fc      	ldr	r4, [r7, #12]
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	68b9      	ldr	r1, [r7, #8]
    54ae:	2020      	movs	r0, #32
    54b0:	47a0      	blx	r4
          while (l++ < width) {
    54b2:	e7eb      	b.n	548c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    54b4:	683b      	ldr	r3, [r7, #0]
    54b6:	3301      	adds	r3, #1
    54b8:	603b      	str	r3, [r7, #0]
        break;
    54ba:	e0a7      	b.n	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    54bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    54be:	1d1a      	adds	r2, r3, #4
    54c0:	66ba      	str	r2, [r7, #104]	; 0x68
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    54c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    54c8:	f7fe ffdf 	bl	448a <_strlen(char const*)>
    54cc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    54ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    54d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    54d4:	2b00      	cmp	r3, #0
    54d6:	d007      	beq.n	54e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    54d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    54da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    54dc:	429a      	cmp	r2, r3
    54de:	d201      	bcs.n	54e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    54e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54e2:	e000      	b.n	54e6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    54e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    54e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    54e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    54ea:	f003 0302 	and.w	r3, r3, #2
    54ee:	2b00      	cmp	r3, #0
    54f0:	d113      	bne.n	551a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    54f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54f4:	1c5a      	adds	r2, r3, #1
    54f6:	637a      	str	r2, [r7, #52]	; 0x34
    54f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    54fa:	429a      	cmp	r2, r3
    54fc:	bf8c      	ite	hi
    54fe:	2301      	movhi	r3, #1
    5500:	2300      	movls	r3, #0
    5502:	b2db      	uxtb	r3, r3
    5504:	2b00      	cmp	r3, #0
    5506:	d008      	beq.n	551a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    5508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    550a:	1c53      	adds	r3, r2, #1
    550c:	647b      	str	r3, [r7, #68]	; 0x44
    550e:	68fc      	ldr	r4, [r7, #12]
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	68b9      	ldr	r1, [r7, #8]
    5514:	2020      	movs	r0, #32
    5516:	47a0      	blx	r4
          while (l++ < width) {
    5518:	e7eb      	b.n	54f2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    551c:	781b      	ldrb	r3, [r3, #0]
    551e:	2b00      	cmp	r3, #0
    5520:	d00b      	beq.n	553a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    5522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5528:	2b00      	cmp	r3, #0
    552a:	d004      	beq.n	5536 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    552c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    552e:	1e5a      	subs	r2, r3, #1
    5530:	64fa      	str	r2, [r7, #76]	; 0x4c
    5532:	2b00      	cmp	r3, #0
    5534:	d001      	beq.n	553a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    5536:	2301      	movs	r3, #1
    5538:	e000      	b.n	553c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    553a:	2300      	movs	r3, #0
    553c:	2b00      	cmp	r3, #0
    553e:	d00b      	beq.n	5558 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    5540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5542:	1c5a      	adds	r2, r3, #1
    5544:	63ba      	str	r2, [r7, #56]	; 0x38
    5546:	7818      	ldrb	r0, [r3, #0]
    5548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    554a:	1c53      	adds	r3, r2, #1
    554c:	647b      	str	r3, [r7, #68]	; 0x44
    554e:	68fc      	ldr	r4, [r7, #12]
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	68b9      	ldr	r1, [r7, #8]
    5554:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    5556:	e7e0      	b.n	551a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    5558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    555a:	f003 0302 	and.w	r3, r3, #2
    555e:	2b00      	cmp	r3, #0
    5560:	d013      	beq.n	558a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    5562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5564:	1c5a      	adds	r2, r3, #1
    5566:	637a      	str	r2, [r7, #52]	; 0x34
    5568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    556a:	429a      	cmp	r2, r3
    556c:	bf8c      	ite	hi
    556e:	2301      	movhi	r3, #1
    5570:	2300      	movls	r3, #0
    5572:	b2db      	uxtb	r3, r3
    5574:	2b00      	cmp	r3, #0
    5576:	d008      	beq.n	558a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    5578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    557a:	1c53      	adds	r3, r2, #1
    557c:	647b      	str	r3, [r7, #68]	; 0x44
    557e:	68fc      	ldr	r4, [r7, #12]
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	68b9      	ldr	r1, [r7, #8]
    5584:	2020      	movs	r0, #32
    5586:	47a0      	blx	r4
          while (l++ < width) {
    5588:	e7eb      	b.n	5562 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    558a:	683b      	ldr	r3, [r7, #0]
    558c:	3301      	adds	r3, #1
    558e:	603b      	str	r3, [r7, #0]
        break;
    5590:	e03c      	b.n	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    5592:	2308      	movs	r3, #8
    5594:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    5596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5598:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    559c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    559e:	2300      	movs	r3, #0
    55a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    55a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    55a6:	1d1a      	adds	r2, r3, #4
    55a8:	66ba      	str	r2, [r7, #104]	; 0x68
    55aa:	681b      	ldr	r3, [r3, #0]
    55ac:	461a      	mov	r2, r3
    55ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    55b0:	9305      	str	r3, [sp, #20]
    55b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    55b4:	9304      	str	r3, [sp, #16]
    55b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    55b8:	9303      	str	r3, [sp, #12]
    55ba:	2310      	movs	r3, #16
    55bc:	9302      	str	r3, [sp, #8]
    55be:	2300      	movs	r3, #0
    55c0:	9301      	str	r3, [sp, #4]
    55c2:	9200      	str	r2, [sp, #0]
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    55c8:	68b9      	ldr	r1, [r7, #8]
    55ca:	68f8      	ldr	r0, [r7, #12]
    55cc:	f7ff f8cd 	bl	476a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    55d0:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    55d2:	683b      	ldr	r3, [r7, #0]
    55d4:	3301      	adds	r3, #1
    55d6:	603b      	str	r3, [r7, #0]
        break;
    55d8:	e018      	b.n	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    55da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    55dc:	1c53      	adds	r3, r2, #1
    55de:	647b      	str	r3, [r7, #68]	; 0x44
    55e0:	68fc      	ldr	r4, [r7, #12]
    55e2:	687b      	ldr	r3, [r7, #4]
    55e4:	68b9      	ldr	r1, [r7, #8]
    55e6:	2025      	movs	r0, #37	; 0x25
    55e8:	47a0      	blx	r4
        format++;
    55ea:	683b      	ldr	r3, [r7, #0]
    55ec:	3301      	adds	r3, #1
    55ee:	603b      	str	r3, [r7, #0]
        break;
    55f0:	e00c      	b.n	560c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    55f2:	683b      	ldr	r3, [r7, #0]
    55f4:	7818      	ldrb	r0, [r3, #0]
    55f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    55f8:	1c53      	adds	r3, r2, #1
    55fa:	647b      	str	r3, [r7, #68]	; 0x44
    55fc:	68fc      	ldr	r4, [r7, #12]
    55fe:	687b      	ldr	r3, [r7, #4]
    5600:	68b9      	ldr	r1, [r7, #8]
    5602:	47a0      	blx	r4
        format++;
    5604:	683b      	ldr	r3, [r7, #0]
    5606:	3301      	adds	r3, #1
    5608:	603b      	str	r3, [r7, #0]
        break;
    560a:	bf00      	nop
  while (*format)
    560c:	f7ff bbb6 	b.w	4d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    5610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	429a      	cmp	r2, r3
    5616:	d302      	bcc.n	561e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	1e5a      	subs	r2, r3, #1
    561c:	e000      	b.n	5620 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    561e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5620:	68fc      	ldr	r4, [r7, #12]
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	68b9      	ldr	r1, [r7, #8]
    5626:	2000      	movs	r0, #0
    5628:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    562c:	4618      	mov	r0, r3
    562e:	3758      	adds	r7, #88	; 0x58
    5630:	46bd      	mov	sp, r7
    5632:	bdb0      	pop	{r4, r5, r7, pc}

00005634 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    5634:	b40f      	push	{r0, r1, r2, r3}
    5636:	b580      	push	{r7, lr}
    5638:	b086      	sub	sp, #24
    563a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    563c:	f107 031c 	add.w	r3, r7, #28
    5640:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    5642:	1d39      	adds	r1, r7, #4
    5644:	68bb      	ldr	r3, [r7, #8]
    5646:	9300      	str	r3, [sp, #0]
    5648:	69bb      	ldr	r3, [r7, #24]
    564a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    564e:	4806      	ldr	r0, [pc, #24]	; (5668 <printf+0x34>)
    5650:	f7ff fb86 	bl	4d60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    5654:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    5656:	68fb      	ldr	r3, [r7, #12]
}
    5658:	4618      	mov	r0, r3
    565a:	3710      	adds	r7, #16
    565c:	46bd      	mov	sp, r7
    565e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    5662:	b004      	add	sp, #16
    5664:	4770      	bx	lr
    5666:	bf00      	nop
    5668:	00004465 	.word	0x00004465

0000566c <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    566c:	b480      	push	{r7}
    566e:	b083      	sub	sp, #12
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    5674:	4b0c      	ldr	r3, [pc, #48]	; (56a8 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    5676:	681b      	ldr	r3, [r3, #0]
    5678:	68da      	ldr	r2, [r3, #12]
    567a:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    5682:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    5684:	4b09      	ldr	r3, [pc, #36]	; (56ac <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    5686:	681b      	ldr	r3, [r3, #0]
    5688:	2200      	movs	r2, #0
    568a:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    568c:	4b07      	ldr	r3, [pc, #28]	; (56ac <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	681a      	ldr	r2, [r3, #0]
    5692:	4b06      	ldr	r3, [pc, #24]	; (56ac <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	f042 0201 	orr.w	r2, r2, #1
    569a:	601a      	str	r2, [r3, #0]
  }
    569c:	bf00      	nop
    569e:	370c      	adds	r7, #12
    56a0:	46bd      	mov	sp, r7
    56a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a6:	4770      	bx	lr
    56a8:	10000060 	.word	0x10000060
    56ac:	1000005c 	.word	0x1000005c

000056b0 <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    56b0:	b480      	push	{r7}
    56b2:	b083      	sub	sp, #12
    56b4:	af00      	add	r7, sp, #0
    56b6:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    56b8:	4b04      	ldr	r3, [pc, #16]	; (56cc <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	685b      	ldr	r3, [r3, #4]
  }
    56be:	4618      	mov	r0, r3
    56c0:	370c      	adds	r7, #12
    56c2:	46bd      	mov	sp, r7
    56c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c8:	4770      	bx	lr
    56ca:	bf00      	nop
    56cc:	1000005c 	.word	0x1000005c

000056d0 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    56d0:	b480      	push	{r7}
    56d2:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    56d4:	f8df 001c 	ldr.w	r0, [pc, #28]	; 56f4 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    56d8:	6801      	ldr	r1, [r0, #0]
    56da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    56de:	6001      	str	r1, [r0, #0]
    56e0:	f3bf 8f4f 	dsb	sy
    56e4:	f3bf 8f6f 	isb	sy
  }
}
    56e8:	bf00      	nop
    56ea:	46bd      	mov	sp, r7
    56ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    56f0:	4770      	bx	lr
    56f2:	0000      	.short	0x0000
    56f4:	e000ed88 	.word	0xe000ed88

000056f8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    56f8:	b580      	push	{r7, lr}
    56fa:	b086      	sub	sp, #24
    56fc:	af00      	add	r7, sp, #0
    56fe:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5700:	6878      	ldr	r0, [r7, #4]
    5702:	f000 f807 	bl	5714 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    5706:	eef0 7a40 	vmov.f32	s15, s0
	}
    570a:	eeb0 0a67 	vmov.f32	s0, s15
    570e:	3718      	adds	r7, #24
    5710:	46bd      	mov	sp, r7
    5712:	bd80      	pop	{r7, pc}

00005714 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    5714:	b480      	push	{r7}
    5716:	b085      	sub	sp, #20
    5718:	af00      	add	r7, sp, #0
    571a:	60f8      	str	r0, [r7, #12]
    571c:	7239      	strb	r1, [r7, #8]
    571e:	713a      	strb	r2, [r7, #4]
    5720:	703b      	strb	r3, [r7, #0]
			return value;
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	ee07 3a90 	vmov	s15, r3
		}
    572a:	eeb0 0a67 	vmov.f32	s0, s15
    572e:	3714      	adds	r7, #20
    5730:	46bd      	mov	sp, r7
    5732:	f85d 7b04 	ldr.w	r7, [sp], #4
    5736:	4770      	bx	lr

00005738 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    5738:	b580      	push	{r7, lr}
    573a:	ed2d 8b02 	vpush	{d8}
    573e:	b082      	sub	sp, #8
    5740:	af00      	add	r7, sp, #0
    5742:	6078      	str	r0, [r7, #4]
    5744:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	ed93 8a00 	vldr	s16, [r3]
    574c:	683b      	ldr	r3, [r7, #0]
    574e:	4618      	mov	r0, r3
    5750:	f7ff ffd2 	bl	56f8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5754:	eef0 7a40 	vmov.f32	s15, s0
    5758:	eeb4 8ae7 	vcmpe.f32	s16, s15
    575c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5760:	bf94      	ite	ls
    5762:	2301      	movls	r3, #1
    5764:	2300      	movhi	r3, #0
    5766:	b2db      	uxtb	r3, r3
		}
    5768:	4618      	mov	r0, r3
    576a:	3708      	adds	r7, #8
    576c:	46bd      	mov	sp, r7
    576e:	ecbd 8b02 	vpop	{d8}
    5772:	bd80      	pop	{r7, pc}

00005774 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    5774:	b480      	push	{r7}
    5776:	b083      	sub	sp, #12
    5778:	af00      	add	r7, sp, #0
    577a:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    577c:	4a04      	ldr	r2, [pc, #16]	; (5790 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    577e:	687b      	ldr	r3, [r7, #4]
    5780:	6013      	str	r3, [r2, #0]
}
    5782:	bf00      	nop
    5784:	370c      	adds	r7, #12
    5786:	46bd      	mov	sp, r7
    5788:	f85d 7b04 	ldr.w	r7, [sp], #4
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	10000000 	.word	0x10000000

00005794 <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    5794:	b580      	push	{r7, lr}
    5796:	b082      	sub	sp, #8
    5798:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    579a:	4b09      	ldr	r3, [pc, #36]	; (57c0 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	685b      	ldr	r3, [r3, #4]
    57a0:	b2db      	uxtb	r3, r3
    57a2:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    57a4:	4a07      	ldr	r2, [pc, #28]	; (57c4 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    57aa:	4a07      	ldr	r2, [pc, #28]	; (57c8 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    57ac:	687b      	ldr	r3, [r7, #4]
    57ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57b2:	603b      	str	r3, [r7, #0]
    isr();
    57b4:	683b      	ldr	r3, [r7, #0]
    57b6:	4798      	blx	r3
  }
    57b8:	bf00      	nop
    57ba:	3708      	adds	r7, #8
    57bc:	46bd      	mov	sp, r7
    57be:	bd80      	pop	{r7, pc}
    57c0:	10000064 	.word	0x10000064
    57c4:	10000004 	.word	0x10000004
    57c8:	10000104 	.word	0x10000104

000057cc <sjsu::SystemTimer::SystemTimer()>:
#include "utility/status.hpp"
#include "utility/units.hpp"

namespace sjsu
{
class SystemTimer
    57cc:	b480      	push	{r7}
    57ce:	b083      	sub	sp, #12
    57d0:	af00      	add	r7, sp, #0
    57d2:	6078      	str	r0, [r7, #4]
    57d4:	4a04      	ldr	r2, [pc, #16]	; (57e8 <sjsu::SystemTimer::SystemTimer()+0x1c>)
    57d6:	687b      	ldr	r3, [r7, #4]
    57d8:	601a      	str	r2, [r3, #0]
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	4618      	mov	r0, r3
    57de:	370c      	adds	r7, #12
    57e0:	46bd      	mov	sp, r7
    57e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e6:	4770      	bx	lr
    57e8:	00009128 	.word	0x00009128

000057ec <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>:
  /// milliseconds counter.
  inline static std::chrono::microseconds counter = 0us;
  inline static const sjsu::cortex::InterruptController
      kCortexInterruptController = sjsu::cortex::InterruptController();

  explicit SystemTimer(const sjsu::SystemController & system_controller,
    57ec:	b580      	push	{r7, lr}
    57ee:	b084      	sub	sp, #16
    57f0:	af00      	add	r7, sp, #0
    57f2:	60f8      	str	r0, [r7, #12]
    57f4:	60b9      	str	r1, [r7, #8]
    57f6:	607a      	str	r2, [r7, #4]
                       const sjsu::InterruptController & interrupt_controller =
                           kCortexInterruptController)
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
    57f8:	68fb      	ldr	r3, [r7, #12]
    57fa:	4618      	mov	r0, r3
    57fc:	f7ff ffe6 	bl	57cc <sjsu::SystemTimer::SystemTimer()>
    5800:	4a06      	ldr	r2, [pc, #24]	; (581c <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)+0x30>)
    5802:	68fb      	ldr	r3, [r7, #12]
    5804:	601a      	str	r2, [r3, #0]
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	68ba      	ldr	r2, [r7, #8]
    580a:	605a      	str	r2, [r3, #4]
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	687a      	ldr	r2, [r7, #4]
    5810:	609a      	str	r2, [r3, #8]
  {
  }
    5812:	68fb      	ldr	r3, [r7, #12]
    5814:	4618      	mov	r0, r3
    5816:	3710      	adds	r7, #16
    5818:	46bd      	mov	sp, r7
    581a:	bd80      	pop	{r7, pc}
    581c:	00009114 	.word	0x00009114

00005820 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    5820:	b580      	push	{r7, lr}
    5822:	b082      	sub	sp, #8
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    5828:	687b      	ldr	r3, [r7, #4]
    582a:	4618      	mov	r0, r3
    582c:	f000 f804 	bl	5838 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    5830:	6878      	ldr	r0, [r7, #4]
    5832:	3708      	adds	r7, #8
    5834:	46bd      	mov	sp, r7
    5836:	bd80      	pop	{r7, pc}

00005838 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    5838:	b580      	push	{r7, lr}
    583a:	b082      	sub	sp, #8
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    5840:	4903      	ldr	r1, [pc, #12]	; (5850 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    5842:	6878      	ldr	r0, [r7, #4]
    5844:	f7fc f830 	bl	18a8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    5848:	6878      	ldr	r0, [r7, #4]
    584a:	3708      	adds	r7, #8
    584c:	46bd      	mov	sp, r7
    584e:	bd80      	pop	{r7, pc}
    5850:	000090c8 	.word	0x000090c8

00005854 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
  {
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  static void SystemTimerHandler()
    5854:	b580      	push	{r7, lr}
    5856:	b084      	sub	sp, #16
    5858:	af00      	add	r7, sp, #0
  {
    counter += 1ms;
    585a:	f107 0308 	add.w	r3, r7, #8
    585e:	4618      	mov	r0, r3
    5860:	f7ff ffde 	bl	5820 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    5864:	f107 0208 	add.w	r2, r7, #8
    5868:	463b      	mov	r3, r7
    586a:	4611      	mov	r1, r2
    586c:	4618      	mov	r0, r3
    586e:	f7fd fce1 	bl	3234 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    5872:	463b      	mov	r3, r7
    5874:	4619      	mov	r1, r3
    5876:	4807      	ldr	r0, [pc, #28]	; (5894 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    5878:	f000 f99a 	bl	5bb0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
    587c:	4b06      	ldr	r3, [pc, #24]	; (5898 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    587e:	681b      	ldr	r3, [r3, #0]
    5880:	2b00      	cmp	r3, #0
    5882:	d002      	beq.n	588a <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    5884:	4b04      	ldr	r3, [pc, #16]	; (5898 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	4798      	blx	r3
    }
  }
    588a:	bf00      	nop
    588c:	3710      	adds	r7, #16
    588e:	46bd      	mov	sp, r7
    5890:	bd80      	pop	{r7, pc}
    5892:	bf00      	nop
    5894:	10000400 	.word	0x10000400
    5898:	100003f8 	.word	0x100003f8

0000589c <sjsu::cortex::SystemTimer::GetCount()>:
  static std::chrono::microseconds GetCount()
    589c:	b490      	push	{r4, r7}
    589e:	b082      	sub	sp, #8
    58a0:	af00      	add	r7, sp, #0
    58a2:	6078      	str	r0, [r7, #4]
  {
    return counter;
    58a4:	687a      	ldr	r2, [r7, #4]
    58a6:	4b05      	ldr	r3, [pc, #20]	; (58bc <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    58a8:	e9d3 3400 	ldrd	r3, r4, [r3]
    58ac:	e9c2 3400 	strd	r3, r4, [r2]
  }
    58b0:	6878      	ldr	r0, [r7, #4]
    58b2:	3708      	adds	r7, #8
    58b4:	46bd      	mov	sp, r7
    58b6:	bc90      	pop	{r4, r7}
    58b8:	4770      	bx	lr
    58ba:	bf00      	nop
    58bc:	10000400 	.word	0x10000400

000058c0 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    58c0:	b480      	push	{r7}
    58c2:	b083      	sub	sp, #12
    58c4:	af00      	add	r7, sp, #0
    58c6:	6078      	str	r0, [r7, #4]
    58c8:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    58ca:	4a04      	ldr	r2, [pc, #16]	; (58dc <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    58cc:	683b      	ldr	r3, [r7, #0]
    58ce:	6013      	str	r3, [r2, #0]
  }
    58d0:	bf00      	nop
    58d2:	370c      	adds	r7, #12
    58d4:	46bd      	mov	sp, r7
    58d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58da:	4770      	bx	lr
    58dc:	100003f8 	.word	0x100003f8

000058e0 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    58e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58e2:	b08b      	sub	sp, #44	; 0x2c
    58e4:	af02      	add	r7, sp, #8
    58e6:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    58e8:	2304      	movs	r3, #4
    58ea:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    58ec:	4b1f      	ldr	r3, [pc, #124]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    58ee:	681b      	ldr	r3, [r3, #0]
    58f0:	685b      	ldr	r3, [r3, #4]
    58f2:	2b00      	cmp	r3, #0
    58f4:	bf14      	ite	ne
    58f6:	2301      	movne	r3, #1
    58f8:	2300      	moveq	r3, #0
    58fa:	b2db      	uxtb	r3, r3
    58fc:	2b00      	cmp	r3, #0
    58fe:	d030      	beq.n	5962 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    5900:	4b1a      	ldr	r3, [pc, #104]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5902:	681b      	ldr	r3, [r3, #0]
    5904:	2200      	movs	r2, #0
    5906:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    5908:	4b18      	ldr	r3, [pc, #96]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	681a      	ldr	r2, [r3, #0]
    590e:	4b17      	ldr	r3, [pc, #92]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	f042 0202 	orr.w	r2, r2, #2
    5916:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    5918:	4b14      	ldr	r3, [pc, #80]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	681a      	ldr	r2, [r3, #0]
    591e:	4b13      	ldr	r3, [pc, #76]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	f042 0201 	orr.w	r2, r2, #1
    5926:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    5928:	4b10      	ldr	r3, [pc, #64]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	681a      	ldr	r2, [r3, #0]
    592e:	4b0f      	ldr	r3, [pc, #60]	; (596c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	f042 0204 	orr.w	r2, r2, #4
    5936:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	689e      	ldr	r6, [r3, #8]
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    5940:	681b      	ldr	r3, [r3, #0]
    5942:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    5944:	4b0a      	ldr	r3, [pc, #40]	; (5970 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    5946:	f107 040c 	add.w	r4, r7, #12
    594a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    594c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5950:	69bb      	ldr	r3, [r7, #24]
    5952:	9300      	str	r3, [sp, #0]
    5954:	f107 030c 	add.w	r3, r7, #12
    5958:	cb0e      	ldmia	r3, {r1, r2, r3}
    595a:	4630      	mov	r0, r6
    595c:	47a8      	blx	r5
      status = Status::kSuccess;
    595e:	2300      	movs	r3, #0
    5960:	61fb      	str	r3, [r7, #28]
    }

    return status;
    5962:	69fb      	ldr	r3, [r7, #28]
  }
    5964:	4618      	mov	r0, r3
    5966:	3724      	adds	r7, #36	; 0x24
    5968:	46bd      	mov	sp, r7
    596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    596c:	10000068 	.word	0x10000068
    5970:	00008cd8 	.word	0x00008cd8

00005974 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    5974:	b580      	push	{r7, lr}
    5976:	b084      	sub	sp, #16
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
    597c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    597e:	687b      	ldr	r3, [r7, #4]
    5980:	4618      	mov	r0, r3
    5982:	f7fb fdc2 	bl	150a <units::linear_scale<float>::operator()() const>
    5986:	eeb0 7a40 	vmov.f32	s14, s0
    598a:	683b      	ldr	r3, [r7, #0]
    598c:	ee07 3a90 	vmov	s15, r3
    5990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5994:	ee77 7a67 	vsub.f32	s15, s14, s15
    5998:	f107 030c 	add.w	r3, r7, #12
    599c:	eeb0 0a67 	vmov.f32	s0, s15
    59a0:	4618      	mov	r0, r3
    59a2:	f7fb fdfb 	bl	159c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    59a6:	68fb      	ldr	r3, [r7, #12]
	}
    59a8:	4618      	mov	r0, r3
    59aa:	3710      	adds	r7, #16
    59ac:	46bd      	mov	sp, r7
    59ae:	bd80      	pop	{r7, pc}

000059b0 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    59b0:	b580      	push	{r7, lr}
    59b2:	b082      	sub	sp, #8
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    59b8:	6878      	ldr	r0, [r7, #4]
    59ba:	f7fd fecb 	bl	3754 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    59be:	4603      	mov	r3, r0
	}
    59c0:	4618      	mov	r0, r3
    59c2:	3708      	adds	r7, #8
    59c4:	46bd      	mov	sp, r7
    59c6:	bd80      	pop	{r7, pc}

000059c8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    59c8:	b590      	push	{r4, r7, lr}
    59ca:	b089      	sub	sp, #36	; 0x24
    59cc:	af00      	add	r7, sp, #0
    59ce:	6078      	str	r0, [r7, #4]
    59d0:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    59d2:	f04f 0001 	mov.w	r0, #1
    59d6:	f04f 0100 	mov.w	r1, #0
    59da:	f7fa fd15 	bl	408 <units::literals::operator"" _Hz(unsigned long long)>
    59de:	4603      	mov	r3, r0
    59e0:	60fb      	str	r3, [r7, #12]
    59e2:	f107 020c 	add.w	r2, r7, #12
    59e6:	463b      	mov	r3, r7
    59e8:	4611      	mov	r1, r2
    59ea:	4618      	mov	r0, r3
    59ec:	f7ff fea4 	bl	5738 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    59f0:	4603      	mov	r3, r0
    59f2:	2b00      	cmp	r3, #0
    59f4:	d002      	beq.n	59fc <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    59f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59fa:	e041      	b.n	5a80 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	685a      	ldr	r2, [r3, #4]
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	685b      	ldr	r3, [r3, #4]
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	330c      	adds	r3, #12
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	4610      	mov	r0, r2
    5a0c:	4798      	blx	r3
    5a0e:	4603      	mov	r3, r0
    5a10:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    5a12:	463a      	mov	r2, r7
    5a14:	f107 0308 	add.w	r3, r7, #8
    5a18:	4611      	mov	r1, r2
    5a1a:	4618      	mov	r0, r3
    5a1c:	f7fc ff82 	bl	2924 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5a20:	4603      	mov	r3, r0
    5a22:	617b      	str	r3, [r7, #20]
    5a24:	f107 0314 	add.w	r3, r7, #20
    5a28:	2101      	movs	r1, #1
    5a2a:	4618      	mov	r0, r3
    5a2c:	f7ff ffa2 	bl	5974 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    5a30:	4603      	mov	r3, r0
    5a32:	613b      	str	r3, [r7, #16]
    5a34:	f107 0310 	add.w	r3, r7, #16
    5a38:	4618      	mov	r0, r3
    5a3a:	f7ff ffb9 	bl	59b0 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5a3e:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    5a40:	f107 0308 	add.w	r3, r7, #8
    5a44:	4618      	mov	r0, r3
    5a46:	f7fc fc49 	bl	22dc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5a4a:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    5a4c:	463b      	mov	r3, r7
    5a4e:	4618      	mov	r0, r3
    5a50:	f7fc fc44 	bl	22dc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5a54:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    5a56:	fbb4 f2f3 	udiv	r2, r4, r3
    5a5a:	fb03 f302 	mul.w	r3, r3, r2
    5a5e:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    5a60:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    5a62:	69fb      	ldr	r3, [r7, #28]
    5a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    5a68:	d305      	bcc.n	5a76 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    5a6a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5a6e:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    5a70:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5a74:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    5a76:	4b04      	ldr	r3, [pc, #16]	; (5a88 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    5a78:	681b      	ldr	r3, [r3, #0]
    5a7a:	69fa      	ldr	r2, [r7, #28]
    5a7c:	605a      	str	r2, [r3, #4]
    return remainder;
    5a7e:	69bb      	ldr	r3, [r7, #24]
  }
    5a80:	4618      	mov	r0, r3
    5a82:	3724      	adds	r7, #36	; 0x24
    5a84:	46bd      	mov	sp, r7
    5a86:	bd90      	pop	{r4, r7, pc}
    5a88:	10000068 	.word	0x10000068

00005a8c <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
    5a94:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    5a96:	683a      	ldr	r2, [r7, #0]
    5a98:	6879      	ldr	r1, [r7, #4]
    5a9a:	4804      	ldr	r0, [pc, #16]	; (5aac <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    5a9c:	f7fc fe02 	bl	26a4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    5aa0:	683b      	ldr	r3, [r7, #0]
}
    5aa2:	4618      	mov	r0, r3
    5aa4:	3708      	adds	r7, #8
    5aa6:	46bd      	mov	sp, r7
    5aa8:	bd80      	pop	{r7, pc}
    5aaa:	bf00      	nop
    5aac:	1000040c 	.word	0x1000040c

00005ab0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5ab0:	b590      	push	{r4, r7, lr}
    5ab2:	b087      	sub	sp, #28
    5ab4:	af02      	add	r7, sp, #8
    5ab6:	6078      	str	r0, [r7, #4]
    5ab8:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5aba:	f107 0308 	add.w	r3, r7, #8
    5abe:	4618      	mov	r0, r3
    5ac0:	f7fd fb3f 	bl	3142 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    5ac4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    5ac8:	e9cd 3400 	strd	r3, r4, [sp]
    5acc:	683a      	ldr	r2, [r7, #0]
    5ace:	6879      	ldr	r1, [r7, #4]
    5ad0:	4803      	ldr	r0, [pc, #12]	; (5ae0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    5ad2:	f7fc fe39 	bl	2748 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    5ad6:	683b      	ldr	r3, [r7, #0]
}
    5ad8:	4618      	mov	r0, r3
    5ada:	3714      	adds	r7, #20
    5adc:	46bd      	mov	sp, r7
    5ade:	bd90      	pop	{r4, r7, pc}
    5ae0:	1000040c 	.word	0x1000040c

00005ae4 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    5ae4:	b580      	push	{r7, lr}
    5ae6:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5ae8:	4802      	ldr	r0, [pc, #8]	; (5af4 <ThreadRuntimeCounter+0x10>)
    5aea:	f7ff fde1 	bl	56b0 <sjsu::cortex::DwtCounter::GetCount()>
    5aee:	4603      	mov	r3, r0
}
    5af0:	4618      	mov	r0, r3
    5af2:	bd80      	pop	{r7, pc}
    5af4:	10000408 	.word	0x10000408

00005af8 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5af8:	b580      	push	{r7, lr}
    5afa:	b082      	sub	sp, #8
    5afc:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5afe:	f7ff fde7 	bl	56d0 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    5b02:	4b1e      	ldr	r3, [pc, #120]	; (5b7c <sjsu::InitializePlatform()+0x84>)
    5b04:	6819      	ldr	r1, [r3, #0]
    5b06:	481e      	ldr	r0, [pc, #120]	; (5b80 <sjsu::InitializePlatform()+0x88>)
    5b08:	f7fb ff12 	bl	1930 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5b0c:	23ff      	movs	r3, #255	; 0xff
    5b0e:	703b      	strb	r3, [r7, #0]
    5b10:	463b      	mov	r3, r7
    5b12:	2201      	movs	r2, #1
    5b14:	4619      	mov	r1, r3
    5b16:	481a      	ldr	r0, [pc, #104]	; (5b80 <sjsu::InitializePlatform()+0x88>)
    5b18:	f7fb ff58 	bl	19cc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5b1c:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5b20:	4818      	ldr	r0, [pc, #96]	; (5b84 <sjsu::InitializePlatform()+0x8c>)
    5b22:	f7fc fd19 	bl	2558 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    5b26:	4818      	ldr	r0, [pc, #96]	; (5b88 <sjsu::InitializePlatform()+0x90>)
    5b28:	f000 f95e 	bl	5de8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5b2c:	4817      	ldr	r0, [pc, #92]	; (5b8c <sjsu::InitializePlatform()+0x94>)
    5b2e:	f000 f96b 	bl	5e08 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    5b32:	4b17      	ldr	r3, [pc, #92]	; (5b90 <sjsu::InitializePlatform()+0x98>)
    5b34:	6819      	ldr	r1, [r3, #0]
    5b36:	4817      	ldr	r0, [pc, #92]	; (5b94 <sjsu::InitializePlatform()+0x9c>)
    5b38:	f7ff ff46 	bl	59c8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    5b3c:	4815      	ldr	r0, [pc, #84]	; (5b94 <sjsu::InitializePlatform()+0x9c>)
    5b3e:	f7ff fecf 	bl	58e0 <sjsu::cortex::SystemTimer::StartTimer() const>
    5b42:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	2b00      	cmp	r3, #0
    5b48:	d00d      	beq.n	5b66 <sjsu::InitializePlatform()+0x6e>
    5b4a:	23d6      	movs	r3, #214	; 0xd6
    5b4c:	4a12      	ldr	r2, [pc, #72]	; (5b98 <sjsu::InitializePlatform()+0xa0>)
    5b4e:	4913      	ldr	r1, [pc, #76]	; (5b9c <sjsu::InitializePlatform()+0xa4>)
    5b50:	4813      	ldr	r0, [pc, #76]	; (5ba0 <sjsu::InitializePlatform()+0xa8>)
    5b52:	f7ff fd6f 	bl	5634 <printf>
    5b56:	4813      	ldr	r0, [pc, #76]	; (5ba4 <sjsu::InitializePlatform()+0xac>)
    5b58:	f7fe fc50 	bl	43fc <puts>
    5b5c:	2100      	movs	r1, #0
    5b5e:	2001      	movs	r0, #1
    5b60:	f7fa fdec 	bl	73c <sjsu::debug::PrintBacktrace(bool, void*)>
    5b64:	e7fe      	b.n	5b64 <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    5b66:	4810      	ldr	r0, [pc, #64]	; (5ba8 <sjsu::InitializePlatform()+0xb0>)
    5b68:	f7ff fd80 	bl	566c <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    5b6c:	480f      	ldr	r0, [pc, #60]	; (5bac <sjsu::InitializePlatform()+0xb4>)
    5b6e:	f7ff fe01 	bl	5774 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    5b72:	bf00      	nop
    5b74:	3708      	adds	r7, #8
    5b76:	46bd      	mov	sp, r7
    5b78:	bd80      	pop	{r7, pc}
    5b7a:	bf00      	nop
    5b7c:	000090d0 	.word	0x000090d0
    5b80:	1000006c 	.word	0x1000006c
    5b84:	1000040c 	.word	0x1000040c
    5b88:	00005a8d 	.word	0x00005a8d
    5b8c:	00005ab1 	.word	0x00005ab1
    5b90:	000090d4 	.word	0x000090d4
    5b94:	10000418 	.word	0x10000418
    5b98:	00009134 	.word	0x00009134
    5b9c:	00009100 	.word	0x00009100
    5ba0:	00008ff4 	.word	0x00008ff4
    5ba4:	00008d88 	.word	0x00008d88
    5ba8:	10000408 	.word	0x10000408
    5bac:	0000589d 	.word	0x0000589d

00005bb0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    5bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bb2:	b083      	sub	sp, #12
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	6078      	str	r0, [r7, #4]
    5bb8:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    5bba:	6838      	ldr	r0, [r7, #0]
    5bbc:	f7fb fd7c 	bl	16b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    5bc0:	460a      	mov	r2, r1
    5bc2:	4601      	mov	r1, r0
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	e9d3 5600 	ldrd	r5, r6, [r3]
    5bca:	186b      	adds	r3, r5, r1
    5bcc:	eb46 0402 	adc.w	r4, r6, r2
    5bd0:	687a      	ldr	r2, [r7, #4]
    5bd2:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    5bd6:	687b      	ldr	r3, [r7, #4]
	}
    5bd8:	4618      	mov	r0, r3
    5bda:	370c      	adds	r7, #12
    5bdc:	46bd      	mov	sp, r7
    5bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005be0 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    5be0:	b580      	push	{r7, lr}
    5be2:	b082      	sub	sp, #8
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
    5be8:	6039      	str	r1, [r7, #0]
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	2b01      	cmp	r3, #1
    5bee:	d15a      	bne.n	5ca6 <__static_initialization_and_destruction_0(int, int)+0xc6>
    5bf0:	683b      	ldr	r3, [r7, #0]
    5bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5bf6:	4293      	cmp	r3, r2
    5bf8:	d155      	bne.n	5ca6 <__static_initialization_and_destruction_0(int, int)+0xc6>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    5bfa:	4b2d      	ldr	r3, [pc, #180]	; (5cb0 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	f003 0301 	and.w	r3, r3, #1
    5c02:	2b00      	cmp	r3, #0
    5c04:	d106      	bne.n	5c14 <__static_initialization_and_destruction_0(int, int)+0x34>
    5c06:	4b2a      	ldr	r3, [pc, #168]	; (5cb0 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    5c08:	2201      	movs	r2, #1
    5c0a:	601a      	str	r2, [r3, #0]
    5c0c:	4b29      	ldr	r3, [pc, #164]	; (5cb4 <__static_initialization_and_destruction_0(int, int)+0xd4>)
    5c0e:	4618      	mov	r0, r3
    5c10:	f7fb f92e 	bl	e70 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    5c14:	4b28      	ldr	r3, [pc, #160]	; (5cb8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5c16:	681b      	ldr	r3, [r3, #0]
    5c18:	f003 0301 	and.w	r3, r3, #1
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	d105      	bne.n	5c2c <__static_initialization_and_destruction_0(int, int)+0x4c>
    5c20:	4b25      	ldr	r3, [pc, #148]	; (5cb8 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5c22:	2201      	movs	r2, #1
    5c24:	601a      	str	r2, [r3, #0]
    5c26:	4a25      	ldr	r2, [pc, #148]	; (5cbc <__static_initialization_and_destruction_0(int, int)+0xdc>)
    5c28:	4b25      	ldr	r3, [pc, #148]	; (5cc0 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    5c2a:	601a      	str	r2, [r3, #0]
  static constexpr bit::Mask kI2cHighSpeed = bit::CreateMaskFromRange(8);
    5c2c:	4b25      	ldr	r3, [pc, #148]	; (5cc4 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    5c2e:	681b      	ldr	r3, [r3, #0]
    5c30:	f003 0301 	and.w	r3, r3, #1
    5c34:	2b00      	cmp	r3, #0
    5c36:	d105      	bne.n	5c44 <__static_initialization_and_destruction_0(int, int)+0x64>
    5c38:	4b22      	ldr	r3, [pc, #136]	; (5cc4 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    5c3a:	2201      	movs	r2, #1
    5c3c:	601a      	str	r2, [r3, #0]
    5c3e:	4a22      	ldr	r2, [pc, #136]	; (5cc8 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    5c40:	4b22      	ldr	r3, [pc, #136]	; (5ccc <__static_initialization_and_destruction_0(int, int)+0xec>)
    5c42:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    5c44:	4b22      	ldr	r3, [pc, #136]	; (5cd0 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	f003 0301 	and.w	r3, r3, #1
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d105      	bne.n	5c5c <__static_initialization_and_destruction_0(int, int)+0x7c>
    5c50:	4b1f      	ldr	r3, [pc, #124]	; (5cd0 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    5c52:	2201      	movs	r2, #1
    5c54:	601a      	str	r2, [r3, #0]
    };
    5c56:	4a1f      	ldr	r2, [pc, #124]	; (5cd4 <__static_initialization_and_destruction_0(int, int)+0xf4>)
    5c58:	4b1f      	ldr	r3, [pc, #124]	; (5cd8 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    5c5a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    5c5c:	4b1f      	ldr	r3, [pc, #124]	; (5cdc <__static_initialization_and_destruction_0(int, int)+0xfc>)
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	f003 0301 	and.w	r3, r3, #1
    5c64:	2b00      	cmp	r3, #0
    5c66:	d105      	bne.n	5c74 <__static_initialization_and_destruction_0(int, int)+0x94>
    5c68:	4b1c      	ldr	r3, [pc, #112]	; (5cdc <__static_initialization_and_destruction_0(int, int)+0xfc>)
    5c6a:	2201      	movs	r2, #1
    5c6c:	601a      	str	r2, [r3, #0]
    };
    5c6e:	4a1c      	ldr	r2, [pc, #112]	; (5ce0 <__static_initialization_and_destruction_0(int, int)+0x100>)
    5c70:	4b1c      	ldr	r3, [pc, #112]	; (5ce4 <__static_initialization_and_destruction_0(int, int)+0x104>)
    5c72:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    5c74:	4b1c      	ldr	r3, [pc, #112]	; (5ce8 <__static_initialization_and_destruction_0(int, int)+0x108>)
    5c76:	681b      	ldr	r3, [r3, #0]
    5c78:	f003 0301 	and.w	r3, r3, #1
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d105      	bne.n	5c8c <__static_initialization_and_destruction_0(int, int)+0xac>
    5c80:	4b19      	ldr	r3, [pc, #100]	; (5ce8 <__static_initialization_and_destruction_0(int, int)+0x108>)
    5c82:	2201      	movs	r2, #1
    5c84:	601a      	str	r2, [r3, #0]
    };
    5c86:	4a19      	ldr	r2, [pc, #100]	; (5cec <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5c88:	4b19      	ldr	r3, [pc, #100]	; (5cf0 <__static_initialization_and_destruction_0(int, int)+0x110>)
    5c8a:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    5c8c:	f7fc f9f6 	bl	207c <sjsu::lpc40xx::DefaultSystemController()>
    5c90:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    5c92:	461a      	mov	r2, r3
    5c94:	4917      	ldr	r1, [pc, #92]	; (5cf4 <__static_initialization_and_destruction_0(int, int)+0x114>)
    5c96:	4818      	ldr	r0, [pc, #96]	; (5cf8 <__static_initialization_and_destruction_0(int, int)+0x118>)
    5c98:	f7fc fc44 	bl	2524 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
sjsu::cortex::SystemTimer system_timer(system_controller);
    5c9c:	4a17      	ldr	r2, [pc, #92]	; (5cfc <__static_initialization_and_destruction_0(int, int)+0x11c>)
    5c9e:	4918      	ldr	r1, [pc, #96]	; (5d00 <__static_initialization_and_destruction_0(int, int)+0x120>)
    5ca0:	4818      	ldr	r0, [pc, #96]	; (5d04 <__static_initialization_and_destruction_0(int, int)+0x124>)
    5ca2:	f7ff fda3 	bl	57ec <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>
}  // namespace sjsu
    5ca6:	bf00      	nop
    5ca8:	3708      	adds	r7, #8
    5caa:	46bd      	mov	sp, r7
    5cac:	bd80      	pop	{r7, pc}
    5cae:	bf00      	nop
    5cb0:	10000354 	.word	0x10000354
    5cb4:	10000104 	.word	0x10000104
    5cb8:	10000364 	.word	0x10000364
    5cbc:	400fc000 	.word	0x400fc000
    5cc0:	10000348 	.word	0x10000348
    5cc4:	10000350 	.word	0x10000350
    5cc8:	4002c000 	.word	0x4002c000
    5ccc:	10000100 	.word	0x10000100
    5cd0:	10000368 	.word	0x10000368
    5cd4:	40098000 	.word	0x40098000
    5cd8:	10000010 	.word	0x10000010
    5cdc:	1000036c 	.word	0x1000036c
    5ce0:	4009c000 	.word	0x4009c000
    5ce4:	10000024 	.word	0x10000024
    5ce8:	10000370 	.word	0x10000370
    5cec:	400a4000 	.word	0x400a4000
    5cf0:	10000038 	.word	0x10000038
    5cf4:	000090ec 	.word	0x000090ec
    5cf8:	1000040c 	.word	0x1000040c
    5cfc:	000090d8 	.word	0x000090d8
    5d00:	1000006c 	.word	0x1000006c
    5d04:	10000418 	.word	0x10000418

00005d08 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    5d08:	b580      	push	{r7, lr}
    5d0a:	af00      	add	r7, sp, #0
    5d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5d10:	2001      	movs	r0, #1
    5d12:	f7ff ff65 	bl	5be0 <__static_initialization_and_destruction_0(int, int)>
    5d16:	bd80      	pop	{r7, pc}
    5d18:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5d1c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00005d20 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5d20:	4b07      	ldr	r3, [pc, #28]	; (5d40 <pxCurrentTCBConst2>)
    5d22:	6819      	ldr	r1, [r3, #0]
    5d24:	6808      	ldr	r0, [r1, #0]
    5d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d2a:	f380 8809 	msr	PSP, r0
    5d2e:	f3bf 8f6f 	isb	sy
    5d32:	f04f 0000 	mov.w	r0, #0
    5d36:	f380 8811 	msr	BASEPRI, r0
    5d3a:	4770      	bx	lr
    5d3c:	f3af 8000 	nop.w

00005d40 <pxCurrentTCBConst2>:
    5d40:	1000037c 	.word	0x1000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    5d44:	bf00      	nop
    5d46:	bf00      	nop
    5d48:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5d4c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00005d50 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5d50:	f3ef 8009 	mrs	r0, PSP
    5d54:	f3bf 8f6f 	isb	sy
    5d58:	4b15      	ldr	r3, [pc, #84]	; (5db0 <pxCurrentTCBConst>)
    5d5a:	681a      	ldr	r2, [r3, #0]
    5d5c:	f01e 0f10 	tst.w	lr, #16
    5d60:	bf08      	it	eq
    5d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    5d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d6a:	6010      	str	r0, [r2, #0]
    5d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
    5d70:	f04f 0028 	mov.w	r0, #40	; 0x28
    5d74:	f380 8811 	msr	BASEPRI, r0
    5d78:	f3bf 8f4f 	dsb	sy
    5d7c:	f3bf 8f6f 	isb	sy
    5d80:	f7fe fabe 	bl	4300 <vTaskSwitchContext>
    5d84:	f04f 0000 	mov.w	r0, #0
    5d88:	f380 8811 	msr	BASEPRI, r0
    5d8c:	bc09      	pop	{r0, r3}
    5d8e:	6819      	ldr	r1, [r3, #0]
    5d90:	6808      	ldr	r0, [r1, #0]
    5d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d96:	f01e 0f10 	tst.w	lr, #16
    5d9a:	bf08      	it	eq
    5d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    5da0:	f380 8809 	msr	PSP, r0
    5da4:	f3bf 8f6f 	isb	sy
    5da8:	4770      	bx	lr
    5daa:	bf00      	nop
    5dac:	f3af 8000 	nop.w

00005db0 <pxCurrentTCBConst>:
    5db0:	1000037c 	.word	0x1000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    5db4:	bf00      	nop
    5db6:	bf00      	nop

00005db8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    5db8:	b480      	push	{r7}
    5dba:	b083      	sub	sp, #12
    5dbc:	af00      	add	r7, sp, #0
    5dbe:	6078      	str	r0, [r7, #4]
    5dc0:	6039      	str	r1, [r7, #0]
  return 1;
    5dc2:	2301      	movs	r3, #1
}
    5dc4:	4618      	mov	r0, r3
    5dc6:	370c      	adds	r7, #12
    5dc8:	46bd      	mov	sp, r7
    5dca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dce:	4770      	bx	lr

00005dd0 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    5dd0:	b480      	push	{r7}
    5dd2:	b083      	sub	sp, #12
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
    5dd8:	6039      	str	r1, [r7, #0]
  return 0;
    5dda:	2300      	movs	r3, #0
}
    5ddc:	4618      	mov	r0, r3
    5dde:	370c      	adds	r7, #12
    5de0:	46bd      	mov	sp, r7
    5de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5de6:	4770      	bx	lr

00005de8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    5de8:	b480      	push	{r7}
    5dea:	b083      	sub	sp, #12
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    5df0:	4a04      	ldr	r2, [pc, #16]	; (5e04 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	6013      	str	r3, [r2, #0]
}
    5df6:	bf00      	nop
    5df8:	370c      	adds	r7, #12
    5dfa:	46bd      	mov	sp, r7
    5dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e00:	4770      	bx	lr
    5e02:	bf00      	nop
    5e04:	10000054 	.word	0x10000054

00005e08 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    5e08:	b480      	push	{r7}
    5e0a:	b083      	sub	sp, #12
    5e0c:	af00      	add	r7, sp, #0
    5e0e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    5e10:	4a04      	ldr	r2, [pc, #16]	; (5e24 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	6013      	str	r3, [r2, #0]
}
    5e16:	bf00      	nop
    5e18:	370c      	adds	r7, #12
    5e1a:	46bd      	mov	sp, r7
    5e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e20:	4770      	bx	lr
    5e22:	bf00      	nop
    5e24:	10000058 	.word	0x10000058

00005e28 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    5e28:	b580      	push	{r7, lr}
    5e2a:	b082      	sub	sp, #8
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	4603      	mov	r3, r0
    5e30:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    5e32:	4b05      	ldr	r3, [pc, #20]	; (5e48 <_putchar+0x20>)
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	1dfa      	adds	r2, r7, #7
    5e38:	2101      	movs	r1, #1
    5e3a:	4610      	mov	r0, r2
    5e3c:	4798      	blx	r3
}
    5e3e:	bf00      	nop
    5e40:	3708      	adds	r7, #8
    5e42:	46bd      	mov	sp, r7
    5e44:	bd80      	pop	{r7, pc}
    5e46:	bf00      	nop
    5e48:	10000054 	.word	0x10000054

00005e4c <__cxa_pure_virtual>:
    5e4c:	b508      	push	{r3, lr}
    5e4e:	f000 f80d 	bl	5e6c <std::terminate()>

00005e52 <__cxxabiv1::__terminate(void (*)())>:
    5e52:	b508      	push	{r3, lr}
    5e54:	4780      	blx	r0
    5e56:	f001 fc2f 	bl	76b8 <abort>
    5e5a:	Address 0x0000000000005e5a is out of bounds.


00005e5c <std::get_terminate()>:
    5e5c:	4b02      	ldr	r3, [pc, #8]	; (5e68 <std::get_terminate()+0xc>)
    5e5e:	6818      	ldr	r0, [r3, #0]
    5e60:	f3bf 8f5b 	dmb	ish
    5e64:	4770      	bx	lr
    5e66:	bf00      	nop
    5e68:	10000070 	.word	0x10000070

00005e6c <std::terminate()>:
    5e6c:	b508      	push	{r3, lr}
    5e6e:	f7ff fff5 	bl	5e5c <std::get_terminate()>
    5e72:	f7ff ffee 	bl	5e52 <__cxxabiv1::__terminate(void (*)())>
    5e76:	Address 0x0000000000005e76 is out of bounds.


00005e78 <__aeabi_drsub>:
    5e78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    5e7c:	e002      	b.n	5e84 <__adddf3>
    5e7e:	bf00      	nop

00005e80 <__aeabi_dsub>:
    5e80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00005e84 <__adddf3>:
    5e84:	b530      	push	{r4, r5, lr}
    5e86:	ea4f 0441 	mov.w	r4, r1, lsl #1
    5e8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    5e8e:	ea94 0f05 	teq	r4, r5
    5e92:	bf08      	it	eq
    5e94:	ea90 0f02 	teqeq	r0, r2
    5e98:	bf1f      	itttt	ne
    5e9a:	ea54 0c00 	orrsne.w	ip, r4, r0
    5e9e:	ea55 0c02 	orrsne.w	ip, r5, r2
    5ea2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    5ea6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5eaa:	f000 80e2 	beq.w	6072 <__adddf3+0x1ee>
    5eae:	ea4f 5454 	mov.w	r4, r4, lsr #21
    5eb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    5eb6:	bfb8      	it	lt
    5eb8:	426d      	neglt	r5, r5
    5eba:	dd0c      	ble.n	5ed6 <__adddf3+0x52>
    5ebc:	442c      	add	r4, r5
    5ebe:	ea80 0202 	eor.w	r2, r0, r2
    5ec2:	ea81 0303 	eor.w	r3, r1, r3
    5ec6:	ea82 0000 	eor.w	r0, r2, r0
    5eca:	ea83 0101 	eor.w	r1, r3, r1
    5ece:	ea80 0202 	eor.w	r2, r0, r2
    5ed2:	ea81 0303 	eor.w	r3, r1, r3
    5ed6:	2d36      	cmp	r5, #54	; 0x36
    5ed8:	bf88      	it	hi
    5eda:	bd30      	pophi	{r4, r5, pc}
    5edc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5ee0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5ee4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    5ee8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    5eec:	d002      	beq.n	5ef4 <__adddf3+0x70>
    5eee:	4240      	negs	r0, r0
    5ef0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5ef4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    5ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5efc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    5f00:	d002      	beq.n	5f08 <__adddf3+0x84>
    5f02:	4252      	negs	r2, r2
    5f04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5f08:	ea94 0f05 	teq	r4, r5
    5f0c:	f000 80a7 	beq.w	605e <__adddf3+0x1da>
    5f10:	f1a4 0401 	sub.w	r4, r4, #1
    5f14:	f1d5 0e20 	rsbs	lr, r5, #32
    5f18:	db0d      	blt.n	5f36 <__adddf3+0xb2>
    5f1a:	fa02 fc0e 	lsl.w	ip, r2, lr
    5f1e:	fa22 f205 	lsr.w	r2, r2, r5
    5f22:	1880      	adds	r0, r0, r2
    5f24:	f141 0100 	adc.w	r1, r1, #0
    5f28:	fa03 f20e 	lsl.w	r2, r3, lr
    5f2c:	1880      	adds	r0, r0, r2
    5f2e:	fa43 f305 	asr.w	r3, r3, r5
    5f32:	4159      	adcs	r1, r3
    5f34:	e00e      	b.n	5f54 <__adddf3+0xd0>
    5f36:	f1a5 0520 	sub.w	r5, r5, #32
    5f3a:	f10e 0e20 	add.w	lr, lr, #32
    5f3e:	2a01      	cmp	r2, #1
    5f40:	fa03 fc0e 	lsl.w	ip, r3, lr
    5f44:	bf28      	it	cs
    5f46:	f04c 0c02 	orrcs.w	ip, ip, #2
    5f4a:	fa43 f305 	asr.w	r3, r3, r5
    5f4e:	18c0      	adds	r0, r0, r3
    5f50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    5f54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5f58:	d507      	bpl.n	5f6a <__adddf3+0xe6>
    5f5a:	f04f 0e00 	mov.w	lr, #0
    5f5e:	f1dc 0c00 	rsbs	ip, ip, #0
    5f62:	eb7e 0000 	sbcs.w	r0, lr, r0
    5f66:	eb6e 0101 	sbc.w	r1, lr, r1
    5f6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    5f6e:	d31b      	bcc.n	5fa8 <__adddf3+0x124>
    5f70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    5f74:	d30c      	bcc.n	5f90 <__adddf3+0x10c>
    5f76:	0849      	lsrs	r1, r1, #1
    5f78:	ea5f 0030 	movs.w	r0, r0, rrx
    5f7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    5f80:	f104 0401 	add.w	r4, r4, #1
    5f84:	ea4f 5244 	mov.w	r2, r4, lsl #21
    5f88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    5f8c:	f080 809a 	bcs.w	60c4 <__adddf3+0x240>
    5f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5f94:	bf08      	it	eq
    5f96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5f9a:	f150 0000 	adcs.w	r0, r0, #0
    5f9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5fa2:	ea41 0105 	orr.w	r1, r1, r5
    5fa6:	bd30      	pop	{r4, r5, pc}
    5fa8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    5fac:	4140      	adcs	r0, r0
    5fae:	eb41 0101 	adc.w	r1, r1, r1
    5fb2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5fb6:	f1a4 0401 	sub.w	r4, r4, #1
    5fba:	d1e9      	bne.n	5f90 <__adddf3+0x10c>
    5fbc:	f091 0f00 	teq	r1, #0
    5fc0:	bf04      	itt	eq
    5fc2:	4601      	moveq	r1, r0
    5fc4:	2000      	moveq	r0, #0
    5fc6:	fab1 f381 	clz	r3, r1
    5fca:	bf08      	it	eq
    5fcc:	3320      	addeq	r3, #32
    5fce:	f1a3 030b 	sub.w	r3, r3, #11
    5fd2:	f1b3 0220 	subs.w	r2, r3, #32
    5fd6:	da0c      	bge.n	5ff2 <__adddf3+0x16e>
    5fd8:	320c      	adds	r2, #12
    5fda:	dd08      	ble.n	5fee <__adddf3+0x16a>
    5fdc:	f102 0c14 	add.w	ip, r2, #20
    5fe0:	f1c2 020c 	rsb	r2, r2, #12
    5fe4:	fa01 f00c 	lsl.w	r0, r1, ip
    5fe8:	fa21 f102 	lsr.w	r1, r1, r2
    5fec:	e00c      	b.n	6008 <__adddf3+0x184>
    5fee:	f102 0214 	add.w	r2, r2, #20
    5ff2:	bfd8      	it	le
    5ff4:	f1c2 0c20 	rsble	ip, r2, #32
    5ff8:	fa01 f102 	lsl.w	r1, r1, r2
    5ffc:	fa20 fc0c 	lsr.w	ip, r0, ip
    6000:	bfdc      	itt	le
    6002:	ea41 010c 	orrle.w	r1, r1, ip
    6006:	4090      	lslle	r0, r2
    6008:	1ae4      	subs	r4, r4, r3
    600a:	bfa2      	ittt	ge
    600c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6010:	4329      	orrge	r1, r5
    6012:	bd30      	popge	{r4, r5, pc}
    6014:	ea6f 0404 	mvn.w	r4, r4
    6018:	3c1f      	subs	r4, #31
    601a:	da1c      	bge.n	6056 <__adddf3+0x1d2>
    601c:	340c      	adds	r4, #12
    601e:	dc0e      	bgt.n	603e <__adddf3+0x1ba>
    6020:	f104 0414 	add.w	r4, r4, #20
    6024:	f1c4 0220 	rsb	r2, r4, #32
    6028:	fa20 f004 	lsr.w	r0, r0, r4
    602c:	fa01 f302 	lsl.w	r3, r1, r2
    6030:	ea40 0003 	orr.w	r0, r0, r3
    6034:	fa21 f304 	lsr.w	r3, r1, r4
    6038:	ea45 0103 	orr.w	r1, r5, r3
    603c:	bd30      	pop	{r4, r5, pc}
    603e:	f1c4 040c 	rsb	r4, r4, #12
    6042:	f1c4 0220 	rsb	r2, r4, #32
    6046:	fa20 f002 	lsr.w	r0, r0, r2
    604a:	fa01 f304 	lsl.w	r3, r1, r4
    604e:	ea40 0003 	orr.w	r0, r0, r3
    6052:	4629      	mov	r1, r5
    6054:	bd30      	pop	{r4, r5, pc}
    6056:	fa21 f004 	lsr.w	r0, r1, r4
    605a:	4629      	mov	r1, r5
    605c:	bd30      	pop	{r4, r5, pc}
    605e:	f094 0f00 	teq	r4, #0
    6062:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    6066:	bf06      	itte	eq
    6068:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    606c:	3401      	addeq	r4, #1
    606e:	3d01      	subne	r5, #1
    6070:	e74e      	b.n	5f10 <__adddf3+0x8c>
    6072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6076:	bf18      	it	ne
    6078:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    607c:	d029      	beq.n	60d2 <__adddf3+0x24e>
    607e:	ea94 0f05 	teq	r4, r5
    6082:	bf08      	it	eq
    6084:	ea90 0f02 	teqeq	r0, r2
    6088:	d005      	beq.n	6096 <__adddf3+0x212>
    608a:	ea54 0c00 	orrs.w	ip, r4, r0
    608e:	bf04      	itt	eq
    6090:	4619      	moveq	r1, r3
    6092:	4610      	moveq	r0, r2
    6094:	bd30      	pop	{r4, r5, pc}
    6096:	ea91 0f03 	teq	r1, r3
    609a:	bf1e      	ittt	ne
    609c:	2100      	movne	r1, #0
    609e:	2000      	movne	r0, #0
    60a0:	bd30      	popne	{r4, r5, pc}
    60a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    60a6:	d105      	bne.n	60b4 <__adddf3+0x230>
    60a8:	0040      	lsls	r0, r0, #1
    60aa:	4149      	adcs	r1, r1
    60ac:	bf28      	it	cs
    60ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    60b2:	bd30      	pop	{r4, r5, pc}
    60b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    60b8:	bf3c      	itt	cc
    60ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    60be:	bd30      	popcc	{r4, r5, pc}
    60c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    60c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    60c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    60cc:	f04f 0000 	mov.w	r0, #0
    60d0:	bd30      	pop	{r4, r5, pc}
    60d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    60d6:	bf1a      	itte	ne
    60d8:	4619      	movne	r1, r3
    60da:	4610      	movne	r0, r2
    60dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    60e0:	bf1c      	itt	ne
    60e2:	460b      	movne	r3, r1
    60e4:	4602      	movne	r2, r0
    60e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    60ea:	bf06      	itte	eq
    60ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    60f0:	ea91 0f03 	teqeq	r1, r3
    60f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    60f8:	bd30      	pop	{r4, r5, pc}
    60fa:	bf00      	nop

000060fc <__aeabi_ui2d>:
    60fc:	f090 0f00 	teq	r0, #0
    6100:	bf04      	itt	eq
    6102:	2100      	moveq	r1, #0
    6104:	4770      	bxeq	lr
    6106:	b530      	push	{r4, r5, lr}
    6108:	f44f 6480 	mov.w	r4, #1024	; 0x400
    610c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6110:	f04f 0500 	mov.w	r5, #0
    6114:	f04f 0100 	mov.w	r1, #0
    6118:	e750      	b.n	5fbc <__adddf3+0x138>
    611a:	bf00      	nop

0000611c <__aeabi_i2d>:
    611c:	f090 0f00 	teq	r0, #0
    6120:	bf04      	itt	eq
    6122:	2100      	moveq	r1, #0
    6124:	4770      	bxeq	lr
    6126:	b530      	push	{r4, r5, lr}
    6128:	f44f 6480 	mov.w	r4, #1024	; 0x400
    612c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6130:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    6134:	bf48      	it	mi
    6136:	4240      	negmi	r0, r0
    6138:	f04f 0100 	mov.w	r1, #0
    613c:	e73e      	b.n	5fbc <__adddf3+0x138>
    613e:	bf00      	nop

00006140 <__aeabi_f2d>:
    6140:	0042      	lsls	r2, r0, #1
    6142:	ea4f 01e2 	mov.w	r1, r2, asr #3
    6146:	ea4f 0131 	mov.w	r1, r1, rrx
    614a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    614e:	bf1f      	itttt	ne
    6150:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    6154:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6158:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    615c:	4770      	bxne	lr
    615e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    6162:	bf08      	it	eq
    6164:	4770      	bxeq	lr
    6166:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    616a:	bf04      	itt	eq
    616c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    6170:	4770      	bxeq	lr
    6172:	b530      	push	{r4, r5, lr}
    6174:	f44f 7460 	mov.w	r4, #896	; 0x380
    6178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    617c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6180:	e71c      	b.n	5fbc <__adddf3+0x138>
    6182:	bf00      	nop

00006184 <__aeabi_ul2d>:
    6184:	ea50 0201 	orrs.w	r2, r0, r1
    6188:	bf08      	it	eq
    618a:	4770      	bxeq	lr
    618c:	b530      	push	{r4, r5, lr}
    618e:	f04f 0500 	mov.w	r5, #0
    6192:	e00a      	b.n	61aa <__aeabi_l2d+0x16>

00006194 <__aeabi_l2d>:
    6194:	ea50 0201 	orrs.w	r2, r0, r1
    6198:	bf08      	it	eq
    619a:	4770      	bxeq	lr
    619c:	b530      	push	{r4, r5, lr}
    619e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    61a2:	d502      	bpl.n	61aa <__aeabi_l2d+0x16>
    61a4:	4240      	negs	r0, r0
    61a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    61aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    61ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
    61b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    61b6:	f43f aed8 	beq.w	5f6a <__adddf3+0xe6>
    61ba:	f04f 0203 	mov.w	r2, #3
    61be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    61c2:	bf18      	it	ne
    61c4:	3203      	addne	r2, #3
    61c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    61ca:	bf18      	it	ne
    61cc:	3203      	addne	r2, #3
    61ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    61d2:	f1c2 0320 	rsb	r3, r2, #32
    61d6:	fa00 fc03 	lsl.w	ip, r0, r3
    61da:	fa20 f002 	lsr.w	r0, r0, r2
    61de:	fa01 fe03 	lsl.w	lr, r1, r3
    61e2:	ea40 000e 	orr.w	r0, r0, lr
    61e6:	fa21 f102 	lsr.w	r1, r1, r2
    61ea:	4414      	add	r4, r2
    61ec:	e6bd      	b.n	5f6a <__adddf3+0xe6>
    61ee:	bf00      	nop

000061f0 <__aeabi_d2f>:
    61f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    61f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    61f8:	bf24      	itt	cs
    61fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    61fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6202:	d90d      	bls.n	6220 <__aeabi_d2f+0x30>
    6204:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6208:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    620c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6210:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6214:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6218:	bf08      	it	eq
    621a:	f020 0001 	biceq.w	r0, r0, #1
    621e:	4770      	bx	lr
    6220:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6224:	d121      	bne.n	626a <__aeabi_d2f+0x7a>
    6226:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    622a:	bfbc      	itt	lt
    622c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6230:	4770      	bxlt	lr
    6232:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6236:	ea4f 5252 	mov.w	r2, r2, lsr #21
    623a:	f1c2 0218 	rsb	r2, r2, #24
    623e:	f1c2 0c20 	rsb	ip, r2, #32
    6242:	fa10 f30c 	lsls.w	r3, r0, ip
    6246:	fa20 f002 	lsr.w	r0, r0, r2
    624a:	bf18      	it	ne
    624c:	f040 0001 	orrne.w	r0, r0, #1
    6250:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6254:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6258:	fa03 fc0c 	lsl.w	ip, r3, ip
    625c:	ea40 000c 	orr.w	r0, r0, ip
    6260:	fa23 f302 	lsr.w	r3, r3, r2
    6264:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6268:	e7cc      	b.n	6204 <__aeabi_d2f+0x14>
    626a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    626e:	d107      	bne.n	6280 <__aeabi_d2f+0x90>
    6270:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6274:	bf1e      	ittt	ne
    6276:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    627a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    627e:	4770      	bxne	lr
    6280:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    6284:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6288:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    628c:	4770      	bx	lr
    628e:	bf00      	nop

00006290 <__aeabi_frsub>:
    6290:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6294:	e002      	b.n	629c <__addsf3>
    6296:	bf00      	nop

00006298 <__aeabi_fsub>:
    6298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000629c <__addsf3>:
    629c:	0042      	lsls	r2, r0, #1
    629e:	bf1f      	itttt	ne
    62a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    62a4:	ea92 0f03 	teqne	r2, r3
    62a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    62ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    62b0:	d06a      	beq.n	6388 <__addsf3+0xec>
    62b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    62b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    62ba:	bfc1      	itttt	gt
    62bc:	18d2      	addgt	r2, r2, r3
    62be:	4041      	eorgt	r1, r0
    62c0:	4048      	eorgt	r0, r1
    62c2:	4041      	eorgt	r1, r0
    62c4:	bfb8      	it	lt
    62c6:	425b      	neglt	r3, r3
    62c8:	2b19      	cmp	r3, #25
    62ca:	bf88      	it	hi
    62cc:	4770      	bxhi	lr
    62ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    62d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    62d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    62da:	bf18      	it	ne
    62dc:	4240      	negne	r0, r0
    62de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    62e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    62e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    62ea:	bf18      	it	ne
    62ec:	4249      	negne	r1, r1
    62ee:	ea92 0f03 	teq	r2, r3
    62f2:	d03f      	beq.n	6374 <__addsf3+0xd8>
    62f4:	f1a2 0201 	sub.w	r2, r2, #1
    62f8:	fa41 fc03 	asr.w	ip, r1, r3
    62fc:	eb10 000c 	adds.w	r0, r0, ip
    6300:	f1c3 0320 	rsb	r3, r3, #32
    6304:	fa01 f103 	lsl.w	r1, r1, r3
    6308:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    630c:	d502      	bpl.n	6314 <__addsf3+0x78>
    630e:	4249      	negs	r1, r1
    6310:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6314:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6318:	d313      	bcc.n	6342 <__addsf3+0xa6>
    631a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    631e:	d306      	bcc.n	632e <__addsf3+0x92>
    6320:	0840      	lsrs	r0, r0, #1
    6322:	ea4f 0131 	mov.w	r1, r1, rrx
    6326:	f102 0201 	add.w	r2, r2, #1
    632a:	2afe      	cmp	r2, #254	; 0xfe
    632c:	d251      	bcs.n	63d2 <__addsf3+0x136>
    632e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6336:	bf08      	it	eq
    6338:	f020 0001 	biceq.w	r0, r0, #1
    633c:	ea40 0003 	orr.w	r0, r0, r3
    6340:	4770      	bx	lr
    6342:	0049      	lsls	r1, r1, #1
    6344:	eb40 0000 	adc.w	r0, r0, r0
    6348:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    634c:	f1a2 0201 	sub.w	r2, r2, #1
    6350:	d1ed      	bne.n	632e <__addsf3+0x92>
    6352:	fab0 fc80 	clz	ip, r0
    6356:	f1ac 0c08 	sub.w	ip, ip, #8
    635a:	ebb2 020c 	subs.w	r2, r2, ip
    635e:	fa00 f00c 	lsl.w	r0, r0, ip
    6362:	bfaa      	itet	ge
    6364:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6368:	4252      	neglt	r2, r2
    636a:	4318      	orrge	r0, r3
    636c:	bfbc      	itt	lt
    636e:	40d0      	lsrlt	r0, r2
    6370:	4318      	orrlt	r0, r3
    6372:	4770      	bx	lr
    6374:	f092 0f00 	teq	r2, #0
    6378:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    637c:	bf06      	itte	eq
    637e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6382:	3201      	addeq	r2, #1
    6384:	3b01      	subne	r3, #1
    6386:	e7b5      	b.n	62f4 <__addsf3+0x58>
    6388:	ea4f 0341 	mov.w	r3, r1, lsl #1
    638c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6390:	bf18      	it	ne
    6392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6396:	d021      	beq.n	63dc <__addsf3+0x140>
    6398:	ea92 0f03 	teq	r2, r3
    639c:	d004      	beq.n	63a8 <__addsf3+0x10c>
    639e:	f092 0f00 	teq	r2, #0
    63a2:	bf08      	it	eq
    63a4:	4608      	moveq	r0, r1
    63a6:	4770      	bx	lr
    63a8:	ea90 0f01 	teq	r0, r1
    63ac:	bf1c      	itt	ne
    63ae:	2000      	movne	r0, #0
    63b0:	4770      	bxne	lr
    63b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    63b6:	d104      	bne.n	63c2 <__addsf3+0x126>
    63b8:	0040      	lsls	r0, r0, #1
    63ba:	bf28      	it	cs
    63bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    63c0:	4770      	bx	lr
    63c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    63c6:	bf3c      	itt	cc
    63c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    63cc:	4770      	bxcc	lr
    63ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    63d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    63d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    63da:	4770      	bx	lr
    63dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
    63e0:	bf16      	itet	ne
    63e2:	4608      	movne	r0, r1
    63e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    63e8:	4601      	movne	r1, r0
    63ea:	0242      	lsls	r2, r0, #9
    63ec:	bf06      	itte	eq
    63ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    63f2:	ea90 0f01 	teqeq	r0, r1
    63f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    63fa:	4770      	bx	lr

000063fc <__aeabi_ui2f>:
    63fc:	f04f 0300 	mov.w	r3, #0
    6400:	e004      	b.n	640c <__aeabi_i2f+0x8>
    6402:	bf00      	nop

00006404 <__aeabi_i2f>:
    6404:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6408:	bf48      	it	mi
    640a:	4240      	negmi	r0, r0
    640c:	ea5f 0c00 	movs.w	ip, r0
    6410:	bf08      	it	eq
    6412:	4770      	bxeq	lr
    6414:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6418:	4601      	mov	r1, r0
    641a:	f04f 0000 	mov.w	r0, #0
    641e:	e01c      	b.n	645a <__aeabi_l2f+0x2a>

00006420 <__aeabi_ul2f>:
    6420:	ea50 0201 	orrs.w	r2, r0, r1
    6424:	bf08      	it	eq
    6426:	4770      	bxeq	lr
    6428:	f04f 0300 	mov.w	r3, #0
    642c:	e00a      	b.n	6444 <__aeabi_l2f+0x14>
    642e:	bf00      	nop

00006430 <__aeabi_l2f>:
    6430:	ea50 0201 	orrs.w	r2, r0, r1
    6434:	bf08      	it	eq
    6436:	4770      	bxeq	lr
    6438:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    643c:	d502      	bpl.n	6444 <__aeabi_l2f+0x14>
    643e:	4240      	negs	r0, r0
    6440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6444:	ea5f 0c01 	movs.w	ip, r1
    6448:	bf02      	ittt	eq
    644a:	4684      	moveq	ip, r0
    644c:	4601      	moveq	r1, r0
    644e:	2000      	moveq	r0, #0
    6450:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6454:	bf08      	it	eq
    6456:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    645a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    645e:	fabc f28c 	clz	r2, ip
    6462:	3a08      	subs	r2, #8
    6464:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6468:	db10      	blt.n	648c <__aeabi_l2f+0x5c>
    646a:	fa01 fc02 	lsl.w	ip, r1, r2
    646e:	4463      	add	r3, ip
    6470:	fa00 fc02 	lsl.w	ip, r0, r2
    6474:	f1c2 0220 	rsb	r2, r2, #32
    6478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    647c:	fa20 f202 	lsr.w	r2, r0, r2
    6480:	eb43 0002 	adc.w	r0, r3, r2
    6484:	bf08      	it	eq
    6486:	f020 0001 	biceq.w	r0, r0, #1
    648a:	4770      	bx	lr
    648c:	f102 0220 	add.w	r2, r2, #32
    6490:	fa01 fc02 	lsl.w	ip, r1, r2
    6494:	f1c2 0220 	rsb	r2, r2, #32
    6498:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    649c:	fa21 f202 	lsr.w	r2, r1, r2
    64a0:	eb43 0002 	adc.w	r0, r3, r2
    64a4:	bf08      	it	eq
    64a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    64aa:	4770      	bx	lr

000064ac <__aeabi_uldivmod>:
    64ac:	b953      	cbnz	r3, 64c4 <__aeabi_uldivmod+0x18>
    64ae:	b94a      	cbnz	r2, 64c4 <__aeabi_uldivmod+0x18>
    64b0:	2900      	cmp	r1, #0
    64b2:	bf08      	it	eq
    64b4:	2800      	cmpeq	r0, #0
    64b6:	bf1c      	itt	ne
    64b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    64bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    64c0:	f001 b8f8 	b.w	76b4 <__aeabi_idiv0>
    64c4:	f1ad 0c08 	sub.w	ip, sp, #8
    64c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    64cc:	f000 f806 	bl	64dc <__udivmoddi4>
    64d0:	f8dd e004 	ldr.w	lr, [sp, #4]
    64d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    64d8:	b004      	add	sp, #16
    64da:	4770      	bx	lr

000064dc <__udivmoddi4>:
    64dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64e0:	9e08      	ldr	r6, [sp, #32]
    64e2:	4604      	mov	r4, r0
    64e4:	4688      	mov	r8, r1
    64e6:	2b00      	cmp	r3, #0
    64e8:	d14b      	bne.n	6582 <__udivmoddi4+0xa6>
    64ea:	428a      	cmp	r2, r1
    64ec:	4615      	mov	r5, r2
    64ee:	d967      	bls.n	65c0 <__udivmoddi4+0xe4>
    64f0:	fab2 f282 	clz	r2, r2
    64f4:	b14a      	cbz	r2, 650a <__udivmoddi4+0x2e>
    64f6:	f1c2 0720 	rsb	r7, r2, #32
    64fa:	fa01 f302 	lsl.w	r3, r1, r2
    64fe:	fa20 f707 	lsr.w	r7, r0, r7
    6502:	4095      	lsls	r5, r2
    6504:	ea47 0803 	orr.w	r8, r7, r3
    6508:	4094      	lsls	r4, r2
    650a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    650e:	0c23      	lsrs	r3, r4, #16
    6510:	fbb8 f7fe 	udiv	r7, r8, lr
    6514:	fa1f fc85 	uxth.w	ip, r5
    6518:	fb0e 8817 	mls	r8, lr, r7, r8
    651c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    6520:	fb07 f10c 	mul.w	r1, r7, ip
    6524:	4299      	cmp	r1, r3
    6526:	d909      	bls.n	653c <__udivmoddi4+0x60>
    6528:	18eb      	adds	r3, r5, r3
    652a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    652e:	f080 811b 	bcs.w	6768 <__udivmoddi4+0x28c>
    6532:	4299      	cmp	r1, r3
    6534:	f240 8118 	bls.w	6768 <__udivmoddi4+0x28c>
    6538:	3f02      	subs	r7, #2
    653a:	442b      	add	r3, r5
    653c:	1a5b      	subs	r3, r3, r1
    653e:	b2a4      	uxth	r4, r4
    6540:	fbb3 f0fe 	udiv	r0, r3, lr
    6544:	fb0e 3310 	mls	r3, lr, r0, r3
    6548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    654c:	fb00 fc0c 	mul.w	ip, r0, ip
    6550:	45a4      	cmp	ip, r4
    6552:	d909      	bls.n	6568 <__udivmoddi4+0x8c>
    6554:	192c      	adds	r4, r5, r4
    6556:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    655a:	f080 8107 	bcs.w	676c <__udivmoddi4+0x290>
    655e:	45a4      	cmp	ip, r4
    6560:	f240 8104 	bls.w	676c <__udivmoddi4+0x290>
    6564:	3802      	subs	r0, #2
    6566:	442c      	add	r4, r5
    6568:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    656c:	eba4 040c 	sub.w	r4, r4, ip
    6570:	2700      	movs	r7, #0
    6572:	b11e      	cbz	r6, 657c <__udivmoddi4+0xa0>
    6574:	40d4      	lsrs	r4, r2
    6576:	2300      	movs	r3, #0
    6578:	e9c6 4300 	strd	r4, r3, [r6]
    657c:	4639      	mov	r1, r7
    657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6582:	428b      	cmp	r3, r1
    6584:	d909      	bls.n	659a <__udivmoddi4+0xbe>
    6586:	2e00      	cmp	r6, #0
    6588:	f000 80eb 	beq.w	6762 <__udivmoddi4+0x286>
    658c:	2700      	movs	r7, #0
    658e:	e9c6 0100 	strd	r0, r1, [r6]
    6592:	4638      	mov	r0, r7
    6594:	4639      	mov	r1, r7
    6596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    659a:	fab3 f783 	clz	r7, r3
    659e:	2f00      	cmp	r7, #0
    65a0:	d147      	bne.n	6632 <__udivmoddi4+0x156>
    65a2:	428b      	cmp	r3, r1
    65a4:	d302      	bcc.n	65ac <__udivmoddi4+0xd0>
    65a6:	4282      	cmp	r2, r0
    65a8:	f200 80fa 	bhi.w	67a0 <__udivmoddi4+0x2c4>
    65ac:	1a84      	subs	r4, r0, r2
    65ae:	eb61 0303 	sbc.w	r3, r1, r3
    65b2:	2001      	movs	r0, #1
    65b4:	4698      	mov	r8, r3
    65b6:	2e00      	cmp	r6, #0
    65b8:	d0e0      	beq.n	657c <__udivmoddi4+0xa0>
    65ba:	e9c6 4800 	strd	r4, r8, [r6]
    65be:	e7dd      	b.n	657c <__udivmoddi4+0xa0>
    65c0:	b902      	cbnz	r2, 65c4 <__udivmoddi4+0xe8>
    65c2:	deff      	udf	#255	; 0xff
    65c4:	fab2 f282 	clz	r2, r2
    65c8:	2a00      	cmp	r2, #0
    65ca:	f040 808f 	bne.w	66ec <__udivmoddi4+0x210>
    65ce:	1b49      	subs	r1, r1, r5
    65d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    65d4:	fa1f f885 	uxth.w	r8, r5
    65d8:	2701      	movs	r7, #1
    65da:	fbb1 fcfe 	udiv	ip, r1, lr
    65de:	0c23      	lsrs	r3, r4, #16
    65e0:	fb0e 111c 	mls	r1, lr, ip, r1
    65e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    65e8:	fb08 f10c 	mul.w	r1, r8, ip
    65ec:	4299      	cmp	r1, r3
    65ee:	d907      	bls.n	6600 <__udivmoddi4+0x124>
    65f0:	18eb      	adds	r3, r5, r3
    65f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    65f6:	d202      	bcs.n	65fe <__udivmoddi4+0x122>
    65f8:	4299      	cmp	r1, r3
    65fa:	f200 80cd 	bhi.w	6798 <__udivmoddi4+0x2bc>
    65fe:	4684      	mov	ip, r0
    6600:	1a59      	subs	r1, r3, r1
    6602:	b2a3      	uxth	r3, r4
    6604:	fbb1 f0fe 	udiv	r0, r1, lr
    6608:	fb0e 1410 	mls	r4, lr, r0, r1
    660c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    6610:	fb08 f800 	mul.w	r8, r8, r0
    6614:	45a0      	cmp	r8, r4
    6616:	d907      	bls.n	6628 <__udivmoddi4+0x14c>
    6618:	192c      	adds	r4, r5, r4
    661a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    661e:	d202      	bcs.n	6626 <__udivmoddi4+0x14a>
    6620:	45a0      	cmp	r8, r4
    6622:	f200 80b6 	bhi.w	6792 <__udivmoddi4+0x2b6>
    6626:	4618      	mov	r0, r3
    6628:	eba4 0408 	sub.w	r4, r4, r8
    662c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6630:	e79f      	b.n	6572 <__udivmoddi4+0x96>
    6632:	f1c7 0c20 	rsb	ip, r7, #32
    6636:	40bb      	lsls	r3, r7
    6638:	fa22 fe0c 	lsr.w	lr, r2, ip
    663c:	ea4e 0e03 	orr.w	lr, lr, r3
    6640:	fa01 f407 	lsl.w	r4, r1, r7
    6644:	fa20 f50c 	lsr.w	r5, r0, ip
    6648:	fa21 f30c 	lsr.w	r3, r1, ip
    664c:	ea4f 481e 	mov.w	r8, lr, lsr #16
    6650:	4325      	orrs	r5, r4
    6652:	fbb3 f9f8 	udiv	r9, r3, r8
    6656:	0c2c      	lsrs	r4, r5, #16
    6658:	fb08 3319 	mls	r3, r8, r9, r3
    665c:	fa1f fa8e 	uxth.w	sl, lr
    6660:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    6664:	fb09 f40a 	mul.w	r4, r9, sl
    6668:	429c      	cmp	r4, r3
    666a:	fa02 f207 	lsl.w	r2, r2, r7
    666e:	fa00 f107 	lsl.w	r1, r0, r7
    6672:	d90b      	bls.n	668c <__udivmoddi4+0x1b0>
    6674:	eb1e 0303 	adds.w	r3, lr, r3
    6678:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    667c:	f080 8087 	bcs.w	678e <__udivmoddi4+0x2b2>
    6680:	429c      	cmp	r4, r3
    6682:	f240 8084 	bls.w	678e <__udivmoddi4+0x2b2>
    6686:	f1a9 0902 	sub.w	r9, r9, #2
    668a:	4473      	add	r3, lr
    668c:	1b1b      	subs	r3, r3, r4
    668e:	b2ad      	uxth	r5, r5
    6690:	fbb3 f0f8 	udiv	r0, r3, r8
    6694:	fb08 3310 	mls	r3, r8, r0, r3
    6698:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    669c:	fb00 fa0a 	mul.w	sl, r0, sl
    66a0:	45a2      	cmp	sl, r4
    66a2:	d908      	bls.n	66b6 <__udivmoddi4+0x1da>
    66a4:	eb1e 0404 	adds.w	r4, lr, r4
    66a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    66ac:	d26b      	bcs.n	6786 <__udivmoddi4+0x2aa>
    66ae:	45a2      	cmp	sl, r4
    66b0:	d969      	bls.n	6786 <__udivmoddi4+0x2aa>
    66b2:	3802      	subs	r0, #2
    66b4:	4474      	add	r4, lr
    66b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    66ba:	fba0 8902 	umull	r8, r9, r0, r2
    66be:	eba4 040a 	sub.w	r4, r4, sl
    66c2:	454c      	cmp	r4, r9
    66c4:	46c2      	mov	sl, r8
    66c6:	464b      	mov	r3, r9
    66c8:	d354      	bcc.n	6774 <__udivmoddi4+0x298>
    66ca:	d051      	beq.n	6770 <__udivmoddi4+0x294>
    66cc:	2e00      	cmp	r6, #0
    66ce:	d069      	beq.n	67a4 <__udivmoddi4+0x2c8>
    66d0:	ebb1 050a 	subs.w	r5, r1, sl
    66d4:	eb64 0403 	sbc.w	r4, r4, r3
    66d8:	fa04 fc0c 	lsl.w	ip, r4, ip
    66dc:	40fd      	lsrs	r5, r7
    66de:	40fc      	lsrs	r4, r7
    66e0:	ea4c 0505 	orr.w	r5, ip, r5
    66e4:	e9c6 5400 	strd	r5, r4, [r6]
    66e8:	2700      	movs	r7, #0
    66ea:	e747      	b.n	657c <__udivmoddi4+0xa0>
    66ec:	f1c2 0320 	rsb	r3, r2, #32
    66f0:	fa20 f703 	lsr.w	r7, r0, r3
    66f4:	4095      	lsls	r5, r2
    66f6:	fa01 f002 	lsl.w	r0, r1, r2
    66fa:	fa21 f303 	lsr.w	r3, r1, r3
    66fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6702:	4338      	orrs	r0, r7
    6704:	0c01      	lsrs	r1, r0, #16
    6706:	fbb3 f7fe 	udiv	r7, r3, lr
    670a:	fa1f f885 	uxth.w	r8, r5
    670e:	fb0e 3317 	mls	r3, lr, r7, r3
    6712:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6716:	fb07 f308 	mul.w	r3, r7, r8
    671a:	428b      	cmp	r3, r1
    671c:	fa04 f402 	lsl.w	r4, r4, r2
    6720:	d907      	bls.n	6732 <__udivmoddi4+0x256>
    6722:	1869      	adds	r1, r5, r1
    6724:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    6728:	d22f      	bcs.n	678a <__udivmoddi4+0x2ae>
    672a:	428b      	cmp	r3, r1
    672c:	d92d      	bls.n	678a <__udivmoddi4+0x2ae>
    672e:	3f02      	subs	r7, #2
    6730:	4429      	add	r1, r5
    6732:	1acb      	subs	r3, r1, r3
    6734:	b281      	uxth	r1, r0
    6736:	fbb3 f0fe 	udiv	r0, r3, lr
    673a:	fb0e 3310 	mls	r3, lr, r0, r3
    673e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6742:	fb00 f308 	mul.w	r3, r0, r8
    6746:	428b      	cmp	r3, r1
    6748:	d907      	bls.n	675a <__udivmoddi4+0x27e>
    674a:	1869      	adds	r1, r5, r1
    674c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6750:	d217      	bcs.n	6782 <__udivmoddi4+0x2a6>
    6752:	428b      	cmp	r3, r1
    6754:	d915      	bls.n	6782 <__udivmoddi4+0x2a6>
    6756:	3802      	subs	r0, #2
    6758:	4429      	add	r1, r5
    675a:	1ac9      	subs	r1, r1, r3
    675c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    6760:	e73b      	b.n	65da <__udivmoddi4+0xfe>
    6762:	4637      	mov	r7, r6
    6764:	4630      	mov	r0, r6
    6766:	e709      	b.n	657c <__udivmoddi4+0xa0>
    6768:	4607      	mov	r7, r0
    676a:	e6e7      	b.n	653c <__udivmoddi4+0x60>
    676c:	4618      	mov	r0, r3
    676e:	e6fb      	b.n	6568 <__udivmoddi4+0x8c>
    6770:	4541      	cmp	r1, r8
    6772:	d2ab      	bcs.n	66cc <__udivmoddi4+0x1f0>
    6774:	ebb8 0a02 	subs.w	sl, r8, r2
    6778:	eb69 020e 	sbc.w	r2, r9, lr
    677c:	3801      	subs	r0, #1
    677e:	4613      	mov	r3, r2
    6780:	e7a4      	b.n	66cc <__udivmoddi4+0x1f0>
    6782:	4660      	mov	r0, ip
    6784:	e7e9      	b.n	675a <__udivmoddi4+0x27e>
    6786:	4618      	mov	r0, r3
    6788:	e795      	b.n	66b6 <__udivmoddi4+0x1da>
    678a:	4667      	mov	r7, ip
    678c:	e7d1      	b.n	6732 <__udivmoddi4+0x256>
    678e:	4681      	mov	r9, r0
    6790:	e77c      	b.n	668c <__udivmoddi4+0x1b0>
    6792:	3802      	subs	r0, #2
    6794:	442c      	add	r4, r5
    6796:	e747      	b.n	6628 <__udivmoddi4+0x14c>
    6798:	f1ac 0c02 	sub.w	ip, ip, #2
    679c:	442b      	add	r3, r5
    679e:	e72f      	b.n	6600 <__udivmoddi4+0x124>
    67a0:	4638      	mov	r0, r7
    67a2:	e708      	b.n	65b6 <__udivmoddi4+0xda>
    67a4:	4637      	mov	r7, r6
    67a6:	e6e9      	b.n	657c <__udivmoddi4+0xa0>

000067a8 <selfrel_offset31>:
    67a8:	6803      	ldr	r3, [r0, #0]
    67aa:	005a      	lsls	r2, r3, #1
    67ac:	bf4c      	ite	mi
    67ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    67b2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    67b6:	4418      	add	r0, r3
    67b8:	4770      	bx	lr
    67ba:	bf00      	nop

000067bc <search_EIT_table>:
    67bc:	b361      	cbz	r1, 6818 <search_EIT_table+0x5c>
    67be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67c2:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    67c6:	4690      	mov	r8, r2
    67c8:	4606      	mov	r6, r0
    67ca:	46d1      	mov	r9, sl
    67cc:	2700      	movs	r7, #0
    67ce:	eb07 0409 	add.w	r4, r7, r9
    67d2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    67d6:	1064      	asrs	r4, r4, #1
    67d8:	00e5      	lsls	r5, r4, #3
    67da:	1971      	adds	r1, r6, r5
    67dc:	4608      	mov	r0, r1
    67de:	f7ff ffe3 	bl	67a8 <selfrel_offset31>
    67e2:	45a2      	cmp	sl, r4
    67e4:	4683      	mov	fp, r0
    67e6:	f105 0008 	add.w	r0, r5, #8
    67ea:	4430      	add	r0, r6
    67ec:	d009      	beq.n	6802 <search_EIT_table+0x46>
    67ee:	f7ff ffdb 	bl	67a8 <selfrel_offset31>
    67f2:	45c3      	cmp	fp, r8
    67f4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    67f8:	d805      	bhi.n	6806 <search_EIT_table+0x4a>
    67fa:	4540      	cmp	r0, r8
    67fc:	d209      	bcs.n	6812 <search_EIT_table+0x56>
    67fe:	1c67      	adds	r7, r4, #1
    6800:	e7e5      	b.n	67ce <search_EIT_table+0x12>
    6802:	45c3      	cmp	fp, r8
    6804:	d905      	bls.n	6812 <search_EIT_table+0x56>
    6806:	42a7      	cmp	r7, r4
    6808:	d002      	beq.n	6810 <search_EIT_table+0x54>
    680a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    680e:	e7de      	b.n	67ce <search_EIT_table+0x12>
    6810:	2100      	movs	r1, #0
    6812:	4608      	mov	r0, r1
    6814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6818:	4608      	mov	r0, r1
    681a:	4770      	bx	lr

0000681c <__gnu_unwind_get_pr_addr>:
    681c:	2801      	cmp	r0, #1
    681e:	d007      	beq.n	6830 <__gnu_unwind_get_pr_addr+0x14>
    6820:	2802      	cmp	r0, #2
    6822:	d007      	beq.n	6834 <__gnu_unwind_get_pr_addr+0x18>
    6824:	4b04      	ldr	r3, [pc, #16]	; (6838 <__gnu_unwind_get_pr_addr+0x1c>)
    6826:	2800      	cmp	r0, #0
    6828:	bf0c      	ite	eq
    682a:	4618      	moveq	r0, r3
    682c:	2000      	movne	r0, #0
    682e:	4770      	bx	lr
    6830:	4802      	ldr	r0, [pc, #8]	; (683c <__gnu_unwind_get_pr_addr+0x20>)
    6832:	4770      	bx	lr
    6834:	4802      	ldr	r0, [pc, #8]	; (6840 <__gnu_unwind_get_pr_addr+0x24>)
    6836:	4770      	bx	lr
    6838:	00006f09 	.word	0x00006f09
    683c:	00006f0d 	.word	0x00006f0d
    6840:	00006f11 	.word	0x00006f11

00006844 <get_eit_entry>:
    6844:	b530      	push	{r4, r5, lr}
    6846:	4b25      	ldr	r3, [pc, #148]	; (68dc <get_eit_entry+0x98>)
    6848:	b083      	sub	sp, #12
    684a:	4604      	mov	r4, r0
    684c:	1e8d      	subs	r5, r1, #2
    684e:	b34b      	cbz	r3, 68a4 <get_eit_entry+0x60>
    6850:	a901      	add	r1, sp, #4
    6852:	4628      	mov	r0, r5
    6854:	f3af 8000 	nop.w
    6858:	b1f0      	cbz	r0, 6898 <get_eit_entry+0x54>
    685a:	9901      	ldr	r1, [sp, #4]
    685c:	462a      	mov	r2, r5
    685e:	f7ff ffad 	bl	67bc <search_EIT_table>
    6862:	4601      	mov	r1, r0
    6864:	b1c0      	cbz	r0, 6898 <get_eit_entry+0x54>
    6866:	f7ff ff9f 	bl	67a8 <selfrel_offset31>
    686a:	684b      	ldr	r3, [r1, #4]
    686c:	64a0      	str	r0, [r4, #72]	; 0x48
    686e:	2b01      	cmp	r3, #1
    6870:	d02e      	beq.n	68d0 <get_eit_entry+0x8c>
    6872:	2b00      	cmp	r3, #0
    6874:	f101 0004 	add.w	r0, r1, #4
    6878:	db26      	blt.n	68c8 <get_eit_entry+0x84>
    687a:	f7ff ff95 	bl	67a8 <selfrel_offset31>
    687e:	2300      	movs	r3, #0
    6880:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6884:	6803      	ldr	r3, [r0, #0]
    6886:	2b00      	cmp	r3, #0
    6888:	db12      	blt.n	68b0 <get_eit_entry+0x6c>
    688a:	f7ff ff8d 	bl	67a8 <selfrel_offset31>
    688e:	2300      	movs	r3, #0
    6890:	6120      	str	r0, [r4, #16]
    6892:	4618      	mov	r0, r3
    6894:	b003      	add	sp, #12
    6896:	bd30      	pop	{r4, r5, pc}
    6898:	2300      	movs	r3, #0
    689a:	6123      	str	r3, [r4, #16]
    689c:	2309      	movs	r3, #9
    689e:	4618      	mov	r0, r3
    68a0:	b003      	add	sp, #12
    68a2:	bd30      	pop	{r4, r5, pc}
    68a4:	490e      	ldr	r1, [pc, #56]	; (68e0 <get_eit_entry+0x9c>)
    68a6:	480f      	ldr	r0, [pc, #60]	; (68e4 <get_eit_entry+0xa0>)
    68a8:	1a09      	subs	r1, r1, r0
    68aa:	10c9      	asrs	r1, r1, #3
    68ac:	9101      	str	r1, [sp, #4]
    68ae:	e7d5      	b.n	685c <get_eit_entry+0x18>
    68b0:	f3c3 6003 	ubfx	r0, r3, #24, #4
    68b4:	f7ff ffb2 	bl	681c <__gnu_unwind_get_pr_addr>
    68b8:	2800      	cmp	r0, #0
    68ba:	bf14      	ite	ne
    68bc:	2300      	movne	r3, #0
    68be:	2309      	moveq	r3, #9
    68c0:	6120      	str	r0, [r4, #16]
    68c2:	4618      	mov	r0, r3
    68c4:	b003      	add	sp, #12
    68c6:	bd30      	pop	{r4, r5, pc}
    68c8:	2301      	movs	r3, #1
    68ca:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    68ce:	e7d9      	b.n	6884 <get_eit_entry+0x40>
    68d0:	2300      	movs	r3, #0
    68d2:	6123      	str	r3, [r4, #16]
    68d4:	2305      	movs	r3, #5
    68d6:	4618      	mov	r0, r3
    68d8:	b003      	add	sp, #12
    68da:	bd30      	pop	{r4, r5, pc}
    68dc:	00000000 	.word	0x00000000
    68e0:	00009284 	.word	0x00009284
    68e4:	000091cc 	.word	0x000091cc

000068e8 <restore_non_core_regs>:
    68e8:	6803      	ldr	r3, [r0, #0]
    68ea:	07da      	lsls	r2, r3, #31
    68ec:	b510      	push	{r4, lr}
    68ee:	4604      	mov	r4, r0
    68f0:	d406      	bmi.n	6900 <restore_non_core_regs+0x18>
    68f2:	079b      	lsls	r3, r3, #30
    68f4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    68f8:	d509      	bpl.n	690e <restore_non_core_regs+0x26>
    68fa:	f000 fc5f 	bl	71bc <__gnu_Unwind_Restore_VFP_D>
    68fe:	6823      	ldr	r3, [r4, #0]
    6900:	0759      	lsls	r1, r3, #29
    6902:	d509      	bpl.n	6918 <restore_non_core_regs+0x30>
    6904:	071a      	lsls	r2, r3, #28
    6906:	d50e      	bpl.n	6926 <restore_non_core_regs+0x3e>
    6908:	06db      	lsls	r3, r3, #27
    690a:	d513      	bpl.n	6934 <restore_non_core_regs+0x4c>
    690c:	bd10      	pop	{r4, pc}
    690e:	f000 fc4d 	bl	71ac <__gnu_Unwind_Restore_VFP>
    6912:	6823      	ldr	r3, [r4, #0]
    6914:	0759      	lsls	r1, r3, #29
    6916:	d4f5      	bmi.n	6904 <restore_non_core_regs+0x1c>
    6918:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    691c:	f000 fc56 	bl	71cc <__gnu_Unwind_Restore_VFP_D_16_to_31>
    6920:	6823      	ldr	r3, [r4, #0]
    6922:	071a      	lsls	r2, r3, #28
    6924:	d4f0      	bmi.n	6908 <restore_non_core_regs+0x20>
    6926:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    692a:	f000 fc57 	bl	71dc <__gnu_Unwind_Restore_WMMXD>
    692e:	6823      	ldr	r3, [r4, #0]
    6930:	06db      	lsls	r3, r3, #27
    6932:	d4eb      	bmi.n	690c <restore_non_core_regs+0x24>
    6934:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    6938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    693c:	f000 bc92 	b.w	7264 <__gnu_Unwind_Restore_WMMXC>

00006940 <_Unwind_decode_typeinfo_ptr.isra.0>:
    6940:	6803      	ldr	r3, [r0, #0]
    6942:	b103      	cbz	r3, 6946 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    6944:	4403      	add	r3, r0
    6946:	4618      	mov	r0, r3
    6948:	4770      	bx	lr
    694a:	bf00      	nop

0000694c <__gnu_unwind_24bit.isra.1>:
    694c:	2009      	movs	r0, #9
    694e:	4770      	bx	lr

00006950 <_Unwind_DebugHook>:
    6950:	4770      	bx	lr
    6952:	bf00      	nop

00006954 <unwind_phase2>:
    6954:	b570      	push	{r4, r5, r6, lr}
    6956:	4604      	mov	r4, r0
    6958:	460d      	mov	r5, r1
    695a:	e008      	b.n	696e <unwind_phase2+0x1a>
    695c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    695e:	6163      	str	r3, [r4, #20]
    6960:	462a      	mov	r2, r5
    6962:	6923      	ldr	r3, [r4, #16]
    6964:	4621      	mov	r1, r4
    6966:	2001      	movs	r0, #1
    6968:	4798      	blx	r3
    696a:	2808      	cmp	r0, #8
    696c:	d108      	bne.n	6980 <unwind_phase2+0x2c>
    696e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6970:	4620      	mov	r0, r4
    6972:	f7ff ff67 	bl	6844 <get_eit_entry>
    6976:	4606      	mov	r6, r0
    6978:	2800      	cmp	r0, #0
    697a:	d0ef      	beq.n	695c <unwind_phase2+0x8>
    697c:	f000 fe9c 	bl	76b8 <abort>
    6980:	2807      	cmp	r0, #7
    6982:	d1fb      	bne.n	697c <unwind_phase2+0x28>
    6984:	4630      	mov	r0, r6
    6986:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6988:	f7ff ffe2 	bl	6950 <_Unwind_DebugHook>
    698c:	1d28      	adds	r0, r5, #4
    698e:	f000 fc01 	bl	7194 <__restore_core_regs>
    6992:	bf00      	nop

00006994 <unwind_phase2_forced>:
    6994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6998:	1d0c      	adds	r4, r1, #4
    699a:	4605      	mov	r5, r0
    699c:	4617      	mov	r7, r2
    699e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    69a0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    69a4:	ae03      	add	r6, sp, #12
    69a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    69a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    69aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    69ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    69ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    69b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    69b4:	ac02      	add	r4, sp, #8
    69b6:	f8d5 800c 	ldr.w	r8, [r5, #12]
    69ba:	f8d5 9018 	ldr.w	r9, [r5, #24]
    69be:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    69c2:	2300      	movs	r3, #0
    69c4:	6023      	str	r3, [r4, #0]
    69c6:	e021      	b.n	6a0c <unwind_phase2_forced+0x78>
    69c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    69ca:	616b      	str	r3, [r5, #20]
    69cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    69d0:	4621      	mov	r1, r4
    69d2:	a87a      	add	r0, sp, #488	; 0x1e8
    69d4:	f000 fe9c 	bl	7710 <memcpy>
    69d8:	692b      	ldr	r3, [r5, #16]
    69da:	aa7a      	add	r2, sp, #488	; 0x1e8
    69dc:	4629      	mov	r1, r5
    69de:	4630      	mov	r0, r6
    69e0:	4798      	blx	r3
    69e2:	9b88      	ldr	r3, [sp, #544]	; 0x220
    69e4:	e9cd 4900 	strd	r4, r9, [sp]
    69e8:	4682      	mov	sl, r0
    69ea:	6463      	str	r3, [r4, #68]	; 0x44
    69ec:	4631      	mov	r1, r6
    69ee:	462b      	mov	r3, r5
    69f0:	462a      	mov	r2, r5
    69f2:	2001      	movs	r0, #1
    69f4:	47c0      	blx	r8
    69f6:	4607      	mov	r7, r0
    69f8:	b9f8      	cbnz	r0, 6a3a <unwind_phase2_forced+0xa6>
    69fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    69fe:	a97a      	add	r1, sp, #488	; 0x1e8
    6a00:	4620      	mov	r0, r4
    6a02:	f000 fe85 	bl	7710 <memcpy>
    6a06:	f1ba 0f08 	cmp.w	sl, #8
    6a0a:	d11c      	bne.n	6a46 <unwind_phase2_forced+0xb2>
    6a0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6a0e:	4628      	mov	r0, r5
    6a10:	f7ff ff18 	bl	6844 <get_eit_entry>
    6a14:	2f00      	cmp	r7, #0
    6a16:	bf08      	it	eq
    6a18:	2609      	moveq	r6, #9
    6a1a:	4607      	mov	r7, r0
    6a1c:	bf18      	it	ne
    6a1e:	260a      	movne	r6, #10
    6a20:	2800      	cmp	r0, #0
    6a22:	d0d1      	beq.n	69c8 <unwind_phase2_forced+0x34>
    6a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6a26:	f046 0110 	orr.w	r1, r6, #16
    6a2a:	e9cd 4900 	strd	r4, r9, [sp]
    6a2e:	462a      	mov	r2, r5
    6a30:	6463      	str	r3, [r4, #68]	; 0x44
    6a32:	2001      	movs	r0, #1
    6a34:	462b      	mov	r3, r5
    6a36:	47c0      	blx	r8
    6a38:	b100      	cbz	r0, 6a3c <unwind_phase2_forced+0xa8>
    6a3a:	2709      	movs	r7, #9
    6a3c:	4638      	mov	r0, r7
    6a3e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    6a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a46:	f1ba 0f07 	cmp.w	sl, #7
    6a4a:	d1f6      	bne.n	6a3a <unwind_phase2_forced+0xa6>
    6a4c:	4638      	mov	r0, r7
    6a4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6a50:	f7ff ff7e 	bl	6950 <_Unwind_DebugHook>
    6a54:	a803      	add	r0, sp, #12
    6a56:	f000 fb9d 	bl	7194 <__restore_core_regs>
    6a5a:	bf00      	nop

00006a5c <_Unwind_GetCFA>:
    6a5c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6a5e:	4770      	bx	lr

00006a60 <__gnu_Unwind_RaiseException>:
    6a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a62:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6a64:	640b      	str	r3, [r1, #64]	; 0x40
    6a66:	1d0d      	adds	r5, r1, #4
    6a68:	460f      	mov	r7, r1
    6a6a:	4606      	mov	r6, r0
    6a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a6e:	b0f9      	sub	sp, #484	; 0x1e4
    6a70:	ac01      	add	r4, sp, #4
    6a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6a80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6a88:	9500      	str	r5, [sp, #0]
    6a8a:	e006      	b.n	6a9a <__gnu_Unwind_RaiseException+0x3a>
    6a8c:	6933      	ldr	r3, [r6, #16]
    6a8e:	466a      	mov	r2, sp
    6a90:	4631      	mov	r1, r6
    6a92:	4798      	blx	r3
    6a94:	2808      	cmp	r0, #8
    6a96:	4604      	mov	r4, r0
    6a98:	d108      	bne.n	6aac <__gnu_Unwind_RaiseException+0x4c>
    6a9a:	9910      	ldr	r1, [sp, #64]	; 0x40
    6a9c:	4630      	mov	r0, r6
    6a9e:	f7ff fed1 	bl	6844 <get_eit_entry>
    6aa2:	2800      	cmp	r0, #0
    6aa4:	d0f2      	beq.n	6a8c <__gnu_Unwind_RaiseException+0x2c>
    6aa6:	2009      	movs	r0, #9
    6aa8:	b079      	add	sp, #484	; 0x1e4
    6aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aac:	4668      	mov	r0, sp
    6aae:	f7ff ff1b 	bl	68e8 <restore_non_core_regs>
    6ab2:	2c06      	cmp	r4, #6
    6ab4:	d1f7      	bne.n	6aa6 <__gnu_Unwind_RaiseException+0x46>
    6ab6:	4639      	mov	r1, r7
    6ab8:	4630      	mov	r0, r6
    6aba:	f7ff ff4b 	bl	6954 <unwind_phase2>
    6abe:	bf00      	nop

00006ac0 <__gnu_Unwind_ForcedUnwind>:
    6ac0:	b430      	push	{r4, r5}
    6ac2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    6ac4:	60c1      	str	r1, [r0, #12]
    6ac6:	6182      	str	r2, [r0, #24]
    6ac8:	4619      	mov	r1, r3
    6aca:	641d      	str	r5, [r3, #64]	; 0x40
    6acc:	2200      	movs	r2, #0
    6ace:	bc30      	pop	{r4, r5}
    6ad0:	e760      	b.n	6994 <unwind_phase2_forced>
    6ad2:	bf00      	nop

00006ad4 <__gnu_Unwind_Resume>:
    6ad4:	b570      	push	{r4, r5, r6, lr}
    6ad6:	68c6      	ldr	r6, [r0, #12]
    6ad8:	6943      	ldr	r3, [r0, #20]
    6ada:	640b      	str	r3, [r1, #64]	; 0x40
    6adc:	b9be      	cbnz	r6, 6b0e <__gnu_Unwind_Resume+0x3a>
    6ade:	6903      	ldr	r3, [r0, #16]
    6ae0:	460a      	mov	r2, r1
    6ae2:	4604      	mov	r4, r0
    6ae4:	460d      	mov	r5, r1
    6ae6:	4601      	mov	r1, r0
    6ae8:	2002      	movs	r0, #2
    6aea:	4798      	blx	r3
    6aec:	2807      	cmp	r0, #7
    6aee:	d007      	beq.n	6b00 <__gnu_Unwind_Resume+0x2c>
    6af0:	2808      	cmp	r0, #8
    6af2:	d103      	bne.n	6afc <__gnu_Unwind_Resume+0x28>
    6af4:	4629      	mov	r1, r5
    6af6:	4620      	mov	r0, r4
    6af8:	f7ff ff2c 	bl	6954 <unwind_phase2>
    6afc:	f000 fddc 	bl	76b8 <abort>
    6b00:	4630      	mov	r0, r6
    6b02:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6b04:	f7ff ff24 	bl	6950 <_Unwind_DebugHook>
    6b08:	1d28      	adds	r0, r5, #4
    6b0a:	f000 fb43 	bl	7194 <__restore_core_regs>
    6b0e:	2201      	movs	r2, #1
    6b10:	f7ff ff40 	bl	6994 <unwind_phase2_forced>
    6b14:	f000 fdd0 	bl	76b8 <abort>

00006b18 <__gnu_Unwind_Resume_or_Rethrow>:
    6b18:	68c2      	ldr	r2, [r0, #12]
    6b1a:	b11a      	cbz	r2, 6b24 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    6b1c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6b1e:	640a      	str	r2, [r1, #64]	; 0x40
    6b20:	2200      	movs	r2, #0
    6b22:	e737      	b.n	6994 <unwind_phase2_forced>
    6b24:	e79c      	b.n	6a60 <__gnu_Unwind_RaiseException>
    6b26:	bf00      	nop

00006b28 <_Unwind_Complete>:
    6b28:	4770      	bx	lr
    6b2a:	bf00      	nop

00006b2c <_Unwind_DeleteException>:
    6b2c:	6883      	ldr	r3, [r0, #8]
    6b2e:	b113      	cbz	r3, 6b36 <_Unwind_DeleteException+0xa>
    6b30:	4601      	mov	r1, r0
    6b32:	2001      	movs	r0, #1
    6b34:	4718      	bx	r3
    6b36:	4770      	bx	lr

00006b38 <_Unwind_VRS_Get>:
    6b38:	2904      	cmp	r1, #4
    6b3a:	d807      	bhi.n	6b4c <_Unwind_VRS_Get+0x14>
    6b3c:	e8df f001 	tbb	[pc, r1]
    6b40:	08060803 	.word	0x08060803
    6b44:	08          	.byte	0x08
    6b45:	00          	.byte	0x00
    6b46:	b90b      	cbnz	r3, 6b4c <_Unwind_VRS_Get+0x14>
    6b48:	2a0f      	cmp	r2, #15
    6b4a:	d903      	bls.n	6b54 <_Unwind_VRS_Get+0x1c>
    6b4c:	2002      	movs	r0, #2
    6b4e:	4770      	bx	lr
    6b50:	2001      	movs	r0, #1
    6b52:	4770      	bx	lr
    6b54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6b58:	4618      	mov	r0, r3
    6b5a:	6853      	ldr	r3, [r2, #4]
    6b5c:	9a00      	ldr	r2, [sp, #0]
    6b5e:	6013      	str	r3, [r2, #0]
    6b60:	4770      	bx	lr
    6b62:	bf00      	nop

00006b64 <_Unwind_GetGR>:
    6b64:	b510      	push	{r4, lr}
    6b66:	b084      	sub	sp, #16
    6b68:	2300      	movs	r3, #0
    6b6a:	ac03      	add	r4, sp, #12
    6b6c:	460a      	mov	r2, r1
    6b6e:	9400      	str	r4, [sp, #0]
    6b70:	4619      	mov	r1, r3
    6b72:	f7ff ffe1 	bl	6b38 <_Unwind_VRS_Get>
    6b76:	9803      	ldr	r0, [sp, #12]
    6b78:	b004      	add	sp, #16
    6b7a:	bd10      	pop	{r4, pc}

00006b7c <_Unwind_VRS_Set>:
    6b7c:	2904      	cmp	r1, #4
    6b7e:	d807      	bhi.n	6b90 <_Unwind_VRS_Set+0x14>
    6b80:	e8df f001 	tbb	[pc, r1]
    6b84:	08060803 	.word	0x08060803
    6b88:	08          	.byte	0x08
    6b89:	00          	.byte	0x00
    6b8a:	b90b      	cbnz	r3, 6b90 <_Unwind_VRS_Set+0x14>
    6b8c:	2a0f      	cmp	r2, #15
    6b8e:	d903      	bls.n	6b98 <_Unwind_VRS_Set+0x1c>
    6b90:	2002      	movs	r0, #2
    6b92:	4770      	bx	lr
    6b94:	2001      	movs	r0, #1
    6b96:	4770      	bx	lr
    6b98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6b9c:	9a00      	ldr	r2, [sp, #0]
    6b9e:	6812      	ldr	r2, [r2, #0]
    6ba0:	6042      	str	r2, [r0, #4]
    6ba2:	4618      	mov	r0, r3
    6ba4:	4770      	bx	lr
    6ba6:	bf00      	nop

00006ba8 <_Unwind_SetGR>:
    6ba8:	b510      	push	{r4, lr}
    6baa:	b084      	sub	sp, #16
    6bac:	ac04      	add	r4, sp, #16
    6bae:	2300      	movs	r3, #0
    6bb0:	f844 2d04 	str.w	r2, [r4, #-4]!
    6bb4:	460a      	mov	r2, r1
    6bb6:	9400      	str	r4, [sp, #0]
    6bb8:	4619      	mov	r1, r3
    6bba:	f7ff ffdf 	bl	6b7c <_Unwind_VRS_Set>
    6bbe:	b004      	add	sp, #16
    6bc0:	bd10      	pop	{r4, pc}
    6bc2:	bf00      	nop

00006bc4 <__gnu_Unwind_Backtrace>:
    6bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bc6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6bc8:	6413      	str	r3, [r2, #64]	; 0x40
    6bca:	1d15      	adds	r5, r2, #4
    6bcc:	4607      	mov	r7, r0
    6bce:	460e      	mov	r6, r1
    6bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6bd2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    6bd6:	ac17      	add	r4, sp, #92	; 0x5c
    6bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6be2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6be6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6bee:	9516      	str	r5, [sp, #88]	; 0x58
    6bf0:	e010      	b.n	6c14 <__gnu_Unwind_Backtrace+0x50>
    6bf2:	a816      	add	r0, sp, #88	; 0x58
    6bf4:	f7ff ffd8 	bl	6ba8 <_Unwind_SetGR>
    6bf8:	4631      	mov	r1, r6
    6bfa:	a816      	add	r0, sp, #88	; 0x58
    6bfc:	47b8      	blx	r7
    6bfe:	aa16      	add	r2, sp, #88	; 0x58
    6c00:	4669      	mov	r1, sp
    6c02:	b978      	cbnz	r0, 6c24 <__gnu_Unwind_Backtrace+0x60>
    6c04:	9b04      	ldr	r3, [sp, #16]
    6c06:	2008      	movs	r0, #8
    6c08:	4798      	blx	r3
    6c0a:	2805      	cmp	r0, #5
    6c0c:	4604      	mov	r4, r0
    6c0e:	d00a      	beq.n	6c26 <__gnu_Unwind_Backtrace+0x62>
    6c10:	2809      	cmp	r0, #9
    6c12:	d007      	beq.n	6c24 <__gnu_Unwind_Backtrace+0x60>
    6c14:	9926      	ldr	r1, [sp, #152]	; 0x98
    6c16:	4668      	mov	r0, sp
    6c18:	f7ff fe14 	bl	6844 <get_eit_entry>
    6c1c:	466a      	mov	r2, sp
    6c1e:	210c      	movs	r1, #12
    6c20:	2800      	cmp	r0, #0
    6c22:	d0e6      	beq.n	6bf2 <__gnu_Unwind_Backtrace+0x2e>
    6c24:	2409      	movs	r4, #9
    6c26:	a816      	add	r0, sp, #88	; 0x58
    6c28:	f7ff fe5e 	bl	68e8 <restore_non_core_regs>
    6c2c:	4620      	mov	r0, r4
    6c2e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    6c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c34 <__gnu_unwind_pr_common>:
    6c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c38:	460d      	mov	r5, r1
    6c3a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    6c3c:	b089      	sub	sp, #36	; 0x24
    6c3e:	1d0c      	adds	r4, r1, #4
    6c40:	4616      	mov	r6, r2
    6c42:	f000 0b03 	and.w	fp, r0, #3
    6c46:	680a      	ldr	r2, [r1, #0]
    6c48:	9406      	str	r4, [sp, #24]
    6c4a:	461f      	mov	r7, r3
    6c4c:	2b00      	cmp	r3, #0
    6c4e:	d068      	beq.n	6d22 <__gnu_unwind_pr_common+0xee>
    6c50:	0c13      	lsrs	r3, r2, #16
    6c52:	b2d9      	uxtb	r1, r3
    6c54:	0412      	lsls	r2, r2, #16
    6c56:	f88d 301d 	strb.w	r3, [sp, #29]
    6c5a:	2302      	movs	r3, #2
    6c5c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6c60:	9205      	str	r2, [sp, #20]
    6c62:	f88d 301c 	strb.w	r3, [sp, #28]
    6c66:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    6c68:	f1bb 0f02 	cmp.w	fp, #2
    6c6c:	bf08      	it	eq
    6c6e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    6c70:	f013 0301 	ands.w	r3, r3, #1
    6c74:	d146      	bne.n	6d04 <__gnu_unwind_pr_common+0xd0>
    6c76:	9301      	str	r3, [sp, #4]
    6c78:	f000 0308 	and.w	r3, r0, #8
    6c7c:	9300      	str	r3, [sp, #0]
    6c7e:	f8d4 9000 	ldr.w	r9, [r4]
    6c82:	f1b9 0f00 	cmp.w	r9, #0
    6c86:	f000 80f3 	beq.w	6e70 <__gnu_unwind_pr_common+0x23c>
    6c8a:	2f02      	cmp	r7, #2
    6c8c:	d045      	beq.n	6d1a <__gnu_unwind_pr_common+0xe6>
    6c8e:	f8b4 9000 	ldrh.w	r9, [r4]
    6c92:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6c96:	3404      	adds	r4, #4
    6c98:	6cab      	ldr	r3, [r5, #72]	; 0x48
    6c9a:	f028 0a01 	bic.w	sl, r8, #1
    6c9e:	210f      	movs	r1, #15
    6ca0:	4630      	mov	r0, r6
    6ca2:	449a      	add	sl, r3
    6ca4:	f7ff ff5e 	bl	6b64 <_Unwind_GetGR>
    6ca8:	4582      	cmp	sl, r0
    6caa:	d834      	bhi.n	6d16 <__gnu_unwind_pr_common+0xe2>
    6cac:	f029 0301 	bic.w	r3, r9, #1
    6cb0:	4453      	add	r3, sl
    6cb2:	4283      	cmp	r3, r0
    6cb4:	bf94      	ite	ls
    6cb6:	2000      	movls	r0, #0
    6cb8:	2001      	movhi	r0, #1
    6cba:	ea4f 0848 	mov.w	r8, r8, lsl #1
    6cbe:	f008 0802 	and.w	r8, r8, #2
    6cc2:	f009 0901 	and.w	r9, r9, #1
    6cc6:	ea48 0809 	orr.w	r8, r8, r9
    6cca:	f1b8 0f01 	cmp.w	r8, #1
    6cce:	d03a      	beq.n	6d46 <__gnu_unwind_pr_common+0x112>
    6cd0:	d331      	bcc.n	6d36 <__gnu_unwind_pr_common+0x102>
    6cd2:	f1b8 0f02 	cmp.w	r8, #2
    6cd6:	d11a      	bne.n	6d0e <__gnu_unwind_pr_common+0xda>
    6cd8:	6823      	ldr	r3, [r4, #0]
    6cda:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    6cde:	f1bb 0f00 	cmp.w	fp, #0
    6ce2:	d166      	bne.n	6db2 <__gnu_unwind_pr_common+0x17e>
    6ce4:	b130      	cbz	r0, 6cf4 <__gnu_unwind_pr_common+0xc0>
    6ce6:	9a00      	ldr	r2, [sp, #0]
    6ce8:	2a00      	cmp	r2, #0
    6cea:	d06c      	beq.n	6dc6 <__gnu_unwind_pr_common+0x192>
    6cec:	f1ba 0f00 	cmp.w	sl, #0
    6cf0:	f000 8090 	beq.w	6e14 <__gnu_unwind_pr_common+0x1e0>
    6cf4:	2b00      	cmp	r3, #0
    6cf6:	da00      	bge.n	6cfa <__gnu_unwind_pr_common+0xc6>
    6cf8:	3404      	adds	r4, #4
    6cfa:	f10a 0301 	add.w	r3, sl, #1
    6cfe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    6d02:	e7bc      	b.n	6c7e <__gnu_unwind_pr_common+0x4a>
    6d04:	4630      	mov	r0, r6
    6d06:	a905      	add	r1, sp, #20
    6d08:	f000 fb46 	bl	7398 <__gnu_unwind_execute>
    6d0c:	b178      	cbz	r0, 6d2e <__gnu_unwind_pr_common+0xfa>
    6d0e:	2009      	movs	r0, #9
    6d10:	b009      	add	sp, #36	; 0x24
    6d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d16:	2000      	movs	r0, #0
    6d18:	e7cf      	b.n	6cba <__gnu_unwind_pr_common+0x86>
    6d1a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    6d1e:	3408      	adds	r4, #8
    6d20:	e7ba      	b.n	6c98 <__gnu_unwind_pr_common+0x64>
    6d22:	0212      	lsls	r2, r2, #8
    6d24:	2303      	movs	r3, #3
    6d26:	9205      	str	r2, [sp, #20]
    6d28:	f8ad 301c 	strh.w	r3, [sp, #28]
    6d2c:	e79b      	b.n	6c66 <__gnu_unwind_pr_common+0x32>
    6d2e:	2008      	movs	r0, #8
    6d30:	b009      	add	sp, #36	; 0x24
    6d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d36:	f1bb 0f00 	cmp.w	fp, #0
    6d3a:	d002      	beq.n	6d42 <__gnu_unwind_pr_common+0x10e>
    6d3c:	2800      	cmp	r0, #0
    6d3e:	f040 80b4 	bne.w	6eaa <__gnu_unwind_pr_common+0x276>
    6d42:	3404      	adds	r4, #4
    6d44:	e79b      	b.n	6c7e <__gnu_unwind_pr_common+0x4a>
    6d46:	f1bb 0f00 	cmp.w	fp, #0
    6d4a:	d118      	bne.n	6d7e <__gnu_unwind_pr_common+0x14a>
    6d4c:	b1a8      	cbz	r0, 6d7a <__gnu_unwind_pr_common+0x146>
    6d4e:	e9d4 2300 	ldrd	r2, r3, [r4]
    6d52:	1c99      	adds	r1, r3, #2
    6d54:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    6d58:	d0d9      	beq.n	6d0e <__gnu_unwind_pr_common+0xda>
    6d5a:	f105 0158 	add.w	r1, r5, #88	; 0x58
    6d5e:	3301      	adds	r3, #1
    6d60:	9104      	str	r1, [sp, #16]
    6d62:	f000 80b5 	beq.w	6ed0 <__gnu_unwind_pr_common+0x29c>
    6d66:	1d20      	adds	r0, r4, #4
    6d68:	f7ff fdea 	bl	6940 <_Unwind_decode_typeinfo_ptr.isra.0>
    6d6c:	ab04      	add	r3, sp, #16
    6d6e:	4601      	mov	r1, r0
    6d70:	4628      	mov	r0, r5
    6d72:	f3af 8000 	nop.w
    6d76:	2800      	cmp	r0, #0
    6d78:	d167      	bne.n	6e4a <__gnu_unwind_pr_common+0x216>
    6d7a:	3408      	adds	r4, #8
    6d7c:	e77f      	b.n	6c7e <__gnu_unwind_pr_common+0x4a>
    6d7e:	210d      	movs	r1, #13
    6d80:	4630      	mov	r0, r6
    6d82:	f8d5 8020 	ldr.w	r8, [r5, #32]
    6d86:	f7ff feed 	bl	6b64 <_Unwind_GetGR>
    6d8a:	4580      	cmp	r8, r0
    6d8c:	d1f5      	bne.n	6d7a <__gnu_unwind_pr_common+0x146>
    6d8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d90:	429c      	cmp	r4, r3
    6d92:	d1f2      	bne.n	6d7a <__gnu_unwind_pr_common+0x146>
    6d94:	4620      	mov	r0, r4
    6d96:	f7ff fd07 	bl	67a8 <selfrel_offset31>
    6d9a:	210f      	movs	r1, #15
    6d9c:	4602      	mov	r2, r0
    6d9e:	4630      	mov	r0, r6
    6da0:	f7ff ff02 	bl	6ba8 <_Unwind_SetGR>
    6da4:	4630      	mov	r0, r6
    6da6:	462a      	mov	r2, r5
    6da8:	2100      	movs	r1, #0
    6daa:	f7ff fefd 	bl	6ba8 <_Unwind_SetGR>
    6dae:	2007      	movs	r0, #7
    6db0:	e7ae      	b.n	6d10 <__gnu_unwind_pr_common+0xdc>
    6db2:	210d      	movs	r1, #13
    6db4:	4630      	mov	r0, r6
    6db6:	f8d5 8020 	ldr.w	r8, [r5, #32]
    6dba:	f7ff fed3 	bl	6b64 <_Unwind_GetGR>
    6dbe:	4580      	cmp	r8, r0
    6dc0:	d032      	beq.n	6e28 <__gnu_unwind_pr_common+0x1f4>
    6dc2:	6823      	ldr	r3, [r4, #0]
    6dc4:	e796      	b.n	6cf4 <__gnu_unwind_pr_common+0xc0>
    6dc6:	f1ba 0f00 	cmp.w	sl, #0
    6dca:	d023      	beq.n	6e14 <__gnu_unwind_pr_common+0x1e0>
    6dcc:	f105 0358 	add.w	r3, r5, #88	; 0x58
    6dd0:	f104 0804 	add.w	r8, r4, #4
    6dd4:	f8cd b008 	str.w	fp, [sp, #8]
    6dd8:	f8dd 9000 	ldr.w	r9, [sp]
    6ddc:	9703      	str	r7, [sp, #12]
    6dde:	46a3      	mov	fp, r4
    6de0:	461c      	mov	r4, r3
    6de2:	e002      	b.n	6dea <__gnu_unwind_pr_common+0x1b6>
    6de4:	4557      	cmp	r7, sl
    6de6:	46b9      	mov	r9, r7
    6de8:	d040      	beq.n	6e6c <__gnu_unwind_pr_common+0x238>
    6dea:	4640      	mov	r0, r8
    6dec:	9404      	str	r4, [sp, #16]
    6dee:	f7ff fda7 	bl	6940 <_Unwind_decode_typeinfo_ptr.isra.0>
    6df2:	ab04      	add	r3, sp, #16
    6df4:	4601      	mov	r1, r0
    6df6:	2200      	movs	r2, #0
    6df8:	4628      	mov	r0, r5
    6dfa:	f3af 8000 	nop.w
    6dfe:	f109 0701 	add.w	r7, r9, #1
    6e02:	f108 0804 	add.w	r8, r8, #4
    6e06:	2800      	cmp	r0, #0
    6e08:	d0ec      	beq.n	6de4 <__gnu_unwind_pr_common+0x1b0>
    6e0a:	45d1      	cmp	r9, sl
    6e0c:	465c      	mov	r4, fp
    6e0e:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    6e12:	d1d6      	bne.n	6dc2 <__gnu_unwind_pr_common+0x18e>
    6e14:	4630      	mov	r0, r6
    6e16:	210d      	movs	r1, #13
    6e18:	f7ff fea4 	bl	6b64 <_Unwind_GetGR>
    6e1c:	9b04      	ldr	r3, [sp, #16]
    6e1e:	6228      	str	r0, [r5, #32]
    6e20:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    6e24:	2006      	movs	r0, #6
    6e26:	e773      	b.n	6d10 <__gnu_unwind_pr_common+0xdc>
    6e28:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6e2a:	429c      	cmp	r4, r3
    6e2c:	d1c9      	bne.n	6dc2 <__gnu_unwind_pr_common+0x18e>
    6e2e:	2204      	movs	r2, #4
    6e30:	f04f 0800 	mov.w	r8, #0
    6e34:	18a3      	adds	r3, r4, r2
    6e36:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    6e3a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    6e3e:	6823      	ldr	r3, [r4, #0]
    6e40:	4543      	cmp	r3, r8
    6e42:	db4d      	blt.n	6ee0 <__gnu_unwind_pr_common+0x2ac>
    6e44:	2301      	movs	r3, #1
    6e46:	9301      	str	r3, [sp, #4]
    6e48:	e757      	b.n	6cfa <__gnu_unwind_pr_common+0xc6>
    6e4a:	4680      	mov	r8, r0
    6e4c:	210d      	movs	r1, #13
    6e4e:	4630      	mov	r0, r6
    6e50:	f7ff fe88 	bl	6b64 <_Unwind_GetGR>
    6e54:	f1b8 0f02 	cmp.w	r8, #2
    6e58:	6228      	str	r0, [r5, #32]
    6e5a:	d13e      	bne.n	6eda <__gnu_unwind_pr_common+0x2a6>
    6e5c:	462b      	mov	r3, r5
    6e5e:	9a04      	ldr	r2, [sp, #16]
    6e60:	f843 2f2c 	str.w	r2, [r3, #44]!
    6e64:	626b      	str	r3, [r5, #36]	; 0x24
    6e66:	62ac      	str	r4, [r5, #40]	; 0x28
    6e68:	2006      	movs	r0, #6
    6e6a:	e751      	b.n	6d10 <__gnu_unwind_pr_common+0xdc>
    6e6c:	465c      	mov	r4, fp
    6e6e:	e7d1      	b.n	6e14 <__gnu_unwind_pr_common+0x1e0>
    6e70:	a905      	add	r1, sp, #20
    6e72:	4630      	mov	r0, r6
    6e74:	f000 fa90 	bl	7398 <__gnu_unwind_execute>
    6e78:	2800      	cmp	r0, #0
    6e7a:	f47f af48 	bne.w	6d0e <__gnu_unwind_pr_common+0xda>
    6e7e:	9b01      	ldr	r3, [sp, #4]
    6e80:	2b00      	cmp	r3, #0
    6e82:	f43f af54 	beq.w	6d2e <__gnu_unwind_pr_common+0xfa>
    6e86:	210f      	movs	r1, #15
    6e88:	4630      	mov	r0, r6
    6e8a:	f7ff fe6b 	bl	6b64 <_Unwind_GetGR>
    6e8e:	210e      	movs	r1, #14
    6e90:	4602      	mov	r2, r0
    6e92:	4630      	mov	r0, r6
    6e94:	f7ff fe88 	bl	6ba8 <_Unwind_SetGR>
    6e98:	4630      	mov	r0, r6
    6e9a:	4a1a      	ldr	r2, [pc, #104]	; (6f04 <__gnu_unwind_pr_common+0x2d0>)
    6e9c:	210f      	movs	r1, #15
    6e9e:	f7ff fe83 	bl	6ba8 <_Unwind_SetGR>
    6ea2:	2007      	movs	r0, #7
    6ea4:	b009      	add	sp, #36	; 0x24
    6ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6eaa:	4620      	mov	r0, r4
    6eac:	f7ff fc7c 	bl	67a8 <selfrel_offset31>
    6eb0:	3404      	adds	r4, #4
    6eb2:	4607      	mov	r7, r0
    6eb4:	63ac      	str	r4, [r5, #56]	; 0x38
    6eb6:	4628      	mov	r0, r5
    6eb8:	f3af 8000 	nop.w
    6ebc:	2800      	cmp	r0, #0
    6ebe:	f43f af26 	beq.w	6d0e <__gnu_unwind_pr_common+0xda>
    6ec2:	4630      	mov	r0, r6
    6ec4:	463a      	mov	r2, r7
    6ec6:	210f      	movs	r1, #15
    6ec8:	f7ff fe6e 	bl	6ba8 <_Unwind_SetGR>
    6ecc:	2007      	movs	r0, #7
    6ece:	e71f      	b.n	6d10 <__gnu_unwind_pr_common+0xdc>
    6ed0:	4630      	mov	r0, r6
    6ed2:	210d      	movs	r1, #13
    6ed4:	f7ff fe46 	bl	6b64 <_Unwind_GetGR>
    6ed8:	6228      	str	r0, [r5, #32]
    6eda:	9b04      	ldr	r3, [sp, #16]
    6edc:	626b      	str	r3, [r5, #36]	; 0x24
    6ede:	e7c2      	b.n	6e66 <__gnu_unwind_pr_common+0x232>
    6ee0:	f10a 0001 	add.w	r0, sl, #1
    6ee4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6ee8:	f7ff fc5e 	bl	67a8 <selfrel_offset31>
    6eec:	210f      	movs	r1, #15
    6eee:	4602      	mov	r2, r0
    6ef0:	4630      	mov	r0, r6
    6ef2:	f7ff fe59 	bl	6ba8 <_Unwind_SetGR>
    6ef6:	4630      	mov	r0, r6
    6ef8:	462a      	mov	r2, r5
    6efa:	4641      	mov	r1, r8
    6efc:	f7ff fe54 	bl	6ba8 <_Unwind_SetGR>
    6f00:	2007      	movs	r0, #7
    6f02:	e705      	b.n	6d10 <__gnu_unwind_pr_common+0xdc>
    6f04:	00000000 	.word	0x00000000

00006f08 <__aeabi_unwind_cpp_pr0>:
    6f08:	2300      	movs	r3, #0
    6f0a:	e693      	b.n	6c34 <__gnu_unwind_pr_common>

00006f0c <__aeabi_unwind_cpp_pr1>:
    6f0c:	2301      	movs	r3, #1
    6f0e:	e691      	b.n	6c34 <__gnu_unwind_pr_common>

00006f10 <__aeabi_unwind_cpp_pr2>:
    6f10:	2302      	movs	r3, #2
    6f12:	e68f      	b.n	6c34 <__gnu_unwind_pr_common>

00006f14 <_Unwind_VRS_Pop>:
    6f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f18:	4605      	mov	r5, r0
    6f1a:	b0c4      	sub	sp, #272	; 0x110
    6f1c:	2904      	cmp	r1, #4
    6f1e:	d806      	bhi.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6f20:	e8df f001 	tbb	[pc, r1]
    6f24:	03052b4d 	.word	0x03052b4d
    6f28:	09          	.byte	0x09
    6f29:	00          	.byte	0x00
    6f2a:	2b03      	cmp	r3, #3
    6f2c:	d05f      	beq.n	6fee <_Unwind_VRS_Pop+0xda>
    6f2e:	2002      	movs	r0, #2
    6f30:	b044      	add	sp, #272	; 0x110
    6f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f36:	2b00      	cmp	r3, #0
    6f38:	d1f9      	bne.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6f3a:	2a10      	cmp	r2, #16
    6f3c:	d8f7      	bhi.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6f3e:	682b      	ldr	r3, [r5, #0]
    6f40:	06dc      	lsls	r4, r3, #27
    6f42:	f100 80f4 	bmi.w	712e <_Unwind_VRS_Pop+0x21a>
    6f46:	ac22      	add	r4, sp, #136	; 0x88
    6f48:	4620      	mov	r0, r4
    6f4a:	9201      	str	r2, [sp, #4]
    6f4c:	f000 f994 	bl	7278 <__gnu_Unwind_Save_WMMXC>
    6f50:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    6f52:	9a01      	ldr	r2, [sp, #4]
    6f54:	2300      	movs	r3, #0
    6f56:	2601      	movs	r6, #1
    6f58:	fa06 f103 	lsl.w	r1, r6, r3
    6f5c:	4211      	tst	r1, r2
    6f5e:	d003      	beq.n	6f68 <_Unwind_VRS_Pop+0x54>
    6f60:	6801      	ldr	r1, [r0, #0]
    6f62:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    6f66:	3004      	adds	r0, #4
    6f68:	3301      	adds	r3, #1
    6f6a:	2b04      	cmp	r3, #4
    6f6c:	d1f4      	bne.n	6f58 <_Unwind_VRS_Pop+0x44>
    6f6e:	63a8      	str	r0, [r5, #56]	; 0x38
    6f70:	4620      	mov	r0, r4
    6f72:	f000 f977 	bl	7264 <__gnu_Unwind_Restore_WMMXC>
    6f76:	2000      	movs	r0, #0
    6f78:	e7da      	b.n	6f30 <_Unwind_VRS_Pop+0x1c>
    6f7a:	2b01      	cmp	r3, #1
    6f7c:	ea4f 4612 	mov.w	r6, r2, lsr #16
    6f80:	b297      	uxth	r7, r2
    6f82:	d052      	beq.n	702a <_Unwind_VRS_Pop+0x116>
    6f84:	2b05      	cmp	r3, #5
    6f86:	d1d2      	bne.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6f88:	eb06 0807 	add.w	r8, r6, r7
    6f8c:	f1b8 0f20 	cmp.w	r8, #32
    6f90:	d8cd      	bhi.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6f92:	2e0f      	cmp	r6, #15
    6f94:	f240 8099 	bls.w	70ca <_Unwind_VRS_Pop+0x1b6>
    6f98:	46b8      	mov	r8, r7
    6f9a:	2f00      	cmp	r7, #0
    6f9c:	f040 80db 	bne.w	7156 <_Unwind_VRS_Pop+0x242>
    6fa0:	6baa      	ldr	r2, [r5, #56]	; 0x38
    6fa2:	63aa      	str	r2, [r5, #56]	; 0x38
    6fa4:	2e0f      	cmp	r6, #15
    6fa6:	f240 80be 	bls.w	7126 <_Unwind_VRS_Pop+0x212>
    6faa:	f1b8 0f00 	cmp.w	r8, #0
    6fae:	d002      	beq.n	6fb6 <_Unwind_VRS_Pop+0xa2>
    6fb0:	a802      	add	r0, sp, #8
    6fb2:	f000 f90b 	bl	71cc <__gnu_Unwind_Restore_VFP_D_16_to_31>
    6fb6:	2000      	movs	r0, #0
    6fb8:	b044      	add	sp, #272	; 0x110
    6fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d1b5      	bne.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6fc2:	6bac      	ldr	r4, [r5, #56]	; 0x38
    6fc4:	b297      	uxth	r7, r2
    6fc6:	1d28      	adds	r0, r5, #4
    6fc8:	2601      	movs	r6, #1
    6fca:	fa06 f103 	lsl.w	r1, r6, r3
    6fce:	4239      	tst	r1, r7
    6fd0:	f103 0301 	add.w	r3, r3, #1
    6fd4:	d002      	beq.n	6fdc <_Unwind_VRS_Pop+0xc8>
    6fd6:	6821      	ldr	r1, [r4, #0]
    6fd8:	6001      	str	r1, [r0, #0]
    6fda:	3404      	adds	r4, #4
    6fdc:	2b10      	cmp	r3, #16
    6fde:	f100 0004 	add.w	r0, r0, #4
    6fe2:	d1f2      	bne.n	6fca <_Unwind_VRS_Pop+0xb6>
    6fe4:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    6fe8:	d1e5      	bne.n	6fb6 <_Unwind_VRS_Pop+0xa2>
    6fea:	63ac      	str	r4, [r5, #56]	; 0x38
    6fec:	e7a0      	b.n	6f30 <_Unwind_VRS_Pop+0x1c>
    6fee:	0c16      	lsrs	r6, r2, #16
    6ff0:	b297      	uxth	r7, r2
    6ff2:	19f3      	adds	r3, r6, r7
    6ff4:	2b10      	cmp	r3, #16
    6ff6:	d89a      	bhi.n	6f2e <_Unwind_VRS_Pop+0x1a>
    6ff8:	682b      	ldr	r3, [r5, #0]
    6ffa:	071a      	lsls	r2, r3, #28
    6ffc:	d45d      	bmi.n	70ba <_Unwind_VRS_Pop+0x1a6>
    6ffe:	ac22      	add	r4, sp, #136	; 0x88
    7000:	4620      	mov	r0, r4
    7002:	f000 f90d 	bl	7220 <__gnu_Unwind_Save_WMMXD>
    7006:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    700a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    700c:	b13f      	cbz	r7, 701e <_Unwind_VRS_Pop+0x10a>
    700e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    7012:	6818      	ldr	r0, [r3, #0]
    7014:	f841 0b04 	str.w	r0, [r1], #4
    7018:	3304      	adds	r3, #4
    701a:	4293      	cmp	r3, r2
    701c:	d1f9      	bne.n	7012 <_Unwind_VRS_Pop+0xfe>
    701e:	4620      	mov	r0, r4
    7020:	63ab      	str	r3, [r5, #56]	; 0x38
    7022:	f000 f8db 	bl	71dc <__gnu_Unwind_Restore_WMMXD>
    7026:	2000      	movs	r0, #0
    7028:	e782      	b.n	6f30 <_Unwind_VRS_Pop+0x1c>
    702a:	19f2      	adds	r2, r6, r7
    702c:	2a10      	cmp	r2, #16
    702e:	f63f af7e 	bhi.w	6f2e <_Unwind_VRS_Pop+0x1a>
    7032:	2e0f      	cmp	r6, #15
    7034:	f63f af7b 	bhi.w	6f2e <_Unwind_VRS_Pop+0x1a>
    7038:	682a      	ldr	r2, [r5, #0]
    703a:	07d1      	lsls	r1, r2, #31
    703c:	d508      	bpl.n	7050 <_Unwind_VRS_Pop+0x13c>
    703e:	4628      	mov	r0, r5
    7040:	f022 0203 	bic.w	r2, r2, #3
    7044:	f840 2b48 	str.w	r2, [r0], #72
    7048:	9301      	str	r3, [sp, #4]
    704a:	f000 f8b3 	bl	71b4 <__gnu_Unwind_Save_VFP>
    704e:	9b01      	ldr	r3, [sp, #4]
    7050:	9301      	str	r3, [sp, #4]
    7052:	ac22      	add	r4, sp, #136	; 0x88
    7054:	4620      	mov	r0, r4
    7056:	f000 f8ad 	bl	71b4 <__gnu_Unwind_Save_VFP>
    705a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	2f00      	cmp	r7, #0
    7060:	f000 8095 	beq.w	718e <_Unwind_VRS_Pop+0x27a>
    7064:	007f      	lsls	r7, r7, #1
    7066:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    706a:	f04f 0800 	mov.w	r8, #0
    706e:	3c04      	subs	r4, #4
    7070:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    7074:	f851 0b04 	ldr.w	r0, [r1], #4
    7078:	f844 0f04 	str.w	r0, [r4, #4]!
    707c:	4291      	cmp	r1, r2
    707e:	d1f9      	bne.n	7074 <_Unwind_VRS_Pop+0x160>
    7080:	f1b8 0f00 	cmp.w	r8, #0
    7084:	d00f      	beq.n	70a6 <_Unwind_VRS_Pop+0x192>
    7086:	ac02      	add	r4, sp, #8
    7088:	2e10      	cmp	r6, #16
    708a:	4631      	mov	r1, r6
    708c:	bf38      	it	cc
    708e:	2110      	movcc	r1, #16
    7090:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    7094:	3984      	subs	r1, #132	; 0x84
    7096:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    709a:	f852 0b04 	ldr.w	r0, [r2], #4
    709e:	f841 0f04 	str.w	r0, [r1, #4]!
    70a2:	4294      	cmp	r4, r2
    70a4:	d1f9      	bne.n	709a <_Unwind_VRS_Pop+0x186>
    70a6:	2b01      	cmp	r3, #1
    70a8:	f47f af7b 	bne.w	6fa2 <_Unwind_VRS_Pop+0x8e>
    70ac:	ac22      	add	r4, sp, #136	; 0x88
    70ae:	3204      	adds	r2, #4
    70b0:	63aa      	str	r2, [r5, #56]	; 0x38
    70b2:	4620      	mov	r0, r4
    70b4:	f000 f87a 	bl	71ac <__gnu_Unwind_Restore_VFP>
    70b8:	e77d      	b.n	6fb6 <_Unwind_VRS_Pop+0xa2>
    70ba:	f023 0308 	bic.w	r3, r3, #8
    70be:	602b      	str	r3, [r5, #0]
    70c0:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    70c4:	f000 f8ac 	bl	7220 <__gnu_Unwind_Save_WMMXD>
    70c8:	e799      	b.n	6ffe <_Unwind_VRS_Pop+0xea>
    70ca:	f1b8 0f10 	cmp.w	r8, #16
    70ce:	682a      	ldr	r2, [r5, #0]
    70d0:	d943      	bls.n	715a <_Unwind_VRS_Pop+0x246>
    70d2:	07d0      	lsls	r0, r2, #31
    70d4:	f1a8 0810 	sub.w	r8, r8, #16
    70d8:	d50b      	bpl.n	70f2 <_Unwind_VRS_Pop+0x1de>
    70da:	4628      	mov	r0, r5
    70dc:	f022 0201 	bic.w	r2, r2, #1
    70e0:	f042 0202 	orr.w	r2, r2, #2
    70e4:	f840 2b48 	str.w	r2, [r0], #72
    70e8:	9301      	str	r3, [sp, #4]
    70ea:	f000 f86b 	bl	71c4 <__gnu_Unwind_Save_VFP_D>
    70ee:	682a      	ldr	r2, [r5, #0]
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	0751      	lsls	r1, r2, #29
    70f4:	d425      	bmi.n	7142 <_Unwind_VRS_Pop+0x22e>
    70f6:	2e0f      	cmp	r6, #15
    70f8:	d804      	bhi.n	7104 <_Unwind_VRS_Pop+0x1f0>
    70fa:	a822      	add	r0, sp, #136	; 0x88
    70fc:	9301      	str	r3, [sp, #4]
    70fe:	f000 f861 	bl	71c4 <__gnu_Unwind_Save_VFP_D>
    7102:	9b01      	ldr	r3, [sp, #4]
    7104:	9301      	str	r3, [sp, #4]
    7106:	ac02      	add	r4, sp, #8
    7108:	4620      	mov	r0, r4
    710a:	f000 f863 	bl	71d4 <__gnu_Unwind_Save_VFP_D_16_to_31>
    710e:	f1c6 0110 	rsb	r1, r6, #16
    7112:	2900      	cmp	r1, #0
    7114:	6baa      	ldr	r2, [r5, #56]	; 0x38
    7116:	9b01      	ldr	r3, [sp, #4]
    7118:	ddb6      	ble.n	7088 <_Unwind_VRS_Pop+0x174>
    711a:	ac22      	add	r4, sp, #136	; 0x88
    711c:	004f      	lsls	r7, r1, #1
    711e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    7122:	4611      	mov	r1, r2
    7124:	e7a3      	b.n	706e <_Unwind_VRS_Pop+0x15a>
    7126:	a822      	add	r0, sp, #136	; 0x88
    7128:	f000 f848 	bl	71bc <__gnu_Unwind_Restore_VFP_D>
    712c:	e73d      	b.n	6faa <_Unwind_VRS_Pop+0x96>
    712e:	f023 0310 	bic.w	r3, r3, #16
    7132:	602b      	str	r3, [r5, #0]
    7134:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    7138:	9201      	str	r2, [sp, #4]
    713a:	f000 f89d 	bl	7278 <__gnu_Unwind_Save_WMMXC>
    713e:	9a01      	ldr	r2, [sp, #4]
    7140:	e701      	b.n	6f46 <_Unwind_VRS_Pop+0x32>
    7142:	4628      	mov	r0, r5
    7144:	f022 0204 	bic.w	r2, r2, #4
    7148:	f840 2bd0 	str.w	r2, [r0], #208
    714c:	9301      	str	r3, [sp, #4]
    714e:	f000 f841 	bl	71d4 <__gnu_Unwind_Save_VFP_D_16_to_31>
    7152:	9b01      	ldr	r3, [sp, #4]
    7154:	e7cf      	b.n	70f6 <_Unwind_VRS_Pop+0x1e2>
    7156:	682a      	ldr	r2, [r5, #0]
    7158:	e7cb      	b.n	70f2 <_Unwind_VRS_Pop+0x1de>
    715a:	07d0      	lsls	r0, r2, #31
    715c:	d50a      	bpl.n	7174 <_Unwind_VRS_Pop+0x260>
    715e:	4628      	mov	r0, r5
    7160:	f022 0201 	bic.w	r2, r2, #1
    7164:	f042 0202 	orr.w	r2, r2, #2
    7168:	f840 2b48 	str.w	r2, [r0], #72
    716c:	9301      	str	r3, [sp, #4]
    716e:	f000 f829 	bl	71c4 <__gnu_Unwind_Save_VFP_D>
    7172:	9b01      	ldr	r3, [sp, #4]
    7174:	9301      	str	r3, [sp, #4]
    7176:	ac22      	add	r4, sp, #136	; 0x88
    7178:	4620      	mov	r0, r4
    717a:	f000 f823 	bl	71c4 <__gnu_Unwind_Save_VFP_D>
    717e:	46b8      	mov	r8, r7
    7180:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7182:	9b01      	ldr	r3, [sp, #4]
    7184:	2f00      	cmp	r7, #0
    7186:	f47f af6d 	bne.w	7064 <_Unwind_VRS_Pop+0x150>
    718a:	460a      	mov	r2, r1
    718c:	e709      	b.n	6fa2 <_Unwind_VRS_Pop+0x8e>
    718e:	460a      	mov	r2, r1
    7190:	e78d      	b.n	70ae <_Unwind_VRS_Pop+0x19a>
    7192:	bf00      	nop

00007194 <__restore_core_regs>:
    7194:	f100 0134 	add.w	r1, r0, #52	; 0x34
    7198:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    719c:	469c      	mov	ip, r3
    719e:	46a6      	mov	lr, r4
    71a0:	f84c 5d04 	str.w	r5, [ip, #-4]!
    71a4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    71a8:	46e5      	mov	sp, ip
    71aa:	bd00      	pop	{pc}

000071ac <__gnu_Unwind_Restore_VFP>:
    71ac:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    71b0:	4770      	bx	lr
    71b2:	bf00      	nop

000071b4 <__gnu_Unwind_Save_VFP>:
    71b4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    71b8:	4770      	bx	lr
    71ba:	bf00      	nop

000071bc <__gnu_Unwind_Restore_VFP_D>:
    71bc:	ec90 0b20 	vldmia	r0, {d0-d15}
    71c0:	4770      	bx	lr
    71c2:	bf00      	nop

000071c4 <__gnu_Unwind_Save_VFP_D>:
    71c4:	ec80 0b20 	vstmia	r0, {d0-d15}
    71c8:	4770      	bx	lr
    71ca:	bf00      	nop

000071cc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    71cc:	ecd0 0b20 	vldmia	r0, {d16-d31}
    71d0:	4770      	bx	lr
    71d2:	bf00      	nop

000071d4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    71d4:	ecc0 0b20 	vstmia	r0, {d16-d31}
    71d8:	4770      	bx	lr
    71da:	bf00      	nop

000071dc <__gnu_Unwind_Restore_WMMXD>:
    71dc:	ecf0 0102 	ldfe	f0, [r0], #8
    71e0:	ecf0 1102 	ldfe	f1, [r0], #8
    71e4:	ecf0 2102 	ldfe	f2, [r0], #8
    71e8:	ecf0 3102 	ldfe	f3, [r0], #8
    71ec:	ecf0 4102 	ldfe	f4, [r0], #8
    71f0:	ecf0 5102 	ldfe	f5, [r0], #8
    71f4:	ecf0 6102 	ldfe	f6, [r0], #8
    71f8:	ecf0 7102 	ldfe	f7, [r0], #8
    71fc:	ecf0 8102 	ldfp	f0, [r0], #8
    7200:	ecf0 9102 	ldfp	f1, [r0], #8
    7204:	ecf0 a102 	ldfp	f2, [r0], #8
    7208:	ecf0 b102 	ldfp	f3, [r0], #8
    720c:	ecf0 c102 	ldfp	f4, [r0], #8
    7210:	ecf0 d102 	ldfp	f5, [r0], #8
    7214:	ecf0 e102 	ldfp	f6, [r0], #8
    7218:	ecf0 f102 	ldfp	f7, [r0], #8
    721c:	4770      	bx	lr
    721e:	bf00      	nop

00007220 <__gnu_Unwind_Save_WMMXD>:
    7220:	ece0 0102 	stfe	f0, [r0], #8
    7224:	ece0 1102 	stfe	f1, [r0], #8
    7228:	ece0 2102 	stfe	f2, [r0], #8
    722c:	ece0 3102 	stfe	f3, [r0], #8
    7230:	ece0 4102 	stfe	f4, [r0], #8
    7234:	ece0 5102 	stfe	f5, [r0], #8
    7238:	ece0 6102 	stfe	f6, [r0], #8
    723c:	ece0 7102 	stfe	f7, [r0], #8
    7240:	ece0 8102 	stfp	f0, [r0], #8
    7244:	ece0 9102 	stfp	f1, [r0], #8
    7248:	ece0 a102 	stfp	f2, [r0], #8
    724c:	ece0 b102 	stfp	f3, [r0], #8
    7250:	ece0 c102 	stfp	f4, [r0], #8
    7254:	ece0 d102 	stfp	f5, [r0], #8
    7258:	ece0 e102 	stfp	f6, [r0], #8
    725c:	ece0 f102 	stfp	f7, [r0], #8
    7260:	4770      	bx	lr
    7262:	bf00      	nop

00007264 <__gnu_Unwind_Restore_WMMXC>:
    7264:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7268:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    726c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7270:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    7274:	4770      	bx	lr
    7276:	bf00      	nop

00007278 <__gnu_Unwind_Save_WMMXC>:
    7278:	fca0 8101 	stc2	1, cr8, [r0], #4
    727c:	fca0 9101 	stc2	1, cr9, [r0], #4
    7280:	fca0 a101 	stc2	1, cr10, [r0], #4
    7284:	fca0 b101 	stc2	1, cr11, [r0], #4
    7288:	4770      	bx	lr
    728a:	bf00      	nop

0000728c <_Unwind_RaiseException>:
    728c:	46ec      	mov	ip, sp
    728e:	b500      	push	{lr}
    7290:	e92d 5000 	stmdb	sp!, {ip, lr}
    7294:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7298:	f04f 0300 	mov.w	r3, #0
    729c:	e92d 000c 	stmdb	sp!, {r2, r3}
    72a0:	a901      	add	r1, sp, #4
    72a2:	f7ff fbdd 	bl	6a60 <__gnu_Unwind_RaiseException>
    72a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    72aa:	b012      	add	sp, #72	; 0x48
    72ac:	4770      	bx	lr
    72ae:	bf00      	nop

000072b0 <_Unwind_Resume>:
    72b0:	46ec      	mov	ip, sp
    72b2:	b500      	push	{lr}
    72b4:	e92d 5000 	stmdb	sp!, {ip, lr}
    72b8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    72bc:	f04f 0300 	mov.w	r3, #0
    72c0:	e92d 000c 	stmdb	sp!, {r2, r3}
    72c4:	a901      	add	r1, sp, #4
    72c6:	f7ff fc05 	bl	6ad4 <__gnu_Unwind_Resume>
    72ca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    72ce:	b012      	add	sp, #72	; 0x48
    72d0:	4770      	bx	lr
    72d2:	bf00      	nop

000072d4 <_Unwind_Resume_or_Rethrow>:
    72d4:	46ec      	mov	ip, sp
    72d6:	b500      	push	{lr}
    72d8:	e92d 5000 	stmdb	sp!, {ip, lr}
    72dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    72e0:	f04f 0300 	mov.w	r3, #0
    72e4:	e92d 000c 	stmdb	sp!, {r2, r3}
    72e8:	a901      	add	r1, sp, #4
    72ea:	f7ff fc15 	bl	6b18 <__gnu_Unwind_Resume_or_Rethrow>
    72ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    72f2:	b012      	add	sp, #72	; 0x48
    72f4:	4770      	bx	lr
    72f6:	bf00      	nop

000072f8 <_Unwind_ForcedUnwind>:
    72f8:	46ec      	mov	ip, sp
    72fa:	b500      	push	{lr}
    72fc:	e92d 5000 	stmdb	sp!, {ip, lr}
    7300:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7304:	f04f 0300 	mov.w	r3, #0
    7308:	e92d 000c 	stmdb	sp!, {r2, r3}
    730c:	ab01      	add	r3, sp, #4
    730e:	f7ff fbd7 	bl	6ac0 <__gnu_Unwind_ForcedUnwind>
    7312:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7316:	b012      	add	sp, #72	; 0x48
    7318:	4770      	bx	lr
    731a:	bf00      	nop

0000731c <_Unwind_Backtrace>:
    731c:	46ec      	mov	ip, sp
    731e:	b500      	push	{lr}
    7320:	e92d 5000 	stmdb	sp!, {ip, lr}
    7324:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7328:	f04f 0300 	mov.w	r3, #0
    732c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7330:	aa01      	add	r2, sp, #4
    7332:	f7ff fc47 	bl	6bc4 <__gnu_Unwind_Backtrace>
    7336:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    733a:	b012      	add	sp, #72	; 0x48
    733c:	4770      	bx	lr
    733e:	bf00      	nop

00007340 <next_unwind_byte>:
    7340:	7a02      	ldrb	r2, [r0, #8]
    7342:	b982      	cbnz	r2, 7366 <next_unwind_byte+0x26>
    7344:	7a43      	ldrb	r3, [r0, #9]
    7346:	b1ab      	cbz	r3, 7374 <next_unwind_byte+0x34>
    7348:	6842      	ldr	r2, [r0, #4]
    734a:	3b01      	subs	r3, #1
    734c:	b410      	push	{r4}
    734e:	7243      	strb	r3, [r0, #9]
    7350:	6813      	ldr	r3, [r2, #0]
    7352:	2103      	movs	r1, #3
    7354:	1d14      	adds	r4, r2, #4
    7356:	7201      	strb	r1, [r0, #8]
    7358:	021a      	lsls	r2, r3, #8
    735a:	6044      	str	r4, [r0, #4]
    735c:	6002      	str	r2, [r0, #0]
    735e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7362:	0e18      	lsrs	r0, r3, #24
    7364:	4770      	bx	lr
    7366:	6803      	ldr	r3, [r0, #0]
    7368:	3a01      	subs	r2, #1
    736a:	7202      	strb	r2, [r0, #8]
    736c:	021a      	lsls	r2, r3, #8
    736e:	6002      	str	r2, [r0, #0]
    7370:	0e18      	lsrs	r0, r3, #24
    7372:	4770      	bx	lr
    7374:	20b0      	movs	r0, #176	; 0xb0
    7376:	4770      	bx	lr

00007378 <_Unwind_GetGR.constprop.0>:
    7378:	b500      	push	{lr}
    737a:	b085      	sub	sp, #20
    737c:	aa03      	add	r2, sp, #12
    737e:	2300      	movs	r3, #0
    7380:	9200      	str	r2, [sp, #0]
    7382:	4619      	mov	r1, r3
    7384:	220c      	movs	r2, #12
    7386:	f7ff fbd7 	bl	6b38 <_Unwind_VRS_Get>
    738a:	9803      	ldr	r0, [sp, #12]
    738c:	b005      	add	sp, #20
    738e:	f85d fb04 	ldr.w	pc, [sp], #4
    7392:	bf00      	nop

00007394 <unwind_UCB_from_context>:
    7394:	e7f0      	b.n	7378 <_Unwind_GetGR.constprop.0>
    7396:	bf00      	nop

00007398 <__gnu_unwind_execute>:
    7398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    739c:	4605      	mov	r5, r0
    739e:	b085      	sub	sp, #20
    73a0:	460e      	mov	r6, r1
    73a2:	f04f 0800 	mov.w	r8, #0
    73a6:	4630      	mov	r0, r6
    73a8:	f7ff ffca 	bl	7340 <next_unwind_byte>
    73ac:	28b0      	cmp	r0, #176	; 0xb0
    73ae:	4604      	mov	r4, r0
    73b0:	f000 80b1 	beq.w	7516 <__gnu_unwind_execute+0x17e>
    73b4:	0607      	lsls	r7, r0, #24
    73b6:	d520      	bpl.n	73fa <__gnu_unwind_execute+0x62>
    73b8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    73bc:	2b80      	cmp	r3, #128	; 0x80
    73be:	d065      	beq.n	748c <__gnu_unwind_execute+0xf4>
    73c0:	2b90      	cmp	r3, #144	; 0x90
    73c2:	d036      	beq.n	7432 <__gnu_unwind_execute+0x9a>
    73c4:	2ba0      	cmp	r3, #160	; 0xa0
    73c6:	d078      	beq.n	74ba <__gnu_unwind_execute+0x122>
    73c8:	2bb0      	cmp	r3, #176	; 0xb0
    73ca:	d047      	beq.n	745c <__gnu_unwind_execute+0xc4>
    73cc:	2bc0      	cmp	r3, #192	; 0xc0
    73ce:	f000 808a 	beq.w	74e6 <__gnu_unwind_execute+0x14e>
    73d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    73d6:	2bd0      	cmp	r3, #208	; 0xd0
    73d8:	d10b      	bne.n	73f2 <__gnu_unwind_execute+0x5a>
    73da:	f000 0207 	and.w	r2, r0, #7
    73de:	3201      	adds	r2, #1
    73e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    73e4:	2305      	movs	r3, #5
    73e6:	2101      	movs	r1, #1
    73e8:	4628      	mov	r0, r5
    73ea:	f7ff fd93 	bl	6f14 <_Unwind_VRS_Pop>
    73ee:	2800      	cmp	r0, #0
    73f0:	d0d9      	beq.n	73a6 <__gnu_unwind_execute+0xe>
    73f2:	2009      	movs	r0, #9
    73f4:	b005      	add	sp, #20
    73f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    73fa:	f10d 090c 	add.w	r9, sp, #12
    73fe:	2300      	movs	r3, #0
    7400:	4619      	mov	r1, r3
    7402:	0087      	lsls	r7, r0, #2
    7404:	f8cd 9000 	str.w	r9, [sp]
    7408:	220d      	movs	r2, #13
    740a:	4628      	mov	r0, r5
    740c:	f7ff fb94 	bl	6b38 <_Unwind_VRS_Get>
    7410:	b2ff      	uxtb	r7, r7
    7412:	9b03      	ldr	r3, [sp, #12]
    7414:	f8cd 9000 	str.w	r9, [sp]
    7418:	3704      	adds	r7, #4
    741a:	0660      	lsls	r0, r4, #25
    741c:	bf4c      	ite	mi
    741e:	1bdf      	submi	r7, r3, r7
    7420:	18ff      	addpl	r7, r7, r3
    7422:	2300      	movs	r3, #0
    7424:	4619      	mov	r1, r3
    7426:	220d      	movs	r2, #13
    7428:	4628      	mov	r0, r5
    742a:	9703      	str	r7, [sp, #12]
    742c:	f7ff fba6 	bl	6b7c <_Unwind_VRS_Set>
    7430:	e7b9      	b.n	73a6 <__gnu_unwind_execute+0xe>
    7432:	f000 030d 	and.w	r3, r0, #13
    7436:	2b0d      	cmp	r3, #13
    7438:	d0db      	beq.n	73f2 <__gnu_unwind_execute+0x5a>
    743a:	af03      	add	r7, sp, #12
    743c:	2300      	movs	r3, #0
    743e:	f000 020f 	and.w	r2, r0, #15
    7442:	4619      	mov	r1, r3
    7444:	9700      	str	r7, [sp, #0]
    7446:	4628      	mov	r0, r5
    7448:	f7ff fb76 	bl	6b38 <_Unwind_VRS_Get>
    744c:	2300      	movs	r3, #0
    744e:	9700      	str	r7, [sp, #0]
    7450:	4619      	mov	r1, r3
    7452:	220d      	movs	r2, #13
    7454:	4628      	mov	r0, r5
    7456:	f7ff fb91 	bl	6b7c <_Unwind_VRS_Set>
    745a:	e7a4      	b.n	73a6 <__gnu_unwind_execute+0xe>
    745c:	28b1      	cmp	r0, #177	; 0xb1
    745e:	d05f      	beq.n	7520 <__gnu_unwind_execute+0x188>
    7460:	28b2      	cmp	r0, #178	; 0xb2
    7462:	f000 80cc 	beq.w	75fe <__gnu_unwind_execute+0x266>
    7466:	28b3      	cmp	r0, #179	; 0xb3
    7468:	d07e      	beq.n	7568 <__gnu_unwind_execute+0x1d0>
    746a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    746e:	2bb4      	cmp	r3, #180	; 0xb4
    7470:	d0bf      	beq.n	73f2 <__gnu_unwind_execute+0x5a>
    7472:	f000 0207 	and.w	r2, r0, #7
    7476:	3201      	adds	r2, #1
    7478:	2301      	movs	r3, #1
    747a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    747e:	4619      	mov	r1, r3
    7480:	4628      	mov	r0, r5
    7482:	f7ff fd47 	bl	6f14 <_Unwind_VRS_Pop>
    7486:	2800      	cmp	r0, #0
    7488:	d08d      	beq.n	73a6 <__gnu_unwind_execute+0xe>
    748a:	e7b2      	b.n	73f2 <__gnu_unwind_execute+0x5a>
    748c:	4630      	mov	r0, r6
    748e:	f7ff ff57 	bl	7340 <next_unwind_byte>
    7492:	0224      	lsls	r4, r4, #8
    7494:	4304      	orrs	r4, r0
    7496:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    749a:	d0aa      	beq.n	73f2 <__gnu_unwind_execute+0x5a>
    749c:	0124      	lsls	r4, r4, #4
    749e:	2300      	movs	r3, #0
    74a0:	b2a2      	uxth	r2, r4
    74a2:	4619      	mov	r1, r3
    74a4:	4628      	mov	r0, r5
    74a6:	f7ff fd35 	bl	6f14 <_Unwind_VRS_Pop>
    74aa:	2800      	cmp	r0, #0
    74ac:	d1a1      	bne.n	73f2 <__gnu_unwind_execute+0x5a>
    74ae:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    74b2:	bf18      	it	ne
    74b4:	f04f 0801 	movne.w	r8, #1
    74b8:	e775      	b.n	73a6 <__gnu_unwind_execute+0xe>
    74ba:	43c2      	mvns	r2, r0
    74bc:	f002 0307 	and.w	r3, r2, #7
    74c0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    74c4:	411a      	asrs	r2, r3
    74c6:	0701      	lsls	r1, r0, #28
    74c8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    74cc:	f04f 0300 	mov.w	r3, #0
    74d0:	bf48      	it	mi
    74d2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    74d6:	4619      	mov	r1, r3
    74d8:	4628      	mov	r0, r5
    74da:	f7ff fd1b 	bl	6f14 <_Unwind_VRS_Pop>
    74de:	2800      	cmp	r0, #0
    74e0:	f43f af61 	beq.w	73a6 <__gnu_unwind_execute+0xe>
    74e4:	e785      	b.n	73f2 <__gnu_unwind_execute+0x5a>
    74e6:	28c6      	cmp	r0, #198	; 0xc6
    74e8:	d051      	beq.n	758e <__gnu_unwind_execute+0x1f6>
    74ea:	28c7      	cmp	r0, #199	; 0xc7
    74ec:	d05a      	beq.n	75a4 <__gnu_unwind_execute+0x20c>
    74ee:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    74f2:	2bc0      	cmp	r3, #192	; 0xc0
    74f4:	d069      	beq.n	75ca <__gnu_unwind_execute+0x232>
    74f6:	28c8      	cmp	r0, #200	; 0xc8
    74f8:	d075      	beq.n	75e6 <__gnu_unwind_execute+0x24e>
    74fa:	28c9      	cmp	r0, #201	; 0xc9
    74fc:	f47f af79 	bne.w	73f2 <__gnu_unwind_execute+0x5a>
    7500:	4630      	mov	r0, r6
    7502:	f7ff ff1d 	bl	7340 <next_unwind_byte>
    7506:	0302      	lsls	r2, r0, #12
    7508:	f000 000f 	and.w	r0, r0, #15
    750c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    7510:	3001      	adds	r0, #1
    7512:	4302      	orrs	r2, r0
    7514:	e766      	b.n	73e4 <__gnu_unwind_execute+0x4c>
    7516:	f1b8 0f00 	cmp.w	r8, #0
    751a:	d014      	beq.n	7546 <__gnu_unwind_execute+0x1ae>
    751c:	2000      	movs	r0, #0
    751e:	e769      	b.n	73f4 <__gnu_unwind_execute+0x5c>
    7520:	4630      	mov	r0, r6
    7522:	f7ff ff0d 	bl	7340 <next_unwind_byte>
    7526:	2800      	cmp	r0, #0
    7528:	f43f af63 	beq.w	73f2 <__gnu_unwind_execute+0x5a>
    752c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7530:	f47f af5f 	bne.w	73f2 <__gnu_unwind_execute+0x5a>
    7534:	4602      	mov	r2, r0
    7536:	4619      	mov	r1, r3
    7538:	4628      	mov	r0, r5
    753a:	f7ff fceb 	bl	6f14 <_Unwind_VRS_Pop>
    753e:	2800      	cmp	r0, #0
    7540:	f43f af31 	beq.w	73a6 <__gnu_unwind_execute+0xe>
    7544:	e755      	b.n	73f2 <__gnu_unwind_execute+0x5a>
    7546:	ac03      	add	r4, sp, #12
    7548:	4643      	mov	r3, r8
    754a:	220e      	movs	r2, #14
    754c:	4641      	mov	r1, r8
    754e:	9400      	str	r4, [sp, #0]
    7550:	4628      	mov	r0, r5
    7552:	f7ff faf1 	bl	6b38 <_Unwind_VRS_Get>
    7556:	9400      	str	r4, [sp, #0]
    7558:	4628      	mov	r0, r5
    755a:	4643      	mov	r3, r8
    755c:	220f      	movs	r2, #15
    755e:	4641      	mov	r1, r8
    7560:	f7ff fb0c 	bl	6b7c <_Unwind_VRS_Set>
    7564:	4640      	mov	r0, r8
    7566:	e745      	b.n	73f4 <__gnu_unwind_execute+0x5c>
    7568:	4630      	mov	r0, r6
    756a:	f7ff fee9 	bl	7340 <next_unwind_byte>
    756e:	0301      	lsls	r1, r0, #12
    7570:	f000 000f 	and.w	r0, r0, #15
    7574:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7578:	1c42      	adds	r2, r0, #1
    757a:	2301      	movs	r3, #1
    757c:	430a      	orrs	r2, r1
    757e:	4628      	mov	r0, r5
    7580:	4619      	mov	r1, r3
    7582:	f7ff fcc7 	bl	6f14 <_Unwind_VRS_Pop>
    7586:	2800      	cmp	r0, #0
    7588:	f43f af0d 	beq.w	73a6 <__gnu_unwind_execute+0xe>
    758c:	e731      	b.n	73f2 <__gnu_unwind_execute+0x5a>
    758e:	4630      	mov	r0, r6
    7590:	f7ff fed6 	bl	7340 <next_unwind_byte>
    7594:	0301      	lsls	r1, r0, #12
    7596:	f000 000f 	and.w	r0, r0, #15
    759a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    759e:	1c42      	adds	r2, r0, #1
    75a0:	2303      	movs	r3, #3
    75a2:	e7eb      	b.n	757c <__gnu_unwind_execute+0x1e4>
    75a4:	4630      	mov	r0, r6
    75a6:	f7ff fecb 	bl	7340 <next_unwind_byte>
    75aa:	4602      	mov	r2, r0
    75ac:	2800      	cmp	r0, #0
    75ae:	f43f af20 	beq.w	73f2 <__gnu_unwind_execute+0x5a>
    75b2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    75b6:	f47f af1c 	bne.w	73f2 <__gnu_unwind_execute+0x5a>
    75ba:	2104      	movs	r1, #4
    75bc:	4628      	mov	r0, r5
    75be:	f7ff fca9 	bl	6f14 <_Unwind_VRS_Pop>
    75c2:	2800      	cmp	r0, #0
    75c4:	f43f aeef 	beq.w	73a6 <__gnu_unwind_execute+0xe>
    75c8:	e713      	b.n	73f2 <__gnu_unwind_execute+0x5a>
    75ca:	f000 020f 	and.w	r2, r0, #15
    75ce:	3201      	adds	r2, #1
    75d0:	2303      	movs	r3, #3
    75d2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    75d6:	4619      	mov	r1, r3
    75d8:	4628      	mov	r0, r5
    75da:	f7ff fc9b 	bl	6f14 <_Unwind_VRS_Pop>
    75de:	2800      	cmp	r0, #0
    75e0:	f43f aee1 	beq.w	73a6 <__gnu_unwind_execute+0xe>
    75e4:	e705      	b.n	73f2 <__gnu_unwind_execute+0x5a>
    75e6:	4630      	mov	r0, r6
    75e8:	f7ff feaa 	bl	7340 <next_unwind_byte>
    75ec:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    75f0:	f000 030f 	and.w	r3, r0, #15
    75f4:	3210      	adds	r2, #16
    75f6:	3301      	adds	r3, #1
    75f8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    75fc:	e6f2      	b.n	73e4 <__gnu_unwind_execute+0x4c>
    75fe:	2300      	movs	r3, #0
    7600:	f10d 090c 	add.w	r9, sp, #12
    7604:	220d      	movs	r2, #13
    7606:	4619      	mov	r1, r3
    7608:	f8cd 9000 	str.w	r9, [sp]
    760c:	4628      	mov	r0, r5
    760e:	f7ff fa93 	bl	6b38 <_Unwind_VRS_Get>
    7612:	4630      	mov	r0, r6
    7614:	f7ff fe94 	bl	7340 <next_unwind_byte>
    7618:	0602      	lsls	r2, r0, #24
    761a:	f04f 0702 	mov.w	r7, #2
    761e:	d50c      	bpl.n	763a <__gnu_unwind_execute+0x2a2>
    7620:	9b03      	ldr	r3, [sp, #12]
    7622:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7626:	40b8      	lsls	r0, r7
    7628:	4403      	add	r3, r0
    762a:	4630      	mov	r0, r6
    762c:	9303      	str	r3, [sp, #12]
    762e:	f7ff fe87 	bl	7340 <next_unwind_byte>
    7632:	0603      	lsls	r3, r0, #24
    7634:	f107 0707 	add.w	r7, r7, #7
    7638:	d4f2      	bmi.n	7620 <__gnu_unwind_execute+0x288>
    763a:	9b03      	ldr	r3, [sp, #12]
    763c:	f8cd 9000 	str.w	r9, [sp]
    7640:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    7644:	f503 7201 	add.w	r2, r3, #516	; 0x204
    7648:	40bc      	lsls	r4, r7
    764a:	2300      	movs	r3, #0
    764c:	4414      	add	r4, r2
    764e:	4619      	mov	r1, r3
    7650:	220d      	movs	r2, #13
    7652:	4628      	mov	r0, r5
    7654:	9403      	str	r4, [sp, #12]
    7656:	f7ff fa91 	bl	6b7c <_Unwind_VRS_Set>
    765a:	e6a4      	b.n	73a6 <__gnu_unwind_execute+0xe>

0000765c <__gnu_unwind_frame>:
    765c:	b510      	push	{r4, lr}
    765e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    7660:	b084      	sub	sp, #16
    7662:	685a      	ldr	r2, [r3, #4]
    7664:	2003      	movs	r0, #3
    7666:	f88d 000c 	strb.w	r0, [sp, #12]
    766a:	79dc      	ldrb	r4, [r3, #7]
    766c:	f88d 400d 	strb.w	r4, [sp, #13]
    7670:	0212      	lsls	r2, r2, #8
    7672:	3308      	adds	r3, #8
    7674:	4608      	mov	r0, r1
    7676:	a901      	add	r1, sp, #4
    7678:	9201      	str	r2, [sp, #4]
    767a:	9302      	str	r3, [sp, #8]
    767c:	f7ff fe8c 	bl	7398 <__gnu_unwind_execute>
    7680:	b004      	add	sp, #16
    7682:	bd10      	pop	{r4, pc}

00007684 <_Unwind_GetRegionStart>:
    7684:	b508      	push	{r3, lr}
    7686:	f7ff fe85 	bl	7394 <unwind_UCB_from_context>
    768a:	6c80      	ldr	r0, [r0, #72]	; 0x48
    768c:	bd08      	pop	{r3, pc}
    768e:	bf00      	nop

00007690 <_Unwind_GetLanguageSpecificData>:
    7690:	b508      	push	{r3, lr}
    7692:	f7ff fe7f 	bl	7394 <unwind_UCB_from_context>
    7696:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    7698:	79c3      	ldrb	r3, [r0, #7]
    769a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    769e:	3008      	adds	r0, #8
    76a0:	bd08      	pop	{r3, pc}
    76a2:	bf00      	nop

000076a4 <_Unwind_GetDataRelBase>:
    76a4:	b508      	push	{r3, lr}
    76a6:	f000 f807 	bl	76b8 <abort>
    76aa:	bf00      	nop

000076ac <_Unwind_GetTextRelBase>:
    76ac:	b508      	push	{r3, lr}
    76ae:	f7ff fff9 	bl	76a4 <_Unwind_GetDataRelBase>
    76b2:	bf00      	nop

000076b4 <__aeabi_idiv0>:
    76b4:	4770      	bx	lr
    76b6:	bf00      	nop

000076b8 <abort>:
    76b8:	b508      	push	{r3, lr}
    76ba:	2006      	movs	r0, #6
    76bc:	f000 f864 	bl	7788 <raise>
    76c0:	2001      	movs	r0, #1
    76c2:	f7fc fe7f 	bl	43c4 <_exit>
    76c6:	Address 0x00000000000076c6 is out of bounds.


000076c8 <__libc_init_array>:
    76c8:	b570      	push	{r4, r5, r6, lr}
    76ca:	4e0d      	ldr	r6, [pc, #52]	; (7700 <__libc_init_array+0x38>)
    76cc:	4c0d      	ldr	r4, [pc, #52]	; (7704 <__libc_init_array+0x3c>)
    76ce:	1ba4      	subs	r4, r4, r6
    76d0:	10a4      	asrs	r4, r4, #2
    76d2:	2500      	movs	r5, #0
    76d4:	42a5      	cmp	r5, r4
    76d6:	d109      	bne.n	76ec <__libc_init_array+0x24>
    76d8:	4e0b      	ldr	r6, [pc, #44]	; (7708 <__libc_init_array+0x40>)
    76da:	4c0c      	ldr	r4, [pc, #48]	; (770c <__libc_init_array+0x44>)
    76dc:	f7f8 fe10 	bl	300 <_init>
    76e0:	1ba4      	subs	r4, r4, r6
    76e2:	10a4      	asrs	r4, r4, #2
    76e4:	2500      	movs	r5, #0
    76e6:	42a5      	cmp	r5, r4
    76e8:	d105      	bne.n	76f6 <__libc_init_array+0x2e>
    76ea:	bd70      	pop	{r4, r5, r6, pc}
    76ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    76f0:	4798      	blx	r3
    76f2:	3501      	adds	r5, #1
    76f4:	e7ee      	b.n	76d4 <__libc_init_array+0xc>
    76f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    76fa:	4798      	blx	r3
    76fc:	3501      	adds	r5, #1
    76fe:	e7f2      	b.n	76e6 <__libc_init_array+0x1e>
    7700:	0000030c 	.word	0x0000030c
    7704:	0000030c 	.word	0x0000030c
    7708:	0000030c 	.word	0x0000030c
    770c:	0000031c 	.word	0x0000031c

00007710 <memcpy>:
    7710:	b510      	push	{r4, lr}
    7712:	1e43      	subs	r3, r0, #1
    7714:	440a      	add	r2, r1
    7716:	4291      	cmp	r1, r2
    7718:	d100      	bne.n	771c <memcpy+0xc>
    771a:	bd10      	pop	{r4, pc}
    771c:	f811 4b01 	ldrb.w	r4, [r1], #1
    7720:	f803 4f01 	strb.w	r4, [r3, #1]!
    7724:	e7f7      	b.n	7716 <memcpy+0x6>

00007726 <memset>:
    7726:	4402      	add	r2, r0
    7728:	4603      	mov	r3, r0
    772a:	4293      	cmp	r3, r2
    772c:	d100      	bne.n	7730 <memset+0xa>
    772e:	4770      	bx	lr
    7730:	f803 1b01 	strb.w	r1, [r3], #1
    7734:	e7f9      	b.n	772a <memset+0x4>

00007736 <_raise_r>:
    7736:	291f      	cmp	r1, #31
    7738:	b538      	push	{r3, r4, r5, lr}
    773a:	4604      	mov	r4, r0
    773c:	460d      	mov	r5, r1
    773e:	d904      	bls.n	774a <_raise_r+0x14>
    7740:	2316      	movs	r3, #22
    7742:	6003      	str	r3, [r0, #0]
    7744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7748:	bd38      	pop	{r3, r4, r5, pc}
    774a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    774c:	b112      	cbz	r2, 7754 <_raise_r+0x1e>
    774e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7752:	b94b      	cbnz	r3, 7768 <_raise_r+0x32>
    7754:	4620      	mov	r0, r4
    7756:	f000 f831 	bl	77bc <_getpid_r>
    775a:	462a      	mov	r2, r5
    775c:	4601      	mov	r1, r0
    775e:	4620      	mov	r0, r4
    7760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7764:	f000 b818 	b.w	7798 <_kill_r>
    7768:	2b01      	cmp	r3, #1
    776a:	d00a      	beq.n	7782 <_raise_r+0x4c>
    776c:	1c59      	adds	r1, r3, #1
    776e:	d103      	bne.n	7778 <_raise_r+0x42>
    7770:	2316      	movs	r3, #22
    7772:	6003      	str	r3, [r0, #0]
    7774:	2001      	movs	r0, #1
    7776:	e7e7      	b.n	7748 <_raise_r+0x12>
    7778:	2400      	movs	r4, #0
    777a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    777e:	4628      	mov	r0, r5
    7780:	4798      	blx	r3
    7782:	2000      	movs	r0, #0
    7784:	e7e0      	b.n	7748 <_raise_r+0x12>
    7786:	Address 0x0000000000007786 is out of bounds.


00007788 <raise>:
    7788:	4b02      	ldr	r3, [pc, #8]	; (7794 <raise+0xc>)
    778a:	4601      	mov	r1, r0
    778c:	6818      	ldr	r0, [r3, #0]
    778e:	f7ff bfd2 	b.w	7736 <_raise_r>
    7792:	bf00      	nop
    7794:	10000074 	.word	0x10000074

00007798 <_kill_r>:
    7798:	b538      	push	{r3, r4, r5, lr}
    779a:	4c07      	ldr	r4, [pc, #28]	; (77b8 <_kill_r+0x20>)
    779c:	2300      	movs	r3, #0
    779e:	4605      	mov	r5, r0
    77a0:	4608      	mov	r0, r1
    77a2:	4611      	mov	r1, r2
    77a4:	6023      	str	r3, [r4, #0]
    77a6:	f7fc fe1b 	bl	43e0 <_kill>
    77aa:	1c43      	adds	r3, r0, #1
    77ac:	d102      	bne.n	77b4 <_kill_r+0x1c>
    77ae:	6823      	ldr	r3, [r4, #0]
    77b0:	b103      	cbz	r3, 77b4 <_kill_r+0x1c>
    77b2:	602b      	str	r3, [r5, #0]
    77b4:	bd38      	pop	{r3, r4, r5, pc}
    77b6:	bf00      	nop
    77b8:	10000424 	.word	0x10000424

000077bc <_getpid_r>:
    77bc:	f7fc be08 	b.w	43d0 <_getpid>

000077c0 <strlen>:
    77c0:	4603      	mov	r3, r0
    77c2:	f813 2b01 	ldrb.w	r2, [r3], #1
    77c6:	2a00      	cmp	r2, #0
    77c8:	d1fb      	bne.n	77c2 <strlen+0x2>
    77ca:	1a18      	subs	r0, r3, r0
    77cc:	3801      	subs	r0, #1
    77ce:	4770      	bx	lr

000077d0 <std::integral_constant<long long, 100ll>::value>:
    77d0:	0064 0000 0000 0000 6e69 6176 696c 0064     d.......invalid.
    77e0:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    77f0:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    7800:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    7810:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    7820:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    7830:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    7840:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    7850:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    7860:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    7870:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    7880:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    7890:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    78a0:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    78b0:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    78c0:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    78d0:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    78e0:	756f 7074 7475 735f 6d75 203a 6625 000a     output_sum: %f..
    78f0:	756f 7074 7475 735f 6d75 2d20 6b20 5f64     output_sum - kd_
    7900:	6461 756a 7473 3d20 2520 2066 202d 6625     adjust = %f - %f
    7910:	3d20 2520 0a66 0000 5b1b 3534 206d 2020      = %f....[45m   
    7920:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    7930:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7940:	256d 3e64 1b20 305b 333b 6d37 694d 696e     m%d> .[0;37mMini
    7950:	756d 206d 6176 756c 2065 756d 7473 6220     mum value must b
    7960:	2065 656c 7373 7420 6168 206e 614d 6978     e less than Maxi
    7970:	756d 206d 6176 756c 1b65 305b 0a6d 0000     mum value.[0m...
    7980:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    7990:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    79a0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    79b0:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    79c0:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    79d0:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    79e0:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    79f0:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    7a00:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    7a10:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7a20:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7a30:	333b 6d37 6f50 7472 2520 2064 6163 6e6e     ;37mPort %d cann
    7a40:	746f 6220 2065 7375 6465 6620 726f 4520     ot be used for E
    7a50:	7478 7265 616e 206c 6e49 6574 7272 7075     xternal Interrup
    7a60:	7374 202e 654e 6465 7420 206f 7375 2065     ts. Need to use 
    7a70:	5047 4f49 6f20 206e 6f50 7472 3020 6f20     GPIO on Port 0 o
    7a80:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    7a90:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    7aa0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7ab0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7ac0:	333b 6d37 6445 6567 2520 2064 6163 6e6e     ;37mEdge %d cann
    7ad0:	746f 6220 2065 7375 6465 6620 726f 4520     ot be used for E
    7ae0:	7478 7265 616e 206c 6e49 6574 7272 7075     xternal Interrup
    7af0:	7374 4e2e 6565 2064 6f74 7520 6573 6120     ts.Need to use a
    7b00:	7220 7369 6e69 2c67 6620 6c61 696c 676e      rising, falling
    7b10:	202c 726f 6220 746f 2068 6f63 666e 6769     , or both config
    7b20:	7275 7461 6f69 2e6e 5b1b 6d30 000a 0000     uration..[0m....
    7b30:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    7b40:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7b50:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7b60:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    7b70:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    7b80:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    7b90:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    7ba0:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    7bb0:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    7bc0:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    7bd0:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    7be0:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    7bf0:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    7c00:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7c10:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    7c20:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    7c30:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    7c40:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    7c50:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    7c60:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    7c70:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    7c80:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    7c90:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    7ca0:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    7cb0:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    7cc0:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    7cd0:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    7ce0:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    7cf0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7d00:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    7d10:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    7d20:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    7d30:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    7d40:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    7d50:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    7d60:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    7d70:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    7d80:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    7d90:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7da0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7db0:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    7dc0:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    7dd0:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    7de0:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    7df0:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    7e00:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    7e10:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
    7e20:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    7e30:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7e40:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7e50:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    7e60:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    7e70:	6574 3a64 2820 2031 3d3c 6320 6168 6e6e     ted: (1 <= chann
    7e80:	6c65 2e5f 6863 6e61 656e 206c 2626 6320     el_.channel && c
    7e90:	6168 6e6e 6c65 2e5f 6863 6e61 656e 206c     hannel_.channel 
    7ea0:	3d3c 3620 0a29 2020 2020 2020 2020 2020     <= 6).          
    7eb0:	6843 6e61 656e 206c 756d 7473 6220 2065     Channel must be 
    7ec0:	6562 7774 6565 206e 2031 6e61 2064 2036     between 1 and 6 
    7ed0:	6e6f 4c20 4350 3034 7878 7020 616c 6674     on LPC40xx platf
    7ee0:	726f 736d 1b2e 305b 1b6d 305b 0a6d 0000     orms..[0m.[0m...
    7ef0:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    7f00:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7f10:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7f20:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    7f30:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    7f40:	5420 7365 6574 3a64 2820 2e30 6630 3c20      Tested: (0.0f <
    7f50:	203d 7564 7974 635f 6379 656c 2620 2026     = duty_cycle && 
    7f60:	7564 7974 635f 6379 656c 3c20 203d 2e31     duty_cycle <= 1.
    7f70:	6630 0a29 2020 2020 2020 2020 2020 7564     0f).          du
    7f80:	7974 635f 6379 656c 6f20 2066 7544 7974     ty_cycle of Duty
    7f90:	4320 6379 656c 7020 6f72 6976 6564 2064      Cycle provided 
    7fa0:	7369 6f20 7475 6f20 2066 6f62 6e75 7364     is out of bounds
    7fb0:	1b2e 305b 1b6d 305b 0a6d 0000 5b1b 3134     ..[0m.[0m....[41
    7fc0:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    7fd0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7fe0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7ff0:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    8000:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    8010:	6574 3a64 2820 7266 7165 6575 636e 5f79     ted: (frequency_
    8020:	7a68 2120 203d 5f30 7a48 0a29 2020 2020     hz != 0_Hz).    
    8030:	2020 2020 2020 7750 206d 7246 7165 6575           Pwm Freque
    8040:	636e 2079 6163 6e6e 746f 6220 2065 657a     ncy cannot be ze
    8050:	6f72 4820 2e7a 5b1b 6d30 5b1b 6d30 000a     ro Hz..[0m.[0m..
    8060:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    8070:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8080:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8090:	333b 6d37 6964 6572 7463 6f69 206e 7067     ;37mdirection gp
    80a0:	6f69 2820 3170 305f 2029 6e69 7469 6169     io (p1_0) initia
    80b0:	696c 657a 1b64 305b 0a6d 0000 5b1b 3234     lized.[0m....[42
    80c0:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    80d0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    80e0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    80f0:	6461 3263 6920 696e 6974 6c61 7a69 6465     adc2 initialized
    8100:	5b1b 6d30 000a 0000 5b1b 3234 206d 2020     .[0m.....[42m   
    8110:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    8120:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8130:	256d 3e64 1b20 305b 333b 6d37 6175 7472     m%d> .[0;37muart
    8140:	6920 696e 6974 6c61 7a69 6465 5b1b 6d30      initialized.[0m
    8150:	000a 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    8160:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    8170:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8180:	1b20 305b 333b 6d37 4950 2044 6f63 746e      .[0;37mPID cont
    8190:	6f72 6c6c 7265 6920 696e 6974 6c61 7a69     roller initializ
    81a0:	6465 5b1b 6d30 000a 5b1b 3234 206d 2020     ed.[0m...[42m   
    81b0:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    81c0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    81d0:	256d 3e64 1b20 305b 333b 6d37 6f4d 6f74     m%d> .[0;37mMoto
    81e0:	2072 6f63 746e 6f72 6c6c 7265 6920 696e     r controller ini
    81f0:	6974 6c61 7a69 6465 5b1b 6d30 000a 0000     tialized.[0m....
    8200:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    8210:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8220:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8230:	333b 6d37 6552 6461 7620 6c61 6575 2520     ;37mRead value %
    8240:	2066 766f 7265 5520 5241 1b54 305b 0a6d     f over UART.[0m.
    8250:	0000 0000 500a 544f 7620 6c61 6575 203a     .....POT value: 
    8260:	3125 352e 0a66 414c 7620 6c61 6575 203a     %1.5f.LA value: 
    8270:	3125 352e 0a66 5020 4449 7620 6c61 6575     %1.5f. PID value
    8280:	203a 3125 352e 0a66 ff00 ffff               : %1.5f.....

0000828c <sjsu::PID::SetLimits(float, float)::file>:
    828c:	4950 2e44 7068 0070                         PID.hpp.

00008294 <sjsu::lpc40xx::Pin::kFunction>:
    8294:	0300 ffff                                   ....

00008298 <sjsu::lpc40xx::Pin::kResistor>:
    8298:	0203 ffff                                   ....

0000829c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    829c:	0107 ffff                                   ....

000082a0 <sjsu::lpc40xx::Pin::kOpenDrain>:
    82a0:	010a ffff                                   ....

000082a4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    82a4:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

000082b4 <sjsu::lpc40xx::Gpio::kInterruptController>:
    82b4:	8554 0000                                   T...

000082b8 <sjsu::lpc40xx::Gpio::ValidPortCheck() const::file>:
    82b8:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000082c4 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file>:
    82c4:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000082d0 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    82d0:	0000 4140                                   ..@A

000082d4 <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    82d4:	ff0c ffff                                   ....

000082d8 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    82d8:	0000 4140                                   ..@A

000082dc <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    82dc:	0100 ffff                                   ....

000082e0 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    82e0:	0100 ffff                                   ....

000082e4 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    82e4:	0500 ffff                                   ....

000082e8 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    82e8:	0108 ffff                                   ....

000082ec <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    82ec:	0208 ffff                                   ....

000082f0 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    82f0:	0208 ffff                                   ....

000082f4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    82f4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8304:	2e72 7068 0070 ffff                         r.hpp...

0000830c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    830c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    831c:	2e72 7068 0070 ffff                         r.hpp...

00008324 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8324:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8334:	2e72 7068 0070 ffff                         r.hpp...

0000833c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    833c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    834c:	2e72 7068 0070 ffff                         r.hpp...

00008354 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    8354:	8564 0000 0802 0000                         d.......

0000835c <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    835c:	8564 0000 0902 0000                         d.......

00008364 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    8364:	8564 0000 1c04 0000                         d.......

0000836c <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    836c:	8564 0000 1d04 0000                         d.......

00008374 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    8374:	8564 0000 1d01 0000                         d.......

0000837c <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    837c:	8564 0000 0902 0000                         d.......

00008384 <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    8384:	0800 ffff                                   ....

00008388 <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    8388:	0808 ffff                                   ....

0000838c <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    838c:	0110 ffff                                   ....

00008390 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    8390:	0115 ffff                                   ....

00008394 <sjsu::lpc40xx::Adc::Control::kStartCode>:
    8394:	0318 ffff                                   ....

00008398 <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    8398:	0c04 ffff                                   ....

0000839c <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    839c:	011f ffff                                   ....

000083a0 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    83a0:	8564 0000 1900 0000                         d.......

000083a8 <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    83a8:	83a0 0000 000a 0000                         ........

000083b0 <sjsu::lpc40xx::Adc::kClockFrequency>:
    83b0:	2400 4974                                   .$tI

000083b4 <sjsu::lpc40xx::Pwm::CountControl::kMode>:
    83b4:	0200 ffff                                   ....

000083b8 <sjsu::lpc40xx::Pwm::CountControl::kCountInput>:
    83b8:	0202 ffff                                   ....

000083bc <sjsu::lpc40xx::Pwm::Channel::kPwmPin1>:
    83bc:	8564 0000 0102 0000                         d.......

000083c4 <sjsu::lpc40xx::Pwm::Channel::kPwm1>:
    83c4:	004c 1000 83bc 0000 000a 0000               L...........

000083d0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    83d0:	7770 2e6d 7068 0070                         pwm.hpp.

000083d8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file>:
    83d8:	7770 2e6d 7068 0070                         pwm.hpp.

000083e0 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    83e0:	7770 2e6d 7068 0070                         pwm.hpp.

000083e8 <linear_actuator_min_velocity>:
    83e8:	0000 0000                                   ....

000083ec <linear_actuator_max_velocity>:
    83ec:	cccd 3dcc                                   ...=

000083f0 <motor_controller_freq>:
    83f0:	0000 41a0 ffff ffff                         ...A....

000083f8 <motor_controller_min_pulse>:
	...

00008400 <motor_controller_max_pulse>:
    8400:	0032 0000 0000 0000                         2.......

00008408 <main::file>:
    8408:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008414 <main::file>:
    8414:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008420 <main::file>:
    8420:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

0000842c <main::file>:
    842c:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008438 <main::file>:
    8438:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008444 <main::file>:
    8444:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008450 <vtable for sjsu::lpc40xx::Pwm>:
	...
    8458:	2c61 0000 2e11 0000 2ee1 0000 2f59 0000     a,..........Y/..

00008468 <vtable for sjsu::lpc40xx::Adc>:
	...
    8470:	297d 0000 2a99 0000 2ae9 0000               })...*...*..

0000847c <vtable for sjsu::Adc>:
	...
    8484:	5e4d 0000 5e4d 0000 5e4d 0000               M^..M^..M^..

00008490 <vtable for sjsu::lpc40xx::Uart>:
	...
    8498:	2559 0000 2619 0000 26a5 0000 2749 0000     Y%...&...&..I'..
    84a8:	2819 0000                                   .(..

000084ac <vtable for sjsu::Uart>:
	...
    84b4:	5e4d 0000 5e4d 0000 5e4d 0000 5e4d 0000     M^..M^..M^..M^..
    84c4:	5e4d 0000                                   M^..

000084c8 <vtable for sjsu::lpc40xx::SystemController>:
	...
    84d0:	1931 0000 19cd 0000 1a25 0000 1a49 0000     1.......%...I...
    84e0:	1a65 0000 1aa1 0000 1ad5 0000               e...........

000084ec <vtable for sjsu::MotorController>:
	...
    84f4:	14d9 0000 15fb 0000 166b 0000 1695 0000     ........k.......
    8504:	16d3 0000 173b 0000 179d 0000               ....;.......

00008510 <vtable for sjsu::Pwm>:
	...
    8518:	5e4d 0000 5e4d 0000 5e4d 0000 5e4d 0000     M^..M^..M^..M^..

00008528 <vtable for sjsu::lpc40xx::Gpio>:
	...
    8530:	0f9d 0000 101d 0000 1091 0000 10d5 0000     ................
    8540:	1115 0000 1275 0000 12a3 0000               ....u.......

0000854c <vtable for sjsu::cortex::InterruptController>:
	...
    8554:	0f21 0000 0f75 0000                         !...u...

0000855c <vtable for sjsu::lpc40xx::Pin>:
	...
    8564:	0c81 0000 0cb5 0000 0d25 0000 0ce9 0000     ........%.......

00008574 <main::__PRETTY_FUNCTION__>:
    8574:	6e69 2074 616d 6e69 2928 ff00               int main()..

00008580 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    8580:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8590:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    85a0:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    85b0:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    85c0:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...

000085d0 <sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__>:
    85d0:	6f62 6c6f 7320 736a 3a75 6c3a 6370 3034     bool sjsu::lpc40
    85e0:	7878 3a3a 7047 6f69 3a3a 6156 696c 5064     xx::Gpio::ValidP
    85f0:	726f 4374 6568 6b63 2928 6320 6e6f 7473     ortCheck() const
    8600:	ff00 ffff                                   ....

00008604 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__>:
    8604:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    8614:	7878 3a3a 7047 6f69 3a3a 6553 4974 746e     xx::Gpio::SetInt
    8624:	7265 7572 7470 6445 6567 7328 736a 3a75     erruptEdge(sjsu:
    8634:	473a 6970 3a6f 453a 6764 2965 6320 6e6f     :Gpio::Edge) con
    8644:	7473 ff00                                   st..

00008648 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    8648:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    8658:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    8668:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    8678:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    8688:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    8698:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    86a8:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    86b8:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    86c8:	736e 0074                                   nst.

000086cc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    86cc:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    86dc:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    86ec:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    86fc:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    870c:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    871c:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    872c:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    873c:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00008748 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    8748:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    8758:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    8768:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    8778:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    8788:	2029 6f63 736e 0074                         ) const.

00008790 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    8790:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    87a0:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    87b0:	533a 7465 7246 7165 6575 636e 2879 6e75     :SetFrequency(un
    87c0:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    87d0:	6568 7472 5f7a 2974 6320 6e6f 7473 ff00     hertz_t) const..

000087e0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__>:
    87e0:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    87f0:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    8800:	533a 7465 7544 7974 7943 6c63 2865 6c66     :SetDutyCycle(fl
    8810:	616f 2974 6320 6e6f 7473 ff00               oat) const..

0000881c <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    881c:	6976 7472 6175 206c 6a73 7573 3a3a 7453     virtual sjsu::St
    882c:	7461 7375 7320 736a 3a75 6c3a 6370 3034     atus sjsu::lpc40
    883c:	7878 3a3a 7750 3a6d 493a 696e 6974 6c61     xx::Pwm::Initial
    884c:	7a69 2865 6e75 7469 3a73 663a 6572 7571     ize(units::frequ
    885c:	6e65 7963 3a3a 6568 7472 5f7a 2974 6320     ency::hertz_t) c
    886c:	6e6f 7473 ff00 ffff                         onst....

00008874 <sjsu::PID::SetLimits(float, float)::__PRETTY_FUNCTION__>:
    8874:	6f76 6469 7320 736a 3a75 503a 4449 3a3a     void sjsu::PID::
    8884:	6553 4c74 6d69 7469 2873 6c66 616f 2c74     SetLimits(float,
    8894:	6620 6f6c 7461 0029 6e69 6176 696c 0064      float).invalid.
    88a4:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    88b4:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    88c4:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    88d4:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    88e4:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    88f4:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    8904:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    8914:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    8924:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    8934:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    8944:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    8954:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    8964:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    8974:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    8984:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    8994:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    89a4:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    89b4:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    89c4:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    89d4:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    89e4:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    89f4:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    8a04:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    8a14:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    8a24:	5b1b 3134 486d 7261 2064 6146 6c75 2074     .[41mHard Fault 
    8a34:	7845 6563 7470 6f69 206e 634f 7563 7272     Exception Occurr
    8a44:	6465 0a21 5b1b 6d30 0000 0000 3072 203a     ed!..[0m....r0: 
    8a54:	7830 3025 6c38 2c58 7220 3a31 3020 2578     0x%08lX, r1: 0x%
    8a64:	3830 586c 202c 3272 203a 7830 3025 6c38     08lX, r2: 0x%08l
    8a74:	2c58 7220 3a33 3020 2578 3830 586c 000a     X, r3: 0x%08lX..
    8a84:	3172 3a32 3020 2578 3830 586c 202c 726c     r12: 0x%08lX, lr
    8a94:	203a 7830 3025 6c38 2c58 7020 3a63 3020     : 0x%08lX, pc: 0
    8aa4:	2578 3830 586c 202c 7370 3a72 3020 2578     x%08lX, psr: 0x%
    8ab4:	3830 586c 000a 0000 1b0a 315b 333b 6d37     08lX......[1;37m
    8ac4:	5b1b 3234 506d 6f72 7267 6d61 5220 7465     .[42mProgram Ret
    8ad4:	7275 656e 2064 7845 7469 4320 646f 3a65     urned Exit Code:
    8ae4:	2520 646c 1b0a 305b 006d 0000 1b0a 315b      %ld..[0m.....[1
    8af4:	333b 6d37 5b1b 3134 506d 6f72 7267 6d61     ;37m.[41mProgram
    8b04:	5220 7465 7275 656e 2064 7845 7469 4320      Returned Exit C
    8b14:	646f 3a65 2520 646c 1b0a 305b 006d ffff     ode: %ld..[0m...
    8b24:	000a ffff                                   ....

00008b28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    8b28:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    8b38:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    8b48:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    8b58:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    8b68:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    8b78:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    8b88:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    8b98:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    8ba8:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    8bb8:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    8bc8:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    8bd8:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    8be8:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    8bf8:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    8c08:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    8c18:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    8c28:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    8c38:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    8c48:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    8c58:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    8c68:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8c78:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8c88:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    8c98:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    8ca8:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    8cb8:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    8cc8:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    8cd8:	ffff ffff 5855 0000 0001 0000 ffff ffff     ....UX..........
    8ce8:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    8cf8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8d08:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8d18:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8d28:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8d38:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    8d48:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    8d58:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    8d68:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    8d78:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    8d88:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    8d98:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    8da8:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    8db8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8dc8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8dd8:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8de8:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8df8:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    8e08:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    8e18:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    8e28:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    8e38:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    8e48:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    8e58:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    8e68:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    8e78:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    8e88:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    8e98:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    8ea8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8eb8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8ec8:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8ed8:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8ee8:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    8ef8:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    8f08:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    8f18:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    8f28:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    8f38:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    8f48:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8f58:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8f68:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8f78:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8f88:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    8f98:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    8fa8:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    8fb8:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    8fc8:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    8fd8:	5d21 0000 0001 0000 ffff ffff fffe ffff     !]..............
    8fe8:	5d51 0000 0001 0000 ffff ffff 5b1b 3134     Q]...........[41
    8ff8:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    9008:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    9018:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    9028:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    9038:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    9048:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    9058:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    9068:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    9078:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    9088:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    9098:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    90a8:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    90b8:	2174 5b1b 6d30 5b1b 6d30 000a ffff ffff     t!.[0m.[0m......

000090c8 <std::integral_constant<long long, 1ll>::value>:
    90c8:	0001 0000 0000 0000                         ........

000090d0 <config::kSystemClockRateMhz>:
    90d0:	0000 4240                                   ..@B

000090d4 <config::kRtosFrequency>:
    90d4:	0000 447a                                   ..zD

000090d8 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    90d8:	8554 0000                                   T...

000090dc <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    90dc:	8564 0000 0200 0000                         d.......

000090e4 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    90e4:	8564 0000 0300 0000                         d.......

000090ec <sjsu::lpc40xx::Uart::Port::kUart0>:
    90ec:	c000 4000 0003 0000 90dc 0000 90e4 0000     ...@............
    90fc:	0009 0000                                   ....

00009100 <sjsu::InitializePlatform()::file>:
    9100:	7473 7261 7574 2e70 7063 0070               startup.cpp.

0000910c <vtable for sjsu::cortex::SystemTimer>:
	...
    9114:	58c1 0000 59c9 0000 58e1 0000               .X...Y...X..

00009120 <vtable for sjsu::SystemTimer>:
	...
    9128:	5e4d 0000 5e4d 0000 5e4d 0000               M^..M^..M^..

00009134 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    9134:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    9144:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

00009154 <__sf_fake_stderr>:
	...

00009174 <__sf_fake_stdin>:
	...

00009194 <__sf_fake_stdout>:
	...
