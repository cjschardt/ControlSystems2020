
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00003a7d

Program Header:
0x70000001 off    0x0001aacc vaddr 0x0000aacc paddr 0x0000aacc align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000ab84 memsz 0x0000ab84 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0000ab84 align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x000200f8 vaddr 0x100000f8 paddr 0x100000f8 align 2**16
         filesz 0x00000000 memsz 0x00000e44 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000aab4  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000f8  10000000  0000ab84  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200f8  2**2  CONTENTS
  3 .bss             00000e44  100000f8  100000f8  000200f8  2**3  ALLOC
  4 .ARM.extab       00000018  0000aab4  0000aab4  0001aab4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  0000aacc  0000aacc  0001aacc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200f8  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200f8  2**2  CONTENTS
  8 .noinit          00000000  10000f3c  10000f3c  000200f8  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200f8  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020128  2**0  CONTENTS, READONLY
 11 .debug_info      0007d3e5  00000000  00000000  000201a6  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00005285  00000000  00000000  0009d58b  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00001088  00000000  00000000  000a2810  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000fa8  00000000  00000000  000a3898  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00008792  00000000  00000000  000a4840  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002d8ee  00000000  00000000  000acfd2  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     000054d8  00000000  00000000  000da8c0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f8 l    d  .bss	00000000 .bss
0000aab4 l    d  .ARM.extab	00000000 .ARM.extab
0000aacc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000f3c l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00006554 l     F .text	00000030 NVIC_EnableIRQ
00006584 l     F .text	00000030 NVIC_DisableIRQ
000065b4 l     F .text	00000054 NVIC_SetPriority
0000a9c0 l     O .text	00000004 config::kSystemClockRateMhz
0000a9c4 l     O .text	00000004 config::kRtosFrequency
00006694 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000066b0 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
10000078 l     O .data	00000004 (anonymous namespace)::system_controller
100003c8 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100003cc l     O .bss	0000000c (anonymous namespace)::uart0
1000007c l     O .data	0000000c (anonymous namespace)::system_timer
10000088 l     O .data	00000004 (anonymous namespace)::interrupt_controller
00006ba4 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00006bc8 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
0000a9f0 l     O .text	0000000c sjsu::InitializePlatform()::file
0000aa24 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00006d58 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
00006e68 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000f8 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000fc l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003b0 l     F .text	00000030 NVIC_DisableIRQ
00000632 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000064e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000742 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000075e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000814 l     F .text	00000026 _Unwind_GetGR
000009b0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000009cc l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00009ebc l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00009f40 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00009fbc l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00001448 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000a10c l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
0000a078 l     O .text	00000055 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000a0d0 l     O .text	0000003b sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__
0000a028 l     O .text	0000004f sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00002476 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000324c l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00009d74 l     O .text	00000004 motor_controller_freq
00009d78 l     O .text	00000008 motor_controller_min_pulse
00009d80 l     O .text	00000008 motor_controller_max_pulse
00009d88 l     O .text	0000000f vUartTask(void*)::file
00009ea4 l     O .text	00000016 vUartTask(void*)::__PRETTY_FUNCTION__
00009d98 l     O .text	0000000f vSensorAndActuatorTask(void*)::file
00009da8 l     O .text	0000000f vSensorAndActuatorTask(void*)::file
0000a004 l     O .text	00000023 vSensorAndActuatorTask(void*)::__PRETTY_FUNCTION__
00003586 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003636 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000365c l     F .text	00000250 __static_initialization_and_destruction_0(int, int)
000038ac l     F .text	00000010 _GLOBAL__sub_I_xUartTaskHandle
00000000 l    df *ABS*	00000000 exceptions.cpp
00003a6c l       .text	00000000 handler2_address_const
00003aec l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00003b30 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
100002b0 l     O .bss	00000064 pxReadyTasksLists
10000314 l     O .bss	00000014 xDelayedTaskList1
10000328 l     O .bss	00000014 xDelayedTaskList2
1000033c l     O .bss	00000004 pxDelayedTaskList
10000340 l     O .bss	00000004 pxOverflowDelayedTaskList
10000344 l     O .bss	00000014 xPendingReadyList
10000358 l     O .bss	00000014 xTasksWaitingTermination
1000036c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10000370 l     O .bss	00000014 xSuspendedTaskList
10000384 l     O .bss	00000004 uxCurrentNumberOfTasks
10000388 l     O .bss	00000004 xTickCount
1000038c l     O .bss	00000004 uxTopReadyPriority
10000390 l     O .bss	00000004 xSchedulerRunning
10000394 l     O .bss	00000004 uxPendedTicks
10000398 l     O .bss	00000004 xYieldPending
1000039c l     O .bss	00000004 xNumOfOverflows
100003a0 l     O .bss	00000004 uxTaskNumber
100003a4 l     O .bss	00000004 xNextTaskUnblockTime
100003a8 l     O .bss	00000004 xIdleTaskHandle
100003ac l     O .bss	00000004 uxSchedulerSuspended
100003b0 l     O .bss	00000004 ulTaskSwitchedInTime
100003b4 l     O .bss	00000004 ulTotalRunTime
00003d92 l     F .text	000000f4 prvInitialiseNewTask
00003e88 l     F .text	000000dc prvAddNewTaskToReadyList
000045bc l     F .text	00000080 prvInitialiseTaskLists
00004694 l     F .text	0000003c prvDeleteTCB
000046d0 l     F .text	0000004c prvResetNextTaskUnblockTime
00004820 l     F .text	000000cc prvAddCurrentTaskToDelayedList
000045ac l     F .text	0000000e prvIdleTask
0000463c l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 queue.c
00004a3e l     F .text	00000046 prvInitialiseNewQueue
00004dd0 l     F .text	000000d4 prvCopyDataToQueue
00004fc0 l     F .text	00000030 prvIsQueueFull
00004ef0 l     F .text	000000a4 prvUnlockQueue
00004ea4 l     F .text	0000004c prvCopyDataFromQueue
00004f94 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00005254 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00005270 l     F .text	0000002e _strlen(char const*)
0000529e l     F .text	00000028 _is_digit(char)
000052c6 l     F .text	00000048 _atoi(char const**)
0000530e l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00005550 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00005620 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0000a418 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00005700 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00005b44 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00006488 l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
100003b8 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
1000008c l     O .data	00000004 uxCriticalNesting
00006ee0 l     F .text	00000030 prvTaskExitError
00006f30 l       .text	00000000 pxCurrentTCBConst2
00006f38 l     F .text	00000024 prvPortStartFirstTask
000070c8 l     F .text	00000010 vPortEnableVFP
00007080 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_common.cpp
100003d8 l     O .bss	00000060 idle_task_tcb
10000438 l     O .bss	00000140 idle_task_stack
10000578 l     O .bss	00000060 timer_task_tcb
100005d8 l     O .bss	00000800 timer_task_stack
00000000 l    df *ABS*	00000000 timers.c
10000dd8 l     O .bss	00000014 xActiveTimerList1
10000dec l     O .bss	00000014 xActiveTimerList2
10000e00 l     O .bss	00000004 pxCurrentTimerList
10000e04 l     O .bss	00000004 pxOverflowTimerList
10000e08 l     O .bss	00000004 xTimerQueue
10000e0c l     O .bss	00000004 xTimerTaskHandle
00007638 l     F .text	00000080 prvCheckForValidListAndQueue
000072cc l     F .text	00000024 prvTimerTask
00007268 l     F .text	00000064 prvProcessExpiredTimer
00007414 l     F .text	00000084 prvInsertTimerInActiveList
0000738c l     F .text	00000048 prvGetNextExpireTime
000072f0 l     F .text	0000009c prvProcessTimerOrBlockTask
00007498 l     F .text	000000f8 prvProcessReceivedCommands
000073d4 l     F .text	00000040 prvSampleTimeNow
00007590 l     F .text	000000a8 prvSwitchTimerLists
10000e10 l     O .bss	00000004 xLastTime.6731
10000e8c l     O .bss	00000050 xStaticTimerQueue.6776
10000e14 l     O .bss	00000078 ucStaticTimerQueueStorage.6777
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 new_handler.cc
10000edc l     O .bss	00000004 (anonymous namespace)::__new_handler
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
000081c4 l     F .text	00000012 selfrel_offset31
000081d8 l     F .text	00000060 search_EIT_table
00008238 l     F .text	00000028 __gnu_unwind_get_pr_addr
00008260 l     F .text	000000a4 get_eit_entry
00008304 l     F .text	00000058 restore_non_core_regs
0000835c l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00008368 l     F .text	00000004 __gnu_unwind_24bit.isra.1
0000836c l     F .text	00000002 _Unwind_DebugHook
00008370 l     F .text	0000003e unwind_phase2
000083b0 l     F .text	000000c6 unwind_phase2_forced
00008580 l     F .text	00000018 _Unwind_GetGR
000085c4 l     F .text	0000001a _Unwind_SetGR
00008650 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00008d5c l     F .text	00000038 next_unwind_byte
00008d94 l     F .text	0000001a _Unwind_GetGR.constprop.0
00008db0 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
0000083c  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00008d14 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
0000847c g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00009d68  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00006958  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
000031ca  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00007bd0 g     F .text	00000012 .hidden __aeabi_dcmple
00002954  w    F .text	0000005c sjsu::Servo::Servo(sjsu::Servo const&)
00003958  w    F .text	0000006c sjsu::InitializeBssSection()
000050f0 g     F .text	00000010 _getpid
00009bc8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00007b0c g     F .text	0000007a .hidden __cmpdf2
00006924  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000069a0  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
00009c24  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00007b0c g     F .text	0000007a .hidden __eqdf2
0000266a  w    F .text	0000001e units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const
00009cc0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel5
00000598  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00006892  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000396  w    F .text	00000018 std::numeric_limits<float>::epsilon()
00001e40  w    F .text	000001c0 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000060  w    O .data	00000004 sjsu::newlib::in
00006fe8 g     F .text	00000034 vPortExitCritical
00009d0c  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin4
00007aa0 g     F .text	0000005a .hidden __floatdidf
10000288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001dec  w    F .text	00000020 sjsu::Pwm::Pwm()
00002688  w    F .text	000000bc sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00000782  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00009e1c  w    O .text	00000014 vtable for sjsu::Adc
00009344 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00006418 g     F .text	00000044 printf
00005040 g     F .text	00000068 vQueueWaitForMessageRestricted
00000000 g       *ABS*	00000000 __vectors_start__
0000937e g     F .text	00000002 __malloc_unlock
000020dc  w    F .text	00000056 sjsu::lpc40xx::Pwm::GetDutyCycle() const
00009c90  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel3
00003086  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00002f8a  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001ba0  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
000067f8  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
000008c8  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
00008bd0 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00008cf0 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00004bd8 g     F .text	000000b2 xQueueGenericSendFromISR
0000ab84 g       .ARM.exidx	00000000 __exidx_end
00009380  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00006bfc g     F .text	00000014 ThreadRuntimeCounter
00008924 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
00007afc g     F .text	0000008a .hidden __gtdf2
10000070  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00009d28  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm1
00002918  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
00009cb8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel4
00000b6c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
100002ac g     O .bss	00000004 pxCurrentTCB
000025a8  w    F .text	00000024 sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
000090a0 g     F .text	0000000a .hidden _Unwind_GetRegionStart
000023d4  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
00008cf0 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00009bc0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00009c6c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10010000 g       *ABS*	00000000 __top_SRAM
10000f38 g     O .bss	00000004 errno
0000ab84 g       .ARM.exidx	00000000 _etext
0000311a  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000004b4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000c64  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00008d38 g     F .text	00000022 .hidden _Unwind_Backtrace
00007b98 g     F .text	00000010 .hidden __aeabi_cdcmple
0000a9c8  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
10000114  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00007cb8 g     F .text	00000160 .hidden __aeabi_fadd
100003c0  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00007cb4 g     F .text	00000164 .hidden __subsf3
10000278 g     O .bss	00000004 shared_mem
00009c74  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000d30  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00009c4c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
000044dc g     F .text	0000002c vTaskInternalSetTimeOutState
00008bb0 g     F .text	00000018 .hidden __restore_core_regs
00008bf0 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000023d4  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
00009cf4  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin0
00009bb8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00009e30  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00006710  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00009cec  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kMode
00009384  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00002444  w    F .text	00000032 sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00006f60 g     F .text	00000054 xPortStartScheduler
00001140  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00008478 g     F .text	00000004 .hidden _Unwind_GetCFA
0000914c g     F .text	00000016 memcpy
000043cc g     F .text	0000002c vTaskPlaceOnEventList
00007b88 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000e68  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000076d0 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00002154  w    F .text	000000cc sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008598 g     F .text	0000002a .hidden _Unwind_VRS_Set
00007a28 g     F .text	00000022 .hidden __floatsidf
00006c10 g     F .text	00000060 vPortSetupTimerInterrupt
00007b04 g     F .text	00000082 .hidden __ltdf2
10000290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00007088 g     F .text	00000040 xPortSysTickHandler
00007ec8 g     F .text	00000000 .hidden __aeabi_uldivmod
10000270 g     O .bss	00000004 xSensorAndActuatorHandle
10000f3c g       .noinit	00000000 _noinit
00000d48  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00005190 g     F .text	00000048 puts
00009d04  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin2
000050cc g     F .text	00000024 vPortFree
00001a14  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00009ce8  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kPwmEnable
00001204  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
000030f6  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00009c98  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4
10000074  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000a98  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00001634  w    F .text	00000020 sjsu::Uart::Uart()
0000912c g     F .text	00000010 malloc
00009c88  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
000092e4 g     F .text	00000050 _raise_r
00007e20 g     F .text	0000001c .hidden __aeabi_i2f
10000274 g     O .bss	00000004 Q
000019c0  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
00001990  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
00007020 g     F .text	00000066 xPortPendSVHandler
00009cf0  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kCountInput
00003b9a g     F .text	00000048 vListInsertEnd
000005f0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000478  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00009368 g     F .text	00000004 _getpid_r
000085e0 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00002f64  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00007a08 g     F .text	0000001e .hidden __aeabi_ui2d
000024ea  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)
000028d0  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)
10010000 g       *ABS*	00000000 StackTop
00001e0c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
00000e04  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00007ef8 g     F .text	000002cc .hidden __udivmoddi4
00007784 g     F .text	00000000 .hidden __aeabi_drsub
000092c4 g     F .text	00000020 _sbrk_r
00009d70  w    O .text	00000004 sjsu::Servo::kDefaultFrequency
000000fc g       .text	00000000 bss_section_table
00009388  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00006ac8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00008be0 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00001654  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00003b80 g     F .text	0000001a vListInitialiseItem
00007bbc g     F .text	00000012 .hidden __aeabi_dcmplt
00008930 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00004c8c g     F .text	00000144 xQueueReceive
0000892c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000ee8 g     O .bss	00000050 xQueueRegistry
000069f8  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000280  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00008d38 g     F .text	00000022 .hidden ___Unwind_Backtrace
0000096c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00001878  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000884  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00007a4c g     F .text	00000042 .hidden __extendsfdf2
00009c64  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00007140 g     F .text	00000034 vApplicationGetTimerTaskMemory
00007790 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100003bc  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
0000aacc g       .ARM.extab	00000000 __exidx_start
000090e4 g     F .text	00000048 __libc_init_array
00007750 g     F .text	00000010 std::get_new_handler()
0000137c  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00008ca8 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
00003398  w    F .text	00000092 float sjsu::Map<float, int, float>(float, int, int, float, float)
00001424  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00007128  w    F .text	00000018 unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])
00001c50  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
000090d4 g     F .text	0000000e abort
00008ccc g     F .text	00000022 .hidden ___Unwind_Resume
0000140c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007a08 g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
0000511c g     F .text	00000044 _sbrk
000050a8 g     F .text	00000024 pvPortMalloc
1000027c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000068ac  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000029b0 g     F .text	00000544 vSensorAndActuatorTask(void*)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
000013a8  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00080000 g       *ABS*	00000000 __top_FLASH
00003b40 g     F .text	00000040 vListInitialise
000076b8 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
0000938c  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
000035a2  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00001822  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00007778 g     F .text	0000000a std::terminate()
00000564  w    F .text	00000034 units::detail::abs(float)
00007c0c g     F .text	0000009e .hidden __aeabi_d2f
00008bf8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00009bbc  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
00004190 g     F .text	00000020 xTaskGetTickCount
00004a84 g     F .text	00000154 xQueueGenericSend
000025cc  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00007cb4 g     F .text	00000164 .hidden __aeabi_fsub
00001748  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
000030ac  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
000028f4  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
00003a54 g     F .text	00000026 ArmHardFaultHandler
1000028c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000228  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000de2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000f3c g       .bss	00000000 _ebss
00009df0  w    O .text	00000018 vtable for sjsu::Pwm
00003302  w    F .text	00000096 int sjsu::Map<float, float, int>(float, float, float, int, int)
000017d4  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00009e68  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00009d4c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm5
0000320a  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000694  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000b14  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00004758 g     F .text	000000c8 xTaskPriorityDisinherit
000069c4  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
00000672  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00007e4c g     F .text	0000007c .hidden __floatdisf
0000a9d4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
000039d8 g     F .text	0000007c GetRegistersFromStack
00009c78  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
00001654  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
0000322e  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
1000026c g     O .bss	00000004 xUartTaskHandle
00004434 g     F .text	000000a8 xTaskRemoveFromEventList
00009d58  w    O .text	00000008 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00007790 g     F .text	00000276 .hidden __aeabi_dadd
00007b04 g     F .text	00000082 .hidden __ledf2
00009d1c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm0
000019c0  w    F .text	00000020 sjsu::Adc::Adc()
00007a90 g     F .text	0000006a .hidden __aeabi_ul2d
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00008bc8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00006c70  w    F .text	000000b8 sjsu::InitializePlatform()
00002220  w    F .text	000000d4 sjsu::lpc40xx::Pwm::EnablePwm(bool) const
00002fc6  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
0000aa54 g     O .text	00000020 __sf_fake_stderr
00006730  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00009d14  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin5
00007768 g     F .text	00000010 std::get_terminate()
10000f3c g       .bss	00000000 end
00001634  w    F .text	00000020 sjsu::Uart::Uart()
00008ccc g     F .text	00000022 .hidden _Unwind_Resume
00001d14  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00009d34  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm2
00008548 g     F .text	0000000c .hidden _Unwind_DeleteException
0000aa14  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
00008544 g     F .text	00000002 .hidden _Unwind_Complete
00000c1c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000268  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
000051e4 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
00007bf8 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000a9fc  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00009bd8  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00004508 g     F .text	0000008c xTaskCheckForTimeOut
00009174 g     F .text	0000009c _free_r
0000646a g     F .text	0000001c trace_write
00007be4 g     F .text	00000012 .hidden __aeabi_dcmpge
10000284  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
000034de  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000f8 g       .bss	00000000 _bss
0000778c g     F .text	0000027a .hidden __aeabi_dsub
00009c0c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001bf0  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
0000645c g     F .text	0000000e trace_initialize
00009db8  w    O .text	00000020 vtable for sjsu::Servo
00004058 g     F .text	0000001c vTaskSuspendAll
00009c7c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
00007a90 g     F .text	0000006a .hidden __floatundidf
0000774a g     F .text	00000006 __cxa_pure_virtual
00000e40  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00007e20 g     F .text	0000001c .hidden __floatsisf
00009c3c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000120  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00008db4 g     F .text	000002c4 .hidden __gnu_unwind_execute
00003c54 g     F .text	00000054 uxListRemove
00001e0c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000294  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000009fc  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008bd8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000003f8  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
0000342a  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00003280  w    F .text	00000082 float sjsu::Map<float, float, float>(float, float, float, float, float)
00006854  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00003ca8 g     F .text	00000060 xTaskCreateStatic
10000f3c g       .noinit	00000000 _end_noinit
10000128  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000af0  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00004308 g     F .text	000000c4 vTaskSwitchContext
00001188  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00009bc4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00006820  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00009ccc  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000037e  w    F .text	00000018 std::numeric_limits<float>::min()
00002918  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
000049a0 g     F .text	0000003e xQueueGenericCreateStatic
000084f0 g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000240  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
000043f8 g     F .text	0000003c vTaskPlaceOnEventListRestricted
00006838  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00006608  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
0000264e  w    F .text	0000001c float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const
1000029c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
00007a28 g     F .text	00000022 .hidden __aeabi_i2d
00009c70  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
00009c44  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00008be8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00006ae0  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000070f4 g     F .text	00000034 vApplicationGetIdleTaskMemory
00009dd8  w    O .text	00000018 vtable for sjsu::lpc40xx::Pwm
10000298  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00007e3c g     F .text	0000008c .hidden __floatundisf
000071e8 g     F .text	00000080 xTimerGenericCommand
00002954  w    F .text	0000005c sjsu::Servo::Servo(sjsu::Servo const&)
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00008ca8 g     F .text	00000022 .hidden _Unwind_RaiseException
000090d0  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
000039c4  w    F .text	00000014 sjsu::SystemInitialize()
00001a6c  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00001dec  w    F .text	00000020 sjsu::Pwm::Pwm()
00007e18 g     F .text	00000024 .hidden __aeabi_ui2f
000011c0  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00009cdc  w    O .text	00000002 sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset
000000e4 g       .text	00000000 data_section_table
10000118  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
0000250e  w    F .text	00000070 sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000937c g     F .text	00000002 __malloc_lock
00002394  w    F .text	00000040 sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const
100002a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
000076e8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000005c4  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
0000aa74 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00009d60  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file
00009cfc  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin1
000010c4  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00002000  w    F .text	000000dc sjsu::lpc40xx::Pwm::SetDutyCycle(float) const
00009162 g     F .text	00000010 memset
00002ef4 g     F .text	00000070 main
0000664c  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001d24  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00009c84  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00007e4c g     F .text	0000007c .hidden __aeabi_l2f
00002744  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00003be2 g     F .text	00000072 vListInsert
000067a4  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
0000666c  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000a9dc  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00007174 g     F .text	00000074 xTimerCreateTimerTask
00009e8c  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00007c0c g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
00006f10 g     F .text	00000026 vPortSVCHandler
00009210 g     F .text	000000b4 _malloc_r
00000000 g       *ABS*	00000000 __base_FLASH
00007aa0 g     F .text	0000005a .hidden __aeabi_l2d
00009bd0  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000068  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00007e3c g     F .text	0000008c .hidden __aeabi_ul2f
000066d4  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000119c  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
000049de g     F .text	00000060 xQueueGenericCreate
000084dc g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00006876  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00009cb0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel3
0000304a  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00008534 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
1000005c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
0000a9b8  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
0000317e  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00007b0c g     F .text	0000007a .hidden __nedf2
0000031c g     F .text	00000000 _fini
00008bb0 g     F .text	00000018 .hidden restore_core_regs
00000b30  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00008c94 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00004074 g     F .text	0000011c xTaskResumeAll
00009c5c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00003fac g     F .text	000000ac vTaskStartScheduler
000069d8  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00002756  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00002132  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000196c  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00009d40  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm4
00007cac g     F .text	0000016c .hidden __aeabi_frsub
000090c8 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000094 g     O .data	00000004 _impure_ptr
00009bd4  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000d6c  w    F .text	0000001e units::linear_scale<float>::operator()() const
00009c80  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000cf4  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000676c  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
000004e8  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00009e08  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
00004594 g     F .text	00000018 vTaskMissedYield
00003150  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000025e6  w    F .text	00000068 sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00006a8c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
100002a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00002780 g     F .text	00000150 vUartTask(void*)
000090ac g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00009bf4  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00004ff0 g     F .text	00000050 vQueueAddToRegistry
000019e0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
00003a7c g     F .text	00000070 ArmResetHandler
000041b0 g     F .text	00000158 xTaskIncrementTick
000031ac  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
000019e0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
100002a8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00008554 g     F .text	0000002a .hidden _Unwind_VRS_Get
00006748  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000090 g     O .data	00000004 __cxxabiv1::__terminate_handler
00008c80 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000ba0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00007ba8 g     F .text	00000012 .hidden __aeabi_dcmpeq
000048ec g     F .text	000000b4 xQueueGenericReset
00000bd4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00005160 g     F .text	00000030 _write
00009078 g     F .text	00000028 .hidden __gnu_unwind_frame
00001c08  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00008d14 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
00002492  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
100000f8 g       .data	00000000 _edata
00001948  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00001a84  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00006d28  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000124  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00003d08 g     F .text	0000008a xTaskCreate
00001d60  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
00007728 g     F .text	00000022 operator new(unsigned int)
00009bdc  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000d8a  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00007e18 g     F .text	00000024 .hidden __floatunsisf
00007760 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00008c3c g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
0000257e  w    F .text	0000002a sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000070dc  w    F .text	00000016 unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])
00005100 g     F .text	0000001a _kill
000038bc  w    F .text	0000009c sjsu::InitializeDataSection()
000035de  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00003f64 g     F .text	00000048 vTaskDelay
00000990  w    F .text	00000020 sjsu::DefaultUptime()
0000aa94 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
00009cc8  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
0000471c g     F .text	0000003c xTaskGetSchedulerState
000028f4  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
0000030c g       .text	00000000 __init_array_start
000090d0  w    F .text	00000002 .hidden __aeabi_idiv0
00009ca8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
000030d0  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00009ce0  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterEnable
000051d8 g     F .text	0000000c _exit
00009c54  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
00000612  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000012e4  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
000003e0  w    F .text	00000018 sjsu::Pin::GetPort() const
0000936c g     F .text	00000010 strlen
00006e78 g     F .text	00000068 pxPortInitialiseStack
10000000  w    O .data	00000004 sjsu::Uptime
00000410  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00008928  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00007b98 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00007afc g     F .text	0000008a .hidden __gedf2
00003484  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000ee4 g     O .bss	00000004 __malloc_sbrk_start
00000ffc  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007708 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000007d4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00009ca0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5
00007a4c g     F .text	00000042 .hidden __aeabi_f2d
00006fb4 g     F .text	00000034 vPortEnterCritical
000090c0 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00001330  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000ee0 g     O .bss	00000004 __malloc_free_list
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
000022f4  w    F .text	0000009e sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const
0000352e  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000444  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000778c g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
10000064  w    O .data	00000004 heap_position
00000cac  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00002ffc  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001d78  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
00009bcc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00009e4c  w    O .text	0000001c vtable for sjsu::Uart
00007cb8 g     F .text	00000160 .hidden __addsf3
000031e8  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
00009ce4  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterReset
0000a9cc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
1000006c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001688  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00009334 g     F .text	00000010 raise
0000913c g     F .text	00000010 free



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 7d 3a 00 00 6d 67 00 00 55 3a 00 00     ....}:..mg..U:..
      10:	6d 67 00 00 6d 67 00 00 6d 67 00 00 00 00 00 00     mg..mg..mg......
	...
      2c:	11 6f 00 00 6d 67 00 00 00 00 00 00 21 70 00 00     .o..mg......!p..
      3c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      4c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      5c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      6c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      7c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      8c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      9c:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      ac:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      bc:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      cc:	6d 67 00 00 6d 67 00 00 6d 67 00 00 6d 67 00 00     mg..mg..mg..mg..
      dc:	6d 67 00 00 6d 67 00 00                             mg..mg..

000000e4 <data_section_table>:
      e4:	0000ab84 	.word	0x0000ab84
      e8:	10000000 	.word	0x10000000
      ec:	000000f8 	.word	0x000000f8
      f0:	0000ab84 	.word	0x0000ab84
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f8 	.word	0x100000f8
     100:	00000e44 	.word	0x00000e44
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	000038ad 	.word	0x000038ad
     314:	00003b31 	.word	0x00003b31
     318:	00006e69 	.word	0x00006e69

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000f8 	.word	0x100000f8
     344:	00000000 	.word	0x00000000
     348:	0000aacc 	.word	0x0000aacc

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000fc 	.word	0x100000fc
     364:	0000aacc 	.word	0x0000aacc

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
     37e:	b480      	push	{r7}
     380:	af00      	add	r7, sp, #0
     382:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     386:	ee07 3a90 	vmov	s15, r3
     38a:	eeb0 0a67 	vmov.f32	s0, s15
     38e:	46bd      	mov	sp, r7
     390:	f85d 7b04 	ldr.w	r7, [sp], #4
     394:	4770      	bx	lr

00000396 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
     396:	b480      	push	{r7}
     398:	af00      	add	r7, sp, #0
     39a:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
     39e:	ee07 3a90 	vmov	s15, r3
     3a2:	eeb0 0a67 	vmov.f32	s0, s15
     3a6:	46bd      	mov	sp, r7
     3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ac:	4770      	bx	lr
     3ae:	Address 0x00000000000003ae is out of bounds.


000003b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	f003 021f 	and.w	r2, r3, #31
     3be:	4907      	ldr	r1, [pc, #28]	; (3dc <NVIC_DisableIRQ+0x2c>)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	095b      	lsrs	r3, r3, #5
     3c4:	2001      	movs	r0, #1
     3c6:	fa00 f202 	lsl.w	r2, r0, r2
     3ca:	3320      	adds	r3, #32
     3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3d0:	bf00      	nop
     3d2:	370c      	adds	r7, #12
     3d4:	46bd      	mov	sp, r7
     3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3da:	4770      	bx	lr
     3dc:	e000e100 	.word	0xe000e100

000003e0 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
  {
    return port_;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	791b      	ldrb	r3, [r3, #4]
  }
     3ec:	4618      	mov	r0, r3
     3ee:	370c      	adds	r7, #12
     3f0:	46bd      	mov	sp, r7
     3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f6:	4770      	bx	lr

000003f8 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     400:	687b      	ldr	r3, [r7, #4]
     402:	795b      	ldrb	r3, [r3, #5]
  }
     404:	4618      	mov	r0, r3
     406:	370c      	adds	r7, #12
     408:	46bd      	mov	sp, r7
     40a:	f85d 7b04 	ldr.w	r7, [sp], #4
     40e:	4770      	bx	lr

00000410 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
     418:	460b      	mov	r3, r1
     41a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     41c:	4b08      	ldr	r3, [pc, #32]	; (440 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     41e:	78f9      	ldrb	r1, [r7, #3]
     420:	781a      	ldrb	r2, [r3, #0]
     422:	785b      	ldrb	r3, [r3, #1]
     424:	021b      	lsls	r3, r3, #8
     426:	431a      	orrs	r2, r3
     428:	2300      	movs	r3, #0
     42a:	f362 030f 	bfi	r3, r2, #0, #16
     42e:	461a      	mov	r2, r3
     430:	6878      	ldr	r0, [r7, #4]
     432:	f000 f859 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     436:	bf00      	nop
     438:	3708      	adds	r7, #8
     43a:	46bd      	mov	sp, r7
     43c:	bd80      	pop	{r7, pc}
     43e:	bf00      	nop
     440:	00009380 	.word	0x00009380

00000444 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     452:	78f9      	ldrb	r1, [r7, #3]
     454:	781a      	ldrb	r2, [r3, #0]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	021b      	lsls	r3, r3, #8
     45a:	431a      	orrs	r2, r3
     45c:	2300      	movs	r3, #0
     45e:	f362 030f 	bfi	r3, r2, #0, #16
     462:	461a      	mov	r2, r3
     464:	6878      	ldr	r0, [r7, #4]
     466:	f000 f83f 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     46a:	bf00      	nop
     46c:	3708      	adds	r7, #8
     46e:	46bd      	mov	sp, r7
     470:	bd80      	pop	{r7, pc}
     472:	bf00      	nop
     474:	00009384 	.word	0x00009384

00000478 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	460b      	mov	r3, r1
     482:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     484:	78fb      	ldrb	r3, [r7, #3]
     486:	f083 0301 	eor.w	r3, r3, #1
     48a:	b2db      	uxtb	r3, r3
     48c:	4619      	mov	r1, r3
     48e:	4b08      	ldr	r3, [pc, #32]	; (4b0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     490:	781a      	ldrb	r2, [r3, #0]
     492:	785b      	ldrb	r3, [r3, #1]
     494:	021b      	lsls	r3, r3, #8
     496:	431a      	orrs	r2, r3
     498:	2300      	movs	r3, #0
     49a:	f362 030f 	bfi	r3, r2, #0, #16
     49e:	461a      	mov	r2, r3
     4a0:	6878      	ldr	r0, [r7, #4]
     4a2:	f000 f821 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4a6:	bf00      	nop
     4a8:	3708      	adds	r7, #8
     4aa:	46bd      	mov	sp, r7
     4ac:	bd80      	pop	{r7, pc}
     4ae:	bf00      	nop
     4b0:	00009388 	.word	0x00009388

000004b4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     4b4:	b580      	push	{r7, lr}
     4b6:	b082      	sub	sp, #8
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	460b      	mov	r3, r1
     4be:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     4c0:	78f9      	ldrb	r1, [r7, #3]
     4c2:	4b08      	ldr	r3, [pc, #32]	; (4e4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	785b      	ldrb	r3, [r3, #1]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	431a      	orrs	r2, r3
     4cc:	2300      	movs	r3, #0
     4ce:	f362 030f 	bfi	r3, r2, #0, #16
     4d2:	461a      	mov	r2, r3
     4d4:	6878      	ldr	r0, [r7, #4]
     4d6:	f000 f807 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4da:	bf00      	nop
     4dc:	3708      	adds	r7, #8
     4de:	46bd      	mov	sp, r7
     4e0:	bd80      	pop	{r7, pc}
     4e2:	bf00      	nop
     4e4:	0000938c 	.word	0x0000938c

000004e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ea:	b087      	sub	sp, #28
     4ec:	af00      	add	r7, sp, #0
     4ee:	60f8      	str	r0, [r7, #12]
     4f0:	460b      	mov	r3, r1
     4f2:	80ba      	strh	r2, [r7, #4]
     4f4:	72fb      	strb	r3, [r7, #11]
     4f6:	68fb      	ldr	r3, [r7, #12]
     4f8:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     4fa:	4b19      	ldr	r3, [pc, #100]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     4fc:	681c      	ldr	r4, [r3, #0]
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	4618      	mov	r0, r3
     502:	f7ff ff6d 	bl	3e0 <sjsu::Pin::GetPort() const>
     506:	4603      	mov	r3, r0
     508:	461d      	mov	r5, r3
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	4618      	mov	r0, r3
     50e:	f7ff ff73 	bl	3f8 <sjsu::Pin::GetPin() const>
     512:	4603      	mov	r3, r0
     514:	461a      	mov	r2, r3
     516:	016b      	lsls	r3, r5, #5
     518:	4413      	add	r3, r2
     51a:	009b      	lsls	r3, r3, #2
     51c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     51e:	681b      	ldr	r3, [r3, #0]
     520:	7af9      	ldrb	r1, [r7, #11]
     522:	687a      	ldr	r2, [r7, #4]
     524:	4618      	mov	r0, r3
     526:	f002 fd1d 	bl	2f64 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     52a:	4605      	mov	r5, r0
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     530:	4b0b      	ldr	r3, [pc, #44]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     532:	681c      	ldr	r4, [r3, #0]
     534:	697b      	ldr	r3, [r7, #20]
     536:	4618      	mov	r0, r3
     538:	f7ff ff52 	bl	3e0 <sjsu::Pin::GetPort() const>
     53c:	4603      	mov	r3, r0
     53e:	461e      	mov	r6, r3
     540:	697b      	ldr	r3, [r7, #20]
     542:	4618      	mov	r0, r3
     544:	f7ff ff58 	bl	3f8 <sjsu::Pin::GetPin() const>
     548:	4603      	mov	r3, r0
     54a:	461a      	mov	r2, r3
     54c:	0173      	lsls	r3, r6, #5
     54e:	4413      	add	r3, r2
     550:	009b      	lsls	r3, r3, #2
     552:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     554:	601d      	str	r5, [r3, #0]
  }
     556:	bf00      	nop
     558:	371c      	adds	r7, #28
     55a:	46bd      	mov	sp, r7
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	bf00      	nop
     560:	10000114 	.word	0x10000114

00000564 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	ed87 0a01 	vstr	s0, [r7, #4]
			return x < 0 ? -x : x;
     56e:	edd7 7a01 	vldr	s15, [r7, #4]
     572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     57a:	d504      	bpl.n	586 <units::detail::abs(float)+0x22>
     57c:	edd7 7a01 	vldr	s15, [r7, #4]
     580:	eef1 7a67 	vneg.f32	s15, s15
     584:	e001      	b.n	58a <units::detail::abs(float)+0x26>
     586:	edd7 7a01 	vldr	s15, [r7, #4]
		}
     58a:	eeb0 0a67 	vmov.f32	s0, s15
     58e:	370c      	adds	r7, #12
     590:	46bd      	mov	sp, r7
     592:	f85d 7b04 	ldr.w	r7, [sp], #4
     596:	4770      	bx	lr

00000598 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     598:	b580      	push	{r7, lr}
     59a:	b084      	sub	sp, #16
     59c:	af00      	add	r7, sp, #0
     59e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
     5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
     5a6:	f007 fc49 	bl	7e3c <__aeabi_ul2f>
     5aa:	4602      	mov	r2, r0
     5ac:	f107 030c 	add.w	r3, r7, #12
     5b0:	ee00 2a10 	vmov	s0, r2
     5b4:	4618      	mov	r0, r3
     5b6:	f000 f85c 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	4618      	mov	r0, r3
     5be:	3710      	adds	r7, #16
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}

000005c4 <units::literals::operator"" _MHz(unsigned long long)>:
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     5ce:	e9d7 0100 	ldrd	r0, r1, [r7]
     5d2:	f007 fc33 	bl	7e3c <__aeabi_ul2f>
     5d6:	4602      	mov	r2, r0
     5d8:	f107 030c 	add.w	r3, r7, #12
     5dc:	ee00 2a10 	vmov	s0, r2
     5e0:	4618      	mov	r0, r3
     5e2:	f000 f805 	bl	5f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	4618      	mov	r0, r3
     5ea:	3710      	adds	r7, #16
     5ec:	46bd      	mov	sp, r7
     5ee:	bd80      	pop	{r7, pc}

000005f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
     5f8:	ed87 0a00 	vstr	s0, [r7]
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	463a      	mov	r2, r7
     600:	4611      	mov	r1, r2
     602:	4618      	mov	r0, r3
     604:	f000 f805 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     608:	687b      	ldr	r3, [r7, #4]
     60a:	4618      	mov	r0, r3
     60c:	3708      	adds	r7, #8
     60e:	46bd      	mov	sp, r7
     610:	bd80      	pop	{r7, pc}

00000612 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     612:	b480      	push	{r7}
     614:	b083      	sub	sp, #12
     616:	af00      	add	r7, sp, #0
     618:	6078      	str	r0, [r7, #4]
     61a:	6039      	str	r1, [r7, #0]
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	681a      	ldr	r2, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	601a      	str	r2, [r3, #0]
     624:	687b      	ldr	r3, [r7, #4]
     626:	4618      	mov	r0, r3
     628:	370c      	adds	r7, #12
     62a:	46bd      	mov	sp, r7
     62c:	f85d 7b04 	ldr.w	r7, [sp], #4
     630:	4770      	bx	lr

00000632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     632:	b580      	push	{r7, lr}
     634:	b086      	sub	sp, #24
     636:	af00      	add	r7, sp, #0
     638:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	f000 f807 	bl	64e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     640:	eef0 7a40 	vmov.f32	s15, s0
	}
     644:	eeb0 0a67 	vmov.f32	s0, s15
     648:	3718      	adds	r7, #24
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}

0000064e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     64e:	b480      	push	{r7}
     650:	b085      	sub	sp, #20
     652:	af00      	add	r7, sp, #0
     654:	60f8      	str	r0, [r7, #12]
     656:	7239      	strb	r1, [r7, #8]
     658:	713a      	strb	r2, [r7, #4]
     65a:	703b      	strb	r3, [r7, #0]
			return value;
     65c:	68fb      	ldr	r3, [r7, #12]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	ee07 3a90 	vmov	s15, r3
		}
     664:	eeb0 0a67 	vmov.f32	s0, s15
     668:	3714      	adds	r7, #20
     66a:	46bd      	mov	sp, r7
     66c:	f85d 7b04 	ldr.w	r7, [sp], #4
     670:	4770      	bx	lr

00000672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     672:	b580      	push	{r7, lr}
     674:	b082      	sub	sp, #8
     676:	af00      	add	r7, sp, #0
     678:	6078      	str	r0, [r7, #4]
     67a:	ed87 0a00 	vstr	s0, [r7]
     67e:	687b      	ldr	r3, [r7, #4]
     680:	463a      	mov	r2, r7
     682:	4611      	mov	r1, r2
     684:	4618      	mov	r0, r3
     686:	f7ff ffc4 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	4618      	mov	r0, r3
     68e:	3708      	adds	r7, #8
     690:	46bd      	mov	sp, r7
     692:	bd80      	pop	{r7, pc}

00000694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     694:	b580      	push	{r7, lr}
     696:	ed2d 8b04 	vpush	{d8-d9}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	ed93 8a00 	vldr	s16, [r3]
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	4618      	mov	r0, r3
     6ac:	f000 f849 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6b0:	eef0 7a40 	vmov.f32	s15, s0
     6b4:	ee78 7a67 	vsub.f32	s15, s16, s15
     6b8:	eeb0 0a67 	vmov.f32	s0, s15
     6bc:	f7ff ff52 	bl	564 <units::detail::abs(float)>
     6c0:	eef0 8a40 	vmov.f32	s17, s0
     6c4:	f7ff fe67 	bl	396 <std::numeric_limits<float>::epsilon()>
     6c8:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	ed93 8a00 	vldr	s16, [r3]
     6d2:	683b      	ldr	r3, [r7, #0]
     6d4:	4618      	mov	r0, r3
     6d6:	f000 f834 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6da:	eef0 7a40 	vmov.f32	s15, s0
     6de:	ee78 7a27 	vadd.f32	s15, s16, s15
     6e2:	eeb0 0a67 	vmov.f32	s0, s15
     6e6:	f7ff ff3d 	bl	564 <units::detail::abs(float)>
     6ea:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6ee:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6f2:	eef4 8ae7 	vcmpe.f32	s17, s15
     6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6fa:	d419      	bmi.n	730 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	ed93 8a00 	vldr	s16, [r3]
     702:	683b      	ldr	r3, [r7, #0]
     704:	4618      	mov	r0, r3
     706:	f000 f81c 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     70a:	eef0 7a40 	vmov.f32	s15, s0
     70e:	ee78 7a67 	vsub.f32	s15, s16, s15
     712:	eeb0 0a67 	vmov.f32	s0, s15
     716:	f7ff ff25 	bl	564 <units::detail::abs(float)>
     71a:	eeb0 8a40 	vmov.f32	s16, s0
     71e:	f7ff fe2e 	bl	37e <std::numeric_limits<float>::min()>
     722:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     726:	eeb4 8ae7 	vcmpe.f32	s16, s15
     72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     72e:	d501      	bpl.n	734 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
     730:	2301      	movs	r3, #1
     732:	e000      	b.n	736 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
     734:	2300      	movs	r3, #0
		}
     736:	4618      	mov	r0, r3
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	ecbd 8b04 	vpop	{d8-d9}
     740:	bd80      	pop	{r7, pc}

00000742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     742:	b580      	push	{r7, lr}
     744:	b086      	sub	sp, #24
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     74a:	6878      	ldr	r0, [r7, #4]
     74c:	f000 f807 	bl	75e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     750:	eef0 7a40 	vmov.f32	s15, s0
	}
     754:	eeb0 0a67 	vmov.f32	s0, s15
     758:	3718      	adds	r7, #24
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}

0000075e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     75e:	b480      	push	{r7}
     760:	b085      	sub	sp, #20
     762:	af00      	add	r7, sp, #0
     764:	60f8      	str	r0, [r7, #12]
     766:	7239      	strb	r1, [r7, #8]
     768:	713a      	strb	r2, [r7, #4]
     76a:	703b      	strb	r3, [r7, #0]
			return value;
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	ee07 3a90 	vmov	s15, r3
		}
     774:	eeb0 0a67 	vmov.f32	s0, s15
     778:	3714      	adds	r7, #20
     77a:	46bd      	mov	sp, r7
     77c:	f85d 7b04 	ldr.w	r7, [sp], #4
     780:	4770      	bx	lr

00000782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     782:	b580      	push	{r7, lr}
     784:	b086      	sub	sp, #24
     786:	af00      	add	r7, sp, #0
     788:	6078      	str	r0, [r7, #4]
     78a:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	3308      	adds	r3, #8
     792:	681b      	ldr	r3, [r3, #0]
     794:	6839      	ldr	r1, [r7, #0]
     796:	6878      	ldr	r0, [r7, #4]
     798:	4798      	blx	r3
     79a:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     79c:	f04f 0300 	mov.w	r3, #0
     7a0:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7a2:	697b      	ldr	r3, [r7, #20]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d00f      	beq.n	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	330c      	adds	r3, #12
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	4798      	blx	r3
     7b4:	4603      	mov	r3, r0
     7b6:	613b      	str	r3, [r7, #16]
     7b8:	f107 0310 	add.w	r3, r7, #16
     7bc:	6979      	ldr	r1, [r7, #20]
     7be:	4618      	mov	r0, r3
     7c0:	f002 fbe3 	bl	2f8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     7c4:	4603      	mov	r3, r0
     7c6:	60fb      	str	r3, [r7, #12]
    }
    return result;
     7c8:	68fb      	ldr	r3, [r7, #12]
  }
     7ca:	4618      	mov	r0, r3
     7cc:	3718      	adds	r7, #24
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	Address 0x00000000000007d2 is out of bounds.


000007d4 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     7d4:	b480      	push	{r7}
     7d6:	b085      	sub	sp, #20
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     7de:	60fb      	str	r3, [r7, #12]
  switch (target)
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d002      	beq.n	7ec <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     7e6:	2b01      	cmp	r3, #1
     7e8:	d003      	beq.n	7f2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     7ea:	e005      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     7ee:	60fb      	str	r3, [r7, #12]
     7f0:	e002      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     7f4:	60fb      	str	r3, [r7, #12]
     7f6:	bf00      	nop
  }
  return result;
     7f8:	68fb      	ldr	r3, [r7, #12]
}
     7fa:	4618      	mov	r0, r3
     7fc:	3714      	adds	r7, #20
     7fe:	46bd      	mov	sp, r7
     800:	f85d 7b04 	ldr.w	r7, [sp], #4
     804:	4770      	bx	lr
     806:	bf00      	nop
     808:	00009390 	.word	0x00009390
     80c:	00009398 	.word	0x00009398
     810:	000093a4 	.word	0x000093a4

00000814 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     814:	b580      	push	{r7, lr}
     816:	b086      	sub	sp, #24
     818:	af02      	add	r7, sp, #8
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     81e:	683a      	ldr	r2, [r7, #0]
     820:	f107 030c 	add.w	r3, r7, #12
     824:	9300      	str	r3, [sp, #0]
     826:	2300      	movs	r3, #0
     828:	2100      	movs	r1, #0
     82a:	6878      	ldr	r0, [r7, #4]
     82c:	f007 fe92 	bl	8554 <_Unwind_VRS_Get>
      return val;
     830:	68fb      	ldr	r3, [r7, #12]
    }
     832:	4618      	mov	r0, r3
     834:	3710      	adds	r7, #16
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	Address 0x000000000000083a is out of bounds.


0000083c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     846:	683b      	ldr	r3, [r7, #0]
     848:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     84a:	210f      	movs	r1, #15
     84c:	6878      	ldr	r0, [r7, #4]
     84e:	f7ff ffe1 	bl	814 <_Unwind_GetGR>
     852:	4603      	mov	r3, r0
     854:	f023 0301 	bic.w	r3, r3, #1
     858:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	6819      	ldr	r1, [r3, #0]
     85e:	68bb      	ldr	r3, [r7, #8]
     860:	3b04      	subs	r3, #4
     862:	461a      	mov	r2, r3
     864:	4806      	ldr	r0, [pc, #24]	; (880 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     866:	f005 fdd7 	bl	6418 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     86a:	68fb      	ldr	r3, [r7, #12]
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	1c5a      	adds	r2, r3, #1
     870:	68fb      	ldr	r3, [r7, #12]
     872:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     874:	2300      	movs	r3, #0
}
     876:	4618      	mov	r0, r3
     878:	3710      	adds	r7, #16
     87a:	46bd      	mov	sp, r7
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop
     880:	000093b0 	.word	0x000093b0

00000884 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
     88c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     88e:	683b      	ldr	r3, [r7, #0]
     890:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     892:	210f      	movs	r1, #15
     894:	6878      	ldr	r0, [r7, #4]
     896:	f7ff ffbd 	bl	814 <_Unwind_GetGR>
     89a:	4603      	mov	r3, r0
     89c:	f023 0301 	bic.w	r3, r3, #1
     8a0:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	3b04      	subs	r3, #4
     8a6:	4619      	mov	r1, r3
     8a8:	4806      	ldr	r0, [pc, #24]	; (8c4 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     8aa:	f005 fdb5 	bl	6418 <printf>
  (*depth)++;
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	1c5a      	adds	r2, r3, #1
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     8b8:	2300      	movs	r3, #0
}
     8ba:	4618      	mov	r0, r3
     8bc:	3710      	adds	r7, #16
     8be:	46bd      	mov	sp, r7
     8c0:	bd80      	pop	{r7, pc}
     8c2:	bf00      	nop
     8c4:	000093c0 	.word	0x000093c0

000008c8 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
     8ce:	4603      	mov	r3, r0
     8d0:	6039      	str	r1, [r7, #0]
     8d2:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     8d8:	f107 030c 	add.w	r3, r7, #12
     8dc:	4619      	mov	r1, r3
     8de:	481a      	ldr	r0, [pc, #104]	; (948 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     8e0:	f008 fa2a 	bl	8d38 <_Unwind_Backtrace>
    if (final_address)
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d005      	beq.n	8f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	683a      	ldr	r2, [r7, #0]
     8ee:	4619      	mov	r1, r3
     8f0:	4816      	ldr	r0, [pc, #88]	; (94c <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     8f2:	f005 fd91 	bl	6418 <printf>
    }

    if (show_make_command)
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d020      	beq.n	93e <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     8fc:	4814      	ldr	r0, [pc, #80]	; (950 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     8fe:	f005 fd8b 	bl	6418 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     902:	4814      	ldr	r0, [pc, #80]	; (954 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     904:	f005 fd88 	bl	6418 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     908:	2000      	movs	r0, #0
     90a:	f7ff ff63 	bl	7d4 <sjsu::build::Stringify(sjsu::build::Target)>
     90e:	4603      	mov	r3, r0
     910:	4619      	mov	r1, r3
     912:	4811      	ldr	r0, [pc, #68]	; (958 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     914:	f005 fd80 	bl	6418 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     918:	f107 030c 	add.w	r3, r7, #12
     91c:	4619      	mov	r1, r3
     91e:	480f      	ldr	r0, [pc, #60]	; (95c <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     920:	f008 fa0a 	bl	8d38 <_Unwind_Backtrace>
      if (final_address)
     924:	683b      	ldr	r3, [r7, #0]
     926:	2b00      	cmp	r3, #0
     928:	d003      	beq.n	932 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     92a:	6839      	ldr	r1, [r7, #0]
     92c:	480c      	ldr	r0, [pc, #48]	; (960 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     92e:	f005 fd73 	bl	6418 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     932:	480c      	ldr	r0, [pc, #48]	; (964 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     934:	f005 fd70 	bl	6418 <printf>
      printf(
     938:	480b      	ldr	r0, [pc, #44]	; (968 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     93a:	f004 fc29 	bl	5190 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     93e:	bf00      	nop
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	0000083d 	.word	0x0000083d
     94c:	000093c8 	.word	0x000093c8
     950:	000093d4 	.word	0x000093d4
     954:	0000940c 	.word	0x0000940c
     958:	00009418 	.word	0x00009418
     95c:	00000885 	.word	0x00000885
     960:	00009434 	.word	0x00009434
     964:	0000943c 	.word	0x0000943c
     968:	00009444 	.word	0x00009444

0000096c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     96c:	b490      	push	{r4, r7}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     976:	683b      	ldr	r3, [r7, #0]
     978:	e9d3 3400 	ldrd	r3, r4, [r3]
     97c:	687a      	ldr	r2, [r7, #4]
     97e:	e9c2 3400 	strd	r3, r4, [r2]
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	3708      	adds	r7, #8
     988:	46bd      	mov	sp, r7
     98a:	bc90      	pop	{r4, r7}
     98c:	4770      	bx	lr
     98e:	Address 0x000000000000098e is out of bounds.


00000990 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     990:	b580      	push	{r7, lr}
     992:	b082      	sub	sp, #8
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	4903      	ldr	r1, [pc, #12]	; (9ac <sjsu::DefaultUptime()+0x1c>)
     99e:	4618      	mov	r0, r3
     9a0:	f002 fb11 	bl	2fc6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	3708      	adds	r7, #8
     9a8:	46bd      	mov	sp, r7
     9aa:	bd80      	pop	{r7, pc}
     9ac:	10000118 	.word	0x10000118

000009b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     9b0:	b580      	push	{r7, lr}
     9b2:	b086      	sub	sp, #24
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     9b8:	6878      	ldr	r0, [r7, #4]
     9ba:	f000 f807 	bl	9cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     9be:	eef0 7a40 	vmov.f32	s15, s0
	}
     9c2:	eeb0 0a67 	vmov.f32	s0, s15
     9c6:	3718      	adds	r7, #24
     9c8:	46bd      	mov	sp, r7
     9ca:	bd80      	pop	{r7, pc}

000009cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	60f8      	str	r0, [r7, #12]
     9d4:	7239      	strb	r1, [r7, #8]
     9d6:	713a      	strb	r2, [r7, #4]
     9d8:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	edd3 7a00 	vldr	s15, [r3]
     9e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9f8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     9e4:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     9e8:	eeb0 0a67 	vmov.f32	s0, s15
     9ec:	3714      	adds	r7, #20
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	49742400 	.word	0x49742400

000009fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
     a04:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     a06:	2100      	movs	r1, #0
     a08:	6878      	ldr	r0, [r7, #4]
     a0a:	f000 f8e3 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     a0e:	f04f 000c 	mov.w	r0, #12
     a12:	f04f 0100 	mov.w	r1, #0
     a16:	f7ff fdd5 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     a1a:	4603      	mov	r3, r0
     a1c:	60bb      	str	r3, [r7, #8]
     a1e:	f107 0208 	add.w	r2, r7, #8
     a22:	463b      	mov	r3, r7
     a24:	4611      	mov	r1, r2
     a26:	4618      	mov	r0, r3
     a28:	f002 fb0f 	bl	304a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     a2c:	4603      	mov	r3, r0
     a2e:	2b00      	cmp	r3, #0
     a30:	d00f      	beq.n	a52 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     a32:	4b16      	ldr	r3, [pc, #88]	; (a8c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     a34:	683a      	ldr	r2, [r7, #0]
     a36:	6819      	ldr	r1, [r3, #0]
     a38:	6878      	ldr	r0, [r7, #4]
     a3a:	f000 fadf 	bl	ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     a3e:	2101      	movs	r1, #1
     a40:	6878      	ldr	r0, [r7, #4]
     a42:	f000 f8eb 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     a46:	463b      	mov	r3, r7
     a48:	4619      	mov	r1, r3
     a4a:	4811      	ldr	r0, [pc, #68]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a4c:	f002 fb1b 	bl	3086 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     a50:	e007      	b.n	a62 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     a52:	2100      	movs	r1, #0
     a54:	6878      	ldr	r0, [r7, #4]
     a56:	f000 f8e1 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     a5a:	490e      	ldr	r1, [pc, #56]	; (a94 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     a5c:	480c      	ldr	r0, [pc, #48]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a5e:	f002 fb12 	bl	3086 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     a62:	2101      	movs	r1, #1
     a64:	6878      	ldr	r0, [r7, #4]
     a66:	f000 fb2d 	bl	10c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     a6a:	23ff      	movs	r3, #255	; 0xff
     a6c:	733b      	strb	r3, [r7, #12]
     a6e:	f107 030c 	add.w	r3, r7, #12
     a72:	2201      	movs	r2, #1
     a74:	4619      	mov	r1, r3
     a76:	6878      	ldr	r0, [r7, #4]
     a78:	f000 f80e 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     a7c:	2100      	movs	r1, #0
     a7e:	6878      	ldr	r0, [r7, #4]
     a80:	f000 fb5e 	bl	1140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     a84:	bf00      	nop
     a86:	3710      	adds	r7, #16
     a88:	46bd      	mov	sp, r7
     a8a:	bd80      	pop	{r7, pc}
     a8c:	00009bb8 	.word	0x00009bb8
     a90:	10000004 	.word	0x10000004
     a94:	00009bc0 	.word	0x00009bc0

00000a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     a98:	b580      	push	{r7, lr}
     a9a:	b084      	sub	sp, #16
     a9c:	af00      	add	r7, sp, #0
     a9e:	60f8      	str	r0, [r7, #12]
     aa0:	60b9      	str	r1, [r7, #8]
     aa2:	4613      	mov	r3, r2
     aa4:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	2b04      	cmp	r3, #4
     aaa:	d90d      	bls.n	ac8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     aac:	23b2      	movs	r3, #178	; 0xb2
     aae:	4a0b      	ldr	r2, [pc, #44]	; (adc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     ab0:	490b      	ldr	r1, [pc, #44]	; (ae0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     ab2:	480c      	ldr	r0, [pc, #48]	; (ae4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     ab4:	f005 fcb0 	bl	6418 <printf>
     ab8:	480b      	ldr	r0, [pc, #44]	; (ae8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     aba:	f004 fb69 	bl	5190 <puts>
     abe:	2100      	movs	r1, #0
     ac0:	2001      	movs	r0, #1
     ac2:	f7ff ff01 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     ac6:	e7fe      	b.n	ac6 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     ac8:	4b08      	ldr	r3, [pc, #32]	; (aec <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	79fa      	ldrb	r2, [r7, #7]
     ace:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     ad2:	bf00      	nop
     ad4:	3710      	adds	r7, #16
     ad6:	46bd      	mov	sp, r7
     ad8:	bd80      	pop	{r7, pc}
     ada:	bf00      	nop
     adc:	00009ebc 	.word	0x00009ebc
     ae0:	00009bdc 	.word	0x00009bdc
     ae4:	00009498 	.word	0x00009498
     ae8:	00009538 	.word	0x00009538
     aec:	10000120 	.word	0x10000120

00000af0 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     af0:	b480      	push	{r7}
     af2:	b083      	sub	sp, #12
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     b02:	4618      	mov	r0, r3
     b04:	370c      	adds	r7, #12
     b06:	46bd      	mov	sp, r7
     b08:	f85d 7b04 	ldr.w	r7, [sp], #4
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	10000120 	.word	0x10000120

00000b14 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     b14:	b480      	push	{r7}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     b1e:	681b      	ldr	r3, [r3, #0]
  }
     b20:	4618      	mov	r0, r3
     b22:	370c      	adds	r7, #12
     b24:	46bd      	mov	sp, r7
     b26:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2a:	4770      	bx	lr
     b2c:	10000004 	.word	0x10000004

00000b30 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     b30:	b480      	push	{r7}
     b32:	b085      	sub	sp, #20
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     b3a:	4b0b      	ldr	r3, [pc, #44]	; (b68 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     b42:	683a      	ldr	r2, [r7, #0]
     b44:	7812      	ldrb	r2, [r2, #0]
     b46:	4611      	mov	r1, r2
     b48:	2201      	movs	r2, #1
     b4a:	408a      	lsls	r2, r1
     b4c:	4013      	ands	r3, r2
     b4e:	2b00      	cmp	r3, #0
     b50:	bf14      	ite	ne
     b52:	2301      	movne	r3, #1
     b54:	2300      	moveq	r3, #0
     b56:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     b58:	7bfb      	ldrb	r3, [r7, #15]
  }
     b5a:	4618      	mov	r0, r3
     b5c:	3714      	adds	r7, #20
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	10000120 	.word	0x10000120

00000b6c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     b6c:	b590      	push	{r4, r7, lr}
     b6e:	b083      	sub	sp, #12
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
     b74:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b78:	681b      	ldr	r3, [r3, #0]
     b7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	4619      	mov	r1, r3
    system_controller->PCONP =
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b86:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b88:	4610      	mov	r0, r2
     b8a:	f002 fa8f 	bl	30ac <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     b8e:	4603      	mov	r3, r0
    system_controller->PCONP =
     b90:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     b94:	bf00      	nop
     b96:	370c      	adds	r7, #12
     b98:	46bd      	mov	sp, r7
     b9a:	bd90      	pop	{r4, r7, pc}
     b9c:	10000120 	.word	0x10000120

00000ba0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
     ba8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	4619      	mov	r1, r3
    system_controller->PCONP =
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bba:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     bbc:	4610      	mov	r0, r2
     bbe:	f002 fa87 	bl	30d0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     bc2:	4603      	mov	r3, r0
    system_controller->PCONP =
     bc4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     bc8:	bf00      	nop
     bca:	370c      	adds	r7, #12
     bcc:	46bd      	mov	sp, r7
     bce:	bd90      	pop	{r4, r7, pc}
     bd0:	10000120 	.word	0x10000120

00000bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     bd4:	b590      	push	{r4, r7, lr}
     bd6:	b083      	sub	sp, #12
     bd8:	af00      	add	r7, sp, #0
     bda:	6078      	str	r0, [r7, #4]
     bdc:	460b      	mov	r3, r1
     bde:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     be0:	4b0c      	ldr	r3, [pc, #48]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     be8:	8879      	ldrh	r1, [r7, #2]
     bea:	4b0a      	ldr	r3, [pc, #40]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     bec:	681c      	ldr	r4, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	785b      	ldrb	r3, [r3, #1]
     bf4:	021b      	lsls	r3, r3, #8
     bf6:	431a      	orrs	r2, r3
     bf8:	2300      	movs	r3, #0
     bfa:	f362 030f 	bfi	r3, r2, #0, #16
     bfe:	461a      	mov	r2, r3
     c00:	f002 fa79 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c04:	4603      	mov	r3, r0
     c06:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	bd90      	pop	{r4, r7, pc}
     c12:	bf00      	nop
     c14:	10000120 	.word	0x10000120
     c18:	00009bc4 	.word	0x00009bc4

00000c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     c1c:	b590      	push	{r4, r7, lr}
     c1e:	b083      	sub	sp, #12
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
     c24:	460b      	mov	r3, r1
     c26:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     c30:	8879      	ldrh	r1, [r7, #2]
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c34:	681c      	ldr	r4, [r3, #0]
     c36:	4b0a      	ldr	r3, [pc, #40]	; (c60 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     c38:	781a      	ldrb	r2, [r3, #0]
     c3a:	785b      	ldrb	r3, [r3, #1]
     c3c:	021b      	lsls	r3, r3, #8
     c3e:	431a      	orrs	r2, r3
     c40:	2300      	movs	r3, #0
     c42:	f362 030f 	bfi	r3, r2, #0, #16
     c46:	461a      	mov	r2, r3
     c48:	f002 fa55 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c4c:	4603      	mov	r3, r0
     c4e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     c52:	bf00      	nop
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bd90      	pop	{r4, r7, pc}
     c5a:	bf00      	nop
     c5c:	10000120 	.word	0x10000120
     c60:	00009bd0 	.word	0x00009bd0

00000c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     c64:	b590      	push	{r4, r7, lr}
     c66:	b083      	sub	sp, #12
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	460b      	mov	r3, r1
     c6e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     c78:	8879      	ldrh	r1, [r7, #2]
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c7c:	681c      	ldr	r4, [r3, #0]
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     c80:	781a      	ldrb	r2, [r3, #0]
     c82:	785b      	ldrb	r3, [r3, #1]
     c84:	021b      	lsls	r3, r3, #8
     c86:	431a      	orrs	r2, r3
     c88:	2300      	movs	r3, #0
     c8a:	f362 030f 	bfi	r3, r2, #0, #16
     c8e:	461a      	mov	r2, r3
     c90:	f002 fa31 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c94:	4603      	mov	r3, r0
     c96:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	bd90      	pop	{r4, r7, pc}
     ca2:	bf00      	nop
     ca4:	10000120 	.word	0x10000120
     ca8:	00009bd4 	.word	0x00009bd4

00000cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     cac:	b590      	push	{r4, r7, lr}
     cae:	b083      	sub	sp, #12
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
     cb4:	460b      	mov	r3, r1
     cb6:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     cb8:	4b0c      	ldr	r3, [pc, #48]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     cc0:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cc4:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	785b      	ldrb	r3, [r3, #1]
     ccc:	021b      	lsls	r3, r3, #8
     cce:	431a      	orrs	r2, r3
     cd0:	2300      	movs	r3, #0
     cd2:	f362 030f 	bfi	r3, r2, #0, #16
     cd6:	461a      	mov	r2, r3
     cd8:	f002 fa0d 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     cdc:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     cde:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     ce2:	bf00      	nop
     ce4:	370c      	adds	r7, #12
     ce6:	46bd      	mov	sp, r7
     ce8:	bd90      	pop	{r4, r7, pc}
     cea:	bf00      	nop
     cec:	10000120 	.word	0x10000120
     cf0:	00009bd8 	.word	0x00009bd8

00000cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     cf4:	b580      	push	{r7, lr}
     cf6:	ed2d 8b02 	vpush	{d8}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
     d00:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	ed93 8a00 	vldr	s16, [r3]
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	4618      	mov	r0, r3
     d0c:	f7ff fc91 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     d10:	eef0 7a40 	vmov.f32	s15, s0
     d14:	eeb4 8ae7 	vcmpe.f32	s16, s15
     d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d1c:	bf4c      	ite	mi
     d1e:	2301      	movmi	r3, #1
     d20:	2300      	movpl	r3, #0
     d22:	b2db      	uxtb	r3, r3
		}
     d24:	4618      	mov	r0, r3
     d26:	3708      	adds	r7, #8
     d28:	46bd      	mov	sp, r7
     d2a:	ecbd 8b02 	vpop	{d8}
     d2e:	bd80      	pop	{r7, pc}

00000d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     d38:	6878      	ldr	r0, [r7, #4]
     d3a:	f000 f805 	bl	d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     d3e:	4603      	mov	r3, r0
		}
     d40:	4618      	mov	r0, r3
     d42:	3708      	adds	r7, #8
     d44:	46bd      	mov	sp, r7
     d46:	bd80      	pop	{r7, pc}

00000d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	4618      	mov	r0, r3
     d54:	f000 f80a 	bl	d6c <units::linear_scale<float>::operator()() const>
     d58:	eef0 7a40 	vmov.f32	s15, s0
     d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d60:	ee17 3a90 	vmov	r3, s15
		}
     d64:	4618      	mov	r0, r3
     d66:	3708      	adds	r7, #8
     d68:	46bd      	mov	sp, r7
     d6a:	bd80      	pop	{r7, pc}

00000d6c <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     d6c:	b480      	push	{r7}
     d6e:	b083      	sub	sp, #12
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	ee07 3a90 	vmov	s15, r3
     d7c:	eeb0 0a67 	vmov.f32	s0, s15
     d80:	370c      	adds	r7, #12
     d82:	46bd      	mov	sp, r7
     d84:	f85d 7b04 	ldr.w	r7, [sp], #4
     d88:	4770      	bx	lr

00000d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     d8a:	b580      	push	{r7, lr}
     d8c:	ed2d 8b02 	vpush	{d8}
     d90:	b084      	sub	sp, #16
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
     d96:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	4618      	mov	r0, r3
     d9c:	f7ff ffe6 	bl	d6c <units::linear_scale<float>::operator()() const>
     da0:	eeb0 8a40 	vmov.f32	s16, s0
     da4:	683b      	ldr	r3, [r7, #0]
     da6:	4618      	mov	r0, r3
     da8:	f7ff ffe0 	bl	d6c <units::linear_scale<float>::operator()() const>
     dac:	eef0 7a40 	vmov.f32	s15, s0
     db0:	edc7 7a03 	vstr	s15, [r7, #12]
     db4:	f107 030c 	add.w	r3, r7, #12
     db8:	4618      	mov	r0, r3
     dba:	f7ff fc3a 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     dbe:	eeb0 7a40 	vmov.f32	s14, s0
     dc2:	eec8 7a07 	vdiv.f32	s15, s16, s14
     dc6:	f107 0308 	add.w	r3, r7, #8
     dca:	eeb0 0a67 	vmov.f32	s0, s15
     dce:	4618      	mov	r0, r3
     dd0:	f000 f807 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     dd4:	68bb      	ldr	r3, [r7, #8]
	}
     dd6:	4618      	mov	r0, r3
     dd8:	3710      	adds	r7, #16
     dda:	46bd      	mov	sp, r7
     ddc:	ecbd 8b02 	vpop	{d8}
     de0:	bd80      	pop	{r7, pc}

00000de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     de2:	b580      	push	{r7, lr}
     de4:	b082      	sub	sp, #8
     de6:	af00      	add	r7, sp, #0
     de8:	6078      	str	r0, [r7, #4]
     dea:	ed87 0a00 	vstr	s0, [r7]
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	463a      	mov	r2, r7
     df2:	4611      	mov	r1, r2
     df4:	4618      	mov	r0, r3
     df6:	f7ff fc0c 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	4618      	mov	r0, r3
     dfe:	3708      	adds	r7, #8
     e00:	46bd      	mov	sp, r7
     e02:	bd80      	pop	{r7, pc}

00000e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	4618      	mov	r0, r3
     e12:	f7ff ffab 	bl	d6c <units::linear_scale<float>::operator()() const>
     e16:	eeb0 7a40 	vmov.f32	s14, s0
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	ee07 3a90 	vmov	s15, r3
     e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e24:	ee77 7a27 	vadd.f32	s15, s14, s15
     e28:	f107 030c 	add.w	r3, r7, #12
     e2c:	eeb0 0a67 	vmov.f32	s0, s15
     e30:	4618      	mov	r0, r3
     e32:	f7ff ffd6 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     e36:	68fb      	ldr	r3, [r7, #12]
	}
     e38:	4618      	mov	r0, r3
     e3a:	3710      	adds	r7, #16
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}

00000e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	4618      	mov	r0, r3
     e4c:	f7ff ff8e 	bl	d6c <units::linear_scale<float>::operator()() const>
     e50:	eef0 7a40 	vmov.f32	s15, s0
     e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e58:	ee17 3a90 	vmov	r3, s15
     e5c:	b29b      	uxth	r3, r3
		}
     e5e:	4618      	mov	r0, r3
     e60:	3708      	adds	r7, #8
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	Address 0x0000000000000e66 is out of bounds.


00000e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     e68:	b590      	push	{r4, r7, lr}
     e6a:	b08d      	sub	sp, #52	; 0x34
     e6c:	af00      	add	r7, sp, #0
     e6e:	60f8      	str	r0, [r7, #12]
     e70:	60b9      	str	r1, [r7, #8]
     e72:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     e74:	f44f 70c0 	mov.w	r0, #384	; 0x180
     e78:	f04f 0100 	mov.w	r1, #0
     e7c:	f7ff fba2 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     e80:	4603      	mov	r3, r0
     e82:	613b      	str	r3, [r7, #16]
     e84:	f107 0210 	add.w	r2, r7, #16
     e88:	1d3b      	adds	r3, r7, #4
     e8a:	4611      	mov	r1, r2
     e8c:	4618      	mov	r0, r3
     e8e:	f7ff ff31 	bl	cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     e92:	4603      	mov	r3, r0
     e94:	f083 0301 	eor.w	r3, r3, #1
     e98:	b2db      	uxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	d114      	bne.n	ec8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     e9e:	f04f 000c 	mov.w	r0, #12
     ea2:	f04f 0100 	mov.w	r1, #0
     ea6:	f7ff fb8d 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     eaa:	4603      	mov	r3, r0
     eac:	617b      	str	r3, [r7, #20]
     eae:	f107 0214 	add.w	r2, r7, #20
     eb2:	1d3b      	adds	r3, r7, #4
     eb4:	4611      	mov	r1, r2
     eb6:	4618      	mov	r0, r3
     eb8:	f002 f8c7 	bl	304a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     ebc:	4603      	mov	r3, r0
     ebe:	f083 0301 	eor.w	r3, r3, #1
     ec2:	b2db      	uxtb	r3, r3
     ec4:	2b00      	cmp	r3, #0
     ec6:	d001      	beq.n	ecc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     ec8:	2301      	movs	r3, #1
     eca:	e000      	b.n	ece <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     ecc:	2300      	movs	r3, #0
     ece:	2b00      	cmp	r3, #0
     ed0:	d00d      	beq.n	eee <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     ed2:	23f6      	movs	r3, #246	; 0xf6
     ed4:	4a43      	ldr	r2, [pc, #268]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     ed6:	4944      	ldr	r1, [pc, #272]	; (fe8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     ed8:	4844      	ldr	r0, [pc, #272]	; (fec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     eda:	f005 fa9d 	bl	6418 <printf>
     ede:	4844      	ldr	r0, [pc, #272]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     ee0:	f004 f956 	bl	5190 <puts>
     ee4:	2100      	movs	r1, #0
     ee6:	2001      	movs	r0, #1
     ee8:	f7ff fcee 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     eec:	e7fe      	b.n	eec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     eee:	2301      	movs	r3, #1
     ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     ef4:	1d3b      	adds	r3, r7, #4
     ef6:	4618      	mov	r0, r3
     ef8:	f7ff ff1a 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     efc:	4604      	mov	r4, r0
     efe:	f107 0308 	add.w	r3, r7, #8
     f02:	4618      	mov	r0, r3
     f04:	f7ff ff14 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     f08:	4603      	mov	r3, r0
     f0a:	fbb4 f2f3 	udiv	r2, r4, r3
     f0e:	fb03 f302 	mul.w	r3, r3, r2
     f12:	1ae3      	subs	r3, r4, r3
     f14:	2b00      	cmp	r3, #0
     f16:	bf14      	ite	ne
     f18:	2301      	movne	r3, #1
     f1a:	2300      	moveq	r3, #0
     f1c:	b2db      	uxtb	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	d017      	beq.n	f52 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     f22:	f107 0208 	add.w	r2, r7, #8
     f26:	1d3b      	adds	r3, r7, #4
     f28:	4611      	mov	r1, r2
     f2a:	4618      	mov	r0, r3
     f2c:	f7ff ff2d 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f30:	4603      	mov	r3, r0
     f32:	61fb      	str	r3, [r7, #28]
     f34:	f107 031c 	add.w	r3, r7, #28
     f38:	2101      	movs	r1, #1
     f3a:	4618      	mov	r0, r3
     f3c:	f7ff ff62 	bl	e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     f40:	4603      	mov	r3, r0
     f42:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     f44:	f107 0318 	add.w	r3, r7, #24
     f48:	4618      	mov	r0, r3
     f4a:	f002 f8e6 	bl	311a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f4e:	62b8      	str	r0, [r7, #40]	; 0x28
     f50:	e00e      	b.n	f70 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     f52:	f107 0208 	add.w	r2, r7, #8
     f56:	1d3b      	adds	r3, r7, #4
     f58:	4611      	mov	r1, r2
     f5a:	4618      	mov	r0, r3
     f5c:	f7ff ff15 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f60:	4603      	mov	r3, r0
     f62:	623b      	str	r3, [r7, #32]
      multiplier_value =
     f64:	f107 0320 	add.w	r3, r7, #32
     f68:	4618      	mov	r0, r3
     f6a:	f002 f8d6 	bl	311a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f6e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     f70:	2301      	movs	r3, #1
     f72:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f78:	2b00      	cmp	r3, #0
     f7a:	d02d      	beq.n	fd8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     f7c:	f107 0308 	add.w	r3, r7, #8
     f80:	4618      	mov	r0, r3
     f82:	f7ff ff5d 	bl	e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     f86:	4603      	mov	r3, r0
     f88:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f8c:	b29b      	uxth	r3, r3
     f8e:	fb12 f303 	smulbb	r3, r2, r3
     f92:	b29b      	uxth	r3, r3
     f94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     f96:	fb12 f303 	smulbb	r3, r2, r3
     f9a:	b29b      	uxth	r3, r3
     f9c:	005b      	lsls	r3, r3, #1
     f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     fa2:	2b9b      	cmp	r3, #155	; 0x9b
     fa4:	d903      	bls.n	fae <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     fa6:	2300      	movs	r3, #0
     fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     fac:	e7e2      	b.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb0:	005b      	lsls	r3, r3, #1
     fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb6:	2b07      	cmp	r3, #7
     fb8:	d9dc      	bls.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     fba:	f44f 7389 	mov.w	r3, #274	; 0x112
     fbe:	4a09      	ldr	r2, [pc, #36]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     fc0:	490c      	ldr	r1, [pc, #48]	; (ff4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     fc2:	480d      	ldr	r0, [pc, #52]	; (ff8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     fc4:	f005 fa28 	bl	6418 <printf>
     fc8:	4809      	ldr	r0, [pc, #36]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     fca:	f004 f8e1 	bl	5190 <puts>
     fce:	2100      	movs	r1, #0
     fd0:	2001      	movs	r0, #1
     fd2:	f7ff fc79 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     fd6:	e7fe      	b.n	fd6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     fda:	4618      	mov	r0, r3
     fdc:	3734      	adds	r7, #52	; 0x34
     fde:	46bd      	mov	sp, r7
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	bf00      	nop
     fe4:	00009f40 	.word	0x00009f40
     fe8:	00009bf4 	.word	0x00009bf4
     fec:	00009550 	.word	0x00009550
     ff0:	00009538 	.word	0x00009538
     ff4:	00009c0c 	.word	0x00009c0c
     ff8:	00009640 	.word	0x00009640

00000ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     ffc:	b580      	push	{r7, lr}
     ffe:	b086      	sub	sp, #24
    1000:	af00      	add	r7, sp, #0
    1002:	60f8      	str	r0, [r7, #12]
    1004:	60b9      	str	r1, [r7, #8]
    1006:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    1008:	2301      	movs	r3, #1
    100a:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    100c:	687a      	ldr	r2, [r7, #4]
    100e:	68b9      	ldr	r1, [r7, #8]
    1010:	68f8      	ldr	r0, [r7, #12]
    1012:	f7ff ff29 	bl	e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    1016:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1018:	2100      	movs	r1, #0
    101a:	68f8      	ldr	r0, [r7, #12]
    101c:	f7ff fdda 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1020:	2100      	movs	r1, #0
    1022:	68f8      	ldr	r0, [r7, #12]
    1024:	f7ff fdfa 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1028:	2100      	movs	r1, #0
    102a:	68f8      	ldr	r0, [r7, #12]
    102c:	f7ff fe1a 	bl	c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1030:	2100      	movs	r1, #0
    1032:	68f8      	ldr	r0, [r7, #12]
    1034:	f7ff fe3a 	bl	cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1038:	4b21      	ldr	r3, [pc, #132]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1040:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1048:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    104a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    104c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    104e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1052:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    105a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    105e:	8afb      	ldrh	r3, [r7, #22]
    1060:	015b      	lsls	r3, r3, #5
    1062:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1064:	4b16      	ldr	r3, [pc, #88]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1066:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1068:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    106e:	4b14      	ldr	r3, [pc, #80]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1076:	4b12      	ldr	r3, [pc, #72]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	f042 0201 	orr.w	r2, r2, #1
    107e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    1082:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	22aa      	movs	r2, #170	; 0xaa
    1088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	2255      	movs	r2, #85	; 0x55
    1092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    109e:	210a      	movs	r1, #10
    10a0:	4618      	mov	r0, r3
    10a2:	f002 f855 	bl	3150 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    10a6:	4603      	mov	r3, r0
    10a8:	f083 0301 	eor.w	r3, r3, #1
    10ac:	b2db      	uxtb	r3, r3
    10ae:	2b00      	cmp	r3, #0
    10b0:	d001      	beq.n	10b6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    10b2:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    10b4:	e7ef      	b.n	1096 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    10b6:	bf00      	nop
    10b8:	3718      	adds	r7, #24
    10ba:	46bd      	mov	sp, r7
    10bc:	bd80      	pop	{r7, pc}
    10be:	bf00      	nop
    10c0:	10000120 	.word	0x10000120

000010c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    10c4:	b590      	push	{r4, r7, lr}
    10c6:	b083      	sub	sp, #12
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
    10cc:	460b      	mov	r3, r1
    10ce:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    10d0:	78fb      	ldrb	r3, [r7, #3]
    10d2:	2b1f      	cmp	r3, #31
    10d4:	d90e      	bls.n	10f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    10d6:	f44f 73a9 	mov.w	r3, #338	; 0x152
    10da:	4a13      	ldr	r2, [pc, #76]	; (1128 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    10dc:	4913      	ldr	r1, [pc, #76]	; (112c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    10de:	4814      	ldr	r0, [pc, #80]	; (1130 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    10e0:	f005 f99a 	bl	6418 <printf>
    10e4:	4813      	ldr	r0, [pc, #76]	; (1134 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    10e6:	f004 f853 	bl	5190 <puts>
    10ea:	2100      	movs	r1, #0
    10ec:	2001      	movs	r0, #1
    10ee:	f7ff fbeb 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    10f2:	e7fe      	b.n	10f2 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    10f4:	4b10      	ldr	r3, [pc, #64]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10f6:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    10f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10fe:	681c      	ldr	r4, [r3, #0]
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    1102:	78f9      	ldrb	r1, [r7, #3]
    1104:	781a      	ldrb	r2, [r3, #0]
    1106:	785b      	ldrb	r3, [r3, #1]
    1108:	021b      	lsls	r3, r3, #8
    110a:	431a      	orrs	r2, r3
    110c:	2300      	movs	r3, #0
    110e:	f362 030f 	bfi	r3, r2, #0, #16
    1112:	461a      	mov	r2, r3
    1114:	f001 ff26 	bl	2f64 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1118:	4603      	mov	r3, r0
    111a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    111e:	bf00      	nop
    1120:	370c      	adds	r7, #12
    1122:	46bd      	mov	sp, r7
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	bf00      	nop
    1128:	00009fbc 	.word	0x00009fbc
    112c:	00009c24 	.word	0x00009c24
    1130:	000096e8 	.word	0x000096e8
    1134:	00009538 	.word	0x00009538
    1138:	10000120 	.word	0x10000120
    113c:	00009bcc 	.word	0x00009bcc

00001140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1140:	b590      	push	{r4, r7, lr}
    1142:	b083      	sub	sp, #12
    1144:	af00      	add	r7, sp, #0
    1146:	6078      	str	r0, [r7, #4]
    1148:	460b      	mov	r3, r1
    114a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    114c:	4b0c      	ldr	r3, [pc, #48]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1154:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1158:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	785b      	ldrb	r3, [r3, #1]
    1160:	021b      	lsls	r3, r3, #8
    1162:	431a      	orrs	r2, r3
    1164:	2300      	movs	r3, #0
    1166:	f362 030f 	bfi	r3, r2, #0, #16
    116a:	461a      	mov	r2, r3
    116c:	f001 ffc3 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1170:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    1172:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    1176:	bf00      	nop
    1178:	370c      	adds	r7, #12
    117a:	46bd      	mov	sp, r7
    117c:	bd90      	pop	{r4, r7, pc}
    117e:	bf00      	nop
    1180:	10000120 	.word	0x10000120
    1184:	00009bc8 	.word	0x00009bc8

00001188 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    1188:	b480      	push	{r7}
    118a:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    118c:	4b02      	ldr	r3, [pc, #8]	; (1198 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    118e:	4618      	mov	r0, r3
    1190:	46bd      	mov	sp, r7
    1192:	f85d 7b04 	ldr.w	r7, [sp], #4
    1196:	4770      	bx	lr
    1198:	10000008 	.word	0x10000008

0000119c <sjsu::Uart::Write(unsigned char) const>:
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  /// @param byte - Write a single byte to the UART port.
  void Write(uint8_t byte) const
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	6078      	str	r0, [r7, #4]
    11a4:	460b      	mov	r3, r1
    11a6:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	3308      	adds	r3, #8
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	1cf9      	adds	r1, r7, #3
    11b2:	2201      	movs	r2, #1
    11b4:	6878      	ldr	r0, [r7, #4]
    11b6:	4798      	blx	r3
  }
    11b8:	bf00      	nop
    11ba:	3708      	adds	r7, #8
    11bc:	46bd      	mov	sp, r7
    11be:	bd80      	pop	{r7, pc}

000011c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  }
  /// Wait to receive just 1 byte
  ///
  /// @param timeout - The maximum amount of time to wait for a byte to be
  ///        transmitted.
  uint8_t Read(std::chrono::microseconds timeout =
    11c0:	b5b0      	push	{r4, r5, r7, lr}
    11c2:	b088      	sub	sp, #32
    11c4:	af02      	add	r7, sp, #8
    11c6:	60f8      	str	r0, [r7, #12]
    11c8:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	330c      	adds	r3, #12
    11d2:	681d      	ldr	r5, [r3, #0]
    11d4:	f107 0117 	add.w	r1, r7, #23
    11d8:	e9d7 3400 	ldrd	r3, r4, [r7]
    11dc:	e9cd 3400 	strd	r3, r4, [sp]
    11e0:	2201      	movs	r2, #1
    11e2:	68f8      	ldr	r0, [r7, #12]
    11e4:	47a8      	blx	r5
    11e6:	4603      	mov	r3, r0
    11e8:	2b01      	cmp	r3, #1
    11ea:	bf0c      	ite	eq
    11ec:	2301      	moveq	r3, #1
    11ee:	2300      	movne	r3, #0
    11f0:	b2db      	uxtb	r3, r3
    11f2:	2b00      	cmp	r3, #0
    11f4:	d001      	beq.n	11fa <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    11f6:	23ff      	movs	r3, #255	; 0xff
    11f8:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    11fa:	7dfb      	ldrb	r3, [r7, #23]
  }
    11fc:	4618      	mov	r0, r3
    11fe:	3718      	adds	r7, #24
    1200:	46bd      	mov	sp, r7
    1202:	bdb0      	pop	{r4, r5, r7, pc}

00001204 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    1204:	b480      	push	{r7}
    1206:	b089      	sub	sp, #36	; 0x24
    1208:	af00      	add	r7, sp, #0
    120a:	6078      	str	r0, [r7, #4]
    120c:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	2200      	movs	r2, #0
    1214:	601a      	str	r2, [r3, #0]
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	2200      	movs	r2, #0
    121a:	605a      	str	r2, [r3, #4]
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	2201      	movs	r2, #1
    1220:	609a      	str	r2, [r3, #8]
  bool finished = false;
    1222:	2300      	movs	r3, #0
    1224:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    1226:	2300      	movs	r3, #0
    1228:	61bb      	str	r3, [r7, #24]
    122a:	69bb      	ldr	r3, [r7, #24]
    122c:	2b0e      	cmp	r3, #14
    122e:	dc4f      	bgt.n	12d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    1230:	7ffb      	ldrb	r3, [r7, #31]
    1232:	2b00      	cmp	r3, #0
    1234:	d14c      	bne.n	12d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1236:	69bb      	ldr	r3, [r7, #24]
    1238:	3301      	adds	r3, #1
    123a:	617b      	str	r3, [r7, #20]
    123c:	697b      	ldr	r3, [r7, #20]
    123e:	2b0e      	cmp	r3, #14
    1240:	dc42      	bgt.n	12c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    1242:	7ffb      	ldrb	r3, [r7, #31]
    1244:	2b00      	cmp	r3, #0
    1246:	d13f      	bne.n	12c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    1248:	69bb      	ldr	r3, [r7, #24]
    124a:	ee07 3a90 	vmov	s15, r3
    124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1252:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    1256:	697b      	ldr	r3, [r7, #20]
    1258:	ee07 3a90 	vmov	s15, r3
    125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1260:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    1264:	edd7 6a04 	vldr	s13, [r7, #16]
    1268:	ed97 7a03 	vldr	s14, [r7, #12]
    126c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1274:	ee77 7a87 	vadd.f32	s15, s15, s14
    1278:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    127c:	edd7 7a02 	vldr	s15, [r7, #8]
    1280:	ed9f 7a17 	vldr	s14, [pc, #92]	; 12e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1284:	ee77 7a87 	vadd.f32	s15, s15, s14
    1288:	ed97 7a00 	vldr	s14, [r7]
    128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1294:	d814      	bhi.n	12c0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    1296:	edd7 7a02 	vldr	s15, [r7, #8]
    129a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 12e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    129e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    12a2:	ed97 7a00 	vldr	s14, [r7]
    12a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12ae:	db07      	blt.n	12c0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    12b0:	69ba      	ldr	r2, [r7, #24]
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    12b6:	697a      	ldr	r2, [r7, #20]
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	609a      	str	r2, [r3, #8]
        finished          = true;
    12bc:	2301      	movs	r3, #1
    12be:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    12c0:	697b      	ldr	r3, [r7, #20]
    12c2:	3301      	adds	r3, #1
    12c4:	617b      	str	r3, [r7, #20]
    12c6:	e7b9      	b.n	123c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	3301      	adds	r3, #1
    12cc:	61bb      	str	r3, [r7, #24]
    12ce:	e7ac      	b.n	122a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    12d0:	bf00      	nop
}
    12d2:	6878      	ldr	r0, [r7, #4]
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop
    12e0:	3d4ccccd 	.word	0x3d4ccccd

000012e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    12e4:	b480      	push	{r7}
    12e6:	b087      	sub	sp, #28
    12e8:	af00      	add	r7, sp, #0
    12ea:	ed87 0a03 	vstr	s0, [r7, #12]
    12ee:	edc7 0a02 	vstr	s1, [r7, #8]
    12f2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	ee07 3a90 	vmov	s15, r3
    12fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12fe:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    1302:	edd7 7a03 	vldr	s15, [r7, #12]
    1306:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    130a:	ee27 7a87 	vmul.f32	s14, s15, s14
    130e:	edd7 7a02 	vldr	s15, [r7, #8]
    1312:	ee67 7a27 	vmul.f32	s15, s14, s15
    1316:	ed97 7a05 	vldr	s14, [r7, #20]
    131a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    131e:	eef0 7a66 	vmov.f32	s15, s13
}
    1322:	eeb0 0a67 	vmov.f32	s0, s15
    1326:	371c      	adds	r7, #28
    1328:	46bd      	mov	sp, r7
    132a:	f85d 7b04 	ldr.w	r7, [sp], #4
    132e:	4770      	bx	lr

00001330 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    1330:	b480      	push	{r7}
    1332:	b087      	sub	sp, #28
    1334:	af00      	add	r7, sp, #0
    1336:	ed87 0a03 	vstr	s0, [r7, #12]
    133a:	edc7 0a02 	vstr	s1, [r7, #8]
    133e:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	ee07 3a90 	vmov	s15, r3
    1346:	eef8 7a67 	vcvt.f32.u32	s15, s15
    134a:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    134e:	edd7 7a03 	vldr	s15, [r7, #12]
    1352:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1356:	ee27 7a87 	vmul.f32	s14, s15, s14
    135a:	edd7 7a02 	vldr	s15, [r7, #8]
    135e:	ee67 7a27 	vmul.f32	s15, s14, s15
    1362:	ed97 7a05 	vldr	s14, [r7, #20]
    1366:	eec7 6a27 	vdiv.f32	s13, s14, s15
    136a:	eef0 7a66 	vmov.f32	s15, s13
}
    136e:	eeb0 0a67 	vmov.f32	s0, s15
    1372:	371c      	adds	r7, #28
    1374:	46bd      	mov	sp, r7
    1376:	f85d 7b04 	ldr.w	r7, [sp], #4
    137a:	4770      	bx	lr

0000137c <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    137c:	b480      	push	{r7}
    137e:	b083      	sub	sp, #12
    1380:	af00      	add	r7, sp, #0
    1382:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    1386:	edd7 7a01 	vldr	s15, [r7, #4]
    138a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    138e:	ee77 7a87 	vadd.f32	s15, s15, s14
    1392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    139a:	eeb0 0a67 	vmov.f32	s0, s15
    139e:	370c      	adds	r7, #12
    13a0:	46bd      	mov	sp, r7
    13a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a6:	4770      	bx	lr

000013a8 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	b086      	sub	sp, #24
    13ac:	af00      	add	r7, sp, #0
    13ae:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    13b2:	2300      	movs	r3, #0
    13b4:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    13b6:	ed97 0a01 	vldr	s0, [r7, #4]
    13ba:	f7ff ffdf 	bl	137c <sjsu::lpc40xx::uart::RoundFloat(float)>
    13be:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    13c2:	ed97 7a01 	vldr	s14, [r7, #4]
    13c6:	edd7 7a04 	vldr	s15, [r7, #16]
    13ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    13ce:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    13d2:	edd7 7a03 	vldr	s15, [r7, #12]
    13d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1404 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    13da:	eef4 7ac7 	vcmpe.f32	s15, s14
    13de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13e2:	db0a      	blt.n	13fa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    13e4:	edd7 7a03 	vldr	s15, [r7, #12]
    13e8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1408 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    13ec:	eef4 7ac7 	vcmpe.f32	s15, s14
    13f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13f4:	d801      	bhi.n	13fa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    13f6:	2301      	movs	r3, #1
    13f8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    13fa:	7dfb      	ldrb	r3, [r7, #23]
}
    13fc:	4618      	mov	r0, r3
    13fe:	3718      	adds	r7, #24
    1400:	46bd      	mov	sp, r7
    1402:	bd80      	pop	{r7, pc}
    1404:	bd4ccccd 	.word	0xbd4ccccd
    1408:	3d4ccccd 	.word	0x3d4ccccd

0000140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    1414:	6878      	ldr	r0, [r7, #4]
    1416:	f000 f805 	bl	1424 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    141a:	4603      	mov	r3, r0
	}
    141c:	4618      	mov	r0, r3
    141e:	3708      	adds	r7, #8
    1420:	46bd      	mov	sp, r7
    1422:	bd80      	pop	{r7, pc}

00001424 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	4618      	mov	r0, r3
    1430:	f7ff fc9c 	bl	d6c <units::linear_scale<float>::operator()() const>
    1434:	eef0 7a40 	vmov.f32	s15, s0
    1438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    143c:	ee17 3a90 	vmov	r3, s15
		}
    1440:	4618      	mov	r0, r3
    1442:	3708      	adds	r7, #8
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}

00001448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    1448:	b590      	push	{r4, r7, lr}
    144a:	b091      	sub	sp, #68	; 0x44
    144c:	af00      	add	r7, sp, #0
    144e:	61f8      	str	r0, [r7, #28]
    1450:	61b9      	str	r1, [r7, #24]
    1452:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    1454:	f107 0314 	add.w	r3, r7, #20
    1458:	4618      	mov	r0, r3
    145a:	f7ff ffd7 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    145e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    1460:	2300      	movs	r3, #0
    1462:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    1464:	69fb      	ldr	r3, [r7, #28]
    1466:	2200      	movs	r2, #0
    1468:	601a      	str	r2, [r3, #0]
    146a:	69fb      	ldr	r3, [r7, #28]
    146c:	2200      	movs	r2, #0
    146e:	605a      	str	r2, [r3, #4]
    1470:	69fb      	ldr	r3, [r7, #28]
    1472:	2201      	movs	r2, #1
    1474:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    1476:	69bb      	ldr	r3, [r7, #24]
    1478:	ee07 3a90 	vmov	s15, r3
    147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1480:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    1484:	f04f 0300 	mov.w	r3, #0
    1488:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    148a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    148e:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1490:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    1494:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    1496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    149e:	2b04      	cmp	r3, #4
    14a0:	f000 80be 	beq.w	1620 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    14a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14a6:	2b03      	cmp	r3, #3
    14a8:	f200 80b8 	bhi.w	161c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    14ac:	a201      	add	r2, pc, #4	; (adr r2, 14b4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    14ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14b2:	bf00      	nop
    14b4:	000014c5 	.word	0x000014c5
    14b8:	0000151f 	.word	0x0000151f
    14bc:	0000157f 	.word	0x0000157f
    14c0:	000015ef 	.word	0x000015ef
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    14c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    14ca:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    14ce:	f7ff ff09 	bl	12e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    14d2:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    14d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    14da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    14de:	eef4 7ac7 	vcmpe.f32	s15, s14
    14e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14e6:	d505      	bpl.n	14f4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    14e8:	69fb      	ldr	r3, [r7, #28]
    14ea:	2200      	movs	r2, #0
    14ec:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    14ee:	2304      	movs	r3, #4
    14f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    14f2:	e094      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    14f4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    14f8:	f7ff ff56 	bl	13a8 <sjsu::lpc40xx::uart::IsDecmial(float)>
    14fc:	4603      	mov	r3, r0
    14fe:	2b00      	cmp	r3, #0
    1500:	d00a      	beq.n	1518 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    1502:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    150a:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    150e:	69fb      	ldr	r3, [r7, #28]
    1510:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    1512:	2304      	movs	r3, #4
    1514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1516:	e082      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    1518:	2301      	movs	r3, #1
    151a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    151c:	e07f      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    151e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1520:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    1524:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1528:	f7ff fedc 	bl	12e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    152c:	eef0 7a40 	vmov.f32	s15, s0
    1530:	eeb0 0a67 	vmov.f32	s0, s15
    1534:	f7ff ff22 	bl	137c <sjsu::lpc40xx::uart::RoundFloat(float)>
    1538:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    153c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    153e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    1542:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1546:	f7ff fef3 	bl	1330 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    154a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    154e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1552:	ed9f 7a36 	vldr	s14, [pc, #216]	; 162c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    1556:	eef4 7ac7 	vcmpe.f32	s15, s14
    155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    155e:	db0b      	blt.n	1578 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    1560:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1564:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1630 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    1568:	eef4 7ac7 	vcmpe.f32	s15, s14
    156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1570:	d802      	bhi.n	1578 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    1572:	2303      	movs	r3, #3
    1574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    1576:	e052      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    1578:	2302      	movs	r3, #2
    157a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    157c:	e04f      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    157e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1586:	ee77 7a87 	vadd.f32	s15, s15, s14
    158a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    158e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1592:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1596:	eef4 7ac7 	vcmpe.f32	s15, s14
    159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    159e:	dd02      	ble.n	15a6 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    15a0:	2304      	movs	r3, #4
    15a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    15a4:	e03b      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    15a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    15aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    15ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    15b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15b6:	dd0f      	ble.n	15d8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    15b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    15c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    15c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    15d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    15d8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    15dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    15e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    15e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    15e8:	2301      	movs	r3, #1
    15ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15ec:	e017      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    15ee:	69fc      	ldr	r4, [r7, #28]
    15f0:	463b      	mov	r3, r7
    15f2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    15f6:	4618      	mov	r0, r3
    15f8:	f7ff fe04 	bl	1204 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    15fc:	463b      	mov	r3, r7
    15fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    1606:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    160e:	ee17 2a90 	vmov	r2, s15
    1612:	69fb      	ldr	r3, [r7, #28]
    1614:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    1616:	2304      	movs	r3, #4
    1618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    161a:	e000      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    161c:	bf00      	nop
  while (state != States::kDone)
    161e:	e73d      	b.n	149c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    1620:	bf00      	nop
}
    1622:	69f8      	ldr	r0, [r7, #28]
    1624:	3744      	adds	r7, #68	; 0x44
    1626:	46bd      	mov	sp, r7
    1628:	bd90      	pop	{r4, r7, pc}
    162a:	bf00      	nop
    162c:	3f8ccccd 	.word	0x3f8ccccd
    1630:	3ff33333 	.word	0x3ff33333

00001634 <sjsu::Uart::Uart()>:
class Uart
    1634:	b480      	push	{r7}
    1636:	b083      	sub	sp, #12
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	4a04      	ldr	r2, [pc, #16]	; (1650 <sjsu::Uart::Uart()+0x1c>)
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	601a      	str	r2, [r3, #0]
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	4618      	mov	r0, r3
    1646:	370c      	adds	r7, #12
    1648:	46bd      	mov	sp, r7
    164a:	f85d 7b04 	ldr.w	r7, [sp], #4
    164e:	4770      	bx	lr
    1650:	00009e54 	.word	0x00009e54

00001654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    1654:	b580      	push	{r7, lr}
    1656:	b084      	sub	sp, #16
    1658:	af00      	add	r7, sp, #0
    165a:	60f8      	str	r0, [r7, #12]
    165c:	60b9      	str	r1, [r7, #8]
    165e:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	4618      	mov	r0, r3
    1664:	f7ff ffe6 	bl	1634 <sjsu::Uart::Uart()>
    1668:	4a06      	ldr	r2, [pc, #24]	; (1684 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	601a      	str	r2, [r3, #0]
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	68ba      	ldr	r2, [r7, #8]
    1672:	605a      	str	r2, [r3, #4]
    1674:	68fb      	ldr	r3, [r7, #12]
    1676:	687a      	ldr	r2, [r7, #4]
    1678:	609a      	str	r2, [r3, #8]
  {
  }
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	4618      	mov	r0, r3
    167e:	3710      	adds	r7, #16
    1680:	46bd      	mov	sp, r7
    1682:	bd80      	pop	{r7, pc}
    1684:	00009e38 	.word	0x00009e38

00001688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1688:	b580      	push	{r7, lr}
    168a:	b084      	sub	sp, #16
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    1692:	2307      	movs	r3, #7
    1694:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	6898      	ldr	r0, [r3, #8]
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	689b      	ldr	r3, [r3, #8]
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	3314      	adds	r3, #20
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	6852      	ldr	r2, [r2, #4]
    16a8:	3204      	adds	r2, #4
    16aa:	4611      	mov	r1, r2
    16ac:	4798      	blx	r3

    SetBaudRate(baud_rate);
    16ae:	6839      	ldr	r1, [r7, #0]
    16b0:	6878      	ldr	r0, [r7, #4]
    16b2:	f000 f849 	bl	1748 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	685b      	ldr	r3, [r3, #4]
    16ba:	68d8      	ldr	r0, [r3, #12]
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	685b      	ldr	r3, [r3, #4]
    16c0:	68db      	ldr	r3, [r3, #12]
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	687a      	ldr	r2, [r7, #4]
    16c8:	6852      	ldr	r2, [r2, #4]
    16ca:	7c12      	ldrb	r2, [r2, #16]
    16cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    16d0:	b2d2      	uxtb	r2, r2
    16d2:	4611      	mov	r1, r2
    16d4:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	685b      	ldr	r3, [r3, #4]
    16da:	6898      	ldr	r0, [r3, #8]
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	689b      	ldr	r3, [r3, #8]
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	687a      	ldr	r2, [r7, #4]
    16e8:	6852      	ldr	r2, [r2, #4]
    16ea:	7c12      	ldrb	r2, [r2, #16]
    16ec:	f3c2 0202 	ubfx	r2, r2, #0, #3
    16f0:	b2d2      	uxtb	r2, r2
    16f2:	4611      	mov	r1, r2
    16f4:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	685b      	ldr	r3, [r3, #4]
    16fa:	68da      	ldr	r2, [r3, #12]
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	685b      	ldr	r3, [r3, #4]
    1700:	68db      	ldr	r3, [r3, #12]
    1702:	681b      	ldr	r3, [r3, #0]
    1704:	3304      	adds	r3, #4
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	2102      	movs	r1, #2
    170a:	4610      	mov	r0, r2
    170c:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	685b      	ldr	r3, [r3, #4]
    1712:	689a      	ldr	r2, [r3, #8]
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	689b      	ldr	r3, [r3, #8]
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	3304      	adds	r3, #4
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	2102      	movs	r1, #2
    1722:	4610      	mov	r0, r2
    1724:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	685b      	ldr	r3, [r3, #4]
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	7a1b      	ldrb	r3, [r3, #8]
    172e:	b2da      	uxtb	r2, r3
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	685b      	ldr	r3, [r3, #4]
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	f042 0207 	orr.w	r2, r2, #7
    173a:	b2d2      	uxtb	r2, r2
    173c:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    173e:	2300      	movs	r3, #0
  }
    1740:	4618      	mov	r0, r3
    1742:	3710      	adds	r7, #16
    1744:	46bd      	mov	sp, r7
    1746:	bd80      	pop	{r7, pc}

00001748 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    1748:	b580      	push	{r7, lr}
    174a:	b086      	sub	sp, #24
    174c:	af00      	add	r7, sp, #0
    174e:	6078      	str	r0, [r7, #4]
    1750:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	689a      	ldr	r2, [r3, #8]
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	685b      	ldr	r3, [r3, #4]
    175a:	3304      	adds	r3, #4
    175c:	4619      	mov	r1, r3
    175e:	4610      	mov	r0, r2
    1760:	f7ff f80f 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1764:	4602      	mov	r2, r0
    1766:	f107 0308 	add.w	r3, r7, #8
    176a:	6839      	ldr	r1, [r7, #0]
    176c:	4618      	mov	r0, r3
    176e:	f7ff fe6b 	bl	1448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    1772:	2380      	movs	r3, #128	; 0x80
    1774:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    1776:	68bb      	ldr	r3, [r7, #8]
    1778:	0a1b      	lsrs	r3, r3, #8
    177a:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    177c:	68bb      	ldr	r3, [r7, #8]
    177e:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1780:	693b      	ldr	r3, [r7, #16]
    1782:	b2db      	uxtb	r3, r3
    1784:	011b      	lsls	r3, r3, #4
    1786:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	b2db      	uxtb	r3, r3
    178c:	f003 030f 	and.w	r3, r3, #15
    1790:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1792:	4313      	orrs	r3, r2
    1794:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	685b      	ldr	r3, [r3, #4]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	2280      	movs	r2, #128	; 0x80
    179e:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	7dba      	ldrb	r2, [r7, #22]
    17a8:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	685b      	ldr	r3, [r3, #4]
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	7d7a      	ldrb	r2, [r7, #21]
    17b2:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	685b      	ldr	r3, [r3, #4]
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	7d3a      	ldrb	r2, [r7, #20]
    17bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	2203      	movs	r2, #3
    17c8:	731a      	strb	r2, [r3, #12]
    return true;
    17ca:	2301      	movs	r3, #1
  }
    17cc:	4618      	mov	r0, r3
    17ce:	3718      	adds	r7, #24
    17d0:	46bd      	mov	sp, r7
    17d2:	bd80      	pop	{r7, pc}

000017d4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    17d4:	b580      	push	{r7, lr}
    17d6:	b086      	sub	sp, #24
    17d8:	af00      	add	r7, sp, #0
    17da:	60f8      	str	r0, [r7, #12]
    17dc:	60b9      	str	r1, [r7, #8]
    17de:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    17e0:	2300      	movs	r3, #0
    17e2:	617b      	str	r3, [r7, #20]
    17e4:	697a      	ldr	r2, [r7, #20]
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	429a      	cmp	r2, r3
    17ea:	d216      	bcs.n	181a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    17ec:	68ba      	ldr	r2, [r7, #8]
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	441a      	add	r2, r3
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	685b      	ldr	r3, [r3, #4]
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	7812      	ldrb	r2, [r2, #0]
    17fa:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    17fc:	68f8      	ldr	r0, [r7, #12]
    17fe:	f000 f8b5 	bl	196c <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    1802:	4603      	mov	r3, r0
    1804:	f083 0301 	eor.w	r3, r3, #1
    1808:	b2db      	uxtb	r3, r3
    180a:	2b00      	cmp	r3, #0
    180c:	d001      	beq.n	1812 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    180e:	bf00      	nop
      while (!TransmissionComplete())
    1810:	e7f4      	b.n	17fc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    1812:	697b      	ldr	r3, [r7, #20]
    1814:	3301      	adds	r3, #1
    1816:	617b      	str	r3, [r7, #20]
    1818:	e7e4      	b.n	17e4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    181a:	bf00      	nop
    181c:	3718      	adds	r7, #24
    181e:	46bd      	mov	sp, r7
    1820:	bd80      	pop	{r7, pc}

00001822 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1822:	b590      	push	{r4, r7, lr}
    1824:	b083      	sub	sp, #12
    1826:	af00      	add	r7, sp, #0
    1828:	6078      	str	r0, [r7, #4]
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    182e:	4618      	mov	r0, r3
    1830:	f000 f88a 	bl	1948 <sjsu::lpc40xx::Uart::HasData() const>
    1834:	4603      	mov	r3, r0
    1836:	2b00      	cmp	r3, #0
    1838:	d010      	beq.n	185c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    183e:	685b      	ldr	r3, [r3, #4]
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    184a:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1850:	6813      	ldr	r3, [r2, #0]
    1852:	1c58      	adds	r0, r3, #1
    1854:	6010      	str	r0, [r2, #0]
    1856:	440b      	add	r3, r1
    1858:	4622      	mov	r2, r4
    185a:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    1860:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    1866:	429a      	cmp	r2, r3
    1868:	d301      	bcc.n	186e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    186a:	2301      	movs	r3, #1
    186c:	e000      	b.n	1870 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    186e:	2300      	movs	r3, #0
    });
    1870:	4618      	mov	r0, r3
    1872:	370c      	adds	r7, #12
    1874:	46bd      	mov	sp, r7
    1876:	bd90      	pop	{r4, r7, pc}

00001878 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    1878:	b590      	push	{r4, r7, lr}
    187a:	b09d      	sub	sp, #116	; 0x74
    187c:	af00      	add	r7, sp, #0
    187e:	6178      	str	r0, [r7, #20]
    1880:	6139      	str	r1, [r7, #16]
    1882:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    1884:	2300      	movs	r3, #0
    1886:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1888:	697b      	ldr	r3, [r7, #20]
    188a:	643b      	str	r3, [r7, #64]	; 0x40
    188c:	f107 0310 	add.w	r3, r7, #16
    1890:	647b      	str	r3, [r7, #68]	; 0x44
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	64bb      	str	r3, [r7, #72]	; 0x48
    1896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    189a:	64fb      	str	r3, [r7, #76]	; 0x4c
    189c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    18a0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    18a4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    18a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    18ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    18ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    18b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
    18b6:	4618      	mov	r0, r3
    18b8:	f000 ff4d 	bl	2756 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    18bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
    18c0:	f107 0320 	add.w	r3, r7, #32
    18c4:	4611      	mov	r1, r2
    18c6:	4618      	mov	r0, r3
    18c8:	f001 fb98 	bl	2ffc <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18cc:	4603      	mov	r3, r0
    18ce:	2b00      	cmp	r3, #0
    18d0:	d004      	beq.n	18dc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    18d2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    18d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    18da:	e011      	b.n	1900 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    18dc:	4b19      	ldr	r3, [pc, #100]	; (1944 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    18de:	681b      	ldr	r3, [r3, #0]
    18e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
    18e4:	4610      	mov	r0, r2
    18e6:	4798      	blx	r3
    18e8:	463b      	mov	r3, r7
    18ea:	f107 0220 	add.w	r2, r7, #32
    18ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
    18f2:	4618      	mov	r0, r3
    18f4:	f001 fdc6 	bl	3484 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18f8:	e9d7 3400 	ldrd	r3, r4, [r7]
    18fc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    1900:	2301      	movs	r3, #1
    1902:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    1904:	4b0f      	ldr	r3, [pc, #60]	; (1944 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	f107 0250 	add.w	r2, r7, #80	; 0x50
    190c:	4610      	mov	r0, r2
    190e:	4798      	blx	r3
    1910:	f107 0218 	add.w	r2, r7, #24
    1914:	f107 0350 	add.w	r3, r7, #80	; 0x50
    1918:	4611      	mov	r1, r2
    191a:	4618      	mov	r0, r3
    191c:	f001 fddf 	bl	34de <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1920:	4603      	mov	r3, r0
    1922:	2b00      	cmp	r3, #0
    1924:	d009      	beq.n	193a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    1926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    192a:	4618      	mov	r0, r3
    192c:	f7ff ff79 	bl	1822 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    1930:	4603      	mov	r3, r0
    1932:	2b00      	cmp	r3, #0
    1934:	d0e6      	beq.n	1904 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    1936:	2300      	movs	r3, #0
    1938:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    193a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    193c:	4618      	mov	r0, r3
    193e:	3774      	adds	r7, #116	; 0x74
    1940:	46bd      	mov	sp, r7
    1942:	bd90      	pop	{r4, r7, pc}
    1944:	10000000 	.word	0x10000000

00001948 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	7d1b      	ldrb	r3, [r3, #20]
    1958:	b2db      	uxtb	r3, r3
    195a:	2100      	movs	r1, #0
    195c:	4618      	mov	r0, r3
    195e:	f001 fc0e 	bl	317e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1962:	4603      	mov	r3, r0
  }
    1964:	4618      	mov	r0, r3
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}

0000196c <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	685b      	ldr	r3, [r3, #4]
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	7d1b      	ldrb	r3, [r3, #20]
    197c:	b2db      	uxtb	r3, r3
    197e:	2105      	movs	r1, #5
    1980:	4618      	mov	r0, r3
    1982:	f001 fbfc 	bl	317e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1986:	4603      	mov	r3, r0
  }
    1988:	4618      	mov	r0, r3
    198a:	3708      	adds	r7, #8
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}

00001990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
  }
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	6818      	ldr	r0, [r3, #0]
    199a:	4b08      	ldr	r3, [pc, #32]	; (19bc <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    199c:	781a      	ldrb	r2, [r3, #0]
    199e:	785b      	ldrb	r3, [r3, #1]
    19a0:	021b      	lsls	r3, r3, #8
    19a2:	431a      	orrs	r2, r3
    19a4:	2300      	movs	r3, #0
    19a6:	f362 030f 	bfi	r3, r2, #0, #16
    19aa:	4619      	mov	r1, r3
    19ac:	f001 fbfe 	bl	31ac <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    19b0:	4603      	mov	r3, r0
  }
    19b2:	4618      	mov	r0, r3
    19b4:	bd80      	pop	{r7, pc}
    19b6:	bf00      	nop
    19b8:	10000124 	.word	0x10000124
    19bc:	00009c74 	.word	0x00009c74

000019c0 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    19c0:	b480      	push	{r7}
    19c2:	b083      	sub	sp, #12
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
    19c8:	4a04      	ldr	r2, [pc, #16]	; (19dc <sjsu::Adc::Adc()+0x1c>)
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	601a      	str	r2, [r3, #0]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	4618      	mov	r0, r3
    19d2:	370c      	adds	r7, #12
    19d4:	46bd      	mov	sp, r7
    19d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    19da:	4770      	bx	lr
    19dc:	00009e24 	.word	0x00009e24

000019e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    19e0:	b580      	push	{r7, lr}
    19e2:	b084      	sub	sp, #16
    19e4:	af00      	add	r7, sp, #0
    19e6:	60f8      	str	r0, [r7, #12]
    19e8:	60b9      	str	r1, [r7, #8]
    19ea:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	4618      	mov	r0, r3
    19f0:	f7ff ffe6 	bl	19c0 <sjsu::Adc::Adc()>
    19f4:	4a06      	ldr	r2, [pc, #24]	; (1a10 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	601a      	str	r2, [r3, #0]
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	68ba      	ldr	r2, [r7, #8]
    19fe:	605a      	str	r2, [r3, #4]
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	687a      	ldr	r2, [r7, #4]
    1a04:	609a      	str	r2, [r3, #8]
  {
  }
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	4618      	mov	r0, r3
    1a0a:	3710      	adds	r7, #16
    1a0c:	46bd      	mov	sp, r7
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	00009e10 	.word	0x00009e10

00001a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1a14:	b580      	push	{r7, lr}
    1a16:	ed2d 8b02 	vpush	{d8}
    1a1a:	b084      	sub	sp, #16
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
    1a20:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	4618      	mov	r0, r3
    1a26:	f7ff f9a1 	bl	d6c <units::linear_scale<float>::operator()() const>
    1a2a:	eeb0 8a40 	vmov.f32	s16, s0
    1a2e:	683b      	ldr	r3, [r7, #0]
    1a30:	4618      	mov	r0, r3
    1a32:	f7ff f99b 	bl	d6c <units::linear_scale<float>::operator()() const>
    1a36:	eef0 7a40 	vmov.f32	s15, s0
    1a3a:	edc7 7a03 	vstr	s15, [r7, #12]
    1a3e:	f107 030c 	add.w	r3, r7, #12
    1a42:	4618      	mov	r0, r3
    1a44:	f7fe fe7d 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1a48:	eeb0 7a40 	vmov.f32	s14, s0
    1a4c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1a50:	f107 0308 	add.w	r3, r7, #8
    1a54:	eeb0 0a67 	vmov.f32	s0, s15
    1a58:	4618      	mov	r0, r3
    1a5a:	f7ff f9c2 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1a5e:	68bb      	ldr	r3, [r7, #8]
	}
    1a60:	4618      	mov	r0, r3
    1a62:	3710      	adds	r7, #16
    1a64:	46bd      	mov	sp, r7
    1a66:	ecbd 8b02 	vpop	{d8}
    1a6a:	bd80      	pop	{r7, pc}

00001a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1a74:	6878      	ldr	r0, [r7, #4]
    1a76:	f001 fb50 	bl	311a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1a7a:	4603      	mov	r3, r0
		}
    1a7c:	4618      	mov	r0, r3
    1a7e:	3708      	adds	r7, #8
    1a80:	46bd      	mov	sp, r7
    1a82:	bd80      	pop	{r7, pc}

00001a84 <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    1a84:	b580      	push	{r7, lr}
    1a86:	b086      	sub	sp, #24
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	689a      	ldr	r2, [r3, #8]
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	3314      	adds	r3, #20
    1a98:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    1a9a:	493c      	ldr	r1, [pc, #240]	; (1b8c <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1a9c:	4610      	mov	r0, r2
    1a9e:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	685b      	ldr	r3, [r3, #4]
    1aa4:	6818      	ldr	r0, [r3, #0]
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	685b      	ldr	r3, [r3, #4]
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	681b      	ldr	r3, [r3, #0]
    1ab0:	687a      	ldr	r2, [r7, #4]
    1ab2:	6852      	ldr	r2, [r2, #4]
    1ab4:	7912      	ldrb	r2, [r2, #4]
    1ab6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1aba:	b2d2      	uxtb	r2, r2
    1abc:	4611      	mov	r1, r2
    1abe:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	685b      	ldr	r3, [r3, #4]
    1ac4:	681a      	ldr	r2, [r3, #0]
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	685b      	ldr	r3, [r3, #4]
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	3304      	adds	r3, #4
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	2100      	movs	r1, #0
    1ad4:	4610      	mov	r0, r2
    1ad6:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	685b      	ldr	r3, [r3, #4]
    1adc:	681a      	ldr	r2, [r3, #0]
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	685b      	ldr	r3, [r3, #4]
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	330c      	adds	r3, #12
    1ae8:	681b      	ldr	r3, [r3, #0]
    1aea:	2101      	movs	r1, #1
    1aec:	4610      	mov	r0, r2
    1aee:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1af4:	4925      	ldr	r1, [pc, #148]	; (1b8c <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1af6:	4618      	mov	r0, r3
    1af8:	f7fe fe43 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1afc:	4603      	mov	r3, r0
    1afe:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1b00:	f107 0308 	add.w	r3, r7, #8
    1b04:	4922      	ldr	r1, [pc, #136]	; (1b90 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    1b06:	4618      	mov	r0, r3
    1b08:	f7ff ff84 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1b0c:	4603      	mov	r3, r0
    1b0e:	60fb      	str	r3, [r7, #12]
    1b10:	f107 030c 	add.w	r3, r7, #12
    1b14:	4618      	mov	r0, r3
    1b16:	f7ff ffa9 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1b1a:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1b1c:	4b1d      	ldr	r3, [pc, #116]	; (1b94 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    1b24:	4b1c      	ldr	r3, [pc, #112]	; (1b98 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    1b26:	781a      	ldrb	r2, [r3, #0]
    1b28:	785b      	ldrb	r3, [r3, #1]
    1b2a:	021b      	lsls	r3, r3, #8
    1b2c:	431a      	orrs	r2, r3
    1b2e:	2300      	movs	r3, #0
    1b30:	f362 030f 	bfi	r3, r2, #0, #16
    1b34:	4619      	mov	r1, r3
    1b36:	6978      	ldr	r0, [r7, #20]
    1b38:	f001 fb47 	bl	31ca <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1b3c:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    1b3e:	4b17      	ldr	r3, [pc, #92]	; (1b9c <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    1b40:	781a      	ldrb	r2, [r3, #0]
    1b42:	785b      	ldrb	r3, [r3, #1]
    1b44:	021b      	lsls	r3, r3, #8
    1b46:	431a      	orrs	r2, r3
    1b48:	2300      	movs	r3, #0
    1b4a:	f362 030f 	bfi	r3, r2, #0, #16
    1b4e:	461a      	mov	r2, r3
    1b50:	6939      	ldr	r1, [r7, #16]
    1b52:	6978      	ldr	r0, [r7, #20]
    1b54:	f001 facf 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1b58:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    1b5a:	f7ff ff19 	bl	1990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1b5e:	4603      	mov	r3, r0
    1b60:	2b00      	cmp	r3, #0
    1b62:	d00a      	beq.n	1b7a <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	685b      	ldr	r3, [r3, #4]
    1b68:	791b      	ldrb	r3, [r3, #4]
    1b6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	4619      	mov	r1, r3
    1b72:	6978      	ldr	r0, [r7, #20]
    1b74:	f001 fa9a 	bl	30ac <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1b78:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    1b7a:	4b06      	ldr	r3, [pc, #24]	; (1b94 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b7c:	681b      	ldr	r3, [r3, #0]
    1b7e:	697a      	ldr	r2, [r7, #20]
    1b80:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    1b82:	2300      	movs	r3, #0
  }
    1b84:	4618      	mov	r0, r3
    1b86:	3718      	adds	r7, #24
    1b88:	46bd      	mov	sp, r7
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	00009bbc 	.word	0x00009bbc
    1b90:	00009cc8 	.word	0x00009cc8
    1b94:	10000124 	.word	0x10000124
    1b98:	00009c78 	.word	0x00009c78
    1b9c:	00009c70 	.word	0x00009c70

00001ba0 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b084      	sub	sp, #16
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1ba8:	6878      	ldr	r0, [r7, #4]
    1baa:	f000 f851 	bl	1c50 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	687a      	ldr	r2, [r7, #4]
    1bb4:	6852      	ldr	r2, [r2, #4]
    1bb6:	7912      	ldrb	r2, [r2, #4]
    1bb8:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1bbc:	b2d2      	uxtb	r2, r2
    1bbe:	3204      	adds	r2, #4
    1bc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1bc4:	4b09      	ldr	r3, [pc, #36]	; (1bec <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1bc6:	781a      	ldrb	r2, [r3, #0]
    1bc8:	785b      	ldrb	r3, [r3, #1]
    1bca:	021b      	lsls	r3, r3, #8
    1bcc:	431a      	orrs	r2, r3
    1bce:	2300      	movs	r3, #0
    1bd0:	f362 030f 	bfi	r3, r2, #0, #16
    1bd4:	4619      	mov	r1, r3
    1bd6:	f001 fb07 	bl	31e8 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1bda:	60f8      	str	r0, [r7, #12]
    return result;
    1bdc:	68fb      	ldr	r3, [r7, #12]
  }
    1bde:	4618      	mov	r0, r3
    1be0:	3710      	adds	r7, #16
    1be2:	46bd      	mov	sp, r7
    1be4:	bd80      	pop	{r7, pc}
    1be6:	bf00      	nop
    1be8:	10000124 	.word	0x10000124
    1bec:	00009c80 	.word	0x00009c80

00001bf0 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1bf8:	230c      	movs	r3, #12
  }
    1bfa:	4618      	mov	r0, r3
    1bfc:	370c      	adds	r7, #12
    1bfe:	46bd      	mov	sp, r7
    1c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c04:	4770      	bx	lr
    1c06:	Address 0x0000000000001c06 is out of bounds.


00001c08 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	687a      	ldr	r2, [r7, #4]
    1c16:	6852      	ldr	r2, [r2, #4]
    1c18:	7912      	ldrb	r2, [r2, #4]
    1c1a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1c1e:	b2d2      	uxtb	r2, r2
    1c20:	3204      	adds	r2, #4
    1c22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1c26:	4b09      	ldr	r3, [pc, #36]	; (1c4c <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1c28:	781a      	ldrb	r2, [r3, #0]
    1c2a:	785b      	ldrb	r3, [r3, #1]
    1c2c:	021b      	lsls	r3, r3, #8
    1c2e:	431a      	orrs	r2, r3
    1c30:	2300      	movs	r3, #0
    1c32:	f362 030f 	bfi	r3, r2, #0, #16
    1c36:	4619      	mov	r1, r3
    1c38:	f001 fab8 	bl	31ac <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1c3c:	4603      	mov	r3, r0
  }
    1c3e:	4618      	mov	r0, r3
    1c40:	3708      	adds	r7, #8
    1c42:	46bd      	mov	sp, r7
    1c44:	bd80      	pop	{r7, pc}
    1c46:	bf00      	nop
    1c48:	10000124 	.word	0x10000124
    1c4c:	00009c84 	.word	0x00009c84

00001c50 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1c50:	b590      	push	{r4, r7, lr}
    1c52:	b085      	sub	sp, #20
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1c58:	f7ff fe9a 	bl	1990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1c5c:	4603      	mov	r3, r0
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d013      	beq.n	1c8a <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1c62:	4b29      	ldr	r3, [pc, #164]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	6818      	ldr	r0, [r3, #0]
    1c68:	4b27      	ldr	r3, [pc, #156]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c6a:	681c      	ldr	r4, [r3, #0]
    1c6c:	4b27      	ldr	r3, [pc, #156]	; (1d0c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1c6e:	781a      	ldrb	r2, [r3, #0]
    1c70:	785b      	ldrb	r3, [r3, #1]
    1c72:	021b      	lsls	r3, r3, #8
    1c74:	431a      	orrs	r2, r3
    1c76:	2300      	movs	r3, #0
    1c78:	f362 030f 	bfi	r3, r2, #0, #16
    1c7c:	461a      	mov	r2, r3
    1c7e:	2100      	movs	r1, #0
    1c80:	f001 fac3 	bl	320a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1c84:	4603      	mov	r3, r0
    1c86:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1c88:	e03a      	b.n	1d00 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	685b      	ldr	r3, [r3, #4]
    1c8e:	791b      	ldrb	r3, [r3, #4]
    1c90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1c94:	b2db      	uxtb	r3, r3
    1c96:	461a      	mov	r2, r3
    1c98:	2301      	movs	r3, #1
    1c9a:	4093      	lsls	r3, r2
    1c9c:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1c9e:	4b1a      	ldr	r3, [pc, #104]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1ca4:	4b18      	ldr	r3, [pc, #96]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ca6:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1ca8:	4b19      	ldr	r3, [pc, #100]	; (1d10 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1caa:	781a      	ldrb	r2, [r3, #0]
    1cac:	785b      	ldrb	r3, [r3, #1]
    1cae:	021b      	lsls	r3, r3, #8
    1cb0:	431a      	orrs	r2, r3
    1cb2:	2300      	movs	r3, #0
    1cb4:	f362 030f 	bfi	r3, r2, #0, #16
    1cb8:	461a      	mov	r2, r3
    1cba:	68f9      	ldr	r1, [r7, #12]
    1cbc:	f001 fa1b 	bl	30f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1cc0:	4603      	mov	r3, r0
      adc_base->CR =
    1cc2:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1cc4:	4b10      	ldr	r3, [pc, #64]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	6818      	ldr	r0, [r3, #0]
    1cca:	4b0f      	ldr	r3, [pc, #60]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ccc:	681c      	ldr	r4, [r3, #0]
    1cce:	4b0f      	ldr	r3, [pc, #60]	; (1d0c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1cd0:	781a      	ldrb	r2, [r3, #0]
    1cd2:	785b      	ldrb	r3, [r3, #1]
    1cd4:	021b      	lsls	r3, r3, #8
    1cd6:	431a      	orrs	r2, r3
    1cd8:	2300      	movs	r3, #0
    1cda:	f362 030f 	bfi	r3, r2, #0, #16
    1cde:	461a      	mov	r2, r3
    1ce0:	2101      	movs	r1, #1
    1ce2:	f001 fa92 	bl	320a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1ce6:	4603      	mov	r3, r0
    1ce8:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1cea:	6878      	ldr	r0, [r7, #4]
    1cec:	f7ff ff8c 	bl	1c08 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1cf0:	4603      	mov	r3, r0
    1cf2:	f083 0301 	eor.w	r3, r3, #1
    1cf6:	b2db      	uxtb	r3, r3
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d001      	beq.n	1d00 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1cfc:	bf00      	nop
      while (!HasConversionFinished())
    1cfe:	e7f4      	b.n	1cea <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1d00:	bf00      	nop
    1d02:	3714      	adds	r7, #20
    1d04:	46bd      	mov	sp, r7
    1d06:	bd90      	pop	{r4, r7, pc}
    1d08:	10000124 	.word	0x10000124
    1d0c:	00009c7c 	.word	0x00009c7c
    1d10:	00009c6c 	.word	0x00009c6c

00001d14 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1d14:	b480      	push	{r7}
    1d16:	af00      	add	r7, sp, #0
    1d18:	bf00      	nop
    1d1a:	46bd      	mov	sp, r7
    1d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d20:	4770      	bx	lr
    1d22:	Address 0x0000000000001d22 is out of bounds.


00001d24 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1d24:	b580      	push	{r7, lr}
    1d26:	b082      	sub	sp, #8
    1d28:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1d2a:	4b09      	ldr	r3, [pc, #36]	; (1d50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1d2c:	681b      	ldr	r3, [r3, #0]
    1d2e:	9300      	str	r3, [sp, #0]
    1d30:	231d      	movs	r3, #29
    1d32:	4a08      	ldr	r2, [pc, #32]	; (1d54 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1d34:	4908      	ldr	r1, [pc, #32]	; (1d58 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1d36:	4809      	ldr	r0, [pc, #36]	; (1d5c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1d38:	f004 fb6e 	bl	6418 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	3b10      	subs	r3, #16
    1d42:	4618      	mov	r0, r3
    1d44:	f7fe fb34 	bl	3b0 <NVIC_DisableIRQ>
  }
    1d48:	bf00      	nop
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	10000048 	.word	0x10000048
    1d54:	0000a10c 	.word	0x0000a10c
    1d58:	00009ccc 	.word	0x00009ccc
    1d5c:	00009784 	.word	0x00009784

00001d60 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1d68:	2340      	movs	r3, #64	; 0x40
    1d6a:	4618      	mov	r0, r3
    1d6c:	370c      	adds	r7, #12
    1d6e:	46bd      	mov	sp, r7
    1d70:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d74:	4770      	bx	lr
    1d76:	Address 0x0000000000001d76 is out of bounds.


00001d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1d78:	b580      	push	{r7, lr}
    1d7a:	b084      	sub	sp, #16
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	4618      	mov	r0, r3
    1d84:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d88:	461a      	mov	r2, r3
    1d8a:	2100      	movs	r1, #0
    1d8c:	f007 f9e9 	bl	9162 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d90:	2300      	movs	r3, #0
    1d92:	60fb      	str	r3, [r7, #12]
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	2b0f      	cmp	r3, #15
    1d98:	d808      	bhi.n	1dac <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	68fa      	ldr	r2, [r7, #12]
    1d9e:	4911      	ldr	r1, [pc, #68]	; (1de4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	3301      	adds	r3, #1
    1da8:	60fb      	str	r3, [r7, #12]
    1daa:	e7f3      	b.n	1d94 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1dac:	2310      	movs	r3, #16
    1dae:	60bb      	str	r3, [r7, #8]
    1db0:	6878      	ldr	r0, [r7, #4]
    1db2:	f7ff ffd5 	bl	1d60 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1db6:	4602      	mov	r2, r0
    1db8:	68bb      	ldr	r3, [r7, #8]
    1dba:	4293      	cmp	r3, r2
    1dbc:	bf34      	ite	cc
    1dbe:	2301      	movcc	r3, #1
    1dc0:	2300      	movcs	r3, #0
    1dc2:	b2db      	uxtb	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d008      	beq.n	1dda <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	68ba      	ldr	r2, [r7, #8]
    1dcc:	4906      	ldr	r1, [pc, #24]	; (1de8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1dd2:	68bb      	ldr	r3, [r7, #8]
    1dd4:	3301      	adds	r3, #1
    1dd6:	60bb      	str	r3, [r7, #8]
    1dd8:	e7ea      	b.n	1db0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1dda:	bf00      	nop
    }
    1ddc:	6878      	ldr	r0, [r7, #4]
    1dde:	3710      	adds	r7, #16
    1de0:	46bd      	mov	sp, r7
    1de2:	bd80      	pop	{r7, pc}
    1de4:	00001d15 	.word	0x00001d15
    1de8:	00001d25 	.word	0x00001d25

00001dec <sjsu::Pwm::Pwm()>:

namespace sjsu
{
/// An abstract interface for hardware that can generate Pulse Width Modulation
/// (PWM) waveforms.
class Pwm
    1dec:	b480      	push	{r7}
    1dee:	b083      	sub	sp, #12
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	4a04      	ldr	r2, [pc, #16]	; (1e08 <sjsu::Pwm::Pwm()+0x1c>)
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	601a      	str	r2, [r3, #0]
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	4618      	mov	r0, r3
    1dfe:	370c      	adds	r7, #12
    1e00:	46bd      	mov	sp, r7
    1e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e06:	4770      	bx	lr
    1e08:	00009df8 	.word	0x00009df8

00001e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>:
  ///        instance of the PWM driver.
  /// @param system_controller - Reference to a system controller object. Used
  ///        to power on the peripheral and get the current peripheral
  ///        frequency. Typically only changed from the default for unit testing
  ///        purposes.
  explicit constexpr Pwm(const Channel_t & channel,
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b084      	sub	sp, #16
    1e10:	af00      	add	r7, sp, #0
    1e12:	60f8      	str	r0, [r7, #12]
    1e14:	60b9      	str	r1, [r7, #8]
    1e16:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1e18:	68fb      	ldr	r3, [r7, #12]
    1e1a:	4618      	mov	r0, r3
    1e1c:	f7ff ffe6 	bl	1dec <sjsu::Pwm::Pwm()>
    1e20:	4a06      	ldr	r2, [pc, #24]	; (1e3c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	601a      	str	r2, [r3, #0]
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	68ba      	ldr	r2, [r7, #8]
    1e2a:	605a      	str	r2, [r3, #4]
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	609a      	str	r2, [r3, #8]
  {
  }
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	4618      	mov	r0, r3
    1e36:	3710      	adds	r7, #16
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	00009de0 	.word	0x00009de0

00001e40 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  Status Initialize(units::frequency::hertz_t frequency_hz) const override
    1e40:	b590      	push	{r4, r7, lr}
    1e42:	b085      	sub	sp, #20
    1e44:	af00      	add	r7, sp, #0
    1e46:	6078      	str	r0, [r7, #4]
    1e48:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(1 <= channel_.channel && channel_.channel <= 6,
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	685b      	ldr	r3, [r3, #4]
    1e4e:	7a1b      	ldrb	r3, [r3, #8]
    1e50:	f003 0307 	and.w	r3, r3, #7
    1e54:	b2db      	uxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	d007      	beq.n	1e6a <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x2a>
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	685b      	ldr	r3, [r3, #4]
    1e5e:	7a1b      	ldrb	r3, [r3, #8]
    1e60:	f003 0307 	and.w	r3, r3, #7
    1e64:	b2db      	uxtb	r3, r3
    1e66:	2b07      	cmp	r3, #7
    1e68:	d10d      	bne.n	1e86 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x46>
    1e6a:	23bb      	movs	r3, #187	; 0xbb
    1e6c:	4a5d      	ldr	r2, [pc, #372]	; (1fe4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    1e6e:	495e      	ldr	r1, [pc, #376]	; (1fe8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    1e70:	485e      	ldr	r0, [pc, #376]	; (1fec <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    1e72:	f004 fad1 	bl	6418 <printf>
    1e76:	485e      	ldr	r0, [pc, #376]	; (1ff0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    1e78:	f003 f98a 	bl	5190 <puts>
    1e7c:	2100      	movs	r1, #0
    1e7e:	2001      	movs	r0, #1
    1e80:	f7fe fd22 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1e84:	e7fe      	b.n	1e84 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x44>
                     "Channel must be between 1 and 6 on LPC40xx platforms.");

    system_controller_.PowerUpPeripheral(channel_.peripheral.power_on_id);
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	6898      	ldr	r0, [r3, #8]
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	689b      	ldr	r3, [r3, #8]
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	3314      	adds	r3, #20
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	687a      	ldr	r2, [r7, #4]
    1e96:	6852      	ldr	r2, [r2, #4]
    1e98:	6812      	ldr	r2, [r2, #0]
    1e9a:	3204      	adds	r2, #4
    1e9c:	4611      	mov	r1, r2
    1e9e:	4798      	blx	r3
    // Set prescalar to 1 so the input frequency to the PWM peripheral is equal
    // to the peripheral clock frequency.
    //
    // PR = Prescale register = defines the maximum value for the prescaler
    channel_.peripheral.registers->PR = 0;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	685b      	ldr	r3, [r3, #4]
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	2200      	movs	r2, #0
    1eaa:	60da      	str	r2, [r3, #12]
    // PC = Prescale counter. Set to 0 to cause the timer counter to increment
    // after each peripheral clock tick.
    channel_.peripheral.registers->PC = 0;
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	685b      	ldr	r3, [r3, #4]
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2200      	movs	r2, #0
    1eb6:	611a      	str	r2, [r3, #16]
    // Mode 0x0 means increment time counter (TC) after the peripheral clock
    // has cycled the amount inside of the prescale.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kMode);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	685b      	ldr	r3, [r3, #4]
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	685b      	ldr	r3, [r3, #4]
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	681c      	ldr	r4, [r3, #0]
    1eca:	4b4a      	ldr	r3, [pc, #296]	; (1ff4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    1ecc:	781a      	ldrb	r2, [r3, #0]
    1ece:	785b      	ldrb	r3, [r3, #1]
    1ed0:	021b      	lsls	r3, r3, #8
    1ed2:	431a      	orrs	r2, r3
    1ed4:	2300      	movs	r3, #0
    1ed6:	f362 030f 	bfi	r3, r2, #0, #16
    1eda:	461a      	mov	r2, r3
    1edc:	2100      	movs	r1, #0
    1ede:	f001 f994 	bl	320a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1ee2:	4603      	mov	r3, r0
    1ee4:	6723      	str	r3, [r4, #112]	; 0x70
    // 0x0 for this register says to use the TC for input counts.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kCountInput);
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	685b      	ldr	r3, [r3, #4]
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	685b      	ldr	r3, [r3, #4]
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	681c      	ldr	r4, [r3, #0]
    1ef8:	4b3f      	ldr	r3, [pc, #252]	; (1ff8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    1efa:	781a      	ldrb	r2, [r3, #0]
    1efc:	785b      	ldrb	r3, [r3, #1]
    1efe:	021b      	lsls	r3, r3, #8
    1f00:	431a      	orrs	r2, r3
    1f02:	2300      	movs	r3, #0
    1f04:	f362 030f 	bfi	r3, r2, #0, #16
    1f08:	461a      	mov	r2, r3
    1f0a:	2100      	movs	r1, #0
    1f0c:	f001 f97d 	bl	320a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1f10:	4603      	mov	r3, r0
    1f12:	6723      	str	r3, [r4, #112]	; 0x70
    // Match register 0 is used to generate the desired frequency. If the time
    // counter TC is equal to MR0
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	685b      	ldr	r3, [r3, #4]
    1f1c:	681b      	ldr	r3, [r3, #0]
    1f1e:	3304      	adds	r3, #4
    1f20:	4619      	mov	r1, r3
    1f22:	4610      	mov	r0, r2
    1f24:	f7fe fc2d 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1f28:	4603      	mov	r3, r0
    1f2a:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1f2c:	463a      	mov	r2, r7
    1f2e:	f107 0308 	add.w	r3, r7, #8
    1f32:	4611      	mov	r1, r2
    1f34:	4618      	mov	r0, r3
    1f36:	f7ff fd6d 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1f3a:	4603      	mov	r3, r0
    1f3c:	60fb      	str	r3, [r7, #12]
    channel_.peripheral.registers->MR0 =
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	685b      	ldr	r3, [r3, #4]
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1f46:	f107 030c 	add.w	r3, r7, #12
    1f4a:	4618      	mov	r0, r3
    1f4c:	f7ff fd8e 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1f50:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1f52:	61a3      	str	r3, [r4, #24]
    // Sets match register 0 to reset when TC and Match 0 match each other,
    // meaning that the PWM pulse will cycle continuously.
    channel_.peripheral.registers->MCR =
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	685b      	ldr	r3, [r3, #4]
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	6958      	ldr	r0, [r3, #20]
    channel_.peripheral.registers->MCR =
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	685b      	ldr	r3, [r3, #4]
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1f66:	4b25      	ldr	r3, [pc, #148]	; (1ffc <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    1f68:	781a      	ldrb	r2, [r3, #0]
    1f6a:	785b      	ldrb	r3, [r3, #1]
    1f6c:	021b      	lsls	r3, r3, #8
    1f6e:	431a      	orrs	r2, r3
    1f70:	2300      	movs	r3, #0
    1f72:	f362 030f 	bfi	r3, r2, #0, #16
    1f76:	4619      	mov	r1, r3
    1f78:	f001 f927 	bl	31ca <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f7c:	4603      	mov	r3, r0
    channel_.peripheral.registers->MCR =
    1f7e:	6163      	str	r3, [r4, #20]
    // Enables PWM TC and PC for counting and enables PWM mode
    EnablePwm();
    1f80:	2101      	movs	r1, #1
    1f82:	6878      	ldr	r0, [r7, #4]
    1f84:	f000 f94c 	bl	2220 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    // Enables PWM[channel] output
    channel_.peripheral.registers->PCR =
        //bit::Clear(channel_.peripheral.registers->PCR,
        //           OutputControl::kEnableDoubleEdge.position) |
        bit::Set(channel_.peripheral.registers->PCR,
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	685b      	ldr	r3, [r3, #4]
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 OutputControl::kEnableOutput.position + channel_.channel);
    1f92:	2308      	movs	r3, #8
    1f94:	4619      	mov	r1, r3
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	685b      	ldr	r3, [r3, #4]
    1f9a:	7a1b      	ldrb	r3, [r3, #8]
    1f9c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	440b      	add	r3, r1
        bit::Set(channel_.peripheral.registers->PCR,
    1fa4:	4619      	mov	r1, r3
    channel_.peripheral.registers->PCR =
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	685b      	ldr	r3, [r3, #4]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->PCR,
    1fae:	4610      	mov	r0, r2
    1fb0:	f001 f87c 	bl	30ac <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1fb4:	4603      	mov	r3, r0
    channel_.peripheral.registers->PCR =
    1fb6:	64e3      	str	r3, [r4, #76]	; 0x4c

    channel_.pin.SetPinFunction(channel_.pin_function_id);
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	6858      	ldr	r0, [r3, #4]
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	685b      	ldr	r3, [r3, #4]
    1fc2:	685b      	ldr	r3, [r3, #4]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	687a      	ldr	r2, [r7, #4]
    1fca:	6852      	ldr	r2, [r2, #4]
    1fcc:	7a12      	ldrb	r2, [r2, #8]
    1fce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1fd2:	b2d2      	uxtb	r2, r2
    1fd4:	4611      	mov	r1, r2
    1fd6:	4798      	blx	r3

    return Status::kSuccess;
    1fd8:	2300      	movs	r3, #0
  }
    1fda:	4618      	mov	r0, r3
    1fdc:	3714      	adds	r7, #20
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd90      	pop	{r4, r7, pc}
    1fe2:	bf00      	nop
    1fe4:	0000a078 	.word	0x0000a078
    1fe8:	00009d58 	.word	0x00009d58
    1fec:	00009804 	.word	0x00009804
    1ff0:	00009538 	.word	0x00009538
    1ff4:	00009cec 	.word	0x00009cec
    1ff8:	00009cf0 	.word	0x00009cf0
    1ffc:	00009cdc 	.word	0x00009cdc

00002000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>:

  void SetDutyCycle(float duty_cycle) const override
    2000:	b590      	push	{r4, r7, lr}
    2002:	b085      	sub	sp, #20
    2004:	af02      	add	r7, sp, #8
    2006:	6078      	str	r0, [r7, #4]
    2008:	ed87 0a00 	vstr	s0, [r7]
  {
    SJ2_ASSERT_FATAL(0.0f <= duty_cycle && duty_cycle <= 1.0f,
    200c:	edd7 7a00 	vldr	s15, [r7]
    2010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2018:	bfac      	ite	ge
    201a:	2301      	movge	r3, #1
    201c:	2300      	movlt	r3, #0
    201e:	b2db      	uxtb	r3, r3
    2020:	f083 0301 	eor.w	r3, r3, #1
    2024:	b2db      	uxtb	r3, r3
    2026:	2b00      	cmp	r3, #0
    2028:	d110      	bne.n	204c <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x4c>
    202a:	edd7 7a00 	vldr	s15, [r7]
    202e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2032:	eef4 7ac7 	vcmpe.f32	s15, s14
    2036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    203a:	bf94      	ite	ls
    203c:	2301      	movls	r3, #1
    203e:	2300      	movhi	r3, #0
    2040:	b2db      	uxtb	r3, r3
    2042:	f083 0301 	eor.w	r3, r3, #1
    2046:	b2db      	uxtb	r3, r3
    2048:	2b00      	cmp	r3, #0
    204a:	d014      	beq.n	2076 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x76>
    204c:	6838      	ldr	r0, [r7, #0]
    204e:	f005 fcfd 	bl	7a4c <__aeabi_f2d>
    2052:	4603      	mov	r3, r0
    2054:	460c      	mov	r4, r1
    2056:	e9cd 3400 	strd	r3, r4, [sp]
    205a:	23e9      	movs	r3, #233	; 0xe9
    205c:	4a1b      	ldr	r2, [pc, #108]	; (20cc <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xcc>)
    205e:	491c      	ldr	r1, [pc, #112]	; (20d0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xd0>)
    2060:	481c      	ldr	r0, [pc, #112]	; (20d4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xd4>)
    2062:	f004 f9d9 	bl	6418 <printf>
    2066:	481c      	ldr	r0, [pc, #112]	; (20d8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xd8>)
    2068:	f003 f892 	bl	5190 <puts>
    206c:	2100      	movs	r1, #0
    206e:	2001      	movs	r0, #1
    2070:	f7fe fc2a 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    2074:	e7fe      	b.n	2074 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x74>
                     "duty_cycle of Duty Cycle provided is out of bounds: %f.", duty_cycle);
    *GetMatchRegisters(channel_.channel) = CalculateDutyCycle(duty_cycle);
    2076:	ed97 0a00 	vldr	s0, [r7]
    207a:	6878      	ldr	r0, [r7, #4]
    207c:	f000 f98a 	bl	2394 <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>
    2080:	4604      	mov	r4, r0
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	685b      	ldr	r3, [r3, #4]
    2086:	7a1b      	ldrb	r3, [r3, #8]
    2088:	f3c3 0302 	ubfx	r3, r3, #0, #3
    208c:	b2db      	uxtb	r3, r3
    208e:	4619      	mov	r1, r3
    2090:	6878      	ldr	r0, [r7, #4]
    2092:	f000 f92f 	bl	22f4 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    2096:	4603      	mov	r3, r0
    2098:	601c      	str	r4, [r3, #0]
    channel_.peripheral.registers->LER |= (1 << channel_.channel);
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	685b      	ldr	r3, [r3, #4]
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	681b      	ldr	r3, [r3, #0]
    20a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	685b      	ldr	r3, [r3, #4]
    20a8:	7a1b      	ldrb	r3, [r3, #8]
    20aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20ae:	b2db      	uxtb	r3, r3
    20b0:	4619      	mov	r1, r3
    20b2:	2301      	movs	r3, #1
    20b4:	408b      	lsls	r3, r1
    20b6:	4619      	mov	r1, r3
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	685b      	ldr	r3, [r3, #4]
    20bc:	681b      	ldr	r3, [r3, #0]
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	430a      	orrs	r2, r1
    20c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
    20c4:	bf00      	nop
    20c6:	370c      	adds	r7, #12
    20c8:	46bd      	mov	sp, r7
    20ca:	bd90      	pop	{r4, r7, pc}
    20cc:	0000a0d0 	.word	0x0000a0d0
    20d0:	00009d60 	.word	0x00009d60
    20d4:	000098d8 	.word	0x000098d8
    20d8:	00009538 	.word	0x00009538

000020dc <sjsu::lpc40xx::Pwm::GetDutyCycle() const>:

  float GetDutyCycle() const override
    20dc:	b580      	push	{r7, lr}
    20de:	ed2d 8b02 	vpush	{d8}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
    20e6:	6078      	str	r0, [r7, #4]
  {
    return (static_cast<float>(*GetMatchRegisters(channel_.channel)) /
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	685b      	ldr	r3, [r3, #4]
    20ec:	7a1b      	ldrb	r3, [r3, #8]
    20ee:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20f2:	b2db      	uxtb	r3, r3
    20f4:	4619      	mov	r1, r3
    20f6:	6878      	ldr	r0, [r7, #4]
    20f8:	f000 f8fc 	bl	22f4 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    20fc:	4603      	mov	r3, r0
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	ee07 3a90 	vmov	s15, r3
    2104:	eeb8 8a67 	vcvt.f32.u32	s16, s15
            static_cast<float>(*GetMatchRegisters(0)));
    2108:	2100      	movs	r1, #0
    210a:	6878      	ldr	r0, [r7, #4]
    210c:	f000 f8f2 	bl	22f4 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    2110:	4603      	mov	r3, r0
    2112:	681b      	ldr	r3, [r3, #0]
    2114:	ee07 3a90 	vmov	s15, r3
    2118:	eef8 7a67 	vcvt.f32.u32	s15, s15
    211c:	ee88 7a27 	vdiv.f32	s14, s16, s15
    2120:	eef0 7a47 	vmov.f32	s15, s14
  }
    2124:	eeb0 0a67 	vmov.f32	s0, s15
    2128:	3708      	adds	r7, #8
    212a:	46bd      	mov	sp, r7
    212c:	ecbd 8b02 	vpop	{d8}
    2130:	bd80      	pop	{r7, pc}

00002132 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2132:	b580      	push	{r7, lr}
    2134:	b082      	sub	sp, #8
    2136:	af00      	add	r7, sp, #0
    2138:	6078      	str	r0, [r7, #4]
    213a:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    213c:	6839      	ldr	r1, [r7, #0]
    213e:	6878      	ldr	r0, [r7, #4]
    2140:	f7fe faa8 	bl	694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2144:	4603      	mov	r3, r0
    2146:	f083 0301 	eor.w	r3, r3, #1
    214a:	b2db      	uxtb	r3, r3
		}
    214c:	4618      	mov	r0, r3
    214e:	3708      	adds	r7, #8
    2150:	46bd      	mov	sp, r7
    2152:	bd80      	pop	{r7, pc}

00002154 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetFrequency(units::frequency::hertz_t frequency_hz) const override
    2154:	b590      	push	{r4, r7, lr}
    2156:	b087      	sub	sp, #28
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(frequency_hz != 0_Hz, "Pwm Frequency cannot be zero Hz.");
    215e:	f04f 0000 	mov.w	r0, #0
    2162:	f04f 0100 	mov.w	r1, #0
    2166:	f7fe fa17 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    216a:	4603      	mov	r3, r0
    216c:	60fb      	str	r3, [r7, #12]
    216e:	f107 020c 	add.w	r2, r7, #12
    2172:	463b      	mov	r3, r7
    2174:	4611      	mov	r1, r2
    2176:	4618      	mov	r0, r3
    2178:	f7ff ffdb 	bl	2132 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    217c:	4603      	mov	r3, r0
    217e:	f083 0301 	eor.w	r3, r3, #1
    2182:	b2db      	uxtb	r3, r3
    2184:	2b00      	cmp	r3, #0
    2186:	d00d      	beq.n	21a4 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x50>
    2188:	23f6      	movs	r3, #246	; 0xf6
    218a:	4a21      	ldr	r2, [pc, #132]	; (2210 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xbc>)
    218c:	4921      	ldr	r1, [pc, #132]	; (2214 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    218e:	4822      	ldr	r0, [pc, #136]	; (2218 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    2190:	f004 f942 	bl	6418 <printf>
    2194:	4821      	ldr	r0, [pc, #132]	; (221c <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc8>)
    2196:	f002 fffb 	bl	5190 <puts>
    219a:	2100      	movs	r1, #0
    219c:	2001      	movs	r0, #1
    219e:	f7fe fb93 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    21a2:	e7fe      	b.n	21a2 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x4e>
    // Disables PWM mode; this will reset all counters to 0
    // And allow us to update MR0
    float previous_duty_cycle = GetDutyCycle();
    21a4:	6878      	ldr	r0, [r7, #4]
    21a6:	f7ff ff99 	bl	20dc <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    21aa:	ed87 0a05 	vstr	s0, [r7, #20]
    EnablePwm(false);
    21ae:	2100      	movs	r1, #0
    21b0:	6878      	ldr	r0, [r7, #4]
    21b2:	f000 f835 	bl	2220 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	685b      	ldr	r3, [r3, #4]
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	3304      	adds	r3, #4
    21c2:	4619      	mov	r1, r3
    21c4:	4610      	mov	r0, r2
    21c6:	f7fe fadc 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    21ca:	4603      	mov	r3, r0
    21cc:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    21ce:	463a      	mov	r2, r7
    21d0:	f107 0308 	add.w	r3, r7, #8
    21d4:	4611      	mov	r1, r2
    21d6:	4618      	mov	r0, r3
    21d8:	f7ff fc1c 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    21dc:	4603      	mov	r3, r0
    21de:	613b      	str	r3, [r7, #16]
    channel_.peripheral.registers->MR0 =
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	685b      	ldr	r3, [r3, #4]
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    21e8:	f107 0310 	add.w	r3, r7, #16
    21ec:	4618      	mov	r0, r3
    21ee:	f7ff fc3d 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    21f2:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    21f4:	61a3      	str	r3, [r4, #24]
    SetDutyCycle(previous_duty_cycle);
    21f6:	ed97 0a05 	vldr	s0, [r7, #20]
    21fa:	6878      	ldr	r0, [r7, #4]
    21fc:	f7ff ff00 	bl	2000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    EnablePwm();
    2200:	2101      	movs	r1, #1
    2202:	6878      	ldr	r0, [r7, #4]
    2204:	f000 f80c 	bl	2220 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
  }
    2208:	bf00      	nop
    220a:	371c      	adds	r7, #28
    220c:	46bd      	mov	sp, r7
    220e:	bd90      	pop	{r4, r7, pc}
    2210:	0000a028 	.word	0x0000a028
    2214:	00009d68 	.word	0x00009d68
    2218:	000099a8 	.word	0x000099a8
    221c:	00009538 	.word	0x00009538

00002220 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>:
    return result;
  }
  /// Helper method for enabling and disabling this PWM channel.
  /// @param enable - default to true, if set to false, will disable this PWM
  ///        channel.
  void EnablePwm(bool enable = true) const
    2220:	b580      	push	{r7, lr}
    2222:	b084      	sub	sp, #16
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	460b      	mov	r3, r1
    222a:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pwm_timer = &channel_.peripheral.registers->TCR;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	685b      	ldr	r3, [r3, #4]
    2230:	681b      	ldr	r3, [r3, #0]
    2232:	681b      	ldr	r3, [r3, #0]
    2234:	3304      	adds	r3, #4
    2236:	60fb      	str	r3, [r7, #12]
    if (enable)
    2238:	78fb      	ldrb	r3, [r7, #3]
    223a:	2b00      	cmp	r3, #0
    223c:	d040      	beq.n	22c0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xa0>
    {
      // Reset the Timer Counter
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterReset);
    223e:	68fb      	ldr	r3, [r7, #12]
    2240:	6818      	ldr	r0, [r3, #0]
    2242:	4b29      	ldr	r3, [pc, #164]	; (22e8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    2244:	781a      	ldrb	r2, [r3, #0]
    2246:	785b      	ldrb	r3, [r3, #1]
    2248:	021b      	lsls	r3, r3, #8
    224a:	431a      	orrs	r2, r3
    224c:	2300      	movs	r3, #0
    224e:	f362 030f 	bfi	r3, r2, #0, #16
    2252:	4619      	mov	r1, r3
    2254:	f000 ffb9 	bl	31ca <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2258:	4602      	mov	r2, r0
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	601a      	str	r2, [r3, #0]
      // Clear reset and allow timer to count
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kCounterReset);
    225e:	68fb      	ldr	r3, [r7, #12]
    2260:	6818      	ldr	r0, [r3, #0]
    2262:	4b21      	ldr	r3, [pc, #132]	; (22e8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    2264:	781a      	ldrb	r2, [r3, #0]
    2266:	785b      	ldrb	r3, [r3, #1]
    2268:	021b      	lsls	r3, r3, #8
    226a:	431a      	orrs	r2, r3
    226c:	2300      	movs	r3, #0
    226e:	f362 030f 	bfi	r3, r2, #0, #16
    2272:	4619      	mov	r1, r3
    2274:	f000 ffdb 	bl	322e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2278:	4602      	mov	r2, r0
    227a:	68fb      	ldr	r3, [r7, #12]
    227c:	601a      	str	r2, [r3, #0]
      // Enable PWM output
      *pwm_timer = bit::Set(*pwm_timer, Timer::kPwmEnable);
    227e:	68fb      	ldr	r3, [r7, #12]
    2280:	6818      	ldr	r0, [r3, #0]
    2282:	4b1a      	ldr	r3, [pc, #104]	; (22ec <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    2284:	781a      	ldrb	r2, [r3, #0]
    2286:	785b      	ldrb	r3, [r3, #1]
    2288:	021b      	lsls	r3, r3, #8
    228a:	431a      	orrs	r2, r3
    228c:	2300      	movs	r3, #0
    228e:	f362 030f 	bfi	r3, r2, #0, #16
    2292:	4619      	mov	r1, r3
    2294:	f000 ff99 	bl	31ca <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2298:	4602      	mov	r2, r0
    229a:	68fb      	ldr	r3, [r7, #12]
    229c:	601a      	str	r2, [r3, #0]
      // Enable counting
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterEnable);
    229e:	68fb      	ldr	r3, [r7, #12]
    22a0:	6818      	ldr	r0, [r3, #0]
    22a2:	4b13      	ldr	r3, [pc, #76]	; (22f0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xd0>)
    22a4:	781a      	ldrb	r2, [r3, #0]
    22a6:	785b      	ldrb	r3, [r3, #1]
    22a8:	021b      	lsls	r3, r3, #8
    22aa:	431a      	orrs	r2, r3
    22ac:	2300      	movs	r3, #0
    22ae:	f362 030f 	bfi	r3, r2, #0, #16
    22b2:	4619      	mov	r1, r3
    22b4:	f000 ff89 	bl	31ca <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    22b8:	4602      	mov	r2, r0
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	601a      	str	r2, [r3, #0]
    else
    {
      // Disable PWM output
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    }
  }
    22be:	e00f      	b.n	22e0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc0>
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    22c0:	68fb      	ldr	r3, [r7, #12]
    22c2:	6818      	ldr	r0, [r3, #0]
    22c4:	4b09      	ldr	r3, [pc, #36]	; (22ec <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    22c6:	781a      	ldrb	r2, [r3, #0]
    22c8:	785b      	ldrb	r3, [r3, #1]
    22ca:	021b      	lsls	r3, r3, #8
    22cc:	431a      	orrs	r2, r3
    22ce:	2300      	movs	r3, #0
    22d0:	f362 030f 	bfi	r3, r2, #0, #16
    22d4:	4619      	mov	r1, r3
    22d6:	f000 ffaa 	bl	322e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    22da:	4602      	mov	r2, r0
    22dc:	68fb      	ldr	r3, [r7, #12]
    22de:	601a      	str	r2, [r3, #0]
  }
    22e0:	bf00      	nop
    22e2:	3710      	adds	r7, #16
    22e4:	46bd      	mov	sp, r7
    22e6:	bd80      	pop	{r7, pc}
    22e8:	00009ce4 	.word	0x00009ce4
    22ec:	00009ce8 	.word	0x00009ce8
    22f0:	00009ce0 	.word	0x00009ce0

000022f4 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>:
  /// Helper method to make getting a pointer to the Match Register 0 more
  /// readable in the code.
  ///
  /// @return a pointer to the match 0 register.
  volatile uint32_t *GetMatchRegisters(uint8_t match) const
    22f4:	b480      	push	{r7}
    22f6:	b083      	sub	sp, #12
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
    22fc:	460b      	mov	r3, r1
    22fe:	70fb      	strb	r3, [r7, #3]
  {
    switch(match)
    2300:	78fb      	ldrb	r3, [r7, #3]
    2302:	2b06      	cmp	r3, #6
    2304:	d83a      	bhi.n	237c <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x88>
    2306:	a201      	add	r2, pc, #4	; (adr r2, 230c <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x18>)
    2308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    230c:	00002329 	.word	0x00002329
    2310:	00002335 	.word	0x00002335
    2314:	00002341 	.word	0x00002341
    2318:	0000234d 	.word	0x0000234d
    231c:	00002359 	.word	0x00002359
    2320:	00002365 	.word	0x00002365
    2324:	00002371 	.word	0x00002371
    {
      case 0: 
        return &channel_.peripheral.registers->MR0;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	685b      	ldr	r3, [r3, #4]
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	3318      	adds	r3, #24
    2332:	e028      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 1: 
        return &channel_.peripheral.registers->MR1;
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	685b      	ldr	r3, [r3, #4]
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	331c      	adds	r3, #28
    233e:	e022      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 2: 
        return &channel_.peripheral.registers->MR2;
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	685b      	ldr	r3, [r3, #4]
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	3320      	adds	r3, #32
    234a:	e01c      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 3: 
        return &channel_.peripheral.registers->MR3;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	685b      	ldr	r3, [r3, #4]
    2350:	681b      	ldr	r3, [r3, #0]
    2352:	681b      	ldr	r3, [r3, #0]
    2354:	3324      	adds	r3, #36	; 0x24
    2356:	e016      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 4: 
        return &channel_.peripheral.registers->MR4;
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	685b      	ldr	r3, [r3, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	3340      	adds	r3, #64	; 0x40
    2362:	e010      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 5: 
        return &channel_.peripheral.registers->MR5;
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	681b      	ldr	r3, [r3, #0]
    236a:	681b      	ldr	r3, [r3, #0]
    236c:	3344      	adds	r3, #68	; 0x44
    236e:	e00a      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 6: 
        return &channel_.peripheral.registers->MR6;
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	685b      	ldr	r3, [r3, #4]
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	3348      	adds	r3, #72	; 0x48
    237a:	e004      	b.n	2386 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      default: 
        return &channel_.peripheral.registers->MR0;
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	685b      	ldr	r3, [r3, #4]
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	681b      	ldr	r3, [r3, #0]
    2384:	3318      	adds	r3, #24
    }
  }
    2386:	4618      	mov	r0, r3
    2388:	370c      	adds	r7, #12
    238a:	46bd      	mov	sp, r7
    238c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2390:	4770      	bx	lr
    2392:	bf00      	nop

00002394 <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>:
  ///
  /// @param duty_cycle_percent - value from 0.0f to 1.0f indicating the duty
  ///        cycle precent.
  /// @return the nearest approximate match register value to achieve the
  ///         supplied duty cycle.
  uint32_t CalculateDutyCycle(float duty_cycle_percent) const
    2394:	b580      	push	{r7, lr}
    2396:	b084      	sub	sp, #16
    2398:	af00      	add	r7, sp, #0
    239a:	6078      	str	r0, [r7, #4]
    239c:	ed87 0a00 	vstr	s0, [r7]
  {
    float pwm_period = static_cast<float>(*GetMatchRegisters(0));
    23a0:	2100      	movs	r1, #0
    23a2:	6878      	ldr	r0, [r7, #4]
    23a4:	f7ff ffa6 	bl	22f4 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    23a8:	4603      	mov	r3, r0
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	ee07 3a90 	vmov	s15, r3
    23b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    23b4:	edc7 7a03 	vstr	s15, [r7, #12]
    return static_cast<uint32_t>(duty_cycle_percent * pwm_period);
    23b8:	ed97 7a00 	vldr	s14, [r7]
    23bc:	edd7 7a03 	vldr	s15, [r7, #12]
    23c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    23c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    23c8:	ee17 3a90 	vmov	r3, s15
  }
    23cc:	4618      	mov	r0, r3
    23ce:	3710      	adds	r7, #16
    23d0:	46bd      	mov	sp, r7
    23d2:	bd80      	pop	{r7, pc}

000023d4 <sjsu::Servo::Servo(sjsu::Pwm const&)>:
  static constexpr units::angle::degree_t kDefaultMinAngle     = 0_deg;
  static constexpr units::angle::degree_t kDefaultMaxAngle     = 90_deg;
  static constexpr std::chrono::microseconds kDefaultMinPulse  = 1000us;
  static constexpr std::chrono::microseconds kDefaultMaxPulse  = 2000us;

  explicit constexpr Servo(const sjsu::Pwm & pwm)
    23d4:	b590      	push	{r4, r7, lr}
    23d6:	b085      	sub	sp, #20
    23d8:	af00      	add	r7, sp, #0
    23da:	6078      	str	r0, [r7, #4]
    23dc:	6039      	str	r1, [r7, #0]
      : servo_pwm_(pwm),
        waveform_period_(0),
        pulse_lower_bound_(kDefaultMinPulse),
        pulse_upper_bound_(kDefaultMaxPulse),
        min_angle_(kDefaultMinAngle),
        max_angle_(kDefaultMaxAngle)
    23de:	4a17      	ldr	r2, [pc, #92]	; (243c <sjsu::Servo::Servo(sjsu::Pwm const&)+0x68>)
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	601a      	str	r2, [r3, #0]
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	683a      	ldr	r2, [r7, #0]
    23e8:	605a      	str	r2, [r3, #4]
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	f103 0208 	add.w	r2, r3, #8
    23f0:	2300      	movs	r3, #0
    23f2:	60fb      	str	r3, [r7, #12]
    23f4:	f107 030c 	add.w	r3, r7, #12
    23f8:	4619      	mov	r1, r3
    23fa:	4610      	mov	r0, r2
    23fc:	f000 fa68 	bl	28d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2400:	687a      	ldr	r2, [r7, #4]
    2402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2406:	f04f 0400 	mov.w	r4, #0
    240a:	e9c2 3404 	strd	r3, r4, [r2, #16]
    240e:	687a      	ldr	r2, [r7, #4]
    2410:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2414:	f04f 0400 	mov.w	r4, #0
    2418:	e9c2 3406 	strd	r3, r4, [r2, #24]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	f04f 0200 	mov.w	r2, #0
    2422:	621a      	str	r2, [r3, #32]
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	f04f 0200 	mov.w	r2, #0
    242a:	625a      	str	r2, [r3, #36]	; 0x24
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	4a04      	ldr	r2, [pc, #16]	; (2440 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x6c>)
    2430:	625a      	str	r2, [r3, #36]	; 0x24
  {
  }
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	4618      	mov	r0, r3
    2436:	3714      	adds	r7, #20
    2438:	46bd      	mov	sp, r7
    243a:	bd90      	pop	{r4, r7, pc}
    243c:	00009dc0 	.word	0x00009dc0
    2440:	42b40000 	.word	0x42b40000

00002444 <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void Initialize(
    2444:	b580      	push	{r7, lr}
    2446:	b082      	sub	sp, #8
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
    244c:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.Initialize(frequency);
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	685a      	ldr	r2, [r3, #4]
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	685b      	ldr	r3, [r3, #4]
    2456:	681b      	ldr	r3, [r3, #0]
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	6839      	ldr	r1, [r7, #0]
    245c:	4610      	mov	r0, r2
    245e:	4798      	blx	r3
    SetFrequency(frequency);
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	3304      	adds	r3, #4
    2466:	681b      	ldr	r3, [r3, #0]
    2468:	6839      	ldr	r1, [r7, #0]
    246a:	6878      	ldr	r0, [r7, #4]
    246c:	4798      	blx	r3
  }
    246e:	bf00      	nop
    2470:	3708      	adds	r7, #8
    2472:	46bd      	mov	sp, r7
    2474:	bd80      	pop	{r7, pc}

00002476 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2476:	b580      	push	{r7, lr}
    2478:	b086      	sub	sp, #24
    247a:	af00      	add	r7, sp, #0
    247c:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    247e:	6878      	ldr	r0, [r7, #4]
    2480:	f000 fee4 	bl	324c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2484:	eef0 7a40 	vmov.f32	s15, s0
	}
    2488:	eeb0 0a67 	vmov.f32	s0, s15
    248c:	3718      	adds	r7, #24
    248e:	46bd      	mov	sp, r7
    2490:	bd80      	pop	{r7, pc}

00002492 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2492:	b580      	push	{r7, lr}
    2494:	ed2d 8b02 	vpush	{d8}
    2498:	b084      	sub	sp, #16
    249a:	af00      	add	r7, sp, #0
    249c:	6078      	str	r0, [r7, #4]
    249e:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	4618      	mov	r0, r3
    24a4:	f7fe fc62 	bl	d6c <units::linear_scale<float>::operator()() const>
    24a8:	eeb0 8a40 	vmov.f32	s16, s0
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	4618      	mov	r0, r3
    24b0:	f7fe fc5c 	bl	d6c <units::linear_scale<float>::operator()() const>
    24b4:	eef0 7a40 	vmov.f32	s15, s0
    24b8:	edc7 7a03 	vstr	s15, [r7, #12]
    24bc:	f107 030c 	add.w	r3, r7, #12
    24c0:	4618      	mov	r0, r3
    24c2:	f7ff ffd8 	bl	2476 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    24c6:	eeb0 7a40 	vmov.f32	s14, s0
    24ca:	eec8 7a07 	vdiv.f32	s15, s16, s14
    24ce:	f107 0308 	add.w	r3, r7, #8
    24d2:	eeb0 0a67 	vmov.f32	s0, s15
    24d6:	4618      	mov	r0, r3
    24d8:	f7fe fc83 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    24dc:	68bb      	ldr	r3, [r7, #8]
	}
    24de:	4618      	mov	r0, r3
    24e0:	3710      	adds	r7, #16
    24e2:	46bd      	mov	sp, r7
    24e4:	ecbd 8b02 	vpop	{d8}
    24e8:	bd80      	pop	{r7, pc}

000024ea <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    24ea:	b490      	push	{r4, r7}
    24ec:	b082      	sub	sp, #8
    24ee:	af00      	add	r7, sp, #0
    24f0:	6078      	str	r0, [r7, #4]
    24f2:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    24f4:	683b      	ldr	r3, [r7, #0]
    24f6:	681b      	ldr	r3, [r3, #0]
    24f8:	f04f 0400 	mov.w	r4, #0
    24fc:	687a      	ldr	r2, [r7, #4]
    24fe:	e9c2 3400 	strd	r3, r4, [r2]
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	4618      	mov	r0, r3
    2506:	3708      	adds	r7, #8
    2508:	46bd      	mov	sp, r7
    250a:	bc90      	pop	{r4, r7}
    250c:	4770      	bx	lr

0000250e <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void SetFrequency(
    250e:	b590      	push	{r4, r7, lr}
    2510:	b089      	sub	sp, #36	; 0x24
    2512:	af00      	add	r7, sp, #0
    2514:	6078      	str	r0, [r7, #4]
    2516:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.SetFrequency(frequency);
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	685a      	ldr	r2, [r3, #4]
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	685b      	ldr	r3, [r3, #4]
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	330c      	adds	r3, #12
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	6839      	ldr	r1, [r7, #0]
    2528:	4610      	mov	r0, r2
    252a:	4798      	blx	r3
    waveform_period_ =
        std::chrono::microseconds((1_MHz / frequency).to<uint32_t>());
    252c:	f04f 0001 	mov.w	r0, #1
    2530:	f04f 0100 	mov.w	r1, #0
    2534:	f7fe f846 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
    2538:	4603      	mov	r3, r0
    253a:	61fb      	str	r3, [r7, #28]
    253c:	463a      	mov	r2, r7
    253e:	f107 031c 	add.w	r3, r7, #28
    2542:	4611      	mov	r1, r2
    2544:	4618      	mov	r0, r3
    2546:	f7ff ffa4 	bl	2492 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    254a:	4603      	mov	r3, r0
    254c:	61bb      	str	r3, [r7, #24]
    254e:	f107 0318 	add.w	r3, r7, #24
    2552:	4618      	mov	r0, r3
    2554:	f7ff fa8a 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    2558:	4603      	mov	r3, r0
    255a:	617b      	str	r3, [r7, #20]
    255c:	f107 0214 	add.w	r2, r7, #20
    2560:	f107 0308 	add.w	r3, r7, #8
    2564:	4611      	mov	r1, r2
    2566:	4618      	mov	r0, r3
    2568:	f7ff ffbf 	bl	24ea <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    waveform_period_ =
    256c:	687a      	ldr	r2, [r7, #4]
    256e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    2572:	e9c2 3402 	strd	r3, r4, [r2, #8]
  }
    2576:	bf00      	nop
    2578:	3724      	adds	r7, #36	; 0x24
    257a:	46bd      	mov	sp, r7
    257c:	bd90      	pop	{r4, r7, pc}

0000257e <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  // Sets the minimum and maximum pulse width lengths that the class will
  // use to clamp its pulse width output when using SetAngle.
  virtual void SetPulseBounds(std::chrono::microseconds lower,
    257e:	b490      	push	{r4, r7}
    2580:	b084      	sub	sp, #16
    2582:	af00      	add	r7, sp, #0
    2584:	60f8      	str	r0, [r7, #12]
    2586:	e9c7 2300 	strd	r2, r3, [r7]
                              std::chrono::microseconds upper)
  {
    pulse_lower_bound_ = lower;
    258a:	68fa      	ldr	r2, [r7, #12]
    258c:	e9d7 3400 	ldrd	r3, r4, [r7]
    2590:	e9c2 3404 	strd	r3, r4, [r2, #16]
    pulse_upper_bound_ = upper;
    2594:	68fa      	ldr	r2, [r7, #12]
    2596:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    259a:	e9c2 3406 	strd	r3, r4, [r2, #24]
  }
    259e:	bf00      	nop
    25a0:	3710      	adds	r7, #16
    25a2:	46bd      	mov	sp, r7
    25a4:	bc90      	pop	{r4, r7}
    25a6:	4770      	bx	lr

000025a8 <sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Sets your angle bounds that maps angles to microseconds when
  // using SetAngle
  virtual void SetAngleBounds(units::angle::degree_t min_angle,
    25a8:	b480      	push	{r7}
    25aa:	b085      	sub	sp, #20
    25ac:	af00      	add	r7, sp, #0
    25ae:	60f8      	str	r0, [r7, #12]
    25b0:	60b9      	str	r1, [r7, #8]
    25b2:	607a      	str	r2, [r7, #4]
                              units::angle::degree_t max_angle)
  {
    min_angle_ = min_angle;
    25b4:	68fb      	ldr	r3, [r7, #12]
    25b6:	68ba      	ldr	r2, [r7, #8]
    25b8:	621a      	str	r2, [r3, #32]
    max_angle_ = max_angle;
    25ba:	68fb      	ldr	r3, [r7, #12]
    25bc:	687a      	ldr	r2, [r7, #4]
    25be:	625a      	str	r2, [r3, #36]	; 0x24
  }
    25c0:	bf00      	nop
    25c2:	3714      	adds	r7, #20
    25c4:	46bd      	mov	sp, r7
    25c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    25ca:	4770      	bx	lr

000025cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    25cc:	b490      	push	{r4, r7}
    25ce:	b082      	sub	sp, #8
    25d0:	af00      	add	r7, sp, #0
    25d2:	6078      	str	r0, [r7, #4]
	{ return __r; }
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	e9d3 3400 	ldrd	r3, r4, [r3]
    25da:	4618      	mov	r0, r3
    25dc:	4621      	mov	r1, r4
    25de:	3708      	adds	r7, #8
    25e0:	46bd      	mov	sp, r7
    25e2:	bc90      	pop	{r4, r7}
    25e4:	4770      	bx	lr

000025e6 <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  virtual void SetPulseWidthInMicroseconds(
    25e6:	b5b0      	push	{r4, r5, r7, lr}
    25e8:	ed2d 8b02 	vpush	{d8}
    25ec:	b084      	sub	sp, #16
    25ee:	af00      	add	r7, sp, #0
    25f0:	60f8      	str	r0, [r7, #12]
    25f2:	e9c7 2300 	strd	r2, r3, [r7]
      std::chrono::microseconds pulse_width)
  {
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    25f6:	68fb      	ldr	r3, [r7, #12]
    25f8:	685d      	ldr	r5, [r3, #4]
    25fa:	68fb      	ldr	r3, [r7, #12]
    25fc:	685b      	ldr	r3, [r3, #4]
                            static_cast<float>(waveform_period_.count()));
    25fe:	681b      	ldr	r3, [r3, #0]
    2600:	3304      	adds	r3, #4
    2602:	681c      	ldr	r4, [r3, #0]
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    2604:	463b      	mov	r3, r7
    2606:	4618      	mov	r0, r3
    2608:	f7ff ffe0 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    260c:	4602      	mov	r2, r0
    260e:	460b      	mov	r3, r1
    2610:	4610      	mov	r0, r2
    2612:	4619      	mov	r1, r3
    2614:	f005 fc1a 	bl	7e4c <__aeabi_l2f>
    2618:	ee08 0a10 	vmov	s16, r0
                            static_cast<float>(waveform_period_.count()));
    261c:	68fb      	ldr	r3, [r7, #12]
    261e:	3308      	adds	r3, #8
    2620:	4618      	mov	r0, r3
    2622:	f7ff ffd3 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2626:	4602      	mov	r2, r0
    2628:	460b      	mov	r3, r1
    262a:	4610      	mov	r0, r2
    262c:	4619      	mov	r1, r3
    262e:	f005 fc0d 	bl	7e4c <__aeabi_l2f>
    2632:	ee07 0a10 	vmov	s14, r0
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    2636:	eec8 7a07 	vdiv.f32	s15, s16, s14
    263a:	eeb0 0a67 	vmov.f32	s0, s15
    263e:	4628      	mov	r0, r5
    2640:	47a0      	blx	r4
  }
    2642:	bf00      	nop
    2644:	3710      	adds	r7, #16
    2646:	46bd      	mov	sp, r7
    2648:	ecbd 8b02 	vpop	{d8}
    264c:	bdb0      	pop	{r4, r5, r7, pc}

0000264e <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>:
		inline constexpr Ty to() const noexcept
    264e:	b580      	push	{r7, lr}
    2650:	b082      	sub	sp, #8
    2652:	af00      	add	r7, sp, #0
    2654:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    2656:	6878      	ldr	r0, [r7, #4]
    2658:	f000 f807 	bl	266a <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    265c:	eef0 7a40 	vmov.f32	s15, s0
		}
    2660:	eeb0 0a67 	vmov.f32	s0, s15
    2664:	3708      	adds	r7, #8
    2666:	46bd      	mov	sp, r7
    2668:	bd80      	pop	{r7, pc}

0000266a <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    266a:	b580      	push	{r7, lr}
    266c:	b082      	sub	sp, #8
    266e:	af00      	add	r7, sp, #0
    2670:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	4618      	mov	r0, r3
    2676:	f7fe fb79 	bl	d6c <units::linear_scale<float>::operator()() const>
    267a:	eef0 7a40 	vmov.f32	s15, s0
		}
    267e:	eeb0 0a67 	vmov.f32	s0, s15
    2682:	3708      	adds	r7, #8
    2684:	46bd      	mov	sp, r7
    2686:	bd80      	pop	{r7, pc}

00002688 <sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Should only be used after pulse bounds and angle bounds have been set.
  virtual void SetAngle(units::angle::degree_t angle)
    2688:	b5b0      	push	{r4, r5, r7, lr}
    268a:	ed2d 8b04 	vpush	{d8-d9}
    268e:	b086      	sub	sp, #24
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
    2694:	6039      	str	r1, [r7, #0]
  {
    float pulse_width = Map(angle.to<float>(),
    2696:	463b      	mov	r3, r7
    2698:	4618      	mov	r0, r3
    269a:	f7ff ffd8 	bl	264e <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    269e:	eeb0 8a40 	vmov.f32	s16, s0
    26a2:	687b      	ldr	r3, [r7, #4]
    26a4:	3320      	adds	r3, #32
    26a6:	4618      	mov	r0, r3
    26a8:	f7ff ffd1 	bl	264e <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    26ac:	eef0 8a40 	vmov.f32	s17, s0
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	3324      	adds	r3, #36	; 0x24
    26b4:	4618      	mov	r0, r3
    26b6:	f7ff ffca 	bl	264e <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    26ba:	eeb0 9a40 	vmov.f32	s18, s0
                            min_angle_.to<float>(),
                            max_angle_.to<float>(),
                            static_cast<float>(pulse_lower_bound_.count()),
    26be:	687b      	ldr	r3, [r7, #4]
    26c0:	3310      	adds	r3, #16
    26c2:	4618      	mov	r0, r3
    26c4:	f7ff ff82 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    26c8:	4603      	mov	r3, r0
    26ca:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    26cc:	4618      	mov	r0, r3
    26ce:	4621      	mov	r1, r4
    26d0:	f005 fbbc 	bl	7e4c <__aeabi_l2f>
    26d4:	4605      	mov	r5, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	3318      	adds	r3, #24
    26da:	4618      	mov	r0, r3
    26dc:	f7ff ff76 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    26e0:	4603      	mov	r3, r0
    26e2:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    26e4:	4618      	mov	r0, r3
    26e6:	4621      	mov	r1, r4
    26e8:	f005 fbb0 	bl	7e4c <__aeabi_l2f>
    26ec:	4603      	mov	r3, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    26ee:	ee02 3a10 	vmov	s4, r3
    26f2:	ee01 5a90 	vmov	s3, r5
    26f6:	eeb0 1a49 	vmov.f32	s2, s18
    26fa:	eef0 0a68 	vmov.f32	s1, s17
    26fe:	eeb0 0a48 	vmov.f32	s0, s16
    2702:	f000 fdbd 	bl	3280 <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    2706:	ed87 0a05 	vstr	s0, [r7, #20]
    SetPulseWidthInMicroseconds(
        std::chrono::microseconds(static_cast<uint32_t>(pulse_width)));
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	681b      	ldr	r3, [r3, #0]
    270e:	3310      	adds	r3, #16
    2710:	681c      	ldr	r4, [r3, #0]
    2712:	edd7 7a05 	vldr	s15, [r7, #20]
    2716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    271a:	ee17 3a90 	vmov	r3, s15
    271e:	613b      	str	r3, [r7, #16]
    SetPulseWidthInMicroseconds(
    2720:	f107 0210 	add.w	r2, r7, #16
    2724:	f107 0308 	add.w	r3, r7, #8
    2728:	4611      	mov	r1, r2
    272a:	4618      	mov	r0, r3
    272c:	f7ff fedd 	bl	24ea <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    2730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2734:	6878      	ldr	r0, [r7, #4]
    2736:	47a0      	blx	r4
  }
    2738:	bf00      	nop
    273a:	3718      	adds	r7, #24
    273c:	46bd      	mov	sp, r7
    273e:	ecbd 8b04 	vpop	{d8-d9}
    2742:	bdb0      	pop	{r4, r5, r7, pc}

00002744 <std::chrono::duration_values<long long>::max()>:
	max()
    2744:	b598      	push	{r3, r4, r7, lr}
    2746:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    2748:	f7fd fe0e 	bl	368 <std::numeric_limits<long long>::max()>
    274c:	4603      	mov	r3, r0
    274e:	460c      	mov	r4, r1
    2750:	4618      	mov	r0, r3
    2752:	4621      	mov	r1, r4
    2754:	bd98      	pop	{r3, r4, r7, pc}

00002756 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    2756:	b590      	push	{r4, r7, lr}
    2758:	b085      	sub	sp, #20
    275a:	af00      	add	r7, sp, #0
    275c:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    275e:	f7ff fff1 	bl	2744 <std::chrono::duration_values<long long>::max()>
    2762:	4603      	mov	r3, r0
    2764:	460c      	mov	r4, r1
    2766:	e9c7 3402 	strd	r3, r4, [r7, #8]
    276a:	f107 0308 	add.w	r3, r7, #8
    276e:	4619      	mov	r1, r3
    2770:	6878      	ldr	r0, [r7, #4]
    2772:	f7fe f8fb 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2776:	6878      	ldr	r0, [r7, #4]
    2778:	3714      	adds	r7, #20
    277a:	46bd      	mov	sp, r7
    277c:	bd90      	pop	{r4, r7, pc}
    277e:	Address 0x000000000000277e is out of bounds.


00002780 <vUartTask(void*)>:
#include "third_party/FreeRTOS/Source/include/queue.h"

paramsStruct *shared_mem = new paramsStruct;
//Task to send and recive data over UART
void vUartTask(void *pvParameters)
{
    2780:	b590      	push	{r4, r7, lr}
    2782:	b093      	sub	sp, #76	; 0x4c
    2784:	af02      	add	r7, sp, #8
    2786:	6078      	str	r0, [r7, #4]
  //paramsStruct *shared_mem = (paramsStruct *) pvParameters;
  uint8_t receive = 0;
    2788:	2300      	movs	r3, #0
    278a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                              DefaultSystemController())
    278e:	f7fe fcfb 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2792:	4603      	mov	r3, r0
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    2794:	461a      	mov	r2, r3
    2796:	f107 031c 	add.w	r3, r7, #28
    279a:	4946      	ldr	r1, [pc, #280]	; (28b4 <vUartTask(void*)+0x134>)
    279c:	4618      	mov	r0, r3
    279e:	f7fe ff59 	bl	1654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
  uart2.Initialize(38400);
    27a2:	f107 031c 	add.w	r3, r7, #28
    27a6:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    27aa:	4618      	mov	r0, r3
    27ac:	f7fe ff6c 	bl	1688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    27b0:	231c      	movs	r3, #28
    27b2:	4a41      	ldr	r2, [pc, #260]	; (28b8 <vUartTask(void*)+0x138>)
    27b4:	4941      	ldr	r1, [pc, #260]	; (28bc <vUartTask(void*)+0x13c>)
    27b6:	4842      	ldr	r0, [pc, #264]	; (28c0 <vUartTask(void*)+0x140>)
    27b8:	f003 fe2e 	bl	6418 <printf>
  int fing_arr[NUM_FINGERS] = {2,3,4,5};
    27bc:	4b41      	ldr	r3, [pc, #260]	; (28c4 <vUartTask(void*)+0x144>)
    27be:	f107 040c 	add.w	r4, r7, #12
    27c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    27c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  while(1)
  {
    // Send a float (Glove data) over UART
    for(int i = 0; i < NUM_FINGERS; i++)
    27c8:	2300      	movs	r3, #0
    27ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    27cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27ce:	2b03      	cmp	r3, #3
    27d0:	dc6c      	bgt.n	28ac <vUartTask(void*)+0x12c>
    {
      for(size_t j = 24; j > 0; j -= 8)
    27d2:	2318      	movs	r3, #24
    27d4:	63bb      	str	r3, [r7, #56]	; 0x38
    27d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    27d8:	2b00      	cmp	r3, #0
    27da:	d016      	beq.n	280a <vUartTask(void*)+0x8a>
      {
        uint8_t sendval = shared_mem->sen[i].ui >> j; 
    27dc:	4b3a      	ldr	r3, [pc, #232]	; (28c8 <vUartTask(void*)+0x148>)
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    27e2:	3204      	adds	r2, #4
    27e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    27e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    27ea:	fa22 f303 	lsr.w	r3, r2, r3
    27ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        uart2.Write(sendval);
    27f2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
    27f6:	f107 031c 	add.w	r3, r7, #28
    27fa:	4611      	mov	r1, r2
    27fc:	4618      	mov	r0, r3
    27fe:	f7fe fccd 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      for(size_t j = 24; j > 0; j -= 8)
    2802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2804:	3b08      	subs	r3, #8
    2806:	63bb      	str	r3, [r7, #56]	; 0x38
    2808:	e7e5      	b.n	27d6 <vUartTask(void*)+0x56>
      }
      uart2.Write((uint8_t) shared_mem->sen[i].ui);
    280a:	4b2f      	ldr	r3, [pc, #188]	; (28c8 <vUartTask(void*)+0x148>)
    280c:	681b      	ldr	r3, [r3, #0]
    280e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2810:	3204      	adds	r2, #4
    2812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2816:	b2da      	uxtb	r2, r3
    2818:	f107 031c 	add.w	r3, r7, #28
    281c:	4611      	mov	r1, r2
    281e:	4618      	mov	r0, r3
    2820:	f7fe fcbc 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      //LOG_INFO("Sent value %f over UART %i", shared_mem->sen[i].f, i);
      for(size_t j = 0; j < 4; j++)
    2824:	2300      	movs	r3, #0
    2826:	637b      	str	r3, [r7, #52]	; 0x34
    2828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    282a:	2b03      	cmp	r3, #3
    282c:	d820      	bhi.n	2870 <vUartTask(void*)+0xf0>
      {
        receive = uart2.Read();
    282e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2832:	4618      	mov	r0, r3
    2834:	f7ff ff8f 	bl	2756 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    2838:	f107 011c 	add.w	r1, r7, #28
    283c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    2840:	4608      	mov	r0, r1
    2842:	f7fe fcbd 	bl	11c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    2846:	4603      	mov	r3, r0
    2848:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        shared_mem->rec[i].ui = (shared_mem->rec[i].ui << 8) | receive;
    284c:	4b1e      	ldr	r3, [pc, #120]	; (28c8 <vUartTask(void*)+0x148>)
    284e:	681b      	ldr	r3, [r3, #0]
    2850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2856:	0219      	lsls	r1, r3, #8
    2858:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
    285c:	4b1a      	ldr	r3, [pc, #104]	; (28c8 <vUartTask(void*)+0x148>)
    285e:	681b      	ldr	r3, [r3, #0]
    2860:	4311      	orrs	r1, r2
    2862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for(size_t j = 0; j < 4; j++)
    2868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    286a:	3301      	adds	r3, #1
    286c:	637b      	str	r3, [r7, #52]	; 0x34
    286e:	e7db      	b.n	2828 <vUartTask(void*)+0xa8>
      }
      printf("adc %d Read %f for finger %d\n", fing_arr[i], shared_mem->rec[i].f, i);
    2870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2872:	009b      	lsls	r3, r3, #2
    2874:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2878:	4413      	add	r3, r2
    287a:	f853 4c34 	ldr.w	r4, [r3, #-52]
    287e:	4b12      	ldr	r3, [pc, #72]	; (28c8 <vUartTask(void*)+0x148>)
    2880:	681a      	ldr	r2, [r3, #0]
    2882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2884:	009b      	lsls	r3, r3, #2
    2886:	4413      	add	r3, r2
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	4618      	mov	r0, r3
    288c:	f005 f8de 	bl	7a4c <__aeabi_f2d>
    2890:	460a      	mov	r2, r1
    2892:	4601      	mov	r1, r0
    2894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2896:	9300      	str	r3, [sp, #0]
    2898:	4613      	mov	r3, r2
    289a:	460a      	mov	r2, r1
    289c:	4621      	mov	r1, r4
    289e:	480b      	ldr	r0, [pc, #44]	; (28cc <vUartTask(void*)+0x14c>)
    28a0:	f003 fdba 	bl	6418 <printf>
    for(int i = 0; i < NUM_FINGERS; i++)
    28a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28a6:	3301      	adds	r3, #1
    28a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    28aa:	e78f      	b.n	27cc <vUartTask(void*)+0x4c>
    }
    vTaskDelay(200);
    28ac:	20c8      	movs	r0, #200	; 0xc8
    28ae:	f001 fb59 	bl	3f64 <vTaskDelay>
  } 
    28b2:	e789      	b.n	27c8 <vUartTask(void*)+0x48>
    28b4:	1000000c 	.word	0x1000000c
    28b8:	00009ea4 	.word	0x00009ea4
    28bc:	00009d88 	.word	0x00009d88
    28c0:	00009a4c 	.word	0x00009a4c
    28c4:	00009ab8 	.word	0x00009ab8
    28c8:	10000278 	.word	0x10000278
    28cc:	00009a98 	.word	0x00009a98

000028d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    28d0:	b490      	push	{r4, r7}
    28d2:	b082      	sub	sp, #8
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
    28d8:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    28da:	683b      	ldr	r3, [r7, #0]
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	ea4f 74e3 	mov.w	r4, r3, asr #31
    28e2:	687a      	ldr	r2, [r7, #4]
    28e4:	e9c2 3400 	strd	r3, r4, [r2]
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	4618      	mov	r0, r3
    28ec:	3708      	adds	r7, #8
    28ee:	46bd      	mov	sp, r7
    28f0:	bc90      	pop	{r4, r7}
    28f2:	4770      	bx	lr

000028f4 <sjsu::Adc::Adc(sjsu::Adc const&)>:
    28f4:	b480      	push	{r7}
    28f6:	b083      	sub	sp, #12
    28f8:	af00      	add	r7, sp, #0
    28fa:	6078      	str	r0, [r7, #4]
    28fc:	6039      	str	r1, [r7, #0]
    28fe:	4a05      	ldr	r2, [pc, #20]	; (2914 <sjsu::Adc::Adc(sjsu::Adc const&)+0x20>)
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	601a      	str	r2, [r3, #0]
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	4618      	mov	r0, r3
    2908:	370c      	adds	r7, #12
    290a:	46bd      	mov	sp, r7
    290c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2910:	4770      	bx	lr
    2912:	bf00      	nop
    2914:	00009e24 	.word	0x00009e24

00002918 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>:
class Adc final : public sjsu::Adc
    2918:	b580      	push	{r7, lr}
    291a:	b082      	sub	sp, #8
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
    2920:	6039      	str	r1, [r7, #0]
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	683a      	ldr	r2, [r7, #0]
    2926:	4611      	mov	r1, r2
    2928:	4618      	mov	r0, r3
    292a:	f7ff ffe3 	bl	28f4 <sjsu::Adc::Adc(sjsu::Adc const&)>
    292e:	4a08      	ldr	r2, [pc, #32]	; (2950 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)+0x38>)
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	601a      	str	r2, [r3, #0]
    2934:	683b      	ldr	r3, [r7, #0]
    2936:	685a      	ldr	r2, [r3, #4]
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	605a      	str	r2, [r3, #4]
    293c:	683b      	ldr	r3, [r7, #0]
    293e:	689a      	ldr	r2, [r3, #8]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	609a      	str	r2, [r3, #8]
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	4618      	mov	r0, r3
    2948:	3708      	adds	r7, #8
    294a:	46bd      	mov	sp, r7
    294c:	bd80      	pop	{r7, pc}
    294e:	bf00      	nop
    2950:	00009e10 	.word	0x00009e10

00002954 <sjsu::Servo::Servo(sjsu::Servo const&)>:
class Servo
    2954:	b490      	push	{r4, r7}
    2956:	b082      	sub	sp, #8
    2958:	af00      	add	r7, sp, #0
    295a:	6078      	str	r0, [r7, #4]
    295c:	6039      	str	r1, [r7, #0]
    295e:	4a13      	ldr	r2, [pc, #76]	; (29ac <sjsu::Servo::Servo(sjsu::Servo const&)+0x58>)
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	601a      	str	r2, [r3, #0]
    2964:	683b      	ldr	r3, [r7, #0]
    2966:	685a      	ldr	r2, [r3, #4]
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	605a      	str	r2, [r3, #4]
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	683b      	ldr	r3, [r7, #0]
    2970:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
    2974:	e9c2 3402 	strd	r3, r4, [r2, #8]
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	683b      	ldr	r3, [r7, #0]
    297c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
    2980:	e9c2 3404 	strd	r3, r4, [r2, #16]
    2984:	687a      	ldr	r2, [r7, #4]
    2986:	683b      	ldr	r3, [r7, #0]
    2988:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
    298c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    2990:	687b      	ldr	r3, [r7, #4]
    2992:	683a      	ldr	r2, [r7, #0]
    2994:	6a12      	ldr	r2, [r2, #32]
    2996:	621a      	str	r2, [r3, #32]
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	683a      	ldr	r2, [r7, #0]
    299c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    299e:	625a      	str	r2, [r3, #36]	; 0x24
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	4618      	mov	r0, r3
    29a4:	3708      	adds	r7, #8
    29a6:	46bd      	mov	sp, r7
    29a8:	bc90      	pop	{r4, r7}
    29aa:	4770      	bx	lr
    29ac:	00009dc0 	.word	0x00009dc0

000029b0 <vSensorAndActuatorTask(void*)>:
//     vTaskDelay(100);
//   }
// } 

void vSensorAndActuatorTask(void *pvParameters)
{
    29b0:	b5b0      	push	{r4, r5, r7, lr}
    29b2:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
    29b6:	af02      	add	r7, sp, #8
    29b8:	1d3b      	adds	r3, r7, #4
    29ba:	6018      	str	r0, [r3, #0]
  //paramsStruct *shared_mem = (paramsStruct *) pvParameters;
  float pot_position = 0;
    29bc:	f04f 0300 	mov.w	r3, #0
    29c0:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  uint32_t prev_vals[NUM_FINGERS] = {0};
    29c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
    29c8:	2200      	movs	r2, #0
    29ca:	601a      	str	r2, [r3, #0]
    29cc:	605a      	str	r2, [r3, #4]
    29ce:	609a      	str	r2, [r3, #8]
    29d0:	60da      	str	r2, [r3, #12]
                             DefaultSystemController())
    29d2:	f7fe fbd9 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    29d6:	4603      	mov	r3, r0
  // Pin initialization for ADC channels
  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    29d8:	461a      	mov	r2, r3
    29da:	f507 7311 	add.w	r3, r7, #580	; 0x244
    29de:	49d6      	ldr	r1, [pc, #856]	; (2d38 <vSensorAndActuatorTask(void*)+0x388>)
    29e0:	4618      	mov	r0, r3
    29e2:	f7fe fffd 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    29e6:	f7fe fbcf 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    29ea:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc3(sjsu::lpc40xx::Adc::Channel::kChannel3);
    29ec:	461a      	mov	r2, r3
    29ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
    29f2:	49d2      	ldr	r1, [pc, #840]	; (2d3c <vSensorAndActuatorTask(void*)+0x38c>)
    29f4:	4618      	mov	r0, r3
    29f6:	f7fe fff3 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    29fa:	f7fe fbc5 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    29fe:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc4(sjsu::lpc40xx::Adc::Channel::kChannel4);
    2a00:	461a      	mov	r2, r3
    2a02:	f507 730b 	add.w	r3, r7, #556	; 0x22c
    2a06:	49ce      	ldr	r1, [pc, #824]	; (2d40 <vSensorAndActuatorTask(void*)+0x390>)
    2a08:	4618      	mov	r0, r3
    2a0a:	f7fe ffe9 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2a0e:	f7fe fbbb 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a12:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc5(sjsu::lpc40xx::Adc::Channel::kChannel5);
    2a14:	461a      	mov	r2, r3
    2a16:	f507 7308 	add.w	r3, r7, #544	; 0x220
    2a1a:	49ca      	ldr	r1, [pc, #808]	; (2d44 <vSensorAndActuatorTask(void*)+0x394>)
    2a1c:	4618      	mov	r0, r3
    2a1e:	f7fe ffdf 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    2a22:	f7fe fbb1 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a26:	4603      	mov	r3, r0

  // Pin initialization for Linear Actuators
  sjsu::lpc40xx::Pwm p2_0(sjsu::lpc40xx::Pwm::Channel::kPwm0);
    2a28:	461a      	mov	r2, r3
    2a2a:	f507 7305 	add.w	r3, r7, #532	; 0x214
    2a2e:	49c6      	ldr	r1, [pc, #792]	; (2d48 <vSensorAndActuatorTask(void*)+0x398>)
    2a30:	4618      	mov	r0, r3
    2a32:	f7ff f9eb 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a36:	f7fe fba7 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a3a:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_1(sjsu::lpc40xx::Pwm::Channel::kPwm1);
    2a3c:	461a      	mov	r2, r3
    2a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
    2a42:	49c2      	ldr	r1, [pc, #776]	; (2d4c <vSensorAndActuatorTask(void*)+0x39c>)
    2a44:	4618      	mov	r0, r3
    2a46:	f7ff f9e1 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a4a:	f7fe fb9d 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a4e:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_2(sjsu::lpc40xx::Pwm::Channel::kPwm2);
    2a50:	461a      	mov	r2, r3
    2a52:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
    2a56:	49be      	ldr	r1, [pc, #760]	; (2d50 <vSensorAndActuatorTask(void*)+0x3a0>)
    2a58:	4618      	mov	r0, r3
    2a5a:	f7ff f9d7 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a5e:	f7fe fb93 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a62:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_4(sjsu::lpc40xx::Pwm::Channel::kPwm4);
    2a64:	461a      	mov	r2, r3
    2a66:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
    2a6a:	49ba      	ldr	r1, [pc, #744]	; (2d54 <vSensorAndActuatorTask(void*)+0x3a4>)
    2a6c:	4618      	mov	r0, r3
    2a6e:	f7ff f9cd 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a72:	f7fe fb89 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a76:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_5(sjsu::lpc40xx::Pwm::Channel::kPwm5);
    2a78:	461a      	mov	r2, r3
    2a7a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
    2a7e:	49b6      	ldr	r1, [pc, #728]	; (2d58 <vSensorAndActuatorTask(void*)+0x3a8>)
    2a80:	4618      	mov	r0, r3
    2a82:	f7ff f9c3 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
  // Object declaration for Linear actuators
  sjsu::Servo linear_actuator0(p2_0);
    2a86:	f507 7205 	add.w	r2, r7, #532	; 0x214
    2a8a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
    2a8e:	4611      	mov	r1, r2
    2a90:	4618      	mov	r0, r3
    2a92:	f7ff fc9f 	bl	23d4 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator1(p2_1);
    2a96:	f507 7202 	add.w	r2, r7, #520	; 0x208
    2a9a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
    2a9e:	4611      	mov	r1, r2
    2aa0:	4618      	mov	r0, r3
    2aa2:	f7ff fc97 	bl	23d4 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator2(p2_2);
    2aa6:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    2aaa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
    2aae:	4611      	mov	r1, r2
    2ab0:	4618      	mov	r0, r3
    2ab2:	f7ff fc8f 	bl	23d4 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator3(p2_4);
    2ab6:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
    2aba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
    2abe:	4611      	mov	r1, r2
    2ac0:	4618      	mov	r0, r3
    2ac2:	f7ff fc87 	bl	23d4 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator4(p2_5);
    2ac6:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
    2aca:	f507 738c 	add.w	r3, r7, #280	; 0x118
    2ace:	4611      	mov	r1, r2
    2ad0:	4618      	mov	r0, r3
    2ad2:	f7ff fc7f 	bl	23d4 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  // Arrays to store peripheral handles
  sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc3, adc4, adc5};
    2ad6:	f507 7211 	add.w	r2, r7, #580	; 0x244
    2ada:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
    2ade:	4611      	mov	r1, r2
    2ae0:	4618      	mov	r0, r3
    2ae2:	f7ff ff19 	bl	2918 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2ae6:	f507 720e 	add.w	r2, r7, #568	; 0x238
    2aea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
    2aee:	330c      	adds	r3, #12
    2af0:	4611      	mov	r1, r2
    2af2:	4618      	mov	r0, r3
    2af4:	f7ff ff10 	bl	2918 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2af8:	f507 720b 	add.w	r2, r7, #556	; 0x22c
    2afc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
    2b00:	3318      	adds	r3, #24
    2b02:	4611      	mov	r1, r2
    2b04:	4618      	mov	r0, r3
    2b06:	f7ff ff07 	bl	2918 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2b0a:	f507 7208 	add.w	r2, r7, #544	; 0x220
    2b0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
    2b12:	3324      	adds	r3, #36	; 0x24
    2b14:	4611      	mov	r1, r2
    2b16:	4618      	mov	r0, r3
    2b18:	f7ff fefe 	bl	2918 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
  //sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc3, adc4};
  sjsu::Servo linear_actuator_arr[NUM_FINGERS+1] = {linear_actuator0, linear_actuator1, linear_actuator2, linear_actuator3, linear_actuator4};
    2b1c:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
    2b20:	f107 0320 	add.w	r3, r7, #32
    2b24:	4611      	mov	r1, r2
    2b26:	4618      	mov	r0, r3
    2b28:	f7ff ff14 	bl	2954 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2b2c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
    2b30:	f107 0320 	add.w	r3, r7, #32
    2b34:	3328      	adds	r3, #40	; 0x28
    2b36:	4611      	mov	r1, r2
    2b38:	4618      	mov	r0, r3
    2b3a:	f7ff ff0b 	bl	2954 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2b3e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
    2b42:	f107 0320 	add.w	r3, r7, #32
    2b46:	3350      	adds	r3, #80	; 0x50
    2b48:	4611      	mov	r1, r2
    2b4a:	4618      	mov	r0, r3
    2b4c:	f7ff ff02 	bl	2954 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2b50:	f507 72a0 	add.w	r2, r7, #320	; 0x140
    2b54:	f107 0320 	add.w	r3, r7, #32
    2b58:	3378      	adds	r3, #120	; 0x78
    2b5a:	4611      	mov	r1, r2
    2b5c:	4618      	mov	r0, r3
    2b5e:	f7ff fef9 	bl	2954 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2b62:	f507 728c 	add.w	r2, r7, #280	; 0x118
    2b66:	f107 0320 	add.w	r3, r7, #32
    2b6a:	33a0      	adds	r3, #160	; 0xa0
    2b6c:	4611      	mov	r1, r2
    2b6e:	4618      	mov	r0, r3
    2b70:	f7ff fef0 	bl	2954 <sjsu::Servo::Servo(sjsu::Servo const&)>
  //sjsu::Servo linear_actuator_arr[NUM_FINGERS] = {linear_actuator0, linear_actuator1, linear_actuator2};
  // Set up Linear actuators with proper boundaries and initial conditions
  for(int i = 0; i < NUM_FINGERS; i++)
    2b74:	2300      	movs	r3, #0
    2b76:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    2b7a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
    2b7e:	2b03      	cmp	r3, #3
    2b80:	f300 8081 	bgt.w	2c86 <vSensorAndActuatorTask(void*)+0x2d6>
  {
      shared_mem->rec[i].ui = 0;
    2b84:	4b75      	ldr	r3, [pc, #468]	; (2d5c <vSensorAndActuatorTask(void*)+0x3ac>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2b8c:	2100      	movs	r1, #0
    2b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      linear_actuator_arr[i].Initialize();
    2b92:	f107 0120 	add.w	r1, r7, #32
    2b96:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2b9a:	4613      	mov	r3, r2
    2b9c:	009b      	lsls	r3, r3, #2
    2b9e:	4413      	add	r3, r2
    2ba0:	00db      	lsls	r3, r3, #3
    2ba2:	18c8      	adds	r0, r1, r3
    2ba4:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2ba8:	4613      	mov	r3, r2
    2baa:	009b      	lsls	r3, r3, #2
    2bac:	4413      	add	r3, r2
    2bae:	00db      	lsls	r3, r3, #3
    2bb0:	f107 0120 	add.w	r1, r7, #32
    2bb4:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2bb8:	4613      	mov	r3, r2
    2bba:	009b      	lsls	r3, r3, #2
    2bbc:	4413      	add	r3, r2
    2bbe:	00db      	lsls	r3, r3, #3
    2bc0:	440b      	add	r3, r1
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	681b      	ldr	r3, [r3, #0]
    2bc6:	4a66      	ldr	r2, [pc, #408]	; (2d60 <vSensorAndActuatorTask(void*)+0x3b0>)
    2bc8:	6811      	ldr	r1, [r2, #0]
    2bca:	4798      	blx	r3
      linear_actuator_arr[i].SetFrequency(motor_controller_freq);
    2bcc:	f107 0120 	add.w	r1, r7, #32
    2bd0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2bd4:	4613      	mov	r3, r2
    2bd6:	009b      	lsls	r3, r3, #2
    2bd8:	4413      	add	r3, r2
    2bda:	00db      	lsls	r3, r3, #3
    2bdc:	18c8      	adds	r0, r1, r3
    2bde:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2be2:	4613      	mov	r3, r2
    2be4:	009b      	lsls	r3, r3, #2
    2be6:	4413      	add	r3, r2
    2be8:	00db      	lsls	r3, r3, #3
    2bea:	f107 0120 	add.w	r1, r7, #32
    2bee:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2bf2:	4613      	mov	r3, r2
    2bf4:	009b      	lsls	r3, r3, #2
    2bf6:	4413      	add	r3, r2
    2bf8:	00db      	lsls	r3, r3, #3
    2bfa:	440b      	add	r3, r1
    2bfc:	681b      	ldr	r3, [r3, #0]
    2bfe:	3304      	adds	r3, #4
    2c00:	681b      	ldr	r3, [r3, #0]
    2c02:	4a58      	ldr	r2, [pc, #352]	; (2d64 <vSensorAndActuatorTask(void*)+0x3b4>)
    2c04:	6811      	ldr	r1, [r2, #0]
    2c06:	4798      	blx	r3
      linear_actuator_arr[i].SetPulseBounds(motor_controller_min_pulse, 
    2c08:	f107 0120 	add.w	r1, r7, #32
    2c0c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2c10:	4613      	mov	r3, r2
    2c12:	009b      	lsls	r3, r3, #2
    2c14:	4413      	add	r3, r2
    2c16:	00db      	lsls	r3, r3, #3
    2c18:	18c8      	adds	r0, r1, r3
    2c1a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2c1e:	4613      	mov	r3, r2
    2c20:	009b      	lsls	r3, r3, #2
    2c22:	4413      	add	r3, r2
    2c24:	00db      	lsls	r3, r3, #3
                                            motor_controller_max_pulse);
    2c26:	f107 0120 	add.w	r1, r7, #32
    2c2a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2c2e:	4613      	mov	r3, r2
    2c30:	009b      	lsls	r3, r3, #2
    2c32:	4413      	add	r3, r2
    2c34:	00db      	lsls	r3, r3, #3
    2c36:	440b      	add	r3, r1
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	3308      	adds	r3, #8
    2c3c:	6819      	ldr	r1, [r3, #0]
      linear_actuator_arr[i].SetPulseBounds(motor_controller_min_pulse, 
    2c3e:	4a4a      	ldr	r2, [pc, #296]	; (2d68 <vSensorAndActuatorTask(void*)+0x3b8>)
    2c40:	4b4a      	ldr	r3, [pc, #296]	; (2d6c <vSensorAndActuatorTask(void*)+0x3bc>)
    2c42:	e9d3 3400 	ldrd	r3, r4, [r3]
    2c46:	e9cd 3400 	strd	r3, r4, [sp]
    2c4a:	e9d2 2300 	ldrd	r2, r3, [r2]
    2c4e:	4788      	blx	r1
      LOG_INFO("linear_actuator%d initialized", i);
    2c50:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
    2c54:	9300      	str	r3, [sp, #0]
    2c56:	239b      	movs	r3, #155	; 0x9b
    2c58:	4a45      	ldr	r2, [pc, #276]	; (2d70 <vSensorAndActuatorTask(void*)+0x3c0>)
    2c5a:	4946      	ldr	r1, [pc, #280]	; (2d74 <vSensorAndActuatorTask(void*)+0x3c4>)
    2c5c:	4846      	ldr	r0, [pc, #280]	; (2d78 <vSensorAndActuatorTask(void*)+0x3c8>)
    2c5e:	f003 fbdb 	bl	6418 <printf>
      adc_arr[i].Initialize();
    2c62:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
    2c66:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
    2c6a:	4613      	mov	r3, r2
    2c6c:	005b      	lsls	r3, r3, #1
    2c6e:	4413      	add	r3, r2
    2c70:	009b      	lsls	r3, r3, #2
    2c72:	440b      	add	r3, r1
    2c74:	4618      	mov	r0, r3
    2c76:	f7fe ff05 	bl	1a84 <sjsu::lpc40xx::Adc::Initialize() const>
  for(int i = 0; i < NUM_FINGERS; i++)
    2c7a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
    2c7e:	3301      	adds	r3, #1
    2c80:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    2c84:	e779      	b.n	2b7a <vSensorAndActuatorTask(void*)+0x1ca>
  }
  linear_actuator_arr[4].Initialize();
    2c86:	f107 0320 	add.w	r3, r7, #32
    2c8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2c8e:	681b      	ldr	r3, [r3, #0]
    2c90:	4933      	ldr	r1, [pc, #204]	; (2d60 <vSensorAndActuatorTask(void*)+0x3b0>)
    2c92:	f107 0220 	add.w	r2, r7, #32
    2c96:	32a0      	adds	r2, #160	; 0xa0
    2c98:	6809      	ldr	r1, [r1, #0]
    2c9a:	4610      	mov	r0, r2
    2c9c:	4798      	blx	r3
  linear_actuator_arr[4].SetFrequency(motor_controller_freq);
    2c9e:	f107 0320 	add.w	r3, r7, #32
    2ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2ca6:	3304      	adds	r3, #4
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	492e      	ldr	r1, [pc, #184]	; (2d64 <vSensorAndActuatorTask(void*)+0x3b4>)
    2cac:	f107 0220 	add.w	r2, r7, #32
    2cb0:	32a0      	adds	r2, #160	; 0xa0
    2cb2:	6809      	ldr	r1, [r1, #0]
    2cb4:	4610      	mov	r0, r2
    2cb6:	4798      	blx	r3
  linear_actuator_arr[4].SetPulseBounds(motor_controller_min_pulse, 
                                        motor_controller_max_pulse);
    2cb8:	f107 0320 	add.w	r3, r7, #32
    2cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2cc0:	3308      	adds	r3, #8
    2cc2:	6819      	ldr	r1, [r3, #0]
  linear_actuator_arr[4].SetPulseBounds(motor_controller_min_pulse, 
    2cc4:	4a28      	ldr	r2, [pc, #160]	; (2d68 <vSensorAndActuatorTask(void*)+0x3b8>)
    2cc6:	f107 0320 	add.w	r3, r7, #32
    2cca:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
    2cce:	4b27      	ldr	r3, [pc, #156]	; (2d6c <vSensorAndActuatorTask(void*)+0x3bc>)
    2cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
    2cd4:	e9cd 3400 	strd	r3, r4, [sp]
    2cd8:	e9d2 2300 	ldrd	r2, r3, [r2]
    2cdc:	4788      	blx	r1
  LOG_INFO("adc channels initialized");
    2cde:	23a2      	movs	r3, #162	; 0xa2
    2ce0:	4a23      	ldr	r2, [pc, #140]	; (2d70 <vSensorAndActuatorTask(void*)+0x3c0>)
    2ce2:	4926      	ldr	r1, [pc, #152]	; (2d7c <vSensorAndActuatorTask(void*)+0x3cc>)
    2ce4:	4826      	ldr	r0, [pc, #152]	; (2d80 <vSensorAndActuatorTask(void*)+0x3d0>)
    2ce6:	f003 fb97 	bl	6418 <printf>
  float pdubs_arr[NUM_FINGERS] = {2.0,2.1,2.2,2.4};
    2cea:	f107 0310 	add.w	r3, r7, #16
    2cee:	4a25      	ldr	r2, [pc, #148]	; (2d84 <vSensorAndActuatorTask(void*)+0x3d4>)
    2cf0:	461c      	mov	r4, r3
    2cf2:	4613      	mov	r3, r2
    2cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // for(int i = 0; i < NUM_FINGERS; i++)
    // {
    //   printf("%d: %f\n", i, shared_mem->rec[i].f);
    // }
    // printf("/n/n");
    for(int i = 0; i < NUM_FINGERS; i++)
    2cfa:	2300      	movs	r3, #0
    2cfc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
    2d00:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2d04:	2b03      	cmp	r3, #3
    2d06:	f300 80a0 	bgt.w	2e4a <vSensorAndActuatorTask(void*)+0x49a>
    {
      if(shared_mem->rec[i].f < 0)
    2d0a:	4b14      	ldr	r3, [pc, #80]	; (2d5c <vSensorAndActuatorTask(void*)+0x3ac>)
    2d0c:	681a      	ldr	r2, [r3, #0]
    2d0e:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2d12:	009b      	lsls	r3, r3, #2
    2d14:	4413      	add	r3, r2
    2d16:	edd3 7a00 	vldr	s15, [r3]
    2d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d22:	d531      	bpl.n	2d88 <vSensorAndActuatorTask(void*)+0x3d8>
      {
        shared_mem->rec[i].f = 0;
    2d24:	4b0d      	ldr	r3, [pc, #52]	; (2d5c <vSensorAndActuatorTask(void*)+0x3ac>)
    2d26:	681a      	ldr	r2, [r3, #0]
    2d28:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2d2c:	009b      	lsls	r3, r3, #2
    2d2e:	4413      	add	r3, r2
    2d30:	f04f 0200 	mov.w	r2, #0
    2d34:	601a      	str	r2, [r3, #0]
    2d36:	e041      	b.n	2dbc <vSensorAndActuatorTask(void*)+0x40c>
    2d38:	00009ca8 	.word	0x00009ca8
    2d3c:	00009cb0 	.word	0x00009cb0
    2d40:	00009cb8 	.word	0x00009cb8
    2d44:	00009cc0 	.word	0x00009cc0
    2d48:	00009d1c 	.word	0x00009d1c
    2d4c:	00009d28 	.word	0x00009d28
    2d50:	00009d34 	.word	0x00009d34
    2d54:	00009d40 	.word	0x00009d40
    2d58:	00009d4c 	.word	0x00009d4c
    2d5c:	10000278 	.word	0x10000278
    2d60:	00009d70 	.word	0x00009d70
    2d64:	00009d74 	.word	0x00009d74
    2d68:	00009d78 	.word	0x00009d78
    2d6c:	00009d80 	.word	0x00009d80
    2d70:	0000a004 	.word	0x0000a004
    2d74:	00009d98 	.word	0x00009d98
    2d78:	00009ac8 	.word	0x00009ac8
    2d7c:	00009da8 	.word	0x00009da8
    2d80:	00009b20 	.word	0x00009b20
    2d84:	00009b74 	.word	0x00009b74
      }
      else if(shared_mem->rec[i].f > 3.3)
    2d88:	4b55      	ldr	r3, [pc, #340]	; (2ee0 <vSensorAndActuatorTask(void*)+0x530>)
    2d8a:	681a      	ldr	r2, [r3, #0]
    2d8c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2d90:	009b      	lsls	r3, r3, #2
    2d92:	4413      	add	r3, r2
    2d94:	681b      	ldr	r3, [r3, #0]
    2d96:	4618      	mov	r0, r3
    2d98:	f004 fe58 	bl	7a4c <__aeabi_f2d>
    2d9c:	a34e      	add	r3, pc, #312	; (adr r3, 2ed8 <vSensorAndActuatorTask(void*)+0x528>)
    2d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2da2:	f004 ff29 	bl	7bf8 <__aeabi_dcmpgt>
    2da6:	4603      	mov	r3, r0
    2da8:	2b00      	cmp	r3, #0
    2daa:	d007      	beq.n	2dbc <vSensorAndActuatorTask(void*)+0x40c>
      {
        shared_mem->rec[i].f = 3.3;
    2dac:	4b4c      	ldr	r3, [pc, #304]	; (2ee0 <vSensorAndActuatorTask(void*)+0x530>)
    2dae:	681a      	ldr	r2, [r3, #0]
    2db0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2db4:	009b      	lsls	r3, r3, #2
    2db6:	4413      	add	r3, r2
    2db8:	4a4a      	ldr	r2, [pc, #296]	; (2ee4 <vSensorAndActuatorTask(void*)+0x534>)
    2dba:	601a      	str	r2, [r3, #0]
      }
      // Map the output from the PID controller to proper units for the LA
      //printf("pre %d, %f\n", i, shared_mem->rec[i].f);
      int converted_output = (sjsu::Map(shared_mem->rec[i].f, 0.0f, 3.3f, 1000, 2000));
    2dbc:	4b48      	ldr	r3, [pc, #288]	; (2ee0 <vSensorAndActuatorTask(void*)+0x530>)
    2dbe:	681a      	ldr	r2, [r3, #0]
    2dc0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2dc4:	009b      	lsls	r3, r3, #2
    2dc6:	4413      	add	r3, r2
    2dc8:	edd3 7a00 	vldr	s15, [r3]
    2dcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    2dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2dd4:	ed9f 1a44 	vldr	s2, [pc, #272]	; 2ee8 <vSensorAndActuatorTask(void*)+0x538>
    2dd8:	eddf 0a44 	vldr	s1, [pc, #272]	; 2eec <vSensorAndActuatorTask(void*)+0x53c>
    2ddc:	eeb0 0a67 	vmov.f32	s0, s15
    2de0:	f000 fa8f 	bl	3302 <int sjsu::Map<float, float, int>(float, float, float, int, int)>
    2de4:	4602      	mov	r2, r0
    2de6:	f107 030c 	add.w	r3, r7, #12
    2dea:	601a      	str	r2, [r3, #0]
      // Update the linear actuator position 
      linear_actuator_arr[i].SetPulseWidthInMicroseconds(static_cast<std::chrono::microseconds>(converted_output));
    2dec:	f107 0120 	add.w	r1, r7, #32
    2df0:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
    2df4:	4613      	mov	r3, r2
    2df6:	009b      	lsls	r3, r3, #2
    2df8:	4413      	add	r3, r2
    2dfa:	00db      	lsls	r3, r3, #3
    2dfc:	18cd      	adds	r5, r1, r3
    2dfe:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
    2e02:	4613      	mov	r3, r2
    2e04:	009b      	lsls	r3, r3, #2
    2e06:	4413      	add	r3, r2
    2e08:	00db      	lsls	r3, r3, #3
    2e0a:	f107 0120 	add.w	r1, r7, #32
    2e0e:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
    2e12:	4613      	mov	r3, r2
    2e14:	009b      	lsls	r3, r3, #2
    2e16:	4413      	add	r3, r2
    2e18:	00db      	lsls	r3, r3, #3
    2e1a:	440b      	add	r3, r1
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	3310      	adds	r3, #16
    2e20:	681c      	ldr	r4, [r3, #0]
    2e22:	f107 020c 	add.w	r2, r7, #12
    2e26:	f507 7318 	add.w	r3, r7, #608	; 0x260
    2e2a:	4611      	mov	r1, r2
    2e2c:	4618      	mov	r0, r3
    2e2e:	f7ff fd4f 	bl	28d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2e32:	f507 7318 	add.w	r3, r7, #608	; 0x260
    2e36:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e3a:	4628      	mov	r0, r5
    2e3c:	47a0      	blx	r4
    for(int i = 0; i < NUM_FINGERS; i++)
    2e3e:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
    2e42:	3301      	adds	r3, #1
    2e44:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
    2e48:	e75a      	b.n	2d00 <vSensorAndActuatorTask(void*)+0x350>
      //printf("Setting finger at %0.1f with sent value %f\n", pdubs_arr[i], converted_output);
    }
    p2_5.SetDutyCycle(p2_4.GetDutyCycle());
    2e4a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
    2e4e:	4618      	mov	r0, r3
    2e50:	f7ff f944 	bl	20dc <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    2e54:	eef0 7a40 	vmov.f32	s15, s0
    2e58:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
    2e5c:	eeb0 0a67 	vmov.f32	s0, s15
    2e60:	4618      	mov	r0, r3
    2e62:	f7ff f8cd 	bl	2000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    for(int i = 0; i < NUM_FINGERS; i++)
    2e66:	2300      	movs	r3, #0
    2e68:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
    2e6c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
    2e70:	2b03      	cmp	r3, #3
    2e72:	dc2d      	bgt.n	2ed0 <vSensorAndActuatorTask(void*)+0x520>
    {
      pot_position = adc_arr[i].Read();
    2e74:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
    2e78:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
    2e7c:	4613      	mov	r3, r2
    2e7e:	005b      	lsls	r3, r3, #1
    2e80:	4413      	add	r3, r2
    2e82:	009b      	lsls	r3, r3, #2
    2e84:	440b      	add	r3, r1
    2e86:	4618      	mov	r0, r3
    2e88:	f7fe fe8a 	bl	1ba0 <sjsu::lpc40xx::Adc::Read() const>
    2e8c:	ee07 0a90 	vmov	s15, r0
    2e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e94:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268
      shared_mem->sen[i].f = sjsu::Map(pot_position, 0, 4095, 0.0f, CURRENT_MAX);
    2e98:	4b11      	ldr	r3, [pc, #68]	; (2ee0 <vSensorAndActuatorTask(void*)+0x530>)
    2e9a:	681c      	ldr	r4, [r3, #0]
    2e9c:	ed9f 1a14 	vldr	s2, [pc, #80]	; 2ef0 <vSensorAndActuatorTask(void*)+0x540>
    2ea0:	eddf 0a12 	vldr	s1, [pc, #72]	; 2eec <vSensorAndActuatorTask(void*)+0x53c>
    2ea4:	f640 71ff 	movw	r1, #4095	; 0xfff
    2ea8:	2000      	movs	r0, #0
    2eaa:	ed97 0a9a 	vldr	s0, [r7, #616]	; 0x268
    2eae:	f000 fa73 	bl	3398 <float sjsu::Map<float, int, float>(float, int, int, float, float)>
    2eb2:	eef0 7a40 	vmov.f32	s15, s0
    2eb6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
    2eba:	3304      	adds	r3, #4
    2ebc:	009b      	lsls	r3, r3, #2
    2ebe:	4423      	add	r3, r4
    2ec0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < NUM_FINGERS; i++)
    2ec4:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
    2ec8:	3301      	adds	r3, #1
    2eca:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
    2ece:	e7cd      	b.n	2e6c <vSensorAndActuatorTask(void*)+0x4bc>
    }
    vTaskDelay(200);
    2ed0:	20c8      	movs	r0, #200	; 0xc8
    2ed2:	f001 f847 	bl	3f64 <vTaskDelay>
  }
    2ed6:	e710      	b.n	2cfa <vSensorAndActuatorTask(void*)+0x34a>
    2ed8:	66666666 	.word	0x66666666
    2edc:	400a6666 	.word	0x400a6666
    2ee0:	10000278 	.word	0x10000278
    2ee4:	40533333 	.word	0x40533333
    2ee8:	40533333 	.word	0x40533333
    2eec:	00000000 	.word	0x00000000
    2ef0:	44fa0000 	.word	0x44fa0000

00002ef4 <main>:
#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"
#include "third_party/FreeRTOS/Source/include/queue.h"

int main()
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b08a      	sub	sp, #40	; 0x28
    2ef8:	af02      	add	r7, sp, #8
  Q = xQueueCreate(10, sizeof(vals[NUM_FINGERS]));
    2efa:	2200      	movs	r2, #0
    2efc:	2110      	movs	r1, #16
    2efe:	200a      	movs	r0, #10
    2f00:	f001 fd6d 	bl	49de <xQueueGenericCreate>
    2f04:	4602      	mov	r2, r0
    2f06:	4b10      	ldr	r3, [pc, #64]	; (2f48 <main+0x54>)
    2f08:	601a      	str	r2, [r3, #0]
  paramsStruct pvParameters;
  xTaskCreate(vUartTask, "uart_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 2, &xUartTaskHandle);
    2f0a:	463a      	mov	r2, r7
    2f0c:	4b0f      	ldr	r3, [pc, #60]	; (2f4c <main+0x58>)
    2f0e:	9301      	str	r3, [sp, #4]
    2f10:	2302      	movs	r3, #2
    2f12:	9300      	str	r3, [sp, #0]
    2f14:	4613      	mov	r3, r2
    2f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f1a:	490d      	ldr	r1, [pc, #52]	; (2f50 <main+0x5c>)
    2f1c:	480d      	ldr	r0, [pc, #52]	; (2f54 <main+0x60>)
    2f1e:	f000 fef3 	bl	3d08 <xTaskCreate>
  xTaskCreate(vSensorAndActuatorTask, "linear actuator and current sensor task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 1, &xSensorAndActuatorHandle);
    2f22:	463a      	mov	r2, r7
    2f24:	4b0c      	ldr	r3, [pc, #48]	; (2f58 <main+0x64>)
    2f26:	9301      	str	r3, [sp, #4]
    2f28:	2301      	movs	r3, #1
    2f2a:	9300      	str	r3, [sp, #0]
    2f2c:	4613      	mov	r3, r2
    2f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f32:	490a      	ldr	r1, [pc, #40]	; (2f5c <main+0x68>)
    2f34:	480a      	ldr	r0, [pc, #40]	; (2f60 <main+0x6c>)
    2f36:	f000 fee7 	bl	3d08 <xTaskCreate>
  vTaskStartScheduler();
    2f3a:	f001 f837 	bl	3fac <vTaskStartScheduler>
}
    2f3e:	2300      	movs	r3, #0
    2f40:	4618      	mov	r0, r3
    2f42:	3720      	adds	r7, #32
    2f44:	46bd      	mov	sp, r7
    2f46:	bd80      	pop	{r7, pc}
    2f48:	10000274 	.word	0x10000274
    2f4c:	1000026c 	.word	0x1000026c
    2f50:	00009b84 	.word	0x00009b84
    2f54:	00002781 	.word	0x00002781
    2f58:	10000270 	.word	0x10000270
    2f5c:	00009b90 	.word	0x00009b90
    2f60:	000029b1 	.word	0x000029b1

00002f64 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2f64:	b580      	push	{r7, lr}
    2f66:	b084      	sub	sp, #16
    2f68:	af00      	add	r7, sp, #0
    2f6a:	60f8      	str	r0, [r7, #12]
    2f6c:	460b      	mov	r3, r1
    2f6e:	80ba      	strh	r2, [r7, #4]
    2f70:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    2f72:	793b      	ldrb	r3, [r7, #4]
    2f74:	461a      	mov	r2, r3
    2f76:	797b      	ldrb	r3, [r7, #5]
    2f78:	7af9      	ldrb	r1, [r7, #11]
    2f7a:	68f8      	ldr	r0, [r7, #12]
    2f7c:	f000 fa55 	bl	342a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    2f80:	4603      	mov	r3, r0
}
    2f82:	4618      	mov	r0, r3
    2f84:	3710      	adds	r7, #16
    2f86:	46bd      	mov	sp, r7
    2f88:	bd80      	pop	{r7, pc}

00002f8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    2f8a:	b580      	push	{r7, lr}
    2f8c:	b084      	sub	sp, #16
    2f8e:	af00      	add	r7, sp, #0
    2f90:	6078      	str	r0, [r7, #4]
    2f92:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	4618      	mov	r0, r3
    2f98:	f7fd fee8 	bl	d6c <units::linear_scale<float>::operator()() const>
    2f9c:	eef0 6a40 	vmov.f32	s13, s0
    2fa0:	683b      	ldr	r3, [r7, #0]
    2fa2:	ee07 3a90 	vmov	s15, r3
    2fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    2fae:	f107 030c 	add.w	r3, r7, #12
    2fb2:	eeb0 0a47 	vmov.f32	s0, s14
    2fb6:	4618      	mov	r0, r3
    2fb8:	f7fd fb5b 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2fbc:	68fb      	ldr	r3, [r7, #12]
	}
    2fbe:	4618      	mov	r0, r3
    2fc0:	3710      	adds	r7, #16
    2fc2:	46bd      	mov	sp, r7
    2fc4:	bd80      	pop	{r7, pc}

00002fc6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    2fc6:	b590      	push	{r4, r7, lr}
    2fc8:	b087      	sub	sp, #28
    2fca:	af00      	add	r7, sp, #0
    2fcc:	60f8      	str	r0, [r7, #12]
    2fce:	60b9      	str	r1, [r7, #8]
    2fd0:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    2fd2:	68bb      	ldr	r3, [r7, #8]
    2fd4:	e9d3 3400 	ldrd	r3, r4, [r3]
    2fd8:	1c59      	adds	r1, r3, #1
    2fda:	f144 0200 	adc.w	r2, r4, #0
    2fde:	68b8      	ldr	r0, [r7, #8]
    2fe0:	e9c0 1200 	strd	r1, r2, [r0]
    2fe4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2fe8:	f107 0310 	add.w	r3, r7, #16
    2fec:	4619      	mov	r1, r3
    2fee:	68f8      	ldr	r0, [r7, #12]
    2ff0:	f7fd fcbc 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2ff4:	68f8      	ldr	r0, [r7, #12]
    2ff6:	371c      	adds	r7, #28
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bd90      	pop	{r4, r7, pc}

00002ffc <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    // comparisons
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
    2ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ffe:	b087      	sub	sp, #28
    3000:	af00      	add	r7, sp, #0
    3002:	6078      	str	r0, [r7, #4]
    3004:	6039      	str	r1, [r7, #0]
		 const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() == __ct(__rhs).count();
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	e9d3 3400 	ldrd	r3, r4, [r3]
    300c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3010:	f107 0308 	add.w	r3, r7, #8
    3014:	4618      	mov	r0, r3
    3016:	f7ff fad9 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    301a:	4605      	mov	r5, r0
    301c:	460e      	mov	r6, r1
    301e:	683b      	ldr	r3, [r7, #0]
    3020:	e9d3 3400 	ldrd	r3, r4, [r3]
    3024:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3028:	f107 0310 	add.w	r3, r7, #16
    302c:	4618      	mov	r0, r3
    302e:	f7ff facd 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3032:	4603      	mov	r3, r0
    3034:	460c      	mov	r4, r1
    3036:	42a6      	cmp	r6, r4
    3038:	bf06      	itte	eq
    303a:	429d      	cmpeq	r5, r3
    303c:	2301      	moveq	r3, #1
    303e:	2300      	movne	r3, #0
    3040:	b2db      	uxtb	r3, r3
      }
    3042:	4618      	mov	r0, r3
    3044:	371c      	adds	r7, #28
    3046:	46bd      	mov	sp, r7
    3048:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000304a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    304a:	b580      	push	{r7, lr}
    304c:	ed2d 8b02 	vpush	{d8}
    3050:	b082      	sub	sp, #8
    3052:	af00      	add	r7, sp, #0
    3054:	6078      	str	r0, [r7, #4]
    3056:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	ed93 8a00 	vldr	s16, [r3]
    305e:	683b      	ldr	r3, [r7, #0]
    3060:	4618      	mov	r0, r3
    3062:	f7fd fae6 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3066:	eef0 7a40 	vmov.f32	s15, s0
    306a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3072:	bfcc      	ite	gt
    3074:	2301      	movgt	r3, #1
    3076:	2300      	movle	r3, #0
    3078:	b2db      	uxtb	r3, r3
		}
    307a:	4618      	mov	r0, r3
    307c:	3708      	adds	r7, #8
    307e:	46bd      	mov	sp, r7
    3080:	ecbd 8b02 	vpop	{d8}
    3084:	bd80      	pop	{r7, pc}

00003086 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    3086:	b580      	push	{r7, lr}
    3088:	b082      	sub	sp, #8
    308a:	af00      	add	r7, sp, #0
    308c:	6078      	str	r0, [r7, #4]
    308e:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    3090:	683b      	ldr	r3, [r7, #0]
    3092:	4618      	mov	r0, r3
    3094:	f7fd fc8c 	bl	9b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3098:	eef0 7a40 	vmov.f32	s15, s0
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    30a2:	687b      	ldr	r3, [r7, #4]
		}
    30a4:	4618      	mov	r0, r3
    30a6:	3708      	adds	r7, #8
    30a8:	46bd      	mov	sp, r7
    30aa:	bd80      	pop	{r7, pc}

000030ac <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    30ac:	b480      	push	{r7}
    30ae:	b083      	sub	sp, #12
    30b0:	af00      	add	r7, sp, #0
    30b2:	6078      	str	r0, [r7, #4]
    30b4:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    30b6:	2201      	movs	r2, #1
    30b8:	683b      	ldr	r3, [r7, #0]
    30ba:	fa02 f303 	lsl.w	r3, r2, r3
    30be:	461a      	mov	r2, r3
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	4313      	orrs	r3, r2
}
    30c4:	4618      	mov	r0, r3
    30c6:	370c      	adds	r7, #12
    30c8:	46bd      	mov	sp, r7
    30ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    30ce:	4770      	bx	lr

000030d0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    30d0:	b480      	push	{r7}
    30d2:	b083      	sub	sp, #12
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
    30d8:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    30da:	2201      	movs	r2, #1
    30dc:	683b      	ldr	r3, [r7, #0]
    30de:	fa02 f303 	lsl.w	r3, r2, r3
    30e2:	43db      	mvns	r3, r3
    30e4:	461a      	mov	r2, r3
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	4013      	ands	r3, r2
}
    30ea:	4618      	mov	r0, r3
    30ec:	370c      	adds	r7, #12
    30ee:	46bd      	mov	sp, r7
    30f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30f4:	4770      	bx	lr

000030f6 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    30f6:	b580      	push	{r7, lr}
    30f8:	b084      	sub	sp, #16
    30fa:	af00      	add	r7, sp, #0
    30fc:	60f8      	str	r0, [r7, #12]
    30fe:	60b9      	str	r1, [r7, #8]
    3100:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    3102:	793b      	ldrb	r3, [r7, #4]
    3104:	461a      	mov	r2, r3
    3106:	797b      	ldrb	r3, [r7, #5]
    3108:	68b9      	ldr	r1, [r7, #8]
    310a:	68f8      	ldr	r0, [r7, #12]
    310c:	f000 fa0f 	bl	352e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    3110:	4603      	mov	r3, r0
}
    3112:	4618      	mov	r0, r3
    3114:	3710      	adds	r7, #16
    3116:	46bd      	mov	sp, r7
    3118:	bd80      	pop	{r7, pc}

0000311a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    311a:	b580      	push	{r7, lr}
    311c:	b084      	sub	sp, #16
    311e:	af00      	add	r7, sp, #0
    3120:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	4618      	mov	r0, r3
    3126:	f7fd fe21 	bl	d6c <units::linear_scale<float>::operator()() const>
    312a:	eef0 7a40 	vmov.f32	s15, s0
    312e:	edc7 7a03 	vstr	s15, [r7, #12]
    3132:	f107 030c 	add.w	r3, r7, #12
    3136:	4618      	mov	r0, r3
    3138:	f000 fa25 	bl	3586 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    313c:	eef0 7a40 	vmov.f32	s15, s0
    3140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3144:	ee17 3a90 	vmov	r3, s15
		}
    3148:	4618      	mov	r0, r3
    314a:	3710      	adds	r7, #16
    314c:	46bd      	mov	sp, r7
    314e:	bd80      	pop	{r7, pc}

00003150 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    3150:	b480      	push	{r7}
    3152:	b083      	sub	sp, #12
    3154:	af00      	add	r7, sp, #0
    3156:	6078      	str	r0, [r7, #4]
    3158:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    315a:	2201      	movs	r2, #1
    315c:	683b      	ldr	r3, [r7, #0]
    315e:	fa02 f303 	lsl.w	r3, r2, r3
    3162:	461a      	mov	r2, r3
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	4013      	ands	r3, r2
    3168:	2b00      	cmp	r3, #0
    316a:	bf14      	ite	ne
    316c:	2301      	movne	r3, #1
    316e:	2300      	moveq	r3, #0
    3170:	b2db      	uxtb	r3, r3
}
    3172:	4618      	mov	r0, r3
    3174:	370c      	adds	r7, #12
    3176:	46bd      	mov	sp, r7
    3178:	f85d 7b04 	ldr.w	r7, [sp], #4
    317c:	4770      	bx	lr

0000317e <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    317e:	b480      	push	{r7}
    3180:	b083      	sub	sp, #12
    3182:	af00      	add	r7, sp, #0
    3184:	4603      	mov	r3, r0
    3186:	6039      	str	r1, [r7, #0]
    3188:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    318a:	79fa      	ldrb	r2, [r7, #7]
    318c:	683b      	ldr	r3, [r7, #0]
    318e:	fa42 f303 	asr.w	r3, r2, r3
    3192:	f003 0301 	and.w	r3, r3, #1
    3196:	2b00      	cmp	r3, #0
    3198:	bf14      	ite	ne
    319a:	2301      	movne	r3, #1
    319c:	2300      	moveq	r3, #0
    319e:	b2db      	uxtb	r3, r3
}
    31a0:	4618      	mov	r0, r3
    31a2:	370c      	adds	r7, #12
    31a4:	46bd      	mov	sp, r7
    31a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    31aa:	4770      	bx	lr

000031ac <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    31ac:	b580      	push	{r7, lr}
    31ae:	b082      	sub	sp, #8
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
    31b4:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    31b6:	783b      	ldrb	r3, [r7, #0]
    31b8:	4619      	mov	r1, r3
    31ba:	6878      	ldr	r0, [r7, #4]
    31bc:	f7ff ffc8 	bl	3150 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    31c0:	4603      	mov	r3, r0
}
    31c2:	4618      	mov	r0, r3
    31c4:	3708      	adds	r7, #8
    31c6:	46bd      	mov	sp, r7
    31c8:	bd80      	pop	{r7, pc}

000031ca <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    31ca:	b580      	push	{r7, lr}
    31cc:	b082      	sub	sp, #8
    31ce:	af00      	add	r7, sp, #0
    31d0:	6078      	str	r0, [r7, #4]
    31d2:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    31d4:	783b      	ldrb	r3, [r7, #0]
    31d6:	4619      	mov	r1, r3
    31d8:	6878      	ldr	r0, [r7, #4]
    31da:	f7ff ff67 	bl	30ac <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    31de:	4603      	mov	r3, r0
}
    31e0:	4618      	mov	r0, r3
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}

000031e8 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]
    31f0:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    31f2:	783b      	ldrb	r3, [r7, #0]
    31f4:	4619      	mov	r1, r3
    31f6:	787b      	ldrb	r3, [r7, #1]
    31f8:	461a      	mov	r2, r3
    31fa:	6878      	ldr	r0, [r7, #4]
    31fc:	f000 f9d1 	bl	35a2 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    3200:	4603      	mov	r3, r0
}
    3202:	4618      	mov	r0, r3
    3204:	3708      	adds	r7, #8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}

0000320a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    320a:	b580      	push	{r7, lr}
    320c:	b084      	sub	sp, #16
    320e:	af00      	add	r7, sp, #0
    3210:	60f8      	str	r0, [r7, #12]
    3212:	60b9      	str	r1, [r7, #8]
    3214:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    3216:	793b      	ldrb	r3, [r7, #4]
    3218:	461a      	mov	r2, r3
    321a:	797b      	ldrb	r3, [r7, #5]
    321c:	68b9      	ldr	r1, [r7, #8]
    321e:	68f8      	ldr	r0, [r7, #12]
    3220:	f000 f9dd 	bl	35de <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    3224:	4603      	mov	r3, r0
}
    3226:	4618      	mov	r0, r3
    3228:	3710      	adds	r7, #16
    322a:	46bd      	mov	sp, r7
    322c:	bd80      	pop	{r7, pc}

0000322e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    322e:	b580      	push	{r7, lr}
    3230:	b082      	sub	sp, #8
    3232:	af00      	add	r7, sp, #0
    3234:	6078      	str	r0, [r7, #4]
    3236:	8039      	strh	r1, [r7, #0]
  return Clear(target, bitmask.position);
    3238:	783b      	ldrb	r3, [r7, #0]
    323a:	4619      	mov	r1, r3
    323c:	6878      	ldr	r0, [r7, #4]
    323e:	f7ff ff47 	bl	30d0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    3242:	4603      	mov	r3, r0
}
    3244:	4618      	mov	r0, r3
    3246:	3708      	adds	r7, #8
    3248:	46bd      	mov	sp, r7
    324a:	bd80      	pop	{r7, pc}

0000324c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    324c:	b480      	push	{r7}
    324e:	b085      	sub	sp, #20
    3250:	af00      	add	r7, sp, #0
    3252:	60f8      	str	r0, [r7, #12]
    3254:	7239      	strb	r1, [r7, #8]
    3256:	713a      	strb	r2, [r7, #4]
    3258:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    325a:	68fb      	ldr	r3, [r7, #12]
    325c:	edd3 7a00 	vldr	s15, [r3]
    3260:	ed9f 7a06 	vldr	s14, [pc, #24]	; 327c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    3264:	eec7 6a87 	vdiv.f32	s13, s15, s14
    3268:	eef0 7a66 	vmov.f32	s15, s13
		}
    326c:	eeb0 0a67 	vmov.f32	s0, s15
    3270:	3714      	adds	r7, #20
    3272:	46bd      	mov	sp, r7
    3274:	f85d 7b04 	ldr.w	r7, [sp], #4
    3278:	4770      	bx	lr
    327a:	bf00      	nop
    327c:	49742400 	.word	0x49742400

00003280 <float sjsu::Map<float, float, float>(float, float, float, float, float)>:
/// @param min - current minimum value that the value can reach
/// @param max - current maximum value that the value can reach
/// @param new_min - the new minimum value to scale and shift the old value to
/// @param new_max - the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    3280:	b480      	push	{r7}
    3282:	b08f      	sub	sp, #60	; 0x3c
    3284:	af00      	add	r7, sp, #0
    3286:	ed87 0a05 	vstr	s0, [r7, #20]
    328a:	edc7 0a04 	vstr	s1, [r7, #16]
    328e:	ed87 1a03 	vstr	s2, [r7, #12]
    3292:	edc7 1a02 	vstr	s3, [r7, #8]
    3296:	ed87 2a01 	vstr	s4, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    329a:	697b      	ldr	r3, [r7, #20]
    329c:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    329e:	693b      	ldr	r3, [r7, #16]
    32a0:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    32a6:	68bb      	ldr	r3, [r7, #8]
    32a8:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    32aa:	687b      	ldr	r3, [r7, #4]
    32ac:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    32ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    32b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    32b6:	ee77 6a67 	vsub.f32	s13, s14, s15
    32ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    32be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    32c2:	ee37 7a67 	vsub.f32	s14, s14, s15
    32c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    32ca:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    32ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    32d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    32d6:	ee37 7a67 	vsub.f32	s14, s14, s15
    32da:	edd7 7a08 	vldr	s15, [r7, #32]
    32de:	ee67 7a27 	vmul.f32	s15, s14, s15
    32e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    32e6:	ee77 7a27 	vadd.f32	s15, s14, s15
    32ea:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    32ee:	69fb      	ldr	r3, [r7, #28]
    32f0:	ee07 3a90 	vmov	s15, r3
};
    32f4:	eeb0 0a67 	vmov.f32	s0, s15
    32f8:	373c      	adds	r7, #60	; 0x3c
    32fa:	46bd      	mov	sp, r7
    32fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3300:	4770      	bx	lr

00003302 <int sjsu::Map<float, float, int>(float, float, float, int, int)>:
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    3302:	b480      	push	{r7}
    3304:	b08f      	sub	sp, #60	; 0x3c
    3306:	af00      	add	r7, sp, #0
    3308:	ed87 0a05 	vstr	s0, [r7, #20]
    330c:	edc7 0a04 	vstr	s1, [r7, #16]
    3310:	ed87 1a03 	vstr	s2, [r7, #12]
    3314:	60b8      	str	r0, [r7, #8]
    3316:	6079      	str	r1, [r7, #4]
  float map_value   = static_cast<float>(value);
    3318:	697b      	ldr	r3, [r7, #20]
    331a:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    331c:	693b      	ldr	r3, [r7, #16]
    331e:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    3320:	68fb      	ldr	r3, [r7, #12]
    3322:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    3324:	68bb      	ldr	r3, [r7, #8]
    3326:	ee07 3a90 	vmov	s15, r3
    332a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    332e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	ee07 3a90 	vmov	s15, r3
    3338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    333c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    3340:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    3344:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    3348:	ee77 6a67 	vsub.f32	s13, s14, s15
    334c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    3350:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3354:	ee37 7a67 	vsub.f32	s14, s14, s15
    3358:	eec6 7a87 	vdiv.f32	s15, s13, s14
    335c:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    3360:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    3364:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3368:	ee37 7a67 	vsub.f32	s14, s14, s15
    336c:	edd7 7a08 	vldr	s15, [r7, #32]
    3370:	ee67 7a27 	vmul.f32	s15, s14, s15
    3374:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    3378:	ee77 7a27 	vadd.f32	s15, s14, s15
    337c:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    3380:	edd7 7a07 	vldr	s15, [r7, #28]
    3384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3388:	ee17 3a90 	vmov	r3, s15
};
    338c:	4618      	mov	r0, r3
    338e:	373c      	adds	r7, #60	; 0x3c
    3390:	46bd      	mov	sp, r7
    3392:	f85d 7b04 	ldr.w	r7, [sp], #4
    3396:	4770      	bx	lr

00003398 <float sjsu::Map<float, int, float>(float, int, int, float, float)>:
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    3398:	b480      	push	{r7}
    339a:	b08f      	sub	sp, #60	; 0x3c
    339c:	af00      	add	r7, sp, #0
    339e:	ed87 0a05 	vstr	s0, [r7, #20]
    33a2:	6138      	str	r0, [r7, #16]
    33a4:	60f9      	str	r1, [r7, #12]
    33a6:	edc7 0a02 	vstr	s1, [r7, #8]
    33aa:	ed87 1a01 	vstr	s2, [r7, #4]
  float map_value   = static_cast<float>(value);
    33ae:	697b      	ldr	r3, [r7, #20]
    33b0:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    33b2:	693b      	ldr	r3, [r7, #16]
    33b4:	ee07 3a90 	vmov	s15, r3
    33b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    33bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    33c0:	68fb      	ldr	r3, [r7, #12]
    33c2:	ee07 3a90 	vmov	s15, r3
    33c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    33ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    33ce:	68bb      	ldr	r3, [r7, #8]
    33d0:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    33d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    33da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    33de:	ee77 6a67 	vsub.f32	s13, s14, s15
    33e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    33e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    33ea:	ee37 7a67 	vsub.f32	s14, s14, s15
    33ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
    33f2:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    33f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    33fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    33fe:	ee37 7a67 	vsub.f32	s14, s14, s15
    3402:	edd7 7a08 	vldr	s15, [r7, #32]
    3406:	ee67 7a27 	vmul.f32	s15, s14, s15
    340a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    340e:	ee77 7a27 	vadd.f32	s15, s14, s15
    3412:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    3416:	69fb      	ldr	r3, [r7, #28]
    3418:	ee07 3a90 	vmov	s15, r3
};
    341c:	eeb0 0a67 	vmov.f32	s0, s15
    3420:	373c      	adds	r7, #60	; 0x3c
    3422:	46bd      	mov	sp, r7
    3424:	f85d 7b04 	ldr.w	r7, [sp], #4
    3428:	4770      	bx	lr

0000342a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    342a:	b480      	push	{r7}
    342c:	b089      	sub	sp, #36	; 0x24
    342e:	af00      	add	r7, sp, #0
    3430:	60f8      	str	r0, [r7, #12]
    3432:	607a      	str	r2, [r7, #4]
    3434:	603b      	str	r3, [r7, #0]
    3436:	460b      	mov	r3, r1
    3438:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    343a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    343e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3440:	2320      	movs	r3, #32
    3442:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3444:	683b      	ldr	r3, [r7, #0]
    3446:	f1c3 0320 	rsb	r3, r3, #32
    344a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    344e:	fa22 f303 	lsr.w	r3, r2, r3
    3452:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3454:	697a      	ldr	r2, [r7, #20]
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	fa02 f303 	lsl.w	r3, r2, r3
    345c:	43db      	mvns	r3, r3
    345e:	68fa      	ldr	r2, [r7, #12]
    3460:	4013      	ands	r3, r2
    3462:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3464:	7afa      	ldrb	r2, [r7, #11]
    3466:	697b      	ldr	r3, [r7, #20]
    3468:	401a      	ands	r2, r3
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	fa02 f303 	lsl.w	r3, r2, r3
    3470:	68fa      	ldr	r2, [r7, #12]
    3472:	4313      	orrs	r3, r2
    3474:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3476:	68fb      	ldr	r3, [r7, #12]
}
    3478:	4618      	mov	r0, r3
    347a:	3724      	adds	r7, #36	; 0x24
    347c:	46bd      	mov	sp, r7
    347e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3482:	4770      	bx	lr

00003484 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    3484:	b5f0      	push	{r4, r5, r6, r7, lr}
    3486:	b08b      	sub	sp, #44	; 0x2c
    3488:	af00      	add	r7, sp, #0
    348a:	60f8      	str	r0, [r7, #12]
    348c:	60b9      	str	r1, [r7, #8]
    348e:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    3490:	68bb      	ldr	r3, [r7, #8]
    3492:	e9d3 3400 	ldrd	r3, r4, [r3]
    3496:	e9c7 3406 	strd	r3, r4, [r7, #24]
    349a:	f107 0318 	add.w	r3, r7, #24
    349e:	4618      	mov	r0, r3
    34a0:	f7ff f894 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    34a4:	4605      	mov	r5, r0
    34a6:	460e      	mov	r6, r1
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	e9d3 3400 	ldrd	r3, r4, [r3]
    34ae:	e9c7 3408 	strd	r3, r4, [r7, #32]
    34b2:	f107 0320 	add.w	r3, r7, #32
    34b6:	4618      	mov	r0, r3
    34b8:	f7ff f888 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    34bc:	460a      	mov	r2, r1
    34be:	4601      	mov	r1, r0
    34c0:	194b      	adds	r3, r1, r5
    34c2:	eb42 0406 	adc.w	r4, r2, r6
    34c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    34ca:	f107 0310 	add.w	r3, r7, #16
    34ce:	4619      	mov	r1, r3
    34d0:	68f8      	ldr	r0, [r7, #12]
    34d2:	f7fd fa4b 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    34d6:	68f8      	ldr	r0, [r7, #12]
    34d8:	372c      	adds	r7, #44	; 0x2c
    34da:	46bd      	mov	sp, r7
    34dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000034de <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
    34de:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e0:	b087      	sub	sp, #28
    34e2:	af00      	add	r7, sp, #0
    34e4:	6078      	str	r0, [r7, #4]
    34e6:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	e9d3 3400 	ldrd	r3, r4, [r3]
    34ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
    34f2:	f107 0308 	add.w	r3, r7, #8
    34f6:	4618      	mov	r0, r3
    34f8:	f7ff f868 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    34fc:	4605      	mov	r5, r0
    34fe:	460e      	mov	r6, r1
    3500:	683b      	ldr	r3, [r7, #0]
    3502:	e9d3 3400 	ldrd	r3, r4, [r3]
    3506:	e9c7 3404 	strd	r3, r4, [r7, #16]
    350a:	f107 0310 	add.w	r3, r7, #16
    350e:	4618      	mov	r0, r3
    3510:	f7ff f85c 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3514:	4603      	mov	r3, r0
    3516:	460c      	mov	r4, r1
    3518:	429d      	cmp	r5, r3
    351a:	eb76 0304 	sbcs.w	r3, r6, r4
    351e:	bfb4      	ite	lt
    3520:	2301      	movlt	r3, #1
    3522:	2300      	movge	r3, #0
    3524:	b2db      	uxtb	r3, r3
      }
    3526:	4618      	mov	r0, r3
    3528:	371c      	adds	r7, #28
    352a:	46bd      	mov	sp, r7
    352c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000352e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    352e:	b480      	push	{r7}
    3530:	b089      	sub	sp, #36	; 0x24
    3532:	af00      	add	r7, sp, #0
    3534:	60f8      	str	r0, [r7, #12]
    3536:	60b9      	str	r1, [r7, #8]
    3538:	607a      	str	r2, [r7, #4]
    353a:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3540:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3542:	2320      	movs	r3, #32
    3544:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3546:	683b      	ldr	r3, [r7, #0]
    3548:	f1c3 0320 	rsb	r3, r3, #32
    354c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3550:	fa22 f303 	lsr.w	r3, r2, r3
    3554:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3556:	697a      	ldr	r2, [r7, #20]
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	fa02 f303 	lsl.w	r3, r2, r3
    355e:	43db      	mvns	r3, r3
    3560:	68fa      	ldr	r2, [r7, #12]
    3562:	4013      	ands	r3, r2
    3564:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3566:	68ba      	ldr	r2, [r7, #8]
    3568:	697b      	ldr	r3, [r7, #20]
    356a:	401a      	ands	r2, r3
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	fa02 f303 	lsl.w	r3, r2, r3
    3572:	68fa      	ldr	r2, [r7, #12]
    3574:	4313      	orrs	r3, r2
    3576:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3578:	68fb      	ldr	r3, [r7, #12]
}
    357a:	4618      	mov	r0, r3
    357c:	3724      	adds	r7, #36	; 0x24
    357e:	46bd      	mov	sp, r7
    3580:	f85d 7b04 	ldr.w	r7, [sp], #4
    3584:	4770      	bx	lr

00003586 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3586:	b580      	push	{r7, lr}
    3588:	b086      	sub	sp, #24
    358a:	af00      	add	r7, sp, #0
    358c:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    358e:	6878      	ldr	r0, [r7, #4]
    3590:	f000 f851 	bl	3636 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3594:	eef0 7a40 	vmov.f32	s15, s0
	}
    3598:	eeb0 0a67 	vmov.f32	s0, s15
    359c:	3718      	adds	r7, #24
    359e:	46bd      	mov	sp, r7
    35a0:	bd80      	pop	{r7, pc}

000035a2 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    35a2:	b480      	push	{r7}
    35a4:	b089      	sub	sp, #36	; 0x24
    35a6:	af00      	add	r7, sp, #0
    35a8:	60f8      	str	r0, [r7, #12]
    35aa:	60b9      	str	r1, [r7, #8]
    35ac:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    35ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    35b2:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    35b4:	2320      	movs	r3, #32
    35b6:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	f1c3 0320 	rsb	r3, r3, #32
    35be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35c2:	fa22 f303 	lsr.w	r3, r2, r3
    35c6:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    35c8:	68fa      	ldr	r2, [r7, #12]
    35ca:	68bb      	ldr	r3, [r7, #8]
    35cc:	40da      	lsrs	r2, r3
    35ce:	697b      	ldr	r3, [r7, #20]
    35d0:	4013      	ands	r3, r2
}
    35d2:	4618      	mov	r0, r3
    35d4:	3724      	adds	r7, #36	; 0x24
    35d6:	46bd      	mov	sp, r7
    35d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    35dc:	4770      	bx	lr

000035de <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    35de:	b480      	push	{r7}
    35e0:	b089      	sub	sp, #36	; 0x24
    35e2:	af00      	add	r7, sp, #0
    35e4:	60f8      	str	r0, [r7, #12]
    35e6:	60b9      	str	r1, [r7, #8]
    35e8:	607a      	str	r2, [r7, #4]
    35ea:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    35ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    35f0:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    35f2:	2320      	movs	r3, #32
    35f4:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    35f6:	683b      	ldr	r3, [r7, #0]
    35f8:	f1c3 0320 	rsb	r3, r3, #32
    35fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3600:	fa22 f303 	lsr.w	r3, r2, r3
    3604:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3606:	697a      	ldr	r2, [r7, #20]
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	fa02 f303 	lsl.w	r3, r2, r3
    360e:	43db      	mvns	r3, r3
    3610:	68fa      	ldr	r2, [r7, #12]
    3612:	4013      	ands	r3, r2
    3614:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3616:	68ba      	ldr	r2, [r7, #8]
    3618:	697b      	ldr	r3, [r7, #20]
    361a:	401a      	ands	r2, r3
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	fa02 f303 	lsl.w	r3, r2, r3
    3622:	68fa      	ldr	r2, [r7, #12]
    3624:	4313      	orrs	r3, r2
    3626:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    3628:	68fb      	ldr	r3, [r7, #12]
}
    362a:	4618      	mov	r0, r3
    362c:	3724      	adds	r7, #36	; 0x24
    362e:	46bd      	mov	sp, r7
    3630:	f85d 7b04 	ldr.w	r7, [sp], #4
    3634:	4770      	bx	lr

00003636 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3636:	b480      	push	{r7}
    3638:	b085      	sub	sp, #20
    363a:	af00      	add	r7, sp, #0
    363c:	60f8      	str	r0, [r7, #12]
    363e:	7239      	strb	r1, [r7, #8]
    3640:	713a      	strb	r2, [r7, #4]
    3642:	703b      	strb	r3, [r7, #0]
			return value;
    3644:	68fb      	ldr	r3, [r7, #12]
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	ee07 3a90 	vmov	s15, r3
		}
    364c:	eeb0 0a67 	vmov.f32	s0, s15
    3650:	3714      	adds	r7, #20
    3652:	46bd      	mov	sp, r7
    3654:	f85d 7b04 	ldr.w	r7, [sp], #4
    3658:	4770      	bx	lr
    365a:	Address 0x000000000000365a is out of bounds.


0000365c <__static_initialization_and_destruction_0(int, int)>:
    365c:	b580      	push	{r7, lr}
    365e:	b082      	sub	sp, #8
    3660:	af00      	add	r7, sp, #0
    3662:	6078      	str	r0, [r7, #4]
    3664:	6039      	str	r1, [r7, #0]
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	2b01      	cmp	r3, #1
    366a:	f040 80cb 	bne.w	3804 <__static_initialization_and_destruction_0(int, int)+0x1a8>
    366e:	683b      	ldr	r3, [r7, #0]
    3670:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3674:	4293      	cmp	r3, r2
    3676:	f040 80c5 	bne.w	3804 <__static_initialization_and_destruction_0(int, int)+0x1a8>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    367a:	4b64      	ldr	r3, [pc, #400]	; (380c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    367c:	681b      	ldr	r3, [r3, #0]
    367e:	f003 0301 	and.w	r3, r3, #1
    3682:	2b00      	cmp	r3, #0
    3684:	d105      	bne.n	3692 <__static_initialization_and_destruction_0(int, int)+0x36>
    3686:	4b61      	ldr	r3, [pc, #388]	; (380c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    3688:	2201      	movs	r2, #1
    368a:	601a      	str	r2, [r3, #0]
    368c:	4a60      	ldr	r2, [pc, #384]	; (3810 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    368e:	4b61      	ldr	r3, [pc, #388]	; (3814 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    3690:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    3692:	4b61      	ldr	r3, [pc, #388]	; (3818 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	f003 0301 	and.w	r3, r3, #1
    369a:	2b00      	cmp	r3, #0
    369c:	d105      	bne.n	36aa <__static_initialization_and_destruction_0(int, int)+0x4e>
    369e:	4b5e      	ldr	r3, [pc, #376]	; (3818 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    36a0:	2201      	movs	r2, #1
    36a2:	601a      	str	r2, [r3, #0]
    36a4:	4a5d      	ldr	r2, [pc, #372]	; (381c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    36a6:	4b5e      	ldr	r3, [pc, #376]	; (3820 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    36a8:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    36aa:	4b5e      	ldr	r3, [pc, #376]	; (3824 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	f003 0301 	and.w	r3, r3, #1
    36b2:	2b00      	cmp	r3, #0
    36b4:	d105      	bne.n	36c2 <__static_initialization_and_destruction_0(int, int)+0x66>
    36b6:	4b5b      	ldr	r3, [pc, #364]	; (3824 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    36b8:	2201      	movs	r2, #1
    36ba:	601a      	str	r2, [r3, #0]
    };
    36bc:	4a5a      	ldr	r2, [pc, #360]	; (3828 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    36be:	4b5b      	ldr	r3, [pc, #364]	; (382c <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    36c0:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    36c2:	4b5b      	ldr	r3, [pc, #364]	; (3830 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    36c4:	681b      	ldr	r3, [r3, #0]
    36c6:	f003 0301 	and.w	r3, r3, #1
    36ca:	2b00      	cmp	r3, #0
    36cc:	d105      	bne.n	36da <__static_initialization_and_destruction_0(int, int)+0x7e>
    36ce:	4b58      	ldr	r3, [pc, #352]	; (3830 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    36d0:	2201      	movs	r2, #1
    36d2:	601a      	str	r2, [r3, #0]
    };
    36d4:	4a57      	ldr	r2, [pc, #348]	; (3834 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    36d6:	4b58      	ldr	r3, [pc, #352]	; (3838 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    36d8:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    36da:	4b58      	ldr	r3, [pc, #352]	; (383c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	f003 0301 	and.w	r3, r3, #1
    36e2:	2b00      	cmp	r3, #0
    36e4:	d105      	bne.n	36f2 <__static_initialization_and_destruction_0(int, int)+0x96>
    36e6:	4b55      	ldr	r3, [pc, #340]	; (383c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    36e8:	2201      	movs	r2, #1
    36ea:	601a      	str	r2, [r3, #0]
    };
    36ec:	4a54      	ldr	r2, [pc, #336]	; (3840 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    36ee:	4b55      	ldr	r3, [pc, #340]	; (3844 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    36f0:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    36f2:	4b55      	ldr	r3, [pc, #340]	; (3848 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    36f4:	681b      	ldr	r3, [r3, #0]
    36f6:	f003 0301 	and.w	r3, r3, #1
    36fa:	2b00      	cmp	r3, #0
    36fc:	d105      	bne.n	370a <__static_initialization_and_destruction_0(int, int)+0xae>
    36fe:	4b52      	ldr	r3, [pc, #328]	; (3848 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    3700:	2201      	movs	r2, #1
    3702:	601a      	str	r2, [r3, #0]
    3704:	4a51      	ldr	r2, [pc, #324]	; (384c <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    3706:	4b52      	ldr	r3, [pc, #328]	; (3850 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    3708:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    370a:	4b52      	ldr	r3, [pc, #328]	; (3854 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	f003 0301 	and.w	r3, r3, #1
    3712:	2b00      	cmp	r3, #0
    3714:	d106      	bne.n	3724 <__static_initialization_and_destruction_0(int, int)+0xc8>
    3716:	4b4f      	ldr	r3, [pc, #316]	; (3854 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    3718:	2201      	movs	r2, #1
    371a:	601a      	str	r2, [r3, #0]
    371c:	4b4e      	ldr	r3, [pc, #312]	; (3858 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    371e:	4618      	mov	r0, r3
    3720:	f7fe fb2a 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    3724:	4b4d      	ldr	r3, [pc, #308]	; (385c <__static_initialization_and_destruction_0(int, int)+0x200>)
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	f003 0301 	and.w	r3, r3, #1
    372c:	2b00      	cmp	r3, #0
    372e:	d114      	bne.n	375a <__static_initialization_and_destruction_0(int, int)+0xfe>
    3730:	4b4a      	ldr	r3, [pc, #296]	; (385c <__static_initialization_and_destruction_0(int, int)+0x200>)
    3732:	2201      	movs	r2, #1
    3734:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    3736:	4a4a      	ldr	r2, [pc, #296]	; (3860 <__static_initialization_and_destruction_0(int, int)+0x204>)
    3738:	4b4a      	ldr	r3, [pc, #296]	; (3864 <__static_initialization_and_destruction_0(int, int)+0x208>)
    373a:	601a      	str	r2, [r3, #0]
    373c:	4a4a      	ldr	r2, [pc, #296]	; (3868 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    373e:	4b49      	ldr	r3, [pc, #292]	; (3864 <__static_initialization_and_destruction_0(int, int)+0x208>)
    3740:	605a      	str	r2, [r3, #4]
    3742:	4a4a      	ldr	r2, [pc, #296]	; (386c <__static_initialization_and_destruction_0(int, int)+0x210>)
    3744:	4b47      	ldr	r3, [pc, #284]	; (3864 <__static_initialization_and_destruction_0(int, int)+0x208>)
    3746:	609a      	str	r2, [r3, #8]
    3748:	4a49      	ldr	r2, [pc, #292]	; (3870 <__static_initialization_and_destruction_0(int, int)+0x214>)
    374a:	4b46      	ldr	r3, [pc, #280]	; (3864 <__static_initialization_and_destruction_0(int, int)+0x208>)
    374c:	60da      	str	r2, [r3, #12]
    374e:	4a49      	ldr	r2, [pc, #292]	; (3874 <__static_initialization_and_destruction_0(int, int)+0x218>)
    3750:	4b44      	ldr	r3, [pc, #272]	; (3864 <__static_initialization_and_destruction_0(int, int)+0x208>)
    3752:	611a      	str	r2, [r3, #16]
    3754:	4a48      	ldr	r2, [pc, #288]	; (3878 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3756:	4b43      	ldr	r3, [pc, #268]	; (3864 <__static_initialization_and_destruction_0(int, int)+0x208>)
    3758:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    375a:	4b48      	ldr	r3, [pc, #288]	; (387c <__static_initialization_and_destruction_0(int, int)+0x220>)
    375c:	681b      	ldr	r3, [r3, #0]
    375e:	f003 0301 	and.w	r3, r3, #1
    3762:	2b00      	cmp	r3, #0
    3764:	d122      	bne.n	37ac <__static_initialization_and_destruction_0(int, int)+0x150>
    3766:	4b45      	ldr	r3, [pc, #276]	; (387c <__static_initialization_and_destruction_0(int, int)+0x220>)
    3768:	2201      	movs	r2, #1
    376a:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    376c:	4b44      	ldr	r3, [pc, #272]	; (3880 <__static_initialization_and_destruction_0(int, int)+0x224>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    376e:	4a45      	ldr	r2, [pc, #276]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3770:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3772:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    3774:	4a43      	ldr	r2, [pc, #268]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3776:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3778:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    377a:	4a42      	ldr	r2, [pc, #264]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    377c:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    377e:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    3780:	4a40      	ldr	r2, [pc, #256]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3782:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3784:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    3786:	4a3f      	ldr	r2, [pc, #252]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3788:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    378a:	611a      	str	r2, [r3, #16]
    378c:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    378e:	4a3d      	ldr	r2, [pc, #244]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3790:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3792:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    3794:	4a3b      	ldr	r2, [pc, #236]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3796:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3798:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    379a:	4a3a      	ldr	r2, [pc, #232]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    379c:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    379e:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    37a0:	4a38      	ldr	r2, [pc, #224]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    37a2:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    37a4:	60da      	str	r2, [r3, #12]
    37a6:	4a37      	ldr	r2, [pc, #220]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    37a8:	3234      	adds	r2, #52	; 0x34
    37aa:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    37ac:	4b36      	ldr	r3, [pc, #216]	; (3888 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	f003 0301 	and.w	r3, r3, #1
    37b4:	2b00      	cmp	r3, #0
    37b6:	d106      	bne.n	37c6 <__static_initialization_and_destruction_0(int, int)+0x16a>
    37b8:	4b33      	ldr	r3, [pc, #204]	; (3888 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    37ba:	2201      	movs	r2, #1
    37bc:	601a      	str	r2, [r3, #0]
    37be:	4b31      	ldr	r3, [pc, #196]	; (3884 <__static_initialization_and_destruction_0(int, int)+0x228>)
    37c0:	461a      	mov	r2, r3
    37c2:	4b32      	ldr	r3, [pc, #200]	; (388c <__static_initialization_and_destruction_0(int, int)+0x230>)
    37c4:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm0Peripheral = {
    37c6:	4b32      	ldr	r3, [pc, #200]	; (3890 <__static_initialization_and_destruction_0(int, int)+0x234>)
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	f003 0301 	and.w	r3, r3, #1
    37ce:	2b00      	cmp	r3, #0
    37d0:	d105      	bne.n	37de <__static_initialization_and_destruction_0(int, int)+0x182>
    37d2:	4b2f      	ldr	r3, [pc, #188]	; (3890 <__static_initialization_and_destruction_0(int, int)+0x234>)
    37d4:	2201      	movs	r2, #1
    37d6:	601a      	str	r2, [r3, #0]
    };
    37d8:	4a2e      	ldr	r2, [pc, #184]	; (3894 <__static_initialization_and_destruction_0(int, int)+0x238>)
    37da:	4b2f      	ldr	r3, [pc, #188]	; (3898 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    37dc:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm1Peripheral = {
    37de:	4b2f      	ldr	r3, [pc, #188]	; (389c <__static_initialization_and_destruction_0(int, int)+0x240>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	f003 0301 	and.w	r3, r3, #1
    37e6:	2b00      	cmp	r3, #0
    37e8:	d105      	bne.n	37f6 <__static_initialization_and_destruction_0(int, int)+0x19a>
    37ea:	4b2c      	ldr	r3, [pc, #176]	; (389c <__static_initialization_and_destruction_0(int, int)+0x240>)
    37ec:	2201      	movs	r2, #1
    37ee:	601a      	str	r2, [r3, #0]
    };
    37f0:	4a2b      	ldr	r2, [pc, #172]	; (38a0 <__static_initialization_and_destruction_0(int, int)+0x244>)
    37f2:	4b2c      	ldr	r3, [pc, #176]	; (38a4 <__static_initialization_and_destruction_0(int, int)+0x248>)
    37f4:	601a      	str	r2, [r3, #0]
paramsStruct *shared_mem = new paramsStruct;
    37f6:	2020      	movs	r0, #32
    37f8:	f003 ff96 	bl	7728 <operator new(unsigned int)>
    37fc:	4603      	mov	r3, r0
    37fe:	461a      	mov	r2, r3
    3800:	4b29      	ldr	r3, [pc, #164]	; (38a8 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    3802:	601a      	str	r2, [r3, #0]
    3804:	bf00      	nop
    3806:	3708      	adds	r7, #8
    3808:	46bd      	mov	sp, r7
    380a:	bd80      	pop	{r7, pc}
    380c:	1000027c 	.word	0x1000027c
    3810:	4002c000 	.word	0x4002c000
    3814:	10000114 	.word	0x10000114
    3818:	10000280 	.word	0x10000280
    381c:	400fc000 	.word	0x400fc000
    3820:	10000120 	.word	0x10000120
    3824:	10000284 	.word	0x10000284
    3828:	40098000 	.word	0x40098000
    382c:	1000000c 	.word	0x1000000c
    3830:	10000288 	.word	0x10000288
    3834:	4009c000 	.word	0x4009c000
    3838:	10000020 	.word	0x10000020
    383c:	1000028c 	.word	0x1000028c
    3840:	400a4000 	.word	0x400a4000
    3844:	10000034 	.word	0x10000034
    3848:	10000290 	.word	0x10000290
    384c:	40034000 	.word	0x40034000
    3850:	10000124 	.word	0x10000124
    3854:	10000294 	.word	0x10000294
    3858:	10000128 	.word	0x10000128
    385c:	10000298 	.word	0x10000298
    3860:	20098000 	.word	0x20098000
    3864:	10000228 	.word	0x10000228
    3868:	20098020 	.word	0x20098020
    386c:	20098040 	.word	0x20098040
    3870:	20098060 	.word	0x20098060
    3874:	20098080 	.word	0x20098080
    3878:	200980a0 	.word	0x200980a0
    387c:	1000029c 	.word	0x1000029c
    3880:	10000240 	.word	0x10000240
    3884:	40028080 	.word	0x40028080
    3888:	100002a0 	.word	0x100002a0
    388c:	10000268 	.word	0x10000268
    3890:	100002a4 	.word	0x100002a4
    3894:	40014000 	.word	0x40014000
    3898:	1000004c 	.word	0x1000004c
    389c:	100002a8 	.word	0x100002a8
    38a0:	40018000 	.word	0x40018000
    38a4:	10000054 	.word	0x10000054
    38a8:	10000278 	.word	0x10000278

000038ac <_GLOBAL__sub_I_xUartTaskHandle>:
    38ac:	b580      	push	{r7, lr}
    38ae:	af00      	add	r7, sp, #0
    38b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    38b4:	2001      	movs	r0, #1
    38b6:	f7ff fed1 	bl	365c <__static_initialization_and_destruction_0(int, int)>
    38ba:	bd80      	pop	{r7, pc}

000038bc <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    38bc:	b480      	push	{r7}
    38be:	b087      	sub	sp, #28
    38c0:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    38c2:	2300      	movs	r3, #0
    38c4:	617b      	str	r3, [r7, #20]
    38c6:	697a      	ldr	r2, [r7, #20]
    38c8:	4613      	mov	r3, r2
    38ca:	005b      	lsls	r3, r3, #1
    38cc:	4413      	add	r3, r2
    38ce:	009b      	lsls	r3, r3, #2
    38d0:	4a1f      	ldr	r2, [pc, #124]	; (3950 <sjsu::InitializeDataSection()+0x94>)
    38d2:	4413      	add	r3, r2
    38d4:	4a1f      	ldr	r2, [pc, #124]	; (3954 <sjsu::InitializeDataSection()+0x98>)
    38d6:	4293      	cmp	r3, r2
    38d8:	d233      	bcs.n	3942 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    38da:	491d      	ldr	r1, [pc, #116]	; (3950 <sjsu::InitializeDataSection()+0x94>)
    38dc:	697a      	ldr	r2, [r7, #20]
    38de:	4613      	mov	r3, r2
    38e0:	005b      	lsls	r3, r3, #1
    38e2:	4413      	add	r3, r2
    38e4:	009b      	lsls	r3, r3, #2
    38e6:	440b      	add	r3, r1
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    38ec:	4918      	ldr	r1, [pc, #96]	; (3950 <sjsu::InitializeDataSection()+0x94>)
    38ee:	697a      	ldr	r2, [r7, #20]
    38f0:	4613      	mov	r3, r2
    38f2:	005b      	lsls	r3, r3, #1
    38f4:	4413      	add	r3, r2
    38f6:	009b      	lsls	r3, r3, #2
    38f8:	440b      	add	r3, r1
    38fa:	685b      	ldr	r3, [r3, #4]
    38fc:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    38fe:	4914      	ldr	r1, [pc, #80]	; (3950 <sjsu::InitializeDataSection()+0x94>)
    3900:	697a      	ldr	r2, [r7, #20]
    3902:	4613      	mov	r3, r2
    3904:	005b      	lsls	r3, r3, #1
    3906:	4413      	add	r3, r2
    3908:	009b      	lsls	r3, r3, #2
    390a:	440b      	add	r3, r1
    390c:	3308      	adds	r3, #8
    390e:	681b      	ldr	r3, [r3, #0]
    3910:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    3912:	2300      	movs	r3, #0
    3914:	613b      	str	r3, [r7, #16]
    3916:	693a      	ldr	r2, [r7, #16]
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	429a      	cmp	r2, r3
    391c:	d20d      	bcs.n	393a <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    391e:	693b      	ldr	r3, [r7, #16]
    3920:	009b      	lsls	r3, r3, #2
    3922:	68fa      	ldr	r2, [r7, #12]
    3924:	441a      	add	r2, r3
    3926:	693b      	ldr	r3, [r7, #16]
    3928:	009b      	lsls	r3, r3, #2
    392a:	68b9      	ldr	r1, [r7, #8]
    392c:	440b      	add	r3, r1
    392e:	6812      	ldr	r2, [r2, #0]
    3930:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    3932:	693b      	ldr	r3, [r7, #16]
    3934:	3301      	adds	r3, #1
    3936:	613b      	str	r3, [r7, #16]
    3938:	e7ed      	b.n	3916 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    393a:	697b      	ldr	r3, [r7, #20]
    393c:	3301      	adds	r3, #1
    393e:	617b      	str	r3, [r7, #20]
    3940:	e7c1      	b.n	38c6 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    3942:	bf00      	nop
    3944:	371c      	adds	r7, #28
    3946:	46bd      	mov	sp, r7
    3948:	f85d 7b04 	ldr.w	r7, [sp], #4
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	000000e4 	.word	0x000000e4
    3954:	000000fc 	.word	0x000000fc

00003958 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    3958:	b480      	push	{r7}
    395a:	b085      	sub	sp, #20
    395c:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    395e:	2300      	movs	r3, #0
    3960:	60fb      	str	r3, [r7, #12]
    3962:	68fb      	ldr	r3, [r7, #12]
    3964:	00db      	lsls	r3, r3, #3
    3966:	4a15      	ldr	r2, [pc, #84]	; (39bc <sjsu::InitializeBssSection()+0x64>)
    3968:	4413      	add	r3, r2
    396a:	4a15      	ldr	r2, [pc, #84]	; (39c0 <sjsu::InitializeBssSection()+0x68>)
    396c:	4293      	cmp	r3, r2
    396e:	d21e      	bcs.n	39ae <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    3970:	4a12      	ldr	r2, [pc, #72]	; (39bc <sjsu::InitializeBssSection()+0x64>)
    3972:	68fb      	ldr	r3, [r7, #12]
    3974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3978:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    397a:	4a10      	ldr	r2, [pc, #64]	; (39bc <sjsu::InitializeBssSection()+0x64>)
    397c:	68fb      	ldr	r3, [r7, #12]
    397e:	00db      	lsls	r3, r3, #3
    3980:	4413      	add	r3, r2
    3982:	685b      	ldr	r3, [r3, #4]
    3984:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    3986:	2300      	movs	r3, #0
    3988:	60bb      	str	r3, [r7, #8]
    398a:	68ba      	ldr	r2, [r7, #8]
    398c:	683b      	ldr	r3, [r7, #0]
    398e:	429a      	cmp	r2, r3
    3990:	d209      	bcs.n	39a6 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    3992:	68bb      	ldr	r3, [r7, #8]
    3994:	009b      	lsls	r3, r3, #2
    3996:	687a      	ldr	r2, [r7, #4]
    3998:	4413      	add	r3, r2
    399a:	2200      	movs	r2, #0
    399c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    399e:	68bb      	ldr	r3, [r7, #8]
    39a0:	3301      	adds	r3, #1
    39a2:	60bb      	str	r3, [r7, #8]
    39a4:	e7f1      	b.n	398a <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    39a6:	68fb      	ldr	r3, [r7, #12]
    39a8:	3301      	adds	r3, #1
    39aa:	60fb      	str	r3, [r7, #12]
    39ac:	e7d9      	b.n	3962 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    39ae:	bf00      	nop
    39b0:	3714      	adds	r7, #20
    39b2:	46bd      	mov	sp, r7
    39b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39b8:	4770      	bx	lr
    39ba:	bf00      	nop
    39bc:	000000fc 	.word	0x000000fc
    39c0:	0000010c 	.word	0x0000010c

000039c4 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    39c4:	b580      	push	{r7, lr}
    39c6:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    39c8:	f7ff ff78 	bl	38bc <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    39cc:	f7ff ffc4 	bl	3958 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    39d0:	f005 fb88 	bl	90e4 <__libc_init_array>
}
    39d4:	bf00      	nop
    39d6:	bd80      	pop	{r7, pc}

000039d8 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    39d8:	b580      	push	{r7, lr}
    39da:	b08c      	sub	sp, #48	; 0x30
    39dc:	af02      	add	r7, sp, #8
    39de:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	685b      	ldr	r3, [r3, #4]
    39ea:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	689b      	ldr	r3, [r3, #8]
    39f0:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	68db      	ldr	r3, [r3, #12]
    39f6:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	691b      	ldr	r3, [r3, #16]
    39fc:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	695b      	ldr	r3, [r3, #20]
    3a02:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	699b      	ldr	r3, [r3, #24]
    3a08:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	69db      	ldr	r3, [r3, #28]
    3a0e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    3a10:	480d      	ldr	r0, [pc, #52]	; (3a48 <GetRegistersFromStack+0x70>)
    3a12:	f002 fd01 	bl	6418 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    3a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3a18:	6a3a      	ldr	r2, [r7, #32]
    3a1a:	69f8      	ldr	r0, [r7, #28]
    3a1c:	69bb      	ldr	r3, [r7, #24]
    3a1e:	9300      	str	r3, [sp, #0]
    3a20:	4603      	mov	r3, r0
    3a22:	480a      	ldr	r0, [pc, #40]	; (3a4c <GetRegistersFromStack+0x74>)
    3a24:	f002 fcf8 	bl	6418 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    3a28:	6979      	ldr	r1, [r7, #20]
    3a2a:	693a      	ldr	r2, [r7, #16]
    3a2c:	68f8      	ldr	r0, [r7, #12]
    3a2e:	68bb      	ldr	r3, [r7, #8]
    3a30:	9300      	str	r3, [sp, #0]
    3a32:	4603      	mov	r3, r0
    3a34:	4806      	ldr	r0, [pc, #24]	; (3a50 <GetRegistersFromStack+0x78>)
    3a36:	f002 fcef 	bl	6418 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    3a3a:	68fb      	ldr	r3, [r7, #12]
    3a3c:	4619      	mov	r1, r3
    3a3e:	2001      	movs	r0, #1
    3a40:	f7fc ff42 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    3a44:	e7fe      	b.n	3a44 <GetRegistersFromStack+0x6c>
    3a46:	bf00      	nop
    3a48:	0000a2e4 	.word	0x0000a2e4
    3a4c:	0000a310 	.word	0x0000a310
    3a50:	0000a344 	.word	0x0000a344

00003a54 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    3a54:	b480      	push	{r7}
    3a56:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    3a58:	f01e 0f04 	tst.w	lr, #4
    3a5c:	bf0c      	ite	eq
    3a5e:	f3ef 8008 	mrseq	r0, MSP
    3a62:	f3ef 8009 	mrsne	r0, PSP
    3a66:	6981      	ldr	r1, [r0, #24]
    3a68:	4a00      	ldr	r2, [pc, #0]	; (3a6c <handler2_address_const>)
    3a6a:	4710      	bx	r2

00003a6c <handler2_address_const>:
    3a6c:	000039d9 	.word	0x000039d9
    }
  }
    3a70:	bf00      	nop
    3a72:	46bd      	mov	sp, r7
    3a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a78:	4770      	bx	lr
    3a7a:	Address 0x0000000000003a7a is out of bounds.


00003a7c <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b084      	sub	sp, #16
    3a80:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    3a82:	4b16      	ldr	r3, [pc, #88]	; (3adc <ArmResetHandler+0x60>)
    3a84:	60fb      	str	r3, [r7, #12]
    3a86:	68fb      	ldr	r3, [r7, #12]
    3a88:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    3a8a:	683b      	ldr	r3, [r7, #0]
    3a8c:	f383 8809 	msr	PSP, r3
    3a90:	68fb      	ldr	r3, [r7, #12]
    3a92:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    3a94:	687b      	ldr	r3, [r7, #4]
    3a96:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    3a9a:	f7ff ff93 	bl	39c4 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    3a9e:	4b10      	ldr	r3, [pc, #64]	; (3ae0 <ArmResetHandler+0x64>)
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	f003 0301 	and.w	r3, r3, #1
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	bf14      	ite	ne
    3aaa:	2301      	movne	r3, #1
    3aac:	2300      	moveq	r3, #0
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d001      	beq.n	3ab8 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    3ab4:	f002 fcd2 	bl	645c <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    3ab8:	f003 f8da 	bl	6c70 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    3abc:	f7ff fa1a 	bl	2ef4 <main>
    3ac0:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    3ac2:	68bb      	ldr	r3, [r7, #8]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	db04      	blt.n	3ad2 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    3ac8:	68b9      	ldr	r1, [r7, #8]
    3aca:	4806      	ldr	r0, [pc, #24]	; (3ae4 <ArmResetHandler+0x68>)
    3acc:	f002 fca4 	bl	6418 <printf>
    3ad0:	e003      	b.n	3ada <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    3ad2:	68b9      	ldr	r1, [r7, #8]
    3ad4:	4804      	ldr	r0, [pc, #16]	; (3ae8 <ArmResetHandler+0x6c>)
    3ad6:	f002 fc9f 	bl	6418 <printf>
    3ada:	e7fe      	b.n	3ada <ArmResetHandler+0x5e>
    3adc:	10010000 	.word	0x10010000
    3ae0:	e000edf0 	.word	0xe000edf0
    3ae4:	0000a37c 	.word	0x0000a37c
    3ae8:	0000a3b0 	.word	0x0000a3b0

00003aec <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    3aec:	b580      	push	{r7, lr}
    3aee:	b082      	sub	sp, #8
    3af0:	af00      	add	r7, sp, #0
    3af2:	6078      	str	r0, [r7, #4]
    3af4:	6039      	str	r1, [r7, #0]
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	2b01      	cmp	r3, #1
    3afa:	d111      	bne.n	3b20 <__static_initialization_and_destruction_0(int, int)+0x34>
    3afc:	683b      	ldr	r3, [r7, #0]
    3afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3b02:	4293      	cmp	r3, r2
    3b04:	d10c      	bne.n	3b20 <__static_initialization_and_destruction_0(int, int)+0x34>
    3b06:	4b08      	ldr	r3, [pc, #32]	; (3b28 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	f003 0301 	and.w	r3, r3, #1
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d106      	bne.n	3b20 <__static_initialization_and_destruction_0(int, int)+0x34>
    3b12:	4b05      	ldr	r3, [pc, #20]	; (3b28 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    3b14:	2201      	movs	r2, #1
    3b16:	601a      	str	r2, [r3, #0]
    3b18:	4b04      	ldr	r3, [pc, #16]	; (3b2c <__static_initialization_and_destruction_0(int, int)+0x40>)
    3b1a:	4618      	mov	r0, r3
    3b1c:	f7fe f92c 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    3b20:	bf00      	nop
    3b22:	3708      	adds	r7, #8
    3b24:	46bd      	mov	sp, r7
    3b26:	bd80      	pop	{r7, pc}
    3b28:	10000294 	.word	0x10000294
    3b2c:	10000128 	.word	0x10000128

00003b30 <_GLOBAL__sub_I_GetRegistersFromStack>:
    3b30:	b580      	push	{r7, lr}
    3b32:	af00      	add	r7, sp, #0
    3b34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3b38:	2001      	movs	r0, #1
    3b3a:	f7ff ffd7 	bl	3aec <__static_initialization_and_destruction_0(int, int)>
    3b3e:	bd80      	pop	{r7, pc}

00003b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3b40:	b480      	push	{r7}
    3b42:	b083      	sub	sp, #12
    3b44:	af00      	add	r7, sp, #0
    3b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3b48:	687b      	ldr	r3, [r7, #4]
    3b4a:	f103 0208 	add.w	r2, r3, #8
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3b52:	687b      	ldr	r3, [r7, #4]
    3b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3b5a:	687b      	ldr	r3, [r7, #4]
    3b5c:	f103 0208 	add.w	r2, r3, #8
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	f103 0208 	add.w	r2, r3, #8
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	2200      	movs	r2, #0
    3b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3b74:	bf00      	nop
    3b76:	370c      	adds	r7, #12
    3b78:	46bd      	mov	sp, r7
    3b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b7e:	4770      	bx	lr

00003b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    3b80:	b480      	push	{r7}
    3b82:	b083      	sub	sp, #12
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	2200      	movs	r2, #0
    3b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3b8e:	bf00      	nop
    3b90:	370c      	adds	r7, #12
    3b92:	46bd      	mov	sp, r7
    3b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b98:	4770      	bx	lr

00003b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3b9a:	b480      	push	{r7}
    3b9c:	b085      	sub	sp, #20
    3b9e:	af00      	add	r7, sp, #0
    3ba0:	6078      	str	r0, [r7, #4]
    3ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	685b      	ldr	r3, [r3, #4]
    3ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    3baa:	683b      	ldr	r3, [r7, #0]
    3bac:	68fa      	ldr	r2, [r7, #12]
    3bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3bb0:	68fb      	ldr	r3, [r7, #12]
    3bb2:	689a      	ldr	r2, [r3, #8]
    3bb4:	683b      	ldr	r3, [r7, #0]
    3bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	689b      	ldr	r3, [r3, #8]
    3bbc:	683a      	ldr	r2, [r7, #0]
    3bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	683a      	ldr	r2, [r7, #0]
    3bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3bc6:	683b      	ldr	r3, [r7, #0]
    3bc8:	687a      	ldr	r2, [r7, #4]
    3bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	1c5a      	adds	r2, r3, #1
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	601a      	str	r2, [r3, #0]
}
    3bd6:	bf00      	nop
    3bd8:	3714      	adds	r7, #20
    3bda:	46bd      	mov	sp, r7
    3bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be0:	4770      	bx	lr

00003be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3be2:	b480      	push	{r7}
    3be4:	b085      	sub	sp, #20
    3be6:	af00      	add	r7, sp, #0
    3be8:	6078      	str	r0, [r7, #4]
    3bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3bec:	683b      	ldr	r3, [r7, #0]
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3bf2:	68bb      	ldr	r3, [r7, #8]
    3bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3bf8:	d103      	bne.n	3c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3bfa:	687b      	ldr	r3, [r7, #4]
    3bfc:	691b      	ldr	r3, [r3, #16]
    3bfe:	60fb      	str	r3, [r7, #12]
    3c00:	e00c      	b.n	3c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	3308      	adds	r3, #8
    3c06:	60fb      	str	r3, [r7, #12]
    3c08:	e002      	b.n	3c10 <vListInsert+0x2e>
    3c0a:	68fb      	ldr	r3, [r7, #12]
    3c0c:	685b      	ldr	r3, [r3, #4]
    3c0e:	60fb      	str	r3, [r7, #12]
    3c10:	68fb      	ldr	r3, [r7, #12]
    3c12:	685b      	ldr	r3, [r3, #4]
    3c14:	681b      	ldr	r3, [r3, #0]
    3c16:	68ba      	ldr	r2, [r7, #8]
    3c18:	429a      	cmp	r2, r3
    3c1a:	d2f6      	bcs.n	3c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3c1c:	68fb      	ldr	r3, [r7, #12]
    3c1e:	685a      	ldr	r2, [r3, #4]
    3c20:	683b      	ldr	r3, [r7, #0]
    3c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3c24:	683b      	ldr	r3, [r7, #0]
    3c26:	685b      	ldr	r3, [r3, #4]
    3c28:	683a      	ldr	r2, [r7, #0]
    3c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	68fa      	ldr	r2, [r7, #12]
    3c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    3c32:	68fb      	ldr	r3, [r7, #12]
    3c34:	683a      	ldr	r2, [r7, #0]
    3c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3c38:	683b      	ldr	r3, [r7, #0]
    3c3a:	687a      	ldr	r2, [r7, #4]
    3c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	681b      	ldr	r3, [r3, #0]
    3c42:	1c5a      	adds	r2, r3, #1
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	601a      	str	r2, [r3, #0]
}
    3c48:	bf00      	nop
    3c4a:	3714      	adds	r7, #20
    3c4c:	46bd      	mov	sp, r7
    3c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c52:	4770      	bx	lr

00003c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    3c54:	b480      	push	{r7}
    3c56:	b085      	sub	sp, #20
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	691b      	ldr	r3, [r3, #16]
    3c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	685b      	ldr	r3, [r3, #4]
    3c66:	687a      	ldr	r2, [r7, #4]
    3c68:	6892      	ldr	r2, [r2, #8]
    3c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3c6c:	687b      	ldr	r3, [r7, #4]
    3c6e:	689b      	ldr	r3, [r3, #8]
    3c70:	687a      	ldr	r2, [r7, #4]
    3c72:	6852      	ldr	r2, [r2, #4]
    3c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	685b      	ldr	r3, [r3, #4]
    3c7a:	687a      	ldr	r2, [r7, #4]
    3c7c:	429a      	cmp	r2, r3
    3c7e:	d103      	bne.n	3c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	689a      	ldr	r2, [r3, #8]
    3c84:	68fb      	ldr	r3, [r7, #12]
    3c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	2200      	movs	r2, #0
    3c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    3c8e:	68fb      	ldr	r3, [r7, #12]
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	1e5a      	subs	r2, r3, #1
    3c94:	68fb      	ldr	r3, [r7, #12]
    3c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	681b      	ldr	r3, [r3, #0]
}
    3c9c:	4618      	mov	r0, r3
    3c9e:	3714      	adds	r7, #20
    3ca0:	46bd      	mov	sp, r7
    3ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca6:	4770      	bx	lr

00003ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b08a      	sub	sp, #40	; 0x28
    3cac:	af04      	add	r7, sp, #16
    3cae:	60f8      	str	r0, [r7, #12]
    3cb0:	60b9      	str	r1, [r7, #8]
    3cb2:	607a      	str	r2, [r7, #4]
    3cb4:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    3cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d01e      	beq.n	3cfa <xTaskCreateStatic+0x52>
    3cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d01b      	beq.n	3cfa <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    3cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cc4:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    3cc6:	697b      	ldr	r3, [r7, #20]
    3cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3cca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    3ccc:	697b      	ldr	r3, [r7, #20]
    3cce:	2202      	movs	r2, #2
    3cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    3cd4:	2300      	movs	r3, #0
    3cd6:	9303      	str	r3, [sp, #12]
    3cd8:	697b      	ldr	r3, [r7, #20]
    3cda:	9302      	str	r3, [sp, #8]
    3cdc:	f107 0310 	add.w	r3, r7, #16
    3ce0:	9301      	str	r3, [sp, #4]
    3ce2:	6a3b      	ldr	r3, [r7, #32]
    3ce4:	9300      	str	r3, [sp, #0]
    3ce6:	683b      	ldr	r3, [r7, #0]
    3ce8:	687a      	ldr	r2, [r7, #4]
    3cea:	68b9      	ldr	r1, [r7, #8]
    3cec:	68f8      	ldr	r0, [r7, #12]
    3cee:	f000 f850 	bl	3d92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3cf2:	6978      	ldr	r0, [r7, #20]
    3cf4:	f000 f8c8 	bl	3e88 <prvAddNewTaskToReadyList>
    3cf8:	e001      	b.n	3cfe <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
    3cfa:	2300      	movs	r3, #0
    3cfc:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
    3cfe:	693b      	ldr	r3, [r7, #16]
	}
    3d00:	4618      	mov	r0, r3
    3d02:	3718      	adds	r7, #24
    3d04:	46bd      	mov	sp, r7
    3d06:	bd80      	pop	{r7, pc}

00003d08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b08c      	sub	sp, #48	; 0x30
    3d0c:	af04      	add	r7, sp, #16
    3d0e:	60f8      	str	r0, [r7, #12]
    3d10:	60b9      	str	r1, [r7, #8]
    3d12:	603b      	str	r3, [r7, #0]
    3d14:	4613      	mov	r3, r2
    3d16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3d18:	88fb      	ldrh	r3, [r7, #6]
    3d1a:	009b      	lsls	r3, r3, #2
    3d1c:	4618      	mov	r0, r3
    3d1e:	f001 f9c3 	bl	50a8 <pvPortMalloc>
    3d22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    3d24:	697b      	ldr	r3, [r7, #20]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d00e      	beq.n	3d48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3d2a:	2060      	movs	r0, #96	; 0x60
    3d2c:	f001 f9bc 	bl	50a8 <pvPortMalloc>
    3d30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    3d32:	69fb      	ldr	r3, [r7, #28]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d003      	beq.n	3d40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3d38:	69fb      	ldr	r3, [r7, #28]
    3d3a:	697a      	ldr	r2, [r7, #20]
    3d3c:	631a      	str	r2, [r3, #48]	; 0x30
    3d3e:	e005      	b.n	3d4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3d40:	6978      	ldr	r0, [r7, #20]
    3d42:	f001 f9c3 	bl	50cc <vPortFree>
    3d46:	e001      	b.n	3d4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    3d48:	2300      	movs	r3, #0
    3d4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3d4c:	69fb      	ldr	r3, [r7, #28]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d017      	beq.n	3d82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    3d52:	69fb      	ldr	r3, [r7, #28]
    3d54:	2200      	movs	r2, #0
    3d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    3d5a:	88fa      	ldrh	r2, [r7, #6]
    3d5c:	2300      	movs	r3, #0
    3d5e:	9303      	str	r3, [sp, #12]
    3d60:	69fb      	ldr	r3, [r7, #28]
    3d62:	9302      	str	r3, [sp, #8]
    3d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d66:	9301      	str	r3, [sp, #4]
    3d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d6a:	9300      	str	r3, [sp, #0]
    3d6c:	683b      	ldr	r3, [r7, #0]
    3d6e:	68b9      	ldr	r1, [r7, #8]
    3d70:	68f8      	ldr	r0, [r7, #12]
    3d72:	f000 f80e 	bl	3d92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3d76:	69f8      	ldr	r0, [r7, #28]
    3d78:	f000 f886 	bl	3e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    3d7c:	2301      	movs	r3, #1
    3d7e:	61bb      	str	r3, [r7, #24]
    3d80:	e002      	b.n	3d88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    3d88:	69bb      	ldr	r3, [r7, #24]
	}
    3d8a:	4618      	mov	r0, r3
    3d8c:	3720      	adds	r7, #32
    3d8e:	46bd      	mov	sp, r7
    3d90:	bd80      	pop	{r7, pc}

00003d92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    3d92:	b580      	push	{r7, lr}
    3d94:	b086      	sub	sp, #24
    3d96:	af00      	add	r7, sp, #0
    3d98:	60f8      	str	r0, [r7, #12]
    3d9a:	60b9      	str	r1, [r7, #8]
    3d9c:	607a      	str	r2, [r7, #4]
    3d9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    3da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3da2:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	009b      	lsls	r3, r3, #2
    3da8:	461a      	mov	r2, r3
    3daa:	21a5      	movs	r1, #165	; 0xa5
    3dac:	f005 f9d9 	bl	9162 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3dba:	3b01      	subs	r3, #1
    3dbc:	009b      	lsls	r3, r3, #2
    3dbe:	4413      	add	r3, r2
    3dc0:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3dc2:	693b      	ldr	r3, [r7, #16]
    3dc4:	f023 0307 	bic.w	r3, r3, #7
    3dc8:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3dca:	2300      	movs	r3, #0
    3dcc:	617b      	str	r3, [r7, #20]
    3dce:	e012      	b.n	3df6 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3dd0:	68ba      	ldr	r2, [r7, #8]
    3dd2:	697b      	ldr	r3, [r7, #20]
    3dd4:	4413      	add	r3, r2
    3dd6:	7819      	ldrb	r1, [r3, #0]
    3dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dda:	697b      	ldr	r3, [r7, #20]
    3ddc:	4413      	add	r3, r2
    3dde:	3334      	adds	r3, #52	; 0x34
    3de0:	460a      	mov	r2, r1
    3de2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3de4:	68ba      	ldr	r2, [r7, #8]
    3de6:	697b      	ldr	r3, [r7, #20]
    3de8:	4413      	add	r3, r2
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	2b00      	cmp	r3, #0
    3dee:	d006      	beq.n	3dfe <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3df0:	697b      	ldr	r3, [r7, #20]
    3df2:	3301      	adds	r3, #1
    3df4:	617b      	str	r3, [r7, #20]
    3df6:	697b      	ldr	r3, [r7, #20]
    3df8:	2b0f      	cmp	r3, #15
    3dfa:	d9e9      	bls.n	3dd0 <prvInitialiseNewTask+0x3e>
    3dfc:	e000      	b.n	3e00 <prvInitialiseNewTask+0x6e>
		{
			break;
    3dfe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e02:	2200      	movs	r2, #0
    3e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3e08:	6a3b      	ldr	r3, [r7, #32]
    3e0a:	2b04      	cmp	r3, #4
    3e0c:	d901      	bls.n	3e12 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3e0e:	2304      	movs	r3, #4
    3e10:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    3e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e14:	6a3a      	ldr	r2, [r7, #32]
    3e16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    3e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e1a:	6a3a      	ldr	r2, [r7, #32]
    3e1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    3e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e20:	2200      	movs	r2, #0
    3e22:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    3e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e26:	3304      	adds	r3, #4
    3e28:	4618      	mov	r0, r3
    3e2a:	f7ff fea9 	bl	3b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e30:	3318      	adds	r3, #24
    3e32:	4618      	mov	r0, r3
    3e34:	f7ff fea4 	bl	3b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    3e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3e3e:	6a3b      	ldr	r3, [r7, #32]
    3e40:	f1c3 0205 	rsb	r2, r3, #5
    3e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    3e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    3e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e50:	2200      	movs	r2, #0
    3e52:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    3e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e56:	2200      	movs	r2, #0
    3e58:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e5c:	2200      	movs	r2, #0
    3e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3e62:	683a      	ldr	r2, [r7, #0]
    3e64:	68f9      	ldr	r1, [r7, #12]
    3e66:	6938      	ldr	r0, [r7, #16]
    3e68:	f003 f806 	bl	6e78 <pxPortInitialiseStack>
    3e6c:	4602      	mov	r2, r0
    3e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e70:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    3e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e74:	2b00      	cmp	r3, #0
    3e76:	d002      	beq.n	3e7e <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3e7e:	bf00      	nop
    3e80:	3718      	adds	r7, #24
    3e82:	46bd      	mov	sp, r7
    3e84:	bd80      	pop	{r7, pc}
    3e86:	Address 0x0000000000003e86 is out of bounds.


00003e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	b082      	sub	sp, #8
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3e90:	f003 f890 	bl	6fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    3e94:	4b2c      	ldr	r3, [pc, #176]	; (3f48 <prvAddNewTaskToReadyList+0xc0>)
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	3301      	adds	r3, #1
    3e9a:	4a2b      	ldr	r2, [pc, #172]	; (3f48 <prvAddNewTaskToReadyList+0xc0>)
    3e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    3e9e:	4b2b      	ldr	r3, [pc, #172]	; (3f4c <prvAddNewTaskToReadyList+0xc4>)
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d109      	bne.n	3eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    3ea6:	4a29      	ldr	r2, [pc, #164]	; (3f4c <prvAddNewTaskToReadyList+0xc4>)
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3eac:	4b26      	ldr	r3, [pc, #152]	; (3f48 <prvAddNewTaskToReadyList+0xc0>)
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	2b01      	cmp	r3, #1
    3eb2:	d110      	bne.n	3ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    3eb4:	f000 fb82 	bl	45bc <prvInitialiseTaskLists>
    3eb8:	e00d      	b.n	3ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3eba:	4b25      	ldr	r3, [pc, #148]	; (3f50 <prvAddNewTaskToReadyList+0xc8>)
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d109      	bne.n	3ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3ec2:	4b22      	ldr	r3, [pc, #136]	; (3f4c <prvAddNewTaskToReadyList+0xc4>)
    3ec4:	681b      	ldr	r3, [r3, #0]
    3ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ecc:	429a      	cmp	r2, r3
    3ece:	d802      	bhi.n	3ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    3ed0:	4a1e      	ldr	r2, [pc, #120]	; (3f4c <prvAddNewTaskToReadyList+0xc4>)
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    3ed6:	4b1f      	ldr	r3, [pc, #124]	; (3f54 <prvAddNewTaskToReadyList+0xcc>)
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	3301      	adds	r3, #1
    3edc:	4a1d      	ldr	r2, [pc, #116]	; (3f54 <prvAddNewTaskToReadyList+0xcc>)
    3ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    3ee0:	4b1c      	ldr	r3, [pc, #112]	; (3f54 <prvAddNewTaskToReadyList+0xcc>)
    3ee2:	681a      	ldr	r2, [r3, #0]
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3eec:	2201      	movs	r2, #1
    3eee:	409a      	lsls	r2, r3
    3ef0:	4b19      	ldr	r3, [pc, #100]	; (3f58 <prvAddNewTaskToReadyList+0xd0>)
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	4313      	orrs	r3, r2
    3ef6:	4a18      	ldr	r2, [pc, #96]	; (3f58 <prvAddNewTaskToReadyList+0xd0>)
    3ef8:	6013      	str	r3, [r2, #0]
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3efe:	4613      	mov	r3, r2
    3f00:	009b      	lsls	r3, r3, #2
    3f02:	4413      	add	r3, r2
    3f04:	009b      	lsls	r3, r3, #2
    3f06:	4a15      	ldr	r2, [pc, #84]	; (3f5c <prvAddNewTaskToReadyList+0xd4>)
    3f08:	441a      	add	r2, r3
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	3304      	adds	r3, #4
    3f0e:	4619      	mov	r1, r3
    3f10:	4610      	mov	r0, r2
    3f12:	f7ff fe42 	bl	3b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    3f16:	f003 f867 	bl	6fe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    3f1a:	4b0d      	ldr	r3, [pc, #52]	; (3f50 <prvAddNewTaskToReadyList+0xc8>)
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d00e      	beq.n	3f40 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3f22:	4b0a      	ldr	r3, [pc, #40]	; (3f4c <prvAddNewTaskToReadyList+0xc4>)
    3f24:	681b      	ldr	r3, [r3, #0]
    3f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f2c:	429a      	cmp	r2, r3
    3f2e:	d207      	bcs.n	3f40 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
    3f30:	4b0b      	ldr	r3, [pc, #44]	; (3f60 <prvAddNewTaskToReadyList+0xd8>)
    3f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f36:	601a      	str	r2, [r3, #0]
    3f38:	f3bf 8f4f 	dsb	sy
    3f3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3f40:	bf00      	nop
    3f42:	3708      	adds	r7, #8
    3f44:	46bd      	mov	sp, r7
    3f46:	bd80      	pop	{r7, pc}
    3f48:	10000384 	.word	0x10000384
    3f4c:	100002ac 	.word	0x100002ac
    3f50:	10000390 	.word	0x10000390
    3f54:	100003a0 	.word	0x100003a0
    3f58:	1000038c 	.word	0x1000038c
    3f5c:	100002b0 	.word	0x100002b0
    3f60:	e000ed04 	.word	0xe000ed04

00003f64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    3f6c:	2300      	movs	r3, #0
    3f6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d008      	beq.n	3f88 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3f76:	f000 f86f 	bl	4058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3f7a:	2100      	movs	r1, #0
    3f7c:	6878      	ldr	r0, [r7, #4]
    3f7e:	f000 fc4f 	bl	4820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3f82:	f000 f877 	bl	4074 <xTaskResumeAll>
    3f86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3f88:	68fb      	ldr	r3, [r7, #12]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d107      	bne.n	3f9e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    3f8e:	4b06      	ldr	r3, [pc, #24]	; (3fa8 <vTaskDelay+0x44>)
    3f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f94:	601a      	str	r2, [r3, #0]
    3f96:	f3bf 8f4f 	dsb	sy
    3f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3f9e:	bf00      	nop
    3fa0:	3710      	adds	r7, #16
    3fa2:	46bd      	mov	sp, r7
    3fa4:	bd80      	pop	{r7, pc}
    3fa6:	bf00      	nop
    3fa8:	e000ed04 	.word	0xe000ed04

00003fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b08a      	sub	sp, #40	; 0x28
    3fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    3fb2:	2300      	movs	r3, #0
    3fb4:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    3fb6:	2300      	movs	r3, #0
    3fb8:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    3fba:	1d3a      	adds	r2, r7, #4
    3fbc:	f107 0108 	add.w	r1, r7, #8
    3fc0:	f107 030c 	add.w	r3, r7, #12
    3fc4:	4618      	mov	r0, r3
    3fc6:	f003 f895 	bl	70f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    3fca:	6879      	ldr	r1, [r7, #4]
    3fcc:	68bb      	ldr	r3, [r7, #8]
    3fce:	68fa      	ldr	r2, [r7, #12]
    3fd0:	9202      	str	r2, [sp, #8]
    3fd2:	9301      	str	r3, [sp, #4]
    3fd4:	2300      	movs	r3, #0
    3fd6:	9300      	str	r3, [sp, #0]
    3fd8:	2300      	movs	r3, #0
    3fda:	460a      	mov	r2, r1
    3fdc:	4918      	ldr	r1, [pc, #96]	; (4040 <vTaskStartScheduler+0x94>)
    3fde:	4819      	ldr	r0, [pc, #100]	; (4044 <vTaskStartScheduler+0x98>)
    3fe0:	f7ff fe62 	bl	3ca8 <xTaskCreateStatic>
    3fe4:	4602      	mov	r2, r0
    3fe6:	4b18      	ldr	r3, [pc, #96]	; (4048 <vTaskStartScheduler+0x9c>)
    3fe8:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    3fea:	4b17      	ldr	r3, [pc, #92]	; (4048 <vTaskStartScheduler+0x9c>)
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d002      	beq.n	3ff8 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
    3ff2:	2301      	movs	r3, #1
    3ff4:	617b      	str	r3, [r7, #20]
    3ff6:	e001      	b.n	3ffc <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    3ff8:	2300      	movs	r3, #0
    3ffa:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    3ffc:	697b      	ldr	r3, [r7, #20]
    3ffe:	2b01      	cmp	r3, #1
    4000:	d102      	bne.n	4008 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
    4002:	f003 f8b7 	bl	7174 <xTimerCreateTimerTask>
    4006:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    4008:	697b      	ldr	r3, [r7, #20]
    400a:	2b01      	cmp	r3, #1
    400c:	d114      	bne.n	4038 <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    400e:	f04f 0328 	mov.w	r3, #40	; 0x28
    4012:	f383 8811 	msr	BASEPRI, r3
    4016:	f3bf 8f6f 	isb	sy
    401a:	f3bf 8f4f 	dsb	sy
    401e:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    4020:	4b0a      	ldr	r3, [pc, #40]	; (404c <vTaskStartScheduler+0xa0>)
    4022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    4028:	4b09      	ldr	r3, [pc, #36]	; (4050 <vTaskStartScheduler+0xa4>)
    402a:	2201      	movs	r2, #1
    402c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    402e:	4b09      	ldr	r3, [pc, #36]	; (4054 <vTaskStartScheduler+0xa8>)
    4030:	2200      	movs	r2, #0
    4032:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4034:	f002 ff94 	bl	6f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    4038:	bf00      	nop
    403a:	3718      	adds	r7, #24
    403c:	46bd      	mov	sp, r7
    403e:	bd80      	pop	{r7, pc}
    4040:	0000a3e4 	.word	0x0000a3e4
    4044:	000045ad 	.word	0x000045ad
    4048:	100003a8 	.word	0x100003a8
    404c:	100003a4 	.word	0x100003a4
    4050:	10000390 	.word	0x10000390
    4054:	10000388 	.word	0x10000388

00004058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4058:	b480      	push	{r7}
    405a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    405c:	4b04      	ldr	r3, [pc, #16]	; (4070 <vTaskSuspendAll+0x18>)
    405e:	681b      	ldr	r3, [r3, #0]
    4060:	3301      	adds	r3, #1
    4062:	4a03      	ldr	r2, [pc, #12]	; (4070 <vTaskSuspendAll+0x18>)
    4064:	6013      	str	r3, [r2, #0]
}
    4066:	bf00      	nop
    4068:	46bd      	mov	sp, r7
    406a:	f85d 7b04 	ldr.w	r7, [sp], #4
    406e:	4770      	bx	lr
    4070:	100003ac 	.word	0x100003ac

00004074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    4074:	b580      	push	{r7, lr}
    4076:	b084      	sub	sp, #16
    4078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    407a:	2300      	movs	r3, #0
    407c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    407e:	2300      	movs	r3, #0
    4080:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4082:	f002 ff97 	bl	6fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4086:	4b39      	ldr	r3, [pc, #228]	; (416c <xTaskResumeAll+0xf8>)
    4088:	681b      	ldr	r3, [r3, #0]
    408a:	3b01      	subs	r3, #1
    408c:	4a37      	ldr	r2, [pc, #220]	; (416c <xTaskResumeAll+0xf8>)
    408e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4090:	4b36      	ldr	r3, [pc, #216]	; (416c <xTaskResumeAll+0xf8>)
    4092:	681b      	ldr	r3, [r3, #0]
    4094:	2b00      	cmp	r3, #0
    4096:	d161      	bne.n	415c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4098:	4b35      	ldr	r3, [pc, #212]	; (4170 <xTaskResumeAll+0xfc>)
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	2b00      	cmp	r3, #0
    409e:	d05d      	beq.n	415c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    40a0:	e02e      	b.n	4100 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    40a2:	4b34      	ldr	r3, [pc, #208]	; (4174 <xTaskResumeAll+0x100>)
    40a4:	68db      	ldr	r3, [r3, #12]
    40a6:	68db      	ldr	r3, [r3, #12]
    40a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    40aa:	68fb      	ldr	r3, [r7, #12]
    40ac:	3318      	adds	r3, #24
    40ae:	4618      	mov	r0, r3
    40b0:	f7ff fdd0 	bl	3c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	3304      	adds	r3, #4
    40b8:	4618      	mov	r0, r3
    40ba:	f7ff fdcb 	bl	3c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    40be:	68fb      	ldr	r3, [r7, #12]
    40c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40c2:	2201      	movs	r2, #1
    40c4:	409a      	lsls	r2, r3
    40c6:	4b2c      	ldr	r3, [pc, #176]	; (4178 <xTaskResumeAll+0x104>)
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	4313      	orrs	r3, r2
    40cc:	4a2a      	ldr	r2, [pc, #168]	; (4178 <xTaskResumeAll+0x104>)
    40ce:	6013      	str	r3, [r2, #0]
    40d0:	68fb      	ldr	r3, [r7, #12]
    40d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    40d4:	4613      	mov	r3, r2
    40d6:	009b      	lsls	r3, r3, #2
    40d8:	4413      	add	r3, r2
    40da:	009b      	lsls	r3, r3, #2
    40dc:	4a27      	ldr	r2, [pc, #156]	; (417c <xTaskResumeAll+0x108>)
    40de:	441a      	add	r2, r3
    40e0:	68fb      	ldr	r3, [r7, #12]
    40e2:	3304      	adds	r3, #4
    40e4:	4619      	mov	r1, r3
    40e6:	4610      	mov	r0, r2
    40e8:	f7ff fd57 	bl	3b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    40ec:	68fb      	ldr	r3, [r7, #12]
    40ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    40f0:	4b23      	ldr	r3, [pc, #140]	; (4180 <xTaskResumeAll+0x10c>)
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40f6:	429a      	cmp	r2, r3
    40f8:	d302      	bcc.n	4100 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    40fa:	4b22      	ldr	r3, [pc, #136]	; (4184 <xTaskResumeAll+0x110>)
    40fc:	2201      	movs	r2, #1
    40fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4100:	4b1c      	ldr	r3, [pc, #112]	; (4174 <xTaskResumeAll+0x100>)
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	2b00      	cmp	r3, #0
    4106:	d1cc      	bne.n	40a2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    4108:	68fb      	ldr	r3, [r7, #12]
    410a:	2b00      	cmp	r3, #0
    410c:	d001      	beq.n	4112 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    410e:	f000 fadf 	bl	46d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4112:	4b1d      	ldr	r3, [pc, #116]	; (4188 <xTaskResumeAll+0x114>)
    4114:	681b      	ldr	r3, [r3, #0]
    4116:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	2b00      	cmp	r3, #0
    411c:	d010      	beq.n	4140 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    411e:	f000 f847 	bl	41b0 <xTaskIncrementTick>
    4122:	4603      	mov	r3, r0
    4124:	2b00      	cmp	r3, #0
    4126:	d002      	beq.n	412e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    4128:	4b16      	ldr	r3, [pc, #88]	; (4184 <xTaskResumeAll+0x110>)
    412a:	2201      	movs	r2, #1
    412c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	3b01      	subs	r3, #1
    4132:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	2b00      	cmp	r3, #0
    4138:	d1f1      	bne.n	411e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    413a:	4b13      	ldr	r3, [pc, #76]	; (4188 <xTaskResumeAll+0x114>)
    413c:	2200      	movs	r2, #0
    413e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    4140:	4b10      	ldr	r3, [pc, #64]	; (4184 <xTaskResumeAll+0x110>)
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	2b00      	cmp	r3, #0
    4146:	d009      	beq.n	415c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    4148:	2301      	movs	r3, #1
    414a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    414c:	4b0f      	ldr	r3, [pc, #60]	; (418c <xTaskResumeAll+0x118>)
    414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4152:	601a      	str	r2, [r3, #0]
    4154:	f3bf 8f4f 	dsb	sy
    4158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    415c:	f002 ff44 	bl	6fe8 <vPortExitCritical>

	return xAlreadyYielded;
    4160:	68bb      	ldr	r3, [r7, #8]
}
    4162:	4618      	mov	r0, r3
    4164:	3710      	adds	r7, #16
    4166:	46bd      	mov	sp, r7
    4168:	bd80      	pop	{r7, pc}
    416a:	bf00      	nop
    416c:	100003ac 	.word	0x100003ac
    4170:	10000384 	.word	0x10000384
    4174:	10000344 	.word	0x10000344
    4178:	1000038c 	.word	0x1000038c
    417c:	100002b0 	.word	0x100002b0
    4180:	100002ac 	.word	0x100002ac
    4184:	10000398 	.word	0x10000398
    4188:	10000394 	.word	0x10000394
    418c:	e000ed04 	.word	0xe000ed04

00004190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    4190:	b480      	push	{r7}
    4192:	b083      	sub	sp, #12
    4194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    4196:	4b05      	ldr	r3, [pc, #20]	; (41ac <xTaskGetTickCount+0x1c>)
    4198:	681b      	ldr	r3, [r3, #0]
    419a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    419c:	687b      	ldr	r3, [r7, #4]
}
    419e:	4618      	mov	r0, r3
    41a0:	370c      	adds	r7, #12
    41a2:	46bd      	mov	sp, r7
    41a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    41a8:	4770      	bx	lr
    41aa:	bf00      	nop
    41ac:	10000388 	.word	0x10000388

000041b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    41b0:	b580      	push	{r7, lr}
    41b2:	b086      	sub	sp, #24
    41b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    41b6:	2300      	movs	r3, #0
    41b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    41ba:	4b48      	ldr	r3, [pc, #288]	; (42dc <xTaskIncrementTick+0x12c>)
    41bc:	681b      	ldr	r3, [r3, #0]
    41be:	2b00      	cmp	r3, #0
    41c0:	d17c      	bne.n	42bc <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    41c2:	4b47      	ldr	r3, [pc, #284]	; (42e0 <xTaskIncrementTick+0x130>)
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	3301      	adds	r3, #1
    41c8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    41ca:	4a45      	ldr	r2, [pc, #276]	; (42e0 <xTaskIncrementTick+0x130>)
    41cc:	693b      	ldr	r3, [r7, #16]
    41ce:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    41d0:	693b      	ldr	r3, [r7, #16]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d110      	bne.n	41f8 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
    41d6:	4b43      	ldr	r3, [pc, #268]	; (42e4 <xTaskIncrementTick+0x134>)
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	60fb      	str	r3, [r7, #12]
    41dc:	4b42      	ldr	r3, [pc, #264]	; (42e8 <xTaskIncrementTick+0x138>)
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	4a40      	ldr	r2, [pc, #256]	; (42e4 <xTaskIncrementTick+0x134>)
    41e2:	6013      	str	r3, [r2, #0]
    41e4:	4a40      	ldr	r2, [pc, #256]	; (42e8 <xTaskIncrementTick+0x138>)
    41e6:	68fb      	ldr	r3, [r7, #12]
    41e8:	6013      	str	r3, [r2, #0]
    41ea:	4b40      	ldr	r3, [pc, #256]	; (42ec <xTaskIncrementTick+0x13c>)
    41ec:	681b      	ldr	r3, [r3, #0]
    41ee:	3301      	adds	r3, #1
    41f0:	4a3e      	ldr	r2, [pc, #248]	; (42ec <xTaskIncrementTick+0x13c>)
    41f2:	6013      	str	r3, [r2, #0]
    41f4:	f000 fa6c 	bl	46d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    41f8:	4b3d      	ldr	r3, [pc, #244]	; (42f0 <xTaskIncrementTick+0x140>)
    41fa:	681b      	ldr	r3, [r3, #0]
    41fc:	693a      	ldr	r2, [r7, #16]
    41fe:	429a      	cmp	r2, r3
    4200:	d34d      	bcc.n	429e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4202:	4b38      	ldr	r3, [pc, #224]	; (42e4 <xTaskIncrementTick+0x134>)
    4204:	681b      	ldr	r3, [r3, #0]
    4206:	681b      	ldr	r3, [r3, #0]
    4208:	2b00      	cmp	r3, #0
    420a:	d101      	bne.n	4210 <xTaskIncrementTick+0x60>
    420c:	2301      	movs	r3, #1
    420e:	e000      	b.n	4212 <xTaskIncrementTick+0x62>
    4210:	2300      	movs	r3, #0
    4212:	2b00      	cmp	r3, #0
    4214:	d004      	beq.n	4220 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4216:	4b36      	ldr	r3, [pc, #216]	; (42f0 <xTaskIncrementTick+0x140>)
    4218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    421c:	601a      	str	r2, [r3, #0]
					break;
    421e:	e03e      	b.n	429e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4220:	4b30      	ldr	r3, [pc, #192]	; (42e4 <xTaskIncrementTick+0x134>)
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	68db      	ldr	r3, [r3, #12]
    4226:	68db      	ldr	r3, [r3, #12]
    4228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    422a:	68bb      	ldr	r3, [r7, #8]
    422c:	685b      	ldr	r3, [r3, #4]
    422e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    4230:	693a      	ldr	r2, [r7, #16]
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	429a      	cmp	r2, r3
    4236:	d203      	bcs.n	4240 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    4238:	4a2d      	ldr	r2, [pc, #180]	; (42f0 <xTaskIncrementTick+0x140>)
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	6013      	str	r3, [r2, #0]
						break;
    423e:	e02e      	b.n	429e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4240:	68bb      	ldr	r3, [r7, #8]
    4242:	3304      	adds	r3, #4
    4244:	4618      	mov	r0, r3
    4246:	f7ff fd05 	bl	3c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    424a:	68bb      	ldr	r3, [r7, #8]
    424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    424e:	2b00      	cmp	r3, #0
    4250:	d004      	beq.n	425c <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4252:	68bb      	ldr	r3, [r7, #8]
    4254:	3318      	adds	r3, #24
    4256:	4618      	mov	r0, r3
    4258:	f7ff fcfc 	bl	3c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    425c:	68bb      	ldr	r3, [r7, #8]
    425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4260:	2201      	movs	r2, #1
    4262:	409a      	lsls	r2, r3
    4264:	4b23      	ldr	r3, [pc, #140]	; (42f4 <xTaskIncrementTick+0x144>)
    4266:	681b      	ldr	r3, [r3, #0]
    4268:	4313      	orrs	r3, r2
    426a:	4a22      	ldr	r2, [pc, #136]	; (42f4 <xTaskIncrementTick+0x144>)
    426c:	6013      	str	r3, [r2, #0]
    426e:	68bb      	ldr	r3, [r7, #8]
    4270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4272:	4613      	mov	r3, r2
    4274:	009b      	lsls	r3, r3, #2
    4276:	4413      	add	r3, r2
    4278:	009b      	lsls	r3, r3, #2
    427a:	4a1f      	ldr	r2, [pc, #124]	; (42f8 <xTaskIncrementTick+0x148>)
    427c:	441a      	add	r2, r3
    427e:	68bb      	ldr	r3, [r7, #8]
    4280:	3304      	adds	r3, #4
    4282:	4619      	mov	r1, r3
    4284:	4610      	mov	r0, r2
    4286:	f7ff fc88 	bl	3b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    428a:	68bb      	ldr	r3, [r7, #8]
    428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    428e:	4b1b      	ldr	r3, [pc, #108]	; (42fc <xTaskIncrementTick+0x14c>)
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4294:	429a      	cmp	r2, r3
    4296:	d3b4      	bcc.n	4202 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
    4298:	2301      	movs	r3, #1
    429a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    429c:	e7b1      	b.n	4202 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    429e:	4b17      	ldr	r3, [pc, #92]	; (42fc <xTaskIncrementTick+0x14c>)
    42a0:	681b      	ldr	r3, [r3, #0]
    42a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42a4:	4914      	ldr	r1, [pc, #80]	; (42f8 <xTaskIncrementTick+0x148>)
    42a6:	4613      	mov	r3, r2
    42a8:	009b      	lsls	r3, r3, #2
    42aa:	4413      	add	r3, r2
    42ac:	009b      	lsls	r3, r3, #2
    42ae:	440b      	add	r3, r1
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	2b01      	cmp	r3, #1
    42b4:	d907      	bls.n	42c6 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
    42b6:	2301      	movs	r3, #1
    42b8:	617b      	str	r3, [r7, #20]
    42ba:	e004      	b.n	42c6 <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    42bc:	4b10      	ldr	r3, [pc, #64]	; (4300 <xTaskIncrementTick+0x150>)
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	3301      	adds	r3, #1
    42c2:	4a0f      	ldr	r2, [pc, #60]	; (4300 <xTaskIncrementTick+0x150>)
    42c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    42c6:	4b0f      	ldr	r3, [pc, #60]	; (4304 <xTaskIncrementTick+0x154>)
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d001      	beq.n	42d2 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
    42ce:	2301      	movs	r3, #1
    42d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    42d2:	697b      	ldr	r3, [r7, #20]
}
    42d4:	4618      	mov	r0, r3
    42d6:	3718      	adds	r7, #24
    42d8:	46bd      	mov	sp, r7
    42da:	bd80      	pop	{r7, pc}
    42dc:	100003ac 	.word	0x100003ac
    42e0:	10000388 	.word	0x10000388
    42e4:	1000033c 	.word	0x1000033c
    42e8:	10000340 	.word	0x10000340
    42ec:	1000039c 	.word	0x1000039c
    42f0:	100003a4 	.word	0x100003a4
    42f4:	1000038c 	.word	0x1000038c
    42f8:	100002b0 	.word	0x100002b0
    42fc:	100002ac 	.word	0x100002ac
    4300:	10000394 	.word	0x10000394
    4304:	10000398 	.word	0x10000398

00004308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4308:	b580      	push	{r7, lr}
    430a:	b084      	sub	sp, #16
    430c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    430e:	4b28      	ldr	r3, [pc, #160]	; (43b0 <vTaskSwitchContext+0xa8>)
    4310:	681b      	ldr	r3, [r3, #0]
    4312:	2b00      	cmp	r3, #0
    4314:	d003      	beq.n	431e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    4316:	4b27      	ldr	r3, [pc, #156]	; (43b4 <vTaskSwitchContext+0xac>)
    4318:	2201      	movs	r2, #1
    431a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    431c:	e043      	b.n	43a6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    431e:	4b25      	ldr	r3, [pc, #148]	; (43b4 <vTaskSwitchContext+0xac>)
    4320:	2200      	movs	r2, #0
    4322:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    4324:	f002 fc6a 	bl	6bfc <ThreadRuntimeCounter>
    4328:	4602      	mov	r2, r0
    432a:	4b23      	ldr	r3, [pc, #140]	; (43b8 <vTaskSwitchContext+0xb0>)
    432c:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    432e:	4b22      	ldr	r3, [pc, #136]	; (43b8 <vTaskSwitchContext+0xb0>)
    4330:	681a      	ldr	r2, [r3, #0]
    4332:	4b22      	ldr	r3, [pc, #136]	; (43bc <vTaskSwitchContext+0xb4>)
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	429a      	cmp	r2, r3
    4338:	d909      	bls.n	434e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    433a:	4b21      	ldr	r3, [pc, #132]	; (43c0 <vTaskSwitchContext+0xb8>)
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	6d59      	ldr	r1, [r3, #84]	; 0x54
    4340:	4a1d      	ldr	r2, [pc, #116]	; (43b8 <vTaskSwitchContext+0xb0>)
    4342:	6810      	ldr	r0, [r2, #0]
    4344:	4a1d      	ldr	r2, [pc, #116]	; (43bc <vTaskSwitchContext+0xb4>)
    4346:	6812      	ldr	r2, [r2, #0]
    4348:	1a82      	subs	r2, r0, r2
    434a:	440a      	add	r2, r1
    434c:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    434e:	4b1a      	ldr	r3, [pc, #104]	; (43b8 <vTaskSwitchContext+0xb0>)
    4350:	681b      	ldr	r3, [r3, #0]
    4352:	4a1a      	ldr	r2, [pc, #104]	; (43bc <vTaskSwitchContext+0xb4>)
    4354:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4356:	4b1b      	ldr	r3, [pc, #108]	; (43c4 <vTaskSwitchContext+0xbc>)
    4358:	681b      	ldr	r3, [r3, #0]
    435a:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	fab3 f383 	clz	r3, r3
    4362:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    4364:	78fb      	ldrb	r3, [r7, #3]
    4366:	f1c3 031f 	rsb	r3, r3, #31
    436a:	60fb      	str	r3, [r7, #12]
    436c:	68fa      	ldr	r2, [r7, #12]
    436e:	4613      	mov	r3, r2
    4370:	009b      	lsls	r3, r3, #2
    4372:	4413      	add	r3, r2
    4374:	009b      	lsls	r3, r3, #2
    4376:	4a14      	ldr	r2, [pc, #80]	; (43c8 <vTaskSwitchContext+0xc0>)
    4378:	4413      	add	r3, r2
    437a:	60bb      	str	r3, [r7, #8]
    437c:	68bb      	ldr	r3, [r7, #8]
    437e:	685b      	ldr	r3, [r3, #4]
    4380:	685a      	ldr	r2, [r3, #4]
    4382:	68bb      	ldr	r3, [r7, #8]
    4384:	605a      	str	r2, [r3, #4]
    4386:	68bb      	ldr	r3, [r7, #8]
    4388:	685a      	ldr	r2, [r3, #4]
    438a:	68bb      	ldr	r3, [r7, #8]
    438c:	3308      	adds	r3, #8
    438e:	429a      	cmp	r2, r3
    4390:	d104      	bne.n	439c <vTaskSwitchContext+0x94>
    4392:	68bb      	ldr	r3, [r7, #8]
    4394:	685b      	ldr	r3, [r3, #4]
    4396:	685a      	ldr	r2, [r3, #4]
    4398:	68bb      	ldr	r3, [r7, #8]
    439a:	605a      	str	r2, [r3, #4]
    439c:	68bb      	ldr	r3, [r7, #8]
    439e:	685b      	ldr	r3, [r3, #4]
    43a0:	68db      	ldr	r3, [r3, #12]
    43a2:	4a07      	ldr	r2, [pc, #28]	; (43c0 <vTaskSwitchContext+0xb8>)
    43a4:	6013      	str	r3, [r2, #0]
}
    43a6:	bf00      	nop
    43a8:	3710      	adds	r7, #16
    43aa:	46bd      	mov	sp, r7
    43ac:	bd80      	pop	{r7, pc}
    43ae:	bf00      	nop
    43b0:	100003ac 	.word	0x100003ac
    43b4:	10000398 	.word	0x10000398
    43b8:	100003b4 	.word	0x100003b4
    43bc:	100003b0 	.word	0x100003b0
    43c0:	100002ac 	.word	0x100002ac
    43c4:	1000038c 	.word	0x1000038c
    43c8:	100002b0 	.word	0x100002b0

000043cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b082      	sub	sp, #8
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
    43d4:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    43d6:	4b07      	ldr	r3, [pc, #28]	; (43f4 <vTaskPlaceOnEventList+0x28>)
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	3318      	adds	r3, #24
    43dc:	4619      	mov	r1, r3
    43de:	6878      	ldr	r0, [r7, #4]
    43e0:	f7ff fbff 	bl	3be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    43e4:	2101      	movs	r1, #1
    43e6:	6838      	ldr	r0, [r7, #0]
    43e8:	f000 fa1a 	bl	4820 <prvAddCurrentTaskToDelayedList>
}
    43ec:	bf00      	nop
    43ee:	3708      	adds	r7, #8
    43f0:	46bd      	mov	sp, r7
    43f2:	bd80      	pop	{r7, pc}
    43f4:	100002ac 	.word	0x100002ac

000043f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    43f8:	b580      	push	{r7, lr}
    43fa:	b084      	sub	sp, #16
    43fc:	af00      	add	r7, sp, #0
    43fe:	60f8      	str	r0, [r7, #12]
    4400:	60b9      	str	r1, [r7, #8]
    4402:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4404:	4b0a      	ldr	r3, [pc, #40]	; (4430 <vTaskPlaceOnEventListRestricted+0x38>)
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	3318      	adds	r3, #24
    440a:	4619      	mov	r1, r3
    440c:	68f8      	ldr	r0, [r7, #12]
    440e:	f7ff fbc4 	bl	3b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	2b00      	cmp	r3, #0
    4416:	d002      	beq.n	441e <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
    4418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    441c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    441e:	6879      	ldr	r1, [r7, #4]
    4420:	68b8      	ldr	r0, [r7, #8]
    4422:	f000 f9fd 	bl	4820 <prvAddCurrentTaskToDelayedList>
	}
    4426:	bf00      	nop
    4428:	3710      	adds	r7, #16
    442a:	46bd      	mov	sp, r7
    442c:	bd80      	pop	{r7, pc}
    442e:	bf00      	nop
    4430:	100002ac 	.word	0x100002ac

00004434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    4434:	b580      	push	{r7, lr}
    4436:	b084      	sub	sp, #16
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	68db      	ldr	r3, [r3, #12]
    4440:	68db      	ldr	r3, [r3, #12]
    4442:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4444:	68bb      	ldr	r3, [r7, #8]
    4446:	3318      	adds	r3, #24
    4448:	4618      	mov	r0, r3
    444a:	f7ff fc03 	bl	3c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    444e:	4b1d      	ldr	r3, [pc, #116]	; (44c4 <xTaskRemoveFromEventList+0x90>)
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	2b00      	cmp	r3, #0
    4454:	d11c      	bne.n	4490 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    4456:	68bb      	ldr	r3, [r7, #8]
    4458:	3304      	adds	r3, #4
    445a:	4618      	mov	r0, r3
    445c:	f7ff fbfa 	bl	3c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    4460:	68bb      	ldr	r3, [r7, #8]
    4462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4464:	2201      	movs	r2, #1
    4466:	409a      	lsls	r2, r3
    4468:	4b17      	ldr	r3, [pc, #92]	; (44c8 <xTaskRemoveFromEventList+0x94>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	4313      	orrs	r3, r2
    446e:	4a16      	ldr	r2, [pc, #88]	; (44c8 <xTaskRemoveFromEventList+0x94>)
    4470:	6013      	str	r3, [r2, #0]
    4472:	68bb      	ldr	r3, [r7, #8]
    4474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4476:	4613      	mov	r3, r2
    4478:	009b      	lsls	r3, r3, #2
    447a:	4413      	add	r3, r2
    447c:	009b      	lsls	r3, r3, #2
    447e:	4a13      	ldr	r2, [pc, #76]	; (44cc <xTaskRemoveFromEventList+0x98>)
    4480:	441a      	add	r2, r3
    4482:	68bb      	ldr	r3, [r7, #8]
    4484:	3304      	adds	r3, #4
    4486:	4619      	mov	r1, r3
    4488:	4610      	mov	r0, r2
    448a:	f7ff fb86 	bl	3b9a <vListInsertEnd>
    448e:	e005      	b.n	449c <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4490:	68bb      	ldr	r3, [r7, #8]
    4492:	3318      	adds	r3, #24
    4494:	4619      	mov	r1, r3
    4496:	480e      	ldr	r0, [pc, #56]	; (44d0 <xTaskRemoveFromEventList+0x9c>)
    4498:	f7ff fb7f 	bl	3b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    449c:	68bb      	ldr	r3, [r7, #8]
    449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44a0:	4b0c      	ldr	r3, [pc, #48]	; (44d4 <xTaskRemoveFromEventList+0xa0>)
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44a6:	429a      	cmp	r2, r3
    44a8:	d905      	bls.n	44b6 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    44aa:	2301      	movs	r3, #1
    44ac:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    44ae:	4b0a      	ldr	r3, [pc, #40]	; (44d8 <xTaskRemoveFromEventList+0xa4>)
    44b0:	2201      	movs	r2, #1
    44b2:	601a      	str	r2, [r3, #0]
    44b4:	e001      	b.n	44ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    44b6:	2300      	movs	r3, #0
    44b8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    44ba:	68fb      	ldr	r3, [r7, #12]
}
    44bc:	4618      	mov	r0, r3
    44be:	3710      	adds	r7, #16
    44c0:	46bd      	mov	sp, r7
    44c2:	bd80      	pop	{r7, pc}
    44c4:	100003ac 	.word	0x100003ac
    44c8:	1000038c 	.word	0x1000038c
    44cc:	100002b0 	.word	0x100002b0
    44d0:	10000344 	.word	0x10000344
    44d4:	100002ac 	.word	0x100002ac
    44d8:	10000398 	.word	0x10000398

000044dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    44dc:	b480      	push	{r7}
    44de:	b083      	sub	sp, #12
    44e0:	af00      	add	r7, sp, #0
    44e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    44e4:	4b06      	ldr	r3, [pc, #24]	; (4500 <vTaskInternalSetTimeOutState+0x24>)
    44e6:	681a      	ldr	r2, [r3, #0]
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    44ec:	4b05      	ldr	r3, [pc, #20]	; (4504 <vTaskInternalSetTimeOutState+0x28>)
    44ee:	681a      	ldr	r2, [r3, #0]
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	605a      	str	r2, [r3, #4]
}
    44f4:	bf00      	nop
    44f6:	370c      	adds	r7, #12
    44f8:	46bd      	mov	sp, r7
    44fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    44fe:	4770      	bx	lr
    4500:	1000039c 	.word	0x1000039c
    4504:	10000388 	.word	0x10000388

00004508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    4508:	b580      	push	{r7, lr}
    450a:	b086      	sub	sp, #24
    450c:	af00      	add	r7, sp, #0
    450e:	6078      	str	r0, [r7, #4]
    4510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4512:	f002 fd4f 	bl	6fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    4516:	4b1d      	ldr	r3, [pc, #116]	; (458c <xTaskCheckForTimeOut+0x84>)
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	685b      	ldr	r3, [r3, #4]
    4520:	693a      	ldr	r2, [r7, #16]
    4522:	1ad3      	subs	r3, r2, r3
    4524:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    4526:	683b      	ldr	r3, [r7, #0]
    4528:	681b      	ldr	r3, [r3, #0]
    452a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    452e:	d102      	bne.n	4536 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    4530:	2300      	movs	r3, #0
    4532:	617b      	str	r3, [r7, #20]
    4534:	e023      	b.n	457e <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	681a      	ldr	r2, [r3, #0]
    453a:	4b15      	ldr	r3, [pc, #84]	; (4590 <xTaskCheckForTimeOut+0x88>)
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	429a      	cmp	r2, r3
    4540:	d007      	beq.n	4552 <xTaskCheckForTimeOut+0x4a>
    4542:	687b      	ldr	r3, [r7, #4]
    4544:	685b      	ldr	r3, [r3, #4]
    4546:	693a      	ldr	r2, [r7, #16]
    4548:	429a      	cmp	r2, r3
    454a:	d302      	bcc.n	4552 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    454c:	2301      	movs	r3, #1
    454e:	617b      	str	r3, [r7, #20]
    4550:	e015      	b.n	457e <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    4552:	683b      	ldr	r3, [r7, #0]
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	68fa      	ldr	r2, [r7, #12]
    4558:	429a      	cmp	r2, r3
    455a:	d20b      	bcs.n	4574 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    455c:	683b      	ldr	r3, [r7, #0]
    455e:	681a      	ldr	r2, [r3, #0]
    4560:	68fb      	ldr	r3, [r7, #12]
    4562:	1ad2      	subs	r2, r2, r3
    4564:	683b      	ldr	r3, [r7, #0]
    4566:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    4568:	6878      	ldr	r0, [r7, #4]
    456a:	f7ff ffb7 	bl	44dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    456e:	2300      	movs	r3, #0
    4570:	617b      	str	r3, [r7, #20]
    4572:	e004      	b.n	457e <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    4574:	683b      	ldr	r3, [r7, #0]
    4576:	2200      	movs	r2, #0
    4578:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    457a:	2301      	movs	r3, #1
    457c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    457e:	f002 fd33 	bl	6fe8 <vPortExitCritical>

	return xReturn;
    4582:	697b      	ldr	r3, [r7, #20]
}
    4584:	4618      	mov	r0, r3
    4586:	3718      	adds	r7, #24
    4588:	46bd      	mov	sp, r7
    458a:	bd80      	pop	{r7, pc}
    458c:	10000388 	.word	0x10000388
    4590:	1000039c 	.word	0x1000039c

00004594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4594:	b480      	push	{r7}
    4596:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    4598:	4b03      	ldr	r3, [pc, #12]	; (45a8 <vTaskMissedYield+0x14>)
    459a:	2201      	movs	r2, #1
    459c:	601a      	str	r2, [r3, #0]
}
    459e:	bf00      	nop
    45a0:	46bd      	mov	sp, r7
    45a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a6:	4770      	bx	lr
    45a8:	10000398 	.word	0x10000398

000045ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    45b4:	f000 f842 	bl	463c <prvCheckTasksWaitingTermination>
    45b8:	e7fc      	b.n	45b4 <prvIdleTask+0x8>
    45ba:	Address 0x00000000000045ba is out of bounds.


000045bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    45bc:	b580      	push	{r7, lr}
    45be:	b082      	sub	sp, #8
    45c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    45c2:	2300      	movs	r3, #0
    45c4:	607b      	str	r3, [r7, #4]
    45c6:	e00c      	b.n	45e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    45c8:	687a      	ldr	r2, [r7, #4]
    45ca:	4613      	mov	r3, r2
    45cc:	009b      	lsls	r3, r3, #2
    45ce:	4413      	add	r3, r2
    45d0:	009b      	lsls	r3, r3, #2
    45d2:	4a12      	ldr	r2, [pc, #72]	; (461c <prvInitialiseTaskLists+0x60>)
    45d4:	4413      	add	r3, r2
    45d6:	4618      	mov	r0, r3
    45d8:	f7ff fab2 	bl	3b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	3301      	adds	r3, #1
    45e0:	607b      	str	r3, [r7, #4]
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	2b04      	cmp	r3, #4
    45e6:	d9ef      	bls.n	45c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    45e8:	480d      	ldr	r0, [pc, #52]	; (4620 <prvInitialiseTaskLists+0x64>)
    45ea:	f7ff faa9 	bl	3b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    45ee:	480d      	ldr	r0, [pc, #52]	; (4624 <prvInitialiseTaskLists+0x68>)
    45f0:	f7ff faa6 	bl	3b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    45f4:	480c      	ldr	r0, [pc, #48]	; (4628 <prvInitialiseTaskLists+0x6c>)
    45f6:	f7ff faa3 	bl	3b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    45fa:	480c      	ldr	r0, [pc, #48]	; (462c <prvInitialiseTaskLists+0x70>)
    45fc:	f7ff faa0 	bl	3b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    4600:	480b      	ldr	r0, [pc, #44]	; (4630 <prvInitialiseTaskLists+0x74>)
    4602:	f7ff fa9d 	bl	3b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4606:	4b0b      	ldr	r3, [pc, #44]	; (4634 <prvInitialiseTaskLists+0x78>)
    4608:	4a05      	ldr	r2, [pc, #20]	; (4620 <prvInitialiseTaskLists+0x64>)
    460a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    460c:	4b0a      	ldr	r3, [pc, #40]	; (4638 <prvInitialiseTaskLists+0x7c>)
    460e:	4a05      	ldr	r2, [pc, #20]	; (4624 <prvInitialiseTaskLists+0x68>)
    4610:	601a      	str	r2, [r3, #0]
}
    4612:	bf00      	nop
    4614:	3708      	adds	r7, #8
    4616:	46bd      	mov	sp, r7
    4618:	bd80      	pop	{r7, pc}
    461a:	bf00      	nop
    461c:	100002b0 	.word	0x100002b0
    4620:	10000314 	.word	0x10000314
    4624:	10000328 	.word	0x10000328
    4628:	10000344 	.word	0x10000344
    462c:	10000358 	.word	0x10000358
    4630:	10000370 	.word	0x10000370
    4634:	1000033c 	.word	0x1000033c
    4638:	10000340 	.word	0x10000340

0000463c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    463c:	b580      	push	{r7, lr}
    463e:	b082      	sub	sp, #8
    4640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4642:	e019      	b.n	4678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    4644:	f002 fcb6 	bl	6fb4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    4648:	4b0f      	ldr	r3, [pc, #60]	; (4688 <prvCheckTasksWaitingTermination+0x4c>)
    464a:	68db      	ldr	r3, [r3, #12]
    464c:	68db      	ldr	r3, [r3, #12]
    464e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4650:	687b      	ldr	r3, [r7, #4]
    4652:	3304      	adds	r3, #4
    4654:	4618      	mov	r0, r3
    4656:	f7ff fafd 	bl	3c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
    465a:	4b0c      	ldr	r3, [pc, #48]	; (468c <prvCheckTasksWaitingTermination+0x50>)
    465c:	681b      	ldr	r3, [r3, #0]
    465e:	3b01      	subs	r3, #1
    4660:	4a0a      	ldr	r2, [pc, #40]	; (468c <prvCheckTasksWaitingTermination+0x50>)
    4662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    4664:	4b0a      	ldr	r3, [pc, #40]	; (4690 <prvCheckTasksWaitingTermination+0x54>)
    4666:	681b      	ldr	r3, [r3, #0]
    4668:	3b01      	subs	r3, #1
    466a:	4a09      	ldr	r2, [pc, #36]	; (4690 <prvCheckTasksWaitingTermination+0x54>)
    466c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    466e:	f002 fcbb 	bl	6fe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    4672:	6878      	ldr	r0, [r7, #4]
    4674:	f000 f80e 	bl	4694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4678:	4b05      	ldr	r3, [pc, #20]	; (4690 <prvCheckTasksWaitingTermination+0x54>)
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	2b00      	cmp	r3, #0
    467e:	d1e1      	bne.n	4644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    4680:	bf00      	nop
    4682:	3708      	adds	r7, #8
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}
    4688:	10000358 	.word	0x10000358
    468c:	10000384 	.word	0x10000384
    4690:	1000036c 	.word	0x1000036c

00004694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    4694:	b580      	push	{r7, lr}
    4696:	b082      	sub	sp, #8
    4698:	af00      	add	r7, sp, #0
    469a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    46a2:	2b00      	cmp	r3, #0
    46a4:	d108      	bne.n	46b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    46aa:	4618      	mov	r0, r3
    46ac:	f000 fd0e 	bl	50cc <vPortFree>
				vPortFree( pxTCB );
    46b0:	6878      	ldr	r0, [r7, #4]
    46b2:	f000 fd0b 	bl	50cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    46b6:	e007      	b.n	46c8 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    46be:	2b01      	cmp	r3, #1
    46c0:	d102      	bne.n	46c8 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
    46c2:	6878      	ldr	r0, [r7, #4]
    46c4:	f000 fd02 	bl	50cc <vPortFree>
	}
    46c8:	bf00      	nop
    46ca:	3708      	adds	r7, #8
    46cc:	46bd      	mov	sp, r7
    46ce:	bd80      	pop	{r7, pc}

000046d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    46d0:	b480      	push	{r7}
    46d2:	b083      	sub	sp, #12
    46d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    46d6:	4b0f      	ldr	r3, [pc, #60]	; (4714 <prvResetNextTaskUnblockTime+0x44>)
    46d8:	681b      	ldr	r3, [r3, #0]
    46da:	681b      	ldr	r3, [r3, #0]
    46dc:	2b00      	cmp	r3, #0
    46de:	d101      	bne.n	46e4 <prvResetNextTaskUnblockTime+0x14>
    46e0:	2301      	movs	r3, #1
    46e2:	e000      	b.n	46e6 <prvResetNextTaskUnblockTime+0x16>
    46e4:	2300      	movs	r3, #0
    46e6:	2b00      	cmp	r3, #0
    46e8:	d004      	beq.n	46f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    46ea:	4b0b      	ldr	r3, [pc, #44]	; (4718 <prvResetNextTaskUnblockTime+0x48>)
    46ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    46f2:	e008      	b.n	4706 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    46f4:	4b07      	ldr	r3, [pc, #28]	; (4714 <prvResetNextTaskUnblockTime+0x44>)
    46f6:	681b      	ldr	r3, [r3, #0]
    46f8:	68db      	ldr	r3, [r3, #12]
    46fa:	68db      	ldr	r3, [r3, #12]
    46fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	685b      	ldr	r3, [r3, #4]
    4702:	4a05      	ldr	r2, [pc, #20]	; (4718 <prvResetNextTaskUnblockTime+0x48>)
    4704:	6013      	str	r3, [r2, #0]
}
    4706:	bf00      	nop
    4708:	370c      	adds	r7, #12
    470a:	46bd      	mov	sp, r7
    470c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4710:	4770      	bx	lr
    4712:	bf00      	nop
    4714:	1000033c 	.word	0x1000033c
    4718:	100003a4 	.word	0x100003a4

0000471c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    471c:	b480      	push	{r7}
    471e:	b083      	sub	sp, #12
    4720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    4722:	4b0b      	ldr	r3, [pc, #44]	; (4750 <xTaskGetSchedulerState+0x34>)
    4724:	681b      	ldr	r3, [r3, #0]
    4726:	2b00      	cmp	r3, #0
    4728:	d102      	bne.n	4730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    472a:	2301      	movs	r3, #1
    472c:	607b      	str	r3, [r7, #4]
    472e:	e008      	b.n	4742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4730:	4b08      	ldr	r3, [pc, #32]	; (4754 <xTaskGetSchedulerState+0x38>)
    4732:	681b      	ldr	r3, [r3, #0]
    4734:	2b00      	cmp	r3, #0
    4736:	d102      	bne.n	473e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    4738:	2302      	movs	r3, #2
    473a:	607b      	str	r3, [r7, #4]
    473c:	e001      	b.n	4742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    473e:	2300      	movs	r3, #0
    4740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    4742:	687b      	ldr	r3, [r7, #4]
	}
    4744:	4618      	mov	r0, r3
    4746:	370c      	adds	r7, #12
    4748:	46bd      	mov	sp, r7
    474a:	f85d 7b04 	ldr.w	r7, [sp], #4
    474e:	4770      	bx	lr
    4750:	10000390 	.word	0x10000390
    4754:	100003ac 	.word	0x100003ac

00004758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4758:	b580      	push	{r7, lr}
    475a:	b084      	sub	sp, #16
    475c:	af00      	add	r7, sp, #0
    475e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    4764:	2300      	movs	r3, #0
    4766:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2b00      	cmp	r3, #0
    476c:	d04f      	beq.n	480e <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    476e:	68bb      	ldr	r3, [r7, #8]
    4770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4772:	1e5a      	subs	r2, r3, #1
    4774:	68bb      	ldr	r3, [r7, #8]
    4776:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4778:	68bb      	ldr	r3, [r7, #8]
    477a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    477c:	68bb      	ldr	r3, [r7, #8]
    477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4780:	429a      	cmp	r2, r3
    4782:	d044      	beq.n	480e <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4784:	68bb      	ldr	r3, [r7, #8]
    4786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4788:	2b00      	cmp	r3, #0
    478a:	d140      	bne.n	480e <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    478c:	68bb      	ldr	r3, [r7, #8]
    478e:	3304      	adds	r3, #4
    4790:	4618      	mov	r0, r3
    4792:	f7ff fa5f 	bl	3c54 <uxListRemove>
    4796:	4603      	mov	r3, r0
    4798:	2b00      	cmp	r3, #0
    479a:	d115      	bne.n	47c8 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    479c:	68bb      	ldr	r3, [r7, #8]
    479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47a0:	491d      	ldr	r1, [pc, #116]	; (4818 <xTaskPriorityDisinherit+0xc0>)
    47a2:	4613      	mov	r3, r2
    47a4:	009b      	lsls	r3, r3, #2
    47a6:	4413      	add	r3, r2
    47a8:	009b      	lsls	r3, r3, #2
    47aa:	440b      	add	r3, r1
    47ac:	681b      	ldr	r3, [r3, #0]
    47ae:	2b00      	cmp	r3, #0
    47b0:	d10a      	bne.n	47c8 <xTaskPriorityDisinherit+0x70>
    47b2:	68bb      	ldr	r3, [r7, #8]
    47b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47b6:	2201      	movs	r2, #1
    47b8:	fa02 f303 	lsl.w	r3, r2, r3
    47bc:	43da      	mvns	r2, r3
    47be:	4b17      	ldr	r3, [pc, #92]	; (481c <xTaskPriorityDisinherit+0xc4>)
    47c0:	681b      	ldr	r3, [r3, #0]
    47c2:	4013      	ands	r3, r2
    47c4:	4a15      	ldr	r2, [pc, #84]	; (481c <xTaskPriorityDisinherit+0xc4>)
    47c6:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    47c8:	68bb      	ldr	r3, [r7, #8]
    47ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    47cc:	68bb      	ldr	r3, [r7, #8]
    47ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    47d0:	68bb      	ldr	r3, [r7, #8]
    47d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47d4:	f1c3 0205 	rsb	r2, r3, #5
    47d8:	68bb      	ldr	r3, [r7, #8]
    47da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    47dc:	68bb      	ldr	r3, [r7, #8]
    47de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47e0:	2201      	movs	r2, #1
    47e2:	409a      	lsls	r2, r3
    47e4:	4b0d      	ldr	r3, [pc, #52]	; (481c <xTaskPriorityDisinherit+0xc4>)
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	4313      	orrs	r3, r2
    47ea:	4a0c      	ldr	r2, [pc, #48]	; (481c <xTaskPriorityDisinherit+0xc4>)
    47ec:	6013      	str	r3, [r2, #0]
    47ee:	68bb      	ldr	r3, [r7, #8]
    47f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47f2:	4613      	mov	r3, r2
    47f4:	009b      	lsls	r3, r3, #2
    47f6:	4413      	add	r3, r2
    47f8:	009b      	lsls	r3, r3, #2
    47fa:	4a07      	ldr	r2, [pc, #28]	; (4818 <xTaskPriorityDisinherit+0xc0>)
    47fc:	441a      	add	r2, r3
    47fe:	68bb      	ldr	r3, [r7, #8]
    4800:	3304      	adds	r3, #4
    4802:	4619      	mov	r1, r3
    4804:	4610      	mov	r0, r2
    4806:	f7ff f9c8 	bl	3b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    480a:	2301      	movs	r3, #1
    480c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    480e:	68fb      	ldr	r3, [r7, #12]
	}
    4810:	4618      	mov	r0, r3
    4812:	3710      	adds	r7, #16
    4814:	46bd      	mov	sp, r7
    4816:	bd80      	pop	{r7, pc}
    4818:	100002b0 	.word	0x100002b0
    481c:	1000038c 	.word	0x1000038c

00004820 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4820:	b580      	push	{r7, lr}
    4822:	b084      	sub	sp, #16
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
    4828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    482a:	4b29      	ldr	r3, [pc, #164]	; (48d0 <prvAddCurrentTaskToDelayedList+0xb0>)
    482c:	681b      	ldr	r3, [r3, #0]
    482e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4830:	4b28      	ldr	r3, [pc, #160]	; (48d4 <prvAddCurrentTaskToDelayedList+0xb4>)
    4832:	681b      	ldr	r3, [r3, #0]
    4834:	3304      	adds	r3, #4
    4836:	4618      	mov	r0, r3
    4838:	f7ff fa0c 	bl	3c54 <uxListRemove>
    483c:	4603      	mov	r3, r0
    483e:	2b00      	cmp	r3, #0
    4840:	d10b      	bne.n	485a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    4842:	4b24      	ldr	r3, [pc, #144]	; (48d4 <prvAddCurrentTaskToDelayedList+0xb4>)
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4848:	2201      	movs	r2, #1
    484a:	fa02 f303 	lsl.w	r3, r2, r3
    484e:	43da      	mvns	r2, r3
    4850:	4b21      	ldr	r3, [pc, #132]	; (48d8 <prvAddCurrentTaskToDelayedList+0xb8>)
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	4013      	ands	r3, r2
    4856:	4a20      	ldr	r2, [pc, #128]	; (48d8 <prvAddCurrentTaskToDelayedList+0xb8>)
    4858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4860:	d10a      	bne.n	4878 <prvAddCurrentTaskToDelayedList+0x58>
    4862:	683b      	ldr	r3, [r7, #0]
    4864:	2b00      	cmp	r3, #0
    4866:	d007      	beq.n	4878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4868:	4b1a      	ldr	r3, [pc, #104]	; (48d4 <prvAddCurrentTaskToDelayedList+0xb4>)
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	3304      	adds	r3, #4
    486e:	4619      	mov	r1, r3
    4870:	481a      	ldr	r0, [pc, #104]	; (48dc <prvAddCurrentTaskToDelayedList+0xbc>)
    4872:	f7ff f992 	bl	3b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4876:	e026      	b.n	48c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    4878:	68fa      	ldr	r2, [r7, #12]
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	4413      	add	r3, r2
    487e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4880:	4b14      	ldr	r3, [pc, #80]	; (48d4 <prvAddCurrentTaskToDelayedList+0xb4>)
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	68ba      	ldr	r2, [r7, #8]
    4886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    4888:	68ba      	ldr	r2, [r7, #8]
    488a:	68fb      	ldr	r3, [r7, #12]
    488c:	429a      	cmp	r2, r3
    488e:	d209      	bcs.n	48a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4890:	4b13      	ldr	r3, [pc, #76]	; (48e0 <prvAddCurrentTaskToDelayedList+0xc0>)
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	4b0f      	ldr	r3, [pc, #60]	; (48d4 <prvAddCurrentTaskToDelayedList+0xb4>)
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	3304      	adds	r3, #4
    489a:	4619      	mov	r1, r3
    489c:	4610      	mov	r0, r2
    489e:	f7ff f9a0 	bl	3be2 <vListInsert>
}
    48a2:	e010      	b.n	48c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    48a4:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <prvAddCurrentTaskToDelayedList+0xc4>)
    48a6:	681a      	ldr	r2, [r3, #0]
    48a8:	4b0a      	ldr	r3, [pc, #40]	; (48d4 <prvAddCurrentTaskToDelayedList+0xb4>)
    48aa:	681b      	ldr	r3, [r3, #0]
    48ac:	3304      	adds	r3, #4
    48ae:	4619      	mov	r1, r3
    48b0:	4610      	mov	r0, r2
    48b2:	f7ff f996 	bl	3be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    48b6:	4b0c      	ldr	r3, [pc, #48]	; (48e8 <prvAddCurrentTaskToDelayedList+0xc8>)
    48b8:	681b      	ldr	r3, [r3, #0]
    48ba:	68ba      	ldr	r2, [r7, #8]
    48bc:	429a      	cmp	r2, r3
    48be:	d202      	bcs.n	48c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    48c0:	4a09      	ldr	r2, [pc, #36]	; (48e8 <prvAddCurrentTaskToDelayedList+0xc8>)
    48c2:	68bb      	ldr	r3, [r7, #8]
    48c4:	6013      	str	r3, [r2, #0]
}
    48c6:	bf00      	nop
    48c8:	3710      	adds	r7, #16
    48ca:	46bd      	mov	sp, r7
    48cc:	bd80      	pop	{r7, pc}
    48ce:	bf00      	nop
    48d0:	10000388 	.word	0x10000388
    48d4:	100002ac 	.word	0x100002ac
    48d8:	1000038c 	.word	0x1000038c
    48dc:	10000370 	.word	0x10000370
    48e0:	10000340 	.word	0x10000340
    48e4:	1000033c 	.word	0x1000033c
    48e8:	100003a4 	.word	0x100003a4

000048ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b084      	sub	sp, #16
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
    48f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    48fa:	f002 fb5b 	bl	6fb4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	681a      	ldr	r2, [r3, #0]
    4902:	68fb      	ldr	r3, [r7, #12]
    4904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4906:	68f9      	ldr	r1, [r7, #12]
    4908:	6c09      	ldr	r1, [r1, #64]	; 0x40
    490a:	fb01 f303 	mul.w	r3, r1, r3
    490e:	441a      	add	r2, r3
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    4914:	68fb      	ldr	r3, [r7, #12]
    4916:	2200      	movs	r2, #0
    4918:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    491a:	68fb      	ldr	r3, [r7, #12]
    491c:	681a      	ldr	r2, [r3, #0]
    491e:	68fb      	ldr	r3, [r7, #12]
    4920:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    4922:	68fb      	ldr	r3, [r7, #12]
    4924:	681a      	ldr	r2, [r3, #0]
    4926:	68fb      	ldr	r3, [r7, #12]
    4928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    492a:	3b01      	subs	r3, #1
    492c:	68f9      	ldr	r1, [r7, #12]
    492e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4930:	fb01 f303 	mul.w	r3, r1, r3
    4934:	441a      	add	r2, r3
    4936:	68fb      	ldr	r3, [r7, #12]
    4938:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    493a:	68fb      	ldr	r3, [r7, #12]
    493c:	22ff      	movs	r2, #255	; 0xff
    493e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    4942:	68fb      	ldr	r3, [r7, #12]
    4944:	22ff      	movs	r2, #255	; 0xff
    4946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    494a:	683b      	ldr	r3, [r7, #0]
    494c:	2b00      	cmp	r3, #0
    494e:	d114      	bne.n	497a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4950:	68fb      	ldr	r3, [r7, #12]
    4952:	691b      	ldr	r3, [r3, #16]
    4954:	2b00      	cmp	r3, #0
    4956:	d01a      	beq.n	498e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4958:	68fb      	ldr	r3, [r7, #12]
    495a:	3310      	adds	r3, #16
    495c:	4618      	mov	r0, r3
    495e:	f7ff fd69 	bl	4434 <xTaskRemoveFromEventList>
    4962:	4603      	mov	r3, r0
    4964:	2b00      	cmp	r3, #0
    4966:	d012      	beq.n	498e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    4968:	4b0c      	ldr	r3, [pc, #48]	; (499c <xQueueGenericReset+0xb0>)
    496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    496e:	601a      	str	r2, [r3, #0]
    4970:	f3bf 8f4f 	dsb	sy
    4974:	f3bf 8f6f 	isb	sy
    4978:	e009      	b.n	498e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    497a:	68fb      	ldr	r3, [r7, #12]
    497c:	3310      	adds	r3, #16
    497e:	4618      	mov	r0, r3
    4980:	f7ff f8de 	bl	3b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4984:	68fb      	ldr	r3, [r7, #12]
    4986:	3324      	adds	r3, #36	; 0x24
    4988:	4618      	mov	r0, r3
    498a:	f7ff f8d9 	bl	3b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    498e:	f002 fb2b 	bl	6fe8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    4992:	2301      	movs	r3, #1
}
    4994:	4618      	mov	r0, r3
    4996:	3710      	adds	r7, #16
    4998:	46bd      	mov	sp, r7
    499a:	bd80      	pop	{r7, pc}
    499c:	e000ed04 	.word	0xe000ed04

000049a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    49a0:	b580      	push	{r7, lr}
    49a2:	b088      	sub	sp, #32
    49a4:	af02      	add	r7, sp, #8
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	60b9      	str	r1, [r7, #8]
    49aa:	607a      	str	r2, [r7, #4]
    49ac:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    49ae:	683b      	ldr	r3, [r7, #0]
    49b0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
    49b2:	697b      	ldr	r3, [r7, #20]
    49b4:	2b00      	cmp	r3, #0
    49b6:	d00d      	beq.n	49d4 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    49b8:	697b      	ldr	r3, [r7, #20]
    49ba:	2201      	movs	r2, #1
    49bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    49c0:	f897 2020 	ldrb.w	r2, [r7, #32]
    49c4:	697b      	ldr	r3, [r7, #20]
    49c6:	9300      	str	r3, [sp, #0]
    49c8:	4613      	mov	r3, r2
    49ca:	687a      	ldr	r2, [r7, #4]
    49cc:	68b9      	ldr	r1, [r7, #8]
    49ce:	68f8      	ldr	r0, [r7, #12]
    49d0:	f000 f835 	bl	4a3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    49d4:	697b      	ldr	r3, [r7, #20]
	}
    49d6:	4618      	mov	r0, r3
    49d8:	3718      	adds	r7, #24
    49da:	46bd      	mov	sp, r7
    49dc:	bd80      	pop	{r7, pc}

000049de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    49de:	b580      	push	{r7, lr}
    49e0:	b08a      	sub	sp, #40	; 0x28
    49e2:	af02      	add	r7, sp, #8
    49e4:	60f8      	str	r0, [r7, #12]
    49e6:	60b9      	str	r1, [r7, #8]
    49e8:	4613      	mov	r3, r2
    49ea:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    49ec:	68bb      	ldr	r3, [r7, #8]
    49ee:	2b00      	cmp	r3, #0
    49f0:	d102      	bne.n	49f8 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    49f2:	2300      	movs	r3, #0
    49f4:	61fb      	str	r3, [r7, #28]
    49f6:	e004      	b.n	4a02 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	68ba      	ldr	r2, [r7, #8]
    49fc:	fb02 f303 	mul.w	r3, r2, r3
    4a00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    4a02:	69fb      	ldr	r3, [r7, #28]
    4a04:	3350      	adds	r3, #80	; 0x50
    4a06:	4618      	mov	r0, r3
    4a08:	f000 fb4e 	bl	50a8 <pvPortMalloc>
    4a0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
    4a0e:	69bb      	ldr	r3, [r7, #24]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d00f      	beq.n	4a34 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    4a14:	69bb      	ldr	r3, [r7, #24]
    4a16:	3350      	adds	r3, #80	; 0x50
    4a18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
    4a1a:	69bb      	ldr	r3, [r7, #24]
    4a1c:	2200      	movs	r2, #0
    4a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    4a22:	79fa      	ldrb	r2, [r7, #7]
    4a24:	69bb      	ldr	r3, [r7, #24]
    4a26:	9300      	str	r3, [sp, #0]
    4a28:	4613      	mov	r3, r2
    4a2a:	697a      	ldr	r2, [r7, #20]
    4a2c:	68b9      	ldr	r1, [r7, #8]
    4a2e:	68f8      	ldr	r0, [r7, #12]
    4a30:	f000 f805 	bl	4a3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    4a34:	69bb      	ldr	r3, [r7, #24]
	}
    4a36:	4618      	mov	r0, r3
    4a38:	3720      	adds	r7, #32
    4a3a:	46bd      	mov	sp, r7
    4a3c:	bd80      	pop	{r7, pc}

00004a3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    4a3e:	b580      	push	{r7, lr}
    4a40:	b084      	sub	sp, #16
    4a42:	af00      	add	r7, sp, #0
    4a44:	60f8      	str	r0, [r7, #12]
    4a46:	60b9      	str	r1, [r7, #8]
    4a48:	607a      	str	r2, [r7, #4]
    4a4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    4a4c:	68bb      	ldr	r3, [r7, #8]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d103      	bne.n	4a5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    4a52:	69bb      	ldr	r3, [r7, #24]
    4a54:	69ba      	ldr	r2, [r7, #24]
    4a56:	601a      	str	r2, [r3, #0]
    4a58:	e002      	b.n	4a60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    4a5a:	69bb      	ldr	r3, [r7, #24]
    4a5c:	687a      	ldr	r2, [r7, #4]
    4a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    4a60:	69bb      	ldr	r3, [r7, #24]
    4a62:	68fa      	ldr	r2, [r7, #12]
    4a64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4a66:	69bb      	ldr	r3, [r7, #24]
    4a68:	68ba      	ldr	r2, [r7, #8]
    4a6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    4a6c:	2101      	movs	r1, #1
    4a6e:	69b8      	ldr	r0, [r7, #24]
    4a70:	f7ff ff3c 	bl	48ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    4a74:	69bb      	ldr	r3, [r7, #24]
    4a76:	78fa      	ldrb	r2, [r7, #3]
    4a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    4a7c:	bf00      	nop
    4a7e:	3710      	adds	r7, #16
    4a80:	46bd      	mov	sp, r7
    4a82:	bd80      	pop	{r7, pc}

00004a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b08a      	sub	sp, #40	; 0x28
    4a88:	af00      	add	r7, sp, #0
    4a8a:	60f8      	str	r0, [r7, #12]
    4a8c:	60b9      	str	r1, [r7, #8]
    4a8e:	607a      	str	r2, [r7, #4]
    4a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    4a92:	2300      	movs	r3, #0
    4a94:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4a96:	68fb      	ldr	r3, [r7, #12]
    4a98:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    4a9a:	f002 fa8b 	bl	6fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4a9e:	6a3b      	ldr	r3, [r7, #32]
    4aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4aa2:	6a3b      	ldr	r3, [r7, #32]
    4aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4aa6:	429a      	cmp	r2, r3
    4aa8:	d302      	bcc.n	4ab0 <xQueueGenericSend+0x2c>
    4aaa:	683b      	ldr	r3, [r7, #0]
    4aac:	2b02      	cmp	r3, #2
    4aae:	d129      	bne.n	4b04 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4ab0:	683a      	ldr	r2, [r7, #0]
    4ab2:	68b9      	ldr	r1, [r7, #8]
    4ab4:	6a38      	ldr	r0, [r7, #32]
    4ab6:	f000 f98b 	bl	4dd0 <prvCopyDataToQueue>
    4aba:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4abc:	6a3b      	ldr	r3, [r7, #32]
    4abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d010      	beq.n	4ae6 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4ac4:	6a3b      	ldr	r3, [r7, #32]
    4ac6:	3324      	adds	r3, #36	; 0x24
    4ac8:	4618      	mov	r0, r3
    4aca:	f7ff fcb3 	bl	4434 <xTaskRemoveFromEventList>
    4ace:	4603      	mov	r3, r0
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d013      	beq.n	4afc <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    4ad4:	4b3f      	ldr	r3, [pc, #252]	; (4bd4 <xQueueGenericSend+0x150>)
    4ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ada:	601a      	str	r2, [r3, #0]
    4adc:	f3bf 8f4f 	dsb	sy
    4ae0:	f3bf 8f6f 	isb	sy
    4ae4:	e00a      	b.n	4afc <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    4ae6:	69fb      	ldr	r3, [r7, #28]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d007      	beq.n	4afc <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    4aec:	4b39      	ldr	r3, [pc, #228]	; (4bd4 <xQueueGenericSend+0x150>)
    4aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4af2:	601a      	str	r2, [r3, #0]
    4af4:	f3bf 8f4f 	dsb	sy
    4af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    4afc:	f002 fa74 	bl	6fe8 <vPortExitCritical>
				return pdPASS;
    4b00:	2301      	movs	r3, #1
    4b02:	e063      	b.n	4bcc <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4b04:	687b      	ldr	r3, [r7, #4]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d103      	bne.n	4b12 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4b0a:	f002 fa6d 	bl	6fe8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4b0e:	2300      	movs	r3, #0
    4b10:	e05c      	b.n	4bcc <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    4b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b14:	2b00      	cmp	r3, #0
    4b16:	d106      	bne.n	4b26 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4b18:	f107 0314 	add.w	r3, r7, #20
    4b1c:	4618      	mov	r0, r3
    4b1e:	f7ff fcdd 	bl	44dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4b22:	2301      	movs	r3, #1
    4b24:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4b26:	f002 fa5f 	bl	6fe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4b2a:	f7ff fa95 	bl	4058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4b2e:	f002 fa41 	bl	6fb4 <vPortEnterCritical>
    4b32:	6a3b      	ldr	r3, [r7, #32]
    4b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4b38:	b25b      	sxtb	r3, r3
    4b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b3e:	d103      	bne.n	4b48 <xQueueGenericSend+0xc4>
    4b40:	6a3b      	ldr	r3, [r7, #32]
    4b42:	2200      	movs	r2, #0
    4b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4b48:	6a3b      	ldr	r3, [r7, #32]
    4b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4b4e:	b25b      	sxtb	r3, r3
    4b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b54:	d103      	bne.n	4b5e <xQueueGenericSend+0xda>
    4b56:	6a3b      	ldr	r3, [r7, #32]
    4b58:	2200      	movs	r2, #0
    4b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4b5e:	f002 fa43 	bl	6fe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4b62:	1d3a      	adds	r2, r7, #4
    4b64:	f107 0314 	add.w	r3, r7, #20
    4b68:	4611      	mov	r1, r2
    4b6a:	4618      	mov	r0, r3
    4b6c:	f7ff fccc 	bl	4508 <xTaskCheckForTimeOut>
    4b70:	4603      	mov	r3, r0
    4b72:	2b00      	cmp	r3, #0
    4b74:	d124      	bne.n	4bc0 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4b76:	6a38      	ldr	r0, [r7, #32]
    4b78:	f000 fa22 	bl	4fc0 <prvIsQueueFull>
    4b7c:	4603      	mov	r3, r0
    4b7e:	2b00      	cmp	r3, #0
    4b80:	d018      	beq.n	4bb4 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4b82:	6a3b      	ldr	r3, [r7, #32]
    4b84:	3310      	adds	r3, #16
    4b86:	687a      	ldr	r2, [r7, #4]
    4b88:	4611      	mov	r1, r2
    4b8a:	4618      	mov	r0, r3
    4b8c:	f7ff fc1e 	bl	43cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    4b90:	6a38      	ldr	r0, [r7, #32]
    4b92:	f000 f9ad 	bl	4ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4b96:	f7ff fa6d 	bl	4074 <xTaskResumeAll>
    4b9a:	4603      	mov	r3, r0
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	f47f af7c 	bne.w	4a9a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    4ba2:	4b0c      	ldr	r3, [pc, #48]	; (4bd4 <xQueueGenericSend+0x150>)
    4ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ba8:	601a      	str	r2, [r3, #0]
    4baa:	f3bf 8f4f 	dsb	sy
    4bae:	f3bf 8f6f 	isb	sy
    4bb2:	e772      	b.n	4a9a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4bb4:	6a38      	ldr	r0, [r7, #32]
    4bb6:	f000 f99b 	bl	4ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4bba:	f7ff fa5b 	bl	4074 <xTaskResumeAll>
    4bbe:	e76c      	b.n	4a9a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    4bc0:	6a38      	ldr	r0, [r7, #32]
    4bc2:	f000 f995 	bl	4ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4bc6:	f7ff fa55 	bl	4074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4bca:	2300      	movs	r3, #0
		}
	}
}
    4bcc:	4618      	mov	r0, r3
    4bce:	3728      	adds	r7, #40	; 0x28
    4bd0:	46bd      	mov	sp, r7
    4bd2:	bd80      	pop	{r7, pc}
    4bd4:	e000ed04 	.word	0xe000ed04

00004bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    4bd8:	b580      	push	{r7, lr}
    4bda:	b08c      	sub	sp, #48	; 0x30
    4bdc:	af00      	add	r7, sp, #0
    4bde:	60f8      	str	r0, [r7, #12]
    4be0:	60b9      	str	r1, [r7, #8]
    4be2:	607a      	str	r2, [r7, #4]
    4be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    4bea:	f3ef 8211 	mrs	r2, BASEPRI
    4bee:	f04f 0328 	mov.w	r3, #40	; 0x28
    4bf2:	f383 8811 	msr	BASEPRI, r3
    4bf6:	f3bf 8f6f 	isb	sy
    4bfa:	f3bf 8f4f 	dsb	sy
    4bfe:	61fa      	str	r2, [r7, #28]
    4c00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    4c02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4c04:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4c0e:	429a      	cmp	r2, r3
    4c10:	d302      	bcc.n	4c18 <xQueueGenericSendFromISR+0x40>
    4c12:	683b      	ldr	r3, [r7, #0]
    4c14:	2b02      	cmp	r3, #2
    4c16:	d12c      	bne.n	4c72 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    4c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4c22:	683a      	ldr	r2, [r7, #0]
    4c24:	68b9      	ldr	r1, [r7, #8]
    4c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4c28:	f000 f8d2 	bl	4dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    4c2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    4c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4c34:	d112      	bne.n	4c5c <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d016      	beq.n	4c6c <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c40:	3324      	adds	r3, #36	; 0x24
    4c42:	4618      	mov	r0, r3
    4c44:	f7ff fbf6 	bl	4434 <xTaskRemoveFromEventList>
    4c48:	4603      	mov	r3, r0
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d00e      	beq.n	4c6c <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	2b00      	cmp	r3, #0
    4c52:	d00b      	beq.n	4c6c <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	2201      	movs	r2, #1
    4c58:	601a      	str	r2, [r3, #0]
    4c5a:	e007      	b.n	4c6c <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    4c60:	3301      	adds	r3, #1
    4c62:	b2db      	uxtb	r3, r3
    4c64:	b25a      	sxtb	r2, r3
    4c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    4c6c:	2301      	movs	r3, #1
    4c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    4c70:	e001      	b.n	4c76 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4c72:	2300      	movs	r3, #0
    4c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    4c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4c78:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    4c7a:	697b      	ldr	r3, [r7, #20]
    4c7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    4c82:	4618      	mov	r0, r3
    4c84:	3730      	adds	r7, #48	; 0x30
    4c86:	46bd      	mov	sp, r7
    4c88:	bd80      	pop	{r7, pc}
    4c8a:	Address 0x0000000000004c8a is out of bounds.


00004c8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b08a      	sub	sp, #40	; 0x28
    4c90:	af00      	add	r7, sp, #0
    4c92:	60f8      	str	r0, [r7, #12]
    4c94:	60b9      	str	r1, [r7, #8]
    4c96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    4c98:	2300      	movs	r3, #0
    4c9a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4c9c:	68fb      	ldr	r3, [r7, #12]
    4c9e:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4ca0:	f002 f988 	bl	6fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4ca4:	6a3b      	ldr	r3, [r7, #32]
    4ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4ca8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4caa:	69fb      	ldr	r3, [r7, #28]
    4cac:	2b00      	cmp	r3, #0
    4cae:	d01f      	beq.n	4cf0 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4cb0:	68b9      	ldr	r1, [r7, #8]
    4cb2:	6a38      	ldr	r0, [r7, #32]
    4cb4:	f000 f8f6 	bl	4ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    4cb8:	69fb      	ldr	r3, [r7, #28]
    4cba:	1e5a      	subs	r2, r3, #1
    4cbc:	6a3b      	ldr	r3, [r7, #32]
    4cbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4cc0:	6a3b      	ldr	r3, [r7, #32]
    4cc2:	691b      	ldr	r3, [r3, #16]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d00f      	beq.n	4ce8 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4cc8:	6a3b      	ldr	r3, [r7, #32]
    4cca:	3310      	adds	r3, #16
    4ccc:	4618      	mov	r0, r3
    4cce:	f7ff fbb1 	bl	4434 <xTaskRemoveFromEventList>
    4cd2:	4603      	mov	r3, r0
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d007      	beq.n	4ce8 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    4cd8:	4b3c      	ldr	r3, [pc, #240]	; (4dcc <xQueueReceive+0x140>)
    4cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4cde:	601a      	str	r2, [r3, #0]
    4ce0:	f3bf 8f4f 	dsb	sy
    4ce4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    4ce8:	f002 f97e 	bl	6fe8 <vPortExitCritical>
				return pdPASS;
    4cec:	2301      	movs	r3, #1
    4cee:	e069      	b.n	4dc4 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d103      	bne.n	4cfe <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4cf6:	f002 f977 	bl	6fe8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4cfa:	2300      	movs	r3, #0
    4cfc:	e062      	b.n	4dc4 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    4cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d00:	2b00      	cmp	r3, #0
    4d02:	d106      	bne.n	4d12 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4d04:	f107 0314 	add.w	r3, r7, #20
    4d08:	4618      	mov	r0, r3
    4d0a:	f7ff fbe7 	bl	44dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4d0e:	2301      	movs	r3, #1
    4d10:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4d12:	f002 f969 	bl	6fe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4d16:	f7ff f99f 	bl	4058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4d1a:	f002 f94b 	bl	6fb4 <vPortEnterCritical>
    4d1e:	6a3b      	ldr	r3, [r7, #32]
    4d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4d24:	b25b      	sxtb	r3, r3
    4d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4d2a:	d103      	bne.n	4d34 <xQueueReceive+0xa8>
    4d2c:	6a3b      	ldr	r3, [r7, #32]
    4d2e:	2200      	movs	r2, #0
    4d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4d34:	6a3b      	ldr	r3, [r7, #32]
    4d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4d3a:	b25b      	sxtb	r3, r3
    4d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4d40:	d103      	bne.n	4d4a <xQueueReceive+0xbe>
    4d42:	6a3b      	ldr	r3, [r7, #32]
    4d44:	2200      	movs	r2, #0
    4d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4d4a:	f002 f94d 	bl	6fe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4d4e:	1d3a      	adds	r2, r7, #4
    4d50:	f107 0314 	add.w	r3, r7, #20
    4d54:	4611      	mov	r1, r2
    4d56:	4618      	mov	r0, r3
    4d58:	f7ff fbd6 	bl	4508 <xTaskCheckForTimeOut>
    4d5c:	4603      	mov	r3, r0
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d123      	bne.n	4daa <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4d62:	6a38      	ldr	r0, [r7, #32]
    4d64:	f000 f916 	bl	4f94 <prvIsQueueEmpty>
    4d68:	4603      	mov	r3, r0
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d017      	beq.n	4d9e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4d6e:	6a3b      	ldr	r3, [r7, #32]
    4d70:	3324      	adds	r3, #36	; 0x24
    4d72:	687a      	ldr	r2, [r7, #4]
    4d74:	4611      	mov	r1, r2
    4d76:	4618      	mov	r0, r3
    4d78:	f7ff fb28 	bl	43cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4d7c:	6a38      	ldr	r0, [r7, #32]
    4d7e:	f000 f8b7 	bl	4ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4d82:	f7ff f977 	bl	4074 <xTaskResumeAll>
    4d86:	4603      	mov	r3, r0
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d189      	bne.n	4ca0 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    4d8c:	4b0f      	ldr	r3, [pc, #60]	; (4dcc <xQueueReceive+0x140>)
    4d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d92:	601a      	str	r2, [r3, #0]
    4d94:	f3bf 8f4f 	dsb	sy
    4d98:	f3bf 8f6f 	isb	sy
    4d9c:	e780      	b.n	4ca0 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    4d9e:	6a38      	ldr	r0, [r7, #32]
    4da0:	f000 f8a6 	bl	4ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4da4:	f7ff f966 	bl	4074 <xTaskResumeAll>
    4da8:	e77a      	b.n	4ca0 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    4daa:	6a38      	ldr	r0, [r7, #32]
    4dac:	f000 f8a0 	bl	4ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4db0:	f7ff f960 	bl	4074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4db4:	6a38      	ldr	r0, [r7, #32]
    4db6:	f000 f8ed 	bl	4f94 <prvIsQueueEmpty>
    4dba:	4603      	mov	r3, r0
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	f43f af6f 	beq.w	4ca0 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    4dc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    4dc4:	4618      	mov	r0, r3
    4dc6:	3728      	adds	r7, #40	; 0x28
    4dc8:	46bd      	mov	sp, r7
    4dca:	bd80      	pop	{r7, pc}
    4dcc:	e000ed04 	.word	0xe000ed04

00004dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b086      	sub	sp, #24
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	60f8      	str	r0, [r7, #12]
    4dd8:	60b9      	str	r1, [r7, #8]
    4dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    4ddc:	2300      	movs	r3, #0
    4dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4de0:	68fb      	ldr	r3, [r7, #12]
    4de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    4de6:	68fb      	ldr	r3, [r7, #12]
    4de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4dea:	2b00      	cmp	r3, #0
    4dec:	d10d      	bne.n	4e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	681b      	ldr	r3, [r3, #0]
    4df2:	2b00      	cmp	r3, #0
    4df4:	d14d      	bne.n	4e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4df6:	68fb      	ldr	r3, [r7, #12]
    4df8:	685b      	ldr	r3, [r3, #4]
    4dfa:	4618      	mov	r0, r3
    4dfc:	f7ff fcac 	bl	4758 <xTaskPriorityDisinherit>
    4e00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    4e02:	68fb      	ldr	r3, [r7, #12]
    4e04:	2200      	movs	r2, #0
    4e06:	605a      	str	r2, [r3, #4]
    4e08:	e043      	b.n	4e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d119      	bne.n	4e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    4e10:	68fb      	ldr	r3, [r7, #12]
    4e12:	6898      	ldr	r0, [r3, #8]
    4e14:	68fb      	ldr	r3, [r7, #12]
    4e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e18:	461a      	mov	r2, r3
    4e1a:	68b9      	ldr	r1, [r7, #8]
    4e1c:	f004 f996 	bl	914c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4e20:	68fb      	ldr	r3, [r7, #12]
    4e22:	689a      	ldr	r2, [r3, #8]
    4e24:	68fb      	ldr	r3, [r7, #12]
    4e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e28:	441a      	add	r2, r3
    4e2a:	68fb      	ldr	r3, [r7, #12]
    4e2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4e2e:	68fb      	ldr	r3, [r7, #12]
    4e30:	689a      	ldr	r2, [r3, #8]
    4e32:	68fb      	ldr	r3, [r7, #12]
    4e34:	685b      	ldr	r3, [r3, #4]
    4e36:	429a      	cmp	r2, r3
    4e38:	d32b      	bcc.n	4e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	681a      	ldr	r2, [r3, #0]
    4e3e:	68fb      	ldr	r3, [r7, #12]
    4e40:	609a      	str	r2, [r3, #8]
    4e42:	e026      	b.n	4e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4e44:	68fb      	ldr	r3, [r7, #12]
    4e46:	68d8      	ldr	r0, [r3, #12]
    4e48:	68fb      	ldr	r3, [r7, #12]
    4e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e4c:	461a      	mov	r2, r3
    4e4e:	68b9      	ldr	r1, [r7, #8]
    4e50:	f004 f97c 	bl	914c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    4e54:	68fb      	ldr	r3, [r7, #12]
    4e56:	68da      	ldr	r2, [r3, #12]
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e5c:	425b      	negs	r3, r3
    4e5e:	441a      	add	r2, r3
    4e60:	68fb      	ldr	r3, [r7, #12]
    4e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4e64:	68fb      	ldr	r3, [r7, #12]
    4e66:	68da      	ldr	r2, [r3, #12]
    4e68:	68fb      	ldr	r3, [r7, #12]
    4e6a:	681b      	ldr	r3, [r3, #0]
    4e6c:	429a      	cmp	r2, r3
    4e6e:	d207      	bcs.n	4e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4e70:	68fb      	ldr	r3, [r7, #12]
    4e72:	685a      	ldr	r2, [r3, #4]
    4e74:	68fb      	ldr	r3, [r7, #12]
    4e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e78:	425b      	negs	r3, r3
    4e7a:	441a      	add	r2, r3
    4e7c:	68fb      	ldr	r3, [r7, #12]
    4e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	2b02      	cmp	r3, #2
    4e84:	d105      	bne.n	4e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4e86:	693b      	ldr	r3, [r7, #16]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d002      	beq.n	4e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    4e8c:	693b      	ldr	r3, [r7, #16]
    4e8e:	3b01      	subs	r3, #1
    4e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    4e92:	693b      	ldr	r3, [r7, #16]
    4e94:	1c5a      	adds	r2, r3, #1
    4e96:	68fb      	ldr	r3, [r7, #12]
    4e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    4e9a:	697b      	ldr	r3, [r7, #20]
}
    4e9c:	4618      	mov	r0, r3
    4e9e:	3718      	adds	r7, #24
    4ea0:	46bd      	mov	sp, r7
    4ea2:	bd80      	pop	{r7, pc}

00004ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	b082      	sub	sp, #8
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d018      	beq.n	4ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	68da      	ldr	r2, [r3, #12]
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ebe:	441a      	add	r2, r3
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    4ec4:	687b      	ldr	r3, [r7, #4]
    4ec6:	68da      	ldr	r2, [r3, #12]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	685b      	ldr	r3, [r3, #4]
    4ecc:	429a      	cmp	r2, r3
    4ece:	d303      	bcc.n	4ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	681a      	ldr	r2, [r3, #0]
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	68d9      	ldr	r1, [r3, #12]
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ee0:	461a      	mov	r2, r3
    4ee2:	6838      	ldr	r0, [r7, #0]
    4ee4:	f004 f932 	bl	914c <memcpy>
	}
}
    4ee8:	bf00      	nop
    4eea:	3708      	adds	r7, #8
    4eec:	46bd      	mov	sp, r7
    4eee:	bd80      	pop	{r7, pc}

00004ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    4ef0:	b580      	push	{r7, lr}
    4ef2:	b084      	sub	sp, #16
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4ef8:	f002 f85c 	bl	6fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4f04:	e011      	b.n	4f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4f06:	687b      	ldr	r3, [r7, #4]
    4f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d012      	beq.n	4f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	3324      	adds	r3, #36	; 0x24
    4f12:	4618      	mov	r0, r3
    4f14:	f7ff fa8e 	bl	4434 <xTaskRemoveFromEventList>
    4f18:	4603      	mov	r3, r0
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d001      	beq.n	4f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    4f1e:	f7ff fb39 	bl	4594 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    4f22:	7bfb      	ldrb	r3, [r7, #15]
    4f24:	3b01      	subs	r3, #1
    4f26:	b2db      	uxtb	r3, r3
    4f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f2e:	2b00      	cmp	r3, #0
    4f30:	dce9      	bgt.n	4f06 <prvUnlockQueue+0x16>
    4f32:	e000      	b.n	4f36 <prvUnlockQueue+0x46>
					break;
    4f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	22ff      	movs	r2, #255	; 0xff
    4f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    4f3e:	f002 f853 	bl	6fe8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4f42:	f002 f837 	bl	6fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    4f4e:	e011      	b.n	4f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	691b      	ldr	r3, [r3, #16]
    4f54:	2b00      	cmp	r3, #0
    4f56:	d012      	beq.n	4f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	3310      	adds	r3, #16
    4f5c:	4618      	mov	r0, r3
    4f5e:	f7ff fa69 	bl	4434 <xTaskRemoveFromEventList>
    4f62:	4603      	mov	r3, r0
    4f64:	2b00      	cmp	r3, #0
    4f66:	d001      	beq.n	4f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    4f68:	f7ff fb14 	bl	4594 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    4f6c:	7bbb      	ldrb	r3, [r7, #14]
    4f6e:	3b01      	subs	r3, #1
    4f70:	b2db      	uxtb	r3, r3
    4f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    4f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	dce9      	bgt.n	4f50 <prvUnlockQueue+0x60>
    4f7c:	e000      	b.n	4f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    4f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	22ff      	movs	r2, #255	; 0xff
    4f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4f88:	f002 f82e 	bl	6fe8 <vPortExitCritical>
}
    4f8c:	bf00      	nop
    4f8e:	3710      	adds	r7, #16
    4f90:	46bd      	mov	sp, r7
    4f92:	bd80      	pop	{r7, pc}

00004f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    4f94:	b580      	push	{r7, lr}
    4f96:	b084      	sub	sp, #16
    4f98:	af00      	add	r7, sp, #0
    4f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4f9c:	f002 f80a 	bl	6fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    4fa0:	687b      	ldr	r3, [r7, #4]
    4fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4fa4:	2b00      	cmp	r3, #0
    4fa6:	d102      	bne.n	4fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    4fa8:	2301      	movs	r3, #1
    4faa:	60fb      	str	r3, [r7, #12]
    4fac:	e001      	b.n	4fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    4fae:	2300      	movs	r3, #0
    4fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4fb2:	f002 f819 	bl	6fe8 <vPortExitCritical>

	return xReturn;
    4fb6:	68fb      	ldr	r3, [r7, #12]
}
    4fb8:	4618      	mov	r0, r3
    4fba:	3710      	adds	r7, #16
    4fbc:	46bd      	mov	sp, r7
    4fbe:	bd80      	pop	{r7, pc}

00004fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	b084      	sub	sp, #16
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4fc8:	f001 fff4 	bl	6fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4fd4:	429a      	cmp	r2, r3
    4fd6:	d102      	bne.n	4fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    4fd8:	2301      	movs	r3, #1
    4fda:	60fb      	str	r3, [r7, #12]
    4fdc:	e001      	b.n	4fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    4fde:	2300      	movs	r3, #0
    4fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4fe2:	f002 f801 	bl	6fe8 <vPortExitCritical>

	return xReturn;
    4fe6:	68fb      	ldr	r3, [r7, #12]
}
    4fe8:	4618      	mov	r0, r3
    4fea:	3710      	adds	r7, #16
    4fec:	46bd      	mov	sp, r7
    4fee:	bd80      	pop	{r7, pc}

00004ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    4ff0:	b480      	push	{r7}
    4ff2:	b085      	sub	sp, #20
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	6078      	str	r0, [r7, #4]
    4ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4ffa:	2300      	movs	r3, #0
    4ffc:	60fb      	str	r3, [r7, #12]
    4ffe:	e014      	b.n	502a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    5000:	4a0e      	ldr	r2, [pc, #56]	; (503c <vQueueAddToRegistry+0x4c>)
    5002:	68fb      	ldr	r3, [r7, #12]
    5004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5008:	2b00      	cmp	r3, #0
    500a:	d10b      	bne.n	5024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    500c:	490b      	ldr	r1, [pc, #44]	; (503c <vQueueAddToRegistry+0x4c>)
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	683a      	ldr	r2, [r7, #0]
    5012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    5016:	4a09      	ldr	r2, [pc, #36]	; (503c <vQueueAddToRegistry+0x4c>)
    5018:	68fb      	ldr	r3, [r7, #12]
    501a:	00db      	lsls	r3, r3, #3
    501c:	4413      	add	r3, r2
    501e:	687a      	ldr	r2, [r7, #4]
    5020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    5022:	e005      	b.n	5030 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    5024:	68fb      	ldr	r3, [r7, #12]
    5026:	3301      	adds	r3, #1
    5028:	60fb      	str	r3, [r7, #12]
    502a:	68fb      	ldr	r3, [r7, #12]
    502c:	2b09      	cmp	r3, #9
    502e:	d9e7      	bls.n	5000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    5030:	bf00      	nop
    5032:	3714      	adds	r7, #20
    5034:	46bd      	mov	sp, r7
    5036:	f85d 7b04 	ldr.w	r7, [sp], #4
    503a:	4770      	bx	lr
    503c:	10000ee8 	.word	0x10000ee8

00005040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    5040:	b580      	push	{r7, lr}
    5042:	b086      	sub	sp, #24
    5044:	af00      	add	r7, sp, #0
    5046:	60f8      	str	r0, [r7, #12]
    5048:	60b9      	str	r1, [r7, #8]
    504a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    504c:	68fb      	ldr	r3, [r7, #12]
    504e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    5050:	f001 ffb0 	bl	6fb4 <vPortEnterCritical>
    5054:	697b      	ldr	r3, [r7, #20]
    5056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    505a:	b25b      	sxtb	r3, r3
    505c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5060:	d103      	bne.n	506a <vQueueWaitForMessageRestricted+0x2a>
    5062:	697b      	ldr	r3, [r7, #20]
    5064:	2200      	movs	r2, #0
    5066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    506a:	697b      	ldr	r3, [r7, #20]
    506c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    5070:	b25b      	sxtb	r3, r3
    5072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5076:	d103      	bne.n	5080 <vQueueWaitForMessageRestricted+0x40>
    5078:	697b      	ldr	r3, [r7, #20]
    507a:	2200      	movs	r2, #0
    507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    5080:	f001 ffb2 	bl	6fe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    5084:	697b      	ldr	r3, [r7, #20]
    5086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5088:	2b00      	cmp	r3, #0
    508a:	d106      	bne.n	509a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    508c:	697b      	ldr	r3, [r7, #20]
    508e:	3324      	adds	r3, #36	; 0x24
    5090:	687a      	ldr	r2, [r7, #4]
    5092:	68b9      	ldr	r1, [r7, #8]
    5094:	4618      	mov	r0, r3
    5096:	f7ff f9af 	bl	43f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    509a:	6978      	ldr	r0, [r7, #20]
    509c:	f7ff ff28 	bl	4ef0 <prvUnlockQueue>
	}
    50a0:	bf00      	nop
    50a2:	3718      	adds	r7, #24
    50a4:	46bd      	mov	sp, r7
    50a6:	bd80      	pop	{r7, pc}

000050a8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    50a8:	b580      	push	{r7, lr}
    50aa:	b084      	sub	sp, #16
    50ac:	af00      	add	r7, sp, #0
    50ae:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    50b0:	f7fe ffd2 	bl	4058 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    50b4:	6878      	ldr	r0, [r7, #4]
    50b6:	f004 f839 	bl	912c <malloc>
    50ba:	4603      	mov	r3, r0
    50bc:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    50be:	f7fe ffd9 	bl	4074 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    50c2:	68fb      	ldr	r3, [r7, #12]
}
    50c4:	4618      	mov	r0, r3
    50c6:	3710      	adds	r7, #16
    50c8:	46bd      	mov	sp, r7
    50ca:	bd80      	pop	{r7, pc}

000050cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b082      	sub	sp, #8
    50d0:	af00      	add	r7, sp, #0
    50d2:	6078      	str	r0, [r7, #4]
	if( pv )
    50d4:	687b      	ldr	r3, [r7, #4]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d006      	beq.n	50e8 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
    50da:	f7fe ffbd 	bl	4058 <vTaskSuspendAll>
		{
			free( pv );
    50de:	6878      	ldr	r0, [r7, #4]
    50e0:	f004 f82c 	bl	913c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    50e4:	f7fe ffc6 	bl	4074 <xTaskResumeAll>
	}
}
    50e8:	bf00      	nop
    50ea:	3708      	adds	r7, #8
    50ec:	46bd      	mov	sp, r7
    50ee:	bd80      	pop	{r7, pc}

000050f0 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    50f0:	b480      	push	{r7}
    50f2:	af00      	add	r7, sp, #0
    return 1;
    50f4:	2301      	movs	r3, #1
  }
    50f6:	4618      	mov	r0, r3
    50f8:	46bd      	mov	sp, r7
    50fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    50fe:	4770      	bx	lr

00005100 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    5100:	b480      	push	{r7}
    5102:	b083      	sub	sp, #12
    5104:	af00      	add	r7, sp, #0
    5106:	6078      	str	r0, [r7, #4]
    5108:	6039      	str	r1, [r7, #0]
    return -1;
    510a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    510e:	4618      	mov	r0, r3
    5110:	370c      	adds	r7, #12
    5112:	46bd      	mov	sp, r7
    5114:	f85d 7b04 	ldr.w	r7, [sp], #4
    5118:	4770      	bx	lr
    511a:	Address 0x000000000000511a is out of bounds.


0000511c <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    511c:	b480      	push	{r7}
    511e:	b085      	sub	sp, #20
    5120:	af00      	add	r7, sp, #0
    5122:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    5124:	4b0c      	ldr	r3, [pc, #48]	; (5158 <_sbrk+0x3c>)
    5126:	681b      	ldr	r3, [r3, #0]
    5128:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    512a:	4b0b      	ldr	r3, [pc, #44]	; (5158 <_sbrk+0x3c>)
    512c:	681a      	ldr	r2, [r3, #0]
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	4413      	add	r3, r2
    5132:	4a0a      	ldr	r2, [pc, #40]	; (515c <_sbrk+0x40>)
    5134:	4293      	cmp	r3, r2
    5136:	d901      	bls.n	513c <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    5138:	2300      	movs	r3, #0
    513a:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    513c:	4b06      	ldr	r3, [pc, #24]	; (5158 <_sbrk+0x3c>)
    513e:	681a      	ldr	r2, [r3, #0]
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	4413      	add	r3, r2
    5144:	4a04      	ldr	r2, [pc, #16]	; (5158 <_sbrk+0x3c>)
    5146:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    5148:	68fb      	ldr	r3, [r7, #12]
  }
    514a:	4618      	mov	r0, r3
    514c:	3714      	adds	r7, #20
    514e:	46bd      	mov	sp, r7
    5150:	f85d 7b04 	ldr.w	r7, [sp], #4
    5154:	4770      	bx	lr
    5156:	bf00      	nop
    5158:	10000064 	.word	0x10000064
    515c:	20008000 	.word	0x20008000

00005160 <_write>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    5160:	b580      	push	{r7, lr}
    5162:	b084      	sub	sp, #16
    5164:	af00      	add	r7, sp, #0
    5166:	60f8      	str	r0, [r7, #12]
    5168:	60b9      	str	r1, [r7, #8]
    516a:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    516c:	687b      	ldr	r3, [r7, #4]
    516e:	4619      	mov	r1, r3
    5170:	68b8      	ldr	r0, [r7, #8]
    5172:	f001 f97a 	bl	646a <trace_write>
    return sjsu::newlib::out(ptr, length);
    5176:	4b05      	ldr	r3, [pc, #20]	; (518c <_write+0x2c>)
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	687a      	ldr	r2, [r7, #4]
    517c:	4611      	mov	r1, r2
    517e:	68b8      	ldr	r0, [r7, #8]
    5180:	4798      	blx	r3
    5182:	4603      	mov	r3, r0
  }
    5184:	4618      	mov	r0, r3
    5186:	3710      	adds	r7, #16
    5188:	46bd      	mov	sp, r7
    518a:	bd80      	pop	{r7, pc}
    518c:	1000005c 	.word	0x1000005c

00005190 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    5190:	b580      	push	{r7, lr}
    5192:	b084      	sub	sp, #16
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    5198:	6878      	ldr	r0, [r7, #4]
    519a:	f004 f8e7 	bl	936c <strlen>
    519e:	4603      	mov	r3, r0
    51a0:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    51a2:	2300      	movs	r3, #0
    51a4:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    51a6:	68fa      	ldr	r2, [r7, #12]
    51a8:	6879      	ldr	r1, [r7, #4]
    51aa:	2000      	movs	r0, #0
    51ac:	f7ff ffd8 	bl	5160 <_write>
    51b0:	4602      	mov	r2, r0
    51b2:	68bb      	ldr	r3, [r7, #8]
    51b4:	4413      	add	r3, r2
    51b6:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    51b8:	2201      	movs	r2, #1
    51ba:	4906      	ldr	r1, [pc, #24]	; (51d4 <puts+0x44>)
    51bc:	2000      	movs	r0, #0
    51be:	f7ff ffcf 	bl	5160 <_write>
    51c2:	4602      	mov	r2, r0
    51c4:	68bb      	ldr	r3, [r7, #8]
    51c6:	4413      	add	r3, r2
    51c8:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    51ca:	68bb      	ldr	r3, [r7, #8]
  }
    51cc:	4618      	mov	r0, r3
    51ce:	3710      	adds	r7, #16
    51d0:	46bd      	mov	sp, r7
    51d2:	bd80      	pop	{r7, pc}
    51d4:	0000a414 	.word	0x0000a414

000051d8 <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    51d8:	b480      	push	{r7}
    51da:	b083      	sub	sp, #12
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    51e0:	bf00      	nop
    while (1)
    51e2:	e7fd      	b.n	51e0 <_exit+0x8>

000051e4 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    51e4:	b580      	push	{r7, lr}
    51e6:	b088      	sub	sp, #32
    51e8:	af00      	add	r7, sp, #0
    51ea:	60b9      	str	r1, [r7, #8]
    51ec:	607a      	str	r2, [r7, #4]
    51ee:	603b      	str	r3, [r7, #0]
    51f0:	4603      	mov	r3, r0
    51f2:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    51f4:	23fe      	movs	r3, #254	; 0xfe
    51f6:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    51f8:	697a      	ldr	r2, [r7, #20]
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	fbb3 f1f2 	udiv	r1, r3, r2
    5200:	fb02 f201 	mul.w	r2, r2, r1
    5204:	1a9b      	subs	r3, r3, r2
    5206:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    5208:	68ba      	ldr	r2, [r7, #8]
    520a:	69fb      	ldr	r3, [r7, #28]
    520c:	4413      	add	r3, r2
    520e:	7bfa      	ldrb	r2, [r7, #15]
    5210:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    5212:	7bfb      	ldrb	r3, [r7, #15]
    5214:	2b00      	cmp	r3, #0
    5216:	d106      	bne.n	5226 <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    5218:	69fb      	ldr	r3, [r7, #28]
    521a:	461a      	mov	r2, r3
    521c:	68b9      	ldr	r1, [r7, #8]
    521e:	2001      	movs	r0, #1
    5220:	f7ff ff9e 	bl	5160 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    5224:	e012      	b.n	524c <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    5226:	69fb      	ldr	r3, [r7, #28]
    5228:	1c5a      	adds	r2, r3, #1
    522a:	697b      	ldr	r3, [r7, #20]
    522c:	429a      	cmp	r2, r3
    522e:	d10d      	bne.n	524c <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    5230:	697b      	ldr	r3, [r7, #20]
    5232:	3301      	adds	r3, #1
    5234:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    5236:	68ba      	ldr	r2, [r7, #8]
    5238:	69bb      	ldr	r3, [r7, #24]
    523a:	4413      	add	r3, r2
    523c:	2200      	movs	r2, #0
    523e:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    5240:	69bb      	ldr	r3, [r7, #24]
    5242:	461a      	mov	r2, r3
    5244:	68b9      	ldr	r1, [r7, #8]
    5246:	2001      	movs	r0, #1
    5248:	f7ff ff8a 	bl	5160 <_write>
}
    524c:	bf00      	nop
    524e:	3720      	adds	r7, #32
    5250:	46bd      	mov	sp, r7
    5252:	bd80      	pop	{r7, pc}

00005254 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    5254:	b480      	push	{r7}
    5256:	b085      	sub	sp, #20
    5258:	af00      	add	r7, sp, #0
    525a:	60b9      	str	r1, [r7, #8]
    525c:	607a      	str	r2, [r7, #4]
    525e:	603b      	str	r3, [r7, #0]
    5260:	4603      	mov	r3, r0
    5262:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    5264:	bf00      	nop
    5266:	3714      	adds	r7, #20
    5268:	46bd      	mov	sp, r7
    526a:	f85d 7b04 	ldr.w	r7, [sp], #4
    526e:	4770      	bx	lr

00005270 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    5270:	b480      	push	{r7}
    5272:	b085      	sub	sp, #20
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    5278:	687b      	ldr	r3, [r7, #4]
    527a:	60fb      	str	r3, [r7, #12]
    527c:	68fb      	ldr	r3, [r7, #12]
    527e:	781b      	ldrb	r3, [r3, #0]
    5280:	2b00      	cmp	r3, #0
    5282:	d003      	beq.n	528c <_strlen(char const*)+0x1c>
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	3301      	adds	r3, #1
    5288:	60fb      	str	r3, [r7, #12]
    528a:	e7f7      	b.n	527c <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    528c:	68fa      	ldr	r2, [r7, #12]
    528e:	687b      	ldr	r3, [r7, #4]
    5290:	1ad3      	subs	r3, r2, r3
}
    5292:	4618      	mov	r0, r3
    5294:	3714      	adds	r7, #20
    5296:	46bd      	mov	sp, r7
    5298:	f85d 7b04 	ldr.w	r7, [sp], #4
    529c:	4770      	bx	lr

0000529e <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    529e:	b480      	push	{r7}
    52a0:	b083      	sub	sp, #12
    52a2:	af00      	add	r7, sp, #0
    52a4:	4603      	mov	r3, r0
    52a6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    52a8:	79fb      	ldrb	r3, [r7, #7]
    52aa:	2b2f      	cmp	r3, #47	; 0x2f
    52ac:	d904      	bls.n	52b8 <_is_digit(char)+0x1a>
    52ae:	79fb      	ldrb	r3, [r7, #7]
    52b0:	2b39      	cmp	r3, #57	; 0x39
    52b2:	d801      	bhi.n	52b8 <_is_digit(char)+0x1a>
    52b4:	2301      	movs	r3, #1
    52b6:	e000      	b.n	52ba <_is_digit(char)+0x1c>
    52b8:	2300      	movs	r3, #0
}
    52ba:	4618      	mov	r0, r3
    52bc:	370c      	adds	r7, #12
    52be:	46bd      	mov	sp, r7
    52c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c4:	4770      	bx	lr

000052c6 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    52c6:	b580      	push	{r7, lr}
    52c8:	b084      	sub	sp, #16
    52ca:	af00      	add	r7, sp, #0
    52cc:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    52ce:	2300      	movs	r3, #0
    52d0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	4618      	mov	r0, r3
    52da:	f7ff ffe0 	bl	529e <_is_digit(char)>
    52de:	4603      	mov	r3, r0
    52e0:	2b00      	cmp	r3, #0
    52e2:	d00f      	beq.n	5304 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    52e4:	68fa      	ldr	r2, [r7, #12]
    52e6:	4613      	mov	r3, r2
    52e8:	009b      	lsls	r3, r3, #2
    52ea:	4413      	add	r3, r2
    52ec:	005b      	lsls	r3, r3, #1
    52ee:	4618      	mov	r0, r3
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	681b      	ldr	r3, [r3, #0]
    52f4:	1c59      	adds	r1, r3, #1
    52f6:	687a      	ldr	r2, [r7, #4]
    52f8:	6011      	str	r1, [r2, #0]
    52fa:	781b      	ldrb	r3, [r3, #0]
    52fc:	4403      	add	r3, r0
    52fe:	3b30      	subs	r3, #48	; 0x30
    5300:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    5302:	e7e6      	b.n	52d2 <_atoi(char const**)+0xc>
  }
  return i;
    5304:	68fb      	ldr	r3, [r7, #12]
}
    5306:	4618      	mov	r0, r3
    5308:	3710      	adds	r7, #16
    530a:	46bd      	mov	sp, r7
    530c:	bd80      	pop	{r7, pc}

0000530e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    530e:	b590      	push	{r4, r7, lr}
    5310:	b089      	sub	sp, #36	; 0x24
    5312:	af00      	add	r7, sp, #0
    5314:	60f8      	str	r0, [r7, #12]
    5316:	60b9      	str	r1, [r7, #8]
    5318:	607a      	str	r2, [r7, #4]
    531a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5322:	f003 0302 	and.w	r3, r3, #2
    5326:	2b00      	cmp	r3, #0
    5328:	d10e      	bne.n	5348 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    532a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    532e:	429a      	cmp	r2, r3
    5330:	d20a      	bcs.n	5348 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    5332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5334:	2b1f      	cmp	r3, #31
    5336:	d807      	bhi.n	5348 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    5338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    533a:	1c5a      	adds	r2, r3, #1
    533c:	637a      	str	r2, [r7, #52]	; 0x34
    533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5340:	4413      	add	r3, r2
    5342:	2230      	movs	r2, #48	; 0x30
    5344:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5346:	e7eb      	b.n	5320 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    534a:	f003 0302 	and.w	r3, r3, #2
    534e:	2b00      	cmp	r3, #0
    5350:	d113      	bne.n	537a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5354:	f003 0301 	and.w	r3, r3, #1
    5358:	2b00      	cmp	r3, #0
    535a:	d00e      	beq.n	537a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    535c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    535e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5360:	429a      	cmp	r2, r3
    5362:	d20a      	bcs.n	537a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5366:	2b1f      	cmp	r3, #31
    5368:	d807      	bhi.n	537a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    536c:	1c5a      	adds	r2, r3, #1
    536e:	637a      	str	r2, [r7, #52]	; 0x34
    5370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5372:	4413      	add	r3, r2
    5374:	2230      	movs	r2, #48	; 0x30
    5376:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5378:	e7e6      	b.n	5348 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    537a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    537c:	f003 0310 	and.w	r3, r3, #16
    5380:	2b00      	cmp	r3, #0
    5382:	d058      	beq.n	5436 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    5384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    538a:	2b00      	cmp	r3, #0
    538c:	d116      	bne.n	53bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5390:	2b00      	cmp	r3, #0
    5392:	d013      	beq.n	53bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    5394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5398:	429a      	cmp	r2, r3
    539a:	d003      	beq.n	53a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    539c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    539e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    53a0:	429a      	cmp	r2, r3
    53a2:	d10b      	bne.n	53bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    53a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53a6:	3b01      	subs	r3, #1
    53a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    53aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ac:	2b00      	cmp	r3, #0
    53ae:	d005      	beq.n	53bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    53b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    53b2:	2b10      	cmp	r3, #16
    53b4:	d102      	bne.n	53bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    53b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53b8:	3b01      	subs	r3, #1
    53ba:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    53bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    53be:	2b10      	cmp	r3, #16
    53c0:	d10f      	bne.n	53e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    53c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    53c4:	f003 0320 	and.w	r3, r3, #32
    53c8:	2b00      	cmp	r3, #0
    53ca:	d10a      	bne.n	53e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    53cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ce:	2b1f      	cmp	r3, #31
    53d0:	d807      	bhi.n	53e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    53d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53d4:	1c5a      	adds	r2, r3, #1
    53d6:	637a      	str	r2, [r7, #52]	; 0x34
    53d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    53da:	4413      	add	r3, r2
    53dc:	2278      	movs	r2, #120	; 0x78
    53de:	701a      	strb	r2, [r3, #0]
    53e0:	e01f      	b.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    53e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    53e4:	2b10      	cmp	r3, #16
    53e6:	d10f      	bne.n	5408 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    53e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    53ea:	f003 0320 	and.w	r3, r3, #32
    53ee:	2b00      	cmp	r3, #0
    53f0:	d00a      	beq.n	5408 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    53f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53f4:	2b1f      	cmp	r3, #31
    53f6:	d807      	bhi.n	5408 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    53f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53fa:	1c5a      	adds	r2, r3, #1
    53fc:	637a      	str	r2, [r7, #52]	; 0x34
    53fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5400:	4413      	add	r3, r2
    5402:	2258      	movs	r2, #88	; 0x58
    5404:	701a      	strb	r2, [r3, #0]
    5406:	e00c      	b.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    540a:	2b02      	cmp	r3, #2
    540c:	d109      	bne.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5410:	2b1f      	cmp	r3, #31
    5412:	d806      	bhi.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    5414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5416:	1c5a      	adds	r2, r3, #1
    5418:	637a      	str	r2, [r7, #52]	; 0x34
    541a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    541c:	4413      	add	r3, r2
    541e:	2262      	movs	r2, #98	; 0x62
    5420:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    5422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5424:	2b1f      	cmp	r3, #31
    5426:	d806      	bhi.n	5436 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    5428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    542a:	1c5a      	adds	r2, r3, #1
    542c:	637a      	str	r2, [r7, #52]	; 0x34
    542e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5430:	4413      	add	r3, r2
    5432:	2230      	movs	r2, #48	; 0x30
    5434:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    5436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5438:	2b00      	cmp	r3, #0
    543a:	d014      	beq.n	5466 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    543c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    543e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5440:	429a      	cmp	r2, r3
    5442:	d110      	bne.n	5466 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    5444:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5448:	2b00      	cmp	r3, #0
    544a:	d109      	bne.n	5460 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    544c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    544e:	f003 0304 	and.w	r3, r3, #4
    5452:	2b00      	cmp	r3, #0
    5454:	d104      	bne.n	5460 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    5456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5458:	f003 0308 	and.w	r3, r3, #8
    545c:	2b00      	cmp	r3, #0
    545e:	d002      	beq.n	5466 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    5460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5462:	3b01      	subs	r3, #1
    5464:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    5466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5468:	2b1f      	cmp	r3, #31
    546a:	d824      	bhi.n	54b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    546c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5470:	2b00      	cmp	r3, #0
    5472:	d007      	beq.n	5484 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    5474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5476:	1c5a      	adds	r2, r3, #1
    5478:	637a      	str	r2, [r7, #52]	; 0x34
    547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    547c:	4413      	add	r3, r2
    547e:	222d      	movs	r2, #45	; 0x2d
    5480:	701a      	strb	r2, [r3, #0]
    5482:	e018      	b.n	54b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    5484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5486:	f003 0304 	and.w	r3, r3, #4
    548a:	2b00      	cmp	r3, #0
    548c:	d007      	beq.n	549e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5490:	1c5a      	adds	r2, r3, #1
    5492:	637a      	str	r2, [r7, #52]	; 0x34
    5494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5496:	4413      	add	r3, r2
    5498:	222b      	movs	r2, #43	; 0x2b
    549a:	701a      	strb	r2, [r3, #0]
    549c:	e00b      	b.n	54b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    54a0:	f003 0308 	and.w	r3, r3, #8
    54a4:	2b00      	cmp	r3, #0
    54a6:	d006      	beq.n	54b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    54a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54aa:	1c5a      	adds	r2, r3, #1
    54ac:	637a      	str	r2, [r7, #52]	; 0x34
    54ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    54b0:	4413      	add	r3, r2
    54b2:	2220      	movs	r2, #32
    54b4:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    54b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    54b8:	f003 0302 	and.w	r3, r3, #2
    54bc:	2b00      	cmp	r3, #0
    54be:	d116      	bne.n	54ee <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    54c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    54c2:	f003 0301 	and.w	r3, r3, #1
    54c6:	2b00      	cmp	r3, #0
    54c8:	d111      	bne.n	54ee <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    54ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54cc:	61fb      	str	r3, [r7, #28]
    54ce:	69fa      	ldr	r2, [r7, #28]
    54d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    54d2:	429a      	cmp	r2, r3
    54d4:	d20b      	bcs.n	54ee <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    54d6:	687a      	ldr	r2, [r7, #4]
    54d8:	1c53      	adds	r3, r2, #1
    54da:	607b      	str	r3, [r7, #4]
    54dc:	68fc      	ldr	r4, [r7, #12]
    54de:	683b      	ldr	r3, [r7, #0]
    54e0:	68b9      	ldr	r1, [r7, #8]
    54e2:	2020      	movs	r0, #32
    54e4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    54e6:	69fb      	ldr	r3, [r7, #28]
    54e8:	3301      	adds	r3, #1
    54ea:	61fb      	str	r3, [r7, #28]
    54ec:	e7ef      	b.n	54ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    54ee:	2300      	movs	r3, #0
    54f0:	61bb      	str	r3, [r7, #24]
    54f2:	69ba      	ldr	r2, [r7, #24]
    54f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54f6:	429a      	cmp	r2, r3
    54f8:	d211      	bcs.n	551e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    54fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    54fc:	69bb      	ldr	r3, [r7, #24]
    54fe:	1ad3      	subs	r3, r2, r3
    5500:	3b01      	subs	r3, #1
    5502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5504:	4413      	add	r3, r2
    5506:	7818      	ldrb	r0, [r3, #0]
    5508:	687a      	ldr	r2, [r7, #4]
    550a:	1c53      	adds	r3, r2, #1
    550c:	607b      	str	r3, [r7, #4]
    550e:	68fc      	ldr	r4, [r7, #12]
    5510:	683b      	ldr	r3, [r7, #0]
    5512:	68b9      	ldr	r1, [r7, #8]
    5514:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    5516:	69bb      	ldr	r3, [r7, #24]
    5518:	3301      	adds	r3, #1
    551a:	61bb      	str	r3, [r7, #24]
    551c:	e7e9      	b.n	54f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    551e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5520:	f003 0302 	and.w	r3, r3, #2
    5524:	2b00      	cmp	r3, #0
    5526:	d00e      	beq.n	5546 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    5528:	687a      	ldr	r2, [r7, #4]
    552a:	697b      	ldr	r3, [r7, #20]
    552c:	1ad3      	subs	r3, r2, r3
    552e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5530:	429a      	cmp	r2, r3
    5532:	d908      	bls.n	5546 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    5534:	687a      	ldr	r2, [r7, #4]
    5536:	1c53      	adds	r3, r2, #1
    5538:	607b      	str	r3, [r7, #4]
    553a:	68fc      	ldr	r4, [r7, #12]
    553c:	683b      	ldr	r3, [r7, #0]
    553e:	68b9      	ldr	r1, [r7, #8]
    5540:	2020      	movs	r0, #32
    5542:	47a0      	blx	r4
    while (idx - start_idx < width) {
    5544:	e7f0      	b.n	5528 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    5546:	687b      	ldr	r3, [r7, #4]
}
    5548:	4618      	mov	r0, r3
    554a:	3724      	adds	r7, #36	; 0x24
    554c:	46bd      	mov	sp, r7
    554e:	bd90      	pop	{r4, r7, pc}

00005550 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    5550:	b580      	push	{r7, lr}
    5552:	b096      	sub	sp, #88	; 0x58
    5554:	af08      	add	r7, sp, #32
    5556:	60f8      	str	r0, [r7, #12]
    5558:	60b9      	str	r1, [r7, #8]
    555a:	607a      	str	r2, [r7, #4]
    555c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    555e:	2300      	movs	r3, #0
    5560:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    5562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5564:	2b00      	cmp	r3, #0
    5566:	d103      	bne.n	5570 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    5568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    556a:	f023 0310 	bic.w	r3, r3, #16
    556e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    5570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5576:	2b00      	cmp	r3, #0
    5578:	d002      	beq.n	5580 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    557a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    557c:	2b00      	cmp	r3, #0
    557e:	d034      	beq.n	55ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    5580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5582:	6cba      	ldr	r2, [r7, #72]	; 0x48
    5584:	fbb3 f2f2 	udiv	r2, r3, r2
    5588:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    558a:	fb01 f202 	mul.w	r2, r1, r2
    558e:	1a9b      	subs	r3, r3, r2
    5590:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    5594:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5598:	2b09      	cmp	r3, #9
    559a:	d804      	bhi.n	55a6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    559c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    55a0:	3330      	adds	r3, #48	; 0x30
    55a2:	b2da      	uxtb	r2, r3
    55a4:	e00d      	b.n	55c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    55a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    55a8:	f003 0320 	and.w	r3, r3, #32
    55ac:	2b00      	cmp	r3, #0
    55ae:	d001      	beq.n	55b4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    55b0:	2241      	movs	r2, #65	; 0x41
    55b2:	e000      	b.n	55b6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    55b4:	2261      	movs	r2, #97	; 0x61
    55b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    55ba:	4413      	add	r3, r2
    55bc:	b2db      	uxtb	r3, r3
    55be:	3b0a      	subs	r3, #10
    55c0:	b2da      	uxtb	r2, r3
    55c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    55c4:	1c59      	adds	r1, r3, #1
    55c6:	6379      	str	r1, [r7, #52]	; 0x34
    55c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
    55cc:	440b      	add	r3, r1
    55ce:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    55d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    55d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    55d6:	fbb2 f3f3 	udiv	r3, r2, r3
    55da:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    55dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    55de:	2b00      	cmp	r3, #0
    55e0:	d003      	beq.n	55ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    55e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    55e4:	2b1f      	cmp	r3, #31
    55e6:	d800      	bhi.n	55ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    55e8:	e7ca      	b.n	5580 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    55ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    55ec:	9306      	str	r3, [sp, #24]
    55ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    55f0:	9305      	str	r3, [sp, #20]
    55f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    55f4:	9304      	str	r3, [sp, #16]
    55f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    55f8:	9303      	str	r3, [sp, #12]
    55fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    55fe:	9302      	str	r3, [sp, #8]
    5600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5602:	9301      	str	r3, [sp, #4]
    5604:	f107 0310 	add.w	r3, r7, #16
    5608:	9300      	str	r3, [sp, #0]
    560a:	683b      	ldr	r3, [r7, #0]
    560c:	687a      	ldr	r2, [r7, #4]
    560e:	68b9      	ldr	r1, [r7, #8]
    5610:	68f8      	ldr	r0, [r7, #12]
    5612:	f7ff fe7c 	bl	530e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    5616:	4603      	mov	r3, r0
}
    5618:	4618      	mov	r0, r3
    561a:	3738      	adds	r7, #56	; 0x38
    561c:	46bd      	mov	sp, r7
    561e:	bd80      	pop	{r7, pc}

00005620 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    5620:	b590      	push	{r4, r7, lr}
    5622:	b097      	sub	sp, #92	; 0x5c
    5624:	af08      	add	r7, sp, #32
    5626:	60f8      	str	r0, [r7, #12]
    5628:	60b9      	str	r1, [r7, #8]
    562a:	607a      	str	r2, [r7, #4]
    562c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    562e:	2300      	movs	r3, #0
    5630:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    5632:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    5636:	4323      	orrs	r3, r4
    5638:	d103      	bne.n	5642 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    563a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    563c:	f023 0310 	bic.w	r3, r3, #16
    5640:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    5642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5648:	2b00      	cmp	r3, #0
    564a:	d003      	beq.n	5654 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    564c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    5650:	4323      	orrs	r3, r4
    5652:	d03a      	beq.n	56ca <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    5654:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    5658:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    565c:	f002 fc34 	bl	7ec8 <__aeabi_uldivmod>
    5660:	461c      	mov	r4, r3
    5662:	4613      	mov	r3, r2
    5664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    5668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    566c:	2b09      	cmp	r3, #9
    566e:	d804      	bhi.n	567a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    5670:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5674:	3330      	adds	r3, #48	; 0x30
    5676:	b2da      	uxtb	r2, r3
    5678:	e00d      	b.n	5696 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    567a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    567c:	f003 0320 	and.w	r3, r3, #32
    5680:	2b00      	cmp	r3, #0
    5682:	d001      	beq.n	5688 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    5684:	2241      	movs	r2, #65	; 0x41
    5686:	e000      	b.n	568a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    5688:	2261      	movs	r2, #97	; 0x61
    568a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    568e:	4413      	add	r3, r2
    5690:	b2db      	uxtb	r3, r3
    5692:	3b0a      	subs	r3, #10
    5694:	b2da      	uxtb	r2, r3
    5696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5698:	1c59      	adds	r1, r3, #1
    569a:	6379      	str	r1, [r7, #52]	; 0x34
    569c:	f107 0138 	add.w	r1, r7, #56	; 0x38
    56a0:	440b      	add	r3, r1
    56a2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    56a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    56aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    56ae:	f002 fc0b 	bl	7ec8 <__aeabi_uldivmod>
    56b2:	4603      	mov	r3, r0
    56b4:	460c      	mov	r4, r1
    56b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    56ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    56be:	4323      	orrs	r3, r4
    56c0:	d003      	beq.n	56ca <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    56c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    56c4:	2b1f      	cmp	r3, #31
    56c6:	d800      	bhi.n	56ca <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    56c8:	e7c4      	b.n	5654 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    56ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    56cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
    56ce:	9206      	str	r2, [sp, #24]
    56d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    56d2:	9205      	str	r2, [sp, #20]
    56d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    56d6:	9204      	str	r2, [sp, #16]
    56d8:	9303      	str	r3, [sp, #12]
    56da:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    56de:	9302      	str	r3, [sp, #8]
    56e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    56e2:	9301      	str	r3, [sp, #4]
    56e4:	f107 0310 	add.w	r3, r7, #16
    56e8:	9300      	str	r3, [sp, #0]
    56ea:	683b      	ldr	r3, [r7, #0]
    56ec:	687a      	ldr	r2, [r7, #4]
    56ee:	68b9      	ldr	r1, [r7, #8]
    56f0:	68f8      	ldr	r0, [r7, #12]
    56f2:	f7ff fe0c 	bl	530e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    56f6:	4603      	mov	r3, r0
}
    56f8:	4618      	mov	r0, r3
    56fa:	373c      	adds	r7, #60	; 0x3c
    56fc:	46bd      	mov	sp, r7
    56fe:	bd90      	pop	{r4, r7, pc}

00005700 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    5700:	b590      	push	{r4, r7, lr}
    5702:	b09b      	sub	sp, #108	; 0x6c
    5704:	af00      	add	r7, sp, #0
    5706:	6178      	str	r0, [r7, #20]
    5708:	6139      	str	r1, [r7, #16]
    570a:	60fa      	str	r2, [r7, #12]
    570c:	60bb      	str	r3, [r7, #8]
    570e:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    5716:	e9d7 0100 	ldrd	r0, r1, [r7]
    571a:	f002 fa77 	bl	7c0c <__aeabi_d2f>
    571e:	4603      	mov	r3, r0
    5720:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    5722:	2300      	movs	r3, #0
    5724:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    5726:	f04f 0300 	mov.w	r3, #0
    572a:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    572c:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    5730:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    5732:	2300      	movs	r3, #0
    5734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    5738:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    573c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5744:	d50a      	bpl.n	575c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    5746:	2301      	movs	r3, #1
    5748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    574c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 59fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    5750:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5754:	ee77 7a67 	vsub.f32	s15, s14, s15
    5758:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5764:	2b00      	cmp	r3, #0
    5766:	d101      	bne.n	576c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    5768:	2306      	movs	r3, #6
    576a:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    576c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    576e:	2b1f      	cmp	r3, #31
    5770:	d80f      	bhi.n	5792 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    5772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5774:	2b09      	cmp	r3, #9
    5776:	d90c      	bls.n	5792 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    5778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    577a:	1c5a      	adds	r2, r3, #1
    577c:	663a      	str	r2, [r7, #96]	; 0x60
    577e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5782:	4413      	add	r3, r2
    5784:	2230      	movs	r2, #48	; 0x30
    5786:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    578a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    578c:	3b01      	subs	r3, #1
    578e:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    5790:	e7ec      	b.n	576c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    5792:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    579a:	ee17 3a90 	vmov	r3, s15
    579e:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    57a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    57a2:	ee07 3a90 	vmov	s15, r3
    57a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    57aa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    57ae:	ee37 7a67 	vsub.f32	s14, s14, s15
    57b2:	4a93      	ldr	r2, [pc, #588]	; (5a00 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    57b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    57b6:	009b      	lsls	r3, r3, #2
    57b8:	4413      	add	r3, r2
    57ba:	edd3 7a00 	vldr	s15, [r3]
    57be:	ee67 7a27 	vmul.f32	s15, s14, s15
    57c2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    57c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    57ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    57ce:	ee17 3a90 	vmov	r3, s15
    57d2:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    57d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    57d6:	ee07 3a90 	vmov	s15, r3
    57da:	eef8 7a67 	vcvt.f32.u32	s15, s15
    57de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    57e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    57e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    57ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    57ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    57f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    57f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57fa:	dd18      	ble.n	582e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    57fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    57fe:	3301      	adds	r3, #1
    5800:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    5802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5804:	ee07 3a90 	vmov	s15, r3
    5808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    580c:	4a7c      	ldr	r2, [pc, #496]	; (5a00 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    580e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5810:	009b      	lsls	r3, r3, #2
    5812:	4413      	add	r3, r2
    5814:	edd3 7a00 	vldr	s15, [r3]
    5818:	eeb4 7ae7 	vcmpe.f32	s14, s15
    581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5820:	db19      	blt.n	5856 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    5822:	2300      	movs	r3, #0
    5824:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    5826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5828:	3301      	adds	r3, #1
    582a:	65bb      	str	r3, [r7, #88]	; 0x58
    582c:	e013      	b.n	5856 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    582e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    5832:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    5836:	eef4 7a47 	vcmp.f32	s15, s14
    583a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    583e:	d10a      	bne.n	5856 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    5840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5842:	2b00      	cmp	r3, #0
    5844:	d004      	beq.n	5850 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    5846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5848:	f003 0301 	and.w	r3, r3, #1
    584c:	2b00      	cmp	r3, #0
    584e:	d002      	beq.n	5856 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    5850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5852:	3301      	adds	r3, #1
    5854:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    5856:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    585a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 5a04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    585e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5866:	dd01      	ble.n	586c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    5868:	2300      	movs	r3, #0
    586a:	e166      	b.n	5b3a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    586c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    586e:	2b00      	cmp	r3, #0
    5870:	d129      	bne.n	58c6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    5872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5874:	ee07 3a90 	vmov	s15, r3
    5878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    587c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    5880:	ee77 7a67 	vsub.f32	s15, s14, s15
    5884:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    5888:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    588c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    5890:	eef4 7ac7 	vcmpe.f32	s15, s14
    5894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5898:	dd03      	ble.n	58a2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    589a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    589c:	3301      	adds	r3, #1
    589e:	65bb      	str	r3, [r7, #88]	; 0x58
    58a0:	e062      	b.n	5968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    58a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    58a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    58aa:	eef4 7a47 	vcmp.f32	s15, s14
    58ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58b2:	d159      	bne.n	5968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    58b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    58b6:	f003 0301 	and.w	r3, r3, #1
    58ba:	2b00      	cmp	r3, #0
    58bc:	d054      	beq.n	5968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    58be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    58c0:	3301      	adds	r3, #1
    58c2:	65bb      	str	r3, [r7, #88]	; 0x58
    58c4:	e050      	b.n	5968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    58c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    58c8:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    58ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58cc:	2b1f      	cmp	r3, #31
    58ce:	d828      	bhi.n	5922 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    58d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    58d2:	3b01      	subs	r3, #1
    58d4:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    58d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
    58d8:	4b4b      	ldr	r3, [pc, #300]	; (5a08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    58da:	fba3 2301 	umull	r2, r3, r3, r1
    58de:	08da      	lsrs	r2, r3, #3
    58e0:	4613      	mov	r3, r2
    58e2:	009b      	lsls	r3, r3, #2
    58e4:	4413      	add	r3, r2
    58e6:	005b      	lsls	r3, r3, #1
    58e8:	1aca      	subs	r2, r1, r3
    58ea:	b2d3      	uxtb	r3, r2
    58ec:	3330      	adds	r3, #48	; 0x30
    58ee:	b2d9      	uxtb	r1, r3
    58f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58f2:	1c5a      	adds	r2, r3, #1
    58f4:	663a      	str	r2, [r7, #96]	; 0x60
    58f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    58fa:	4413      	add	r3, r2
    58fc:	460a      	mov	r2, r1
    58fe:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    5902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5904:	4a40      	ldr	r2, [pc, #256]	; (5a08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    5906:	fba2 2303 	umull	r2, r3, r2, r3
    590a:	08db      	lsrs	r3, r3, #3
    590c:	657b      	str	r3, [r7, #84]	; 0x54
    590e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5910:	2b00      	cmp	r3, #0
    5912:	bf0c      	ite	eq
    5914:	2301      	moveq	r3, #1
    5916:	2300      	movne	r3, #0
    5918:	b2db      	uxtb	r3, r3
    591a:	2b00      	cmp	r3, #0
    591c:	d100      	bne.n	5920 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    591e:	e7d4      	b.n	58ca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    5920:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    5922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5924:	2b1f      	cmp	r3, #31
    5926:	d806      	bhi.n	5936 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    5928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    592a:	1e5a      	subs	r2, r3, #1
    592c:	653a      	str	r2, [r7, #80]	; 0x50
    592e:	2b00      	cmp	r3, #0
    5930:	d001      	beq.n	5936 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    5932:	2301      	movs	r3, #1
    5934:	e000      	b.n	5938 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    5936:	2300      	movs	r3, #0
    5938:	2b00      	cmp	r3, #0
    593a:	d009      	beq.n	5950 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    593c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    593e:	1c5a      	adds	r2, r3, #1
    5940:	663a      	str	r2, [r7, #96]	; 0x60
    5942:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5946:	4413      	add	r3, r2
    5948:	2230      	movs	r2, #48	; 0x30
    594a:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    594e:	e7e8      	b.n	5922 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    5950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5952:	2b1f      	cmp	r3, #31
    5954:	d808      	bhi.n	5968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    5956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5958:	1c5a      	adds	r2, r3, #1
    595a:	663a      	str	r2, [r7, #96]	; 0x60
    595c:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5960:	4413      	add	r3, r2
    5962:	222e      	movs	r2, #46	; 0x2e
    5964:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    5968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    596a:	2b1f      	cmp	r3, #31
    596c:	d829      	bhi.n	59c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    596e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5970:	4b26      	ldr	r3, [pc, #152]	; (5a0c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    5972:	fb83 1302 	smull	r1, r3, r3, r2
    5976:	1099      	asrs	r1, r3, #2
    5978:	17d3      	asrs	r3, r2, #31
    597a:	1ac9      	subs	r1, r1, r3
    597c:	460b      	mov	r3, r1
    597e:	009b      	lsls	r3, r3, #2
    5980:	440b      	add	r3, r1
    5982:	005b      	lsls	r3, r3, #1
    5984:	1ad1      	subs	r1, r2, r3
    5986:	b2cb      	uxtb	r3, r1
    5988:	3330      	adds	r3, #48	; 0x30
    598a:	b2d9      	uxtb	r1, r3
    598c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    598e:	1c5a      	adds	r2, r3, #1
    5990:	663a      	str	r2, [r7, #96]	; 0x60
    5992:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5996:	4413      	add	r3, r2
    5998:	460a      	mov	r2, r1
    599a:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    599e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    59a0:	4a1a      	ldr	r2, [pc, #104]	; (5a0c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    59a2:	fb82 1203 	smull	r1, r2, r2, r3
    59a6:	1092      	asrs	r2, r2, #2
    59a8:	17db      	asrs	r3, r3, #31
    59aa:	1ad3      	subs	r3, r2, r3
    59ac:	65bb      	str	r3, [r7, #88]	; 0x58
    59ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    59b0:	2b00      	cmp	r3, #0
    59b2:	bf0c      	ite	eq
    59b4:	2301      	moveq	r3, #1
    59b6:	2300      	movne	r3, #0
    59b8:	b2db      	uxtb	r3, r3
    59ba:	2b00      	cmp	r3, #0
    59bc:	d100      	bne.n	59c0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    59be:	e7d3      	b.n	5968 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    59c0:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    59c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    59c6:	f003 0302 	and.w	r3, r3, #2
    59ca:	2b00      	cmp	r3, #0
    59cc:	d120      	bne.n	5a10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    59ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    59d2:	f003 0301 	and.w	r3, r3, #1
    59d6:	2b00      	cmp	r3, #0
    59d8:	d01a      	beq.n	5a10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    59da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    59dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    59de:	429a      	cmp	r2, r3
    59e0:	d216      	bcs.n	5a10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    59e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    59e4:	2b1f      	cmp	r3, #31
    59e6:	d813      	bhi.n	5a10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    59e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    59ea:	1c5a      	adds	r2, r3, #1
    59ec:	663a      	str	r2, [r7, #96]	; 0x60
    59ee:	f107 0268 	add.w	r2, r7, #104	; 0x68
    59f2:	4413      	add	r3, r2
    59f4:	2230      	movs	r2, #48	; 0x30
    59f6:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    59fa:	e7e2      	b.n	59c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    59fc:	00000000 	.word	0x00000000
    5a00:	0000a418 	.word	0x0000a418
    5a04:	4f000000 	.word	0x4f000000
    5a08:	cccccccd 	.word	0xcccccccd
    5a0c:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    5a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5a12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5a14:	429a      	cmp	r2, r3
    5a16:	d112      	bne.n	5a3e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    5a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d10b      	bne.n	5a38 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    5a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a24:	f003 0304 	and.w	r3, r3, #4
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d105      	bne.n	5a38 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    5a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a30:	f003 0308 	and.w	r3, r3, #8
    5a34:	2b00      	cmp	r3, #0
    5a36:	d002      	beq.n	5a3e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    5a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a3a:	3b01      	subs	r3, #1
    5a3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    5a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a40:	2b1f      	cmp	r3, #31
    5a42:	d82c      	bhi.n	5a9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    5a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d009      	beq.n	5a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    5a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a4e:	1c5a      	adds	r2, r3, #1
    5a50:	663a      	str	r2, [r7, #96]	; 0x60
    5a52:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5a56:	4413      	add	r3, r2
    5a58:	222d      	movs	r2, #45	; 0x2d
    5a5a:	f803 2c50 	strb.w	r2, [r3, #-80]
    5a5e:	e01e      	b.n	5a9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    5a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a64:	f003 0304 	and.w	r3, r3, #4
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d009      	beq.n	5a80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    5a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a6e:	1c5a      	adds	r2, r3, #1
    5a70:	663a      	str	r2, [r7, #96]	; 0x60
    5a72:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5a76:	4413      	add	r3, r2
    5a78:	222b      	movs	r2, #43	; 0x2b
    5a7a:	f803 2c50 	strb.w	r2, [r3, #-80]
    5a7e:	e00e      	b.n	5a9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    5a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a84:	f003 0308 	and.w	r3, r3, #8
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d008      	beq.n	5a9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    5a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a8e:	1c5a      	adds	r2, r3, #1
    5a90:	663a      	str	r2, [r7, #96]	; 0x60
    5a92:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5a96:	4413      	add	r3, r2
    5a98:	2220      	movs	r2, #32
    5a9a:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    5a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5aa2:	f003 0302 	and.w	r3, r3, #2
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d117      	bne.n	5ada <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    5aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5aae:	f003 0301 	and.w	r3, r3, #1
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d111      	bne.n	5ada <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    5ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
    5aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5abe:	429a      	cmp	r2, r3
    5ac0:	d20b      	bcs.n	5ada <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    5ac2:	68fa      	ldr	r2, [r7, #12]
    5ac4:	1c53      	adds	r3, r2, #1
    5ac6:	60fb      	str	r3, [r7, #12]
    5ac8:	697c      	ldr	r4, [r7, #20]
    5aca:	68bb      	ldr	r3, [r7, #8]
    5acc:	6939      	ldr	r1, [r7, #16]
    5ace:	2020      	movs	r0, #32
    5ad0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    5ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5ad4:	3301      	adds	r3, #1
    5ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    5ad8:	e7ef      	b.n	5aba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    5ada:	2300      	movs	r3, #0
    5adc:	64bb      	str	r3, [r7, #72]	; 0x48
    5ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
    5ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5ae2:	429a      	cmp	r2, r3
    5ae4:	d213      	bcs.n	5b0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    5ae6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5aea:	1ad3      	subs	r3, r2, r3
    5aec:	3b01      	subs	r3, #1
    5aee:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5af2:	4413      	add	r3, r2
    5af4:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    5af8:	68fa      	ldr	r2, [r7, #12]
    5afa:	1c53      	adds	r3, r2, #1
    5afc:	60fb      	str	r3, [r7, #12]
    5afe:	697c      	ldr	r4, [r7, #20]
    5b00:	68bb      	ldr	r3, [r7, #8]
    5b02:	6939      	ldr	r1, [r7, #16]
    5b04:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    5b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5b08:	3301      	adds	r3, #1
    5b0a:	64bb      	str	r3, [r7, #72]	; 0x48
    5b0c:	e7e7      	b.n	5ade <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    5b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5b12:	f003 0302 	and.w	r3, r3, #2
    5b16:	2b00      	cmp	r3, #0
    5b18:	d00e      	beq.n	5b38 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    5b1a:	68fa      	ldr	r2, [r7, #12]
    5b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5b1e:	1ad3      	subs	r3, r2, r3
    5b20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    5b22:	429a      	cmp	r2, r3
    5b24:	d908      	bls.n	5b38 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    5b26:	68fa      	ldr	r2, [r7, #12]
    5b28:	1c53      	adds	r3, r2, #1
    5b2a:	60fb      	str	r3, [r7, #12]
    5b2c:	697c      	ldr	r4, [r7, #20]
    5b2e:	68bb      	ldr	r3, [r7, #8]
    5b30:	6939      	ldr	r1, [r7, #16]
    5b32:	2020      	movs	r0, #32
    5b34:	47a0      	blx	r4
    while (idx - start_idx < width) {
    5b36:	e7f0      	b.n	5b1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    5b38:	68fb      	ldr	r3, [r7, #12]
}
    5b3a:	4618      	mov	r0, r3
    5b3c:	376c      	adds	r7, #108	; 0x6c
    5b3e:	46bd      	mov	sp, r7
    5b40:	bd90      	pop	{r4, r7, pc}
    5b42:	bf00      	nop

00005b44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    5b44:	b5b0      	push	{r4, r5, r7, lr}
    5b46:	b0a0      	sub	sp, #128	; 0x80
    5b48:	af0a      	add	r7, sp, #40	; 0x28
    5b4a:	60f8      	str	r0, [r7, #12]
    5b4c:	60b9      	str	r1, [r7, #8]
    5b4e:	607a      	str	r2, [r7, #4]
    5b50:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    5b52:	2300      	movs	r3, #0
    5b54:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    5b56:	68bb      	ldr	r3, [r7, #8]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d101      	bne.n	5b60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    5b5c:	4ba2      	ldr	r3, [pc, #648]	; (5de8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    5b5e:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    5b60:	683b      	ldr	r3, [r7, #0]
    5b62:	781b      	ldrb	r3, [r3, #0]
    5b64:	2b00      	cmp	r3, #0
    5b66:	f000 8445 	beq.w	63f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    5b6a:	683b      	ldr	r3, [r7, #0]
    5b6c:	781b      	ldrb	r3, [r3, #0]
    5b6e:	2b25      	cmp	r3, #37	; 0x25
    5b70:	d00d      	beq.n	5b8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    5b72:	683b      	ldr	r3, [r7, #0]
    5b74:	7818      	ldrb	r0, [r3, #0]
    5b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5b78:	1c53      	adds	r3, r2, #1
    5b7a:	647b      	str	r3, [r7, #68]	; 0x44
    5b7c:	68fc      	ldr	r4, [r7, #12]
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	68b9      	ldr	r1, [r7, #8]
    5b82:	47a0      	blx	r4
      format++;
    5b84:	683b      	ldr	r3, [r7, #0]
    5b86:	3301      	adds	r3, #1
    5b88:	603b      	str	r3, [r7, #0]
      continue;
    5b8a:	f000 bc31 	b.w	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    5b8e:	683b      	ldr	r3, [r7, #0]
    5b90:	3301      	adds	r3, #1
    5b92:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    5b94:	2300      	movs	r3, #0
    5b96:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    5b98:	683b      	ldr	r3, [r7, #0]
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	3b20      	subs	r3, #32
    5b9e:	2b10      	cmp	r3, #16
    5ba0:	d856      	bhi.n	5c50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    5ba2:	a201      	add	r2, pc, #4	; (adr r2, 5ba8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    5ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5ba8:	00005c29 	.word	0x00005c29
    5bac:	00005c51 	.word	0x00005c51
    5bb0:	00005c51 	.word	0x00005c51
    5bb4:	00005c3d 	.word	0x00005c3d
    5bb8:	00005c51 	.word	0x00005c51
    5bbc:	00005c51 	.word	0x00005c51
    5bc0:	00005c51 	.word	0x00005c51
    5bc4:	00005c51 	.word	0x00005c51
    5bc8:	00005c51 	.word	0x00005c51
    5bcc:	00005c51 	.word	0x00005c51
    5bd0:	00005c51 	.word	0x00005c51
    5bd4:	00005c15 	.word	0x00005c15
    5bd8:	00005c51 	.word	0x00005c51
    5bdc:	00005c01 	.word	0x00005c01
    5be0:	00005c51 	.word	0x00005c51
    5be4:	00005c51 	.word	0x00005c51
    5be8:	00005bed 	.word	0x00005bed
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    5bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bee:	f043 0301 	orr.w	r3, r3, #1
    5bf2:	657b      	str	r3, [r7, #84]	; 0x54
    5bf4:	683b      	ldr	r3, [r7, #0]
    5bf6:	3301      	adds	r3, #1
    5bf8:	603b      	str	r3, [r7, #0]
    5bfa:	2301      	movs	r3, #1
    5bfc:	64bb      	str	r3, [r7, #72]	; 0x48
    5bfe:	e02a      	b.n	5c56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    5c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c02:	f043 0302 	orr.w	r3, r3, #2
    5c06:	657b      	str	r3, [r7, #84]	; 0x54
    5c08:	683b      	ldr	r3, [r7, #0]
    5c0a:	3301      	adds	r3, #1
    5c0c:	603b      	str	r3, [r7, #0]
    5c0e:	2301      	movs	r3, #1
    5c10:	64bb      	str	r3, [r7, #72]	; 0x48
    5c12:	e020      	b.n	5c56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    5c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c16:	f043 0304 	orr.w	r3, r3, #4
    5c1a:	657b      	str	r3, [r7, #84]	; 0x54
    5c1c:	683b      	ldr	r3, [r7, #0]
    5c1e:	3301      	adds	r3, #1
    5c20:	603b      	str	r3, [r7, #0]
    5c22:	2301      	movs	r3, #1
    5c24:	64bb      	str	r3, [r7, #72]	; 0x48
    5c26:	e016      	b.n	5c56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    5c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c2a:	f043 0308 	orr.w	r3, r3, #8
    5c2e:	657b      	str	r3, [r7, #84]	; 0x54
    5c30:	683b      	ldr	r3, [r7, #0]
    5c32:	3301      	adds	r3, #1
    5c34:	603b      	str	r3, [r7, #0]
    5c36:	2301      	movs	r3, #1
    5c38:	64bb      	str	r3, [r7, #72]	; 0x48
    5c3a:	e00c      	b.n	5c56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    5c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c3e:	f043 0310 	orr.w	r3, r3, #16
    5c42:	657b      	str	r3, [r7, #84]	; 0x54
    5c44:	683b      	ldr	r3, [r7, #0]
    5c46:	3301      	adds	r3, #1
    5c48:	603b      	str	r3, [r7, #0]
    5c4a:	2301      	movs	r3, #1
    5c4c:	64bb      	str	r3, [r7, #72]	; 0x48
    5c4e:	e002      	b.n	5c56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    5c50:	2300      	movs	r3, #0
    5c52:	64bb      	str	r3, [r7, #72]	; 0x48
    5c54:	bf00      	nop
      }
    } while (n);
    5c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d000      	beq.n	5c5e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    5c5c:	e79c      	b.n	5b98 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    5c5e:	2300      	movs	r3, #0
    5c60:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    5c62:	683b      	ldr	r3, [r7, #0]
    5c64:	781b      	ldrb	r3, [r3, #0]
    5c66:	4618      	mov	r0, r3
    5c68:	f7ff fb19 	bl	529e <_is_digit(char)>
    5c6c:	4603      	mov	r3, r0
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d005      	beq.n	5c7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    5c72:	463b      	mov	r3, r7
    5c74:	4618      	mov	r0, r3
    5c76:	f7ff fb26 	bl	52c6 <_atoi(char const**)>
    5c7a:	6538      	str	r0, [r7, #80]	; 0x50
    5c7c:	e018      	b.n	5cb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    5c7e:	683b      	ldr	r3, [r7, #0]
    5c80:	781b      	ldrb	r3, [r3, #0]
    5c82:	2b2a      	cmp	r3, #42	; 0x2a
    5c84:	d114      	bne.n	5cb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    5c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5c88:	1d1a      	adds	r2, r3, #4
    5c8a:	66ba      	str	r2, [r7, #104]	; 0x68
    5c8c:	681b      	ldr	r3, [r3, #0]
    5c8e:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    5c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c92:	2b00      	cmp	r3, #0
    5c94:	da07      	bge.n	5ca6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    5c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c98:	f043 0302 	orr.w	r3, r3, #2
    5c9c:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    5c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ca0:	425b      	negs	r3, r3
    5ca2:	653b      	str	r3, [r7, #80]	; 0x50
    5ca4:	e001      	b.n	5caa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    5ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ca8:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    5caa:	683b      	ldr	r3, [r7, #0]
    5cac:	3301      	adds	r3, #1
    5cae:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    5cb0:	2300      	movs	r3, #0
    5cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    5cb4:	683b      	ldr	r3, [r7, #0]
    5cb6:	781b      	ldrb	r3, [r3, #0]
    5cb8:	2b2e      	cmp	r3, #46	; 0x2e
    5cba:	d124      	bne.n	5d06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    5cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5cc2:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    5cc4:	683b      	ldr	r3, [r7, #0]
    5cc6:	3301      	adds	r3, #1
    5cc8:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    5cca:	683b      	ldr	r3, [r7, #0]
    5ccc:	781b      	ldrb	r3, [r3, #0]
    5cce:	4618      	mov	r0, r3
    5cd0:	f7ff fae5 	bl	529e <_is_digit(char)>
    5cd4:	4603      	mov	r3, r0
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d005      	beq.n	5ce6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    5cda:	463b      	mov	r3, r7
    5cdc:	4618      	mov	r0, r3
    5cde:	f7ff faf2 	bl	52c6 <_atoi(char const**)>
    5ce2:	64f8      	str	r0, [r7, #76]	; 0x4c
    5ce4:	e00f      	b.n	5d06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    5ce6:	683b      	ldr	r3, [r7, #0]
    5ce8:	781b      	ldrb	r3, [r3, #0]
    5cea:	2b2a      	cmp	r3, #42	; 0x2a
    5cec:	d10b      	bne.n	5d06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    5cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5cf0:	1d1a      	adds	r2, r3, #4
    5cf2:	66ba      	str	r2, [r7, #104]	; 0x68
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    5cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    5d00:	683b      	ldr	r3, [r7, #0]
    5d02:	3301      	adds	r3, #1
    5d04:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    5d06:	683b      	ldr	r3, [r7, #0]
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	3b68      	subs	r3, #104	; 0x68
    5d0c:	2b12      	cmp	r3, #18
    5d0e:	d867      	bhi.n	5de0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    5d10:	a201      	add	r2, pc, #4	; (adr r2, 5d18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    5d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5d16:	bf00      	nop
    5d18:	00005d8b 	.word	0x00005d8b
    5d1c:	00005de1 	.word	0x00005de1
    5d20:	00005dc1 	.word	0x00005dc1
    5d24:	00005de1 	.word	0x00005de1
    5d28:	00005d65 	.word	0x00005d65
    5d2c:	00005de1 	.word	0x00005de1
    5d30:	00005de1 	.word	0x00005de1
    5d34:	00005de1 	.word	0x00005de1
    5d38:	00005de1 	.word	0x00005de1
    5d3c:	00005de1 	.word	0x00005de1
    5d40:	00005de1 	.word	0x00005de1
    5d44:	00005de1 	.word	0x00005de1
    5d48:	00005db1 	.word	0x00005db1
    5d4c:	00005de1 	.word	0x00005de1
    5d50:	00005de1 	.word	0x00005de1
    5d54:	00005de1 	.word	0x00005de1
    5d58:	00005de1 	.word	0x00005de1
    5d5c:	00005de1 	.word	0x00005de1
    5d60:	00005dd1 	.word	0x00005dd1
      case 'l' :
        flags |= FLAGS_LONG;
    5d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d6a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d6c:	683b      	ldr	r3, [r7, #0]
    5d6e:	3301      	adds	r3, #1
    5d70:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    5d72:	683b      	ldr	r3, [r7, #0]
    5d74:	781b      	ldrb	r3, [r3, #0]
    5d76:	2b6c      	cmp	r3, #108	; 0x6c
    5d78:	d134      	bne.n	5de4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    5d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5d80:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    5d82:	683b      	ldr	r3, [r7, #0]
    5d84:	3301      	adds	r3, #1
    5d86:	603b      	str	r3, [r7, #0]
        }
        break;
    5d88:	e02c      	b.n	5de4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    5d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5d90:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d92:	683b      	ldr	r3, [r7, #0]
    5d94:	3301      	adds	r3, #1
    5d96:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    5d98:	683b      	ldr	r3, [r7, #0]
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	2b68      	cmp	r3, #104	; 0x68
    5d9e:	d125      	bne.n	5dec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    5da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5da6:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    5da8:	683b      	ldr	r3, [r7, #0]
    5daa:	3301      	adds	r3, #1
    5dac:	603b      	str	r3, [r7, #0]
        }
        break;
    5dae:	e01d      	b.n	5dec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5db6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5db8:	683b      	ldr	r3, [r7, #0]
    5dba:	3301      	adds	r3, #1
    5dbc:	603b      	str	r3, [r7, #0]
        break;
    5dbe:	e016      	b.n	5dee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5dc6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5dc8:	683b      	ldr	r3, [r7, #0]
    5dca:	3301      	adds	r3, #1
    5dcc:	603b      	str	r3, [r7, #0]
        break;
    5dce:	e00e      	b.n	5dee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5dd6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5dd8:	683b      	ldr	r3, [r7, #0]
    5dda:	3301      	adds	r3, #1
    5ddc:	603b      	str	r3, [r7, #0]
        break;
    5dde:	e006      	b.n	5dee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    5de0:	bf00      	nop
    5de2:	e004      	b.n	5dee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    5de4:	bf00      	nop
    5de6:	e002      	b.n	5dee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    5de8:	00005255 	.word	0x00005255
        break;
    5dec:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    5dee:	683b      	ldr	r3, [r7, #0]
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	3b25      	subs	r3, #37	; 0x25
    5df4:	2b53      	cmp	r3, #83	; 0x53
    5df6:	f200 82ee 	bhi.w	63d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    5dfa:	a201      	add	r2, pc, #4	; (adr r2, 5e00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    5dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e00:	000063bf 	.word	0x000063bf
    5e04:	000063d7 	.word	0x000063d7
    5e08:	000063d7 	.word	0x000063d7
    5e0c:	000063d7 	.word	0x000063d7
    5e10:	000063d7 	.word	0x000063d7
    5e14:	000063d7 	.word	0x000063d7
    5e18:	000063d7 	.word	0x000063d7
    5e1c:	000063d7 	.word	0x000063d7
    5e20:	000063d7 	.word	0x000063d7
    5e24:	000063d7 	.word	0x000063d7
    5e28:	000063d7 	.word	0x000063d7
    5e2c:	000063d7 	.word	0x000063d7
    5e30:	000063d7 	.word	0x000063d7
    5e34:	000063d7 	.word	0x000063d7
    5e38:	000063d7 	.word	0x000063d7
    5e3c:	000063d7 	.word	0x000063d7
    5e40:	000063d7 	.word	0x000063d7
    5e44:	000063d7 	.word	0x000063d7
    5e48:	000063d7 	.word	0x000063d7
    5e4c:	000063d7 	.word	0x000063d7
    5e50:	000063d7 	.word	0x000063d7
    5e54:	000063d7 	.word	0x000063d7
    5e58:	000063d7 	.word	0x000063d7
    5e5c:	000063d7 	.word	0x000063d7
    5e60:	000063d7 	.word	0x000063d7
    5e64:	000063d7 	.word	0x000063d7
    5e68:	000063d7 	.word	0x000063d7
    5e6c:	000063d7 	.word	0x000063d7
    5e70:	000063d7 	.word	0x000063d7
    5e74:	000063d7 	.word	0x000063d7
    5e78:	000063d7 	.word	0x000063d7
    5e7c:	000063d7 	.word	0x000063d7
    5e80:	000063d7 	.word	0x000063d7
    5e84:	000061dd 	.word	0x000061dd
    5e88:	000063d7 	.word	0x000063d7
    5e8c:	000063d7 	.word	0x000063d7
    5e90:	000063d7 	.word	0x000063d7
    5e94:	000063d7 	.word	0x000063d7
    5e98:	000063d7 	.word	0x000063d7
    5e9c:	000063d7 	.word	0x000063d7
    5ea0:	000063d7 	.word	0x000063d7
    5ea4:	000063d7 	.word	0x000063d7
    5ea8:	000063d7 	.word	0x000063d7
    5eac:	000063d7 	.word	0x000063d7
    5eb0:	000063d7 	.word	0x000063d7
    5eb4:	000063d7 	.word	0x000063d7
    5eb8:	000063d7 	.word	0x000063d7
    5ebc:	000063d7 	.word	0x000063d7
    5ec0:	000063d7 	.word	0x000063d7
    5ec4:	000063d7 	.word	0x000063d7
    5ec8:	000063d7 	.word	0x000063d7
    5ecc:	00005f51 	.word	0x00005f51
    5ed0:	000063d7 	.word	0x000063d7
    5ed4:	000063d7 	.word	0x000063d7
    5ed8:	000063d7 	.word	0x000063d7
    5edc:	000063d7 	.word	0x000063d7
    5ee0:	000063d7 	.word	0x000063d7
    5ee4:	000063d7 	.word	0x000063d7
    5ee8:	000063d7 	.word	0x000063d7
    5eec:	000063d7 	.word	0x000063d7
    5ef0:	000063d7 	.word	0x000063d7
    5ef4:	00005f51 	.word	0x00005f51
    5ef8:	00006219 	.word	0x00006219
    5efc:	00005f51 	.word	0x00005f51
    5f00:	000063d7 	.word	0x000063d7
    5f04:	000061dd 	.word	0x000061dd
    5f08:	000063d7 	.word	0x000063d7
    5f0c:	000063d7 	.word	0x000063d7
    5f10:	00005f51 	.word	0x00005f51
    5f14:	000063d7 	.word	0x000063d7
    5f18:	000063d7 	.word	0x000063d7
    5f1c:	000063d7 	.word	0x000063d7
    5f20:	000063d7 	.word	0x000063d7
    5f24:	000063d7 	.word	0x000063d7
    5f28:	00005f51 	.word	0x00005f51
    5f2c:	00006377 	.word	0x00006377
    5f30:	000063d7 	.word	0x000063d7
    5f34:	000063d7 	.word	0x000063d7
    5f38:	000062a1 	.word	0x000062a1
    5f3c:	000063d7 	.word	0x000063d7
    5f40:	00005f51 	.word	0x00005f51
    5f44:	000063d7 	.word	0x000063d7
    5f48:	000063d7 	.word	0x000063d7
    5f4c:	00005f51 	.word	0x00005f51
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    5f50:	683b      	ldr	r3, [r7, #0]
    5f52:	781b      	ldrb	r3, [r3, #0]
    5f54:	2b78      	cmp	r3, #120	; 0x78
    5f56:	d003      	beq.n	5f60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    5f58:	683b      	ldr	r3, [r7, #0]
    5f5a:	781b      	ldrb	r3, [r3, #0]
    5f5c:	2b58      	cmp	r3, #88	; 0x58
    5f5e:	d102      	bne.n	5f66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    5f60:	2310      	movs	r3, #16
    5f62:	643b      	str	r3, [r7, #64]	; 0x40
    5f64:	e013      	b.n	5f8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    5f66:	683b      	ldr	r3, [r7, #0]
    5f68:	781b      	ldrb	r3, [r3, #0]
    5f6a:	2b6f      	cmp	r3, #111	; 0x6f
    5f6c:	d102      	bne.n	5f74 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    5f6e:	2308      	movs	r3, #8
    5f70:	643b      	str	r3, [r7, #64]	; 0x40
    5f72:	e00c      	b.n	5f8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    5f74:	683b      	ldr	r3, [r7, #0]
    5f76:	781b      	ldrb	r3, [r3, #0]
    5f78:	2b62      	cmp	r3, #98	; 0x62
    5f7a:	d102      	bne.n	5f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    5f7c:	2302      	movs	r3, #2
    5f7e:	643b      	str	r3, [r7, #64]	; 0x40
    5f80:	e005      	b.n	5f8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    5f82:	230a      	movs	r3, #10
    5f84:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    5f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f88:	f023 0310 	bic.w	r3, r3, #16
    5f8c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    5f8e:	683b      	ldr	r3, [r7, #0]
    5f90:	781b      	ldrb	r3, [r3, #0]
    5f92:	2b58      	cmp	r3, #88	; 0x58
    5f94:	d103      	bne.n	5f9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    5f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f98:	f043 0320 	orr.w	r3, r3, #32
    5f9c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    5f9e:	683b      	ldr	r3, [r7, #0]
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	2b69      	cmp	r3, #105	; 0x69
    5fa4:	d007      	beq.n	5fb6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	781b      	ldrb	r3, [r3, #0]
    5faa:	2b64      	cmp	r3, #100	; 0x64
    5fac:	d003      	beq.n	5fb6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    5fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5fb0:	f023 030c 	bic.w	r3, r3, #12
    5fb4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    5fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d003      	beq.n	5fc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    5fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5fc2:	f023 0301 	bic.w	r3, r3, #1
    5fc6:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    5fc8:	683b      	ldr	r3, [r7, #0]
    5fca:	781b      	ldrb	r3, [r3, #0]
    5fcc:	2b69      	cmp	r3, #105	; 0x69
    5fce:	d004      	beq.n	5fda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    5fd0:	683b      	ldr	r3, [r7, #0]
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	2b64      	cmp	r3, #100	; 0x64
    5fd6:	f040 808d 	bne.w	60f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    5fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	d02e      	beq.n	6042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    5fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5fe6:	3307      	adds	r3, #7
    5fe8:	f023 0307 	bic.w	r3, r3, #7
    5fec:	f103 0208 	add.w	r2, r3, #8
    5ff0:	66ba      	str	r2, [r7, #104]	; 0x68
    5ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
    5ff6:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5ffa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    5ffe:	2b00      	cmp	r3, #0
    6000:	f174 0200 	sbcs.w	r2, r4, #0
    6004:	da02      	bge.n	600c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    6006:	425b      	negs	r3, r3
    6008:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    600c:	4619      	mov	r1, r3
    600e:	4622      	mov	r2, r4
    6010:	697b      	ldr	r3, [r7, #20]
    6012:	0fdb      	lsrs	r3, r3, #31
    6014:	b2d8      	uxtb	r0, r3
    6016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6018:	f04f 0400 	mov.w	r4, #0
    601c:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    601e:	9508      	str	r5, [sp, #32]
    6020:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    6022:	9507      	str	r5, [sp, #28]
    6024:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    6026:	9506      	str	r5, [sp, #24]
    6028:	e9cd 3404 	strd	r3, r4, [sp, #16]
    602c:	9002      	str	r0, [sp, #8]
    602e:	e9cd 1200 	strd	r1, r2, [sp]
    6032:	687b      	ldr	r3, [r7, #4]
    6034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6036:	68b9      	ldr	r1, [r7, #8]
    6038:	68f8      	ldr	r0, [r7, #12]
    603a:	f7ff faf1 	bl	5620 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    603e:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    6040:	e0c8      	b.n	61d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    6042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6044:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6048:	2b00      	cmp	r3, #0
    604a:	d01e      	beq.n	608a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    604c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    604e:	1d1a      	adds	r2, r3, #4
    6050:	66ba      	str	r2, [r7, #104]	; 0x68
    6052:	681b      	ldr	r3, [r3, #0]
    6054:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    6056:	69fb      	ldr	r3, [r7, #28]
    6058:	2b00      	cmp	r3, #0
    605a:	bfb8      	it	lt
    605c:	425b      	neglt	r3, r3
    605e:	4619      	mov	r1, r3
    6060:	69fb      	ldr	r3, [r7, #28]
    6062:	0fdb      	lsrs	r3, r3, #31
    6064:	b2db      	uxtb	r3, r3
    6066:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6068:	9205      	str	r2, [sp, #20]
    606a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    606c:	9204      	str	r2, [sp, #16]
    606e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6070:	9203      	str	r2, [sp, #12]
    6072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6074:	9202      	str	r2, [sp, #8]
    6076:	9301      	str	r3, [sp, #4]
    6078:	9100      	str	r1, [sp, #0]
    607a:	687b      	ldr	r3, [r7, #4]
    607c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    607e:	68b9      	ldr	r1, [r7, #8]
    6080:	68f8      	ldr	r0, [r7, #12]
    6082:	f7ff fa65 	bl	5550 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    6086:	6478      	str	r0, [r7, #68]	; 0x44
          }
    6088:	e0a4      	b.n	61d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    608a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6090:	2b00      	cmp	r3, #0
    6092:	d005      	beq.n	60a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    6094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6096:	1d1a      	adds	r2, r3, #4
    6098:	66ba      	str	r2, [r7, #104]	; 0x68
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	b2db      	uxtb	r3, r3
    609e:	e00e      	b.n	60be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    60a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    60a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    60a6:	2b00      	cmp	r3, #0
    60a8:	d005      	beq.n	60b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    60aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    60ac:	1d1a      	adds	r2, r3, #4
    60ae:	66ba      	str	r2, [r7, #104]	; 0x68
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	b21b      	sxth	r3, r3
    60b4:	e003      	b.n	60be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    60b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    60b8:	1d1a      	adds	r2, r3, #4
    60ba:	66ba      	str	r2, [r7, #104]	; 0x68
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    60c0:	6a3b      	ldr	r3, [r7, #32]
    60c2:	2b00      	cmp	r3, #0
    60c4:	bfb8      	it	lt
    60c6:	425b      	neglt	r3, r3
    60c8:	4619      	mov	r1, r3
    60ca:	6a3b      	ldr	r3, [r7, #32]
    60cc:	0fdb      	lsrs	r3, r3, #31
    60ce:	b2db      	uxtb	r3, r3
    60d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    60d2:	9205      	str	r2, [sp, #20]
    60d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    60d6:	9204      	str	r2, [sp, #16]
    60d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    60da:	9203      	str	r2, [sp, #12]
    60dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    60de:	9202      	str	r2, [sp, #8]
    60e0:	9301      	str	r3, [sp, #4]
    60e2:	9100      	str	r1, [sp, #0]
    60e4:	687b      	ldr	r3, [r7, #4]
    60e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    60e8:	68b9      	ldr	r1, [r7, #8]
    60ea:	68f8      	ldr	r0, [r7, #12]
    60ec:	f7ff fa30 	bl	5550 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    60f0:	6478      	str	r0, [r7, #68]	; 0x44
          }
    60f2:	e06f      	b.n	61d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    60f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    60f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
    60fa:	2b00      	cmp	r3, #0
    60fc:	d020      	beq.n	6140 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    60fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6100:	3307      	adds	r3, #7
    6102:	f023 0307 	bic.w	r3, r3, #7
    6106:	f103 0208 	add.w	r2, r3, #8
    610a:	66ba      	str	r2, [r7, #104]	; 0x68
    610c:	e9d3 3400 	ldrd	r3, r4, [r3]
    6110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6112:	4611      	mov	r1, r2
    6114:	f04f 0200 	mov.w	r2, #0
    6118:	6d78      	ldr	r0, [r7, #84]	; 0x54
    611a:	9008      	str	r0, [sp, #32]
    611c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    611e:	9007      	str	r0, [sp, #28]
    6120:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    6122:	9006      	str	r0, [sp, #24]
    6124:	e9cd 1204 	strd	r1, r2, [sp, #16]
    6128:	2200      	movs	r2, #0
    612a:	9202      	str	r2, [sp, #8]
    612c:	e9cd 3400 	strd	r3, r4, [sp]
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6134:	68b9      	ldr	r1, [r7, #8]
    6136:	68f8      	ldr	r0, [r7, #12]
    6138:	f7ff fa72 	bl	5620 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    613c:	6478      	str	r0, [r7, #68]	; 0x44
    613e:	e049      	b.n	61d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    6140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6142:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6146:	2b00      	cmp	r3, #0
    6148:	d016      	beq.n	6178 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    614a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    614c:	1d1a      	adds	r2, r3, #4
    614e:	66ba      	str	r2, [r7, #104]	; 0x68
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6154:	9205      	str	r2, [sp, #20]
    6156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6158:	9204      	str	r2, [sp, #16]
    615a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    615c:	9203      	str	r2, [sp, #12]
    615e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6160:	9202      	str	r2, [sp, #8]
    6162:	2200      	movs	r2, #0
    6164:	9201      	str	r2, [sp, #4]
    6166:	9300      	str	r3, [sp, #0]
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    616c:	68b9      	ldr	r1, [r7, #8]
    616e:	68f8      	ldr	r0, [r7, #12]
    6170:	f7ff f9ee 	bl	5550 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    6174:	6478      	str	r0, [r7, #68]	; 0x44
    6176:	e02d      	b.n	61d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    6178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    617e:	2b00      	cmp	r3, #0
    6180:	d005      	beq.n	618e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    6182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6184:	1d1a      	adds	r2, r3, #4
    6186:	66ba      	str	r2, [r7, #104]	; 0x68
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	b2db      	uxtb	r3, r3
    618c:	e00e      	b.n	61ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    618e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6190:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6194:	2b00      	cmp	r3, #0
    6196:	d005      	beq.n	61a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    6198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    619a:	1d1a      	adds	r2, r3, #4
    619c:	66ba      	str	r2, [r7, #104]	; 0x68
    619e:	681b      	ldr	r3, [r3, #0]
    61a0:	b29b      	uxth	r3, r3
    61a2:	e003      	b.n	61ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    61a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    61a6:	1d1a      	adds	r2, r3, #4
    61a8:	66ba      	str	r2, [r7, #104]	; 0x68
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    61ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61b0:	9305      	str	r3, [sp, #20]
    61b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    61b4:	9304      	str	r3, [sp, #16]
    61b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    61b8:	9303      	str	r3, [sp, #12]
    61ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    61bc:	9302      	str	r3, [sp, #8]
    61be:	2300      	movs	r3, #0
    61c0:	9301      	str	r3, [sp, #4]
    61c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61c4:	9300      	str	r3, [sp, #0]
    61c6:	687b      	ldr	r3, [r7, #4]
    61c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    61ca:	68b9      	ldr	r1, [r7, #8]
    61cc:	68f8      	ldr	r0, [r7, #12]
    61ce:	f7ff f9bf 	bl	5550 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    61d2:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    61d4:	683b      	ldr	r3, [r7, #0]
    61d6:	3301      	adds	r3, #1
    61d8:	603b      	str	r3, [r7, #0]
        break;
    61da:	e109      	b.n	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    61dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    61de:	3307      	adds	r3, #7
    61e0:	f023 0307 	bic.w	r3, r3, #7
    61e4:	f103 0208 	add.w	r2, r3, #8
    61e8:	66ba      	str	r2, [r7, #104]	; 0x68
    61ea:	ed93 7b00 	vldr	d7, [r3]
    61ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61f0:	9302      	str	r3, [sp, #8]
    61f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    61f4:	9301      	str	r3, [sp, #4]
    61f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    61f8:	9300      	str	r3, [sp, #0]
    61fa:	eeb0 0a47 	vmov.f32	s0, s14
    61fe:	eef0 0a67 	vmov.f32	s1, s15
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6206:	68b9      	ldr	r1, [r7, #8]
    6208:	68f8      	ldr	r0, [r7, #12]
    620a:	f7ff fa79 	bl	5700 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    620e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    6210:	683b      	ldr	r3, [r7, #0]
    6212:	3301      	adds	r3, #1
    6214:	603b      	str	r3, [r7, #0]
        break;
    6216:	e0eb      	b.n	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    6218:	2301      	movs	r3, #1
    621a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    621c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    621e:	f003 0302 	and.w	r3, r3, #2
    6222:	2b00      	cmp	r3, #0
    6224:	d113      	bne.n	624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    6226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6228:	1c5a      	adds	r2, r3, #1
    622a:	63fa      	str	r2, [r7, #60]	; 0x3c
    622c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    622e:	429a      	cmp	r2, r3
    6230:	bf8c      	ite	hi
    6232:	2301      	movhi	r3, #1
    6234:	2300      	movls	r3, #0
    6236:	b2db      	uxtb	r3, r3
    6238:	2b00      	cmp	r3, #0
    623a:	d008      	beq.n	624e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    623c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    623e:	1c53      	adds	r3, r2, #1
    6240:	647b      	str	r3, [r7, #68]	; 0x44
    6242:	68fc      	ldr	r4, [r7, #12]
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	68b9      	ldr	r1, [r7, #8]
    6248:	2020      	movs	r0, #32
    624a:	47a0      	blx	r4
          while (l++ < width) {
    624c:	e7eb      	b.n	6226 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    624e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6250:	1d1a      	adds	r2, r3, #4
    6252:	66ba      	str	r2, [r7, #104]	; 0x68
    6254:	681b      	ldr	r3, [r3, #0]
    6256:	b2d8      	uxtb	r0, r3
    6258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    625a:	1c53      	adds	r3, r2, #1
    625c:	647b      	str	r3, [r7, #68]	; 0x44
    625e:	68fc      	ldr	r4, [r7, #12]
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	68b9      	ldr	r1, [r7, #8]
    6264:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    6266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6268:	f003 0302 	and.w	r3, r3, #2
    626c:	2b00      	cmp	r3, #0
    626e:	d013      	beq.n	6298 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    6270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6272:	1c5a      	adds	r2, r3, #1
    6274:	63fa      	str	r2, [r7, #60]	; 0x3c
    6276:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6278:	429a      	cmp	r2, r3
    627a:	bf8c      	ite	hi
    627c:	2301      	movhi	r3, #1
    627e:	2300      	movls	r3, #0
    6280:	b2db      	uxtb	r3, r3
    6282:	2b00      	cmp	r3, #0
    6284:	d008      	beq.n	6298 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    6286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6288:	1c53      	adds	r3, r2, #1
    628a:	647b      	str	r3, [r7, #68]	; 0x44
    628c:	68fc      	ldr	r4, [r7, #12]
    628e:	687b      	ldr	r3, [r7, #4]
    6290:	68b9      	ldr	r1, [r7, #8]
    6292:	2020      	movs	r0, #32
    6294:	47a0      	blx	r4
          while (l++ < width) {
    6296:	e7eb      	b.n	6270 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    6298:	683b      	ldr	r3, [r7, #0]
    629a:	3301      	adds	r3, #1
    629c:	603b      	str	r3, [r7, #0]
        break;
    629e:	e0a7      	b.n	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    62a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    62a2:	1d1a      	adds	r2, r3, #4
    62a4:	66ba      	str	r2, [r7, #104]	; 0x68
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    62aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    62ac:	f7fe ffe0 	bl	5270 <_strlen(char const*)>
    62b0:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    62b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    62b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    62b8:	2b00      	cmp	r3, #0
    62ba:	d007      	beq.n	62cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    62bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    62be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    62c0:	429a      	cmp	r2, r3
    62c2:	d201      	bcs.n	62c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    62c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    62c6:	e000      	b.n	62ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    62c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    62ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    62cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    62ce:	f003 0302 	and.w	r3, r3, #2
    62d2:	2b00      	cmp	r3, #0
    62d4:	d113      	bne.n	62fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    62d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    62d8:	1c5a      	adds	r2, r3, #1
    62da:	637a      	str	r2, [r7, #52]	; 0x34
    62dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    62de:	429a      	cmp	r2, r3
    62e0:	bf8c      	ite	hi
    62e2:	2301      	movhi	r3, #1
    62e4:	2300      	movls	r3, #0
    62e6:	b2db      	uxtb	r3, r3
    62e8:	2b00      	cmp	r3, #0
    62ea:	d008      	beq.n	62fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    62ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    62ee:	1c53      	adds	r3, r2, #1
    62f0:	647b      	str	r3, [r7, #68]	; 0x44
    62f2:	68fc      	ldr	r4, [r7, #12]
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	68b9      	ldr	r1, [r7, #8]
    62f8:	2020      	movs	r0, #32
    62fa:	47a0      	blx	r4
          while (l++ < width) {
    62fc:	e7eb      	b.n	62d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    62fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	2b00      	cmp	r3, #0
    6304:	d00b      	beq.n	631e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    6306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    630c:	2b00      	cmp	r3, #0
    630e:	d004      	beq.n	631a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    6310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6312:	1e5a      	subs	r2, r3, #1
    6314:	64fa      	str	r2, [r7, #76]	; 0x4c
    6316:	2b00      	cmp	r3, #0
    6318:	d001      	beq.n	631e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    631a:	2301      	movs	r3, #1
    631c:	e000      	b.n	6320 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    631e:	2300      	movs	r3, #0
    6320:	2b00      	cmp	r3, #0
    6322:	d00b      	beq.n	633c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    6324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6326:	1c5a      	adds	r2, r3, #1
    6328:	63ba      	str	r2, [r7, #56]	; 0x38
    632a:	7818      	ldrb	r0, [r3, #0]
    632c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    632e:	1c53      	adds	r3, r2, #1
    6330:	647b      	str	r3, [r7, #68]	; 0x44
    6332:	68fc      	ldr	r4, [r7, #12]
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	68b9      	ldr	r1, [r7, #8]
    6338:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    633a:	e7e0      	b.n	62fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    633c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    633e:	f003 0302 	and.w	r3, r3, #2
    6342:	2b00      	cmp	r3, #0
    6344:	d013      	beq.n	636e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    6346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6348:	1c5a      	adds	r2, r3, #1
    634a:	637a      	str	r2, [r7, #52]	; 0x34
    634c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    634e:	429a      	cmp	r2, r3
    6350:	bf8c      	ite	hi
    6352:	2301      	movhi	r3, #1
    6354:	2300      	movls	r3, #0
    6356:	b2db      	uxtb	r3, r3
    6358:	2b00      	cmp	r3, #0
    635a:	d008      	beq.n	636e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    635c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    635e:	1c53      	adds	r3, r2, #1
    6360:	647b      	str	r3, [r7, #68]	; 0x44
    6362:	68fc      	ldr	r4, [r7, #12]
    6364:	687b      	ldr	r3, [r7, #4]
    6366:	68b9      	ldr	r1, [r7, #8]
    6368:	2020      	movs	r0, #32
    636a:	47a0      	blx	r4
          while (l++ < width) {
    636c:	e7eb      	b.n	6346 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    636e:	683b      	ldr	r3, [r7, #0]
    6370:	3301      	adds	r3, #1
    6372:	603b      	str	r3, [r7, #0]
        break;
    6374:	e03c      	b.n	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    6376:	2308      	movs	r3, #8
    6378:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    637a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    637c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    6380:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    6382:	2300      	movs	r3, #0
    6384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    6388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    638a:	1d1a      	adds	r2, r3, #4
    638c:	66ba      	str	r2, [r7, #104]	; 0x68
    638e:	681b      	ldr	r3, [r3, #0]
    6390:	461a      	mov	r2, r3
    6392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6394:	9305      	str	r3, [sp, #20]
    6396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6398:	9304      	str	r3, [sp, #16]
    639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    639c:	9303      	str	r3, [sp, #12]
    639e:	2310      	movs	r3, #16
    63a0:	9302      	str	r3, [sp, #8]
    63a2:	2300      	movs	r3, #0
    63a4:	9301      	str	r3, [sp, #4]
    63a6:	9200      	str	r2, [sp, #0]
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    63ac:	68b9      	ldr	r1, [r7, #8]
    63ae:	68f8      	ldr	r0, [r7, #12]
    63b0:	f7ff f8ce 	bl	5550 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    63b4:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    63b6:	683b      	ldr	r3, [r7, #0]
    63b8:	3301      	adds	r3, #1
    63ba:	603b      	str	r3, [r7, #0]
        break;
    63bc:	e018      	b.n	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    63be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    63c0:	1c53      	adds	r3, r2, #1
    63c2:	647b      	str	r3, [r7, #68]	; 0x44
    63c4:	68fc      	ldr	r4, [r7, #12]
    63c6:	687b      	ldr	r3, [r7, #4]
    63c8:	68b9      	ldr	r1, [r7, #8]
    63ca:	2025      	movs	r0, #37	; 0x25
    63cc:	47a0      	blx	r4
        format++;
    63ce:	683b      	ldr	r3, [r7, #0]
    63d0:	3301      	adds	r3, #1
    63d2:	603b      	str	r3, [r7, #0]
        break;
    63d4:	e00c      	b.n	63f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    63d6:	683b      	ldr	r3, [r7, #0]
    63d8:	7818      	ldrb	r0, [r3, #0]
    63da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    63dc:	1c53      	adds	r3, r2, #1
    63de:	647b      	str	r3, [r7, #68]	; 0x44
    63e0:	68fc      	ldr	r4, [r7, #12]
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	68b9      	ldr	r1, [r7, #8]
    63e6:	47a0      	blx	r4
        format++;
    63e8:	683b      	ldr	r3, [r7, #0]
    63ea:	3301      	adds	r3, #1
    63ec:	603b      	str	r3, [r7, #0]
        break;
    63ee:	bf00      	nop
  while (*format)
    63f0:	f7ff bbb6 	b.w	5b60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    63f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	429a      	cmp	r2, r3
    63fa:	d302      	bcc.n	6402 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	1e5a      	subs	r2, r3, #1
    6400:	e000      	b.n	6404 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    6402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6404:	68fc      	ldr	r4, [r7, #12]
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	68b9      	ldr	r1, [r7, #8]
    640a:	2000      	movs	r0, #0
    640c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    640e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    6410:	4618      	mov	r0, r3
    6412:	3758      	adds	r7, #88	; 0x58
    6414:	46bd      	mov	sp, r7
    6416:	bdb0      	pop	{r4, r5, r7, pc}

00006418 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    6418:	b40f      	push	{r0, r1, r2, r3}
    641a:	b580      	push	{r7, lr}
    641c:	b0c4      	sub	sp, #272	; 0x110
    641e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    6420:	f507 738a 	add.w	r3, r7, #276	; 0x114
    6424:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    6428:	4639      	mov	r1, r7
    642a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    642e:	9300      	str	r3, [sp, #0]
    6430:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    6434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6438:	4807      	ldr	r0, [pc, #28]	; (6458 <printf+0x40>)
    643a:	f7ff fb83 	bl	5b44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    643e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    6442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    6446:	4618      	mov	r0, r3
    6448:	f507 7784 	add.w	r7, r7, #264	; 0x108
    644c:	46bd      	mov	sp, r7
    644e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    6452:	b004      	add	sp, #16
    6454:	4770      	bx	lr
    6456:	bf00      	nop
    6458:	000051e5 	.word	0x000051e5

0000645c <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    645c:	b480      	push	{r7}
    645e:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    6460:	bf00      	nop
    6462:	46bd      	mov	sp, r7
    6464:	f85d 7b04 	ldr.w	r7, [sp], #4
    6468:	4770      	bx	lr

0000646a <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    646a:	b580      	push	{r7, lr}
    646c:	b082      	sub	sp, #8
    646e:	af00      	add	r7, sp, #0
    6470:	6078      	str	r0, [r7, #4]
    6472:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    6474:	6839      	ldr	r1, [r7, #0]
    6476:	6878      	ldr	r0, [r7, #4]
    6478:	f000 f806 	bl	6488 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    647c:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    647e:	4618      	mov	r0, r3
    6480:	3708      	adds	r7, #8
    6482:	46bd      	mov	sp, r7
    6484:	bd80      	pop	{r7, pc}
    6486:	Address 0x0000000000006486 is out of bounds.


00006488 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    6488:	b5b0      	push	{r4, r5, r7, lr}
    648a:	b08c      	sub	sp, #48	; 0x30
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
    6490:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    6492:	4b2d      	ldr	r3, [pc, #180]	; (6548 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    6494:	681b      	ldr	r3, [r3, #0]
    6496:	f003 0301 	and.w	r3, r3, #1
    649a:	2b00      	cmp	r3, #0
    649c:	bf0c      	ite	eq
    649e:	2301      	moveq	r3, #1
    64a0:	2300      	movne	r3, #0
    64a2:	b2db      	uxtb	r3, r3
    64a4:	2b00      	cmp	r3, #0
    64a6:	d001      	beq.n	64ac <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    64a8:	683b      	ldr	r3, [r7, #0]
    64aa:	e049      	b.n	6540 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    64ac:	4b27      	ldr	r3, [pc, #156]	; (654c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    64ae:	681b      	ldr	r3, [r3, #0]
    64b0:	2b00      	cmp	r3, #0
    64b2:	d11d      	bne.n	64f0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    64b4:	4b26      	ldr	r3, [pc, #152]	; (6550 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    64b6:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    64b8:	2304      	movs	r3, #4
    64ba:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    64bc:	2303      	movs	r3, #3
    64be:	613b      	str	r3, [r7, #16]
    64c0:	2301      	movs	r3, #1
    64c2:	62bb      	str	r3, [r7, #40]	; 0x28
    64c4:	f107 0308 	add.w	r3, r7, #8
    64c8:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    64ca:	6abc      	ldr	r4, [r7, #40]	; 0x28
    64cc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    64ce:	4620      	mov	r0, r4
    64d0:	4629      	mov	r1, r5
    64d2:	beab      	bkpt	0x00ab
    64d4:	4604      	mov	r4, r0
    64d6:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    64d8:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    64da:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    64dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    64e2:	d102      	bne.n	64ea <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    64e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64e8:	e02a      	b.n	6540 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    64ea:	4a18      	ldr	r2, [pc, #96]	; (654c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    64ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64ee:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    64f0:	4b16      	ldr	r3, [pc, #88]	; (654c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    64f2:	681b      	ldr	r3, [r3, #0]
    64f4:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    64f6:	687b      	ldr	r3, [r7, #4]
    64f8:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    64fa:	683b      	ldr	r3, [r7, #0]
    64fc:	613b      	str	r3, [r7, #16]
    64fe:	2305      	movs	r3, #5
    6500:	61fb      	str	r3, [r7, #28]
    6502:	f107 0308 	add.w	r3, r7, #8
    6506:	61bb      	str	r3, [r7, #24]
  );
    6508:	69fc      	ldr	r4, [r7, #28]
    650a:	69bd      	ldr	r5, [r7, #24]
    650c:	4620      	mov	r0, r4
    650e:	4629      	mov	r1, r5
    6510:	beab      	bkpt	0x00ab
    6512:	4604      	mov	r4, r0
    6514:	617c      	str	r4, [r7, #20]
  return value;
    6516:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    6518:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    651c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6520:	d102      	bne.n	6528 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    6522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6526:	e00b      	b.n	6540 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    6528:	683b      	ldr	r3, [r7, #0]
    652a:	461a      	mov	r2, r3
    652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    652e:	4293      	cmp	r3, r2
    6530:	d102      	bne.n	6538 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    6532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6536:	e003      	b.n	6540 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    6538:	683b      	ldr	r3, [r7, #0]
    653a:	461a      	mov	r2, r3
    653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    653e:	1ad3      	subs	r3, r2, r3
}
    6540:	4618      	mov	r0, r3
    6542:	3730      	adds	r7, #48	; 0x30
    6544:	46bd      	mov	sp, r7
    6546:	bdb0      	pop	{r4, r5, r7, pc}
    6548:	e000edf0 	.word	0xe000edf0
    654c:	100003b8 	.word	0x100003b8
    6550:	0000a440 	.word	0x0000a440

00006554 <NVIC_EnableIRQ>:
{
    6554:	b480      	push	{r7}
    6556:	b083      	sub	sp, #12
    6558:	af00      	add	r7, sp, #0
    655a:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	f003 021f 	and.w	r2, r3, #31
    6562:	4907      	ldr	r1, [pc, #28]	; (6580 <NVIC_EnableIRQ+0x2c>)
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	095b      	lsrs	r3, r3, #5
    6568:	2001      	movs	r0, #1
    656a:	fa00 f202 	lsl.w	r2, r0, r2
    656e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6572:	bf00      	nop
    6574:	370c      	adds	r7, #12
    6576:	46bd      	mov	sp, r7
    6578:	f85d 7b04 	ldr.w	r7, [sp], #4
    657c:	4770      	bx	lr
    657e:	bf00      	nop
    6580:	e000e100 	.word	0xe000e100

00006584 <NVIC_DisableIRQ>:
{
    6584:	b480      	push	{r7}
    6586:	b083      	sub	sp, #12
    6588:	af00      	add	r7, sp, #0
    658a:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	f003 021f 	and.w	r2, r3, #31
    6592:	4907      	ldr	r1, [pc, #28]	; (65b0 <NVIC_DisableIRQ+0x2c>)
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	095b      	lsrs	r3, r3, #5
    6598:	2001      	movs	r0, #1
    659a:	fa00 f202 	lsl.w	r2, r0, r2
    659e:	3320      	adds	r3, #32
    65a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65a4:	bf00      	nop
    65a6:	370c      	adds	r7, #12
    65a8:	46bd      	mov	sp, r7
    65aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    65ae:	4770      	bx	lr
    65b0:	e000e100 	.word	0xe000e100

000065b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    65b4:	b480      	push	{r7}
    65b6:	b083      	sub	sp, #12
    65b8:	af00      	add	r7, sp, #0
    65ba:	6078      	str	r0, [r7, #4]
    65bc:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	2b00      	cmp	r3, #0
    65c2:	da0b      	bge.n	65dc <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65c4:	683b      	ldr	r3, [r7, #0]
    65c6:	b2da      	uxtb	r2, r3
    65c8:	490d      	ldr	r1, [pc, #52]	; (6600 <NVIC_SetPriority+0x4c>)
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	f003 030f 	and.w	r3, r3, #15
    65d0:	3b04      	subs	r3, #4
    65d2:	0152      	lsls	r2, r2, #5
    65d4:	b2d2      	uxtb	r2, r2
    65d6:	440b      	add	r3, r1
    65d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    65da:	e00a      	b.n	65f2 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65dc:	683b      	ldr	r3, [r7, #0]
    65de:	b2db      	uxtb	r3, r3
    65e0:	4a08      	ldr	r2, [pc, #32]	; (6604 <NVIC_SetPriority+0x50>)
    65e2:	6879      	ldr	r1, [r7, #4]
    65e4:	4608      	mov	r0, r1
    65e6:	015b      	lsls	r3, r3, #5
    65e8:	b2d9      	uxtb	r1, r3
    65ea:	1813      	adds	r3, r2, r0
    65ec:	460a      	mov	r2, r1
    65ee:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    65f2:	bf00      	nop
    65f4:	370c      	adds	r7, #12
    65f6:	46bd      	mov	sp, r7
    65f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fc:	4770      	bx	lr
    65fe:	bf00      	nop
    6600:	e000ed00 	.word	0xe000ed00
    6604:	e000e100 	.word	0xe000e100

00006608 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    6608:	b480      	push	{r7}
    660a:	b083      	sub	sp, #12
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    6610:	4b0c      	ldr	r3, [pc, #48]	; (6644 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	68da      	ldr	r2, [r3, #12]
    6616:	4b0b      	ldr	r3, [pc, #44]	; (6644 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    661e:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    6620:	4b09      	ldr	r3, [pc, #36]	; (6648 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    6622:	681b      	ldr	r3, [r3, #0]
    6624:	2200      	movs	r2, #0
    6626:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    6628:	4b07      	ldr	r3, [pc, #28]	; (6648 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    662a:	681b      	ldr	r3, [r3, #0]
    662c:	681a      	ldr	r2, [r3, #0]
    662e:	4b06      	ldr	r3, [pc, #24]	; (6648 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	f042 0201 	orr.w	r2, r2, #1
    6636:	601a      	str	r2, [r3, #0]
  }
    6638:	bf00      	nop
    663a:	370c      	adds	r7, #12
    663c:	46bd      	mov	sp, r7
    663e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6642:	4770      	bx	lr
    6644:	1000006c 	.word	0x1000006c
    6648:	10000068 	.word	0x10000068

0000664c <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    664c:	b480      	push	{r7}
    664e:	b083      	sub	sp, #12
    6650:	af00      	add	r7, sp, #0
    6652:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    6654:	4b04      	ldr	r3, [pc, #16]	; (6668 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	685b      	ldr	r3, [r3, #4]
  }
    665a:	4618      	mov	r0, r3
    665c:	370c      	adds	r7, #12
    665e:	46bd      	mov	sp, r7
    6660:	f85d 7b04 	ldr.w	r7, [sp], #4
    6664:	4770      	bx	lr
    6666:	bf00      	nop
    6668:	10000068 	.word	0x10000068

0000666c <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    666c:	b480      	push	{r7}
    666e:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    6670:	f8df 001c 	ldr.w	r0, [pc, #28]	; 6690 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    6674:	6801      	ldr	r1, [r0, #0]
    6676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    667a:	6001      	str	r1, [r0, #0]
    667c:	f3bf 8f4f 	dsb	sy
    6680:	f3bf 8f6f 	isb	sy
  }
}
    6684:	bf00      	nop
    6686:	46bd      	mov	sp, r7
    6688:	f85d 7b04 	ldr.w	r7, [sp], #4
    668c:	4770      	bx	lr
    668e:	0000      	.short	0x0000
    6690:	e000ed88 	.word	0xe000ed88

00006694 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    6694:	b580      	push	{r7, lr}
    6696:	b086      	sub	sp, #24
    6698:	af00      	add	r7, sp, #0
    669a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    669c:	6878      	ldr	r0, [r7, #4]
    669e:	f000 f807 	bl	66b0 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    66a2:	eef0 7a40 	vmov.f32	s15, s0
	}
    66a6:	eeb0 0a67 	vmov.f32	s0, s15
    66aa:	3718      	adds	r7, #24
    66ac:	46bd      	mov	sp, r7
    66ae:	bd80      	pop	{r7, pc}

000066b0 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    66b0:	b480      	push	{r7}
    66b2:	b085      	sub	sp, #20
    66b4:	af00      	add	r7, sp, #0
    66b6:	60f8      	str	r0, [r7, #12]
    66b8:	7239      	strb	r1, [r7, #8]
    66ba:	713a      	strb	r2, [r7, #4]
    66bc:	703b      	strb	r3, [r7, #0]
			return value;
    66be:	68fb      	ldr	r3, [r7, #12]
    66c0:	681b      	ldr	r3, [r3, #0]
    66c2:	ee07 3a90 	vmov	s15, r3
		}
    66c6:	eeb0 0a67 	vmov.f32	s0, s15
    66ca:	3714      	adds	r7, #20
    66cc:	46bd      	mov	sp, r7
    66ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d2:	4770      	bx	lr

000066d4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    66d4:	b580      	push	{r7, lr}
    66d6:	ed2d 8b02 	vpush	{d8}
    66da:	b082      	sub	sp, #8
    66dc:	af00      	add	r7, sp, #0
    66de:	6078      	str	r0, [r7, #4]
    66e0:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	ed93 8a00 	vldr	s16, [r3]
    66e8:	683b      	ldr	r3, [r7, #0]
    66ea:	4618      	mov	r0, r3
    66ec:	f7ff ffd2 	bl	6694 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    66f0:	eef0 7a40 	vmov.f32	s15, s0
    66f4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    66f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66fc:	bf94      	ite	ls
    66fe:	2301      	movls	r3, #1
    6700:	2300      	movhi	r3, #0
    6702:	b2db      	uxtb	r3, r3
		}
    6704:	4618      	mov	r0, r3
    6706:	3708      	adds	r7, #8
    6708:	46bd      	mov	sp, r7
    670a:	ecbd 8b02 	vpop	{d8}
    670e:	bd80      	pop	{r7, pc}

00006710 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    6710:	b480      	push	{r7}
    6712:	b083      	sub	sp, #12
    6714:	af00      	add	r7, sp, #0
    6716:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    6718:	4a04      	ldr	r2, [pc, #16]	; (672c <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	6013      	str	r3, [r2, #0]
}
    671e:	bf00      	nop
    6720:	370c      	adds	r7, #12
    6722:	46bd      	mov	sp, r7
    6724:	f85d 7b04 	ldr.w	r7, [sp], #4
    6728:	4770      	bx	lr
    672a:	bf00      	nop
    672c:	10000000 	.word	0x10000000

00006730 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    6730:	b480      	push	{r7}
    6732:	b083      	sub	sp, #12
    6734:	af00      	add	r7, sp, #0
    6736:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	3310      	adds	r3, #16
  }
    673c:	4618      	mov	r0, r3
    673e:	370c      	adds	r7, #12
    6740:	46bd      	mov	sp, r7
    6742:	f85d 7b04 	ldr.w	r7, [sp], #4
    6746:	4770      	bx	lr

00006748 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    6748:	b580      	push	{r7, lr}
    674a:	b082      	sub	sp, #8
    674c:	af00      	add	r7, sp, #0
    674e:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    6750:	6878      	ldr	r0, [r7, #4]
    6752:	f7ff ffed 	bl	6730 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    6756:	4603      	mov	r3, r0
    6758:	009b      	lsls	r3, r3, #2
    675a:	4a03      	ldr	r2, [pc, #12]	; (6768 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    675c:	4413      	add	r3, r2
  }
    675e:	4618      	mov	r0, r3
    6760:	3708      	adds	r7, #8
    6762:	46bd      	mov	sp, r7
    6764:	bd80      	pop	{r7, pc}
    6766:	bf00      	nop
    6768:	10000128 	.word	0x10000128

0000676c <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    676c:	b580      	push	{r7, lr}
    676e:	b082      	sub	sp, #8
    6770:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    6772:	4b09      	ldr	r3, [pc, #36]	; (6798 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    6774:	681b      	ldr	r3, [r3, #0]
    6776:	685b      	ldr	r3, [r3, #4]
    6778:	b2db      	uxtb	r3, r3
    677a:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    677c:	4a07      	ldr	r2, [pc, #28]	; (679c <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    6782:	4a07      	ldr	r2, [pc, #28]	; (67a0 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    678a:	603b      	str	r3, [r7, #0]
    isr();
    678c:	683b      	ldr	r3, [r7, #0]
    678e:	4798      	blx	r3
  }
    6790:	bf00      	nop
    6792:	3708      	adds	r7, #8
    6794:	46bd      	mov	sp, r7
    6796:	bd80      	pop	{r7, pc}
    6798:	10000070 	.word	0x10000070
    679c:	10000048 	.word	0x10000048
    67a0:	10000128 	.word	0x10000128

000067a4 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    67a4:	b084      	sub	sp, #16
    67a6:	b590      	push	{r4, r7, lr}
    67a8:	b085      	sub	sp, #20
    67aa:	af00      	add	r7, sp, #0
    67ac:	6078      	str	r0, [r7, #4]
    67ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
    67b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    67b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67b8:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    67ba:	6abc      	ldr	r4, [r7, #40]	; 0x28
    67bc:	68f8      	ldr	r0, [r7, #12]
    67be:	f7ff ffc3 	bl	6748 <sjsu::cortex::InterruptController::GetVector(int)>
    67c2:	4603      	mov	r3, r0
    67c4:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    67c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    67ca:	2b00      	cmp	r3, #0
    67cc:	d005      	beq.n	67da <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    67ce:	68fb      	ldr	r3, [r7, #12]
    67d0:	2b00      	cmp	r3, #0
    67d2:	db02      	blt.n	67da <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    67d4:	68f8      	ldr	r0, [r7, #12]
    67d6:	f7ff febd 	bl	6554 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    67da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    67dc:	2b00      	cmp	r3, #0
    67de:	db04      	blt.n	67ea <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    67e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    67e2:	4619      	mov	r1, r3
    67e4:	68f8      	ldr	r0, [r7, #12]
    67e6:	f7ff fee5 	bl	65b4 <NVIC_SetPriority>
    }
  }
    67ea:	bf00      	nop
    67ec:	3714      	adds	r7, #20
    67ee:	46bd      	mov	sp, r7
    67f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    67f4:	b004      	add	sp, #16
    67f6:	4770      	bx	lr

000067f8 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    67f8:	b580      	push	{r7, lr}
    67fa:	b082      	sub	sp, #8
    67fc:	af00      	add	r7, sp, #0
    67fe:	6078      	str	r0, [r7, #4]
    6800:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    6802:	6838      	ldr	r0, [r7, #0]
    6804:	f7ff febe 	bl	6584 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    6808:	6838      	ldr	r0, [r7, #0]
    680a:	f7ff ff9d 	bl	6748 <sjsu::cortex::InterruptController::GetVector(int)>
    680e:	4602      	mov	r2, r0
    6810:	4b02      	ldr	r3, [pc, #8]	; (681c <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    6812:	6013      	str	r3, [r2, #0]
  }
    6814:	bf00      	nop
    6816:	3708      	adds	r7, #8
    6818:	46bd      	mov	sp, r7
    681a:	bd80      	pop	{r7, pc}
    681c:	00001d25 	.word	0x00001d25

00006820 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    6820:	b580      	push	{r7, lr}
    6822:	b082      	sub	sp, #8
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	4618      	mov	r0, r3
    682c:	f000 f804 	bl	6838 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    6830:	6878      	ldr	r0, [r7, #4]
    6832:	3708      	adds	r7, #8
    6834:	46bd      	mov	sp, r7
    6836:	bd80      	pop	{r7, pc}

00006838 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    6838:	b580      	push	{r7, lr}
    683a:	b082      	sub	sp, #8
    683c:	af00      	add	r7, sp, #0
    683e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    6840:	4903      	ldr	r1, [pc, #12]	; (6850 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    6842:	6878      	ldr	r0, [r7, #4]
    6844:	f000 f806 	bl	6854 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    6848:	6878      	ldr	r0, [r7, #4]
    684a:	3708      	adds	r7, #8
    684c:	46bd      	mov	sp, r7
    684e:	bd80      	pop	{r7, pc}
    6850:	0000a9b8 	.word	0x0000a9b8

00006854 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    6854:	b490      	push	{r4, r7}
    6856:	b082      	sub	sp, #8
    6858:	af00      	add	r7, sp, #0
    685a:	6078      	str	r0, [r7, #4]
    685c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    685e:	683b      	ldr	r3, [r7, #0]
    6860:	e9d3 3400 	ldrd	r3, r4, [r3]
    6864:	687a      	ldr	r2, [r7, #4]
    6866:	e9c2 3400 	strd	r3, r4, [r2]
    686a:	687b      	ldr	r3, [r7, #4]
    686c:	4618      	mov	r0, r3
    686e:	3708      	adds	r7, #8
    6870:	46bd      	mov	sp, r7
    6872:	bc90      	pop	{r4, r7}
    6874:	4770      	bx	lr

00006876 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    6876:	b580      	push	{r7, lr}
    6878:	b082      	sub	sp, #8
    687a:	af00      	add	r7, sp, #0
    687c:	6078      	str	r0, [r7, #4]
    687e:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	6839      	ldr	r1, [r7, #0]
    6884:	4618      	mov	r0, r3
    6886:	f000 f811 	bl	68ac <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    688a:	6878      	ldr	r0, [r7, #4]
    688c:	3708      	adds	r7, #8
    688e:	46bd      	mov	sp, r7
    6890:	bd80      	pop	{r7, pc}

00006892 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    6892:	b490      	push	{r4, r7}
    6894:	b082      	sub	sp, #8
    6896:	af00      	add	r7, sp, #0
    6898:	6078      	str	r0, [r7, #4]
	{ return __r; }
    689a:	687b      	ldr	r3, [r7, #4]
    689c:	e9d3 3400 	ldrd	r3, r4, [r3]
    68a0:	4618      	mov	r0, r3
    68a2:	4621      	mov	r1, r4
    68a4:	3708      	adds	r7, #8
    68a6:	46bd      	mov	sp, r7
    68a8:	bc90      	pop	{r4, r7}
    68aa:	4770      	bx	lr

000068ac <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    68ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    68ae:	b085      	sub	sp, #20
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
    68b4:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    68b6:	6838      	ldr	r0, [r7, #0]
    68b8:	f7ff ffeb 	bl	6892 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    68bc:	4605      	mov	r5, r0
    68be:	460e      	mov	r6, r1
    68c0:	462b      	mov	r3, r5
    68c2:	4634      	mov	r4, r6
    68c4:	f04f 0100 	mov.w	r1, #0
    68c8:	f04f 0200 	mov.w	r2, #0
    68cc:	0162      	lsls	r2, r4, #5
    68ce:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    68d2:	0159      	lsls	r1, r3, #5
    68d4:	460b      	mov	r3, r1
    68d6:	4614      	mov	r4, r2
    68d8:	1b5b      	subs	r3, r3, r5
    68da:	eb64 0406 	sbc.w	r4, r4, r6
    68de:	f04f 0100 	mov.w	r1, #0
    68e2:	f04f 0200 	mov.w	r2, #0
    68e6:	00a2      	lsls	r2, r4, #2
    68e8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    68ec:	0099      	lsls	r1, r3, #2
    68ee:	460b      	mov	r3, r1
    68f0:	4614      	mov	r4, r2
    68f2:	195b      	adds	r3, r3, r5
    68f4:	eb44 0406 	adc.w	r4, r4, r6
    68f8:	f04f 0100 	mov.w	r1, #0
    68fc:	f04f 0200 	mov.w	r2, #0
    6900:	00e2      	lsls	r2, r4, #3
    6902:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    6906:	00d9      	lsls	r1, r3, #3
    6908:	460b      	mov	r3, r1
    690a:	4614      	mov	r4, r2
    690c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    6910:	f107 0308 	add.w	r3, r7, #8
    6914:	4619      	mov	r1, r3
    6916:	6878      	ldr	r0, [r7, #4]
    6918:	f7fa f828 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    691c:	6878      	ldr	r0, [r7, #4]
    691e:	3714      	adds	r7, #20
    6920:	46bd      	mov	sp, r7
    6922:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006924 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    6924:	b590      	push	{r4, r7, lr}
    6926:	b085      	sub	sp, #20
    6928:	af00      	add	r7, sp, #0
    692a:	6078      	str	r0, [r7, #4]
    692c:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    692e:	f107 0308 	add.w	r3, r7, #8
    6932:	6839      	ldr	r1, [r7, #0]
    6934:	4618      	mov	r0, r3
    6936:	f7ff ff9e 	bl	6876 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    693a:	f107 0308 	add.w	r3, r7, #8
    693e:	4618      	mov	r0, r3
    6940:	f7fb fe44 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    6944:	4603      	mov	r3, r0
    6946:	460c      	mov	r4, r1
    6948:	687a      	ldr	r2, [r7, #4]
    694a:	e9c2 3400 	strd	r3, r4, [r2]
    694e:	687b      	ldr	r3, [r7, #4]
    6950:	4618      	mov	r0, r3
    6952:	3714      	adds	r7, #20
    6954:	46bd      	mov	sp, r7
    6956:	bd90      	pop	{r4, r7, pc}

00006958 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    6958:	b580      	push	{r7, lr}
    695a:	b084      	sub	sp, #16
    695c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    695e:	f107 0308 	add.w	r3, r7, #8
    6962:	4618      	mov	r0, r3
    6964:	f7ff ff5c 	bl	6820 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    6968:	f107 0208 	add.w	r2, r7, #8
    696c:	463b      	mov	r3, r7
    696e:	4611      	mov	r1, r2
    6970:	4618      	mov	r0, r3
    6972:	f7ff ffd7 	bl	6924 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    6976:	463b      	mov	r3, r7
    6978:	4619      	mov	r1, r3
    697a:	4807      	ldr	r0, [pc, #28]	; (6998 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    697c:	f000 f9d4 	bl	6d28 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    6980:	4b06      	ldr	r3, [pc, #24]	; (699c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    6982:	681b      	ldr	r3, [r3, #0]
    6984:	2b00      	cmp	r3, #0
    6986:	d002      	beq.n	698e <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    6988:	4b04      	ldr	r3, [pc, #16]	; (699c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    698a:	681b      	ldr	r3, [r3, #0]
    698c:	4798      	blx	r3
    }
  }
    698e:	bf00      	nop
    6990:	3710      	adds	r7, #16
    6992:	46bd      	mov	sp, r7
    6994:	bd80      	pop	{r7, pc}
    6996:	bf00      	nop
    6998:	100003c0 	.word	0x100003c0
    699c:	100003bc 	.word	0x100003bc

000069a0 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    69a0:	b490      	push	{r4, r7}
    69a2:	b082      	sub	sp, #8
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
  {
    return counter;
    69a8:	687a      	ldr	r2, [r7, #4]
    69aa:	4b05      	ldr	r3, [pc, #20]	; (69c0 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    69ac:	e9d3 3400 	ldrd	r3, r4, [r3]
    69b0:	e9c2 3400 	strd	r3, r4, [r2]
  }
    69b4:	6878      	ldr	r0, [r7, #4]
    69b6:	3708      	adds	r7, #8
    69b8:	46bd      	mov	sp, r7
    69ba:	bc90      	pop	{r4, r7}
    69bc:	4770      	bx	lr
    69be:	bf00      	nop
    69c0:	100003c0 	.word	0x100003c0

000069c4 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    69c4:	b480      	push	{r7}
    69c6:	b083      	sub	sp, #12
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
    69cc:	bf00      	nop
    69ce:	370c      	adds	r7, #12
    69d0:	46bd      	mov	sp, r7
    69d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69d6:	4770      	bx	lr

000069d8 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    69d8:	b480      	push	{r7}
    69da:	b083      	sub	sp, #12
    69dc:	af00      	add	r7, sp, #0
    69de:	6078      	str	r0, [r7, #4]
    69e0:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    69e2:	4a04      	ldr	r2, [pc, #16]	; (69f4 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    69e4:	683b      	ldr	r3, [r7, #0]
    69e6:	6013      	str	r3, [r2, #0]
  }
    69e8:	bf00      	nop
    69ea:	370c      	adds	r7, #12
    69ec:	46bd      	mov	sp, r7
    69ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f2:	4770      	bx	lr
    69f4:	100003bc 	.word	0x100003bc

000069f8 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    69f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    69fa:	b08b      	sub	sp, #44	; 0x2c
    69fc:	af02      	add	r7, sp, #8
    69fe:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    6a00:	2304      	movs	r3, #4
    6a02:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    6a04:	4b1f      	ldr	r3, [pc, #124]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a06:	681b      	ldr	r3, [r3, #0]
    6a08:	685b      	ldr	r3, [r3, #4]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	bf14      	ite	ne
    6a0e:	2301      	movne	r3, #1
    6a10:	2300      	moveq	r3, #0
    6a12:	b2db      	uxtb	r3, r3
    6a14:	2b00      	cmp	r3, #0
    6a16:	d030      	beq.n	6a7a <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    6a18:	4b1a      	ldr	r3, [pc, #104]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	2200      	movs	r2, #0
    6a1e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    6a20:	4b18      	ldr	r3, [pc, #96]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a22:	681b      	ldr	r3, [r3, #0]
    6a24:	681a      	ldr	r2, [r3, #0]
    6a26:	4b17      	ldr	r3, [pc, #92]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a28:	681b      	ldr	r3, [r3, #0]
    6a2a:	f042 0202 	orr.w	r2, r2, #2
    6a2e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    6a30:	4b14      	ldr	r3, [pc, #80]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a32:	681b      	ldr	r3, [r3, #0]
    6a34:	681a      	ldr	r2, [r3, #0]
    6a36:	4b13      	ldr	r3, [pc, #76]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a38:	681b      	ldr	r3, [r3, #0]
    6a3a:	f042 0201 	orr.w	r2, r2, #1
    6a3e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    6a40:	4b10      	ldr	r3, [pc, #64]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a42:	681b      	ldr	r3, [r3, #0]
    6a44:	681a      	ldr	r2, [r3, #0]
    6a46:	4b0f      	ldr	r3, [pc, #60]	; (6a84 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a48:	681b      	ldr	r3, [r3, #0]
    6a4a:	f042 0204 	orr.w	r2, r2, #4
    6a4e:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	689e      	ldr	r6, [r3, #8]
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    6a58:	681b      	ldr	r3, [r3, #0]
    6a5a:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    6a5c:	4b0a      	ldr	r3, [pc, #40]	; (6a88 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    6a5e:	f107 040c 	add.w	r4, r7, #12
    6a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6a68:	69bb      	ldr	r3, [r7, #24]
    6a6a:	9300      	str	r3, [sp, #0]
    6a6c:	f107 030c 	add.w	r3, r7, #12
    6a70:	cb0e      	ldmia	r3, {r1, r2, r3}
    6a72:	4630      	mov	r0, r6
    6a74:	47a8      	blx	r5
      status = Status::kSuccess;
    6a76:	2300      	movs	r3, #0
    6a78:	61fb      	str	r3, [r7, #28]
    }

    return status;
    6a7a:	69fb      	ldr	r3, [r7, #28]
  }
    6a7c:	4618      	mov	r0, r3
    6a7e:	3724      	adds	r7, #36	; 0x24
    6a80:	46bd      	mov	sp, r7
    6a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a84:	10000074 	.word	0x10000074
    6a88:	0000a5cc 	.word	0x0000a5cc

00006a8c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b084      	sub	sp, #16
    6a90:	af00      	add	r7, sp, #0
    6a92:	6078      	str	r0, [r7, #4]
    6a94:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	4618      	mov	r0, r3
    6a9a:	f7fa f967 	bl	d6c <units::linear_scale<float>::operator()() const>
    6a9e:	eeb0 7a40 	vmov.f32	s14, s0
    6aa2:	683b      	ldr	r3, [r7, #0]
    6aa4:	ee07 3a90 	vmov	s15, r3
    6aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6aac:	ee77 7a67 	vsub.f32	s15, s14, s15
    6ab0:	f107 030c 	add.w	r3, r7, #12
    6ab4:	eeb0 0a67 	vmov.f32	s0, s15
    6ab8:	4618      	mov	r0, r3
    6aba:	f7fa f992 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    6abe:	68fb      	ldr	r3, [r7, #12]
	}
    6ac0:	4618      	mov	r0, r3
    6ac2:	3710      	adds	r7, #16
    6ac4:	46bd      	mov	sp, r7
    6ac6:	bd80      	pop	{r7, pc}

00006ac8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    6ac8:	b580      	push	{r7, lr}
    6aca:	b082      	sub	sp, #8
    6acc:	af00      	add	r7, sp, #0
    6ace:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    6ad0:	6878      	ldr	r0, [r7, #4]
    6ad2:	f7fc fb22 	bl	311a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    6ad6:	4603      	mov	r3, r0
	}
    6ad8:	4618      	mov	r0, r3
    6ada:	3708      	adds	r7, #8
    6adc:	46bd      	mov	sp, r7
    6ade:	bd80      	pop	{r7, pc}

00006ae0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    6ae0:	b590      	push	{r4, r7, lr}
    6ae2:	b089      	sub	sp, #36	; 0x24
    6ae4:	af00      	add	r7, sp, #0
    6ae6:	6078      	str	r0, [r7, #4]
    6ae8:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    6aea:	f04f 0001 	mov.w	r0, #1
    6aee:	f04f 0100 	mov.w	r1, #0
    6af2:	f7f9 fd51 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    6af6:	4603      	mov	r3, r0
    6af8:	60fb      	str	r3, [r7, #12]
    6afa:	f107 020c 	add.w	r2, r7, #12
    6afe:	463b      	mov	r3, r7
    6b00:	4611      	mov	r1, r2
    6b02:	4618      	mov	r0, r3
    6b04:	f7ff fde6 	bl	66d4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    6b08:	4603      	mov	r3, r0
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d002      	beq.n	6b14 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    6b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b12:	e041      	b.n	6b98 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    6b14:	687b      	ldr	r3, [r7, #4]
    6b16:	685a      	ldr	r2, [r3, #4]
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	685b      	ldr	r3, [r3, #4]
    6b1c:	681b      	ldr	r3, [r3, #0]
    6b1e:	330c      	adds	r3, #12
    6b20:	681b      	ldr	r3, [r3, #0]
    6b22:	4610      	mov	r0, r2
    6b24:	4798      	blx	r3
    6b26:	4603      	mov	r3, r0
    6b28:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    6b2a:	463a      	mov	r2, r7
    6b2c:	f107 0308 	add.w	r3, r7, #8
    6b30:	4611      	mov	r1, r2
    6b32:	4618      	mov	r0, r3
    6b34:	f7fa ff6e 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b38:	4603      	mov	r3, r0
    6b3a:	617b      	str	r3, [r7, #20]
    6b3c:	f107 0314 	add.w	r3, r7, #20
    6b40:	2101      	movs	r1, #1
    6b42:	4618      	mov	r0, r3
    6b44:	f7ff ffa2 	bl	6a8c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    6b48:	4603      	mov	r3, r0
    6b4a:	613b      	str	r3, [r7, #16]
    6b4c:	f107 0310 	add.w	r3, r7, #16
    6b50:	4618      	mov	r0, r3
    6b52:	f7ff ffb9 	bl	6ac8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b56:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    6b58:	f107 0308 	add.w	r3, r7, #8
    6b5c:	4618      	mov	r0, r3
    6b5e:	f7fa fc55 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b62:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    6b64:	463b      	mov	r3, r7
    6b66:	4618      	mov	r0, r3
    6b68:	f7fa fc50 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b6c:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    6b6e:	fbb4 f2f3 	udiv	r2, r4, r3
    6b72:	fb03 f302 	mul.w	r3, r3, r2
    6b76:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    6b78:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    6b7a:	69fb      	ldr	r3, [r7, #28]
    6b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    6b80:	d305      	bcc.n	6b8e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    6b82:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    6b86:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    6b88:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    6b8c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    6b8e:	4b04      	ldr	r3, [pc, #16]	; (6ba0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    6b90:	681b      	ldr	r3, [r3, #0]
    6b92:	69fa      	ldr	r2, [r7, #28]
    6b94:	605a      	str	r2, [r3, #4]
    return remainder;
    6b96:	69bb      	ldr	r3, [r7, #24]
  }
    6b98:	4618      	mov	r0, r3
    6b9a:	3724      	adds	r7, #36	; 0x24
    6b9c:	46bd      	mov	sp, r7
    6b9e:	bd90      	pop	{r4, r7, pc}
    6ba0:	10000074 	.word	0x10000074

00006ba4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b082      	sub	sp, #8
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
    6bac:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    6bae:	683a      	ldr	r2, [r7, #0]
    6bb0:	6879      	ldr	r1, [r7, #4]
    6bb2:	4804      	ldr	r0, [pc, #16]	; (6bc4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    6bb4:	f7fa fe0e 	bl	17d4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    6bb8:	683b      	ldr	r3, [r7, #0]
}
    6bba:	4618      	mov	r0, r3
    6bbc:	3708      	adds	r7, #8
    6bbe:	46bd      	mov	sp, r7
    6bc0:	bd80      	pop	{r7, pc}
    6bc2:	bf00      	nop
    6bc4:	100003cc 	.word	0x100003cc

00006bc8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    6bc8:	b590      	push	{r4, r7, lr}
    6bca:	b087      	sub	sp, #28
    6bcc:	af02      	add	r7, sp, #8
    6bce:	6078      	str	r0, [r7, #4]
    6bd0:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    6bd2:	f107 0308 	add.w	r3, r7, #8
    6bd6:	4618      	mov	r0, r3
    6bd8:	f7fb fdbd 	bl	2756 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    6bdc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    6be0:	e9cd 3400 	strd	r3, r4, [sp]
    6be4:	683a      	ldr	r2, [r7, #0]
    6be6:	6879      	ldr	r1, [r7, #4]
    6be8:	4803      	ldr	r0, [pc, #12]	; (6bf8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    6bea:	f7fa fe45 	bl	1878 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    6bee:	683b      	ldr	r3, [r7, #0]
}
    6bf0:	4618      	mov	r0, r3
    6bf2:	3714      	adds	r7, #20
    6bf4:	46bd      	mov	sp, r7
    6bf6:	bd90      	pop	{r4, r7, pc}
    6bf8:	100003cc 	.word	0x100003cc

00006bfc <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    6bfc:	b580      	push	{r7, lr}
    6bfe:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    6c00:	4802      	ldr	r0, [pc, #8]	; (6c0c <ThreadRuntimeCounter+0x10>)
    6c02:	f7ff fd23 	bl	664c <sjsu::cortex::DwtCounter::GetCount()>
    6c06:	4603      	mov	r3, r0
}
    6c08:	4618      	mov	r0, r3
    6c0a:	bd80      	pop	{r7, pc}
    6c0c:	100003c8 	.word	0x100003c8

00006c10 <vPortSetupTimerInterrupt>:
  // definitions.
  extern void ArmHardFaultHandler(void);
  extern void ArmResetHandler(void);

  void vPortSetupTimerInterrupt(void)  // NOLINT
  {
    6c10:	b590      	push	{r4, r7, lr}
    6c12:	b08b      	sub	sp, #44	; 0x2c
    6c14:	af02      	add	r7, sp, #8
    interrupt_controller.Register({
    6c16:	4b11      	ldr	r3, [pc, #68]	; (6c5c <vPortSetupTimerInterrupt+0x4c>)
    6c18:	463c      	mov	r4, r7
    6c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6c20:	68fb      	ldr	r3, [r7, #12]
    6c22:	9300      	str	r3, [sp, #0]
    6c24:	463b      	mov	r3, r7
    6c26:	cb0e      	ldmia	r3, {r1, r2, r3}
    6c28:	480d      	ldr	r0, [pc, #52]	; (6c60 <vPortSetupTimerInterrupt+0x50>)
    6c2a:	f7ff fdbb 	bl	67a4 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
        .interrupt_request_number  = sjsu::cortex::SVCall_IRQn,
        .interrupt_service_routine = vPortSVCHandler,
    });
    interrupt_controller.Register({
    6c2e:	4b0d      	ldr	r3, [pc, #52]	; (6c64 <vPortSetupTimerInterrupt+0x54>)
    6c30:	f107 0410 	add.w	r4, r7, #16
    6c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6c3a:	69fb      	ldr	r3, [r7, #28]
    6c3c:	9300      	str	r3, [sp, #0]
    6c3e:	f107 0310 	add.w	r3, r7, #16
    6c42:	cb0e      	ldmia	r3, {r1, r2, r3}
    6c44:	4806      	ldr	r0, [pc, #24]	; (6c60 <vPortSetupTimerInterrupt+0x50>)
    6c46:	f7ff fdad 	bl	67a4 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
    });
    // Set the SystemTick frequency to the RTOS tick frequency
    // It is critical that this happens before you set the system_clock,
    // since The system_timer keeps the time that the system_clock uses to
    // delay itself.
    system_timer.SetInterrupt(xPortSysTickHandler);
    6c4a:	4907      	ldr	r1, [pc, #28]	; (6c68 <vPortSetupTimerInterrupt+0x58>)
    6c4c:	4807      	ldr	r0, [pc, #28]	; (6c6c <vPortSetupTimerInterrupt+0x5c>)
    6c4e:	f7ff fec3 	bl	69d8 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>
  }
    6c52:	bf00      	nop
    6c54:	3724      	adds	r7, #36	; 0x24
    6c56:	46bd      	mov	sp, r7
    6c58:	bd90      	pop	{r4, r7, pc}
    6c5a:	bf00      	nop
    6c5c:	0000a8c8 	.word	0x0000a8c8
    6c60:	10000088 	.word	0x10000088
    6c64:	0000a8d8 	.word	0x0000a8d8
    6c68:	00007089 	.word	0x00007089
    6c6c:	1000007c 	.word	0x1000007c

00006c70 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b082      	sub	sp, #8
    6c74:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    6c76:	f7ff fcf9 	bl	666c <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    6c7a:	4b1e      	ldr	r3, [pc, #120]	; (6cf4 <sjsu::InitializePlatform()+0x84>)
    6c7c:	6819      	ldr	r1, [r3, #0]
    6c7e:	481e      	ldr	r0, [pc, #120]	; (6cf8 <sjsu::InitializePlatform()+0x88>)
    6c80:	f7f9 febc 	bl	9fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    6c84:	23ff      	movs	r3, #255	; 0xff
    6c86:	703b      	strb	r3, [r7, #0]
    6c88:	463b      	mov	r3, r7
    6c8a:	2201      	movs	r2, #1
    6c8c:	4619      	mov	r1, r3
    6c8e:	481a      	ldr	r0, [pc, #104]	; (6cf8 <sjsu::InitializePlatform()+0x88>)
    6c90:	f7f9 ff02 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    6c94:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    6c98:	4818      	ldr	r0, [pc, #96]	; (6cfc <sjsu::InitializePlatform()+0x8c>)
    6c9a:	f7fa fcf5 	bl	1688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    6c9e:	4818      	ldr	r0, [pc, #96]	; (6d00 <sjsu::InitializePlatform()+0x90>)
    6ca0:	f000 fd22 	bl	76e8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    6ca4:	4817      	ldr	r0, [pc, #92]	; (6d04 <sjsu::InitializePlatform()+0x94>)
    6ca6:	f000 fd2f 	bl	7708 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    6caa:	4b17      	ldr	r3, [pc, #92]	; (6d08 <sjsu::InitializePlatform()+0x98>)
    6cac:	6819      	ldr	r1, [r3, #0]
    6cae:	4817      	ldr	r0, [pc, #92]	; (6d0c <sjsu::InitializePlatform()+0x9c>)
    6cb0:	f7ff ff16 	bl	6ae0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    6cb4:	4815      	ldr	r0, [pc, #84]	; (6d0c <sjsu::InitializePlatform()+0x9c>)
    6cb6:	f7ff fe9f 	bl	69f8 <sjsu::cortex::SystemTimer::StartTimer() const>
    6cba:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	d00d      	beq.n	6cde <sjsu::InitializePlatform()+0x6e>
    6cc2:	23d6      	movs	r3, #214	; 0xd6
    6cc4:	4a12      	ldr	r2, [pc, #72]	; (6d10 <sjsu::InitializePlatform()+0xa0>)
    6cc6:	4913      	ldr	r1, [pc, #76]	; (6d14 <sjsu::InitializePlatform()+0xa4>)
    6cc8:	4813      	ldr	r0, [pc, #76]	; (6d18 <sjsu::InitializePlatform()+0xa8>)
    6cca:	f7ff fba5 	bl	6418 <printf>
    6cce:	4813      	ldr	r0, [pc, #76]	; (6d1c <sjsu::InitializePlatform()+0xac>)
    6cd0:	f7fe fa5e 	bl	5190 <puts>
    6cd4:	2100      	movs	r1, #0
    6cd6:	2001      	movs	r0, #1
    6cd8:	f7f9 fdf6 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    6cdc:	e7fe      	b.n	6cdc <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    6cde:	4810      	ldr	r0, [pc, #64]	; (6d20 <sjsu::InitializePlatform()+0xb0>)
    6ce0:	f7ff fc92 	bl	6608 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    6ce4:	480f      	ldr	r0, [pc, #60]	; (6d24 <sjsu::InitializePlatform()+0xb4>)
    6ce6:	f7ff fd13 	bl	6710 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    6cea:	bf00      	nop
    6cec:	3708      	adds	r7, #8
    6cee:	46bd      	mov	sp, r7
    6cf0:	bd80      	pop	{r7, pc}
    6cf2:	bf00      	nop
    6cf4:	0000a9c0 	.word	0x0000a9c0
    6cf8:	10000078 	.word	0x10000078
    6cfc:	100003cc 	.word	0x100003cc
    6d00:	00006ba5 	.word	0x00006ba5
    6d04:	00006bc9 	.word	0x00006bc9
    6d08:	0000a9c4 	.word	0x0000a9c4
    6d0c:	1000007c 	.word	0x1000007c
    6d10:	0000aa24 	.word	0x0000aa24
    6d14:	0000a9f0 	.word	0x0000a9f0
    6d18:	0000a8e8 	.word	0x0000a8e8
    6d1c:	0000a67c 	.word	0x0000a67c
    6d20:	100003c8 	.word	0x100003c8
    6d24:	000069a1 	.word	0x000069a1

00006d28 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    6d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d2a:	b083      	sub	sp, #12
    6d2c:	af00      	add	r7, sp, #0
    6d2e:	6078      	str	r0, [r7, #4]
    6d30:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    6d32:	6838      	ldr	r0, [r7, #0]
    6d34:	f7fb fc4a 	bl	25cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    6d38:	460a      	mov	r2, r1
    6d3a:	4601      	mov	r1, r0
    6d3c:	687b      	ldr	r3, [r7, #4]
    6d3e:	e9d3 5600 	ldrd	r5, r6, [r3]
    6d42:	186b      	adds	r3, r5, r1
    6d44:	eb46 0402 	adc.w	r4, r6, r2
    6d48:	687a      	ldr	r2, [r7, #4]
    6d4a:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    6d4e:	687b      	ldr	r3, [r7, #4]
	}
    6d50:	4618      	mov	r0, r3
    6d52:	370c      	adds	r7, #12
    6d54:	46bd      	mov	sp, r7
    6d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d58 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    6d58:	b580      	push	{r7, lr}
    6d5a:	b082      	sub	sp, #8
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
    6d60:	6039      	str	r1, [r7, #0]
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	2b01      	cmp	r3, #1
    6d66:	d155      	bne.n	6e14 <__static_initialization_and_destruction_0(int, int)+0xbc>
    6d68:	683b      	ldr	r3, [r7, #0]
    6d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6d6e:	4293      	cmp	r3, r2
    6d70:	d150      	bne.n	6e14 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    6d72:	4b2a      	ldr	r3, [pc, #168]	; (6e1c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    6d74:	681b      	ldr	r3, [r3, #0]
    6d76:	f003 0301 	and.w	r3, r3, #1
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d106      	bne.n	6d8c <__static_initialization_and_destruction_0(int, int)+0x34>
    6d7e:	4b27      	ldr	r3, [pc, #156]	; (6e1c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    6d80:	2201      	movs	r2, #1
    6d82:	601a      	str	r2, [r3, #0]
    6d84:	4b26      	ldr	r3, [pc, #152]	; (6e20 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    6d86:	4618      	mov	r0, r3
    6d88:	f7fa fff6 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    6d8c:	4b25      	ldr	r3, [pc, #148]	; (6e24 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    6d8e:	681b      	ldr	r3, [r3, #0]
    6d90:	f003 0301 	and.w	r3, r3, #1
    6d94:	2b00      	cmp	r3, #0
    6d96:	d105      	bne.n	6da4 <__static_initialization_and_destruction_0(int, int)+0x4c>
    6d98:	4b22      	ldr	r3, [pc, #136]	; (6e24 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    6d9a:	2201      	movs	r2, #1
    6d9c:	601a      	str	r2, [r3, #0]
    6d9e:	4a22      	ldr	r2, [pc, #136]	; (6e28 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    6da0:	4b22      	ldr	r3, [pc, #136]	; (6e2c <__static_initialization_and_destruction_0(int, int)+0xd4>)
    6da2:	601a      	str	r2, [r3, #0]
    6da4:	4b22      	ldr	r3, [pc, #136]	; (6e30 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	f003 0301 	and.w	r3, r3, #1
    6dac:	2b00      	cmp	r3, #0
    6dae:	d105      	bne.n	6dbc <__static_initialization_and_destruction_0(int, int)+0x64>
    6db0:	4b1f      	ldr	r3, [pc, #124]	; (6e30 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    6db2:	2201      	movs	r2, #1
    6db4:	601a      	str	r2, [r3, #0]
    6db6:	4a1f      	ldr	r2, [pc, #124]	; (6e34 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    6db8:	4b1f      	ldr	r3, [pc, #124]	; (6e38 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    6dba:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    6dbc:	4b1f      	ldr	r3, [pc, #124]	; (6e3c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	f003 0301 	and.w	r3, r3, #1
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d105      	bne.n	6dd4 <__static_initialization_and_destruction_0(int, int)+0x7c>
    6dc8:	4b1c      	ldr	r3, [pc, #112]	; (6e3c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    6dca:	2201      	movs	r2, #1
    6dcc:	601a      	str	r2, [r3, #0]
    };
    6dce:	4a1c      	ldr	r2, [pc, #112]	; (6e40 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    6dd0:	4b1c      	ldr	r3, [pc, #112]	; (6e44 <__static_initialization_and_destruction_0(int, int)+0xec>)
    6dd2:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    6dd4:	4b1c      	ldr	r3, [pc, #112]	; (6e48 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	f003 0301 	and.w	r3, r3, #1
    6ddc:	2b00      	cmp	r3, #0
    6dde:	d105      	bne.n	6dec <__static_initialization_and_destruction_0(int, int)+0x94>
    6de0:	4b19      	ldr	r3, [pc, #100]	; (6e48 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    6de2:	2201      	movs	r2, #1
    6de4:	601a      	str	r2, [r3, #0]
    };
    6de6:	4a19      	ldr	r2, [pc, #100]	; (6e4c <__static_initialization_and_destruction_0(int, int)+0xf4>)
    6de8:	4b19      	ldr	r3, [pc, #100]	; (6e50 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    6dea:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    6dec:	4b19      	ldr	r3, [pc, #100]	; (6e54 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    6dee:	681b      	ldr	r3, [r3, #0]
    6df0:	f003 0301 	and.w	r3, r3, #1
    6df4:	2b00      	cmp	r3, #0
    6df6:	d105      	bne.n	6e04 <__static_initialization_and_destruction_0(int, int)+0xac>
    6df8:	4b16      	ldr	r3, [pc, #88]	; (6e54 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    6dfa:	2201      	movs	r2, #1
    6dfc:	601a      	str	r2, [r3, #0]
    };
    6dfe:	4a16      	ldr	r2, [pc, #88]	; (6e58 <__static_initialization_and_destruction_0(int, int)+0x100>)
    6e00:	4b16      	ldr	r3, [pc, #88]	; (6e5c <__static_initialization_and_destruction_0(int, int)+0x104>)
    6e02:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    6e04:	f7fa f9c0 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    6e08:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    6e0a:	461a      	mov	r2, r3
    6e0c:	4914      	ldr	r1, [pc, #80]	; (6e60 <__static_initialization_and_destruction_0(int, int)+0x108>)
    6e0e:	4815      	ldr	r0, [pc, #84]	; (6e64 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6e10:	f7fa fc20 	bl	1654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    6e14:	bf00      	nop
    6e16:	3708      	adds	r7, #8
    6e18:	46bd      	mov	sp, r7
    6e1a:	bd80      	pop	{r7, pc}
    6e1c:	10000294 	.word	0x10000294
    6e20:	10000128 	.word	0x10000128
    6e24:	10000280 	.word	0x10000280
    6e28:	400fc000 	.word	0x400fc000
    6e2c:	10000120 	.word	0x10000120
    6e30:	1000027c 	.word	0x1000027c
    6e34:	4002c000 	.word	0x4002c000
    6e38:	10000114 	.word	0x10000114
    6e3c:	10000284 	.word	0x10000284
    6e40:	40098000 	.word	0x40098000
    6e44:	1000000c 	.word	0x1000000c
    6e48:	10000288 	.word	0x10000288
    6e4c:	4009c000 	.word	0x4009c000
    6e50:	10000020 	.word	0x10000020
    6e54:	1000028c 	.word	0x1000028c
    6e58:	400a4000 	.word	0x400a4000
    6e5c:	10000034 	.word	0x10000034
    6e60:	0000a9dc 	.word	0x0000a9dc
    6e64:	100003cc 	.word	0x100003cc

00006e68 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    6e68:	b580      	push	{r7, lr}
    6e6a:	af00      	add	r7, sp, #0
    6e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e70:	2001      	movs	r0, #1
    6e72:	f7ff ff71 	bl	6d58 <__static_initialization_and_destruction_0(int, int)>
    6e76:	bd80      	pop	{r7, pc}

00006e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    6e78:	b480      	push	{r7}
    6e7a:	b085      	sub	sp, #20
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	60f8      	str	r0, [r7, #12]
    6e80:	60b9      	str	r1, [r7, #8]
    6e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    6e84:	68fb      	ldr	r3, [r7, #12]
    6e86:	3b04      	subs	r3, #4
    6e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6e8a:	68fb      	ldr	r3, [r7, #12]
    6e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6e92:	68fb      	ldr	r3, [r7, #12]
    6e94:	3b04      	subs	r3, #4
    6e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    6e98:	68bb      	ldr	r3, [r7, #8]
    6e9a:	f023 0201 	bic.w	r2, r3, #1
    6e9e:	68fb      	ldr	r3, [r7, #12]
    6ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6ea2:	68fb      	ldr	r3, [r7, #12]
    6ea4:	3b04      	subs	r3, #4
    6ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6ea8:	4a0c      	ldr	r2, [pc, #48]	; (6edc <pxPortInitialiseStack+0x64>)
    6eaa:	68fb      	ldr	r3, [r7, #12]
    6eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	3b14      	subs	r3, #20
    6eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6eb4:	687a      	ldr	r2, [r7, #4]
    6eb6:	68fb      	ldr	r3, [r7, #12]
    6eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    6eba:	68fb      	ldr	r3, [r7, #12]
    6ebc:	3b04      	subs	r3, #4
    6ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    6ec0:	68fb      	ldr	r3, [r7, #12]
    6ec2:	f06f 0202 	mvn.w	r2, #2
    6ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    6ec8:	68fb      	ldr	r3, [r7, #12]
    6eca:	3b20      	subs	r3, #32
    6ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6ece:	68fb      	ldr	r3, [r7, #12]
}
    6ed0:	4618      	mov	r0, r3
    6ed2:	3714      	adds	r7, #20
    6ed4:	46bd      	mov	sp, r7
    6ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eda:	4770      	bx	lr
    6edc:	00006ee1 	.word	0x00006ee1

00006ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6ee0:	b480      	push	{r7}
    6ee2:	b083      	sub	sp, #12
    6ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    6ee6:	2300      	movs	r3, #0
    6ee8:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    6eea:	f04f 0328 	mov.w	r3, #40	; 0x28
    6eee:	f383 8811 	msr	BASEPRI, r3
    6ef2:	f3bf 8f6f 	isb	sy
    6ef6:	f3bf 8f4f 	dsb	sy
    6efa:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    6efc:	bf00      	nop
    6efe:	683b      	ldr	r3, [r7, #0]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d0fc      	beq.n	6efe <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6f04:	bf00      	nop
    6f06:	370c      	adds	r7, #12
    6f08:	46bd      	mov	sp, r7
    6f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f0e:	4770      	bx	lr

00006f10 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    6f10:	4b07      	ldr	r3, [pc, #28]	; (6f30 <pxCurrentTCBConst2>)
    6f12:	6819      	ldr	r1, [r3, #0]
    6f14:	6808      	ldr	r0, [r1, #0]
    6f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f1a:	f380 8809 	msr	PSP, r0
    6f1e:	f3bf 8f6f 	isb	sy
    6f22:	f04f 0000 	mov.w	r0, #0
    6f26:	f380 8811 	msr	BASEPRI, r0
    6f2a:	4770      	bx	lr
    6f2c:	f3af 8000 	nop.w

00006f30 <pxCurrentTCBConst2>:
    6f30:	100002ac 	.word	0x100002ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6f34:	bf00      	nop
    6f36:	bf00      	nop

00006f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    6f38:	4808      	ldr	r0, [pc, #32]	; (6f5c <prvPortStartFirstTask+0x24>)
    6f3a:	6800      	ldr	r0, [r0, #0]
    6f3c:	6800      	ldr	r0, [r0, #0]
    6f3e:	f380 8808 	msr	MSP, r0
    6f42:	f04f 0000 	mov.w	r0, #0
    6f46:	f380 8814 	msr	CONTROL, r0
    6f4a:	b662      	cpsie	i
    6f4c:	b661      	cpsie	f
    6f4e:	f3bf 8f4f 	dsb	sy
    6f52:	f3bf 8f6f 	isb	sy
    6f56:	df00      	svc	0
    6f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    6f5a:	bf00      	nop
    6f5c:	e000ed08 	.word	0xe000ed08

00006f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6f60:	b580      	push	{r7, lr}
    6f62:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    6f64:	4b10      	ldr	r3, [pc, #64]	; (6fa8 <xPortStartScheduler+0x48>)
    6f66:	681b      	ldr	r3, [r3, #0]
    6f68:	4a0f      	ldr	r2, [pc, #60]	; (6fa8 <xPortStartScheduler+0x48>)
    6f6a:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    6f6e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    6f70:	4b0d      	ldr	r3, [pc, #52]	; (6fa8 <xPortStartScheduler+0x48>)
    6f72:	681b      	ldr	r3, [r3, #0]
    6f74:	4a0c      	ldr	r2, [pc, #48]	; (6fa8 <xPortStartScheduler+0x48>)
    6f76:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    6f7a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    6f7c:	f7ff fe48 	bl	6c10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    6f80:	4b0a      	ldr	r3, [pc, #40]	; (6fac <xPortStartScheduler+0x4c>)
    6f82:	2200      	movs	r2, #0
    6f84:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    6f86:	f000 f89f 	bl	70c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    6f8a:	4b09      	ldr	r3, [pc, #36]	; (6fb0 <xPortStartScheduler+0x50>)
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	4a08      	ldr	r2, [pc, #32]	; (6fb0 <xPortStartScheduler+0x50>)
    6f90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6f94:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    6f96:	f7ff ffcf 	bl	6f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    6f9a:	f7fd f9b5 	bl	4308 <vTaskSwitchContext>
	prvTaskExitError();
    6f9e:	f7ff ff9f 	bl	6ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    6fa2:	2300      	movs	r3, #0
}
    6fa4:	4618      	mov	r0, r3
    6fa6:	bd80      	pop	{r7, pc}
    6fa8:	e000ed20 	.word	0xe000ed20
    6fac:	1000008c 	.word	0x1000008c
    6fb0:	e000ef34 	.word	0xe000ef34

00006fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    6fb4:	b480      	push	{r7}
    6fb6:	b083      	sub	sp, #12
    6fb8:	af00      	add	r7, sp, #0
    6fba:	f04f 0328 	mov.w	r3, #40	; 0x28
    6fbe:	f383 8811 	msr	BASEPRI, r3
    6fc2:	f3bf 8f6f 	isb	sy
    6fc6:	f3bf 8f4f 	dsb	sy
    6fca:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    6fcc:	4b05      	ldr	r3, [pc, #20]	; (6fe4 <vPortEnterCritical+0x30>)
    6fce:	681b      	ldr	r3, [r3, #0]
    6fd0:	3301      	adds	r3, #1
    6fd2:	4a04      	ldr	r2, [pc, #16]	; (6fe4 <vPortEnterCritical+0x30>)
    6fd4:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    6fd6:	bf00      	nop
    6fd8:	370c      	adds	r7, #12
    6fda:	46bd      	mov	sp, r7
    6fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fe0:	4770      	bx	lr
    6fe2:	bf00      	nop
    6fe4:	1000008c 	.word	0x1000008c

00006fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    6fe8:	b480      	push	{r7}
    6fea:	b083      	sub	sp, #12
    6fec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    6fee:	4b0a      	ldr	r3, [pc, #40]	; (7018 <vPortExitCritical+0x30>)
    6ff0:	681b      	ldr	r3, [r3, #0]
    6ff2:	3b01      	subs	r3, #1
    6ff4:	4a08      	ldr	r2, [pc, #32]	; (7018 <vPortExitCritical+0x30>)
    6ff6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    6ff8:	4b07      	ldr	r3, [pc, #28]	; (7018 <vPortExitCritical+0x30>)
    6ffa:	681b      	ldr	r3, [r3, #0]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d104      	bne.n	700a <vPortExitCritical+0x22>
    7000:	2300      	movs	r3, #0
    7002:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    7004:	687b      	ldr	r3, [r7, #4]
    7006:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    700a:	bf00      	nop
    700c:	370c      	adds	r7, #12
    700e:	46bd      	mov	sp, r7
    7010:	f85d 7b04 	ldr.w	r7, [sp], #4
    7014:	4770      	bx	lr
    7016:	bf00      	nop
    7018:	1000008c 	.word	0x1000008c
    701c:	ffffffff 	.word	0xffffffff

00007020 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    7020:	f3ef 8009 	mrs	r0, PSP
    7024:	f3bf 8f6f 	isb	sy
    7028:	4b15      	ldr	r3, [pc, #84]	; (7080 <pxCurrentTCBConst>)
    702a:	681a      	ldr	r2, [r3, #0]
    702c:	f01e 0f10 	tst.w	lr, #16
    7030:	bf08      	it	eq
    7032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    7036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    703a:	6010      	str	r0, [r2, #0]
    703c:	e92d 0009 	stmdb	sp!, {r0, r3}
    7040:	f04f 0028 	mov.w	r0, #40	; 0x28
    7044:	f380 8811 	msr	BASEPRI, r0
    7048:	f3bf 8f4f 	dsb	sy
    704c:	f3bf 8f6f 	isb	sy
    7050:	f7fd f95a 	bl	4308 <vTaskSwitchContext>
    7054:	f04f 0000 	mov.w	r0, #0
    7058:	f380 8811 	msr	BASEPRI, r0
    705c:	bc09      	pop	{r0, r3}
    705e:	6819      	ldr	r1, [r3, #0]
    7060:	6808      	ldr	r0, [r1, #0]
    7062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7066:	f01e 0f10 	tst.w	lr, #16
    706a:	bf08      	it	eq
    706c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    7070:	f380 8809 	msr	PSP, r0
    7074:	f3bf 8f6f 	isb	sy
    7078:	4770      	bx	lr
    707a:	bf00      	nop
    707c:	f3af 8000 	nop.w

00007080 <pxCurrentTCBConst>:
    7080:	100002ac 	.word	0x100002ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    7084:	bf00      	nop
    7086:	bf00      	nop

00007088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    7088:	b580      	push	{r7, lr}
    708a:	b082      	sub	sp, #8
    708c:	af00      	add	r7, sp, #0
	__asm volatile
    708e:	f04f 0328 	mov.w	r3, #40	; 0x28
    7092:	f383 8811 	msr	BASEPRI, r3
    7096:	f3bf 8f6f 	isb	sy
    709a:	f3bf 8f4f 	dsb	sy
    709e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    70a0:	f7fd f886 	bl	41b0 <xTaskIncrementTick>
    70a4:	4603      	mov	r3, r0
    70a6:	2b00      	cmp	r3, #0
    70a8:	d003      	beq.n	70b2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    70aa:	4b06      	ldr	r3, [pc, #24]	; (70c4 <xPortSysTickHandler+0x3c>)
    70ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    70b0:	601a      	str	r2, [r3, #0]
    70b2:	2300      	movs	r3, #0
    70b4:	603b      	str	r3, [r7, #0]
	__asm volatile
    70b6:	683b      	ldr	r3, [r7, #0]
    70b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    70bc:	bf00      	nop
    70be:	3708      	adds	r7, #8
    70c0:	46bd      	mov	sp, r7
    70c2:	bd80      	pop	{r7, pc}
    70c4:	e000ed04 	.word	0xe000ed04

000070c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    70c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 70d8 <vPortEnableVFP+0x10>
    70cc:	6801      	ldr	r1, [r0, #0]
    70ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    70d2:	6001      	str	r1, [r0, #0]
    70d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    70d6:	bf00      	nop
    70d8:	e000ed88 	.word	0xe000ed88

000070dc <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    70dc:	b480      	push	{r7}
    70de:	b083      	sub	sp, #12
    70e0:	af00      	add	r7, sp, #0
    70e2:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    70e4:	2350      	movs	r3, #80	; 0x50
    70e6:	4618      	mov	r0, r3
    70e8:	370c      	adds	r7, #12
    70ea:	46bd      	mov	sp, r7
    70ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    70f0:	4770      	bx	lr
    70f2:	Address 0x00000000000070f2 is out of bounds.


000070f4 <vApplicationGetIdleTaskMemory>:
static StackType_t idle_task_stack[configMINIMAL_STACK_SIZE];
extern "C" void vApplicationGetIdleTaskMemory(  // NOLINT
    StaticTask_t ** ppx_idle_task_tcb_buffer,
    StackType_t ** ppx_idle_task_stack_buffer,
    uint32_t * pul_idle_task_stack_size)
{
    70f4:	b580      	push	{r7, lr}
    70f6:	b084      	sub	sp, #16
    70f8:	af00      	add	r7, sp, #0
    70fa:	60f8      	str	r0, [r7, #12]
    70fc:	60b9      	str	r1, [r7, #8]
    70fe:	607a      	str	r2, [r7, #4]
  *ppx_idle_task_tcb_buffer   = &idle_task_tcb;
    7100:	68fb      	ldr	r3, [r7, #12]
    7102:	4a07      	ldr	r2, [pc, #28]	; (7120 <vApplicationGetIdleTaskMemory+0x2c>)
    7104:	601a      	str	r2, [r3, #0]
  *ppx_idle_task_stack_buffer = idle_task_stack;
    7106:	68bb      	ldr	r3, [r7, #8]
    7108:	4a06      	ldr	r2, [pc, #24]	; (7124 <vApplicationGetIdleTaskMemory+0x30>)
    710a:	601a      	str	r2, [r3, #0]
  *pul_idle_task_stack_size   = std::size(idle_task_stack);
    710c:	4805      	ldr	r0, [pc, #20]	; (7124 <vApplicationGetIdleTaskMemory+0x30>)
    710e:	f7ff ffe5 	bl	70dc <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>
    7112:	4602      	mov	r2, r0
    7114:	687b      	ldr	r3, [r7, #4]
    7116:	601a      	str	r2, [r3, #0]
}
    7118:	bf00      	nop
    711a:	3710      	adds	r7, #16
    711c:	46bd      	mov	sp, r7
    711e:	bd80      	pop	{r7, pc}
    7120:	100003d8 	.word	0x100003d8
    7124:	10000438 	.word	0x10000438

00007128 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    7128:	b480      	push	{r7}
    712a:	b083      	sub	sp, #12
    712c:	af00      	add	r7, sp, #0
    712e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    7130:	f44f 7300 	mov.w	r3, #512	; 0x200
    7134:	4618      	mov	r0, r3
    7136:	370c      	adds	r7, #12
    7138:	46bd      	mov	sp, r7
    713a:	f85d 7b04 	ldr.w	r7, [sp], #4
    713e:	4770      	bx	lr

00007140 <vApplicationGetTimerTaskMemory>:
static StackType_t timer_task_stack[configTIMER_TASK_STACK_DEPTH];
extern "C" void vApplicationGetTimerTaskMemory( // NOLINT
    StaticTask_t ** ppx_timer_task_tcb_buffer,
    StackType_t ** ppx_timer_task_stack_buffer,
    uint32_t * pul_timer_task_stack_size)
{
    7140:	b580      	push	{r7, lr}
    7142:	b084      	sub	sp, #16
    7144:	af00      	add	r7, sp, #0
    7146:	60f8      	str	r0, [r7, #12]
    7148:	60b9      	str	r1, [r7, #8]
    714a:	607a      	str	r2, [r7, #4]
    *ppx_timer_task_tcb_buffer = &timer_task_tcb;
    714c:	68fb      	ldr	r3, [r7, #12]
    714e:	4a07      	ldr	r2, [pc, #28]	; (716c <vApplicationGetTimerTaskMemory+0x2c>)
    7150:	601a      	str	r2, [r3, #0]
    *ppx_timer_task_stack_buffer = timer_task_stack;
    7152:	68bb      	ldr	r3, [r7, #8]
    7154:	4a06      	ldr	r2, [pc, #24]	; (7170 <vApplicationGetTimerTaskMemory+0x30>)
    7156:	601a      	str	r2, [r3, #0]
    *pul_timer_task_stack_size = std::size(timer_task_stack);
    7158:	4805      	ldr	r0, [pc, #20]	; (7170 <vApplicationGetTimerTaskMemory+0x30>)
    715a:	f7ff ffe5 	bl	7128 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>
    715e:	4602      	mov	r2, r0
    7160:	687b      	ldr	r3, [r7, #4]
    7162:	601a      	str	r2, [r3, #0]
}
    7164:	bf00      	nop
    7166:	3710      	adds	r7, #16
    7168:	46bd      	mov	sp, r7
    716a:	bd80      	pop	{r7, pc}
    716c:	10000578 	.word	0x10000578
    7170:	100005d8 	.word	0x100005d8

00007174 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    7174:	b580      	push	{r7, lr}
    7176:	b088      	sub	sp, #32
    7178:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    717a:	2300      	movs	r3, #0
    717c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    717e:	f000 fa5b 	bl	7638 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    7182:	4b15      	ldr	r3, [pc, #84]	; (71d8 <xTimerCreateTimerTask+0x64>)
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	2b00      	cmp	r3, #0
    7188:	d020      	beq.n	71cc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    718a:	2300      	movs	r3, #0
    718c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    718e:	2300      	movs	r3, #0
    7190:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    7192:	463a      	mov	r2, r7
    7194:	1d39      	adds	r1, r7, #4
    7196:	f107 0308 	add.w	r3, r7, #8
    719a:	4618      	mov	r0, r3
    719c:	f7ff ffd0 	bl	7140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    71a0:	6839      	ldr	r1, [r7, #0]
    71a2:	687b      	ldr	r3, [r7, #4]
    71a4:	68ba      	ldr	r2, [r7, #8]
    71a6:	9202      	str	r2, [sp, #8]
    71a8:	9301      	str	r3, [sp, #4]
    71aa:	2304      	movs	r3, #4
    71ac:	9300      	str	r3, [sp, #0]
    71ae:	2300      	movs	r3, #0
    71b0:	460a      	mov	r2, r1
    71b2:	490a      	ldr	r1, [pc, #40]	; (71dc <xTimerCreateTimerTask+0x68>)
    71b4:	480a      	ldr	r0, [pc, #40]	; (71e0 <xTimerCreateTimerTask+0x6c>)
    71b6:	f7fc fd77 	bl	3ca8 <xTaskCreateStatic>
    71ba:	4602      	mov	r2, r0
    71bc:	4b09      	ldr	r3, [pc, #36]	; (71e4 <xTimerCreateTimerTask+0x70>)
    71be:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    71c0:	4b08      	ldr	r3, [pc, #32]	; (71e4 <xTimerCreateTimerTask+0x70>)
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	2b00      	cmp	r3, #0
    71c6:	d001      	beq.n	71cc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
    71c8:	2301      	movs	r3, #1
    71ca:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    71cc:	68fb      	ldr	r3, [r7, #12]
}
    71ce:	4618      	mov	r0, r3
    71d0:	3710      	adds	r7, #16
    71d2:	46bd      	mov	sp, r7
    71d4:	bd80      	pop	{r7, pc}
    71d6:	bf00      	nop
    71d8:	10000e08 	.word	0x10000e08
    71dc:	0000aa44 	.word	0x0000aa44
    71e0:	000072cd 	.word	0x000072cd
    71e4:	10000e0c 	.word	0x10000e0c

000071e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    71e8:	b580      	push	{r7, lr}
    71ea:	b088      	sub	sp, #32
    71ec:	af00      	add	r7, sp, #0
    71ee:	60f8      	str	r0, [r7, #12]
    71f0:	60b9      	str	r1, [r7, #8]
    71f2:	607a      	str	r2, [r7, #4]
    71f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    71f6:	2300      	movs	r3, #0
    71f8:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    71fa:	4b1a      	ldr	r3, [pc, #104]	; (7264 <xTimerGenericCommand+0x7c>)
    71fc:	681b      	ldr	r3, [r3, #0]
    71fe:	2b00      	cmp	r3, #0
    7200:	d02a      	beq.n	7258 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    7202:	68bb      	ldr	r3, [r7, #8]
    7204:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    7206:	687b      	ldr	r3, [r7, #4]
    7208:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    720a:	68fb      	ldr	r3, [r7, #12]
    720c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    720e:	68bb      	ldr	r3, [r7, #8]
    7210:	2b05      	cmp	r3, #5
    7212:	dc18      	bgt.n	7246 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    7214:	f7fd fa82 	bl	471c <xTaskGetSchedulerState>
    7218:	4603      	mov	r3, r0
    721a:	2b02      	cmp	r3, #2
    721c:	d109      	bne.n	7232 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    721e:	4b11      	ldr	r3, [pc, #68]	; (7264 <xTimerGenericCommand+0x7c>)
    7220:	6818      	ldr	r0, [r3, #0]
    7222:	f107 0110 	add.w	r1, r7, #16
    7226:	2300      	movs	r3, #0
    7228:	6aba      	ldr	r2, [r7, #40]	; 0x28
    722a:	f7fd fc2b 	bl	4a84 <xQueueGenericSend>
    722e:	61f8      	str	r0, [r7, #28]
    7230:	e012      	b.n	7258 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    7232:	4b0c      	ldr	r3, [pc, #48]	; (7264 <xTimerGenericCommand+0x7c>)
    7234:	6818      	ldr	r0, [r3, #0]
    7236:	f107 0110 	add.w	r1, r7, #16
    723a:	2300      	movs	r3, #0
    723c:	2200      	movs	r2, #0
    723e:	f7fd fc21 	bl	4a84 <xQueueGenericSend>
    7242:	61f8      	str	r0, [r7, #28]
    7244:	e008      	b.n	7258 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    7246:	4b07      	ldr	r3, [pc, #28]	; (7264 <xTimerGenericCommand+0x7c>)
    7248:	6818      	ldr	r0, [r3, #0]
    724a:	f107 0110 	add.w	r1, r7, #16
    724e:	2300      	movs	r3, #0
    7250:	683a      	ldr	r2, [r7, #0]
    7252:	f7fd fcc1 	bl	4bd8 <xQueueGenericSendFromISR>
    7256:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    7258:	69fb      	ldr	r3, [r7, #28]
}
    725a:	4618      	mov	r0, r3
    725c:	3720      	adds	r7, #32
    725e:	46bd      	mov	sp, r7
    7260:	bd80      	pop	{r7, pc}
    7262:	bf00      	nop
    7264:	10000e08 	.word	0x10000e08

00007268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    7268:	b580      	push	{r7, lr}
    726a:	b086      	sub	sp, #24
    726c:	af02      	add	r7, sp, #8
    726e:	6078      	str	r0, [r7, #4]
    7270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    7272:	4b15      	ldr	r3, [pc, #84]	; (72c8 <prvProcessExpiredTimer+0x60>)
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	68db      	ldr	r3, [r3, #12]
    7278:	68db      	ldr	r3, [r3, #12]
    727a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    727c:	68fb      	ldr	r3, [r7, #12]
    727e:	3304      	adds	r3, #4
    7280:	4618      	mov	r0, r3
    7282:	f7fc fce7 	bl	3c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    7286:	68fb      	ldr	r3, [r7, #12]
    7288:	69db      	ldr	r3, [r3, #28]
    728a:	2b01      	cmp	r3, #1
    728c:	d114      	bne.n	72b8 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    728e:	68fb      	ldr	r3, [r7, #12]
    7290:	699a      	ldr	r2, [r3, #24]
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	18d1      	adds	r1, r2, r3
    7296:	687b      	ldr	r3, [r7, #4]
    7298:	683a      	ldr	r2, [r7, #0]
    729a:	68f8      	ldr	r0, [r7, #12]
    729c:	f000 f8ba 	bl	7414 <prvInsertTimerInActiveList>
    72a0:	4603      	mov	r3, r0
    72a2:	2b00      	cmp	r3, #0
    72a4:	d008      	beq.n	72b8 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    72a6:	2300      	movs	r3, #0
    72a8:	9300      	str	r3, [sp, #0]
    72aa:	2300      	movs	r3, #0
    72ac:	687a      	ldr	r2, [r7, #4]
    72ae:	2100      	movs	r1, #0
    72b0:	68f8      	ldr	r0, [r7, #12]
    72b2:	f7ff ff99 	bl	71e8 <xTimerGenericCommand>
    72b6:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    72b8:	68fb      	ldr	r3, [r7, #12]
    72ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72bc:	68f8      	ldr	r0, [r7, #12]
    72be:	4798      	blx	r3
}
    72c0:	bf00      	nop
    72c2:	3710      	adds	r7, #16
    72c4:	46bd      	mov	sp, r7
    72c6:	bd80      	pop	{r7, pc}
    72c8:	10000e00 	.word	0x10000e00

000072cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    72cc:	b580      	push	{r7, lr}
    72ce:	b084      	sub	sp, #16
    72d0:	af00      	add	r7, sp, #0
    72d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    72d4:	f107 0308 	add.w	r3, r7, #8
    72d8:	4618      	mov	r0, r3
    72da:	f000 f857 	bl	738c <prvGetNextExpireTime>
    72de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    72e0:	68bb      	ldr	r3, [r7, #8]
    72e2:	4619      	mov	r1, r3
    72e4:	68f8      	ldr	r0, [r7, #12]
    72e6:	f000 f803 	bl	72f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    72ea:	f000 f8d5 	bl	7498 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    72ee:	e7f1      	b.n	72d4 <prvTimerTask+0x8>

000072f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    72f0:	b580      	push	{r7, lr}
    72f2:	b084      	sub	sp, #16
    72f4:	af00      	add	r7, sp, #0
    72f6:	6078      	str	r0, [r7, #4]
    72f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    72fa:	f7fc fead 	bl	4058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    72fe:	f107 0308 	add.w	r3, r7, #8
    7302:	4618      	mov	r0, r3
    7304:	f000 f866 	bl	73d4 <prvSampleTimeNow>
    7308:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    730a:	68bb      	ldr	r3, [r7, #8]
    730c:	2b00      	cmp	r3, #0
    730e:	d130      	bne.n	7372 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    7310:	683b      	ldr	r3, [r7, #0]
    7312:	2b00      	cmp	r3, #0
    7314:	d10a      	bne.n	732c <prvProcessTimerOrBlockTask+0x3c>
    7316:	687a      	ldr	r2, [r7, #4]
    7318:	68fb      	ldr	r3, [r7, #12]
    731a:	429a      	cmp	r2, r3
    731c:	d806      	bhi.n	732c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    731e:	f7fc fea9 	bl	4074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    7322:	68f9      	ldr	r1, [r7, #12]
    7324:	6878      	ldr	r0, [r7, #4]
    7326:	f7ff ff9f 	bl	7268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    732a:	e024      	b.n	7376 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    732c:	683b      	ldr	r3, [r7, #0]
    732e:	2b00      	cmp	r3, #0
    7330:	d008      	beq.n	7344 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    7332:	4b13      	ldr	r3, [pc, #76]	; (7380 <prvProcessTimerOrBlockTask+0x90>)
    7334:	681b      	ldr	r3, [r3, #0]
    7336:	681b      	ldr	r3, [r3, #0]
    7338:	2b00      	cmp	r3, #0
    733a:	bf0c      	ite	eq
    733c:	2301      	moveq	r3, #1
    733e:	2300      	movne	r3, #0
    7340:	b2db      	uxtb	r3, r3
    7342:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    7344:	4b0f      	ldr	r3, [pc, #60]	; (7384 <prvProcessTimerOrBlockTask+0x94>)
    7346:	6818      	ldr	r0, [r3, #0]
    7348:	687a      	ldr	r2, [r7, #4]
    734a:	68fb      	ldr	r3, [r7, #12]
    734c:	1ad3      	subs	r3, r2, r3
    734e:	683a      	ldr	r2, [r7, #0]
    7350:	4619      	mov	r1, r3
    7352:	f7fd fe75 	bl	5040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    7356:	f7fc fe8d 	bl	4074 <xTaskResumeAll>
    735a:	4603      	mov	r3, r0
    735c:	2b00      	cmp	r3, #0
    735e:	d10a      	bne.n	7376 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    7360:	4b09      	ldr	r3, [pc, #36]	; (7388 <prvProcessTimerOrBlockTask+0x98>)
    7362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7366:	601a      	str	r2, [r3, #0]
    7368:	f3bf 8f4f 	dsb	sy
    736c:	f3bf 8f6f 	isb	sy
}
    7370:	e001      	b.n	7376 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    7372:	f7fc fe7f 	bl	4074 <xTaskResumeAll>
}
    7376:	bf00      	nop
    7378:	3710      	adds	r7, #16
    737a:	46bd      	mov	sp, r7
    737c:	bd80      	pop	{r7, pc}
    737e:	bf00      	nop
    7380:	10000e04 	.word	0x10000e04
    7384:	10000e08 	.word	0x10000e08
    7388:	e000ed04 	.word	0xe000ed04

0000738c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    738c:	b480      	push	{r7}
    738e:	b085      	sub	sp, #20
    7390:	af00      	add	r7, sp, #0
    7392:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    7394:	4b0e      	ldr	r3, [pc, #56]	; (73d0 <prvGetNextExpireTime+0x44>)
    7396:	681b      	ldr	r3, [r3, #0]
    7398:	681b      	ldr	r3, [r3, #0]
    739a:	2b00      	cmp	r3, #0
    739c:	bf0c      	ite	eq
    739e:	2301      	moveq	r3, #1
    73a0:	2300      	movne	r3, #0
    73a2:	b2db      	uxtb	r3, r3
    73a4:	461a      	mov	r2, r3
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    73aa:	687b      	ldr	r3, [r7, #4]
    73ac:	681b      	ldr	r3, [r3, #0]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d105      	bne.n	73be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    73b2:	4b07      	ldr	r3, [pc, #28]	; (73d0 <prvGetNextExpireTime+0x44>)
    73b4:	681b      	ldr	r3, [r3, #0]
    73b6:	68db      	ldr	r3, [r3, #12]
    73b8:	681b      	ldr	r3, [r3, #0]
    73ba:	60fb      	str	r3, [r7, #12]
    73bc:	e001      	b.n	73c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    73be:	2300      	movs	r3, #0
    73c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    73c2:	68fb      	ldr	r3, [r7, #12]
}
    73c4:	4618      	mov	r0, r3
    73c6:	3714      	adds	r7, #20
    73c8:	46bd      	mov	sp, r7
    73ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ce:	4770      	bx	lr
    73d0:	10000e00 	.word	0x10000e00

000073d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    73d4:	b580      	push	{r7, lr}
    73d6:	b084      	sub	sp, #16
    73d8:	af00      	add	r7, sp, #0
    73da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    73dc:	f7fc fed8 	bl	4190 <xTaskGetTickCount>
    73e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    73e2:	4b0b      	ldr	r3, [pc, #44]	; (7410 <prvSampleTimeNow+0x3c>)
    73e4:	681b      	ldr	r3, [r3, #0]
    73e6:	68fa      	ldr	r2, [r7, #12]
    73e8:	429a      	cmp	r2, r3
    73ea:	d205      	bcs.n	73f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    73ec:	f000 f8d0 	bl	7590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	2201      	movs	r2, #1
    73f4:	601a      	str	r2, [r3, #0]
    73f6:	e002      	b.n	73fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	2200      	movs	r2, #0
    73fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    73fe:	4a04      	ldr	r2, [pc, #16]	; (7410 <prvSampleTimeNow+0x3c>)
    7400:	68fb      	ldr	r3, [r7, #12]
    7402:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    7404:	68fb      	ldr	r3, [r7, #12]
}
    7406:	4618      	mov	r0, r3
    7408:	3710      	adds	r7, #16
    740a:	46bd      	mov	sp, r7
    740c:	bd80      	pop	{r7, pc}
    740e:	bf00      	nop
    7410:	10000e10 	.word	0x10000e10

00007414 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    7414:	b580      	push	{r7, lr}
    7416:	b086      	sub	sp, #24
    7418:	af00      	add	r7, sp, #0
    741a:	60f8      	str	r0, [r7, #12]
    741c:	60b9      	str	r1, [r7, #8]
    741e:	607a      	str	r2, [r7, #4]
    7420:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    7422:	2300      	movs	r3, #0
    7424:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    7426:	68fb      	ldr	r3, [r7, #12]
    7428:	68ba      	ldr	r2, [r7, #8]
    742a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    742c:	68fb      	ldr	r3, [r7, #12]
    742e:	68fa      	ldr	r2, [r7, #12]
    7430:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    7432:	68ba      	ldr	r2, [r7, #8]
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	429a      	cmp	r2, r3
    7438:	d812      	bhi.n	7460 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    743a:	687a      	ldr	r2, [r7, #4]
    743c:	683b      	ldr	r3, [r7, #0]
    743e:	1ad2      	subs	r2, r2, r3
    7440:	68fb      	ldr	r3, [r7, #12]
    7442:	699b      	ldr	r3, [r3, #24]
    7444:	429a      	cmp	r2, r3
    7446:	d302      	bcc.n	744e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    7448:	2301      	movs	r3, #1
    744a:	617b      	str	r3, [r7, #20]
    744c:	e01b      	b.n	7486 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    744e:	4b10      	ldr	r3, [pc, #64]	; (7490 <prvInsertTimerInActiveList+0x7c>)
    7450:	681a      	ldr	r2, [r3, #0]
    7452:	68fb      	ldr	r3, [r7, #12]
    7454:	3304      	adds	r3, #4
    7456:	4619      	mov	r1, r3
    7458:	4610      	mov	r0, r2
    745a:	f7fc fbc2 	bl	3be2 <vListInsert>
    745e:	e012      	b.n	7486 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    7460:	687a      	ldr	r2, [r7, #4]
    7462:	683b      	ldr	r3, [r7, #0]
    7464:	429a      	cmp	r2, r3
    7466:	d206      	bcs.n	7476 <prvInsertTimerInActiveList+0x62>
    7468:	68ba      	ldr	r2, [r7, #8]
    746a:	683b      	ldr	r3, [r7, #0]
    746c:	429a      	cmp	r2, r3
    746e:	d302      	bcc.n	7476 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    7470:	2301      	movs	r3, #1
    7472:	617b      	str	r3, [r7, #20]
    7474:	e007      	b.n	7486 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    7476:	4b07      	ldr	r3, [pc, #28]	; (7494 <prvInsertTimerInActiveList+0x80>)
    7478:	681a      	ldr	r2, [r3, #0]
    747a:	68fb      	ldr	r3, [r7, #12]
    747c:	3304      	adds	r3, #4
    747e:	4619      	mov	r1, r3
    7480:	4610      	mov	r0, r2
    7482:	f7fc fbae 	bl	3be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
    7486:	697b      	ldr	r3, [r7, #20]
}
    7488:	4618      	mov	r0, r3
    748a:	3718      	adds	r7, #24
    748c:	46bd      	mov	sp, r7
    748e:	bd80      	pop	{r7, pc}
    7490:	10000e04 	.word	0x10000e04
    7494:	10000e00 	.word	0x10000e00

00007498 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    7498:	b580      	push	{r7, lr}
    749a:	b08a      	sub	sp, #40	; 0x28
    749c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    749e:	e065      	b.n	756c <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    74a0:	68bb      	ldr	r3, [r7, #8]
    74a2:	2b00      	cmp	r3, #0
    74a4:	db61      	blt.n	756a <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    74a6:	693b      	ldr	r3, [r7, #16]
    74a8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    74aa:	69fb      	ldr	r3, [r7, #28]
    74ac:	695b      	ldr	r3, [r3, #20]
    74ae:	2b00      	cmp	r3, #0
    74b0:	d004      	beq.n	74bc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    74b2:	69fb      	ldr	r3, [r7, #28]
    74b4:	3304      	adds	r3, #4
    74b6:	4618      	mov	r0, r3
    74b8:	f7fc fbcc 	bl	3c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    74bc:	1d3b      	adds	r3, r7, #4
    74be:	4618      	mov	r0, r3
    74c0:	f7ff ff88 	bl	73d4 <prvSampleTimeNow>
    74c4:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
    74c6:	68bb      	ldr	r3, [r7, #8]
    74c8:	2b09      	cmp	r3, #9
    74ca:	d84f      	bhi.n	756c <prvProcessReceivedCommands+0xd4>
    74cc:	a201      	add	r2, pc, #4	; (adr r2, 74d4 <prvProcessReceivedCommands+0x3c>)
    74ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    74d2:	bf00      	nop
    74d4:	000074fd 	.word	0x000074fd
    74d8:	000074fd 	.word	0x000074fd
    74dc:	000074fd 	.word	0x000074fd
    74e0:	0000756d 	.word	0x0000756d
    74e4:	0000753f 	.word	0x0000753f
    74e8:	00007559 	.word	0x00007559
    74ec:	000074fd 	.word	0x000074fd
    74f0:	000074fd 	.word	0x000074fd
    74f4:	0000756d 	.word	0x0000756d
    74f8:	0000753f 	.word	0x0000753f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    74fc:	68fa      	ldr	r2, [r7, #12]
    74fe:	69fb      	ldr	r3, [r7, #28]
    7500:	699b      	ldr	r3, [r3, #24]
    7502:	18d1      	adds	r1, r2, r3
    7504:	68fb      	ldr	r3, [r7, #12]
    7506:	69ba      	ldr	r2, [r7, #24]
    7508:	69f8      	ldr	r0, [r7, #28]
    750a:	f7ff ff83 	bl	7414 <prvInsertTimerInActiveList>
    750e:	4603      	mov	r3, r0
    7510:	2b00      	cmp	r3, #0
    7512:	d02b      	beq.n	756c <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    7514:	69fb      	ldr	r3, [r7, #28]
    7516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7518:	69f8      	ldr	r0, [r7, #28]
    751a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    751c:	69fb      	ldr	r3, [r7, #28]
    751e:	69db      	ldr	r3, [r3, #28]
    7520:	2b01      	cmp	r3, #1
    7522:	d123      	bne.n	756c <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    7524:	68fa      	ldr	r2, [r7, #12]
    7526:	69fb      	ldr	r3, [r7, #28]
    7528:	699b      	ldr	r3, [r3, #24]
    752a:	441a      	add	r2, r3
    752c:	2300      	movs	r3, #0
    752e:	9300      	str	r3, [sp, #0]
    7530:	2300      	movs	r3, #0
    7532:	2100      	movs	r1, #0
    7534:	69f8      	ldr	r0, [r7, #28]
    7536:	f7ff fe57 	bl	71e8 <xTimerGenericCommand>
    753a:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    753c:	e016      	b.n	756c <prvProcessReceivedCommands+0xd4>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    753e:	68fa      	ldr	r2, [r7, #12]
    7540:	69fb      	ldr	r3, [r7, #28]
    7542:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    7544:	69fb      	ldr	r3, [r7, #28]
    7546:	699a      	ldr	r2, [r3, #24]
    7548:	69bb      	ldr	r3, [r7, #24]
    754a:	18d1      	adds	r1, r2, r3
    754c:	69bb      	ldr	r3, [r7, #24]
    754e:	69ba      	ldr	r2, [r7, #24]
    7550:	69f8      	ldr	r0, [r7, #28]
    7552:	f7ff ff5f 	bl	7414 <prvInsertTimerInActiveList>
					break;
    7556:	e009      	b.n	756c <prvProcessReceivedCommands+0xd4>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    7558:	69fb      	ldr	r3, [r7, #28]
    755a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    755e:	2b00      	cmp	r3, #0
    7560:	d104      	bne.n	756c <prvProcessReceivedCommands+0xd4>
						{
							vPortFree( pxTimer );
    7562:	69f8      	ldr	r0, [r7, #28]
    7564:	f7fd fdb2 	bl	50cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    7568:	e000      	b.n	756c <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    756a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    756c:	4b07      	ldr	r3, [pc, #28]	; (758c <prvProcessReceivedCommands+0xf4>)
    756e:	681b      	ldr	r3, [r3, #0]
    7570:	f107 0108 	add.w	r1, r7, #8
    7574:	2200      	movs	r2, #0
    7576:	4618      	mov	r0, r3
    7578:	f7fd fb88 	bl	4c8c <xQueueReceive>
    757c:	4603      	mov	r3, r0
    757e:	2b00      	cmp	r3, #0
    7580:	d18e      	bne.n	74a0 <prvProcessReceivedCommands+0x8>
	}
}
    7582:	bf00      	nop
    7584:	3720      	adds	r7, #32
    7586:	46bd      	mov	sp, r7
    7588:	bd80      	pop	{r7, pc}
    758a:	bf00      	nop
    758c:	10000e08 	.word	0x10000e08

00007590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    7590:	b580      	push	{r7, lr}
    7592:	b088      	sub	sp, #32
    7594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    7596:	e037      	b.n	7608 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    7598:	4b25      	ldr	r3, [pc, #148]	; (7630 <prvSwitchTimerLists+0xa0>)
    759a:	681b      	ldr	r3, [r3, #0]
    759c:	68db      	ldr	r3, [r3, #12]
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    75a2:	4b23      	ldr	r3, [pc, #140]	; (7630 <prvSwitchTimerLists+0xa0>)
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	68db      	ldr	r3, [r3, #12]
    75a8:	68db      	ldr	r3, [r3, #12]
    75aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    75ac:	68fb      	ldr	r3, [r7, #12]
    75ae:	3304      	adds	r3, #4
    75b0:	4618      	mov	r0, r3
    75b2:	f7fc fb4f 	bl	3c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    75b6:	68fb      	ldr	r3, [r7, #12]
    75b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    75ba:	68f8      	ldr	r0, [r7, #12]
    75bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    75be:	68fb      	ldr	r3, [r7, #12]
    75c0:	69db      	ldr	r3, [r3, #28]
    75c2:	2b01      	cmp	r3, #1
    75c4:	d120      	bne.n	7608 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    75c6:	68fb      	ldr	r3, [r7, #12]
    75c8:	699b      	ldr	r3, [r3, #24]
    75ca:	693a      	ldr	r2, [r7, #16]
    75cc:	4413      	add	r3, r2
    75ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    75d0:	68ba      	ldr	r2, [r7, #8]
    75d2:	693b      	ldr	r3, [r7, #16]
    75d4:	429a      	cmp	r2, r3
    75d6:	d90e      	bls.n	75f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    75d8:	68fb      	ldr	r3, [r7, #12]
    75da:	68ba      	ldr	r2, [r7, #8]
    75dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    75de:	68fb      	ldr	r3, [r7, #12]
    75e0:	68fa      	ldr	r2, [r7, #12]
    75e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    75e4:	4b12      	ldr	r3, [pc, #72]	; (7630 <prvSwitchTimerLists+0xa0>)
    75e6:	681a      	ldr	r2, [r3, #0]
    75e8:	68fb      	ldr	r3, [r7, #12]
    75ea:	3304      	adds	r3, #4
    75ec:	4619      	mov	r1, r3
    75ee:	4610      	mov	r0, r2
    75f0:	f7fc faf7 	bl	3be2 <vListInsert>
    75f4:	e008      	b.n	7608 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    75f6:	2300      	movs	r3, #0
    75f8:	9300      	str	r3, [sp, #0]
    75fa:	2300      	movs	r3, #0
    75fc:	693a      	ldr	r2, [r7, #16]
    75fe:	2100      	movs	r1, #0
    7600:	68f8      	ldr	r0, [r7, #12]
    7602:	f7ff fdf1 	bl	71e8 <xTimerGenericCommand>
    7606:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    7608:	4b09      	ldr	r3, [pc, #36]	; (7630 <prvSwitchTimerLists+0xa0>)
    760a:	681b      	ldr	r3, [r3, #0]
    760c:	681b      	ldr	r3, [r3, #0]
    760e:	2b00      	cmp	r3, #0
    7610:	d1c2      	bne.n	7598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    7612:	4b07      	ldr	r3, [pc, #28]	; (7630 <prvSwitchTimerLists+0xa0>)
    7614:	681b      	ldr	r3, [r3, #0]
    7616:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    7618:	4b06      	ldr	r3, [pc, #24]	; (7634 <prvSwitchTimerLists+0xa4>)
    761a:	681b      	ldr	r3, [r3, #0]
    761c:	4a04      	ldr	r2, [pc, #16]	; (7630 <prvSwitchTimerLists+0xa0>)
    761e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    7620:	4a04      	ldr	r2, [pc, #16]	; (7634 <prvSwitchTimerLists+0xa4>)
    7622:	697b      	ldr	r3, [r7, #20]
    7624:	6013      	str	r3, [r2, #0]
}
    7626:	bf00      	nop
    7628:	3718      	adds	r7, #24
    762a:	46bd      	mov	sp, r7
    762c:	bd80      	pop	{r7, pc}
    762e:	bf00      	nop
    7630:	10000e00 	.word	0x10000e00
    7634:	10000e04 	.word	0x10000e04

00007638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    7638:	b580      	push	{r7, lr}
    763a:	b082      	sub	sp, #8
    763c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    763e:	f7ff fcb9 	bl	6fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    7642:	4b15      	ldr	r3, [pc, #84]	; (7698 <prvCheckForValidListAndQueue+0x60>)
    7644:	681b      	ldr	r3, [r3, #0]
    7646:	2b00      	cmp	r3, #0
    7648:	d120      	bne.n	768c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    764a:	4814      	ldr	r0, [pc, #80]	; (769c <prvCheckForValidListAndQueue+0x64>)
    764c:	f7fc fa78 	bl	3b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    7650:	4813      	ldr	r0, [pc, #76]	; (76a0 <prvCheckForValidListAndQueue+0x68>)
    7652:	f7fc fa75 	bl	3b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    7656:	4b13      	ldr	r3, [pc, #76]	; (76a4 <prvCheckForValidListAndQueue+0x6c>)
    7658:	4a10      	ldr	r2, [pc, #64]	; (769c <prvCheckForValidListAndQueue+0x64>)
    765a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    765c:	4b12      	ldr	r3, [pc, #72]	; (76a8 <prvCheckForValidListAndQueue+0x70>)
    765e:	4a10      	ldr	r2, [pc, #64]	; (76a0 <prvCheckForValidListAndQueue+0x68>)
    7660:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    7662:	2300      	movs	r3, #0
    7664:	9300      	str	r3, [sp, #0]
    7666:	4b11      	ldr	r3, [pc, #68]	; (76ac <prvCheckForValidListAndQueue+0x74>)
    7668:	4a11      	ldr	r2, [pc, #68]	; (76b0 <prvCheckForValidListAndQueue+0x78>)
    766a:	210c      	movs	r1, #12
    766c:	200a      	movs	r0, #10
    766e:	f7fd f997 	bl	49a0 <xQueueGenericCreateStatic>
    7672:	4602      	mov	r2, r0
    7674:	4b08      	ldr	r3, [pc, #32]	; (7698 <prvCheckForValidListAndQueue+0x60>)
    7676:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    7678:	4b07      	ldr	r3, [pc, #28]	; (7698 <prvCheckForValidListAndQueue+0x60>)
    767a:	681b      	ldr	r3, [r3, #0]
    767c:	2b00      	cmp	r3, #0
    767e:	d005      	beq.n	768c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    7680:	4b05      	ldr	r3, [pc, #20]	; (7698 <prvCheckForValidListAndQueue+0x60>)
    7682:	681b      	ldr	r3, [r3, #0]
    7684:	490b      	ldr	r1, [pc, #44]	; (76b4 <prvCheckForValidListAndQueue+0x7c>)
    7686:	4618      	mov	r0, r3
    7688:	f7fd fcb2 	bl	4ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    768c:	f7ff fcac 	bl	6fe8 <vPortExitCritical>
}
    7690:	bf00      	nop
    7692:	46bd      	mov	sp, r7
    7694:	bd80      	pop	{r7, pc}
    7696:	bf00      	nop
    7698:	10000e08 	.word	0x10000e08
    769c:	10000dd8 	.word	0x10000dd8
    76a0:	10000dec 	.word	0x10000dec
    76a4:	10000e00 	.word	0x10000e00
    76a8:	10000e04 	.word	0x10000e04
    76ac:	10000e8c 	.word	0x10000e8c
    76b0:	10000e14 	.word	0x10000e14
    76b4:	0000aa4c 	.word	0x0000aa4c

000076b8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    76b8:	b480      	push	{r7}
    76ba:	b083      	sub	sp, #12
    76bc:	af00      	add	r7, sp, #0
    76be:	6078      	str	r0, [r7, #4]
    76c0:	6039      	str	r1, [r7, #0]
  return 1;
    76c2:	2301      	movs	r3, #1
}
    76c4:	4618      	mov	r0, r3
    76c6:	370c      	adds	r7, #12
    76c8:	46bd      	mov	sp, r7
    76ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ce:	4770      	bx	lr

000076d0 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    76d0:	b480      	push	{r7}
    76d2:	b083      	sub	sp, #12
    76d4:	af00      	add	r7, sp, #0
    76d6:	6078      	str	r0, [r7, #4]
    76d8:	6039      	str	r1, [r7, #0]
  return 0;
    76da:	2300      	movs	r3, #0
}
    76dc:	4618      	mov	r0, r3
    76de:	370c      	adds	r7, #12
    76e0:	46bd      	mov	sp, r7
    76e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    76e6:	4770      	bx	lr

000076e8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    76e8:	b480      	push	{r7}
    76ea:	b083      	sub	sp, #12
    76ec:	af00      	add	r7, sp, #0
    76ee:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    76f0:	4a04      	ldr	r2, [pc, #16]	; (7704 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    76f2:	687b      	ldr	r3, [r7, #4]
    76f4:	6013      	str	r3, [r2, #0]
}
    76f6:	bf00      	nop
    76f8:	370c      	adds	r7, #12
    76fa:	46bd      	mov	sp, r7
    76fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7700:	4770      	bx	lr
    7702:	bf00      	nop
    7704:	1000005c 	.word	0x1000005c

00007708 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    7708:	b480      	push	{r7}
    770a:	b083      	sub	sp, #12
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    7710:	4a04      	ldr	r2, [pc, #16]	; (7724 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    7712:	687b      	ldr	r3, [r7, #4]
    7714:	6013      	str	r3, [r2, #0]
}
    7716:	bf00      	nop
    7718:	370c      	adds	r7, #12
    771a:	46bd      	mov	sp, r7
    771c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7720:	4770      	bx	lr
    7722:	bf00      	nop
    7724:	10000060 	.word	0x10000060

00007728 <operator new(unsigned int)>:
    7728:	b510      	push	{r4, lr}
    772a:	2800      	cmp	r0, #0
    772c:	bf14      	ite	ne
    772e:	4604      	movne	r4, r0
    7730:	2401      	moveq	r4, #1
    7732:	4620      	mov	r0, r4
    7734:	f001 fcfa 	bl	912c <malloc>
    7738:	b930      	cbnz	r0, 7748 <operator new(unsigned int)+0x20>
    773a:	f000 f809 	bl	7750 <std::get_new_handler()>
    773e:	b908      	cbnz	r0, 7744 <operator new(unsigned int)+0x1c>
    7740:	f001 fcc8 	bl	90d4 <abort>
    7744:	4780      	blx	r0
    7746:	e7f4      	b.n	7732 <operator new(unsigned int)+0xa>
    7748:	bd10      	pop	{r4, pc}

0000774a <__cxa_pure_virtual>:
    774a:	b508      	push	{r3, lr}
    774c:	f000 f814 	bl	7778 <std::terminate()>

00007750 <std::get_new_handler()>:
    7750:	4b02      	ldr	r3, [pc, #8]	; (775c <std::get_new_handler()+0xc>)
    7752:	6818      	ldr	r0, [r3, #0]
    7754:	f3bf 8f5b 	dmb	ish
    7758:	4770      	bx	lr
    775a:	bf00      	nop
    775c:	10000edc 	.word	0x10000edc

00007760 <__cxxabiv1::__terminate(void (*)())>:
    7760:	b508      	push	{r3, lr}
    7762:	4780      	blx	r0
    7764:	f001 fcb6 	bl	90d4 <abort>

00007768 <std::get_terminate()>:
    7768:	4b02      	ldr	r3, [pc, #8]	; (7774 <std::get_terminate()+0xc>)
    776a:	6818      	ldr	r0, [r3, #0]
    776c:	f3bf 8f5b 	dmb	ish
    7770:	4770      	bx	lr
    7772:	bf00      	nop
    7774:	10000090 	.word	0x10000090

00007778 <std::terminate()>:
    7778:	b508      	push	{r3, lr}
    777a:	f7ff fff5 	bl	7768 <std::get_terminate()>
    777e:	f7ff ffef 	bl	7760 <__cxxabiv1::__terminate(void (*)())>
    7782:	Address 0x0000000000007782 is out of bounds.


00007784 <__aeabi_drsub>:
    7784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    7788:	e002      	b.n	7790 <__adddf3>
    778a:	bf00      	nop

0000778c <__aeabi_dsub>:
    778c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00007790 <__adddf3>:
    7790:	b530      	push	{r4, r5, lr}
    7792:	ea4f 0441 	mov.w	r4, r1, lsl #1
    7796:	ea4f 0543 	mov.w	r5, r3, lsl #1
    779a:	ea94 0f05 	teq	r4, r5
    779e:	bf08      	it	eq
    77a0:	ea90 0f02 	teqeq	r0, r2
    77a4:	bf1f      	itttt	ne
    77a6:	ea54 0c00 	orrsne.w	ip, r4, r0
    77aa:	ea55 0c02 	orrsne.w	ip, r5, r2
    77ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    77b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    77b6:	f000 80e2 	beq.w	797e <__adddf3+0x1ee>
    77ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
    77be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    77c2:	bfb8      	it	lt
    77c4:	426d      	neglt	r5, r5
    77c6:	dd0c      	ble.n	77e2 <__adddf3+0x52>
    77c8:	442c      	add	r4, r5
    77ca:	ea80 0202 	eor.w	r2, r0, r2
    77ce:	ea81 0303 	eor.w	r3, r1, r3
    77d2:	ea82 0000 	eor.w	r0, r2, r0
    77d6:	ea83 0101 	eor.w	r1, r3, r1
    77da:	ea80 0202 	eor.w	r2, r0, r2
    77de:	ea81 0303 	eor.w	r3, r1, r3
    77e2:	2d36      	cmp	r5, #54	; 0x36
    77e4:	bf88      	it	hi
    77e6:	bd30      	pophi	{r4, r5, pc}
    77e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    77ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
    77f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    77f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    77f8:	d002      	beq.n	7800 <__adddf3+0x70>
    77fa:	4240      	negs	r0, r0
    77fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7800:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    7804:	ea4f 3303 	mov.w	r3, r3, lsl #12
    7808:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    780c:	d002      	beq.n	7814 <__adddf3+0x84>
    780e:	4252      	negs	r2, r2
    7810:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    7814:	ea94 0f05 	teq	r4, r5
    7818:	f000 80a7 	beq.w	796a <__adddf3+0x1da>
    781c:	f1a4 0401 	sub.w	r4, r4, #1
    7820:	f1d5 0e20 	rsbs	lr, r5, #32
    7824:	db0d      	blt.n	7842 <__adddf3+0xb2>
    7826:	fa02 fc0e 	lsl.w	ip, r2, lr
    782a:	fa22 f205 	lsr.w	r2, r2, r5
    782e:	1880      	adds	r0, r0, r2
    7830:	f141 0100 	adc.w	r1, r1, #0
    7834:	fa03 f20e 	lsl.w	r2, r3, lr
    7838:	1880      	adds	r0, r0, r2
    783a:	fa43 f305 	asr.w	r3, r3, r5
    783e:	4159      	adcs	r1, r3
    7840:	e00e      	b.n	7860 <__adddf3+0xd0>
    7842:	f1a5 0520 	sub.w	r5, r5, #32
    7846:	f10e 0e20 	add.w	lr, lr, #32
    784a:	2a01      	cmp	r2, #1
    784c:	fa03 fc0e 	lsl.w	ip, r3, lr
    7850:	bf28      	it	cs
    7852:	f04c 0c02 	orrcs.w	ip, ip, #2
    7856:	fa43 f305 	asr.w	r3, r3, r5
    785a:	18c0      	adds	r0, r0, r3
    785c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    7860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7864:	d507      	bpl.n	7876 <__adddf3+0xe6>
    7866:	f04f 0e00 	mov.w	lr, #0
    786a:	f1dc 0c00 	rsbs	ip, ip, #0
    786e:	eb7e 0000 	sbcs.w	r0, lr, r0
    7872:	eb6e 0101 	sbc.w	r1, lr, r1
    7876:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    787a:	d31b      	bcc.n	78b4 <__adddf3+0x124>
    787c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    7880:	d30c      	bcc.n	789c <__adddf3+0x10c>
    7882:	0849      	lsrs	r1, r1, #1
    7884:	ea5f 0030 	movs.w	r0, r0, rrx
    7888:	ea4f 0c3c 	mov.w	ip, ip, rrx
    788c:	f104 0401 	add.w	r4, r4, #1
    7890:	ea4f 5244 	mov.w	r2, r4, lsl #21
    7894:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    7898:	f080 809a 	bcs.w	79d0 <__adddf3+0x240>
    789c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    78a0:	bf08      	it	eq
    78a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    78a6:	f150 0000 	adcs.w	r0, r0, #0
    78aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    78ae:	ea41 0105 	orr.w	r1, r1, r5
    78b2:	bd30      	pop	{r4, r5, pc}
    78b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    78b8:	4140      	adcs	r0, r0
    78ba:	eb41 0101 	adc.w	r1, r1, r1
    78be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    78c2:	f1a4 0401 	sub.w	r4, r4, #1
    78c6:	d1e9      	bne.n	789c <__adddf3+0x10c>
    78c8:	f091 0f00 	teq	r1, #0
    78cc:	bf04      	itt	eq
    78ce:	4601      	moveq	r1, r0
    78d0:	2000      	moveq	r0, #0
    78d2:	fab1 f381 	clz	r3, r1
    78d6:	bf08      	it	eq
    78d8:	3320      	addeq	r3, #32
    78da:	f1a3 030b 	sub.w	r3, r3, #11
    78de:	f1b3 0220 	subs.w	r2, r3, #32
    78e2:	da0c      	bge.n	78fe <__adddf3+0x16e>
    78e4:	320c      	adds	r2, #12
    78e6:	dd08      	ble.n	78fa <__adddf3+0x16a>
    78e8:	f102 0c14 	add.w	ip, r2, #20
    78ec:	f1c2 020c 	rsb	r2, r2, #12
    78f0:	fa01 f00c 	lsl.w	r0, r1, ip
    78f4:	fa21 f102 	lsr.w	r1, r1, r2
    78f8:	e00c      	b.n	7914 <__adddf3+0x184>
    78fa:	f102 0214 	add.w	r2, r2, #20
    78fe:	bfd8      	it	le
    7900:	f1c2 0c20 	rsble	ip, r2, #32
    7904:	fa01 f102 	lsl.w	r1, r1, r2
    7908:	fa20 fc0c 	lsr.w	ip, r0, ip
    790c:	bfdc      	itt	le
    790e:	ea41 010c 	orrle.w	r1, r1, ip
    7912:	4090      	lslle	r0, r2
    7914:	1ae4      	subs	r4, r4, r3
    7916:	bfa2      	ittt	ge
    7918:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    791c:	4329      	orrge	r1, r5
    791e:	bd30      	popge	{r4, r5, pc}
    7920:	ea6f 0404 	mvn.w	r4, r4
    7924:	3c1f      	subs	r4, #31
    7926:	da1c      	bge.n	7962 <__adddf3+0x1d2>
    7928:	340c      	adds	r4, #12
    792a:	dc0e      	bgt.n	794a <__adddf3+0x1ba>
    792c:	f104 0414 	add.w	r4, r4, #20
    7930:	f1c4 0220 	rsb	r2, r4, #32
    7934:	fa20 f004 	lsr.w	r0, r0, r4
    7938:	fa01 f302 	lsl.w	r3, r1, r2
    793c:	ea40 0003 	orr.w	r0, r0, r3
    7940:	fa21 f304 	lsr.w	r3, r1, r4
    7944:	ea45 0103 	orr.w	r1, r5, r3
    7948:	bd30      	pop	{r4, r5, pc}
    794a:	f1c4 040c 	rsb	r4, r4, #12
    794e:	f1c4 0220 	rsb	r2, r4, #32
    7952:	fa20 f002 	lsr.w	r0, r0, r2
    7956:	fa01 f304 	lsl.w	r3, r1, r4
    795a:	ea40 0003 	orr.w	r0, r0, r3
    795e:	4629      	mov	r1, r5
    7960:	bd30      	pop	{r4, r5, pc}
    7962:	fa21 f004 	lsr.w	r0, r1, r4
    7966:	4629      	mov	r1, r5
    7968:	bd30      	pop	{r4, r5, pc}
    796a:	f094 0f00 	teq	r4, #0
    796e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    7972:	bf06      	itte	eq
    7974:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    7978:	3401      	addeq	r4, #1
    797a:	3d01      	subne	r5, #1
    797c:	e74e      	b.n	781c <__adddf3+0x8c>
    797e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    7982:	bf18      	it	ne
    7984:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7988:	d029      	beq.n	79de <__adddf3+0x24e>
    798a:	ea94 0f05 	teq	r4, r5
    798e:	bf08      	it	eq
    7990:	ea90 0f02 	teqeq	r0, r2
    7994:	d005      	beq.n	79a2 <__adddf3+0x212>
    7996:	ea54 0c00 	orrs.w	ip, r4, r0
    799a:	bf04      	itt	eq
    799c:	4619      	moveq	r1, r3
    799e:	4610      	moveq	r0, r2
    79a0:	bd30      	pop	{r4, r5, pc}
    79a2:	ea91 0f03 	teq	r1, r3
    79a6:	bf1e      	ittt	ne
    79a8:	2100      	movne	r1, #0
    79aa:	2000      	movne	r0, #0
    79ac:	bd30      	popne	{r4, r5, pc}
    79ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    79b2:	d105      	bne.n	79c0 <__adddf3+0x230>
    79b4:	0040      	lsls	r0, r0, #1
    79b6:	4149      	adcs	r1, r1
    79b8:	bf28      	it	cs
    79ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    79be:	bd30      	pop	{r4, r5, pc}
    79c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    79c4:	bf3c      	itt	cc
    79c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    79ca:	bd30      	popcc	{r4, r5, pc}
    79cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    79d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    79d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    79d8:	f04f 0000 	mov.w	r0, #0
    79dc:	bd30      	pop	{r4, r5, pc}
    79de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    79e2:	bf1a      	itte	ne
    79e4:	4619      	movne	r1, r3
    79e6:	4610      	movne	r0, r2
    79e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    79ec:	bf1c      	itt	ne
    79ee:	460b      	movne	r3, r1
    79f0:	4602      	movne	r2, r0
    79f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    79f6:	bf06      	itte	eq
    79f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    79fc:	ea91 0f03 	teqeq	r1, r3
    7a00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    7a04:	bd30      	pop	{r4, r5, pc}
    7a06:	bf00      	nop

00007a08 <__aeabi_ui2d>:
    7a08:	f090 0f00 	teq	r0, #0
    7a0c:	bf04      	itt	eq
    7a0e:	2100      	moveq	r1, #0
    7a10:	4770      	bxeq	lr
    7a12:	b530      	push	{r4, r5, lr}
    7a14:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7a18:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7a1c:	f04f 0500 	mov.w	r5, #0
    7a20:	f04f 0100 	mov.w	r1, #0
    7a24:	e750      	b.n	78c8 <__adddf3+0x138>
    7a26:	bf00      	nop

00007a28 <__aeabi_i2d>:
    7a28:	f090 0f00 	teq	r0, #0
    7a2c:	bf04      	itt	eq
    7a2e:	2100      	moveq	r1, #0
    7a30:	4770      	bxeq	lr
    7a32:	b530      	push	{r4, r5, lr}
    7a34:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7a38:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7a3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    7a40:	bf48      	it	mi
    7a42:	4240      	negmi	r0, r0
    7a44:	f04f 0100 	mov.w	r1, #0
    7a48:	e73e      	b.n	78c8 <__adddf3+0x138>
    7a4a:	bf00      	nop

00007a4c <__aeabi_f2d>:
    7a4c:	0042      	lsls	r2, r0, #1
    7a4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    7a52:	ea4f 0131 	mov.w	r1, r1, rrx
    7a56:	ea4f 7002 	mov.w	r0, r2, lsl #28
    7a5a:	bf1f      	itttt	ne
    7a5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    7a60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    7a64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    7a68:	4770      	bxne	lr
    7a6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7a6e:	bf08      	it	eq
    7a70:	4770      	bxeq	lr
    7a72:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    7a76:	bf04      	itt	eq
    7a78:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    7a7c:	4770      	bxeq	lr
    7a7e:	b530      	push	{r4, r5, lr}
    7a80:	f44f 7460 	mov.w	r4, #896	; 0x380
    7a84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7a8c:	e71c      	b.n	78c8 <__adddf3+0x138>
    7a8e:	bf00      	nop

00007a90 <__aeabi_ul2d>:
    7a90:	ea50 0201 	orrs.w	r2, r0, r1
    7a94:	bf08      	it	eq
    7a96:	4770      	bxeq	lr
    7a98:	b530      	push	{r4, r5, lr}
    7a9a:	f04f 0500 	mov.w	r5, #0
    7a9e:	e00a      	b.n	7ab6 <__aeabi_l2d+0x16>

00007aa0 <__aeabi_l2d>:
    7aa0:	ea50 0201 	orrs.w	r2, r0, r1
    7aa4:	bf08      	it	eq
    7aa6:	4770      	bxeq	lr
    7aa8:	b530      	push	{r4, r5, lr}
    7aaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    7aae:	d502      	bpl.n	7ab6 <__aeabi_l2d+0x16>
    7ab0:	4240      	negs	r0, r0
    7ab2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7ab6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7aba:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7abe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    7ac2:	f43f aed8 	beq.w	7876 <__adddf3+0xe6>
    7ac6:	f04f 0203 	mov.w	r2, #3
    7aca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7ace:	bf18      	it	ne
    7ad0:	3203      	addne	r2, #3
    7ad2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7ad6:	bf18      	it	ne
    7ad8:	3203      	addne	r2, #3
    7ada:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    7ade:	f1c2 0320 	rsb	r3, r2, #32
    7ae2:	fa00 fc03 	lsl.w	ip, r0, r3
    7ae6:	fa20 f002 	lsr.w	r0, r0, r2
    7aea:	fa01 fe03 	lsl.w	lr, r1, r3
    7aee:	ea40 000e 	orr.w	r0, r0, lr
    7af2:	fa21 f102 	lsr.w	r1, r1, r2
    7af6:	4414      	add	r4, r2
    7af8:	e6bd      	b.n	7876 <__adddf3+0xe6>
    7afa:	bf00      	nop

00007afc <__gedf2>:
    7afc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    7b00:	e006      	b.n	7b10 <__cmpdf2+0x4>
    7b02:	bf00      	nop

00007b04 <__ledf2>:
    7b04:	f04f 0c01 	mov.w	ip, #1
    7b08:	e002      	b.n	7b10 <__cmpdf2+0x4>
    7b0a:	bf00      	nop

00007b0c <__cmpdf2>:
    7b0c:	f04f 0c01 	mov.w	ip, #1
    7b10:	f84d cd04 	str.w	ip, [sp, #-4]!
    7b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7b20:	bf18      	it	ne
    7b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    7b26:	d01b      	beq.n	7b60 <__cmpdf2+0x54>
    7b28:	b001      	add	sp, #4
    7b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    7b2e:	bf0c      	ite	eq
    7b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    7b34:	ea91 0f03 	teqne	r1, r3
    7b38:	bf02      	ittt	eq
    7b3a:	ea90 0f02 	teqeq	r0, r2
    7b3e:	2000      	moveq	r0, #0
    7b40:	4770      	bxeq	lr
    7b42:	f110 0f00 	cmn.w	r0, #0
    7b46:	ea91 0f03 	teq	r1, r3
    7b4a:	bf58      	it	pl
    7b4c:	4299      	cmppl	r1, r3
    7b4e:	bf08      	it	eq
    7b50:	4290      	cmpeq	r0, r2
    7b52:	bf2c      	ite	cs
    7b54:	17d8      	asrcs	r0, r3, #31
    7b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    7b5a:	f040 0001 	orr.w	r0, r0, #1
    7b5e:	4770      	bx	lr
    7b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7b68:	d102      	bne.n	7b70 <__cmpdf2+0x64>
    7b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    7b6e:	d107      	bne.n	7b80 <__cmpdf2+0x74>
    7b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7b78:	d1d6      	bne.n	7b28 <__cmpdf2+0x1c>
    7b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    7b7e:	d0d3      	beq.n	7b28 <__cmpdf2+0x1c>
    7b80:	f85d 0b04 	ldr.w	r0, [sp], #4
    7b84:	4770      	bx	lr
    7b86:	bf00      	nop

00007b88 <__aeabi_cdrcmple>:
    7b88:	4684      	mov	ip, r0
    7b8a:	4610      	mov	r0, r2
    7b8c:	4662      	mov	r2, ip
    7b8e:	468c      	mov	ip, r1
    7b90:	4619      	mov	r1, r3
    7b92:	4663      	mov	r3, ip
    7b94:	e000      	b.n	7b98 <__aeabi_cdcmpeq>
    7b96:	bf00      	nop

00007b98 <__aeabi_cdcmpeq>:
    7b98:	b501      	push	{r0, lr}
    7b9a:	f7ff ffb7 	bl	7b0c <__cmpdf2>
    7b9e:	2800      	cmp	r0, #0
    7ba0:	bf48      	it	mi
    7ba2:	f110 0f00 	cmnmi.w	r0, #0
    7ba6:	bd01      	pop	{r0, pc}

00007ba8 <__aeabi_dcmpeq>:
    7ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
    7bac:	f7ff fff4 	bl	7b98 <__aeabi_cdcmpeq>
    7bb0:	bf0c      	ite	eq
    7bb2:	2001      	moveq	r0, #1
    7bb4:	2000      	movne	r0, #0
    7bb6:	f85d fb08 	ldr.w	pc, [sp], #8
    7bba:	bf00      	nop

00007bbc <__aeabi_dcmplt>:
    7bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
    7bc0:	f7ff ffea 	bl	7b98 <__aeabi_cdcmpeq>
    7bc4:	bf34      	ite	cc
    7bc6:	2001      	movcc	r0, #1
    7bc8:	2000      	movcs	r0, #0
    7bca:	f85d fb08 	ldr.w	pc, [sp], #8
    7bce:	bf00      	nop

00007bd0 <__aeabi_dcmple>:
    7bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    7bd4:	f7ff ffe0 	bl	7b98 <__aeabi_cdcmpeq>
    7bd8:	bf94      	ite	ls
    7bda:	2001      	movls	r0, #1
    7bdc:	2000      	movhi	r0, #0
    7bde:	f85d fb08 	ldr.w	pc, [sp], #8
    7be2:	bf00      	nop

00007be4 <__aeabi_dcmpge>:
    7be4:	f84d ed08 	str.w	lr, [sp, #-8]!
    7be8:	f7ff ffce 	bl	7b88 <__aeabi_cdrcmple>
    7bec:	bf94      	ite	ls
    7bee:	2001      	movls	r0, #1
    7bf0:	2000      	movhi	r0, #0
    7bf2:	f85d fb08 	ldr.w	pc, [sp], #8
    7bf6:	bf00      	nop

00007bf8 <__aeabi_dcmpgt>:
    7bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
    7bfc:	f7ff ffc4 	bl	7b88 <__aeabi_cdrcmple>
    7c00:	bf34      	ite	cc
    7c02:	2001      	movcc	r0, #1
    7c04:	2000      	movcs	r0, #0
    7c06:	f85d fb08 	ldr.w	pc, [sp], #8
    7c0a:	bf00      	nop

00007c0c <__aeabi_d2f>:
    7c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    7c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    7c14:	bf24      	itt	cs
    7c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    7c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    7c1e:	d90d      	bls.n	7c3c <__aeabi_d2f+0x30>
    7c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    7c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    7c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    7c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    7c34:	bf08      	it	eq
    7c36:	f020 0001 	biceq.w	r0, r0, #1
    7c3a:	4770      	bx	lr
    7c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    7c40:	d121      	bne.n	7c86 <__aeabi_d2f+0x7a>
    7c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    7c46:	bfbc      	itt	lt
    7c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    7c4c:	4770      	bxlt	lr
    7c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
    7c56:	f1c2 0218 	rsb	r2, r2, #24
    7c5a:	f1c2 0c20 	rsb	ip, r2, #32
    7c5e:	fa10 f30c 	lsls.w	r3, r0, ip
    7c62:	fa20 f002 	lsr.w	r0, r0, r2
    7c66:	bf18      	it	ne
    7c68:	f040 0001 	orrne.w	r0, r0, #1
    7c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    7c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    7c74:	fa03 fc0c 	lsl.w	ip, r3, ip
    7c78:	ea40 000c 	orr.w	r0, r0, ip
    7c7c:	fa23 f302 	lsr.w	r3, r3, r2
    7c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7c84:	e7cc      	b.n	7c20 <__aeabi_d2f+0x14>
    7c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
    7c8a:	d107      	bne.n	7c9c <__aeabi_d2f+0x90>
    7c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    7c90:	bf1e      	ittt	ne
    7c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    7c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    7c9a:	4770      	bxne	lr
    7c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    7ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7ca8:	4770      	bx	lr
    7caa:	bf00      	nop

00007cac <__aeabi_frsub>:
    7cac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    7cb0:	e002      	b.n	7cb8 <__addsf3>
    7cb2:	bf00      	nop

00007cb4 <__aeabi_fsub>:
    7cb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00007cb8 <__addsf3>:
    7cb8:	0042      	lsls	r2, r0, #1
    7cba:	bf1f      	itttt	ne
    7cbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    7cc0:	ea92 0f03 	teqne	r2, r3
    7cc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    7cc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7ccc:	d06a      	beq.n	7da4 <__addsf3+0xec>
    7cce:	ea4f 6212 	mov.w	r2, r2, lsr #24
    7cd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    7cd6:	bfc1      	itttt	gt
    7cd8:	18d2      	addgt	r2, r2, r3
    7cda:	4041      	eorgt	r1, r0
    7cdc:	4048      	eorgt	r0, r1
    7cde:	4041      	eorgt	r1, r0
    7ce0:	bfb8      	it	lt
    7ce2:	425b      	neglt	r3, r3
    7ce4:	2b19      	cmp	r3, #25
    7ce6:	bf88      	it	hi
    7ce8:	4770      	bxhi	lr
    7cea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    7cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7cf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7cf6:	bf18      	it	ne
    7cf8:	4240      	negne	r0, r0
    7cfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    7cfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    7d02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    7d06:	bf18      	it	ne
    7d08:	4249      	negne	r1, r1
    7d0a:	ea92 0f03 	teq	r2, r3
    7d0e:	d03f      	beq.n	7d90 <__addsf3+0xd8>
    7d10:	f1a2 0201 	sub.w	r2, r2, #1
    7d14:	fa41 fc03 	asr.w	ip, r1, r3
    7d18:	eb10 000c 	adds.w	r0, r0, ip
    7d1c:	f1c3 0320 	rsb	r3, r3, #32
    7d20:	fa01 f103 	lsl.w	r1, r1, r3
    7d24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7d28:	d502      	bpl.n	7d30 <__addsf3+0x78>
    7d2a:	4249      	negs	r1, r1
    7d2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    7d30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7d34:	d313      	bcc.n	7d5e <__addsf3+0xa6>
    7d36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    7d3a:	d306      	bcc.n	7d4a <__addsf3+0x92>
    7d3c:	0840      	lsrs	r0, r0, #1
    7d3e:	ea4f 0131 	mov.w	r1, r1, rrx
    7d42:	f102 0201 	add.w	r2, r2, #1
    7d46:	2afe      	cmp	r2, #254	; 0xfe
    7d48:	d251      	bcs.n	7dee <__addsf3+0x136>
    7d4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    7d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7d52:	bf08      	it	eq
    7d54:	f020 0001 	biceq.w	r0, r0, #1
    7d58:	ea40 0003 	orr.w	r0, r0, r3
    7d5c:	4770      	bx	lr
    7d5e:	0049      	lsls	r1, r1, #1
    7d60:	eb40 0000 	adc.w	r0, r0, r0
    7d64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    7d68:	f1a2 0201 	sub.w	r2, r2, #1
    7d6c:	d1ed      	bne.n	7d4a <__addsf3+0x92>
    7d6e:	fab0 fc80 	clz	ip, r0
    7d72:	f1ac 0c08 	sub.w	ip, ip, #8
    7d76:	ebb2 020c 	subs.w	r2, r2, ip
    7d7a:	fa00 f00c 	lsl.w	r0, r0, ip
    7d7e:	bfaa      	itet	ge
    7d80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    7d84:	4252      	neglt	r2, r2
    7d86:	4318      	orrge	r0, r3
    7d88:	bfbc      	itt	lt
    7d8a:	40d0      	lsrlt	r0, r2
    7d8c:	4318      	orrlt	r0, r3
    7d8e:	4770      	bx	lr
    7d90:	f092 0f00 	teq	r2, #0
    7d94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    7d98:	bf06      	itte	eq
    7d9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    7d9e:	3201      	addeq	r2, #1
    7da0:	3b01      	subne	r3, #1
    7da2:	e7b5      	b.n	7d10 <__addsf3+0x58>
    7da4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7dac:	bf18      	it	ne
    7dae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7db2:	d021      	beq.n	7df8 <__addsf3+0x140>
    7db4:	ea92 0f03 	teq	r2, r3
    7db8:	d004      	beq.n	7dc4 <__addsf3+0x10c>
    7dba:	f092 0f00 	teq	r2, #0
    7dbe:	bf08      	it	eq
    7dc0:	4608      	moveq	r0, r1
    7dc2:	4770      	bx	lr
    7dc4:	ea90 0f01 	teq	r0, r1
    7dc8:	bf1c      	itt	ne
    7dca:	2000      	movne	r0, #0
    7dcc:	4770      	bxne	lr
    7dce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    7dd2:	d104      	bne.n	7dde <__addsf3+0x126>
    7dd4:	0040      	lsls	r0, r0, #1
    7dd6:	bf28      	it	cs
    7dd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    7ddc:	4770      	bx	lr
    7dde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    7de2:	bf3c      	itt	cc
    7de4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    7de8:	4770      	bxcc	lr
    7dea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7dee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    7df2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7df6:	4770      	bx	lr
    7df8:	ea7f 6222 	mvns.w	r2, r2, asr #24
    7dfc:	bf16      	itet	ne
    7dfe:	4608      	movne	r0, r1
    7e00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    7e04:	4601      	movne	r1, r0
    7e06:	0242      	lsls	r2, r0, #9
    7e08:	bf06      	itte	eq
    7e0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    7e0e:	ea90 0f01 	teqeq	r0, r1
    7e12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    7e16:	4770      	bx	lr

00007e18 <__aeabi_ui2f>:
    7e18:	f04f 0300 	mov.w	r3, #0
    7e1c:	e004      	b.n	7e28 <__aeabi_i2f+0x8>
    7e1e:	bf00      	nop

00007e20 <__aeabi_i2f>:
    7e20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    7e24:	bf48      	it	mi
    7e26:	4240      	negmi	r0, r0
    7e28:	ea5f 0c00 	movs.w	ip, r0
    7e2c:	bf08      	it	eq
    7e2e:	4770      	bxeq	lr
    7e30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    7e34:	4601      	mov	r1, r0
    7e36:	f04f 0000 	mov.w	r0, #0
    7e3a:	e01c      	b.n	7e76 <__aeabi_l2f+0x2a>

00007e3c <__aeabi_ul2f>:
    7e3c:	ea50 0201 	orrs.w	r2, r0, r1
    7e40:	bf08      	it	eq
    7e42:	4770      	bxeq	lr
    7e44:	f04f 0300 	mov.w	r3, #0
    7e48:	e00a      	b.n	7e60 <__aeabi_l2f+0x14>
    7e4a:	bf00      	nop

00007e4c <__aeabi_l2f>:
    7e4c:	ea50 0201 	orrs.w	r2, r0, r1
    7e50:	bf08      	it	eq
    7e52:	4770      	bxeq	lr
    7e54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    7e58:	d502      	bpl.n	7e60 <__aeabi_l2f+0x14>
    7e5a:	4240      	negs	r0, r0
    7e5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7e60:	ea5f 0c01 	movs.w	ip, r1
    7e64:	bf02      	ittt	eq
    7e66:	4684      	moveq	ip, r0
    7e68:	4601      	moveq	r1, r0
    7e6a:	2000      	moveq	r0, #0
    7e6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    7e70:	bf08      	it	eq
    7e72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    7e76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    7e7a:	fabc f28c 	clz	r2, ip
    7e7e:	3a08      	subs	r2, #8
    7e80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    7e84:	db10      	blt.n	7ea8 <__aeabi_l2f+0x5c>
    7e86:	fa01 fc02 	lsl.w	ip, r1, r2
    7e8a:	4463      	add	r3, ip
    7e8c:	fa00 fc02 	lsl.w	ip, r0, r2
    7e90:	f1c2 0220 	rsb	r2, r2, #32
    7e94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7e98:	fa20 f202 	lsr.w	r2, r0, r2
    7e9c:	eb43 0002 	adc.w	r0, r3, r2
    7ea0:	bf08      	it	eq
    7ea2:	f020 0001 	biceq.w	r0, r0, #1
    7ea6:	4770      	bx	lr
    7ea8:	f102 0220 	add.w	r2, r2, #32
    7eac:	fa01 fc02 	lsl.w	ip, r1, r2
    7eb0:	f1c2 0220 	rsb	r2, r2, #32
    7eb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    7eb8:	fa21 f202 	lsr.w	r2, r1, r2
    7ebc:	eb43 0002 	adc.w	r0, r3, r2
    7ec0:	bf08      	it	eq
    7ec2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7ec6:	4770      	bx	lr

00007ec8 <__aeabi_uldivmod>:
    7ec8:	b953      	cbnz	r3, 7ee0 <__aeabi_uldivmod+0x18>
    7eca:	b94a      	cbnz	r2, 7ee0 <__aeabi_uldivmod+0x18>
    7ecc:	2900      	cmp	r1, #0
    7ece:	bf08      	it	eq
    7ed0:	2800      	cmpeq	r0, #0
    7ed2:	bf1c      	itt	ne
    7ed4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7ed8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7edc:	f001 b8f8 	b.w	90d0 <__aeabi_idiv0>
    7ee0:	f1ad 0c08 	sub.w	ip, sp, #8
    7ee4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    7ee8:	f000 f806 	bl	7ef8 <__udivmoddi4>
    7eec:	f8dd e004 	ldr.w	lr, [sp, #4]
    7ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7ef4:	b004      	add	sp, #16
    7ef6:	4770      	bx	lr

00007ef8 <__udivmoddi4>:
    7ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7efc:	9e08      	ldr	r6, [sp, #32]
    7efe:	4604      	mov	r4, r0
    7f00:	4688      	mov	r8, r1
    7f02:	2b00      	cmp	r3, #0
    7f04:	d14b      	bne.n	7f9e <__udivmoddi4+0xa6>
    7f06:	428a      	cmp	r2, r1
    7f08:	4615      	mov	r5, r2
    7f0a:	d967      	bls.n	7fdc <__udivmoddi4+0xe4>
    7f0c:	fab2 f282 	clz	r2, r2
    7f10:	b14a      	cbz	r2, 7f26 <__udivmoddi4+0x2e>
    7f12:	f1c2 0720 	rsb	r7, r2, #32
    7f16:	fa01 f302 	lsl.w	r3, r1, r2
    7f1a:	fa20 f707 	lsr.w	r7, r0, r7
    7f1e:	4095      	lsls	r5, r2
    7f20:	ea47 0803 	orr.w	r8, r7, r3
    7f24:	4094      	lsls	r4, r2
    7f26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7f2a:	0c23      	lsrs	r3, r4, #16
    7f2c:	fbb8 f7fe 	udiv	r7, r8, lr
    7f30:	fa1f fc85 	uxth.w	ip, r5
    7f34:	fb0e 8817 	mls	r8, lr, r7, r8
    7f38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    7f3c:	fb07 f10c 	mul.w	r1, r7, ip
    7f40:	4299      	cmp	r1, r3
    7f42:	d909      	bls.n	7f58 <__udivmoddi4+0x60>
    7f44:	18eb      	adds	r3, r5, r3
    7f46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    7f4a:	f080 811b 	bcs.w	8184 <__udivmoddi4+0x28c>
    7f4e:	4299      	cmp	r1, r3
    7f50:	f240 8118 	bls.w	8184 <__udivmoddi4+0x28c>
    7f54:	3f02      	subs	r7, #2
    7f56:	442b      	add	r3, r5
    7f58:	1a5b      	subs	r3, r3, r1
    7f5a:	b2a4      	uxth	r4, r4
    7f5c:	fbb3 f0fe 	udiv	r0, r3, lr
    7f60:	fb0e 3310 	mls	r3, lr, r0, r3
    7f64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7f68:	fb00 fc0c 	mul.w	ip, r0, ip
    7f6c:	45a4      	cmp	ip, r4
    7f6e:	d909      	bls.n	7f84 <__udivmoddi4+0x8c>
    7f70:	192c      	adds	r4, r5, r4
    7f72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7f76:	f080 8107 	bcs.w	8188 <__udivmoddi4+0x290>
    7f7a:	45a4      	cmp	ip, r4
    7f7c:	f240 8104 	bls.w	8188 <__udivmoddi4+0x290>
    7f80:	3802      	subs	r0, #2
    7f82:	442c      	add	r4, r5
    7f84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    7f88:	eba4 040c 	sub.w	r4, r4, ip
    7f8c:	2700      	movs	r7, #0
    7f8e:	b11e      	cbz	r6, 7f98 <__udivmoddi4+0xa0>
    7f90:	40d4      	lsrs	r4, r2
    7f92:	2300      	movs	r3, #0
    7f94:	e9c6 4300 	strd	r4, r3, [r6]
    7f98:	4639      	mov	r1, r7
    7f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f9e:	428b      	cmp	r3, r1
    7fa0:	d909      	bls.n	7fb6 <__udivmoddi4+0xbe>
    7fa2:	2e00      	cmp	r6, #0
    7fa4:	f000 80eb 	beq.w	817e <__udivmoddi4+0x286>
    7fa8:	2700      	movs	r7, #0
    7faa:	e9c6 0100 	strd	r0, r1, [r6]
    7fae:	4638      	mov	r0, r7
    7fb0:	4639      	mov	r1, r7
    7fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fb6:	fab3 f783 	clz	r7, r3
    7fba:	2f00      	cmp	r7, #0
    7fbc:	d147      	bne.n	804e <__udivmoddi4+0x156>
    7fbe:	428b      	cmp	r3, r1
    7fc0:	d302      	bcc.n	7fc8 <__udivmoddi4+0xd0>
    7fc2:	4282      	cmp	r2, r0
    7fc4:	f200 80fa 	bhi.w	81bc <__udivmoddi4+0x2c4>
    7fc8:	1a84      	subs	r4, r0, r2
    7fca:	eb61 0303 	sbc.w	r3, r1, r3
    7fce:	2001      	movs	r0, #1
    7fd0:	4698      	mov	r8, r3
    7fd2:	2e00      	cmp	r6, #0
    7fd4:	d0e0      	beq.n	7f98 <__udivmoddi4+0xa0>
    7fd6:	e9c6 4800 	strd	r4, r8, [r6]
    7fda:	e7dd      	b.n	7f98 <__udivmoddi4+0xa0>
    7fdc:	b902      	cbnz	r2, 7fe0 <__udivmoddi4+0xe8>
    7fde:	deff      	udf	#255	; 0xff
    7fe0:	fab2 f282 	clz	r2, r2
    7fe4:	2a00      	cmp	r2, #0
    7fe6:	f040 808f 	bne.w	8108 <__udivmoddi4+0x210>
    7fea:	1b49      	subs	r1, r1, r5
    7fec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7ff0:	fa1f f885 	uxth.w	r8, r5
    7ff4:	2701      	movs	r7, #1
    7ff6:	fbb1 fcfe 	udiv	ip, r1, lr
    7ffa:	0c23      	lsrs	r3, r4, #16
    7ffc:	fb0e 111c 	mls	r1, lr, ip, r1
    8000:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8004:	fb08 f10c 	mul.w	r1, r8, ip
    8008:	4299      	cmp	r1, r3
    800a:	d907      	bls.n	801c <__udivmoddi4+0x124>
    800c:	18eb      	adds	r3, r5, r3
    800e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8012:	d202      	bcs.n	801a <__udivmoddi4+0x122>
    8014:	4299      	cmp	r1, r3
    8016:	f200 80cd 	bhi.w	81b4 <__udivmoddi4+0x2bc>
    801a:	4684      	mov	ip, r0
    801c:	1a59      	subs	r1, r3, r1
    801e:	b2a3      	uxth	r3, r4
    8020:	fbb1 f0fe 	udiv	r0, r1, lr
    8024:	fb0e 1410 	mls	r4, lr, r0, r1
    8028:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    802c:	fb08 f800 	mul.w	r8, r8, r0
    8030:	45a0      	cmp	r8, r4
    8032:	d907      	bls.n	8044 <__udivmoddi4+0x14c>
    8034:	192c      	adds	r4, r5, r4
    8036:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    803a:	d202      	bcs.n	8042 <__udivmoddi4+0x14a>
    803c:	45a0      	cmp	r8, r4
    803e:	f200 80b6 	bhi.w	81ae <__udivmoddi4+0x2b6>
    8042:	4618      	mov	r0, r3
    8044:	eba4 0408 	sub.w	r4, r4, r8
    8048:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    804c:	e79f      	b.n	7f8e <__udivmoddi4+0x96>
    804e:	f1c7 0c20 	rsb	ip, r7, #32
    8052:	40bb      	lsls	r3, r7
    8054:	fa22 fe0c 	lsr.w	lr, r2, ip
    8058:	ea4e 0e03 	orr.w	lr, lr, r3
    805c:	fa01 f407 	lsl.w	r4, r1, r7
    8060:	fa20 f50c 	lsr.w	r5, r0, ip
    8064:	fa21 f30c 	lsr.w	r3, r1, ip
    8068:	ea4f 481e 	mov.w	r8, lr, lsr #16
    806c:	4325      	orrs	r5, r4
    806e:	fbb3 f9f8 	udiv	r9, r3, r8
    8072:	0c2c      	lsrs	r4, r5, #16
    8074:	fb08 3319 	mls	r3, r8, r9, r3
    8078:	fa1f fa8e 	uxth.w	sl, lr
    807c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    8080:	fb09 f40a 	mul.w	r4, r9, sl
    8084:	429c      	cmp	r4, r3
    8086:	fa02 f207 	lsl.w	r2, r2, r7
    808a:	fa00 f107 	lsl.w	r1, r0, r7
    808e:	d90b      	bls.n	80a8 <__udivmoddi4+0x1b0>
    8090:	eb1e 0303 	adds.w	r3, lr, r3
    8094:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    8098:	f080 8087 	bcs.w	81aa <__udivmoddi4+0x2b2>
    809c:	429c      	cmp	r4, r3
    809e:	f240 8084 	bls.w	81aa <__udivmoddi4+0x2b2>
    80a2:	f1a9 0902 	sub.w	r9, r9, #2
    80a6:	4473      	add	r3, lr
    80a8:	1b1b      	subs	r3, r3, r4
    80aa:	b2ad      	uxth	r5, r5
    80ac:	fbb3 f0f8 	udiv	r0, r3, r8
    80b0:	fb08 3310 	mls	r3, r8, r0, r3
    80b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    80b8:	fb00 fa0a 	mul.w	sl, r0, sl
    80bc:	45a2      	cmp	sl, r4
    80be:	d908      	bls.n	80d2 <__udivmoddi4+0x1da>
    80c0:	eb1e 0404 	adds.w	r4, lr, r4
    80c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    80c8:	d26b      	bcs.n	81a2 <__udivmoddi4+0x2aa>
    80ca:	45a2      	cmp	sl, r4
    80cc:	d969      	bls.n	81a2 <__udivmoddi4+0x2aa>
    80ce:	3802      	subs	r0, #2
    80d0:	4474      	add	r4, lr
    80d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    80d6:	fba0 8902 	umull	r8, r9, r0, r2
    80da:	eba4 040a 	sub.w	r4, r4, sl
    80de:	454c      	cmp	r4, r9
    80e0:	46c2      	mov	sl, r8
    80e2:	464b      	mov	r3, r9
    80e4:	d354      	bcc.n	8190 <__udivmoddi4+0x298>
    80e6:	d051      	beq.n	818c <__udivmoddi4+0x294>
    80e8:	2e00      	cmp	r6, #0
    80ea:	d069      	beq.n	81c0 <__udivmoddi4+0x2c8>
    80ec:	ebb1 050a 	subs.w	r5, r1, sl
    80f0:	eb64 0403 	sbc.w	r4, r4, r3
    80f4:	fa04 fc0c 	lsl.w	ip, r4, ip
    80f8:	40fd      	lsrs	r5, r7
    80fa:	40fc      	lsrs	r4, r7
    80fc:	ea4c 0505 	orr.w	r5, ip, r5
    8100:	e9c6 5400 	strd	r5, r4, [r6]
    8104:	2700      	movs	r7, #0
    8106:	e747      	b.n	7f98 <__udivmoddi4+0xa0>
    8108:	f1c2 0320 	rsb	r3, r2, #32
    810c:	fa20 f703 	lsr.w	r7, r0, r3
    8110:	4095      	lsls	r5, r2
    8112:	fa01 f002 	lsl.w	r0, r1, r2
    8116:	fa21 f303 	lsr.w	r3, r1, r3
    811a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    811e:	4338      	orrs	r0, r7
    8120:	0c01      	lsrs	r1, r0, #16
    8122:	fbb3 f7fe 	udiv	r7, r3, lr
    8126:	fa1f f885 	uxth.w	r8, r5
    812a:	fb0e 3317 	mls	r3, lr, r7, r3
    812e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8132:	fb07 f308 	mul.w	r3, r7, r8
    8136:	428b      	cmp	r3, r1
    8138:	fa04 f402 	lsl.w	r4, r4, r2
    813c:	d907      	bls.n	814e <__udivmoddi4+0x256>
    813e:	1869      	adds	r1, r5, r1
    8140:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    8144:	d22f      	bcs.n	81a6 <__udivmoddi4+0x2ae>
    8146:	428b      	cmp	r3, r1
    8148:	d92d      	bls.n	81a6 <__udivmoddi4+0x2ae>
    814a:	3f02      	subs	r7, #2
    814c:	4429      	add	r1, r5
    814e:	1acb      	subs	r3, r1, r3
    8150:	b281      	uxth	r1, r0
    8152:	fbb3 f0fe 	udiv	r0, r3, lr
    8156:	fb0e 3310 	mls	r3, lr, r0, r3
    815a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    815e:	fb00 f308 	mul.w	r3, r0, r8
    8162:	428b      	cmp	r3, r1
    8164:	d907      	bls.n	8176 <__udivmoddi4+0x27e>
    8166:	1869      	adds	r1, r5, r1
    8168:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    816c:	d217      	bcs.n	819e <__udivmoddi4+0x2a6>
    816e:	428b      	cmp	r3, r1
    8170:	d915      	bls.n	819e <__udivmoddi4+0x2a6>
    8172:	3802      	subs	r0, #2
    8174:	4429      	add	r1, r5
    8176:	1ac9      	subs	r1, r1, r3
    8178:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    817c:	e73b      	b.n	7ff6 <__udivmoddi4+0xfe>
    817e:	4637      	mov	r7, r6
    8180:	4630      	mov	r0, r6
    8182:	e709      	b.n	7f98 <__udivmoddi4+0xa0>
    8184:	4607      	mov	r7, r0
    8186:	e6e7      	b.n	7f58 <__udivmoddi4+0x60>
    8188:	4618      	mov	r0, r3
    818a:	e6fb      	b.n	7f84 <__udivmoddi4+0x8c>
    818c:	4541      	cmp	r1, r8
    818e:	d2ab      	bcs.n	80e8 <__udivmoddi4+0x1f0>
    8190:	ebb8 0a02 	subs.w	sl, r8, r2
    8194:	eb69 020e 	sbc.w	r2, r9, lr
    8198:	3801      	subs	r0, #1
    819a:	4613      	mov	r3, r2
    819c:	e7a4      	b.n	80e8 <__udivmoddi4+0x1f0>
    819e:	4660      	mov	r0, ip
    81a0:	e7e9      	b.n	8176 <__udivmoddi4+0x27e>
    81a2:	4618      	mov	r0, r3
    81a4:	e795      	b.n	80d2 <__udivmoddi4+0x1da>
    81a6:	4667      	mov	r7, ip
    81a8:	e7d1      	b.n	814e <__udivmoddi4+0x256>
    81aa:	4681      	mov	r9, r0
    81ac:	e77c      	b.n	80a8 <__udivmoddi4+0x1b0>
    81ae:	3802      	subs	r0, #2
    81b0:	442c      	add	r4, r5
    81b2:	e747      	b.n	8044 <__udivmoddi4+0x14c>
    81b4:	f1ac 0c02 	sub.w	ip, ip, #2
    81b8:	442b      	add	r3, r5
    81ba:	e72f      	b.n	801c <__udivmoddi4+0x124>
    81bc:	4638      	mov	r0, r7
    81be:	e708      	b.n	7fd2 <__udivmoddi4+0xda>
    81c0:	4637      	mov	r7, r6
    81c2:	e6e9      	b.n	7f98 <__udivmoddi4+0xa0>

000081c4 <selfrel_offset31>:
    81c4:	6803      	ldr	r3, [r0, #0]
    81c6:	005a      	lsls	r2, r3, #1
    81c8:	bf4c      	ite	mi
    81ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    81ce:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    81d2:	4418      	add	r0, r3
    81d4:	4770      	bx	lr
    81d6:	bf00      	nop

000081d8 <search_EIT_table>:
    81d8:	b361      	cbz	r1, 8234 <search_EIT_table+0x5c>
    81da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81de:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    81e2:	4690      	mov	r8, r2
    81e4:	4606      	mov	r6, r0
    81e6:	46d1      	mov	r9, sl
    81e8:	2700      	movs	r7, #0
    81ea:	eb07 0409 	add.w	r4, r7, r9
    81ee:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    81f2:	1064      	asrs	r4, r4, #1
    81f4:	00e5      	lsls	r5, r4, #3
    81f6:	1971      	adds	r1, r6, r5
    81f8:	4608      	mov	r0, r1
    81fa:	f7ff ffe3 	bl	81c4 <selfrel_offset31>
    81fe:	45a2      	cmp	sl, r4
    8200:	4683      	mov	fp, r0
    8202:	f105 0008 	add.w	r0, r5, #8
    8206:	4430      	add	r0, r6
    8208:	d009      	beq.n	821e <search_EIT_table+0x46>
    820a:	f7ff ffdb 	bl	81c4 <selfrel_offset31>
    820e:	45c3      	cmp	fp, r8
    8210:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    8214:	d805      	bhi.n	8222 <search_EIT_table+0x4a>
    8216:	4540      	cmp	r0, r8
    8218:	d209      	bcs.n	822e <search_EIT_table+0x56>
    821a:	1c67      	adds	r7, r4, #1
    821c:	e7e5      	b.n	81ea <search_EIT_table+0x12>
    821e:	45c3      	cmp	fp, r8
    8220:	d905      	bls.n	822e <search_EIT_table+0x56>
    8222:	42a7      	cmp	r7, r4
    8224:	d002      	beq.n	822c <search_EIT_table+0x54>
    8226:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    822a:	e7de      	b.n	81ea <search_EIT_table+0x12>
    822c:	2100      	movs	r1, #0
    822e:	4608      	mov	r0, r1
    8230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8234:	4608      	mov	r0, r1
    8236:	4770      	bx	lr

00008238 <__gnu_unwind_get_pr_addr>:
    8238:	2801      	cmp	r0, #1
    823a:	d007      	beq.n	824c <__gnu_unwind_get_pr_addr+0x14>
    823c:	2802      	cmp	r0, #2
    823e:	d007      	beq.n	8250 <__gnu_unwind_get_pr_addr+0x18>
    8240:	4b04      	ldr	r3, [pc, #16]	; (8254 <__gnu_unwind_get_pr_addr+0x1c>)
    8242:	2800      	cmp	r0, #0
    8244:	bf0c      	ite	eq
    8246:	4618      	moveq	r0, r3
    8248:	2000      	movne	r0, #0
    824a:	4770      	bx	lr
    824c:	4802      	ldr	r0, [pc, #8]	; (8258 <__gnu_unwind_get_pr_addr+0x20>)
    824e:	4770      	bx	lr
    8250:	4802      	ldr	r0, [pc, #8]	; (825c <__gnu_unwind_get_pr_addr+0x24>)
    8252:	4770      	bx	lr
    8254:	00008925 	.word	0x00008925
    8258:	00008929 	.word	0x00008929
    825c:	0000892d 	.word	0x0000892d

00008260 <get_eit_entry>:
    8260:	b530      	push	{r4, r5, lr}
    8262:	4b25      	ldr	r3, [pc, #148]	; (82f8 <get_eit_entry+0x98>)
    8264:	b083      	sub	sp, #12
    8266:	4604      	mov	r4, r0
    8268:	1e8d      	subs	r5, r1, #2
    826a:	b34b      	cbz	r3, 82c0 <get_eit_entry+0x60>
    826c:	a901      	add	r1, sp, #4
    826e:	4628      	mov	r0, r5
    8270:	f3af 8000 	nop.w
    8274:	b1f0      	cbz	r0, 82b4 <get_eit_entry+0x54>
    8276:	9901      	ldr	r1, [sp, #4]
    8278:	462a      	mov	r2, r5
    827a:	f7ff ffad 	bl	81d8 <search_EIT_table>
    827e:	4601      	mov	r1, r0
    8280:	b1c0      	cbz	r0, 82b4 <get_eit_entry+0x54>
    8282:	f7ff ff9f 	bl	81c4 <selfrel_offset31>
    8286:	684b      	ldr	r3, [r1, #4]
    8288:	64a0      	str	r0, [r4, #72]	; 0x48
    828a:	2b01      	cmp	r3, #1
    828c:	d02e      	beq.n	82ec <get_eit_entry+0x8c>
    828e:	2b00      	cmp	r3, #0
    8290:	f101 0004 	add.w	r0, r1, #4
    8294:	db26      	blt.n	82e4 <get_eit_entry+0x84>
    8296:	f7ff ff95 	bl	81c4 <selfrel_offset31>
    829a:	2300      	movs	r3, #0
    829c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    82a0:	6803      	ldr	r3, [r0, #0]
    82a2:	2b00      	cmp	r3, #0
    82a4:	db12      	blt.n	82cc <get_eit_entry+0x6c>
    82a6:	f7ff ff8d 	bl	81c4 <selfrel_offset31>
    82aa:	2300      	movs	r3, #0
    82ac:	6120      	str	r0, [r4, #16]
    82ae:	4618      	mov	r0, r3
    82b0:	b003      	add	sp, #12
    82b2:	bd30      	pop	{r4, r5, pc}
    82b4:	2300      	movs	r3, #0
    82b6:	6123      	str	r3, [r4, #16]
    82b8:	2309      	movs	r3, #9
    82ba:	4618      	mov	r0, r3
    82bc:	b003      	add	sp, #12
    82be:	bd30      	pop	{r4, r5, pc}
    82c0:	490e      	ldr	r1, [pc, #56]	; (82fc <get_eit_entry+0x9c>)
    82c2:	480f      	ldr	r0, [pc, #60]	; (8300 <get_eit_entry+0xa0>)
    82c4:	1a09      	subs	r1, r1, r0
    82c6:	10c9      	asrs	r1, r1, #3
    82c8:	9101      	str	r1, [sp, #4]
    82ca:	e7d5      	b.n	8278 <get_eit_entry+0x18>
    82cc:	f3c3 6003 	ubfx	r0, r3, #24, #4
    82d0:	f7ff ffb2 	bl	8238 <__gnu_unwind_get_pr_addr>
    82d4:	2800      	cmp	r0, #0
    82d6:	bf14      	ite	ne
    82d8:	2300      	movne	r3, #0
    82da:	2309      	moveq	r3, #9
    82dc:	6120      	str	r0, [r4, #16]
    82de:	4618      	mov	r0, r3
    82e0:	b003      	add	sp, #12
    82e2:	bd30      	pop	{r4, r5, pc}
    82e4:	2301      	movs	r3, #1
    82e6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    82ea:	e7d9      	b.n	82a0 <get_eit_entry+0x40>
    82ec:	2300      	movs	r3, #0
    82ee:	6123      	str	r3, [r4, #16]
    82f0:	2305      	movs	r3, #5
    82f2:	4618      	mov	r0, r3
    82f4:	b003      	add	sp, #12
    82f6:	bd30      	pop	{r4, r5, pc}
    82f8:	00000000 	.word	0x00000000
    82fc:	0000ab84 	.word	0x0000ab84
    8300:	0000aacc 	.word	0x0000aacc

00008304 <restore_non_core_regs>:
    8304:	6803      	ldr	r3, [r0, #0]
    8306:	07da      	lsls	r2, r3, #31
    8308:	b510      	push	{r4, lr}
    830a:	4604      	mov	r4, r0
    830c:	d406      	bmi.n	831c <restore_non_core_regs+0x18>
    830e:	079b      	lsls	r3, r3, #30
    8310:	f100 0048 	add.w	r0, r0, #72	; 0x48
    8314:	d509      	bpl.n	832a <restore_non_core_regs+0x26>
    8316:	f000 fc5f 	bl	8bd8 <__gnu_Unwind_Restore_VFP_D>
    831a:	6823      	ldr	r3, [r4, #0]
    831c:	0759      	lsls	r1, r3, #29
    831e:	d509      	bpl.n	8334 <restore_non_core_regs+0x30>
    8320:	071a      	lsls	r2, r3, #28
    8322:	d50e      	bpl.n	8342 <restore_non_core_regs+0x3e>
    8324:	06db      	lsls	r3, r3, #27
    8326:	d513      	bpl.n	8350 <restore_non_core_regs+0x4c>
    8328:	bd10      	pop	{r4, pc}
    832a:	f000 fc4d 	bl	8bc8 <__gnu_Unwind_Restore_VFP>
    832e:	6823      	ldr	r3, [r4, #0]
    8330:	0759      	lsls	r1, r3, #29
    8332:	d4f5      	bmi.n	8320 <restore_non_core_regs+0x1c>
    8334:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    8338:	f000 fc56 	bl	8be8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    833c:	6823      	ldr	r3, [r4, #0]
    833e:	071a      	lsls	r2, r3, #28
    8340:	d4f0      	bmi.n	8324 <restore_non_core_regs+0x20>
    8342:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    8346:	f000 fc57 	bl	8bf8 <__gnu_Unwind_Restore_WMMXD>
    834a:	6823      	ldr	r3, [r4, #0]
    834c:	06db      	lsls	r3, r3, #27
    834e:	d4eb      	bmi.n	8328 <restore_non_core_regs+0x24>
    8350:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    8354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8358:	f000 bc92 	b.w	8c80 <__gnu_Unwind_Restore_WMMXC>

0000835c <_Unwind_decode_typeinfo_ptr.isra.0>:
    835c:	6803      	ldr	r3, [r0, #0]
    835e:	b103      	cbz	r3, 8362 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    8360:	4403      	add	r3, r0
    8362:	4618      	mov	r0, r3
    8364:	4770      	bx	lr
    8366:	bf00      	nop

00008368 <__gnu_unwind_24bit.isra.1>:
    8368:	2009      	movs	r0, #9
    836a:	4770      	bx	lr

0000836c <_Unwind_DebugHook>:
    836c:	4770      	bx	lr
    836e:	bf00      	nop

00008370 <unwind_phase2>:
    8370:	b570      	push	{r4, r5, r6, lr}
    8372:	4604      	mov	r4, r0
    8374:	460d      	mov	r5, r1
    8376:	e008      	b.n	838a <unwind_phase2+0x1a>
    8378:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    837a:	6163      	str	r3, [r4, #20]
    837c:	462a      	mov	r2, r5
    837e:	6923      	ldr	r3, [r4, #16]
    8380:	4621      	mov	r1, r4
    8382:	2001      	movs	r0, #1
    8384:	4798      	blx	r3
    8386:	2808      	cmp	r0, #8
    8388:	d108      	bne.n	839c <unwind_phase2+0x2c>
    838a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    838c:	4620      	mov	r0, r4
    838e:	f7ff ff67 	bl	8260 <get_eit_entry>
    8392:	4606      	mov	r6, r0
    8394:	2800      	cmp	r0, #0
    8396:	d0ef      	beq.n	8378 <unwind_phase2+0x8>
    8398:	f000 fe9c 	bl	90d4 <abort>
    839c:	2807      	cmp	r0, #7
    839e:	d1fb      	bne.n	8398 <unwind_phase2+0x28>
    83a0:	4630      	mov	r0, r6
    83a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    83a4:	f7ff ffe2 	bl	836c <_Unwind_DebugHook>
    83a8:	1d28      	adds	r0, r5, #4
    83aa:	f000 fc01 	bl	8bb0 <__restore_core_regs>
    83ae:	bf00      	nop

000083b0 <unwind_phase2_forced>:
    83b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83b4:	1d0c      	adds	r4, r1, #4
    83b6:	4605      	mov	r5, r0
    83b8:	4617      	mov	r7, r2
    83ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    83bc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    83c0:	ae03      	add	r6, sp, #12
    83c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    83c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    83c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    83c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    83ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    83cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    83d0:	ac02      	add	r4, sp, #8
    83d2:	f8d5 800c 	ldr.w	r8, [r5, #12]
    83d6:	f8d5 9018 	ldr.w	r9, [r5, #24]
    83da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    83de:	2300      	movs	r3, #0
    83e0:	6023      	str	r3, [r4, #0]
    83e2:	e021      	b.n	8428 <unwind_phase2_forced+0x78>
    83e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    83e6:	616b      	str	r3, [r5, #20]
    83e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    83ec:	4621      	mov	r1, r4
    83ee:	a87a      	add	r0, sp, #488	; 0x1e8
    83f0:	f000 feac 	bl	914c <memcpy>
    83f4:	692b      	ldr	r3, [r5, #16]
    83f6:	aa7a      	add	r2, sp, #488	; 0x1e8
    83f8:	4629      	mov	r1, r5
    83fa:	4630      	mov	r0, r6
    83fc:	4798      	blx	r3
    83fe:	9b88      	ldr	r3, [sp, #544]	; 0x220
    8400:	e9cd 4900 	strd	r4, r9, [sp]
    8404:	4682      	mov	sl, r0
    8406:	6463      	str	r3, [r4, #68]	; 0x44
    8408:	4631      	mov	r1, r6
    840a:	462b      	mov	r3, r5
    840c:	462a      	mov	r2, r5
    840e:	2001      	movs	r0, #1
    8410:	47c0      	blx	r8
    8412:	4607      	mov	r7, r0
    8414:	b9f8      	cbnz	r0, 8456 <unwind_phase2_forced+0xa6>
    8416:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    841a:	a97a      	add	r1, sp, #488	; 0x1e8
    841c:	4620      	mov	r0, r4
    841e:	f000 fe95 	bl	914c <memcpy>
    8422:	f1ba 0f08 	cmp.w	sl, #8
    8426:	d11c      	bne.n	8462 <unwind_phase2_forced+0xb2>
    8428:	6c21      	ldr	r1, [r4, #64]	; 0x40
    842a:	4628      	mov	r0, r5
    842c:	f7ff ff18 	bl	8260 <get_eit_entry>
    8430:	2f00      	cmp	r7, #0
    8432:	bf08      	it	eq
    8434:	2609      	moveq	r6, #9
    8436:	4607      	mov	r7, r0
    8438:	bf18      	it	ne
    843a:	260a      	movne	r6, #10
    843c:	2800      	cmp	r0, #0
    843e:	d0d1      	beq.n	83e4 <unwind_phase2_forced+0x34>
    8440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8442:	f046 0110 	orr.w	r1, r6, #16
    8446:	e9cd 4900 	strd	r4, r9, [sp]
    844a:	462a      	mov	r2, r5
    844c:	6463      	str	r3, [r4, #68]	; 0x44
    844e:	2001      	movs	r0, #1
    8450:	462b      	mov	r3, r5
    8452:	47c0      	blx	r8
    8454:	b100      	cbz	r0, 8458 <unwind_phase2_forced+0xa8>
    8456:	2709      	movs	r7, #9
    8458:	4638      	mov	r0, r7
    845a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8462:	f1ba 0f07 	cmp.w	sl, #7
    8466:	d1f6      	bne.n	8456 <unwind_phase2_forced+0xa6>
    8468:	4638      	mov	r0, r7
    846a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    846c:	f7ff ff7e 	bl	836c <_Unwind_DebugHook>
    8470:	a803      	add	r0, sp, #12
    8472:	f000 fb9d 	bl	8bb0 <__restore_core_regs>
    8476:	bf00      	nop

00008478 <_Unwind_GetCFA>:
    8478:	6c40      	ldr	r0, [r0, #68]	; 0x44
    847a:	4770      	bx	lr

0000847c <__gnu_Unwind_RaiseException>:
    847c:	b5f0      	push	{r4, r5, r6, r7, lr}
    847e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    8480:	640b      	str	r3, [r1, #64]	; 0x40
    8482:	1d0d      	adds	r5, r1, #4
    8484:	460f      	mov	r7, r1
    8486:	4606      	mov	r6, r0
    8488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    848a:	b0f9      	sub	sp, #484	; 0x1e4
    848c:	ac01      	add	r4, sp, #4
    848e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8498:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    849c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    84a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    84a4:	9500      	str	r5, [sp, #0]
    84a6:	e006      	b.n	84b6 <__gnu_Unwind_RaiseException+0x3a>
    84a8:	6933      	ldr	r3, [r6, #16]
    84aa:	466a      	mov	r2, sp
    84ac:	4631      	mov	r1, r6
    84ae:	4798      	blx	r3
    84b0:	2808      	cmp	r0, #8
    84b2:	4604      	mov	r4, r0
    84b4:	d108      	bne.n	84c8 <__gnu_Unwind_RaiseException+0x4c>
    84b6:	9910      	ldr	r1, [sp, #64]	; 0x40
    84b8:	4630      	mov	r0, r6
    84ba:	f7ff fed1 	bl	8260 <get_eit_entry>
    84be:	2800      	cmp	r0, #0
    84c0:	d0f2      	beq.n	84a8 <__gnu_Unwind_RaiseException+0x2c>
    84c2:	2009      	movs	r0, #9
    84c4:	b079      	add	sp, #484	; 0x1e4
    84c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84c8:	4668      	mov	r0, sp
    84ca:	f7ff ff1b 	bl	8304 <restore_non_core_regs>
    84ce:	2c06      	cmp	r4, #6
    84d0:	d1f7      	bne.n	84c2 <__gnu_Unwind_RaiseException+0x46>
    84d2:	4639      	mov	r1, r7
    84d4:	4630      	mov	r0, r6
    84d6:	f7ff ff4b 	bl	8370 <unwind_phase2>
    84da:	bf00      	nop

000084dc <__gnu_Unwind_ForcedUnwind>:
    84dc:	b430      	push	{r4, r5}
    84de:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    84e0:	60c1      	str	r1, [r0, #12]
    84e2:	6182      	str	r2, [r0, #24]
    84e4:	4619      	mov	r1, r3
    84e6:	641d      	str	r5, [r3, #64]	; 0x40
    84e8:	2200      	movs	r2, #0
    84ea:	bc30      	pop	{r4, r5}
    84ec:	e760      	b.n	83b0 <unwind_phase2_forced>
    84ee:	bf00      	nop

000084f0 <__gnu_Unwind_Resume>:
    84f0:	b570      	push	{r4, r5, r6, lr}
    84f2:	68c6      	ldr	r6, [r0, #12]
    84f4:	6943      	ldr	r3, [r0, #20]
    84f6:	640b      	str	r3, [r1, #64]	; 0x40
    84f8:	b9be      	cbnz	r6, 852a <__gnu_Unwind_Resume+0x3a>
    84fa:	6903      	ldr	r3, [r0, #16]
    84fc:	460a      	mov	r2, r1
    84fe:	4604      	mov	r4, r0
    8500:	460d      	mov	r5, r1
    8502:	4601      	mov	r1, r0
    8504:	2002      	movs	r0, #2
    8506:	4798      	blx	r3
    8508:	2807      	cmp	r0, #7
    850a:	d007      	beq.n	851c <__gnu_Unwind_Resume+0x2c>
    850c:	2808      	cmp	r0, #8
    850e:	d103      	bne.n	8518 <__gnu_Unwind_Resume+0x28>
    8510:	4629      	mov	r1, r5
    8512:	4620      	mov	r0, r4
    8514:	f7ff ff2c 	bl	8370 <unwind_phase2>
    8518:	f000 fddc 	bl	90d4 <abort>
    851c:	4630      	mov	r0, r6
    851e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    8520:	f7ff ff24 	bl	836c <_Unwind_DebugHook>
    8524:	1d28      	adds	r0, r5, #4
    8526:	f000 fb43 	bl	8bb0 <__restore_core_regs>
    852a:	2201      	movs	r2, #1
    852c:	f7ff ff40 	bl	83b0 <unwind_phase2_forced>
    8530:	f000 fdd0 	bl	90d4 <abort>

00008534 <__gnu_Unwind_Resume_or_Rethrow>:
    8534:	68c2      	ldr	r2, [r0, #12]
    8536:	b11a      	cbz	r2, 8540 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    8538:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    853a:	640a      	str	r2, [r1, #64]	; 0x40
    853c:	2200      	movs	r2, #0
    853e:	e737      	b.n	83b0 <unwind_phase2_forced>
    8540:	e79c      	b.n	847c <__gnu_Unwind_RaiseException>
    8542:	bf00      	nop

00008544 <_Unwind_Complete>:
    8544:	4770      	bx	lr
    8546:	bf00      	nop

00008548 <_Unwind_DeleteException>:
    8548:	6883      	ldr	r3, [r0, #8]
    854a:	b113      	cbz	r3, 8552 <_Unwind_DeleteException+0xa>
    854c:	4601      	mov	r1, r0
    854e:	2001      	movs	r0, #1
    8550:	4718      	bx	r3
    8552:	4770      	bx	lr

00008554 <_Unwind_VRS_Get>:
    8554:	2904      	cmp	r1, #4
    8556:	d807      	bhi.n	8568 <_Unwind_VRS_Get+0x14>
    8558:	e8df f001 	tbb	[pc, r1]
    855c:	08060803 	.word	0x08060803
    8560:	08          	.byte	0x08
    8561:	00          	.byte	0x00
    8562:	b90b      	cbnz	r3, 8568 <_Unwind_VRS_Get+0x14>
    8564:	2a0f      	cmp	r2, #15
    8566:	d903      	bls.n	8570 <_Unwind_VRS_Get+0x1c>
    8568:	2002      	movs	r0, #2
    856a:	4770      	bx	lr
    856c:	2001      	movs	r0, #1
    856e:	4770      	bx	lr
    8570:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8574:	4618      	mov	r0, r3
    8576:	6853      	ldr	r3, [r2, #4]
    8578:	9a00      	ldr	r2, [sp, #0]
    857a:	6013      	str	r3, [r2, #0]
    857c:	4770      	bx	lr
    857e:	bf00      	nop

00008580 <_Unwind_GetGR>:
    8580:	b510      	push	{r4, lr}
    8582:	b084      	sub	sp, #16
    8584:	2300      	movs	r3, #0
    8586:	ac03      	add	r4, sp, #12
    8588:	460a      	mov	r2, r1
    858a:	9400      	str	r4, [sp, #0]
    858c:	4619      	mov	r1, r3
    858e:	f7ff ffe1 	bl	8554 <_Unwind_VRS_Get>
    8592:	9803      	ldr	r0, [sp, #12]
    8594:	b004      	add	sp, #16
    8596:	bd10      	pop	{r4, pc}

00008598 <_Unwind_VRS_Set>:
    8598:	2904      	cmp	r1, #4
    859a:	d807      	bhi.n	85ac <_Unwind_VRS_Set+0x14>
    859c:	e8df f001 	tbb	[pc, r1]
    85a0:	08060803 	.word	0x08060803
    85a4:	08          	.byte	0x08
    85a5:	00          	.byte	0x00
    85a6:	b90b      	cbnz	r3, 85ac <_Unwind_VRS_Set+0x14>
    85a8:	2a0f      	cmp	r2, #15
    85aa:	d903      	bls.n	85b4 <_Unwind_VRS_Set+0x1c>
    85ac:	2002      	movs	r0, #2
    85ae:	4770      	bx	lr
    85b0:	2001      	movs	r0, #1
    85b2:	4770      	bx	lr
    85b4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    85b8:	9a00      	ldr	r2, [sp, #0]
    85ba:	6812      	ldr	r2, [r2, #0]
    85bc:	6042      	str	r2, [r0, #4]
    85be:	4618      	mov	r0, r3
    85c0:	4770      	bx	lr
    85c2:	bf00      	nop

000085c4 <_Unwind_SetGR>:
    85c4:	b510      	push	{r4, lr}
    85c6:	b084      	sub	sp, #16
    85c8:	ac04      	add	r4, sp, #16
    85ca:	2300      	movs	r3, #0
    85cc:	f844 2d04 	str.w	r2, [r4, #-4]!
    85d0:	460a      	mov	r2, r1
    85d2:	9400      	str	r4, [sp, #0]
    85d4:	4619      	mov	r1, r3
    85d6:	f7ff ffdf 	bl	8598 <_Unwind_VRS_Set>
    85da:	b004      	add	sp, #16
    85dc:	bd10      	pop	{r4, pc}
    85de:	bf00      	nop

000085e0 <__gnu_Unwind_Backtrace>:
    85e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85e2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    85e4:	6413      	str	r3, [r2, #64]	; 0x40
    85e6:	1d15      	adds	r5, r2, #4
    85e8:	4607      	mov	r7, r0
    85ea:	460e      	mov	r6, r1
    85ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    85ee:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    85f2:	ac17      	add	r4, sp, #92	; 0x5c
    85f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    85f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    85f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    85fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    85fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    85fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8602:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    8606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    860a:	9516      	str	r5, [sp, #88]	; 0x58
    860c:	e010      	b.n	8630 <__gnu_Unwind_Backtrace+0x50>
    860e:	a816      	add	r0, sp, #88	; 0x58
    8610:	f7ff ffd8 	bl	85c4 <_Unwind_SetGR>
    8614:	4631      	mov	r1, r6
    8616:	a816      	add	r0, sp, #88	; 0x58
    8618:	47b8      	blx	r7
    861a:	aa16      	add	r2, sp, #88	; 0x58
    861c:	4669      	mov	r1, sp
    861e:	b978      	cbnz	r0, 8640 <__gnu_Unwind_Backtrace+0x60>
    8620:	9b04      	ldr	r3, [sp, #16]
    8622:	2008      	movs	r0, #8
    8624:	4798      	blx	r3
    8626:	2805      	cmp	r0, #5
    8628:	4604      	mov	r4, r0
    862a:	d00a      	beq.n	8642 <__gnu_Unwind_Backtrace+0x62>
    862c:	2809      	cmp	r0, #9
    862e:	d007      	beq.n	8640 <__gnu_Unwind_Backtrace+0x60>
    8630:	9926      	ldr	r1, [sp, #152]	; 0x98
    8632:	4668      	mov	r0, sp
    8634:	f7ff fe14 	bl	8260 <get_eit_entry>
    8638:	466a      	mov	r2, sp
    863a:	210c      	movs	r1, #12
    863c:	2800      	cmp	r0, #0
    863e:	d0e6      	beq.n	860e <__gnu_Unwind_Backtrace+0x2e>
    8640:	2409      	movs	r4, #9
    8642:	a816      	add	r0, sp, #88	; 0x58
    8644:	f7ff fe5e 	bl	8304 <restore_non_core_regs>
    8648:	4620      	mov	r0, r4
    864a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    864e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008650 <__gnu_unwind_pr_common>:
    8650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8654:	460d      	mov	r5, r1
    8656:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    8658:	b089      	sub	sp, #36	; 0x24
    865a:	1d0c      	adds	r4, r1, #4
    865c:	4616      	mov	r6, r2
    865e:	f000 0b03 	and.w	fp, r0, #3
    8662:	680a      	ldr	r2, [r1, #0]
    8664:	9406      	str	r4, [sp, #24]
    8666:	461f      	mov	r7, r3
    8668:	2b00      	cmp	r3, #0
    866a:	d068      	beq.n	873e <__gnu_unwind_pr_common+0xee>
    866c:	0c13      	lsrs	r3, r2, #16
    866e:	b2d9      	uxtb	r1, r3
    8670:	0412      	lsls	r2, r2, #16
    8672:	f88d 301d 	strb.w	r3, [sp, #29]
    8676:	2302      	movs	r3, #2
    8678:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    867c:	9205      	str	r2, [sp, #20]
    867e:	f88d 301c 	strb.w	r3, [sp, #28]
    8682:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    8684:	f1bb 0f02 	cmp.w	fp, #2
    8688:	bf08      	it	eq
    868a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    868c:	f013 0301 	ands.w	r3, r3, #1
    8690:	d146      	bne.n	8720 <__gnu_unwind_pr_common+0xd0>
    8692:	9301      	str	r3, [sp, #4]
    8694:	f000 0308 	and.w	r3, r0, #8
    8698:	9300      	str	r3, [sp, #0]
    869a:	f8d4 9000 	ldr.w	r9, [r4]
    869e:	f1b9 0f00 	cmp.w	r9, #0
    86a2:	f000 80f3 	beq.w	888c <__gnu_unwind_pr_common+0x23c>
    86a6:	2f02      	cmp	r7, #2
    86a8:	d045      	beq.n	8736 <__gnu_unwind_pr_common+0xe6>
    86aa:	f8b4 9000 	ldrh.w	r9, [r4]
    86ae:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    86b2:	3404      	adds	r4, #4
    86b4:	6cab      	ldr	r3, [r5, #72]	; 0x48
    86b6:	f028 0a01 	bic.w	sl, r8, #1
    86ba:	210f      	movs	r1, #15
    86bc:	4630      	mov	r0, r6
    86be:	449a      	add	sl, r3
    86c0:	f7ff ff5e 	bl	8580 <_Unwind_GetGR>
    86c4:	4582      	cmp	sl, r0
    86c6:	d834      	bhi.n	8732 <__gnu_unwind_pr_common+0xe2>
    86c8:	f029 0301 	bic.w	r3, r9, #1
    86cc:	4453      	add	r3, sl
    86ce:	4283      	cmp	r3, r0
    86d0:	bf94      	ite	ls
    86d2:	2000      	movls	r0, #0
    86d4:	2001      	movhi	r0, #1
    86d6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    86da:	f008 0802 	and.w	r8, r8, #2
    86de:	f009 0901 	and.w	r9, r9, #1
    86e2:	ea48 0809 	orr.w	r8, r8, r9
    86e6:	f1b8 0f01 	cmp.w	r8, #1
    86ea:	d03a      	beq.n	8762 <__gnu_unwind_pr_common+0x112>
    86ec:	d331      	bcc.n	8752 <__gnu_unwind_pr_common+0x102>
    86ee:	f1b8 0f02 	cmp.w	r8, #2
    86f2:	d11a      	bne.n	872a <__gnu_unwind_pr_common+0xda>
    86f4:	6823      	ldr	r3, [r4, #0]
    86f6:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    86fa:	f1bb 0f00 	cmp.w	fp, #0
    86fe:	d166      	bne.n	87ce <__gnu_unwind_pr_common+0x17e>
    8700:	b130      	cbz	r0, 8710 <__gnu_unwind_pr_common+0xc0>
    8702:	9a00      	ldr	r2, [sp, #0]
    8704:	2a00      	cmp	r2, #0
    8706:	d06c      	beq.n	87e2 <__gnu_unwind_pr_common+0x192>
    8708:	f1ba 0f00 	cmp.w	sl, #0
    870c:	f000 8090 	beq.w	8830 <__gnu_unwind_pr_common+0x1e0>
    8710:	2b00      	cmp	r3, #0
    8712:	da00      	bge.n	8716 <__gnu_unwind_pr_common+0xc6>
    8714:	3404      	adds	r4, #4
    8716:	f10a 0301 	add.w	r3, sl, #1
    871a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    871e:	e7bc      	b.n	869a <__gnu_unwind_pr_common+0x4a>
    8720:	4630      	mov	r0, r6
    8722:	a905      	add	r1, sp, #20
    8724:	f000 fb46 	bl	8db4 <__gnu_unwind_execute>
    8728:	b178      	cbz	r0, 874a <__gnu_unwind_pr_common+0xfa>
    872a:	2009      	movs	r0, #9
    872c:	b009      	add	sp, #36	; 0x24
    872e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8732:	2000      	movs	r0, #0
    8734:	e7cf      	b.n	86d6 <__gnu_unwind_pr_common+0x86>
    8736:	f8d4 8004 	ldr.w	r8, [r4, #4]
    873a:	3408      	adds	r4, #8
    873c:	e7ba      	b.n	86b4 <__gnu_unwind_pr_common+0x64>
    873e:	0212      	lsls	r2, r2, #8
    8740:	2303      	movs	r3, #3
    8742:	9205      	str	r2, [sp, #20]
    8744:	f8ad 301c 	strh.w	r3, [sp, #28]
    8748:	e79b      	b.n	8682 <__gnu_unwind_pr_common+0x32>
    874a:	2008      	movs	r0, #8
    874c:	b009      	add	sp, #36	; 0x24
    874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8752:	f1bb 0f00 	cmp.w	fp, #0
    8756:	d002      	beq.n	875e <__gnu_unwind_pr_common+0x10e>
    8758:	2800      	cmp	r0, #0
    875a:	f040 80b4 	bne.w	88c6 <__gnu_unwind_pr_common+0x276>
    875e:	3404      	adds	r4, #4
    8760:	e79b      	b.n	869a <__gnu_unwind_pr_common+0x4a>
    8762:	f1bb 0f00 	cmp.w	fp, #0
    8766:	d118      	bne.n	879a <__gnu_unwind_pr_common+0x14a>
    8768:	b1a8      	cbz	r0, 8796 <__gnu_unwind_pr_common+0x146>
    876a:	e9d4 2300 	ldrd	r2, r3, [r4]
    876e:	1c99      	adds	r1, r3, #2
    8770:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    8774:	d0d9      	beq.n	872a <__gnu_unwind_pr_common+0xda>
    8776:	f105 0158 	add.w	r1, r5, #88	; 0x58
    877a:	3301      	adds	r3, #1
    877c:	9104      	str	r1, [sp, #16]
    877e:	f000 80b5 	beq.w	88ec <__gnu_unwind_pr_common+0x29c>
    8782:	1d20      	adds	r0, r4, #4
    8784:	f7ff fdea 	bl	835c <_Unwind_decode_typeinfo_ptr.isra.0>
    8788:	ab04      	add	r3, sp, #16
    878a:	4601      	mov	r1, r0
    878c:	4628      	mov	r0, r5
    878e:	f3af 8000 	nop.w
    8792:	2800      	cmp	r0, #0
    8794:	d167      	bne.n	8866 <__gnu_unwind_pr_common+0x216>
    8796:	3408      	adds	r4, #8
    8798:	e77f      	b.n	869a <__gnu_unwind_pr_common+0x4a>
    879a:	210d      	movs	r1, #13
    879c:	4630      	mov	r0, r6
    879e:	f8d5 8020 	ldr.w	r8, [r5, #32]
    87a2:	f7ff feed 	bl	8580 <_Unwind_GetGR>
    87a6:	4580      	cmp	r8, r0
    87a8:	d1f5      	bne.n	8796 <__gnu_unwind_pr_common+0x146>
    87aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    87ac:	429c      	cmp	r4, r3
    87ae:	d1f2      	bne.n	8796 <__gnu_unwind_pr_common+0x146>
    87b0:	4620      	mov	r0, r4
    87b2:	f7ff fd07 	bl	81c4 <selfrel_offset31>
    87b6:	210f      	movs	r1, #15
    87b8:	4602      	mov	r2, r0
    87ba:	4630      	mov	r0, r6
    87bc:	f7ff ff02 	bl	85c4 <_Unwind_SetGR>
    87c0:	4630      	mov	r0, r6
    87c2:	462a      	mov	r2, r5
    87c4:	2100      	movs	r1, #0
    87c6:	f7ff fefd 	bl	85c4 <_Unwind_SetGR>
    87ca:	2007      	movs	r0, #7
    87cc:	e7ae      	b.n	872c <__gnu_unwind_pr_common+0xdc>
    87ce:	210d      	movs	r1, #13
    87d0:	4630      	mov	r0, r6
    87d2:	f8d5 8020 	ldr.w	r8, [r5, #32]
    87d6:	f7ff fed3 	bl	8580 <_Unwind_GetGR>
    87da:	4580      	cmp	r8, r0
    87dc:	d032      	beq.n	8844 <__gnu_unwind_pr_common+0x1f4>
    87de:	6823      	ldr	r3, [r4, #0]
    87e0:	e796      	b.n	8710 <__gnu_unwind_pr_common+0xc0>
    87e2:	f1ba 0f00 	cmp.w	sl, #0
    87e6:	d023      	beq.n	8830 <__gnu_unwind_pr_common+0x1e0>
    87e8:	f105 0358 	add.w	r3, r5, #88	; 0x58
    87ec:	f104 0804 	add.w	r8, r4, #4
    87f0:	f8cd b008 	str.w	fp, [sp, #8]
    87f4:	f8dd 9000 	ldr.w	r9, [sp]
    87f8:	9703      	str	r7, [sp, #12]
    87fa:	46a3      	mov	fp, r4
    87fc:	461c      	mov	r4, r3
    87fe:	e002      	b.n	8806 <__gnu_unwind_pr_common+0x1b6>
    8800:	4557      	cmp	r7, sl
    8802:	46b9      	mov	r9, r7
    8804:	d040      	beq.n	8888 <__gnu_unwind_pr_common+0x238>
    8806:	4640      	mov	r0, r8
    8808:	9404      	str	r4, [sp, #16]
    880a:	f7ff fda7 	bl	835c <_Unwind_decode_typeinfo_ptr.isra.0>
    880e:	ab04      	add	r3, sp, #16
    8810:	4601      	mov	r1, r0
    8812:	2200      	movs	r2, #0
    8814:	4628      	mov	r0, r5
    8816:	f3af 8000 	nop.w
    881a:	f109 0701 	add.w	r7, r9, #1
    881e:	f108 0804 	add.w	r8, r8, #4
    8822:	2800      	cmp	r0, #0
    8824:	d0ec      	beq.n	8800 <__gnu_unwind_pr_common+0x1b0>
    8826:	45d1      	cmp	r9, sl
    8828:	465c      	mov	r4, fp
    882a:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    882e:	d1d6      	bne.n	87de <__gnu_unwind_pr_common+0x18e>
    8830:	4630      	mov	r0, r6
    8832:	210d      	movs	r1, #13
    8834:	f7ff fea4 	bl	8580 <_Unwind_GetGR>
    8838:	9b04      	ldr	r3, [sp, #16]
    883a:	6228      	str	r0, [r5, #32]
    883c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    8840:	2006      	movs	r0, #6
    8842:	e773      	b.n	872c <__gnu_unwind_pr_common+0xdc>
    8844:	6aab      	ldr	r3, [r5, #40]	; 0x28
    8846:	429c      	cmp	r4, r3
    8848:	d1c9      	bne.n	87de <__gnu_unwind_pr_common+0x18e>
    884a:	2204      	movs	r2, #4
    884c:	f04f 0800 	mov.w	r8, #0
    8850:	18a3      	adds	r3, r4, r2
    8852:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    8856:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    885a:	6823      	ldr	r3, [r4, #0]
    885c:	4543      	cmp	r3, r8
    885e:	db4d      	blt.n	88fc <__gnu_unwind_pr_common+0x2ac>
    8860:	2301      	movs	r3, #1
    8862:	9301      	str	r3, [sp, #4]
    8864:	e757      	b.n	8716 <__gnu_unwind_pr_common+0xc6>
    8866:	4680      	mov	r8, r0
    8868:	210d      	movs	r1, #13
    886a:	4630      	mov	r0, r6
    886c:	f7ff fe88 	bl	8580 <_Unwind_GetGR>
    8870:	f1b8 0f02 	cmp.w	r8, #2
    8874:	6228      	str	r0, [r5, #32]
    8876:	d13e      	bne.n	88f6 <__gnu_unwind_pr_common+0x2a6>
    8878:	462b      	mov	r3, r5
    887a:	9a04      	ldr	r2, [sp, #16]
    887c:	f843 2f2c 	str.w	r2, [r3, #44]!
    8880:	626b      	str	r3, [r5, #36]	; 0x24
    8882:	62ac      	str	r4, [r5, #40]	; 0x28
    8884:	2006      	movs	r0, #6
    8886:	e751      	b.n	872c <__gnu_unwind_pr_common+0xdc>
    8888:	465c      	mov	r4, fp
    888a:	e7d1      	b.n	8830 <__gnu_unwind_pr_common+0x1e0>
    888c:	a905      	add	r1, sp, #20
    888e:	4630      	mov	r0, r6
    8890:	f000 fa90 	bl	8db4 <__gnu_unwind_execute>
    8894:	2800      	cmp	r0, #0
    8896:	f47f af48 	bne.w	872a <__gnu_unwind_pr_common+0xda>
    889a:	9b01      	ldr	r3, [sp, #4]
    889c:	2b00      	cmp	r3, #0
    889e:	f43f af54 	beq.w	874a <__gnu_unwind_pr_common+0xfa>
    88a2:	210f      	movs	r1, #15
    88a4:	4630      	mov	r0, r6
    88a6:	f7ff fe6b 	bl	8580 <_Unwind_GetGR>
    88aa:	210e      	movs	r1, #14
    88ac:	4602      	mov	r2, r0
    88ae:	4630      	mov	r0, r6
    88b0:	f7ff fe88 	bl	85c4 <_Unwind_SetGR>
    88b4:	4630      	mov	r0, r6
    88b6:	4a1a      	ldr	r2, [pc, #104]	; (8920 <__gnu_unwind_pr_common+0x2d0>)
    88b8:	210f      	movs	r1, #15
    88ba:	f7ff fe83 	bl	85c4 <_Unwind_SetGR>
    88be:	2007      	movs	r0, #7
    88c0:	b009      	add	sp, #36	; 0x24
    88c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88c6:	4620      	mov	r0, r4
    88c8:	f7ff fc7c 	bl	81c4 <selfrel_offset31>
    88cc:	3404      	adds	r4, #4
    88ce:	4607      	mov	r7, r0
    88d0:	63ac      	str	r4, [r5, #56]	; 0x38
    88d2:	4628      	mov	r0, r5
    88d4:	f3af 8000 	nop.w
    88d8:	2800      	cmp	r0, #0
    88da:	f43f af26 	beq.w	872a <__gnu_unwind_pr_common+0xda>
    88de:	4630      	mov	r0, r6
    88e0:	463a      	mov	r2, r7
    88e2:	210f      	movs	r1, #15
    88e4:	f7ff fe6e 	bl	85c4 <_Unwind_SetGR>
    88e8:	2007      	movs	r0, #7
    88ea:	e71f      	b.n	872c <__gnu_unwind_pr_common+0xdc>
    88ec:	4630      	mov	r0, r6
    88ee:	210d      	movs	r1, #13
    88f0:	f7ff fe46 	bl	8580 <_Unwind_GetGR>
    88f4:	6228      	str	r0, [r5, #32]
    88f6:	9b04      	ldr	r3, [sp, #16]
    88f8:	626b      	str	r3, [r5, #36]	; 0x24
    88fa:	e7c2      	b.n	8882 <__gnu_unwind_pr_common+0x232>
    88fc:	f10a 0001 	add.w	r0, sl, #1
    8900:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8904:	f7ff fc5e 	bl	81c4 <selfrel_offset31>
    8908:	210f      	movs	r1, #15
    890a:	4602      	mov	r2, r0
    890c:	4630      	mov	r0, r6
    890e:	f7ff fe59 	bl	85c4 <_Unwind_SetGR>
    8912:	4630      	mov	r0, r6
    8914:	462a      	mov	r2, r5
    8916:	4641      	mov	r1, r8
    8918:	f7ff fe54 	bl	85c4 <_Unwind_SetGR>
    891c:	2007      	movs	r0, #7
    891e:	e705      	b.n	872c <__gnu_unwind_pr_common+0xdc>
    8920:	00000000 	.word	0x00000000

00008924 <__aeabi_unwind_cpp_pr0>:
    8924:	2300      	movs	r3, #0
    8926:	e693      	b.n	8650 <__gnu_unwind_pr_common>

00008928 <__aeabi_unwind_cpp_pr1>:
    8928:	2301      	movs	r3, #1
    892a:	e691      	b.n	8650 <__gnu_unwind_pr_common>

0000892c <__aeabi_unwind_cpp_pr2>:
    892c:	2302      	movs	r3, #2
    892e:	e68f      	b.n	8650 <__gnu_unwind_pr_common>

00008930 <_Unwind_VRS_Pop>:
    8930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8934:	4605      	mov	r5, r0
    8936:	b0c4      	sub	sp, #272	; 0x110
    8938:	2904      	cmp	r1, #4
    893a:	d806      	bhi.n	894a <_Unwind_VRS_Pop+0x1a>
    893c:	e8df f001 	tbb	[pc, r1]
    8940:	03052b4d 	.word	0x03052b4d
    8944:	09          	.byte	0x09
    8945:	00          	.byte	0x00
    8946:	2b03      	cmp	r3, #3
    8948:	d05f      	beq.n	8a0a <_Unwind_VRS_Pop+0xda>
    894a:	2002      	movs	r0, #2
    894c:	b044      	add	sp, #272	; 0x110
    894e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8952:	2b00      	cmp	r3, #0
    8954:	d1f9      	bne.n	894a <_Unwind_VRS_Pop+0x1a>
    8956:	2a10      	cmp	r2, #16
    8958:	d8f7      	bhi.n	894a <_Unwind_VRS_Pop+0x1a>
    895a:	682b      	ldr	r3, [r5, #0]
    895c:	06dc      	lsls	r4, r3, #27
    895e:	f100 80f4 	bmi.w	8b4a <_Unwind_VRS_Pop+0x21a>
    8962:	ac22      	add	r4, sp, #136	; 0x88
    8964:	4620      	mov	r0, r4
    8966:	9201      	str	r2, [sp, #4]
    8968:	f000 f994 	bl	8c94 <__gnu_Unwind_Save_WMMXC>
    896c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    896e:	9a01      	ldr	r2, [sp, #4]
    8970:	2300      	movs	r3, #0
    8972:	2601      	movs	r6, #1
    8974:	fa06 f103 	lsl.w	r1, r6, r3
    8978:	4211      	tst	r1, r2
    897a:	d003      	beq.n	8984 <_Unwind_VRS_Pop+0x54>
    897c:	6801      	ldr	r1, [r0, #0]
    897e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    8982:	3004      	adds	r0, #4
    8984:	3301      	adds	r3, #1
    8986:	2b04      	cmp	r3, #4
    8988:	d1f4      	bne.n	8974 <_Unwind_VRS_Pop+0x44>
    898a:	63a8      	str	r0, [r5, #56]	; 0x38
    898c:	4620      	mov	r0, r4
    898e:	f000 f977 	bl	8c80 <__gnu_Unwind_Restore_WMMXC>
    8992:	2000      	movs	r0, #0
    8994:	e7da      	b.n	894c <_Unwind_VRS_Pop+0x1c>
    8996:	2b01      	cmp	r3, #1
    8998:	ea4f 4612 	mov.w	r6, r2, lsr #16
    899c:	b297      	uxth	r7, r2
    899e:	d052      	beq.n	8a46 <_Unwind_VRS_Pop+0x116>
    89a0:	2b05      	cmp	r3, #5
    89a2:	d1d2      	bne.n	894a <_Unwind_VRS_Pop+0x1a>
    89a4:	eb06 0807 	add.w	r8, r6, r7
    89a8:	f1b8 0f20 	cmp.w	r8, #32
    89ac:	d8cd      	bhi.n	894a <_Unwind_VRS_Pop+0x1a>
    89ae:	2e0f      	cmp	r6, #15
    89b0:	f240 8099 	bls.w	8ae6 <_Unwind_VRS_Pop+0x1b6>
    89b4:	46b8      	mov	r8, r7
    89b6:	2f00      	cmp	r7, #0
    89b8:	f040 80db 	bne.w	8b72 <_Unwind_VRS_Pop+0x242>
    89bc:	6baa      	ldr	r2, [r5, #56]	; 0x38
    89be:	63aa      	str	r2, [r5, #56]	; 0x38
    89c0:	2e0f      	cmp	r6, #15
    89c2:	f240 80be 	bls.w	8b42 <_Unwind_VRS_Pop+0x212>
    89c6:	f1b8 0f00 	cmp.w	r8, #0
    89ca:	d002      	beq.n	89d2 <_Unwind_VRS_Pop+0xa2>
    89cc:	a802      	add	r0, sp, #8
    89ce:	f000 f90b 	bl	8be8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    89d2:	2000      	movs	r0, #0
    89d4:	b044      	add	sp, #272	; 0x110
    89d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89da:	2b00      	cmp	r3, #0
    89dc:	d1b5      	bne.n	894a <_Unwind_VRS_Pop+0x1a>
    89de:	6bac      	ldr	r4, [r5, #56]	; 0x38
    89e0:	b297      	uxth	r7, r2
    89e2:	1d28      	adds	r0, r5, #4
    89e4:	2601      	movs	r6, #1
    89e6:	fa06 f103 	lsl.w	r1, r6, r3
    89ea:	4239      	tst	r1, r7
    89ec:	f103 0301 	add.w	r3, r3, #1
    89f0:	d002      	beq.n	89f8 <_Unwind_VRS_Pop+0xc8>
    89f2:	6821      	ldr	r1, [r4, #0]
    89f4:	6001      	str	r1, [r0, #0]
    89f6:	3404      	adds	r4, #4
    89f8:	2b10      	cmp	r3, #16
    89fa:	f100 0004 	add.w	r0, r0, #4
    89fe:	d1f2      	bne.n	89e6 <_Unwind_VRS_Pop+0xb6>
    8a00:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    8a04:	d1e5      	bne.n	89d2 <_Unwind_VRS_Pop+0xa2>
    8a06:	63ac      	str	r4, [r5, #56]	; 0x38
    8a08:	e7a0      	b.n	894c <_Unwind_VRS_Pop+0x1c>
    8a0a:	0c16      	lsrs	r6, r2, #16
    8a0c:	b297      	uxth	r7, r2
    8a0e:	19f3      	adds	r3, r6, r7
    8a10:	2b10      	cmp	r3, #16
    8a12:	d89a      	bhi.n	894a <_Unwind_VRS_Pop+0x1a>
    8a14:	682b      	ldr	r3, [r5, #0]
    8a16:	071a      	lsls	r2, r3, #28
    8a18:	d45d      	bmi.n	8ad6 <_Unwind_VRS_Pop+0x1a6>
    8a1a:	ac22      	add	r4, sp, #136	; 0x88
    8a1c:	4620      	mov	r0, r4
    8a1e:	f000 f90d 	bl	8c3c <__gnu_Unwind_Save_WMMXD>
    8a22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    8a26:	6bab      	ldr	r3, [r5, #56]	; 0x38
    8a28:	b13f      	cbz	r7, 8a3a <_Unwind_VRS_Pop+0x10a>
    8a2a:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    8a2e:	6818      	ldr	r0, [r3, #0]
    8a30:	f841 0b04 	str.w	r0, [r1], #4
    8a34:	3304      	adds	r3, #4
    8a36:	4293      	cmp	r3, r2
    8a38:	d1f9      	bne.n	8a2e <_Unwind_VRS_Pop+0xfe>
    8a3a:	4620      	mov	r0, r4
    8a3c:	63ab      	str	r3, [r5, #56]	; 0x38
    8a3e:	f000 f8db 	bl	8bf8 <__gnu_Unwind_Restore_WMMXD>
    8a42:	2000      	movs	r0, #0
    8a44:	e782      	b.n	894c <_Unwind_VRS_Pop+0x1c>
    8a46:	19f2      	adds	r2, r6, r7
    8a48:	2a10      	cmp	r2, #16
    8a4a:	f63f af7e 	bhi.w	894a <_Unwind_VRS_Pop+0x1a>
    8a4e:	2e0f      	cmp	r6, #15
    8a50:	f63f af7b 	bhi.w	894a <_Unwind_VRS_Pop+0x1a>
    8a54:	682a      	ldr	r2, [r5, #0]
    8a56:	07d1      	lsls	r1, r2, #31
    8a58:	d508      	bpl.n	8a6c <_Unwind_VRS_Pop+0x13c>
    8a5a:	4628      	mov	r0, r5
    8a5c:	f022 0203 	bic.w	r2, r2, #3
    8a60:	f840 2b48 	str.w	r2, [r0], #72
    8a64:	9301      	str	r3, [sp, #4]
    8a66:	f000 f8b3 	bl	8bd0 <__gnu_Unwind_Save_VFP>
    8a6a:	9b01      	ldr	r3, [sp, #4]
    8a6c:	9301      	str	r3, [sp, #4]
    8a6e:	ac22      	add	r4, sp, #136	; 0x88
    8a70:	4620      	mov	r0, r4
    8a72:	f000 f8ad 	bl	8bd0 <__gnu_Unwind_Save_VFP>
    8a76:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8a78:	9b01      	ldr	r3, [sp, #4]
    8a7a:	2f00      	cmp	r7, #0
    8a7c:	f000 8095 	beq.w	8baa <_Unwind_VRS_Pop+0x27a>
    8a80:	007f      	lsls	r7, r7, #1
    8a82:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    8a86:	f04f 0800 	mov.w	r8, #0
    8a8a:	3c04      	subs	r4, #4
    8a8c:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    8a90:	f851 0b04 	ldr.w	r0, [r1], #4
    8a94:	f844 0f04 	str.w	r0, [r4, #4]!
    8a98:	4291      	cmp	r1, r2
    8a9a:	d1f9      	bne.n	8a90 <_Unwind_VRS_Pop+0x160>
    8a9c:	f1b8 0f00 	cmp.w	r8, #0
    8aa0:	d00f      	beq.n	8ac2 <_Unwind_VRS_Pop+0x192>
    8aa2:	ac02      	add	r4, sp, #8
    8aa4:	2e10      	cmp	r6, #16
    8aa6:	4631      	mov	r1, r6
    8aa8:	bf38      	it	cc
    8aaa:	2110      	movcc	r1, #16
    8aac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    8ab0:	3984      	subs	r1, #132	; 0x84
    8ab2:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    8ab6:	f852 0b04 	ldr.w	r0, [r2], #4
    8aba:	f841 0f04 	str.w	r0, [r1, #4]!
    8abe:	4294      	cmp	r4, r2
    8ac0:	d1f9      	bne.n	8ab6 <_Unwind_VRS_Pop+0x186>
    8ac2:	2b01      	cmp	r3, #1
    8ac4:	f47f af7b 	bne.w	89be <_Unwind_VRS_Pop+0x8e>
    8ac8:	ac22      	add	r4, sp, #136	; 0x88
    8aca:	3204      	adds	r2, #4
    8acc:	63aa      	str	r2, [r5, #56]	; 0x38
    8ace:	4620      	mov	r0, r4
    8ad0:	f000 f87a 	bl	8bc8 <__gnu_Unwind_Restore_VFP>
    8ad4:	e77d      	b.n	89d2 <_Unwind_VRS_Pop+0xa2>
    8ad6:	f023 0308 	bic.w	r3, r3, #8
    8ada:	602b      	str	r3, [r5, #0]
    8adc:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    8ae0:	f000 f8ac 	bl	8c3c <__gnu_Unwind_Save_WMMXD>
    8ae4:	e799      	b.n	8a1a <_Unwind_VRS_Pop+0xea>
    8ae6:	f1b8 0f10 	cmp.w	r8, #16
    8aea:	682a      	ldr	r2, [r5, #0]
    8aec:	d943      	bls.n	8b76 <_Unwind_VRS_Pop+0x246>
    8aee:	07d0      	lsls	r0, r2, #31
    8af0:	f1a8 0810 	sub.w	r8, r8, #16
    8af4:	d50b      	bpl.n	8b0e <_Unwind_VRS_Pop+0x1de>
    8af6:	4628      	mov	r0, r5
    8af8:	f022 0201 	bic.w	r2, r2, #1
    8afc:	f042 0202 	orr.w	r2, r2, #2
    8b00:	f840 2b48 	str.w	r2, [r0], #72
    8b04:	9301      	str	r3, [sp, #4]
    8b06:	f000 f86b 	bl	8be0 <__gnu_Unwind_Save_VFP_D>
    8b0a:	682a      	ldr	r2, [r5, #0]
    8b0c:	9b01      	ldr	r3, [sp, #4]
    8b0e:	0751      	lsls	r1, r2, #29
    8b10:	d425      	bmi.n	8b5e <_Unwind_VRS_Pop+0x22e>
    8b12:	2e0f      	cmp	r6, #15
    8b14:	d804      	bhi.n	8b20 <_Unwind_VRS_Pop+0x1f0>
    8b16:	a822      	add	r0, sp, #136	; 0x88
    8b18:	9301      	str	r3, [sp, #4]
    8b1a:	f000 f861 	bl	8be0 <__gnu_Unwind_Save_VFP_D>
    8b1e:	9b01      	ldr	r3, [sp, #4]
    8b20:	9301      	str	r3, [sp, #4]
    8b22:	ac02      	add	r4, sp, #8
    8b24:	4620      	mov	r0, r4
    8b26:	f000 f863 	bl	8bf0 <__gnu_Unwind_Save_VFP_D_16_to_31>
    8b2a:	f1c6 0110 	rsb	r1, r6, #16
    8b2e:	2900      	cmp	r1, #0
    8b30:	6baa      	ldr	r2, [r5, #56]	; 0x38
    8b32:	9b01      	ldr	r3, [sp, #4]
    8b34:	ddb6      	ble.n	8aa4 <_Unwind_VRS_Pop+0x174>
    8b36:	ac22      	add	r4, sp, #136	; 0x88
    8b38:	004f      	lsls	r7, r1, #1
    8b3a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    8b3e:	4611      	mov	r1, r2
    8b40:	e7a3      	b.n	8a8a <_Unwind_VRS_Pop+0x15a>
    8b42:	a822      	add	r0, sp, #136	; 0x88
    8b44:	f000 f848 	bl	8bd8 <__gnu_Unwind_Restore_VFP_D>
    8b48:	e73d      	b.n	89c6 <_Unwind_VRS_Pop+0x96>
    8b4a:	f023 0310 	bic.w	r3, r3, #16
    8b4e:	602b      	str	r3, [r5, #0]
    8b50:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    8b54:	9201      	str	r2, [sp, #4]
    8b56:	f000 f89d 	bl	8c94 <__gnu_Unwind_Save_WMMXC>
    8b5a:	9a01      	ldr	r2, [sp, #4]
    8b5c:	e701      	b.n	8962 <_Unwind_VRS_Pop+0x32>
    8b5e:	4628      	mov	r0, r5
    8b60:	f022 0204 	bic.w	r2, r2, #4
    8b64:	f840 2bd0 	str.w	r2, [r0], #208
    8b68:	9301      	str	r3, [sp, #4]
    8b6a:	f000 f841 	bl	8bf0 <__gnu_Unwind_Save_VFP_D_16_to_31>
    8b6e:	9b01      	ldr	r3, [sp, #4]
    8b70:	e7cf      	b.n	8b12 <_Unwind_VRS_Pop+0x1e2>
    8b72:	682a      	ldr	r2, [r5, #0]
    8b74:	e7cb      	b.n	8b0e <_Unwind_VRS_Pop+0x1de>
    8b76:	07d0      	lsls	r0, r2, #31
    8b78:	d50a      	bpl.n	8b90 <_Unwind_VRS_Pop+0x260>
    8b7a:	4628      	mov	r0, r5
    8b7c:	f022 0201 	bic.w	r2, r2, #1
    8b80:	f042 0202 	orr.w	r2, r2, #2
    8b84:	f840 2b48 	str.w	r2, [r0], #72
    8b88:	9301      	str	r3, [sp, #4]
    8b8a:	f000 f829 	bl	8be0 <__gnu_Unwind_Save_VFP_D>
    8b8e:	9b01      	ldr	r3, [sp, #4]
    8b90:	9301      	str	r3, [sp, #4]
    8b92:	ac22      	add	r4, sp, #136	; 0x88
    8b94:	4620      	mov	r0, r4
    8b96:	f000 f823 	bl	8be0 <__gnu_Unwind_Save_VFP_D>
    8b9a:	46b8      	mov	r8, r7
    8b9c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8b9e:	9b01      	ldr	r3, [sp, #4]
    8ba0:	2f00      	cmp	r7, #0
    8ba2:	f47f af6d 	bne.w	8a80 <_Unwind_VRS_Pop+0x150>
    8ba6:	460a      	mov	r2, r1
    8ba8:	e709      	b.n	89be <_Unwind_VRS_Pop+0x8e>
    8baa:	460a      	mov	r2, r1
    8bac:	e78d      	b.n	8aca <_Unwind_VRS_Pop+0x19a>
    8bae:	bf00      	nop

00008bb0 <__restore_core_regs>:
    8bb0:	f100 0134 	add.w	r1, r0, #52	; 0x34
    8bb4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    8bb8:	469c      	mov	ip, r3
    8bba:	46a6      	mov	lr, r4
    8bbc:	f84c 5d04 	str.w	r5, [ip, #-4]!
    8bc0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    8bc4:	46e5      	mov	sp, ip
    8bc6:	bd00      	pop	{pc}

00008bc8 <__gnu_Unwind_Restore_VFP>:
    8bc8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    8bcc:	4770      	bx	lr
    8bce:	bf00      	nop

00008bd0 <__gnu_Unwind_Save_VFP>:
    8bd0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    8bd4:	4770      	bx	lr
    8bd6:	bf00      	nop

00008bd8 <__gnu_Unwind_Restore_VFP_D>:
    8bd8:	ec90 0b20 	vldmia	r0, {d0-d15}
    8bdc:	4770      	bx	lr
    8bde:	bf00      	nop

00008be0 <__gnu_Unwind_Save_VFP_D>:
    8be0:	ec80 0b20 	vstmia	r0, {d0-d15}
    8be4:	4770      	bx	lr
    8be6:	bf00      	nop

00008be8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    8be8:	ecd0 0b20 	vldmia	r0, {d16-d31}
    8bec:	4770      	bx	lr
    8bee:	bf00      	nop

00008bf0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    8bf0:	ecc0 0b20 	vstmia	r0, {d16-d31}
    8bf4:	4770      	bx	lr
    8bf6:	bf00      	nop

00008bf8 <__gnu_Unwind_Restore_WMMXD>:
    8bf8:	ecf0 0102 	ldfe	f0, [r0], #8
    8bfc:	ecf0 1102 	ldfe	f1, [r0], #8
    8c00:	ecf0 2102 	ldfe	f2, [r0], #8
    8c04:	ecf0 3102 	ldfe	f3, [r0], #8
    8c08:	ecf0 4102 	ldfe	f4, [r0], #8
    8c0c:	ecf0 5102 	ldfe	f5, [r0], #8
    8c10:	ecf0 6102 	ldfe	f6, [r0], #8
    8c14:	ecf0 7102 	ldfe	f7, [r0], #8
    8c18:	ecf0 8102 	ldfp	f0, [r0], #8
    8c1c:	ecf0 9102 	ldfp	f1, [r0], #8
    8c20:	ecf0 a102 	ldfp	f2, [r0], #8
    8c24:	ecf0 b102 	ldfp	f3, [r0], #8
    8c28:	ecf0 c102 	ldfp	f4, [r0], #8
    8c2c:	ecf0 d102 	ldfp	f5, [r0], #8
    8c30:	ecf0 e102 	ldfp	f6, [r0], #8
    8c34:	ecf0 f102 	ldfp	f7, [r0], #8
    8c38:	4770      	bx	lr
    8c3a:	bf00      	nop

00008c3c <__gnu_Unwind_Save_WMMXD>:
    8c3c:	ece0 0102 	stfe	f0, [r0], #8
    8c40:	ece0 1102 	stfe	f1, [r0], #8
    8c44:	ece0 2102 	stfe	f2, [r0], #8
    8c48:	ece0 3102 	stfe	f3, [r0], #8
    8c4c:	ece0 4102 	stfe	f4, [r0], #8
    8c50:	ece0 5102 	stfe	f5, [r0], #8
    8c54:	ece0 6102 	stfe	f6, [r0], #8
    8c58:	ece0 7102 	stfe	f7, [r0], #8
    8c5c:	ece0 8102 	stfp	f0, [r0], #8
    8c60:	ece0 9102 	stfp	f1, [r0], #8
    8c64:	ece0 a102 	stfp	f2, [r0], #8
    8c68:	ece0 b102 	stfp	f3, [r0], #8
    8c6c:	ece0 c102 	stfp	f4, [r0], #8
    8c70:	ece0 d102 	stfp	f5, [r0], #8
    8c74:	ece0 e102 	stfp	f6, [r0], #8
    8c78:	ece0 f102 	stfp	f7, [r0], #8
    8c7c:	4770      	bx	lr
    8c7e:	bf00      	nop

00008c80 <__gnu_Unwind_Restore_WMMXC>:
    8c80:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    8c84:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    8c88:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    8c8c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    8c90:	4770      	bx	lr
    8c92:	bf00      	nop

00008c94 <__gnu_Unwind_Save_WMMXC>:
    8c94:	fca0 8101 	stc2	1, cr8, [r0], #4
    8c98:	fca0 9101 	stc2	1, cr9, [r0], #4
    8c9c:	fca0 a101 	stc2	1, cr10, [r0], #4
    8ca0:	fca0 b101 	stc2	1, cr11, [r0], #4
    8ca4:	4770      	bx	lr
    8ca6:	bf00      	nop

00008ca8 <_Unwind_RaiseException>:
    8ca8:	46ec      	mov	ip, sp
    8caa:	b500      	push	{lr}
    8cac:	e92d 5000 	stmdb	sp!, {ip, lr}
    8cb0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8cb4:	f04f 0300 	mov.w	r3, #0
    8cb8:	e92d 000c 	stmdb	sp!, {r2, r3}
    8cbc:	a901      	add	r1, sp, #4
    8cbe:	f7ff fbdd 	bl	847c <__gnu_Unwind_RaiseException>
    8cc2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8cc6:	b012      	add	sp, #72	; 0x48
    8cc8:	4770      	bx	lr
    8cca:	bf00      	nop

00008ccc <_Unwind_Resume>:
    8ccc:	46ec      	mov	ip, sp
    8cce:	b500      	push	{lr}
    8cd0:	e92d 5000 	stmdb	sp!, {ip, lr}
    8cd4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8cd8:	f04f 0300 	mov.w	r3, #0
    8cdc:	e92d 000c 	stmdb	sp!, {r2, r3}
    8ce0:	a901      	add	r1, sp, #4
    8ce2:	f7ff fc05 	bl	84f0 <__gnu_Unwind_Resume>
    8ce6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8cea:	b012      	add	sp, #72	; 0x48
    8cec:	4770      	bx	lr
    8cee:	bf00      	nop

00008cf0 <_Unwind_Resume_or_Rethrow>:
    8cf0:	46ec      	mov	ip, sp
    8cf2:	b500      	push	{lr}
    8cf4:	e92d 5000 	stmdb	sp!, {ip, lr}
    8cf8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8cfc:	f04f 0300 	mov.w	r3, #0
    8d00:	e92d 000c 	stmdb	sp!, {r2, r3}
    8d04:	a901      	add	r1, sp, #4
    8d06:	f7ff fc15 	bl	8534 <__gnu_Unwind_Resume_or_Rethrow>
    8d0a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8d0e:	b012      	add	sp, #72	; 0x48
    8d10:	4770      	bx	lr
    8d12:	bf00      	nop

00008d14 <_Unwind_ForcedUnwind>:
    8d14:	46ec      	mov	ip, sp
    8d16:	b500      	push	{lr}
    8d18:	e92d 5000 	stmdb	sp!, {ip, lr}
    8d1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8d20:	f04f 0300 	mov.w	r3, #0
    8d24:	e92d 000c 	stmdb	sp!, {r2, r3}
    8d28:	ab01      	add	r3, sp, #4
    8d2a:	f7ff fbd7 	bl	84dc <__gnu_Unwind_ForcedUnwind>
    8d2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8d32:	b012      	add	sp, #72	; 0x48
    8d34:	4770      	bx	lr
    8d36:	bf00      	nop

00008d38 <_Unwind_Backtrace>:
    8d38:	46ec      	mov	ip, sp
    8d3a:	b500      	push	{lr}
    8d3c:	e92d 5000 	stmdb	sp!, {ip, lr}
    8d40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8d44:	f04f 0300 	mov.w	r3, #0
    8d48:	e92d 000c 	stmdb	sp!, {r2, r3}
    8d4c:	aa01      	add	r2, sp, #4
    8d4e:	f7ff fc47 	bl	85e0 <__gnu_Unwind_Backtrace>
    8d52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8d56:	b012      	add	sp, #72	; 0x48
    8d58:	4770      	bx	lr
    8d5a:	bf00      	nop

00008d5c <next_unwind_byte>:
    8d5c:	7a02      	ldrb	r2, [r0, #8]
    8d5e:	b982      	cbnz	r2, 8d82 <next_unwind_byte+0x26>
    8d60:	7a43      	ldrb	r3, [r0, #9]
    8d62:	b1ab      	cbz	r3, 8d90 <next_unwind_byte+0x34>
    8d64:	6842      	ldr	r2, [r0, #4]
    8d66:	3b01      	subs	r3, #1
    8d68:	b410      	push	{r4}
    8d6a:	7243      	strb	r3, [r0, #9]
    8d6c:	6813      	ldr	r3, [r2, #0]
    8d6e:	2103      	movs	r1, #3
    8d70:	1d14      	adds	r4, r2, #4
    8d72:	7201      	strb	r1, [r0, #8]
    8d74:	021a      	lsls	r2, r3, #8
    8d76:	6044      	str	r4, [r0, #4]
    8d78:	6002      	str	r2, [r0, #0]
    8d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    8d7e:	0e18      	lsrs	r0, r3, #24
    8d80:	4770      	bx	lr
    8d82:	6803      	ldr	r3, [r0, #0]
    8d84:	3a01      	subs	r2, #1
    8d86:	7202      	strb	r2, [r0, #8]
    8d88:	021a      	lsls	r2, r3, #8
    8d8a:	6002      	str	r2, [r0, #0]
    8d8c:	0e18      	lsrs	r0, r3, #24
    8d8e:	4770      	bx	lr
    8d90:	20b0      	movs	r0, #176	; 0xb0
    8d92:	4770      	bx	lr

00008d94 <_Unwind_GetGR.constprop.0>:
    8d94:	b500      	push	{lr}
    8d96:	b085      	sub	sp, #20
    8d98:	aa03      	add	r2, sp, #12
    8d9a:	2300      	movs	r3, #0
    8d9c:	9200      	str	r2, [sp, #0]
    8d9e:	4619      	mov	r1, r3
    8da0:	220c      	movs	r2, #12
    8da2:	f7ff fbd7 	bl	8554 <_Unwind_VRS_Get>
    8da6:	9803      	ldr	r0, [sp, #12]
    8da8:	b005      	add	sp, #20
    8daa:	f85d fb04 	ldr.w	pc, [sp], #4
    8dae:	bf00      	nop

00008db0 <unwind_UCB_from_context>:
    8db0:	e7f0      	b.n	8d94 <_Unwind_GetGR.constprop.0>
    8db2:	bf00      	nop

00008db4 <__gnu_unwind_execute>:
    8db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8db8:	4605      	mov	r5, r0
    8dba:	b085      	sub	sp, #20
    8dbc:	460e      	mov	r6, r1
    8dbe:	f04f 0800 	mov.w	r8, #0
    8dc2:	4630      	mov	r0, r6
    8dc4:	f7ff ffca 	bl	8d5c <next_unwind_byte>
    8dc8:	28b0      	cmp	r0, #176	; 0xb0
    8dca:	4604      	mov	r4, r0
    8dcc:	f000 80b1 	beq.w	8f32 <__gnu_unwind_execute+0x17e>
    8dd0:	0607      	lsls	r7, r0, #24
    8dd2:	d520      	bpl.n	8e16 <__gnu_unwind_execute+0x62>
    8dd4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    8dd8:	2b80      	cmp	r3, #128	; 0x80
    8dda:	d065      	beq.n	8ea8 <__gnu_unwind_execute+0xf4>
    8ddc:	2b90      	cmp	r3, #144	; 0x90
    8dde:	d036      	beq.n	8e4e <__gnu_unwind_execute+0x9a>
    8de0:	2ba0      	cmp	r3, #160	; 0xa0
    8de2:	d078      	beq.n	8ed6 <__gnu_unwind_execute+0x122>
    8de4:	2bb0      	cmp	r3, #176	; 0xb0
    8de6:	d047      	beq.n	8e78 <__gnu_unwind_execute+0xc4>
    8de8:	2bc0      	cmp	r3, #192	; 0xc0
    8dea:	f000 808a 	beq.w	8f02 <__gnu_unwind_execute+0x14e>
    8dee:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    8df2:	2bd0      	cmp	r3, #208	; 0xd0
    8df4:	d10b      	bne.n	8e0e <__gnu_unwind_execute+0x5a>
    8df6:	f000 0207 	and.w	r2, r0, #7
    8dfa:	3201      	adds	r2, #1
    8dfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8e00:	2305      	movs	r3, #5
    8e02:	2101      	movs	r1, #1
    8e04:	4628      	mov	r0, r5
    8e06:	f7ff fd93 	bl	8930 <_Unwind_VRS_Pop>
    8e0a:	2800      	cmp	r0, #0
    8e0c:	d0d9      	beq.n	8dc2 <__gnu_unwind_execute+0xe>
    8e0e:	2009      	movs	r0, #9
    8e10:	b005      	add	sp, #20
    8e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8e16:	f10d 090c 	add.w	r9, sp, #12
    8e1a:	2300      	movs	r3, #0
    8e1c:	4619      	mov	r1, r3
    8e1e:	0087      	lsls	r7, r0, #2
    8e20:	f8cd 9000 	str.w	r9, [sp]
    8e24:	220d      	movs	r2, #13
    8e26:	4628      	mov	r0, r5
    8e28:	f7ff fb94 	bl	8554 <_Unwind_VRS_Get>
    8e2c:	b2ff      	uxtb	r7, r7
    8e2e:	9b03      	ldr	r3, [sp, #12]
    8e30:	f8cd 9000 	str.w	r9, [sp]
    8e34:	3704      	adds	r7, #4
    8e36:	0660      	lsls	r0, r4, #25
    8e38:	bf4c      	ite	mi
    8e3a:	1bdf      	submi	r7, r3, r7
    8e3c:	18ff      	addpl	r7, r7, r3
    8e3e:	2300      	movs	r3, #0
    8e40:	4619      	mov	r1, r3
    8e42:	220d      	movs	r2, #13
    8e44:	4628      	mov	r0, r5
    8e46:	9703      	str	r7, [sp, #12]
    8e48:	f7ff fba6 	bl	8598 <_Unwind_VRS_Set>
    8e4c:	e7b9      	b.n	8dc2 <__gnu_unwind_execute+0xe>
    8e4e:	f000 030d 	and.w	r3, r0, #13
    8e52:	2b0d      	cmp	r3, #13
    8e54:	d0db      	beq.n	8e0e <__gnu_unwind_execute+0x5a>
    8e56:	af03      	add	r7, sp, #12
    8e58:	2300      	movs	r3, #0
    8e5a:	f000 020f 	and.w	r2, r0, #15
    8e5e:	4619      	mov	r1, r3
    8e60:	9700      	str	r7, [sp, #0]
    8e62:	4628      	mov	r0, r5
    8e64:	f7ff fb76 	bl	8554 <_Unwind_VRS_Get>
    8e68:	2300      	movs	r3, #0
    8e6a:	9700      	str	r7, [sp, #0]
    8e6c:	4619      	mov	r1, r3
    8e6e:	220d      	movs	r2, #13
    8e70:	4628      	mov	r0, r5
    8e72:	f7ff fb91 	bl	8598 <_Unwind_VRS_Set>
    8e76:	e7a4      	b.n	8dc2 <__gnu_unwind_execute+0xe>
    8e78:	28b1      	cmp	r0, #177	; 0xb1
    8e7a:	d05f      	beq.n	8f3c <__gnu_unwind_execute+0x188>
    8e7c:	28b2      	cmp	r0, #178	; 0xb2
    8e7e:	f000 80cc 	beq.w	901a <__gnu_unwind_execute+0x266>
    8e82:	28b3      	cmp	r0, #179	; 0xb3
    8e84:	d07e      	beq.n	8f84 <__gnu_unwind_execute+0x1d0>
    8e86:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    8e8a:	2bb4      	cmp	r3, #180	; 0xb4
    8e8c:	d0bf      	beq.n	8e0e <__gnu_unwind_execute+0x5a>
    8e8e:	f000 0207 	and.w	r2, r0, #7
    8e92:	3201      	adds	r2, #1
    8e94:	2301      	movs	r3, #1
    8e96:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8e9a:	4619      	mov	r1, r3
    8e9c:	4628      	mov	r0, r5
    8e9e:	f7ff fd47 	bl	8930 <_Unwind_VRS_Pop>
    8ea2:	2800      	cmp	r0, #0
    8ea4:	d08d      	beq.n	8dc2 <__gnu_unwind_execute+0xe>
    8ea6:	e7b2      	b.n	8e0e <__gnu_unwind_execute+0x5a>
    8ea8:	4630      	mov	r0, r6
    8eaa:	f7ff ff57 	bl	8d5c <next_unwind_byte>
    8eae:	0224      	lsls	r4, r4, #8
    8eb0:	4304      	orrs	r4, r0
    8eb2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    8eb6:	d0aa      	beq.n	8e0e <__gnu_unwind_execute+0x5a>
    8eb8:	0124      	lsls	r4, r4, #4
    8eba:	2300      	movs	r3, #0
    8ebc:	b2a2      	uxth	r2, r4
    8ebe:	4619      	mov	r1, r3
    8ec0:	4628      	mov	r0, r5
    8ec2:	f7ff fd35 	bl	8930 <_Unwind_VRS_Pop>
    8ec6:	2800      	cmp	r0, #0
    8ec8:	d1a1      	bne.n	8e0e <__gnu_unwind_execute+0x5a>
    8eca:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    8ece:	bf18      	it	ne
    8ed0:	f04f 0801 	movne.w	r8, #1
    8ed4:	e775      	b.n	8dc2 <__gnu_unwind_execute+0xe>
    8ed6:	43c2      	mvns	r2, r0
    8ed8:	f002 0307 	and.w	r3, r2, #7
    8edc:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    8ee0:	411a      	asrs	r2, r3
    8ee2:	0701      	lsls	r1, r0, #28
    8ee4:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    8ee8:	f04f 0300 	mov.w	r3, #0
    8eec:	bf48      	it	mi
    8eee:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    8ef2:	4619      	mov	r1, r3
    8ef4:	4628      	mov	r0, r5
    8ef6:	f7ff fd1b 	bl	8930 <_Unwind_VRS_Pop>
    8efa:	2800      	cmp	r0, #0
    8efc:	f43f af61 	beq.w	8dc2 <__gnu_unwind_execute+0xe>
    8f00:	e785      	b.n	8e0e <__gnu_unwind_execute+0x5a>
    8f02:	28c6      	cmp	r0, #198	; 0xc6
    8f04:	d051      	beq.n	8faa <__gnu_unwind_execute+0x1f6>
    8f06:	28c7      	cmp	r0, #199	; 0xc7
    8f08:	d05a      	beq.n	8fc0 <__gnu_unwind_execute+0x20c>
    8f0a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    8f0e:	2bc0      	cmp	r3, #192	; 0xc0
    8f10:	d069      	beq.n	8fe6 <__gnu_unwind_execute+0x232>
    8f12:	28c8      	cmp	r0, #200	; 0xc8
    8f14:	d075      	beq.n	9002 <__gnu_unwind_execute+0x24e>
    8f16:	28c9      	cmp	r0, #201	; 0xc9
    8f18:	f47f af79 	bne.w	8e0e <__gnu_unwind_execute+0x5a>
    8f1c:	4630      	mov	r0, r6
    8f1e:	f7ff ff1d 	bl	8d5c <next_unwind_byte>
    8f22:	0302      	lsls	r2, r0, #12
    8f24:	f000 000f 	and.w	r0, r0, #15
    8f28:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    8f2c:	3001      	adds	r0, #1
    8f2e:	4302      	orrs	r2, r0
    8f30:	e766      	b.n	8e00 <__gnu_unwind_execute+0x4c>
    8f32:	f1b8 0f00 	cmp.w	r8, #0
    8f36:	d014      	beq.n	8f62 <__gnu_unwind_execute+0x1ae>
    8f38:	2000      	movs	r0, #0
    8f3a:	e769      	b.n	8e10 <__gnu_unwind_execute+0x5c>
    8f3c:	4630      	mov	r0, r6
    8f3e:	f7ff ff0d 	bl	8d5c <next_unwind_byte>
    8f42:	2800      	cmp	r0, #0
    8f44:	f43f af63 	beq.w	8e0e <__gnu_unwind_execute+0x5a>
    8f48:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8f4c:	f47f af5f 	bne.w	8e0e <__gnu_unwind_execute+0x5a>
    8f50:	4602      	mov	r2, r0
    8f52:	4619      	mov	r1, r3
    8f54:	4628      	mov	r0, r5
    8f56:	f7ff fceb 	bl	8930 <_Unwind_VRS_Pop>
    8f5a:	2800      	cmp	r0, #0
    8f5c:	f43f af31 	beq.w	8dc2 <__gnu_unwind_execute+0xe>
    8f60:	e755      	b.n	8e0e <__gnu_unwind_execute+0x5a>
    8f62:	ac03      	add	r4, sp, #12
    8f64:	4643      	mov	r3, r8
    8f66:	220e      	movs	r2, #14
    8f68:	4641      	mov	r1, r8
    8f6a:	9400      	str	r4, [sp, #0]
    8f6c:	4628      	mov	r0, r5
    8f6e:	f7ff faf1 	bl	8554 <_Unwind_VRS_Get>
    8f72:	9400      	str	r4, [sp, #0]
    8f74:	4628      	mov	r0, r5
    8f76:	4643      	mov	r3, r8
    8f78:	220f      	movs	r2, #15
    8f7a:	4641      	mov	r1, r8
    8f7c:	f7ff fb0c 	bl	8598 <_Unwind_VRS_Set>
    8f80:	4640      	mov	r0, r8
    8f82:	e745      	b.n	8e10 <__gnu_unwind_execute+0x5c>
    8f84:	4630      	mov	r0, r6
    8f86:	f7ff fee9 	bl	8d5c <next_unwind_byte>
    8f8a:	0301      	lsls	r1, r0, #12
    8f8c:	f000 000f 	and.w	r0, r0, #15
    8f90:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8f94:	1c42      	adds	r2, r0, #1
    8f96:	2301      	movs	r3, #1
    8f98:	430a      	orrs	r2, r1
    8f9a:	4628      	mov	r0, r5
    8f9c:	4619      	mov	r1, r3
    8f9e:	f7ff fcc7 	bl	8930 <_Unwind_VRS_Pop>
    8fa2:	2800      	cmp	r0, #0
    8fa4:	f43f af0d 	beq.w	8dc2 <__gnu_unwind_execute+0xe>
    8fa8:	e731      	b.n	8e0e <__gnu_unwind_execute+0x5a>
    8faa:	4630      	mov	r0, r6
    8fac:	f7ff fed6 	bl	8d5c <next_unwind_byte>
    8fb0:	0301      	lsls	r1, r0, #12
    8fb2:	f000 000f 	and.w	r0, r0, #15
    8fb6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8fba:	1c42      	adds	r2, r0, #1
    8fbc:	2303      	movs	r3, #3
    8fbe:	e7eb      	b.n	8f98 <__gnu_unwind_execute+0x1e4>
    8fc0:	4630      	mov	r0, r6
    8fc2:	f7ff fecb 	bl	8d5c <next_unwind_byte>
    8fc6:	4602      	mov	r2, r0
    8fc8:	2800      	cmp	r0, #0
    8fca:	f43f af20 	beq.w	8e0e <__gnu_unwind_execute+0x5a>
    8fce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8fd2:	f47f af1c 	bne.w	8e0e <__gnu_unwind_execute+0x5a>
    8fd6:	2104      	movs	r1, #4
    8fd8:	4628      	mov	r0, r5
    8fda:	f7ff fca9 	bl	8930 <_Unwind_VRS_Pop>
    8fde:	2800      	cmp	r0, #0
    8fe0:	f43f aeef 	beq.w	8dc2 <__gnu_unwind_execute+0xe>
    8fe4:	e713      	b.n	8e0e <__gnu_unwind_execute+0x5a>
    8fe6:	f000 020f 	and.w	r2, r0, #15
    8fea:	3201      	adds	r2, #1
    8fec:	2303      	movs	r3, #3
    8fee:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    8ff2:	4619      	mov	r1, r3
    8ff4:	4628      	mov	r0, r5
    8ff6:	f7ff fc9b 	bl	8930 <_Unwind_VRS_Pop>
    8ffa:	2800      	cmp	r0, #0
    8ffc:	f43f aee1 	beq.w	8dc2 <__gnu_unwind_execute+0xe>
    9000:	e705      	b.n	8e0e <__gnu_unwind_execute+0x5a>
    9002:	4630      	mov	r0, r6
    9004:	f7ff feaa 	bl	8d5c <next_unwind_byte>
    9008:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    900c:	f000 030f 	and.w	r3, r0, #15
    9010:	3210      	adds	r2, #16
    9012:	3301      	adds	r3, #1
    9014:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    9018:	e6f2      	b.n	8e00 <__gnu_unwind_execute+0x4c>
    901a:	2300      	movs	r3, #0
    901c:	f10d 090c 	add.w	r9, sp, #12
    9020:	220d      	movs	r2, #13
    9022:	4619      	mov	r1, r3
    9024:	f8cd 9000 	str.w	r9, [sp]
    9028:	4628      	mov	r0, r5
    902a:	f7ff fa93 	bl	8554 <_Unwind_VRS_Get>
    902e:	4630      	mov	r0, r6
    9030:	f7ff fe94 	bl	8d5c <next_unwind_byte>
    9034:	0602      	lsls	r2, r0, #24
    9036:	f04f 0702 	mov.w	r7, #2
    903a:	d50c      	bpl.n	9056 <__gnu_unwind_execute+0x2a2>
    903c:	9b03      	ldr	r3, [sp, #12]
    903e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    9042:	40b8      	lsls	r0, r7
    9044:	4403      	add	r3, r0
    9046:	4630      	mov	r0, r6
    9048:	9303      	str	r3, [sp, #12]
    904a:	f7ff fe87 	bl	8d5c <next_unwind_byte>
    904e:	0603      	lsls	r3, r0, #24
    9050:	f107 0707 	add.w	r7, r7, #7
    9054:	d4f2      	bmi.n	903c <__gnu_unwind_execute+0x288>
    9056:	9b03      	ldr	r3, [sp, #12]
    9058:	f8cd 9000 	str.w	r9, [sp]
    905c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    9060:	f503 7201 	add.w	r2, r3, #516	; 0x204
    9064:	40bc      	lsls	r4, r7
    9066:	2300      	movs	r3, #0
    9068:	4414      	add	r4, r2
    906a:	4619      	mov	r1, r3
    906c:	220d      	movs	r2, #13
    906e:	4628      	mov	r0, r5
    9070:	9403      	str	r4, [sp, #12]
    9072:	f7ff fa91 	bl	8598 <_Unwind_VRS_Set>
    9076:	e6a4      	b.n	8dc2 <__gnu_unwind_execute+0xe>

00009078 <__gnu_unwind_frame>:
    9078:	b510      	push	{r4, lr}
    907a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    907c:	b084      	sub	sp, #16
    907e:	685a      	ldr	r2, [r3, #4]
    9080:	2003      	movs	r0, #3
    9082:	f88d 000c 	strb.w	r0, [sp, #12]
    9086:	79dc      	ldrb	r4, [r3, #7]
    9088:	f88d 400d 	strb.w	r4, [sp, #13]
    908c:	0212      	lsls	r2, r2, #8
    908e:	3308      	adds	r3, #8
    9090:	4608      	mov	r0, r1
    9092:	a901      	add	r1, sp, #4
    9094:	9201      	str	r2, [sp, #4]
    9096:	9302      	str	r3, [sp, #8]
    9098:	f7ff fe8c 	bl	8db4 <__gnu_unwind_execute>
    909c:	b004      	add	sp, #16
    909e:	bd10      	pop	{r4, pc}

000090a0 <_Unwind_GetRegionStart>:
    90a0:	b508      	push	{r3, lr}
    90a2:	f7ff fe85 	bl	8db0 <unwind_UCB_from_context>
    90a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
    90a8:	bd08      	pop	{r3, pc}
    90aa:	bf00      	nop

000090ac <_Unwind_GetLanguageSpecificData>:
    90ac:	b508      	push	{r3, lr}
    90ae:	f7ff fe7f 	bl	8db0 <unwind_UCB_from_context>
    90b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    90b4:	79c3      	ldrb	r3, [r0, #7]
    90b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    90ba:	3008      	adds	r0, #8
    90bc:	bd08      	pop	{r3, pc}
    90be:	bf00      	nop

000090c0 <_Unwind_GetDataRelBase>:
    90c0:	b508      	push	{r3, lr}
    90c2:	f000 f807 	bl	90d4 <abort>
    90c6:	bf00      	nop

000090c8 <_Unwind_GetTextRelBase>:
    90c8:	b508      	push	{r3, lr}
    90ca:	f7ff fff9 	bl	90c0 <_Unwind_GetDataRelBase>
    90ce:	bf00      	nop

000090d0 <__aeabi_idiv0>:
    90d0:	4770      	bx	lr
    90d2:	bf00      	nop

000090d4 <abort>:
    90d4:	b508      	push	{r3, lr}
    90d6:	2006      	movs	r0, #6
    90d8:	f000 f92c 	bl	9334 <raise>
    90dc:	2001      	movs	r0, #1
    90de:	f7fc f87b 	bl	51d8 <_exit>
    90e2:	Address 0x00000000000090e2 is out of bounds.


000090e4 <__libc_init_array>:
    90e4:	b570      	push	{r4, r5, r6, lr}
    90e6:	4e0d      	ldr	r6, [pc, #52]	; (911c <__libc_init_array+0x38>)
    90e8:	4c0d      	ldr	r4, [pc, #52]	; (9120 <__libc_init_array+0x3c>)
    90ea:	1ba4      	subs	r4, r4, r6
    90ec:	10a4      	asrs	r4, r4, #2
    90ee:	2500      	movs	r5, #0
    90f0:	42a5      	cmp	r5, r4
    90f2:	d109      	bne.n	9108 <__libc_init_array+0x24>
    90f4:	4e0b      	ldr	r6, [pc, #44]	; (9124 <__libc_init_array+0x40>)
    90f6:	4c0c      	ldr	r4, [pc, #48]	; (9128 <__libc_init_array+0x44>)
    90f8:	f7f7 f902 	bl	300 <_init>
    90fc:	1ba4      	subs	r4, r4, r6
    90fe:	10a4      	asrs	r4, r4, #2
    9100:	2500      	movs	r5, #0
    9102:	42a5      	cmp	r5, r4
    9104:	d105      	bne.n	9112 <__libc_init_array+0x2e>
    9106:	bd70      	pop	{r4, r5, r6, pc}
    9108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    910c:	4798      	blx	r3
    910e:	3501      	adds	r5, #1
    9110:	e7ee      	b.n	90f0 <__libc_init_array+0xc>
    9112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    9116:	4798      	blx	r3
    9118:	3501      	adds	r5, #1
    911a:	e7f2      	b.n	9102 <__libc_init_array+0x1e>
    911c:	0000030c 	.word	0x0000030c
    9120:	0000030c 	.word	0x0000030c
    9124:	0000030c 	.word	0x0000030c
    9128:	0000031c 	.word	0x0000031c

0000912c <malloc>:
    912c:	4b02      	ldr	r3, [pc, #8]	; (9138 <malloc+0xc>)
    912e:	4601      	mov	r1, r0
    9130:	6818      	ldr	r0, [r3, #0]
    9132:	f000 b86d 	b.w	9210 <_malloc_r>
    9136:	bf00      	nop
    9138:	10000094 	.word	0x10000094

0000913c <free>:
    913c:	4b02      	ldr	r3, [pc, #8]	; (9148 <free+0xc>)
    913e:	4601      	mov	r1, r0
    9140:	6818      	ldr	r0, [r3, #0]
    9142:	f000 b817 	b.w	9174 <_free_r>
    9146:	bf00      	nop
    9148:	10000094 	.word	0x10000094

0000914c <memcpy>:
    914c:	b510      	push	{r4, lr}
    914e:	1e43      	subs	r3, r0, #1
    9150:	440a      	add	r2, r1
    9152:	4291      	cmp	r1, r2
    9154:	d100      	bne.n	9158 <memcpy+0xc>
    9156:	bd10      	pop	{r4, pc}
    9158:	f811 4b01 	ldrb.w	r4, [r1], #1
    915c:	f803 4f01 	strb.w	r4, [r3, #1]!
    9160:	e7f7      	b.n	9152 <memcpy+0x6>

00009162 <memset>:
    9162:	4402      	add	r2, r0
    9164:	4603      	mov	r3, r0
    9166:	4293      	cmp	r3, r2
    9168:	d100      	bne.n	916c <memset+0xa>
    916a:	4770      	bx	lr
    916c:	f803 1b01 	strb.w	r1, [r3], #1
    9170:	e7f9      	b.n	9166 <memset+0x4>
    9172:	Address 0x0000000000009172 is out of bounds.


00009174 <_free_r>:
    9174:	b538      	push	{r3, r4, r5, lr}
    9176:	4605      	mov	r5, r0
    9178:	2900      	cmp	r1, #0
    917a:	d045      	beq.n	9208 <_free_r+0x94>
    917c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9180:	1f0c      	subs	r4, r1, #4
    9182:	2b00      	cmp	r3, #0
    9184:	bfb8      	it	lt
    9186:	18e4      	addlt	r4, r4, r3
    9188:	f000 f8f8 	bl	937c <__malloc_lock>
    918c:	4a1f      	ldr	r2, [pc, #124]	; (920c <_free_r+0x98>)
    918e:	6813      	ldr	r3, [r2, #0]
    9190:	4610      	mov	r0, r2
    9192:	b933      	cbnz	r3, 91a2 <_free_r+0x2e>
    9194:	6063      	str	r3, [r4, #4]
    9196:	6014      	str	r4, [r2, #0]
    9198:	4628      	mov	r0, r5
    919a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    919e:	f000 b8ee 	b.w	937e <__malloc_unlock>
    91a2:	42a3      	cmp	r3, r4
    91a4:	d90c      	bls.n	91c0 <_free_r+0x4c>
    91a6:	6821      	ldr	r1, [r4, #0]
    91a8:	1862      	adds	r2, r4, r1
    91aa:	4293      	cmp	r3, r2
    91ac:	bf04      	itt	eq
    91ae:	681a      	ldreq	r2, [r3, #0]
    91b0:	685b      	ldreq	r3, [r3, #4]
    91b2:	6063      	str	r3, [r4, #4]
    91b4:	bf04      	itt	eq
    91b6:	1852      	addeq	r2, r2, r1
    91b8:	6022      	streq	r2, [r4, #0]
    91ba:	6004      	str	r4, [r0, #0]
    91bc:	e7ec      	b.n	9198 <_free_r+0x24>
    91be:	4613      	mov	r3, r2
    91c0:	685a      	ldr	r2, [r3, #4]
    91c2:	b10a      	cbz	r2, 91c8 <_free_r+0x54>
    91c4:	42a2      	cmp	r2, r4
    91c6:	d9fa      	bls.n	91be <_free_r+0x4a>
    91c8:	6819      	ldr	r1, [r3, #0]
    91ca:	1858      	adds	r0, r3, r1
    91cc:	42a0      	cmp	r0, r4
    91ce:	d10b      	bne.n	91e8 <_free_r+0x74>
    91d0:	6820      	ldr	r0, [r4, #0]
    91d2:	4401      	add	r1, r0
    91d4:	1858      	adds	r0, r3, r1
    91d6:	4282      	cmp	r2, r0
    91d8:	6019      	str	r1, [r3, #0]
    91da:	d1dd      	bne.n	9198 <_free_r+0x24>
    91dc:	6810      	ldr	r0, [r2, #0]
    91de:	6852      	ldr	r2, [r2, #4]
    91e0:	605a      	str	r2, [r3, #4]
    91e2:	4401      	add	r1, r0
    91e4:	6019      	str	r1, [r3, #0]
    91e6:	e7d7      	b.n	9198 <_free_r+0x24>
    91e8:	d902      	bls.n	91f0 <_free_r+0x7c>
    91ea:	230c      	movs	r3, #12
    91ec:	602b      	str	r3, [r5, #0]
    91ee:	e7d3      	b.n	9198 <_free_r+0x24>
    91f0:	6820      	ldr	r0, [r4, #0]
    91f2:	1821      	adds	r1, r4, r0
    91f4:	428a      	cmp	r2, r1
    91f6:	bf04      	itt	eq
    91f8:	6811      	ldreq	r1, [r2, #0]
    91fa:	6852      	ldreq	r2, [r2, #4]
    91fc:	6062      	str	r2, [r4, #4]
    91fe:	bf04      	itt	eq
    9200:	1809      	addeq	r1, r1, r0
    9202:	6021      	streq	r1, [r4, #0]
    9204:	605c      	str	r4, [r3, #4]
    9206:	e7c7      	b.n	9198 <_free_r+0x24>
    9208:	bd38      	pop	{r3, r4, r5, pc}
    920a:	bf00      	nop
    920c:	10000ee0 	.word	0x10000ee0

00009210 <_malloc_r>:
    9210:	b570      	push	{r4, r5, r6, lr}
    9212:	1ccd      	adds	r5, r1, #3
    9214:	f025 0503 	bic.w	r5, r5, #3
    9218:	3508      	adds	r5, #8
    921a:	2d0c      	cmp	r5, #12
    921c:	bf38      	it	cc
    921e:	250c      	movcc	r5, #12
    9220:	2d00      	cmp	r5, #0
    9222:	4606      	mov	r6, r0
    9224:	db01      	blt.n	922a <_malloc_r+0x1a>
    9226:	42a9      	cmp	r1, r5
    9228:	d903      	bls.n	9232 <_malloc_r+0x22>
    922a:	230c      	movs	r3, #12
    922c:	6033      	str	r3, [r6, #0]
    922e:	2000      	movs	r0, #0
    9230:	bd70      	pop	{r4, r5, r6, pc}
    9232:	f000 f8a3 	bl	937c <__malloc_lock>
    9236:	4a21      	ldr	r2, [pc, #132]	; (92bc <_malloc_r+0xac>)
    9238:	6814      	ldr	r4, [r2, #0]
    923a:	4621      	mov	r1, r4
    923c:	b991      	cbnz	r1, 9264 <_malloc_r+0x54>
    923e:	4c20      	ldr	r4, [pc, #128]	; (92c0 <_malloc_r+0xb0>)
    9240:	6823      	ldr	r3, [r4, #0]
    9242:	b91b      	cbnz	r3, 924c <_malloc_r+0x3c>
    9244:	4630      	mov	r0, r6
    9246:	f000 f83d 	bl	92c4 <_sbrk_r>
    924a:	6020      	str	r0, [r4, #0]
    924c:	4629      	mov	r1, r5
    924e:	4630      	mov	r0, r6
    9250:	f000 f838 	bl	92c4 <_sbrk_r>
    9254:	1c43      	adds	r3, r0, #1
    9256:	d124      	bne.n	92a2 <_malloc_r+0x92>
    9258:	230c      	movs	r3, #12
    925a:	6033      	str	r3, [r6, #0]
    925c:	4630      	mov	r0, r6
    925e:	f000 f88e 	bl	937e <__malloc_unlock>
    9262:	e7e4      	b.n	922e <_malloc_r+0x1e>
    9264:	680b      	ldr	r3, [r1, #0]
    9266:	1b5b      	subs	r3, r3, r5
    9268:	d418      	bmi.n	929c <_malloc_r+0x8c>
    926a:	2b0b      	cmp	r3, #11
    926c:	d90f      	bls.n	928e <_malloc_r+0x7e>
    926e:	600b      	str	r3, [r1, #0]
    9270:	50cd      	str	r5, [r1, r3]
    9272:	18cc      	adds	r4, r1, r3
    9274:	4630      	mov	r0, r6
    9276:	f000 f882 	bl	937e <__malloc_unlock>
    927a:	f104 000b 	add.w	r0, r4, #11
    927e:	1d23      	adds	r3, r4, #4
    9280:	f020 0007 	bic.w	r0, r0, #7
    9284:	1ac3      	subs	r3, r0, r3
    9286:	d0d3      	beq.n	9230 <_malloc_r+0x20>
    9288:	425a      	negs	r2, r3
    928a:	50e2      	str	r2, [r4, r3]
    928c:	e7d0      	b.n	9230 <_malloc_r+0x20>
    928e:	428c      	cmp	r4, r1
    9290:	684b      	ldr	r3, [r1, #4]
    9292:	bf16      	itet	ne
    9294:	6063      	strne	r3, [r4, #4]
    9296:	6013      	streq	r3, [r2, #0]
    9298:	460c      	movne	r4, r1
    929a:	e7eb      	b.n	9274 <_malloc_r+0x64>
    929c:	460c      	mov	r4, r1
    929e:	6849      	ldr	r1, [r1, #4]
    92a0:	e7cc      	b.n	923c <_malloc_r+0x2c>
    92a2:	1cc4      	adds	r4, r0, #3
    92a4:	f024 0403 	bic.w	r4, r4, #3
    92a8:	42a0      	cmp	r0, r4
    92aa:	d005      	beq.n	92b8 <_malloc_r+0xa8>
    92ac:	1a21      	subs	r1, r4, r0
    92ae:	4630      	mov	r0, r6
    92b0:	f000 f808 	bl	92c4 <_sbrk_r>
    92b4:	3001      	adds	r0, #1
    92b6:	d0cf      	beq.n	9258 <_malloc_r+0x48>
    92b8:	6025      	str	r5, [r4, #0]
    92ba:	e7db      	b.n	9274 <_malloc_r+0x64>
    92bc:	10000ee0 	.word	0x10000ee0
    92c0:	10000ee4 	.word	0x10000ee4

000092c4 <_sbrk_r>:
    92c4:	b538      	push	{r3, r4, r5, lr}
    92c6:	4c06      	ldr	r4, [pc, #24]	; (92e0 <_sbrk_r+0x1c>)
    92c8:	2300      	movs	r3, #0
    92ca:	4605      	mov	r5, r0
    92cc:	4608      	mov	r0, r1
    92ce:	6023      	str	r3, [r4, #0]
    92d0:	f7fb ff24 	bl	511c <_sbrk>
    92d4:	1c43      	adds	r3, r0, #1
    92d6:	d102      	bne.n	92de <_sbrk_r+0x1a>
    92d8:	6823      	ldr	r3, [r4, #0]
    92da:	b103      	cbz	r3, 92de <_sbrk_r+0x1a>
    92dc:	602b      	str	r3, [r5, #0]
    92de:	bd38      	pop	{r3, r4, r5, pc}
    92e0:	10000f38 	.word	0x10000f38

000092e4 <_raise_r>:
    92e4:	291f      	cmp	r1, #31
    92e6:	b538      	push	{r3, r4, r5, lr}
    92e8:	4604      	mov	r4, r0
    92ea:	460d      	mov	r5, r1
    92ec:	d904      	bls.n	92f8 <_raise_r+0x14>
    92ee:	2316      	movs	r3, #22
    92f0:	6003      	str	r3, [r0, #0]
    92f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    92f6:	bd38      	pop	{r3, r4, r5, pc}
    92f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    92fa:	b112      	cbz	r2, 9302 <_raise_r+0x1e>
    92fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9300:	b94b      	cbnz	r3, 9316 <_raise_r+0x32>
    9302:	4620      	mov	r0, r4
    9304:	f000 f830 	bl	9368 <_getpid_r>
    9308:	462a      	mov	r2, r5
    930a:	4601      	mov	r1, r0
    930c:	4620      	mov	r0, r4
    930e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9312:	f000 b817 	b.w	9344 <_kill_r>
    9316:	2b01      	cmp	r3, #1
    9318:	d00a      	beq.n	9330 <_raise_r+0x4c>
    931a:	1c59      	adds	r1, r3, #1
    931c:	d103      	bne.n	9326 <_raise_r+0x42>
    931e:	2316      	movs	r3, #22
    9320:	6003      	str	r3, [r0, #0]
    9322:	2001      	movs	r0, #1
    9324:	e7e7      	b.n	92f6 <_raise_r+0x12>
    9326:	2400      	movs	r4, #0
    9328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    932c:	4628      	mov	r0, r5
    932e:	4798      	blx	r3
    9330:	2000      	movs	r0, #0
    9332:	e7e0      	b.n	92f6 <_raise_r+0x12>

00009334 <raise>:
    9334:	4b02      	ldr	r3, [pc, #8]	; (9340 <raise+0xc>)
    9336:	4601      	mov	r1, r0
    9338:	6818      	ldr	r0, [r3, #0]
    933a:	f7ff bfd3 	b.w	92e4 <_raise_r>
    933e:	bf00      	nop
    9340:	10000094 	.word	0x10000094

00009344 <_kill_r>:
    9344:	b538      	push	{r3, r4, r5, lr}
    9346:	4c07      	ldr	r4, [pc, #28]	; (9364 <_kill_r+0x20>)
    9348:	2300      	movs	r3, #0
    934a:	4605      	mov	r5, r0
    934c:	4608      	mov	r0, r1
    934e:	4611      	mov	r1, r2
    9350:	6023      	str	r3, [r4, #0]
    9352:	f7fb fed5 	bl	5100 <_kill>
    9356:	1c43      	adds	r3, r0, #1
    9358:	d102      	bne.n	9360 <_kill_r+0x1c>
    935a:	6823      	ldr	r3, [r4, #0]
    935c:	b103      	cbz	r3, 9360 <_kill_r+0x1c>
    935e:	602b      	str	r3, [r5, #0]
    9360:	bd38      	pop	{r3, r4, r5, pc}
    9362:	bf00      	nop
    9364:	10000f38 	.word	0x10000f38

00009368 <_getpid_r>:
    9368:	f7fb bec2 	b.w	50f0 <_getpid>

0000936c <strlen>:
    936c:	4603      	mov	r3, r0
    936e:	f813 2b01 	ldrb.w	r2, [r3], #1
    9372:	2a00      	cmp	r2, #0
    9374:	d1fb      	bne.n	936e <strlen+0x2>
    9376:	1a18      	subs	r0, r3, r0
    9378:	3801      	subs	r0, #1
    937a:	4770      	bx	lr

0000937c <__malloc_lock>:
    937c:	4770      	bx	lr

0000937e <__malloc_unlock>:
    937e:	4770      	bx	lr

00009380 <sjsu::lpc40xx::Pin::kFunction>:
    9380:	0300 ffff                                   ....

00009384 <sjsu::lpc40xx::Pin::kResistor>:
    9384:	0203 ffff                                   ....

00009388 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    9388:	0107 ffff                                   ....

0000938c <sjsu::lpc40xx::Pin::kOpenDrain>:
    938c:	010a ffff 6e69 6176 696c 0064 7061 6c70     ....invalid.appl
    939c:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    93ac:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    93bc:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    93cc:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    93dc:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    93ec:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    93fc:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    940c:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    941c:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    942c:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    943c:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    944c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    945c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    946c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    947c:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    948c:	2067 6163 6c6c 6465 002e 0000 5b1b 3534     g called.....[45
    949c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    94ac:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    94bc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    94cc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    94dc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    94ec:	6574 3a64 2820 6570 6972 6870 7265 6c61     ted: (peripheral
    94fc:	645f 7669 6469 7265 3c20 203d 2934 200a     _divider <= 4). 
    950c:	2020 2020 2020 2020 4420 7669 6469 7265              Divider
    951c:	6d20 7375 6e74 7427 6520 6378 6565 2064      mustn't exceed 
    952c:	3233 5b1b 6d30 5b1b 6d30 000a 500a 6972     32.[0m.[0m...Pri
    953c:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
    954c:	3a65 000a 5b1b 3534 206d 2020 5245 4f52     e:...[45m   ERRO
    955c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    956c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    957c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    958c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    959c:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    95ac:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    95bc:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    95cc:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    95dc:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    95ec:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    95fc:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    960c:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    961c:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    962c:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    963c:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    964c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    965c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    966c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    967c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    968c:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    969c:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    96ac:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    96bc:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    96cc:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    96dc:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3534     [0m.[0m......[45
    96ec:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    96fc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    970c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    971c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    972c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    973c:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
    974c:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
    975c:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
    976c:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
    977c:	305b 0a6d 0000 0000 5b1b 3334 206d 4157     [0m......[43m WA
    978c:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    979c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    97ac:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    97bc:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    97cc:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    97dc:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    97ec:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    97fc:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
    980c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    981c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    982c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    983c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    984c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    985c:	2820 2031 3d3c 6320 6168 6e6e 6c65 2e5f      (1 <= channel_.
    986c:	6863 6e61 656e 206c 2626 6320 6168 6e6e     channel && chann
    987c:	6c65 2e5f 6863 6e61 656e 206c 3d3c 3620     el_.channel <= 6
    988c:	0a29 2020 2020 2020 2020 2020 6843 6e61     ).          Chan
    989c:	656e 206c 756d 7473 6220 2065 6562 7774     nel must be betw
    98ac:	6565 206e 2031 6e61 2064 2036 6e6f 4c20     een 1 and 6 on L
    98bc:	4350 3034 7878 7020 616c 6674 726f 736d     PC40xx platforms
    98cc:	1b2e 305b 1b6d 305b 0a6d 0000 5b1b 3534     ..[0m.[0m....[45
    98dc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    98ec:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    98fc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    990c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    991c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    992c:	6574 3a64 2820 2e30 6630 3c20 203d 7564     ted: (0.0f <= du
    993c:	7974 635f 6379 656c 2620 2026 7564 7974     ty_cycle && duty
    994c:	635f 6379 656c 3c20 203d 2e31 6630 0a29     _cycle <= 1.0f).
    995c:	2020 2020 2020 2020 2020 7564 7974 635f               duty_c
    996c:	6379 656c 6f20 2066 7544 7974 4320 6379     ycle of Duty Cyc
    997c:	656c 7020 6f72 6976 6564 2064 7369 6f20     le provided is o
    998c:	7475 6f20 2066 6f62 6e75 7364 203a 6625     ut of bounds: %f
    999c:	1b2e 305b 1b6d 305b 0a6d 0000 5b1b 3534     ..[0m.[0m....[45
    99ac:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    99bc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    99cc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    99dc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    99ec:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    99fc:	6574 3a64 2820 7266 7165 6575 636e 5f79     ted: (frequency_
    9a0c:	7a68 2120 203d 5f30 7a48 0a29 2020 2020     hz != 0_Hz).    
    9a1c:	2020 2020 2020 7750 206d 7246 7165 6575           Pwm Freque
    9a2c:	636e 2079 6163 6e6e 746f 6220 2065 657a     ncy cannot be ze
    9a3c:	6f72 4820 2e7a 5b1b 6d30 5b1b 6d30 000a     ro Hz..[0m.[0m..
    9a4c:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    9a5c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    9a6c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    9a7c:	333b 6d37 6175 7472 6920 696e 6974 6c61     ;37muart initial
    9a8c:	7a69 6465 5b1b 6d30 000a 0000 6461 2063     ized.[0m....adc 
    9a9c:	6425 5220 6165 2064 6625 6620 726f 6620     %d Read %f for f
    9aac:	6e69 6567 2072 6425 000a 0000 0002 0000     inger %d........
    9abc:	0003 0000 0004 0000 0005 0000 5b1b 3234     .............[42
    9acc:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    9adc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    9aec:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    9afc:	696c 656e 7261 615f 7463 6175 6f74 2572     linear_actuator%
    9b0c:	2064 6e69 7469 6169 696c 657a 1b64 305b     d initialized.[0
    9b1c:	0a6d 0000 5b1b 3234 206d 2020 4920 464e     m....[42m    INF
    9b2c:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    9b3c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9b4c:	1b20 305b 333b 6d37 6461 2063 6863 6e61      .[0;37madc chan
    9b5c:	656e 736c 6920 696e 6974 6c61 7a69 6465     nels initialized
    9b6c:	5b1b 6d30 000a 0000 0000 4000 6666 4006     .[0m.......@ff.@
    9b7c:	cccd 400c 999a 4019 6175 7472 745f 7361     ...@...@uart_tas
    9b8c:	006b 0000 696c 656e 7261 6120 7463 6175     k...linear actua
    9b9c:	6f74 2072 6e61 2064 7563 7272 6e65 2074     tor and current 
    9bac:	6573 736e 726f 7420 7361 006b               sensor task.

00009bb8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    9bb8:	0000 4140                                   ..@A

00009bbc <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    9bbc:	ff0c ffff                                   ....

00009bc0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    9bc0:	0000 4140                                   ..@A

00009bc4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    9bc4:	0100 ffff                                   ....

00009bc8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    9bc8:	0100 ffff                                   ....

00009bcc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    9bcc:	0500 ffff                                   ....

00009bd0 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    9bd0:	0108 ffff                                   ....

00009bd4 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    9bd4:	0208 ffff                                   ....

00009bd8 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    9bd8:	0208 ffff                                   ....

00009bdc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    9bdc:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9bec:	2e72 7068 0070 ffff                         r.hpp...

00009bf4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9bf4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9c04:	2e72 7068 0070 ffff                         r.hpp...

00009c0c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9c0c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9c1c:	2e72 7068 0070 ffff                         r.hpp...

00009c24 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    9c24:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9c34:	2e72 7068 0070 ffff                         r.hpp...

00009c3c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    9c3c:	9e94 0000 0802 0000                         ........

00009c44 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    9c44:	9e94 0000 0902 0000                         ........

00009c4c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    9c4c:	9e94 0000 1c04 0000                         ........

00009c54 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    9c54:	9e94 0000 1d04 0000                         ........

00009c5c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    9c5c:	9e94 0000 1d01 0000                         ........

00009c64 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    9c64:	9e94 0000 0902 0000                         ........

00009c6c <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    9c6c:	0800 ffff                                   ....

00009c70 <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    9c70:	0808 ffff                                   ....

00009c74 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    9c74:	0110 ffff                                   ....

00009c78 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    9c78:	0115 ffff                                   ....

00009c7c <sjsu::lpc40xx::Adc::Control::kStartCode>:
    9c7c:	0318 ffff                                   ....

00009c80 <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    9c80:	0c04 ffff                                   ....

00009c84 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    9c84:	011f ffff                                   ....

00009c88 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    9c88:	9e94 0000 1900 0000                         ........

00009c90 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel3>:
    9c90:	9e94 0000 1a00 0000                         ........

00009c98 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4>:
    9c98:	9e94 0000 1e01 0000                         ........

00009ca0 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5>:
    9ca0:	9e94 0000 1f01 0000                         ........

00009ca8 <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    9ca8:	9c88 0000 000a 0000                         ........

00009cb0 <sjsu::lpc40xx::Adc::Channel::kChannel3>:
    9cb0:	9c90 0000 000b 0000                         ........

00009cb8 <sjsu::lpc40xx::Adc::Channel::kChannel4>:
    9cb8:	9c98 0000 001c 0000                         ........

00009cc0 <sjsu::lpc40xx::Adc::Channel::kChannel5>:
    9cc0:	9ca0 0000 001d 0000                         ........

00009cc8 <sjsu::lpc40xx::Adc::kClockFrequency>:
    9cc8:	2400 4974                                   .$tI

00009ccc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    9ccc:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

00009cdc <sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset>:
    9cdc:	0101 ffff                                   ....

00009ce0 <sjsu::lpc40xx::Pwm::Timer::kCounterEnable>:
    9ce0:	0100 ffff                                   ....

00009ce4 <sjsu::lpc40xx::Pwm::Timer::kCounterReset>:
    9ce4:	0101 ffff                                   ....

00009ce8 <sjsu::lpc40xx::Pwm::Timer::kPwmEnable>:
    9ce8:	0103 ffff                                   ....

00009cec <sjsu::lpc40xx::Pwm::CountControl::kMode>:
    9cec:	0200 ffff                                   ....

00009cf0 <sjsu::lpc40xx::Pwm::CountControl::kCountInput>:
    9cf0:	0202 ffff                                   ....

00009cf4 <sjsu::lpc40xx::Pwm::Channel::kPwmPin0>:
    9cf4:	9e94 0000 0002 0000                         ........

00009cfc <sjsu::lpc40xx::Pwm::Channel::kPwmPin1>:
    9cfc:	9e94 0000 0102 0000                         ........

00009d04 <sjsu::lpc40xx::Pwm::Channel::kPwmPin2>:
    9d04:	9e94 0000 0202 0000                         ........

00009d0c <sjsu::lpc40xx::Pwm::Channel::kPwmPin4>:
    9d0c:	9e94 0000 0402 0000                         ........

00009d14 <sjsu::lpc40xx::Pwm::Channel::kPwmPin5>:
    9d14:	9e94 0000 0502 0000                         ........

00009d1c <sjsu::lpc40xx::Pwm::Channel::kPwm0>:
    9d1c:	0054 1000 9cf4 0000 0009 0000               T...........

00009d28 <sjsu::lpc40xx::Pwm::Channel::kPwm1>:
    9d28:	0054 1000 9cfc 0000 000a 0000               T...........

00009d34 <sjsu::lpc40xx::Pwm::Channel::kPwm2>:
    9d34:	0054 1000 9d04 0000 000b 0000               T...........

00009d40 <sjsu::lpc40xx::Pwm::Channel::kPwm4>:
    9d40:	0054 1000 9d0c 0000 000d 0000               T...........

00009d4c <sjsu::lpc40xx::Pwm::Channel::kPwm5>:
    9d4c:	0054 1000 9d14 0000 000e 0000               T...........

00009d58 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9d58:	7770 2e6d 7068 0070                         pwm.hpp.

00009d60 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file>:
    9d60:	7770 2e6d 7068 0070                         pwm.hpp.

00009d68 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9d68:	7770 2e6d 7068 0070                         pwm.hpp.

00009d70 <sjsu::Servo::kDefaultFrequency>:
    9d70:	0000 4248                                   ..HB

00009d74 <motor_controller_freq>:
    9d74:	0000 4296                                   ...B

00009d78 <motor_controller_min_pulse>:
    9d78:	03e8 0000 0000 0000                         ........

00009d80 <motor_controller_max_pulse>:
    9d80:	07d0 0000 0000 0000                         ........

00009d88 <vUartTask(void*)::file>:
    9d88:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009d98 <vSensorAndActuatorTask(void*)::file>:
    9d98:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009da8 <vSensorAndActuatorTask(void*)::file>:
    9da8:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009db8 <vtable for sjsu::Servo>:
	...
    9dc0:	2445 0000 250f 0000 257f 0000 25a9 0000     E$...%...%...%..
    9dd0:	25e7 0000 2689 0000                         .%...&..

00009dd8 <vtable for sjsu::lpc40xx::Pwm>:
	...
    9de0:	1e41 0000 2001 0000 20dd 0000 2155 0000     A.... ... ..U!..

00009df0 <vtable for sjsu::Pwm>:
	...
    9df8:	774b 0000 774b 0000 774b 0000 774b 0000     Kw..Kw..Kw..Kw..

00009e08 <vtable for sjsu::lpc40xx::Adc>:
	...
    9e10:	1a85 0000 1ba1 0000 1bf1 0000               ............

00009e1c <vtable for sjsu::Adc>:
	...
    9e24:	774b 0000 774b 0000 774b 0000               Kw..Kw..Kw..

00009e30 <vtable for sjsu::lpc40xx::Uart>:
	...
    9e38:	1689 0000 1749 0000 17d5 0000 1879 0000     ....I.......y...
    9e48:	1949 0000                                   I...

00009e4c <vtable for sjsu::Uart>:
	...
    9e54:	774b 0000 774b 0000 774b 0000 774b 0000     Kw..Kw..Kw..Kw..
    9e64:	774b 0000                                   Kw..

00009e68 <vtable for sjsu::lpc40xx::SystemController>:
	...
    9e70:	09fd 0000 0a99 0000 0af1 0000 0b15 0000     ................
    9e80:	0b31 0000 0b6d 0000 0ba1 0000               1...m.......

00009e8c <vtable for sjsu::lpc40xx::Pin>:
	...
    9e94:	0411 0000 0445 0000 04b5 0000 0479 0000     ....E.......y...

00009ea4 <vUartTask(void*)::__PRETTY_FUNCTION__>:
    9ea4:	6f76 6469 7620 6155 7472 6154 6b73 7628     void vUartTask(v
    9eb4:	696f 2a64 0029 ffff                         oid*)...

00009ebc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    9ebc:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    9ecc:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    9edc:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    9eec:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    9efc:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    9f0c:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    9f1c:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    9f2c:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    9f3c:	736e 0074                                   nst.

00009f40 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    9f40:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    9f50:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    9f60:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    9f70:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    9f80:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    9f90:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    9fa0:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    9fb0:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00009fbc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    9fbc:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    9fcc:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    9fdc:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    9fec:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    9ffc:	2029 6f63 736e 0074                         ) const.

0000a004 <vSensorAndActuatorTask(void*)::__PRETTY_FUNCTION__>:
    a004:	6f76 6469 7620 6553 736e 726f 6e41 4164     void vSensorAndA
    a014:	7463 6175 6f74 5472 7361 286b 6f76 6469     ctuatorTask(void
    a024:	292a ff00                                   *)..

0000a028 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    a028:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    a038:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    a048:	533a 7465 7246 7165 6575 636e 2879 6e75     :SetFrequency(un
    a058:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    a068:	6568 7472 5f7a 2974 6320 6e6f 7473 ff00     hertz_t) const..

0000a078 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    a078:	6976 7472 6175 206c 6a73 7573 3a3a 7453     virtual sjsu::St
    a088:	7461 7375 7320 736a 3a75 6c3a 6370 3034     atus sjsu::lpc40
    a098:	7878 3a3a 7750 3a6d 493a 696e 6974 6c61     xx::Pwm::Initial
    a0a8:	7a69 2865 6e75 7469 3a73 663a 6572 7571     ize(units::frequ
    a0b8:	6e65 7963 3a3a 6568 7472 5f7a 2974 6320     ency::hertz_t) c
    a0c8:	6e6f 7473 ff00 ffff                         onst....

0000a0d0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__>:
    a0d0:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    a0e0:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    a0f0:	533a 7465 7544 7974 7943 6c63 2865 6c66     :SetDutyCycle(fl
    a100:	616f 2974 6320 6e6f 7473 ff00               oat) const..

0000a10c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    a10c:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    a11c:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    a12c:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    a13c:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    a14c:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    a15c:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    a16c:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    a17c:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    a18c:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    a19c:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    a1ac:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    a1bc:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    a1cc:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    a1dc:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    a1ec:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    a1fc:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    a20c:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    a21c:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    a22c:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    a23c:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    a24c:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    a25c:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    a26c:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    a27c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    a28c:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    a29c:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    a2ac:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    a2bc:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    a2cc:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    a2dc:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    a2ec:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    a2fc:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    a30c:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    a31c:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    a32c:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    a33c:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    a34c:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    a35c:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    a36c:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    a37c:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    a38c:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    a39c:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    a3ac:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    a3bc:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    a3cc:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    a3dc:	1b0a 305b 006d ffff 4449 454c 0000 0000     ..[0m...IDLE....
    a3ec:	2509 0963 7525 2509 0975 7525 0a0d 0000     .%c.%u.%u.%u....
    a3fc:	2509 0975 2509 2575 0d25 000a 2509 0975     .%u..%u%%....%u.
    a40c:	3c09 2531 0d25 000a 000a ffff               .<1%%.......

0000a418 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    a418:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    a428:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    a438:	bc20 4cbe 6b28 4e6e 743a 0074 6e69 6176      ..L(knN:tt.inva
    a448:	696c 0064 7061 6c70 6369 7461 6f69 006e     lid.application.
    a458:	6f68 7473 7420 7365 0074 0000 2020 6425     host test...  %d
    a468:	2029 7830 3025 5838 000a 0000 3020 2578     ) 0x%08X.... 0x%
    a478:	3830 0058 2020 6425 2029 7830 7025 000a     08X.  %d) 0x%p..
    a488:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
    a498:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
    a4a8:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
    a4b8:	7463 726f 0079 0000 0a0a 2020 5b1b 3b31     ctory.....  .[1;
    a4c8:	3733 006d 616d 656b 7320 6174 6b63 7274     37m.make stacktr
    a4d8:	6361 2d65 7325 5420 4152 4543 3d53 0022     ace-%s TRACES=".
    a4e8:	3020 2578 0070 0000 0a22 1b0a 305b 006d      0x%p..."...[0m.
    a4f8:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
    a508:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
    a518:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
    a528:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
    a538:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
    a548:	002e 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    a558:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    a568:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    a578:	1b20 305b 333b 6d37 6f4e 6920 746e 7265      .[0;37mNo inter
    a588:	7572 7470 7320 7265 6976 6563 7220 756f     rupt service rou
    a598:	6974 656e 6620 756f 646e 6620 726f 7420     tine found for t
    a5a8:	6568 7620 6365 6f74 2072 6425 2021 6944     he vector %d! Di
    a5b8:	6173 6c62 6e69 2067 5349 1b52 305b 0a6d     sabling ISR.[0m.
    a5c8:	0000 0000 ffff ffff 6959 0000 0001 0000     ........Yi......
    a5d8:	ffff ffff 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
    a5e8:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    a5f8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    a608:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    a618:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    a628:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
    a638:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
    a648:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
    a658:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
    a668:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
    a678:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
    a688:	6361 206b 7254 6361 3a65 000a 5b1b 3534     ack Trace:...[45
    a698:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    a6a8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    a6b8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    a6c8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    a6d8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    a6e8:	6574 3a64 2820 6564 6973 6572 5f64 7266     ted: (desired_fr
    a6f8:	7165 6575 636e 2079 203c 3833 5f34 484d     equency < 384_MH
    a708:	207a 2626 6420 7365 7269 6465 665f 6572     z && desired_fre
    a718:	7571 6e65 7963 3e20 3120 5f32 484d 297a     quency > 12_MHz)
    a728:	200a 2020 2020 2020 2020 4620 6572 7571     .          Frequ
    a738:	6e65 7963 6d20 7375 2074 6562 6c20 776f     ency must be low
    a748:	7265 7420 6168 206e 3833 2034 484d 617a     er than 384 MHza
    a758:	646e 6720 6572 7461 7265 7420 6168 206e     nd greater than 
    a768:	726f 6520 7571 6c61 7420 206f 3231 4d20     or equal to 12 M
    a778:	7a48 5b1b 6d30 5b1b 6d30 000a 5b1b 3534     Hz.[0m.[0m...[45
    a788:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    a798:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    a7a8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    a7b8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    a7c8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    a7d8:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
    a7e8:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
    a7f8:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
    a808:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
    a818:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
    a828:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
    a838:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    a848:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    a858:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    a868:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    a878:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    a888:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    a898:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    a8a8:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    a8b8:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    a8c8:	fffb ffff 6f11 0000 0001 0000 ffff ffff     .....o..........
    a8d8:	fffe ffff 7021 0000 0001 0000 ffff ffff     ....!p..........
    a8e8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    a8f8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    a908:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    a918:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    a928:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    a938:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    a948:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    a958:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    a968:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    a978:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    a988:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    a998:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    a9a8:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..

0000a9b8 <std::integral_constant<long long, 1ll>::value>:
    a9b8:	0001 0000 0000 0000                         ........

0000a9c0 <config::kSystemClockRateMhz>:
    a9c0:	0000 4240                                   ..@B

0000a9c4 <config::kRtosFrequency>:
    a9c4:	0000 447a                                   ..zD

0000a9c8 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    a9c8:	aa1c 0000                                   ....

0000a9cc <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    a9cc:	9e94 0000 0200 0000                         ........

0000a9d4 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    a9d4:	9e94 0000 0300 0000                         ........

0000a9dc <sjsu::lpc40xx::Uart::Port::kUart0>:
    a9dc:	c000 4000 0003 0000 a9cc 0000 a9d4 0000     ...@............
    a9ec:	0009 0000                                   ....

0000a9f0 <sjsu::InitializePlatform()::file>:
    a9f0:	7473 7261 7574 2e70 7063 0070               startup.cpp.

0000a9fc <vtable for sjsu::cortex::SystemTimer>:
	...
    aa04:	69c5 0000 69d9 0000 6ae1 0000 69f9 0000     .i...i...j...i..

0000aa14 <vtable for sjsu::cortex::InterruptController>:
	...
    aa1c:	67a5 0000 67f9 0000                         .g...g..

0000aa24 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    aa24:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    aa34:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    aa44:	6d54 2072 7653 0063 6d54 5172 ff00 ffff     Tmr Svc.TmrQ....

0000aa54 <__sf_fake_stderr>:
	...

0000aa74 <__sf_fake_stdin>:
	...

0000aa94 <__sf_fake_stdout>:
	...
