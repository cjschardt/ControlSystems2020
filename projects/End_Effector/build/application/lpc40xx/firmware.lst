
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000039ed

Program Header:
0x70000001 off    0x0001aec0 vaddr 0x0000aec0 paddr 0x0000aec0 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000af78 memsz 0x0000af78 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0000af78 align 2**16
         filesz 0x000000fc memsz 0x000000fc flags rw-
    LOAD off    0x00020100 vaddr 0x10000100 paddr 0x10000100 align 2**16
         filesz 0x00000000 memsz 0x00000ee0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000aea8  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000fc  10000000  0000af78  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200fc  2**2  CONTENTS
  3 .bss             00000ee0  10000100  10000100  00020100  2**3  ALLOC
  4 .ARM.extab       00000018  0000aea8  0000aea8  0001aea8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  0000aec0  0000aec0  0001aec0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200fc  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200fc  2**2  CONTENTS
  8 .noinit          00000000  10000fe0  10000fe0  000200fc  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200fc  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  0002012c  2**0  CONTENTS, READONLY
 11 .debug_info      0007d319  00000000  00000000  000201aa  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00005285  00000000  00000000  0009d4c3  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00001080  00000000  00000000  000a2748  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000fa0  00000000  00000000  000a37c8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      000087ab  00000000  00000000  000a4768  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002d8cc  00000000  00000000  000acf13  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00005958  00000000  00000000  000da7e0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000100 l    d  .bss	00000000 .bss
0000aea8 l    d  .ARM.extab	00000000 .ARM.extab
0000aec0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000fe0 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00006510 l     F .text	00000030 NVIC_EnableIRQ
00006540 l     F .text	00000030 NVIC_DisableIRQ
00006570 l     F .text	00000054 NVIC_SetPriority
0000adb0 l     O .text	00000004 config::kSystemClockRateMhz
0000adb4 l     O .text	00000004 config::kRtosFrequency
00006650 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000666c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
1000007c l     O .data	00000004 (anonymous namespace)::system_controller
100003d0 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100003d4 l     O .bss	0000000c (anonymous namespace)::uart0
10000080 l     O .data	0000000c (anonymous namespace)::system_timer
1000008c l     O .data	00000004 (anonymous namespace)::interrupt_controller
00006b60 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00006b84 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
0000ade0 l     O .text	0000000c sjsu::InitializePlatform()::file
0000ae14 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00006d14 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
00006e24 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
10000100 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
10000104 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003b0 l     F .text	00000030 NVIC_DisableIRQ
00000632 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000064e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000742 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000075e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000814 l     F .text	00000026 _Unwind_GetGR
000009b0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000009cc l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000a2ac l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
0000a330 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000a3ac l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00001448 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000a4fc l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
0000a4a4 l     O .text	00000055 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000a468 l     O .text	0000003b sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__
0000a418 l     O .text	0000004f sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000246a l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003264 l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000a164 l     O .text	00000004 motor_controller_freq
0000a168 l     O .text	00000008 motor_controller_min_pulse
0000a170 l     O .text	00000008 motor_controller_max_pulse
0000a178 l     O .text	0000000f vUartTask(void*)::file
0000a294 l     O .text	00000016 vUartTask(void*)::__PRETTY_FUNCTION__
0000a188 l     O .text	0000000f vSensorAndActuatorTask(void*)::file
0000a198 l     O .text	0000000f vSensorAndActuatorTask(void*)::file
0000a3f4 l     O .text	00000023 vSensorAndActuatorTask(void*)::__PRETTY_FUNCTION__
00003508 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000035b8 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000035dc l     F .text	00000240 __static_initialization_and_destruction_0(int, int)
0000381c l     F .text	00000010 _GLOBAL__sub_I_xUartTaskHandle
00000000 l    df *ABS*	00000000 exceptions.cpp
000039dc l       .text	00000000 handler2_address_const
00003a5c l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00003aa0 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
100002b4 l     O .bss	00000064 pxReadyTasksLists
10000318 l     O .bss	00000014 xDelayedTaskList1
1000032c l     O .bss	00000014 xDelayedTaskList2
10000340 l     O .bss	00000004 pxDelayedTaskList
10000344 l     O .bss	00000004 pxOverflowDelayedTaskList
10000348 l     O .bss	00000014 xPendingReadyList
1000035c l     O .bss	00000014 xTasksWaitingTermination
10000370 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10000374 l     O .bss	00000014 xSuspendedTaskList
10000388 l     O .bss	00000004 uxCurrentNumberOfTasks
1000038c l     O .bss	00000004 xTickCount
10000390 l     O .bss	00000004 uxTopReadyPriority
10000394 l     O .bss	00000004 xSchedulerRunning
10000398 l     O .bss	00000004 uxPendedTicks
1000039c l     O .bss	00000004 xYieldPending
100003a0 l     O .bss	00000004 xNumOfOverflows
100003a4 l     O .bss	00000004 uxTaskNumber
100003a8 l     O .bss	00000004 xNextTaskUnblockTime
100003ac l     O .bss	00000004 xIdleTaskHandle
100003b0 l     O .bss	00000004 uxSchedulerSuspended
100003b4 l     O .bss	00000004 ulTaskSwitchedInTime
100003b8 l     O .bss	00000004 ulTotalRunTime
00003d02 l     F .text	000000f4 prvInitialiseNewTask
00003df8 l     F .text	000000dc prvAddNewTaskToReadyList
0000452c l     F .text	00000080 prvInitialiseTaskLists
00004604 l     F .text	0000003c prvDeleteTCB
00004640 l     F .text	0000004c prvResetNextTaskUnblockTime
00004790 l     F .text	000000cc prvAddCurrentTaskToDelayedList
0000451c l     F .text	0000000e prvIdleTask
000045ac l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 queue.c
000049ae l     F .text	00000046 prvInitialiseNewQueue
00004d40 l     F .text	000000d4 prvCopyDataToQueue
00004f30 l     F .text	00000030 prvIsQueueFull
00004e60 l     F .text	000000a4 prvUnlockQueue
00004e14 l     F .text	0000004c prvCopyDataFromQueue
00004f04 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00005210 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
0000522c l     F .text	0000002e _strlen(char const*)
0000525a l     F .text	00000028 _is_digit(char)
00005282 l     F .text	00000048 _atoi(char const**)
000052ca l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
0000550c l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000055dc l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0000a808 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000056bc l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00005b00 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00006444 l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
100003bc l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
10000090 l     O .data	00000004 uxCriticalNesting
00006e9c l     F .text	00000030 prvTaskExitError
00006ef0 l       .text	00000000 pxCurrentTCBConst2
00006ef8 l     F .text	00000024 prvPortStartFirstTask
00007088 l     F .text	00000010 vPortEnableVFP
00007040 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_common.cpp
100003e0 l     O .bss	00000060 idle_task_tcb
10000440 l     O .bss	00000140 idle_task_stack
10000580 l     O .bss	00000060 timer_task_tcb
100005e0 l     O .bss	00000800 timer_task_stack
00000000 l    df *ABS*	00000000 timers.c
10000de0 l     O .bss	00000014 xActiveTimerList1
10000df4 l     O .bss	00000014 xActiveTimerList2
10000e08 l     O .bss	00000004 pxCurrentTimerList
10000e0c l     O .bss	00000004 pxOverflowTimerList
10000e10 l     O .bss	00000004 xTimerQueue
10000e14 l     O .bss	00000004 xTimerTaskHandle
000075f8 l     F .text	00000080 prvCheckForValidListAndQueue
0000728c l     F .text	00000024 prvTimerTask
00007228 l     F .text	00000064 prvProcessExpiredTimer
000073d4 l     F .text	00000084 prvInsertTimerInActiveList
0000734c l     F .text	00000048 prvGetNextExpireTime
000072b0 l     F .text	0000009c prvProcessTimerOrBlockTask
00007458 l     F .text	000000f8 prvProcessReceivedCommands
00007394 l     F .text	00000040 prvSampleTimeNow
00007550 l     F .text	000000a8 prvSwitchTimerLists
10000e18 l     O .bss	00000004 xLastTime.6731
10000e94 l     O .bss	00000050 xStaticTimerQueue.6776
10000e1c l     O .bss	00000078 ucStaticTimerQueueStorage.6777
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00008044 l     F .text	00000012 selfrel_offset31
00008058 l     F .text	00000060 search_EIT_table
000080b8 l     F .text	00000028 __gnu_unwind_get_pr_addr
000080e0 l     F .text	000000a4 get_eit_entry
00008184 l     F .text	00000058 restore_non_core_regs
000081dc l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000081e8 l     F .text	00000004 __gnu_unwind_24bit.isra.1
000081ec l     F .text	00000002 _Unwind_DebugHook
000081f0 l     F .text	0000003e unwind_phase2
00008230 l     F .text	000000c6 unwind_phase2_forced
00008400 l     F .text	00000018 _Unwind_GetGR
00008444 l     F .text	0000001a _Unwind_SetGR
000084d0 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00008bdc l     F .text	00000038 next_unwind_byte
00008c14 l     F .text	0000001a _Unwind_GetGR.constprop.0
00008c30 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000090e8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 syscalls.c
0000962c l     F .text	00000034 findslot
00009660 l     F .text	00000020 checkerror
10000eec l     O .bss	000000a0 openfiles
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
1000009c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 reent.c
0000083c  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00008b94 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000082fc g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
0000a158  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00006914  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
000031e2  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00002a60  w    F .text	0000005c sjsu::Servo::Servo(sjsu::Servo const&)
000038c8  w    F .text	0000006c sjsu::InitializeBssSection()
00005060 g     F .text	00000010 _getpid
00009fb8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
000095e0 g     F .text	00000024 _lseek_r
000068e0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000695c  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
0000a014  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
0000265e  w    F .text	0000001e units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const
0000a0b0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel5
00000598  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
0000684e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000396  w    F .text	00000018 std::numeric_limits<float>::epsilon()
00001e40  w    F .text	000001c0 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000064  w    O .data	00000004 sjsu::newlib::in
00006fa8 g     F .text	00000034 vPortExitCritical
0000a0fc  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin4
00007a30 g     F .text	0000005a .hidden __floatdidf
1000028c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001dec  w    F .text	00000020 sjsu::Pwm::Pwm()
0000267c  w    F .text	000000bc sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00000782  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
0000a20c  w    O .text	00000014 vtable for sjsu::Adc
000094dc g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
000063d4 g     F .text	00000044 printf
0000955e g     F .text	00000024 __sseek
00009168 g     F .text	00000060 __sinit
00004fb0 g     F .text	00000068 vQueueWaitForMessageRestricted
0000913c g     F .text	0000002c __sfmoreglue
00000000 g       *ABS*	00000000 __vectors_start__
00009606 g     F .text	00000002 __malloc_unlock
000020d0  w    F .text	00000056 sjsu::lpc40xx::Pwm::GetDutyCycle() const
0000a080  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel3
0000309e  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00002fa2  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001ba0  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
000067b4  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
000008c8  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
00008a50 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00008b70 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00004b48 g     F .text	000000b2 xQueueGenericSendFromISR
0000af78 g       .ARM.exidx	00000000 __exidx_end
00009774  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00006bb8 g     F .text	00000014 ThreadRuntimeCounter
000087a4 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000074  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00009768 g     F .text	0000000c __errno
0000a118  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm1
00002a24  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
0000a0a8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel4
00000b6c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
100002b0 g     O .bss	00000004 pxCurrentTCB
0000259c  w    F .text	00000024 sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00008f20 g     F .text	0000000a .hidden _Unwind_GetRegionStart
000023c8  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
00008b70 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00009fb0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000a05c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10010000 g       *ABS*	00000000 __top_SRAM
10000fdc g     O .bss	00000004 errno
0000af78 g       .ARM.exidx	00000000 _etext
00003132  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000004b4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000c64  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00008bb8 g     F .text	00000022 .hidden _Unwind_Backtrace
0000adb8  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
1000011c  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00007b38 g     F .text	00000160 .hidden __aeabi_fadd
100003c8  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00007b34 g     F .text	00000164 .hidden __subsf3
0000a064  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000d30  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000a03c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
0000444c g     F .text	0000002c vTaskInternalSetTimeOutState
00008a30 g     F .text	00000018 .hidden __restore_core_regs
00008a70 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000023c8  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
0000a0e4  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin0
00009fa8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
0000a220  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
000066cc  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
0000a0dc  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kMode
00009778  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00002438  w    F .text	00000032 sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00006f20 g     F .text	00000054 xPortStartScheduler
00001140  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000082f8 g     F .text	00000004 .hidden _Unwind_GetCFA
000092e4 g     F .text	00000016 memcpy
0000433c g     F .text	0000002c vTaskPlaceOnEventList
00000e68  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007690 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00002148  w    F .text	000000cc sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008418 g     F .text	0000002a .hidden _Unwind_VRS_Set
00009130 g     F .text	0000000c _cleanup_r
000079b8 g     F .text	00000022 .hidden __floatsidf
00006bcc g     F .text	00000060 vPortSetupTimerInterrupt
10000294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00007048 g     F .text	00000040 xPortSysTickHandler
00007d48 g     F .text	00000000 .hidden __aeabi_uldivmod
10000278 g     O .bss	00000004 xSensorAndActuatorHandle
10000fe0 g       .noinit	00000000 _noinit
00000d48  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000514c g     F .text	00000048 puts
0000a0f4  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin2
0000503c g     F .text	00000024 vPortFree
00001a14  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000a0d8  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kPwmEnable
00001204  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
0000310e  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
0000a088  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4
10000078  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000a98  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00001634  w    F .text	00000020 sjsu::Uart::Uart()
000092c4 g     F .text	00000010 malloc
0000a078  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
0000947c g     F .text	00000050 _raise_r
00007ca0 g     F .text	0000001c .hidden __aeabi_i2f
1000027c g     O .bss	00000004 Q
000019c0  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
00001990  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
00006fe0 g     F .text	00000066 xPortPendSVHandler
0000a0e0  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kCountInput
00003b0a g     F .text	00000048 vListInsertEnd
000005f0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000478  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00009500 g     F .text	00000004 _getpid_r
00008460 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00002f7c  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00007998 g     F .text	0000001e .hidden __aeabi_ui2d
000024de  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)
000029dc  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)
10010000 g       *ABS*	00000000 StackTop
00001e0c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
00000e04  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00007d78 g     F .text	000002cc .hidden __udivmoddi4
00007714 g     F .text	00000000 .hidden __aeabi_drsub
0000945c g     F .text	00000020 _sbrk_r
0000a160  w    O .text	00000004 sjsu::Servo::kDefaultFrequency
000000fc g       .text	00000000 bss_section_table
0000977c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00006a84  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00008a60 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00001654  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00009608 g     F .text	00000024 _read_r
00003af0 g     F .text	0000001a vListInitialiseItem
000087b0 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00004bfc g     F .text	00000144 xQueueReceive
000087ac  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000f8c g     O .bss	00000050 xQueueRegistry
000090c4 g     F .text	00000024 fflush
000069b4  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000284  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00008bb8 g     F .text	00000022 .hidden ___Unwind_Backtrace
0000096c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00001878  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000884  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
000079dc g     F .text	00000042 .hidden __extendsfdf2
0000a054  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00007100 g     F .text	00000034 vApplicationGetTimerTaskMemory
00007720 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100003c0  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
0000aec0 g       .ARM.extab	00000000 __exidx_start
0000aea4 g     O .text	00000004 _global_impure_ptr
0000927c g     F .text	00000048 __libc_init_array
0000137c  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00008b28 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
0000331a  w    F .text	00000092 float sjsu::Map<float, int, float>(float, int, int, float, float)
00001424  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000070e8  w    F .text	00000018 unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])
00001c50  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
00008f54 g     F .text	0000000e abort
00008b4c g     F .text	00000022 .hidden ___Unwind_Resume
0000140c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007998 g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
0000508c g     F .text	00000044 _sbrk
00005018 g     F .text	00000024 pvPortMalloc
10000280  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00006868  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00002abc g     F .text	0000044e vSensorAndActuatorTask(void*)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
000013a8  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00080000 g       *ABS*	00000000 __top_FLASH
00003ab0 g     F .text	00000040 vListInitialise
00007678 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00009780  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00003524  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00001822  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00007708 g     F .text	0000000a std::terminate()
00000564  w    F .text	00000034 units::detail::abs(float)
00007a8c g     F .text	0000009e .hidden __aeabi_d2f
00008a78 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00009fac  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
00004100 g     F .text	00000020 xTaskGetTickCount
000049f4 g     F .text	00000154 xQueueGenericSend
000025c0  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00007b34 g     F .text	00000164 .hidden __aeabi_fsub
00001748  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
000030c4  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00002a00  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
000039c4 g     F .text	00000026 ArmHardFaultHandler
10000290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000230  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000de2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000fe0 g       .bss	00000000 _ebss
0000a1e0  w    O .text	00000018 vtable for sjsu::Pwm
000017d4  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
0000a258  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
0000a13c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm5
00003222  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000694  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000b14  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
000046c8 g     F .text	000000c8 xTaskPriorityDisinherit
00006980  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
00000672  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00007ccc g     F .text	0000007c .hidden __floatdisf
0000adc4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00003948 g     F .text	0000007c GetRegistersFromStack
0000a068  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
00001654  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00003246  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
10000274 g     O .bss	00000004 xUartTaskHandle
000043a4 g     F .text	000000a8 xTaskRemoveFromEventList
0000a148  w    O .text	00000008 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00007720 g     F .text	00000276 .hidden __aeabi_dadd
0000a10c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm0
000019c0  w    F .text	00000020 sjsu::Adc::Adc()
00007a20 g     F .text	0000006a .hidden __aeabi_ul2d
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00008a48 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00006c2c  w    F .text	000000b8 sjsu::InitializePlatform()
00002214  w    F .text	000000d4 sjsu::lpc40xx::Pwm::EnablePwm(bool) const
00002fde  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
0000ae44 g     O .text	00000020 __sf_fake_stderr
000066ec  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
0000a104  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin5
000076f8 g     F .text	00000010 std::get_terminate()
10000fe0 g       .bss	00000000 end
00001634  w    F .text	00000020 sjsu::Uart::Uart()
00008b4c g     F .text	00000022 .hidden _Unwind_Resume
00001d14  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
0000a124  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm2
000083c8 g     F .text	0000000c .hidden _Unwind_DeleteException
0000ae04  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
000083c4 g     F .text	00000002 .hidden _Unwind_Complete
00000c1c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000270  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
000051a0 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
0000adec  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00009fc8  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00004478 g     F .text	0000008c xTaskCheckForTimeOut
0000930c g     F .text	0000009c _free_r
00006426 g     F .text	0000001c trace_write
10000288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00003460  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000100 g       .bss	00000000 _bss
0000771c g     F .text	0000027a .hidden __aeabi_dsub
00009ffc  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001bf0  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
00006418 g     F .text	0000000e trace_initialize
0000a1a8  w    O .text	00000020 vtable for sjsu::Servo
00003fc8 g     F .text	0000001c vTaskSuspendAll
0000a06c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
00007a20 g     F .text	0000006a .hidden __floatundidf
000096fa g     F .text	00000004 _lseek
000076e8 g     F .text	00000006 __cxa_pure_virtual
00000e40  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00007ca0 g     F .text	0000001c .hidden __floatsisf
0000a02c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000128  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00008c34 g     F .text	000002c4 .hidden __gnu_unwind_execute
00003bc4 g     F .text	00000054 uxListRemove
00001e0c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000298  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000009fc  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008a58 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000003f8  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
000033ac  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00003298  w    F .text	00000082 float sjsu::Map<float, float, float>(float, float, float, float, float)
00006810  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00003c18 g     F .text	00000060 xTaskCreateStatic
10000fe0 g       .noinit	00000000 _end_noinit
10000130  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000af0  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00004278 g     F .text	000000c4 vTaskSwitchContext
00001188  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00009fb4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000067dc  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
0000a0bc  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000037e  w    F .text	00000018 std::numeric_limits<float>::min()
00002a24  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
00004910 g     F .text	0000003e xQueueGenericCreateStatic
00008370 g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000248  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
00004368 g     F .text	0000003c vTaskPlaceOnEventListRestricted
000067f4  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
000065c4  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00002642  w    F .text	0000001c float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const
100002a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
000095c0 g     F .text	00000020 _close_r
000079b8 g     F .text	00000022 .hidden __aeabi_i2d
0000a060  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
0000a034  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00008a68 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00006a9c  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000070b4 g     F .text	00000034 vApplicationGetIdleTaskMemory
0000a1c8  w    O .text	00000018 vtable for sjsu::lpc40xx::Pwm
1000029c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00007cbc g     F .text	0000008c .hidden __floatundisf
000071a8 g     F .text	00000080 xTimerGenericCommand
00002a60  w    F .text	0000005c sjsu::Servo::Servo(sjsu::Servo const&)
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00008b28 g     F .text	00000022 .hidden _Unwind_RaiseException
00008f50  w    F .text	00000002 .hidden __aeabi_ldiv0
000091c8 g     F .text	00000078 __sfp
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00003934  w    F .text	00000014 sjsu::SystemInitialize()
00001a6c  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00001dec  w    F .text	00000020 sjsu::Pwm::Pwm()
00007c98 g     F .text	00000024 .hidden __aeabi_ui2f
000011c0  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
0000a0cc  w    O .text	00000002 sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset
000000e4 g       .text	00000000 data_section_table
00009504 g     F .text	00000022 __sread
10000120  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002502  w    F .text	00000070 sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00009604 g     F .text	00000002 __malloc_lock
00002388  w    F .text	00000040 sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const
100002a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00009070 g     F .text	00000054 _fflush_r
000076a8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000005c4  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
0000ae64 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
0000a150  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file
0000a0ec  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin1
000010c4  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00002000  w    F .text	000000d0 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const
000092fa g     F .text	00000010 memset
00002f0c g     F .text	00000070 main
00006608  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001d24  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
0000a074  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00007ccc g     F .text	0000007c .hidden __aeabi_l2f
00002738  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00003b52 g     F .text	00000072 vListInsert
00006760  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00006628  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000adcc  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00009582 g     F .text	00000008 __sclose
00007134 g     F .text	00000074 xTimerCreateTimerTask
0000a27c  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00007a8c g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
00006ed0 g     F .text	00000026 vPortSVCHandler
000093a8 g     F .text	000000b4 _malloc_r
00000000 g       *ABS*	00000000 __base_FLASH
00007a30 g     F .text	0000005a .hidden __aeabi_l2d
00009fc0  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
1000006c  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00007cbc g     F .text	0000008c .hidden __aeabi_ul2f
00006690  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000119c  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
0000494e g     F .text	00000060 xQueueGenericCreate
0000835c g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00006832  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000a0a0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel3
00003062  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000083b4 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000060  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
0000ada8  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00003196  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
00008a30 g     F .text	00000018 .hidden restore_core_regs
00000b30  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00008b14 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00003fe4 g     F .text	0000011c xTaskResumeAll
0000a04c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00003f1c g     F .text	000000ac vTaskStartScheduler
00006994  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00009680 g     F .text	0000007a _swilseek
0000274a  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
0000959c g     F .text	00000024 _write_r
00002126  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000196c  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
0000a130  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm4
00007b2c g     F .text	0000016c .hidden __aeabi_frsub
00008f48 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000098 g     O .data	00000004 _impure_ptr
000096fe g     F .text	0000001c _swiclose
00008f64 g     F .text	0000010c __sflush_r
00009fc4  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000d6c  w    F .text	0000001e units::linear_scale<float>::operator()() const
0000a070  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000cf4  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00006728  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
000004e8  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
0000a1f8  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
00004504 g     F .text	00000018 vTaskMissedYield
00003168  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000025da  w    F .text	00000068 sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00006a48  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
100002a8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00002774 g     F .text	00000268 vUartTask(void*)
00008f2c g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00009fe4  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00004f60 g     F .text	00000050 vQueueAddToRegistry
000019e0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
000039ec g     F .text	00000070 ArmResetHandler
00004120 g     F .text	00000158 xTaskIncrementTick
000031c4  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
000019e0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
100002ac  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
000083d4 g     F .text	0000002a .hidden _Unwind_VRS_Get
00006704  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000094 g     O .data	00000004 __cxxabiv1::__terminate_handler
00008b00 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000ba0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
0000485c g     F .text	000000b4 xQueueGenericReset
00000bd4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
000050d0 g     F .text	00000030 _write
00008ef8 g     F .text	00000028 .hidden __gnu_unwind_frame
00001c08  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00008b94 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
00002486  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
100000fc g       .data	00000000 _edata
00001948  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00001a84  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
1000005c  w    O .data	00000001 sjsu::newlib::echo_back_is_enabled
00006ce4  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
1000012c  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00003c78 g     F .text	0000008a xTaskCreate
00001d60  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
00009526 g     F .text	00000038 __swrite
00009fcc  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000d8a  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00009240 g     F .text	0000003c _fwalk_reent
00007c98 g     F .text	00000024 .hidden __floatunsisf
000076ee g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00008abc g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00002572  w    F .text	0000002a sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
0000709c  w    F .text	00000016 unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])
00005070 g     F .text	0000001a _kill
0000382c  w    F .text	0000009c sjsu::InitializeDataSection()
00003560  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00003ed4 g     F .text	00000048 vTaskDelay
00000990  w    F .text	00000020 sjsu::DefaultUptime()
0000ae84 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
0000a0b8  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
0000468c g     F .text	0000003c xTaskGetSchedulerState
00002a00  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
00005100 g     F .text	0000004c _read
0000030c g       .text	00000000 __init_array_start
00008f50  w    F .text	00000002 .hidden __aeabi_idiv0
0000a098  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
000030e8  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
0000a0d0  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterEnable
00005194 g     F .text	0000000c _exit
0000a044  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
00000612  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000012e4  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
000003e0  w    F .text	00000018 sjsu::Pin::GetPort() const
0000958a g     F .text	00000010 strlen
00006e34 g     F .text	00000068 pxPortInitialiseStack
10000000  w    O .data	00000004 sjsu::Uptime
00000410  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
000087a8  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00003406  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000ee8 g     O .bss	00000004 __malloc_sbrk_start
00000ffc  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000076c8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000007d4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
0000a090  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5
000079dc g     F .text	00000042 .hidden __aeabi_f2d
00006f74 g     F .text	00000034 vPortEnterCritical
00008f40 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00001330  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000ee4 g     O .bss	00000004 __malloc_free_list
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
000022e8  w    F .text	0000009e sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const
000034b0  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000444  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000771c g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
10000068  w    O .data	00000004 heap_position
00000cac  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00003014  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001d78  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
00009fbc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
0000a23c  w    O .text	0000001c vtable for sjsu::Uart
00007b38 g     F .text	00000160 .hidden __addsf3
00003200  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
0000a0d4  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterReset
0000adbc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
10000070  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001688  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
0000971c g     F .text	0000004c _close
000094cc g     F .text	00000010 raise
000092d4 g     F .text	00000010 free



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 ed 39 00 00 29 67 00 00 c5 39 00 00     .....9..)g...9..
      10:	29 67 00 00 29 67 00 00 29 67 00 00 00 00 00 00     )g..)g..)g......
	...
      2c:	d1 6e 00 00 29 67 00 00 00 00 00 00 e1 6f 00 00     .n..)g.......o..
      3c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      4c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      5c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      6c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      7c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      8c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      9c:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      ac:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      bc:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      cc:	29 67 00 00 29 67 00 00 29 67 00 00 29 67 00 00     )g..)g..)g..)g..
      dc:	29 67 00 00 29 67 00 00                             )g..)g..

000000e4 <data_section_table>:
      e4:	0000af78 	.word	0x0000af78
      e8:	10000000 	.word	0x10000000
      ec:	000000fc 	.word	0x000000fc
      f0:	0000af78 	.word	0x0000af78
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	10000100 	.word	0x10000100
     100:	00000ee0 	.word	0x00000ee0
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	0000381d 	.word	0x0000381d
     314:	00003aa1 	.word	0x00003aa1
     318:	00006e25 	.word	0x00006e25

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	10000100 	.word	0x10000100
     344:	00000000 	.word	0x00000000
     348:	0000aec0 	.word	0x0000aec0

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	10000104 	.word	0x10000104
     364:	0000aec0 	.word	0x0000aec0

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
     37e:	b480      	push	{r7}
     380:	af00      	add	r7, sp, #0
     382:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     386:	ee07 3a90 	vmov	s15, r3
     38a:	eeb0 0a67 	vmov.f32	s0, s15
     38e:	46bd      	mov	sp, r7
     390:	f85d 7b04 	ldr.w	r7, [sp], #4
     394:	4770      	bx	lr

00000396 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
     396:	b480      	push	{r7}
     398:	af00      	add	r7, sp, #0
     39a:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
     39e:	ee07 3a90 	vmov	s15, r3
     3a2:	eeb0 0a67 	vmov.f32	s0, s15
     3a6:	46bd      	mov	sp, r7
     3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ac:	4770      	bx	lr
     3ae:	Address 0x00000000000003ae is out of bounds.


000003b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	f003 021f 	and.w	r2, r3, #31
     3be:	4907      	ldr	r1, [pc, #28]	; (3dc <NVIC_DisableIRQ+0x2c>)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	095b      	lsrs	r3, r3, #5
     3c4:	2001      	movs	r0, #1
     3c6:	fa00 f202 	lsl.w	r2, r0, r2
     3ca:	3320      	adds	r3, #32
     3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3d0:	bf00      	nop
     3d2:	370c      	adds	r7, #12
     3d4:	46bd      	mov	sp, r7
     3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3da:	4770      	bx	lr
     3dc:	e000e100 	.word	0xe000e100

000003e0 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
  {
    return port_;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	791b      	ldrb	r3, [r3, #4]
  }
     3ec:	4618      	mov	r0, r3
     3ee:	370c      	adds	r7, #12
     3f0:	46bd      	mov	sp, r7
     3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f6:	4770      	bx	lr

000003f8 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     400:	687b      	ldr	r3, [r7, #4]
     402:	795b      	ldrb	r3, [r3, #5]
  }
     404:	4618      	mov	r0, r3
     406:	370c      	adds	r7, #12
     408:	46bd      	mov	sp, r7
     40a:	f85d 7b04 	ldr.w	r7, [sp], #4
     40e:	4770      	bx	lr

00000410 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
     418:	460b      	mov	r3, r1
     41a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     41c:	4b08      	ldr	r3, [pc, #32]	; (440 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     41e:	78f9      	ldrb	r1, [r7, #3]
     420:	781a      	ldrb	r2, [r3, #0]
     422:	785b      	ldrb	r3, [r3, #1]
     424:	021b      	lsls	r3, r3, #8
     426:	431a      	orrs	r2, r3
     428:	2300      	movs	r3, #0
     42a:	f362 030f 	bfi	r3, r2, #0, #16
     42e:	461a      	mov	r2, r3
     430:	6878      	ldr	r0, [r7, #4]
     432:	f000 f859 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     436:	bf00      	nop
     438:	3708      	adds	r7, #8
     43a:	46bd      	mov	sp, r7
     43c:	bd80      	pop	{r7, pc}
     43e:	bf00      	nop
     440:	00009774 	.word	0x00009774

00000444 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     452:	78f9      	ldrb	r1, [r7, #3]
     454:	781a      	ldrb	r2, [r3, #0]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	021b      	lsls	r3, r3, #8
     45a:	431a      	orrs	r2, r3
     45c:	2300      	movs	r3, #0
     45e:	f362 030f 	bfi	r3, r2, #0, #16
     462:	461a      	mov	r2, r3
     464:	6878      	ldr	r0, [r7, #4]
     466:	f000 f83f 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     46a:	bf00      	nop
     46c:	3708      	adds	r7, #8
     46e:	46bd      	mov	sp, r7
     470:	bd80      	pop	{r7, pc}
     472:	bf00      	nop
     474:	00009778 	.word	0x00009778

00000478 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	460b      	mov	r3, r1
     482:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     484:	78fb      	ldrb	r3, [r7, #3]
     486:	f083 0301 	eor.w	r3, r3, #1
     48a:	b2db      	uxtb	r3, r3
     48c:	4619      	mov	r1, r3
     48e:	4b08      	ldr	r3, [pc, #32]	; (4b0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     490:	781a      	ldrb	r2, [r3, #0]
     492:	785b      	ldrb	r3, [r3, #1]
     494:	021b      	lsls	r3, r3, #8
     496:	431a      	orrs	r2, r3
     498:	2300      	movs	r3, #0
     49a:	f362 030f 	bfi	r3, r2, #0, #16
     49e:	461a      	mov	r2, r3
     4a0:	6878      	ldr	r0, [r7, #4]
     4a2:	f000 f821 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4a6:	bf00      	nop
     4a8:	3708      	adds	r7, #8
     4aa:	46bd      	mov	sp, r7
     4ac:	bd80      	pop	{r7, pc}
     4ae:	bf00      	nop
     4b0:	0000977c 	.word	0x0000977c

000004b4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     4b4:	b580      	push	{r7, lr}
     4b6:	b082      	sub	sp, #8
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	460b      	mov	r3, r1
     4be:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     4c0:	78f9      	ldrb	r1, [r7, #3]
     4c2:	4b08      	ldr	r3, [pc, #32]	; (4e4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	785b      	ldrb	r3, [r3, #1]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	431a      	orrs	r2, r3
     4cc:	2300      	movs	r3, #0
     4ce:	f362 030f 	bfi	r3, r2, #0, #16
     4d2:	461a      	mov	r2, r3
     4d4:	6878      	ldr	r0, [r7, #4]
     4d6:	f000 f807 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4da:	bf00      	nop
     4dc:	3708      	adds	r7, #8
     4de:	46bd      	mov	sp, r7
     4e0:	bd80      	pop	{r7, pc}
     4e2:	bf00      	nop
     4e4:	00009780 	.word	0x00009780

000004e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ea:	b087      	sub	sp, #28
     4ec:	af00      	add	r7, sp, #0
     4ee:	60f8      	str	r0, [r7, #12]
     4f0:	460b      	mov	r3, r1
     4f2:	80ba      	strh	r2, [r7, #4]
     4f4:	72fb      	strb	r3, [r7, #11]
     4f6:	68fb      	ldr	r3, [r7, #12]
     4f8:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     4fa:	4b19      	ldr	r3, [pc, #100]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     4fc:	681c      	ldr	r4, [r3, #0]
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	4618      	mov	r0, r3
     502:	f7ff ff6d 	bl	3e0 <sjsu::Pin::GetPort() const>
     506:	4603      	mov	r3, r0
     508:	461d      	mov	r5, r3
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	4618      	mov	r0, r3
     50e:	f7ff ff73 	bl	3f8 <sjsu::Pin::GetPin() const>
     512:	4603      	mov	r3, r0
     514:	461a      	mov	r2, r3
     516:	016b      	lsls	r3, r5, #5
     518:	4413      	add	r3, r2
     51a:	009b      	lsls	r3, r3, #2
     51c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     51e:	681b      	ldr	r3, [r3, #0]
     520:	7af9      	ldrb	r1, [r7, #11]
     522:	687a      	ldr	r2, [r7, #4]
     524:	4618      	mov	r0, r3
     526:	f002 fd29 	bl	2f7c <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     52a:	4605      	mov	r5, r0
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     530:	4b0b      	ldr	r3, [pc, #44]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     532:	681c      	ldr	r4, [r3, #0]
     534:	697b      	ldr	r3, [r7, #20]
     536:	4618      	mov	r0, r3
     538:	f7ff ff52 	bl	3e0 <sjsu::Pin::GetPort() const>
     53c:	4603      	mov	r3, r0
     53e:	461e      	mov	r6, r3
     540:	697b      	ldr	r3, [r7, #20]
     542:	4618      	mov	r0, r3
     544:	f7ff ff58 	bl	3f8 <sjsu::Pin::GetPin() const>
     548:	4603      	mov	r3, r0
     54a:	461a      	mov	r2, r3
     54c:	0173      	lsls	r3, r6, #5
     54e:	4413      	add	r3, r2
     550:	009b      	lsls	r3, r3, #2
     552:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     554:	601d      	str	r5, [r3, #0]
  }
     556:	bf00      	nop
     558:	371c      	adds	r7, #28
     55a:	46bd      	mov	sp, r7
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	bf00      	nop
     560:	1000011c 	.word	0x1000011c

00000564 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	ed87 0a01 	vstr	s0, [r7, #4]
			return x < 0 ? -x : x;
     56e:	edd7 7a01 	vldr	s15, [r7, #4]
     572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     57a:	d504      	bpl.n	586 <units::detail::abs(float)+0x22>
     57c:	edd7 7a01 	vldr	s15, [r7, #4]
     580:	eef1 7a67 	vneg.f32	s15, s15
     584:	e001      	b.n	58a <units::detail::abs(float)+0x26>
     586:	edd7 7a01 	vldr	s15, [r7, #4]
		}
     58a:	eeb0 0a67 	vmov.f32	s0, s15
     58e:	370c      	adds	r7, #12
     590:	46bd      	mov	sp, r7
     592:	f85d 7b04 	ldr.w	r7, [sp], #4
     596:	4770      	bx	lr

00000598 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     598:	b580      	push	{r7, lr}
     59a:	b084      	sub	sp, #16
     59c:	af00      	add	r7, sp, #0
     59e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
     5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
     5a6:	f007 fb89 	bl	7cbc <__aeabi_ul2f>
     5aa:	4602      	mov	r2, r0
     5ac:	f107 030c 	add.w	r3, r7, #12
     5b0:	ee00 2a10 	vmov	s0, r2
     5b4:	4618      	mov	r0, r3
     5b6:	f000 f85c 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	4618      	mov	r0, r3
     5be:	3710      	adds	r7, #16
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}

000005c4 <units::literals::operator"" _MHz(unsigned long long)>:
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     5ce:	e9d7 0100 	ldrd	r0, r1, [r7]
     5d2:	f007 fb73 	bl	7cbc <__aeabi_ul2f>
     5d6:	4602      	mov	r2, r0
     5d8:	f107 030c 	add.w	r3, r7, #12
     5dc:	ee00 2a10 	vmov	s0, r2
     5e0:	4618      	mov	r0, r3
     5e2:	f000 f805 	bl	5f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	4618      	mov	r0, r3
     5ea:	3710      	adds	r7, #16
     5ec:	46bd      	mov	sp, r7
     5ee:	bd80      	pop	{r7, pc}

000005f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
     5f8:	ed87 0a00 	vstr	s0, [r7]
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	463a      	mov	r2, r7
     600:	4611      	mov	r1, r2
     602:	4618      	mov	r0, r3
     604:	f000 f805 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     608:	687b      	ldr	r3, [r7, #4]
     60a:	4618      	mov	r0, r3
     60c:	3708      	adds	r7, #8
     60e:	46bd      	mov	sp, r7
     610:	bd80      	pop	{r7, pc}

00000612 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     612:	b480      	push	{r7}
     614:	b083      	sub	sp, #12
     616:	af00      	add	r7, sp, #0
     618:	6078      	str	r0, [r7, #4]
     61a:	6039      	str	r1, [r7, #0]
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	681a      	ldr	r2, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	601a      	str	r2, [r3, #0]
     624:	687b      	ldr	r3, [r7, #4]
     626:	4618      	mov	r0, r3
     628:	370c      	adds	r7, #12
     62a:	46bd      	mov	sp, r7
     62c:	f85d 7b04 	ldr.w	r7, [sp], #4
     630:	4770      	bx	lr

00000632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     632:	b580      	push	{r7, lr}
     634:	b086      	sub	sp, #24
     636:	af00      	add	r7, sp, #0
     638:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	f000 f807 	bl	64e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     640:	eef0 7a40 	vmov.f32	s15, s0
	}
     644:	eeb0 0a67 	vmov.f32	s0, s15
     648:	3718      	adds	r7, #24
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}

0000064e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     64e:	b480      	push	{r7}
     650:	b085      	sub	sp, #20
     652:	af00      	add	r7, sp, #0
     654:	60f8      	str	r0, [r7, #12]
     656:	7239      	strb	r1, [r7, #8]
     658:	713a      	strb	r2, [r7, #4]
     65a:	703b      	strb	r3, [r7, #0]
			return value;
     65c:	68fb      	ldr	r3, [r7, #12]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	ee07 3a90 	vmov	s15, r3
		}
     664:	eeb0 0a67 	vmov.f32	s0, s15
     668:	3714      	adds	r7, #20
     66a:	46bd      	mov	sp, r7
     66c:	f85d 7b04 	ldr.w	r7, [sp], #4
     670:	4770      	bx	lr

00000672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     672:	b580      	push	{r7, lr}
     674:	b082      	sub	sp, #8
     676:	af00      	add	r7, sp, #0
     678:	6078      	str	r0, [r7, #4]
     67a:	ed87 0a00 	vstr	s0, [r7]
     67e:	687b      	ldr	r3, [r7, #4]
     680:	463a      	mov	r2, r7
     682:	4611      	mov	r1, r2
     684:	4618      	mov	r0, r3
     686:	f7ff ffc4 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	4618      	mov	r0, r3
     68e:	3708      	adds	r7, #8
     690:	46bd      	mov	sp, r7
     692:	bd80      	pop	{r7, pc}

00000694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     694:	b580      	push	{r7, lr}
     696:	ed2d 8b04 	vpush	{d8-d9}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	ed93 8a00 	vldr	s16, [r3]
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	4618      	mov	r0, r3
     6ac:	f000 f849 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6b0:	eef0 7a40 	vmov.f32	s15, s0
     6b4:	ee78 7a67 	vsub.f32	s15, s16, s15
     6b8:	eeb0 0a67 	vmov.f32	s0, s15
     6bc:	f7ff ff52 	bl	564 <units::detail::abs(float)>
     6c0:	eef0 8a40 	vmov.f32	s17, s0
     6c4:	f7ff fe67 	bl	396 <std::numeric_limits<float>::epsilon()>
     6c8:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	ed93 8a00 	vldr	s16, [r3]
     6d2:	683b      	ldr	r3, [r7, #0]
     6d4:	4618      	mov	r0, r3
     6d6:	f000 f834 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6da:	eef0 7a40 	vmov.f32	s15, s0
     6de:	ee78 7a27 	vadd.f32	s15, s16, s15
     6e2:	eeb0 0a67 	vmov.f32	s0, s15
     6e6:	f7ff ff3d 	bl	564 <units::detail::abs(float)>
     6ea:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6ee:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6f2:	eef4 8ae7 	vcmpe.f32	s17, s15
     6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6fa:	d419      	bmi.n	730 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	ed93 8a00 	vldr	s16, [r3]
     702:	683b      	ldr	r3, [r7, #0]
     704:	4618      	mov	r0, r3
     706:	f000 f81c 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     70a:	eef0 7a40 	vmov.f32	s15, s0
     70e:	ee78 7a67 	vsub.f32	s15, s16, s15
     712:	eeb0 0a67 	vmov.f32	s0, s15
     716:	f7ff ff25 	bl	564 <units::detail::abs(float)>
     71a:	eeb0 8a40 	vmov.f32	s16, s0
     71e:	f7ff fe2e 	bl	37e <std::numeric_limits<float>::min()>
     722:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     726:	eeb4 8ae7 	vcmpe.f32	s16, s15
     72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     72e:	d501      	bpl.n	734 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
     730:	2301      	movs	r3, #1
     732:	e000      	b.n	736 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
     734:	2300      	movs	r3, #0
		}
     736:	4618      	mov	r0, r3
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	ecbd 8b04 	vpop	{d8-d9}
     740:	bd80      	pop	{r7, pc}

00000742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     742:	b580      	push	{r7, lr}
     744:	b086      	sub	sp, #24
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     74a:	6878      	ldr	r0, [r7, #4]
     74c:	f000 f807 	bl	75e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     750:	eef0 7a40 	vmov.f32	s15, s0
	}
     754:	eeb0 0a67 	vmov.f32	s0, s15
     758:	3718      	adds	r7, #24
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}

0000075e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     75e:	b480      	push	{r7}
     760:	b085      	sub	sp, #20
     762:	af00      	add	r7, sp, #0
     764:	60f8      	str	r0, [r7, #12]
     766:	7239      	strb	r1, [r7, #8]
     768:	713a      	strb	r2, [r7, #4]
     76a:	703b      	strb	r3, [r7, #0]
			return value;
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	ee07 3a90 	vmov	s15, r3
		}
     774:	eeb0 0a67 	vmov.f32	s0, s15
     778:	3714      	adds	r7, #20
     77a:	46bd      	mov	sp, r7
     77c:	f85d 7b04 	ldr.w	r7, [sp], #4
     780:	4770      	bx	lr

00000782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     782:	b580      	push	{r7, lr}
     784:	b086      	sub	sp, #24
     786:	af00      	add	r7, sp, #0
     788:	6078      	str	r0, [r7, #4]
     78a:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	3308      	adds	r3, #8
     792:	681b      	ldr	r3, [r3, #0]
     794:	6839      	ldr	r1, [r7, #0]
     796:	6878      	ldr	r0, [r7, #4]
     798:	4798      	blx	r3
     79a:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     79c:	f04f 0300 	mov.w	r3, #0
     7a0:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7a2:	697b      	ldr	r3, [r7, #20]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d00f      	beq.n	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	330c      	adds	r3, #12
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	4798      	blx	r3
     7b4:	4603      	mov	r3, r0
     7b6:	613b      	str	r3, [r7, #16]
     7b8:	f107 0310 	add.w	r3, r7, #16
     7bc:	6979      	ldr	r1, [r7, #20]
     7be:	4618      	mov	r0, r3
     7c0:	f002 fbef 	bl	2fa2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     7c4:	4603      	mov	r3, r0
     7c6:	60fb      	str	r3, [r7, #12]
    }
    return result;
     7c8:	68fb      	ldr	r3, [r7, #12]
  }
     7ca:	4618      	mov	r0, r3
     7cc:	3718      	adds	r7, #24
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	Address 0x00000000000007d2 is out of bounds.


000007d4 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     7d4:	b480      	push	{r7}
     7d6:	b085      	sub	sp, #20
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     7de:	60fb      	str	r3, [r7, #12]
  switch (target)
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d002      	beq.n	7ec <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     7e6:	2b01      	cmp	r3, #1
     7e8:	d003      	beq.n	7f2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     7ea:	e005      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     7ee:	60fb      	str	r3, [r7, #12]
     7f0:	e002      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     7f4:	60fb      	str	r3, [r7, #12]
     7f6:	bf00      	nop
  }
  return result;
     7f8:	68fb      	ldr	r3, [r7, #12]
}
     7fa:	4618      	mov	r0, r3
     7fc:	3714      	adds	r7, #20
     7fe:	46bd      	mov	sp, r7
     800:	f85d 7b04 	ldr.w	r7, [sp], #4
     804:	4770      	bx	lr
     806:	bf00      	nop
     808:	00009784 	.word	0x00009784
     80c:	0000978c 	.word	0x0000978c
     810:	00009798 	.word	0x00009798

00000814 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     814:	b580      	push	{r7, lr}
     816:	b086      	sub	sp, #24
     818:	af02      	add	r7, sp, #8
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     81e:	683a      	ldr	r2, [r7, #0]
     820:	f107 030c 	add.w	r3, r7, #12
     824:	9300      	str	r3, [sp, #0]
     826:	2300      	movs	r3, #0
     828:	2100      	movs	r1, #0
     82a:	6878      	ldr	r0, [r7, #4]
     82c:	f007 fdd2 	bl	83d4 <_Unwind_VRS_Get>
      return val;
     830:	68fb      	ldr	r3, [r7, #12]
    }
     832:	4618      	mov	r0, r3
     834:	3710      	adds	r7, #16
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	Address 0x000000000000083a is out of bounds.


0000083c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     846:	683b      	ldr	r3, [r7, #0]
     848:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     84a:	210f      	movs	r1, #15
     84c:	6878      	ldr	r0, [r7, #4]
     84e:	f7ff ffe1 	bl	814 <_Unwind_GetGR>
     852:	4603      	mov	r3, r0
     854:	f023 0301 	bic.w	r3, r3, #1
     858:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	6819      	ldr	r1, [r3, #0]
     85e:	68bb      	ldr	r3, [r7, #8]
     860:	3b04      	subs	r3, #4
     862:	461a      	mov	r2, r3
     864:	4806      	ldr	r0, [pc, #24]	; (880 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     866:	f005 fdb5 	bl	63d4 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     86a:	68fb      	ldr	r3, [r7, #12]
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	1c5a      	adds	r2, r3, #1
     870:	68fb      	ldr	r3, [r7, #12]
     872:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     874:	2300      	movs	r3, #0
}
     876:	4618      	mov	r0, r3
     878:	3710      	adds	r7, #16
     87a:	46bd      	mov	sp, r7
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop
     880:	000097a4 	.word	0x000097a4

00000884 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
     88c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     88e:	683b      	ldr	r3, [r7, #0]
     890:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     892:	210f      	movs	r1, #15
     894:	6878      	ldr	r0, [r7, #4]
     896:	f7ff ffbd 	bl	814 <_Unwind_GetGR>
     89a:	4603      	mov	r3, r0
     89c:	f023 0301 	bic.w	r3, r3, #1
     8a0:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	3b04      	subs	r3, #4
     8a6:	4619      	mov	r1, r3
     8a8:	4806      	ldr	r0, [pc, #24]	; (8c4 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     8aa:	f005 fd93 	bl	63d4 <printf>
  (*depth)++;
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	1c5a      	adds	r2, r3, #1
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     8b8:	2300      	movs	r3, #0
}
     8ba:	4618      	mov	r0, r3
     8bc:	3710      	adds	r7, #16
     8be:	46bd      	mov	sp, r7
     8c0:	bd80      	pop	{r7, pc}
     8c2:	bf00      	nop
     8c4:	000097b4 	.word	0x000097b4

000008c8 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
     8ce:	4603      	mov	r3, r0
     8d0:	6039      	str	r1, [r7, #0]
     8d2:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     8d8:	f107 030c 	add.w	r3, r7, #12
     8dc:	4619      	mov	r1, r3
     8de:	481a      	ldr	r0, [pc, #104]	; (948 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     8e0:	f008 f96a 	bl	8bb8 <_Unwind_Backtrace>
    if (final_address)
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d005      	beq.n	8f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	683a      	ldr	r2, [r7, #0]
     8ee:	4619      	mov	r1, r3
     8f0:	4816      	ldr	r0, [pc, #88]	; (94c <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     8f2:	f005 fd6f 	bl	63d4 <printf>
    }

    if (show_make_command)
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d020      	beq.n	93e <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     8fc:	4814      	ldr	r0, [pc, #80]	; (950 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     8fe:	f005 fd69 	bl	63d4 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     902:	4814      	ldr	r0, [pc, #80]	; (954 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     904:	f005 fd66 	bl	63d4 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     908:	2000      	movs	r0, #0
     90a:	f7ff ff63 	bl	7d4 <sjsu::build::Stringify(sjsu::build::Target)>
     90e:	4603      	mov	r3, r0
     910:	4619      	mov	r1, r3
     912:	4811      	ldr	r0, [pc, #68]	; (958 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     914:	f005 fd5e 	bl	63d4 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     918:	f107 030c 	add.w	r3, r7, #12
     91c:	4619      	mov	r1, r3
     91e:	480f      	ldr	r0, [pc, #60]	; (95c <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     920:	f008 f94a 	bl	8bb8 <_Unwind_Backtrace>
      if (final_address)
     924:	683b      	ldr	r3, [r7, #0]
     926:	2b00      	cmp	r3, #0
     928:	d003      	beq.n	932 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     92a:	6839      	ldr	r1, [r7, #0]
     92c:	480c      	ldr	r0, [pc, #48]	; (960 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     92e:	f005 fd51 	bl	63d4 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     932:	480c      	ldr	r0, [pc, #48]	; (964 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     934:	f005 fd4e 	bl	63d4 <printf>
      printf(
     938:	480b      	ldr	r0, [pc, #44]	; (968 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     93a:	f004 fc07 	bl	514c <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     93e:	bf00      	nop
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	0000083d 	.word	0x0000083d
     94c:	000097bc 	.word	0x000097bc
     950:	000097c8 	.word	0x000097c8
     954:	00009800 	.word	0x00009800
     958:	0000980c 	.word	0x0000980c
     95c:	00000885 	.word	0x00000885
     960:	00009828 	.word	0x00009828
     964:	00009830 	.word	0x00009830
     968:	00009838 	.word	0x00009838

0000096c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     96c:	b490      	push	{r4, r7}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     976:	683b      	ldr	r3, [r7, #0]
     978:	e9d3 3400 	ldrd	r3, r4, [r3]
     97c:	687a      	ldr	r2, [r7, #4]
     97e:	e9c2 3400 	strd	r3, r4, [r2]
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	3708      	adds	r7, #8
     988:	46bd      	mov	sp, r7
     98a:	bc90      	pop	{r4, r7}
     98c:	4770      	bx	lr
     98e:	Address 0x000000000000098e is out of bounds.


00000990 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     990:	b580      	push	{r7, lr}
     992:	b082      	sub	sp, #8
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	4903      	ldr	r1, [pc, #12]	; (9ac <sjsu::DefaultUptime()+0x1c>)
     99e:	4618      	mov	r0, r3
     9a0:	f002 fb1d 	bl	2fde <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	3708      	adds	r7, #8
     9a8:	46bd      	mov	sp, r7
     9aa:	bd80      	pop	{r7, pc}
     9ac:	10000120 	.word	0x10000120

000009b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     9b0:	b580      	push	{r7, lr}
     9b2:	b086      	sub	sp, #24
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     9b8:	6878      	ldr	r0, [r7, #4]
     9ba:	f000 f807 	bl	9cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     9be:	eef0 7a40 	vmov.f32	s15, s0
	}
     9c2:	eeb0 0a67 	vmov.f32	s0, s15
     9c6:	3718      	adds	r7, #24
     9c8:	46bd      	mov	sp, r7
     9ca:	bd80      	pop	{r7, pc}

000009cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	60f8      	str	r0, [r7, #12]
     9d4:	7239      	strb	r1, [r7, #8]
     9d6:	713a      	strb	r2, [r7, #4]
     9d8:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	edd3 7a00 	vldr	s15, [r3]
     9e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9f8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     9e4:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     9e8:	eeb0 0a67 	vmov.f32	s0, s15
     9ec:	3714      	adds	r7, #20
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	49742400 	.word	0x49742400

000009fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
     a04:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     a06:	2100      	movs	r1, #0
     a08:	6878      	ldr	r0, [r7, #4]
     a0a:	f000 f8e3 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     a0e:	f04f 000c 	mov.w	r0, #12
     a12:	f04f 0100 	mov.w	r1, #0
     a16:	f7ff fdd5 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     a1a:	4603      	mov	r3, r0
     a1c:	60bb      	str	r3, [r7, #8]
     a1e:	f107 0208 	add.w	r2, r7, #8
     a22:	463b      	mov	r3, r7
     a24:	4611      	mov	r1, r2
     a26:	4618      	mov	r0, r3
     a28:	f002 fb1b 	bl	3062 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     a2c:	4603      	mov	r3, r0
     a2e:	2b00      	cmp	r3, #0
     a30:	d00f      	beq.n	a52 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     a32:	4b16      	ldr	r3, [pc, #88]	; (a8c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     a34:	683a      	ldr	r2, [r7, #0]
     a36:	6819      	ldr	r1, [r3, #0]
     a38:	6878      	ldr	r0, [r7, #4]
     a3a:	f000 fadf 	bl	ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     a3e:	2101      	movs	r1, #1
     a40:	6878      	ldr	r0, [r7, #4]
     a42:	f000 f8eb 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     a46:	463b      	mov	r3, r7
     a48:	4619      	mov	r1, r3
     a4a:	4811      	ldr	r0, [pc, #68]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a4c:	f002 fb27 	bl	309e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     a50:	e007      	b.n	a62 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     a52:	2100      	movs	r1, #0
     a54:	6878      	ldr	r0, [r7, #4]
     a56:	f000 f8e1 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     a5a:	490e      	ldr	r1, [pc, #56]	; (a94 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     a5c:	480c      	ldr	r0, [pc, #48]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a5e:	f002 fb1e 	bl	309e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     a62:	2101      	movs	r1, #1
     a64:	6878      	ldr	r0, [r7, #4]
     a66:	f000 fb2d 	bl	10c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     a6a:	23ff      	movs	r3, #255	; 0xff
     a6c:	733b      	strb	r3, [r7, #12]
     a6e:	f107 030c 	add.w	r3, r7, #12
     a72:	2201      	movs	r2, #1
     a74:	4619      	mov	r1, r3
     a76:	6878      	ldr	r0, [r7, #4]
     a78:	f000 f80e 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     a7c:	2100      	movs	r1, #0
     a7e:	6878      	ldr	r0, [r7, #4]
     a80:	f000 fb5e 	bl	1140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     a84:	bf00      	nop
     a86:	3710      	adds	r7, #16
     a88:	46bd      	mov	sp, r7
     a8a:	bd80      	pop	{r7, pc}
     a8c:	00009fa8 	.word	0x00009fa8
     a90:	10000004 	.word	0x10000004
     a94:	00009fb0 	.word	0x00009fb0

00000a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     a98:	b580      	push	{r7, lr}
     a9a:	b084      	sub	sp, #16
     a9c:	af00      	add	r7, sp, #0
     a9e:	60f8      	str	r0, [r7, #12]
     aa0:	60b9      	str	r1, [r7, #8]
     aa2:	4613      	mov	r3, r2
     aa4:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	2b04      	cmp	r3, #4
     aaa:	d90d      	bls.n	ac8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     aac:	23b2      	movs	r3, #178	; 0xb2
     aae:	4a0b      	ldr	r2, [pc, #44]	; (adc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     ab0:	490b      	ldr	r1, [pc, #44]	; (ae0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     ab2:	480c      	ldr	r0, [pc, #48]	; (ae4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     ab4:	f005 fc8e 	bl	63d4 <printf>
     ab8:	480b      	ldr	r0, [pc, #44]	; (ae8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     aba:	f004 fb47 	bl	514c <puts>
     abe:	2100      	movs	r1, #0
     ac0:	2001      	movs	r0, #1
     ac2:	f7ff ff01 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     ac6:	e7fe      	b.n	ac6 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     ac8:	4b08      	ldr	r3, [pc, #32]	; (aec <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	79fa      	ldrb	r2, [r7, #7]
     ace:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     ad2:	bf00      	nop
     ad4:	3710      	adds	r7, #16
     ad6:	46bd      	mov	sp, r7
     ad8:	bd80      	pop	{r7, pc}
     ada:	bf00      	nop
     adc:	0000a2ac 	.word	0x0000a2ac
     ae0:	00009fcc 	.word	0x00009fcc
     ae4:	0000988c 	.word	0x0000988c
     ae8:	0000992c 	.word	0x0000992c
     aec:	10000128 	.word	0x10000128

00000af0 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     af0:	b480      	push	{r7}
     af2:	b083      	sub	sp, #12
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     b02:	4618      	mov	r0, r3
     b04:	370c      	adds	r7, #12
     b06:	46bd      	mov	sp, r7
     b08:	f85d 7b04 	ldr.w	r7, [sp], #4
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	10000128 	.word	0x10000128

00000b14 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     b14:	b480      	push	{r7}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     b1e:	681b      	ldr	r3, [r3, #0]
  }
     b20:	4618      	mov	r0, r3
     b22:	370c      	adds	r7, #12
     b24:	46bd      	mov	sp, r7
     b26:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2a:	4770      	bx	lr
     b2c:	10000004 	.word	0x10000004

00000b30 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     b30:	b480      	push	{r7}
     b32:	b085      	sub	sp, #20
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     b3a:	4b0b      	ldr	r3, [pc, #44]	; (b68 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     b42:	683a      	ldr	r2, [r7, #0]
     b44:	7812      	ldrb	r2, [r2, #0]
     b46:	4611      	mov	r1, r2
     b48:	2201      	movs	r2, #1
     b4a:	408a      	lsls	r2, r1
     b4c:	4013      	ands	r3, r2
     b4e:	2b00      	cmp	r3, #0
     b50:	bf14      	ite	ne
     b52:	2301      	movne	r3, #1
     b54:	2300      	moveq	r3, #0
     b56:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     b58:	7bfb      	ldrb	r3, [r7, #15]
  }
     b5a:	4618      	mov	r0, r3
     b5c:	3714      	adds	r7, #20
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	10000128 	.word	0x10000128

00000b6c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     b6c:	b590      	push	{r4, r7, lr}
     b6e:	b083      	sub	sp, #12
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
     b74:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b78:	681b      	ldr	r3, [r3, #0]
     b7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	4619      	mov	r1, r3
    system_controller->PCONP =
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b86:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b88:	4610      	mov	r0, r2
     b8a:	f002 fa9b 	bl	30c4 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     b8e:	4603      	mov	r3, r0
    system_controller->PCONP =
     b90:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     b94:	bf00      	nop
     b96:	370c      	adds	r7, #12
     b98:	46bd      	mov	sp, r7
     b9a:	bd90      	pop	{r4, r7, pc}
     b9c:	10000128 	.word	0x10000128

00000ba0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
     ba8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	4619      	mov	r1, r3
    system_controller->PCONP =
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bba:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     bbc:	4610      	mov	r0, r2
     bbe:	f002 fa93 	bl	30e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     bc2:	4603      	mov	r3, r0
    system_controller->PCONP =
     bc4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     bc8:	bf00      	nop
     bca:	370c      	adds	r7, #12
     bcc:	46bd      	mov	sp, r7
     bce:	bd90      	pop	{r4, r7, pc}
     bd0:	10000128 	.word	0x10000128

00000bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     bd4:	b590      	push	{r4, r7, lr}
     bd6:	b083      	sub	sp, #12
     bd8:	af00      	add	r7, sp, #0
     bda:	6078      	str	r0, [r7, #4]
     bdc:	460b      	mov	r3, r1
     bde:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     be0:	4b0c      	ldr	r3, [pc, #48]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     be8:	8879      	ldrh	r1, [r7, #2]
     bea:	4b0a      	ldr	r3, [pc, #40]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     bec:	681c      	ldr	r4, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	785b      	ldrb	r3, [r3, #1]
     bf4:	021b      	lsls	r3, r3, #8
     bf6:	431a      	orrs	r2, r3
     bf8:	2300      	movs	r3, #0
     bfa:	f362 030f 	bfi	r3, r2, #0, #16
     bfe:	461a      	mov	r2, r3
     c00:	f002 fa85 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c04:	4603      	mov	r3, r0
     c06:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	bd90      	pop	{r4, r7, pc}
     c12:	bf00      	nop
     c14:	10000128 	.word	0x10000128
     c18:	00009fb4 	.word	0x00009fb4

00000c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     c1c:	b590      	push	{r4, r7, lr}
     c1e:	b083      	sub	sp, #12
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
     c24:	460b      	mov	r3, r1
     c26:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     c30:	8879      	ldrh	r1, [r7, #2]
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c34:	681c      	ldr	r4, [r3, #0]
     c36:	4b0a      	ldr	r3, [pc, #40]	; (c60 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     c38:	781a      	ldrb	r2, [r3, #0]
     c3a:	785b      	ldrb	r3, [r3, #1]
     c3c:	021b      	lsls	r3, r3, #8
     c3e:	431a      	orrs	r2, r3
     c40:	2300      	movs	r3, #0
     c42:	f362 030f 	bfi	r3, r2, #0, #16
     c46:	461a      	mov	r2, r3
     c48:	f002 fa61 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c4c:	4603      	mov	r3, r0
     c4e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     c52:	bf00      	nop
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bd90      	pop	{r4, r7, pc}
     c5a:	bf00      	nop
     c5c:	10000128 	.word	0x10000128
     c60:	00009fc0 	.word	0x00009fc0

00000c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     c64:	b590      	push	{r4, r7, lr}
     c66:	b083      	sub	sp, #12
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	460b      	mov	r3, r1
     c6e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     c78:	8879      	ldrh	r1, [r7, #2]
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c7c:	681c      	ldr	r4, [r3, #0]
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     c80:	781a      	ldrb	r2, [r3, #0]
     c82:	785b      	ldrb	r3, [r3, #1]
     c84:	021b      	lsls	r3, r3, #8
     c86:	431a      	orrs	r2, r3
     c88:	2300      	movs	r3, #0
     c8a:	f362 030f 	bfi	r3, r2, #0, #16
     c8e:	461a      	mov	r2, r3
     c90:	f002 fa3d 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c94:	4603      	mov	r3, r0
     c96:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	bd90      	pop	{r4, r7, pc}
     ca2:	bf00      	nop
     ca4:	10000128 	.word	0x10000128
     ca8:	00009fc4 	.word	0x00009fc4

00000cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     cac:	b590      	push	{r4, r7, lr}
     cae:	b083      	sub	sp, #12
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
     cb4:	460b      	mov	r3, r1
     cb6:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     cb8:	4b0c      	ldr	r3, [pc, #48]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     cc0:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cc4:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	785b      	ldrb	r3, [r3, #1]
     ccc:	021b      	lsls	r3, r3, #8
     cce:	431a      	orrs	r2, r3
     cd0:	2300      	movs	r3, #0
     cd2:	f362 030f 	bfi	r3, r2, #0, #16
     cd6:	461a      	mov	r2, r3
     cd8:	f002 fa19 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     cdc:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     cde:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     ce2:	bf00      	nop
     ce4:	370c      	adds	r7, #12
     ce6:	46bd      	mov	sp, r7
     ce8:	bd90      	pop	{r4, r7, pc}
     cea:	bf00      	nop
     cec:	10000128 	.word	0x10000128
     cf0:	00009fc8 	.word	0x00009fc8

00000cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     cf4:	b580      	push	{r7, lr}
     cf6:	ed2d 8b02 	vpush	{d8}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
     d00:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	ed93 8a00 	vldr	s16, [r3]
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	4618      	mov	r0, r3
     d0c:	f7ff fc91 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     d10:	eef0 7a40 	vmov.f32	s15, s0
     d14:	eeb4 8ae7 	vcmpe.f32	s16, s15
     d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d1c:	bf4c      	ite	mi
     d1e:	2301      	movmi	r3, #1
     d20:	2300      	movpl	r3, #0
     d22:	b2db      	uxtb	r3, r3
		}
     d24:	4618      	mov	r0, r3
     d26:	3708      	adds	r7, #8
     d28:	46bd      	mov	sp, r7
     d2a:	ecbd 8b02 	vpop	{d8}
     d2e:	bd80      	pop	{r7, pc}

00000d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     d38:	6878      	ldr	r0, [r7, #4]
     d3a:	f000 f805 	bl	d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     d3e:	4603      	mov	r3, r0
		}
     d40:	4618      	mov	r0, r3
     d42:	3708      	adds	r7, #8
     d44:	46bd      	mov	sp, r7
     d46:	bd80      	pop	{r7, pc}

00000d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	4618      	mov	r0, r3
     d54:	f000 f80a 	bl	d6c <units::linear_scale<float>::operator()() const>
     d58:	eef0 7a40 	vmov.f32	s15, s0
     d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d60:	ee17 3a90 	vmov	r3, s15
		}
     d64:	4618      	mov	r0, r3
     d66:	3708      	adds	r7, #8
     d68:	46bd      	mov	sp, r7
     d6a:	bd80      	pop	{r7, pc}

00000d6c <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     d6c:	b480      	push	{r7}
     d6e:	b083      	sub	sp, #12
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	ee07 3a90 	vmov	s15, r3
     d7c:	eeb0 0a67 	vmov.f32	s0, s15
     d80:	370c      	adds	r7, #12
     d82:	46bd      	mov	sp, r7
     d84:	f85d 7b04 	ldr.w	r7, [sp], #4
     d88:	4770      	bx	lr

00000d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     d8a:	b580      	push	{r7, lr}
     d8c:	ed2d 8b02 	vpush	{d8}
     d90:	b084      	sub	sp, #16
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
     d96:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	4618      	mov	r0, r3
     d9c:	f7ff ffe6 	bl	d6c <units::linear_scale<float>::operator()() const>
     da0:	eeb0 8a40 	vmov.f32	s16, s0
     da4:	683b      	ldr	r3, [r7, #0]
     da6:	4618      	mov	r0, r3
     da8:	f7ff ffe0 	bl	d6c <units::linear_scale<float>::operator()() const>
     dac:	eef0 7a40 	vmov.f32	s15, s0
     db0:	edc7 7a03 	vstr	s15, [r7, #12]
     db4:	f107 030c 	add.w	r3, r7, #12
     db8:	4618      	mov	r0, r3
     dba:	f7ff fc3a 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     dbe:	eeb0 7a40 	vmov.f32	s14, s0
     dc2:	eec8 7a07 	vdiv.f32	s15, s16, s14
     dc6:	f107 0308 	add.w	r3, r7, #8
     dca:	eeb0 0a67 	vmov.f32	s0, s15
     dce:	4618      	mov	r0, r3
     dd0:	f000 f807 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     dd4:	68bb      	ldr	r3, [r7, #8]
	}
     dd6:	4618      	mov	r0, r3
     dd8:	3710      	adds	r7, #16
     dda:	46bd      	mov	sp, r7
     ddc:	ecbd 8b02 	vpop	{d8}
     de0:	bd80      	pop	{r7, pc}

00000de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     de2:	b580      	push	{r7, lr}
     de4:	b082      	sub	sp, #8
     de6:	af00      	add	r7, sp, #0
     de8:	6078      	str	r0, [r7, #4]
     dea:	ed87 0a00 	vstr	s0, [r7]
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	463a      	mov	r2, r7
     df2:	4611      	mov	r1, r2
     df4:	4618      	mov	r0, r3
     df6:	f7ff fc0c 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	4618      	mov	r0, r3
     dfe:	3708      	adds	r7, #8
     e00:	46bd      	mov	sp, r7
     e02:	bd80      	pop	{r7, pc}

00000e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	4618      	mov	r0, r3
     e12:	f7ff ffab 	bl	d6c <units::linear_scale<float>::operator()() const>
     e16:	eeb0 7a40 	vmov.f32	s14, s0
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	ee07 3a90 	vmov	s15, r3
     e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e24:	ee77 7a27 	vadd.f32	s15, s14, s15
     e28:	f107 030c 	add.w	r3, r7, #12
     e2c:	eeb0 0a67 	vmov.f32	s0, s15
     e30:	4618      	mov	r0, r3
     e32:	f7ff ffd6 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     e36:	68fb      	ldr	r3, [r7, #12]
	}
     e38:	4618      	mov	r0, r3
     e3a:	3710      	adds	r7, #16
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}

00000e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	4618      	mov	r0, r3
     e4c:	f7ff ff8e 	bl	d6c <units::linear_scale<float>::operator()() const>
     e50:	eef0 7a40 	vmov.f32	s15, s0
     e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e58:	ee17 3a90 	vmov	r3, s15
     e5c:	b29b      	uxth	r3, r3
		}
     e5e:	4618      	mov	r0, r3
     e60:	3708      	adds	r7, #8
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	Address 0x0000000000000e66 is out of bounds.


00000e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     e68:	b590      	push	{r4, r7, lr}
     e6a:	b08d      	sub	sp, #52	; 0x34
     e6c:	af00      	add	r7, sp, #0
     e6e:	60f8      	str	r0, [r7, #12]
     e70:	60b9      	str	r1, [r7, #8]
     e72:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     e74:	f44f 70c0 	mov.w	r0, #384	; 0x180
     e78:	f04f 0100 	mov.w	r1, #0
     e7c:	f7ff fba2 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     e80:	4603      	mov	r3, r0
     e82:	613b      	str	r3, [r7, #16]
     e84:	f107 0210 	add.w	r2, r7, #16
     e88:	1d3b      	adds	r3, r7, #4
     e8a:	4611      	mov	r1, r2
     e8c:	4618      	mov	r0, r3
     e8e:	f7ff ff31 	bl	cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     e92:	4603      	mov	r3, r0
     e94:	f083 0301 	eor.w	r3, r3, #1
     e98:	b2db      	uxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	d114      	bne.n	ec8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     e9e:	f04f 000c 	mov.w	r0, #12
     ea2:	f04f 0100 	mov.w	r1, #0
     ea6:	f7ff fb8d 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     eaa:	4603      	mov	r3, r0
     eac:	617b      	str	r3, [r7, #20]
     eae:	f107 0214 	add.w	r2, r7, #20
     eb2:	1d3b      	adds	r3, r7, #4
     eb4:	4611      	mov	r1, r2
     eb6:	4618      	mov	r0, r3
     eb8:	f002 f8d3 	bl	3062 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     ebc:	4603      	mov	r3, r0
     ebe:	f083 0301 	eor.w	r3, r3, #1
     ec2:	b2db      	uxtb	r3, r3
     ec4:	2b00      	cmp	r3, #0
     ec6:	d001      	beq.n	ecc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     ec8:	2301      	movs	r3, #1
     eca:	e000      	b.n	ece <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     ecc:	2300      	movs	r3, #0
     ece:	2b00      	cmp	r3, #0
     ed0:	d00d      	beq.n	eee <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     ed2:	23f6      	movs	r3, #246	; 0xf6
     ed4:	4a43      	ldr	r2, [pc, #268]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     ed6:	4944      	ldr	r1, [pc, #272]	; (fe8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     ed8:	4844      	ldr	r0, [pc, #272]	; (fec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     eda:	f005 fa7b 	bl	63d4 <printf>
     ede:	4844      	ldr	r0, [pc, #272]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     ee0:	f004 f934 	bl	514c <puts>
     ee4:	2100      	movs	r1, #0
     ee6:	2001      	movs	r0, #1
     ee8:	f7ff fcee 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     eec:	e7fe      	b.n	eec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     eee:	2301      	movs	r3, #1
     ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     ef4:	1d3b      	adds	r3, r7, #4
     ef6:	4618      	mov	r0, r3
     ef8:	f7ff ff1a 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     efc:	4604      	mov	r4, r0
     efe:	f107 0308 	add.w	r3, r7, #8
     f02:	4618      	mov	r0, r3
     f04:	f7ff ff14 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     f08:	4603      	mov	r3, r0
     f0a:	fbb4 f2f3 	udiv	r2, r4, r3
     f0e:	fb03 f302 	mul.w	r3, r3, r2
     f12:	1ae3      	subs	r3, r4, r3
     f14:	2b00      	cmp	r3, #0
     f16:	bf14      	ite	ne
     f18:	2301      	movne	r3, #1
     f1a:	2300      	moveq	r3, #0
     f1c:	b2db      	uxtb	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	d017      	beq.n	f52 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     f22:	f107 0208 	add.w	r2, r7, #8
     f26:	1d3b      	adds	r3, r7, #4
     f28:	4611      	mov	r1, r2
     f2a:	4618      	mov	r0, r3
     f2c:	f7ff ff2d 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f30:	4603      	mov	r3, r0
     f32:	61fb      	str	r3, [r7, #28]
     f34:	f107 031c 	add.w	r3, r7, #28
     f38:	2101      	movs	r1, #1
     f3a:	4618      	mov	r0, r3
     f3c:	f7ff ff62 	bl	e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     f40:	4603      	mov	r3, r0
     f42:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     f44:	f107 0318 	add.w	r3, r7, #24
     f48:	4618      	mov	r0, r3
     f4a:	f002 f8f2 	bl	3132 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f4e:	62b8      	str	r0, [r7, #40]	; 0x28
     f50:	e00e      	b.n	f70 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     f52:	f107 0208 	add.w	r2, r7, #8
     f56:	1d3b      	adds	r3, r7, #4
     f58:	4611      	mov	r1, r2
     f5a:	4618      	mov	r0, r3
     f5c:	f7ff ff15 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f60:	4603      	mov	r3, r0
     f62:	623b      	str	r3, [r7, #32]
      multiplier_value =
     f64:	f107 0320 	add.w	r3, r7, #32
     f68:	4618      	mov	r0, r3
     f6a:	f002 f8e2 	bl	3132 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f6e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     f70:	2301      	movs	r3, #1
     f72:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f78:	2b00      	cmp	r3, #0
     f7a:	d02d      	beq.n	fd8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     f7c:	f107 0308 	add.w	r3, r7, #8
     f80:	4618      	mov	r0, r3
     f82:	f7ff ff5d 	bl	e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     f86:	4603      	mov	r3, r0
     f88:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f8c:	b29b      	uxth	r3, r3
     f8e:	fb12 f303 	smulbb	r3, r2, r3
     f92:	b29b      	uxth	r3, r3
     f94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     f96:	fb12 f303 	smulbb	r3, r2, r3
     f9a:	b29b      	uxth	r3, r3
     f9c:	005b      	lsls	r3, r3, #1
     f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     fa2:	2b9b      	cmp	r3, #155	; 0x9b
     fa4:	d903      	bls.n	fae <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     fa6:	2300      	movs	r3, #0
     fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     fac:	e7e2      	b.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb0:	005b      	lsls	r3, r3, #1
     fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb6:	2b07      	cmp	r3, #7
     fb8:	d9dc      	bls.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     fba:	f44f 7389 	mov.w	r3, #274	; 0x112
     fbe:	4a09      	ldr	r2, [pc, #36]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     fc0:	490c      	ldr	r1, [pc, #48]	; (ff4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     fc2:	480d      	ldr	r0, [pc, #52]	; (ff8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     fc4:	f005 fa06 	bl	63d4 <printf>
     fc8:	4809      	ldr	r0, [pc, #36]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     fca:	f004 f8bf 	bl	514c <puts>
     fce:	2100      	movs	r1, #0
     fd0:	2001      	movs	r0, #1
     fd2:	f7ff fc79 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     fd6:	e7fe      	b.n	fd6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     fda:	4618      	mov	r0, r3
     fdc:	3734      	adds	r7, #52	; 0x34
     fde:	46bd      	mov	sp, r7
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	bf00      	nop
     fe4:	0000a330 	.word	0x0000a330
     fe8:	00009fe4 	.word	0x00009fe4
     fec:	00009944 	.word	0x00009944
     ff0:	0000992c 	.word	0x0000992c
     ff4:	00009ffc 	.word	0x00009ffc
     ff8:	00009a34 	.word	0x00009a34

00000ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     ffc:	b580      	push	{r7, lr}
     ffe:	b086      	sub	sp, #24
    1000:	af00      	add	r7, sp, #0
    1002:	60f8      	str	r0, [r7, #12]
    1004:	60b9      	str	r1, [r7, #8]
    1006:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    1008:	2301      	movs	r3, #1
    100a:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    100c:	687a      	ldr	r2, [r7, #4]
    100e:	68b9      	ldr	r1, [r7, #8]
    1010:	68f8      	ldr	r0, [r7, #12]
    1012:	f7ff ff29 	bl	e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    1016:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1018:	2100      	movs	r1, #0
    101a:	68f8      	ldr	r0, [r7, #12]
    101c:	f7ff fdda 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1020:	2100      	movs	r1, #0
    1022:	68f8      	ldr	r0, [r7, #12]
    1024:	f7ff fdfa 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1028:	2100      	movs	r1, #0
    102a:	68f8      	ldr	r0, [r7, #12]
    102c:	f7ff fe1a 	bl	c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1030:	2100      	movs	r1, #0
    1032:	68f8      	ldr	r0, [r7, #12]
    1034:	f7ff fe3a 	bl	cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1038:	4b21      	ldr	r3, [pc, #132]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1040:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1048:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    104a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    104c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    104e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1052:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    105a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    105e:	8afb      	ldrh	r3, [r7, #22]
    1060:	015b      	lsls	r3, r3, #5
    1062:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1064:	4b16      	ldr	r3, [pc, #88]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1066:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1068:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    106e:	4b14      	ldr	r3, [pc, #80]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1076:	4b12      	ldr	r3, [pc, #72]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	f042 0201 	orr.w	r2, r2, #1
    107e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    1082:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	22aa      	movs	r2, #170	; 0xaa
    1088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	2255      	movs	r2, #85	; 0x55
    1092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    109e:	210a      	movs	r1, #10
    10a0:	4618      	mov	r0, r3
    10a2:	f002 f861 	bl	3168 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    10a6:	4603      	mov	r3, r0
    10a8:	f083 0301 	eor.w	r3, r3, #1
    10ac:	b2db      	uxtb	r3, r3
    10ae:	2b00      	cmp	r3, #0
    10b0:	d001      	beq.n	10b6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    10b2:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    10b4:	e7ef      	b.n	1096 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    10b6:	bf00      	nop
    10b8:	3718      	adds	r7, #24
    10ba:	46bd      	mov	sp, r7
    10bc:	bd80      	pop	{r7, pc}
    10be:	bf00      	nop
    10c0:	10000128 	.word	0x10000128

000010c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    10c4:	b590      	push	{r4, r7, lr}
    10c6:	b083      	sub	sp, #12
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
    10cc:	460b      	mov	r3, r1
    10ce:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    10d0:	78fb      	ldrb	r3, [r7, #3]
    10d2:	2b1f      	cmp	r3, #31
    10d4:	d90e      	bls.n	10f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    10d6:	f44f 73a9 	mov.w	r3, #338	; 0x152
    10da:	4a13      	ldr	r2, [pc, #76]	; (1128 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    10dc:	4913      	ldr	r1, [pc, #76]	; (112c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    10de:	4814      	ldr	r0, [pc, #80]	; (1130 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    10e0:	f005 f978 	bl	63d4 <printf>
    10e4:	4813      	ldr	r0, [pc, #76]	; (1134 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    10e6:	f004 f831 	bl	514c <puts>
    10ea:	2100      	movs	r1, #0
    10ec:	2001      	movs	r0, #1
    10ee:	f7ff fbeb 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    10f2:	e7fe      	b.n	10f2 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    10f4:	4b10      	ldr	r3, [pc, #64]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10f6:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    10f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10fe:	681c      	ldr	r4, [r3, #0]
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    1102:	78f9      	ldrb	r1, [r7, #3]
    1104:	781a      	ldrb	r2, [r3, #0]
    1106:	785b      	ldrb	r3, [r3, #1]
    1108:	021b      	lsls	r3, r3, #8
    110a:	431a      	orrs	r2, r3
    110c:	2300      	movs	r3, #0
    110e:	f362 030f 	bfi	r3, r2, #0, #16
    1112:	461a      	mov	r2, r3
    1114:	f001 ff32 	bl	2f7c <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1118:	4603      	mov	r3, r0
    111a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    111e:	bf00      	nop
    1120:	370c      	adds	r7, #12
    1122:	46bd      	mov	sp, r7
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	bf00      	nop
    1128:	0000a3ac 	.word	0x0000a3ac
    112c:	0000a014 	.word	0x0000a014
    1130:	00009adc 	.word	0x00009adc
    1134:	0000992c 	.word	0x0000992c
    1138:	10000128 	.word	0x10000128
    113c:	00009fbc 	.word	0x00009fbc

00001140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1140:	b590      	push	{r4, r7, lr}
    1142:	b083      	sub	sp, #12
    1144:	af00      	add	r7, sp, #0
    1146:	6078      	str	r0, [r7, #4]
    1148:	460b      	mov	r3, r1
    114a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    114c:	4b0c      	ldr	r3, [pc, #48]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1154:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1158:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	785b      	ldrb	r3, [r3, #1]
    1160:	021b      	lsls	r3, r3, #8
    1162:	431a      	orrs	r2, r3
    1164:	2300      	movs	r3, #0
    1166:	f362 030f 	bfi	r3, r2, #0, #16
    116a:	461a      	mov	r2, r3
    116c:	f001 ffcf 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1170:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    1172:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    1176:	bf00      	nop
    1178:	370c      	adds	r7, #12
    117a:	46bd      	mov	sp, r7
    117c:	bd90      	pop	{r4, r7, pc}
    117e:	bf00      	nop
    1180:	10000128 	.word	0x10000128
    1184:	00009fb8 	.word	0x00009fb8

00001188 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    1188:	b480      	push	{r7}
    118a:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    118c:	4b02      	ldr	r3, [pc, #8]	; (1198 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    118e:	4618      	mov	r0, r3
    1190:	46bd      	mov	sp, r7
    1192:	f85d 7b04 	ldr.w	r7, [sp], #4
    1196:	4770      	bx	lr
    1198:	10000008 	.word	0x10000008

0000119c <sjsu::Uart::Write(unsigned char) const>:
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  /// @param byte - Write a single byte to the UART port.
  void Write(uint8_t byte) const
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	6078      	str	r0, [r7, #4]
    11a4:	460b      	mov	r3, r1
    11a6:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	3308      	adds	r3, #8
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	1cf9      	adds	r1, r7, #3
    11b2:	2201      	movs	r2, #1
    11b4:	6878      	ldr	r0, [r7, #4]
    11b6:	4798      	blx	r3
  }
    11b8:	bf00      	nop
    11ba:	3708      	adds	r7, #8
    11bc:	46bd      	mov	sp, r7
    11be:	bd80      	pop	{r7, pc}

000011c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  }
  /// Wait to receive just 1 byte
  ///
  /// @param timeout - The maximum amount of time to wait for a byte to be
  ///        transmitted.
  uint8_t Read(std::chrono::microseconds timeout =
    11c0:	b5b0      	push	{r4, r5, r7, lr}
    11c2:	b088      	sub	sp, #32
    11c4:	af02      	add	r7, sp, #8
    11c6:	60f8      	str	r0, [r7, #12]
    11c8:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	330c      	adds	r3, #12
    11d2:	681d      	ldr	r5, [r3, #0]
    11d4:	f107 0117 	add.w	r1, r7, #23
    11d8:	e9d7 3400 	ldrd	r3, r4, [r7]
    11dc:	e9cd 3400 	strd	r3, r4, [sp]
    11e0:	2201      	movs	r2, #1
    11e2:	68f8      	ldr	r0, [r7, #12]
    11e4:	47a8      	blx	r5
    11e6:	4603      	mov	r3, r0
    11e8:	2b01      	cmp	r3, #1
    11ea:	bf0c      	ite	eq
    11ec:	2301      	moveq	r3, #1
    11ee:	2300      	movne	r3, #0
    11f0:	b2db      	uxtb	r3, r3
    11f2:	2b00      	cmp	r3, #0
    11f4:	d001      	beq.n	11fa <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    11f6:	23ff      	movs	r3, #255	; 0xff
    11f8:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    11fa:	7dfb      	ldrb	r3, [r7, #23]
  }
    11fc:	4618      	mov	r0, r3
    11fe:	3718      	adds	r7, #24
    1200:	46bd      	mov	sp, r7
    1202:	bdb0      	pop	{r4, r5, r7, pc}

00001204 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    1204:	b480      	push	{r7}
    1206:	b089      	sub	sp, #36	; 0x24
    1208:	af00      	add	r7, sp, #0
    120a:	6078      	str	r0, [r7, #4]
    120c:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	2200      	movs	r2, #0
    1214:	601a      	str	r2, [r3, #0]
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	2200      	movs	r2, #0
    121a:	605a      	str	r2, [r3, #4]
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	2201      	movs	r2, #1
    1220:	609a      	str	r2, [r3, #8]
  bool finished = false;
    1222:	2300      	movs	r3, #0
    1224:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    1226:	2300      	movs	r3, #0
    1228:	61bb      	str	r3, [r7, #24]
    122a:	69bb      	ldr	r3, [r7, #24]
    122c:	2b0e      	cmp	r3, #14
    122e:	dc4f      	bgt.n	12d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    1230:	7ffb      	ldrb	r3, [r7, #31]
    1232:	2b00      	cmp	r3, #0
    1234:	d14c      	bne.n	12d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1236:	69bb      	ldr	r3, [r7, #24]
    1238:	3301      	adds	r3, #1
    123a:	617b      	str	r3, [r7, #20]
    123c:	697b      	ldr	r3, [r7, #20]
    123e:	2b0e      	cmp	r3, #14
    1240:	dc42      	bgt.n	12c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    1242:	7ffb      	ldrb	r3, [r7, #31]
    1244:	2b00      	cmp	r3, #0
    1246:	d13f      	bne.n	12c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    1248:	69bb      	ldr	r3, [r7, #24]
    124a:	ee07 3a90 	vmov	s15, r3
    124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1252:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    1256:	697b      	ldr	r3, [r7, #20]
    1258:	ee07 3a90 	vmov	s15, r3
    125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1260:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    1264:	edd7 6a04 	vldr	s13, [r7, #16]
    1268:	ed97 7a03 	vldr	s14, [r7, #12]
    126c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1274:	ee77 7a87 	vadd.f32	s15, s15, s14
    1278:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    127c:	edd7 7a02 	vldr	s15, [r7, #8]
    1280:	ed9f 7a17 	vldr	s14, [pc, #92]	; 12e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1284:	ee77 7a87 	vadd.f32	s15, s15, s14
    1288:	ed97 7a00 	vldr	s14, [r7]
    128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1294:	d814      	bhi.n	12c0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    1296:	edd7 7a02 	vldr	s15, [r7, #8]
    129a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 12e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    129e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    12a2:	ed97 7a00 	vldr	s14, [r7]
    12a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12ae:	db07      	blt.n	12c0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    12b0:	69ba      	ldr	r2, [r7, #24]
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    12b6:	697a      	ldr	r2, [r7, #20]
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	609a      	str	r2, [r3, #8]
        finished          = true;
    12bc:	2301      	movs	r3, #1
    12be:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    12c0:	697b      	ldr	r3, [r7, #20]
    12c2:	3301      	adds	r3, #1
    12c4:	617b      	str	r3, [r7, #20]
    12c6:	e7b9      	b.n	123c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	3301      	adds	r3, #1
    12cc:	61bb      	str	r3, [r7, #24]
    12ce:	e7ac      	b.n	122a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    12d0:	bf00      	nop
}
    12d2:	6878      	ldr	r0, [r7, #4]
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop
    12e0:	3d4ccccd 	.word	0x3d4ccccd

000012e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    12e4:	b480      	push	{r7}
    12e6:	b087      	sub	sp, #28
    12e8:	af00      	add	r7, sp, #0
    12ea:	ed87 0a03 	vstr	s0, [r7, #12]
    12ee:	edc7 0a02 	vstr	s1, [r7, #8]
    12f2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	ee07 3a90 	vmov	s15, r3
    12fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12fe:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    1302:	edd7 7a03 	vldr	s15, [r7, #12]
    1306:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    130a:	ee27 7a87 	vmul.f32	s14, s15, s14
    130e:	edd7 7a02 	vldr	s15, [r7, #8]
    1312:	ee67 7a27 	vmul.f32	s15, s14, s15
    1316:	ed97 7a05 	vldr	s14, [r7, #20]
    131a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    131e:	eef0 7a66 	vmov.f32	s15, s13
}
    1322:	eeb0 0a67 	vmov.f32	s0, s15
    1326:	371c      	adds	r7, #28
    1328:	46bd      	mov	sp, r7
    132a:	f85d 7b04 	ldr.w	r7, [sp], #4
    132e:	4770      	bx	lr

00001330 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    1330:	b480      	push	{r7}
    1332:	b087      	sub	sp, #28
    1334:	af00      	add	r7, sp, #0
    1336:	ed87 0a03 	vstr	s0, [r7, #12]
    133a:	edc7 0a02 	vstr	s1, [r7, #8]
    133e:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	ee07 3a90 	vmov	s15, r3
    1346:	eef8 7a67 	vcvt.f32.u32	s15, s15
    134a:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    134e:	edd7 7a03 	vldr	s15, [r7, #12]
    1352:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1356:	ee27 7a87 	vmul.f32	s14, s15, s14
    135a:	edd7 7a02 	vldr	s15, [r7, #8]
    135e:	ee67 7a27 	vmul.f32	s15, s14, s15
    1362:	ed97 7a05 	vldr	s14, [r7, #20]
    1366:	eec7 6a27 	vdiv.f32	s13, s14, s15
    136a:	eef0 7a66 	vmov.f32	s15, s13
}
    136e:	eeb0 0a67 	vmov.f32	s0, s15
    1372:	371c      	adds	r7, #28
    1374:	46bd      	mov	sp, r7
    1376:	f85d 7b04 	ldr.w	r7, [sp], #4
    137a:	4770      	bx	lr

0000137c <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    137c:	b480      	push	{r7}
    137e:	b083      	sub	sp, #12
    1380:	af00      	add	r7, sp, #0
    1382:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    1386:	edd7 7a01 	vldr	s15, [r7, #4]
    138a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    138e:	ee77 7a87 	vadd.f32	s15, s15, s14
    1392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    139a:	eeb0 0a67 	vmov.f32	s0, s15
    139e:	370c      	adds	r7, #12
    13a0:	46bd      	mov	sp, r7
    13a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a6:	4770      	bx	lr

000013a8 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	b086      	sub	sp, #24
    13ac:	af00      	add	r7, sp, #0
    13ae:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    13b2:	2300      	movs	r3, #0
    13b4:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    13b6:	ed97 0a01 	vldr	s0, [r7, #4]
    13ba:	f7ff ffdf 	bl	137c <sjsu::lpc40xx::uart::RoundFloat(float)>
    13be:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    13c2:	ed97 7a01 	vldr	s14, [r7, #4]
    13c6:	edd7 7a04 	vldr	s15, [r7, #16]
    13ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    13ce:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    13d2:	edd7 7a03 	vldr	s15, [r7, #12]
    13d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1404 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    13da:	eef4 7ac7 	vcmpe.f32	s15, s14
    13de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13e2:	db0a      	blt.n	13fa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    13e4:	edd7 7a03 	vldr	s15, [r7, #12]
    13e8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1408 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    13ec:	eef4 7ac7 	vcmpe.f32	s15, s14
    13f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13f4:	d801      	bhi.n	13fa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    13f6:	2301      	movs	r3, #1
    13f8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    13fa:	7dfb      	ldrb	r3, [r7, #23]
}
    13fc:	4618      	mov	r0, r3
    13fe:	3718      	adds	r7, #24
    1400:	46bd      	mov	sp, r7
    1402:	bd80      	pop	{r7, pc}
    1404:	bd4ccccd 	.word	0xbd4ccccd
    1408:	3d4ccccd 	.word	0x3d4ccccd

0000140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    1414:	6878      	ldr	r0, [r7, #4]
    1416:	f000 f805 	bl	1424 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    141a:	4603      	mov	r3, r0
	}
    141c:	4618      	mov	r0, r3
    141e:	3708      	adds	r7, #8
    1420:	46bd      	mov	sp, r7
    1422:	bd80      	pop	{r7, pc}

00001424 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	4618      	mov	r0, r3
    1430:	f7ff fc9c 	bl	d6c <units::linear_scale<float>::operator()() const>
    1434:	eef0 7a40 	vmov.f32	s15, s0
    1438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    143c:	ee17 3a90 	vmov	r3, s15
		}
    1440:	4618      	mov	r0, r3
    1442:	3708      	adds	r7, #8
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}

00001448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    1448:	b590      	push	{r4, r7, lr}
    144a:	b091      	sub	sp, #68	; 0x44
    144c:	af00      	add	r7, sp, #0
    144e:	61f8      	str	r0, [r7, #28]
    1450:	61b9      	str	r1, [r7, #24]
    1452:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    1454:	f107 0314 	add.w	r3, r7, #20
    1458:	4618      	mov	r0, r3
    145a:	f7ff ffd7 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    145e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    1460:	2300      	movs	r3, #0
    1462:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    1464:	69fb      	ldr	r3, [r7, #28]
    1466:	2200      	movs	r2, #0
    1468:	601a      	str	r2, [r3, #0]
    146a:	69fb      	ldr	r3, [r7, #28]
    146c:	2200      	movs	r2, #0
    146e:	605a      	str	r2, [r3, #4]
    1470:	69fb      	ldr	r3, [r7, #28]
    1472:	2201      	movs	r2, #1
    1474:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    1476:	69bb      	ldr	r3, [r7, #24]
    1478:	ee07 3a90 	vmov	s15, r3
    147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1480:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    1484:	f04f 0300 	mov.w	r3, #0
    1488:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    148a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    148e:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1490:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    1494:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    1496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    149e:	2b04      	cmp	r3, #4
    14a0:	f000 80be 	beq.w	1620 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    14a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14a6:	2b03      	cmp	r3, #3
    14a8:	f200 80b8 	bhi.w	161c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    14ac:	a201      	add	r2, pc, #4	; (adr r2, 14b4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    14ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14b2:	bf00      	nop
    14b4:	000014c5 	.word	0x000014c5
    14b8:	0000151f 	.word	0x0000151f
    14bc:	0000157f 	.word	0x0000157f
    14c0:	000015ef 	.word	0x000015ef
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    14c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    14ca:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    14ce:	f7ff ff09 	bl	12e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    14d2:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    14d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    14da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    14de:	eef4 7ac7 	vcmpe.f32	s15, s14
    14e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14e6:	d505      	bpl.n	14f4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    14e8:	69fb      	ldr	r3, [r7, #28]
    14ea:	2200      	movs	r2, #0
    14ec:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    14ee:	2304      	movs	r3, #4
    14f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    14f2:	e094      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    14f4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    14f8:	f7ff ff56 	bl	13a8 <sjsu::lpc40xx::uart::IsDecmial(float)>
    14fc:	4603      	mov	r3, r0
    14fe:	2b00      	cmp	r3, #0
    1500:	d00a      	beq.n	1518 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    1502:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    150a:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    150e:	69fb      	ldr	r3, [r7, #28]
    1510:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    1512:	2304      	movs	r3, #4
    1514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1516:	e082      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    1518:	2301      	movs	r3, #1
    151a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    151c:	e07f      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    151e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1520:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    1524:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1528:	f7ff fedc 	bl	12e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    152c:	eef0 7a40 	vmov.f32	s15, s0
    1530:	eeb0 0a67 	vmov.f32	s0, s15
    1534:	f7ff ff22 	bl	137c <sjsu::lpc40xx::uart::RoundFloat(float)>
    1538:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    153c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    153e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    1542:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1546:	f7ff fef3 	bl	1330 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    154a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    154e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1552:	ed9f 7a36 	vldr	s14, [pc, #216]	; 162c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    1556:	eef4 7ac7 	vcmpe.f32	s15, s14
    155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    155e:	db0b      	blt.n	1578 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    1560:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1564:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1630 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    1568:	eef4 7ac7 	vcmpe.f32	s15, s14
    156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1570:	d802      	bhi.n	1578 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    1572:	2303      	movs	r3, #3
    1574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    1576:	e052      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    1578:	2302      	movs	r3, #2
    157a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    157c:	e04f      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    157e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1586:	ee77 7a87 	vadd.f32	s15, s15, s14
    158a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    158e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1592:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1596:	eef4 7ac7 	vcmpe.f32	s15, s14
    159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    159e:	dd02      	ble.n	15a6 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    15a0:	2304      	movs	r3, #4
    15a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    15a4:	e03b      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    15a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    15aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    15ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    15b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15b6:	dd0f      	ble.n	15d8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    15b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    15c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    15c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    15d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    15d8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    15dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    15e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    15e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    15e8:	2301      	movs	r3, #1
    15ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15ec:	e017      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    15ee:	69fc      	ldr	r4, [r7, #28]
    15f0:	463b      	mov	r3, r7
    15f2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    15f6:	4618      	mov	r0, r3
    15f8:	f7ff fe04 	bl	1204 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    15fc:	463b      	mov	r3, r7
    15fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    1606:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    160e:	ee17 2a90 	vmov	r2, s15
    1612:	69fb      	ldr	r3, [r7, #28]
    1614:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    1616:	2304      	movs	r3, #4
    1618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    161a:	e000      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    161c:	bf00      	nop
  while (state != States::kDone)
    161e:	e73d      	b.n	149c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    1620:	bf00      	nop
}
    1622:	69f8      	ldr	r0, [r7, #28]
    1624:	3744      	adds	r7, #68	; 0x44
    1626:	46bd      	mov	sp, r7
    1628:	bd90      	pop	{r4, r7, pc}
    162a:	bf00      	nop
    162c:	3f8ccccd 	.word	0x3f8ccccd
    1630:	3ff33333 	.word	0x3ff33333

00001634 <sjsu::Uart::Uart()>:
class Uart
    1634:	b480      	push	{r7}
    1636:	b083      	sub	sp, #12
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	4a04      	ldr	r2, [pc, #16]	; (1650 <sjsu::Uart::Uart()+0x1c>)
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	601a      	str	r2, [r3, #0]
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	4618      	mov	r0, r3
    1646:	370c      	adds	r7, #12
    1648:	46bd      	mov	sp, r7
    164a:	f85d 7b04 	ldr.w	r7, [sp], #4
    164e:	4770      	bx	lr
    1650:	0000a244 	.word	0x0000a244

00001654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    1654:	b580      	push	{r7, lr}
    1656:	b084      	sub	sp, #16
    1658:	af00      	add	r7, sp, #0
    165a:	60f8      	str	r0, [r7, #12]
    165c:	60b9      	str	r1, [r7, #8]
    165e:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	4618      	mov	r0, r3
    1664:	f7ff ffe6 	bl	1634 <sjsu::Uart::Uart()>
    1668:	4a06      	ldr	r2, [pc, #24]	; (1684 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	601a      	str	r2, [r3, #0]
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	68ba      	ldr	r2, [r7, #8]
    1672:	605a      	str	r2, [r3, #4]
    1674:	68fb      	ldr	r3, [r7, #12]
    1676:	687a      	ldr	r2, [r7, #4]
    1678:	609a      	str	r2, [r3, #8]
  {
  }
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	4618      	mov	r0, r3
    167e:	3710      	adds	r7, #16
    1680:	46bd      	mov	sp, r7
    1682:	bd80      	pop	{r7, pc}
    1684:	0000a228 	.word	0x0000a228

00001688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1688:	b580      	push	{r7, lr}
    168a:	b084      	sub	sp, #16
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    1692:	2307      	movs	r3, #7
    1694:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	6898      	ldr	r0, [r3, #8]
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	689b      	ldr	r3, [r3, #8]
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	3314      	adds	r3, #20
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	6852      	ldr	r2, [r2, #4]
    16a8:	3204      	adds	r2, #4
    16aa:	4611      	mov	r1, r2
    16ac:	4798      	blx	r3

    SetBaudRate(baud_rate);
    16ae:	6839      	ldr	r1, [r7, #0]
    16b0:	6878      	ldr	r0, [r7, #4]
    16b2:	f000 f849 	bl	1748 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	685b      	ldr	r3, [r3, #4]
    16ba:	68d8      	ldr	r0, [r3, #12]
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	685b      	ldr	r3, [r3, #4]
    16c0:	68db      	ldr	r3, [r3, #12]
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	687a      	ldr	r2, [r7, #4]
    16c8:	6852      	ldr	r2, [r2, #4]
    16ca:	7c12      	ldrb	r2, [r2, #16]
    16cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    16d0:	b2d2      	uxtb	r2, r2
    16d2:	4611      	mov	r1, r2
    16d4:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	685b      	ldr	r3, [r3, #4]
    16da:	6898      	ldr	r0, [r3, #8]
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	689b      	ldr	r3, [r3, #8]
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	687a      	ldr	r2, [r7, #4]
    16e8:	6852      	ldr	r2, [r2, #4]
    16ea:	7c12      	ldrb	r2, [r2, #16]
    16ec:	f3c2 0202 	ubfx	r2, r2, #0, #3
    16f0:	b2d2      	uxtb	r2, r2
    16f2:	4611      	mov	r1, r2
    16f4:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	685b      	ldr	r3, [r3, #4]
    16fa:	68da      	ldr	r2, [r3, #12]
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	685b      	ldr	r3, [r3, #4]
    1700:	68db      	ldr	r3, [r3, #12]
    1702:	681b      	ldr	r3, [r3, #0]
    1704:	3304      	adds	r3, #4
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	2102      	movs	r1, #2
    170a:	4610      	mov	r0, r2
    170c:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	685b      	ldr	r3, [r3, #4]
    1712:	689a      	ldr	r2, [r3, #8]
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	689b      	ldr	r3, [r3, #8]
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	3304      	adds	r3, #4
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	2102      	movs	r1, #2
    1722:	4610      	mov	r0, r2
    1724:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	685b      	ldr	r3, [r3, #4]
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	7a1b      	ldrb	r3, [r3, #8]
    172e:	b2da      	uxtb	r2, r3
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	685b      	ldr	r3, [r3, #4]
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	f042 0207 	orr.w	r2, r2, #7
    173a:	b2d2      	uxtb	r2, r2
    173c:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    173e:	2300      	movs	r3, #0
  }
    1740:	4618      	mov	r0, r3
    1742:	3710      	adds	r7, #16
    1744:	46bd      	mov	sp, r7
    1746:	bd80      	pop	{r7, pc}

00001748 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    1748:	b580      	push	{r7, lr}
    174a:	b086      	sub	sp, #24
    174c:	af00      	add	r7, sp, #0
    174e:	6078      	str	r0, [r7, #4]
    1750:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	689a      	ldr	r2, [r3, #8]
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	685b      	ldr	r3, [r3, #4]
    175a:	3304      	adds	r3, #4
    175c:	4619      	mov	r1, r3
    175e:	4610      	mov	r0, r2
    1760:	f7ff f80f 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1764:	4602      	mov	r2, r0
    1766:	f107 0308 	add.w	r3, r7, #8
    176a:	6839      	ldr	r1, [r7, #0]
    176c:	4618      	mov	r0, r3
    176e:	f7ff fe6b 	bl	1448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    1772:	2380      	movs	r3, #128	; 0x80
    1774:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    1776:	68bb      	ldr	r3, [r7, #8]
    1778:	0a1b      	lsrs	r3, r3, #8
    177a:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    177c:	68bb      	ldr	r3, [r7, #8]
    177e:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1780:	693b      	ldr	r3, [r7, #16]
    1782:	b2db      	uxtb	r3, r3
    1784:	011b      	lsls	r3, r3, #4
    1786:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	b2db      	uxtb	r3, r3
    178c:	f003 030f 	and.w	r3, r3, #15
    1790:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1792:	4313      	orrs	r3, r2
    1794:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	685b      	ldr	r3, [r3, #4]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	2280      	movs	r2, #128	; 0x80
    179e:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	7dba      	ldrb	r2, [r7, #22]
    17a8:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	685b      	ldr	r3, [r3, #4]
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	7d7a      	ldrb	r2, [r7, #21]
    17b2:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	685b      	ldr	r3, [r3, #4]
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	7d3a      	ldrb	r2, [r7, #20]
    17bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	2203      	movs	r2, #3
    17c8:	731a      	strb	r2, [r3, #12]
    return true;
    17ca:	2301      	movs	r3, #1
  }
    17cc:	4618      	mov	r0, r3
    17ce:	3718      	adds	r7, #24
    17d0:	46bd      	mov	sp, r7
    17d2:	bd80      	pop	{r7, pc}

000017d4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    17d4:	b580      	push	{r7, lr}
    17d6:	b086      	sub	sp, #24
    17d8:	af00      	add	r7, sp, #0
    17da:	60f8      	str	r0, [r7, #12]
    17dc:	60b9      	str	r1, [r7, #8]
    17de:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    17e0:	2300      	movs	r3, #0
    17e2:	617b      	str	r3, [r7, #20]
    17e4:	697a      	ldr	r2, [r7, #20]
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	429a      	cmp	r2, r3
    17ea:	d216      	bcs.n	181a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    17ec:	68ba      	ldr	r2, [r7, #8]
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	441a      	add	r2, r3
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	685b      	ldr	r3, [r3, #4]
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	7812      	ldrb	r2, [r2, #0]
    17fa:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    17fc:	68f8      	ldr	r0, [r7, #12]
    17fe:	f000 f8b5 	bl	196c <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    1802:	4603      	mov	r3, r0
    1804:	f083 0301 	eor.w	r3, r3, #1
    1808:	b2db      	uxtb	r3, r3
    180a:	2b00      	cmp	r3, #0
    180c:	d001      	beq.n	1812 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    180e:	bf00      	nop
      while (!TransmissionComplete())
    1810:	e7f4      	b.n	17fc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    1812:	697b      	ldr	r3, [r7, #20]
    1814:	3301      	adds	r3, #1
    1816:	617b      	str	r3, [r7, #20]
    1818:	e7e4      	b.n	17e4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    181a:	bf00      	nop
    181c:	3718      	adds	r7, #24
    181e:	46bd      	mov	sp, r7
    1820:	bd80      	pop	{r7, pc}

00001822 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1822:	b590      	push	{r4, r7, lr}
    1824:	b083      	sub	sp, #12
    1826:	af00      	add	r7, sp, #0
    1828:	6078      	str	r0, [r7, #4]
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    182e:	4618      	mov	r0, r3
    1830:	f000 f88a 	bl	1948 <sjsu::lpc40xx::Uart::HasData() const>
    1834:	4603      	mov	r3, r0
    1836:	2b00      	cmp	r3, #0
    1838:	d010      	beq.n	185c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    183e:	685b      	ldr	r3, [r3, #4]
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    184a:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1850:	6813      	ldr	r3, [r2, #0]
    1852:	1c58      	adds	r0, r3, #1
    1854:	6010      	str	r0, [r2, #0]
    1856:	440b      	add	r3, r1
    1858:	4622      	mov	r2, r4
    185a:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    1860:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    1866:	429a      	cmp	r2, r3
    1868:	d301      	bcc.n	186e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    186a:	2301      	movs	r3, #1
    186c:	e000      	b.n	1870 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    186e:	2300      	movs	r3, #0
    });
    1870:	4618      	mov	r0, r3
    1872:	370c      	adds	r7, #12
    1874:	46bd      	mov	sp, r7
    1876:	bd90      	pop	{r4, r7, pc}

00001878 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    1878:	b590      	push	{r4, r7, lr}
    187a:	b09d      	sub	sp, #116	; 0x74
    187c:	af00      	add	r7, sp, #0
    187e:	6178      	str	r0, [r7, #20]
    1880:	6139      	str	r1, [r7, #16]
    1882:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    1884:	2300      	movs	r3, #0
    1886:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1888:	697b      	ldr	r3, [r7, #20]
    188a:	643b      	str	r3, [r7, #64]	; 0x40
    188c:	f107 0310 	add.w	r3, r7, #16
    1890:	647b      	str	r3, [r7, #68]	; 0x44
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	64bb      	str	r3, [r7, #72]	; 0x48
    1896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    189a:	64fb      	str	r3, [r7, #76]	; 0x4c
    189c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    18a0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    18a4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    18a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    18ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    18ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    18b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
    18b6:	4618      	mov	r0, r3
    18b8:	f000 ff47 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    18bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
    18c0:	f107 0320 	add.w	r3, r7, #32
    18c4:	4611      	mov	r1, r2
    18c6:	4618      	mov	r0, r3
    18c8:	f001 fba4 	bl	3014 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18cc:	4603      	mov	r3, r0
    18ce:	2b00      	cmp	r3, #0
    18d0:	d004      	beq.n	18dc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    18d2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    18d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    18da:	e011      	b.n	1900 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    18dc:	4b19      	ldr	r3, [pc, #100]	; (1944 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    18de:	681b      	ldr	r3, [r3, #0]
    18e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
    18e4:	4610      	mov	r0, r2
    18e6:	4798      	blx	r3
    18e8:	463b      	mov	r3, r7
    18ea:	f107 0220 	add.w	r2, r7, #32
    18ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
    18f2:	4618      	mov	r0, r3
    18f4:	f001 fd87 	bl	3406 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18f8:	e9d7 3400 	ldrd	r3, r4, [r7]
    18fc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    1900:	2301      	movs	r3, #1
    1902:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    1904:	4b0f      	ldr	r3, [pc, #60]	; (1944 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	f107 0250 	add.w	r2, r7, #80	; 0x50
    190c:	4610      	mov	r0, r2
    190e:	4798      	blx	r3
    1910:	f107 0218 	add.w	r2, r7, #24
    1914:	f107 0350 	add.w	r3, r7, #80	; 0x50
    1918:	4611      	mov	r1, r2
    191a:	4618      	mov	r0, r3
    191c:	f001 fda0 	bl	3460 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1920:	4603      	mov	r3, r0
    1922:	2b00      	cmp	r3, #0
    1924:	d009      	beq.n	193a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    1926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    192a:	4618      	mov	r0, r3
    192c:	f7ff ff79 	bl	1822 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    1930:	4603      	mov	r3, r0
    1932:	2b00      	cmp	r3, #0
    1934:	d0e6      	beq.n	1904 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    1936:	2300      	movs	r3, #0
    1938:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    193a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    193c:	4618      	mov	r0, r3
    193e:	3774      	adds	r7, #116	; 0x74
    1940:	46bd      	mov	sp, r7
    1942:	bd90      	pop	{r4, r7, pc}
    1944:	10000000 	.word	0x10000000

00001948 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	7d1b      	ldrb	r3, [r3, #20]
    1958:	b2db      	uxtb	r3, r3
    195a:	2100      	movs	r1, #0
    195c:	4618      	mov	r0, r3
    195e:	f001 fc1a 	bl	3196 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1962:	4603      	mov	r3, r0
  }
    1964:	4618      	mov	r0, r3
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}

0000196c <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	685b      	ldr	r3, [r3, #4]
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	7d1b      	ldrb	r3, [r3, #20]
    197c:	b2db      	uxtb	r3, r3
    197e:	2105      	movs	r1, #5
    1980:	4618      	mov	r0, r3
    1982:	f001 fc08 	bl	3196 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1986:	4603      	mov	r3, r0
  }
    1988:	4618      	mov	r0, r3
    198a:	3708      	adds	r7, #8
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}

00001990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
  }
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	6818      	ldr	r0, [r3, #0]
    199a:	4b08      	ldr	r3, [pc, #32]	; (19bc <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    199c:	781a      	ldrb	r2, [r3, #0]
    199e:	785b      	ldrb	r3, [r3, #1]
    19a0:	021b      	lsls	r3, r3, #8
    19a2:	431a      	orrs	r2, r3
    19a4:	2300      	movs	r3, #0
    19a6:	f362 030f 	bfi	r3, r2, #0, #16
    19aa:	4619      	mov	r1, r3
    19ac:	f001 fc0a 	bl	31c4 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    19b0:	4603      	mov	r3, r0
  }
    19b2:	4618      	mov	r0, r3
    19b4:	bd80      	pop	{r7, pc}
    19b6:	bf00      	nop
    19b8:	1000012c 	.word	0x1000012c
    19bc:	0000a064 	.word	0x0000a064

000019c0 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    19c0:	b480      	push	{r7}
    19c2:	b083      	sub	sp, #12
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
    19c8:	4a04      	ldr	r2, [pc, #16]	; (19dc <sjsu::Adc::Adc()+0x1c>)
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	601a      	str	r2, [r3, #0]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	4618      	mov	r0, r3
    19d2:	370c      	adds	r7, #12
    19d4:	46bd      	mov	sp, r7
    19d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    19da:	4770      	bx	lr
    19dc:	0000a214 	.word	0x0000a214

000019e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    19e0:	b580      	push	{r7, lr}
    19e2:	b084      	sub	sp, #16
    19e4:	af00      	add	r7, sp, #0
    19e6:	60f8      	str	r0, [r7, #12]
    19e8:	60b9      	str	r1, [r7, #8]
    19ea:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	4618      	mov	r0, r3
    19f0:	f7ff ffe6 	bl	19c0 <sjsu::Adc::Adc()>
    19f4:	4a06      	ldr	r2, [pc, #24]	; (1a10 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	601a      	str	r2, [r3, #0]
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	68ba      	ldr	r2, [r7, #8]
    19fe:	605a      	str	r2, [r3, #4]
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	687a      	ldr	r2, [r7, #4]
    1a04:	609a      	str	r2, [r3, #8]
  {
  }
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	4618      	mov	r0, r3
    1a0a:	3710      	adds	r7, #16
    1a0c:	46bd      	mov	sp, r7
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	0000a200 	.word	0x0000a200

00001a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1a14:	b580      	push	{r7, lr}
    1a16:	ed2d 8b02 	vpush	{d8}
    1a1a:	b084      	sub	sp, #16
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
    1a20:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	4618      	mov	r0, r3
    1a26:	f7ff f9a1 	bl	d6c <units::linear_scale<float>::operator()() const>
    1a2a:	eeb0 8a40 	vmov.f32	s16, s0
    1a2e:	683b      	ldr	r3, [r7, #0]
    1a30:	4618      	mov	r0, r3
    1a32:	f7ff f99b 	bl	d6c <units::linear_scale<float>::operator()() const>
    1a36:	eef0 7a40 	vmov.f32	s15, s0
    1a3a:	edc7 7a03 	vstr	s15, [r7, #12]
    1a3e:	f107 030c 	add.w	r3, r7, #12
    1a42:	4618      	mov	r0, r3
    1a44:	f7fe fe7d 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1a48:	eeb0 7a40 	vmov.f32	s14, s0
    1a4c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1a50:	f107 0308 	add.w	r3, r7, #8
    1a54:	eeb0 0a67 	vmov.f32	s0, s15
    1a58:	4618      	mov	r0, r3
    1a5a:	f7ff f9c2 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1a5e:	68bb      	ldr	r3, [r7, #8]
	}
    1a60:	4618      	mov	r0, r3
    1a62:	3710      	adds	r7, #16
    1a64:	46bd      	mov	sp, r7
    1a66:	ecbd 8b02 	vpop	{d8}
    1a6a:	bd80      	pop	{r7, pc}

00001a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1a74:	6878      	ldr	r0, [r7, #4]
    1a76:	f001 fb5c 	bl	3132 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1a7a:	4603      	mov	r3, r0
		}
    1a7c:	4618      	mov	r0, r3
    1a7e:	3708      	adds	r7, #8
    1a80:	46bd      	mov	sp, r7
    1a82:	bd80      	pop	{r7, pc}

00001a84 <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    1a84:	b580      	push	{r7, lr}
    1a86:	b086      	sub	sp, #24
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	689a      	ldr	r2, [r3, #8]
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	3314      	adds	r3, #20
    1a98:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    1a9a:	493c      	ldr	r1, [pc, #240]	; (1b8c <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1a9c:	4610      	mov	r0, r2
    1a9e:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	685b      	ldr	r3, [r3, #4]
    1aa4:	6818      	ldr	r0, [r3, #0]
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	685b      	ldr	r3, [r3, #4]
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	681b      	ldr	r3, [r3, #0]
    1ab0:	687a      	ldr	r2, [r7, #4]
    1ab2:	6852      	ldr	r2, [r2, #4]
    1ab4:	7912      	ldrb	r2, [r2, #4]
    1ab6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1aba:	b2d2      	uxtb	r2, r2
    1abc:	4611      	mov	r1, r2
    1abe:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	685b      	ldr	r3, [r3, #4]
    1ac4:	681a      	ldr	r2, [r3, #0]
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	685b      	ldr	r3, [r3, #4]
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	3304      	adds	r3, #4
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	2100      	movs	r1, #0
    1ad4:	4610      	mov	r0, r2
    1ad6:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	685b      	ldr	r3, [r3, #4]
    1adc:	681a      	ldr	r2, [r3, #0]
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	685b      	ldr	r3, [r3, #4]
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	330c      	adds	r3, #12
    1ae8:	681b      	ldr	r3, [r3, #0]
    1aea:	2101      	movs	r1, #1
    1aec:	4610      	mov	r0, r2
    1aee:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1af4:	4925      	ldr	r1, [pc, #148]	; (1b8c <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1af6:	4618      	mov	r0, r3
    1af8:	f7fe fe43 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1afc:	4603      	mov	r3, r0
    1afe:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1b00:	f107 0308 	add.w	r3, r7, #8
    1b04:	4922      	ldr	r1, [pc, #136]	; (1b90 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    1b06:	4618      	mov	r0, r3
    1b08:	f7ff ff84 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1b0c:	4603      	mov	r3, r0
    1b0e:	60fb      	str	r3, [r7, #12]
    1b10:	f107 030c 	add.w	r3, r7, #12
    1b14:	4618      	mov	r0, r3
    1b16:	f7ff ffa9 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1b1a:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1b1c:	4b1d      	ldr	r3, [pc, #116]	; (1b94 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    1b24:	4b1c      	ldr	r3, [pc, #112]	; (1b98 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    1b26:	781a      	ldrb	r2, [r3, #0]
    1b28:	785b      	ldrb	r3, [r3, #1]
    1b2a:	021b      	lsls	r3, r3, #8
    1b2c:	431a      	orrs	r2, r3
    1b2e:	2300      	movs	r3, #0
    1b30:	f362 030f 	bfi	r3, r2, #0, #16
    1b34:	4619      	mov	r1, r3
    1b36:	6978      	ldr	r0, [r7, #20]
    1b38:	f001 fb53 	bl	31e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1b3c:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    1b3e:	4b17      	ldr	r3, [pc, #92]	; (1b9c <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    1b40:	781a      	ldrb	r2, [r3, #0]
    1b42:	785b      	ldrb	r3, [r3, #1]
    1b44:	021b      	lsls	r3, r3, #8
    1b46:	431a      	orrs	r2, r3
    1b48:	2300      	movs	r3, #0
    1b4a:	f362 030f 	bfi	r3, r2, #0, #16
    1b4e:	461a      	mov	r2, r3
    1b50:	6939      	ldr	r1, [r7, #16]
    1b52:	6978      	ldr	r0, [r7, #20]
    1b54:	f001 fadb 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1b58:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    1b5a:	f7ff ff19 	bl	1990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1b5e:	4603      	mov	r3, r0
    1b60:	2b00      	cmp	r3, #0
    1b62:	d00a      	beq.n	1b7a <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	685b      	ldr	r3, [r3, #4]
    1b68:	791b      	ldrb	r3, [r3, #4]
    1b6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	4619      	mov	r1, r3
    1b72:	6978      	ldr	r0, [r7, #20]
    1b74:	f001 faa6 	bl	30c4 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1b78:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    1b7a:	4b06      	ldr	r3, [pc, #24]	; (1b94 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b7c:	681b      	ldr	r3, [r3, #0]
    1b7e:	697a      	ldr	r2, [r7, #20]
    1b80:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    1b82:	2300      	movs	r3, #0
  }
    1b84:	4618      	mov	r0, r3
    1b86:	3718      	adds	r7, #24
    1b88:	46bd      	mov	sp, r7
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	00009fac 	.word	0x00009fac
    1b90:	0000a0b8 	.word	0x0000a0b8
    1b94:	1000012c 	.word	0x1000012c
    1b98:	0000a068 	.word	0x0000a068
    1b9c:	0000a060 	.word	0x0000a060

00001ba0 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b084      	sub	sp, #16
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1ba8:	6878      	ldr	r0, [r7, #4]
    1baa:	f000 f851 	bl	1c50 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	687a      	ldr	r2, [r7, #4]
    1bb4:	6852      	ldr	r2, [r2, #4]
    1bb6:	7912      	ldrb	r2, [r2, #4]
    1bb8:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1bbc:	b2d2      	uxtb	r2, r2
    1bbe:	3204      	adds	r2, #4
    1bc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1bc4:	4b09      	ldr	r3, [pc, #36]	; (1bec <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1bc6:	781a      	ldrb	r2, [r3, #0]
    1bc8:	785b      	ldrb	r3, [r3, #1]
    1bca:	021b      	lsls	r3, r3, #8
    1bcc:	431a      	orrs	r2, r3
    1bce:	2300      	movs	r3, #0
    1bd0:	f362 030f 	bfi	r3, r2, #0, #16
    1bd4:	4619      	mov	r1, r3
    1bd6:	f001 fb13 	bl	3200 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1bda:	60f8      	str	r0, [r7, #12]
    return result;
    1bdc:	68fb      	ldr	r3, [r7, #12]
  }
    1bde:	4618      	mov	r0, r3
    1be0:	3710      	adds	r7, #16
    1be2:	46bd      	mov	sp, r7
    1be4:	bd80      	pop	{r7, pc}
    1be6:	bf00      	nop
    1be8:	1000012c 	.word	0x1000012c
    1bec:	0000a070 	.word	0x0000a070

00001bf0 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1bf8:	230c      	movs	r3, #12
  }
    1bfa:	4618      	mov	r0, r3
    1bfc:	370c      	adds	r7, #12
    1bfe:	46bd      	mov	sp, r7
    1c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c04:	4770      	bx	lr
    1c06:	Address 0x0000000000001c06 is out of bounds.


00001c08 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	687a      	ldr	r2, [r7, #4]
    1c16:	6852      	ldr	r2, [r2, #4]
    1c18:	7912      	ldrb	r2, [r2, #4]
    1c1a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1c1e:	b2d2      	uxtb	r2, r2
    1c20:	3204      	adds	r2, #4
    1c22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1c26:	4b09      	ldr	r3, [pc, #36]	; (1c4c <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1c28:	781a      	ldrb	r2, [r3, #0]
    1c2a:	785b      	ldrb	r3, [r3, #1]
    1c2c:	021b      	lsls	r3, r3, #8
    1c2e:	431a      	orrs	r2, r3
    1c30:	2300      	movs	r3, #0
    1c32:	f362 030f 	bfi	r3, r2, #0, #16
    1c36:	4619      	mov	r1, r3
    1c38:	f001 fac4 	bl	31c4 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1c3c:	4603      	mov	r3, r0
  }
    1c3e:	4618      	mov	r0, r3
    1c40:	3708      	adds	r7, #8
    1c42:	46bd      	mov	sp, r7
    1c44:	bd80      	pop	{r7, pc}
    1c46:	bf00      	nop
    1c48:	1000012c 	.word	0x1000012c
    1c4c:	0000a074 	.word	0x0000a074

00001c50 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1c50:	b590      	push	{r4, r7, lr}
    1c52:	b085      	sub	sp, #20
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1c58:	f7ff fe9a 	bl	1990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1c5c:	4603      	mov	r3, r0
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d013      	beq.n	1c8a <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1c62:	4b29      	ldr	r3, [pc, #164]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	6818      	ldr	r0, [r3, #0]
    1c68:	4b27      	ldr	r3, [pc, #156]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c6a:	681c      	ldr	r4, [r3, #0]
    1c6c:	4b27      	ldr	r3, [pc, #156]	; (1d0c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1c6e:	781a      	ldrb	r2, [r3, #0]
    1c70:	785b      	ldrb	r3, [r3, #1]
    1c72:	021b      	lsls	r3, r3, #8
    1c74:	431a      	orrs	r2, r3
    1c76:	2300      	movs	r3, #0
    1c78:	f362 030f 	bfi	r3, r2, #0, #16
    1c7c:	461a      	mov	r2, r3
    1c7e:	2100      	movs	r1, #0
    1c80:	f001 facf 	bl	3222 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1c84:	4603      	mov	r3, r0
    1c86:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1c88:	e03a      	b.n	1d00 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	685b      	ldr	r3, [r3, #4]
    1c8e:	791b      	ldrb	r3, [r3, #4]
    1c90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1c94:	b2db      	uxtb	r3, r3
    1c96:	461a      	mov	r2, r3
    1c98:	2301      	movs	r3, #1
    1c9a:	4093      	lsls	r3, r2
    1c9c:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1c9e:	4b1a      	ldr	r3, [pc, #104]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1ca4:	4b18      	ldr	r3, [pc, #96]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ca6:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1ca8:	4b19      	ldr	r3, [pc, #100]	; (1d10 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1caa:	781a      	ldrb	r2, [r3, #0]
    1cac:	785b      	ldrb	r3, [r3, #1]
    1cae:	021b      	lsls	r3, r3, #8
    1cb0:	431a      	orrs	r2, r3
    1cb2:	2300      	movs	r3, #0
    1cb4:	f362 030f 	bfi	r3, r2, #0, #16
    1cb8:	461a      	mov	r2, r3
    1cba:	68f9      	ldr	r1, [r7, #12]
    1cbc:	f001 fa27 	bl	310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1cc0:	4603      	mov	r3, r0
      adc_base->CR =
    1cc2:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1cc4:	4b10      	ldr	r3, [pc, #64]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	6818      	ldr	r0, [r3, #0]
    1cca:	4b0f      	ldr	r3, [pc, #60]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ccc:	681c      	ldr	r4, [r3, #0]
    1cce:	4b0f      	ldr	r3, [pc, #60]	; (1d0c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1cd0:	781a      	ldrb	r2, [r3, #0]
    1cd2:	785b      	ldrb	r3, [r3, #1]
    1cd4:	021b      	lsls	r3, r3, #8
    1cd6:	431a      	orrs	r2, r3
    1cd8:	2300      	movs	r3, #0
    1cda:	f362 030f 	bfi	r3, r2, #0, #16
    1cde:	461a      	mov	r2, r3
    1ce0:	2101      	movs	r1, #1
    1ce2:	f001 fa9e 	bl	3222 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1ce6:	4603      	mov	r3, r0
    1ce8:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1cea:	6878      	ldr	r0, [r7, #4]
    1cec:	f7ff ff8c 	bl	1c08 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1cf0:	4603      	mov	r3, r0
    1cf2:	f083 0301 	eor.w	r3, r3, #1
    1cf6:	b2db      	uxtb	r3, r3
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d001      	beq.n	1d00 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1cfc:	bf00      	nop
      while (!HasConversionFinished())
    1cfe:	e7f4      	b.n	1cea <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1d00:	bf00      	nop
    1d02:	3714      	adds	r7, #20
    1d04:	46bd      	mov	sp, r7
    1d06:	bd90      	pop	{r4, r7, pc}
    1d08:	1000012c 	.word	0x1000012c
    1d0c:	0000a06c 	.word	0x0000a06c
    1d10:	0000a05c 	.word	0x0000a05c

00001d14 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1d14:	b480      	push	{r7}
    1d16:	af00      	add	r7, sp, #0
    1d18:	bf00      	nop
    1d1a:	46bd      	mov	sp, r7
    1d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d20:	4770      	bx	lr
    1d22:	Address 0x0000000000001d22 is out of bounds.


00001d24 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1d24:	b580      	push	{r7, lr}
    1d26:	b082      	sub	sp, #8
    1d28:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1d2a:	4b09      	ldr	r3, [pc, #36]	; (1d50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1d2c:	681b      	ldr	r3, [r3, #0]
    1d2e:	9300      	str	r3, [sp, #0]
    1d30:	231d      	movs	r3, #29
    1d32:	4a08      	ldr	r2, [pc, #32]	; (1d54 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1d34:	4908      	ldr	r1, [pc, #32]	; (1d58 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1d36:	4809      	ldr	r0, [pc, #36]	; (1d5c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1d38:	f004 fb4c 	bl	63d4 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	3b10      	subs	r3, #16
    1d42:	4618      	mov	r0, r3
    1d44:	f7fe fb34 	bl	3b0 <NVIC_DisableIRQ>
  }
    1d48:	bf00      	nop
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	10000048 	.word	0x10000048
    1d54:	0000a4fc 	.word	0x0000a4fc
    1d58:	0000a0bc 	.word	0x0000a0bc
    1d5c:	00009b78 	.word	0x00009b78

00001d60 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1d68:	2340      	movs	r3, #64	; 0x40
    1d6a:	4618      	mov	r0, r3
    1d6c:	370c      	adds	r7, #12
    1d6e:	46bd      	mov	sp, r7
    1d70:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d74:	4770      	bx	lr
    1d76:	Address 0x0000000000001d76 is out of bounds.


00001d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1d78:	b580      	push	{r7, lr}
    1d7a:	b084      	sub	sp, #16
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	4618      	mov	r0, r3
    1d84:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d88:	461a      	mov	r2, r3
    1d8a:	2100      	movs	r1, #0
    1d8c:	f007 fab5 	bl	92fa <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d90:	2300      	movs	r3, #0
    1d92:	60fb      	str	r3, [r7, #12]
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	2b0f      	cmp	r3, #15
    1d98:	d808      	bhi.n	1dac <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	68fa      	ldr	r2, [r7, #12]
    1d9e:	4911      	ldr	r1, [pc, #68]	; (1de4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	3301      	adds	r3, #1
    1da8:	60fb      	str	r3, [r7, #12]
    1daa:	e7f3      	b.n	1d94 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1dac:	2310      	movs	r3, #16
    1dae:	60bb      	str	r3, [r7, #8]
    1db0:	6878      	ldr	r0, [r7, #4]
    1db2:	f7ff ffd5 	bl	1d60 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1db6:	4602      	mov	r2, r0
    1db8:	68bb      	ldr	r3, [r7, #8]
    1dba:	4293      	cmp	r3, r2
    1dbc:	bf34      	ite	cc
    1dbe:	2301      	movcc	r3, #1
    1dc0:	2300      	movcs	r3, #0
    1dc2:	b2db      	uxtb	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d008      	beq.n	1dda <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	68ba      	ldr	r2, [r7, #8]
    1dcc:	4906      	ldr	r1, [pc, #24]	; (1de8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1dd2:	68bb      	ldr	r3, [r7, #8]
    1dd4:	3301      	adds	r3, #1
    1dd6:	60bb      	str	r3, [r7, #8]
    1dd8:	e7ea      	b.n	1db0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1dda:	bf00      	nop
    }
    1ddc:	6878      	ldr	r0, [r7, #4]
    1dde:	3710      	adds	r7, #16
    1de0:	46bd      	mov	sp, r7
    1de2:	bd80      	pop	{r7, pc}
    1de4:	00001d15 	.word	0x00001d15
    1de8:	00001d25 	.word	0x00001d25

00001dec <sjsu::Pwm::Pwm()>:

namespace sjsu
{
/// An abstract interface for hardware that can generate Pulse Width Modulation
/// (PWM) waveforms.
class Pwm
    1dec:	b480      	push	{r7}
    1dee:	b083      	sub	sp, #12
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	4a04      	ldr	r2, [pc, #16]	; (1e08 <sjsu::Pwm::Pwm()+0x1c>)
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	601a      	str	r2, [r3, #0]
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	4618      	mov	r0, r3
    1dfe:	370c      	adds	r7, #12
    1e00:	46bd      	mov	sp, r7
    1e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e06:	4770      	bx	lr
    1e08:	0000a1e8 	.word	0x0000a1e8

00001e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>:
  ///        instance of the PWM driver.
  /// @param system_controller - Reference to a system controller object. Used
  ///        to power on the peripheral and get the current peripheral
  ///        frequency. Typically only changed from the default for unit testing
  ///        purposes.
  explicit constexpr Pwm(const Channel_t & channel,
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b084      	sub	sp, #16
    1e10:	af00      	add	r7, sp, #0
    1e12:	60f8      	str	r0, [r7, #12]
    1e14:	60b9      	str	r1, [r7, #8]
    1e16:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1e18:	68fb      	ldr	r3, [r7, #12]
    1e1a:	4618      	mov	r0, r3
    1e1c:	f7ff ffe6 	bl	1dec <sjsu::Pwm::Pwm()>
    1e20:	4a06      	ldr	r2, [pc, #24]	; (1e3c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	601a      	str	r2, [r3, #0]
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	68ba      	ldr	r2, [r7, #8]
    1e2a:	605a      	str	r2, [r3, #4]
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	609a      	str	r2, [r3, #8]
  {
  }
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	4618      	mov	r0, r3
    1e36:	3710      	adds	r7, #16
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	0000a1d0 	.word	0x0000a1d0

00001e40 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  Status Initialize(units::frequency::hertz_t frequency_hz) const override
    1e40:	b590      	push	{r4, r7, lr}
    1e42:	b085      	sub	sp, #20
    1e44:	af00      	add	r7, sp, #0
    1e46:	6078      	str	r0, [r7, #4]
    1e48:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(1 <= channel_.channel && channel_.channel <= 6,
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	685b      	ldr	r3, [r3, #4]
    1e4e:	7a1b      	ldrb	r3, [r3, #8]
    1e50:	f003 0307 	and.w	r3, r3, #7
    1e54:	b2db      	uxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	d007      	beq.n	1e6a <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x2a>
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	685b      	ldr	r3, [r3, #4]
    1e5e:	7a1b      	ldrb	r3, [r3, #8]
    1e60:	f003 0307 	and.w	r3, r3, #7
    1e64:	b2db      	uxtb	r3, r3
    1e66:	2b07      	cmp	r3, #7
    1e68:	d10d      	bne.n	1e86 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x46>
    1e6a:	23bb      	movs	r3, #187	; 0xbb
    1e6c:	4a5d      	ldr	r2, [pc, #372]	; (1fe4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    1e6e:	495e      	ldr	r1, [pc, #376]	; (1fe8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    1e70:	485e      	ldr	r0, [pc, #376]	; (1fec <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    1e72:	f004 faaf 	bl	63d4 <printf>
    1e76:	485e      	ldr	r0, [pc, #376]	; (1ff0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    1e78:	f003 f968 	bl	514c <puts>
    1e7c:	2100      	movs	r1, #0
    1e7e:	2001      	movs	r0, #1
    1e80:	f7fe fd22 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1e84:	e7fe      	b.n	1e84 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x44>
                     "Channel must be between 1 and 6 on LPC40xx platforms.");

    system_controller_.PowerUpPeripheral(channel_.peripheral.power_on_id);
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	6898      	ldr	r0, [r3, #8]
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	689b      	ldr	r3, [r3, #8]
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	3314      	adds	r3, #20
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	687a      	ldr	r2, [r7, #4]
    1e96:	6852      	ldr	r2, [r2, #4]
    1e98:	6812      	ldr	r2, [r2, #0]
    1e9a:	3204      	adds	r2, #4
    1e9c:	4611      	mov	r1, r2
    1e9e:	4798      	blx	r3
    // Set prescalar to 1 so the input frequency to the PWM peripheral is equal
    // to the peripheral clock frequency.
    //
    // PR = Prescale register = defines the maximum value for the prescaler
    channel_.peripheral.registers->PR = 0;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	685b      	ldr	r3, [r3, #4]
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	2200      	movs	r2, #0
    1eaa:	60da      	str	r2, [r3, #12]
    // PC = Prescale counter. Set to 0 to cause the timer counter to increment
    // after each peripheral clock tick.
    channel_.peripheral.registers->PC = 0;
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	685b      	ldr	r3, [r3, #4]
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2200      	movs	r2, #0
    1eb6:	611a      	str	r2, [r3, #16]
    // Mode 0x0 means increment time counter (TC) after the peripheral clock
    // has cycled the amount inside of the prescale.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kMode);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	685b      	ldr	r3, [r3, #4]
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	685b      	ldr	r3, [r3, #4]
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	681c      	ldr	r4, [r3, #0]
    1eca:	4b4a      	ldr	r3, [pc, #296]	; (1ff4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    1ecc:	781a      	ldrb	r2, [r3, #0]
    1ece:	785b      	ldrb	r3, [r3, #1]
    1ed0:	021b      	lsls	r3, r3, #8
    1ed2:	431a      	orrs	r2, r3
    1ed4:	2300      	movs	r3, #0
    1ed6:	f362 030f 	bfi	r3, r2, #0, #16
    1eda:	461a      	mov	r2, r3
    1edc:	2100      	movs	r1, #0
    1ede:	f001 f9a0 	bl	3222 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1ee2:	4603      	mov	r3, r0
    1ee4:	6723      	str	r3, [r4, #112]	; 0x70
    // 0x0 for this register says to use the TC for input counts.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kCountInput);
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	685b      	ldr	r3, [r3, #4]
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	685b      	ldr	r3, [r3, #4]
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	681c      	ldr	r4, [r3, #0]
    1ef8:	4b3f      	ldr	r3, [pc, #252]	; (1ff8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    1efa:	781a      	ldrb	r2, [r3, #0]
    1efc:	785b      	ldrb	r3, [r3, #1]
    1efe:	021b      	lsls	r3, r3, #8
    1f00:	431a      	orrs	r2, r3
    1f02:	2300      	movs	r3, #0
    1f04:	f362 030f 	bfi	r3, r2, #0, #16
    1f08:	461a      	mov	r2, r3
    1f0a:	2100      	movs	r1, #0
    1f0c:	f001 f989 	bl	3222 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1f10:	4603      	mov	r3, r0
    1f12:	6723      	str	r3, [r4, #112]	; 0x70
    // Match register 0 is used to generate the desired frequency. If the time
    // counter TC is equal to MR0
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	685b      	ldr	r3, [r3, #4]
    1f1c:	681b      	ldr	r3, [r3, #0]
    1f1e:	3304      	adds	r3, #4
    1f20:	4619      	mov	r1, r3
    1f22:	4610      	mov	r0, r2
    1f24:	f7fe fc2d 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1f28:	4603      	mov	r3, r0
    1f2a:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1f2c:	463a      	mov	r2, r7
    1f2e:	f107 0308 	add.w	r3, r7, #8
    1f32:	4611      	mov	r1, r2
    1f34:	4618      	mov	r0, r3
    1f36:	f7ff fd6d 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1f3a:	4603      	mov	r3, r0
    1f3c:	60fb      	str	r3, [r7, #12]
    channel_.peripheral.registers->MR0 =
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	685b      	ldr	r3, [r3, #4]
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1f46:	f107 030c 	add.w	r3, r7, #12
    1f4a:	4618      	mov	r0, r3
    1f4c:	f7ff fd8e 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1f50:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1f52:	61a3      	str	r3, [r4, #24]
    // Sets match register 0 to reset when TC and Match 0 match each other,
    // meaning that the PWM pulse will cycle continuously.
    channel_.peripheral.registers->MCR =
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	685b      	ldr	r3, [r3, #4]
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	6958      	ldr	r0, [r3, #20]
    channel_.peripheral.registers->MCR =
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	685b      	ldr	r3, [r3, #4]
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1f66:	4b25      	ldr	r3, [pc, #148]	; (1ffc <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    1f68:	781a      	ldrb	r2, [r3, #0]
    1f6a:	785b      	ldrb	r3, [r3, #1]
    1f6c:	021b      	lsls	r3, r3, #8
    1f6e:	431a      	orrs	r2, r3
    1f70:	2300      	movs	r3, #0
    1f72:	f362 030f 	bfi	r3, r2, #0, #16
    1f76:	4619      	mov	r1, r3
    1f78:	f001 f933 	bl	31e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f7c:	4603      	mov	r3, r0
    channel_.peripheral.registers->MCR =
    1f7e:	6163      	str	r3, [r4, #20]
    // Enables PWM TC and PC for counting and enables PWM mode
    EnablePwm();
    1f80:	2101      	movs	r1, #1
    1f82:	6878      	ldr	r0, [r7, #4]
    1f84:	f000 f946 	bl	2214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    // Enables PWM[channel] output
    channel_.peripheral.registers->PCR =
        //bit::Clear(channel_.peripheral.registers->PCR,
        //           OutputControl::kEnableDoubleEdge.position) |
        bit::Set(channel_.peripheral.registers->PCR,
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	685b      	ldr	r3, [r3, #4]
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 OutputControl::kEnableOutput.position + channel_.channel);
    1f92:	2308      	movs	r3, #8
    1f94:	4619      	mov	r1, r3
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	685b      	ldr	r3, [r3, #4]
    1f9a:	7a1b      	ldrb	r3, [r3, #8]
    1f9c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	440b      	add	r3, r1
        bit::Set(channel_.peripheral.registers->PCR,
    1fa4:	4619      	mov	r1, r3
    channel_.peripheral.registers->PCR =
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	685b      	ldr	r3, [r3, #4]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->PCR,
    1fae:	4610      	mov	r0, r2
    1fb0:	f001 f888 	bl	30c4 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1fb4:	4603      	mov	r3, r0
    channel_.peripheral.registers->PCR =
    1fb6:	64e3      	str	r3, [r4, #76]	; 0x4c

    channel_.pin.SetPinFunction(channel_.pin_function_id);
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	6858      	ldr	r0, [r3, #4]
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	685b      	ldr	r3, [r3, #4]
    1fc2:	685b      	ldr	r3, [r3, #4]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	687a      	ldr	r2, [r7, #4]
    1fca:	6852      	ldr	r2, [r2, #4]
    1fcc:	7a12      	ldrb	r2, [r2, #8]
    1fce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1fd2:	b2d2      	uxtb	r2, r2
    1fd4:	4611      	mov	r1, r2
    1fd6:	4798      	blx	r3

    return Status::kSuccess;
    1fd8:	2300      	movs	r3, #0
  }
    1fda:	4618      	mov	r0, r3
    1fdc:	3714      	adds	r7, #20
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd90      	pop	{r4, r7, pc}
    1fe2:	bf00      	nop
    1fe4:	0000a4a4 	.word	0x0000a4a4
    1fe8:	0000a148 	.word	0x0000a148
    1fec:	00009bf8 	.word	0x00009bf8
    1ff0:	0000992c 	.word	0x0000992c
    1ff4:	0000a0dc 	.word	0x0000a0dc
    1ff8:	0000a0e0 	.word	0x0000a0e0
    1ffc:	0000a0cc 	.word	0x0000a0cc

00002000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>:

  void SetDutyCycle(float duty_cycle) const override
    2000:	b590      	push	{r4, r7, lr}
    2002:	b083      	sub	sp, #12
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
    2008:	ed87 0a00 	vstr	s0, [r7]
  {
    SJ2_ASSERT_FATAL(0.0f <= duty_cycle && duty_cycle <= 1.0f,
    200c:	edd7 7a00 	vldr	s15, [r7]
    2010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2018:	bfac      	ite	ge
    201a:	2301      	movge	r3, #1
    201c:	2300      	movlt	r3, #0
    201e:	b2db      	uxtb	r3, r3
    2020:	f083 0301 	eor.w	r3, r3, #1
    2024:	b2db      	uxtb	r3, r3
    2026:	2b00      	cmp	r3, #0
    2028:	d110      	bne.n	204c <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x4c>
    202a:	edd7 7a00 	vldr	s15, [r7]
    202e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2032:	eef4 7ac7 	vcmpe.f32	s15, s14
    2036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    203a:	bf94      	ite	ls
    203c:	2301      	movls	r3, #1
    203e:	2300      	movhi	r3, #0
    2040:	b2db      	uxtb	r3, r3
    2042:	f083 0301 	eor.w	r3, r3, #1
    2046:	b2db      	uxtb	r3, r3
    2048:	2b00      	cmp	r3, #0
    204a:	d00d      	beq.n	2068 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x68>
    204c:	23e9      	movs	r3, #233	; 0xe9
    204e:	4a1c      	ldr	r2, [pc, #112]	; (20c0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc0>)
    2050:	491c      	ldr	r1, [pc, #112]	; (20c4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc4>)
    2052:	481d      	ldr	r0, [pc, #116]	; (20c8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc8>)
    2054:	f004 f9be 	bl	63d4 <printf>
    2058:	481c      	ldr	r0, [pc, #112]	; (20cc <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xcc>)
    205a:	f003 f877 	bl	514c <puts>
    205e:	2100      	movs	r1, #0
    2060:	2001      	movs	r0, #1
    2062:	f7fe fc31 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    2066:	e7fe      	b.n	2066 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x66>
                     "duty_cycle of Duty Cycle provided is out of bounds.");
    *GetMatchRegisters(channel_.channel) = CalculateDutyCycle(duty_cycle);
    2068:	ed97 0a00 	vldr	s0, [r7]
    206c:	6878      	ldr	r0, [r7, #4]
    206e:	f000 f98b 	bl	2388 <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>
    2072:	4604      	mov	r4, r0
    2074:	687b      	ldr	r3, [r7, #4]
    2076:	685b      	ldr	r3, [r3, #4]
    2078:	7a1b      	ldrb	r3, [r3, #8]
    207a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    207e:	b2db      	uxtb	r3, r3
    2080:	4619      	mov	r1, r3
    2082:	6878      	ldr	r0, [r7, #4]
    2084:	f000 f930 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    2088:	4603      	mov	r3, r0
    208a:	601c      	str	r4, [r3, #0]
    channel_.peripheral.registers->LER |= (1 << channel_.channel);
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	685b      	ldr	r3, [r3, #4]
    2090:	681b      	ldr	r3, [r3, #0]
    2092:	681b      	ldr	r3, [r3, #0]
    2094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	685b      	ldr	r3, [r3, #4]
    209a:	7a1b      	ldrb	r3, [r3, #8]
    209c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20a0:	b2db      	uxtb	r3, r3
    20a2:	4619      	mov	r1, r3
    20a4:	2301      	movs	r3, #1
    20a6:	408b      	lsls	r3, r1
    20a8:	4619      	mov	r1, r3
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	685b      	ldr	r3, [r3, #4]
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	430a      	orrs	r2, r1
    20b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
    20b6:	bf00      	nop
    20b8:	370c      	adds	r7, #12
    20ba:	46bd      	mov	sp, r7
    20bc:	bd90      	pop	{r4, r7, pc}
    20be:	bf00      	nop
    20c0:	0000a468 	.word	0x0000a468
    20c4:	0000a150 	.word	0x0000a150
    20c8:	00009ccc 	.word	0x00009ccc
    20cc:	0000992c 	.word	0x0000992c

000020d0 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>:

  float GetDutyCycle() const override
    20d0:	b580      	push	{r7, lr}
    20d2:	ed2d 8b02 	vpush	{d8}
    20d6:	b082      	sub	sp, #8
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
  {
    return (static_cast<float>(*GetMatchRegisters(channel_.channel)) /
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	685b      	ldr	r3, [r3, #4]
    20e0:	7a1b      	ldrb	r3, [r3, #8]
    20e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20e6:	b2db      	uxtb	r3, r3
    20e8:	4619      	mov	r1, r3
    20ea:	6878      	ldr	r0, [r7, #4]
    20ec:	f000 f8fc 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    20f0:	4603      	mov	r3, r0
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	ee07 3a90 	vmov	s15, r3
    20f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
            static_cast<float>(*GetMatchRegisters(0)));
    20fc:	2100      	movs	r1, #0
    20fe:	6878      	ldr	r0, [r7, #4]
    2100:	f000 f8f2 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    2104:	4603      	mov	r3, r0
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	ee07 3a90 	vmov	s15, r3
    210c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2110:	ee88 7a27 	vdiv.f32	s14, s16, s15
    2114:	eef0 7a47 	vmov.f32	s15, s14
  }
    2118:	eeb0 0a67 	vmov.f32	s0, s15
    211c:	3708      	adds	r7, #8
    211e:	46bd      	mov	sp, r7
    2120:	ecbd 8b02 	vpop	{d8}
    2124:	bd80      	pop	{r7, pc}

00002126 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2126:	b580      	push	{r7, lr}
    2128:	b082      	sub	sp, #8
    212a:	af00      	add	r7, sp, #0
    212c:	6078      	str	r0, [r7, #4]
    212e:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    2130:	6839      	ldr	r1, [r7, #0]
    2132:	6878      	ldr	r0, [r7, #4]
    2134:	f7fe faae 	bl	694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2138:	4603      	mov	r3, r0
    213a:	f083 0301 	eor.w	r3, r3, #1
    213e:	b2db      	uxtb	r3, r3
		}
    2140:	4618      	mov	r0, r3
    2142:	3708      	adds	r7, #8
    2144:	46bd      	mov	sp, r7
    2146:	bd80      	pop	{r7, pc}

00002148 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetFrequency(units::frequency::hertz_t frequency_hz) const override
    2148:	b590      	push	{r4, r7, lr}
    214a:	b087      	sub	sp, #28
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
    2150:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(frequency_hz != 0_Hz, "Pwm Frequency cannot be zero Hz.");
    2152:	f04f 0000 	mov.w	r0, #0
    2156:	f04f 0100 	mov.w	r1, #0
    215a:	f7fe fa1d 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    215e:	4603      	mov	r3, r0
    2160:	60fb      	str	r3, [r7, #12]
    2162:	f107 020c 	add.w	r2, r7, #12
    2166:	463b      	mov	r3, r7
    2168:	4611      	mov	r1, r2
    216a:	4618      	mov	r0, r3
    216c:	f7ff ffdb 	bl	2126 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2170:	4603      	mov	r3, r0
    2172:	f083 0301 	eor.w	r3, r3, #1
    2176:	b2db      	uxtb	r3, r3
    2178:	2b00      	cmp	r3, #0
    217a:	d00d      	beq.n	2198 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x50>
    217c:	23f6      	movs	r3, #246	; 0xf6
    217e:	4a21      	ldr	r2, [pc, #132]	; (2204 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xbc>)
    2180:	4921      	ldr	r1, [pc, #132]	; (2208 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2182:	4822      	ldr	r0, [pc, #136]	; (220c <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    2184:	f004 f926 	bl	63d4 <printf>
    2188:	4821      	ldr	r0, [pc, #132]	; (2210 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc8>)
    218a:	f002 ffdf 	bl	514c <puts>
    218e:	2100      	movs	r1, #0
    2190:	2001      	movs	r0, #1
    2192:	f7fe fb99 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    2196:	e7fe      	b.n	2196 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x4e>
    // Disables PWM mode; this will reset all counters to 0
    // And allow us to update MR0
    float previous_duty_cycle = GetDutyCycle();
    2198:	6878      	ldr	r0, [r7, #4]
    219a:	f7ff ff99 	bl	20d0 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    219e:	ed87 0a05 	vstr	s0, [r7, #20]
    EnablePwm(false);
    21a2:	2100      	movs	r1, #0
    21a4:	6878      	ldr	r0, [r7, #4]
    21a6:	f000 f835 	bl	2214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	685b      	ldr	r3, [r3, #4]
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	3304      	adds	r3, #4
    21b6:	4619      	mov	r1, r3
    21b8:	4610      	mov	r0, r2
    21ba:	f7fe fae2 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    21be:	4603      	mov	r3, r0
    21c0:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    21c2:	463a      	mov	r2, r7
    21c4:	f107 0308 	add.w	r3, r7, #8
    21c8:	4611      	mov	r1, r2
    21ca:	4618      	mov	r0, r3
    21cc:	f7ff fc22 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    21d0:	4603      	mov	r3, r0
    21d2:	613b      	str	r3, [r7, #16]
    channel_.peripheral.registers->MR0 =
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	685b      	ldr	r3, [r3, #4]
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    21dc:	f107 0310 	add.w	r3, r7, #16
    21e0:	4618      	mov	r0, r3
    21e2:	f7ff fc43 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    21e6:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    21e8:	61a3      	str	r3, [r4, #24]
    SetDutyCycle(previous_duty_cycle);
    21ea:	ed97 0a05 	vldr	s0, [r7, #20]
    21ee:	6878      	ldr	r0, [r7, #4]
    21f0:	f7ff ff06 	bl	2000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    EnablePwm();
    21f4:	2101      	movs	r1, #1
    21f6:	6878      	ldr	r0, [r7, #4]
    21f8:	f000 f80c 	bl	2214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
  }
    21fc:	bf00      	nop
    21fe:	371c      	adds	r7, #28
    2200:	46bd      	mov	sp, r7
    2202:	bd90      	pop	{r4, r7, pc}
    2204:	0000a418 	.word	0x0000a418
    2208:	0000a158 	.word	0x0000a158
    220c:	00009d98 	.word	0x00009d98
    2210:	0000992c 	.word	0x0000992c

00002214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>:
    return result;
  }
  /// Helper method for enabling and disabling this PWM channel.
  /// @param enable - default to true, if set to false, will disable this PWM
  ///        channel.
  void EnablePwm(bool enable = true) const
    2214:	b580      	push	{r7, lr}
    2216:	b084      	sub	sp, #16
    2218:	af00      	add	r7, sp, #0
    221a:	6078      	str	r0, [r7, #4]
    221c:	460b      	mov	r3, r1
    221e:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pwm_timer = &channel_.peripheral.registers->TCR;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	685b      	ldr	r3, [r3, #4]
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	3304      	adds	r3, #4
    222a:	60fb      	str	r3, [r7, #12]
    if (enable)
    222c:	78fb      	ldrb	r3, [r7, #3]
    222e:	2b00      	cmp	r3, #0
    2230:	d040      	beq.n	22b4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xa0>
    {
      // Reset the Timer Counter
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterReset);
    2232:	68fb      	ldr	r3, [r7, #12]
    2234:	6818      	ldr	r0, [r3, #0]
    2236:	4b29      	ldr	r3, [pc, #164]	; (22dc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    2238:	781a      	ldrb	r2, [r3, #0]
    223a:	785b      	ldrb	r3, [r3, #1]
    223c:	021b      	lsls	r3, r3, #8
    223e:	431a      	orrs	r2, r3
    2240:	2300      	movs	r3, #0
    2242:	f362 030f 	bfi	r3, r2, #0, #16
    2246:	4619      	mov	r1, r3
    2248:	f000 ffcb 	bl	31e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    224c:	4602      	mov	r2, r0
    224e:	68fb      	ldr	r3, [r7, #12]
    2250:	601a      	str	r2, [r3, #0]
      // Clear reset and allow timer to count
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kCounterReset);
    2252:	68fb      	ldr	r3, [r7, #12]
    2254:	6818      	ldr	r0, [r3, #0]
    2256:	4b21      	ldr	r3, [pc, #132]	; (22dc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    2258:	781a      	ldrb	r2, [r3, #0]
    225a:	785b      	ldrb	r3, [r3, #1]
    225c:	021b      	lsls	r3, r3, #8
    225e:	431a      	orrs	r2, r3
    2260:	2300      	movs	r3, #0
    2262:	f362 030f 	bfi	r3, r2, #0, #16
    2266:	4619      	mov	r1, r3
    2268:	f000 ffed 	bl	3246 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    226c:	4602      	mov	r2, r0
    226e:	68fb      	ldr	r3, [r7, #12]
    2270:	601a      	str	r2, [r3, #0]
      // Enable PWM output
      *pwm_timer = bit::Set(*pwm_timer, Timer::kPwmEnable);
    2272:	68fb      	ldr	r3, [r7, #12]
    2274:	6818      	ldr	r0, [r3, #0]
    2276:	4b1a      	ldr	r3, [pc, #104]	; (22e0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    2278:	781a      	ldrb	r2, [r3, #0]
    227a:	785b      	ldrb	r3, [r3, #1]
    227c:	021b      	lsls	r3, r3, #8
    227e:	431a      	orrs	r2, r3
    2280:	2300      	movs	r3, #0
    2282:	f362 030f 	bfi	r3, r2, #0, #16
    2286:	4619      	mov	r1, r3
    2288:	f000 ffab 	bl	31e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    228c:	4602      	mov	r2, r0
    228e:	68fb      	ldr	r3, [r7, #12]
    2290:	601a      	str	r2, [r3, #0]
      // Enable counting
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterEnable);
    2292:	68fb      	ldr	r3, [r7, #12]
    2294:	6818      	ldr	r0, [r3, #0]
    2296:	4b13      	ldr	r3, [pc, #76]	; (22e4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xd0>)
    2298:	781a      	ldrb	r2, [r3, #0]
    229a:	785b      	ldrb	r3, [r3, #1]
    229c:	021b      	lsls	r3, r3, #8
    229e:	431a      	orrs	r2, r3
    22a0:	2300      	movs	r3, #0
    22a2:	f362 030f 	bfi	r3, r2, #0, #16
    22a6:	4619      	mov	r1, r3
    22a8:	f000 ff9b 	bl	31e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    22ac:	4602      	mov	r2, r0
    22ae:	68fb      	ldr	r3, [r7, #12]
    22b0:	601a      	str	r2, [r3, #0]
    else
    {
      // Disable PWM output
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    }
  }
    22b2:	e00f      	b.n	22d4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc0>
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	6818      	ldr	r0, [r3, #0]
    22b8:	4b09      	ldr	r3, [pc, #36]	; (22e0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    22ba:	781a      	ldrb	r2, [r3, #0]
    22bc:	785b      	ldrb	r3, [r3, #1]
    22be:	021b      	lsls	r3, r3, #8
    22c0:	431a      	orrs	r2, r3
    22c2:	2300      	movs	r3, #0
    22c4:	f362 030f 	bfi	r3, r2, #0, #16
    22c8:	4619      	mov	r1, r3
    22ca:	f000 ffbc 	bl	3246 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    22ce:	4602      	mov	r2, r0
    22d0:	68fb      	ldr	r3, [r7, #12]
    22d2:	601a      	str	r2, [r3, #0]
  }
    22d4:	bf00      	nop
    22d6:	3710      	adds	r7, #16
    22d8:	46bd      	mov	sp, r7
    22da:	bd80      	pop	{r7, pc}
    22dc:	0000a0d4 	.word	0x0000a0d4
    22e0:	0000a0d8 	.word	0x0000a0d8
    22e4:	0000a0d0 	.word	0x0000a0d0

000022e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>:
  /// Helper method to make getting a pointer to the Match Register 0 more
  /// readable in the code.
  ///
  /// @return a pointer to the match 0 register.
  volatile uint32_t *GetMatchRegisters(uint8_t match) const
    22e8:	b480      	push	{r7}
    22ea:	b083      	sub	sp, #12
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	460b      	mov	r3, r1
    22f2:	70fb      	strb	r3, [r7, #3]
  {
    switch(match)
    22f4:	78fb      	ldrb	r3, [r7, #3]
    22f6:	2b06      	cmp	r3, #6
    22f8:	d83a      	bhi.n	2370 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x88>
    22fa:	a201      	add	r2, pc, #4	; (adr r2, 2300 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x18>)
    22fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2300:	0000231d 	.word	0x0000231d
    2304:	00002329 	.word	0x00002329
    2308:	00002335 	.word	0x00002335
    230c:	00002341 	.word	0x00002341
    2310:	0000234d 	.word	0x0000234d
    2314:	00002359 	.word	0x00002359
    2318:	00002365 	.word	0x00002365
    {
      case 0: 
        return &channel_.peripheral.registers->MR0;
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	685b      	ldr	r3, [r3, #4]
    2320:	681b      	ldr	r3, [r3, #0]
    2322:	681b      	ldr	r3, [r3, #0]
    2324:	3318      	adds	r3, #24
    2326:	e028      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 1: 
        return &channel_.peripheral.registers->MR1;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	685b      	ldr	r3, [r3, #4]
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	331c      	adds	r3, #28
    2332:	e022      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 2: 
        return &channel_.peripheral.registers->MR2;
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	685b      	ldr	r3, [r3, #4]
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	3320      	adds	r3, #32
    233e:	e01c      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 3: 
        return &channel_.peripheral.registers->MR3;
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	685b      	ldr	r3, [r3, #4]
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	3324      	adds	r3, #36	; 0x24
    234a:	e016      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 4: 
        return &channel_.peripheral.registers->MR4;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	685b      	ldr	r3, [r3, #4]
    2350:	681b      	ldr	r3, [r3, #0]
    2352:	681b      	ldr	r3, [r3, #0]
    2354:	3340      	adds	r3, #64	; 0x40
    2356:	e010      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 5: 
        return &channel_.peripheral.registers->MR5;
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	685b      	ldr	r3, [r3, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	3344      	adds	r3, #68	; 0x44
    2362:	e00a      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 6: 
        return &channel_.peripheral.registers->MR6;
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	681b      	ldr	r3, [r3, #0]
    236a:	681b      	ldr	r3, [r3, #0]
    236c:	3348      	adds	r3, #72	; 0x48
    236e:	e004      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      default: 
        return &channel_.peripheral.registers->MR0;
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	685b      	ldr	r3, [r3, #4]
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	3318      	adds	r3, #24
    }
  }
    237a:	4618      	mov	r0, r3
    237c:	370c      	adds	r7, #12
    237e:	46bd      	mov	sp, r7
    2380:	f85d 7b04 	ldr.w	r7, [sp], #4
    2384:	4770      	bx	lr
    2386:	bf00      	nop

00002388 <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>:
  ///
  /// @param duty_cycle_percent - value from 0.0f to 1.0f indicating the duty
  ///        cycle precent.
  /// @return the nearest approximate match register value to achieve the
  ///         supplied duty cycle.
  uint32_t CalculateDutyCycle(float duty_cycle_percent) const
    2388:	b580      	push	{r7, lr}
    238a:	b084      	sub	sp, #16
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
    2390:	ed87 0a00 	vstr	s0, [r7]
  {
    float pwm_period = static_cast<float>(*GetMatchRegisters(0));
    2394:	2100      	movs	r1, #0
    2396:	6878      	ldr	r0, [r7, #4]
    2398:	f7ff ffa6 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    239c:	4603      	mov	r3, r0
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	ee07 3a90 	vmov	s15, r3
    23a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    23a8:	edc7 7a03 	vstr	s15, [r7, #12]
    return static_cast<uint32_t>(duty_cycle_percent * pwm_period);
    23ac:	ed97 7a00 	vldr	s14, [r7]
    23b0:	edd7 7a03 	vldr	s15, [r7, #12]
    23b4:	ee67 7a27 	vmul.f32	s15, s14, s15
    23b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    23bc:	ee17 3a90 	vmov	r3, s15
  }
    23c0:	4618      	mov	r0, r3
    23c2:	3710      	adds	r7, #16
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}

000023c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>:
  static constexpr units::angle::degree_t kDefaultMinAngle     = 0_deg;
  static constexpr units::angle::degree_t kDefaultMaxAngle     = 90_deg;
  static constexpr std::chrono::microseconds kDefaultMinPulse  = 1000us;
  static constexpr std::chrono::microseconds kDefaultMaxPulse  = 2000us;

  explicit constexpr Servo(const sjsu::Pwm & pwm)
    23c8:	b590      	push	{r4, r7, lr}
    23ca:	b085      	sub	sp, #20
    23cc:	af00      	add	r7, sp, #0
    23ce:	6078      	str	r0, [r7, #4]
    23d0:	6039      	str	r1, [r7, #0]
      : servo_pwm_(pwm),
        waveform_period_(0),
        pulse_lower_bound_(kDefaultMinPulse),
        pulse_upper_bound_(kDefaultMaxPulse),
        min_angle_(kDefaultMinAngle),
        max_angle_(kDefaultMaxAngle)
    23d2:	4a17      	ldr	r2, [pc, #92]	; (2430 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x68>)
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	601a      	str	r2, [r3, #0]
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	683a      	ldr	r2, [r7, #0]
    23dc:	605a      	str	r2, [r3, #4]
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	f103 0208 	add.w	r2, r3, #8
    23e4:	2300      	movs	r3, #0
    23e6:	60fb      	str	r3, [r7, #12]
    23e8:	f107 030c 	add.w	r3, r7, #12
    23ec:	4619      	mov	r1, r3
    23ee:	4610      	mov	r0, r2
    23f0:	f000 faf4 	bl	29dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    23f4:	687a      	ldr	r2, [r7, #4]
    23f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    23fa:	f04f 0400 	mov.w	r4, #0
    23fe:	e9c2 3404 	strd	r3, r4, [r2, #16]
    2402:	687a      	ldr	r2, [r7, #4]
    2404:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2408:	f04f 0400 	mov.w	r4, #0
    240c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	f04f 0200 	mov.w	r2, #0
    2416:	621a      	str	r2, [r3, #32]
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	f04f 0200 	mov.w	r2, #0
    241e:	625a      	str	r2, [r3, #36]	; 0x24
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	4a04      	ldr	r2, [pc, #16]	; (2434 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x6c>)
    2424:	625a      	str	r2, [r3, #36]	; 0x24
  {
  }
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	4618      	mov	r0, r3
    242a:	3714      	adds	r7, #20
    242c:	46bd      	mov	sp, r7
    242e:	bd90      	pop	{r4, r7, pc}
    2430:	0000a1b0 	.word	0x0000a1b0
    2434:	42b40000 	.word	0x42b40000

00002438 <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void Initialize(
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
    2440:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.Initialize(frequency);
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	685a      	ldr	r2, [r3, #4]
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	685b      	ldr	r3, [r3, #4]
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	6839      	ldr	r1, [r7, #0]
    2450:	4610      	mov	r0, r2
    2452:	4798      	blx	r3
    SetFrequency(frequency);
    2454:	687b      	ldr	r3, [r7, #4]
    2456:	681b      	ldr	r3, [r3, #0]
    2458:	3304      	adds	r3, #4
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	6839      	ldr	r1, [r7, #0]
    245e:	6878      	ldr	r0, [r7, #4]
    2460:	4798      	blx	r3
  }
    2462:	bf00      	nop
    2464:	3708      	adds	r7, #8
    2466:	46bd      	mov	sp, r7
    2468:	bd80      	pop	{r7, pc}

0000246a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    246a:	b580      	push	{r7, lr}
    246c:	b086      	sub	sp, #24
    246e:	af00      	add	r7, sp, #0
    2470:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2472:	6878      	ldr	r0, [r7, #4]
    2474:	f000 fef6 	bl	3264 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2478:	eef0 7a40 	vmov.f32	s15, s0
	}
    247c:	eeb0 0a67 	vmov.f32	s0, s15
    2480:	3718      	adds	r7, #24
    2482:	46bd      	mov	sp, r7
    2484:	bd80      	pop	{r7, pc}

00002486 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2486:	b580      	push	{r7, lr}
    2488:	ed2d 8b02 	vpush	{d8}
    248c:	b084      	sub	sp, #16
    248e:	af00      	add	r7, sp, #0
    2490:	6078      	str	r0, [r7, #4]
    2492:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	4618      	mov	r0, r3
    2498:	f7fe fc68 	bl	d6c <units::linear_scale<float>::operator()() const>
    249c:	eeb0 8a40 	vmov.f32	s16, s0
    24a0:	683b      	ldr	r3, [r7, #0]
    24a2:	4618      	mov	r0, r3
    24a4:	f7fe fc62 	bl	d6c <units::linear_scale<float>::operator()() const>
    24a8:	eef0 7a40 	vmov.f32	s15, s0
    24ac:	edc7 7a03 	vstr	s15, [r7, #12]
    24b0:	f107 030c 	add.w	r3, r7, #12
    24b4:	4618      	mov	r0, r3
    24b6:	f7ff ffd8 	bl	246a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    24ba:	eeb0 7a40 	vmov.f32	s14, s0
    24be:	eec8 7a07 	vdiv.f32	s15, s16, s14
    24c2:	f107 0308 	add.w	r3, r7, #8
    24c6:	eeb0 0a67 	vmov.f32	s0, s15
    24ca:	4618      	mov	r0, r3
    24cc:	f7fe fc89 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    24d0:	68bb      	ldr	r3, [r7, #8]
	}
    24d2:	4618      	mov	r0, r3
    24d4:	3710      	adds	r7, #16
    24d6:	46bd      	mov	sp, r7
    24d8:	ecbd 8b02 	vpop	{d8}
    24dc:	bd80      	pop	{r7, pc}

000024de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    24de:	b490      	push	{r4, r7}
    24e0:	b082      	sub	sp, #8
    24e2:	af00      	add	r7, sp, #0
    24e4:	6078      	str	r0, [r7, #4]
    24e6:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    24e8:	683b      	ldr	r3, [r7, #0]
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	f04f 0400 	mov.w	r4, #0
    24f0:	687a      	ldr	r2, [r7, #4]
    24f2:	e9c2 3400 	strd	r3, r4, [r2]
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	4618      	mov	r0, r3
    24fa:	3708      	adds	r7, #8
    24fc:	46bd      	mov	sp, r7
    24fe:	bc90      	pop	{r4, r7}
    2500:	4770      	bx	lr

00002502 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void SetFrequency(
    2502:	b590      	push	{r4, r7, lr}
    2504:	b089      	sub	sp, #36	; 0x24
    2506:	af00      	add	r7, sp, #0
    2508:	6078      	str	r0, [r7, #4]
    250a:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.SetFrequency(frequency);
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	685a      	ldr	r2, [r3, #4]
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	685b      	ldr	r3, [r3, #4]
    2514:	681b      	ldr	r3, [r3, #0]
    2516:	330c      	adds	r3, #12
    2518:	681b      	ldr	r3, [r3, #0]
    251a:	6839      	ldr	r1, [r7, #0]
    251c:	4610      	mov	r0, r2
    251e:	4798      	blx	r3
    waveform_period_ =
        std::chrono::microseconds((1_MHz / frequency).to<uint32_t>());
    2520:	f04f 0001 	mov.w	r0, #1
    2524:	f04f 0100 	mov.w	r1, #0
    2528:	f7fe f84c 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
    252c:	4603      	mov	r3, r0
    252e:	61fb      	str	r3, [r7, #28]
    2530:	463a      	mov	r2, r7
    2532:	f107 031c 	add.w	r3, r7, #28
    2536:	4611      	mov	r1, r2
    2538:	4618      	mov	r0, r3
    253a:	f7ff ffa4 	bl	2486 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    253e:	4603      	mov	r3, r0
    2540:	61bb      	str	r3, [r7, #24]
    2542:	f107 0318 	add.w	r3, r7, #24
    2546:	4618      	mov	r0, r3
    2548:	f7ff fa90 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    254c:	4603      	mov	r3, r0
    254e:	617b      	str	r3, [r7, #20]
    2550:	f107 0214 	add.w	r2, r7, #20
    2554:	f107 0308 	add.w	r3, r7, #8
    2558:	4611      	mov	r1, r2
    255a:	4618      	mov	r0, r3
    255c:	f7ff ffbf 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    waveform_period_ =
    2560:	687a      	ldr	r2, [r7, #4]
    2562:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    2566:	e9c2 3402 	strd	r3, r4, [r2, #8]
  }
    256a:	bf00      	nop
    256c:	3724      	adds	r7, #36	; 0x24
    256e:	46bd      	mov	sp, r7
    2570:	bd90      	pop	{r4, r7, pc}

00002572 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  // Sets the minimum and maximum pulse width lengths that the class will
  // use to clamp its pulse width output when using SetAngle.
  virtual void SetPulseBounds(std::chrono::microseconds lower,
    2572:	b490      	push	{r4, r7}
    2574:	b084      	sub	sp, #16
    2576:	af00      	add	r7, sp, #0
    2578:	60f8      	str	r0, [r7, #12]
    257a:	e9c7 2300 	strd	r2, r3, [r7]
                              std::chrono::microseconds upper)
  {
    pulse_lower_bound_ = lower;
    257e:	68fa      	ldr	r2, [r7, #12]
    2580:	e9d7 3400 	ldrd	r3, r4, [r7]
    2584:	e9c2 3404 	strd	r3, r4, [r2, #16]
    pulse_upper_bound_ = upper;
    2588:	68fa      	ldr	r2, [r7, #12]
    258a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    258e:	e9c2 3406 	strd	r3, r4, [r2, #24]
  }
    2592:	bf00      	nop
    2594:	3710      	adds	r7, #16
    2596:	46bd      	mov	sp, r7
    2598:	bc90      	pop	{r4, r7}
    259a:	4770      	bx	lr

0000259c <sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Sets your angle bounds that maps angles to microseconds when
  // using SetAngle
  virtual void SetAngleBounds(units::angle::degree_t min_angle,
    259c:	b480      	push	{r7}
    259e:	b085      	sub	sp, #20
    25a0:	af00      	add	r7, sp, #0
    25a2:	60f8      	str	r0, [r7, #12]
    25a4:	60b9      	str	r1, [r7, #8]
    25a6:	607a      	str	r2, [r7, #4]
                              units::angle::degree_t max_angle)
  {
    min_angle_ = min_angle;
    25a8:	68fb      	ldr	r3, [r7, #12]
    25aa:	68ba      	ldr	r2, [r7, #8]
    25ac:	621a      	str	r2, [r3, #32]
    max_angle_ = max_angle;
    25ae:	68fb      	ldr	r3, [r7, #12]
    25b0:	687a      	ldr	r2, [r7, #4]
    25b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
    25b4:	bf00      	nop
    25b6:	3714      	adds	r7, #20
    25b8:	46bd      	mov	sp, r7
    25ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    25be:	4770      	bx	lr

000025c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    25c0:	b490      	push	{r4, r7}
    25c2:	b082      	sub	sp, #8
    25c4:	af00      	add	r7, sp, #0
    25c6:	6078      	str	r0, [r7, #4]
	{ return __r; }
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	e9d3 3400 	ldrd	r3, r4, [r3]
    25ce:	4618      	mov	r0, r3
    25d0:	4621      	mov	r1, r4
    25d2:	3708      	adds	r7, #8
    25d4:	46bd      	mov	sp, r7
    25d6:	bc90      	pop	{r4, r7}
    25d8:	4770      	bx	lr

000025da <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  virtual void SetPulseWidthInMicroseconds(
    25da:	b5b0      	push	{r4, r5, r7, lr}
    25dc:	ed2d 8b02 	vpush	{d8}
    25e0:	b084      	sub	sp, #16
    25e2:	af00      	add	r7, sp, #0
    25e4:	60f8      	str	r0, [r7, #12]
    25e6:	e9c7 2300 	strd	r2, r3, [r7]
      std::chrono::microseconds pulse_width)
  {
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    25ea:	68fb      	ldr	r3, [r7, #12]
    25ec:	685d      	ldr	r5, [r3, #4]
    25ee:	68fb      	ldr	r3, [r7, #12]
    25f0:	685b      	ldr	r3, [r3, #4]
                            static_cast<float>(waveform_period_.count()));
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	3304      	adds	r3, #4
    25f6:	681c      	ldr	r4, [r3, #0]
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    25f8:	463b      	mov	r3, r7
    25fa:	4618      	mov	r0, r3
    25fc:	f7ff ffe0 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2600:	4602      	mov	r2, r0
    2602:	460b      	mov	r3, r1
    2604:	4610      	mov	r0, r2
    2606:	4619      	mov	r1, r3
    2608:	f005 fb60 	bl	7ccc <__aeabi_l2f>
    260c:	ee08 0a10 	vmov	s16, r0
                            static_cast<float>(waveform_period_.count()));
    2610:	68fb      	ldr	r3, [r7, #12]
    2612:	3308      	adds	r3, #8
    2614:	4618      	mov	r0, r3
    2616:	f7ff ffd3 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    261a:	4602      	mov	r2, r0
    261c:	460b      	mov	r3, r1
    261e:	4610      	mov	r0, r2
    2620:	4619      	mov	r1, r3
    2622:	f005 fb53 	bl	7ccc <__aeabi_l2f>
    2626:	ee07 0a10 	vmov	s14, r0
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    262a:	eec8 7a07 	vdiv.f32	s15, s16, s14
    262e:	eeb0 0a67 	vmov.f32	s0, s15
    2632:	4628      	mov	r0, r5
    2634:	47a0      	blx	r4
  }
    2636:	bf00      	nop
    2638:	3710      	adds	r7, #16
    263a:	46bd      	mov	sp, r7
    263c:	ecbd 8b02 	vpop	{d8}
    2640:	bdb0      	pop	{r4, r5, r7, pc}

00002642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>:
		inline constexpr Ty to() const noexcept
    2642:	b580      	push	{r7, lr}
    2644:	b082      	sub	sp, #8
    2646:	af00      	add	r7, sp, #0
    2648:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    264a:	6878      	ldr	r0, [r7, #4]
    264c:	f000 f807 	bl	265e <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    2650:	eef0 7a40 	vmov.f32	s15, s0
		}
    2654:	eeb0 0a67 	vmov.f32	s0, s15
    2658:	3708      	adds	r7, #8
    265a:	46bd      	mov	sp, r7
    265c:	bd80      	pop	{r7, pc}

0000265e <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    265e:	b580      	push	{r7, lr}
    2660:	b082      	sub	sp, #8
    2662:	af00      	add	r7, sp, #0
    2664:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	4618      	mov	r0, r3
    266a:	f7fe fb7f 	bl	d6c <units::linear_scale<float>::operator()() const>
    266e:	eef0 7a40 	vmov.f32	s15, s0
		}
    2672:	eeb0 0a67 	vmov.f32	s0, s15
    2676:	3708      	adds	r7, #8
    2678:	46bd      	mov	sp, r7
    267a:	bd80      	pop	{r7, pc}

0000267c <sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Should only be used after pulse bounds and angle bounds have been set.
  virtual void SetAngle(units::angle::degree_t angle)
    267c:	b5b0      	push	{r4, r5, r7, lr}
    267e:	ed2d 8b04 	vpush	{d8-d9}
    2682:	b086      	sub	sp, #24
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    2688:	6039      	str	r1, [r7, #0]
  {
    float pulse_width = Map(angle.to<float>(),
    268a:	463b      	mov	r3, r7
    268c:	4618      	mov	r0, r3
    268e:	f7ff ffd8 	bl	2642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2692:	eeb0 8a40 	vmov.f32	s16, s0
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	3320      	adds	r3, #32
    269a:	4618      	mov	r0, r3
    269c:	f7ff ffd1 	bl	2642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    26a0:	eef0 8a40 	vmov.f32	s17, s0
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	3324      	adds	r3, #36	; 0x24
    26a8:	4618      	mov	r0, r3
    26aa:	f7ff ffca 	bl	2642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    26ae:	eeb0 9a40 	vmov.f32	s18, s0
                            min_angle_.to<float>(),
                            max_angle_.to<float>(),
                            static_cast<float>(pulse_lower_bound_.count()),
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	3310      	adds	r3, #16
    26b6:	4618      	mov	r0, r3
    26b8:	f7ff ff82 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    26bc:	4603      	mov	r3, r0
    26be:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    26c0:	4618      	mov	r0, r3
    26c2:	4621      	mov	r1, r4
    26c4:	f005 fb02 	bl	7ccc <__aeabi_l2f>
    26c8:	4605      	mov	r5, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	3318      	adds	r3, #24
    26ce:	4618      	mov	r0, r3
    26d0:	f7ff ff76 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    26d4:	4603      	mov	r3, r0
    26d6:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    26d8:	4618      	mov	r0, r3
    26da:	4621      	mov	r1, r4
    26dc:	f005 faf6 	bl	7ccc <__aeabi_l2f>
    26e0:	4603      	mov	r3, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    26e2:	ee02 3a10 	vmov	s4, r3
    26e6:	ee01 5a90 	vmov	s3, r5
    26ea:	eeb0 1a49 	vmov.f32	s2, s18
    26ee:	eef0 0a68 	vmov.f32	s1, s17
    26f2:	eeb0 0a48 	vmov.f32	s0, s16
    26f6:	f000 fdcf 	bl	3298 <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    26fa:	ed87 0a05 	vstr	s0, [r7, #20]
    SetPulseWidthInMicroseconds(
        std::chrono::microseconds(static_cast<uint32_t>(pulse_width)));
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	681b      	ldr	r3, [r3, #0]
    2702:	3310      	adds	r3, #16
    2704:	681c      	ldr	r4, [r3, #0]
    2706:	edd7 7a05 	vldr	s15, [r7, #20]
    270a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    270e:	ee17 3a90 	vmov	r3, s15
    2712:	613b      	str	r3, [r7, #16]
    SetPulseWidthInMicroseconds(
    2714:	f107 0210 	add.w	r2, r7, #16
    2718:	f107 0308 	add.w	r3, r7, #8
    271c:	4611      	mov	r1, r2
    271e:	4618      	mov	r0, r3
    2720:	f7ff fedd 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    2724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2728:	6878      	ldr	r0, [r7, #4]
    272a:	47a0      	blx	r4
  }
    272c:	bf00      	nop
    272e:	3718      	adds	r7, #24
    2730:	46bd      	mov	sp, r7
    2732:	ecbd 8b04 	vpop	{d8-d9}
    2736:	bdb0      	pop	{r4, r5, r7, pc}

00002738 <std::chrono::duration_values<long long>::max()>:
	max()
    2738:	b598      	push	{r3, r4, r7, lr}
    273a:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    273c:	f7fd fe14 	bl	368 <std::numeric_limits<long long>::max()>
    2740:	4603      	mov	r3, r0
    2742:	460c      	mov	r4, r1
    2744:	4618      	mov	r0, r3
    2746:	4621      	mov	r1, r4
    2748:	bd98      	pop	{r3, r4, r7, pc}

0000274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    274a:	b590      	push	{r4, r7, lr}
    274c:	b085      	sub	sp, #20
    274e:	af00      	add	r7, sp, #0
    2750:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    2752:	f7ff fff1 	bl	2738 <std::chrono::duration_values<long long>::max()>
    2756:	4603      	mov	r3, r0
    2758:	460c      	mov	r4, r1
    275a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    275e:	f107 0308 	add.w	r3, r7, #8
    2762:	4619      	mov	r1, r3
    2764:	6878      	ldr	r0, [r7, #4]
    2766:	f7fe f901 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    276a:	6878      	ldr	r0, [r7, #4]
    276c:	3714      	adds	r7, #20
    276e:	46bd      	mov	sp, r7
    2770:	bd90      	pop	{r4, r7, pc}
    2772:	Address 0x0000000000002772 is out of bounds.


00002774 <vUartTask(void*)>:
//     }
//     vTaskDelay(100);
//   }
// } 
void vUartTask(void *pvParameters)
{
    2774:	b590      	push	{r4, r7, lr}
    2776:	b09d      	sub	sp, #116	; 0x74
    2778:	af02      	add	r7, sp, #8
    277a:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t receive = 0;
    2780:	2300      	movs	r3, #0
    2782:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                              DefaultSystemController())
    2786:	f7fe fcff 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    278a:	4603      	mov	r3, r0
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    278c:	461a      	mov	r2, r3
    278e:	f107 031c 	add.w	r3, r7, #28
    2792:	498a      	ldr	r1, [pc, #552]	; (29bc <vUartTask(void*)+0x248>)
    2794:	4618      	mov	r0, r3
    2796:	f7fe ff5d 	bl	1654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
  uart2.Initialize(38400);
    279a:	f107 031c 	add.w	r3, r7, #28
    279e:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    27a2:	4618      	mov	r0, r3
    27a4:	f7fe ff70 	bl	1688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    27a8:	2339      	movs	r3, #57	; 0x39
    27aa:	4a85      	ldr	r2, [pc, #532]	; (29c0 <vUartTask(void*)+0x24c>)
    27ac:	4985      	ldr	r1, [pc, #532]	; (29c4 <vUartTask(void*)+0x250>)
    27ae:	4886      	ldr	r0, [pc, #536]	; (29c8 <vUartTask(void*)+0x254>)
    27b0:	f003 fe10 	bl	63d4 <printf>
  int finger = 0;
    27b4:	2300      	movs	r3, #0
    27b6:	667b      	str	r3, [r7, #100]	; 0x64
  int fing_arr[NUM_FINGERS] = {2,3,4,5};
    27b8:	4b84      	ldr	r3, [pc, #528]	; (29cc <vUartTask(void*)+0x258>)
    27ba:	f107 040c 	add.w	r4, r7, #12
    27be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    27c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  while(1)
  {
    // Send a float (Glove data) over UART
    for(int i = 0; i < NUM_FINGERS; i++)
    27c4:	2300      	movs	r3, #0
    27c6:	663b      	str	r3, [r7, #96]	; 0x60
    27c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    27ca:	2b03      	cmp	r3, #3
    27cc:	f300 8098 	bgt.w	2900 <vUartTask(void*)+0x18c>
    {
      bool leave = false;
    27d0:	2300      	movs	r3, #0
    27d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      int leave_count = 0;
    27d6:	2300      	movs	r3, #0
    27d8:	65bb      	str	r3, [r7, #88]	; 0x58
      while(!leave)
    27da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    27de:	2b00      	cmp	r3, #0
    27e0:	d143      	bne.n	286a <vUartTask(void*)+0xf6>
      {
        if(uart2.Read() == 0xF)
    27e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    27e6:	4618      	mov	r0, r3
    27e8:	f7ff ffaf 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    27ec:	f107 011c 	add.w	r1, r7, #28
    27f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    27f4:	4608      	mov	r0, r1
    27f6:	f7fe fce3 	bl	11c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    27fa:	4603      	mov	r3, r0
    27fc:	2b0f      	cmp	r3, #15
    27fe:	bf0c      	ite	eq
    2800:	2301      	moveq	r3, #1
    2802:	2300      	movne	r3, #0
    2804:	b2db      	uxtb	r3, r3
    2806:	2b00      	cmp	r3, #0
    2808:	d003      	beq.n	2812 <vUartTask(void*)+0x9e>
        {
          leave_count++;
    280a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    280c:	3301      	adds	r3, #1
    280e:	65bb      	str	r3, [r7, #88]	; 0x58
    2810:	e001      	b.n	2816 <vUartTask(void*)+0xa2>
        }
        else
        {
          leave_count = 0;
    2812:	2300      	movs	r3, #0
    2814:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(leave_count == 3)
    2816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2818:	2b03      	cmp	r3, #3
    281a:	d1de      	bne.n	27da <vUartTask(void*)+0x66>
        {
          finger = uart2.Read()/100;
    281c:	f107 0330 	add.w	r3, r7, #48	; 0x30
    2820:	4618      	mov	r0, r3
    2822:	f7ff ff92 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    2826:	f107 011c 	add.w	r1, r7, #28
    282a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    282e:	4608      	mov	r0, r1
    2830:	f7fe fcc6 	bl	11c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    2834:	4603      	mov	r3, r0
    2836:	461a      	mov	r2, r3
    2838:	4b65      	ldr	r3, [pc, #404]	; (29d0 <vUartTask(void*)+0x25c>)
    283a:	fba3 2302 	umull	r2, r3, r3, r2
    283e:	095b      	lsrs	r3, r3, #5
    2840:	b2db      	uxtb	r3, r3
    2842:	667b      	str	r3, [r7, #100]	; 0x64
          if(finger == 0 || finger == 1 || finger == 2 || finger == 3)
    2844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2846:	2b00      	cmp	r3, #0
    2848:	d008      	beq.n	285c <vUartTask(void*)+0xe8>
    284a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    284c:	2b01      	cmp	r3, #1
    284e:	d005      	beq.n	285c <vUartTask(void*)+0xe8>
    2850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2852:	2b02      	cmp	r3, #2
    2854:	d002      	beq.n	285c <vUartTask(void*)+0xe8>
    2856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2858:	2b03      	cmp	r3, #3
    285a:	d103      	bne.n	2864 <vUartTask(void*)+0xf0>
          {
            leave = true;
    285c:	2301      	movs	r3, #1
    285e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    2862:	e001      	b.n	2868 <vUartTask(void*)+0xf4>
          }
          else 
          {
            leave_count = 0;
    2864:	2300      	movs	r3, #0
    2866:	65bb      	str	r3, [r7, #88]	; 0x58
      while(!leave)
    2868:	e7b7      	b.n	27da <vUartTask(void*)+0x66>
          }
        }
      }
      for(size_t j = 0; j < 4; j++)
    286a:	2300      	movs	r3, #0
    286c:	657b      	str	r3, [r7, #84]	; 0x54
    286e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2870:	2b03      	cmp	r3, #3
    2872:	d822      	bhi.n	28ba <vUartTask(void*)+0x146>
      {
        receive = 0;
    2874:	2300      	movs	r3, #0
    2876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        receive = uart2.Read();
    287a:	f107 0338 	add.w	r3, r7, #56	; 0x38
    287e:	4618      	mov	r0, r3
    2880:	f7ff ff63 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    2884:	f107 011c 	add.w	r1, r7, #28
    2888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    288c:	4608      	mov	r0, r1
    288e:	f7fe fc97 	bl	11c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    2892:	4603      	mov	r3, r0
    2894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        shared_mem->rec[finger].ui = (shared_mem->rec[finger].ui << 8) | receive;
    2898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    289a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    28a0:	021a      	lsls	r2, r3, #8
    28a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    28a6:	ea42 0103 	orr.w	r1, r2, r3
    28aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    28ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    28ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for(size_t j = 0; j < 4; j++)
    28b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    28b4:	3301      	adds	r3, #1
    28b6:	657b      	str	r3, [r7, #84]	; 0x54
    28b8:	e7d9      	b.n	286e <vUartTask(void*)+0xfa>
      }
      printf("adc %d Read %f for finger %d\n", fing_arr[finger], shared_mem->rec[finger].f, finger);
    28ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    28bc:	009b      	lsls	r3, r3, #2
    28be:	f107 0268 	add.w	r2, r7, #104	; 0x68
    28c2:	4413      	add	r3, r2
    28c4:	f853 4c5c 	ldr.w	r4, [r3, #-92]
    28c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    28ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    28cc:	009b      	lsls	r3, r3, #2
    28ce:	4413      	add	r3, r2
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	4618      	mov	r0, r3
    28d4:	f005 f882 	bl	79dc <__aeabi_f2d>
    28d8:	460a      	mov	r2, r1
    28da:	4601      	mov	r1, r0
    28dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    28de:	9300      	str	r3, [sp, #0]
    28e0:	4613      	mov	r3, r2
    28e2:	460a      	mov	r2, r1
    28e4:	4621      	mov	r1, r4
    28e6:	483b      	ldr	r0, [pc, #236]	; (29d4 <vUartTask(void*)+0x260>)
    28e8:	f003 fd74 	bl	63d4 <printf>
      fflush(stdout);
    28ec:	4b3a      	ldr	r3, [pc, #232]	; (29d8 <vUartTask(void*)+0x264>)
    28ee:	681b      	ldr	r3, [r3, #0]
    28f0:	689b      	ldr	r3, [r3, #8]
    28f2:	4618      	mov	r0, r3
    28f4:	f006 fbe6 	bl	90c4 <fflush>
    for(int i = 0; i < NUM_FINGERS; i++)
    28f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    28fa:	3301      	adds	r3, #1
    28fc:	663b      	str	r3, [r7, #96]	; 0x60
    28fe:	e763      	b.n	27c8 <vUartTask(void*)+0x54>
    }
    for(int i = 0; i < NUM_FINGERS; i++)
    2900:	2300      	movs	r3, #0
    2902:	653b      	str	r3, [r7, #80]	; 0x50
    2904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2906:	2b03      	cmp	r3, #3
    2908:	dc54      	bgt.n	29b4 <vUartTask(void*)+0x240>
    {
      uart2.Write((uint8_t) 0xF);
    290a:	f107 031c 	add.w	r3, r7, #28
    290e:	210f      	movs	r1, #15
    2910:	4618      	mov	r0, r3
    2912:	f7fe fc43 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      uart2.Write((uint8_t) 0xF);
    2916:	f107 031c 	add.w	r3, r7, #28
    291a:	210f      	movs	r1, #15
    291c:	4618      	mov	r0, r3
    291e:	f7fe fc3d 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      uart2.Write((uint8_t) 0xF);
    2922:	f107 031c 	add.w	r3, r7, #28
    2926:	210f      	movs	r1, #15
    2928:	4618      	mov	r0, r3
    292a:	f7fe fc37 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      uart2.Write((uint8_t) 0xF);
    292e:	f107 031c 	add.w	r3, r7, #28
    2932:	210f      	movs	r1, #15
    2934:	4618      	mov	r0, r3
    2936:	f7fe fc31 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      uart2.Write((uint8_t) i*100);
    293a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    293c:	b2db      	uxtb	r3, r3
    293e:	461a      	mov	r2, r3
    2940:	0092      	lsls	r2, r2, #2
    2942:	4413      	add	r3, r2
    2944:	461a      	mov	r2, r3
    2946:	0091      	lsls	r1, r2, #2
    2948:	461a      	mov	r2, r3
    294a:	460b      	mov	r3, r1
    294c:	4413      	add	r3, r2
    294e:	009b      	lsls	r3, r3, #2
    2950:	b2da      	uxtb	r2, r3
    2952:	f107 031c 	add.w	r3, r7, #28
    2956:	4611      	mov	r1, r2
    2958:	4618      	mov	r0, r3
    295a:	f7fe fc1f 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      for(size_t j = 24; j > 0; j -= 8)
    295e:	2318      	movs	r3, #24
    2960:	64fb      	str	r3, [r7, #76]	; 0x4c
    2962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2964:	2b00      	cmp	r3, #0
    2966:	d015      	beq.n	2994 <vUartTask(void*)+0x220>
      {
        uint8_t sendval = shared_mem->sen[i].ui >> j; 
    2968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    296a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    296c:	3204      	adds	r2, #4
    296e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2974:	fa22 f303 	lsr.w	r3, r2, r3
    2978:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        uart2.Write(sendval);
    297c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    2980:	f107 031c 	add.w	r3, r7, #28
    2984:	4611      	mov	r1, r2
    2986:	4618      	mov	r0, r3
    2988:	f7fe fc08 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      for(size_t j = 24; j > 0; j -= 8)
    298c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    298e:	3b08      	subs	r3, #8
    2990:	64fb      	str	r3, [r7, #76]	; 0x4c
    2992:	e7e6      	b.n	2962 <vUartTask(void*)+0x1ee>
      }
      uart2.Write((uint8_t) shared_mem->sen[i].ui);
    2994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2998:	3204      	adds	r2, #4
    299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    299e:	b2da      	uxtb	r2, r3
    29a0:	f107 031c 	add.w	r3, r7, #28
    29a4:	4611      	mov	r1, r2
    29a6:	4618      	mov	r0, r3
    29a8:	f7fe fbf8 	bl	119c <sjsu::Uart::Write(unsigned char) const>
    for(int i = 0; i < NUM_FINGERS; i++)
    29ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    29ae:	3301      	adds	r3, #1
    29b0:	653b      	str	r3, [r7, #80]	; 0x50
    29b2:	e7a7      	b.n	2904 <vUartTask(void*)+0x190>
      //LOG_INFO("Sent value %f over UART %i", shared_mem->sen[i].f, i);
    }
    vTaskDelay(100);
    29b4:	2064      	movs	r0, #100	; 0x64
    29b6:	f001 fa8d 	bl	3ed4 <vTaskDelay>
  }
    29ba:	e703      	b.n	27c4 <vUartTask(void*)+0x50>
    29bc:	1000000c 	.word	0x1000000c
    29c0:	0000a294 	.word	0x0000a294
    29c4:	0000a178 	.word	0x0000a178
    29c8:	00009e3c 	.word	0x00009e3c
    29cc:	00009ea8 	.word	0x00009ea8
    29d0:	51eb851f 	.word	0x51eb851f
    29d4:	00009e88 	.word	0x00009e88
    29d8:	10000098 	.word	0x10000098

000029dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    29dc:	b490      	push	{r4, r7}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    29e6:	683b      	ldr	r3, [r7, #0]
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	ea4f 74e3 	mov.w	r4, r3, asr #31
    29ee:	687a      	ldr	r2, [r7, #4]
    29f0:	e9c2 3400 	strd	r3, r4, [r2]
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	4618      	mov	r0, r3
    29f8:	3708      	adds	r7, #8
    29fa:	46bd      	mov	sp, r7
    29fc:	bc90      	pop	{r4, r7}
    29fe:	4770      	bx	lr

00002a00 <sjsu::Adc::Adc(sjsu::Adc const&)>:
    2a00:	b480      	push	{r7}
    2a02:	b083      	sub	sp, #12
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
    2a08:	6039      	str	r1, [r7, #0]
    2a0a:	4a05      	ldr	r2, [pc, #20]	; (2a20 <sjsu::Adc::Adc(sjsu::Adc const&)+0x20>)
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	601a      	str	r2, [r3, #0]
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	4618      	mov	r0, r3
    2a14:	370c      	adds	r7, #12
    2a16:	46bd      	mov	sp, r7
    2a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1c:	4770      	bx	lr
    2a1e:	bf00      	nop
    2a20:	0000a214 	.word	0x0000a214

00002a24 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>:
class Adc final : public sjsu::Adc
    2a24:	b580      	push	{r7, lr}
    2a26:	b082      	sub	sp, #8
    2a28:	af00      	add	r7, sp, #0
    2a2a:	6078      	str	r0, [r7, #4]
    2a2c:	6039      	str	r1, [r7, #0]
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	683a      	ldr	r2, [r7, #0]
    2a32:	4611      	mov	r1, r2
    2a34:	4618      	mov	r0, r3
    2a36:	f7ff ffe3 	bl	2a00 <sjsu::Adc::Adc(sjsu::Adc const&)>
    2a3a:	4a08      	ldr	r2, [pc, #32]	; (2a5c <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)+0x38>)
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	601a      	str	r2, [r3, #0]
    2a40:	683b      	ldr	r3, [r7, #0]
    2a42:	685a      	ldr	r2, [r3, #4]
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	605a      	str	r2, [r3, #4]
    2a48:	683b      	ldr	r3, [r7, #0]
    2a4a:	689a      	ldr	r2, [r3, #8]
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	609a      	str	r2, [r3, #8]
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	4618      	mov	r0, r3
    2a54:	3708      	adds	r7, #8
    2a56:	46bd      	mov	sp, r7
    2a58:	bd80      	pop	{r7, pc}
    2a5a:	bf00      	nop
    2a5c:	0000a200 	.word	0x0000a200

00002a60 <sjsu::Servo::Servo(sjsu::Servo const&)>:
class Servo
    2a60:	b490      	push	{r4, r7}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
    2a66:	6078      	str	r0, [r7, #4]
    2a68:	6039      	str	r1, [r7, #0]
    2a6a:	4a13      	ldr	r2, [pc, #76]	; (2ab8 <sjsu::Servo::Servo(sjsu::Servo const&)+0x58>)
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	601a      	str	r2, [r3, #0]
    2a70:	683b      	ldr	r3, [r7, #0]
    2a72:	685a      	ldr	r2, [r3, #4]
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	605a      	str	r2, [r3, #4]
    2a78:	687a      	ldr	r2, [r7, #4]
    2a7a:	683b      	ldr	r3, [r7, #0]
    2a7c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
    2a80:	e9c2 3402 	strd	r3, r4, [r2, #8]
    2a84:	687a      	ldr	r2, [r7, #4]
    2a86:	683b      	ldr	r3, [r7, #0]
    2a88:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
    2a8c:	e9c2 3404 	strd	r3, r4, [r2, #16]
    2a90:	687a      	ldr	r2, [r7, #4]
    2a92:	683b      	ldr	r3, [r7, #0]
    2a94:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
    2a98:	e9c2 3406 	strd	r3, r4, [r2, #24]
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	683a      	ldr	r2, [r7, #0]
    2aa0:	6a12      	ldr	r2, [r2, #32]
    2aa2:	621a      	str	r2, [r3, #32]
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	683a      	ldr	r2, [r7, #0]
    2aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2aaa:	625a      	str	r2, [r3, #36]	; 0x24
    2aac:	687b      	ldr	r3, [r7, #4]
    2aae:	4618      	mov	r0, r3
    2ab0:	3708      	adds	r7, #8
    2ab2:	46bd      	mov	sp, r7
    2ab4:	bc90      	pop	{r4, r7}
    2ab6:	4770      	bx	lr
    2ab8:	0000a1b0 	.word	0x0000a1b0

00002abc <vSensorAndActuatorTask(void*)>:
} 

void vSensorAndActuatorTask(void *pvParameters)
{
    2abc:	b5b0      	push	{r4, r5, r7, lr}
    2abe:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
    2ac2:	af02      	add	r7, sp, #8
    2ac4:	1d3b      	adds	r3, r7, #4
    2ac6:	6018      	str	r0, [r3, #0]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    2ac8:	1d3b      	adds	r3, r7, #4
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  float pot_position = 0;
    2ad0:	f04f 0300 	mov.w	r3, #0
    2ad4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t prev_vals[NUM_FINGERS] = {0};
    2ad8:	f507 730a 	add.w	r3, r7, #552	; 0x228
    2adc:	2200      	movs	r2, #0
    2ade:	601a      	str	r2, [r3, #0]
    2ae0:	605a      	str	r2, [r3, #4]
    2ae2:	609a      	str	r2, [r3, #8]
    2ae4:	60da      	str	r2, [r3, #12]
                             DefaultSystemController())
    2ae6:	f7fe fb4f 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2aea:	4603      	mov	r3, r0
  // Pin initialization for ADC channels
  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    2aec:	461a      	mov	r2, r3
    2aee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
    2af2:	49d2      	ldr	r1, [pc, #840]	; (2e3c <vSensorAndActuatorTask(void*)+0x380>)
    2af4:	4618      	mov	r0, r3
    2af6:	f7fe ff73 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2afa:	f7fe fb45 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2afe:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc3(sjsu::lpc40xx::Adc::Channel::kChannel3);
    2b00:	461a      	mov	r2, r3
    2b02:	f507 7304 	add.w	r3, r7, #528	; 0x210
    2b06:	49ce      	ldr	r1, [pc, #824]	; (2e40 <vSensorAndActuatorTask(void*)+0x384>)
    2b08:	4618      	mov	r0, r3
    2b0a:	f7fe ff69 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2b0e:	f7fe fb3b 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b12:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc4(sjsu::lpc40xx::Adc::Channel::kChannel4);
    2b14:	461a      	mov	r2, r3
    2b16:	f507 7301 	add.w	r3, r7, #516	; 0x204
    2b1a:	49ca      	ldr	r1, [pc, #808]	; (2e44 <vSensorAndActuatorTask(void*)+0x388>)
    2b1c:	4618      	mov	r0, r3
    2b1e:	f7fe ff5f 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2b22:	f7fe fb31 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b26:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc5(sjsu::lpc40xx::Adc::Channel::kChannel5);
    2b28:	461a      	mov	r2, r3
    2b2a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
    2b2e:	49c6      	ldr	r1, [pc, #792]	; (2e48 <vSensorAndActuatorTask(void*)+0x38c>)
    2b30:	4618      	mov	r0, r3
    2b32:	f7fe ff55 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    2b36:	f7fe fb27 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b3a:	4603      	mov	r3, r0

  // Pin initialization for Linear Actuators
  sjsu::lpc40xx::Pwm p2_0(sjsu::lpc40xx::Pwm::Channel::kPwm0);
    2b3c:	461a      	mov	r2, r3
    2b3e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
    2b42:	49c2      	ldr	r1, [pc, #776]	; (2e4c <vSensorAndActuatorTask(void*)+0x390>)
    2b44:	4618      	mov	r0, r3
    2b46:	f7ff f961 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2b4a:	f7fe fb1d 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b4e:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_1(sjsu::lpc40xx::Pwm::Channel::kPwm1);
    2b50:	461a      	mov	r2, r3
    2b52:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
    2b56:	49be      	ldr	r1, [pc, #760]	; (2e50 <vSensorAndActuatorTask(void*)+0x394>)
    2b58:	4618      	mov	r0, r3
    2b5a:	f7ff f957 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2b5e:	f7fe fb13 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b62:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_2(sjsu::lpc40xx::Pwm::Channel::kPwm2);
    2b64:	461a      	mov	r2, r3
    2b66:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
    2b6a:	49ba      	ldr	r1, [pc, #744]	; (2e54 <vSensorAndActuatorTask(void*)+0x398>)
    2b6c:	4618      	mov	r0, r3
    2b6e:	f7ff f94d 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2b72:	f7fe fb09 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b76:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_4(sjsu::lpc40xx::Pwm::Channel::kPwm4);
    2b78:	461a      	mov	r2, r3
    2b7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
    2b7e:	49b6      	ldr	r1, [pc, #728]	; (2e58 <vSensorAndActuatorTask(void*)+0x39c>)
    2b80:	4618      	mov	r0, r3
    2b82:	f7ff f943 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2b86:	f7fe faff 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2b8a:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_5(sjsu::lpc40xx::Pwm::Channel::kPwm5);
    2b8c:	461a      	mov	r2, r3
    2b8e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
    2b92:	49b2      	ldr	r1, [pc, #712]	; (2e5c <vSensorAndActuatorTask(void*)+0x3a0>)
    2b94:	4618      	mov	r0, r3
    2b96:	f7ff f939 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
  // Object declaration for Linear actuators
  sjsu::Servo linear_actuator0(p2_0);
    2b9a:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
    2b9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
    2ba2:	4611      	mov	r1, r2
    2ba4:	4618      	mov	r0, r3
    2ba6:	f7ff fc0f 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator1(p2_1);
    2baa:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
    2bae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
    2bb2:	4611      	mov	r1, r2
    2bb4:	4618      	mov	r0, r3
    2bb6:	f7ff fc07 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator2(p2_2);
    2bba:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
    2bbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
    2bc2:	4611      	mov	r1, r2
    2bc4:	4618      	mov	r0, r3
    2bc6:	f7ff fbff 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator3(p2_4);
    2bca:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
    2bce:	f507 738c 	add.w	r3, r7, #280	; 0x118
    2bd2:	4611      	mov	r1, r2
    2bd4:	4618      	mov	r0, r3
    2bd6:	f7ff fbf7 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator4(p2_5);
    2bda:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
    2bde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
    2be2:	4611      	mov	r1, r2
    2be4:	4618      	mov	r0, r3
    2be6:	f7ff fbef 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  // Arrays to store peripheral handles
  sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc3, adc4, adc5};
    2bea:	f507 7207 	add.w	r2, r7, #540	; 0x21c
    2bee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2bf2:	4611      	mov	r1, r2
    2bf4:	4618      	mov	r0, r3
    2bf6:	f7ff ff15 	bl	2a24 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2bfa:	f507 7204 	add.w	r2, r7, #528	; 0x210
    2bfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2c02:	330c      	adds	r3, #12
    2c04:	4611      	mov	r1, r2
    2c06:	4618      	mov	r0, r3
    2c08:	f7ff ff0c 	bl	2a24 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2c0c:	f507 7201 	add.w	r2, r7, #516	; 0x204
    2c10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2c14:	3318      	adds	r3, #24
    2c16:	4611      	mov	r1, r2
    2c18:	4618      	mov	r0, r3
    2c1a:	f7ff ff03 	bl	2a24 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2c1e:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
    2c22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2c26:	3324      	adds	r3, #36	; 0x24
    2c28:	4611      	mov	r1, r2
    2c2a:	4618      	mov	r0, r3
    2c2c:	f7ff fefa 	bl	2a24 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
  //sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc3, adc4};
  sjsu::Servo linear_actuator_arr[NUM_FINGERS] = {linear_actuator0, linear_actuator1, linear_actuator2, linear_actuator3};
    2c30:	f507 72c8 	add.w	r2, r7, #400	; 0x190
    2c34:	f107 0320 	add.w	r3, r7, #32
    2c38:	4611      	mov	r1, r2
    2c3a:	4618      	mov	r0, r3
    2c3c:	f7ff ff10 	bl	2a60 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2c40:	f507 72b4 	add.w	r2, r7, #360	; 0x168
    2c44:	f107 0320 	add.w	r3, r7, #32
    2c48:	3328      	adds	r3, #40	; 0x28
    2c4a:	4611      	mov	r1, r2
    2c4c:	4618      	mov	r0, r3
    2c4e:	f7ff ff07 	bl	2a60 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2c52:	f507 72a0 	add.w	r2, r7, #320	; 0x140
    2c56:	f107 0320 	add.w	r3, r7, #32
    2c5a:	3350      	adds	r3, #80	; 0x50
    2c5c:	4611      	mov	r1, r2
    2c5e:	4618      	mov	r0, r3
    2c60:	f7ff fefe 	bl	2a60 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2c64:	f507 728c 	add.w	r2, r7, #280	; 0x118
    2c68:	f107 0320 	add.w	r3, r7, #32
    2c6c:	3378      	adds	r3, #120	; 0x78
    2c6e:	4611      	mov	r1, r2
    2c70:	4618      	mov	r0, r3
    2c72:	f7ff fef5 	bl	2a60 <sjsu::Servo::Servo(sjsu::Servo const&)>
  //sjsu::Servo linear_actuator_arr[NUM_FINGERS] = {linear_actuator0, linear_actuator1, linear_actuator2};
  // Set up Linear actuators with proper boundaries and initial conditions
  for(int i = 0; i < NUM_FINGERS; i++)
    2c76:	2300      	movs	r3, #0
    2c78:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    2c7c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
    2c80:	2b03      	cmp	r3, #3
    2c82:	dc79      	bgt.n	2d78 <vSensorAndActuatorTask(void*)+0x2bc>
  {
      linear_actuator_arr[i].Initialize();
    2c84:	f107 0120 	add.w	r1, r7, #32
    2c88:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2c8c:	4613      	mov	r3, r2
    2c8e:	009b      	lsls	r3, r3, #2
    2c90:	4413      	add	r3, r2
    2c92:	00db      	lsls	r3, r3, #3
    2c94:	18c8      	adds	r0, r1, r3
    2c96:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2c9a:	4613      	mov	r3, r2
    2c9c:	009b      	lsls	r3, r3, #2
    2c9e:	4413      	add	r3, r2
    2ca0:	00db      	lsls	r3, r3, #3
    2ca2:	f107 0120 	add.w	r1, r7, #32
    2ca6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2caa:	4613      	mov	r3, r2
    2cac:	009b      	lsls	r3, r3, #2
    2cae:	4413      	add	r3, r2
    2cb0:	00db      	lsls	r3, r3, #3
    2cb2:	440b      	add	r3, r1
    2cb4:	681b      	ldr	r3, [r3, #0]
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	4a69      	ldr	r2, [pc, #420]	; (2e60 <vSensorAndActuatorTask(void*)+0x3a4>)
    2cba:	6811      	ldr	r1, [r2, #0]
    2cbc:	4798      	blx	r3
      linear_actuator_arr[i].SetFrequency(motor_controller_freq);
    2cbe:	f107 0120 	add.w	r1, r7, #32
    2cc2:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2cc6:	4613      	mov	r3, r2
    2cc8:	009b      	lsls	r3, r3, #2
    2cca:	4413      	add	r3, r2
    2ccc:	00db      	lsls	r3, r3, #3
    2cce:	18c8      	adds	r0, r1, r3
    2cd0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2cd4:	4613      	mov	r3, r2
    2cd6:	009b      	lsls	r3, r3, #2
    2cd8:	4413      	add	r3, r2
    2cda:	00db      	lsls	r3, r3, #3
    2cdc:	f107 0120 	add.w	r1, r7, #32
    2ce0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2ce4:	4613      	mov	r3, r2
    2ce6:	009b      	lsls	r3, r3, #2
    2ce8:	4413      	add	r3, r2
    2cea:	00db      	lsls	r3, r3, #3
    2cec:	440b      	add	r3, r1
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	3304      	adds	r3, #4
    2cf2:	681b      	ldr	r3, [r3, #0]
    2cf4:	4a5b      	ldr	r2, [pc, #364]	; (2e64 <vSensorAndActuatorTask(void*)+0x3a8>)
    2cf6:	6811      	ldr	r1, [r2, #0]
    2cf8:	4798      	blx	r3
      linear_actuator_arr[i].SetPulseBounds(motor_controller_min_pulse, 
    2cfa:	f107 0120 	add.w	r1, r7, #32
    2cfe:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2d02:	4613      	mov	r3, r2
    2d04:	009b      	lsls	r3, r3, #2
    2d06:	4413      	add	r3, r2
    2d08:	00db      	lsls	r3, r3, #3
    2d0a:	18c8      	adds	r0, r1, r3
    2d0c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2d10:	4613      	mov	r3, r2
    2d12:	009b      	lsls	r3, r3, #2
    2d14:	4413      	add	r3, r2
    2d16:	00db      	lsls	r3, r3, #3
                                            motor_controller_max_pulse);
    2d18:	f107 0120 	add.w	r1, r7, #32
    2d1c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2d20:	4613      	mov	r3, r2
    2d22:	009b      	lsls	r3, r3, #2
    2d24:	4413      	add	r3, r2
    2d26:	00db      	lsls	r3, r3, #3
    2d28:	440b      	add	r3, r1
    2d2a:	681b      	ldr	r3, [r3, #0]
    2d2c:	3308      	adds	r3, #8
    2d2e:	6819      	ldr	r1, [r3, #0]
      linear_actuator_arr[i].SetPulseBounds(motor_controller_min_pulse, 
    2d30:	4a4d      	ldr	r2, [pc, #308]	; (2e68 <vSensorAndActuatorTask(void*)+0x3ac>)
    2d32:	4b4e      	ldr	r3, [pc, #312]	; (2e6c <vSensorAndActuatorTask(void*)+0x3b0>)
    2d34:	e9d3 3400 	ldrd	r3, r4, [r3]
    2d38:	e9cd 3400 	strd	r3, r4, [sp]
    2d3c:	e9d2 2300 	ldrd	r2, r3, [r2]
    2d40:	4788      	blx	r1
      LOG_INFO("linear_actuator%d initialized", i);
    2d42:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
    2d46:	9300      	str	r3, [sp, #0]
    2d48:	2399      	movs	r3, #153	; 0x99
    2d4a:	4a49      	ldr	r2, [pc, #292]	; (2e70 <vSensorAndActuatorTask(void*)+0x3b4>)
    2d4c:	4949      	ldr	r1, [pc, #292]	; (2e74 <vSensorAndActuatorTask(void*)+0x3b8>)
    2d4e:	484a      	ldr	r0, [pc, #296]	; (2e78 <vSensorAndActuatorTask(void*)+0x3bc>)
    2d50:	f003 fb40 	bl	63d4 <printf>
      adc_arr[i].Initialize();
    2d54:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    2d58:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
    2d5c:	4613      	mov	r3, r2
    2d5e:	005b      	lsls	r3, r3, #1
    2d60:	4413      	add	r3, r2
    2d62:	009b      	lsls	r3, r3, #2
    2d64:	440b      	add	r3, r1
    2d66:	4618      	mov	r0, r3
    2d68:	f7fe fe8c 	bl	1a84 <sjsu::lpc40xx::Adc::Initialize() const>
  for(int i = 0; i < NUM_FINGERS; i++)
    2d6c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
    2d70:	3301      	adds	r3, #1
    2d72:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    2d76:	e781      	b.n	2c7c <vSensorAndActuatorTask(void*)+0x1c0>
  }
  LOG_INFO("adc channels initialized");
    2d78:	239c      	movs	r3, #156	; 0x9c
    2d7a:	4a3d      	ldr	r2, [pc, #244]	; (2e70 <vSensorAndActuatorTask(void*)+0x3b4>)
    2d7c:	493f      	ldr	r1, [pc, #252]	; (2e7c <vSensorAndActuatorTask(void*)+0x3c0>)
    2d7e:	4840      	ldr	r0, [pc, #256]	; (2e80 <vSensorAndActuatorTask(void*)+0x3c4>)
    2d80:	f003 fb28 	bl	63d4 <printf>
  float pdubs_arr[NUM_FINGERS] = {2.0,2.1,2.2,2.4};
    2d84:	f107 0310 	add.w	r3, r7, #16
    2d88:	4a3e      	ldr	r2, [pc, #248]	; (2e84 <vSensorAndActuatorTask(void*)+0x3c8>)
    2d8a:	461c      	mov	r4, r3
    2d8c:	4613      	mov	r3, r2
    2d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  while(1)
  {
    for(int i = 0; i < NUM_FINGERS; i++)
    2d94:	2300      	movs	r3, #0
    2d96:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    2d9a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
    2d9e:	2b03      	cmp	r3, #3
    2da0:	dc7a      	bgt.n	2e98 <vSensorAndActuatorTask(void*)+0x3dc>
    {
      // Map the output from the PID controller to proper units for the LA 
      int converted_output = (sjsu::Map(shared_mem->rec[i].f, 0.0f, 3.3f, 1000.0f, 2000.0f));
    2da2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
    2da6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
    2daa:	009b      	lsls	r3, r3, #2
    2dac:	4413      	add	r3, r2
    2dae:	edd3 7a00 	vldr	s15, [r3]
    2db2:	ed9f 2a37 	vldr	s4, [pc, #220]	; 2e90 <vSensorAndActuatorTask(void*)+0x3d4>
    2db6:	eddf 1a34 	vldr	s3, [pc, #208]	; 2e88 <vSensorAndActuatorTask(void*)+0x3cc>
    2dba:	ed9f 1a34 	vldr	s2, [pc, #208]	; 2e8c <vSensorAndActuatorTask(void*)+0x3d0>
    2dbe:	eddf 0a35 	vldr	s1, [pc, #212]	; 2e94 <vSensorAndActuatorTask(void*)+0x3d8>
    2dc2:	eeb0 0a67 	vmov.f32	s0, s15
    2dc6:	f000 fa67 	bl	3298 <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    2dca:	eef0 7a40 	vmov.f32	s15, s0
    2dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2dd2:	ee17 2a90 	vmov	r2, s15
    2dd6:	f107 030c 	add.w	r3, r7, #12
    2dda:	601a      	str	r2, [r3, #0]
      // Update the linear actuator position 
      linear_actuator_arr[i].SetPulseWidthInMicroseconds(static_cast<std::chrono::microseconds>(converted_output));
    2ddc:	f107 0120 	add.w	r1, r7, #32
    2de0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
    2de4:	4613      	mov	r3, r2
    2de6:	009b      	lsls	r3, r3, #2
    2de8:	4413      	add	r3, r2
    2dea:	00db      	lsls	r3, r3, #3
    2dec:	18cd      	adds	r5, r1, r3
    2dee:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
    2df2:	4613      	mov	r3, r2
    2df4:	009b      	lsls	r3, r3, #2
    2df6:	4413      	add	r3, r2
    2df8:	00db      	lsls	r3, r3, #3
    2dfa:	f107 0120 	add.w	r1, r7, #32
    2dfe:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
    2e02:	4613      	mov	r3, r2
    2e04:	009b      	lsls	r3, r3, #2
    2e06:	4413      	add	r3, r2
    2e08:	00db      	lsls	r3, r3, #3
    2e0a:	440b      	add	r3, r1
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	3310      	adds	r3, #16
    2e10:	681c      	ldr	r4, [r3, #0]
    2e12:	f107 020c 	add.w	r2, r7, #12
    2e16:	f507 730e 	add.w	r3, r7, #568	; 0x238
    2e1a:	4611      	mov	r1, r2
    2e1c:	4618      	mov	r0, r3
    2e1e:	f7ff fddd 	bl	29dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2e22:	f507 730e 	add.w	r3, r7, #568	; 0x238
    2e26:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e2a:	4628      	mov	r0, r5
    2e2c:	47a0      	blx	r4
    for(int i = 0; i < NUM_FINGERS; i++)
    2e2e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
    2e32:	3301      	adds	r3, #1
    2e34:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    2e38:	e7af      	b.n	2d9a <vSensorAndActuatorTask(void*)+0x2de>
    2e3a:	bf00      	nop
    2e3c:	0000a098 	.word	0x0000a098
    2e40:	0000a0a0 	.word	0x0000a0a0
    2e44:	0000a0a8 	.word	0x0000a0a8
    2e48:	0000a0b0 	.word	0x0000a0b0
    2e4c:	0000a10c 	.word	0x0000a10c
    2e50:	0000a118 	.word	0x0000a118
    2e54:	0000a124 	.word	0x0000a124
    2e58:	0000a130 	.word	0x0000a130
    2e5c:	0000a13c 	.word	0x0000a13c
    2e60:	0000a160 	.word	0x0000a160
    2e64:	0000a164 	.word	0x0000a164
    2e68:	0000a168 	.word	0x0000a168
    2e6c:	0000a170 	.word	0x0000a170
    2e70:	0000a3f4 	.word	0x0000a3f4
    2e74:	0000a188 	.word	0x0000a188
    2e78:	00009eb8 	.word	0x00009eb8
    2e7c:	0000a198 	.word	0x0000a198
    2e80:	00009f10 	.word	0x00009f10
    2e84:	00009f64 	.word	0x00009f64
    2e88:	447a0000 	.word	0x447a0000
    2e8c:	40533333 	.word	0x40533333
    2e90:	44fa0000 	.word	0x44fa0000
    2e94:	00000000 	.word	0x00000000
      //LOG_INFO("Setting finger at %0.1f to duty cycle of %fms", pdubs_arr[i], converted_output);
    }
    for(int i = 0; i < NUM_FINGERS; i++)
    2e98:	2300      	movs	r3, #0
    2e9a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    2e9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
    2ea2:	2b03      	cmp	r3, #3
    2ea4:	dc2d      	bgt.n	2f02 <vSensorAndActuatorTask(void*)+0x446>
    {
      pot_position = adc_arr[i].Read();
    2ea6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    2eaa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
    2eae:	4613      	mov	r3, r2
    2eb0:	005b      	lsls	r3, r3, #1
    2eb2:	4413      	add	r3, r2
    2eb4:	009b      	lsls	r3, r3, #2
    2eb6:	440b      	add	r3, r1
    2eb8:	4618      	mov	r0, r3
    2eba:	f7fe fe71 	bl	1ba0 <sjsu::lpc40xx::Adc::Read() const>
    2ebe:	ee07 0a90 	vmov	s15, r0
    2ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2ec6:	edc7 7a91 	vstr	s15, [r7, #580]	; 0x244
      shared_mem->sen[i].f = sjsu::Map(pot_position, 0, 4095, 0.0f, CURRENT_MAX);
    2eca:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 2e90 <vSensorAndActuatorTask(void*)+0x3d4>
    2ece:	ed5f 0a0f 	vldr	s1, [pc, #-60]	; 2e94 <vSensorAndActuatorTask(void*)+0x3d8>
    2ed2:	f640 71ff 	movw	r1, #4095	; 0xfff
    2ed6:	2000      	movs	r0, #0
    2ed8:	ed97 0a91 	vldr	s0, [r7, #580]	; 0x244
    2edc:	f000 fa1d 	bl	331a <float sjsu::Map<float, int, float>(float, int, int, float, float)>
    2ee0:	eef0 7a40 	vmov.f32	s15, s0
    2ee4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
    2ee8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
    2eec:	3304      	adds	r3, #4
    2eee:	009b      	lsls	r3, r3, #2
    2ef0:	4413      	add	r3, r2
    2ef2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < NUM_FINGERS; i++)
    2ef6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
    2efa:	3301      	adds	r3, #1
    2efc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    2f00:	e7cd      	b.n	2e9e <vSensorAndActuatorTask(void*)+0x3e2>
    }
    vTaskDelay(100);
    2f02:	2064      	movs	r0, #100	; 0x64
    2f04:	f000 ffe6 	bl	3ed4 <vTaskDelay>
  }
    2f08:	e744      	b.n	2d94 <vSensorAndActuatorTask(void*)+0x2d8>
    2f0a:	bf00      	nop

00002f0c <main>:
#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"
#include "third_party/FreeRTOS/Source/include/queue.h"

int main()
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b08a      	sub	sp, #40	; 0x28
    2f10:	af02      	add	r7, sp, #8
  Q = xQueueCreate(10, sizeof(vals[NUM_FINGERS]));
    2f12:	2200      	movs	r2, #0
    2f14:	2110      	movs	r1, #16
    2f16:	200a      	movs	r0, #10
    2f18:	f001 fd19 	bl	494e <xQueueGenericCreate>
    2f1c:	4602      	mov	r2, r0
    2f1e:	4b10      	ldr	r3, [pc, #64]	; (2f60 <main+0x54>)
    2f20:	601a      	str	r2, [r3, #0]
  paramsStruct pvParameters;
  xTaskCreate(vUartTask, "uart_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 2, &xUartTaskHandle);
    2f22:	463a      	mov	r2, r7
    2f24:	4b0f      	ldr	r3, [pc, #60]	; (2f64 <main+0x58>)
    2f26:	9301      	str	r3, [sp, #4]
    2f28:	2302      	movs	r3, #2
    2f2a:	9300      	str	r3, [sp, #0]
    2f2c:	4613      	mov	r3, r2
    2f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f32:	490d      	ldr	r1, [pc, #52]	; (2f68 <main+0x5c>)
    2f34:	480d      	ldr	r0, [pc, #52]	; (2f6c <main+0x60>)
    2f36:	f000 fe9f 	bl	3c78 <xTaskCreate>
  xTaskCreate(vSensorAndActuatorTask, "linear actuator and current sensor task", 1024, &pvParameters, tskIDLE_PRIORITY + 1, &xSensorAndActuatorHandle);
    2f3a:	463a      	mov	r2, r7
    2f3c:	4b0c      	ldr	r3, [pc, #48]	; (2f70 <main+0x64>)
    2f3e:	9301      	str	r3, [sp, #4]
    2f40:	2301      	movs	r3, #1
    2f42:	9300      	str	r3, [sp, #0]
    2f44:	4613      	mov	r3, r2
    2f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f4a:	490a      	ldr	r1, [pc, #40]	; (2f74 <main+0x68>)
    2f4c:	480a      	ldr	r0, [pc, #40]	; (2f78 <main+0x6c>)
    2f4e:	f000 fe93 	bl	3c78 <xTaskCreate>
  vTaskStartScheduler();
    2f52:	f000 ffe3 	bl	3f1c <vTaskStartScheduler>
}
    2f56:	2300      	movs	r3, #0
    2f58:	4618      	mov	r0, r3
    2f5a:	3720      	adds	r7, #32
    2f5c:	46bd      	mov	sp, r7
    2f5e:	bd80      	pop	{r7, pc}
    2f60:	1000027c 	.word	0x1000027c
    2f64:	10000274 	.word	0x10000274
    2f68:	00009f74 	.word	0x00009f74
    2f6c:	00002775 	.word	0x00002775
    2f70:	10000278 	.word	0x10000278
    2f74:	00009f80 	.word	0x00009f80
    2f78:	00002abd 	.word	0x00002abd

00002f7c <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b084      	sub	sp, #16
    2f80:	af00      	add	r7, sp, #0
    2f82:	60f8      	str	r0, [r7, #12]
    2f84:	460b      	mov	r3, r1
    2f86:	80ba      	strh	r2, [r7, #4]
    2f88:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    2f8a:	793b      	ldrb	r3, [r7, #4]
    2f8c:	461a      	mov	r2, r3
    2f8e:	797b      	ldrb	r3, [r7, #5]
    2f90:	7af9      	ldrb	r1, [r7, #11]
    2f92:	68f8      	ldr	r0, [r7, #12]
    2f94:	f000 fa0a 	bl	33ac <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    2f98:	4603      	mov	r3, r0
}
    2f9a:	4618      	mov	r0, r3
    2f9c:	3710      	adds	r7, #16
    2f9e:	46bd      	mov	sp, r7
    2fa0:	bd80      	pop	{r7, pc}

00002fa2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    2fa2:	b580      	push	{r7, lr}
    2fa4:	b084      	sub	sp, #16
    2fa6:	af00      	add	r7, sp, #0
    2fa8:	6078      	str	r0, [r7, #4]
    2faa:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	4618      	mov	r0, r3
    2fb0:	f7fd fedc 	bl	d6c <units::linear_scale<float>::operator()() const>
    2fb4:	eef0 6a40 	vmov.f32	s13, s0
    2fb8:	683b      	ldr	r3, [r7, #0]
    2fba:	ee07 3a90 	vmov	s15, r3
    2fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    2fc6:	f107 030c 	add.w	r3, r7, #12
    2fca:	eeb0 0a47 	vmov.f32	s0, s14
    2fce:	4618      	mov	r0, r3
    2fd0:	f7fd fb4f 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2fd4:	68fb      	ldr	r3, [r7, #12]
	}
    2fd6:	4618      	mov	r0, r3
    2fd8:	3710      	adds	r7, #16
    2fda:	46bd      	mov	sp, r7
    2fdc:	bd80      	pop	{r7, pc}

00002fde <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    2fde:	b590      	push	{r4, r7, lr}
    2fe0:	b087      	sub	sp, #28
    2fe2:	af00      	add	r7, sp, #0
    2fe4:	60f8      	str	r0, [r7, #12]
    2fe6:	60b9      	str	r1, [r7, #8]
    2fe8:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    2fea:	68bb      	ldr	r3, [r7, #8]
    2fec:	e9d3 3400 	ldrd	r3, r4, [r3]
    2ff0:	1c59      	adds	r1, r3, #1
    2ff2:	f144 0200 	adc.w	r2, r4, #0
    2ff6:	68b8      	ldr	r0, [r7, #8]
    2ff8:	e9c0 1200 	strd	r1, r2, [r0]
    2ffc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3000:	f107 0310 	add.w	r3, r7, #16
    3004:	4619      	mov	r1, r3
    3006:	68f8      	ldr	r0, [r7, #12]
    3008:	f7fd fcb0 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    300c:	68f8      	ldr	r0, [r7, #12]
    300e:	371c      	adds	r7, #28
    3010:	46bd      	mov	sp, r7
    3012:	bd90      	pop	{r4, r7, pc}

00003014 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    // comparisons
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
    3014:	b5f0      	push	{r4, r5, r6, r7, lr}
    3016:	b087      	sub	sp, #28
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
    301c:	6039      	str	r1, [r7, #0]
		 const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() == __ct(__rhs).count();
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	e9d3 3400 	ldrd	r3, r4, [r3]
    3024:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3028:	f107 0308 	add.w	r3, r7, #8
    302c:	4618      	mov	r0, r3
    302e:	f7ff fac7 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3032:	4605      	mov	r5, r0
    3034:	460e      	mov	r6, r1
    3036:	683b      	ldr	r3, [r7, #0]
    3038:	e9d3 3400 	ldrd	r3, r4, [r3]
    303c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3040:	f107 0310 	add.w	r3, r7, #16
    3044:	4618      	mov	r0, r3
    3046:	f7ff fabb 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    304a:	4603      	mov	r3, r0
    304c:	460c      	mov	r4, r1
    304e:	42a6      	cmp	r6, r4
    3050:	bf06      	itte	eq
    3052:	429d      	cmpeq	r5, r3
    3054:	2301      	moveq	r3, #1
    3056:	2300      	movne	r3, #0
    3058:	b2db      	uxtb	r3, r3
      }
    305a:	4618      	mov	r0, r3
    305c:	371c      	adds	r7, #28
    305e:	46bd      	mov	sp, r7
    3060:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003062 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3062:	b580      	push	{r7, lr}
    3064:	ed2d 8b02 	vpush	{d8}
    3068:	b082      	sub	sp, #8
    306a:	af00      	add	r7, sp, #0
    306c:	6078      	str	r0, [r7, #4]
    306e:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	ed93 8a00 	vldr	s16, [r3]
    3076:	683b      	ldr	r3, [r7, #0]
    3078:	4618      	mov	r0, r3
    307a:	f7fd fada 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    307e:	eef0 7a40 	vmov.f32	s15, s0
    3082:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    308a:	bfcc      	ite	gt
    308c:	2301      	movgt	r3, #1
    308e:	2300      	movle	r3, #0
    3090:	b2db      	uxtb	r3, r3
		}
    3092:	4618      	mov	r0, r3
    3094:	3708      	adds	r7, #8
    3096:	46bd      	mov	sp, r7
    3098:	ecbd 8b02 	vpop	{d8}
    309c:	bd80      	pop	{r7, pc}

0000309e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    309e:	b580      	push	{r7, lr}
    30a0:	b082      	sub	sp, #8
    30a2:	af00      	add	r7, sp, #0
    30a4:	6078      	str	r0, [r7, #4]
    30a6:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    30a8:	683b      	ldr	r3, [r7, #0]
    30aa:	4618      	mov	r0, r3
    30ac:	f7fd fc80 	bl	9b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    30b0:	eef0 7a40 	vmov.f32	s15, s0
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    30ba:	687b      	ldr	r3, [r7, #4]
		}
    30bc:	4618      	mov	r0, r3
    30be:	3708      	adds	r7, #8
    30c0:	46bd      	mov	sp, r7
    30c2:	bd80      	pop	{r7, pc}

000030c4 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    30c4:	b480      	push	{r7}
    30c6:	b083      	sub	sp, #12
    30c8:	af00      	add	r7, sp, #0
    30ca:	6078      	str	r0, [r7, #4]
    30cc:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    30ce:	2201      	movs	r2, #1
    30d0:	683b      	ldr	r3, [r7, #0]
    30d2:	fa02 f303 	lsl.w	r3, r2, r3
    30d6:	461a      	mov	r2, r3
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	4313      	orrs	r3, r2
}
    30dc:	4618      	mov	r0, r3
    30de:	370c      	adds	r7, #12
    30e0:	46bd      	mov	sp, r7
    30e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30e6:	4770      	bx	lr

000030e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    30e8:	b480      	push	{r7}
    30ea:	b083      	sub	sp, #12
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
    30f0:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    30f2:	2201      	movs	r2, #1
    30f4:	683b      	ldr	r3, [r7, #0]
    30f6:	fa02 f303 	lsl.w	r3, r2, r3
    30fa:	43db      	mvns	r3, r3
    30fc:	461a      	mov	r2, r3
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	4013      	ands	r3, r2
}
    3102:	4618      	mov	r0, r3
    3104:	370c      	adds	r7, #12
    3106:	46bd      	mov	sp, r7
    3108:	f85d 7b04 	ldr.w	r7, [sp], #4
    310c:	4770      	bx	lr

0000310e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    310e:	b580      	push	{r7, lr}
    3110:	b084      	sub	sp, #16
    3112:	af00      	add	r7, sp, #0
    3114:	60f8      	str	r0, [r7, #12]
    3116:	60b9      	str	r1, [r7, #8]
    3118:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    311a:	793b      	ldrb	r3, [r7, #4]
    311c:	461a      	mov	r2, r3
    311e:	797b      	ldrb	r3, [r7, #5]
    3120:	68b9      	ldr	r1, [r7, #8]
    3122:	68f8      	ldr	r0, [r7, #12]
    3124:	f000 f9c4 	bl	34b0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    3128:	4603      	mov	r3, r0
}
    312a:	4618      	mov	r0, r3
    312c:	3710      	adds	r7, #16
    312e:	46bd      	mov	sp, r7
    3130:	bd80      	pop	{r7, pc}

00003132 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    3132:	b580      	push	{r7, lr}
    3134:	b084      	sub	sp, #16
    3136:	af00      	add	r7, sp, #0
    3138:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	4618      	mov	r0, r3
    313e:	f7fd fe15 	bl	d6c <units::linear_scale<float>::operator()() const>
    3142:	eef0 7a40 	vmov.f32	s15, s0
    3146:	edc7 7a03 	vstr	s15, [r7, #12]
    314a:	f107 030c 	add.w	r3, r7, #12
    314e:	4618      	mov	r0, r3
    3150:	f000 f9da 	bl	3508 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3154:	eef0 7a40 	vmov.f32	s15, s0
    3158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    315c:	ee17 3a90 	vmov	r3, s15
		}
    3160:	4618      	mov	r0, r3
    3162:	3710      	adds	r7, #16
    3164:	46bd      	mov	sp, r7
    3166:	bd80      	pop	{r7, pc}

00003168 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    3168:	b480      	push	{r7}
    316a:	b083      	sub	sp, #12
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
    3170:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    3172:	2201      	movs	r2, #1
    3174:	683b      	ldr	r3, [r7, #0]
    3176:	fa02 f303 	lsl.w	r3, r2, r3
    317a:	461a      	mov	r2, r3
    317c:	687b      	ldr	r3, [r7, #4]
    317e:	4013      	ands	r3, r2
    3180:	2b00      	cmp	r3, #0
    3182:	bf14      	ite	ne
    3184:	2301      	movne	r3, #1
    3186:	2300      	moveq	r3, #0
    3188:	b2db      	uxtb	r3, r3
}
    318a:	4618      	mov	r0, r3
    318c:	370c      	adds	r7, #12
    318e:	46bd      	mov	sp, r7
    3190:	f85d 7b04 	ldr.w	r7, [sp], #4
    3194:	4770      	bx	lr

00003196 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    3196:	b480      	push	{r7}
    3198:	b083      	sub	sp, #12
    319a:	af00      	add	r7, sp, #0
    319c:	4603      	mov	r3, r0
    319e:	6039      	str	r1, [r7, #0]
    31a0:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    31a2:	79fa      	ldrb	r2, [r7, #7]
    31a4:	683b      	ldr	r3, [r7, #0]
    31a6:	fa42 f303 	asr.w	r3, r2, r3
    31aa:	f003 0301 	and.w	r3, r3, #1
    31ae:	2b00      	cmp	r3, #0
    31b0:	bf14      	ite	ne
    31b2:	2301      	movne	r3, #1
    31b4:	2300      	moveq	r3, #0
    31b6:	b2db      	uxtb	r3, r3
}
    31b8:	4618      	mov	r0, r3
    31ba:	370c      	adds	r7, #12
    31bc:	46bd      	mov	sp, r7
    31be:	f85d 7b04 	ldr.w	r7, [sp], #4
    31c2:	4770      	bx	lr

000031c4 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    31c4:	b580      	push	{r7, lr}
    31c6:	b082      	sub	sp, #8
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    31ce:	783b      	ldrb	r3, [r7, #0]
    31d0:	4619      	mov	r1, r3
    31d2:	6878      	ldr	r0, [r7, #4]
    31d4:	f7ff ffc8 	bl	3168 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    31d8:	4603      	mov	r3, r0
}
    31da:	4618      	mov	r0, r3
    31dc:	3708      	adds	r7, #8
    31de:	46bd      	mov	sp, r7
    31e0:	bd80      	pop	{r7, pc}

000031e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    31e2:	b580      	push	{r7, lr}
    31e4:	b082      	sub	sp, #8
    31e6:	af00      	add	r7, sp, #0
    31e8:	6078      	str	r0, [r7, #4]
    31ea:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    31ec:	783b      	ldrb	r3, [r7, #0]
    31ee:	4619      	mov	r1, r3
    31f0:	6878      	ldr	r0, [r7, #4]
    31f2:	f7ff ff67 	bl	30c4 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    31f6:	4603      	mov	r3, r0
}
    31f8:	4618      	mov	r0, r3
    31fa:	3708      	adds	r7, #8
    31fc:	46bd      	mov	sp, r7
    31fe:	bd80      	pop	{r7, pc}

00003200 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    3200:	b580      	push	{r7, lr}
    3202:	b082      	sub	sp, #8
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
    3208:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    320a:	783b      	ldrb	r3, [r7, #0]
    320c:	4619      	mov	r1, r3
    320e:	787b      	ldrb	r3, [r7, #1]
    3210:	461a      	mov	r2, r3
    3212:	6878      	ldr	r0, [r7, #4]
    3214:	f000 f986 	bl	3524 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    3218:	4603      	mov	r3, r0
}
    321a:	4618      	mov	r0, r3
    321c:	3708      	adds	r7, #8
    321e:	46bd      	mov	sp, r7
    3220:	bd80      	pop	{r7, pc}

00003222 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    3222:	b580      	push	{r7, lr}
    3224:	b084      	sub	sp, #16
    3226:	af00      	add	r7, sp, #0
    3228:	60f8      	str	r0, [r7, #12]
    322a:	60b9      	str	r1, [r7, #8]
    322c:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    322e:	793b      	ldrb	r3, [r7, #4]
    3230:	461a      	mov	r2, r3
    3232:	797b      	ldrb	r3, [r7, #5]
    3234:	68b9      	ldr	r1, [r7, #8]
    3236:	68f8      	ldr	r0, [r7, #12]
    3238:	f000 f992 	bl	3560 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    323c:	4603      	mov	r3, r0
}
    323e:	4618      	mov	r0, r3
    3240:	3710      	adds	r7, #16
    3242:	46bd      	mov	sp, r7
    3244:	bd80      	pop	{r7, pc}

00003246 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    3246:	b580      	push	{r7, lr}
    3248:	b082      	sub	sp, #8
    324a:	af00      	add	r7, sp, #0
    324c:	6078      	str	r0, [r7, #4]
    324e:	8039      	strh	r1, [r7, #0]
  return Clear(target, bitmask.position);
    3250:	783b      	ldrb	r3, [r7, #0]
    3252:	4619      	mov	r1, r3
    3254:	6878      	ldr	r0, [r7, #4]
    3256:	f7ff ff47 	bl	30e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    325a:	4603      	mov	r3, r0
}
    325c:	4618      	mov	r0, r3
    325e:	3708      	adds	r7, #8
    3260:	46bd      	mov	sp, r7
    3262:	bd80      	pop	{r7, pc}

00003264 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    3264:	b480      	push	{r7}
    3266:	b085      	sub	sp, #20
    3268:	af00      	add	r7, sp, #0
    326a:	60f8      	str	r0, [r7, #12]
    326c:	7239      	strb	r1, [r7, #8]
    326e:	713a      	strb	r2, [r7, #4]
    3270:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    3272:	68fb      	ldr	r3, [r7, #12]
    3274:	edd3 7a00 	vldr	s15, [r3]
    3278:	ed9f 7a06 	vldr	s14, [pc, #24]	; 3294 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    327c:	eec7 6a87 	vdiv.f32	s13, s15, s14
    3280:	eef0 7a66 	vmov.f32	s15, s13
		}
    3284:	eeb0 0a67 	vmov.f32	s0, s15
    3288:	3714      	adds	r7, #20
    328a:	46bd      	mov	sp, r7
    328c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3290:	4770      	bx	lr
    3292:	bf00      	nop
    3294:	49742400 	.word	0x49742400

00003298 <float sjsu::Map<float, float, float>(float, float, float, float, float)>:
/// @param min - current minimum value that the value can reach
/// @param max - current maximum value that the value can reach
/// @param new_min - the new minimum value to scale and shift the old value to
/// @param new_max - the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    3298:	b480      	push	{r7}
    329a:	b08f      	sub	sp, #60	; 0x3c
    329c:	af00      	add	r7, sp, #0
    329e:	ed87 0a05 	vstr	s0, [r7, #20]
    32a2:	edc7 0a04 	vstr	s1, [r7, #16]
    32a6:	ed87 1a03 	vstr	s2, [r7, #12]
    32aa:	edc7 1a02 	vstr	s3, [r7, #8]
    32ae:	ed87 2a01 	vstr	s4, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    32b2:	697b      	ldr	r3, [r7, #20]
    32b4:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    32b6:	693b      	ldr	r3, [r7, #16]
    32b8:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    32ba:	68fb      	ldr	r3, [r7, #12]
    32bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    32be:	68bb      	ldr	r3, [r7, #8]
    32c0:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    32c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    32ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    32ce:	ee77 6a67 	vsub.f32	s13, s14, s15
    32d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    32d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    32da:	ee37 7a67 	vsub.f32	s14, s14, s15
    32de:	eec6 7a87 	vdiv.f32	s15, s13, s14
    32e2:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    32e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    32ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    32ee:	ee37 7a67 	vsub.f32	s14, s14, s15
    32f2:	edd7 7a08 	vldr	s15, [r7, #32]
    32f6:	ee67 7a27 	vmul.f32	s15, s14, s15
    32fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    32fe:	ee77 7a27 	vadd.f32	s15, s14, s15
    3302:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    3306:	69fb      	ldr	r3, [r7, #28]
    3308:	ee07 3a90 	vmov	s15, r3
};
    330c:	eeb0 0a67 	vmov.f32	s0, s15
    3310:	373c      	adds	r7, #60	; 0x3c
    3312:	46bd      	mov	sp, r7
    3314:	f85d 7b04 	ldr.w	r7, [sp], #4
    3318:	4770      	bx	lr

0000331a <float sjsu::Map<float, int, float>(float, int, int, float, float)>:
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    331a:	b480      	push	{r7}
    331c:	b08f      	sub	sp, #60	; 0x3c
    331e:	af00      	add	r7, sp, #0
    3320:	ed87 0a05 	vstr	s0, [r7, #20]
    3324:	6138      	str	r0, [r7, #16]
    3326:	60f9      	str	r1, [r7, #12]
    3328:	edc7 0a02 	vstr	s1, [r7, #8]
    332c:	ed87 1a01 	vstr	s2, [r7, #4]
  float map_value   = static_cast<float>(value);
    3330:	697b      	ldr	r3, [r7, #20]
    3332:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    3334:	693b      	ldr	r3, [r7, #16]
    3336:	ee07 3a90 	vmov	s15, r3
    333a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    333e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    3342:	68fb      	ldr	r3, [r7, #12]
    3344:	ee07 3a90 	vmov	s15, r3
    3348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    334c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    3350:	68bb      	ldr	r3, [r7, #8]
    3352:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    3358:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    335c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    3360:	ee77 6a67 	vsub.f32	s13, s14, s15
    3364:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    3368:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    336c:	ee37 7a67 	vsub.f32	s14, s14, s15
    3370:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3374:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    3378:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    337c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3380:	ee37 7a67 	vsub.f32	s14, s14, s15
    3384:	edd7 7a08 	vldr	s15, [r7, #32]
    3388:	ee67 7a27 	vmul.f32	s15, s14, s15
    338c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    3390:	ee77 7a27 	vadd.f32	s15, s14, s15
    3394:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    3398:	69fb      	ldr	r3, [r7, #28]
    339a:	ee07 3a90 	vmov	s15, r3
};
    339e:	eeb0 0a67 	vmov.f32	s0, s15
    33a2:	373c      	adds	r7, #60	; 0x3c
    33a4:	46bd      	mov	sp, r7
    33a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33aa:	4770      	bx	lr

000033ac <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    33ac:	b480      	push	{r7}
    33ae:	b089      	sub	sp, #36	; 0x24
    33b0:	af00      	add	r7, sp, #0
    33b2:	60f8      	str	r0, [r7, #12]
    33b4:	607a      	str	r2, [r7, #4]
    33b6:	603b      	str	r3, [r7, #0]
    33b8:	460b      	mov	r3, r1
    33ba:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    33bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33c0:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    33c2:	2320      	movs	r3, #32
    33c4:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    33c6:	683b      	ldr	r3, [r7, #0]
    33c8:	f1c3 0320 	rsb	r3, r3, #32
    33cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33d0:	fa22 f303 	lsr.w	r3, r2, r3
    33d4:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    33d6:	697a      	ldr	r2, [r7, #20]
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	fa02 f303 	lsl.w	r3, r2, r3
    33de:	43db      	mvns	r3, r3
    33e0:	68fa      	ldr	r2, [r7, #12]
    33e2:	4013      	ands	r3, r2
    33e4:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    33e6:	7afa      	ldrb	r2, [r7, #11]
    33e8:	697b      	ldr	r3, [r7, #20]
    33ea:	401a      	ands	r2, r3
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	fa02 f303 	lsl.w	r3, r2, r3
    33f2:	68fa      	ldr	r2, [r7, #12]
    33f4:	4313      	orrs	r3, r2
    33f6:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    33f8:	68fb      	ldr	r3, [r7, #12]
}
    33fa:	4618      	mov	r0, r3
    33fc:	3724      	adds	r7, #36	; 0x24
    33fe:	46bd      	mov	sp, r7
    3400:	f85d 7b04 	ldr.w	r7, [sp], #4
    3404:	4770      	bx	lr

00003406 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    3406:	b5f0      	push	{r4, r5, r6, r7, lr}
    3408:	b08b      	sub	sp, #44	; 0x2c
    340a:	af00      	add	r7, sp, #0
    340c:	60f8      	str	r0, [r7, #12]
    340e:	60b9      	str	r1, [r7, #8]
    3410:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    3412:	68bb      	ldr	r3, [r7, #8]
    3414:	e9d3 3400 	ldrd	r3, r4, [r3]
    3418:	e9c7 3406 	strd	r3, r4, [r7, #24]
    341c:	f107 0318 	add.w	r3, r7, #24
    3420:	4618      	mov	r0, r3
    3422:	f7ff f8cd 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3426:	4605      	mov	r5, r0
    3428:	460e      	mov	r6, r1
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	e9d3 3400 	ldrd	r3, r4, [r3]
    3430:	e9c7 3408 	strd	r3, r4, [r7, #32]
    3434:	f107 0320 	add.w	r3, r7, #32
    3438:	4618      	mov	r0, r3
    343a:	f7ff f8c1 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    343e:	460a      	mov	r2, r1
    3440:	4601      	mov	r1, r0
    3442:	194b      	adds	r3, r1, r5
    3444:	eb42 0406 	adc.w	r4, r2, r6
    3448:	e9c7 3404 	strd	r3, r4, [r7, #16]
    344c:	f107 0310 	add.w	r3, r7, #16
    3450:	4619      	mov	r1, r3
    3452:	68f8      	ldr	r0, [r7, #12]
    3454:	f7fd fa8a 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    3458:	68f8      	ldr	r0, [r7, #12]
    345a:	372c      	adds	r7, #44	; 0x2c
    345c:	46bd      	mov	sp, r7
    345e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003460 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
    3460:	b5f0      	push	{r4, r5, r6, r7, lr}
    3462:	b087      	sub	sp, #28
    3464:	af00      	add	r7, sp, #0
    3466:	6078      	str	r0, [r7, #4]
    3468:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	e9d3 3400 	ldrd	r3, r4, [r3]
    3470:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3474:	f107 0308 	add.w	r3, r7, #8
    3478:	4618      	mov	r0, r3
    347a:	f7ff f8a1 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    347e:	4605      	mov	r5, r0
    3480:	460e      	mov	r6, r1
    3482:	683b      	ldr	r3, [r7, #0]
    3484:	e9d3 3400 	ldrd	r3, r4, [r3]
    3488:	e9c7 3404 	strd	r3, r4, [r7, #16]
    348c:	f107 0310 	add.w	r3, r7, #16
    3490:	4618      	mov	r0, r3
    3492:	f7ff f895 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3496:	4603      	mov	r3, r0
    3498:	460c      	mov	r4, r1
    349a:	429d      	cmp	r5, r3
    349c:	eb76 0304 	sbcs.w	r3, r6, r4
    34a0:	bfb4      	ite	lt
    34a2:	2301      	movlt	r3, #1
    34a4:	2300      	movge	r3, #0
    34a6:	b2db      	uxtb	r3, r3
      }
    34a8:	4618      	mov	r0, r3
    34aa:	371c      	adds	r7, #28
    34ac:	46bd      	mov	sp, r7
    34ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000034b0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    34b0:	b480      	push	{r7}
    34b2:	b089      	sub	sp, #36	; 0x24
    34b4:	af00      	add	r7, sp, #0
    34b6:	60f8      	str	r0, [r7, #12]
    34b8:	60b9      	str	r1, [r7, #8]
    34ba:	607a      	str	r2, [r7, #4]
    34bc:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    34be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34c2:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    34c4:	2320      	movs	r3, #32
    34c6:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    34c8:	683b      	ldr	r3, [r7, #0]
    34ca:	f1c3 0320 	rsb	r3, r3, #32
    34ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34d2:	fa22 f303 	lsr.w	r3, r2, r3
    34d6:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    34d8:	697a      	ldr	r2, [r7, #20]
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	fa02 f303 	lsl.w	r3, r2, r3
    34e0:	43db      	mvns	r3, r3
    34e2:	68fa      	ldr	r2, [r7, #12]
    34e4:	4013      	ands	r3, r2
    34e6:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    34e8:	68ba      	ldr	r2, [r7, #8]
    34ea:	697b      	ldr	r3, [r7, #20]
    34ec:	401a      	ands	r2, r3
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	fa02 f303 	lsl.w	r3, r2, r3
    34f4:	68fa      	ldr	r2, [r7, #12]
    34f6:	4313      	orrs	r3, r2
    34f8:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    34fa:	68fb      	ldr	r3, [r7, #12]
}
    34fc:	4618      	mov	r0, r3
    34fe:	3724      	adds	r7, #36	; 0x24
    3500:	46bd      	mov	sp, r7
    3502:	f85d 7b04 	ldr.w	r7, [sp], #4
    3506:	4770      	bx	lr

00003508 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3508:	b580      	push	{r7, lr}
    350a:	b086      	sub	sp, #24
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3510:	6878      	ldr	r0, [r7, #4]
    3512:	f000 f851 	bl	35b8 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3516:	eef0 7a40 	vmov.f32	s15, s0
	}
    351a:	eeb0 0a67 	vmov.f32	s0, s15
    351e:	3718      	adds	r7, #24
    3520:	46bd      	mov	sp, r7
    3522:	bd80      	pop	{r7, pc}

00003524 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    3524:	b480      	push	{r7}
    3526:	b089      	sub	sp, #36	; 0x24
    3528:	af00      	add	r7, sp, #0
    352a:	60f8      	str	r0, [r7, #12]
    352c:	60b9      	str	r1, [r7, #8]
    352e:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3534:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3536:	2320      	movs	r3, #32
    3538:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	f1c3 0320 	rsb	r3, r3, #32
    3540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3544:	fa22 f303 	lsr.w	r3, r2, r3
    3548:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    354a:	68fa      	ldr	r2, [r7, #12]
    354c:	68bb      	ldr	r3, [r7, #8]
    354e:	40da      	lsrs	r2, r3
    3550:	697b      	ldr	r3, [r7, #20]
    3552:	4013      	ands	r3, r2
}
    3554:	4618      	mov	r0, r3
    3556:	3724      	adds	r7, #36	; 0x24
    3558:	46bd      	mov	sp, r7
    355a:	f85d 7b04 	ldr.w	r7, [sp], #4
    355e:	4770      	bx	lr

00003560 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3560:	b480      	push	{r7}
    3562:	b089      	sub	sp, #36	; 0x24
    3564:	af00      	add	r7, sp, #0
    3566:	60f8      	str	r0, [r7, #12]
    3568:	60b9      	str	r1, [r7, #8]
    356a:	607a      	str	r2, [r7, #4]
    356c:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    356e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3572:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3574:	2320      	movs	r3, #32
    3576:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    3578:	683b      	ldr	r3, [r7, #0]
    357a:	f1c3 0320 	rsb	r3, r3, #32
    357e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3582:	fa22 f303 	lsr.w	r3, r2, r3
    3586:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    3588:	697a      	ldr	r2, [r7, #20]
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	fa02 f303 	lsl.w	r3, r2, r3
    3590:	43db      	mvns	r3, r3
    3592:	68fa      	ldr	r2, [r7, #12]
    3594:	4013      	ands	r3, r2
    3596:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    3598:	68ba      	ldr	r2, [r7, #8]
    359a:	697b      	ldr	r3, [r7, #20]
    359c:	401a      	ands	r2, r3
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	fa02 f303 	lsl.w	r3, r2, r3
    35a4:	68fa      	ldr	r2, [r7, #12]
    35a6:	4313      	orrs	r3, r2
    35a8:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    35aa:	68fb      	ldr	r3, [r7, #12]
}
    35ac:	4618      	mov	r0, r3
    35ae:	3724      	adds	r7, #36	; 0x24
    35b0:	46bd      	mov	sp, r7
    35b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    35b6:	4770      	bx	lr

000035b8 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    35b8:	b480      	push	{r7}
    35ba:	b085      	sub	sp, #20
    35bc:	af00      	add	r7, sp, #0
    35be:	60f8      	str	r0, [r7, #12]
    35c0:	7239      	strb	r1, [r7, #8]
    35c2:	713a      	strb	r2, [r7, #4]
    35c4:	703b      	strb	r3, [r7, #0]
			return value;
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	ee07 3a90 	vmov	s15, r3
		}
    35ce:	eeb0 0a67 	vmov.f32	s0, s15
    35d2:	3714      	adds	r7, #20
    35d4:	46bd      	mov	sp, r7
    35d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35da:	4770      	bx	lr

000035dc <__static_initialization_and_destruction_0(int, int)>:
    35dc:	b580      	push	{r7, lr}
    35de:	b082      	sub	sp, #8
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
    35e4:	6039      	str	r1, [r7, #0]
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	2b01      	cmp	r3, #1
    35ea:	f040 80c4 	bne.w	3776 <__static_initialization_and_destruction_0(int, int)+0x19a>
    35ee:	683b      	ldr	r3, [r7, #0]
    35f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    35f4:	4293      	cmp	r3, r2
    35f6:	f040 80be 	bne.w	3776 <__static_initialization_and_destruction_0(int, int)+0x19a>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    35fa:	4b61      	ldr	r3, [pc, #388]	; (3780 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    35fc:	681b      	ldr	r3, [r3, #0]
    35fe:	f003 0301 	and.w	r3, r3, #1
    3602:	2b00      	cmp	r3, #0
    3604:	d105      	bne.n	3612 <__static_initialization_and_destruction_0(int, int)+0x36>
    3606:	4b5e      	ldr	r3, [pc, #376]	; (3780 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    3608:	2201      	movs	r2, #1
    360a:	601a      	str	r2, [r3, #0]
    360c:	4a5d      	ldr	r2, [pc, #372]	; (3784 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    360e:	4b5e      	ldr	r3, [pc, #376]	; (3788 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    3610:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    3612:	4b5e      	ldr	r3, [pc, #376]	; (378c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    3614:	681b      	ldr	r3, [r3, #0]
    3616:	f003 0301 	and.w	r3, r3, #1
    361a:	2b00      	cmp	r3, #0
    361c:	d105      	bne.n	362a <__static_initialization_and_destruction_0(int, int)+0x4e>
    361e:	4b5b      	ldr	r3, [pc, #364]	; (378c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    3620:	2201      	movs	r2, #1
    3622:	601a      	str	r2, [r3, #0]
    3624:	4a5a      	ldr	r2, [pc, #360]	; (3790 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    3626:	4b5b      	ldr	r3, [pc, #364]	; (3794 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    3628:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    362a:	4b5b      	ldr	r3, [pc, #364]	; (3798 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    362c:	681b      	ldr	r3, [r3, #0]
    362e:	f003 0301 	and.w	r3, r3, #1
    3632:	2b00      	cmp	r3, #0
    3634:	d105      	bne.n	3642 <__static_initialization_and_destruction_0(int, int)+0x66>
    3636:	4b58      	ldr	r3, [pc, #352]	; (3798 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    3638:	2201      	movs	r2, #1
    363a:	601a      	str	r2, [r3, #0]
    };
    363c:	4a57      	ldr	r2, [pc, #348]	; (379c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    363e:	4b58      	ldr	r3, [pc, #352]	; (37a0 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    3640:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    3642:	4b58      	ldr	r3, [pc, #352]	; (37a4 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	f003 0301 	and.w	r3, r3, #1
    364a:	2b00      	cmp	r3, #0
    364c:	d105      	bne.n	365a <__static_initialization_and_destruction_0(int, int)+0x7e>
    364e:	4b55      	ldr	r3, [pc, #340]	; (37a4 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3650:	2201      	movs	r2, #1
    3652:	601a      	str	r2, [r3, #0]
    };
    3654:	4a54      	ldr	r2, [pc, #336]	; (37a8 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    3656:	4b55      	ldr	r3, [pc, #340]	; (37ac <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    3658:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    365a:	4b55      	ldr	r3, [pc, #340]	; (37b0 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	f003 0301 	and.w	r3, r3, #1
    3662:	2b00      	cmp	r3, #0
    3664:	d105      	bne.n	3672 <__static_initialization_and_destruction_0(int, int)+0x96>
    3666:	4b52      	ldr	r3, [pc, #328]	; (37b0 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    3668:	2201      	movs	r2, #1
    366a:	601a      	str	r2, [r3, #0]
    };
    366c:	4a51      	ldr	r2, [pc, #324]	; (37b4 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    366e:	4b52      	ldr	r3, [pc, #328]	; (37b8 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    3670:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    3672:	4b52      	ldr	r3, [pc, #328]	; (37bc <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    3674:	681b      	ldr	r3, [r3, #0]
    3676:	f003 0301 	and.w	r3, r3, #1
    367a:	2b00      	cmp	r3, #0
    367c:	d105      	bne.n	368a <__static_initialization_and_destruction_0(int, int)+0xae>
    367e:	4b4f      	ldr	r3, [pc, #316]	; (37bc <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    3680:	2201      	movs	r2, #1
    3682:	601a      	str	r2, [r3, #0]
    3684:	4a4e      	ldr	r2, [pc, #312]	; (37c0 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    3686:	4b4f      	ldr	r3, [pc, #316]	; (37c4 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    3688:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    368a:	4b4f      	ldr	r3, [pc, #316]	; (37c8 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	f003 0301 	and.w	r3, r3, #1
    3692:	2b00      	cmp	r3, #0
    3694:	d106      	bne.n	36a4 <__static_initialization_and_destruction_0(int, int)+0xc8>
    3696:	4b4c      	ldr	r3, [pc, #304]	; (37c8 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    3698:	2201      	movs	r2, #1
    369a:	601a      	str	r2, [r3, #0]
    369c:	4b4b      	ldr	r3, [pc, #300]	; (37cc <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    369e:	4618      	mov	r0, r3
    36a0:	f7fe fb6a 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    36a4:	4b4a      	ldr	r3, [pc, #296]	; (37d0 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	f003 0301 	and.w	r3, r3, #1
    36ac:	2b00      	cmp	r3, #0
    36ae:	d114      	bne.n	36da <__static_initialization_and_destruction_0(int, int)+0xfe>
    36b0:	4b47      	ldr	r3, [pc, #284]	; (37d0 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    36b2:	2201      	movs	r2, #1
    36b4:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    36b6:	4a47      	ldr	r2, [pc, #284]	; (37d4 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    36b8:	4b47      	ldr	r3, [pc, #284]	; (37d8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    36ba:	601a      	str	r2, [r3, #0]
    36bc:	4a47      	ldr	r2, [pc, #284]	; (37dc <__static_initialization_and_destruction_0(int, int)+0x200>)
    36be:	4b46      	ldr	r3, [pc, #280]	; (37d8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    36c0:	605a      	str	r2, [r3, #4]
    36c2:	4a47      	ldr	r2, [pc, #284]	; (37e0 <__static_initialization_and_destruction_0(int, int)+0x204>)
    36c4:	4b44      	ldr	r3, [pc, #272]	; (37d8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    36c6:	609a      	str	r2, [r3, #8]
    36c8:	4a46      	ldr	r2, [pc, #280]	; (37e4 <__static_initialization_and_destruction_0(int, int)+0x208>)
    36ca:	4b43      	ldr	r3, [pc, #268]	; (37d8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    36cc:	60da      	str	r2, [r3, #12]
    36ce:	4a46      	ldr	r2, [pc, #280]	; (37e8 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    36d0:	4b41      	ldr	r3, [pc, #260]	; (37d8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    36d2:	611a      	str	r2, [r3, #16]
    36d4:	4a45      	ldr	r2, [pc, #276]	; (37ec <__static_initialization_and_destruction_0(int, int)+0x210>)
    36d6:	4b40      	ldr	r3, [pc, #256]	; (37d8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    36d8:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    36da:	4b45      	ldr	r3, [pc, #276]	; (37f0 <__static_initialization_and_destruction_0(int, int)+0x214>)
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	f003 0301 	and.w	r3, r3, #1
    36e2:	2b00      	cmp	r3, #0
    36e4:	d122      	bne.n	372c <__static_initialization_and_destruction_0(int, int)+0x150>
    36e6:	4b42      	ldr	r3, [pc, #264]	; (37f0 <__static_initialization_and_destruction_0(int, int)+0x214>)
    36e8:	2201      	movs	r2, #1
    36ea:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    36ec:	4b41      	ldr	r3, [pc, #260]	; (37f4 <__static_initialization_and_destruction_0(int, int)+0x218>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    36ee:	4a42      	ldr	r2, [pc, #264]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    36f0:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    36f2:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    36f4:	4a40      	ldr	r2, [pc, #256]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    36f6:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    36f8:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    36fa:	4a3f      	ldr	r2, [pc, #252]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    36fc:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    36fe:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    3700:	4a3d      	ldr	r2, [pc, #244]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3702:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3704:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    3706:	4a3c      	ldr	r2, [pc, #240]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3708:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    370a:	611a      	str	r2, [r3, #16]
    370c:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    370e:	4a3a      	ldr	r2, [pc, #232]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3710:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3712:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    3714:	4a38      	ldr	r2, [pc, #224]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3716:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3718:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    371a:	4a37      	ldr	r2, [pc, #220]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    371c:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    371e:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    3720:	4a35      	ldr	r2, [pc, #212]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3722:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    3724:	60da      	str	r2, [r3, #12]
    3726:	4a34      	ldr	r2, [pc, #208]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3728:	3234      	adds	r2, #52	; 0x34
    372a:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    372c:	4b33      	ldr	r3, [pc, #204]	; (37fc <__static_initialization_and_destruction_0(int, int)+0x220>)
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	f003 0301 	and.w	r3, r3, #1
    3734:	2b00      	cmp	r3, #0
    3736:	d106      	bne.n	3746 <__static_initialization_and_destruction_0(int, int)+0x16a>
    3738:	4b30      	ldr	r3, [pc, #192]	; (37fc <__static_initialization_and_destruction_0(int, int)+0x220>)
    373a:	2201      	movs	r2, #1
    373c:	601a      	str	r2, [r3, #0]
    373e:	4b2e      	ldr	r3, [pc, #184]	; (37f8 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3740:	461a      	mov	r2, r3
    3742:	4b2f      	ldr	r3, [pc, #188]	; (3800 <__static_initialization_and_destruction_0(int, int)+0x224>)
    3744:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm0Peripheral = {
    3746:	4b2f      	ldr	r3, [pc, #188]	; (3804 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	f003 0301 	and.w	r3, r3, #1
    374e:	2b00      	cmp	r3, #0
    3750:	d105      	bne.n	375e <__static_initialization_and_destruction_0(int, int)+0x182>
    3752:	4b2c      	ldr	r3, [pc, #176]	; (3804 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3754:	2201      	movs	r2, #1
    3756:	601a      	str	r2, [r3, #0]
    };
    3758:	4a2b      	ldr	r2, [pc, #172]	; (3808 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    375a:	4b2c      	ldr	r3, [pc, #176]	; (380c <__static_initialization_and_destruction_0(int, int)+0x230>)
    375c:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm1Peripheral = {
    375e:	4b2c      	ldr	r3, [pc, #176]	; (3810 <__static_initialization_and_destruction_0(int, int)+0x234>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	f003 0301 	and.w	r3, r3, #1
    3766:	2b00      	cmp	r3, #0
    3768:	d105      	bne.n	3776 <__static_initialization_and_destruction_0(int, int)+0x19a>
    376a:	4b29      	ldr	r3, [pc, #164]	; (3810 <__static_initialization_and_destruction_0(int, int)+0x234>)
    376c:	2201      	movs	r2, #1
    376e:	601a      	str	r2, [r3, #0]
    };
    3770:	4a28      	ldr	r2, [pc, #160]	; (3814 <__static_initialization_and_destruction_0(int, int)+0x238>)
    3772:	4b29      	ldr	r3, [pc, #164]	; (3818 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    3774:	601a      	str	r2, [r3, #0]
    3776:	bf00      	nop
    3778:	3708      	adds	r7, #8
    377a:	46bd      	mov	sp, r7
    377c:	bd80      	pop	{r7, pc}
    377e:	bf00      	nop
    3780:	10000280 	.word	0x10000280
    3784:	4002c000 	.word	0x4002c000
    3788:	1000011c 	.word	0x1000011c
    378c:	10000284 	.word	0x10000284
    3790:	400fc000 	.word	0x400fc000
    3794:	10000128 	.word	0x10000128
    3798:	10000288 	.word	0x10000288
    379c:	40098000 	.word	0x40098000
    37a0:	1000000c 	.word	0x1000000c
    37a4:	1000028c 	.word	0x1000028c
    37a8:	4009c000 	.word	0x4009c000
    37ac:	10000020 	.word	0x10000020
    37b0:	10000290 	.word	0x10000290
    37b4:	400a4000 	.word	0x400a4000
    37b8:	10000034 	.word	0x10000034
    37bc:	10000294 	.word	0x10000294
    37c0:	40034000 	.word	0x40034000
    37c4:	1000012c 	.word	0x1000012c
    37c8:	10000298 	.word	0x10000298
    37cc:	10000130 	.word	0x10000130
    37d0:	1000029c 	.word	0x1000029c
    37d4:	20098000 	.word	0x20098000
    37d8:	10000230 	.word	0x10000230
    37dc:	20098020 	.word	0x20098020
    37e0:	20098040 	.word	0x20098040
    37e4:	20098060 	.word	0x20098060
    37e8:	20098080 	.word	0x20098080
    37ec:	200980a0 	.word	0x200980a0
    37f0:	100002a0 	.word	0x100002a0
    37f4:	10000248 	.word	0x10000248
    37f8:	40028080 	.word	0x40028080
    37fc:	100002a4 	.word	0x100002a4
    3800:	10000270 	.word	0x10000270
    3804:	100002a8 	.word	0x100002a8
    3808:	40014000 	.word	0x40014000
    380c:	1000004c 	.word	0x1000004c
    3810:	100002ac 	.word	0x100002ac
    3814:	40018000 	.word	0x40018000
    3818:	10000054 	.word	0x10000054

0000381c <_GLOBAL__sub_I_xUartTaskHandle>:
    381c:	b580      	push	{r7, lr}
    381e:	af00      	add	r7, sp, #0
    3820:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3824:	2001      	movs	r0, #1
    3826:	f7ff fed9 	bl	35dc <__static_initialization_and_destruction_0(int, int)>
    382a:	bd80      	pop	{r7, pc}

0000382c <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    382c:	b480      	push	{r7}
    382e:	b087      	sub	sp, #28
    3830:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    3832:	2300      	movs	r3, #0
    3834:	617b      	str	r3, [r7, #20]
    3836:	697a      	ldr	r2, [r7, #20]
    3838:	4613      	mov	r3, r2
    383a:	005b      	lsls	r3, r3, #1
    383c:	4413      	add	r3, r2
    383e:	009b      	lsls	r3, r3, #2
    3840:	4a1f      	ldr	r2, [pc, #124]	; (38c0 <sjsu::InitializeDataSection()+0x94>)
    3842:	4413      	add	r3, r2
    3844:	4a1f      	ldr	r2, [pc, #124]	; (38c4 <sjsu::InitializeDataSection()+0x98>)
    3846:	4293      	cmp	r3, r2
    3848:	d233      	bcs.n	38b2 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    384a:	491d      	ldr	r1, [pc, #116]	; (38c0 <sjsu::InitializeDataSection()+0x94>)
    384c:	697a      	ldr	r2, [r7, #20]
    384e:	4613      	mov	r3, r2
    3850:	005b      	lsls	r3, r3, #1
    3852:	4413      	add	r3, r2
    3854:	009b      	lsls	r3, r3, #2
    3856:	440b      	add	r3, r1
    3858:	681b      	ldr	r3, [r3, #0]
    385a:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    385c:	4918      	ldr	r1, [pc, #96]	; (38c0 <sjsu::InitializeDataSection()+0x94>)
    385e:	697a      	ldr	r2, [r7, #20]
    3860:	4613      	mov	r3, r2
    3862:	005b      	lsls	r3, r3, #1
    3864:	4413      	add	r3, r2
    3866:	009b      	lsls	r3, r3, #2
    3868:	440b      	add	r3, r1
    386a:	685b      	ldr	r3, [r3, #4]
    386c:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    386e:	4914      	ldr	r1, [pc, #80]	; (38c0 <sjsu::InitializeDataSection()+0x94>)
    3870:	697a      	ldr	r2, [r7, #20]
    3872:	4613      	mov	r3, r2
    3874:	005b      	lsls	r3, r3, #1
    3876:	4413      	add	r3, r2
    3878:	009b      	lsls	r3, r3, #2
    387a:	440b      	add	r3, r1
    387c:	3308      	adds	r3, #8
    387e:	681b      	ldr	r3, [r3, #0]
    3880:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    3882:	2300      	movs	r3, #0
    3884:	613b      	str	r3, [r7, #16]
    3886:	693a      	ldr	r2, [r7, #16]
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	429a      	cmp	r2, r3
    388c:	d20d      	bcs.n	38aa <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    388e:	693b      	ldr	r3, [r7, #16]
    3890:	009b      	lsls	r3, r3, #2
    3892:	68fa      	ldr	r2, [r7, #12]
    3894:	441a      	add	r2, r3
    3896:	693b      	ldr	r3, [r7, #16]
    3898:	009b      	lsls	r3, r3, #2
    389a:	68b9      	ldr	r1, [r7, #8]
    389c:	440b      	add	r3, r1
    389e:	6812      	ldr	r2, [r2, #0]
    38a0:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    38a2:	693b      	ldr	r3, [r7, #16]
    38a4:	3301      	adds	r3, #1
    38a6:	613b      	str	r3, [r7, #16]
    38a8:	e7ed      	b.n	3886 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    38aa:	697b      	ldr	r3, [r7, #20]
    38ac:	3301      	adds	r3, #1
    38ae:	617b      	str	r3, [r7, #20]
    38b0:	e7c1      	b.n	3836 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    38b2:	bf00      	nop
    38b4:	371c      	adds	r7, #28
    38b6:	46bd      	mov	sp, r7
    38b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38bc:	4770      	bx	lr
    38be:	bf00      	nop
    38c0:	000000e4 	.word	0x000000e4
    38c4:	000000fc 	.word	0x000000fc

000038c8 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    38c8:	b480      	push	{r7}
    38ca:	b085      	sub	sp, #20
    38cc:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    38ce:	2300      	movs	r3, #0
    38d0:	60fb      	str	r3, [r7, #12]
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	00db      	lsls	r3, r3, #3
    38d6:	4a15      	ldr	r2, [pc, #84]	; (392c <sjsu::InitializeBssSection()+0x64>)
    38d8:	4413      	add	r3, r2
    38da:	4a15      	ldr	r2, [pc, #84]	; (3930 <sjsu::InitializeBssSection()+0x68>)
    38dc:	4293      	cmp	r3, r2
    38de:	d21e      	bcs.n	391e <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    38e0:	4a12      	ldr	r2, [pc, #72]	; (392c <sjsu::InitializeBssSection()+0x64>)
    38e2:	68fb      	ldr	r3, [r7, #12]
    38e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    38e8:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    38ea:	4a10      	ldr	r2, [pc, #64]	; (392c <sjsu::InitializeBssSection()+0x64>)
    38ec:	68fb      	ldr	r3, [r7, #12]
    38ee:	00db      	lsls	r3, r3, #3
    38f0:	4413      	add	r3, r2
    38f2:	685b      	ldr	r3, [r3, #4]
    38f4:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    38f6:	2300      	movs	r3, #0
    38f8:	60bb      	str	r3, [r7, #8]
    38fa:	68ba      	ldr	r2, [r7, #8]
    38fc:	683b      	ldr	r3, [r7, #0]
    38fe:	429a      	cmp	r2, r3
    3900:	d209      	bcs.n	3916 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    3902:	68bb      	ldr	r3, [r7, #8]
    3904:	009b      	lsls	r3, r3, #2
    3906:	687a      	ldr	r2, [r7, #4]
    3908:	4413      	add	r3, r2
    390a:	2200      	movs	r2, #0
    390c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    390e:	68bb      	ldr	r3, [r7, #8]
    3910:	3301      	adds	r3, #1
    3912:	60bb      	str	r3, [r7, #8]
    3914:	e7f1      	b.n	38fa <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	3301      	adds	r3, #1
    391a:	60fb      	str	r3, [r7, #12]
    391c:	e7d9      	b.n	38d2 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    391e:	bf00      	nop
    3920:	3714      	adds	r7, #20
    3922:	46bd      	mov	sp, r7
    3924:	f85d 7b04 	ldr.w	r7, [sp], #4
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	000000fc 	.word	0x000000fc
    3930:	0000010c 	.word	0x0000010c

00003934 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    3934:	b580      	push	{r7, lr}
    3936:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    3938:	f7ff ff78 	bl	382c <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    393c:	f7ff ffc4 	bl	38c8 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    3940:	f005 fc9c 	bl	927c <__libc_init_array>
}
    3944:	bf00      	nop
    3946:	bd80      	pop	{r7, pc}

00003948 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    3948:	b580      	push	{r7, lr}
    394a:	b08c      	sub	sp, #48	; 0x30
    394c:	af02      	add	r7, sp, #8
    394e:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	685b      	ldr	r3, [r3, #4]
    395a:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	689b      	ldr	r3, [r3, #8]
    3960:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	68db      	ldr	r3, [r3, #12]
    3966:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    3968:	687b      	ldr	r3, [r7, #4]
    396a:	691b      	ldr	r3, [r3, #16]
    396c:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	695b      	ldr	r3, [r3, #20]
    3972:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	699b      	ldr	r3, [r3, #24]
    3978:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    397a:	687b      	ldr	r3, [r7, #4]
    397c:	69db      	ldr	r3, [r3, #28]
    397e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    3980:	480d      	ldr	r0, [pc, #52]	; (39b8 <GetRegistersFromStack+0x70>)
    3982:	f002 fd27 	bl	63d4 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    3986:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3988:	6a3a      	ldr	r2, [r7, #32]
    398a:	69f8      	ldr	r0, [r7, #28]
    398c:	69bb      	ldr	r3, [r7, #24]
    398e:	9300      	str	r3, [sp, #0]
    3990:	4603      	mov	r3, r0
    3992:	480a      	ldr	r0, [pc, #40]	; (39bc <GetRegistersFromStack+0x74>)
    3994:	f002 fd1e 	bl	63d4 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    3998:	6979      	ldr	r1, [r7, #20]
    399a:	693a      	ldr	r2, [r7, #16]
    399c:	68f8      	ldr	r0, [r7, #12]
    399e:	68bb      	ldr	r3, [r7, #8]
    39a0:	9300      	str	r3, [sp, #0]
    39a2:	4603      	mov	r3, r0
    39a4:	4806      	ldr	r0, [pc, #24]	; (39c0 <GetRegistersFromStack+0x78>)
    39a6:	f002 fd15 	bl	63d4 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	4619      	mov	r1, r3
    39ae:	2001      	movs	r0, #1
    39b0:	f7fc ff8a 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    39b4:	e7fe      	b.n	39b4 <GetRegistersFromStack+0x6c>
    39b6:	bf00      	nop
    39b8:	0000a6d4 	.word	0x0000a6d4
    39bc:	0000a700 	.word	0x0000a700
    39c0:	0000a734 	.word	0x0000a734

000039c4 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    39c4:	b480      	push	{r7}
    39c6:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    39c8:	f01e 0f04 	tst.w	lr, #4
    39cc:	bf0c      	ite	eq
    39ce:	f3ef 8008 	mrseq	r0, MSP
    39d2:	f3ef 8009 	mrsne	r0, PSP
    39d6:	6981      	ldr	r1, [r0, #24]
    39d8:	4a00      	ldr	r2, [pc, #0]	; (39dc <handler2_address_const>)
    39da:	4710      	bx	r2

000039dc <handler2_address_const>:
    39dc:	00003949 	.word	0x00003949
    }
  }
    39e0:	bf00      	nop
    39e2:	46bd      	mov	sp, r7
    39e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39e8:	4770      	bx	lr
    39ea:	Address 0x00000000000039ea is out of bounds.


000039ec <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    39ec:	b580      	push	{r7, lr}
    39ee:	b084      	sub	sp, #16
    39f0:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    39f2:	4b16      	ldr	r3, [pc, #88]	; (3a4c <ArmResetHandler+0x60>)
    39f4:	60fb      	str	r3, [r7, #12]
    39f6:	68fb      	ldr	r3, [r7, #12]
    39f8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    39fa:	683b      	ldr	r3, [r7, #0]
    39fc:	f383 8809 	msr	PSP, r3
    3a00:	68fb      	ldr	r3, [r7, #12]
    3a02:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    3a0a:	f7ff ff93 	bl	3934 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    3a0e:	4b10      	ldr	r3, [pc, #64]	; (3a50 <ArmResetHandler+0x64>)
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	f003 0301 	and.w	r3, r3, #1
    3a16:	2b00      	cmp	r3, #0
    3a18:	bf14      	ite	ne
    3a1a:	2301      	movne	r3, #1
    3a1c:	2300      	moveq	r3, #0
    3a1e:	b2db      	uxtb	r3, r3
    3a20:	2b00      	cmp	r3, #0
    3a22:	d001      	beq.n	3a28 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    3a24:	f002 fcf8 	bl	6418 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    3a28:	f003 f900 	bl	6c2c <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    3a2c:	f7ff fa6e 	bl	2f0c <main>
    3a30:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    3a32:	68bb      	ldr	r3, [r7, #8]
    3a34:	2b00      	cmp	r3, #0
    3a36:	db04      	blt.n	3a42 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    3a38:	68b9      	ldr	r1, [r7, #8]
    3a3a:	4806      	ldr	r0, [pc, #24]	; (3a54 <ArmResetHandler+0x68>)
    3a3c:	f002 fcca 	bl	63d4 <printf>
    3a40:	e003      	b.n	3a4a <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    3a42:	68b9      	ldr	r1, [r7, #8]
    3a44:	4804      	ldr	r0, [pc, #16]	; (3a58 <ArmResetHandler+0x6c>)
    3a46:	f002 fcc5 	bl	63d4 <printf>
    3a4a:	e7fe      	b.n	3a4a <ArmResetHandler+0x5e>
    3a4c:	10010000 	.word	0x10010000
    3a50:	e000edf0 	.word	0xe000edf0
    3a54:	0000a76c 	.word	0x0000a76c
    3a58:	0000a7a0 	.word	0x0000a7a0

00003a5c <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b082      	sub	sp, #8
    3a60:	af00      	add	r7, sp, #0
    3a62:	6078      	str	r0, [r7, #4]
    3a64:	6039      	str	r1, [r7, #0]
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	2b01      	cmp	r3, #1
    3a6a:	d111      	bne.n	3a90 <__static_initialization_and_destruction_0(int, int)+0x34>
    3a6c:	683b      	ldr	r3, [r7, #0]
    3a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3a72:	4293      	cmp	r3, r2
    3a74:	d10c      	bne.n	3a90 <__static_initialization_and_destruction_0(int, int)+0x34>
    3a76:	4b08      	ldr	r3, [pc, #32]	; (3a98 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	f003 0301 	and.w	r3, r3, #1
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d106      	bne.n	3a90 <__static_initialization_and_destruction_0(int, int)+0x34>
    3a82:	4b05      	ldr	r3, [pc, #20]	; (3a98 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    3a84:	2201      	movs	r2, #1
    3a86:	601a      	str	r2, [r3, #0]
    3a88:	4b04      	ldr	r3, [pc, #16]	; (3a9c <__static_initialization_and_destruction_0(int, int)+0x40>)
    3a8a:	4618      	mov	r0, r3
    3a8c:	f7fe f974 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    3a90:	bf00      	nop
    3a92:	3708      	adds	r7, #8
    3a94:	46bd      	mov	sp, r7
    3a96:	bd80      	pop	{r7, pc}
    3a98:	10000298 	.word	0x10000298
    3a9c:	10000130 	.word	0x10000130

00003aa0 <_GLOBAL__sub_I_GetRegistersFromStack>:
    3aa0:	b580      	push	{r7, lr}
    3aa2:	af00      	add	r7, sp, #0
    3aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3aa8:	2001      	movs	r0, #1
    3aaa:	f7ff ffd7 	bl	3a5c <__static_initialization_and_destruction_0(int, int)>
    3aae:	bd80      	pop	{r7, pc}

00003ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3ab0:	b480      	push	{r7}
    3ab2:	b083      	sub	sp, #12
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	f103 0208 	add.w	r2, r3, #8
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	f103 0208 	add.w	r2, r3, #8
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3ad4:	687b      	ldr	r3, [r7, #4]
    3ad6:	f103 0208 	add.w	r2, r3, #8
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	2200      	movs	r2, #0
    3ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3ae4:	bf00      	nop
    3ae6:	370c      	adds	r7, #12
    3ae8:	46bd      	mov	sp, r7
    3aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aee:	4770      	bx	lr

00003af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    3af0:	b480      	push	{r7}
    3af2:	b083      	sub	sp, #12
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	2200      	movs	r2, #0
    3afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3afe:	bf00      	nop
    3b00:	370c      	adds	r7, #12
    3b02:	46bd      	mov	sp, r7
    3b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b08:	4770      	bx	lr

00003b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3b0a:	b480      	push	{r7}
    3b0c:	b085      	sub	sp, #20
    3b0e:	af00      	add	r7, sp, #0
    3b10:	6078      	str	r0, [r7, #4]
    3b12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	685b      	ldr	r3, [r3, #4]
    3b18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	68fa      	ldr	r2, [r7, #12]
    3b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3b20:	68fb      	ldr	r3, [r7, #12]
    3b22:	689a      	ldr	r2, [r3, #8]
    3b24:	683b      	ldr	r3, [r7, #0]
    3b26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3b28:	68fb      	ldr	r3, [r7, #12]
    3b2a:	689b      	ldr	r3, [r3, #8]
    3b2c:	683a      	ldr	r2, [r7, #0]
    3b2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3b30:	68fb      	ldr	r3, [r7, #12]
    3b32:	683a      	ldr	r2, [r7, #0]
    3b34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	687a      	ldr	r2, [r7, #4]
    3b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	1c5a      	adds	r2, r3, #1
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	601a      	str	r2, [r3, #0]
}
    3b46:	bf00      	nop
    3b48:	3714      	adds	r7, #20
    3b4a:	46bd      	mov	sp, r7
    3b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b50:	4770      	bx	lr

00003b52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3b52:	b480      	push	{r7}
    3b54:	b085      	sub	sp, #20
    3b56:	af00      	add	r7, sp, #0
    3b58:	6078      	str	r0, [r7, #4]
    3b5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3b5c:	683b      	ldr	r3, [r7, #0]
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3b62:	68bb      	ldr	r3, [r7, #8]
    3b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3b68:	d103      	bne.n	3b72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	691b      	ldr	r3, [r3, #16]
    3b6e:	60fb      	str	r3, [r7, #12]
    3b70:	e00c      	b.n	3b8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	3308      	adds	r3, #8
    3b76:	60fb      	str	r3, [r7, #12]
    3b78:	e002      	b.n	3b80 <vListInsert+0x2e>
    3b7a:	68fb      	ldr	r3, [r7, #12]
    3b7c:	685b      	ldr	r3, [r3, #4]
    3b7e:	60fb      	str	r3, [r7, #12]
    3b80:	68fb      	ldr	r3, [r7, #12]
    3b82:	685b      	ldr	r3, [r3, #4]
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	68ba      	ldr	r2, [r7, #8]
    3b88:	429a      	cmp	r2, r3
    3b8a:	d2f6      	bcs.n	3b7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3b8c:	68fb      	ldr	r3, [r7, #12]
    3b8e:	685a      	ldr	r2, [r3, #4]
    3b90:	683b      	ldr	r3, [r7, #0]
    3b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3b94:	683b      	ldr	r3, [r7, #0]
    3b96:	685b      	ldr	r3, [r3, #4]
    3b98:	683a      	ldr	r2, [r7, #0]
    3b9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3b9c:	683b      	ldr	r3, [r7, #0]
    3b9e:	68fa      	ldr	r2, [r7, #12]
    3ba0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    3ba2:	68fb      	ldr	r3, [r7, #12]
    3ba4:	683a      	ldr	r2, [r7, #0]
    3ba6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ba8:	683b      	ldr	r3, [r7, #0]
    3baa:	687a      	ldr	r2, [r7, #4]
    3bac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	1c5a      	adds	r2, r3, #1
    3bb4:	687b      	ldr	r3, [r7, #4]
    3bb6:	601a      	str	r2, [r3, #0]
}
    3bb8:	bf00      	nop
    3bba:	3714      	adds	r7, #20
    3bbc:	46bd      	mov	sp, r7
    3bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc2:	4770      	bx	lr

00003bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    3bc4:	b480      	push	{r7}
    3bc6:	b085      	sub	sp, #20
    3bc8:	af00      	add	r7, sp, #0
    3bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	691b      	ldr	r3, [r3, #16]
    3bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	685b      	ldr	r3, [r3, #4]
    3bd6:	687a      	ldr	r2, [r7, #4]
    3bd8:	6892      	ldr	r2, [r2, #8]
    3bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	689b      	ldr	r3, [r3, #8]
    3be0:	687a      	ldr	r2, [r7, #4]
    3be2:	6852      	ldr	r2, [r2, #4]
    3be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3be6:	68fb      	ldr	r3, [r7, #12]
    3be8:	685b      	ldr	r3, [r3, #4]
    3bea:	687a      	ldr	r2, [r7, #4]
    3bec:	429a      	cmp	r2, r3
    3bee:	d103      	bne.n	3bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	689a      	ldr	r2, [r3, #8]
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	2200      	movs	r2, #0
    3bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    3bfe:	68fb      	ldr	r3, [r7, #12]
    3c00:	681b      	ldr	r3, [r3, #0]
    3c02:	1e5a      	subs	r2, r3, #1
    3c04:	68fb      	ldr	r3, [r7, #12]
    3c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    3c08:	68fb      	ldr	r3, [r7, #12]
    3c0a:	681b      	ldr	r3, [r3, #0]
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	3714      	adds	r7, #20
    3c10:	46bd      	mov	sp, r7
    3c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c16:	4770      	bx	lr

00003c18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b08a      	sub	sp, #40	; 0x28
    3c1c:	af04      	add	r7, sp, #16
    3c1e:	60f8      	str	r0, [r7, #12]
    3c20:	60b9      	str	r1, [r7, #8]
    3c22:	607a      	str	r2, [r7, #4]
    3c24:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    3c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d01e      	beq.n	3c6a <xTaskCreateStatic+0x52>
    3c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d01b      	beq.n	3c6a <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    3c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c34:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    3c36:	697b      	ldr	r3, [r7, #20]
    3c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    3c3c:	697b      	ldr	r3, [r7, #20]
    3c3e:	2202      	movs	r2, #2
    3c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    3c44:	2300      	movs	r3, #0
    3c46:	9303      	str	r3, [sp, #12]
    3c48:	697b      	ldr	r3, [r7, #20]
    3c4a:	9302      	str	r3, [sp, #8]
    3c4c:	f107 0310 	add.w	r3, r7, #16
    3c50:	9301      	str	r3, [sp, #4]
    3c52:	6a3b      	ldr	r3, [r7, #32]
    3c54:	9300      	str	r3, [sp, #0]
    3c56:	683b      	ldr	r3, [r7, #0]
    3c58:	687a      	ldr	r2, [r7, #4]
    3c5a:	68b9      	ldr	r1, [r7, #8]
    3c5c:	68f8      	ldr	r0, [r7, #12]
    3c5e:	f000 f850 	bl	3d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3c62:	6978      	ldr	r0, [r7, #20]
    3c64:	f000 f8c8 	bl	3df8 <prvAddNewTaskToReadyList>
    3c68:	e001      	b.n	3c6e <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
    3c6a:	2300      	movs	r3, #0
    3c6c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
    3c6e:	693b      	ldr	r3, [r7, #16]
	}
    3c70:	4618      	mov	r0, r3
    3c72:	3718      	adds	r7, #24
    3c74:	46bd      	mov	sp, r7
    3c76:	bd80      	pop	{r7, pc}

00003c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b08c      	sub	sp, #48	; 0x30
    3c7c:	af04      	add	r7, sp, #16
    3c7e:	60f8      	str	r0, [r7, #12]
    3c80:	60b9      	str	r1, [r7, #8]
    3c82:	603b      	str	r3, [r7, #0]
    3c84:	4613      	mov	r3, r2
    3c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c88:	88fb      	ldrh	r3, [r7, #6]
    3c8a:	009b      	lsls	r3, r3, #2
    3c8c:	4618      	mov	r0, r3
    3c8e:	f001 f9c3 	bl	5018 <pvPortMalloc>
    3c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    3c94:	697b      	ldr	r3, [r7, #20]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d00e      	beq.n	3cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3c9a:	2060      	movs	r0, #96	; 0x60
    3c9c:	f001 f9bc 	bl	5018 <pvPortMalloc>
    3ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    3ca2:	69fb      	ldr	r3, [r7, #28]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d003      	beq.n	3cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3ca8:	69fb      	ldr	r3, [r7, #28]
    3caa:	697a      	ldr	r2, [r7, #20]
    3cac:	631a      	str	r2, [r3, #48]	; 0x30
    3cae:	e005      	b.n	3cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3cb0:	6978      	ldr	r0, [r7, #20]
    3cb2:	f001 f9c3 	bl	503c <vPortFree>
    3cb6:	e001      	b.n	3cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    3cb8:	2300      	movs	r3, #0
    3cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3cbc:	69fb      	ldr	r3, [r7, #28]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d017      	beq.n	3cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    3cc2:	69fb      	ldr	r3, [r7, #28]
    3cc4:	2200      	movs	r2, #0
    3cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    3cca:	88fa      	ldrh	r2, [r7, #6]
    3ccc:	2300      	movs	r3, #0
    3cce:	9303      	str	r3, [sp, #12]
    3cd0:	69fb      	ldr	r3, [r7, #28]
    3cd2:	9302      	str	r3, [sp, #8]
    3cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3cd6:	9301      	str	r3, [sp, #4]
    3cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cda:	9300      	str	r3, [sp, #0]
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	68b9      	ldr	r1, [r7, #8]
    3ce0:	68f8      	ldr	r0, [r7, #12]
    3ce2:	f000 f80e 	bl	3d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3ce6:	69f8      	ldr	r0, [r7, #28]
    3ce8:	f000 f886 	bl	3df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    3cec:	2301      	movs	r3, #1
    3cee:	61bb      	str	r3, [r7, #24]
    3cf0:	e002      	b.n	3cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    3cf8:	69bb      	ldr	r3, [r7, #24]
	}
    3cfa:	4618      	mov	r0, r3
    3cfc:	3720      	adds	r7, #32
    3cfe:	46bd      	mov	sp, r7
    3d00:	bd80      	pop	{r7, pc}

00003d02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    3d02:	b580      	push	{r7, lr}
    3d04:	b086      	sub	sp, #24
    3d06:	af00      	add	r7, sp, #0
    3d08:	60f8      	str	r0, [r7, #12]
    3d0a:	60b9      	str	r1, [r7, #8]
    3d0c:	607a      	str	r2, [r7, #4]
    3d0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    3d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d12:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	009b      	lsls	r3, r3, #2
    3d18:	461a      	mov	r2, r3
    3d1a:	21a5      	movs	r1, #165	; 0xa5
    3d1c:	f005 faed 	bl	92fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3d24:	687b      	ldr	r3, [r7, #4]
    3d26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3d2a:	3b01      	subs	r3, #1
    3d2c:	009b      	lsls	r3, r3, #2
    3d2e:	4413      	add	r3, r2
    3d30:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3d32:	693b      	ldr	r3, [r7, #16]
    3d34:	f023 0307 	bic.w	r3, r3, #7
    3d38:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3d3a:	2300      	movs	r3, #0
    3d3c:	617b      	str	r3, [r7, #20]
    3d3e:	e012      	b.n	3d66 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3d40:	68ba      	ldr	r2, [r7, #8]
    3d42:	697b      	ldr	r3, [r7, #20]
    3d44:	4413      	add	r3, r2
    3d46:	7819      	ldrb	r1, [r3, #0]
    3d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d4a:	697b      	ldr	r3, [r7, #20]
    3d4c:	4413      	add	r3, r2
    3d4e:	3334      	adds	r3, #52	; 0x34
    3d50:	460a      	mov	r2, r1
    3d52:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3d54:	68ba      	ldr	r2, [r7, #8]
    3d56:	697b      	ldr	r3, [r7, #20]
    3d58:	4413      	add	r3, r2
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d006      	beq.n	3d6e <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3d60:	697b      	ldr	r3, [r7, #20]
    3d62:	3301      	adds	r3, #1
    3d64:	617b      	str	r3, [r7, #20]
    3d66:	697b      	ldr	r3, [r7, #20]
    3d68:	2b0f      	cmp	r3, #15
    3d6a:	d9e9      	bls.n	3d40 <prvInitialiseNewTask+0x3e>
    3d6c:	e000      	b.n	3d70 <prvInitialiseNewTask+0x6e>
		{
			break;
    3d6e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d72:	2200      	movs	r2, #0
    3d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3d78:	6a3b      	ldr	r3, [r7, #32]
    3d7a:	2b04      	cmp	r3, #4
    3d7c:	d901      	bls.n	3d82 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3d7e:	2304      	movs	r3, #4
    3d80:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    3d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d84:	6a3a      	ldr	r2, [r7, #32]
    3d86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    3d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d8a:	6a3a      	ldr	r2, [r7, #32]
    3d8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    3d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d90:	2200      	movs	r2, #0
    3d92:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    3d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d96:	3304      	adds	r3, #4
    3d98:	4618      	mov	r0, r3
    3d9a:	f7ff fea9 	bl	3af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3da0:	3318      	adds	r3, #24
    3da2:	4618      	mov	r0, r3
    3da4:	f7ff fea4 	bl	3af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    3da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3dae:	6a3b      	ldr	r3, [r7, #32]
    3db0:	f1c3 0205 	rsb	r2, r3, #5
    3db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3db6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    3db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dbc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    3dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dc0:	2200      	movs	r2, #0
    3dc2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    3dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dc6:	2200      	movs	r2, #0
    3dc8:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dcc:	2200      	movs	r2, #0
    3dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3dd2:	683a      	ldr	r2, [r7, #0]
    3dd4:	68f9      	ldr	r1, [r7, #12]
    3dd6:	6938      	ldr	r0, [r7, #16]
    3dd8:	f003 f82c 	bl	6e34 <pxPortInitialiseStack>
    3ddc:	4602      	mov	r2, r0
    3dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3de0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    3de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3de4:	2b00      	cmp	r3, #0
    3de6:	d002      	beq.n	3dee <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3dee:	bf00      	nop
    3df0:	3718      	adds	r7, #24
    3df2:	46bd      	mov	sp, r7
    3df4:	bd80      	pop	{r7, pc}
    3df6:	Address 0x0000000000003df6 is out of bounds.


00003df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b082      	sub	sp, #8
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3e00:	f003 f8b8 	bl	6f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    3e04:	4b2c      	ldr	r3, [pc, #176]	; (3eb8 <prvAddNewTaskToReadyList+0xc0>)
    3e06:	681b      	ldr	r3, [r3, #0]
    3e08:	3301      	adds	r3, #1
    3e0a:	4a2b      	ldr	r2, [pc, #172]	; (3eb8 <prvAddNewTaskToReadyList+0xc0>)
    3e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    3e0e:	4b2b      	ldr	r3, [pc, #172]	; (3ebc <prvAddNewTaskToReadyList+0xc4>)
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d109      	bne.n	3e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    3e16:	4a29      	ldr	r2, [pc, #164]	; (3ebc <prvAddNewTaskToReadyList+0xc4>)
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3e1c:	4b26      	ldr	r3, [pc, #152]	; (3eb8 <prvAddNewTaskToReadyList+0xc0>)
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	2b01      	cmp	r3, #1
    3e22:	d110      	bne.n	3e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    3e24:	f000 fb82 	bl	452c <prvInitialiseTaskLists>
    3e28:	e00d      	b.n	3e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3e2a:	4b25      	ldr	r3, [pc, #148]	; (3ec0 <prvAddNewTaskToReadyList+0xc8>)
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d109      	bne.n	3e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3e32:	4b22      	ldr	r3, [pc, #136]	; (3ebc <prvAddNewTaskToReadyList+0xc4>)
    3e34:	681b      	ldr	r3, [r3, #0]
    3e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e3c:	429a      	cmp	r2, r3
    3e3e:	d802      	bhi.n	3e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    3e40:	4a1e      	ldr	r2, [pc, #120]	; (3ebc <prvAddNewTaskToReadyList+0xc4>)
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    3e46:	4b1f      	ldr	r3, [pc, #124]	; (3ec4 <prvAddNewTaskToReadyList+0xcc>)
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	3301      	adds	r3, #1
    3e4c:	4a1d      	ldr	r2, [pc, #116]	; (3ec4 <prvAddNewTaskToReadyList+0xcc>)
    3e4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    3e50:	4b1c      	ldr	r3, [pc, #112]	; (3ec4 <prvAddNewTaskToReadyList+0xcc>)
    3e52:	681a      	ldr	r2, [r3, #0]
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e5c:	2201      	movs	r2, #1
    3e5e:	409a      	lsls	r2, r3
    3e60:	4b19      	ldr	r3, [pc, #100]	; (3ec8 <prvAddNewTaskToReadyList+0xd0>)
    3e62:	681b      	ldr	r3, [r3, #0]
    3e64:	4313      	orrs	r3, r2
    3e66:	4a18      	ldr	r2, [pc, #96]	; (3ec8 <prvAddNewTaskToReadyList+0xd0>)
    3e68:	6013      	str	r3, [r2, #0]
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e6e:	4613      	mov	r3, r2
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	4413      	add	r3, r2
    3e74:	009b      	lsls	r3, r3, #2
    3e76:	4a15      	ldr	r2, [pc, #84]	; (3ecc <prvAddNewTaskToReadyList+0xd4>)
    3e78:	441a      	add	r2, r3
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	3304      	adds	r3, #4
    3e7e:	4619      	mov	r1, r3
    3e80:	4610      	mov	r0, r2
    3e82:	f7ff fe42 	bl	3b0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    3e86:	f003 f88f 	bl	6fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    3e8a:	4b0d      	ldr	r3, [pc, #52]	; (3ec0 <prvAddNewTaskToReadyList+0xc8>)
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d00e      	beq.n	3eb0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3e92:	4b0a      	ldr	r3, [pc, #40]	; (3ebc <prvAddNewTaskToReadyList+0xc4>)
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e9c:	429a      	cmp	r2, r3
    3e9e:	d207      	bcs.n	3eb0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
    3ea0:	4b0b      	ldr	r3, [pc, #44]	; (3ed0 <prvAddNewTaskToReadyList+0xd8>)
    3ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ea6:	601a      	str	r2, [r3, #0]
    3ea8:	f3bf 8f4f 	dsb	sy
    3eac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3eb0:	bf00      	nop
    3eb2:	3708      	adds	r7, #8
    3eb4:	46bd      	mov	sp, r7
    3eb6:	bd80      	pop	{r7, pc}
    3eb8:	10000388 	.word	0x10000388
    3ebc:	100002b0 	.word	0x100002b0
    3ec0:	10000394 	.word	0x10000394
    3ec4:	100003a4 	.word	0x100003a4
    3ec8:	10000390 	.word	0x10000390
    3ecc:	100002b4 	.word	0x100002b4
    3ed0:	e000ed04 	.word	0xe000ed04

00003ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3ed4:	b580      	push	{r7, lr}
    3ed6:	b084      	sub	sp, #16
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    3edc:	2300      	movs	r3, #0
    3ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d008      	beq.n	3ef8 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3ee6:	f000 f86f 	bl	3fc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3eea:	2100      	movs	r1, #0
    3eec:	6878      	ldr	r0, [r7, #4]
    3eee:	f000 fc4f 	bl	4790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3ef2:	f000 f877 	bl	3fe4 <xTaskResumeAll>
    3ef6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3ef8:	68fb      	ldr	r3, [r7, #12]
    3efa:	2b00      	cmp	r3, #0
    3efc:	d107      	bne.n	3f0e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    3efe:	4b06      	ldr	r3, [pc, #24]	; (3f18 <vTaskDelay+0x44>)
    3f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f04:	601a      	str	r2, [r3, #0]
    3f06:	f3bf 8f4f 	dsb	sy
    3f0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3f0e:	bf00      	nop
    3f10:	3710      	adds	r7, #16
    3f12:	46bd      	mov	sp, r7
    3f14:	bd80      	pop	{r7, pc}
    3f16:	bf00      	nop
    3f18:	e000ed04 	.word	0xe000ed04

00003f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b08a      	sub	sp, #40	; 0x28
    3f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    3f22:	2300      	movs	r3, #0
    3f24:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    3f26:	2300      	movs	r3, #0
    3f28:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    3f2a:	1d3a      	adds	r2, r7, #4
    3f2c:	f107 0108 	add.w	r1, r7, #8
    3f30:	f107 030c 	add.w	r3, r7, #12
    3f34:	4618      	mov	r0, r3
    3f36:	f003 f8bd 	bl	70b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    3f3a:	6879      	ldr	r1, [r7, #4]
    3f3c:	68bb      	ldr	r3, [r7, #8]
    3f3e:	68fa      	ldr	r2, [r7, #12]
    3f40:	9202      	str	r2, [sp, #8]
    3f42:	9301      	str	r3, [sp, #4]
    3f44:	2300      	movs	r3, #0
    3f46:	9300      	str	r3, [sp, #0]
    3f48:	2300      	movs	r3, #0
    3f4a:	460a      	mov	r2, r1
    3f4c:	4918      	ldr	r1, [pc, #96]	; (3fb0 <vTaskStartScheduler+0x94>)
    3f4e:	4819      	ldr	r0, [pc, #100]	; (3fb4 <vTaskStartScheduler+0x98>)
    3f50:	f7ff fe62 	bl	3c18 <xTaskCreateStatic>
    3f54:	4602      	mov	r2, r0
    3f56:	4b18      	ldr	r3, [pc, #96]	; (3fb8 <vTaskStartScheduler+0x9c>)
    3f58:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    3f5a:	4b17      	ldr	r3, [pc, #92]	; (3fb8 <vTaskStartScheduler+0x9c>)
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d002      	beq.n	3f68 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
    3f62:	2301      	movs	r3, #1
    3f64:	617b      	str	r3, [r7, #20]
    3f66:	e001      	b.n	3f6c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    3f68:	2300      	movs	r3, #0
    3f6a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    3f6c:	697b      	ldr	r3, [r7, #20]
    3f6e:	2b01      	cmp	r3, #1
    3f70:	d102      	bne.n	3f78 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
    3f72:	f003 f8df 	bl	7134 <xTimerCreateTimerTask>
    3f76:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3f78:	697b      	ldr	r3, [r7, #20]
    3f7a:	2b01      	cmp	r3, #1
    3f7c:	d114      	bne.n	3fa8 <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    3f7e:	f04f 0328 	mov.w	r3, #40	; 0x28
    3f82:	f383 8811 	msr	BASEPRI, r3
    3f86:	f3bf 8f6f 	isb	sy
    3f8a:	f3bf 8f4f 	dsb	sy
    3f8e:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3f90:	4b0a      	ldr	r3, [pc, #40]	; (3fbc <vTaskStartScheduler+0xa0>)
    3f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    3f98:	4b09      	ldr	r3, [pc, #36]	; (3fc0 <vTaskStartScheduler+0xa4>)
    3f9a:	2201      	movs	r2, #1
    3f9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    3f9e:	4b09      	ldr	r3, [pc, #36]	; (3fc4 <vTaskStartScheduler+0xa8>)
    3fa0:	2200      	movs	r2, #0
    3fa2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3fa4:	f002 ffbc 	bl	6f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3fa8:	bf00      	nop
    3faa:	3718      	adds	r7, #24
    3fac:	46bd      	mov	sp, r7
    3fae:	bd80      	pop	{r7, pc}
    3fb0:	0000a7d4 	.word	0x0000a7d4
    3fb4:	0000451d 	.word	0x0000451d
    3fb8:	100003ac 	.word	0x100003ac
    3fbc:	100003a8 	.word	0x100003a8
    3fc0:	10000394 	.word	0x10000394
    3fc4:	1000038c 	.word	0x1000038c

00003fc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3fc8:	b480      	push	{r7}
    3fca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3fcc:	4b04      	ldr	r3, [pc, #16]	; (3fe0 <vTaskSuspendAll+0x18>)
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	3301      	adds	r3, #1
    3fd2:	4a03      	ldr	r2, [pc, #12]	; (3fe0 <vTaskSuspendAll+0x18>)
    3fd4:	6013      	str	r3, [r2, #0]
}
    3fd6:	bf00      	nop
    3fd8:	46bd      	mov	sp, r7
    3fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fde:	4770      	bx	lr
    3fe0:	100003b0 	.word	0x100003b0

00003fe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3fe4:	b580      	push	{r7, lr}
    3fe6:	b084      	sub	sp, #16
    3fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    3fea:	2300      	movs	r3, #0
    3fec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    3fee:	2300      	movs	r3, #0
    3ff0:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ff2:	f002 ffbf 	bl	6f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ff6:	4b39      	ldr	r3, [pc, #228]	; (40dc <xTaskResumeAll+0xf8>)
    3ff8:	681b      	ldr	r3, [r3, #0]
    3ffa:	3b01      	subs	r3, #1
    3ffc:	4a37      	ldr	r2, [pc, #220]	; (40dc <xTaskResumeAll+0xf8>)
    3ffe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4000:	4b36      	ldr	r3, [pc, #216]	; (40dc <xTaskResumeAll+0xf8>)
    4002:	681b      	ldr	r3, [r3, #0]
    4004:	2b00      	cmp	r3, #0
    4006:	d161      	bne.n	40cc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4008:	4b35      	ldr	r3, [pc, #212]	; (40e0 <xTaskResumeAll+0xfc>)
    400a:	681b      	ldr	r3, [r3, #0]
    400c:	2b00      	cmp	r3, #0
    400e:	d05d      	beq.n	40cc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4010:	e02e      	b.n	4070 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4012:	4b34      	ldr	r3, [pc, #208]	; (40e4 <xTaskResumeAll+0x100>)
    4014:	68db      	ldr	r3, [r3, #12]
    4016:	68db      	ldr	r3, [r3, #12]
    4018:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    401a:	68fb      	ldr	r3, [r7, #12]
    401c:	3318      	adds	r3, #24
    401e:	4618      	mov	r0, r3
    4020:	f7ff fdd0 	bl	3bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	3304      	adds	r3, #4
    4028:	4618      	mov	r0, r3
    402a:	f7ff fdcb 	bl	3bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    402e:	68fb      	ldr	r3, [r7, #12]
    4030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4032:	2201      	movs	r2, #1
    4034:	409a      	lsls	r2, r3
    4036:	4b2c      	ldr	r3, [pc, #176]	; (40e8 <xTaskResumeAll+0x104>)
    4038:	681b      	ldr	r3, [r3, #0]
    403a:	4313      	orrs	r3, r2
    403c:	4a2a      	ldr	r2, [pc, #168]	; (40e8 <xTaskResumeAll+0x104>)
    403e:	6013      	str	r3, [r2, #0]
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4044:	4613      	mov	r3, r2
    4046:	009b      	lsls	r3, r3, #2
    4048:	4413      	add	r3, r2
    404a:	009b      	lsls	r3, r3, #2
    404c:	4a27      	ldr	r2, [pc, #156]	; (40ec <xTaskResumeAll+0x108>)
    404e:	441a      	add	r2, r3
    4050:	68fb      	ldr	r3, [r7, #12]
    4052:	3304      	adds	r3, #4
    4054:	4619      	mov	r1, r3
    4056:	4610      	mov	r0, r2
    4058:	f7ff fd57 	bl	3b0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4060:	4b23      	ldr	r3, [pc, #140]	; (40f0 <xTaskResumeAll+0x10c>)
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4066:	429a      	cmp	r2, r3
    4068:	d302      	bcc.n	4070 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    406a:	4b22      	ldr	r3, [pc, #136]	; (40f4 <xTaskResumeAll+0x110>)
    406c:	2201      	movs	r2, #1
    406e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4070:	4b1c      	ldr	r3, [pc, #112]	; (40e4 <xTaskResumeAll+0x100>)
    4072:	681b      	ldr	r3, [r3, #0]
    4074:	2b00      	cmp	r3, #0
    4076:	d1cc      	bne.n	4012 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    4078:	68fb      	ldr	r3, [r7, #12]
    407a:	2b00      	cmp	r3, #0
    407c:	d001      	beq.n	4082 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    407e:	f000 fadf 	bl	4640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4082:	4b1d      	ldr	r3, [pc, #116]	; (40f8 <xTaskResumeAll+0x114>)
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    4088:	687b      	ldr	r3, [r7, #4]
    408a:	2b00      	cmp	r3, #0
    408c:	d010      	beq.n	40b0 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    408e:	f000 f847 	bl	4120 <xTaskIncrementTick>
    4092:	4603      	mov	r3, r0
    4094:	2b00      	cmp	r3, #0
    4096:	d002      	beq.n	409e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    4098:	4b16      	ldr	r3, [pc, #88]	; (40f4 <xTaskResumeAll+0x110>)
    409a:	2201      	movs	r2, #1
    409c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	3b01      	subs	r3, #1
    40a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d1f1      	bne.n	408e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    40aa:	4b13      	ldr	r3, [pc, #76]	; (40f8 <xTaskResumeAll+0x114>)
    40ac:	2200      	movs	r2, #0
    40ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    40b0:	4b10      	ldr	r3, [pc, #64]	; (40f4 <xTaskResumeAll+0x110>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d009      	beq.n	40cc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    40b8:	2301      	movs	r3, #1
    40ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    40bc:	4b0f      	ldr	r3, [pc, #60]	; (40fc <xTaskResumeAll+0x118>)
    40be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    40c2:	601a      	str	r2, [r3, #0]
    40c4:	f3bf 8f4f 	dsb	sy
    40c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    40cc:	f002 ff6c 	bl	6fa8 <vPortExitCritical>

	return xAlreadyYielded;
    40d0:	68bb      	ldr	r3, [r7, #8]
}
    40d2:	4618      	mov	r0, r3
    40d4:	3710      	adds	r7, #16
    40d6:	46bd      	mov	sp, r7
    40d8:	bd80      	pop	{r7, pc}
    40da:	bf00      	nop
    40dc:	100003b0 	.word	0x100003b0
    40e0:	10000388 	.word	0x10000388
    40e4:	10000348 	.word	0x10000348
    40e8:	10000390 	.word	0x10000390
    40ec:	100002b4 	.word	0x100002b4
    40f0:	100002b0 	.word	0x100002b0
    40f4:	1000039c 	.word	0x1000039c
    40f8:	10000398 	.word	0x10000398
    40fc:	e000ed04 	.word	0xe000ed04

00004100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    4100:	b480      	push	{r7}
    4102:	b083      	sub	sp, #12
    4104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    4106:	4b05      	ldr	r3, [pc, #20]	; (411c <xTaskGetTickCount+0x1c>)
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    410c:	687b      	ldr	r3, [r7, #4]
}
    410e:	4618      	mov	r0, r3
    4110:	370c      	adds	r7, #12
    4112:	46bd      	mov	sp, r7
    4114:	f85d 7b04 	ldr.w	r7, [sp], #4
    4118:	4770      	bx	lr
    411a:	bf00      	nop
    411c:	1000038c 	.word	0x1000038c

00004120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    4120:	b580      	push	{r7, lr}
    4122:	b086      	sub	sp, #24
    4124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    4126:	2300      	movs	r3, #0
    4128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    412a:	4b48      	ldr	r3, [pc, #288]	; (424c <xTaskIncrementTick+0x12c>)
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	d17c      	bne.n	422c <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    4132:	4b47      	ldr	r3, [pc, #284]	; (4250 <xTaskIncrementTick+0x130>)
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	3301      	adds	r3, #1
    4138:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    413a:	4a45      	ldr	r2, [pc, #276]	; (4250 <xTaskIncrementTick+0x130>)
    413c:	693b      	ldr	r3, [r7, #16]
    413e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    4140:	693b      	ldr	r3, [r7, #16]
    4142:	2b00      	cmp	r3, #0
    4144:	d110      	bne.n	4168 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
    4146:	4b43      	ldr	r3, [pc, #268]	; (4254 <xTaskIncrementTick+0x134>)
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	60fb      	str	r3, [r7, #12]
    414c:	4b42      	ldr	r3, [pc, #264]	; (4258 <xTaskIncrementTick+0x138>)
    414e:	681b      	ldr	r3, [r3, #0]
    4150:	4a40      	ldr	r2, [pc, #256]	; (4254 <xTaskIncrementTick+0x134>)
    4152:	6013      	str	r3, [r2, #0]
    4154:	4a40      	ldr	r2, [pc, #256]	; (4258 <xTaskIncrementTick+0x138>)
    4156:	68fb      	ldr	r3, [r7, #12]
    4158:	6013      	str	r3, [r2, #0]
    415a:	4b40      	ldr	r3, [pc, #256]	; (425c <xTaskIncrementTick+0x13c>)
    415c:	681b      	ldr	r3, [r3, #0]
    415e:	3301      	adds	r3, #1
    4160:	4a3e      	ldr	r2, [pc, #248]	; (425c <xTaskIncrementTick+0x13c>)
    4162:	6013      	str	r3, [r2, #0]
    4164:	f000 fa6c 	bl	4640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    4168:	4b3d      	ldr	r3, [pc, #244]	; (4260 <xTaskIncrementTick+0x140>)
    416a:	681b      	ldr	r3, [r3, #0]
    416c:	693a      	ldr	r2, [r7, #16]
    416e:	429a      	cmp	r2, r3
    4170:	d34d      	bcc.n	420e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4172:	4b38      	ldr	r3, [pc, #224]	; (4254 <xTaskIncrementTick+0x134>)
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	681b      	ldr	r3, [r3, #0]
    4178:	2b00      	cmp	r3, #0
    417a:	d101      	bne.n	4180 <xTaskIncrementTick+0x60>
    417c:	2301      	movs	r3, #1
    417e:	e000      	b.n	4182 <xTaskIncrementTick+0x62>
    4180:	2300      	movs	r3, #0
    4182:	2b00      	cmp	r3, #0
    4184:	d004      	beq.n	4190 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4186:	4b36      	ldr	r3, [pc, #216]	; (4260 <xTaskIncrementTick+0x140>)
    4188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    418c:	601a      	str	r2, [r3, #0]
					break;
    418e:	e03e      	b.n	420e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4190:	4b30      	ldr	r3, [pc, #192]	; (4254 <xTaskIncrementTick+0x134>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	68db      	ldr	r3, [r3, #12]
    4196:	68db      	ldr	r3, [r3, #12]
    4198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    419a:	68bb      	ldr	r3, [r7, #8]
    419c:	685b      	ldr	r3, [r3, #4]
    419e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    41a0:	693a      	ldr	r2, [r7, #16]
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	429a      	cmp	r2, r3
    41a6:	d203      	bcs.n	41b0 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    41a8:	4a2d      	ldr	r2, [pc, #180]	; (4260 <xTaskIncrementTick+0x140>)
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	6013      	str	r3, [r2, #0]
						break;
    41ae:	e02e      	b.n	420e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    41b0:	68bb      	ldr	r3, [r7, #8]
    41b2:	3304      	adds	r3, #4
    41b4:	4618      	mov	r0, r3
    41b6:	f7ff fd05 	bl	3bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    41ba:	68bb      	ldr	r3, [r7, #8]
    41bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41be:	2b00      	cmp	r3, #0
    41c0:	d004      	beq.n	41cc <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    41c2:	68bb      	ldr	r3, [r7, #8]
    41c4:	3318      	adds	r3, #24
    41c6:	4618      	mov	r0, r3
    41c8:	f7ff fcfc 	bl	3bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    41cc:	68bb      	ldr	r3, [r7, #8]
    41ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    41d0:	2201      	movs	r2, #1
    41d2:	409a      	lsls	r2, r3
    41d4:	4b23      	ldr	r3, [pc, #140]	; (4264 <xTaskIncrementTick+0x144>)
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	4313      	orrs	r3, r2
    41da:	4a22      	ldr	r2, [pc, #136]	; (4264 <xTaskIncrementTick+0x144>)
    41dc:	6013      	str	r3, [r2, #0]
    41de:	68bb      	ldr	r3, [r7, #8]
    41e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    41e2:	4613      	mov	r3, r2
    41e4:	009b      	lsls	r3, r3, #2
    41e6:	4413      	add	r3, r2
    41e8:	009b      	lsls	r3, r3, #2
    41ea:	4a1f      	ldr	r2, [pc, #124]	; (4268 <xTaskIncrementTick+0x148>)
    41ec:	441a      	add	r2, r3
    41ee:	68bb      	ldr	r3, [r7, #8]
    41f0:	3304      	adds	r3, #4
    41f2:	4619      	mov	r1, r3
    41f4:	4610      	mov	r0, r2
    41f6:	f7ff fc88 	bl	3b0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    41fa:	68bb      	ldr	r3, [r7, #8]
    41fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    41fe:	4b1b      	ldr	r3, [pc, #108]	; (426c <xTaskIncrementTick+0x14c>)
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4204:	429a      	cmp	r2, r3
    4206:	d3b4      	bcc.n	4172 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
    4208:	2301      	movs	r3, #1
    420a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    420c:	e7b1      	b.n	4172 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    420e:	4b17      	ldr	r3, [pc, #92]	; (426c <xTaskIncrementTick+0x14c>)
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4214:	4914      	ldr	r1, [pc, #80]	; (4268 <xTaskIncrementTick+0x148>)
    4216:	4613      	mov	r3, r2
    4218:	009b      	lsls	r3, r3, #2
    421a:	4413      	add	r3, r2
    421c:	009b      	lsls	r3, r3, #2
    421e:	440b      	add	r3, r1
    4220:	681b      	ldr	r3, [r3, #0]
    4222:	2b01      	cmp	r3, #1
    4224:	d907      	bls.n	4236 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
    4226:	2301      	movs	r3, #1
    4228:	617b      	str	r3, [r7, #20]
    422a:	e004      	b.n	4236 <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    422c:	4b10      	ldr	r3, [pc, #64]	; (4270 <xTaskIncrementTick+0x150>)
    422e:	681b      	ldr	r3, [r3, #0]
    4230:	3301      	adds	r3, #1
    4232:	4a0f      	ldr	r2, [pc, #60]	; (4270 <xTaskIncrementTick+0x150>)
    4234:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    4236:	4b0f      	ldr	r3, [pc, #60]	; (4274 <xTaskIncrementTick+0x154>)
    4238:	681b      	ldr	r3, [r3, #0]
    423a:	2b00      	cmp	r3, #0
    423c:	d001      	beq.n	4242 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
    423e:	2301      	movs	r3, #1
    4240:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    4242:	697b      	ldr	r3, [r7, #20]
}
    4244:	4618      	mov	r0, r3
    4246:	3718      	adds	r7, #24
    4248:	46bd      	mov	sp, r7
    424a:	bd80      	pop	{r7, pc}
    424c:	100003b0 	.word	0x100003b0
    4250:	1000038c 	.word	0x1000038c
    4254:	10000340 	.word	0x10000340
    4258:	10000344 	.word	0x10000344
    425c:	100003a0 	.word	0x100003a0
    4260:	100003a8 	.word	0x100003a8
    4264:	10000390 	.word	0x10000390
    4268:	100002b4 	.word	0x100002b4
    426c:	100002b0 	.word	0x100002b0
    4270:	10000398 	.word	0x10000398
    4274:	1000039c 	.word	0x1000039c

00004278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4278:	b580      	push	{r7, lr}
    427a:	b084      	sub	sp, #16
    427c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    427e:	4b28      	ldr	r3, [pc, #160]	; (4320 <vTaskSwitchContext+0xa8>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d003      	beq.n	428e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    4286:	4b27      	ldr	r3, [pc, #156]	; (4324 <vTaskSwitchContext+0xac>)
    4288:	2201      	movs	r2, #1
    428a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    428c:	e043      	b.n	4316 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    428e:	4b25      	ldr	r3, [pc, #148]	; (4324 <vTaskSwitchContext+0xac>)
    4290:	2200      	movs	r2, #0
    4292:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    4294:	f002 fc90 	bl	6bb8 <ThreadRuntimeCounter>
    4298:	4602      	mov	r2, r0
    429a:	4b23      	ldr	r3, [pc, #140]	; (4328 <vTaskSwitchContext+0xb0>)
    429c:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    429e:	4b22      	ldr	r3, [pc, #136]	; (4328 <vTaskSwitchContext+0xb0>)
    42a0:	681a      	ldr	r2, [r3, #0]
    42a2:	4b22      	ldr	r3, [pc, #136]	; (432c <vTaskSwitchContext+0xb4>)
    42a4:	681b      	ldr	r3, [r3, #0]
    42a6:	429a      	cmp	r2, r3
    42a8:	d909      	bls.n	42be <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    42aa:	4b21      	ldr	r3, [pc, #132]	; (4330 <vTaskSwitchContext+0xb8>)
    42ac:	681b      	ldr	r3, [r3, #0]
    42ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
    42b0:	4a1d      	ldr	r2, [pc, #116]	; (4328 <vTaskSwitchContext+0xb0>)
    42b2:	6810      	ldr	r0, [r2, #0]
    42b4:	4a1d      	ldr	r2, [pc, #116]	; (432c <vTaskSwitchContext+0xb4>)
    42b6:	6812      	ldr	r2, [r2, #0]
    42b8:	1a82      	subs	r2, r0, r2
    42ba:	440a      	add	r2, r1
    42bc:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    42be:	4b1a      	ldr	r3, [pc, #104]	; (4328 <vTaskSwitchContext+0xb0>)
    42c0:	681b      	ldr	r3, [r3, #0]
    42c2:	4a1a      	ldr	r2, [pc, #104]	; (432c <vTaskSwitchContext+0xb4>)
    42c4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    42c6:	4b1b      	ldr	r3, [pc, #108]	; (4334 <vTaskSwitchContext+0xbc>)
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	fab3 f383 	clz	r3, r3
    42d2:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    42d4:	78fb      	ldrb	r3, [r7, #3]
    42d6:	f1c3 031f 	rsb	r3, r3, #31
    42da:	60fb      	str	r3, [r7, #12]
    42dc:	68fa      	ldr	r2, [r7, #12]
    42de:	4613      	mov	r3, r2
    42e0:	009b      	lsls	r3, r3, #2
    42e2:	4413      	add	r3, r2
    42e4:	009b      	lsls	r3, r3, #2
    42e6:	4a14      	ldr	r2, [pc, #80]	; (4338 <vTaskSwitchContext+0xc0>)
    42e8:	4413      	add	r3, r2
    42ea:	60bb      	str	r3, [r7, #8]
    42ec:	68bb      	ldr	r3, [r7, #8]
    42ee:	685b      	ldr	r3, [r3, #4]
    42f0:	685a      	ldr	r2, [r3, #4]
    42f2:	68bb      	ldr	r3, [r7, #8]
    42f4:	605a      	str	r2, [r3, #4]
    42f6:	68bb      	ldr	r3, [r7, #8]
    42f8:	685a      	ldr	r2, [r3, #4]
    42fa:	68bb      	ldr	r3, [r7, #8]
    42fc:	3308      	adds	r3, #8
    42fe:	429a      	cmp	r2, r3
    4300:	d104      	bne.n	430c <vTaskSwitchContext+0x94>
    4302:	68bb      	ldr	r3, [r7, #8]
    4304:	685b      	ldr	r3, [r3, #4]
    4306:	685a      	ldr	r2, [r3, #4]
    4308:	68bb      	ldr	r3, [r7, #8]
    430a:	605a      	str	r2, [r3, #4]
    430c:	68bb      	ldr	r3, [r7, #8]
    430e:	685b      	ldr	r3, [r3, #4]
    4310:	68db      	ldr	r3, [r3, #12]
    4312:	4a07      	ldr	r2, [pc, #28]	; (4330 <vTaskSwitchContext+0xb8>)
    4314:	6013      	str	r3, [r2, #0]
}
    4316:	bf00      	nop
    4318:	3710      	adds	r7, #16
    431a:	46bd      	mov	sp, r7
    431c:	bd80      	pop	{r7, pc}
    431e:	bf00      	nop
    4320:	100003b0 	.word	0x100003b0
    4324:	1000039c 	.word	0x1000039c
    4328:	100003b8 	.word	0x100003b8
    432c:	100003b4 	.word	0x100003b4
    4330:	100002b0 	.word	0x100002b0
    4334:	10000390 	.word	0x10000390
    4338:	100002b4 	.word	0x100002b4

0000433c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    433c:	b580      	push	{r7, lr}
    433e:	b082      	sub	sp, #8
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]
    4344:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4346:	4b07      	ldr	r3, [pc, #28]	; (4364 <vTaskPlaceOnEventList+0x28>)
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	3318      	adds	r3, #24
    434c:	4619      	mov	r1, r3
    434e:	6878      	ldr	r0, [r7, #4]
    4350:	f7ff fbff 	bl	3b52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4354:	2101      	movs	r1, #1
    4356:	6838      	ldr	r0, [r7, #0]
    4358:	f000 fa1a 	bl	4790 <prvAddCurrentTaskToDelayedList>
}
    435c:	bf00      	nop
    435e:	3708      	adds	r7, #8
    4360:	46bd      	mov	sp, r7
    4362:	bd80      	pop	{r7, pc}
    4364:	100002b0 	.word	0x100002b0

00004368 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    4368:	b580      	push	{r7, lr}
    436a:	b084      	sub	sp, #16
    436c:	af00      	add	r7, sp, #0
    436e:	60f8      	str	r0, [r7, #12]
    4370:	60b9      	str	r1, [r7, #8]
    4372:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4374:	4b0a      	ldr	r3, [pc, #40]	; (43a0 <vTaskPlaceOnEventListRestricted+0x38>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	3318      	adds	r3, #24
    437a:	4619      	mov	r1, r3
    437c:	68f8      	ldr	r0, [r7, #12]
    437e:	f7ff fbc4 	bl	3b0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	2b00      	cmp	r3, #0
    4386:	d002      	beq.n	438e <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
    4388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    438c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    438e:	6879      	ldr	r1, [r7, #4]
    4390:	68b8      	ldr	r0, [r7, #8]
    4392:	f000 f9fd 	bl	4790 <prvAddCurrentTaskToDelayedList>
	}
    4396:	bf00      	nop
    4398:	3710      	adds	r7, #16
    439a:	46bd      	mov	sp, r7
    439c:	bd80      	pop	{r7, pc}
    439e:	bf00      	nop
    43a0:	100002b0 	.word	0x100002b0

000043a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b084      	sub	sp, #16
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	68db      	ldr	r3, [r3, #12]
    43b0:	68db      	ldr	r3, [r3, #12]
    43b2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    43b4:	68bb      	ldr	r3, [r7, #8]
    43b6:	3318      	adds	r3, #24
    43b8:	4618      	mov	r0, r3
    43ba:	f7ff fc03 	bl	3bc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    43be:	4b1d      	ldr	r3, [pc, #116]	; (4434 <xTaskRemoveFromEventList+0x90>)
    43c0:	681b      	ldr	r3, [r3, #0]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d11c      	bne.n	4400 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    43c6:	68bb      	ldr	r3, [r7, #8]
    43c8:	3304      	adds	r3, #4
    43ca:	4618      	mov	r0, r3
    43cc:	f7ff fbfa 	bl	3bc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    43d0:	68bb      	ldr	r3, [r7, #8]
    43d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43d4:	2201      	movs	r2, #1
    43d6:	409a      	lsls	r2, r3
    43d8:	4b17      	ldr	r3, [pc, #92]	; (4438 <xTaskRemoveFromEventList+0x94>)
    43da:	681b      	ldr	r3, [r3, #0]
    43dc:	4313      	orrs	r3, r2
    43de:	4a16      	ldr	r2, [pc, #88]	; (4438 <xTaskRemoveFromEventList+0x94>)
    43e0:	6013      	str	r3, [r2, #0]
    43e2:	68bb      	ldr	r3, [r7, #8]
    43e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43e6:	4613      	mov	r3, r2
    43e8:	009b      	lsls	r3, r3, #2
    43ea:	4413      	add	r3, r2
    43ec:	009b      	lsls	r3, r3, #2
    43ee:	4a13      	ldr	r2, [pc, #76]	; (443c <xTaskRemoveFromEventList+0x98>)
    43f0:	441a      	add	r2, r3
    43f2:	68bb      	ldr	r3, [r7, #8]
    43f4:	3304      	adds	r3, #4
    43f6:	4619      	mov	r1, r3
    43f8:	4610      	mov	r0, r2
    43fa:	f7ff fb86 	bl	3b0a <vListInsertEnd>
    43fe:	e005      	b.n	440c <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4400:	68bb      	ldr	r3, [r7, #8]
    4402:	3318      	adds	r3, #24
    4404:	4619      	mov	r1, r3
    4406:	480e      	ldr	r0, [pc, #56]	; (4440 <xTaskRemoveFromEventList+0x9c>)
    4408:	f7ff fb7f 	bl	3b0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    440c:	68bb      	ldr	r3, [r7, #8]
    440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4410:	4b0c      	ldr	r3, [pc, #48]	; (4444 <xTaskRemoveFromEventList+0xa0>)
    4412:	681b      	ldr	r3, [r3, #0]
    4414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4416:	429a      	cmp	r2, r3
    4418:	d905      	bls.n	4426 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    441a:	2301      	movs	r3, #1
    441c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    441e:	4b0a      	ldr	r3, [pc, #40]	; (4448 <xTaskRemoveFromEventList+0xa4>)
    4420:	2201      	movs	r2, #1
    4422:	601a      	str	r2, [r3, #0]
    4424:	e001      	b.n	442a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    4426:	2300      	movs	r3, #0
    4428:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    442a:	68fb      	ldr	r3, [r7, #12]
}
    442c:	4618      	mov	r0, r3
    442e:	3710      	adds	r7, #16
    4430:	46bd      	mov	sp, r7
    4432:	bd80      	pop	{r7, pc}
    4434:	100003b0 	.word	0x100003b0
    4438:	10000390 	.word	0x10000390
    443c:	100002b4 	.word	0x100002b4
    4440:	10000348 	.word	0x10000348
    4444:	100002b0 	.word	0x100002b0
    4448:	1000039c 	.word	0x1000039c

0000444c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    444c:	b480      	push	{r7}
    444e:	b083      	sub	sp, #12
    4450:	af00      	add	r7, sp, #0
    4452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4454:	4b06      	ldr	r3, [pc, #24]	; (4470 <vTaskInternalSetTimeOutState+0x24>)
    4456:	681a      	ldr	r2, [r3, #0]
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    445c:	4b05      	ldr	r3, [pc, #20]	; (4474 <vTaskInternalSetTimeOutState+0x28>)
    445e:	681a      	ldr	r2, [r3, #0]
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	605a      	str	r2, [r3, #4]
}
    4464:	bf00      	nop
    4466:	370c      	adds	r7, #12
    4468:	46bd      	mov	sp, r7
    446a:	f85d 7b04 	ldr.w	r7, [sp], #4
    446e:	4770      	bx	lr
    4470:	100003a0 	.word	0x100003a0
    4474:	1000038c 	.word	0x1000038c

00004478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    4478:	b580      	push	{r7, lr}
    447a:	b086      	sub	sp, #24
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
    4480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4482:	f002 fd77 	bl	6f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    4486:	4b1d      	ldr	r3, [pc, #116]	; (44fc <xTaskCheckForTimeOut+0x84>)
    4488:	681b      	ldr	r3, [r3, #0]
    448a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	685b      	ldr	r3, [r3, #4]
    4490:	693a      	ldr	r2, [r7, #16]
    4492:	1ad3      	subs	r3, r2, r3
    4494:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    4496:	683b      	ldr	r3, [r7, #0]
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    449e:	d102      	bne.n	44a6 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    44a0:	2300      	movs	r3, #0
    44a2:	617b      	str	r3, [r7, #20]
    44a4:	e023      	b.n	44ee <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	681a      	ldr	r2, [r3, #0]
    44aa:	4b15      	ldr	r3, [pc, #84]	; (4500 <xTaskCheckForTimeOut+0x88>)
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	429a      	cmp	r2, r3
    44b0:	d007      	beq.n	44c2 <xTaskCheckForTimeOut+0x4a>
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	685b      	ldr	r3, [r3, #4]
    44b6:	693a      	ldr	r2, [r7, #16]
    44b8:	429a      	cmp	r2, r3
    44ba:	d302      	bcc.n	44c2 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    44bc:	2301      	movs	r3, #1
    44be:	617b      	str	r3, [r7, #20]
    44c0:	e015      	b.n	44ee <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    44c2:	683b      	ldr	r3, [r7, #0]
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	68fa      	ldr	r2, [r7, #12]
    44c8:	429a      	cmp	r2, r3
    44ca:	d20b      	bcs.n	44e4 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    44cc:	683b      	ldr	r3, [r7, #0]
    44ce:	681a      	ldr	r2, [r3, #0]
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	1ad2      	subs	r2, r2, r3
    44d4:	683b      	ldr	r3, [r7, #0]
    44d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    44d8:	6878      	ldr	r0, [r7, #4]
    44da:	f7ff ffb7 	bl	444c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    44de:	2300      	movs	r3, #0
    44e0:	617b      	str	r3, [r7, #20]
    44e2:	e004      	b.n	44ee <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    44e4:	683b      	ldr	r3, [r7, #0]
    44e6:	2200      	movs	r2, #0
    44e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    44ea:	2301      	movs	r3, #1
    44ec:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    44ee:	f002 fd5b 	bl	6fa8 <vPortExitCritical>

	return xReturn;
    44f2:	697b      	ldr	r3, [r7, #20]
}
    44f4:	4618      	mov	r0, r3
    44f6:	3718      	adds	r7, #24
    44f8:	46bd      	mov	sp, r7
    44fa:	bd80      	pop	{r7, pc}
    44fc:	1000038c 	.word	0x1000038c
    4500:	100003a0 	.word	0x100003a0

00004504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4504:	b480      	push	{r7}
    4506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    4508:	4b03      	ldr	r3, [pc, #12]	; (4518 <vTaskMissedYield+0x14>)
    450a:	2201      	movs	r2, #1
    450c:	601a      	str	r2, [r3, #0]
}
    450e:	bf00      	nop
    4510:	46bd      	mov	sp, r7
    4512:	f85d 7b04 	ldr.w	r7, [sp], #4
    4516:	4770      	bx	lr
    4518:	1000039c 	.word	0x1000039c

0000451c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    451c:	b580      	push	{r7, lr}
    451e:	b082      	sub	sp, #8
    4520:	af00      	add	r7, sp, #0
    4522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    4524:	f000 f842 	bl	45ac <prvCheckTasksWaitingTermination>
    4528:	e7fc      	b.n	4524 <prvIdleTask+0x8>
    452a:	Address 0x000000000000452a is out of bounds.


0000452c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    452c:	b580      	push	{r7, lr}
    452e:	b082      	sub	sp, #8
    4530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    4532:	2300      	movs	r3, #0
    4534:	607b      	str	r3, [r7, #4]
    4536:	e00c      	b.n	4552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    4538:	687a      	ldr	r2, [r7, #4]
    453a:	4613      	mov	r3, r2
    453c:	009b      	lsls	r3, r3, #2
    453e:	4413      	add	r3, r2
    4540:	009b      	lsls	r3, r3, #2
    4542:	4a12      	ldr	r2, [pc, #72]	; (458c <prvInitialiseTaskLists+0x60>)
    4544:	4413      	add	r3, r2
    4546:	4618      	mov	r0, r3
    4548:	f7ff fab2 	bl	3ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	3301      	adds	r3, #1
    4550:	607b      	str	r3, [r7, #4]
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	2b04      	cmp	r3, #4
    4556:	d9ef      	bls.n	4538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    4558:	480d      	ldr	r0, [pc, #52]	; (4590 <prvInitialiseTaskLists+0x64>)
    455a:	f7ff faa9 	bl	3ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    455e:	480d      	ldr	r0, [pc, #52]	; (4594 <prvInitialiseTaskLists+0x68>)
    4560:	f7ff faa6 	bl	3ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    4564:	480c      	ldr	r0, [pc, #48]	; (4598 <prvInitialiseTaskLists+0x6c>)
    4566:	f7ff faa3 	bl	3ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    456a:	480c      	ldr	r0, [pc, #48]	; (459c <prvInitialiseTaskLists+0x70>)
    456c:	f7ff faa0 	bl	3ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    4570:	480b      	ldr	r0, [pc, #44]	; (45a0 <prvInitialiseTaskLists+0x74>)
    4572:	f7ff fa9d 	bl	3ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4576:	4b0b      	ldr	r3, [pc, #44]	; (45a4 <prvInitialiseTaskLists+0x78>)
    4578:	4a05      	ldr	r2, [pc, #20]	; (4590 <prvInitialiseTaskLists+0x64>)
    457a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    457c:	4b0a      	ldr	r3, [pc, #40]	; (45a8 <prvInitialiseTaskLists+0x7c>)
    457e:	4a05      	ldr	r2, [pc, #20]	; (4594 <prvInitialiseTaskLists+0x68>)
    4580:	601a      	str	r2, [r3, #0]
}
    4582:	bf00      	nop
    4584:	3708      	adds	r7, #8
    4586:	46bd      	mov	sp, r7
    4588:	bd80      	pop	{r7, pc}
    458a:	bf00      	nop
    458c:	100002b4 	.word	0x100002b4
    4590:	10000318 	.word	0x10000318
    4594:	1000032c 	.word	0x1000032c
    4598:	10000348 	.word	0x10000348
    459c:	1000035c 	.word	0x1000035c
    45a0:	10000374 	.word	0x10000374
    45a4:	10000340 	.word	0x10000340
    45a8:	10000344 	.word	0x10000344

000045ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    45b2:	e019      	b.n	45e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    45b4:	f002 fcde 	bl	6f74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    45b8:	4b0f      	ldr	r3, [pc, #60]	; (45f8 <prvCheckTasksWaitingTermination+0x4c>)
    45ba:	68db      	ldr	r3, [r3, #12]
    45bc:	68db      	ldr	r3, [r3, #12]
    45be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    45c0:	687b      	ldr	r3, [r7, #4]
    45c2:	3304      	adds	r3, #4
    45c4:	4618      	mov	r0, r3
    45c6:	f7ff fafd 	bl	3bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
    45ca:	4b0c      	ldr	r3, [pc, #48]	; (45fc <prvCheckTasksWaitingTermination+0x50>)
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	3b01      	subs	r3, #1
    45d0:	4a0a      	ldr	r2, [pc, #40]	; (45fc <prvCheckTasksWaitingTermination+0x50>)
    45d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    45d4:	4b0a      	ldr	r3, [pc, #40]	; (4600 <prvCheckTasksWaitingTermination+0x54>)
    45d6:	681b      	ldr	r3, [r3, #0]
    45d8:	3b01      	subs	r3, #1
    45da:	4a09      	ldr	r2, [pc, #36]	; (4600 <prvCheckTasksWaitingTermination+0x54>)
    45dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    45de:	f002 fce3 	bl	6fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    45e2:	6878      	ldr	r0, [r7, #4]
    45e4:	f000 f80e 	bl	4604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    45e8:	4b05      	ldr	r3, [pc, #20]	; (4600 <prvCheckTasksWaitingTermination+0x54>)
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d1e1      	bne.n	45b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    45f0:	bf00      	nop
    45f2:	3708      	adds	r7, #8
    45f4:	46bd      	mov	sp, r7
    45f6:	bd80      	pop	{r7, pc}
    45f8:	1000035c 	.word	0x1000035c
    45fc:	10000388 	.word	0x10000388
    4600:	10000370 	.word	0x10000370

00004604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    4604:	b580      	push	{r7, lr}
    4606:	b082      	sub	sp, #8
    4608:	af00      	add	r7, sp, #0
    460a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    4612:	2b00      	cmp	r3, #0
    4614:	d108      	bne.n	4628 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    461a:	4618      	mov	r0, r3
    461c:	f000 fd0e 	bl	503c <vPortFree>
				vPortFree( pxTCB );
    4620:	6878      	ldr	r0, [r7, #4]
    4622:	f000 fd0b 	bl	503c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    4626:	e007      	b.n	4638 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    462e:	2b01      	cmp	r3, #1
    4630:	d102      	bne.n	4638 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
    4632:	6878      	ldr	r0, [r7, #4]
    4634:	f000 fd02 	bl	503c <vPortFree>
	}
    4638:	bf00      	nop
    463a:	3708      	adds	r7, #8
    463c:	46bd      	mov	sp, r7
    463e:	bd80      	pop	{r7, pc}

00004640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    4640:	b480      	push	{r7}
    4642:	b083      	sub	sp, #12
    4644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4646:	4b0f      	ldr	r3, [pc, #60]	; (4684 <prvResetNextTaskUnblockTime+0x44>)
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	2b00      	cmp	r3, #0
    464e:	d101      	bne.n	4654 <prvResetNextTaskUnblockTime+0x14>
    4650:	2301      	movs	r3, #1
    4652:	e000      	b.n	4656 <prvResetNextTaskUnblockTime+0x16>
    4654:	2300      	movs	r3, #0
    4656:	2b00      	cmp	r3, #0
    4658:	d004      	beq.n	4664 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    465a:	4b0b      	ldr	r3, [pc, #44]	; (4688 <prvResetNextTaskUnblockTime+0x48>)
    465c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4660:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    4662:	e008      	b.n	4676 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4664:	4b07      	ldr	r3, [pc, #28]	; (4684 <prvResetNextTaskUnblockTime+0x44>)
    4666:	681b      	ldr	r3, [r3, #0]
    4668:	68db      	ldr	r3, [r3, #12]
    466a:	68db      	ldr	r3, [r3, #12]
    466c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	685b      	ldr	r3, [r3, #4]
    4672:	4a05      	ldr	r2, [pc, #20]	; (4688 <prvResetNextTaskUnblockTime+0x48>)
    4674:	6013      	str	r3, [r2, #0]
}
    4676:	bf00      	nop
    4678:	370c      	adds	r7, #12
    467a:	46bd      	mov	sp, r7
    467c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4680:	4770      	bx	lr
    4682:	bf00      	nop
    4684:	10000340 	.word	0x10000340
    4688:	100003a8 	.word	0x100003a8

0000468c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    468c:	b480      	push	{r7}
    468e:	b083      	sub	sp, #12
    4690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    4692:	4b0b      	ldr	r3, [pc, #44]	; (46c0 <xTaskGetSchedulerState+0x34>)
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	2b00      	cmp	r3, #0
    4698:	d102      	bne.n	46a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    469a:	2301      	movs	r3, #1
    469c:	607b      	str	r3, [r7, #4]
    469e:	e008      	b.n	46b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    46a0:	4b08      	ldr	r3, [pc, #32]	; (46c4 <xTaskGetSchedulerState+0x38>)
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	2b00      	cmp	r3, #0
    46a6:	d102      	bne.n	46ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    46a8:	2302      	movs	r3, #2
    46aa:	607b      	str	r3, [r7, #4]
    46ac:	e001      	b.n	46b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    46ae:	2300      	movs	r3, #0
    46b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    46b2:	687b      	ldr	r3, [r7, #4]
	}
    46b4:	4618      	mov	r0, r3
    46b6:	370c      	adds	r7, #12
    46b8:	46bd      	mov	sp, r7
    46ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    46be:	4770      	bx	lr
    46c0:	10000394 	.word	0x10000394
    46c4:	100003b0 	.word	0x100003b0

000046c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    46c8:	b580      	push	{r7, lr}
    46ca:	b084      	sub	sp, #16
    46cc:	af00      	add	r7, sp, #0
    46ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    46d4:	2300      	movs	r3, #0
    46d6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	2b00      	cmp	r3, #0
    46dc:	d04f      	beq.n	477e <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    46de:	68bb      	ldr	r3, [r7, #8]
    46e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    46e2:	1e5a      	subs	r2, r3, #1
    46e4:	68bb      	ldr	r3, [r7, #8]
    46e6:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    46e8:	68bb      	ldr	r3, [r7, #8]
    46ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46ec:	68bb      	ldr	r3, [r7, #8]
    46ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    46f0:	429a      	cmp	r2, r3
    46f2:	d044      	beq.n	477e <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    46f4:	68bb      	ldr	r3, [r7, #8]
    46f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    46f8:	2b00      	cmp	r3, #0
    46fa:	d140      	bne.n	477e <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    46fc:	68bb      	ldr	r3, [r7, #8]
    46fe:	3304      	adds	r3, #4
    4700:	4618      	mov	r0, r3
    4702:	f7ff fa5f 	bl	3bc4 <uxListRemove>
    4706:	4603      	mov	r3, r0
    4708:	2b00      	cmp	r3, #0
    470a:	d115      	bne.n	4738 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    470c:	68bb      	ldr	r3, [r7, #8]
    470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4710:	491d      	ldr	r1, [pc, #116]	; (4788 <xTaskPriorityDisinherit+0xc0>)
    4712:	4613      	mov	r3, r2
    4714:	009b      	lsls	r3, r3, #2
    4716:	4413      	add	r3, r2
    4718:	009b      	lsls	r3, r3, #2
    471a:	440b      	add	r3, r1
    471c:	681b      	ldr	r3, [r3, #0]
    471e:	2b00      	cmp	r3, #0
    4720:	d10a      	bne.n	4738 <xTaskPriorityDisinherit+0x70>
    4722:	68bb      	ldr	r3, [r7, #8]
    4724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4726:	2201      	movs	r2, #1
    4728:	fa02 f303 	lsl.w	r3, r2, r3
    472c:	43da      	mvns	r2, r3
    472e:	4b17      	ldr	r3, [pc, #92]	; (478c <xTaskPriorityDisinherit+0xc4>)
    4730:	681b      	ldr	r3, [r3, #0]
    4732:	4013      	ands	r3, r2
    4734:	4a15      	ldr	r2, [pc, #84]	; (478c <xTaskPriorityDisinherit+0xc4>)
    4736:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4738:	68bb      	ldr	r3, [r7, #8]
    473a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    473c:	68bb      	ldr	r3, [r7, #8]
    473e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4740:	68bb      	ldr	r3, [r7, #8]
    4742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4744:	f1c3 0205 	rsb	r2, r3, #5
    4748:	68bb      	ldr	r3, [r7, #8]
    474a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    474c:	68bb      	ldr	r3, [r7, #8]
    474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4750:	2201      	movs	r2, #1
    4752:	409a      	lsls	r2, r3
    4754:	4b0d      	ldr	r3, [pc, #52]	; (478c <xTaskPriorityDisinherit+0xc4>)
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	4313      	orrs	r3, r2
    475a:	4a0c      	ldr	r2, [pc, #48]	; (478c <xTaskPriorityDisinherit+0xc4>)
    475c:	6013      	str	r3, [r2, #0]
    475e:	68bb      	ldr	r3, [r7, #8]
    4760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4762:	4613      	mov	r3, r2
    4764:	009b      	lsls	r3, r3, #2
    4766:	4413      	add	r3, r2
    4768:	009b      	lsls	r3, r3, #2
    476a:	4a07      	ldr	r2, [pc, #28]	; (4788 <xTaskPriorityDisinherit+0xc0>)
    476c:	441a      	add	r2, r3
    476e:	68bb      	ldr	r3, [r7, #8]
    4770:	3304      	adds	r3, #4
    4772:	4619      	mov	r1, r3
    4774:	4610      	mov	r0, r2
    4776:	f7ff f9c8 	bl	3b0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    477a:	2301      	movs	r3, #1
    477c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    477e:	68fb      	ldr	r3, [r7, #12]
	}
    4780:	4618      	mov	r0, r3
    4782:	3710      	adds	r7, #16
    4784:	46bd      	mov	sp, r7
    4786:	bd80      	pop	{r7, pc}
    4788:	100002b4 	.word	0x100002b4
    478c:	10000390 	.word	0x10000390

00004790 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4790:	b580      	push	{r7, lr}
    4792:	b084      	sub	sp, #16
    4794:	af00      	add	r7, sp, #0
    4796:	6078      	str	r0, [r7, #4]
    4798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    479a:	4b29      	ldr	r3, [pc, #164]	; (4840 <prvAddCurrentTaskToDelayedList+0xb0>)
    479c:	681b      	ldr	r3, [r3, #0]
    479e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    47a0:	4b28      	ldr	r3, [pc, #160]	; (4844 <prvAddCurrentTaskToDelayedList+0xb4>)
    47a2:	681b      	ldr	r3, [r3, #0]
    47a4:	3304      	adds	r3, #4
    47a6:	4618      	mov	r0, r3
    47a8:	f7ff fa0c 	bl	3bc4 <uxListRemove>
    47ac:	4603      	mov	r3, r0
    47ae:	2b00      	cmp	r3, #0
    47b0:	d10b      	bne.n	47ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    47b2:	4b24      	ldr	r3, [pc, #144]	; (4844 <prvAddCurrentTaskToDelayedList+0xb4>)
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47b8:	2201      	movs	r2, #1
    47ba:	fa02 f303 	lsl.w	r3, r2, r3
    47be:	43da      	mvns	r2, r3
    47c0:	4b21      	ldr	r3, [pc, #132]	; (4848 <prvAddCurrentTaskToDelayedList+0xb8>)
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	4013      	ands	r3, r2
    47c6:	4a20      	ldr	r2, [pc, #128]	; (4848 <prvAddCurrentTaskToDelayedList+0xb8>)
    47c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    47d0:	d10a      	bne.n	47e8 <prvAddCurrentTaskToDelayedList+0x58>
    47d2:	683b      	ldr	r3, [r7, #0]
    47d4:	2b00      	cmp	r3, #0
    47d6:	d007      	beq.n	47e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    47d8:	4b1a      	ldr	r3, [pc, #104]	; (4844 <prvAddCurrentTaskToDelayedList+0xb4>)
    47da:	681b      	ldr	r3, [r3, #0]
    47dc:	3304      	adds	r3, #4
    47de:	4619      	mov	r1, r3
    47e0:	481a      	ldr	r0, [pc, #104]	; (484c <prvAddCurrentTaskToDelayedList+0xbc>)
    47e2:	f7ff f992 	bl	3b0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    47e6:	e026      	b.n	4836 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    47e8:	68fa      	ldr	r2, [r7, #12]
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	4413      	add	r3, r2
    47ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    47f0:	4b14      	ldr	r3, [pc, #80]	; (4844 <prvAddCurrentTaskToDelayedList+0xb4>)
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	68ba      	ldr	r2, [r7, #8]
    47f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    47f8:	68ba      	ldr	r2, [r7, #8]
    47fa:	68fb      	ldr	r3, [r7, #12]
    47fc:	429a      	cmp	r2, r3
    47fe:	d209      	bcs.n	4814 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4800:	4b13      	ldr	r3, [pc, #76]	; (4850 <prvAddCurrentTaskToDelayedList+0xc0>)
    4802:	681a      	ldr	r2, [r3, #0]
    4804:	4b0f      	ldr	r3, [pc, #60]	; (4844 <prvAddCurrentTaskToDelayedList+0xb4>)
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	3304      	adds	r3, #4
    480a:	4619      	mov	r1, r3
    480c:	4610      	mov	r0, r2
    480e:	f7ff f9a0 	bl	3b52 <vListInsert>
}
    4812:	e010      	b.n	4836 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4814:	4b0f      	ldr	r3, [pc, #60]	; (4854 <prvAddCurrentTaskToDelayedList+0xc4>)
    4816:	681a      	ldr	r2, [r3, #0]
    4818:	4b0a      	ldr	r3, [pc, #40]	; (4844 <prvAddCurrentTaskToDelayedList+0xb4>)
    481a:	681b      	ldr	r3, [r3, #0]
    481c:	3304      	adds	r3, #4
    481e:	4619      	mov	r1, r3
    4820:	4610      	mov	r0, r2
    4822:	f7ff f996 	bl	3b52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    4826:	4b0c      	ldr	r3, [pc, #48]	; (4858 <prvAddCurrentTaskToDelayedList+0xc8>)
    4828:	681b      	ldr	r3, [r3, #0]
    482a:	68ba      	ldr	r2, [r7, #8]
    482c:	429a      	cmp	r2, r3
    482e:	d202      	bcs.n	4836 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    4830:	4a09      	ldr	r2, [pc, #36]	; (4858 <prvAddCurrentTaskToDelayedList+0xc8>)
    4832:	68bb      	ldr	r3, [r7, #8]
    4834:	6013      	str	r3, [r2, #0]
}
    4836:	bf00      	nop
    4838:	3710      	adds	r7, #16
    483a:	46bd      	mov	sp, r7
    483c:	bd80      	pop	{r7, pc}
    483e:	bf00      	nop
    4840:	1000038c 	.word	0x1000038c
    4844:	100002b0 	.word	0x100002b0
    4848:	10000390 	.word	0x10000390
    484c:	10000374 	.word	0x10000374
    4850:	10000344 	.word	0x10000344
    4854:	10000340 	.word	0x10000340
    4858:	100003a8 	.word	0x100003a8

0000485c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    485c:	b580      	push	{r7, lr}
    485e:	b084      	sub	sp, #16
    4860:	af00      	add	r7, sp, #0
    4862:	6078      	str	r0, [r7, #4]
    4864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    486a:	f002 fb83 	bl	6f74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    486e:	68fb      	ldr	r3, [r7, #12]
    4870:	681a      	ldr	r2, [r3, #0]
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4876:	68f9      	ldr	r1, [r7, #12]
    4878:	6c09      	ldr	r1, [r1, #64]	; 0x40
    487a:	fb01 f303 	mul.w	r3, r1, r3
    487e:	441a      	add	r2, r3
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	2200      	movs	r2, #0
    4888:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    488a:	68fb      	ldr	r3, [r7, #12]
    488c:	681a      	ldr	r2, [r3, #0]
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    4892:	68fb      	ldr	r3, [r7, #12]
    4894:	681a      	ldr	r2, [r3, #0]
    4896:	68fb      	ldr	r3, [r7, #12]
    4898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    489a:	3b01      	subs	r3, #1
    489c:	68f9      	ldr	r1, [r7, #12]
    489e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    48a0:	fb01 f303 	mul.w	r3, r1, r3
    48a4:	441a      	add	r2, r3
    48a6:	68fb      	ldr	r3, [r7, #12]
    48a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    48aa:	68fb      	ldr	r3, [r7, #12]
    48ac:	22ff      	movs	r2, #255	; 0xff
    48ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    48b2:	68fb      	ldr	r3, [r7, #12]
    48b4:	22ff      	movs	r2, #255	; 0xff
    48b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    48ba:	683b      	ldr	r3, [r7, #0]
    48bc:	2b00      	cmp	r3, #0
    48be:	d114      	bne.n	48ea <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    48c0:	68fb      	ldr	r3, [r7, #12]
    48c2:	691b      	ldr	r3, [r3, #16]
    48c4:	2b00      	cmp	r3, #0
    48c6:	d01a      	beq.n	48fe <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    48c8:	68fb      	ldr	r3, [r7, #12]
    48ca:	3310      	adds	r3, #16
    48cc:	4618      	mov	r0, r3
    48ce:	f7ff fd69 	bl	43a4 <xTaskRemoveFromEventList>
    48d2:	4603      	mov	r3, r0
    48d4:	2b00      	cmp	r3, #0
    48d6:	d012      	beq.n	48fe <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    48d8:	4b0c      	ldr	r3, [pc, #48]	; (490c <xQueueGenericReset+0xb0>)
    48da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    48de:	601a      	str	r2, [r3, #0]
    48e0:	f3bf 8f4f 	dsb	sy
    48e4:	f3bf 8f6f 	isb	sy
    48e8:	e009      	b.n	48fe <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    48ea:	68fb      	ldr	r3, [r7, #12]
    48ec:	3310      	adds	r3, #16
    48ee:	4618      	mov	r0, r3
    48f0:	f7ff f8de 	bl	3ab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	3324      	adds	r3, #36	; 0x24
    48f8:	4618      	mov	r0, r3
    48fa:	f7ff f8d9 	bl	3ab0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    48fe:	f002 fb53 	bl	6fa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    4902:	2301      	movs	r3, #1
}
    4904:	4618      	mov	r0, r3
    4906:	3710      	adds	r7, #16
    4908:	46bd      	mov	sp, r7
    490a:	bd80      	pop	{r7, pc}
    490c:	e000ed04 	.word	0xe000ed04

00004910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    4910:	b580      	push	{r7, lr}
    4912:	b088      	sub	sp, #32
    4914:	af02      	add	r7, sp, #8
    4916:	60f8      	str	r0, [r7, #12]
    4918:	60b9      	str	r1, [r7, #8]
    491a:	607a      	str	r2, [r7, #4]
    491c:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    491e:	683b      	ldr	r3, [r7, #0]
    4920:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
    4922:	697b      	ldr	r3, [r7, #20]
    4924:	2b00      	cmp	r3, #0
    4926:	d00d      	beq.n	4944 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    4928:	697b      	ldr	r3, [r7, #20]
    492a:	2201      	movs	r2, #1
    492c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    4930:	f897 2020 	ldrb.w	r2, [r7, #32]
    4934:	697b      	ldr	r3, [r7, #20]
    4936:	9300      	str	r3, [sp, #0]
    4938:	4613      	mov	r3, r2
    493a:	687a      	ldr	r2, [r7, #4]
    493c:	68b9      	ldr	r1, [r7, #8]
    493e:	68f8      	ldr	r0, [r7, #12]
    4940:	f000 f835 	bl	49ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    4944:	697b      	ldr	r3, [r7, #20]
	}
    4946:	4618      	mov	r0, r3
    4948:	3718      	adds	r7, #24
    494a:	46bd      	mov	sp, r7
    494c:	bd80      	pop	{r7, pc}

0000494e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    494e:	b580      	push	{r7, lr}
    4950:	b08a      	sub	sp, #40	; 0x28
    4952:	af02      	add	r7, sp, #8
    4954:	60f8      	str	r0, [r7, #12]
    4956:	60b9      	str	r1, [r7, #8]
    4958:	4613      	mov	r3, r2
    495a:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    495c:	68bb      	ldr	r3, [r7, #8]
    495e:	2b00      	cmp	r3, #0
    4960:	d102      	bne.n	4968 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    4962:	2300      	movs	r3, #0
    4964:	61fb      	str	r3, [r7, #28]
    4966:	e004      	b.n	4972 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4968:	68fb      	ldr	r3, [r7, #12]
    496a:	68ba      	ldr	r2, [r7, #8]
    496c:	fb02 f303 	mul.w	r3, r2, r3
    4970:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    4972:	69fb      	ldr	r3, [r7, #28]
    4974:	3350      	adds	r3, #80	; 0x50
    4976:	4618      	mov	r0, r3
    4978:	f000 fb4e 	bl	5018 <pvPortMalloc>
    497c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
    497e:	69bb      	ldr	r3, [r7, #24]
    4980:	2b00      	cmp	r3, #0
    4982:	d00f      	beq.n	49a4 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    4984:	69bb      	ldr	r3, [r7, #24]
    4986:	3350      	adds	r3, #80	; 0x50
    4988:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
    498a:	69bb      	ldr	r3, [r7, #24]
    498c:	2200      	movs	r2, #0
    498e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    4992:	79fa      	ldrb	r2, [r7, #7]
    4994:	69bb      	ldr	r3, [r7, #24]
    4996:	9300      	str	r3, [sp, #0]
    4998:	4613      	mov	r3, r2
    499a:	697a      	ldr	r2, [r7, #20]
    499c:	68b9      	ldr	r1, [r7, #8]
    499e:	68f8      	ldr	r0, [r7, #12]
    49a0:	f000 f805 	bl	49ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    49a4:	69bb      	ldr	r3, [r7, #24]
	}
    49a6:	4618      	mov	r0, r3
    49a8:	3720      	adds	r7, #32
    49aa:	46bd      	mov	sp, r7
    49ac:	bd80      	pop	{r7, pc}

000049ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    49ae:	b580      	push	{r7, lr}
    49b0:	b084      	sub	sp, #16
    49b2:	af00      	add	r7, sp, #0
    49b4:	60f8      	str	r0, [r7, #12]
    49b6:	60b9      	str	r1, [r7, #8]
    49b8:	607a      	str	r2, [r7, #4]
    49ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    49bc:	68bb      	ldr	r3, [r7, #8]
    49be:	2b00      	cmp	r3, #0
    49c0:	d103      	bne.n	49ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    49c2:	69bb      	ldr	r3, [r7, #24]
    49c4:	69ba      	ldr	r2, [r7, #24]
    49c6:	601a      	str	r2, [r3, #0]
    49c8:	e002      	b.n	49d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    49ca:	69bb      	ldr	r3, [r7, #24]
    49cc:	687a      	ldr	r2, [r7, #4]
    49ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    49d0:	69bb      	ldr	r3, [r7, #24]
    49d2:	68fa      	ldr	r2, [r7, #12]
    49d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    49d6:	69bb      	ldr	r3, [r7, #24]
    49d8:	68ba      	ldr	r2, [r7, #8]
    49da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    49dc:	2101      	movs	r1, #1
    49de:	69b8      	ldr	r0, [r7, #24]
    49e0:	f7ff ff3c 	bl	485c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    49e4:	69bb      	ldr	r3, [r7, #24]
    49e6:	78fa      	ldrb	r2, [r7, #3]
    49e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    49ec:	bf00      	nop
    49ee:	3710      	adds	r7, #16
    49f0:	46bd      	mov	sp, r7
    49f2:	bd80      	pop	{r7, pc}

000049f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    49f4:	b580      	push	{r7, lr}
    49f6:	b08a      	sub	sp, #40	; 0x28
    49f8:	af00      	add	r7, sp, #0
    49fa:	60f8      	str	r0, [r7, #12]
    49fc:	60b9      	str	r1, [r7, #8]
    49fe:	607a      	str	r2, [r7, #4]
    4a00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    4a02:	2300      	movs	r3, #0
    4a04:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4a06:	68fb      	ldr	r3, [r7, #12]
    4a08:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    4a0a:	f002 fab3 	bl	6f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4a0e:	6a3b      	ldr	r3, [r7, #32]
    4a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a12:	6a3b      	ldr	r3, [r7, #32]
    4a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a16:	429a      	cmp	r2, r3
    4a18:	d302      	bcc.n	4a20 <xQueueGenericSend+0x2c>
    4a1a:	683b      	ldr	r3, [r7, #0]
    4a1c:	2b02      	cmp	r3, #2
    4a1e:	d129      	bne.n	4a74 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4a20:	683a      	ldr	r2, [r7, #0]
    4a22:	68b9      	ldr	r1, [r7, #8]
    4a24:	6a38      	ldr	r0, [r7, #32]
    4a26:	f000 f98b 	bl	4d40 <prvCopyDataToQueue>
    4a2a:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4a2c:	6a3b      	ldr	r3, [r7, #32]
    4a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4a30:	2b00      	cmp	r3, #0
    4a32:	d010      	beq.n	4a56 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4a34:	6a3b      	ldr	r3, [r7, #32]
    4a36:	3324      	adds	r3, #36	; 0x24
    4a38:	4618      	mov	r0, r3
    4a3a:	f7ff fcb3 	bl	43a4 <xTaskRemoveFromEventList>
    4a3e:	4603      	mov	r3, r0
    4a40:	2b00      	cmp	r3, #0
    4a42:	d013      	beq.n	4a6c <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    4a44:	4b3f      	ldr	r3, [pc, #252]	; (4b44 <xQueueGenericSend+0x150>)
    4a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a4a:	601a      	str	r2, [r3, #0]
    4a4c:	f3bf 8f4f 	dsb	sy
    4a50:	f3bf 8f6f 	isb	sy
    4a54:	e00a      	b.n	4a6c <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    4a56:	69fb      	ldr	r3, [r7, #28]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d007      	beq.n	4a6c <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    4a5c:	4b39      	ldr	r3, [pc, #228]	; (4b44 <xQueueGenericSend+0x150>)
    4a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a62:	601a      	str	r2, [r3, #0]
    4a64:	f3bf 8f4f 	dsb	sy
    4a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    4a6c:	f002 fa9c 	bl	6fa8 <vPortExitCritical>
				return pdPASS;
    4a70:	2301      	movs	r3, #1
    4a72:	e063      	b.n	4b3c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	2b00      	cmp	r3, #0
    4a78:	d103      	bne.n	4a82 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4a7a:	f002 fa95 	bl	6fa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4a7e:	2300      	movs	r3, #0
    4a80:	e05c      	b.n	4b3c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    4a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a84:	2b00      	cmp	r3, #0
    4a86:	d106      	bne.n	4a96 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4a88:	f107 0314 	add.w	r3, r7, #20
    4a8c:	4618      	mov	r0, r3
    4a8e:	f7ff fcdd 	bl	444c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4a92:	2301      	movs	r3, #1
    4a94:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4a96:	f002 fa87 	bl	6fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4a9a:	f7ff fa95 	bl	3fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4a9e:	f002 fa69 	bl	6f74 <vPortEnterCritical>
    4aa2:	6a3b      	ldr	r3, [r7, #32]
    4aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4aa8:	b25b      	sxtb	r3, r3
    4aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4aae:	d103      	bne.n	4ab8 <xQueueGenericSend+0xc4>
    4ab0:	6a3b      	ldr	r3, [r7, #32]
    4ab2:	2200      	movs	r2, #0
    4ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4ab8:	6a3b      	ldr	r3, [r7, #32]
    4aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4abe:	b25b      	sxtb	r3, r3
    4ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4ac4:	d103      	bne.n	4ace <xQueueGenericSend+0xda>
    4ac6:	6a3b      	ldr	r3, [r7, #32]
    4ac8:	2200      	movs	r2, #0
    4aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4ace:	f002 fa6b 	bl	6fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4ad2:	1d3a      	adds	r2, r7, #4
    4ad4:	f107 0314 	add.w	r3, r7, #20
    4ad8:	4611      	mov	r1, r2
    4ada:	4618      	mov	r0, r3
    4adc:	f7ff fccc 	bl	4478 <xTaskCheckForTimeOut>
    4ae0:	4603      	mov	r3, r0
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d124      	bne.n	4b30 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4ae6:	6a38      	ldr	r0, [r7, #32]
    4ae8:	f000 fa22 	bl	4f30 <prvIsQueueFull>
    4aec:	4603      	mov	r3, r0
    4aee:	2b00      	cmp	r3, #0
    4af0:	d018      	beq.n	4b24 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4af2:	6a3b      	ldr	r3, [r7, #32]
    4af4:	3310      	adds	r3, #16
    4af6:	687a      	ldr	r2, [r7, #4]
    4af8:	4611      	mov	r1, r2
    4afa:	4618      	mov	r0, r3
    4afc:	f7ff fc1e 	bl	433c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    4b00:	6a38      	ldr	r0, [r7, #32]
    4b02:	f000 f9ad 	bl	4e60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4b06:	f7ff fa6d 	bl	3fe4 <xTaskResumeAll>
    4b0a:	4603      	mov	r3, r0
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	f47f af7c 	bne.w	4a0a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    4b12:	4b0c      	ldr	r3, [pc, #48]	; (4b44 <xQueueGenericSend+0x150>)
    4b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b18:	601a      	str	r2, [r3, #0]
    4b1a:	f3bf 8f4f 	dsb	sy
    4b1e:	f3bf 8f6f 	isb	sy
    4b22:	e772      	b.n	4a0a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4b24:	6a38      	ldr	r0, [r7, #32]
    4b26:	f000 f99b 	bl	4e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4b2a:	f7ff fa5b 	bl	3fe4 <xTaskResumeAll>
    4b2e:	e76c      	b.n	4a0a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    4b30:	6a38      	ldr	r0, [r7, #32]
    4b32:	f000 f995 	bl	4e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4b36:	f7ff fa55 	bl	3fe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4b3a:	2300      	movs	r3, #0
		}
	}
}
    4b3c:	4618      	mov	r0, r3
    4b3e:	3728      	adds	r7, #40	; 0x28
    4b40:	46bd      	mov	sp, r7
    4b42:	bd80      	pop	{r7, pc}
    4b44:	e000ed04 	.word	0xe000ed04

00004b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    4b48:	b580      	push	{r7, lr}
    4b4a:	b08c      	sub	sp, #48	; 0x30
    4b4c:	af00      	add	r7, sp, #0
    4b4e:	60f8      	str	r0, [r7, #12]
    4b50:	60b9      	str	r1, [r7, #8]
    4b52:	607a      	str	r2, [r7, #4]
    4b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4b56:	68fb      	ldr	r3, [r7, #12]
    4b58:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    4b5a:	f3ef 8211 	mrs	r2, BASEPRI
    4b5e:	f04f 0328 	mov.w	r3, #40	; 0x28
    4b62:	f383 8811 	msr	BASEPRI, r3
    4b66:	f3bf 8f6f 	isb	sy
    4b6a:	f3bf 8f4f 	dsb	sy
    4b6e:	61fa      	str	r2, [r7, #28]
    4b70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    4b72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b74:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b7e:	429a      	cmp	r2, r3
    4b80:	d302      	bcc.n	4b88 <xQueueGenericSendFromISR+0x40>
    4b82:	683b      	ldr	r3, [r7, #0]
    4b84:	2b02      	cmp	r3, #2
    4b86:	d12c      	bne.n	4be2 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    4b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4b92:	683a      	ldr	r2, [r7, #0]
    4b94:	68b9      	ldr	r1, [r7, #8]
    4b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4b98:	f000 f8d2 	bl	4d40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    4b9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    4ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4ba4:	d112      	bne.n	4bcc <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4baa:	2b00      	cmp	r3, #0
    4bac:	d016      	beq.n	4bdc <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bb0:	3324      	adds	r3, #36	; 0x24
    4bb2:	4618      	mov	r0, r3
    4bb4:	f7ff fbf6 	bl	43a4 <xTaskRemoveFromEventList>
    4bb8:	4603      	mov	r3, r0
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d00e      	beq.n	4bdc <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d00b      	beq.n	4bdc <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2201      	movs	r2, #1
    4bc8:	601a      	str	r2, [r3, #0]
    4bca:	e007      	b.n	4bdc <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    4bd0:	3301      	adds	r3, #1
    4bd2:	b2db      	uxtb	r3, r3
    4bd4:	b25a      	sxtb	r2, r3
    4bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    4bdc:	2301      	movs	r3, #1
    4bde:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    4be0:	e001      	b.n	4be6 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4be2:	2300      	movs	r3, #0
    4be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    4be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4be8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    4bea:	697b      	ldr	r3, [r7, #20]
    4bec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    4bf2:	4618      	mov	r0, r3
    4bf4:	3730      	adds	r7, #48	; 0x30
    4bf6:	46bd      	mov	sp, r7
    4bf8:	bd80      	pop	{r7, pc}
    4bfa:	Address 0x0000000000004bfa is out of bounds.


00004bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b08a      	sub	sp, #40	; 0x28
    4c00:	af00      	add	r7, sp, #0
    4c02:	60f8      	str	r0, [r7, #12]
    4c04:	60b9      	str	r1, [r7, #8]
    4c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    4c08:	2300      	movs	r3, #0
    4c0a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4c0c:	68fb      	ldr	r3, [r7, #12]
    4c0e:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4c10:	f002 f9b0 	bl	6f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4c14:	6a3b      	ldr	r3, [r7, #32]
    4c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4c18:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4c1a:	69fb      	ldr	r3, [r7, #28]
    4c1c:	2b00      	cmp	r3, #0
    4c1e:	d01f      	beq.n	4c60 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4c20:	68b9      	ldr	r1, [r7, #8]
    4c22:	6a38      	ldr	r0, [r7, #32]
    4c24:	f000 f8f6 	bl	4e14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    4c28:	69fb      	ldr	r3, [r7, #28]
    4c2a:	1e5a      	subs	r2, r3, #1
    4c2c:	6a3b      	ldr	r3, [r7, #32]
    4c2e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4c30:	6a3b      	ldr	r3, [r7, #32]
    4c32:	691b      	ldr	r3, [r3, #16]
    4c34:	2b00      	cmp	r3, #0
    4c36:	d00f      	beq.n	4c58 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4c38:	6a3b      	ldr	r3, [r7, #32]
    4c3a:	3310      	adds	r3, #16
    4c3c:	4618      	mov	r0, r3
    4c3e:	f7ff fbb1 	bl	43a4 <xTaskRemoveFromEventList>
    4c42:	4603      	mov	r3, r0
    4c44:	2b00      	cmp	r3, #0
    4c46:	d007      	beq.n	4c58 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    4c48:	4b3c      	ldr	r3, [pc, #240]	; (4d3c <xQueueReceive+0x140>)
    4c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4c4e:	601a      	str	r2, [r3, #0]
    4c50:	f3bf 8f4f 	dsb	sy
    4c54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    4c58:	f002 f9a6 	bl	6fa8 <vPortExitCritical>
				return pdPASS;
    4c5c:	2301      	movs	r3, #1
    4c5e:	e069      	b.n	4d34 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d103      	bne.n	4c6e <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4c66:	f002 f99f 	bl	6fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4c6a:	2300      	movs	r3, #0
    4c6c:	e062      	b.n	4d34 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    4c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4c70:	2b00      	cmp	r3, #0
    4c72:	d106      	bne.n	4c82 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4c74:	f107 0314 	add.w	r3, r7, #20
    4c78:	4618      	mov	r0, r3
    4c7a:	f7ff fbe7 	bl	444c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4c7e:	2301      	movs	r3, #1
    4c80:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4c82:	f002 f991 	bl	6fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4c86:	f7ff f99f 	bl	3fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4c8a:	f002 f973 	bl	6f74 <vPortEnterCritical>
    4c8e:	6a3b      	ldr	r3, [r7, #32]
    4c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4c94:	b25b      	sxtb	r3, r3
    4c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4c9a:	d103      	bne.n	4ca4 <xQueueReceive+0xa8>
    4c9c:	6a3b      	ldr	r3, [r7, #32]
    4c9e:	2200      	movs	r2, #0
    4ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4ca4:	6a3b      	ldr	r3, [r7, #32]
    4ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4caa:	b25b      	sxtb	r3, r3
    4cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4cb0:	d103      	bne.n	4cba <xQueueReceive+0xbe>
    4cb2:	6a3b      	ldr	r3, [r7, #32]
    4cb4:	2200      	movs	r2, #0
    4cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4cba:	f002 f975 	bl	6fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4cbe:	1d3a      	adds	r2, r7, #4
    4cc0:	f107 0314 	add.w	r3, r7, #20
    4cc4:	4611      	mov	r1, r2
    4cc6:	4618      	mov	r0, r3
    4cc8:	f7ff fbd6 	bl	4478 <xTaskCheckForTimeOut>
    4ccc:	4603      	mov	r3, r0
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d123      	bne.n	4d1a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4cd2:	6a38      	ldr	r0, [r7, #32]
    4cd4:	f000 f916 	bl	4f04 <prvIsQueueEmpty>
    4cd8:	4603      	mov	r3, r0
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d017      	beq.n	4d0e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4cde:	6a3b      	ldr	r3, [r7, #32]
    4ce0:	3324      	adds	r3, #36	; 0x24
    4ce2:	687a      	ldr	r2, [r7, #4]
    4ce4:	4611      	mov	r1, r2
    4ce6:	4618      	mov	r0, r3
    4ce8:	f7ff fb28 	bl	433c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4cec:	6a38      	ldr	r0, [r7, #32]
    4cee:	f000 f8b7 	bl	4e60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4cf2:	f7ff f977 	bl	3fe4 <xTaskResumeAll>
    4cf6:	4603      	mov	r3, r0
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d189      	bne.n	4c10 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    4cfc:	4b0f      	ldr	r3, [pc, #60]	; (4d3c <xQueueReceive+0x140>)
    4cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d02:	601a      	str	r2, [r3, #0]
    4d04:	f3bf 8f4f 	dsb	sy
    4d08:	f3bf 8f6f 	isb	sy
    4d0c:	e780      	b.n	4c10 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    4d0e:	6a38      	ldr	r0, [r7, #32]
    4d10:	f000 f8a6 	bl	4e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4d14:	f7ff f966 	bl	3fe4 <xTaskResumeAll>
    4d18:	e77a      	b.n	4c10 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    4d1a:	6a38      	ldr	r0, [r7, #32]
    4d1c:	f000 f8a0 	bl	4e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4d20:	f7ff f960 	bl	3fe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4d24:	6a38      	ldr	r0, [r7, #32]
    4d26:	f000 f8ed 	bl	4f04 <prvIsQueueEmpty>
    4d2a:	4603      	mov	r3, r0
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	f43f af6f 	beq.w	4c10 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    4d32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    4d34:	4618      	mov	r0, r3
    4d36:	3728      	adds	r7, #40	; 0x28
    4d38:	46bd      	mov	sp, r7
    4d3a:	bd80      	pop	{r7, pc}
    4d3c:	e000ed04 	.word	0xe000ed04

00004d40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b086      	sub	sp, #24
    4d44:	af00      	add	r7, sp, #0
    4d46:	60f8      	str	r0, [r7, #12]
    4d48:	60b9      	str	r1, [r7, #8]
    4d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    4d4c:	2300      	movs	r3, #0
    4d4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4d50:	68fb      	ldr	r3, [r7, #12]
    4d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    4d56:	68fb      	ldr	r3, [r7, #12]
    4d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d10d      	bne.n	4d7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4d5e:	68fb      	ldr	r3, [r7, #12]
    4d60:	681b      	ldr	r3, [r3, #0]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d14d      	bne.n	4e02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4d66:	68fb      	ldr	r3, [r7, #12]
    4d68:	685b      	ldr	r3, [r3, #4]
    4d6a:	4618      	mov	r0, r3
    4d6c:	f7ff fcac 	bl	46c8 <xTaskPriorityDisinherit>
    4d70:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    4d72:	68fb      	ldr	r3, [r7, #12]
    4d74:	2200      	movs	r2, #0
    4d76:	605a      	str	r2, [r3, #4]
    4d78:	e043      	b.n	4e02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d119      	bne.n	4db4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    4d80:	68fb      	ldr	r3, [r7, #12]
    4d82:	6898      	ldr	r0, [r3, #8]
    4d84:	68fb      	ldr	r3, [r7, #12]
    4d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d88:	461a      	mov	r2, r3
    4d8a:	68b9      	ldr	r1, [r7, #8]
    4d8c:	f004 faaa 	bl	92e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4d90:	68fb      	ldr	r3, [r7, #12]
    4d92:	689a      	ldr	r2, [r3, #8]
    4d94:	68fb      	ldr	r3, [r7, #12]
    4d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d98:	441a      	add	r2, r3
    4d9a:	68fb      	ldr	r3, [r7, #12]
    4d9c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4d9e:	68fb      	ldr	r3, [r7, #12]
    4da0:	689a      	ldr	r2, [r3, #8]
    4da2:	68fb      	ldr	r3, [r7, #12]
    4da4:	685b      	ldr	r3, [r3, #4]
    4da6:	429a      	cmp	r2, r3
    4da8:	d32b      	bcc.n	4e02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4daa:	68fb      	ldr	r3, [r7, #12]
    4dac:	681a      	ldr	r2, [r3, #0]
    4dae:	68fb      	ldr	r3, [r7, #12]
    4db0:	609a      	str	r2, [r3, #8]
    4db2:	e026      	b.n	4e02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4db4:	68fb      	ldr	r3, [r7, #12]
    4db6:	68d8      	ldr	r0, [r3, #12]
    4db8:	68fb      	ldr	r3, [r7, #12]
    4dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4dbc:	461a      	mov	r2, r3
    4dbe:	68b9      	ldr	r1, [r7, #8]
    4dc0:	f004 fa90 	bl	92e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    4dc4:	68fb      	ldr	r3, [r7, #12]
    4dc6:	68da      	ldr	r2, [r3, #12]
    4dc8:	68fb      	ldr	r3, [r7, #12]
    4dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4dcc:	425b      	negs	r3, r3
    4dce:	441a      	add	r2, r3
    4dd0:	68fb      	ldr	r3, [r7, #12]
    4dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4dd4:	68fb      	ldr	r3, [r7, #12]
    4dd6:	68da      	ldr	r2, [r3, #12]
    4dd8:	68fb      	ldr	r3, [r7, #12]
    4dda:	681b      	ldr	r3, [r3, #0]
    4ddc:	429a      	cmp	r2, r3
    4dde:	d207      	bcs.n	4df0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4de0:	68fb      	ldr	r3, [r7, #12]
    4de2:	685a      	ldr	r2, [r3, #4]
    4de4:	68fb      	ldr	r3, [r7, #12]
    4de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4de8:	425b      	negs	r3, r3
    4dea:	441a      	add	r2, r3
    4dec:	68fb      	ldr	r3, [r7, #12]
    4dee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	2b02      	cmp	r3, #2
    4df4:	d105      	bne.n	4e02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4df6:	693b      	ldr	r3, [r7, #16]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d002      	beq.n	4e02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    4dfc:	693b      	ldr	r3, [r7, #16]
    4dfe:	3b01      	subs	r3, #1
    4e00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    4e02:	693b      	ldr	r3, [r7, #16]
    4e04:	1c5a      	adds	r2, r3, #1
    4e06:	68fb      	ldr	r3, [r7, #12]
    4e08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    4e0a:	697b      	ldr	r3, [r7, #20]
}
    4e0c:	4618      	mov	r0, r3
    4e0e:	3718      	adds	r7, #24
    4e10:	46bd      	mov	sp, r7
    4e12:	bd80      	pop	{r7, pc}

00004e14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    4e14:	b580      	push	{r7, lr}
    4e16:	b082      	sub	sp, #8
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e22:	2b00      	cmp	r3, #0
    4e24:	d018      	beq.n	4e58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	68da      	ldr	r2, [r3, #12]
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e2e:	441a      	add	r2, r3
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	68da      	ldr	r2, [r3, #12]
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	685b      	ldr	r3, [r3, #4]
    4e3c:	429a      	cmp	r2, r3
    4e3e:	d303      	bcc.n	4e48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	681a      	ldr	r2, [r3, #0]
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	68d9      	ldr	r1, [r3, #12]
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e50:	461a      	mov	r2, r3
    4e52:	6838      	ldr	r0, [r7, #0]
    4e54:	f004 fa46 	bl	92e4 <memcpy>
	}
}
    4e58:	bf00      	nop
    4e5a:	3708      	adds	r7, #8
    4e5c:	46bd      	mov	sp, r7
    4e5e:	bd80      	pop	{r7, pc}

00004e60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    4e60:	b580      	push	{r7, lr}
    4e62:	b084      	sub	sp, #16
    4e64:	af00      	add	r7, sp, #0
    4e66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4e68:	f002 f884 	bl	6f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4e72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4e74:	e011      	b.n	4e9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d012      	beq.n	4ea4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	3324      	adds	r3, #36	; 0x24
    4e82:	4618      	mov	r0, r3
    4e84:	f7ff fa8e 	bl	43a4 <xTaskRemoveFromEventList>
    4e88:	4603      	mov	r3, r0
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d001      	beq.n	4e92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    4e8e:	f7ff fb39 	bl	4504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    4e92:	7bfb      	ldrb	r3, [r7, #15]
    4e94:	3b01      	subs	r3, #1
    4e96:	b2db      	uxtb	r3, r3
    4e98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	dce9      	bgt.n	4e76 <prvUnlockQueue+0x16>
    4ea2:	e000      	b.n	4ea6 <prvUnlockQueue+0x46>
					break;
    4ea4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	22ff      	movs	r2, #255	; 0xff
    4eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    4eae:	f002 f87b 	bl	6fa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4eb2:	f002 f85f 	bl	6f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4ebc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    4ebe:	e011      	b.n	4ee4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	691b      	ldr	r3, [r3, #16]
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d012      	beq.n	4eee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	3310      	adds	r3, #16
    4ecc:	4618      	mov	r0, r3
    4ece:	f7ff fa69 	bl	43a4 <xTaskRemoveFromEventList>
    4ed2:	4603      	mov	r3, r0
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d001      	beq.n	4edc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    4ed8:	f7ff fb14 	bl	4504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    4edc:	7bbb      	ldrb	r3, [r7, #14]
    4ede:	3b01      	subs	r3, #1
    4ee0:	b2db      	uxtb	r3, r3
    4ee2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    4ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	dce9      	bgt.n	4ec0 <prvUnlockQueue+0x60>
    4eec:	e000      	b.n	4ef0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    4eee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	22ff      	movs	r2, #255	; 0xff
    4ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4ef8:	f002 f856 	bl	6fa8 <vPortExitCritical>
}
    4efc:	bf00      	nop
    4efe:	3710      	adds	r7, #16
    4f00:	46bd      	mov	sp, r7
    4f02:	bd80      	pop	{r7, pc}

00004f04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    4f04:	b580      	push	{r7, lr}
    4f06:	b084      	sub	sp, #16
    4f08:	af00      	add	r7, sp, #0
    4f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4f0c:	f002 f832 	bl	6f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4f14:	2b00      	cmp	r3, #0
    4f16:	d102      	bne.n	4f1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    4f18:	2301      	movs	r3, #1
    4f1a:	60fb      	str	r3, [r7, #12]
    4f1c:	e001      	b.n	4f22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    4f1e:	2300      	movs	r3, #0
    4f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4f22:	f002 f841 	bl	6fa8 <vPortExitCritical>

	return xReturn;
    4f26:	68fb      	ldr	r3, [r7, #12]
}
    4f28:	4618      	mov	r0, r3
    4f2a:	3710      	adds	r7, #16
    4f2c:	46bd      	mov	sp, r7
    4f2e:	bd80      	pop	{r7, pc}

00004f30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    4f30:	b580      	push	{r7, lr}
    4f32:	b084      	sub	sp, #16
    4f34:	af00      	add	r7, sp, #0
    4f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4f38:	f002 f81c 	bl	6f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4f44:	429a      	cmp	r2, r3
    4f46:	d102      	bne.n	4f4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    4f48:	2301      	movs	r3, #1
    4f4a:	60fb      	str	r3, [r7, #12]
    4f4c:	e001      	b.n	4f52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    4f4e:	2300      	movs	r3, #0
    4f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4f52:	f002 f829 	bl	6fa8 <vPortExitCritical>

	return xReturn;
    4f56:	68fb      	ldr	r3, [r7, #12]
}
    4f58:	4618      	mov	r0, r3
    4f5a:	3710      	adds	r7, #16
    4f5c:	46bd      	mov	sp, r7
    4f5e:	bd80      	pop	{r7, pc}

00004f60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    4f60:	b480      	push	{r7}
    4f62:	b085      	sub	sp, #20
    4f64:	af00      	add	r7, sp, #0
    4f66:	6078      	str	r0, [r7, #4]
    4f68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4f6a:	2300      	movs	r3, #0
    4f6c:	60fb      	str	r3, [r7, #12]
    4f6e:	e014      	b.n	4f9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    4f70:	4a0e      	ldr	r2, [pc, #56]	; (4fac <vQueueAddToRegistry+0x4c>)
    4f72:	68fb      	ldr	r3, [r7, #12]
    4f74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d10b      	bne.n	4f94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    4f7c:	490b      	ldr	r1, [pc, #44]	; (4fac <vQueueAddToRegistry+0x4c>)
    4f7e:	68fb      	ldr	r3, [r7, #12]
    4f80:	683a      	ldr	r2, [r7, #0]
    4f82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    4f86:	4a09      	ldr	r2, [pc, #36]	; (4fac <vQueueAddToRegistry+0x4c>)
    4f88:	68fb      	ldr	r3, [r7, #12]
    4f8a:	00db      	lsls	r3, r3, #3
    4f8c:	4413      	add	r3, r2
    4f8e:	687a      	ldr	r2, [r7, #4]
    4f90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    4f92:	e005      	b.n	4fa0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4f94:	68fb      	ldr	r3, [r7, #12]
    4f96:	3301      	adds	r3, #1
    4f98:	60fb      	str	r3, [r7, #12]
    4f9a:	68fb      	ldr	r3, [r7, #12]
    4f9c:	2b09      	cmp	r3, #9
    4f9e:	d9e7      	bls.n	4f70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    4fa0:	bf00      	nop
    4fa2:	3714      	adds	r7, #20
    4fa4:	46bd      	mov	sp, r7
    4fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4faa:	4770      	bx	lr
    4fac:	10000f8c 	.word	0x10000f8c

00004fb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b086      	sub	sp, #24
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	60f8      	str	r0, [r7, #12]
    4fb8:	60b9      	str	r1, [r7, #8]
    4fba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    4fc0:	f001 ffd8 	bl	6f74 <vPortEnterCritical>
    4fc4:	697b      	ldr	r3, [r7, #20]
    4fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4fca:	b25b      	sxtb	r3, r3
    4fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4fd0:	d103      	bne.n	4fda <vQueueWaitForMessageRestricted+0x2a>
    4fd2:	697b      	ldr	r3, [r7, #20]
    4fd4:	2200      	movs	r2, #0
    4fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4fda:	697b      	ldr	r3, [r7, #20]
    4fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4fe0:	b25b      	sxtb	r3, r3
    4fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4fe6:	d103      	bne.n	4ff0 <vQueueWaitForMessageRestricted+0x40>
    4fe8:	697b      	ldr	r3, [r7, #20]
    4fea:	2200      	movs	r2, #0
    4fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4ff0:	f001 ffda 	bl	6fa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    4ff4:	697b      	ldr	r3, [r7, #20]
    4ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d106      	bne.n	500a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    4ffc:	697b      	ldr	r3, [r7, #20]
    4ffe:	3324      	adds	r3, #36	; 0x24
    5000:	687a      	ldr	r2, [r7, #4]
    5002:	68b9      	ldr	r1, [r7, #8]
    5004:	4618      	mov	r0, r3
    5006:	f7ff f9af 	bl	4368 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    500a:	6978      	ldr	r0, [r7, #20]
    500c:	f7ff ff28 	bl	4e60 <prvUnlockQueue>
	}
    5010:	bf00      	nop
    5012:	3718      	adds	r7, #24
    5014:	46bd      	mov	sp, r7
    5016:	bd80      	pop	{r7, pc}

00005018 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5018:	b580      	push	{r7, lr}
    501a:	b084      	sub	sp, #16
    501c:	af00      	add	r7, sp, #0
    501e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    5020:	f7fe ffd2 	bl	3fc8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    5024:	6878      	ldr	r0, [r7, #4]
    5026:	f004 f94d 	bl	92c4 <malloc>
    502a:	4603      	mov	r3, r0
    502c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    502e:	f7fe ffd9 	bl	3fe4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5032:	68fb      	ldr	r3, [r7, #12]
}
    5034:	4618      	mov	r0, r3
    5036:	3710      	adds	r7, #16
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}

0000503c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    503c:	b580      	push	{r7, lr}
    503e:	b082      	sub	sp, #8
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
	if( pv )
    5044:	687b      	ldr	r3, [r7, #4]
    5046:	2b00      	cmp	r3, #0
    5048:	d006      	beq.n	5058 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
    504a:	f7fe ffbd 	bl	3fc8 <vTaskSuspendAll>
		{
			free( pv );
    504e:	6878      	ldr	r0, [r7, #4]
    5050:	f004 f940 	bl	92d4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    5054:	f7fe ffc6 	bl	3fe4 <xTaskResumeAll>
	}
}
    5058:	bf00      	nop
    505a:	3708      	adds	r7, #8
    505c:	46bd      	mov	sp, r7
    505e:	bd80      	pop	{r7, pc}

00005060 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    5060:	b480      	push	{r7}
    5062:	af00      	add	r7, sp, #0
    return 1;
    5064:	2301      	movs	r3, #1
  }
    5066:	4618      	mov	r0, r3
    5068:	46bd      	mov	sp, r7
    506a:	f85d 7b04 	ldr.w	r7, [sp], #4
    506e:	4770      	bx	lr

00005070 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    5070:	b480      	push	{r7}
    5072:	b083      	sub	sp, #12
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
    5078:	6039      	str	r1, [r7, #0]
    return -1;
    507a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    507e:	4618      	mov	r0, r3
    5080:	370c      	adds	r7, #12
    5082:	46bd      	mov	sp, r7
    5084:	f85d 7b04 	ldr.w	r7, [sp], #4
    5088:	4770      	bx	lr
    508a:	Address 0x000000000000508a is out of bounds.


0000508c <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    508c:	b480      	push	{r7}
    508e:	b085      	sub	sp, #20
    5090:	af00      	add	r7, sp, #0
    5092:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    5094:	4b0c      	ldr	r3, [pc, #48]	; (50c8 <_sbrk+0x3c>)
    5096:	681b      	ldr	r3, [r3, #0]
    5098:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    509a:	4b0b      	ldr	r3, [pc, #44]	; (50c8 <_sbrk+0x3c>)
    509c:	681a      	ldr	r2, [r3, #0]
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	4413      	add	r3, r2
    50a2:	4a0a      	ldr	r2, [pc, #40]	; (50cc <_sbrk+0x40>)
    50a4:	4293      	cmp	r3, r2
    50a6:	d901      	bls.n	50ac <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    50a8:	2300      	movs	r3, #0
    50aa:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    50ac:	4b06      	ldr	r3, [pc, #24]	; (50c8 <_sbrk+0x3c>)
    50ae:	681a      	ldr	r2, [r3, #0]
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	4413      	add	r3, r2
    50b4:	4a04      	ldr	r2, [pc, #16]	; (50c8 <_sbrk+0x3c>)
    50b6:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    50b8:	68fb      	ldr	r3, [r7, #12]
  }
    50ba:	4618      	mov	r0, r3
    50bc:	3714      	adds	r7, #20
    50be:	46bd      	mov	sp, r7
    50c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c4:	4770      	bx	lr
    50c6:	bf00      	nop
    50c8:	10000068 	.word	0x10000068
    50cc:	20008000 	.word	0x20008000

000050d0 <_write>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    50d0:	b580      	push	{r7, lr}
    50d2:	b084      	sub	sp, #16
    50d4:	af00      	add	r7, sp, #0
    50d6:	60f8      	str	r0, [r7, #12]
    50d8:	60b9      	str	r1, [r7, #8]
    50da:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	4619      	mov	r1, r3
    50e0:	68b8      	ldr	r0, [r7, #8]
    50e2:	f001 f9a0 	bl	6426 <trace_write>
    return sjsu::newlib::out(ptr, length);
    50e6:	4b05      	ldr	r3, [pc, #20]	; (50fc <_write+0x2c>)
    50e8:	681b      	ldr	r3, [r3, #0]
    50ea:	687a      	ldr	r2, [r7, #4]
    50ec:	4611      	mov	r1, r2
    50ee:	68b8      	ldr	r0, [r7, #8]
    50f0:	4798      	blx	r3
    50f2:	4603      	mov	r3, r0
  }
    50f4:	4618      	mov	r0, r3
    50f6:	3710      	adds	r7, #16
    50f8:	46bd      	mov	sp, r7
    50fa:	bd80      	pop	{r7, pc}
    50fc:	10000060 	.word	0x10000060

00005100 <_read>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _read(FILE * file, char * ptr, [[maybe_unused]] int length)
  {
    5100:	b580      	push	{r7, lr}
    5102:	b086      	sub	sp, #24
    5104:	af00      	add	r7, sp, #0
    5106:	60f8      	str	r0, [r7, #12]
    5108:	60b9      	str	r1, [r7, #8]
    510a:	607a      	str	r2, [r7, #4]
    int number_of_read_characters = 0;
    510c:	2300      	movs	r3, #0
    510e:	617b      	str	r3, [r7, #20]
    if (file == STDIN_FILENO)
    5110:	68fb      	ldr	r3, [r7, #12]
    5112:	2b00      	cmp	r3, #0
    5114:	d10e      	bne.n	5134 <_read+0x34>
    {
      number_of_read_characters = sjsu::newlib::in(ptr, 1);
    5116:	4b0a      	ldr	r3, [pc, #40]	; (5140 <_read+0x40>)
    5118:	681b      	ldr	r3, [r3, #0]
    511a:	2101      	movs	r1, #1
    511c:	68b8      	ldr	r0, [r7, #8]
    511e:	4798      	blx	r3
    5120:	6178      	str	r0, [r7, #20]
      // Echo back to STDOUT
      if (sjsu::newlib::echo_back_is_enabled)
    5122:	4b08      	ldr	r3, [pc, #32]	; (5144 <_read+0x44>)
    5124:	781b      	ldrb	r3, [r3, #0]
    5126:	2b00      	cmp	r3, #0
    5128:	d004      	beq.n	5134 <_read+0x34>
      {
        sjsu::newlib::out(ptr, 1);
    512a:	4b07      	ldr	r3, [pc, #28]	; (5148 <_read+0x48>)
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	2101      	movs	r1, #1
    5130:	68b8      	ldr	r0, [r7, #8]
    5132:	4798      	blx	r3
      }
    }
    return number_of_read_characters;
    5134:	697b      	ldr	r3, [r7, #20]
  }
    5136:	4618      	mov	r0, r3
    5138:	3718      	adds	r7, #24
    513a:	46bd      	mov	sp, r7
    513c:	bd80      	pop	{r7, pc}
    513e:	bf00      	nop
    5140:	10000064 	.word	0x10000064
    5144:	1000005c 	.word	0x1000005c
    5148:	10000060 	.word	0x10000060

0000514c <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    514c:	b580      	push	{r7, lr}
    514e:	b084      	sub	sp, #16
    5150:	af00      	add	r7, sp, #0
    5152:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    5154:	6878      	ldr	r0, [r7, #4]
    5156:	f004 fa18 	bl	958a <strlen>
    515a:	4603      	mov	r3, r0
    515c:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    515e:	2300      	movs	r3, #0
    5160:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    5162:	68fa      	ldr	r2, [r7, #12]
    5164:	6879      	ldr	r1, [r7, #4]
    5166:	2000      	movs	r0, #0
    5168:	f7ff ffb2 	bl	50d0 <_write>
    516c:	4602      	mov	r2, r0
    516e:	68bb      	ldr	r3, [r7, #8]
    5170:	4413      	add	r3, r2
    5172:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    5174:	2201      	movs	r2, #1
    5176:	4906      	ldr	r1, [pc, #24]	; (5190 <puts+0x44>)
    5178:	2000      	movs	r0, #0
    517a:	f7ff ffa9 	bl	50d0 <_write>
    517e:	4602      	mov	r2, r0
    5180:	68bb      	ldr	r3, [r7, #8]
    5182:	4413      	add	r3, r2
    5184:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    5186:	68bb      	ldr	r3, [r7, #8]
  }
    5188:	4618      	mov	r0, r3
    518a:	3710      	adds	r7, #16
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}
    5190:	0000a804 	.word	0x0000a804

00005194 <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    5194:	b480      	push	{r7}
    5196:	b083      	sub	sp, #12
    5198:	af00      	add	r7, sp, #0
    519a:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    519c:	bf00      	nop
    while (1)
    519e:	e7fd      	b.n	519c <_exit+0x8>

000051a0 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    51a0:	b580      	push	{r7, lr}
    51a2:	b088      	sub	sp, #32
    51a4:	af00      	add	r7, sp, #0
    51a6:	60b9      	str	r1, [r7, #8]
    51a8:	607a      	str	r2, [r7, #4]
    51aa:	603b      	str	r3, [r7, #0]
    51ac:	4603      	mov	r3, r0
    51ae:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    51b0:	23fe      	movs	r3, #254	; 0xfe
    51b2:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    51b4:	697a      	ldr	r2, [r7, #20]
    51b6:	687b      	ldr	r3, [r7, #4]
    51b8:	fbb3 f1f2 	udiv	r1, r3, r2
    51bc:	fb02 f201 	mul.w	r2, r2, r1
    51c0:	1a9b      	subs	r3, r3, r2
    51c2:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    51c4:	68ba      	ldr	r2, [r7, #8]
    51c6:	69fb      	ldr	r3, [r7, #28]
    51c8:	4413      	add	r3, r2
    51ca:	7bfa      	ldrb	r2, [r7, #15]
    51cc:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    51ce:	7bfb      	ldrb	r3, [r7, #15]
    51d0:	2b00      	cmp	r3, #0
    51d2:	d106      	bne.n	51e2 <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    51d4:	69fb      	ldr	r3, [r7, #28]
    51d6:	461a      	mov	r2, r3
    51d8:	68b9      	ldr	r1, [r7, #8]
    51da:	2001      	movs	r0, #1
    51dc:	f7ff ff78 	bl	50d0 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    51e0:	e012      	b.n	5208 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    51e2:	69fb      	ldr	r3, [r7, #28]
    51e4:	1c5a      	adds	r2, r3, #1
    51e6:	697b      	ldr	r3, [r7, #20]
    51e8:	429a      	cmp	r2, r3
    51ea:	d10d      	bne.n	5208 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    51ec:	697b      	ldr	r3, [r7, #20]
    51ee:	3301      	adds	r3, #1
    51f0:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    51f2:	68ba      	ldr	r2, [r7, #8]
    51f4:	69bb      	ldr	r3, [r7, #24]
    51f6:	4413      	add	r3, r2
    51f8:	2200      	movs	r2, #0
    51fa:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    51fc:	69bb      	ldr	r3, [r7, #24]
    51fe:	461a      	mov	r2, r3
    5200:	68b9      	ldr	r1, [r7, #8]
    5202:	2001      	movs	r0, #1
    5204:	f7ff ff64 	bl	50d0 <_write>
}
    5208:	bf00      	nop
    520a:	3720      	adds	r7, #32
    520c:	46bd      	mov	sp, r7
    520e:	bd80      	pop	{r7, pc}

00005210 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    5210:	b480      	push	{r7}
    5212:	b085      	sub	sp, #20
    5214:	af00      	add	r7, sp, #0
    5216:	60b9      	str	r1, [r7, #8]
    5218:	607a      	str	r2, [r7, #4]
    521a:	603b      	str	r3, [r7, #0]
    521c:	4603      	mov	r3, r0
    521e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    5220:	bf00      	nop
    5222:	3714      	adds	r7, #20
    5224:	46bd      	mov	sp, r7
    5226:	f85d 7b04 	ldr.w	r7, [sp], #4
    522a:	4770      	bx	lr

0000522c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    522c:	b480      	push	{r7}
    522e:	b085      	sub	sp, #20
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    5234:	687b      	ldr	r3, [r7, #4]
    5236:	60fb      	str	r3, [r7, #12]
    5238:	68fb      	ldr	r3, [r7, #12]
    523a:	781b      	ldrb	r3, [r3, #0]
    523c:	2b00      	cmp	r3, #0
    523e:	d003      	beq.n	5248 <_strlen(char const*)+0x1c>
    5240:	68fb      	ldr	r3, [r7, #12]
    5242:	3301      	adds	r3, #1
    5244:	60fb      	str	r3, [r7, #12]
    5246:	e7f7      	b.n	5238 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    5248:	68fa      	ldr	r2, [r7, #12]
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	1ad3      	subs	r3, r2, r3
}
    524e:	4618      	mov	r0, r3
    5250:	3714      	adds	r7, #20
    5252:	46bd      	mov	sp, r7
    5254:	f85d 7b04 	ldr.w	r7, [sp], #4
    5258:	4770      	bx	lr

0000525a <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    525a:	b480      	push	{r7}
    525c:	b083      	sub	sp, #12
    525e:	af00      	add	r7, sp, #0
    5260:	4603      	mov	r3, r0
    5262:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    5264:	79fb      	ldrb	r3, [r7, #7]
    5266:	2b2f      	cmp	r3, #47	; 0x2f
    5268:	d904      	bls.n	5274 <_is_digit(char)+0x1a>
    526a:	79fb      	ldrb	r3, [r7, #7]
    526c:	2b39      	cmp	r3, #57	; 0x39
    526e:	d801      	bhi.n	5274 <_is_digit(char)+0x1a>
    5270:	2301      	movs	r3, #1
    5272:	e000      	b.n	5276 <_is_digit(char)+0x1c>
    5274:	2300      	movs	r3, #0
}
    5276:	4618      	mov	r0, r3
    5278:	370c      	adds	r7, #12
    527a:	46bd      	mov	sp, r7
    527c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5280:	4770      	bx	lr

00005282 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    5282:	b580      	push	{r7, lr}
    5284:	b084      	sub	sp, #16
    5286:	af00      	add	r7, sp, #0
    5288:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    528a:	2300      	movs	r3, #0
    528c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    528e:	687b      	ldr	r3, [r7, #4]
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	781b      	ldrb	r3, [r3, #0]
    5294:	4618      	mov	r0, r3
    5296:	f7ff ffe0 	bl	525a <_is_digit(char)>
    529a:	4603      	mov	r3, r0
    529c:	2b00      	cmp	r3, #0
    529e:	d00f      	beq.n	52c0 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    52a0:	68fa      	ldr	r2, [r7, #12]
    52a2:	4613      	mov	r3, r2
    52a4:	009b      	lsls	r3, r3, #2
    52a6:	4413      	add	r3, r2
    52a8:	005b      	lsls	r3, r3, #1
    52aa:	4618      	mov	r0, r3
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	1c59      	adds	r1, r3, #1
    52b2:	687a      	ldr	r2, [r7, #4]
    52b4:	6011      	str	r1, [r2, #0]
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	4403      	add	r3, r0
    52ba:	3b30      	subs	r3, #48	; 0x30
    52bc:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    52be:	e7e6      	b.n	528e <_atoi(char const**)+0xc>
  }
  return i;
    52c0:	68fb      	ldr	r3, [r7, #12]
}
    52c2:	4618      	mov	r0, r3
    52c4:	3710      	adds	r7, #16
    52c6:	46bd      	mov	sp, r7
    52c8:	bd80      	pop	{r7, pc}

000052ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    52ca:	b590      	push	{r4, r7, lr}
    52cc:	b089      	sub	sp, #36	; 0x24
    52ce:	af00      	add	r7, sp, #0
    52d0:	60f8      	str	r0, [r7, #12]
    52d2:	60b9      	str	r1, [r7, #8]
    52d4:	607a      	str	r2, [r7, #4]
    52d6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    52dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52de:	f003 0302 	and.w	r3, r3, #2
    52e2:	2b00      	cmp	r3, #0
    52e4:	d10e      	bne.n	5304 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    52e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    52e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    52ea:	429a      	cmp	r2, r3
    52ec:	d20a      	bcs.n	5304 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    52ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52f0:	2b1f      	cmp	r3, #31
    52f2:	d807      	bhi.n	5304 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    52f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52f6:	1c5a      	adds	r2, r3, #1
    52f8:	637a      	str	r2, [r7, #52]	; 0x34
    52fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    52fc:	4413      	add	r3, r2
    52fe:	2230      	movs	r2, #48	; 0x30
    5300:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5302:	e7eb      	b.n	52dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5306:	f003 0302 	and.w	r3, r3, #2
    530a:	2b00      	cmp	r3, #0
    530c:	d113      	bne.n	5336 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    530e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5310:	f003 0301 	and.w	r3, r3, #1
    5314:	2b00      	cmp	r3, #0
    5316:	d00e      	beq.n	5336 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    531c:	429a      	cmp	r2, r3
    531e:	d20a      	bcs.n	5336 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5322:	2b1f      	cmp	r3, #31
    5324:	d807      	bhi.n	5336 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    5326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5328:	1c5a      	adds	r2, r3, #1
    532a:	637a      	str	r2, [r7, #52]	; 0x34
    532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    532e:	4413      	add	r3, r2
    5330:	2230      	movs	r2, #48	; 0x30
    5332:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5334:	e7e6      	b.n	5304 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    5336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5338:	f003 0310 	and.w	r3, r3, #16
    533c:	2b00      	cmp	r3, #0
    533e:	d058      	beq.n	53f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    5340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5346:	2b00      	cmp	r3, #0
    5348:	d116      	bne.n	5378 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    534c:	2b00      	cmp	r3, #0
    534e:	d013      	beq.n	5378 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    5350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5354:	429a      	cmp	r2, r3
    5356:	d003      	beq.n	5360 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    5358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    535a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    535c:	429a      	cmp	r2, r3
    535e:	d10b      	bne.n	5378 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    5360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5362:	3b01      	subs	r3, #1
    5364:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    5366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5368:	2b00      	cmp	r3, #0
    536a:	d005      	beq.n	5378 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    536c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    536e:	2b10      	cmp	r3, #16
    5370:	d102      	bne.n	5378 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    5372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5374:	3b01      	subs	r3, #1
    5376:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    537a:	2b10      	cmp	r3, #16
    537c:	d10f      	bne.n	539e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5380:	f003 0320 	and.w	r3, r3, #32
    5384:	2b00      	cmp	r3, #0
    5386:	d10a      	bne.n	539e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    5388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    538a:	2b1f      	cmp	r3, #31
    538c:	d807      	bhi.n	539e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5390:	1c5a      	adds	r2, r3, #1
    5392:	637a      	str	r2, [r7, #52]	; 0x34
    5394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5396:	4413      	add	r3, r2
    5398:	2278      	movs	r2, #120	; 0x78
    539a:	701a      	strb	r2, [r3, #0]
    539c:	e01f      	b.n	53de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    539e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    53a0:	2b10      	cmp	r3, #16
    53a2:	d10f      	bne.n	53c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    53a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    53a6:	f003 0320 	and.w	r3, r3, #32
    53aa:	2b00      	cmp	r3, #0
    53ac:	d00a      	beq.n	53c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    53ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53b0:	2b1f      	cmp	r3, #31
    53b2:	d807      	bhi.n	53c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    53b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53b6:	1c5a      	adds	r2, r3, #1
    53b8:	637a      	str	r2, [r7, #52]	; 0x34
    53ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    53bc:	4413      	add	r3, r2
    53be:	2258      	movs	r2, #88	; 0x58
    53c0:	701a      	strb	r2, [r3, #0]
    53c2:	e00c      	b.n	53de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    53c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    53c6:	2b02      	cmp	r3, #2
    53c8:	d109      	bne.n	53de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    53ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53cc:	2b1f      	cmp	r3, #31
    53ce:	d806      	bhi.n	53de <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    53d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53d2:	1c5a      	adds	r2, r3, #1
    53d4:	637a      	str	r2, [r7, #52]	; 0x34
    53d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    53d8:	4413      	add	r3, r2
    53da:	2262      	movs	r2, #98	; 0x62
    53dc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    53de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53e0:	2b1f      	cmp	r3, #31
    53e2:	d806      	bhi.n	53f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    53e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53e6:	1c5a      	adds	r2, r3, #1
    53e8:	637a      	str	r2, [r7, #52]	; 0x34
    53ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    53ec:	4413      	add	r3, r2
    53ee:	2230      	movs	r2, #48	; 0x30
    53f0:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    53f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53f4:	2b00      	cmp	r3, #0
    53f6:	d014      	beq.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    53f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    53fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    53fc:	429a      	cmp	r2, r3
    53fe:	d110      	bne.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    5400:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5404:	2b00      	cmp	r3, #0
    5406:	d109      	bne.n	541c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    5408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    540a:	f003 0304 	and.w	r3, r3, #4
    540e:	2b00      	cmp	r3, #0
    5410:	d104      	bne.n	541c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    5412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5414:	f003 0308 	and.w	r3, r3, #8
    5418:	2b00      	cmp	r3, #0
    541a:	d002      	beq.n	5422 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    541e:	3b01      	subs	r3, #1
    5420:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    5422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5424:	2b1f      	cmp	r3, #31
    5426:	d824      	bhi.n	5472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    5428:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    542c:	2b00      	cmp	r3, #0
    542e:	d007      	beq.n	5440 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    5430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5432:	1c5a      	adds	r2, r3, #1
    5434:	637a      	str	r2, [r7, #52]	; 0x34
    5436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5438:	4413      	add	r3, r2
    543a:	222d      	movs	r2, #45	; 0x2d
    543c:	701a      	strb	r2, [r3, #0]
    543e:	e018      	b.n	5472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    5440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5442:	f003 0304 	and.w	r3, r3, #4
    5446:	2b00      	cmp	r3, #0
    5448:	d007      	beq.n	545a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    544c:	1c5a      	adds	r2, r3, #1
    544e:	637a      	str	r2, [r7, #52]	; 0x34
    5450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5452:	4413      	add	r3, r2
    5454:	222b      	movs	r2, #43	; 0x2b
    5456:	701a      	strb	r2, [r3, #0]
    5458:	e00b      	b.n	5472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    545c:	f003 0308 	and.w	r3, r3, #8
    5460:	2b00      	cmp	r3, #0
    5462:	d006      	beq.n	5472 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    5464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5466:	1c5a      	adds	r2, r3, #1
    5468:	637a      	str	r2, [r7, #52]	; 0x34
    546a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    546c:	4413      	add	r3, r2
    546e:	2220      	movs	r2, #32
    5470:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    5472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5474:	f003 0302 	and.w	r3, r3, #2
    5478:	2b00      	cmp	r3, #0
    547a:	d116      	bne.n	54aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    547c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    547e:	f003 0301 	and.w	r3, r3, #1
    5482:	2b00      	cmp	r3, #0
    5484:	d111      	bne.n	54aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    5486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5488:	61fb      	str	r3, [r7, #28]
    548a:	69fa      	ldr	r2, [r7, #28]
    548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    548e:	429a      	cmp	r2, r3
    5490:	d20b      	bcs.n	54aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    5492:	687a      	ldr	r2, [r7, #4]
    5494:	1c53      	adds	r3, r2, #1
    5496:	607b      	str	r3, [r7, #4]
    5498:	68fc      	ldr	r4, [r7, #12]
    549a:	683b      	ldr	r3, [r7, #0]
    549c:	68b9      	ldr	r1, [r7, #8]
    549e:	2020      	movs	r0, #32
    54a0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    54a2:	69fb      	ldr	r3, [r7, #28]
    54a4:	3301      	adds	r3, #1
    54a6:	61fb      	str	r3, [r7, #28]
    54a8:	e7ef      	b.n	548a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    54aa:	2300      	movs	r3, #0
    54ac:	61bb      	str	r3, [r7, #24]
    54ae:	69ba      	ldr	r2, [r7, #24]
    54b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54b2:	429a      	cmp	r2, r3
    54b4:	d211      	bcs.n	54da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    54b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    54b8:	69bb      	ldr	r3, [r7, #24]
    54ba:	1ad3      	subs	r3, r2, r3
    54bc:	3b01      	subs	r3, #1
    54be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    54c0:	4413      	add	r3, r2
    54c2:	7818      	ldrb	r0, [r3, #0]
    54c4:	687a      	ldr	r2, [r7, #4]
    54c6:	1c53      	adds	r3, r2, #1
    54c8:	607b      	str	r3, [r7, #4]
    54ca:	68fc      	ldr	r4, [r7, #12]
    54cc:	683b      	ldr	r3, [r7, #0]
    54ce:	68b9      	ldr	r1, [r7, #8]
    54d0:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    54d2:	69bb      	ldr	r3, [r7, #24]
    54d4:	3301      	adds	r3, #1
    54d6:	61bb      	str	r3, [r7, #24]
    54d8:	e7e9      	b.n	54ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    54da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    54dc:	f003 0302 	and.w	r3, r3, #2
    54e0:	2b00      	cmp	r3, #0
    54e2:	d00e      	beq.n	5502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    54e4:	687a      	ldr	r2, [r7, #4]
    54e6:	697b      	ldr	r3, [r7, #20]
    54e8:	1ad3      	subs	r3, r2, r3
    54ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    54ec:	429a      	cmp	r2, r3
    54ee:	d908      	bls.n	5502 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    54f0:	687a      	ldr	r2, [r7, #4]
    54f2:	1c53      	adds	r3, r2, #1
    54f4:	607b      	str	r3, [r7, #4]
    54f6:	68fc      	ldr	r4, [r7, #12]
    54f8:	683b      	ldr	r3, [r7, #0]
    54fa:	68b9      	ldr	r1, [r7, #8]
    54fc:	2020      	movs	r0, #32
    54fe:	47a0      	blx	r4
    while (idx - start_idx < width) {
    5500:	e7f0      	b.n	54e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    5502:	687b      	ldr	r3, [r7, #4]
}
    5504:	4618      	mov	r0, r3
    5506:	3724      	adds	r7, #36	; 0x24
    5508:	46bd      	mov	sp, r7
    550a:	bd90      	pop	{r4, r7, pc}

0000550c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    550c:	b580      	push	{r7, lr}
    550e:	b096      	sub	sp, #88	; 0x58
    5510:	af08      	add	r7, sp, #32
    5512:	60f8      	str	r0, [r7, #12]
    5514:	60b9      	str	r1, [r7, #8]
    5516:	607a      	str	r2, [r7, #4]
    5518:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    551a:	2300      	movs	r3, #0
    551c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5520:	2b00      	cmp	r3, #0
    5522:	d103      	bne.n	552c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    5524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5526:	f023 0310 	bic.w	r3, r3, #16
    552a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    552e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5532:	2b00      	cmp	r3, #0
    5534:	d002      	beq.n	553c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    5536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5538:	2b00      	cmp	r3, #0
    553a:	d034      	beq.n	55a6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    553c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    553e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    5540:	fbb3 f2f2 	udiv	r2, r3, r2
    5544:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    5546:	fb01 f202 	mul.w	r2, r1, r2
    554a:	1a9b      	subs	r3, r3, r2
    554c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    5550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5554:	2b09      	cmp	r3, #9
    5556:	d804      	bhi.n	5562 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    5558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    555c:	3330      	adds	r3, #48	; 0x30
    555e:	b2da      	uxtb	r2, r3
    5560:	e00d      	b.n	557e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    5562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5564:	f003 0320 	and.w	r3, r3, #32
    5568:	2b00      	cmp	r3, #0
    556a:	d001      	beq.n	5570 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    556c:	2241      	movs	r2, #65	; 0x41
    556e:	e000      	b.n	5572 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    5570:	2261      	movs	r2, #97	; 0x61
    5572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5576:	4413      	add	r3, r2
    5578:	b2db      	uxtb	r3, r3
    557a:	3b0a      	subs	r3, #10
    557c:	b2da      	uxtb	r2, r3
    557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5580:	1c59      	adds	r1, r3, #1
    5582:	6379      	str	r1, [r7, #52]	; 0x34
    5584:	f107 0138 	add.w	r1, r7, #56	; 0x38
    5588:	440b      	add	r3, r1
    558a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    558e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5592:	fbb2 f3f3 	udiv	r3, r2, r3
    5596:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    5598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    559a:	2b00      	cmp	r3, #0
    559c:	d003      	beq.n	55a6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    55a0:	2b1f      	cmp	r3, #31
    55a2:	d800      	bhi.n	55a6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    55a4:	e7ca      	b.n	553c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    55a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    55a8:	9306      	str	r3, [sp, #24]
    55aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    55ac:	9305      	str	r3, [sp, #20]
    55ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    55b0:	9304      	str	r3, [sp, #16]
    55b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    55b4:	9303      	str	r3, [sp, #12]
    55b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    55ba:	9302      	str	r3, [sp, #8]
    55bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    55be:	9301      	str	r3, [sp, #4]
    55c0:	f107 0310 	add.w	r3, r7, #16
    55c4:	9300      	str	r3, [sp, #0]
    55c6:	683b      	ldr	r3, [r7, #0]
    55c8:	687a      	ldr	r2, [r7, #4]
    55ca:	68b9      	ldr	r1, [r7, #8]
    55cc:	68f8      	ldr	r0, [r7, #12]
    55ce:	f7ff fe7c 	bl	52ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    55d2:	4603      	mov	r3, r0
}
    55d4:	4618      	mov	r0, r3
    55d6:	3738      	adds	r7, #56	; 0x38
    55d8:	46bd      	mov	sp, r7
    55da:	bd80      	pop	{r7, pc}

000055dc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    55dc:	b590      	push	{r4, r7, lr}
    55de:	b097      	sub	sp, #92	; 0x5c
    55e0:	af08      	add	r7, sp, #32
    55e2:	60f8      	str	r0, [r7, #12]
    55e4:	60b9      	str	r1, [r7, #8]
    55e6:	607a      	str	r2, [r7, #4]
    55e8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    55ea:	2300      	movs	r3, #0
    55ec:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    55ee:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    55f2:	4323      	orrs	r3, r4
    55f4:	d103      	bne.n	55fe <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    55f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    55f8:	f023 0310 	bic.w	r3, r3, #16
    55fc:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    55fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5604:	2b00      	cmp	r3, #0
    5606:	d003      	beq.n	5610 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    5608:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    560c:	4323      	orrs	r3, r4
    560e:	d03a      	beq.n	5686 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    5610:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    5614:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    5618:	f002 fb96 	bl	7d48 <__aeabi_uldivmod>
    561c:	461c      	mov	r4, r3
    561e:	4613      	mov	r3, r2
    5620:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    5624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5628:	2b09      	cmp	r3, #9
    562a:	d804      	bhi.n	5636 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    562c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5630:	3330      	adds	r3, #48	; 0x30
    5632:	b2da      	uxtb	r2, r3
    5634:	e00d      	b.n	5652 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    5636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5638:	f003 0320 	and.w	r3, r3, #32
    563c:	2b00      	cmp	r3, #0
    563e:	d001      	beq.n	5644 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    5640:	2241      	movs	r2, #65	; 0x41
    5642:	e000      	b.n	5646 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    5644:	2261      	movs	r2, #97	; 0x61
    5646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    564a:	4413      	add	r3, r2
    564c:	b2db      	uxtb	r3, r3
    564e:	3b0a      	subs	r3, #10
    5650:	b2da      	uxtb	r2, r3
    5652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5654:	1c59      	adds	r1, r3, #1
    5656:	6379      	str	r1, [r7, #52]	; 0x34
    5658:	f107 0138 	add.w	r1, r7, #56	; 0x38
    565c:	440b      	add	r3, r1
    565e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    5662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    5666:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    566a:	f002 fb6d 	bl	7d48 <__aeabi_uldivmod>
    566e:	4603      	mov	r3, r0
    5670:	460c      	mov	r4, r1
    5672:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    5676:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    567a:	4323      	orrs	r3, r4
    567c:	d003      	beq.n	5686 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5680:	2b1f      	cmp	r3, #31
    5682:	d800      	bhi.n	5686 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    5684:	e7c4      	b.n	5610 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    5686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5688:	6eba      	ldr	r2, [r7, #104]	; 0x68
    568a:	9206      	str	r2, [sp, #24]
    568c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    568e:	9205      	str	r2, [sp, #20]
    5690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5692:	9204      	str	r2, [sp, #16]
    5694:	9303      	str	r3, [sp, #12]
    5696:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    569a:	9302      	str	r3, [sp, #8]
    569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    569e:	9301      	str	r3, [sp, #4]
    56a0:	f107 0310 	add.w	r3, r7, #16
    56a4:	9300      	str	r3, [sp, #0]
    56a6:	683b      	ldr	r3, [r7, #0]
    56a8:	687a      	ldr	r2, [r7, #4]
    56aa:	68b9      	ldr	r1, [r7, #8]
    56ac:	68f8      	ldr	r0, [r7, #12]
    56ae:	f7ff fe0c 	bl	52ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    56b2:	4603      	mov	r3, r0
}
    56b4:	4618      	mov	r0, r3
    56b6:	373c      	adds	r7, #60	; 0x3c
    56b8:	46bd      	mov	sp, r7
    56ba:	bd90      	pop	{r4, r7, pc}

000056bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    56bc:	b590      	push	{r4, r7, lr}
    56be:	b09b      	sub	sp, #108	; 0x6c
    56c0:	af00      	add	r7, sp, #0
    56c2:	6178      	str	r0, [r7, #20]
    56c4:	6139      	str	r1, [r7, #16]
    56c6:	60fa      	str	r2, [r7, #12]
    56c8:	60bb      	str	r3, [r7, #8]
    56ca:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    56ce:	68fb      	ldr	r3, [r7, #12]
    56d0:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    56d2:	e9d7 0100 	ldrd	r0, r1, [r7]
    56d6:	f002 f9d9 	bl	7a8c <__aeabi_d2f>
    56da:	4603      	mov	r3, r0
    56dc:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    56de:	2300      	movs	r3, #0
    56e0:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    56e2:	f04f 0300 	mov.w	r3, #0
    56e6:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    56e8:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    56ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    56ee:	2300      	movs	r3, #0
    56f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    56f4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    56f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    56fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5700:	d50a      	bpl.n	5718 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    5702:	2301      	movs	r3, #1
    5704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    5708:	ed9f 7aab 	vldr	s14, [pc, #684]	; 59b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    570c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5710:	ee77 7a67 	vsub.f32	s15, s14, s15
    5714:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    5718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5720:	2b00      	cmp	r3, #0
    5722:	d101      	bne.n	5728 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    5724:	2306      	movs	r3, #6
    5726:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    5728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    572a:	2b1f      	cmp	r3, #31
    572c:	d80f      	bhi.n	574e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    572e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5730:	2b09      	cmp	r3, #9
    5732:	d90c      	bls.n	574e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    5734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5736:	1c5a      	adds	r2, r3, #1
    5738:	663a      	str	r2, [r7, #96]	; 0x60
    573a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    573e:	4413      	add	r3, r2
    5740:	2230      	movs	r2, #48	; 0x30
    5742:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    5746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5748:	3b01      	subs	r3, #1
    574a:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    574c:	e7ec      	b.n	5728 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    574e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5756:	ee17 3a90 	vmov	r3, s15
    575a:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    575c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    575e:	ee07 3a90 	vmov	s15, r3
    5762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5766:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    576a:	ee37 7a67 	vsub.f32	s14, s14, s15
    576e:	4a93      	ldr	r2, [pc, #588]	; (59bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    5770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5772:	009b      	lsls	r3, r3, #2
    5774:	4413      	add	r3, r2
    5776:	edd3 7a00 	vldr	s15, [r3]
    577a:	ee67 7a27 	vmul.f32	s15, s14, s15
    577e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    5782:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    578a:	ee17 3a90 	vmov	r3, s15
    578e:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    5790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5792:	ee07 3a90 	vmov	s15, r3
    5796:	eef8 7a67 	vcvt.f32.u32	s15, s15
    579a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    579e:	ee77 7a67 	vsub.f32	s15, s14, s15
    57a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    57a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    57aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    57ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    57b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57b6:	dd18      	ble.n	57ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    57b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    57ba:	3301      	adds	r3, #1
    57bc:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    57be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    57c0:	ee07 3a90 	vmov	s15, r3
    57c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    57c8:	4a7c      	ldr	r2, [pc, #496]	; (59bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    57ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    57cc:	009b      	lsls	r3, r3, #2
    57ce:	4413      	add	r3, r2
    57d0:	edd3 7a00 	vldr	s15, [r3]
    57d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    57d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57dc:	db19      	blt.n	5812 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    57de:	2300      	movs	r3, #0
    57e0:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    57e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    57e4:	3301      	adds	r3, #1
    57e6:	65bb      	str	r3, [r7, #88]	; 0x58
    57e8:	e013      	b.n	5812 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    57ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    57ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    57f2:	eef4 7a47 	vcmp.f32	s15, s14
    57f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57fa:	d10a      	bne.n	5812 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    57fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    57fe:	2b00      	cmp	r3, #0
    5800:	d004      	beq.n	580c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    5802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5804:	f003 0301 	and.w	r3, r3, #1
    5808:	2b00      	cmp	r3, #0
    580a:	d002      	beq.n	5812 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    580c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    580e:	3301      	adds	r3, #1
    5810:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    5812:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5816:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 59c0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    581a:	eef4 7ac7 	vcmpe.f32	s15, s14
    581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5822:	dd01      	ble.n	5828 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    5824:	2300      	movs	r3, #0
    5826:	e166      	b.n	5af6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    5828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    582a:	2b00      	cmp	r3, #0
    582c:	d129      	bne.n	5882 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    582e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5830:	ee07 3a90 	vmov	s15, r3
    5834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5838:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    583c:	ee77 7a67 	vsub.f32	s15, s14, s15
    5840:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    5844:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    5848:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    584c:	eef4 7ac7 	vcmpe.f32	s15, s14
    5850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5854:	dd03      	ble.n	585e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    5856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5858:	3301      	adds	r3, #1
    585a:	65bb      	str	r3, [r7, #88]	; 0x58
    585c:	e062      	b.n	5924 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    585e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    5862:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    5866:	eef4 7a47 	vcmp.f32	s15, s14
    586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    586e:	d159      	bne.n	5924 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    5870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5872:	f003 0301 	and.w	r3, r3, #1
    5876:	2b00      	cmp	r3, #0
    5878:	d054      	beq.n	5924 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    587a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    587c:	3301      	adds	r3, #1
    587e:	65bb      	str	r3, [r7, #88]	; 0x58
    5880:	e050      	b.n	5924 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    5882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5884:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    5886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5888:	2b1f      	cmp	r3, #31
    588a:	d828      	bhi.n	58de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    588e:	3b01      	subs	r3, #1
    5890:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    5892:	6d79      	ldr	r1, [r7, #84]	; 0x54
    5894:	4b4b      	ldr	r3, [pc, #300]	; (59c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    5896:	fba3 2301 	umull	r2, r3, r3, r1
    589a:	08da      	lsrs	r2, r3, #3
    589c:	4613      	mov	r3, r2
    589e:	009b      	lsls	r3, r3, #2
    58a0:	4413      	add	r3, r2
    58a2:	005b      	lsls	r3, r3, #1
    58a4:	1aca      	subs	r2, r1, r3
    58a6:	b2d3      	uxtb	r3, r2
    58a8:	3330      	adds	r3, #48	; 0x30
    58aa:	b2d9      	uxtb	r1, r3
    58ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58ae:	1c5a      	adds	r2, r3, #1
    58b0:	663a      	str	r2, [r7, #96]	; 0x60
    58b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    58b6:	4413      	add	r3, r2
    58b8:	460a      	mov	r2, r1
    58ba:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    58be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    58c0:	4a40      	ldr	r2, [pc, #256]	; (59c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    58c2:	fba2 2303 	umull	r2, r3, r2, r3
    58c6:	08db      	lsrs	r3, r3, #3
    58c8:	657b      	str	r3, [r7, #84]	; 0x54
    58ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    58cc:	2b00      	cmp	r3, #0
    58ce:	bf0c      	ite	eq
    58d0:	2301      	moveq	r3, #1
    58d2:	2300      	movne	r3, #0
    58d4:	b2db      	uxtb	r3, r3
    58d6:	2b00      	cmp	r3, #0
    58d8:	d100      	bne.n	58dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    58da:	e7d4      	b.n	5886 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    58dc:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    58de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58e0:	2b1f      	cmp	r3, #31
    58e2:	d806      	bhi.n	58f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    58e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    58e6:	1e5a      	subs	r2, r3, #1
    58e8:	653a      	str	r2, [r7, #80]	; 0x50
    58ea:	2b00      	cmp	r3, #0
    58ec:	d001      	beq.n	58f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    58ee:	2301      	movs	r3, #1
    58f0:	e000      	b.n	58f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    58f2:	2300      	movs	r3, #0
    58f4:	2b00      	cmp	r3, #0
    58f6:	d009      	beq.n	590c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    58f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58fa:	1c5a      	adds	r2, r3, #1
    58fc:	663a      	str	r2, [r7, #96]	; 0x60
    58fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5902:	4413      	add	r3, r2
    5904:	2230      	movs	r2, #48	; 0x30
    5906:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    590a:	e7e8      	b.n	58de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    590c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    590e:	2b1f      	cmp	r3, #31
    5910:	d808      	bhi.n	5924 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    5912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5914:	1c5a      	adds	r2, r3, #1
    5916:	663a      	str	r2, [r7, #96]	; 0x60
    5918:	f107 0268 	add.w	r2, r7, #104	; 0x68
    591c:	4413      	add	r3, r2
    591e:	222e      	movs	r2, #46	; 0x2e
    5920:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    5924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5926:	2b1f      	cmp	r3, #31
    5928:	d829      	bhi.n	597e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    592a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    592c:	4b26      	ldr	r3, [pc, #152]	; (59c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    592e:	fb83 1302 	smull	r1, r3, r3, r2
    5932:	1099      	asrs	r1, r3, #2
    5934:	17d3      	asrs	r3, r2, #31
    5936:	1ac9      	subs	r1, r1, r3
    5938:	460b      	mov	r3, r1
    593a:	009b      	lsls	r3, r3, #2
    593c:	440b      	add	r3, r1
    593e:	005b      	lsls	r3, r3, #1
    5940:	1ad1      	subs	r1, r2, r3
    5942:	b2cb      	uxtb	r3, r1
    5944:	3330      	adds	r3, #48	; 0x30
    5946:	b2d9      	uxtb	r1, r3
    5948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    594a:	1c5a      	adds	r2, r3, #1
    594c:	663a      	str	r2, [r7, #96]	; 0x60
    594e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5952:	4413      	add	r3, r2
    5954:	460a      	mov	r2, r1
    5956:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    595a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    595c:	4a1a      	ldr	r2, [pc, #104]	; (59c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    595e:	fb82 1203 	smull	r1, r2, r2, r3
    5962:	1092      	asrs	r2, r2, #2
    5964:	17db      	asrs	r3, r3, #31
    5966:	1ad3      	subs	r3, r2, r3
    5968:	65bb      	str	r3, [r7, #88]	; 0x58
    596a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    596c:	2b00      	cmp	r3, #0
    596e:	bf0c      	ite	eq
    5970:	2301      	moveq	r3, #1
    5972:	2300      	movne	r3, #0
    5974:	b2db      	uxtb	r3, r3
    5976:	2b00      	cmp	r3, #0
    5978:	d100      	bne.n	597c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    597a:	e7d3      	b.n	5924 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    597c:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    597e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5982:	f003 0302 	and.w	r3, r3, #2
    5986:	2b00      	cmp	r3, #0
    5988:	d120      	bne.n	59cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    598a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    598e:	f003 0301 	and.w	r3, r3, #1
    5992:	2b00      	cmp	r3, #0
    5994:	d01a      	beq.n	59cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    5996:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    599a:	429a      	cmp	r2, r3
    599c:	d216      	bcs.n	59cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    599e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    59a0:	2b1f      	cmp	r3, #31
    59a2:	d813      	bhi.n	59cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    59a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    59a6:	1c5a      	adds	r2, r3, #1
    59a8:	663a      	str	r2, [r7, #96]	; 0x60
    59aa:	f107 0268 	add.w	r2, r7, #104	; 0x68
    59ae:	4413      	add	r3, r2
    59b0:	2230      	movs	r2, #48	; 0x30
    59b2:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    59b6:	e7e2      	b.n	597e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    59b8:	00000000 	.word	0x00000000
    59bc:	0000a808 	.word	0x0000a808
    59c0:	4f000000 	.word	0x4f000000
    59c4:	cccccccd 	.word	0xcccccccd
    59c8:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    59cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    59ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    59d0:	429a      	cmp	r2, r3
    59d2:	d112      	bne.n	59fa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    59d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    59d8:	2b00      	cmp	r3, #0
    59da:	d10b      	bne.n	59f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    59dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    59e0:	f003 0304 	and.w	r3, r3, #4
    59e4:	2b00      	cmp	r3, #0
    59e6:	d105      	bne.n	59f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    59e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    59ec:	f003 0308 	and.w	r3, r3, #8
    59f0:	2b00      	cmp	r3, #0
    59f2:	d002      	beq.n	59fa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    59f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    59f6:	3b01      	subs	r3, #1
    59f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    59fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    59fc:	2b1f      	cmp	r3, #31
    59fe:	d82c      	bhi.n	5a5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    5a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5a04:	2b00      	cmp	r3, #0
    5a06:	d009      	beq.n	5a1c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    5a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a0a:	1c5a      	adds	r2, r3, #1
    5a0c:	663a      	str	r2, [r7, #96]	; 0x60
    5a0e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5a12:	4413      	add	r3, r2
    5a14:	222d      	movs	r2, #45	; 0x2d
    5a16:	f803 2c50 	strb.w	r2, [r3, #-80]
    5a1a:	e01e      	b.n	5a5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    5a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a20:	f003 0304 	and.w	r3, r3, #4
    5a24:	2b00      	cmp	r3, #0
    5a26:	d009      	beq.n	5a3c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    5a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a2a:	1c5a      	adds	r2, r3, #1
    5a2c:	663a      	str	r2, [r7, #96]	; 0x60
    5a2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5a32:	4413      	add	r3, r2
    5a34:	222b      	movs	r2, #43	; 0x2b
    5a36:	f803 2c50 	strb.w	r2, [r3, #-80]
    5a3a:	e00e      	b.n	5a5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    5a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a40:	f003 0308 	and.w	r3, r3, #8
    5a44:	2b00      	cmp	r3, #0
    5a46:	d008      	beq.n	5a5a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    5a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a4a:	1c5a      	adds	r2, r3, #1
    5a4c:	663a      	str	r2, [r7, #96]	; 0x60
    5a4e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5a52:	4413      	add	r3, r2
    5a54:	2220      	movs	r2, #32
    5a56:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    5a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a5e:	f003 0302 	and.w	r3, r3, #2
    5a62:	2b00      	cmp	r3, #0
    5a64:	d117      	bne.n	5a96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    5a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5a6a:	f003 0301 	and.w	r3, r3, #1
    5a6e:	2b00      	cmp	r3, #0
    5a70:	d111      	bne.n	5a96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    5a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a74:	64fb      	str	r3, [r7, #76]	; 0x4c
    5a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5a78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5a7a:	429a      	cmp	r2, r3
    5a7c:	d20b      	bcs.n	5a96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    5a7e:	68fa      	ldr	r2, [r7, #12]
    5a80:	1c53      	adds	r3, r2, #1
    5a82:	60fb      	str	r3, [r7, #12]
    5a84:	697c      	ldr	r4, [r7, #20]
    5a86:	68bb      	ldr	r3, [r7, #8]
    5a88:	6939      	ldr	r1, [r7, #16]
    5a8a:	2020      	movs	r0, #32
    5a8c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    5a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5a90:	3301      	adds	r3, #1
    5a92:	64fb      	str	r3, [r7, #76]	; 0x4c
    5a94:	e7ef      	b.n	5a76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    5a96:	2300      	movs	r3, #0
    5a98:	64bb      	str	r3, [r7, #72]	; 0x48
    5a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    5a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5a9e:	429a      	cmp	r2, r3
    5aa0:	d213      	bcs.n	5aca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    5aa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5aa6:	1ad3      	subs	r3, r2, r3
    5aa8:	3b01      	subs	r3, #1
    5aaa:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5aae:	4413      	add	r3, r2
    5ab0:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    5ab4:	68fa      	ldr	r2, [r7, #12]
    5ab6:	1c53      	adds	r3, r2, #1
    5ab8:	60fb      	str	r3, [r7, #12]
    5aba:	697c      	ldr	r4, [r7, #20]
    5abc:	68bb      	ldr	r3, [r7, #8]
    5abe:	6939      	ldr	r1, [r7, #16]
    5ac0:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    5ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5ac4:	3301      	adds	r3, #1
    5ac6:	64bb      	str	r3, [r7, #72]	; 0x48
    5ac8:	e7e7      	b.n	5a9a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    5aca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5ace:	f003 0302 	and.w	r3, r3, #2
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d00e      	beq.n	5af4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    5ad6:	68fa      	ldr	r2, [r7, #12]
    5ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5ada:	1ad3      	subs	r3, r2, r3
    5adc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    5ade:	429a      	cmp	r2, r3
    5ae0:	d908      	bls.n	5af4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    5ae2:	68fa      	ldr	r2, [r7, #12]
    5ae4:	1c53      	adds	r3, r2, #1
    5ae6:	60fb      	str	r3, [r7, #12]
    5ae8:	697c      	ldr	r4, [r7, #20]
    5aea:	68bb      	ldr	r3, [r7, #8]
    5aec:	6939      	ldr	r1, [r7, #16]
    5aee:	2020      	movs	r0, #32
    5af0:	47a0      	blx	r4
    while (idx - start_idx < width) {
    5af2:	e7f0      	b.n	5ad6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    5af4:	68fb      	ldr	r3, [r7, #12]
}
    5af6:	4618      	mov	r0, r3
    5af8:	376c      	adds	r7, #108	; 0x6c
    5afa:	46bd      	mov	sp, r7
    5afc:	bd90      	pop	{r4, r7, pc}
    5afe:	bf00      	nop

00005b00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    5b00:	b5b0      	push	{r4, r5, r7, lr}
    5b02:	b0a0      	sub	sp, #128	; 0x80
    5b04:	af0a      	add	r7, sp, #40	; 0x28
    5b06:	60f8      	str	r0, [r7, #12]
    5b08:	60b9      	str	r1, [r7, #8]
    5b0a:	607a      	str	r2, [r7, #4]
    5b0c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    5b0e:	2300      	movs	r3, #0
    5b10:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    5b12:	68bb      	ldr	r3, [r7, #8]
    5b14:	2b00      	cmp	r3, #0
    5b16:	d101      	bne.n	5b1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    5b18:	4ba2      	ldr	r3, [pc, #648]	; (5da4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    5b1a:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    5b1c:	683b      	ldr	r3, [r7, #0]
    5b1e:	781b      	ldrb	r3, [r3, #0]
    5b20:	2b00      	cmp	r3, #0
    5b22:	f000 8445 	beq.w	63b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    5b26:	683b      	ldr	r3, [r7, #0]
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2b25      	cmp	r3, #37	; 0x25
    5b2c:	d00d      	beq.n	5b4a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    5b2e:	683b      	ldr	r3, [r7, #0]
    5b30:	7818      	ldrb	r0, [r3, #0]
    5b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5b34:	1c53      	adds	r3, r2, #1
    5b36:	647b      	str	r3, [r7, #68]	; 0x44
    5b38:	68fc      	ldr	r4, [r7, #12]
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	68b9      	ldr	r1, [r7, #8]
    5b3e:	47a0      	blx	r4
      format++;
    5b40:	683b      	ldr	r3, [r7, #0]
    5b42:	3301      	adds	r3, #1
    5b44:	603b      	str	r3, [r7, #0]
      continue;
    5b46:	f000 bc31 	b.w	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    5b4a:	683b      	ldr	r3, [r7, #0]
    5b4c:	3301      	adds	r3, #1
    5b4e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    5b50:	2300      	movs	r3, #0
    5b52:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    5b54:	683b      	ldr	r3, [r7, #0]
    5b56:	781b      	ldrb	r3, [r3, #0]
    5b58:	3b20      	subs	r3, #32
    5b5a:	2b10      	cmp	r3, #16
    5b5c:	d856      	bhi.n	5c0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    5b5e:	a201      	add	r2, pc, #4	; (adr r2, 5b64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    5b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5b64:	00005be5 	.word	0x00005be5
    5b68:	00005c0d 	.word	0x00005c0d
    5b6c:	00005c0d 	.word	0x00005c0d
    5b70:	00005bf9 	.word	0x00005bf9
    5b74:	00005c0d 	.word	0x00005c0d
    5b78:	00005c0d 	.word	0x00005c0d
    5b7c:	00005c0d 	.word	0x00005c0d
    5b80:	00005c0d 	.word	0x00005c0d
    5b84:	00005c0d 	.word	0x00005c0d
    5b88:	00005c0d 	.word	0x00005c0d
    5b8c:	00005c0d 	.word	0x00005c0d
    5b90:	00005bd1 	.word	0x00005bd1
    5b94:	00005c0d 	.word	0x00005c0d
    5b98:	00005bbd 	.word	0x00005bbd
    5b9c:	00005c0d 	.word	0x00005c0d
    5ba0:	00005c0d 	.word	0x00005c0d
    5ba4:	00005ba9 	.word	0x00005ba9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    5ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5baa:	f043 0301 	orr.w	r3, r3, #1
    5bae:	657b      	str	r3, [r7, #84]	; 0x54
    5bb0:	683b      	ldr	r3, [r7, #0]
    5bb2:	3301      	adds	r3, #1
    5bb4:	603b      	str	r3, [r7, #0]
    5bb6:	2301      	movs	r3, #1
    5bb8:	64bb      	str	r3, [r7, #72]	; 0x48
    5bba:	e02a      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    5bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bbe:	f043 0302 	orr.w	r3, r3, #2
    5bc2:	657b      	str	r3, [r7, #84]	; 0x54
    5bc4:	683b      	ldr	r3, [r7, #0]
    5bc6:	3301      	adds	r3, #1
    5bc8:	603b      	str	r3, [r7, #0]
    5bca:	2301      	movs	r3, #1
    5bcc:	64bb      	str	r3, [r7, #72]	; 0x48
    5bce:	e020      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    5bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bd2:	f043 0304 	orr.w	r3, r3, #4
    5bd6:	657b      	str	r3, [r7, #84]	; 0x54
    5bd8:	683b      	ldr	r3, [r7, #0]
    5bda:	3301      	adds	r3, #1
    5bdc:	603b      	str	r3, [r7, #0]
    5bde:	2301      	movs	r3, #1
    5be0:	64bb      	str	r3, [r7, #72]	; 0x48
    5be2:	e016      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    5be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5be6:	f043 0308 	orr.w	r3, r3, #8
    5bea:	657b      	str	r3, [r7, #84]	; 0x54
    5bec:	683b      	ldr	r3, [r7, #0]
    5bee:	3301      	adds	r3, #1
    5bf0:	603b      	str	r3, [r7, #0]
    5bf2:	2301      	movs	r3, #1
    5bf4:	64bb      	str	r3, [r7, #72]	; 0x48
    5bf6:	e00c      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    5bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bfa:	f043 0310 	orr.w	r3, r3, #16
    5bfe:	657b      	str	r3, [r7, #84]	; 0x54
    5c00:	683b      	ldr	r3, [r7, #0]
    5c02:	3301      	adds	r3, #1
    5c04:	603b      	str	r3, [r7, #0]
    5c06:	2301      	movs	r3, #1
    5c08:	64bb      	str	r3, [r7, #72]	; 0x48
    5c0a:	e002      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    5c0c:	2300      	movs	r3, #0
    5c0e:	64bb      	str	r3, [r7, #72]	; 0x48
    5c10:	bf00      	nop
      }
    } while (n);
    5c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5c14:	2b00      	cmp	r3, #0
    5c16:	d000      	beq.n	5c1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    5c18:	e79c      	b.n	5b54 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    5c1a:	2300      	movs	r3, #0
    5c1c:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    5c1e:	683b      	ldr	r3, [r7, #0]
    5c20:	781b      	ldrb	r3, [r3, #0]
    5c22:	4618      	mov	r0, r3
    5c24:	f7ff fb19 	bl	525a <_is_digit(char)>
    5c28:	4603      	mov	r3, r0
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d005      	beq.n	5c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    5c2e:	463b      	mov	r3, r7
    5c30:	4618      	mov	r0, r3
    5c32:	f7ff fb26 	bl	5282 <_atoi(char const**)>
    5c36:	6538      	str	r0, [r7, #80]	; 0x50
    5c38:	e018      	b.n	5c6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    5c3a:	683b      	ldr	r3, [r7, #0]
    5c3c:	781b      	ldrb	r3, [r3, #0]
    5c3e:	2b2a      	cmp	r3, #42	; 0x2a
    5c40:	d114      	bne.n	5c6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    5c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5c44:	1d1a      	adds	r2, r3, #4
    5c46:	66ba      	str	r2, [r7, #104]	; 0x68
    5c48:	681b      	ldr	r3, [r3, #0]
    5c4a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    5c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c4e:	2b00      	cmp	r3, #0
    5c50:	da07      	bge.n	5c62 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    5c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c54:	f043 0302 	orr.w	r3, r3, #2
    5c58:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    5c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c5c:	425b      	negs	r3, r3
    5c5e:	653b      	str	r3, [r7, #80]	; 0x50
    5c60:	e001      	b.n	5c66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    5c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c64:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    5c66:	683b      	ldr	r3, [r7, #0]
    5c68:	3301      	adds	r3, #1
    5c6a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    5c6c:	2300      	movs	r3, #0
    5c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    5c70:	683b      	ldr	r3, [r7, #0]
    5c72:	781b      	ldrb	r3, [r3, #0]
    5c74:	2b2e      	cmp	r3, #46	; 0x2e
    5c76:	d124      	bne.n	5cc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    5c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5c7e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    5c80:	683b      	ldr	r3, [r7, #0]
    5c82:	3301      	adds	r3, #1
    5c84:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    5c86:	683b      	ldr	r3, [r7, #0]
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	4618      	mov	r0, r3
    5c8c:	f7ff fae5 	bl	525a <_is_digit(char)>
    5c90:	4603      	mov	r3, r0
    5c92:	2b00      	cmp	r3, #0
    5c94:	d005      	beq.n	5ca2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    5c96:	463b      	mov	r3, r7
    5c98:	4618      	mov	r0, r3
    5c9a:	f7ff faf2 	bl	5282 <_atoi(char const**)>
    5c9e:	64f8      	str	r0, [r7, #76]	; 0x4c
    5ca0:	e00f      	b.n	5cc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    5ca2:	683b      	ldr	r3, [r7, #0]
    5ca4:	781b      	ldrb	r3, [r3, #0]
    5ca6:	2b2a      	cmp	r3, #42	; 0x2a
    5ca8:	d10b      	bne.n	5cc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    5caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5cac:	1d1a      	adds	r2, r3, #4
    5cae:	66ba      	str	r2, [r7, #104]	; 0x68
    5cb0:	681b      	ldr	r3, [r3, #0]
    5cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    5cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5cba:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    5cbc:	683b      	ldr	r3, [r7, #0]
    5cbe:	3301      	adds	r3, #1
    5cc0:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    5cc2:	683b      	ldr	r3, [r7, #0]
    5cc4:	781b      	ldrb	r3, [r3, #0]
    5cc6:	3b68      	subs	r3, #104	; 0x68
    5cc8:	2b12      	cmp	r3, #18
    5cca:	d867      	bhi.n	5d9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    5ccc:	a201      	add	r2, pc, #4	; (adr r2, 5cd4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    5cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5cd2:	bf00      	nop
    5cd4:	00005d47 	.word	0x00005d47
    5cd8:	00005d9d 	.word	0x00005d9d
    5cdc:	00005d7d 	.word	0x00005d7d
    5ce0:	00005d9d 	.word	0x00005d9d
    5ce4:	00005d21 	.word	0x00005d21
    5ce8:	00005d9d 	.word	0x00005d9d
    5cec:	00005d9d 	.word	0x00005d9d
    5cf0:	00005d9d 	.word	0x00005d9d
    5cf4:	00005d9d 	.word	0x00005d9d
    5cf8:	00005d9d 	.word	0x00005d9d
    5cfc:	00005d9d 	.word	0x00005d9d
    5d00:	00005d9d 	.word	0x00005d9d
    5d04:	00005d6d 	.word	0x00005d6d
    5d08:	00005d9d 	.word	0x00005d9d
    5d0c:	00005d9d 	.word	0x00005d9d
    5d10:	00005d9d 	.word	0x00005d9d
    5d14:	00005d9d 	.word	0x00005d9d
    5d18:	00005d9d 	.word	0x00005d9d
    5d1c:	00005d8d 	.word	0x00005d8d
      case 'l' :
        flags |= FLAGS_LONG;
    5d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d26:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d28:	683b      	ldr	r3, [r7, #0]
    5d2a:	3301      	adds	r3, #1
    5d2c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    5d2e:	683b      	ldr	r3, [r7, #0]
    5d30:	781b      	ldrb	r3, [r3, #0]
    5d32:	2b6c      	cmp	r3, #108	; 0x6c
    5d34:	d134      	bne.n	5da0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    5d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5d3c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    5d3e:	683b      	ldr	r3, [r7, #0]
    5d40:	3301      	adds	r3, #1
    5d42:	603b      	str	r3, [r7, #0]
        }
        break;
    5d44:	e02c      	b.n	5da0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    5d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5d4c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d4e:	683b      	ldr	r3, [r7, #0]
    5d50:	3301      	adds	r3, #1
    5d52:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    5d54:	683b      	ldr	r3, [r7, #0]
    5d56:	781b      	ldrb	r3, [r3, #0]
    5d58:	2b68      	cmp	r3, #104	; 0x68
    5d5a:	d125      	bne.n	5da8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    5d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d62:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    5d64:	683b      	ldr	r3, [r7, #0]
    5d66:	3301      	adds	r3, #1
    5d68:	603b      	str	r3, [r7, #0]
        }
        break;
    5d6a:	e01d      	b.n	5da8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d72:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d74:	683b      	ldr	r3, [r7, #0]
    5d76:	3301      	adds	r3, #1
    5d78:	603b      	str	r3, [r7, #0]
        break;
    5d7a:	e016      	b.n	5daa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5d82:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d84:	683b      	ldr	r3, [r7, #0]
    5d86:	3301      	adds	r3, #1
    5d88:	603b      	str	r3, [r7, #0]
        break;
    5d8a:	e00e      	b.n	5daa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d92:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5d94:	683b      	ldr	r3, [r7, #0]
    5d96:	3301      	adds	r3, #1
    5d98:	603b      	str	r3, [r7, #0]
        break;
    5d9a:	e006      	b.n	5daa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    5d9c:	bf00      	nop
    5d9e:	e004      	b.n	5daa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    5da0:	bf00      	nop
    5da2:	e002      	b.n	5daa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    5da4:	00005211 	.word	0x00005211
        break;
    5da8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    5daa:	683b      	ldr	r3, [r7, #0]
    5dac:	781b      	ldrb	r3, [r3, #0]
    5dae:	3b25      	subs	r3, #37	; 0x25
    5db0:	2b53      	cmp	r3, #83	; 0x53
    5db2:	f200 82ee 	bhi.w	6392 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    5db6:	a201      	add	r2, pc, #4	; (adr r2, 5dbc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    5db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5dbc:	0000637b 	.word	0x0000637b
    5dc0:	00006393 	.word	0x00006393
    5dc4:	00006393 	.word	0x00006393
    5dc8:	00006393 	.word	0x00006393
    5dcc:	00006393 	.word	0x00006393
    5dd0:	00006393 	.word	0x00006393
    5dd4:	00006393 	.word	0x00006393
    5dd8:	00006393 	.word	0x00006393
    5ddc:	00006393 	.word	0x00006393
    5de0:	00006393 	.word	0x00006393
    5de4:	00006393 	.word	0x00006393
    5de8:	00006393 	.word	0x00006393
    5dec:	00006393 	.word	0x00006393
    5df0:	00006393 	.word	0x00006393
    5df4:	00006393 	.word	0x00006393
    5df8:	00006393 	.word	0x00006393
    5dfc:	00006393 	.word	0x00006393
    5e00:	00006393 	.word	0x00006393
    5e04:	00006393 	.word	0x00006393
    5e08:	00006393 	.word	0x00006393
    5e0c:	00006393 	.word	0x00006393
    5e10:	00006393 	.word	0x00006393
    5e14:	00006393 	.word	0x00006393
    5e18:	00006393 	.word	0x00006393
    5e1c:	00006393 	.word	0x00006393
    5e20:	00006393 	.word	0x00006393
    5e24:	00006393 	.word	0x00006393
    5e28:	00006393 	.word	0x00006393
    5e2c:	00006393 	.word	0x00006393
    5e30:	00006393 	.word	0x00006393
    5e34:	00006393 	.word	0x00006393
    5e38:	00006393 	.word	0x00006393
    5e3c:	00006393 	.word	0x00006393
    5e40:	00006199 	.word	0x00006199
    5e44:	00006393 	.word	0x00006393
    5e48:	00006393 	.word	0x00006393
    5e4c:	00006393 	.word	0x00006393
    5e50:	00006393 	.word	0x00006393
    5e54:	00006393 	.word	0x00006393
    5e58:	00006393 	.word	0x00006393
    5e5c:	00006393 	.word	0x00006393
    5e60:	00006393 	.word	0x00006393
    5e64:	00006393 	.word	0x00006393
    5e68:	00006393 	.word	0x00006393
    5e6c:	00006393 	.word	0x00006393
    5e70:	00006393 	.word	0x00006393
    5e74:	00006393 	.word	0x00006393
    5e78:	00006393 	.word	0x00006393
    5e7c:	00006393 	.word	0x00006393
    5e80:	00006393 	.word	0x00006393
    5e84:	00006393 	.word	0x00006393
    5e88:	00005f0d 	.word	0x00005f0d
    5e8c:	00006393 	.word	0x00006393
    5e90:	00006393 	.word	0x00006393
    5e94:	00006393 	.word	0x00006393
    5e98:	00006393 	.word	0x00006393
    5e9c:	00006393 	.word	0x00006393
    5ea0:	00006393 	.word	0x00006393
    5ea4:	00006393 	.word	0x00006393
    5ea8:	00006393 	.word	0x00006393
    5eac:	00006393 	.word	0x00006393
    5eb0:	00005f0d 	.word	0x00005f0d
    5eb4:	000061d5 	.word	0x000061d5
    5eb8:	00005f0d 	.word	0x00005f0d
    5ebc:	00006393 	.word	0x00006393
    5ec0:	00006199 	.word	0x00006199
    5ec4:	00006393 	.word	0x00006393
    5ec8:	00006393 	.word	0x00006393
    5ecc:	00005f0d 	.word	0x00005f0d
    5ed0:	00006393 	.word	0x00006393
    5ed4:	00006393 	.word	0x00006393
    5ed8:	00006393 	.word	0x00006393
    5edc:	00006393 	.word	0x00006393
    5ee0:	00006393 	.word	0x00006393
    5ee4:	00005f0d 	.word	0x00005f0d
    5ee8:	00006333 	.word	0x00006333
    5eec:	00006393 	.word	0x00006393
    5ef0:	00006393 	.word	0x00006393
    5ef4:	0000625d 	.word	0x0000625d
    5ef8:	00006393 	.word	0x00006393
    5efc:	00005f0d 	.word	0x00005f0d
    5f00:	00006393 	.word	0x00006393
    5f04:	00006393 	.word	0x00006393
    5f08:	00005f0d 	.word	0x00005f0d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    5f0c:	683b      	ldr	r3, [r7, #0]
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	2b78      	cmp	r3, #120	; 0x78
    5f12:	d003      	beq.n	5f1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    5f14:	683b      	ldr	r3, [r7, #0]
    5f16:	781b      	ldrb	r3, [r3, #0]
    5f18:	2b58      	cmp	r3, #88	; 0x58
    5f1a:	d102      	bne.n	5f22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    5f1c:	2310      	movs	r3, #16
    5f1e:	643b      	str	r3, [r7, #64]	; 0x40
    5f20:	e013      	b.n	5f4a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    5f22:	683b      	ldr	r3, [r7, #0]
    5f24:	781b      	ldrb	r3, [r3, #0]
    5f26:	2b6f      	cmp	r3, #111	; 0x6f
    5f28:	d102      	bne.n	5f30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    5f2a:	2308      	movs	r3, #8
    5f2c:	643b      	str	r3, [r7, #64]	; 0x40
    5f2e:	e00c      	b.n	5f4a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    5f30:	683b      	ldr	r3, [r7, #0]
    5f32:	781b      	ldrb	r3, [r3, #0]
    5f34:	2b62      	cmp	r3, #98	; 0x62
    5f36:	d102      	bne.n	5f3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    5f38:	2302      	movs	r3, #2
    5f3a:	643b      	str	r3, [r7, #64]	; 0x40
    5f3c:	e005      	b.n	5f4a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    5f3e:	230a      	movs	r3, #10
    5f40:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    5f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f44:	f023 0310 	bic.w	r3, r3, #16
    5f48:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    5f4a:	683b      	ldr	r3, [r7, #0]
    5f4c:	781b      	ldrb	r3, [r3, #0]
    5f4e:	2b58      	cmp	r3, #88	; 0x58
    5f50:	d103      	bne.n	5f5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    5f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f54:	f043 0320 	orr.w	r3, r3, #32
    5f58:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    5f5a:	683b      	ldr	r3, [r7, #0]
    5f5c:	781b      	ldrb	r3, [r3, #0]
    5f5e:	2b69      	cmp	r3, #105	; 0x69
    5f60:	d007      	beq.n	5f72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	781b      	ldrb	r3, [r3, #0]
    5f66:	2b64      	cmp	r3, #100	; 0x64
    5f68:	d003      	beq.n	5f72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    5f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f6c:	f023 030c 	bic.w	r3, r3, #12
    5f70:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    5f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d003      	beq.n	5f84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    5f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f7e:	f023 0301 	bic.w	r3, r3, #1
    5f82:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    5f84:	683b      	ldr	r3, [r7, #0]
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	2b69      	cmp	r3, #105	; 0x69
    5f8a:	d004      	beq.n	5f96 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    5f8c:	683b      	ldr	r3, [r7, #0]
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2b64      	cmp	r3, #100	; 0x64
    5f92:	f040 808d 	bne.w	60b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    5f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d02e      	beq.n	5ffe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    5fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5fa2:	3307      	adds	r3, #7
    5fa4:	f023 0307 	bic.w	r3, r3, #7
    5fa8:	f103 0208 	add.w	r2, r3, #8
    5fac:	66ba      	str	r2, [r7, #104]	; 0x68
    5fae:	e9d3 3400 	ldrd	r3, r4, [r3]
    5fb2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5fb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    5fba:	2b00      	cmp	r3, #0
    5fbc:	f174 0200 	sbcs.w	r2, r4, #0
    5fc0:	da02      	bge.n	5fc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    5fc2:	425b      	negs	r3, r3
    5fc4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    5fc8:	4619      	mov	r1, r3
    5fca:	4622      	mov	r2, r4
    5fcc:	697b      	ldr	r3, [r7, #20]
    5fce:	0fdb      	lsrs	r3, r3, #31
    5fd0:	b2d8      	uxtb	r0, r3
    5fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5fd4:	f04f 0400 	mov.w	r4, #0
    5fd8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    5fda:	9508      	str	r5, [sp, #32]
    5fdc:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    5fde:	9507      	str	r5, [sp, #28]
    5fe0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    5fe2:	9506      	str	r5, [sp, #24]
    5fe4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5fe8:	9002      	str	r0, [sp, #8]
    5fea:	e9cd 1200 	strd	r1, r2, [sp]
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5ff2:	68b9      	ldr	r1, [r7, #8]
    5ff4:	68f8      	ldr	r0, [r7, #12]
    5ff6:	f7ff faf1 	bl	55dc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    5ffa:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    5ffc:	e0c8      	b.n	6190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    5ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6000:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6004:	2b00      	cmp	r3, #0
    6006:	d01e      	beq.n	6046 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    6008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    600a:	1d1a      	adds	r2, r3, #4
    600c:	66ba      	str	r2, [r7, #104]	; 0x68
    600e:	681b      	ldr	r3, [r3, #0]
    6010:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    6012:	69fb      	ldr	r3, [r7, #28]
    6014:	2b00      	cmp	r3, #0
    6016:	bfb8      	it	lt
    6018:	425b      	neglt	r3, r3
    601a:	4619      	mov	r1, r3
    601c:	69fb      	ldr	r3, [r7, #28]
    601e:	0fdb      	lsrs	r3, r3, #31
    6020:	b2db      	uxtb	r3, r3
    6022:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6024:	9205      	str	r2, [sp, #20]
    6026:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6028:	9204      	str	r2, [sp, #16]
    602a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    602c:	9203      	str	r2, [sp, #12]
    602e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6030:	9202      	str	r2, [sp, #8]
    6032:	9301      	str	r3, [sp, #4]
    6034:	9100      	str	r1, [sp, #0]
    6036:	687b      	ldr	r3, [r7, #4]
    6038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    603a:	68b9      	ldr	r1, [r7, #8]
    603c:	68f8      	ldr	r0, [r7, #12]
    603e:	f7ff fa65 	bl	550c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    6042:	6478      	str	r0, [r7, #68]	; 0x44
          }
    6044:	e0a4      	b.n	6190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    6046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6048:	f003 0340 	and.w	r3, r3, #64	; 0x40
    604c:	2b00      	cmp	r3, #0
    604e:	d005      	beq.n	605c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    6050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6052:	1d1a      	adds	r2, r3, #4
    6054:	66ba      	str	r2, [r7, #104]	; 0x68
    6056:	681b      	ldr	r3, [r3, #0]
    6058:	b2db      	uxtb	r3, r3
    605a:	e00e      	b.n	607a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    605c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6062:	2b00      	cmp	r3, #0
    6064:	d005      	beq.n	6072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    6066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6068:	1d1a      	adds	r2, r3, #4
    606a:	66ba      	str	r2, [r7, #104]	; 0x68
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	b21b      	sxth	r3, r3
    6070:	e003      	b.n	607a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    6072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6074:	1d1a      	adds	r2, r3, #4
    6076:	66ba      	str	r2, [r7, #104]	; 0x68
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    607c:	6a3b      	ldr	r3, [r7, #32]
    607e:	2b00      	cmp	r3, #0
    6080:	bfb8      	it	lt
    6082:	425b      	neglt	r3, r3
    6084:	4619      	mov	r1, r3
    6086:	6a3b      	ldr	r3, [r7, #32]
    6088:	0fdb      	lsrs	r3, r3, #31
    608a:	b2db      	uxtb	r3, r3
    608c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    608e:	9205      	str	r2, [sp, #20]
    6090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6092:	9204      	str	r2, [sp, #16]
    6094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6096:	9203      	str	r2, [sp, #12]
    6098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    609a:	9202      	str	r2, [sp, #8]
    609c:	9301      	str	r3, [sp, #4]
    609e:	9100      	str	r1, [sp, #0]
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    60a4:	68b9      	ldr	r1, [r7, #8]
    60a6:	68f8      	ldr	r0, [r7, #12]
    60a8:	f7ff fa30 	bl	550c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    60ac:	6478      	str	r0, [r7, #68]	; 0x44
          }
    60ae:	e06f      	b.n	6190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    60b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    60b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    60b6:	2b00      	cmp	r3, #0
    60b8:	d020      	beq.n	60fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    60ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    60bc:	3307      	adds	r3, #7
    60be:	f023 0307 	bic.w	r3, r3, #7
    60c2:	f103 0208 	add.w	r2, r3, #8
    60c6:	66ba      	str	r2, [r7, #104]	; 0x68
    60c8:	e9d3 3400 	ldrd	r3, r4, [r3]
    60cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    60ce:	4611      	mov	r1, r2
    60d0:	f04f 0200 	mov.w	r2, #0
    60d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
    60d6:	9008      	str	r0, [sp, #32]
    60d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
    60da:	9007      	str	r0, [sp, #28]
    60dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    60de:	9006      	str	r0, [sp, #24]
    60e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
    60e4:	2200      	movs	r2, #0
    60e6:	9202      	str	r2, [sp, #8]
    60e8:	e9cd 3400 	strd	r3, r4, [sp]
    60ec:	687b      	ldr	r3, [r7, #4]
    60ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    60f0:	68b9      	ldr	r1, [r7, #8]
    60f2:	68f8      	ldr	r0, [r7, #12]
    60f4:	f7ff fa72 	bl	55dc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    60f8:	6478      	str	r0, [r7, #68]	; 0x44
    60fa:	e049      	b.n	6190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    60fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    60fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6102:	2b00      	cmp	r3, #0
    6104:	d016      	beq.n	6134 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    6106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6108:	1d1a      	adds	r2, r3, #4
    610a:	66ba      	str	r2, [r7, #104]	; 0x68
    610c:	681b      	ldr	r3, [r3, #0]
    610e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6110:	9205      	str	r2, [sp, #20]
    6112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6114:	9204      	str	r2, [sp, #16]
    6116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6118:	9203      	str	r2, [sp, #12]
    611a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    611c:	9202      	str	r2, [sp, #8]
    611e:	2200      	movs	r2, #0
    6120:	9201      	str	r2, [sp, #4]
    6122:	9300      	str	r3, [sp, #0]
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6128:	68b9      	ldr	r1, [r7, #8]
    612a:	68f8      	ldr	r0, [r7, #12]
    612c:	f7ff f9ee 	bl	550c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    6130:	6478      	str	r0, [r7, #68]	; 0x44
    6132:	e02d      	b.n	6190 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    6134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6136:	f003 0340 	and.w	r3, r3, #64	; 0x40
    613a:	2b00      	cmp	r3, #0
    613c:	d005      	beq.n	614a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    613e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6140:	1d1a      	adds	r2, r3, #4
    6142:	66ba      	str	r2, [r7, #104]	; 0x68
    6144:	681b      	ldr	r3, [r3, #0]
    6146:	b2db      	uxtb	r3, r3
    6148:	e00e      	b.n	6168 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    614a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6150:	2b00      	cmp	r3, #0
    6152:	d005      	beq.n	6160 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    6154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6156:	1d1a      	adds	r2, r3, #4
    6158:	66ba      	str	r2, [r7, #104]	; 0x68
    615a:	681b      	ldr	r3, [r3, #0]
    615c:	b29b      	uxth	r3, r3
    615e:	e003      	b.n	6168 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    6160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6162:	1d1a      	adds	r2, r3, #4
    6164:	66ba      	str	r2, [r7, #104]	; 0x68
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    616a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    616c:	9305      	str	r3, [sp, #20]
    616e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6170:	9304      	str	r3, [sp, #16]
    6172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6174:	9303      	str	r3, [sp, #12]
    6176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6178:	9302      	str	r3, [sp, #8]
    617a:	2300      	movs	r3, #0
    617c:	9301      	str	r3, [sp, #4]
    617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6180:	9300      	str	r3, [sp, #0]
    6182:	687b      	ldr	r3, [r7, #4]
    6184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6186:	68b9      	ldr	r1, [r7, #8]
    6188:	68f8      	ldr	r0, [r7, #12]
    618a:	f7ff f9bf 	bl	550c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    618e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    6190:	683b      	ldr	r3, [r7, #0]
    6192:	3301      	adds	r3, #1
    6194:	603b      	str	r3, [r7, #0]
        break;
    6196:	e109      	b.n	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    6198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    619a:	3307      	adds	r3, #7
    619c:	f023 0307 	bic.w	r3, r3, #7
    61a0:	f103 0208 	add.w	r2, r3, #8
    61a4:	66ba      	str	r2, [r7, #104]	; 0x68
    61a6:	ed93 7b00 	vldr	d7, [r3]
    61aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61ac:	9302      	str	r3, [sp, #8]
    61ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    61b0:	9301      	str	r3, [sp, #4]
    61b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    61b4:	9300      	str	r3, [sp, #0]
    61b6:	eeb0 0a47 	vmov.f32	s0, s14
    61ba:	eef0 0a67 	vmov.f32	s1, s15
    61be:	687b      	ldr	r3, [r7, #4]
    61c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    61c2:	68b9      	ldr	r1, [r7, #8]
    61c4:	68f8      	ldr	r0, [r7, #12]
    61c6:	f7ff fa79 	bl	56bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    61ca:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    61cc:	683b      	ldr	r3, [r7, #0]
    61ce:	3301      	adds	r3, #1
    61d0:	603b      	str	r3, [r7, #0]
        break;
    61d2:	e0eb      	b.n	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    61d4:	2301      	movs	r3, #1
    61d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    61d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61da:	f003 0302 	and.w	r3, r3, #2
    61de:	2b00      	cmp	r3, #0
    61e0:	d113      	bne.n	620a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    61e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    61e4:	1c5a      	adds	r2, r3, #1
    61e6:	63fa      	str	r2, [r7, #60]	; 0x3c
    61e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    61ea:	429a      	cmp	r2, r3
    61ec:	bf8c      	ite	hi
    61ee:	2301      	movhi	r3, #1
    61f0:	2300      	movls	r3, #0
    61f2:	b2db      	uxtb	r3, r3
    61f4:	2b00      	cmp	r3, #0
    61f6:	d008      	beq.n	620a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    61f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    61fa:	1c53      	adds	r3, r2, #1
    61fc:	647b      	str	r3, [r7, #68]	; 0x44
    61fe:	68fc      	ldr	r4, [r7, #12]
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	68b9      	ldr	r1, [r7, #8]
    6204:	2020      	movs	r0, #32
    6206:	47a0      	blx	r4
          while (l++ < width) {
    6208:	e7eb      	b.n	61e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    620a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    620c:	1d1a      	adds	r2, r3, #4
    620e:	66ba      	str	r2, [r7, #104]	; 0x68
    6210:	681b      	ldr	r3, [r3, #0]
    6212:	b2d8      	uxtb	r0, r3
    6214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6216:	1c53      	adds	r3, r2, #1
    6218:	647b      	str	r3, [r7, #68]	; 0x44
    621a:	68fc      	ldr	r4, [r7, #12]
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	68b9      	ldr	r1, [r7, #8]
    6220:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    6222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6224:	f003 0302 	and.w	r3, r3, #2
    6228:	2b00      	cmp	r3, #0
    622a:	d013      	beq.n	6254 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    622e:	1c5a      	adds	r2, r3, #1
    6230:	63fa      	str	r2, [r7, #60]	; 0x3c
    6232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6234:	429a      	cmp	r2, r3
    6236:	bf8c      	ite	hi
    6238:	2301      	movhi	r3, #1
    623a:	2300      	movls	r3, #0
    623c:	b2db      	uxtb	r3, r3
    623e:	2b00      	cmp	r3, #0
    6240:	d008      	beq.n	6254 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    6242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6244:	1c53      	adds	r3, r2, #1
    6246:	647b      	str	r3, [r7, #68]	; 0x44
    6248:	68fc      	ldr	r4, [r7, #12]
    624a:	687b      	ldr	r3, [r7, #4]
    624c:	68b9      	ldr	r1, [r7, #8]
    624e:	2020      	movs	r0, #32
    6250:	47a0      	blx	r4
          while (l++ < width) {
    6252:	e7eb      	b.n	622c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    6254:	683b      	ldr	r3, [r7, #0]
    6256:	3301      	adds	r3, #1
    6258:	603b      	str	r3, [r7, #0]
        break;
    625a:	e0a7      	b.n	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    625c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    625e:	1d1a      	adds	r2, r3, #4
    6260:	66ba      	str	r2, [r7, #104]	; 0x68
    6262:	681b      	ldr	r3, [r3, #0]
    6264:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    6266:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6268:	f7fe ffe0 	bl	522c <_strlen(char const*)>
    626c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    626e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6274:	2b00      	cmp	r3, #0
    6276:	d007      	beq.n	6288 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    6278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    627a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    627c:	429a      	cmp	r2, r3
    627e:	d201      	bcs.n	6284 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    6280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6282:	e000      	b.n	6286 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    6284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6286:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    6288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    628a:	f003 0302 	and.w	r3, r3, #2
    628e:	2b00      	cmp	r3, #0
    6290:	d113      	bne.n	62ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    6292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6294:	1c5a      	adds	r2, r3, #1
    6296:	637a      	str	r2, [r7, #52]	; 0x34
    6298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    629a:	429a      	cmp	r2, r3
    629c:	bf8c      	ite	hi
    629e:	2301      	movhi	r3, #1
    62a0:	2300      	movls	r3, #0
    62a2:	b2db      	uxtb	r3, r3
    62a4:	2b00      	cmp	r3, #0
    62a6:	d008      	beq.n	62ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    62a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    62aa:	1c53      	adds	r3, r2, #1
    62ac:	647b      	str	r3, [r7, #68]	; 0x44
    62ae:	68fc      	ldr	r4, [r7, #12]
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	68b9      	ldr	r1, [r7, #8]
    62b4:	2020      	movs	r0, #32
    62b6:	47a0      	blx	r4
          while (l++ < width) {
    62b8:	e7eb      	b.n	6292 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    62ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    62bc:	781b      	ldrb	r3, [r3, #0]
    62be:	2b00      	cmp	r3, #0
    62c0:	d00b      	beq.n	62da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    62c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    62c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    62c8:	2b00      	cmp	r3, #0
    62ca:	d004      	beq.n	62d6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    62cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    62ce:	1e5a      	subs	r2, r3, #1
    62d0:	64fa      	str	r2, [r7, #76]	; 0x4c
    62d2:	2b00      	cmp	r3, #0
    62d4:	d001      	beq.n	62da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    62d6:	2301      	movs	r3, #1
    62d8:	e000      	b.n	62dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    62da:	2300      	movs	r3, #0
    62dc:	2b00      	cmp	r3, #0
    62de:	d00b      	beq.n	62f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    62e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    62e2:	1c5a      	adds	r2, r3, #1
    62e4:	63ba      	str	r2, [r7, #56]	; 0x38
    62e6:	7818      	ldrb	r0, [r3, #0]
    62e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    62ea:	1c53      	adds	r3, r2, #1
    62ec:	647b      	str	r3, [r7, #68]	; 0x44
    62ee:	68fc      	ldr	r4, [r7, #12]
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	68b9      	ldr	r1, [r7, #8]
    62f4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    62f6:	e7e0      	b.n	62ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    62f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    62fa:	f003 0302 	and.w	r3, r3, #2
    62fe:	2b00      	cmp	r3, #0
    6300:	d013      	beq.n	632a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    6302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6304:	1c5a      	adds	r2, r3, #1
    6306:	637a      	str	r2, [r7, #52]	; 0x34
    6308:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    630a:	429a      	cmp	r2, r3
    630c:	bf8c      	ite	hi
    630e:	2301      	movhi	r3, #1
    6310:	2300      	movls	r3, #0
    6312:	b2db      	uxtb	r3, r3
    6314:	2b00      	cmp	r3, #0
    6316:	d008      	beq.n	632a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    6318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    631a:	1c53      	adds	r3, r2, #1
    631c:	647b      	str	r3, [r7, #68]	; 0x44
    631e:	68fc      	ldr	r4, [r7, #12]
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	68b9      	ldr	r1, [r7, #8]
    6324:	2020      	movs	r0, #32
    6326:	47a0      	blx	r4
          while (l++ < width) {
    6328:	e7eb      	b.n	6302 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    632a:	683b      	ldr	r3, [r7, #0]
    632c:	3301      	adds	r3, #1
    632e:	603b      	str	r3, [r7, #0]
        break;
    6330:	e03c      	b.n	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    6332:	2308      	movs	r3, #8
    6334:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    6336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6338:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    633c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    633e:	2300      	movs	r3, #0
    6340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    6344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6346:	1d1a      	adds	r2, r3, #4
    6348:	66ba      	str	r2, [r7, #104]	; 0x68
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	461a      	mov	r2, r3
    634e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6350:	9305      	str	r3, [sp, #20]
    6352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6354:	9304      	str	r3, [sp, #16]
    6356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6358:	9303      	str	r3, [sp, #12]
    635a:	2310      	movs	r3, #16
    635c:	9302      	str	r3, [sp, #8]
    635e:	2300      	movs	r3, #0
    6360:	9301      	str	r3, [sp, #4]
    6362:	9200      	str	r2, [sp, #0]
    6364:	687b      	ldr	r3, [r7, #4]
    6366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6368:	68b9      	ldr	r1, [r7, #8]
    636a:	68f8      	ldr	r0, [r7, #12]
    636c:	f7ff f8ce 	bl	550c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    6370:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    6372:	683b      	ldr	r3, [r7, #0]
    6374:	3301      	adds	r3, #1
    6376:	603b      	str	r3, [r7, #0]
        break;
    6378:	e018      	b.n	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    637a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    637c:	1c53      	adds	r3, r2, #1
    637e:	647b      	str	r3, [r7, #68]	; 0x44
    6380:	68fc      	ldr	r4, [r7, #12]
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	68b9      	ldr	r1, [r7, #8]
    6386:	2025      	movs	r0, #37	; 0x25
    6388:	47a0      	blx	r4
        format++;
    638a:	683b      	ldr	r3, [r7, #0]
    638c:	3301      	adds	r3, #1
    638e:	603b      	str	r3, [r7, #0]
        break;
    6390:	e00c      	b.n	63ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    6392:	683b      	ldr	r3, [r7, #0]
    6394:	7818      	ldrb	r0, [r3, #0]
    6396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6398:	1c53      	adds	r3, r2, #1
    639a:	647b      	str	r3, [r7, #68]	; 0x44
    639c:	68fc      	ldr	r4, [r7, #12]
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	68b9      	ldr	r1, [r7, #8]
    63a2:	47a0      	blx	r4
        format++;
    63a4:	683b      	ldr	r3, [r7, #0]
    63a6:	3301      	adds	r3, #1
    63a8:	603b      	str	r3, [r7, #0]
        break;
    63aa:	bf00      	nop
  while (*format)
    63ac:	f7ff bbb6 	b.w	5b1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    63b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    63b2:	687b      	ldr	r3, [r7, #4]
    63b4:	429a      	cmp	r2, r3
    63b6:	d302      	bcc.n	63be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	1e5a      	subs	r2, r3, #1
    63bc:	e000      	b.n	63c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    63be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    63c0:	68fc      	ldr	r4, [r7, #12]
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	68b9      	ldr	r1, [r7, #8]
    63c6:	2000      	movs	r0, #0
    63c8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    63ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    63cc:	4618      	mov	r0, r3
    63ce:	3758      	adds	r7, #88	; 0x58
    63d0:	46bd      	mov	sp, r7
    63d2:	bdb0      	pop	{r4, r5, r7, pc}

000063d4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    63d4:	b40f      	push	{r0, r1, r2, r3}
    63d6:	b580      	push	{r7, lr}
    63d8:	b0c4      	sub	sp, #272	; 0x110
    63da:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    63dc:	f507 738a 	add.w	r3, r7, #276	; 0x114
    63e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    63e4:	4639      	mov	r1, r7
    63e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    63ea:	9300      	str	r3, [sp, #0]
    63ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    63f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63f4:	4807      	ldr	r0, [pc, #28]	; (6414 <printf+0x40>)
    63f6:	f7ff fb83 	bl	5b00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    63fa:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    63fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    6402:	4618      	mov	r0, r3
    6404:	f507 7784 	add.w	r7, r7, #264	; 0x108
    6408:	46bd      	mov	sp, r7
    640a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    640e:	b004      	add	sp, #16
    6410:	4770      	bx	lr
    6412:	bf00      	nop
    6414:	000051a1 	.word	0x000051a1

00006418 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    6418:	b480      	push	{r7}
    641a:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    641c:	bf00      	nop
    641e:	46bd      	mov	sp, r7
    6420:	f85d 7b04 	ldr.w	r7, [sp], #4
    6424:	4770      	bx	lr

00006426 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    6426:	b580      	push	{r7, lr}
    6428:	b082      	sub	sp, #8
    642a:	af00      	add	r7, sp, #0
    642c:	6078      	str	r0, [r7, #4]
    642e:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    6430:	6839      	ldr	r1, [r7, #0]
    6432:	6878      	ldr	r0, [r7, #4]
    6434:	f000 f806 	bl	6444 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    6438:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    643a:	4618      	mov	r0, r3
    643c:	3708      	adds	r7, #8
    643e:	46bd      	mov	sp, r7
    6440:	bd80      	pop	{r7, pc}
    6442:	Address 0x0000000000006442 is out of bounds.


00006444 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    6444:	b5b0      	push	{r4, r5, r7, lr}
    6446:	b08c      	sub	sp, #48	; 0x30
    6448:	af00      	add	r7, sp, #0
    644a:	6078      	str	r0, [r7, #4]
    644c:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    644e:	4b2d      	ldr	r3, [pc, #180]	; (6504 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    6450:	681b      	ldr	r3, [r3, #0]
    6452:	f003 0301 	and.w	r3, r3, #1
    6456:	2b00      	cmp	r3, #0
    6458:	bf0c      	ite	eq
    645a:	2301      	moveq	r3, #1
    645c:	2300      	movne	r3, #0
    645e:	b2db      	uxtb	r3, r3
    6460:	2b00      	cmp	r3, #0
    6462:	d001      	beq.n	6468 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    6464:	683b      	ldr	r3, [r7, #0]
    6466:	e049      	b.n	64fc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    6468:	4b27      	ldr	r3, [pc, #156]	; (6508 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    646a:	681b      	ldr	r3, [r3, #0]
    646c:	2b00      	cmp	r3, #0
    646e:	d11d      	bne.n	64ac <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    6470:	4b26      	ldr	r3, [pc, #152]	; (650c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    6472:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    6474:	2304      	movs	r3, #4
    6476:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    6478:	2303      	movs	r3, #3
    647a:	613b      	str	r3, [r7, #16]
    647c:	2301      	movs	r3, #1
    647e:	62bb      	str	r3, [r7, #40]	; 0x28
    6480:	f107 0308 	add.w	r3, r7, #8
    6484:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    6486:	6abc      	ldr	r4, [r7, #40]	; 0x28
    6488:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    648a:	4620      	mov	r0, r4
    648c:	4629      	mov	r1, r5
    648e:	beab      	bkpt	0x00ab
    6490:	4604      	mov	r4, r0
    6492:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    6494:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    6496:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    6498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    649a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    649e:	d102      	bne.n	64a6 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    64a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64a4:	e02a      	b.n	64fc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    64a6:	4a18      	ldr	r2, [pc, #96]	; (6508 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    64a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64aa:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    64ac:	4b16      	ldr	r3, [pc, #88]	; (6508 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    64ae:	681b      	ldr	r3, [r3, #0]
    64b0:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    64b6:	683b      	ldr	r3, [r7, #0]
    64b8:	613b      	str	r3, [r7, #16]
    64ba:	2305      	movs	r3, #5
    64bc:	61fb      	str	r3, [r7, #28]
    64be:	f107 0308 	add.w	r3, r7, #8
    64c2:	61bb      	str	r3, [r7, #24]
  );
    64c4:	69fc      	ldr	r4, [r7, #28]
    64c6:	69bd      	ldr	r5, [r7, #24]
    64c8:	4620      	mov	r0, r4
    64ca:	4629      	mov	r1, r5
    64cc:	beab      	bkpt	0x00ab
    64ce:	4604      	mov	r4, r0
    64d0:	617c      	str	r4, [r7, #20]
  return value;
    64d2:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    64d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    64d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    64dc:	d102      	bne.n	64e4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    64de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64e2:	e00b      	b.n	64fc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    64e4:	683b      	ldr	r3, [r7, #0]
    64e6:	461a      	mov	r2, r3
    64e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64ea:	4293      	cmp	r3, r2
    64ec:	d102      	bne.n	64f4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    64ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64f2:	e003      	b.n	64fc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    64f4:	683b      	ldr	r3, [r7, #0]
    64f6:	461a      	mov	r2, r3
    64f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64fa:	1ad3      	subs	r3, r2, r3
}
    64fc:	4618      	mov	r0, r3
    64fe:	3730      	adds	r7, #48	; 0x30
    6500:	46bd      	mov	sp, r7
    6502:	bdb0      	pop	{r4, r5, r7, pc}
    6504:	e000edf0 	.word	0xe000edf0
    6508:	100003bc 	.word	0x100003bc
    650c:	0000a830 	.word	0x0000a830

00006510 <NVIC_EnableIRQ>:
{
    6510:	b480      	push	{r7}
    6512:	b083      	sub	sp, #12
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	f003 021f 	and.w	r2, r3, #31
    651e:	4907      	ldr	r1, [pc, #28]	; (653c <NVIC_EnableIRQ+0x2c>)
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	095b      	lsrs	r3, r3, #5
    6524:	2001      	movs	r0, #1
    6526:	fa00 f202 	lsl.w	r2, r0, r2
    652a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    652e:	bf00      	nop
    6530:	370c      	adds	r7, #12
    6532:	46bd      	mov	sp, r7
    6534:	f85d 7b04 	ldr.w	r7, [sp], #4
    6538:	4770      	bx	lr
    653a:	bf00      	nop
    653c:	e000e100 	.word	0xe000e100

00006540 <NVIC_DisableIRQ>:
{
    6540:	b480      	push	{r7}
    6542:	b083      	sub	sp, #12
    6544:	af00      	add	r7, sp, #0
    6546:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6548:	687b      	ldr	r3, [r7, #4]
    654a:	f003 021f 	and.w	r2, r3, #31
    654e:	4907      	ldr	r1, [pc, #28]	; (656c <NVIC_DisableIRQ+0x2c>)
    6550:	687b      	ldr	r3, [r7, #4]
    6552:	095b      	lsrs	r3, r3, #5
    6554:	2001      	movs	r0, #1
    6556:	fa00 f202 	lsl.w	r2, r0, r2
    655a:	3320      	adds	r3, #32
    655c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6560:	bf00      	nop
    6562:	370c      	adds	r7, #12
    6564:	46bd      	mov	sp, r7
    6566:	f85d 7b04 	ldr.w	r7, [sp], #4
    656a:	4770      	bx	lr
    656c:	e000e100 	.word	0xe000e100

00006570 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    6570:	b480      	push	{r7}
    6572:	b083      	sub	sp, #12
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]
    6578:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	2b00      	cmp	r3, #0
    657e:	da0b      	bge.n	6598 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6580:	683b      	ldr	r3, [r7, #0]
    6582:	b2da      	uxtb	r2, r3
    6584:	490d      	ldr	r1, [pc, #52]	; (65bc <NVIC_SetPriority+0x4c>)
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	f003 030f 	and.w	r3, r3, #15
    658c:	3b04      	subs	r3, #4
    658e:	0152      	lsls	r2, r2, #5
    6590:	b2d2      	uxtb	r2, r2
    6592:	440b      	add	r3, r1
    6594:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    6596:	e00a      	b.n	65ae <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6598:	683b      	ldr	r3, [r7, #0]
    659a:	b2db      	uxtb	r3, r3
    659c:	4a08      	ldr	r2, [pc, #32]	; (65c0 <NVIC_SetPriority+0x50>)
    659e:	6879      	ldr	r1, [r7, #4]
    65a0:	4608      	mov	r0, r1
    65a2:	015b      	lsls	r3, r3, #5
    65a4:	b2d9      	uxtb	r1, r3
    65a6:	1813      	adds	r3, r2, r0
    65a8:	460a      	mov	r2, r1
    65aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    65ae:	bf00      	nop
    65b0:	370c      	adds	r7, #12
    65b2:	46bd      	mov	sp, r7
    65b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    65b8:	4770      	bx	lr
    65ba:	bf00      	nop
    65bc:	e000ed00 	.word	0xe000ed00
    65c0:	e000e100 	.word	0xe000e100

000065c4 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    65c4:	b480      	push	{r7}
    65c6:	b083      	sub	sp, #12
    65c8:	af00      	add	r7, sp, #0
    65ca:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    65cc:	4b0c      	ldr	r3, [pc, #48]	; (6600 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	68da      	ldr	r2, [r3, #12]
    65d2:	4b0b      	ldr	r3, [pc, #44]	; (6600 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    65d4:	681b      	ldr	r3, [r3, #0]
    65d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    65da:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    65dc:	4b09      	ldr	r3, [pc, #36]	; (6604 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    65de:	681b      	ldr	r3, [r3, #0]
    65e0:	2200      	movs	r2, #0
    65e2:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    65e4:	4b07      	ldr	r3, [pc, #28]	; (6604 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	681a      	ldr	r2, [r3, #0]
    65ea:	4b06      	ldr	r3, [pc, #24]	; (6604 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    65ec:	681b      	ldr	r3, [r3, #0]
    65ee:	f042 0201 	orr.w	r2, r2, #1
    65f2:	601a      	str	r2, [r3, #0]
  }
    65f4:	bf00      	nop
    65f6:	370c      	adds	r7, #12
    65f8:	46bd      	mov	sp, r7
    65fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    65fe:	4770      	bx	lr
    6600:	10000070 	.word	0x10000070
    6604:	1000006c 	.word	0x1000006c

00006608 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    6608:	b480      	push	{r7}
    660a:	b083      	sub	sp, #12
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    6610:	4b04      	ldr	r3, [pc, #16]	; (6624 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	685b      	ldr	r3, [r3, #4]
  }
    6616:	4618      	mov	r0, r3
    6618:	370c      	adds	r7, #12
    661a:	46bd      	mov	sp, r7
    661c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6620:	4770      	bx	lr
    6622:	bf00      	nop
    6624:	1000006c 	.word	0x1000006c

00006628 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    6628:	b480      	push	{r7}
    662a:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    662c:	f8df 001c 	ldr.w	r0, [pc, #28]	; 664c <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    6630:	6801      	ldr	r1, [r0, #0]
    6632:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6636:	6001      	str	r1, [r0, #0]
    6638:	f3bf 8f4f 	dsb	sy
    663c:	f3bf 8f6f 	isb	sy
  }
}
    6640:	bf00      	nop
    6642:	46bd      	mov	sp, r7
    6644:	f85d 7b04 	ldr.w	r7, [sp], #4
    6648:	4770      	bx	lr
    664a:	0000      	.short	0x0000
    664c:	e000ed88 	.word	0xe000ed88

00006650 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    6650:	b580      	push	{r7, lr}
    6652:	b086      	sub	sp, #24
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    6658:	6878      	ldr	r0, [r7, #4]
    665a:	f000 f807 	bl	666c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    665e:	eef0 7a40 	vmov.f32	s15, s0
	}
    6662:	eeb0 0a67 	vmov.f32	s0, s15
    6666:	3718      	adds	r7, #24
    6668:	46bd      	mov	sp, r7
    666a:	bd80      	pop	{r7, pc}

0000666c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    666c:	b480      	push	{r7}
    666e:	b085      	sub	sp, #20
    6670:	af00      	add	r7, sp, #0
    6672:	60f8      	str	r0, [r7, #12]
    6674:	7239      	strb	r1, [r7, #8]
    6676:	713a      	strb	r2, [r7, #4]
    6678:	703b      	strb	r3, [r7, #0]
			return value;
    667a:	68fb      	ldr	r3, [r7, #12]
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	ee07 3a90 	vmov	s15, r3
		}
    6682:	eeb0 0a67 	vmov.f32	s0, s15
    6686:	3714      	adds	r7, #20
    6688:	46bd      	mov	sp, r7
    668a:	f85d 7b04 	ldr.w	r7, [sp], #4
    668e:	4770      	bx	lr

00006690 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    6690:	b580      	push	{r7, lr}
    6692:	ed2d 8b02 	vpush	{d8}
    6696:	b082      	sub	sp, #8
    6698:	af00      	add	r7, sp, #0
    669a:	6078      	str	r0, [r7, #4]
    669c:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    669e:	687b      	ldr	r3, [r7, #4]
    66a0:	ed93 8a00 	vldr	s16, [r3]
    66a4:	683b      	ldr	r3, [r7, #0]
    66a6:	4618      	mov	r0, r3
    66a8:	f7ff ffd2 	bl	6650 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    66ac:	eef0 7a40 	vmov.f32	s15, s0
    66b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
    66b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66b8:	bf94      	ite	ls
    66ba:	2301      	movls	r3, #1
    66bc:	2300      	movhi	r3, #0
    66be:	b2db      	uxtb	r3, r3
		}
    66c0:	4618      	mov	r0, r3
    66c2:	3708      	adds	r7, #8
    66c4:	46bd      	mov	sp, r7
    66c6:	ecbd 8b02 	vpop	{d8}
    66ca:	bd80      	pop	{r7, pc}

000066cc <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    66cc:	b480      	push	{r7}
    66ce:	b083      	sub	sp, #12
    66d0:	af00      	add	r7, sp, #0
    66d2:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    66d4:	4a04      	ldr	r2, [pc, #16]	; (66e8 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	6013      	str	r3, [r2, #0]
}
    66da:	bf00      	nop
    66dc:	370c      	adds	r7, #12
    66de:	46bd      	mov	sp, r7
    66e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66e4:	4770      	bx	lr
    66e6:	bf00      	nop
    66e8:	10000000 	.word	0x10000000

000066ec <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    66ec:	b480      	push	{r7}
    66ee:	b083      	sub	sp, #12
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	3310      	adds	r3, #16
  }
    66f8:	4618      	mov	r0, r3
    66fa:	370c      	adds	r7, #12
    66fc:	46bd      	mov	sp, r7
    66fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6702:	4770      	bx	lr

00006704 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    6704:	b580      	push	{r7, lr}
    6706:	b082      	sub	sp, #8
    6708:	af00      	add	r7, sp, #0
    670a:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    670c:	6878      	ldr	r0, [r7, #4]
    670e:	f7ff ffed 	bl	66ec <sjsu::cortex::InterruptController::IrqToIndex(int)>
    6712:	4603      	mov	r3, r0
    6714:	009b      	lsls	r3, r3, #2
    6716:	4a03      	ldr	r2, [pc, #12]	; (6724 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    6718:	4413      	add	r3, r2
  }
    671a:	4618      	mov	r0, r3
    671c:	3708      	adds	r7, #8
    671e:	46bd      	mov	sp, r7
    6720:	bd80      	pop	{r7, pc}
    6722:	bf00      	nop
    6724:	10000130 	.word	0x10000130

00006728 <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    6728:	b580      	push	{r7, lr}
    672a:	b082      	sub	sp, #8
    672c:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    672e:	4b09      	ldr	r3, [pc, #36]	; (6754 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    6730:	681b      	ldr	r3, [r3, #0]
    6732:	685b      	ldr	r3, [r3, #4]
    6734:	b2db      	uxtb	r3, r3
    6736:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    6738:	4a07      	ldr	r2, [pc, #28]	; (6758 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    673a:	687b      	ldr	r3, [r7, #4]
    673c:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    673e:	4a07      	ldr	r2, [pc, #28]	; (675c <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6746:	603b      	str	r3, [r7, #0]
    isr();
    6748:	683b      	ldr	r3, [r7, #0]
    674a:	4798      	blx	r3
  }
    674c:	bf00      	nop
    674e:	3708      	adds	r7, #8
    6750:	46bd      	mov	sp, r7
    6752:	bd80      	pop	{r7, pc}
    6754:	10000074 	.word	0x10000074
    6758:	10000048 	.word	0x10000048
    675c:	10000130 	.word	0x10000130

00006760 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    6760:	b084      	sub	sp, #16
    6762:	b590      	push	{r4, r7, lr}
    6764:	b085      	sub	sp, #20
    6766:	af00      	add	r7, sp, #0
    6768:	6078      	str	r0, [r7, #4]
    676a:	f107 0024 	add.w	r0, r7, #36	; 0x24
    676e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    6772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6774:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    6776:	6abc      	ldr	r4, [r7, #40]	; 0x28
    6778:	68f8      	ldr	r0, [r7, #12]
    677a:	f7ff ffc3 	bl	6704 <sjsu::cortex::InterruptController::GetVector(int)>
    677e:	4603      	mov	r3, r0
    6780:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    6782:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    6786:	2b00      	cmp	r3, #0
    6788:	d005      	beq.n	6796 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    678a:	68fb      	ldr	r3, [r7, #12]
    678c:	2b00      	cmp	r3, #0
    678e:	db02      	blt.n	6796 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    6790:	68f8      	ldr	r0, [r7, #12]
    6792:	f7ff febd 	bl	6510 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    6796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6798:	2b00      	cmp	r3, #0
    679a:	db04      	blt.n	67a6 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    679e:	4619      	mov	r1, r3
    67a0:	68f8      	ldr	r0, [r7, #12]
    67a2:	f7ff fee5 	bl	6570 <NVIC_SetPriority>
    }
  }
    67a6:	bf00      	nop
    67a8:	3714      	adds	r7, #20
    67aa:	46bd      	mov	sp, r7
    67ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    67b0:	b004      	add	sp, #16
    67b2:	4770      	bx	lr

000067b4 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    67b4:	b580      	push	{r7, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	af00      	add	r7, sp, #0
    67ba:	6078      	str	r0, [r7, #4]
    67bc:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    67be:	6838      	ldr	r0, [r7, #0]
    67c0:	f7ff febe 	bl	6540 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    67c4:	6838      	ldr	r0, [r7, #0]
    67c6:	f7ff ff9d 	bl	6704 <sjsu::cortex::InterruptController::GetVector(int)>
    67ca:	4602      	mov	r2, r0
    67cc:	4b02      	ldr	r3, [pc, #8]	; (67d8 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    67ce:	6013      	str	r3, [r2, #0]
  }
    67d0:	bf00      	nop
    67d2:	3708      	adds	r7, #8
    67d4:	46bd      	mov	sp, r7
    67d6:	bd80      	pop	{r7, pc}
    67d8:	00001d25 	.word	0x00001d25

000067dc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	4618      	mov	r0, r3
    67e8:	f000 f804 	bl	67f4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    67ec:	6878      	ldr	r0, [r7, #4]
    67ee:	3708      	adds	r7, #8
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}

000067f4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    67f4:	b580      	push	{r7, lr}
    67f6:	b082      	sub	sp, #8
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    67fc:	4903      	ldr	r1, [pc, #12]	; (680c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    67fe:	6878      	ldr	r0, [r7, #4]
    6800:	f000 f806 	bl	6810 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    6804:	6878      	ldr	r0, [r7, #4]
    6806:	3708      	adds	r7, #8
    6808:	46bd      	mov	sp, r7
    680a:	bd80      	pop	{r7, pc}
    680c:	0000ada8 	.word	0x0000ada8

00006810 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    6810:	b490      	push	{r4, r7}
    6812:	b082      	sub	sp, #8
    6814:	af00      	add	r7, sp, #0
    6816:	6078      	str	r0, [r7, #4]
    6818:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    681a:	683b      	ldr	r3, [r7, #0]
    681c:	e9d3 3400 	ldrd	r3, r4, [r3]
    6820:	687a      	ldr	r2, [r7, #4]
    6822:	e9c2 3400 	strd	r3, r4, [r2]
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	4618      	mov	r0, r3
    682a:	3708      	adds	r7, #8
    682c:	46bd      	mov	sp, r7
    682e:	bc90      	pop	{r4, r7}
    6830:	4770      	bx	lr

00006832 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    6832:	b580      	push	{r7, lr}
    6834:	b082      	sub	sp, #8
    6836:	af00      	add	r7, sp, #0
    6838:	6078      	str	r0, [r7, #4]
    683a:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	6839      	ldr	r1, [r7, #0]
    6840:	4618      	mov	r0, r3
    6842:	f000 f811 	bl	6868 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    6846:	6878      	ldr	r0, [r7, #4]
    6848:	3708      	adds	r7, #8
    684a:	46bd      	mov	sp, r7
    684c:	bd80      	pop	{r7, pc}

0000684e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    684e:	b490      	push	{r4, r7}
    6850:	b082      	sub	sp, #8
    6852:	af00      	add	r7, sp, #0
    6854:	6078      	str	r0, [r7, #4]
	{ return __r; }
    6856:	687b      	ldr	r3, [r7, #4]
    6858:	e9d3 3400 	ldrd	r3, r4, [r3]
    685c:	4618      	mov	r0, r3
    685e:	4621      	mov	r1, r4
    6860:	3708      	adds	r7, #8
    6862:	46bd      	mov	sp, r7
    6864:	bc90      	pop	{r4, r7}
    6866:	4770      	bx	lr

00006868 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    6868:	b5f0      	push	{r4, r5, r6, r7, lr}
    686a:	b085      	sub	sp, #20
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
    6870:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    6872:	6838      	ldr	r0, [r7, #0]
    6874:	f7ff ffeb 	bl	684e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    6878:	4605      	mov	r5, r0
    687a:	460e      	mov	r6, r1
    687c:	462b      	mov	r3, r5
    687e:	4634      	mov	r4, r6
    6880:	f04f 0100 	mov.w	r1, #0
    6884:	f04f 0200 	mov.w	r2, #0
    6888:	0162      	lsls	r2, r4, #5
    688a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    688e:	0159      	lsls	r1, r3, #5
    6890:	460b      	mov	r3, r1
    6892:	4614      	mov	r4, r2
    6894:	1b5b      	subs	r3, r3, r5
    6896:	eb64 0406 	sbc.w	r4, r4, r6
    689a:	f04f 0100 	mov.w	r1, #0
    689e:	f04f 0200 	mov.w	r2, #0
    68a2:	00a2      	lsls	r2, r4, #2
    68a4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    68a8:	0099      	lsls	r1, r3, #2
    68aa:	460b      	mov	r3, r1
    68ac:	4614      	mov	r4, r2
    68ae:	195b      	adds	r3, r3, r5
    68b0:	eb44 0406 	adc.w	r4, r4, r6
    68b4:	f04f 0100 	mov.w	r1, #0
    68b8:	f04f 0200 	mov.w	r2, #0
    68bc:	00e2      	lsls	r2, r4, #3
    68be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    68c2:	00d9      	lsls	r1, r3, #3
    68c4:	460b      	mov	r3, r1
    68c6:	4614      	mov	r4, r2
    68c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    68cc:	f107 0308 	add.w	r3, r7, #8
    68d0:	4619      	mov	r1, r3
    68d2:	6878      	ldr	r0, [r7, #4]
    68d4:	f7fa f84a 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    68d8:	6878      	ldr	r0, [r7, #4]
    68da:	3714      	adds	r7, #20
    68dc:	46bd      	mov	sp, r7
    68de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000068e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    68e0:	b590      	push	{r4, r7, lr}
    68e2:	b085      	sub	sp, #20
    68e4:	af00      	add	r7, sp, #0
    68e6:	6078      	str	r0, [r7, #4]
    68e8:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    68ea:	f107 0308 	add.w	r3, r7, #8
    68ee:	6839      	ldr	r1, [r7, #0]
    68f0:	4618      	mov	r0, r3
    68f2:	f7ff ff9e 	bl	6832 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    68f6:	f107 0308 	add.w	r3, r7, #8
    68fa:	4618      	mov	r0, r3
    68fc:	f7fb fe60 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    6900:	4603      	mov	r3, r0
    6902:	460c      	mov	r4, r1
    6904:	687a      	ldr	r2, [r7, #4]
    6906:	e9c2 3400 	strd	r3, r4, [r2]
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	4618      	mov	r0, r3
    690e:	3714      	adds	r7, #20
    6910:	46bd      	mov	sp, r7
    6912:	bd90      	pop	{r4, r7, pc}

00006914 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    6914:	b580      	push	{r7, lr}
    6916:	b084      	sub	sp, #16
    6918:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    691a:	f107 0308 	add.w	r3, r7, #8
    691e:	4618      	mov	r0, r3
    6920:	f7ff ff5c 	bl	67dc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    6924:	f107 0208 	add.w	r2, r7, #8
    6928:	463b      	mov	r3, r7
    692a:	4611      	mov	r1, r2
    692c:	4618      	mov	r0, r3
    692e:	f7ff ffd7 	bl	68e0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    6932:	463b      	mov	r3, r7
    6934:	4619      	mov	r1, r3
    6936:	4807      	ldr	r0, [pc, #28]	; (6954 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    6938:	f000 f9d4 	bl	6ce4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    693c:	4b06      	ldr	r3, [pc, #24]	; (6958 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	2b00      	cmp	r3, #0
    6942:	d002      	beq.n	694a <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    6944:	4b04      	ldr	r3, [pc, #16]	; (6958 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    6946:	681b      	ldr	r3, [r3, #0]
    6948:	4798      	blx	r3
    }
  }
    694a:	bf00      	nop
    694c:	3710      	adds	r7, #16
    694e:	46bd      	mov	sp, r7
    6950:	bd80      	pop	{r7, pc}
    6952:	bf00      	nop
    6954:	100003c8 	.word	0x100003c8
    6958:	100003c0 	.word	0x100003c0

0000695c <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    695c:	b490      	push	{r4, r7}
    695e:	b082      	sub	sp, #8
    6960:	af00      	add	r7, sp, #0
    6962:	6078      	str	r0, [r7, #4]
  {
    return counter;
    6964:	687a      	ldr	r2, [r7, #4]
    6966:	4b05      	ldr	r3, [pc, #20]	; (697c <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    6968:	e9d3 3400 	ldrd	r3, r4, [r3]
    696c:	e9c2 3400 	strd	r3, r4, [r2]
  }
    6970:	6878      	ldr	r0, [r7, #4]
    6972:	3708      	adds	r7, #8
    6974:	46bd      	mov	sp, r7
    6976:	bc90      	pop	{r4, r7}
    6978:	4770      	bx	lr
    697a:	bf00      	nop
    697c:	100003c8 	.word	0x100003c8

00006980 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    6980:	b480      	push	{r7}
    6982:	b083      	sub	sp, #12
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
    6988:	bf00      	nop
    698a:	370c      	adds	r7, #12
    698c:	46bd      	mov	sp, r7
    698e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6992:	4770      	bx	lr

00006994 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    6994:	b480      	push	{r7}
    6996:	b083      	sub	sp, #12
    6998:	af00      	add	r7, sp, #0
    699a:	6078      	str	r0, [r7, #4]
    699c:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    699e:	4a04      	ldr	r2, [pc, #16]	; (69b0 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    69a0:	683b      	ldr	r3, [r7, #0]
    69a2:	6013      	str	r3, [r2, #0]
  }
    69a4:	bf00      	nop
    69a6:	370c      	adds	r7, #12
    69a8:	46bd      	mov	sp, r7
    69aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ae:	4770      	bx	lr
    69b0:	100003c0 	.word	0x100003c0

000069b4 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    69b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69b6:	b08b      	sub	sp, #44	; 0x2c
    69b8:	af02      	add	r7, sp, #8
    69ba:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    69bc:	2304      	movs	r3, #4
    69be:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    69c0:	4b1f      	ldr	r3, [pc, #124]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69c2:	681b      	ldr	r3, [r3, #0]
    69c4:	685b      	ldr	r3, [r3, #4]
    69c6:	2b00      	cmp	r3, #0
    69c8:	bf14      	ite	ne
    69ca:	2301      	movne	r3, #1
    69cc:	2300      	moveq	r3, #0
    69ce:	b2db      	uxtb	r3, r3
    69d0:	2b00      	cmp	r3, #0
    69d2:	d030      	beq.n	6a36 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    69d4:	4b1a      	ldr	r3, [pc, #104]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69d6:	681b      	ldr	r3, [r3, #0]
    69d8:	2200      	movs	r2, #0
    69da:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    69dc:	4b18      	ldr	r3, [pc, #96]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69de:	681b      	ldr	r3, [r3, #0]
    69e0:	681a      	ldr	r2, [r3, #0]
    69e2:	4b17      	ldr	r3, [pc, #92]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69e4:	681b      	ldr	r3, [r3, #0]
    69e6:	f042 0202 	orr.w	r2, r2, #2
    69ea:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    69ec:	4b14      	ldr	r3, [pc, #80]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	681a      	ldr	r2, [r3, #0]
    69f2:	4b13      	ldr	r3, [pc, #76]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69f4:	681b      	ldr	r3, [r3, #0]
    69f6:	f042 0201 	orr.w	r2, r2, #1
    69fa:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    69fc:	4b10      	ldr	r3, [pc, #64]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    69fe:	681b      	ldr	r3, [r3, #0]
    6a00:	681a      	ldr	r2, [r3, #0]
    6a02:	4b0f      	ldr	r3, [pc, #60]	; (6a40 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6a04:	681b      	ldr	r3, [r3, #0]
    6a06:	f042 0204 	orr.w	r2, r2, #4
    6a0a:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	689e      	ldr	r6, [r3, #8]
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    6a14:	681b      	ldr	r3, [r3, #0]
    6a16:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    6a18:	4b0a      	ldr	r3, [pc, #40]	; (6a44 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    6a1a:	f107 040c 	add.w	r4, r7, #12
    6a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6a24:	69bb      	ldr	r3, [r7, #24]
    6a26:	9300      	str	r3, [sp, #0]
    6a28:	f107 030c 	add.w	r3, r7, #12
    6a2c:	cb0e      	ldmia	r3, {r1, r2, r3}
    6a2e:	4630      	mov	r0, r6
    6a30:	47a8      	blx	r5
      status = Status::kSuccess;
    6a32:	2300      	movs	r3, #0
    6a34:	61fb      	str	r3, [r7, #28]
    }

    return status;
    6a36:	69fb      	ldr	r3, [r7, #28]
  }
    6a38:	4618      	mov	r0, r3
    6a3a:	3724      	adds	r7, #36	; 0x24
    6a3c:	46bd      	mov	sp, r7
    6a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a40:	10000078 	.word	0x10000078
    6a44:	0000a9bc 	.word	0x0000a9bc

00006a48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    6a48:	b580      	push	{r7, lr}
    6a4a:	b084      	sub	sp, #16
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
    6a50:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    6a52:	687b      	ldr	r3, [r7, #4]
    6a54:	4618      	mov	r0, r3
    6a56:	f7fa f989 	bl	d6c <units::linear_scale<float>::operator()() const>
    6a5a:	eeb0 7a40 	vmov.f32	s14, s0
    6a5e:	683b      	ldr	r3, [r7, #0]
    6a60:	ee07 3a90 	vmov	s15, r3
    6a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6a68:	ee77 7a67 	vsub.f32	s15, s14, s15
    6a6c:	f107 030c 	add.w	r3, r7, #12
    6a70:	eeb0 0a67 	vmov.f32	s0, s15
    6a74:	4618      	mov	r0, r3
    6a76:	f7fa f9b4 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    6a7a:	68fb      	ldr	r3, [r7, #12]
	}
    6a7c:	4618      	mov	r0, r3
    6a7e:	3710      	adds	r7, #16
    6a80:	46bd      	mov	sp, r7
    6a82:	bd80      	pop	{r7, pc}

00006a84 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    6a84:	b580      	push	{r7, lr}
    6a86:	b082      	sub	sp, #8
    6a88:	af00      	add	r7, sp, #0
    6a8a:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    6a8c:	6878      	ldr	r0, [r7, #4]
    6a8e:	f7fc fb50 	bl	3132 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    6a92:	4603      	mov	r3, r0
	}
    6a94:	4618      	mov	r0, r3
    6a96:	3708      	adds	r7, #8
    6a98:	46bd      	mov	sp, r7
    6a9a:	bd80      	pop	{r7, pc}

00006a9c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    6a9c:	b590      	push	{r4, r7, lr}
    6a9e:	b089      	sub	sp, #36	; 0x24
    6aa0:	af00      	add	r7, sp, #0
    6aa2:	6078      	str	r0, [r7, #4]
    6aa4:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    6aa6:	f04f 0001 	mov.w	r0, #1
    6aaa:	f04f 0100 	mov.w	r1, #0
    6aae:	f7f9 fd73 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    6ab2:	4603      	mov	r3, r0
    6ab4:	60fb      	str	r3, [r7, #12]
    6ab6:	f107 020c 	add.w	r2, r7, #12
    6aba:	463b      	mov	r3, r7
    6abc:	4611      	mov	r1, r2
    6abe:	4618      	mov	r0, r3
    6ac0:	f7ff fde6 	bl	6690 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    6ac4:	4603      	mov	r3, r0
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d002      	beq.n	6ad0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    6aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ace:	e041      	b.n	6b54 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	685a      	ldr	r2, [r3, #4]
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	685b      	ldr	r3, [r3, #4]
    6ad8:	681b      	ldr	r3, [r3, #0]
    6ada:	330c      	adds	r3, #12
    6adc:	681b      	ldr	r3, [r3, #0]
    6ade:	4610      	mov	r0, r2
    6ae0:	4798      	blx	r3
    6ae2:	4603      	mov	r3, r0
    6ae4:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    6ae6:	463a      	mov	r2, r7
    6ae8:	f107 0308 	add.w	r3, r7, #8
    6aec:	4611      	mov	r1, r2
    6aee:	4618      	mov	r0, r3
    6af0:	f7fa ff90 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6af4:	4603      	mov	r3, r0
    6af6:	617b      	str	r3, [r7, #20]
    6af8:	f107 0314 	add.w	r3, r7, #20
    6afc:	2101      	movs	r1, #1
    6afe:	4618      	mov	r0, r3
    6b00:	f7ff ffa2 	bl	6a48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    6b04:	4603      	mov	r3, r0
    6b06:	613b      	str	r3, [r7, #16]
    6b08:	f107 0310 	add.w	r3, r7, #16
    6b0c:	4618      	mov	r0, r3
    6b0e:	f7ff ffb9 	bl	6a84 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b12:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    6b14:	f107 0308 	add.w	r3, r7, #8
    6b18:	4618      	mov	r0, r3
    6b1a:	f7fa fc77 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b1e:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    6b20:	463b      	mov	r3, r7
    6b22:	4618      	mov	r0, r3
    6b24:	f7fa fc72 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6b28:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    6b2a:	fbb4 f2f3 	udiv	r2, r4, r3
    6b2e:	fb03 f302 	mul.w	r3, r3, r2
    6b32:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    6b34:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    6b36:	69fb      	ldr	r3, [r7, #28]
    6b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    6b3c:	d305      	bcc.n	6b4a <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    6b3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    6b42:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    6b44:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    6b48:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    6b4a:	4b04      	ldr	r3, [pc, #16]	; (6b5c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    6b4c:	681b      	ldr	r3, [r3, #0]
    6b4e:	69fa      	ldr	r2, [r7, #28]
    6b50:	605a      	str	r2, [r3, #4]
    return remainder;
    6b52:	69bb      	ldr	r3, [r7, #24]
  }
    6b54:	4618      	mov	r0, r3
    6b56:	3724      	adds	r7, #36	; 0x24
    6b58:	46bd      	mov	sp, r7
    6b5a:	bd90      	pop	{r4, r7, pc}
    6b5c:	10000078 	.word	0x10000078

00006b60 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    6b60:	b580      	push	{r7, lr}
    6b62:	b082      	sub	sp, #8
    6b64:	af00      	add	r7, sp, #0
    6b66:	6078      	str	r0, [r7, #4]
    6b68:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    6b6a:	683a      	ldr	r2, [r7, #0]
    6b6c:	6879      	ldr	r1, [r7, #4]
    6b6e:	4804      	ldr	r0, [pc, #16]	; (6b80 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    6b70:	f7fa fe30 	bl	17d4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    6b74:	683b      	ldr	r3, [r7, #0]
}
    6b76:	4618      	mov	r0, r3
    6b78:	3708      	adds	r7, #8
    6b7a:	46bd      	mov	sp, r7
    6b7c:	bd80      	pop	{r7, pc}
    6b7e:	bf00      	nop
    6b80:	100003d4 	.word	0x100003d4

00006b84 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    6b84:	b590      	push	{r4, r7, lr}
    6b86:	b087      	sub	sp, #28
    6b88:	af02      	add	r7, sp, #8
    6b8a:	6078      	str	r0, [r7, #4]
    6b8c:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    6b8e:	f107 0308 	add.w	r3, r7, #8
    6b92:	4618      	mov	r0, r3
    6b94:	f7fb fdd9 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    6b98:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    6b9c:	e9cd 3400 	strd	r3, r4, [sp]
    6ba0:	683a      	ldr	r2, [r7, #0]
    6ba2:	6879      	ldr	r1, [r7, #4]
    6ba4:	4803      	ldr	r0, [pc, #12]	; (6bb4 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    6ba6:	f7fa fe67 	bl	1878 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    6baa:	683b      	ldr	r3, [r7, #0]
}
    6bac:	4618      	mov	r0, r3
    6bae:	3714      	adds	r7, #20
    6bb0:	46bd      	mov	sp, r7
    6bb2:	bd90      	pop	{r4, r7, pc}
    6bb4:	100003d4 	.word	0x100003d4

00006bb8 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    6bb8:	b580      	push	{r7, lr}
    6bba:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    6bbc:	4802      	ldr	r0, [pc, #8]	; (6bc8 <ThreadRuntimeCounter+0x10>)
    6bbe:	f7ff fd23 	bl	6608 <sjsu::cortex::DwtCounter::GetCount()>
    6bc2:	4603      	mov	r3, r0
}
    6bc4:	4618      	mov	r0, r3
    6bc6:	bd80      	pop	{r7, pc}
    6bc8:	100003d0 	.word	0x100003d0

00006bcc <vPortSetupTimerInterrupt>:
  // definitions.
  extern void ArmHardFaultHandler(void);
  extern void ArmResetHandler(void);

  void vPortSetupTimerInterrupt(void)  // NOLINT
  {
    6bcc:	b590      	push	{r4, r7, lr}
    6bce:	b08b      	sub	sp, #44	; 0x2c
    6bd0:	af02      	add	r7, sp, #8
    interrupt_controller.Register({
    6bd2:	4b11      	ldr	r3, [pc, #68]	; (6c18 <vPortSetupTimerInterrupt+0x4c>)
    6bd4:	463c      	mov	r4, r7
    6bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6bdc:	68fb      	ldr	r3, [r7, #12]
    6bde:	9300      	str	r3, [sp, #0]
    6be0:	463b      	mov	r3, r7
    6be2:	cb0e      	ldmia	r3, {r1, r2, r3}
    6be4:	480d      	ldr	r0, [pc, #52]	; (6c1c <vPortSetupTimerInterrupt+0x50>)
    6be6:	f7ff fdbb 	bl	6760 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
        .interrupt_request_number  = sjsu::cortex::SVCall_IRQn,
        .interrupt_service_routine = vPortSVCHandler,
    });
    interrupt_controller.Register({
    6bea:	4b0d      	ldr	r3, [pc, #52]	; (6c20 <vPortSetupTimerInterrupt+0x54>)
    6bec:	f107 0410 	add.w	r4, r7, #16
    6bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6bf6:	69fb      	ldr	r3, [r7, #28]
    6bf8:	9300      	str	r3, [sp, #0]
    6bfa:	f107 0310 	add.w	r3, r7, #16
    6bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
    6c00:	4806      	ldr	r0, [pc, #24]	; (6c1c <vPortSetupTimerInterrupt+0x50>)
    6c02:	f7ff fdad 	bl	6760 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
    });
    // Set the SystemTick frequency to the RTOS tick frequency
    // It is critical that this happens before you set the system_clock,
    // since The system_timer keeps the time that the system_clock uses to
    // delay itself.
    system_timer.SetInterrupt(xPortSysTickHandler);
    6c06:	4907      	ldr	r1, [pc, #28]	; (6c24 <vPortSetupTimerInterrupt+0x58>)
    6c08:	4807      	ldr	r0, [pc, #28]	; (6c28 <vPortSetupTimerInterrupt+0x5c>)
    6c0a:	f7ff fec3 	bl	6994 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>
  }
    6c0e:	bf00      	nop
    6c10:	3724      	adds	r7, #36	; 0x24
    6c12:	46bd      	mov	sp, r7
    6c14:	bd90      	pop	{r4, r7, pc}
    6c16:	bf00      	nop
    6c18:	0000acb8 	.word	0x0000acb8
    6c1c:	1000008c 	.word	0x1000008c
    6c20:	0000acc8 	.word	0x0000acc8
    6c24:	00007049 	.word	0x00007049
    6c28:	10000080 	.word	0x10000080

00006c2c <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b082      	sub	sp, #8
    6c30:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    6c32:	f7ff fcf9 	bl	6628 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    6c36:	4b1e      	ldr	r3, [pc, #120]	; (6cb0 <sjsu::InitializePlatform()+0x84>)
    6c38:	6819      	ldr	r1, [r3, #0]
    6c3a:	481e      	ldr	r0, [pc, #120]	; (6cb4 <sjsu::InitializePlatform()+0x88>)
    6c3c:	f7f9 fede 	bl	9fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    6c40:	23ff      	movs	r3, #255	; 0xff
    6c42:	703b      	strb	r3, [r7, #0]
    6c44:	463b      	mov	r3, r7
    6c46:	2201      	movs	r2, #1
    6c48:	4619      	mov	r1, r3
    6c4a:	481a      	ldr	r0, [pc, #104]	; (6cb4 <sjsu::InitializePlatform()+0x88>)
    6c4c:	f7f9 ff24 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    6c50:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    6c54:	4818      	ldr	r0, [pc, #96]	; (6cb8 <sjsu::InitializePlatform()+0x8c>)
    6c56:	f7fa fd17 	bl	1688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    6c5a:	4818      	ldr	r0, [pc, #96]	; (6cbc <sjsu::InitializePlatform()+0x90>)
    6c5c:	f000 fd24 	bl	76a8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    6c60:	4817      	ldr	r0, [pc, #92]	; (6cc0 <sjsu::InitializePlatform()+0x94>)
    6c62:	f000 fd31 	bl	76c8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    6c66:	4b17      	ldr	r3, [pc, #92]	; (6cc4 <sjsu::InitializePlatform()+0x98>)
    6c68:	6819      	ldr	r1, [r3, #0]
    6c6a:	4817      	ldr	r0, [pc, #92]	; (6cc8 <sjsu::InitializePlatform()+0x9c>)
    6c6c:	f7ff ff16 	bl	6a9c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    6c70:	4815      	ldr	r0, [pc, #84]	; (6cc8 <sjsu::InitializePlatform()+0x9c>)
    6c72:	f7ff fe9f 	bl	69b4 <sjsu::cortex::SystemTimer::StartTimer() const>
    6c76:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d00d      	beq.n	6c9a <sjsu::InitializePlatform()+0x6e>
    6c7e:	23d6      	movs	r3, #214	; 0xd6
    6c80:	4a12      	ldr	r2, [pc, #72]	; (6ccc <sjsu::InitializePlatform()+0xa0>)
    6c82:	4913      	ldr	r1, [pc, #76]	; (6cd0 <sjsu::InitializePlatform()+0xa4>)
    6c84:	4813      	ldr	r0, [pc, #76]	; (6cd4 <sjsu::InitializePlatform()+0xa8>)
    6c86:	f7ff fba5 	bl	63d4 <printf>
    6c8a:	4813      	ldr	r0, [pc, #76]	; (6cd8 <sjsu::InitializePlatform()+0xac>)
    6c8c:	f7fe fa5e 	bl	514c <puts>
    6c90:	2100      	movs	r1, #0
    6c92:	2001      	movs	r0, #1
    6c94:	f7f9 fe18 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    6c98:	e7fe      	b.n	6c98 <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    6c9a:	4810      	ldr	r0, [pc, #64]	; (6cdc <sjsu::InitializePlatform()+0xb0>)
    6c9c:	f7ff fc92 	bl	65c4 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    6ca0:	480f      	ldr	r0, [pc, #60]	; (6ce0 <sjsu::InitializePlatform()+0xb4>)
    6ca2:	f7ff fd13 	bl	66cc <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    6ca6:	bf00      	nop
    6ca8:	3708      	adds	r7, #8
    6caa:	46bd      	mov	sp, r7
    6cac:	bd80      	pop	{r7, pc}
    6cae:	bf00      	nop
    6cb0:	0000adb0 	.word	0x0000adb0
    6cb4:	1000007c 	.word	0x1000007c
    6cb8:	100003d4 	.word	0x100003d4
    6cbc:	00006b61 	.word	0x00006b61
    6cc0:	00006b85 	.word	0x00006b85
    6cc4:	0000adb4 	.word	0x0000adb4
    6cc8:	10000080 	.word	0x10000080
    6ccc:	0000ae14 	.word	0x0000ae14
    6cd0:	0000ade0 	.word	0x0000ade0
    6cd4:	0000acd8 	.word	0x0000acd8
    6cd8:	0000aa6c 	.word	0x0000aa6c
    6cdc:	100003d0 	.word	0x100003d0
    6ce0:	0000695d 	.word	0x0000695d

00006ce4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    6ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ce6:	b083      	sub	sp, #12
    6ce8:	af00      	add	r7, sp, #0
    6cea:	6078      	str	r0, [r7, #4]
    6cec:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    6cee:	6838      	ldr	r0, [r7, #0]
    6cf0:	f7fb fc66 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    6cf4:	460a      	mov	r2, r1
    6cf6:	4601      	mov	r1, r0
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	e9d3 5600 	ldrd	r5, r6, [r3]
    6cfe:	186b      	adds	r3, r5, r1
    6d00:	eb46 0402 	adc.w	r4, r6, r2
    6d04:	687a      	ldr	r2, [r7, #4]
    6d06:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    6d0a:	687b      	ldr	r3, [r7, #4]
	}
    6d0c:	4618      	mov	r0, r3
    6d0e:	370c      	adds	r7, #12
    6d10:	46bd      	mov	sp, r7
    6d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d14 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    6d14:	b580      	push	{r7, lr}
    6d16:	b082      	sub	sp, #8
    6d18:	af00      	add	r7, sp, #0
    6d1a:	6078      	str	r0, [r7, #4]
    6d1c:	6039      	str	r1, [r7, #0]
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	2b01      	cmp	r3, #1
    6d22:	d155      	bne.n	6dd0 <__static_initialization_and_destruction_0(int, int)+0xbc>
    6d24:	683b      	ldr	r3, [r7, #0]
    6d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6d2a:	4293      	cmp	r3, r2
    6d2c:	d150      	bne.n	6dd0 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    6d2e:	4b2a      	ldr	r3, [pc, #168]	; (6dd8 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    6d30:	681b      	ldr	r3, [r3, #0]
    6d32:	f003 0301 	and.w	r3, r3, #1
    6d36:	2b00      	cmp	r3, #0
    6d38:	d106      	bne.n	6d48 <__static_initialization_and_destruction_0(int, int)+0x34>
    6d3a:	4b27      	ldr	r3, [pc, #156]	; (6dd8 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    6d3c:	2201      	movs	r2, #1
    6d3e:	601a      	str	r2, [r3, #0]
    6d40:	4b26      	ldr	r3, [pc, #152]	; (6ddc <__static_initialization_and_destruction_0(int, int)+0xc8>)
    6d42:	4618      	mov	r0, r3
    6d44:	f7fb f818 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    6d48:	4b25      	ldr	r3, [pc, #148]	; (6de0 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    6d4a:	681b      	ldr	r3, [r3, #0]
    6d4c:	f003 0301 	and.w	r3, r3, #1
    6d50:	2b00      	cmp	r3, #0
    6d52:	d105      	bne.n	6d60 <__static_initialization_and_destruction_0(int, int)+0x4c>
    6d54:	4b22      	ldr	r3, [pc, #136]	; (6de0 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    6d56:	2201      	movs	r2, #1
    6d58:	601a      	str	r2, [r3, #0]
    6d5a:	4a22      	ldr	r2, [pc, #136]	; (6de4 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    6d5c:	4b22      	ldr	r3, [pc, #136]	; (6de8 <__static_initialization_and_destruction_0(int, int)+0xd4>)
    6d5e:	601a      	str	r2, [r3, #0]
    6d60:	4b22      	ldr	r3, [pc, #136]	; (6dec <__static_initialization_and_destruction_0(int, int)+0xd8>)
    6d62:	681b      	ldr	r3, [r3, #0]
    6d64:	f003 0301 	and.w	r3, r3, #1
    6d68:	2b00      	cmp	r3, #0
    6d6a:	d105      	bne.n	6d78 <__static_initialization_and_destruction_0(int, int)+0x64>
    6d6c:	4b1f      	ldr	r3, [pc, #124]	; (6dec <__static_initialization_and_destruction_0(int, int)+0xd8>)
    6d6e:	2201      	movs	r2, #1
    6d70:	601a      	str	r2, [r3, #0]
    6d72:	4a1f      	ldr	r2, [pc, #124]	; (6df0 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    6d74:	4b1f      	ldr	r3, [pc, #124]	; (6df4 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    6d76:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    6d78:	4b1f      	ldr	r3, [pc, #124]	; (6df8 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    6d7a:	681b      	ldr	r3, [r3, #0]
    6d7c:	f003 0301 	and.w	r3, r3, #1
    6d80:	2b00      	cmp	r3, #0
    6d82:	d105      	bne.n	6d90 <__static_initialization_and_destruction_0(int, int)+0x7c>
    6d84:	4b1c      	ldr	r3, [pc, #112]	; (6df8 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    6d86:	2201      	movs	r2, #1
    6d88:	601a      	str	r2, [r3, #0]
    };
    6d8a:	4a1c      	ldr	r2, [pc, #112]	; (6dfc <__static_initialization_and_destruction_0(int, int)+0xe8>)
    6d8c:	4b1c      	ldr	r3, [pc, #112]	; (6e00 <__static_initialization_and_destruction_0(int, int)+0xec>)
    6d8e:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    6d90:	4b1c      	ldr	r3, [pc, #112]	; (6e04 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	f003 0301 	and.w	r3, r3, #1
    6d98:	2b00      	cmp	r3, #0
    6d9a:	d105      	bne.n	6da8 <__static_initialization_and_destruction_0(int, int)+0x94>
    6d9c:	4b19      	ldr	r3, [pc, #100]	; (6e04 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    6d9e:	2201      	movs	r2, #1
    6da0:	601a      	str	r2, [r3, #0]
    };
    6da2:	4a19      	ldr	r2, [pc, #100]	; (6e08 <__static_initialization_and_destruction_0(int, int)+0xf4>)
    6da4:	4b19      	ldr	r3, [pc, #100]	; (6e0c <__static_initialization_and_destruction_0(int, int)+0xf8>)
    6da6:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    6da8:	4b19      	ldr	r3, [pc, #100]	; (6e10 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    6daa:	681b      	ldr	r3, [r3, #0]
    6dac:	f003 0301 	and.w	r3, r3, #1
    6db0:	2b00      	cmp	r3, #0
    6db2:	d105      	bne.n	6dc0 <__static_initialization_and_destruction_0(int, int)+0xac>
    6db4:	4b16      	ldr	r3, [pc, #88]	; (6e10 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    6db6:	2201      	movs	r2, #1
    6db8:	601a      	str	r2, [r3, #0]
    };
    6dba:	4a16      	ldr	r2, [pc, #88]	; (6e14 <__static_initialization_and_destruction_0(int, int)+0x100>)
    6dbc:	4b16      	ldr	r3, [pc, #88]	; (6e18 <__static_initialization_and_destruction_0(int, int)+0x104>)
    6dbe:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    6dc0:	f7fa f9e2 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    6dc4:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    6dc6:	461a      	mov	r2, r3
    6dc8:	4914      	ldr	r1, [pc, #80]	; (6e1c <__static_initialization_and_destruction_0(int, int)+0x108>)
    6dca:	4815      	ldr	r0, [pc, #84]	; (6e20 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6dcc:	f7fa fc42 	bl	1654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    6dd0:	bf00      	nop
    6dd2:	3708      	adds	r7, #8
    6dd4:	46bd      	mov	sp, r7
    6dd6:	bd80      	pop	{r7, pc}
    6dd8:	10000298 	.word	0x10000298
    6ddc:	10000130 	.word	0x10000130
    6de0:	10000284 	.word	0x10000284
    6de4:	400fc000 	.word	0x400fc000
    6de8:	10000128 	.word	0x10000128
    6dec:	10000280 	.word	0x10000280
    6df0:	4002c000 	.word	0x4002c000
    6df4:	1000011c 	.word	0x1000011c
    6df8:	10000288 	.word	0x10000288
    6dfc:	40098000 	.word	0x40098000
    6e00:	1000000c 	.word	0x1000000c
    6e04:	1000028c 	.word	0x1000028c
    6e08:	4009c000 	.word	0x4009c000
    6e0c:	10000020 	.word	0x10000020
    6e10:	10000290 	.word	0x10000290
    6e14:	400a4000 	.word	0x400a4000
    6e18:	10000034 	.word	0x10000034
    6e1c:	0000adcc 	.word	0x0000adcc
    6e20:	100003d4 	.word	0x100003d4

00006e24 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    6e24:	b580      	push	{r7, lr}
    6e26:	af00      	add	r7, sp, #0
    6e28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e2c:	2001      	movs	r0, #1
    6e2e:	f7ff ff71 	bl	6d14 <__static_initialization_and_destruction_0(int, int)>
    6e32:	bd80      	pop	{r7, pc}

00006e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    6e34:	b480      	push	{r7}
    6e36:	b085      	sub	sp, #20
    6e38:	af00      	add	r7, sp, #0
    6e3a:	60f8      	str	r0, [r7, #12]
    6e3c:	60b9      	str	r1, [r7, #8]
    6e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    6e40:	68fb      	ldr	r3, [r7, #12]
    6e42:	3b04      	subs	r3, #4
    6e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6e46:	68fb      	ldr	r3, [r7, #12]
    6e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6e4e:	68fb      	ldr	r3, [r7, #12]
    6e50:	3b04      	subs	r3, #4
    6e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    6e54:	68bb      	ldr	r3, [r7, #8]
    6e56:	f023 0201 	bic.w	r2, r3, #1
    6e5a:	68fb      	ldr	r3, [r7, #12]
    6e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6e5e:	68fb      	ldr	r3, [r7, #12]
    6e60:	3b04      	subs	r3, #4
    6e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6e64:	4a0c      	ldr	r2, [pc, #48]	; (6e98 <pxPortInitialiseStack+0x64>)
    6e66:	68fb      	ldr	r3, [r7, #12]
    6e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	3b14      	subs	r3, #20
    6e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6e70:	687a      	ldr	r2, [r7, #4]
    6e72:	68fb      	ldr	r3, [r7, #12]
    6e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    6e76:	68fb      	ldr	r3, [r7, #12]
    6e78:	3b04      	subs	r3, #4
    6e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    6e7c:	68fb      	ldr	r3, [r7, #12]
    6e7e:	f06f 0202 	mvn.w	r2, #2
    6e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    6e84:	68fb      	ldr	r3, [r7, #12]
    6e86:	3b20      	subs	r3, #32
    6e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6e8a:	68fb      	ldr	r3, [r7, #12]
}
    6e8c:	4618      	mov	r0, r3
    6e8e:	3714      	adds	r7, #20
    6e90:	46bd      	mov	sp, r7
    6e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e96:	4770      	bx	lr
    6e98:	00006e9d 	.word	0x00006e9d

00006e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6e9c:	b480      	push	{r7}
    6e9e:	b083      	sub	sp, #12
    6ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    6ea2:	2300      	movs	r3, #0
    6ea4:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    6ea6:	f04f 0328 	mov.w	r3, #40	; 0x28
    6eaa:	f383 8811 	msr	BASEPRI, r3
    6eae:	f3bf 8f6f 	isb	sy
    6eb2:	f3bf 8f4f 	dsb	sy
    6eb6:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    6eb8:	bf00      	nop
    6eba:	683b      	ldr	r3, [r7, #0]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d0fc      	beq.n	6eba <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6ec0:	bf00      	nop
    6ec2:	370c      	adds	r7, #12
    6ec4:	46bd      	mov	sp, r7
    6ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eca:	4770      	bx	lr
    6ecc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006ed0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    6ed0:	4b07      	ldr	r3, [pc, #28]	; (6ef0 <pxCurrentTCBConst2>)
    6ed2:	6819      	ldr	r1, [r3, #0]
    6ed4:	6808      	ldr	r0, [r1, #0]
    6ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eda:	f380 8809 	msr	PSP, r0
    6ede:	f3bf 8f6f 	isb	sy
    6ee2:	f04f 0000 	mov.w	r0, #0
    6ee6:	f380 8811 	msr	BASEPRI, r0
    6eea:	4770      	bx	lr
    6eec:	f3af 8000 	nop.w

00006ef0 <pxCurrentTCBConst2>:
    6ef0:	100002b0 	.word	0x100002b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6ef4:	bf00      	nop
    6ef6:	bf00      	nop

00006ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    6ef8:	4808      	ldr	r0, [pc, #32]	; (6f1c <prvPortStartFirstTask+0x24>)
    6efa:	6800      	ldr	r0, [r0, #0]
    6efc:	6800      	ldr	r0, [r0, #0]
    6efe:	f380 8808 	msr	MSP, r0
    6f02:	f04f 0000 	mov.w	r0, #0
    6f06:	f380 8814 	msr	CONTROL, r0
    6f0a:	b662      	cpsie	i
    6f0c:	b661      	cpsie	f
    6f0e:	f3bf 8f4f 	dsb	sy
    6f12:	f3bf 8f6f 	isb	sy
    6f16:	df00      	svc	0
    6f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    6f1a:	bf00      	nop
    6f1c:	e000ed08 	.word	0xe000ed08

00006f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6f20:	b580      	push	{r7, lr}
    6f22:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    6f24:	4b10      	ldr	r3, [pc, #64]	; (6f68 <xPortStartScheduler+0x48>)
    6f26:	681b      	ldr	r3, [r3, #0]
    6f28:	4a0f      	ldr	r2, [pc, #60]	; (6f68 <xPortStartScheduler+0x48>)
    6f2a:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    6f2e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    6f30:	4b0d      	ldr	r3, [pc, #52]	; (6f68 <xPortStartScheduler+0x48>)
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	4a0c      	ldr	r2, [pc, #48]	; (6f68 <xPortStartScheduler+0x48>)
    6f36:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    6f3a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    6f3c:	f7ff fe46 	bl	6bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    6f40:	4b0a      	ldr	r3, [pc, #40]	; (6f6c <xPortStartScheduler+0x4c>)
    6f42:	2200      	movs	r2, #0
    6f44:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    6f46:	f000 f89f 	bl	7088 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    6f4a:	4b09      	ldr	r3, [pc, #36]	; (6f70 <xPortStartScheduler+0x50>)
    6f4c:	681b      	ldr	r3, [r3, #0]
    6f4e:	4a08      	ldr	r2, [pc, #32]	; (6f70 <xPortStartScheduler+0x50>)
    6f50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6f54:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    6f56:	f7ff ffcf 	bl	6ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    6f5a:	f7fd f98d 	bl	4278 <vTaskSwitchContext>
	prvTaskExitError();
    6f5e:	f7ff ff9d 	bl	6e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
    6f62:	2300      	movs	r3, #0
}
    6f64:	4618      	mov	r0, r3
    6f66:	bd80      	pop	{r7, pc}
    6f68:	e000ed20 	.word	0xe000ed20
    6f6c:	10000090 	.word	0x10000090
    6f70:	e000ef34 	.word	0xe000ef34

00006f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    6f74:	b480      	push	{r7}
    6f76:	b083      	sub	sp, #12
    6f78:	af00      	add	r7, sp, #0
    6f7a:	f04f 0328 	mov.w	r3, #40	; 0x28
    6f7e:	f383 8811 	msr	BASEPRI, r3
    6f82:	f3bf 8f6f 	isb	sy
    6f86:	f3bf 8f4f 	dsb	sy
    6f8a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    6f8c:	4b05      	ldr	r3, [pc, #20]	; (6fa4 <vPortEnterCritical+0x30>)
    6f8e:	681b      	ldr	r3, [r3, #0]
    6f90:	3301      	adds	r3, #1
    6f92:	4a04      	ldr	r2, [pc, #16]	; (6fa4 <vPortEnterCritical+0x30>)
    6f94:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    6f96:	bf00      	nop
    6f98:	370c      	adds	r7, #12
    6f9a:	46bd      	mov	sp, r7
    6f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fa0:	4770      	bx	lr
    6fa2:	bf00      	nop
    6fa4:	10000090 	.word	0x10000090

00006fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    6fa8:	b480      	push	{r7}
    6faa:	b083      	sub	sp, #12
    6fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    6fae:	4b0a      	ldr	r3, [pc, #40]	; (6fd8 <vPortExitCritical+0x30>)
    6fb0:	681b      	ldr	r3, [r3, #0]
    6fb2:	3b01      	subs	r3, #1
    6fb4:	4a08      	ldr	r2, [pc, #32]	; (6fd8 <vPortExitCritical+0x30>)
    6fb6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    6fb8:	4b07      	ldr	r3, [pc, #28]	; (6fd8 <vPortExitCritical+0x30>)
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d104      	bne.n	6fca <vPortExitCritical+0x22>
    6fc0:	2300      	movs	r3, #0
    6fc2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    6fca:	bf00      	nop
    6fcc:	370c      	adds	r7, #12
    6fce:	46bd      	mov	sp, r7
    6fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd4:	4770      	bx	lr
    6fd6:	bf00      	nop
    6fd8:	10000090 	.word	0x10000090
    6fdc:	ffffffff 	.word	0xffffffff

00006fe0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6fe0:	f3ef 8009 	mrs	r0, PSP
    6fe4:	f3bf 8f6f 	isb	sy
    6fe8:	4b15      	ldr	r3, [pc, #84]	; (7040 <pxCurrentTCBConst>)
    6fea:	681a      	ldr	r2, [r3, #0]
    6fec:	f01e 0f10 	tst.w	lr, #16
    6ff0:	bf08      	it	eq
    6ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ffa:	6010      	str	r0, [r2, #0]
    6ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
    7000:	f04f 0028 	mov.w	r0, #40	; 0x28
    7004:	f380 8811 	msr	BASEPRI, r0
    7008:	f3bf 8f4f 	dsb	sy
    700c:	f3bf 8f6f 	isb	sy
    7010:	f7fd f932 	bl	4278 <vTaskSwitchContext>
    7014:	f04f 0000 	mov.w	r0, #0
    7018:	f380 8811 	msr	BASEPRI, r0
    701c:	bc09      	pop	{r0, r3}
    701e:	6819      	ldr	r1, [r3, #0]
    7020:	6808      	ldr	r0, [r1, #0]
    7022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7026:	f01e 0f10 	tst.w	lr, #16
    702a:	bf08      	it	eq
    702c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    7030:	f380 8809 	msr	PSP, r0
    7034:	f3bf 8f6f 	isb	sy
    7038:	4770      	bx	lr
    703a:	bf00      	nop
    703c:	f3af 8000 	nop.w

00007040 <pxCurrentTCBConst>:
    7040:	100002b0 	.word	0x100002b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    7044:	bf00      	nop
    7046:	bf00      	nop

00007048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    7048:	b580      	push	{r7, lr}
    704a:	b082      	sub	sp, #8
    704c:	af00      	add	r7, sp, #0
	__asm volatile
    704e:	f04f 0328 	mov.w	r3, #40	; 0x28
    7052:	f383 8811 	msr	BASEPRI, r3
    7056:	f3bf 8f6f 	isb	sy
    705a:	f3bf 8f4f 	dsb	sy
    705e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    7060:	f7fd f85e 	bl	4120 <xTaskIncrementTick>
    7064:	4603      	mov	r3, r0
    7066:	2b00      	cmp	r3, #0
    7068:	d003      	beq.n	7072 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    706a:	4b06      	ldr	r3, [pc, #24]	; (7084 <xPortSysTickHandler+0x3c>)
    706c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7070:	601a      	str	r2, [r3, #0]
    7072:	2300      	movs	r3, #0
    7074:	603b      	str	r3, [r7, #0]
	__asm volatile
    7076:	683b      	ldr	r3, [r7, #0]
    7078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    707c:	bf00      	nop
    707e:	3708      	adds	r7, #8
    7080:	46bd      	mov	sp, r7
    7082:	bd80      	pop	{r7, pc}
    7084:	e000ed04 	.word	0xe000ed04

00007088 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    7088:	f8df 000c 	ldr.w	r0, [pc, #12]	; 7098 <vPortEnableVFP+0x10>
    708c:	6801      	ldr	r1, [r0, #0]
    708e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    7092:	6001      	str	r1, [r0, #0]
    7094:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    7096:	bf00      	nop
    7098:	e000ed88 	.word	0xe000ed88

0000709c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    709c:	b480      	push	{r7}
    709e:	b083      	sub	sp, #12
    70a0:	af00      	add	r7, sp, #0
    70a2:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    70a4:	2350      	movs	r3, #80	; 0x50
    70a6:	4618      	mov	r0, r3
    70a8:	370c      	adds	r7, #12
    70aa:	46bd      	mov	sp, r7
    70ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    70b0:	4770      	bx	lr
    70b2:	Address 0x00000000000070b2 is out of bounds.


000070b4 <vApplicationGetIdleTaskMemory>:
static StackType_t idle_task_stack[configMINIMAL_STACK_SIZE];
extern "C" void vApplicationGetIdleTaskMemory(  // NOLINT
    StaticTask_t ** ppx_idle_task_tcb_buffer,
    StackType_t ** ppx_idle_task_stack_buffer,
    uint32_t * pul_idle_task_stack_size)
{
    70b4:	b580      	push	{r7, lr}
    70b6:	b084      	sub	sp, #16
    70b8:	af00      	add	r7, sp, #0
    70ba:	60f8      	str	r0, [r7, #12]
    70bc:	60b9      	str	r1, [r7, #8]
    70be:	607a      	str	r2, [r7, #4]
  *ppx_idle_task_tcb_buffer   = &idle_task_tcb;
    70c0:	68fb      	ldr	r3, [r7, #12]
    70c2:	4a07      	ldr	r2, [pc, #28]	; (70e0 <vApplicationGetIdleTaskMemory+0x2c>)
    70c4:	601a      	str	r2, [r3, #0]
  *ppx_idle_task_stack_buffer = idle_task_stack;
    70c6:	68bb      	ldr	r3, [r7, #8]
    70c8:	4a06      	ldr	r2, [pc, #24]	; (70e4 <vApplicationGetIdleTaskMemory+0x30>)
    70ca:	601a      	str	r2, [r3, #0]
  *pul_idle_task_stack_size   = std::size(idle_task_stack);
    70cc:	4805      	ldr	r0, [pc, #20]	; (70e4 <vApplicationGetIdleTaskMemory+0x30>)
    70ce:	f7ff ffe5 	bl	709c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>
    70d2:	4602      	mov	r2, r0
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	601a      	str	r2, [r3, #0]
}
    70d8:	bf00      	nop
    70da:	3710      	adds	r7, #16
    70dc:	46bd      	mov	sp, r7
    70de:	bd80      	pop	{r7, pc}
    70e0:	100003e0 	.word	0x100003e0
    70e4:	10000440 	.word	0x10000440

000070e8 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    70e8:	b480      	push	{r7}
    70ea:	b083      	sub	sp, #12
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    70f0:	f44f 7300 	mov.w	r3, #512	; 0x200
    70f4:	4618      	mov	r0, r3
    70f6:	370c      	adds	r7, #12
    70f8:	46bd      	mov	sp, r7
    70fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    70fe:	4770      	bx	lr

00007100 <vApplicationGetTimerTaskMemory>:
static StackType_t timer_task_stack[configTIMER_TASK_STACK_DEPTH];
extern "C" void vApplicationGetTimerTaskMemory( // NOLINT
    StaticTask_t ** ppx_timer_task_tcb_buffer,
    StackType_t ** ppx_timer_task_stack_buffer,
    uint32_t * pul_timer_task_stack_size)
{
    7100:	b580      	push	{r7, lr}
    7102:	b084      	sub	sp, #16
    7104:	af00      	add	r7, sp, #0
    7106:	60f8      	str	r0, [r7, #12]
    7108:	60b9      	str	r1, [r7, #8]
    710a:	607a      	str	r2, [r7, #4]
    *ppx_timer_task_tcb_buffer = &timer_task_tcb;
    710c:	68fb      	ldr	r3, [r7, #12]
    710e:	4a07      	ldr	r2, [pc, #28]	; (712c <vApplicationGetTimerTaskMemory+0x2c>)
    7110:	601a      	str	r2, [r3, #0]
    *ppx_timer_task_stack_buffer = timer_task_stack;
    7112:	68bb      	ldr	r3, [r7, #8]
    7114:	4a06      	ldr	r2, [pc, #24]	; (7130 <vApplicationGetTimerTaskMemory+0x30>)
    7116:	601a      	str	r2, [r3, #0]
    *pul_timer_task_stack_size = std::size(timer_task_stack);
    7118:	4805      	ldr	r0, [pc, #20]	; (7130 <vApplicationGetTimerTaskMemory+0x30>)
    711a:	f7ff ffe5 	bl	70e8 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>
    711e:	4602      	mov	r2, r0
    7120:	687b      	ldr	r3, [r7, #4]
    7122:	601a      	str	r2, [r3, #0]
}
    7124:	bf00      	nop
    7126:	3710      	adds	r7, #16
    7128:	46bd      	mov	sp, r7
    712a:	bd80      	pop	{r7, pc}
    712c:	10000580 	.word	0x10000580
    7130:	100005e0 	.word	0x100005e0

00007134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    7134:	b580      	push	{r7, lr}
    7136:	b088      	sub	sp, #32
    7138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    713a:	2300      	movs	r3, #0
    713c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    713e:	f000 fa5b 	bl	75f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    7142:	4b15      	ldr	r3, [pc, #84]	; (7198 <xTimerCreateTimerTask+0x64>)
    7144:	681b      	ldr	r3, [r3, #0]
    7146:	2b00      	cmp	r3, #0
    7148:	d020      	beq.n	718c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    714a:	2300      	movs	r3, #0
    714c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    714e:	2300      	movs	r3, #0
    7150:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    7152:	463a      	mov	r2, r7
    7154:	1d39      	adds	r1, r7, #4
    7156:	f107 0308 	add.w	r3, r7, #8
    715a:	4618      	mov	r0, r3
    715c:	f7ff ffd0 	bl	7100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    7160:	6839      	ldr	r1, [r7, #0]
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	68ba      	ldr	r2, [r7, #8]
    7166:	9202      	str	r2, [sp, #8]
    7168:	9301      	str	r3, [sp, #4]
    716a:	2304      	movs	r3, #4
    716c:	9300      	str	r3, [sp, #0]
    716e:	2300      	movs	r3, #0
    7170:	460a      	mov	r2, r1
    7172:	490a      	ldr	r1, [pc, #40]	; (719c <xTimerCreateTimerTask+0x68>)
    7174:	480a      	ldr	r0, [pc, #40]	; (71a0 <xTimerCreateTimerTask+0x6c>)
    7176:	f7fc fd4f 	bl	3c18 <xTaskCreateStatic>
    717a:	4602      	mov	r2, r0
    717c:	4b09      	ldr	r3, [pc, #36]	; (71a4 <xTimerCreateTimerTask+0x70>)
    717e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    7180:	4b08      	ldr	r3, [pc, #32]	; (71a4 <xTimerCreateTimerTask+0x70>)
    7182:	681b      	ldr	r3, [r3, #0]
    7184:	2b00      	cmp	r3, #0
    7186:	d001      	beq.n	718c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
    7188:	2301      	movs	r3, #1
    718a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    718c:	68fb      	ldr	r3, [r7, #12]
}
    718e:	4618      	mov	r0, r3
    7190:	3710      	adds	r7, #16
    7192:	46bd      	mov	sp, r7
    7194:	bd80      	pop	{r7, pc}
    7196:	bf00      	nop
    7198:	10000e10 	.word	0x10000e10
    719c:	0000ae34 	.word	0x0000ae34
    71a0:	0000728d 	.word	0x0000728d
    71a4:	10000e14 	.word	0x10000e14

000071a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    71a8:	b580      	push	{r7, lr}
    71aa:	b088      	sub	sp, #32
    71ac:	af00      	add	r7, sp, #0
    71ae:	60f8      	str	r0, [r7, #12]
    71b0:	60b9      	str	r1, [r7, #8]
    71b2:	607a      	str	r2, [r7, #4]
    71b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    71b6:	2300      	movs	r3, #0
    71b8:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    71ba:	4b1a      	ldr	r3, [pc, #104]	; (7224 <xTimerGenericCommand+0x7c>)
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	2b00      	cmp	r3, #0
    71c0:	d02a      	beq.n	7218 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    71c2:	68bb      	ldr	r3, [r7, #8]
    71c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    71c6:	687b      	ldr	r3, [r7, #4]
    71c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    71ca:	68fb      	ldr	r3, [r7, #12]
    71cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    71ce:	68bb      	ldr	r3, [r7, #8]
    71d0:	2b05      	cmp	r3, #5
    71d2:	dc18      	bgt.n	7206 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    71d4:	f7fd fa5a 	bl	468c <xTaskGetSchedulerState>
    71d8:	4603      	mov	r3, r0
    71da:	2b02      	cmp	r3, #2
    71dc:	d109      	bne.n	71f2 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    71de:	4b11      	ldr	r3, [pc, #68]	; (7224 <xTimerGenericCommand+0x7c>)
    71e0:	6818      	ldr	r0, [r3, #0]
    71e2:	f107 0110 	add.w	r1, r7, #16
    71e6:	2300      	movs	r3, #0
    71e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    71ea:	f7fd fc03 	bl	49f4 <xQueueGenericSend>
    71ee:	61f8      	str	r0, [r7, #28]
    71f0:	e012      	b.n	7218 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    71f2:	4b0c      	ldr	r3, [pc, #48]	; (7224 <xTimerGenericCommand+0x7c>)
    71f4:	6818      	ldr	r0, [r3, #0]
    71f6:	f107 0110 	add.w	r1, r7, #16
    71fa:	2300      	movs	r3, #0
    71fc:	2200      	movs	r2, #0
    71fe:	f7fd fbf9 	bl	49f4 <xQueueGenericSend>
    7202:	61f8      	str	r0, [r7, #28]
    7204:	e008      	b.n	7218 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    7206:	4b07      	ldr	r3, [pc, #28]	; (7224 <xTimerGenericCommand+0x7c>)
    7208:	6818      	ldr	r0, [r3, #0]
    720a:	f107 0110 	add.w	r1, r7, #16
    720e:	2300      	movs	r3, #0
    7210:	683a      	ldr	r2, [r7, #0]
    7212:	f7fd fc99 	bl	4b48 <xQueueGenericSendFromISR>
    7216:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    7218:	69fb      	ldr	r3, [r7, #28]
}
    721a:	4618      	mov	r0, r3
    721c:	3720      	adds	r7, #32
    721e:	46bd      	mov	sp, r7
    7220:	bd80      	pop	{r7, pc}
    7222:	bf00      	nop
    7224:	10000e10 	.word	0x10000e10

00007228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    7228:	b580      	push	{r7, lr}
    722a:	b086      	sub	sp, #24
    722c:	af02      	add	r7, sp, #8
    722e:	6078      	str	r0, [r7, #4]
    7230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    7232:	4b15      	ldr	r3, [pc, #84]	; (7288 <prvProcessExpiredTimer+0x60>)
    7234:	681b      	ldr	r3, [r3, #0]
    7236:	68db      	ldr	r3, [r3, #12]
    7238:	68db      	ldr	r3, [r3, #12]
    723a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    723c:	68fb      	ldr	r3, [r7, #12]
    723e:	3304      	adds	r3, #4
    7240:	4618      	mov	r0, r3
    7242:	f7fc fcbf 	bl	3bc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    7246:	68fb      	ldr	r3, [r7, #12]
    7248:	69db      	ldr	r3, [r3, #28]
    724a:	2b01      	cmp	r3, #1
    724c:	d114      	bne.n	7278 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    724e:	68fb      	ldr	r3, [r7, #12]
    7250:	699a      	ldr	r2, [r3, #24]
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	18d1      	adds	r1, r2, r3
    7256:	687b      	ldr	r3, [r7, #4]
    7258:	683a      	ldr	r2, [r7, #0]
    725a:	68f8      	ldr	r0, [r7, #12]
    725c:	f000 f8ba 	bl	73d4 <prvInsertTimerInActiveList>
    7260:	4603      	mov	r3, r0
    7262:	2b00      	cmp	r3, #0
    7264:	d008      	beq.n	7278 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    7266:	2300      	movs	r3, #0
    7268:	9300      	str	r3, [sp, #0]
    726a:	2300      	movs	r3, #0
    726c:	687a      	ldr	r2, [r7, #4]
    726e:	2100      	movs	r1, #0
    7270:	68f8      	ldr	r0, [r7, #12]
    7272:	f7ff ff99 	bl	71a8 <xTimerGenericCommand>
    7276:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    7278:	68fb      	ldr	r3, [r7, #12]
    727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    727c:	68f8      	ldr	r0, [r7, #12]
    727e:	4798      	blx	r3
}
    7280:	bf00      	nop
    7282:	3710      	adds	r7, #16
    7284:	46bd      	mov	sp, r7
    7286:	bd80      	pop	{r7, pc}
    7288:	10000e08 	.word	0x10000e08

0000728c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    728c:	b580      	push	{r7, lr}
    728e:	b084      	sub	sp, #16
    7290:	af00      	add	r7, sp, #0
    7292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    7294:	f107 0308 	add.w	r3, r7, #8
    7298:	4618      	mov	r0, r3
    729a:	f000 f857 	bl	734c <prvGetNextExpireTime>
    729e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    72a0:	68bb      	ldr	r3, [r7, #8]
    72a2:	4619      	mov	r1, r3
    72a4:	68f8      	ldr	r0, [r7, #12]
    72a6:	f000 f803 	bl	72b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    72aa:	f000 f8d5 	bl	7458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    72ae:	e7f1      	b.n	7294 <prvTimerTask+0x8>

000072b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    72b0:	b580      	push	{r7, lr}
    72b2:	b084      	sub	sp, #16
    72b4:	af00      	add	r7, sp, #0
    72b6:	6078      	str	r0, [r7, #4]
    72b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    72ba:	f7fc fe85 	bl	3fc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    72be:	f107 0308 	add.w	r3, r7, #8
    72c2:	4618      	mov	r0, r3
    72c4:	f000 f866 	bl	7394 <prvSampleTimeNow>
    72c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    72ca:	68bb      	ldr	r3, [r7, #8]
    72cc:	2b00      	cmp	r3, #0
    72ce:	d130      	bne.n	7332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    72d0:	683b      	ldr	r3, [r7, #0]
    72d2:	2b00      	cmp	r3, #0
    72d4:	d10a      	bne.n	72ec <prvProcessTimerOrBlockTask+0x3c>
    72d6:	687a      	ldr	r2, [r7, #4]
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	429a      	cmp	r2, r3
    72dc:	d806      	bhi.n	72ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    72de:	f7fc fe81 	bl	3fe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    72e2:	68f9      	ldr	r1, [r7, #12]
    72e4:	6878      	ldr	r0, [r7, #4]
    72e6:	f7ff ff9f 	bl	7228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    72ea:	e024      	b.n	7336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    72ec:	683b      	ldr	r3, [r7, #0]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d008      	beq.n	7304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    72f2:	4b13      	ldr	r3, [pc, #76]	; (7340 <prvProcessTimerOrBlockTask+0x90>)
    72f4:	681b      	ldr	r3, [r3, #0]
    72f6:	681b      	ldr	r3, [r3, #0]
    72f8:	2b00      	cmp	r3, #0
    72fa:	bf0c      	ite	eq
    72fc:	2301      	moveq	r3, #1
    72fe:	2300      	movne	r3, #0
    7300:	b2db      	uxtb	r3, r3
    7302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    7304:	4b0f      	ldr	r3, [pc, #60]	; (7344 <prvProcessTimerOrBlockTask+0x94>)
    7306:	6818      	ldr	r0, [r3, #0]
    7308:	687a      	ldr	r2, [r7, #4]
    730a:	68fb      	ldr	r3, [r7, #12]
    730c:	1ad3      	subs	r3, r2, r3
    730e:	683a      	ldr	r2, [r7, #0]
    7310:	4619      	mov	r1, r3
    7312:	f7fd fe4d 	bl	4fb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    7316:	f7fc fe65 	bl	3fe4 <xTaskResumeAll>
    731a:	4603      	mov	r3, r0
    731c:	2b00      	cmp	r3, #0
    731e:	d10a      	bne.n	7336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    7320:	4b09      	ldr	r3, [pc, #36]	; (7348 <prvProcessTimerOrBlockTask+0x98>)
    7322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7326:	601a      	str	r2, [r3, #0]
    7328:	f3bf 8f4f 	dsb	sy
    732c:	f3bf 8f6f 	isb	sy
}
    7330:	e001      	b.n	7336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    7332:	f7fc fe57 	bl	3fe4 <xTaskResumeAll>
}
    7336:	bf00      	nop
    7338:	3710      	adds	r7, #16
    733a:	46bd      	mov	sp, r7
    733c:	bd80      	pop	{r7, pc}
    733e:	bf00      	nop
    7340:	10000e0c 	.word	0x10000e0c
    7344:	10000e10 	.word	0x10000e10
    7348:	e000ed04 	.word	0xe000ed04

0000734c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    734c:	b480      	push	{r7}
    734e:	b085      	sub	sp, #20
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    7354:	4b0e      	ldr	r3, [pc, #56]	; (7390 <prvGetNextExpireTime+0x44>)
    7356:	681b      	ldr	r3, [r3, #0]
    7358:	681b      	ldr	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	bf0c      	ite	eq
    735e:	2301      	moveq	r3, #1
    7360:	2300      	movne	r3, #0
    7362:	b2db      	uxtb	r3, r3
    7364:	461a      	mov	r2, r3
    7366:	687b      	ldr	r3, [r7, #4]
    7368:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	681b      	ldr	r3, [r3, #0]
    736e:	2b00      	cmp	r3, #0
    7370:	d105      	bne.n	737e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    7372:	4b07      	ldr	r3, [pc, #28]	; (7390 <prvGetNextExpireTime+0x44>)
    7374:	681b      	ldr	r3, [r3, #0]
    7376:	68db      	ldr	r3, [r3, #12]
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	60fb      	str	r3, [r7, #12]
    737c:	e001      	b.n	7382 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    737e:	2300      	movs	r3, #0
    7380:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    7382:	68fb      	ldr	r3, [r7, #12]
}
    7384:	4618      	mov	r0, r3
    7386:	3714      	adds	r7, #20
    7388:	46bd      	mov	sp, r7
    738a:	f85d 7b04 	ldr.w	r7, [sp], #4
    738e:	4770      	bx	lr
    7390:	10000e08 	.word	0x10000e08

00007394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    7394:	b580      	push	{r7, lr}
    7396:	b084      	sub	sp, #16
    7398:	af00      	add	r7, sp, #0
    739a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    739c:	f7fc feb0 	bl	4100 <xTaskGetTickCount>
    73a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    73a2:	4b0b      	ldr	r3, [pc, #44]	; (73d0 <prvSampleTimeNow+0x3c>)
    73a4:	681b      	ldr	r3, [r3, #0]
    73a6:	68fa      	ldr	r2, [r7, #12]
    73a8:	429a      	cmp	r2, r3
    73aa:	d205      	bcs.n	73b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    73ac:	f000 f8d0 	bl	7550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	2201      	movs	r2, #1
    73b4:	601a      	str	r2, [r3, #0]
    73b6:	e002      	b.n	73be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	2200      	movs	r2, #0
    73bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    73be:	4a04      	ldr	r2, [pc, #16]	; (73d0 <prvSampleTimeNow+0x3c>)
    73c0:	68fb      	ldr	r3, [r7, #12]
    73c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    73c4:	68fb      	ldr	r3, [r7, #12]
}
    73c6:	4618      	mov	r0, r3
    73c8:	3710      	adds	r7, #16
    73ca:	46bd      	mov	sp, r7
    73cc:	bd80      	pop	{r7, pc}
    73ce:	bf00      	nop
    73d0:	10000e18 	.word	0x10000e18

000073d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    73d4:	b580      	push	{r7, lr}
    73d6:	b086      	sub	sp, #24
    73d8:	af00      	add	r7, sp, #0
    73da:	60f8      	str	r0, [r7, #12]
    73dc:	60b9      	str	r1, [r7, #8]
    73de:	607a      	str	r2, [r7, #4]
    73e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    73e2:	2300      	movs	r3, #0
    73e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    73e6:	68fb      	ldr	r3, [r7, #12]
    73e8:	68ba      	ldr	r2, [r7, #8]
    73ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    73ec:	68fb      	ldr	r3, [r7, #12]
    73ee:	68fa      	ldr	r2, [r7, #12]
    73f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    73f2:	68ba      	ldr	r2, [r7, #8]
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	429a      	cmp	r2, r3
    73f8:	d812      	bhi.n	7420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    73fa:	687a      	ldr	r2, [r7, #4]
    73fc:	683b      	ldr	r3, [r7, #0]
    73fe:	1ad2      	subs	r2, r2, r3
    7400:	68fb      	ldr	r3, [r7, #12]
    7402:	699b      	ldr	r3, [r3, #24]
    7404:	429a      	cmp	r2, r3
    7406:	d302      	bcc.n	740e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    7408:	2301      	movs	r3, #1
    740a:	617b      	str	r3, [r7, #20]
    740c:	e01b      	b.n	7446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    740e:	4b10      	ldr	r3, [pc, #64]	; (7450 <prvInsertTimerInActiveList+0x7c>)
    7410:	681a      	ldr	r2, [r3, #0]
    7412:	68fb      	ldr	r3, [r7, #12]
    7414:	3304      	adds	r3, #4
    7416:	4619      	mov	r1, r3
    7418:	4610      	mov	r0, r2
    741a:	f7fc fb9a 	bl	3b52 <vListInsert>
    741e:	e012      	b.n	7446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    7420:	687a      	ldr	r2, [r7, #4]
    7422:	683b      	ldr	r3, [r7, #0]
    7424:	429a      	cmp	r2, r3
    7426:	d206      	bcs.n	7436 <prvInsertTimerInActiveList+0x62>
    7428:	68ba      	ldr	r2, [r7, #8]
    742a:	683b      	ldr	r3, [r7, #0]
    742c:	429a      	cmp	r2, r3
    742e:	d302      	bcc.n	7436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    7430:	2301      	movs	r3, #1
    7432:	617b      	str	r3, [r7, #20]
    7434:	e007      	b.n	7446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    7436:	4b07      	ldr	r3, [pc, #28]	; (7454 <prvInsertTimerInActiveList+0x80>)
    7438:	681a      	ldr	r2, [r3, #0]
    743a:	68fb      	ldr	r3, [r7, #12]
    743c:	3304      	adds	r3, #4
    743e:	4619      	mov	r1, r3
    7440:	4610      	mov	r0, r2
    7442:	f7fc fb86 	bl	3b52 <vListInsert>
		}
	}

	return xProcessTimerNow;
    7446:	697b      	ldr	r3, [r7, #20]
}
    7448:	4618      	mov	r0, r3
    744a:	3718      	adds	r7, #24
    744c:	46bd      	mov	sp, r7
    744e:	bd80      	pop	{r7, pc}
    7450:	10000e0c 	.word	0x10000e0c
    7454:	10000e08 	.word	0x10000e08

00007458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    7458:	b580      	push	{r7, lr}
    745a:	b08a      	sub	sp, #40	; 0x28
    745c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    745e:	e065      	b.n	752c <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    7460:	68bb      	ldr	r3, [r7, #8]
    7462:	2b00      	cmp	r3, #0
    7464:	db61      	blt.n	752a <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    7466:	693b      	ldr	r3, [r7, #16]
    7468:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    746a:	69fb      	ldr	r3, [r7, #28]
    746c:	695b      	ldr	r3, [r3, #20]
    746e:	2b00      	cmp	r3, #0
    7470:	d004      	beq.n	747c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    7472:	69fb      	ldr	r3, [r7, #28]
    7474:	3304      	adds	r3, #4
    7476:	4618      	mov	r0, r3
    7478:	f7fc fba4 	bl	3bc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    747c:	1d3b      	adds	r3, r7, #4
    747e:	4618      	mov	r0, r3
    7480:	f7ff ff88 	bl	7394 <prvSampleTimeNow>
    7484:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
    7486:	68bb      	ldr	r3, [r7, #8]
    7488:	2b09      	cmp	r3, #9
    748a:	d84f      	bhi.n	752c <prvProcessReceivedCommands+0xd4>
    748c:	a201      	add	r2, pc, #4	; (adr r2, 7494 <prvProcessReceivedCommands+0x3c>)
    748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7492:	bf00      	nop
    7494:	000074bd 	.word	0x000074bd
    7498:	000074bd 	.word	0x000074bd
    749c:	000074bd 	.word	0x000074bd
    74a0:	0000752d 	.word	0x0000752d
    74a4:	000074ff 	.word	0x000074ff
    74a8:	00007519 	.word	0x00007519
    74ac:	000074bd 	.word	0x000074bd
    74b0:	000074bd 	.word	0x000074bd
    74b4:	0000752d 	.word	0x0000752d
    74b8:	000074ff 	.word	0x000074ff
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    74bc:	68fa      	ldr	r2, [r7, #12]
    74be:	69fb      	ldr	r3, [r7, #28]
    74c0:	699b      	ldr	r3, [r3, #24]
    74c2:	18d1      	adds	r1, r2, r3
    74c4:	68fb      	ldr	r3, [r7, #12]
    74c6:	69ba      	ldr	r2, [r7, #24]
    74c8:	69f8      	ldr	r0, [r7, #28]
    74ca:	f7ff ff83 	bl	73d4 <prvInsertTimerInActiveList>
    74ce:	4603      	mov	r3, r0
    74d0:	2b00      	cmp	r3, #0
    74d2:	d02b      	beq.n	752c <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    74d4:	69fb      	ldr	r3, [r7, #28]
    74d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    74d8:	69f8      	ldr	r0, [r7, #28]
    74da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    74dc:	69fb      	ldr	r3, [r7, #28]
    74de:	69db      	ldr	r3, [r3, #28]
    74e0:	2b01      	cmp	r3, #1
    74e2:	d123      	bne.n	752c <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    74e4:	68fa      	ldr	r2, [r7, #12]
    74e6:	69fb      	ldr	r3, [r7, #28]
    74e8:	699b      	ldr	r3, [r3, #24]
    74ea:	441a      	add	r2, r3
    74ec:	2300      	movs	r3, #0
    74ee:	9300      	str	r3, [sp, #0]
    74f0:	2300      	movs	r3, #0
    74f2:	2100      	movs	r1, #0
    74f4:	69f8      	ldr	r0, [r7, #28]
    74f6:	f7ff fe57 	bl	71a8 <xTimerGenericCommand>
    74fa:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    74fc:	e016      	b.n	752c <prvProcessReceivedCommands+0xd4>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    74fe:	68fa      	ldr	r2, [r7, #12]
    7500:	69fb      	ldr	r3, [r7, #28]
    7502:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    7504:	69fb      	ldr	r3, [r7, #28]
    7506:	699a      	ldr	r2, [r3, #24]
    7508:	69bb      	ldr	r3, [r7, #24]
    750a:	18d1      	adds	r1, r2, r3
    750c:	69bb      	ldr	r3, [r7, #24]
    750e:	69ba      	ldr	r2, [r7, #24]
    7510:	69f8      	ldr	r0, [r7, #28]
    7512:	f7ff ff5f 	bl	73d4 <prvInsertTimerInActiveList>
					break;
    7516:	e009      	b.n	752c <prvProcessReceivedCommands+0xd4>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    7518:	69fb      	ldr	r3, [r7, #28]
    751a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    751e:	2b00      	cmp	r3, #0
    7520:	d104      	bne.n	752c <prvProcessReceivedCommands+0xd4>
						{
							vPortFree( pxTimer );
    7522:	69f8      	ldr	r0, [r7, #28]
    7524:	f7fd fd8a 	bl	503c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    7528:	e000      	b.n	752c <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    752a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    752c:	4b07      	ldr	r3, [pc, #28]	; (754c <prvProcessReceivedCommands+0xf4>)
    752e:	681b      	ldr	r3, [r3, #0]
    7530:	f107 0108 	add.w	r1, r7, #8
    7534:	2200      	movs	r2, #0
    7536:	4618      	mov	r0, r3
    7538:	f7fd fb60 	bl	4bfc <xQueueReceive>
    753c:	4603      	mov	r3, r0
    753e:	2b00      	cmp	r3, #0
    7540:	d18e      	bne.n	7460 <prvProcessReceivedCommands+0x8>
	}
}
    7542:	bf00      	nop
    7544:	3720      	adds	r7, #32
    7546:	46bd      	mov	sp, r7
    7548:	bd80      	pop	{r7, pc}
    754a:	bf00      	nop
    754c:	10000e10 	.word	0x10000e10

00007550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    7550:	b580      	push	{r7, lr}
    7552:	b088      	sub	sp, #32
    7554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    7556:	e037      	b.n	75c8 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    7558:	4b25      	ldr	r3, [pc, #148]	; (75f0 <prvSwitchTimerLists+0xa0>)
    755a:	681b      	ldr	r3, [r3, #0]
    755c:	68db      	ldr	r3, [r3, #12]
    755e:	681b      	ldr	r3, [r3, #0]
    7560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    7562:	4b23      	ldr	r3, [pc, #140]	; (75f0 <prvSwitchTimerLists+0xa0>)
    7564:	681b      	ldr	r3, [r3, #0]
    7566:	68db      	ldr	r3, [r3, #12]
    7568:	68db      	ldr	r3, [r3, #12]
    756a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    756c:	68fb      	ldr	r3, [r7, #12]
    756e:	3304      	adds	r3, #4
    7570:	4618      	mov	r0, r3
    7572:	f7fc fb27 	bl	3bc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    7576:	68fb      	ldr	r3, [r7, #12]
    7578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    757a:	68f8      	ldr	r0, [r7, #12]
    757c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    757e:	68fb      	ldr	r3, [r7, #12]
    7580:	69db      	ldr	r3, [r3, #28]
    7582:	2b01      	cmp	r3, #1
    7584:	d120      	bne.n	75c8 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    7586:	68fb      	ldr	r3, [r7, #12]
    7588:	699b      	ldr	r3, [r3, #24]
    758a:	693a      	ldr	r2, [r7, #16]
    758c:	4413      	add	r3, r2
    758e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    7590:	68ba      	ldr	r2, [r7, #8]
    7592:	693b      	ldr	r3, [r7, #16]
    7594:	429a      	cmp	r2, r3
    7596:	d90e      	bls.n	75b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    7598:	68fb      	ldr	r3, [r7, #12]
    759a:	68ba      	ldr	r2, [r7, #8]
    759c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    759e:	68fb      	ldr	r3, [r7, #12]
    75a0:	68fa      	ldr	r2, [r7, #12]
    75a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    75a4:	4b12      	ldr	r3, [pc, #72]	; (75f0 <prvSwitchTimerLists+0xa0>)
    75a6:	681a      	ldr	r2, [r3, #0]
    75a8:	68fb      	ldr	r3, [r7, #12]
    75aa:	3304      	adds	r3, #4
    75ac:	4619      	mov	r1, r3
    75ae:	4610      	mov	r0, r2
    75b0:	f7fc facf 	bl	3b52 <vListInsert>
    75b4:	e008      	b.n	75c8 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    75b6:	2300      	movs	r3, #0
    75b8:	9300      	str	r3, [sp, #0]
    75ba:	2300      	movs	r3, #0
    75bc:	693a      	ldr	r2, [r7, #16]
    75be:	2100      	movs	r1, #0
    75c0:	68f8      	ldr	r0, [r7, #12]
    75c2:	f7ff fdf1 	bl	71a8 <xTimerGenericCommand>
    75c6:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    75c8:	4b09      	ldr	r3, [pc, #36]	; (75f0 <prvSwitchTimerLists+0xa0>)
    75ca:	681b      	ldr	r3, [r3, #0]
    75cc:	681b      	ldr	r3, [r3, #0]
    75ce:	2b00      	cmp	r3, #0
    75d0:	d1c2      	bne.n	7558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    75d2:	4b07      	ldr	r3, [pc, #28]	; (75f0 <prvSwitchTimerLists+0xa0>)
    75d4:	681b      	ldr	r3, [r3, #0]
    75d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    75d8:	4b06      	ldr	r3, [pc, #24]	; (75f4 <prvSwitchTimerLists+0xa4>)
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	4a04      	ldr	r2, [pc, #16]	; (75f0 <prvSwitchTimerLists+0xa0>)
    75de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    75e0:	4a04      	ldr	r2, [pc, #16]	; (75f4 <prvSwitchTimerLists+0xa4>)
    75e2:	697b      	ldr	r3, [r7, #20]
    75e4:	6013      	str	r3, [r2, #0]
}
    75e6:	bf00      	nop
    75e8:	3718      	adds	r7, #24
    75ea:	46bd      	mov	sp, r7
    75ec:	bd80      	pop	{r7, pc}
    75ee:	bf00      	nop
    75f0:	10000e08 	.word	0x10000e08
    75f4:	10000e0c 	.word	0x10000e0c

000075f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    75f8:	b580      	push	{r7, lr}
    75fa:	b082      	sub	sp, #8
    75fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    75fe:	f7ff fcb9 	bl	6f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    7602:	4b15      	ldr	r3, [pc, #84]	; (7658 <prvCheckForValidListAndQueue+0x60>)
    7604:	681b      	ldr	r3, [r3, #0]
    7606:	2b00      	cmp	r3, #0
    7608:	d120      	bne.n	764c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    760a:	4814      	ldr	r0, [pc, #80]	; (765c <prvCheckForValidListAndQueue+0x64>)
    760c:	f7fc fa50 	bl	3ab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    7610:	4813      	ldr	r0, [pc, #76]	; (7660 <prvCheckForValidListAndQueue+0x68>)
    7612:	f7fc fa4d 	bl	3ab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    7616:	4b13      	ldr	r3, [pc, #76]	; (7664 <prvCheckForValidListAndQueue+0x6c>)
    7618:	4a10      	ldr	r2, [pc, #64]	; (765c <prvCheckForValidListAndQueue+0x64>)
    761a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    761c:	4b12      	ldr	r3, [pc, #72]	; (7668 <prvCheckForValidListAndQueue+0x70>)
    761e:	4a10      	ldr	r2, [pc, #64]	; (7660 <prvCheckForValidListAndQueue+0x68>)
    7620:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    7622:	2300      	movs	r3, #0
    7624:	9300      	str	r3, [sp, #0]
    7626:	4b11      	ldr	r3, [pc, #68]	; (766c <prvCheckForValidListAndQueue+0x74>)
    7628:	4a11      	ldr	r2, [pc, #68]	; (7670 <prvCheckForValidListAndQueue+0x78>)
    762a:	210c      	movs	r1, #12
    762c:	200a      	movs	r0, #10
    762e:	f7fd f96f 	bl	4910 <xQueueGenericCreateStatic>
    7632:	4602      	mov	r2, r0
    7634:	4b08      	ldr	r3, [pc, #32]	; (7658 <prvCheckForValidListAndQueue+0x60>)
    7636:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    7638:	4b07      	ldr	r3, [pc, #28]	; (7658 <prvCheckForValidListAndQueue+0x60>)
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	2b00      	cmp	r3, #0
    763e:	d005      	beq.n	764c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    7640:	4b05      	ldr	r3, [pc, #20]	; (7658 <prvCheckForValidListAndQueue+0x60>)
    7642:	681b      	ldr	r3, [r3, #0]
    7644:	490b      	ldr	r1, [pc, #44]	; (7674 <prvCheckForValidListAndQueue+0x7c>)
    7646:	4618      	mov	r0, r3
    7648:	f7fd fc8a 	bl	4f60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    764c:	f7ff fcac 	bl	6fa8 <vPortExitCritical>
}
    7650:	bf00      	nop
    7652:	46bd      	mov	sp, r7
    7654:	bd80      	pop	{r7, pc}
    7656:	bf00      	nop
    7658:	10000e10 	.word	0x10000e10
    765c:	10000de0 	.word	0x10000de0
    7660:	10000df4 	.word	0x10000df4
    7664:	10000e08 	.word	0x10000e08
    7668:	10000e0c 	.word	0x10000e0c
    766c:	10000e94 	.word	0x10000e94
    7670:	10000e1c 	.word	0x10000e1c
    7674:	0000ae3c 	.word	0x0000ae3c

00007678 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    7678:	b480      	push	{r7}
    767a:	b083      	sub	sp, #12
    767c:	af00      	add	r7, sp, #0
    767e:	6078      	str	r0, [r7, #4]
    7680:	6039      	str	r1, [r7, #0]
  return 1;
    7682:	2301      	movs	r3, #1
}
    7684:	4618      	mov	r0, r3
    7686:	370c      	adds	r7, #12
    7688:	46bd      	mov	sp, r7
    768a:	f85d 7b04 	ldr.w	r7, [sp], #4
    768e:	4770      	bx	lr

00007690 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    7690:	b480      	push	{r7}
    7692:	b083      	sub	sp, #12
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
    7698:	6039      	str	r1, [r7, #0]
  return 0;
    769a:	2300      	movs	r3, #0
}
    769c:	4618      	mov	r0, r3
    769e:	370c      	adds	r7, #12
    76a0:	46bd      	mov	sp, r7
    76a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    76a6:	4770      	bx	lr

000076a8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    76a8:	b480      	push	{r7}
    76aa:	b083      	sub	sp, #12
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    76b0:	4a04      	ldr	r2, [pc, #16]	; (76c4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	6013      	str	r3, [r2, #0]
}
    76b6:	bf00      	nop
    76b8:	370c      	adds	r7, #12
    76ba:	46bd      	mov	sp, r7
    76bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    76c0:	4770      	bx	lr
    76c2:	bf00      	nop
    76c4:	10000060 	.word	0x10000060

000076c8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    76c8:	b480      	push	{r7}
    76ca:	b083      	sub	sp, #12
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    76d0:	4a04      	ldr	r2, [pc, #16]	; (76e4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	6013      	str	r3, [r2, #0]
}
    76d6:	bf00      	nop
    76d8:	370c      	adds	r7, #12
    76da:	46bd      	mov	sp, r7
    76dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    76e0:	4770      	bx	lr
    76e2:	bf00      	nop
    76e4:	10000064 	.word	0x10000064

000076e8 <__cxa_pure_virtual>:
    76e8:	b508      	push	{r3, lr}
    76ea:	f000 f80d 	bl	7708 <std::terminate()>

000076ee <__cxxabiv1::__terminate(void (*)())>:
    76ee:	b508      	push	{r3, lr}
    76f0:	4780      	blx	r0
    76f2:	f001 fc2f 	bl	8f54 <abort>
    76f6:	Address 0x00000000000076f6 is out of bounds.


000076f8 <std::get_terminate()>:
    76f8:	4b02      	ldr	r3, [pc, #8]	; (7704 <std::get_terminate()+0xc>)
    76fa:	6818      	ldr	r0, [r3, #0]
    76fc:	f3bf 8f5b 	dmb	ish
    7700:	4770      	bx	lr
    7702:	bf00      	nop
    7704:	10000094 	.word	0x10000094

00007708 <std::terminate()>:
    7708:	b508      	push	{r3, lr}
    770a:	f7ff fff5 	bl	76f8 <std::get_terminate()>
    770e:	f7ff ffee 	bl	76ee <__cxxabiv1::__terminate(void (*)())>
    7712:	Address 0x0000000000007712 is out of bounds.


00007714 <__aeabi_drsub>:
    7714:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    7718:	e002      	b.n	7720 <__adddf3>
    771a:	bf00      	nop

0000771c <__aeabi_dsub>:
    771c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00007720 <__adddf3>:
    7720:	b530      	push	{r4, r5, lr}
    7722:	ea4f 0441 	mov.w	r4, r1, lsl #1
    7726:	ea4f 0543 	mov.w	r5, r3, lsl #1
    772a:	ea94 0f05 	teq	r4, r5
    772e:	bf08      	it	eq
    7730:	ea90 0f02 	teqeq	r0, r2
    7734:	bf1f      	itttt	ne
    7736:	ea54 0c00 	orrsne.w	ip, r4, r0
    773a:	ea55 0c02 	orrsne.w	ip, r5, r2
    773e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    7742:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7746:	f000 80e2 	beq.w	790e <__adddf3+0x1ee>
    774a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    774e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    7752:	bfb8      	it	lt
    7754:	426d      	neglt	r5, r5
    7756:	dd0c      	ble.n	7772 <__adddf3+0x52>
    7758:	442c      	add	r4, r5
    775a:	ea80 0202 	eor.w	r2, r0, r2
    775e:	ea81 0303 	eor.w	r3, r1, r3
    7762:	ea82 0000 	eor.w	r0, r2, r0
    7766:	ea83 0101 	eor.w	r1, r3, r1
    776a:	ea80 0202 	eor.w	r2, r0, r2
    776e:	ea81 0303 	eor.w	r3, r1, r3
    7772:	2d36      	cmp	r5, #54	; 0x36
    7774:	bf88      	it	hi
    7776:	bd30      	pophi	{r4, r5, pc}
    7778:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    777c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    7780:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    7784:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    7788:	d002      	beq.n	7790 <__adddf3+0x70>
    778a:	4240      	negs	r0, r0
    778c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7790:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    7794:	ea4f 3303 	mov.w	r3, r3, lsl #12
    7798:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    779c:	d002      	beq.n	77a4 <__adddf3+0x84>
    779e:	4252      	negs	r2, r2
    77a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    77a4:	ea94 0f05 	teq	r4, r5
    77a8:	f000 80a7 	beq.w	78fa <__adddf3+0x1da>
    77ac:	f1a4 0401 	sub.w	r4, r4, #1
    77b0:	f1d5 0e20 	rsbs	lr, r5, #32
    77b4:	db0d      	blt.n	77d2 <__adddf3+0xb2>
    77b6:	fa02 fc0e 	lsl.w	ip, r2, lr
    77ba:	fa22 f205 	lsr.w	r2, r2, r5
    77be:	1880      	adds	r0, r0, r2
    77c0:	f141 0100 	adc.w	r1, r1, #0
    77c4:	fa03 f20e 	lsl.w	r2, r3, lr
    77c8:	1880      	adds	r0, r0, r2
    77ca:	fa43 f305 	asr.w	r3, r3, r5
    77ce:	4159      	adcs	r1, r3
    77d0:	e00e      	b.n	77f0 <__adddf3+0xd0>
    77d2:	f1a5 0520 	sub.w	r5, r5, #32
    77d6:	f10e 0e20 	add.w	lr, lr, #32
    77da:	2a01      	cmp	r2, #1
    77dc:	fa03 fc0e 	lsl.w	ip, r3, lr
    77e0:	bf28      	it	cs
    77e2:	f04c 0c02 	orrcs.w	ip, ip, #2
    77e6:	fa43 f305 	asr.w	r3, r3, r5
    77ea:	18c0      	adds	r0, r0, r3
    77ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    77f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    77f4:	d507      	bpl.n	7806 <__adddf3+0xe6>
    77f6:	f04f 0e00 	mov.w	lr, #0
    77fa:	f1dc 0c00 	rsbs	ip, ip, #0
    77fe:	eb7e 0000 	sbcs.w	r0, lr, r0
    7802:	eb6e 0101 	sbc.w	r1, lr, r1
    7806:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    780a:	d31b      	bcc.n	7844 <__adddf3+0x124>
    780c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    7810:	d30c      	bcc.n	782c <__adddf3+0x10c>
    7812:	0849      	lsrs	r1, r1, #1
    7814:	ea5f 0030 	movs.w	r0, r0, rrx
    7818:	ea4f 0c3c 	mov.w	ip, ip, rrx
    781c:	f104 0401 	add.w	r4, r4, #1
    7820:	ea4f 5244 	mov.w	r2, r4, lsl #21
    7824:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    7828:	f080 809a 	bcs.w	7960 <__adddf3+0x240>
    782c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7830:	bf08      	it	eq
    7832:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    7836:	f150 0000 	adcs.w	r0, r0, #0
    783a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    783e:	ea41 0105 	orr.w	r1, r1, r5
    7842:	bd30      	pop	{r4, r5, pc}
    7844:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    7848:	4140      	adcs	r0, r0
    784a:	eb41 0101 	adc.w	r1, r1, r1
    784e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7852:	f1a4 0401 	sub.w	r4, r4, #1
    7856:	d1e9      	bne.n	782c <__adddf3+0x10c>
    7858:	f091 0f00 	teq	r1, #0
    785c:	bf04      	itt	eq
    785e:	4601      	moveq	r1, r0
    7860:	2000      	moveq	r0, #0
    7862:	fab1 f381 	clz	r3, r1
    7866:	bf08      	it	eq
    7868:	3320      	addeq	r3, #32
    786a:	f1a3 030b 	sub.w	r3, r3, #11
    786e:	f1b3 0220 	subs.w	r2, r3, #32
    7872:	da0c      	bge.n	788e <__adddf3+0x16e>
    7874:	320c      	adds	r2, #12
    7876:	dd08      	ble.n	788a <__adddf3+0x16a>
    7878:	f102 0c14 	add.w	ip, r2, #20
    787c:	f1c2 020c 	rsb	r2, r2, #12
    7880:	fa01 f00c 	lsl.w	r0, r1, ip
    7884:	fa21 f102 	lsr.w	r1, r1, r2
    7888:	e00c      	b.n	78a4 <__adddf3+0x184>
    788a:	f102 0214 	add.w	r2, r2, #20
    788e:	bfd8      	it	le
    7890:	f1c2 0c20 	rsble	ip, r2, #32
    7894:	fa01 f102 	lsl.w	r1, r1, r2
    7898:	fa20 fc0c 	lsr.w	ip, r0, ip
    789c:	bfdc      	itt	le
    789e:	ea41 010c 	orrle.w	r1, r1, ip
    78a2:	4090      	lslle	r0, r2
    78a4:	1ae4      	subs	r4, r4, r3
    78a6:	bfa2      	ittt	ge
    78a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    78ac:	4329      	orrge	r1, r5
    78ae:	bd30      	popge	{r4, r5, pc}
    78b0:	ea6f 0404 	mvn.w	r4, r4
    78b4:	3c1f      	subs	r4, #31
    78b6:	da1c      	bge.n	78f2 <__adddf3+0x1d2>
    78b8:	340c      	adds	r4, #12
    78ba:	dc0e      	bgt.n	78da <__adddf3+0x1ba>
    78bc:	f104 0414 	add.w	r4, r4, #20
    78c0:	f1c4 0220 	rsb	r2, r4, #32
    78c4:	fa20 f004 	lsr.w	r0, r0, r4
    78c8:	fa01 f302 	lsl.w	r3, r1, r2
    78cc:	ea40 0003 	orr.w	r0, r0, r3
    78d0:	fa21 f304 	lsr.w	r3, r1, r4
    78d4:	ea45 0103 	orr.w	r1, r5, r3
    78d8:	bd30      	pop	{r4, r5, pc}
    78da:	f1c4 040c 	rsb	r4, r4, #12
    78de:	f1c4 0220 	rsb	r2, r4, #32
    78e2:	fa20 f002 	lsr.w	r0, r0, r2
    78e6:	fa01 f304 	lsl.w	r3, r1, r4
    78ea:	ea40 0003 	orr.w	r0, r0, r3
    78ee:	4629      	mov	r1, r5
    78f0:	bd30      	pop	{r4, r5, pc}
    78f2:	fa21 f004 	lsr.w	r0, r1, r4
    78f6:	4629      	mov	r1, r5
    78f8:	bd30      	pop	{r4, r5, pc}
    78fa:	f094 0f00 	teq	r4, #0
    78fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    7902:	bf06      	itte	eq
    7904:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    7908:	3401      	addeq	r4, #1
    790a:	3d01      	subne	r5, #1
    790c:	e74e      	b.n	77ac <__adddf3+0x8c>
    790e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    7912:	bf18      	it	ne
    7914:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7918:	d029      	beq.n	796e <__adddf3+0x24e>
    791a:	ea94 0f05 	teq	r4, r5
    791e:	bf08      	it	eq
    7920:	ea90 0f02 	teqeq	r0, r2
    7924:	d005      	beq.n	7932 <__adddf3+0x212>
    7926:	ea54 0c00 	orrs.w	ip, r4, r0
    792a:	bf04      	itt	eq
    792c:	4619      	moveq	r1, r3
    792e:	4610      	moveq	r0, r2
    7930:	bd30      	pop	{r4, r5, pc}
    7932:	ea91 0f03 	teq	r1, r3
    7936:	bf1e      	ittt	ne
    7938:	2100      	movne	r1, #0
    793a:	2000      	movne	r0, #0
    793c:	bd30      	popne	{r4, r5, pc}
    793e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    7942:	d105      	bne.n	7950 <__adddf3+0x230>
    7944:	0040      	lsls	r0, r0, #1
    7946:	4149      	adcs	r1, r1
    7948:	bf28      	it	cs
    794a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    794e:	bd30      	pop	{r4, r5, pc}
    7950:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    7954:	bf3c      	itt	cc
    7956:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    795a:	bd30      	popcc	{r4, r5, pc}
    795c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7960:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    7964:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    7968:	f04f 0000 	mov.w	r0, #0
    796c:	bd30      	pop	{r4, r5, pc}
    796e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    7972:	bf1a      	itte	ne
    7974:	4619      	movne	r1, r3
    7976:	4610      	movne	r0, r2
    7978:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    797c:	bf1c      	itt	ne
    797e:	460b      	movne	r3, r1
    7980:	4602      	movne	r2, r0
    7982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    7986:	bf06      	itte	eq
    7988:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    798c:	ea91 0f03 	teqeq	r1, r3
    7990:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    7994:	bd30      	pop	{r4, r5, pc}
    7996:	bf00      	nop

00007998 <__aeabi_ui2d>:
    7998:	f090 0f00 	teq	r0, #0
    799c:	bf04      	itt	eq
    799e:	2100      	moveq	r1, #0
    79a0:	4770      	bxeq	lr
    79a2:	b530      	push	{r4, r5, lr}
    79a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    79a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    79ac:	f04f 0500 	mov.w	r5, #0
    79b0:	f04f 0100 	mov.w	r1, #0
    79b4:	e750      	b.n	7858 <__adddf3+0x138>
    79b6:	bf00      	nop

000079b8 <__aeabi_i2d>:
    79b8:	f090 0f00 	teq	r0, #0
    79bc:	bf04      	itt	eq
    79be:	2100      	moveq	r1, #0
    79c0:	4770      	bxeq	lr
    79c2:	b530      	push	{r4, r5, lr}
    79c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    79c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    79cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    79d0:	bf48      	it	mi
    79d2:	4240      	negmi	r0, r0
    79d4:	f04f 0100 	mov.w	r1, #0
    79d8:	e73e      	b.n	7858 <__adddf3+0x138>
    79da:	bf00      	nop

000079dc <__aeabi_f2d>:
    79dc:	0042      	lsls	r2, r0, #1
    79de:	ea4f 01e2 	mov.w	r1, r2, asr #3
    79e2:	ea4f 0131 	mov.w	r1, r1, rrx
    79e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    79ea:	bf1f      	itttt	ne
    79ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    79f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    79f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    79f8:	4770      	bxne	lr
    79fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    79fe:	bf08      	it	eq
    7a00:	4770      	bxeq	lr
    7a02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    7a06:	bf04      	itt	eq
    7a08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    7a0c:	4770      	bxeq	lr
    7a0e:	b530      	push	{r4, r5, lr}
    7a10:	f44f 7460 	mov.w	r4, #896	; 0x380
    7a14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7a1c:	e71c      	b.n	7858 <__adddf3+0x138>
    7a1e:	bf00      	nop

00007a20 <__aeabi_ul2d>:
    7a20:	ea50 0201 	orrs.w	r2, r0, r1
    7a24:	bf08      	it	eq
    7a26:	4770      	bxeq	lr
    7a28:	b530      	push	{r4, r5, lr}
    7a2a:	f04f 0500 	mov.w	r5, #0
    7a2e:	e00a      	b.n	7a46 <__aeabi_l2d+0x16>

00007a30 <__aeabi_l2d>:
    7a30:	ea50 0201 	orrs.w	r2, r0, r1
    7a34:	bf08      	it	eq
    7a36:	4770      	bxeq	lr
    7a38:	b530      	push	{r4, r5, lr}
    7a3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    7a3e:	d502      	bpl.n	7a46 <__aeabi_l2d+0x16>
    7a40:	4240      	negs	r0, r0
    7a42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7a46:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7a4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7a4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    7a52:	f43f aed8 	beq.w	7806 <__adddf3+0xe6>
    7a56:	f04f 0203 	mov.w	r2, #3
    7a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7a5e:	bf18      	it	ne
    7a60:	3203      	addne	r2, #3
    7a62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7a66:	bf18      	it	ne
    7a68:	3203      	addne	r2, #3
    7a6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    7a6e:	f1c2 0320 	rsb	r3, r2, #32
    7a72:	fa00 fc03 	lsl.w	ip, r0, r3
    7a76:	fa20 f002 	lsr.w	r0, r0, r2
    7a7a:	fa01 fe03 	lsl.w	lr, r1, r3
    7a7e:	ea40 000e 	orr.w	r0, r0, lr
    7a82:	fa21 f102 	lsr.w	r1, r1, r2
    7a86:	4414      	add	r4, r2
    7a88:	e6bd      	b.n	7806 <__adddf3+0xe6>
    7a8a:	bf00      	nop

00007a8c <__aeabi_d2f>:
    7a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    7a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    7a94:	bf24      	itt	cs
    7a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    7a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    7a9e:	d90d      	bls.n	7abc <__aeabi_d2f+0x30>
    7aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    7aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    7aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    7aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    7ab4:	bf08      	it	eq
    7ab6:	f020 0001 	biceq.w	r0, r0, #1
    7aba:	4770      	bx	lr
    7abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    7ac0:	d121      	bne.n	7b06 <__aeabi_d2f+0x7a>
    7ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    7ac6:	bfbc      	itt	lt
    7ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    7acc:	4770      	bxlt	lr
    7ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    7ad6:	f1c2 0218 	rsb	r2, r2, #24
    7ada:	f1c2 0c20 	rsb	ip, r2, #32
    7ade:	fa10 f30c 	lsls.w	r3, r0, ip
    7ae2:	fa20 f002 	lsr.w	r0, r0, r2
    7ae6:	bf18      	it	ne
    7ae8:	f040 0001 	orrne.w	r0, r0, #1
    7aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    7af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    7af4:	fa03 fc0c 	lsl.w	ip, r3, ip
    7af8:	ea40 000c 	orr.w	r0, r0, ip
    7afc:	fa23 f302 	lsr.w	r3, r3, r2
    7b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7b04:	e7cc      	b.n	7aa0 <__aeabi_d2f+0x14>
    7b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
    7b0a:	d107      	bne.n	7b1c <__aeabi_d2f+0x90>
    7b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    7b10:	bf1e      	ittt	ne
    7b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    7b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    7b1a:	4770      	bxne	lr
    7b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    7b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7b28:	4770      	bx	lr
    7b2a:	bf00      	nop

00007b2c <__aeabi_frsub>:
    7b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    7b30:	e002      	b.n	7b38 <__addsf3>
    7b32:	bf00      	nop

00007b34 <__aeabi_fsub>:
    7b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00007b38 <__addsf3>:
    7b38:	0042      	lsls	r2, r0, #1
    7b3a:	bf1f      	itttt	ne
    7b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    7b40:	ea92 0f03 	teqne	r2, r3
    7b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    7b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7b4c:	d06a      	beq.n	7c24 <__addsf3+0xec>
    7b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    7b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    7b56:	bfc1      	itttt	gt
    7b58:	18d2      	addgt	r2, r2, r3
    7b5a:	4041      	eorgt	r1, r0
    7b5c:	4048      	eorgt	r0, r1
    7b5e:	4041      	eorgt	r1, r0
    7b60:	bfb8      	it	lt
    7b62:	425b      	neglt	r3, r3
    7b64:	2b19      	cmp	r3, #25
    7b66:	bf88      	it	hi
    7b68:	4770      	bxhi	lr
    7b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    7b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7b76:	bf18      	it	ne
    7b78:	4240      	negne	r0, r0
    7b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    7b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    7b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    7b86:	bf18      	it	ne
    7b88:	4249      	negne	r1, r1
    7b8a:	ea92 0f03 	teq	r2, r3
    7b8e:	d03f      	beq.n	7c10 <__addsf3+0xd8>
    7b90:	f1a2 0201 	sub.w	r2, r2, #1
    7b94:	fa41 fc03 	asr.w	ip, r1, r3
    7b98:	eb10 000c 	adds.w	r0, r0, ip
    7b9c:	f1c3 0320 	rsb	r3, r3, #32
    7ba0:	fa01 f103 	lsl.w	r1, r1, r3
    7ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7ba8:	d502      	bpl.n	7bb0 <__addsf3+0x78>
    7baa:	4249      	negs	r1, r1
    7bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    7bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7bb4:	d313      	bcc.n	7bde <__addsf3+0xa6>
    7bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    7bba:	d306      	bcc.n	7bca <__addsf3+0x92>
    7bbc:	0840      	lsrs	r0, r0, #1
    7bbe:	ea4f 0131 	mov.w	r1, r1, rrx
    7bc2:	f102 0201 	add.w	r2, r2, #1
    7bc6:	2afe      	cmp	r2, #254	; 0xfe
    7bc8:	d251      	bcs.n	7c6e <__addsf3+0x136>
    7bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    7bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7bd2:	bf08      	it	eq
    7bd4:	f020 0001 	biceq.w	r0, r0, #1
    7bd8:	ea40 0003 	orr.w	r0, r0, r3
    7bdc:	4770      	bx	lr
    7bde:	0049      	lsls	r1, r1, #1
    7be0:	eb40 0000 	adc.w	r0, r0, r0
    7be4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    7be8:	f1a2 0201 	sub.w	r2, r2, #1
    7bec:	d1ed      	bne.n	7bca <__addsf3+0x92>
    7bee:	fab0 fc80 	clz	ip, r0
    7bf2:	f1ac 0c08 	sub.w	ip, ip, #8
    7bf6:	ebb2 020c 	subs.w	r2, r2, ip
    7bfa:	fa00 f00c 	lsl.w	r0, r0, ip
    7bfe:	bfaa      	itet	ge
    7c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    7c04:	4252      	neglt	r2, r2
    7c06:	4318      	orrge	r0, r3
    7c08:	bfbc      	itt	lt
    7c0a:	40d0      	lsrlt	r0, r2
    7c0c:	4318      	orrlt	r0, r3
    7c0e:	4770      	bx	lr
    7c10:	f092 0f00 	teq	r2, #0
    7c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    7c18:	bf06      	itte	eq
    7c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    7c1e:	3201      	addeq	r2, #1
    7c20:	3b01      	subne	r3, #1
    7c22:	e7b5      	b.n	7b90 <__addsf3+0x58>
    7c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7c2c:	bf18      	it	ne
    7c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7c32:	d021      	beq.n	7c78 <__addsf3+0x140>
    7c34:	ea92 0f03 	teq	r2, r3
    7c38:	d004      	beq.n	7c44 <__addsf3+0x10c>
    7c3a:	f092 0f00 	teq	r2, #0
    7c3e:	bf08      	it	eq
    7c40:	4608      	moveq	r0, r1
    7c42:	4770      	bx	lr
    7c44:	ea90 0f01 	teq	r0, r1
    7c48:	bf1c      	itt	ne
    7c4a:	2000      	movne	r0, #0
    7c4c:	4770      	bxne	lr
    7c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    7c52:	d104      	bne.n	7c5e <__addsf3+0x126>
    7c54:	0040      	lsls	r0, r0, #1
    7c56:	bf28      	it	cs
    7c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    7c5c:	4770      	bx	lr
    7c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    7c62:	bf3c      	itt	cc
    7c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    7c68:	4770      	bxcc	lr
    7c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    7c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7c76:	4770      	bx	lr
    7c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
    7c7c:	bf16      	itet	ne
    7c7e:	4608      	movne	r0, r1
    7c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    7c84:	4601      	movne	r1, r0
    7c86:	0242      	lsls	r2, r0, #9
    7c88:	bf06      	itte	eq
    7c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    7c8e:	ea90 0f01 	teqeq	r0, r1
    7c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    7c96:	4770      	bx	lr

00007c98 <__aeabi_ui2f>:
    7c98:	f04f 0300 	mov.w	r3, #0
    7c9c:	e004      	b.n	7ca8 <__aeabi_i2f+0x8>
    7c9e:	bf00      	nop

00007ca0 <__aeabi_i2f>:
    7ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    7ca4:	bf48      	it	mi
    7ca6:	4240      	negmi	r0, r0
    7ca8:	ea5f 0c00 	movs.w	ip, r0
    7cac:	bf08      	it	eq
    7cae:	4770      	bxeq	lr
    7cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    7cb4:	4601      	mov	r1, r0
    7cb6:	f04f 0000 	mov.w	r0, #0
    7cba:	e01c      	b.n	7cf6 <__aeabi_l2f+0x2a>

00007cbc <__aeabi_ul2f>:
    7cbc:	ea50 0201 	orrs.w	r2, r0, r1
    7cc0:	bf08      	it	eq
    7cc2:	4770      	bxeq	lr
    7cc4:	f04f 0300 	mov.w	r3, #0
    7cc8:	e00a      	b.n	7ce0 <__aeabi_l2f+0x14>
    7cca:	bf00      	nop

00007ccc <__aeabi_l2f>:
    7ccc:	ea50 0201 	orrs.w	r2, r0, r1
    7cd0:	bf08      	it	eq
    7cd2:	4770      	bxeq	lr
    7cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    7cd8:	d502      	bpl.n	7ce0 <__aeabi_l2f+0x14>
    7cda:	4240      	negs	r0, r0
    7cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7ce0:	ea5f 0c01 	movs.w	ip, r1
    7ce4:	bf02      	ittt	eq
    7ce6:	4684      	moveq	ip, r0
    7ce8:	4601      	moveq	r1, r0
    7cea:	2000      	moveq	r0, #0
    7cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    7cf0:	bf08      	it	eq
    7cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    7cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    7cfa:	fabc f28c 	clz	r2, ip
    7cfe:	3a08      	subs	r2, #8
    7d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    7d04:	db10      	blt.n	7d28 <__aeabi_l2f+0x5c>
    7d06:	fa01 fc02 	lsl.w	ip, r1, r2
    7d0a:	4463      	add	r3, ip
    7d0c:	fa00 fc02 	lsl.w	ip, r0, r2
    7d10:	f1c2 0220 	rsb	r2, r2, #32
    7d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7d18:	fa20 f202 	lsr.w	r2, r0, r2
    7d1c:	eb43 0002 	adc.w	r0, r3, r2
    7d20:	bf08      	it	eq
    7d22:	f020 0001 	biceq.w	r0, r0, #1
    7d26:	4770      	bx	lr
    7d28:	f102 0220 	add.w	r2, r2, #32
    7d2c:	fa01 fc02 	lsl.w	ip, r1, r2
    7d30:	f1c2 0220 	rsb	r2, r2, #32
    7d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    7d38:	fa21 f202 	lsr.w	r2, r1, r2
    7d3c:	eb43 0002 	adc.w	r0, r3, r2
    7d40:	bf08      	it	eq
    7d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7d46:	4770      	bx	lr

00007d48 <__aeabi_uldivmod>:
    7d48:	b953      	cbnz	r3, 7d60 <__aeabi_uldivmod+0x18>
    7d4a:	b94a      	cbnz	r2, 7d60 <__aeabi_uldivmod+0x18>
    7d4c:	2900      	cmp	r1, #0
    7d4e:	bf08      	it	eq
    7d50:	2800      	cmpeq	r0, #0
    7d52:	bf1c      	itt	ne
    7d54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7d58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7d5c:	f001 b8f8 	b.w	8f50 <__aeabi_idiv0>
    7d60:	f1ad 0c08 	sub.w	ip, sp, #8
    7d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    7d68:	f000 f806 	bl	7d78 <__udivmoddi4>
    7d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
    7d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7d74:	b004      	add	sp, #16
    7d76:	4770      	bx	lr

00007d78 <__udivmoddi4>:
    7d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d7c:	9e08      	ldr	r6, [sp, #32]
    7d7e:	4604      	mov	r4, r0
    7d80:	4688      	mov	r8, r1
    7d82:	2b00      	cmp	r3, #0
    7d84:	d14b      	bne.n	7e1e <__udivmoddi4+0xa6>
    7d86:	428a      	cmp	r2, r1
    7d88:	4615      	mov	r5, r2
    7d8a:	d967      	bls.n	7e5c <__udivmoddi4+0xe4>
    7d8c:	fab2 f282 	clz	r2, r2
    7d90:	b14a      	cbz	r2, 7da6 <__udivmoddi4+0x2e>
    7d92:	f1c2 0720 	rsb	r7, r2, #32
    7d96:	fa01 f302 	lsl.w	r3, r1, r2
    7d9a:	fa20 f707 	lsr.w	r7, r0, r7
    7d9e:	4095      	lsls	r5, r2
    7da0:	ea47 0803 	orr.w	r8, r7, r3
    7da4:	4094      	lsls	r4, r2
    7da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7daa:	0c23      	lsrs	r3, r4, #16
    7dac:	fbb8 f7fe 	udiv	r7, r8, lr
    7db0:	fa1f fc85 	uxth.w	ip, r5
    7db4:	fb0e 8817 	mls	r8, lr, r7, r8
    7db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    7dbc:	fb07 f10c 	mul.w	r1, r7, ip
    7dc0:	4299      	cmp	r1, r3
    7dc2:	d909      	bls.n	7dd8 <__udivmoddi4+0x60>
    7dc4:	18eb      	adds	r3, r5, r3
    7dc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    7dca:	f080 811b 	bcs.w	8004 <__udivmoddi4+0x28c>
    7dce:	4299      	cmp	r1, r3
    7dd0:	f240 8118 	bls.w	8004 <__udivmoddi4+0x28c>
    7dd4:	3f02      	subs	r7, #2
    7dd6:	442b      	add	r3, r5
    7dd8:	1a5b      	subs	r3, r3, r1
    7dda:	b2a4      	uxth	r4, r4
    7ddc:	fbb3 f0fe 	udiv	r0, r3, lr
    7de0:	fb0e 3310 	mls	r3, lr, r0, r3
    7de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7de8:	fb00 fc0c 	mul.w	ip, r0, ip
    7dec:	45a4      	cmp	ip, r4
    7dee:	d909      	bls.n	7e04 <__udivmoddi4+0x8c>
    7df0:	192c      	adds	r4, r5, r4
    7df2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7df6:	f080 8107 	bcs.w	8008 <__udivmoddi4+0x290>
    7dfa:	45a4      	cmp	ip, r4
    7dfc:	f240 8104 	bls.w	8008 <__udivmoddi4+0x290>
    7e00:	3802      	subs	r0, #2
    7e02:	442c      	add	r4, r5
    7e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    7e08:	eba4 040c 	sub.w	r4, r4, ip
    7e0c:	2700      	movs	r7, #0
    7e0e:	b11e      	cbz	r6, 7e18 <__udivmoddi4+0xa0>
    7e10:	40d4      	lsrs	r4, r2
    7e12:	2300      	movs	r3, #0
    7e14:	e9c6 4300 	strd	r4, r3, [r6]
    7e18:	4639      	mov	r1, r7
    7e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e1e:	428b      	cmp	r3, r1
    7e20:	d909      	bls.n	7e36 <__udivmoddi4+0xbe>
    7e22:	2e00      	cmp	r6, #0
    7e24:	f000 80eb 	beq.w	7ffe <__udivmoddi4+0x286>
    7e28:	2700      	movs	r7, #0
    7e2a:	e9c6 0100 	strd	r0, r1, [r6]
    7e2e:	4638      	mov	r0, r7
    7e30:	4639      	mov	r1, r7
    7e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e36:	fab3 f783 	clz	r7, r3
    7e3a:	2f00      	cmp	r7, #0
    7e3c:	d147      	bne.n	7ece <__udivmoddi4+0x156>
    7e3e:	428b      	cmp	r3, r1
    7e40:	d302      	bcc.n	7e48 <__udivmoddi4+0xd0>
    7e42:	4282      	cmp	r2, r0
    7e44:	f200 80fa 	bhi.w	803c <__udivmoddi4+0x2c4>
    7e48:	1a84      	subs	r4, r0, r2
    7e4a:	eb61 0303 	sbc.w	r3, r1, r3
    7e4e:	2001      	movs	r0, #1
    7e50:	4698      	mov	r8, r3
    7e52:	2e00      	cmp	r6, #0
    7e54:	d0e0      	beq.n	7e18 <__udivmoddi4+0xa0>
    7e56:	e9c6 4800 	strd	r4, r8, [r6]
    7e5a:	e7dd      	b.n	7e18 <__udivmoddi4+0xa0>
    7e5c:	b902      	cbnz	r2, 7e60 <__udivmoddi4+0xe8>
    7e5e:	deff      	udf	#255	; 0xff
    7e60:	fab2 f282 	clz	r2, r2
    7e64:	2a00      	cmp	r2, #0
    7e66:	f040 808f 	bne.w	7f88 <__udivmoddi4+0x210>
    7e6a:	1b49      	subs	r1, r1, r5
    7e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7e70:	fa1f f885 	uxth.w	r8, r5
    7e74:	2701      	movs	r7, #1
    7e76:	fbb1 fcfe 	udiv	ip, r1, lr
    7e7a:	0c23      	lsrs	r3, r4, #16
    7e7c:	fb0e 111c 	mls	r1, lr, ip, r1
    7e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7e84:	fb08 f10c 	mul.w	r1, r8, ip
    7e88:	4299      	cmp	r1, r3
    7e8a:	d907      	bls.n	7e9c <__udivmoddi4+0x124>
    7e8c:	18eb      	adds	r3, r5, r3
    7e8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    7e92:	d202      	bcs.n	7e9a <__udivmoddi4+0x122>
    7e94:	4299      	cmp	r1, r3
    7e96:	f200 80cd 	bhi.w	8034 <__udivmoddi4+0x2bc>
    7e9a:	4684      	mov	ip, r0
    7e9c:	1a59      	subs	r1, r3, r1
    7e9e:	b2a3      	uxth	r3, r4
    7ea0:	fbb1 f0fe 	udiv	r0, r1, lr
    7ea4:	fb0e 1410 	mls	r4, lr, r0, r1
    7ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    7eac:	fb08 f800 	mul.w	r8, r8, r0
    7eb0:	45a0      	cmp	r8, r4
    7eb2:	d907      	bls.n	7ec4 <__udivmoddi4+0x14c>
    7eb4:	192c      	adds	r4, r5, r4
    7eb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7eba:	d202      	bcs.n	7ec2 <__udivmoddi4+0x14a>
    7ebc:	45a0      	cmp	r8, r4
    7ebe:	f200 80b6 	bhi.w	802e <__udivmoddi4+0x2b6>
    7ec2:	4618      	mov	r0, r3
    7ec4:	eba4 0408 	sub.w	r4, r4, r8
    7ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    7ecc:	e79f      	b.n	7e0e <__udivmoddi4+0x96>
    7ece:	f1c7 0c20 	rsb	ip, r7, #32
    7ed2:	40bb      	lsls	r3, r7
    7ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
    7ed8:	ea4e 0e03 	orr.w	lr, lr, r3
    7edc:	fa01 f407 	lsl.w	r4, r1, r7
    7ee0:	fa20 f50c 	lsr.w	r5, r0, ip
    7ee4:	fa21 f30c 	lsr.w	r3, r1, ip
    7ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
    7eec:	4325      	orrs	r5, r4
    7eee:	fbb3 f9f8 	udiv	r9, r3, r8
    7ef2:	0c2c      	lsrs	r4, r5, #16
    7ef4:	fb08 3319 	mls	r3, r8, r9, r3
    7ef8:	fa1f fa8e 	uxth.w	sl, lr
    7efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    7f00:	fb09 f40a 	mul.w	r4, r9, sl
    7f04:	429c      	cmp	r4, r3
    7f06:	fa02 f207 	lsl.w	r2, r2, r7
    7f0a:	fa00 f107 	lsl.w	r1, r0, r7
    7f0e:	d90b      	bls.n	7f28 <__udivmoddi4+0x1b0>
    7f10:	eb1e 0303 	adds.w	r3, lr, r3
    7f14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    7f18:	f080 8087 	bcs.w	802a <__udivmoddi4+0x2b2>
    7f1c:	429c      	cmp	r4, r3
    7f1e:	f240 8084 	bls.w	802a <__udivmoddi4+0x2b2>
    7f22:	f1a9 0902 	sub.w	r9, r9, #2
    7f26:	4473      	add	r3, lr
    7f28:	1b1b      	subs	r3, r3, r4
    7f2a:	b2ad      	uxth	r5, r5
    7f2c:	fbb3 f0f8 	udiv	r0, r3, r8
    7f30:	fb08 3310 	mls	r3, r8, r0, r3
    7f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    7f38:	fb00 fa0a 	mul.w	sl, r0, sl
    7f3c:	45a2      	cmp	sl, r4
    7f3e:	d908      	bls.n	7f52 <__udivmoddi4+0x1da>
    7f40:	eb1e 0404 	adds.w	r4, lr, r4
    7f44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7f48:	d26b      	bcs.n	8022 <__udivmoddi4+0x2aa>
    7f4a:	45a2      	cmp	sl, r4
    7f4c:	d969      	bls.n	8022 <__udivmoddi4+0x2aa>
    7f4e:	3802      	subs	r0, #2
    7f50:	4474      	add	r4, lr
    7f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    7f56:	fba0 8902 	umull	r8, r9, r0, r2
    7f5a:	eba4 040a 	sub.w	r4, r4, sl
    7f5e:	454c      	cmp	r4, r9
    7f60:	46c2      	mov	sl, r8
    7f62:	464b      	mov	r3, r9
    7f64:	d354      	bcc.n	8010 <__udivmoddi4+0x298>
    7f66:	d051      	beq.n	800c <__udivmoddi4+0x294>
    7f68:	2e00      	cmp	r6, #0
    7f6a:	d069      	beq.n	8040 <__udivmoddi4+0x2c8>
    7f6c:	ebb1 050a 	subs.w	r5, r1, sl
    7f70:	eb64 0403 	sbc.w	r4, r4, r3
    7f74:	fa04 fc0c 	lsl.w	ip, r4, ip
    7f78:	40fd      	lsrs	r5, r7
    7f7a:	40fc      	lsrs	r4, r7
    7f7c:	ea4c 0505 	orr.w	r5, ip, r5
    7f80:	e9c6 5400 	strd	r5, r4, [r6]
    7f84:	2700      	movs	r7, #0
    7f86:	e747      	b.n	7e18 <__udivmoddi4+0xa0>
    7f88:	f1c2 0320 	rsb	r3, r2, #32
    7f8c:	fa20 f703 	lsr.w	r7, r0, r3
    7f90:	4095      	lsls	r5, r2
    7f92:	fa01 f002 	lsl.w	r0, r1, r2
    7f96:	fa21 f303 	lsr.w	r3, r1, r3
    7f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7f9e:	4338      	orrs	r0, r7
    7fa0:	0c01      	lsrs	r1, r0, #16
    7fa2:	fbb3 f7fe 	udiv	r7, r3, lr
    7fa6:	fa1f f885 	uxth.w	r8, r5
    7faa:	fb0e 3317 	mls	r3, lr, r7, r3
    7fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    7fb2:	fb07 f308 	mul.w	r3, r7, r8
    7fb6:	428b      	cmp	r3, r1
    7fb8:	fa04 f402 	lsl.w	r4, r4, r2
    7fbc:	d907      	bls.n	7fce <__udivmoddi4+0x256>
    7fbe:	1869      	adds	r1, r5, r1
    7fc0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    7fc4:	d22f      	bcs.n	8026 <__udivmoddi4+0x2ae>
    7fc6:	428b      	cmp	r3, r1
    7fc8:	d92d      	bls.n	8026 <__udivmoddi4+0x2ae>
    7fca:	3f02      	subs	r7, #2
    7fcc:	4429      	add	r1, r5
    7fce:	1acb      	subs	r3, r1, r3
    7fd0:	b281      	uxth	r1, r0
    7fd2:	fbb3 f0fe 	udiv	r0, r3, lr
    7fd6:	fb0e 3310 	mls	r3, lr, r0, r3
    7fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    7fde:	fb00 f308 	mul.w	r3, r0, r8
    7fe2:	428b      	cmp	r3, r1
    7fe4:	d907      	bls.n	7ff6 <__udivmoddi4+0x27e>
    7fe6:	1869      	adds	r1, r5, r1
    7fe8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    7fec:	d217      	bcs.n	801e <__udivmoddi4+0x2a6>
    7fee:	428b      	cmp	r3, r1
    7ff0:	d915      	bls.n	801e <__udivmoddi4+0x2a6>
    7ff2:	3802      	subs	r0, #2
    7ff4:	4429      	add	r1, r5
    7ff6:	1ac9      	subs	r1, r1, r3
    7ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    7ffc:	e73b      	b.n	7e76 <__udivmoddi4+0xfe>
    7ffe:	4637      	mov	r7, r6
    8000:	4630      	mov	r0, r6
    8002:	e709      	b.n	7e18 <__udivmoddi4+0xa0>
    8004:	4607      	mov	r7, r0
    8006:	e6e7      	b.n	7dd8 <__udivmoddi4+0x60>
    8008:	4618      	mov	r0, r3
    800a:	e6fb      	b.n	7e04 <__udivmoddi4+0x8c>
    800c:	4541      	cmp	r1, r8
    800e:	d2ab      	bcs.n	7f68 <__udivmoddi4+0x1f0>
    8010:	ebb8 0a02 	subs.w	sl, r8, r2
    8014:	eb69 020e 	sbc.w	r2, r9, lr
    8018:	3801      	subs	r0, #1
    801a:	4613      	mov	r3, r2
    801c:	e7a4      	b.n	7f68 <__udivmoddi4+0x1f0>
    801e:	4660      	mov	r0, ip
    8020:	e7e9      	b.n	7ff6 <__udivmoddi4+0x27e>
    8022:	4618      	mov	r0, r3
    8024:	e795      	b.n	7f52 <__udivmoddi4+0x1da>
    8026:	4667      	mov	r7, ip
    8028:	e7d1      	b.n	7fce <__udivmoddi4+0x256>
    802a:	4681      	mov	r9, r0
    802c:	e77c      	b.n	7f28 <__udivmoddi4+0x1b0>
    802e:	3802      	subs	r0, #2
    8030:	442c      	add	r4, r5
    8032:	e747      	b.n	7ec4 <__udivmoddi4+0x14c>
    8034:	f1ac 0c02 	sub.w	ip, ip, #2
    8038:	442b      	add	r3, r5
    803a:	e72f      	b.n	7e9c <__udivmoddi4+0x124>
    803c:	4638      	mov	r0, r7
    803e:	e708      	b.n	7e52 <__udivmoddi4+0xda>
    8040:	4637      	mov	r7, r6
    8042:	e6e9      	b.n	7e18 <__udivmoddi4+0xa0>

00008044 <selfrel_offset31>:
    8044:	6803      	ldr	r3, [r0, #0]
    8046:	005a      	lsls	r2, r3, #1
    8048:	bf4c      	ite	mi
    804a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    804e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    8052:	4418      	add	r0, r3
    8054:	4770      	bx	lr
    8056:	bf00      	nop

00008058 <search_EIT_table>:
    8058:	b361      	cbz	r1, 80b4 <search_EIT_table+0x5c>
    805a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    805e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    8062:	4690      	mov	r8, r2
    8064:	4606      	mov	r6, r0
    8066:	46d1      	mov	r9, sl
    8068:	2700      	movs	r7, #0
    806a:	eb07 0409 	add.w	r4, r7, r9
    806e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    8072:	1064      	asrs	r4, r4, #1
    8074:	00e5      	lsls	r5, r4, #3
    8076:	1971      	adds	r1, r6, r5
    8078:	4608      	mov	r0, r1
    807a:	f7ff ffe3 	bl	8044 <selfrel_offset31>
    807e:	45a2      	cmp	sl, r4
    8080:	4683      	mov	fp, r0
    8082:	f105 0008 	add.w	r0, r5, #8
    8086:	4430      	add	r0, r6
    8088:	d009      	beq.n	809e <search_EIT_table+0x46>
    808a:	f7ff ffdb 	bl	8044 <selfrel_offset31>
    808e:	45c3      	cmp	fp, r8
    8090:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    8094:	d805      	bhi.n	80a2 <search_EIT_table+0x4a>
    8096:	4540      	cmp	r0, r8
    8098:	d209      	bcs.n	80ae <search_EIT_table+0x56>
    809a:	1c67      	adds	r7, r4, #1
    809c:	e7e5      	b.n	806a <search_EIT_table+0x12>
    809e:	45c3      	cmp	fp, r8
    80a0:	d905      	bls.n	80ae <search_EIT_table+0x56>
    80a2:	42a7      	cmp	r7, r4
    80a4:	d002      	beq.n	80ac <search_EIT_table+0x54>
    80a6:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    80aa:	e7de      	b.n	806a <search_EIT_table+0x12>
    80ac:	2100      	movs	r1, #0
    80ae:	4608      	mov	r0, r1
    80b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80b4:	4608      	mov	r0, r1
    80b6:	4770      	bx	lr

000080b8 <__gnu_unwind_get_pr_addr>:
    80b8:	2801      	cmp	r0, #1
    80ba:	d007      	beq.n	80cc <__gnu_unwind_get_pr_addr+0x14>
    80bc:	2802      	cmp	r0, #2
    80be:	d007      	beq.n	80d0 <__gnu_unwind_get_pr_addr+0x18>
    80c0:	4b04      	ldr	r3, [pc, #16]	; (80d4 <__gnu_unwind_get_pr_addr+0x1c>)
    80c2:	2800      	cmp	r0, #0
    80c4:	bf0c      	ite	eq
    80c6:	4618      	moveq	r0, r3
    80c8:	2000      	movne	r0, #0
    80ca:	4770      	bx	lr
    80cc:	4802      	ldr	r0, [pc, #8]	; (80d8 <__gnu_unwind_get_pr_addr+0x20>)
    80ce:	4770      	bx	lr
    80d0:	4802      	ldr	r0, [pc, #8]	; (80dc <__gnu_unwind_get_pr_addr+0x24>)
    80d2:	4770      	bx	lr
    80d4:	000087a5 	.word	0x000087a5
    80d8:	000087a9 	.word	0x000087a9
    80dc:	000087ad 	.word	0x000087ad

000080e0 <get_eit_entry>:
    80e0:	b530      	push	{r4, r5, lr}
    80e2:	4b25      	ldr	r3, [pc, #148]	; (8178 <get_eit_entry+0x98>)
    80e4:	b083      	sub	sp, #12
    80e6:	4604      	mov	r4, r0
    80e8:	1e8d      	subs	r5, r1, #2
    80ea:	b34b      	cbz	r3, 8140 <get_eit_entry+0x60>
    80ec:	a901      	add	r1, sp, #4
    80ee:	4628      	mov	r0, r5
    80f0:	f3af 8000 	nop.w
    80f4:	b1f0      	cbz	r0, 8134 <get_eit_entry+0x54>
    80f6:	9901      	ldr	r1, [sp, #4]
    80f8:	462a      	mov	r2, r5
    80fa:	f7ff ffad 	bl	8058 <search_EIT_table>
    80fe:	4601      	mov	r1, r0
    8100:	b1c0      	cbz	r0, 8134 <get_eit_entry+0x54>
    8102:	f7ff ff9f 	bl	8044 <selfrel_offset31>
    8106:	684b      	ldr	r3, [r1, #4]
    8108:	64a0      	str	r0, [r4, #72]	; 0x48
    810a:	2b01      	cmp	r3, #1
    810c:	d02e      	beq.n	816c <get_eit_entry+0x8c>
    810e:	2b00      	cmp	r3, #0
    8110:	f101 0004 	add.w	r0, r1, #4
    8114:	db26      	blt.n	8164 <get_eit_entry+0x84>
    8116:	f7ff ff95 	bl	8044 <selfrel_offset31>
    811a:	2300      	movs	r3, #0
    811c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    8120:	6803      	ldr	r3, [r0, #0]
    8122:	2b00      	cmp	r3, #0
    8124:	db12      	blt.n	814c <get_eit_entry+0x6c>
    8126:	f7ff ff8d 	bl	8044 <selfrel_offset31>
    812a:	2300      	movs	r3, #0
    812c:	6120      	str	r0, [r4, #16]
    812e:	4618      	mov	r0, r3
    8130:	b003      	add	sp, #12
    8132:	bd30      	pop	{r4, r5, pc}
    8134:	2300      	movs	r3, #0
    8136:	6123      	str	r3, [r4, #16]
    8138:	2309      	movs	r3, #9
    813a:	4618      	mov	r0, r3
    813c:	b003      	add	sp, #12
    813e:	bd30      	pop	{r4, r5, pc}
    8140:	490e      	ldr	r1, [pc, #56]	; (817c <get_eit_entry+0x9c>)
    8142:	480f      	ldr	r0, [pc, #60]	; (8180 <get_eit_entry+0xa0>)
    8144:	1a09      	subs	r1, r1, r0
    8146:	10c9      	asrs	r1, r1, #3
    8148:	9101      	str	r1, [sp, #4]
    814a:	e7d5      	b.n	80f8 <get_eit_entry+0x18>
    814c:	f3c3 6003 	ubfx	r0, r3, #24, #4
    8150:	f7ff ffb2 	bl	80b8 <__gnu_unwind_get_pr_addr>
    8154:	2800      	cmp	r0, #0
    8156:	bf14      	ite	ne
    8158:	2300      	movne	r3, #0
    815a:	2309      	moveq	r3, #9
    815c:	6120      	str	r0, [r4, #16]
    815e:	4618      	mov	r0, r3
    8160:	b003      	add	sp, #12
    8162:	bd30      	pop	{r4, r5, pc}
    8164:	2301      	movs	r3, #1
    8166:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    816a:	e7d9      	b.n	8120 <get_eit_entry+0x40>
    816c:	2300      	movs	r3, #0
    816e:	6123      	str	r3, [r4, #16]
    8170:	2305      	movs	r3, #5
    8172:	4618      	mov	r0, r3
    8174:	b003      	add	sp, #12
    8176:	bd30      	pop	{r4, r5, pc}
    8178:	00000000 	.word	0x00000000
    817c:	0000af78 	.word	0x0000af78
    8180:	0000aec0 	.word	0x0000aec0

00008184 <restore_non_core_regs>:
    8184:	6803      	ldr	r3, [r0, #0]
    8186:	07da      	lsls	r2, r3, #31
    8188:	b510      	push	{r4, lr}
    818a:	4604      	mov	r4, r0
    818c:	d406      	bmi.n	819c <restore_non_core_regs+0x18>
    818e:	079b      	lsls	r3, r3, #30
    8190:	f100 0048 	add.w	r0, r0, #72	; 0x48
    8194:	d509      	bpl.n	81aa <restore_non_core_regs+0x26>
    8196:	f000 fc5f 	bl	8a58 <__gnu_Unwind_Restore_VFP_D>
    819a:	6823      	ldr	r3, [r4, #0]
    819c:	0759      	lsls	r1, r3, #29
    819e:	d509      	bpl.n	81b4 <restore_non_core_regs+0x30>
    81a0:	071a      	lsls	r2, r3, #28
    81a2:	d50e      	bpl.n	81c2 <restore_non_core_regs+0x3e>
    81a4:	06db      	lsls	r3, r3, #27
    81a6:	d513      	bpl.n	81d0 <restore_non_core_regs+0x4c>
    81a8:	bd10      	pop	{r4, pc}
    81aa:	f000 fc4d 	bl	8a48 <__gnu_Unwind_Restore_VFP>
    81ae:	6823      	ldr	r3, [r4, #0]
    81b0:	0759      	lsls	r1, r3, #29
    81b2:	d4f5      	bmi.n	81a0 <restore_non_core_regs+0x1c>
    81b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    81b8:	f000 fc56 	bl	8a68 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    81bc:	6823      	ldr	r3, [r4, #0]
    81be:	071a      	lsls	r2, r3, #28
    81c0:	d4f0      	bmi.n	81a4 <restore_non_core_regs+0x20>
    81c2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    81c6:	f000 fc57 	bl	8a78 <__gnu_Unwind_Restore_WMMXD>
    81ca:	6823      	ldr	r3, [r4, #0]
    81cc:	06db      	lsls	r3, r3, #27
    81ce:	d4eb      	bmi.n	81a8 <restore_non_core_regs+0x24>
    81d0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    81d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81d8:	f000 bc92 	b.w	8b00 <__gnu_Unwind_Restore_WMMXC>

000081dc <_Unwind_decode_typeinfo_ptr.isra.0>:
    81dc:	6803      	ldr	r3, [r0, #0]
    81de:	b103      	cbz	r3, 81e2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    81e0:	4403      	add	r3, r0
    81e2:	4618      	mov	r0, r3
    81e4:	4770      	bx	lr
    81e6:	bf00      	nop

000081e8 <__gnu_unwind_24bit.isra.1>:
    81e8:	2009      	movs	r0, #9
    81ea:	4770      	bx	lr

000081ec <_Unwind_DebugHook>:
    81ec:	4770      	bx	lr
    81ee:	bf00      	nop

000081f0 <unwind_phase2>:
    81f0:	b570      	push	{r4, r5, r6, lr}
    81f2:	4604      	mov	r4, r0
    81f4:	460d      	mov	r5, r1
    81f6:	e008      	b.n	820a <unwind_phase2+0x1a>
    81f8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    81fa:	6163      	str	r3, [r4, #20]
    81fc:	462a      	mov	r2, r5
    81fe:	6923      	ldr	r3, [r4, #16]
    8200:	4621      	mov	r1, r4
    8202:	2001      	movs	r0, #1
    8204:	4798      	blx	r3
    8206:	2808      	cmp	r0, #8
    8208:	d108      	bne.n	821c <unwind_phase2+0x2c>
    820a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    820c:	4620      	mov	r0, r4
    820e:	f7ff ff67 	bl	80e0 <get_eit_entry>
    8212:	4606      	mov	r6, r0
    8214:	2800      	cmp	r0, #0
    8216:	d0ef      	beq.n	81f8 <unwind_phase2+0x8>
    8218:	f000 fe9c 	bl	8f54 <abort>
    821c:	2807      	cmp	r0, #7
    821e:	d1fb      	bne.n	8218 <unwind_phase2+0x28>
    8220:	4630      	mov	r0, r6
    8222:	6c29      	ldr	r1, [r5, #64]	; 0x40
    8224:	f7ff ffe2 	bl	81ec <_Unwind_DebugHook>
    8228:	1d28      	adds	r0, r5, #4
    822a:	f000 fc01 	bl	8a30 <__restore_core_regs>
    822e:	bf00      	nop

00008230 <unwind_phase2_forced>:
    8230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8234:	1d0c      	adds	r4, r1, #4
    8236:	4605      	mov	r5, r0
    8238:	4617      	mov	r7, r2
    823a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    823c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    8240:	ae03      	add	r6, sp, #12
    8242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    824a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    824c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    8250:	ac02      	add	r4, sp, #8
    8252:	f8d5 800c 	ldr.w	r8, [r5, #12]
    8256:	f8d5 9018 	ldr.w	r9, [r5, #24]
    825a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    825e:	2300      	movs	r3, #0
    8260:	6023      	str	r3, [r4, #0]
    8262:	e021      	b.n	82a8 <unwind_phase2_forced+0x78>
    8264:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8266:	616b      	str	r3, [r5, #20]
    8268:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    826c:	4621      	mov	r1, r4
    826e:	a87a      	add	r0, sp, #488	; 0x1e8
    8270:	f001 f838 	bl	92e4 <memcpy>
    8274:	692b      	ldr	r3, [r5, #16]
    8276:	aa7a      	add	r2, sp, #488	; 0x1e8
    8278:	4629      	mov	r1, r5
    827a:	4630      	mov	r0, r6
    827c:	4798      	blx	r3
    827e:	9b88      	ldr	r3, [sp, #544]	; 0x220
    8280:	e9cd 4900 	strd	r4, r9, [sp]
    8284:	4682      	mov	sl, r0
    8286:	6463      	str	r3, [r4, #68]	; 0x44
    8288:	4631      	mov	r1, r6
    828a:	462b      	mov	r3, r5
    828c:	462a      	mov	r2, r5
    828e:	2001      	movs	r0, #1
    8290:	47c0      	blx	r8
    8292:	4607      	mov	r7, r0
    8294:	b9f8      	cbnz	r0, 82d6 <unwind_phase2_forced+0xa6>
    8296:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    829a:	a97a      	add	r1, sp, #488	; 0x1e8
    829c:	4620      	mov	r0, r4
    829e:	f001 f821 	bl	92e4 <memcpy>
    82a2:	f1ba 0f08 	cmp.w	sl, #8
    82a6:	d11c      	bne.n	82e2 <unwind_phase2_forced+0xb2>
    82a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    82aa:	4628      	mov	r0, r5
    82ac:	f7ff ff18 	bl	80e0 <get_eit_entry>
    82b0:	2f00      	cmp	r7, #0
    82b2:	bf08      	it	eq
    82b4:	2609      	moveq	r6, #9
    82b6:	4607      	mov	r7, r0
    82b8:	bf18      	it	ne
    82ba:	260a      	movne	r6, #10
    82bc:	2800      	cmp	r0, #0
    82be:	d0d1      	beq.n	8264 <unwind_phase2_forced+0x34>
    82c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    82c2:	f046 0110 	orr.w	r1, r6, #16
    82c6:	e9cd 4900 	strd	r4, r9, [sp]
    82ca:	462a      	mov	r2, r5
    82cc:	6463      	str	r3, [r4, #68]	; 0x44
    82ce:	2001      	movs	r0, #1
    82d0:	462b      	mov	r3, r5
    82d2:	47c0      	blx	r8
    82d4:	b100      	cbz	r0, 82d8 <unwind_phase2_forced+0xa8>
    82d6:	2709      	movs	r7, #9
    82d8:	4638      	mov	r0, r7
    82da:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    82de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82e2:	f1ba 0f07 	cmp.w	sl, #7
    82e6:	d1f6      	bne.n	82d6 <unwind_phase2_forced+0xa6>
    82e8:	4638      	mov	r0, r7
    82ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
    82ec:	f7ff ff7e 	bl	81ec <_Unwind_DebugHook>
    82f0:	a803      	add	r0, sp, #12
    82f2:	f000 fb9d 	bl	8a30 <__restore_core_regs>
    82f6:	bf00      	nop

000082f8 <_Unwind_GetCFA>:
    82f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
    82fa:	4770      	bx	lr

000082fc <__gnu_Unwind_RaiseException>:
    82fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    82fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    8300:	640b      	str	r3, [r1, #64]	; 0x40
    8302:	1d0d      	adds	r5, r1, #4
    8304:	460f      	mov	r7, r1
    8306:	4606      	mov	r6, r0
    8308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    830a:	b0f9      	sub	sp, #484	; 0x1e4
    830c:	ac01      	add	r4, sp, #4
    830e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8318:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    831c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    8320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    8324:	9500      	str	r5, [sp, #0]
    8326:	e006      	b.n	8336 <__gnu_Unwind_RaiseException+0x3a>
    8328:	6933      	ldr	r3, [r6, #16]
    832a:	466a      	mov	r2, sp
    832c:	4631      	mov	r1, r6
    832e:	4798      	blx	r3
    8330:	2808      	cmp	r0, #8
    8332:	4604      	mov	r4, r0
    8334:	d108      	bne.n	8348 <__gnu_Unwind_RaiseException+0x4c>
    8336:	9910      	ldr	r1, [sp, #64]	; 0x40
    8338:	4630      	mov	r0, r6
    833a:	f7ff fed1 	bl	80e0 <get_eit_entry>
    833e:	2800      	cmp	r0, #0
    8340:	d0f2      	beq.n	8328 <__gnu_Unwind_RaiseException+0x2c>
    8342:	2009      	movs	r0, #9
    8344:	b079      	add	sp, #484	; 0x1e4
    8346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8348:	4668      	mov	r0, sp
    834a:	f7ff ff1b 	bl	8184 <restore_non_core_regs>
    834e:	2c06      	cmp	r4, #6
    8350:	d1f7      	bne.n	8342 <__gnu_Unwind_RaiseException+0x46>
    8352:	4639      	mov	r1, r7
    8354:	4630      	mov	r0, r6
    8356:	f7ff ff4b 	bl	81f0 <unwind_phase2>
    835a:	bf00      	nop

0000835c <__gnu_Unwind_ForcedUnwind>:
    835c:	b430      	push	{r4, r5}
    835e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    8360:	60c1      	str	r1, [r0, #12]
    8362:	6182      	str	r2, [r0, #24]
    8364:	4619      	mov	r1, r3
    8366:	641d      	str	r5, [r3, #64]	; 0x40
    8368:	2200      	movs	r2, #0
    836a:	bc30      	pop	{r4, r5}
    836c:	e760      	b.n	8230 <unwind_phase2_forced>
    836e:	bf00      	nop

00008370 <__gnu_Unwind_Resume>:
    8370:	b570      	push	{r4, r5, r6, lr}
    8372:	68c6      	ldr	r6, [r0, #12]
    8374:	6943      	ldr	r3, [r0, #20]
    8376:	640b      	str	r3, [r1, #64]	; 0x40
    8378:	b9be      	cbnz	r6, 83aa <__gnu_Unwind_Resume+0x3a>
    837a:	6903      	ldr	r3, [r0, #16]
    837c:	460a      	mov	r2, r1
    837e:	4604      	mov	r4, r0
    8380:	460d      	mov	r5, r1
    8382:	4601      	mov	r1, r0
    8384:	2002      	movs	r0, #2
    8386:	4798      	blx	r3
    8388:	2807      	cmp	r0, #7
    838a:	d007      	beq.n	839c <__gnu_Unwind_Resume+0x2c>
    838c:	2808      	cmp	r0, #8
    838e:	d103      	bne.n	8398 <__gnu_Unwind_Resume+0x28>
    8390:	4629      	mov	r1, r5
    8392:	4620      	mov	r0, r4
    8394:	f7ff ff2c 	bl	81f0 <unwind_phase2>
    8398:	f000 fddc 	bl	8f54 <abort>
    839c:	4630      	mov	r0, r6
    839e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    83a0:	f7ff ff24 	bl	81ec <_Unwind_DebugHook>
    83a4:	1d28      	adds	r0, r5, #4
    83a6:	f000 fb43 	bl	8a30 <__restore_core_regs>
    83aa:	2201      	movs	r2, #1
    83ac:	f7ff ff40 	bl	8230 <unwind_phase2_forced>
    83b0:	f000 fdd0 	bl	8f54 <abort>

000083b4 <__gnu_Unwind_Resume_or_Rethrow>:
    83b4:	68c2      	ldr	r2, [r0, #12]
    83b6:	b11a      	cbz	r2, 83c0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    83b8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    83ba:	640a      	str	r2, [r1, #64]	; 0x40
    83bc:	2200      	movs	r2, #0
    83be:	e737      	b.n	8230 <unwind_phase2_forced>
    83c0:	e79c      	b.n	82fc <__gnu_Unwind_RaiseException>
    83c2:	bf00      	nop

000083c4 <_Unwind_Complete>:
    83c4:	4770      	bx	lr
    83c6:	bf00      	nop

000083c8 <_Unwind_DeleteException>:
    83c8:	6883      	ldr	r3, [r0, #8]
    83ca:	b113      	cbz	r3, 83d2 <_Unwind_DeleteException+0xa>
    83cc:	4601      	mov	r1, r0
    83ce:	2001      	movs	r0, #1
    83d0:	4718      	bx	r3
    83d2:	4770      	bx	lr

000083d4 <_Unwind_VRS_Get>:
    83d4:	2904      	cmp	r1, #4
    83d6:	d807      	bhi.n	83e8 <_Unwind_VRS_Get+0x14>
    83d8:	e8df f001 	tbb	[pc, r1]
    83dc:	08060803 	.word	0x08060803
    83e0:	08          	.byte	0x08
    83e1:	00          	.byte	0x00
    83e2:	b90b      	cbnz	r3, 83e8 <_Unwind_VRS_Get+0x14>
    83e4:	2a0f      	cmp	r2, #15
    83e6:	d903      	bls.n	83f0 <_Unwind_VRS_Get+0x1c>
    83e8:	2002      	movs	r0, #2
    83ea:	4770      	bx	lr
    83ec:	2001      	movs	r0, #1
    83ee:	4770      	bx	lr
    83f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    83f4:	4618      	mov	r0, r3
    83f6:	6853      	ldr	r3, [r2, #4]
    83f8:	9a00      	ldr	r2, [sp, #0]
    83fa:	6013      	str	r3, [r2, #0]
    83fc:	4770      	bx	lr
    83fe:	bf00      	nop

00008400 <_Unwind_GetGR>:
    8400:	b510      	push	{r4, lr}
    8402:	b084      	sub	sp, #16
    8404:	2300      	movs	r3, #0
    8406:	ac03      	add	r4, sp, #12
    8408:	460a      	mov	r2, r1
    840a:	9400      	str	r4, [sp, #0]
    840c:	4619      	mov	r1, r3
    840e:	f7ff ffe1 	bl	83d4 <_Unwind_VRS_Get>
    8412:	9803      	ldr	r0, [sp, #12]
    8414:	b004      	add	sp, #16
    8416:	bd10      	pop	{r4, pc}

00008418 <_Unwind_VRS_Set>:
    8418:	2904      	cmp	r1, #4
    841a:	d807      	bhi.n	842c <_Unwind_VRS_Set+0x14>
    841c:	e8df f001 	tbb	[pc, r1]
    8420:	08060803 	.word	0x08060803
    8424:	08          	.byte	0x08
    8425:	00          	.byte	0x00
    8426:	b90b      	cbnz	r3, 842c <_Unwind_VRS_Set+0x14>
    8428:	2a0f      	cmp	r2, #15
    842a:	d903      	bls.n	8434 <_Unwind_VRS_Set+0x1c>
    842c:	2002      	movs	r0, #2
    842e:	4770      	bx	lr
    8430:	2001      	movs	r0, #1
    8432:	4770      	bx	lr
    8434:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    8438:	9a00      	ldr	r2, [sp, #0]
    843a:	6812      	ldr	r2, [r2, #0]
    843c:	6042      	str	r2, [r0, #4]
    843e:	4618      	mov	r0, r3
    8440:	4770      	bx	lr
    8442:	bf00      	nop

00008444 <_Unwind_SetGR>:
    8444:	b510      	push	{r4, lr}
    8446:	b084      	sub	sp, #16
    8448:	ac04      	add	r4, sp, #16
    844a:	2300      	movs	r3, #0
    844c:	f844 2d04 	str.w	r2, [r4, #-4]!
    8450:	460a      	mov	r2, r1
    8452:	9400      	str	r4, [sp, #0]
    8454:	4619      	mov	r1, r3
    8456:	f7ff ffdf 	bl	8418 <_Unwind_VRS_Set>
    845a:	b004      	add	sp, #16
    845c:	bd10      	pop	{r4, pc}
    845e:	bf00      	nop

00008460 <__gnu_Unwind_Backtrace>:
    8460:	b5f0      	push	{r4, r5, r6, r7, lr}
    8462:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8464:	6413      	str	r3, [r2, #64]	; 0x40
    8466:	1d15      	adds	r5, r2, #4
    8468:	4607      	mov	r7, r0
    846a:	460e      	mov	r6, r1
    846c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    846e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    8472:	ac17      	add	r4, sp, #92	; 0x5c
    8474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    847a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    847c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    847e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8482:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    8486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    848a:	9516      	str	r5, [sp, #88]	; 0x58
    848c:	e010      	b.n	84b0 <__gnu_Unwind_Backtrace+0x50>
    848e:	a816      	add	r0, sp, #88	; 0x58
    8490:	f7ff ffd8 	bl	8444 <_Unwind_SetGR>
    8494:	4631      	mov	r1, r6
    8496:	a816      	add	r0, sp, #88	; 0x58
    8498:	47b8      	blx	r7
    849a:	aa16      	add	r2, sp, #88	; 0x58
    849c:	4669      	mov	r1, sp
    849e:	b978      	cbnz	r0, 84c0 <__gnu_Unwind_Backtrace+0x60>
    84a0:	9b04      	ldr	r3, [sp, #16]
    84a2:	2008      	movs	r0, #8
    84a4:	4798      	blx	r3
    84a6:	2805      	cmp	r0, #5
    84a8:	4604      	mov	r4, r0
    84aa:	d00a      	beq.n	84c2 <__gnu_Unwind_Backtrace+0x62>
    84ac:	2809      	cmp	r0, #9
    84ae:	d007      	beq.n	84c0 <__gnu_Unwind_Backtrace+0x60>
    84b0:	9926      	ldr	r1, [sp, #152]	; 0x98
    84b2:	4668      	mov	r0, sp
    84b4:	f7ff fe14 	bl	80e0 <get_eit_entry>
    84b8:	466a      	mov	r2, sp
    84ba:	210c      	movs	r1, #12
    84bc:	2800      	cmp	r0, #0
    84be:	d0e6      	beq.n	848e <__gnu_Unwind_Backtrace+0x2e>
    84c0:	2409      	movs	r4, #9
    84c2:	a816      	add	r0, sp, #88	; 0x58
    84c4:	f7ff fe5e 	bl	8184 <restore_non_core_regs>
    84c8:	4620      	mov	r0, r4
    84ca:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    84ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000084d0 <__gnu_unwind_pr_common>:
    84d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84d4:	460d      	mov	r5, r1
    84d6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    84d8:	b089      	sub	sp, #36	; 0x24
    84da:	1d0c      	adds	r4, r1, #4
    84dc:	4616      	mov	r6, r2
    84de:	f000 0b03 	and.w	fp, r0, #3
    84e2:	680a      	ldr	r2, [r1, #0]
    84e4:	9406      	str	r4, [sp, #24]
    84e6:	461f      	mov	r7, r3
    84e8:	2b00      	cmp	r3, #0
    84ea:	d068      	beq.n	85be <__gnu_unwind_pr_common+0xee>
    84ec:	0c13      	lsrs	r3, r2, #16
    84ee:	b2d9      	uxtb	r1, r3
    84f0:	0412      	lsls	r2, r2, #16
    84f2:	f88d 301d 	strb.w	r3, [sp, #29]
    84f6:	2302      	movs	r3, #2
    84f8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    84fc:	9205      	str	r2, [sp, #20]
    84fe:	f88d 301c 	strb.w	r3, [sp, #28]
    8502:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    8504:	f1bb 0f02 	cmp.w	fp, #2
    8508:	bf08      	it	eq
    850a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    850c:	f013 0301 	ands.w	r3, r3, #1
    8510:	d146      	bne.n	85a0 <__gnu_unwind_pr_common+0xd0>
    8512:	9301      	str	r3, [sp, #4]
    8514:	f000 0308 	and.w	r3, r0, #8
    8518:	9300      	str	r3, [sp, #0]
    851a:	f8d4 9000 	ldr.w	r9, [r4]
    851e:	f1b9 0f00 	cmp.w	r9, #0
    8522:	f000 80f3 	beq.w	870c <__gnu_unwind_pr_common+0x23c>
    8526:	2f02      	cmp	r7, #2
    8528:	d045      	beq.n	85b6 <__gnu_unwind_pr_common+0xe6>
    852a:	f8b4 9000 	ldrh.w	r9, [r4]
    852e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    8532:	3404      	adds	r4, #4
    8534:	6cab      	ldr	r3, [r5, #72]	; 0x48
    8536:	f028 0a01 	bic.w	sl, r8, #1
    853a:	210f      	movs	r1, #15
    853c:	4630      	mov	r0, r6
    853e:	449a      	add	sl, r3
    8540:	f7ff ff5e 	bl	8400 <_Unwind_GetGR>
    8544:	4582      	cmp	sl, r0
    8546:	d834      	bhi.n	85b2 <__gnu_unwind_pr_common+0xe2>
    8548:	f029 0301 	bic.w	r3, r9, #1
    854c:	4453      	add	r3, sl
    854e:	4283      	cmp	r3, r0
    8550:	bf94      	ite	ls
    8552:	2000      	movls	r0, #0
    8554:	2001      	movhi	r0, #1
    8556:	ea4f 0848 	mov.w	r8, r8, lsl #1
    855a:	f008 0802 	and.w	r8, r8, #2
    855e:	f009 0901 	and.w	r9, r9, #1
    8562:	ea48 0809 	orr.w	r8, r8, r9
    8566:	f1b8 0f01 	cmp.w	r8, #1
    856a:	d03a      	beq.n	85e2 <__gnu_unwind_pr_common+0x112>
    856c:	d331      	bcc.n	85d2 <__gnu_unwind_pr_common+0x102>
    856e:	f1b8 0f02 	cmp.w	r8, #2
    8572:	d11a      	bne.n	85aa <__gnu_unwind_pr_common+0xda>
    8574:	6823      	ldr	r3, [r4, #0]
    8576:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    857a:	f1bb 0f00 	cmp.w	fp, #0
    857e:	d166      	bne.n	864e <__gnu_unwind_pr_common+0x17e>
    8580:	b130      	cbz	r0, 8590 <__gnu_unwind_pr_common+0xc0>
    8582:	9a00      	ldr	r2, [sp, #0]
    8584:	2a00      	cmp	r2, #0
    8586:	d06c      	beq.n	8662 <__gnu_unwind_pr_common+0x192>
    8588:	f1ba 0f00 	cmp.w	sl, #0
    858c:	f000 8090 	beq.w	86b0 <__gnu_unwind_pr_common+0x1e0>
    8590:	2b00      	cmp	r3, #0
    8592:	da00      	bge.n	8596 <__gnu_unwind_pr_common+0xc6>
    8594:	3404      	adds	r4, #4
    8596:	f10a 0301 	add.w	r3, sl, #1
    859a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    859e:	e7bc      	b.n	851a <__gnu_unwind_pr_common+0x4a>
    85a0:	4630      	mov	r0, r6
    85a2:	a905      	add	r1, sp, #20
    85a4:	f000 fb46 	bl	8c34 <__gnu_unwind_execute>
    85a8:	b178      	cbz	r0, 85ca <__gnu_unwind_pr_common+0xfa>
    85aa:	2009      	movs	r0, #9
    85ac:	b009      	add	sp, #36	; 0x24
    85ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85b2:	2000      	movs	r0, #0
    85b4:	e7cf      	b.n	8556 <__gnu_unwind_pr_common+0x86>
    85b6:	f8d4 8004 	ldr.w	r8, [r4, #4]
    85ba:	3408      	adds	r4, #8
    85bc:	e7ba      	b.n	8534 <__gnu_unwind_pr_common+0x64>
    85be:	0212      	lsls	r2, r2, #8
    85c0:	2303      	movs	r3, #3
    85c2:	9205      	str	r2, [sp, #20]
    85c4:	f8ad 301c 	strh.w	r3, [sp, #28]
    85c8:	e79b      	b.n	8502 <__gnu_unwind_pr_common+0x32>
    85ca:	2008      	movs	r0, #8
    85cc:	b009      	add	sp, #36	; 0x24
    85ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85d2:	f1bb 0f00 	cmp.w	fp, #0
    85d6:	d002      	beq.n	85de <__gnu_unwind_pr_common+0x10e>
    85d8:	2800      	cmp	r0, #0
    85da:	f040 80b4 	bne.w	8746 <__gnu_unwind_pr_common+0x276>
    85de:	3404      	adds	r4, #4
    85e0:	e79b      	b.n	851a <__gnu_unwind_pr_common+0x4a>
    85e2:	f1bb 0f00 	cmp.w	fp, #0
    85e6:	d118      	bne.n	861a <__gnu_unwind_pr_common+0x14a>
    85e8:	b1a8      	cbz	r0, 8616 <__gnu_unwind_pr_common+0x146>
    85ea:	e9d4 2300 	ldrd	r2, r3, [r4]
    85ee:	1c99      	adds	r1, r3, #2
    85f0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    85f4:	d0d9      	beq.n	85aa <__gnu_unwind_pr_common+0xda>
    85f6:	f105 0158 	add.w	r1, r5, #88	; 0x58
    85fa:	3301      	adds	r3, #1
    85fc:	9104      	str	r1, [sp, #16]
    85fe:	f000 80b5 	beq.w	876c <__gnu_unwind_pr_common+0x29c>
    8602:	1d20      	adds	r0, r4, #4
    8604:	f7ff fdea 	bl	81dc <_Unwind_decode_typeinfo_ptr.isra.0>
    8608:	ab04      	add	r3, sp, #16
    860a:	4601      	mov	r1, r0
    860c:	4628      	mov	r0, r5
    860e:	f3af 8000 	nop.w
    8612:	2800      	cmp	r0, #0
    8614:	d167      	bne.n	86e6 <__gnu_unwind_pr_common+0x216>
    8616:	3408      	adds	r4, #8
    8618:	e77f      	b.n	851a <__gnu_unwind_pr_common+0x4a>
    861a:	210d      	movs	r1, #13
    861c:	4630      	mov	r0, r6
    861e:	f8d5 8020 	ldr.w	r8, [r5, #32]
    8622:	f7ff feed 	bl	8400 <_Unwind_GetGR>
    8626:	4580      	cmp	r8, r0
    8628:	d1f5      	bne.n	8616 <__gnu_unwind_pr_common+0x146>
    862a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    862c:	429c      	cmp	r4, r3
    862e:	d1f2      	bne.n	8616 <__gnu_unwind_pr_common+0x146>
    8630:	4620      	mov	r0, r4
    8632:	f7ff fd07 	bl	8044 <selfrel_offset31>
    8636:	210f      	movs	r1, #15
    8638:	4602      	mov	r2, r0
    863a:	4630      	mov	r0, r6
    863c:	f7ff ff02 	bl	8444 <_Unwind_SetGR>
    8640:	4630      	mov	r0, r6
    8642:	462a      	mov	r2, r5
    8644:	2100      	movs	r1, #0
    8646:	f7ff fefd 	bl	8444 <_Unwind_SetGR>
    864a:	2007      	movs	r0, #7
    864c:	e7ae      	b.n	85ac <__gnu_unwind_pr_common+0xdc>
    864e:	210d      	movs	r1, #13
    8650:	4630      	mov	r0, r6
    8652:	f8d5 8020 	ldr.w	r8, [r5, #32]
    8656:	f7ff fed3 	bl	8400 <_Unwind_GetGR>
    865a:	4580      	cmp	r8, r0
    865c:	d032      	beq.n	86c4 <__gnu_unwind_pr_common+0x1f4>
    865e:	6823      	ldr	r3, [r4, #0]
    8660:	e796      	b.n	8590 <__gnu_unwind_pr_common+0xc0>
    8662:	f1ba 0f00 	cmp.w	sl, #0
    8666:	d023      	beq.n	86b0 <__gnu_unwind_pr_common+0x1e0>
    8668:	f105 0358 	add.w	r3, r5, #88	; 0x58
    866c:	f104 0804 	add.w	r8, r4, #4
    8670:	f8cd b008 	str.w	fp, [sp, #8]
    8674:	f8dd 9000 	ldr.w	r9, [sp]
    8678:	9703      	str	r7, [sp, #12]
    867a:	46a3      	mov	fp, r4
    867c:	461c      	mov	r4, r3
    867e:	e002      	b.n	8686 <__gnu_unwind_pr_common+0x1b6>
    8680:	4557      	cmp	r7, sl
    8682:	46b9      	mov	r9, r7
    8684:	d040      	beq.n	8708 <__gnu_unwind_pr_common+0x238>
    8686:	4640      	mov	r0, r8
    8688:	9404      	str	r4, [sp, #16]
    868a:	f7ff fda7 	bl	81dc <_Unwind_decode_typeinfo_ptr.isra.0>
    868e:	ab04      	add	r3, sp, #16
    8690:	4601      	mov	r1, r0
    8692:	2200      	movs	r2, #0
    8694:	4628      	mov	r0, r5
    8696:	f3af 8000 	nop.w
    869a:	f109 0701 	add.w	r7, r9, #1
    869e:	f108 0804 	add.w	r8, r8, #4
    86a2:	2800      	cmp	r0, #0
    86a4:	d0ec      	beq.n	8680 <__gnu_unwind_pr_common+0x1b0>
    86a6:	45d1      	cmp	r9, sl
    86a8:	465c      	mov	r4, fp
    86aa:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    86ae:	d1d6      	bne.n	865e <__gnu_unwind_pr_common+0x18e>
    86b0:	4630      	mov	r0, r6
    86b2:	210d      	movs	r1, #13
    86b4:	f7ff fea4 	bl	8400 <_Unwind_GetGR>
    86b8:	9b04      	ldr	r3, [sp, #16]
    86ba:	6228      	str	r0, [r5, #32]
    86bc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    86c0:	2006      	movs	r0, #6
    86c2:	e773      	b.n	85ac <__gnu_unwind_pr_common+0xdc>
    86c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    86c6:	429c      	cmp	r4, r3
    86c8:	d1c9      	bne.n	865e <__gnu_unwind_pr_common+0x18e>
    86ca:	2204      	movs	r2, #4
    86cc:	f04f 0800 	mov.w	r8, #0
    86d0:	18a3      	adds	r3, r4, r2
    86d2:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    86d6:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    86da:	6823      	ldr	r3, [r4, #0]
    86dc:	4543      	cmp	r3, r8
    86de:	db4d      	blt.n	877c <__gnu_unwind_pr_common+0x2ac>
    86e0:	2301      	movs	r3, #1
    86e2:	9301      	str	r3, [sp, #4]
    86e4:	e757      	b.n	8596 <__gnu_unwind_pr_common+0xc6>
    86e6:	4680      	mov	r8, r0
    86e8:	210d      	movs	r1, #13
    86ea:	4630      	mov	r0, r6
    86ec:	f7ff fe88 	bl	8400 <_Unwind_GetGR>
    86f0:	f1b8 0f02 	cmp.w	r8, #2
    86f4:	6228      	str	r0, [r5, #32]
    86f6:	d13e      	bne.n	8776 <__gnu_unwind_pr_common+0x2a6>
    86f8:	462b      	mov	r3, r5
    86fa:	9a04      	ldr	r2, [sp, #16]
    86fc:	f843 2f2c 	str.w	r2, [r3, #44]!
    8700:	626b      	str	r3, [r5, #36]	; 0x24
    8702:	62ac      	str	r4, [r5, #40]	; 0x28
    8704:	2006      	movs	r0, #6
    8706:	e751      	b.n	85ac <__gnu_unwind_pr_common+0xdc>
    8708:	465c      	mov	r4, fp
    870a:	e7d1      	b.n	86b0 <__gnu_unwind_pr_common+0x1e0>
    870c:	a905      	add	r1, sp, #20
    870e:	4630      	mov	r0, r6
    8710:	f000 fa90 	bl	8c34 <__gnu_unwind_execute>
    8714:	2800      	cmp	r0, #0
    8716:	f47f af48 	bne.w	85aa <__gnu_unwind_pr_common+0xda>
    871a:	9b01      	ldr	r3, [sp, #4]
    871c:	2b00      	cmp	r3, #0
    871e:	f43f af54 	beq.w	85ca <__gnu_unwind_pr_common+0xfa>
    8722:	210f      	movs	r1, #15
    8724:	4630      	mov	r0, r6
    8726:	f7ff fe6b 	bl	8400 <_Unwind_GetGR>
    872a:	210e      	movs	r1, #14
    872c:	4602      	mov	r2, r0
    872e:	4630      	mov	r0, r6
    8730:	f7ff fe88 	bl	8444 <_Unwind_SetGR>
    8734:	4630      	mov	r0, r6
    8736:	4a1a      	ldr	r2, [pc, #104]	; (87a0 <__gnu_unwind_pr_common+0x2d0>)
    8738:	210f      	movs	r1, #15
    873a:	f7ff fe83 	bl	8444 <_Unwind_SetGR>
    873e:	2007      	movs	r0, #7
    8740:	b009      	add	sp, #36	; 0x24
    8742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8746:	4620      	mov	r0, r4
    8748:	f7ff fc7c 	bl	8044 <selfrel_offset31>
    874c:	3404      	adds	r4, #4
    874e:	4607      	mov	r7, r0
    8750:	63ac      	str	r4, [r5, #56]	; 0x38
    8752:	4628      	mov	r0, r5
    8754:	f3af 8000 	nop.w
    8758:	2800      	cmp	r0, #0
    875a:	f43f af26 	beq.w	85aa <__gnu_unwind_pr_common+0xda>
    875e:	4630      	mov	r0, r6
    8760:	463a      	mov	r2, r7
    8762:	210f      	movs	r1, #15
    8764:	f7ff fe6e 	bl	8444 <_Unwind_SetGR>
    8768:	2007      	movs	r0, #7
    876a:	e71f      	b.n	85ac <__gnu_unwind_pr_common+0xdc>
    876c:	4630      	mov	r0, r6
    876e:	210d      	movs	r1, #13
    8770:	f7ff fe46 	bl	8400 <_Unwind_GetGR>
    8774:	6228      	str	r0, [r5, #32]
    8776:	9b04      	ldr	r3, [sp, #16]
    8778:	626b      	str	r3, [r5, #36]	; 0x24
    877a:	e7c2      	b.n	8702 <__gnu_unwind_pr_common+0x232>
    877c:	f10a 0001 	add.w	r0, sl, #1
    8780:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8784:	f7ff fc5e 	bl	8044 <selfrel_offset31>
    8788:	210f      	movs	r1, #15
    878a:	4602      	mov	r2, r0
    878c:	4630      	mov	r0, r6
    878e:	f7ff fe59 	bl	8444 <_Unwind_SetGR>
    8792:	4630      	mov	r0, r6
    8794:	462a      	mov	r2, r5
    8796:	4641      	mov	r1, r8
    8798:	f7ff fe54 	bl	8444 <_Unwind_SetGR>
    879c:	2007      	movs	r0, #7
    879e:	e705      	b.n	85ac <__gnu_unwind_pr_common+0xdc>
    87a0:	00000000 	.word	0x00000000

000087a4 <__aeabi_unwind_cpp_pr0>:
    87a4:	2300      	movs	r3, #0
    87a6:	e693      	b.n	84d0 <__gnu_unwind_pr_common>

000087a8 <__aeabi_unwind_cpp_pr1>:
    87a8:	2301      	movs	r3, #1
    87aa:	e691      	b.n	84d0 <__gnu_unwind_pr_common>

000087ac <__aeabi_unwind_cpp_pr2>:
    87ac:	2302      	movs	r3, #2
    87ae:	e68f      	b.n	84d0 <__gnu_unwind_pr_common>

000087b0 <_Unwind_VRS_Pop>:
    87b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87b4:	4605      	mov	r5, r0
    87b6:	b0c4      	sub	sp, #272	; 0x110
    87b8:	2904      	cmp	r1, #4
    87ba:	d806      	bhi.n	87ca <_Unwind_VRS_Pop+0x1a>
    87bc:	e8df f001 	tbb	[pc, r1]
    87c0:	03052b4d 	.word	0x03052b4d
    87c4:	09          	.byte	0x09
    87c5:	00          	.byte	0x00
    87c6:	2b03      	cmp	r3, #3
    87c8:	d05f      	beq.n	888a <_Unwind_VRS_Pop+0xda>
    87ca:	2002      	movs	r0, #2
    87cc:	b044      	add	sp, #272	; 0x110
    87ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87d2:	2b00      	cmp	r3, #0
    87d4:	d1f9      	bne.n	87ca <_Unwind_VRS_Pop+0x1a>
    87d6:	2a10      	cmp	r2, #16
    87d8:	d8f7      	bhi.n	87ca <_Unwind_VRS_Pop+0x1a>
    87da:	682b      	ldr	r3, [r5, #0]
    87dc:	06dc      	lsls	r4, r3, #27
    87de:	f100 80f4 	bmi.w	89ca <_Unwind_VRS_Pop+0x21a>
    87e2:	ac22      	add	r4, sp, #136	; 0x88
    87e4:	4620      	mov	r0, r4
    87e6:	9201      	str	r2, [sp, #4]
    87e8:	f000 f994 	bl	8b14 <__gnu_Unwind_Save_WMMXC>
    87ec:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    87ee:	9a01      	ldr	r2, [sp, #4]
    87f0:	2300      	movs	r3, #0
    87f2:	2601      	movs	r6, #1
    87f4:	fa06 f103 	lsl.w	r1, r6, r3
    87f8:	4211      	tst	r1, r2
    87fa:	d003      	beq.n	8804 <_Unwind_VRS_Pop+0x54>
    87fc:	6801      	ldr	r1, [r0, #0]
    87fe:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    8802:	3004      	adds	r0, #4
    8804:	3301      	adds	r3, #1
    8806:	2b04      	cmp	r3, #4
    8808:	d1f4      	bne.n	87f4 <_Unwind_VRS_Pop+0x44>
    880a:	63a8      	str	r0, [r5, #56]	; 0x38
    880c:	4620      	mov	r0, r4
    880e:	f000 f977 	bl	8b00 <__gnu_Unwind_Restore_WMMXC>
    8812:	2000      	movs	r0, #0
    8814:	e7da      	b.n	87cc <_Unwind_VRS_Pop+0x1c>
    8816:	2b01      	cmp	r3, #1
    8818:	ea4f 4612 	mov.w	r6, r2, lsr #16
    881c:	b297      	uxth	r7, r2
    881e:	d052      	beq.n	88c6 <_Unwind_VRS_Pop+0x116>
    8820:	2b05      	cmp	r3, #5
    8822:	d1d2      	bne.n	87ca <_Unwind_VRS_Pop+0x1a>
    8824:	eb06 0807 	add.w	r8, r6, r7
    8828:	f1b8 0f20 	cmp.w	r8, #32
    882c:	d8cd      	bhi.n	87ca <_Unwind_VRS_Pop+0x1a>
    882e:	2e0f      	cmp	r6, #15
    8830:	f240 8099 	bls.w	8966 <_Unwind_VRS_Pop+0x1b6>
    8834:	46b8      	mov	r8, r7
    8836:	2f00      	cmp	r7, #0
    8838:	f040 80db 	bne.w	89f2 <_Unwind_VRS_Pop+0x242>
    883c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    883e:	63aa      	str	r2, [r5, #56]	; 0x38
    8840:	2e0f      	cmp	r6, #15
    8842:	f240 80be 	bls.w	89c2 <_Unwind_VRS_Pop+0x212>
    8846:	f1b8 0f00 	cmp.w	r8, #0
    884a:	d002      	beq.n	8852 <_Unwind_VRS_Pop+0xa2>
    884c:	a802      	add	r0, sp, #8
    884e:	f000 f90b 	bl	8a68 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    8852:	2000      	movs	r0, #0
    8854:	b044      	add	sp, #272	; 0x110
    8856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    885a:	2b00      	cmp	r3, #0
    885c:	d1b5      	bne.n	87ca <_Unwind_VRS_Pop+0x1a>
    885e:	6bac      	ldr	r4, [r5, #56]	; 0x38
    8860:	b297      	uxth	r7, r2
    8862:	1d28      	adds	r0, r5, #4
    8864:	2601      	movs	r6, #1
    8866:	fa06 f103 	lsl.w	r1, r6, r3
    886a:	4239      	tst	r1, r7
    886c:	f103 0301 	add.w	r3, r3, #1
    8870:	d002      	beq.n	8878 <_Unwind_VRS_Pop+0xc8>
    8872:	6821      	ldr	r1, [r4, #0]
    8874:	6001      	str	r1, [r0, #0]
    8876:	3404      	adds	r4, #4
    8878:	2b10      	cmp	r3, #16
    887a:	f100 0004 	add.w	r0, r0, #4
    887e:	d1f2      	bne.n	8866 <_Unwind_VRS_Pop+0xb6>
    8880:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    8884:	d1e5      	bne.n	8852 <_Unwind_VRS_Pop+0xa2>
    8886:	63ac      	str	r4, [r5, #56]	; 0x38
    8888:	e7a0      	b.n	87cc <_Unwind_VRS_Pop+0x1c>
    888a:	0c16      	lsrs	r6, r2, #16
    888c:	b297      	uxth	r7, r2
    888e:	19f3      	adds	r3, r6, r7
    8890:	2b10      	cmp	r3, #16
    8892:	d89a      	bhi.n	87ca <_Unwind_VRS_Pop+0x1a>
    8894:	682b      	ldr	r3, [r5, #0]
    8896:	071a      	lsls	r2, r3, #28
    8898:	d45d      	bmi.n	8956 <_Unwind_VRS_Pop+0x1a6>
    889a:	ac22      	add	r4, sp, #136	; 0x88
    889c:	4620      	mov	r0, r4
    889e:	f000 f90d 	bl	8abc <__gnu_Unwind_Save_WMMXD>
    88a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    88a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    88a8:	b13f      	cbz	r7, 88ba <_Unwind_VRS_Pop+0x10a>
    88aa:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    88ae:	6818      	ldr	r0, [r3, #0]
    88b0:	f841 0b04 	str.w	r0, [r1], #4
    88b4:	3304      	adds	r3, #4
    88b6:	4293      	cmp	r3, r2
    88b8:	d1f9      	bne.n	88ae <_Unwind_VRS_Pop+0xfe>
    88ba:	4620      	mov	r0, r4
    88bc:	63ab      	str	r3, [r5, #56]	; 0x38
    88be:	f000 f8db 	bl	8a78 <__gnu_Unwind_Restore_WMMXD>
    88c2:	2000      	movs	r0, #0
    88c4:	e782      	b.n	87cc <_Unwind_VRS_Pop+0x1c>
    88c6:	19f2      	adds	r2, r6, r7
    88c8:	2a10      	cmp	r2, #16
    88ca:	f63f af7e 	bhi.w	87ca <_Unwind_VRS_Pop+0x1a>
    88ce:	2e0f      	cmp	r6, #15
    88d0:	f63f af7b 	bhi.w	87ca <_Unwind_VRS_Pop+0x1a>
    88d4:	682a      	ldr	r2, [r5, #0]
    88d6:	07d1      	lsls	r1, r2, #31
    88d8:	d508      	bpl.n	88ec <_Unwind_VRS_Pop+0x13c>
    88da:	4628      	mov	r0, r5
    88dc:	f022 0203 	bic.w	r2, r2, #3
    88e0:	f840 2b48 	str.w	r2, [r0], #72
    88e4:	9301      	str	r3, [sp, #4]
    88e6:	f000 f8b3 	bl	8a50 <__gnu_Unwind_Save_VFP>
    88ea:	9b01      	ldr	r3, [sp, #4]
    88ec:	9301      	str	r3, [sp, #4]
    88ee:	ac22      	add	r4, sp, #136	; 0x88
    88f0:	4620      	mov	r0, r4
    88f2:	f000 f8ad 	bl	8a50 <__gnu_Unwind_Save_VFP>
    88f6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    88f8:	9b01      	ldr	r3, [sp, #4]
    88fa:	2f00      	cmp	r7, #0
    88fc:	f000 8095 	beq.w	8a2a <_Unwind_VRS_Pop+0x27a>
    8900:	007f      	lsls	r7, r7, #1
    8902:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    8906:	f04f 0800 	mov.w	r8, #0
    890a:	3c04      	subs	r4, #4
    890c:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    8910:	f851 0b04 	ldr.w	r0, [r1], #4
    8914:	f844 0f04 	str.w	r0, [r4, #4]!
    8918:	4291      	cmp	r1, r2
    891a:	d1f9      	bne.n	8910 <_Unwind_VRS_Pop+0x160>
    891c:	f1b8 0f00 	cmp.w	r8, #0
    8920:	d00f      	beq.n	8942 <_Unwind_VRS_Pop+0x192>
    8922:	ac02      	add	r4, sp, #8
    8924:	2e10      	cmp	r6, #16
    8926:	4631      	mov	r1, r6
    8928:	bf38      	it	cc
    892a:	2110      	movcc	r1, #16
    892c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    8930:	3984      	subs	r1, #132	; 0x84
    8932:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    8936:	f852 0b04 	ldr.w	r0, [r2], #4
    893a:	f841 0f04 	str.w	r0, [r1, #4]!
    893e:	4294      	cmp	r4, r2
    8940:	d1f9      	bne.n	8936 <_Unwind_VRS_Pop+0x186>
    8942:	2b01      	cmp	r3, #1
    8944:	f47f af7b 	bne.w	883e <_Unwind_VRS_Pop+0x8e>
    8948:	ac22      	add	r4, sp, #136	; 0x88
    894a:	3204      	adds	r2, #4
    894c:	63aa      	str	r2, [r5, #56]	; 0x38
    894e:	4620      	mov	r0, r4
    8950:	f000 f87a 	bl	8a48 <__gnu_Unwind_Restore_VFP>
    8954:	e77d      	b.n	8852 <_Unwind_VRS_Pop+0xa2>
    8956:	f023 0308 	bic.w	r3, r3, #8
    895a:	602b      	str	r3, [r5, #0]
    895c:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    8960:	f000 f8ac 	bl	8abc <__gnu_Unwind_Save_WMMXD>
    8964:	e799      	b.n	889a <_Unwind_VRS_Pop+0xea>
    8966:	f1b8 0f10 	cmp.w	r8, #16
    896a:	682a      	ldr	r2, [r5, #0]
    896c:	d943      	bls.n	89f6 <_Unwind_VRS_Pop+0x246>
    896e:	07d0      	lsls	r0, r2, #31
    8970:	f1a8 0810 	sub.w	r8, r8, #16
    8974:	d50b      	bpl.n	898e <_Unwind_VRS_Pop+0x1de>
    8976:	4628      	mov	r0, r5
    8978:	f022 0201 	bic.w	r2, r2, #1
    897c:	f042 0202 	orr.w	r2, r2, #2
    8980:	f840 2b48 	str.w	r2, [r0], #72
    8984:	9301      	str	r3, [sp, #4]
    8986:	f000 f86b 	bl	8a60 <__gnu_Unwind_Save_VFP_D>
    898a:	682a      	ldr	r2, [r5, #0]
    898c:	9b01      	ldr	r3, [sp, #4]
    898e:	0751      	lsls	r1, r2, #29
    8990:	d425      	bmi.n	89de <_Unwind_VRS_Pop+0x22e>
    8992:	2e0f      	cmp	r6, #15
    8994:	d804      	bhi.n	89a0 <_Unwind_VRS_Pop+0x1f0>
    8996:	a822      	add	r0, sp, #136	; 0x88
    8998:	9301      	str	r3, [sp, #4]
    899a:	f000 f861 	bl	8a60 <__gnu_Unwind_Save_VFP_D>
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	9301      	str	r3, [sp, #4]
    89a2:	ac02      	add	r4, sp, #8
    89a4:	4620      	mov	r0, r4
    89a6:	f000 f863 	bl	8a70 <__gnu_Unwind_Save_VFP_D_16_to_31>
    89aa:	f1c6 0110 	rsb	r1, r6, #16
    89ae:	2900      	cmp	r1, #0
    89b0:	6baa      	ldr	r2, [r5, #56]	; 0x38
    89b2:	9b01      	ldr	r3, [sp, #4]
    89b4:	ddb6      	ble.n	8924 <_Unwind_VRS_Pop+0x174>
    89b6:	ac22      	add	r4, sp, #136	; 0x88
    89b8:	004f      	lsls	r7, r1, #1
    89ba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    89be:	4611      	mov	r1, r2
    89c0:	e7a3      	b.n	890a <_Unwind_VRS_Pop+0x15a>
    89c2:	a822      	add	r0, sp, #136	; 0x88
    89c4:	f000 f848 	bl	8a58 <__gnu_Unwind_Restore_VFP_D>
    89c8:	e73d      	b.n	8846 <_Unwind_VRS_Pop+0x96>
    89ca:	f023 0310 	bic.w	r3, r3, #16
    89ce:	602b      	str	r3, [r5, #0]
    89d0:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    89d4:	9201      	str	r2, [sp, #4]
    89d6:	f000 f89d 	bl	8b14 <__gnu_Unwind_Save_WMMXC>
    89da:	9a01      	ldr	r2, [sp, #4]
    89dc:	e701      	b.n	87e2 <_Unwind_VRS_Pop+0x32>
    89de:	4628      	mov	r0, r5
    89e0:	f022 0204 	bic.w	r2, r2, #4
    89e4:	f840 2bd0 	str.w	r2, [r0], #208
    89e8:	9301      	str	r3, [sp, #4]
    89ea:	f000 f841 	bl	8a70 <__gnu_Unwind_Save_VFP_D_16_to_31>
    89ee:	9b01      	ldr	r3, [sp, #4]
    89f0:	e7cf      	b.n	8992 <_Unwind_VRS_Pop+0x1e2>
    89f2:	682a      	ldr	r2, [r5, #0]
    89f4:	e7cb      	b.n	898e <_Unwind_VRS_Pop+0x1de>
    89f6:	07d0      	lsls	r0, r2, #31
    89f8:	d50a      	bpl.n	8a10 <_Unwind_VRS_Pop+0x260>
    89fa:	4628      	mov	r0, r5
    89fc:	f022 0201 	bic.w	r2, r2, #1
    8a00:	f042 0202 	orr.w	r2, r2, #2
    8a04:	f840 2b48 	str.w	r2, [r0], #72
    8a08:	9301      	str	r3, [sp, #4]
    8a0a:	f000 f829 	bl	8a60 <__gnu_Unwind_Save_VFP_D>
    8a0e:	9b01      	ldr	r3, [sp, #4]
    8a10:	9301      	str	r3, [sp, #4]
    8a12:	ac22      	add	r4, sp, #136	; 0x88
    8a14:	4620      	mov	r0, r4
    8a16:	f000 f823 	bl	8a60 <__gnu_Unwind_Save_VFP_D>
    8a1a:	46b8      	mov	r8, r7
    8a1c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8a1e:	9b01      	ldr	r3, [sp, #4]
    8a20:	2f00      	cmp	r7, #0
    8a22:	f47f af6d 	bne.w	8900 <_Unwind_VRS_Pop+0x150>
    8a26:	460a      	mov	r2, r1
    8a28:	e709      	b.n	883e <_Unwind_VRS_Pop+0x8e>
    8a2a:	460a      	mov	r2, r1
    8a2c:	e78d      	b.n	894a <_Unwind_VRS_Pop+0x19a>
    8a2e:	bf00      	nop

00008a30 <__restore_core_regs>:
    8a30:	f100 0134 	add.w	r1, r0, #52	; 0x34
    8a34:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    8a38:	469c      	mov	ip, r3
    8a3a:	46a6      	mov	lr, r4
    8a3c:	f84c 5d04 	str.w	r5, [ip, #-4]!
    8a40:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    8a44:	46e5      	mov	sp, ip
    8a46:	bd00      	pop	{pc}

00008a48 <__gnu_Unwind_Restore_VFP>:
    8a48:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    8a4c:	4770      	bx	lr
    8a4e:	bf00      	nop

00008a50 <__gnu_Unwind_Save_VFP>:
    8a50:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    8a54:	4770      	bx	lr
    8a56:	bf00      	nop

00008a58 <__gnu_Unwind_Restore_VFP_D>:
    8a58:	ec90 0b20 	vldmia	r0, {d0-d15}
    8a5c:	4770      	bx	lr
    8a5e:	bf00      	nop

00008a60 <__gnu_Unwind_Save_VFP_D>:
    8a60:	ec80 0b20 	vstmia	r0, {d0-d15}
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    8a68:	ecd0 0b20 	vldmia	r0, {d16-d31}
    8a6c:	4770      	bx	lr
    8a6e:	bf00      	nop

00008a70 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    8a70:	ecc0 0b20 	vstmia	r0, {d16-d31}
    8a74:	4770      	bx	lr
    8a76:	bf00      	nop

00008a78 <__gnu_Unwind_Restore_WMMXD>:
    8a78:	ecf0 0102 	ldfe	f0, [r0], #8
    8a7c:	ecf0 1102 	ldfe	f1, [r0], #8
    8a80:	ecf0 2102 	ldfe	f2, [r0], #8
    8a84:	ecf0 3102 	ldfe	f3, [r0], #8
    8a88:	ecf0 4102 	ldfe	f4, [r0], #8
    8a8c:	ecf0 5102 	ldfe	f5, [r0], #8
    8a90:	ecf0 6102 	ldfe	f6, [r0], #8
    8a94:	ecf0 7102 	ldfe	f7, [r0], #8
    8a98:	ecf0 8102 	ldfp	f0, [r0], #8
    8a9c:	ecf0 9102 	ldfp	f1, [r0], #8
    8aa0:	ecf0 a102 	ldfp	f2, [r0], #8
    8aa4:	ecf0 b102 	ldfp	f3, [r0], #8
    8aa8:	ecf0 c102 	ldfp	f4, [r0], #8
    8aac:	ecf0 d102 	ldfp	f5, [r0], #8
    8ab0:	ecf0 e102 	ldfp	f6, [r0], #8
    8ab4:	ecf0 f102 	ldfp	f7, [r0], #8
    8ab8:	4770      	bx	lr
    8aba:	bf00      	nop

00008abc <__gnu_Unwind_Save_WMMXD>:
    8abc:	ece0 0102 	stfe	f0, [r0], #8
    8ac0:	ece0 1102 	stfe	f1, [r0], #8
    8ac4:	ece0 2102 	stfe	f2, [r0], #8
    8ac8:	ece0 3102 	stfe	f3, [r0], #8
    8acc:	ece0 4102 	stfe	f4, [r0], #8
    8ad0:	ece0 5102 	stfe	f5, [r0], #8
    8ad4:	ece0 6102 	stfe	f6, [r0], #8
    8ad8:	ece0 7102 	stfe	f7, [r0], #8
    8adc:	ece0 8102 	stfp	f0, [r0], #8
    8ae0:	ece0 9102 	stfp	f1, [r0], #8
    8ae4:	ece0 a102 	stfp	f2, [r0], #8
    8ae8:	ece0 b102 	stfp	f3, [r0], #8
    8aec:	ece0 c102 	stfp	f4, [r0], #8
    8af0:	ece0 d102 	stfp	f5, [r0], #8
    8af4:	ece0 e102 	stfp	f6, [r0], #8
    8af8:	ece0 f102 	stfp	f7, [r0], #8
    8afc:	4770      	bx	lr
    8afe:	bf00      	nop

00008b00 <__gnu_Unwind_Restore_WMMXC>:
    8b00:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    8b04:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    8b08:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    8b0c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    8b10:	4770      	bx	lr
    8b12:	bf00      	nop

00008b14 <__gnu_Unwind_Save_WMMXC>:
    8b14:	fca0 8101 	stc2	1, cr8, [r0], #4
    8b18:	fca0 9101 	stc2	1, cr9, [r0], #4
    8b1c:	fca0 a101 	stc2	1, cr10, [r0], #4
    8b20:	fca0 b101 	stc2	1, cr11, [r0], #4
    8b24:	4770      	bx	lr
    8b26:	bf00      	nop

00008b28 <_Unwind_RaiseException>:
    8b28:	46ec      	mov	ip, sp
    8b2a:	b500      	push	{lr}
    8b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
    8b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8b34:	f04f 0300 	mov.w	r3, #0
    8b38:	e92d 000c 	stmdb	sp!, {r2, r3}
    8b3c:	a901      	add	r1, sp, #4
    8b3e:	f7ff fbdd 	bl	82fc <__gnu_Unwind_RaiseException>
    8b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8b46:	b012      	add	sp, #72	; 0x48
    8b48:	4770      	bx	lr
    8b4a:	bf00      	nop

00008b4c <_Unwind_Resume>:
    8b4c:	46ec      	mov	ip, sp
    8b4e:	b500      	push	{lr}
    8b50:	e92d 5000 	stmdb	sp!, {ip, lr}
    8b54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8b58:	f04f 0300 	mov.w	r3, #0
    8b5c:	e92d 000c 	stmdb	sp!, {r2, r3}
    8b60:	a901      	add	r1, sp, #4
    8b62:	f7ff fc05 	bl	8370 <__gnu_Unwind_Resume>
    8b66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8b6a:	b012      	add	sp, #72	; 0x48
    8b6c:	4770      	bx	lr
    8b6e:	bf00      	nop

00008b70 <_Unwind_Resume_or_Rethrow>:
    8b70:	46ec      	mov	ip, sp
    8b72:	b500      	push	{lr}
    8b74:	e92d 5000 	stmdb	sp!, {ip, lr}
    8b78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8b7c:	f04f 0300 	mov.w	r3, #0
    8b80:	e92d 000c 	stmdb	sp!, {r2, r3}
    8b84:	a901      	add	r1, sp, #4
    8b86:	f7ff fc15 	bl	83b4 <__gnu_Unwind_Resume_or_Rethrow>
    8b8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8b8e:	b012      	add	sp, #72	; 0x48
    8b90:	4770      	bx	lr
    8b92:	bf00      	nop

00008b94 <_Unwind_ForcedUnwind>:
    8b94:	46ec      	mov	ip, sp
    8b96:	b500      	push	{lr}
    8b98:	e92d 5000 	stmdb	sp!, {ip, lr}
    8b9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8ba0:	f04f 0300 	mov.w	r3, #0
    8ba4:	e92d 000c 	stmdb	sp!, {r2, r3}
    8ba8:	ab01      	add	r3, sp, #4
    8baa:	f7ff fbd7 	bl	835c <__gnu_Unwind_ForcedUnwind>
    8bae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8bb2:	b012      	add	sp, #72	; 0x48
    8bb4:	4770      	bx	lr
    8bb6:	bf00      	nop

00008bb8 <_Unwind_Backtrace>:
    8bb8:	46ec      	mov	ip, sp
    8bba:	b500      	push	{lr}
    8bbc:	e92d 5000 	stmdb	sp!, {ip, lr}
    8bc0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8bc4:	f04f 0300 	mov.w	r3, #0
    8bc8:	e92d 000c 	stmdb	sp!, {r2, r3}
    8bcc:	aa01      	add	r2, sp, #4
    8bce:	f7ff fc47 	bl	8460 <__gnu_Unwind_Backtrace>
    8bd2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8bd6:	b012      	add	sp, #72	; 0x48
    8bd8:	4770      	bx	lr
    8bda:	bf00      	nop

00008bdc <next_unwind_byte>:
    8bdc:	7a02      	ldrb	r2, [r0, #8]
    8bde:	b982      	cbnz	r2, 8c02 <next_unwind_byte+0x26>
    8be0:	7a43      	ldrb	r3, [r0, #9]
    8be2:	b1ab      	cbz	r3, 8c10 <next_unwind_byte+0x34>
    8be4:	6842      	ldr	r2, [r0, #4]
    8be6:	3b01      	subs	r3, #1
    8be8:	b410      	push	{r4}
    8bea:	7243      	strb	r3, [r0, #9]
    8bec:	6813      	ldr	r3, [r2, #0]
    8bee:	2103      	movs	r1, #3
    8bf0:	1d14      	adds	r4, r2, #4
    8bf2:	7201      	strb	r1, [r0, #8]
    8bf4:	021a      	lsls	r2, r3, #8
    8bf6:	6044      	str	r4, [r0, #4]
    8bf8:	6002      	str	r2, [r0, #0]
    8bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    8bfe:	0e18      	lsrs	r0, r3, #24
    8c00:	4770      	bx	lr
    8c02:	6803      	ldr	r3, [r0, #0]
    8c04:	3a01      	subs	r2, #1
    8c06:	7202      	strb	r2, [r0, #8]
    8c08:	021a      	lsls	r2, r3, #8
    8c0a:	6002      	str	r2, [r0, #0]
    8c0c:	0e18      	lsrs	r0, r3, #24
    8c0e:	4770      	bx	lr
    8c10:	20b0      	movs	r0, #176	; 0xb0
    8c12:	4770      	bx	lr

00008c14 <_Unwind_GetGR.constprop.0>:
    8c14:	b500      	push	{lr}
    8c16:	b085      	sub	sp, #20
    8c18:	aa03      	add	r2, sp, #12
    8c1a:	2300      	movs	r3, #0
    8c1c:	9200      	str	r2, [sp, #0]
    8c1e:	4619      	mov	r1, r3
    8c20:	220c      	movs	r2, #12
    8c22:	f7ff fbd7 	bl	83d4 <_Unwind_VRS_Get>
    8c26:	9803      	ldr	r0, [sp, #12]
    8c28:	b005      	add	sp, #20
    8c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c2e:	bf00      	nop

00008c30 <unwind_UCB_from_context>:
    8c30:	e7f0      	b.n	8c14 <_Unwind_GetGR.constprop.0>
    8c32:	bf00      	nop

00008c34 <__gnu_unwind_execute>:
    8c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8c38:	4605      	mov	r5, r0
    8c3a:	b085      	sub	sp, #20
    8c3c:	460e      	mov	r6, r1
    8c3e:	f04f 0800 	mov.w	r8, #0
    8c42:	4630      	mov	r0, r6
    8c44:	f7ff ffca 	bl	8bdc <next_unwind_byte>
    8c48:	28b0      	cmp	r0, #176	; 0xb0
    8c4a:	4604      	mov	r4, r0
    8c4c:	f000 80b1 	beq.w	8db2 <__gnu_unwind_execute+0x17e>
    8c50:	0607      	lsls	r7, r0, #24
    8c52:	d520      	bpl.n	8c96 <__gnu_unwind_execute+0x62>
    8c54:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    8c58:	2b80      	cmp	r3, #128	; 0x80
    8c5a:	d065      	beq.n	8d28 <__gnu_unwind_execute+0xf4>
    8c5c:	2b90      	cmp	r3, #144	; 0x90
    8c5e:	d036      	beq.n	8cce <__gnu_unwind_execute+0x9a>
    8c60:	2ba0      	cmp	r3, #160	; 0xa0
    8c62:	d078      	beq.n	8d56 <__gnu_unwind_execute+0x122>
    8c64:	2bb0      	cmp	r3, #176	; 0xb0
    8c66:	d047      	beq.n	8cf8 <__gnu_unwind_execute+0xc4>
    8c68:	2bc0      	cmp	r3, #192	; 0xc0
    8c6a:	f000 808a 	beq.w	8d82 <__gnu_unwind_execute+0x14e>
    8c6e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    8c72:	2bd0      	cmp	r3, #208	; 0xd0
    8c74:	d10b      	bne.n	8c8e <__gnu_unwind_execute+0x5a>
    8c76:	f000 0207 	and.w	r2, r0, #7
    8c7a:	3201      	adds	r2, #1
    8c7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8c80:	2305      	movs	r3, #5
    8c82:	2101      	movs	r1, #1
    8c84:	4628      	mov	r0, r5
    8c86:	f7ff fd93 	bl	87b0 <_Unwind_VRS_Pop>
    8c8a:	2800      	cmp	r0, #0
    8c8c:	d0d9      	beq.n	8c42 <__gnu_unwind_execute+0xe>
    8c8e:	2009      	movs	r0, #9
    8c90:	b005      	add	sp, #20
    8c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8c96:	f10d 090c 	add.w	r9, sp, #12
    8c9a:	2300      	movs	r3, #0
    8c9c:	4619      	mov	r1, r3
    8c9e:	0087      	lsls	r7, r0, #2
    8ca0:	f8cd 9000 	str.w	r9, [sp]
    8ca4:	220d      	movs	r2, #13
    8ca6:	4628      	mov	r0, r5
    8ca8:	f7ff fb94 	bl	83d4 <_Unwind_VRS_Get>
    8cac:	b2ff      	uxtb	r7, r7
    8cae:	9b03      	ldr	r3, [sp, #12]
    8cb0:	f8cd 9000 	str.w	r9, [sp]
    8cb4:	3704      	adds	r7, #4
    8cb6:	0660      	lsls	r0, r4, #25
    8cb8:	bf4c      	ite	mi
    8cba:	1bdf      	submi	r7, r3, r7
    8cbc:	18ff      	addpl	r7, r7, r3
    8cbe:	2300      	movs	r3, #0
    8cc0:	4619      	mov	r1, r3
    8cc2:	220d      	movs	r2, #13
    8cc4:	4628      	mov	r0, r5
    8cc6:	9703      	str	r7, [sp, #12]
    8cc8:	f7ff fba6 	bl	8418 <_Unwind_VRS_Set>
    8ccc:	e7b9      	b.n	8c42 <__gnu_unwind_execute+0xe>
    8cce:	f000 030d 	and.w	r3, r0, #13
    8cd2:	2b0d      	cmp	r3, #13
    8cd4:	d0db      	beq.n	8c8e <__gnu_unwind_execute+0x5a>
    8cd6:	af03      	add	r7, sp, #12
    8cd8:	2300      	movs	r3, #0
    8cda:	f000 020f 	and.w	r2, r0, #15
    8cde:	4619      	mov	r1, r3
    8ce0:	9700      	str	r7, [sp, #0]
    8ce2:	4628      	mov	r0, r5
    8ce4:	f7ff fb76 	bl	83d4 <_Unwind_VRS_Get>
    8ce8:	2300      	movs	r3, #0
    8cea:	9700      	str	r7, [sp, #0]
    8cec:	4619      	mov	r1, r3
    8cee:	220d      	movs	r2, #13
    8cf0:	4628      	mov	r0, r5
    8cf2:	f7ff fb91 	bl	8418 <_Unwind_VRS_Set>
    8cf6:	e7a4      	b.n	8c42 <__gnu_unwind_execute+0xe>
    8cf8:	28b1      	cmp	r0, #177	; 0xb1
    8cfa:	d05f      	beq.n	8dbc <__gnu_unwind_execute+0x188>
    8cfc:	28b2      	cmp	r0, #178	; 0xb2
    8cfe:	f000 80cc 	beq.w	8e9a <__gnu_unwind_execute+0x266>
    8d02:	28b3      	cmp	r0, #179	; 0xb3
    8d04:	d07e      	beq.n	8e04 <__gnu_unwind_execute+0x1d0>
    8d06:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    8d0a:	2bb4      	cmp	r3, #180	; 0xb4
    8d0c:	d0bf      	beq.n	8c8e <__gnu_unwind_execute+0x5a>
    8d0e:	f000 0207 	and.w	r2, r0, #7
    8d12:	3201      	adds	r2, #1
    8d14:	2301      	movs	r3, #1
    8d16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8d1a:	4619      	mov	r1, r3
    8d1c:	4628      	mov	r0, r5
    8d1e:	f7ff fd47 	bl	87b0 <_Unwind_VRS_Pop>
    8d22:	2800      	cmp	r0, #0
    8d24:	d08d      	beq.n	8c42 <__gnu_unwind_execute+0xe>
    8d26:	e7b2      	b.n	8c8e <__gnu_unwind_execute+0x5a>
    8d28:	4630      	mov	r0, r6
    8d2a:	f7ff ff57 	bl	8bdc <next_unwind_byte>
    8d2e:	0224      	lsls	r4, r4, #8
    8d30:	4304      	orrs	r4, r0
    8d32:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    8d36:	d0aa      	beq.n	8c8e <__gnu_unwind_execute+0x5a>
    8d38:	0124      	lsls	r4, r4, #4
    8d3a:	2300      	movs	r3, #0
    8d3c:	b2a2      	uxth	r2, r4
    8d3e:	4619      	mov	r1, r3
    8d40:	4628      	mov	r0, r5
    8d42:	f7ff fd35 	bl	87b0 <_Unwind_VRS_Pop>
    8d46:	2800      	cmp	r0, #0
    8d48:	d1a1      	bne.n	8c8e <__gnu_unwind_execute+0x5a>
    8d4a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    8d4e:	bf18      	it	ne
    8d50:	f04f 0801 	movne.w	r8, #1
    8d54:	e775      	b.n	8c42 <__gnu_unwind_execute+0xe>
    8d56:	43c2      	mvns	r2, r0
    8d58:	f002 0307 	and.w	r3, r2, #7
    8d5c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    8d60:	411a      	asrs	r2, r3
    8d62:	0701      	lsls	r1, r0, #28
    8d64:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    8d68:	f04f 0300 	mov.w	r3, #0
    8d6c:	bf48      	it	mi
    8d6e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    8d72:	4619      	mov	r1, r3
    8d74:	4628      	mov	r0, r5
    8d76:	f7ff fd1b 	bl	87b0 <_Unwind_VRS_Pop>
    8d7a:	2800      	cmp	r0, #0
    8d7c:	f43f af61 	beq.w	8c42 <__gnu_unwind_execute+0xe>
    8d80:	e785      	b.n	8c8e <__gnu_unwind_execute+0x5a>
    8d82:	28c6      	cmp	r0, #198	; 0xc6
    8d84:	d051      	beq.n	8e2a <__gnu_unwind_execute+0x1f6>
    8d86:	28c7      	cmp	r0, #199	; 0xc7
    8d88:	d05a      	beq.n	8e40 <__gnu_unwind_execute+0x20c>
    8d8a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    8d8e:	2bc0      	cmp	r3, #192	; 0xc0
    8d90:	d069      	beq.n	8e66 <__gnu_unwind_execute+0x232>
    8d92:	28c8      	cmp	r0, #200	; 0xc8
    8d94:	d075      	beq.n	8e82 <__gnu_unwind_execute+0x24e>
    8d96:	28c9      	cmp	r0, #201	; 0xc9
    8d98:	f47f af79 	bne.w	8c8e <__gnu_unwind_execute+0x5a>
    8d9c:	4630      	mov	r0, r6
    8d9e:	f7ff ff1d 	bl	8bdc <next_unwind_byte>
    8da2:	0302      	lsls	r2, r0, #12
    8da4:	f000 000f 	and.w	r0, r0, #15
    8da8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    8dac:	3001      	adds	r0, #1
    8dae:	4302      	orrs	r2, r0
    8db0:	e766      	b.n	8c80 <__gnu_unwind_execute+0x4c>
    8db2:	f1b8 0f00 	cmp.w	r8, #0
    8db6:	d014      	beq.n	8de2 <__gnu_unwind_execute+0x1ae>
    8db8:	2000      	movs	r0, #0
    8dba:	e769      	b.n	8c90 <__gnu_unwind_execute+0x5c>
    8dbc:	4630      	mov	r0, r6
    8dbe:	f7ff ff0d 	bl	8bdc <next_unwind_byte>
    8dc2:	2800      	cmp	r0, #0
    8dc4:	f43f af63 	beq.w	8c8e <__gnu_unwind_execute+0x5a>
    8dc8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8dcc:	f47f af5f 	bne.w	8c8e <__gnu_unwind_execute+0x5a>
    8dd0:	4602      	mov	r2, r0
    8dd2:	4619      	mov	r1, r3
    8dd4:	4628      	mov	r0, r5
    8dd6:	f7ff fceb 	bl	87b0 <_Unwind_VRS_Pop>
    8dda:	2800      	cmp	r0, #0
    8ddc:	f43f af31 	beq.w	8c42 <__gnu_unwind_execute+0xe>
    8de0:	e755      	b.n	8c8e <__gnu_unwind_execute+0x5a>
    8de2:	ac03      	add	r4, sp, #12
    8de4:	4643      	mov	r3, r8
    8de6:	220e      	movs	r2, #14
    8de8:	4641      	mov	r1, r8
    8dea:	9400      	str	r4, [sp, #0]
    8dec:	4628      	mov	r0, r5
    8dee:	f7ff faf1 	bl	83d4 <_Unwind_VRS_Get>
    8df2:	9400      	str	r4, [sp, #0]
    8df4:	4628      	mov	r0, r5
    8df6:	4643      	mov	r3, r8
    8df8:	220f      	movs	r2, #15
    8dfa:	4641      	mov	r1, r8
    8dfc:	f7ff fb0c 	bl	8418 <_Unwind_VRS_Set>
    8e00:	4640      	mov	r0, r8
    8e02:	e745      	b.n	8c90 <__gnu_unwind_execute+0x5c>
    8e04:	4630      	mov	r0, r6
    8e06:	f7ff fee9 	bl	8bdc <next_unwind_byte>
    8e0a:	0301      	lsls	r1, r0, #12
    8e0c:	f000 000f 	and.w	r0, r0, #15
    8e10:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8e14:	1c42      	adds	r2, r0, #1
    8e16:	2301      	movs	r3, #1
    8e18:	430a      	orrs	r2, r1
    8e1a:	4628      	mov	r0, r5
    8e1c:	4619      	mov	r1, r3
    8e1e:	f7ff fcc7 	bl	87b0 <_Unwind_VRS_Pop>
    8e22:	2800      	cmp	r0, #0
    8e24:	f43f af0d 	beq.w	8c42 <__gnu_unwind_execute+0xe>
    8e28:	e731      	b.n	8c8e <__gnu_unwind_execute+0x5a>
    8e2a:	4630      	mov	r0, r6
    8e2c:	f7ff fed6 	bl	8bdc <next_unwind_byte>
    8e30:	0301      	lsls	r1, r0, #12
    8e32:	f000 000f 	and.w	r0, r0, #15
    8e36:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8e3a:	1c42      	adds	r2, r0, #1
    8e3c:	2303      	movs	r3, #3
    8e3e:	e7eb      	b.n	8e18 <__gnu_unwind_execute+0x1e4>
    8e40:	4630      	mov	r0, r6
    8e42:	f7ff fecb 	bl	8bdc <next_unwind_byte>
    8e46:	4602      	mov	r2, r0
    8e48:	2800      	cmp	r0, #0
    8e4a:	f43f af20 	beq.w	8c8e <__gnu_unwind_execute+0x5a>
    8e4e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8e52:	f47f af1c 	bne.w	8c8e <__gnu_unwind_execute+0x5a>
    8e56:	2104      	movs	r1, #4
    8e58:	4628      	mov	r0, r5
    8e5a:	f7ff fca9 	bl	87b0 <_Unwind_VRS_Pop>
    8e5e:	2800      	cmp	r0, #0
    8e60:	f43f aeef 	beq.w	8c42 <__gnu_unwind_execute+0xe>
    8e64:	e713      	b.n	8c8e <__gnu_unwind_execute+0x5a>
    8e66:	f000 020f 	and.w	r2, r0, #15
    8e6a:	3201      	adds	r2, #1
    8e6c:	2303      	movs	r3, #3
    8e6e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    8e72:	4619      	mov	r1, r3
    8e74:	4628      	mov	r0, r5
    8e76:	f7ff fc9b 	bl	87b0 <_Unwind_VRS_Pop>
    8e7a:	2800      	cmp	r0, #0
    8e7c:	f43f aee1 	beq.w	8c42 <__gnu_unwind_execute+0xe>
    8e80:	e705      	b.n	8c8e <__gnu_unwind_execute+0x5a>
    8e82:	4630      	mov	r0, r6
    8e84:	f7ff feaa 	bl	8bdc <next_unwind_byte>
    8e88:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    8e8c:	f000 030f 	and.w	r3, r0, #15
    8e90:	3210      	adds	r2, #16
    8e92:	3301      	adds	r3, #1
    8e94:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    8e98:	e6f2      	b.n	8c80 <__gnu_unwind_execute+0x4c>
    8e9a:	2300      	movs	r3, #0
    8e9c:	f10d 090c 	add.w	r9, sp, #12
    8ea0:	220d      	movs	r2, #13
    8ea2:	4619      	mov	r1, r3
    8ea4:	f8cd 9000 	str.w	r9, [sp]
    8ea8:	4628      	mov	r0, r5
    8eaa:	f7ff fa93 	bl	83d4 <_Unwind_VRS_Get>
    8eae:	4630      	mov	r0, r6
    8eb0:	f7ff fe94 	bl	8bdc <next_unwind_byte>
    8eb4:	0602      	lsls	r2, r0, #24
    8eb6:	f04f 0702 	mov.w	r7, #2
    8eba:	d50c      	bpl.n	8ed6 <__gnu_unwind_execute+0x2a2>
    8ebc:	9b03      	ldr	r3, [sp, #12]
    8ebe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    8ec2:	40b8      	lsls	r0, r7
    8ec4:	4403      	add	r3, r0
    8ec6:	4630      	mov	r0, r6
    8ec8:	9303      	str	r3, [sp, #12]
    8eca:	f7ff fe87 	bl	8bdc <next_unwind_byte>
    8ece:	0603      	lsls	r3, r0, #24
    8ed0:	f107 0707 	add.w	r7, r7, #7
    8ed4:	d4f2      	bmi.n	8ebc <__gnu_unwind_execute+0x288>
    8ed6:	9b03      	ldr	r3, [sp, #12]
    8ed8:	f8cd 9000 	str.w	r9, [sp]
    8edc:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    8ee0:	f503 7201 	add.w	r2, r3, #516	; 0x204
    8ee4:	40bc      	lsls	r4, r7
    8ee6:	2300      	movs	r3, #0
    8ee8:	4414      	add	r4, r2
    8eea:	4619      	mov	r1, r3
    8eec:	220d      	movs	r2, #13
    8eee:	4628      	mov	r0, r5
    8ef0:	9403      	str	r4, [sp, #12]
    8ef2:	f7ff fa91 	bl	8418 <_Unwind_VRS_Set>
    8ef6:	e6a4      	b.n	8c42 <__gnu_unwind_execute+0xe>

00008ef8 <__gnu_unwind_frame>:
    8ef8:	b510      	push	{r4, lr}
    8efa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    8efc:	b084      	sub	sp, #16
    8efe:	685a      	ldr	r2, [r3, #4]
    8f00:	2003      	movs	r0, #3
    8f02:	f88d 000c 	strb.w	r0, [sp, #12]
    8f06:	79dc      	ldrb	r4, [r3, #7]
    8f08:	f88d 400d 	strb.w	r4, [sp, #13]
    8f0c:	0212      	lsls	r2, r2, #8
    8f0e:	3308      	adds	r3, #8
    8f10:	4608      	mov	r0, r1
    8f12:	a901      	add	r1, sp, #4
    8f14:	9201      	str	r2, [sp, #4]
    8f16:	9302      	str	r3, [sp, #8]
    8f18:	f7ff fe8c 	bl	8c34 <__gnu_unwind_execute>
    8f1c:	b004      	add	sp, #16
    8f1e:	bd10      	pop	{r4, pc}

00008f20 <_Unwind_GetRegionStart>:
    8f20:	b508      	push	{r3, lr}
    8f22:	f7ff fe85 	bl	8c30 <unwind_UCB_from_context>
    8f26:	6c80      	ldr	r0, [r0, #72]	; 0x48
    8f28:	bd08      	pop	{r3, pc}
    8f2a:	bf00      	nop

00008f2c <_Unwind_GetLanguageSpecificData>:
    8f2c:	b508      	push	{r3, lr}
    8f2e:	f7ff fe7f 	bl	8c30 <unwind_UCB_from_context>
    8f32:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    8f34:	79c3      	ldrb	r3, [r0, #7]
    8f36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8f3a:	3008      	adds	r0, #8
    8f3c:	bd08      	pop	{r3, pc}
    8f3e:	bf00      	nop

00008f40 <_Unwind_GetDataRelBase>:
    8f40:	b508      	push	{r3, lr}
    8f42:	f000 f807 	bl	8f54 <abort>
    8f46:	bf00      	nop

00008f48 <_Unwind_GetTextRelBase>:
    8f48:	b508      	push	{r3, lr}
    8f4a:	f7ff fff9 	bl	8f40 <_Unwind_GetDataRelBase>
    8f4e:	bf00      	nop

00008f50 <__aeabi_idiv0>:
    8f50:	4770      	bx	lr
    8f52:	bf00      	nop

00008f54 <abort>:
    8f54:	b508      	push	{r3, lr}
    8f56:	2006      	movs	r0, #6
    8f58:	f000 fab8 	bl	94cc <raise>
    8f5c:	2001      	movs	r0, #1
    8f5e:	f7fc f919 	bl	5194 <_exit>
    8f62:	Address 0x0000000000008f62 is out of bounds.


00008f64 <__sflush_r>:
    8f64:	898a      	ldrh	r2, [r1, #12]
    8f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f6a:	4605      	mov	r5, r0
    8f6c:	0710      	lsls	r0, r2, #28
    8f6e:	460c      	mov	r4, r1
    8f70:	d458      	bmi.n	9024 <__sflush_r+0xc0>
    8f72:	684b      	ldr	r3, [r1, #4]
    8f74:	2b00      	cmp	r3, #0
    8f76:	dc05      	bgt.n	8f84 <__sflush_r+0x20>
    8f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	dc02      	bgt.n	8f84 <__sflush_r+0x20>
    8f7e:	2000      	movs	r0, #0
    8f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    8f86:	2e00      	cmp	r6, #0
    8f88:	d0f9      	beq.n	8f7e <__sflush_r+0x1a>
    8f8a:	2300      	movs	r3, #0
    8f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    8f90:	682f      	ldr	r7, [r5, #0]
    8f92:	6a21      	ldr	r1, [r4, #32]
    8f94:	602b      	str	r3, [r5, #0]
    8f96:	d032      	beq.n	8ffe <__sflush_r+0x9a>
    8f98:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8f9a:	89a3      	ldrh	r3, [r4, #12]
    8f9c:	075a      	lsls	r2, r3, #29
    8f9e:	d505      	bpl.n	8fac <__sflush_r+0x48>
    8fa0:	6863      	ldr	r3, [r4, #4]
    8fa2:	1ac0      	subs	r0, r0, r3
    8fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8fa6:	b10b      	cbz	r3, 8fac <__sflush_r+0x48>
    8fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8faa:	1ac0      	subs	r0, r0, r3
    8fac:	2300      	movs	r3, #0
    8fae:	4602      	mov	r2, r0
    8fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    8fb2:	6a21      	ldr	r1, [r4, #32]
    8fb4:	4628      	mov	r0, r5
    8fb6:	47b0      	blx	r6
    8fb8:	1c43      	adds	r3, r0, #1
    8fba:	89a3      	ldrh	r3, [r4, #12]
    8fbc:	d106      	bne.n	8fcc <__sflush_r+0x68>
    8fbe:	6829      	ldr	r1, [r5, #0]
    8fc0:	291d      	cmp	r1, #29
    8fc2:	d848      	bhi.n	9056 <__sflush_r+0xf2>
    8fc4:	4a29      	ldr	r2, [pc, #164]	; (906c <__sflush_r+0x108>)
    8fc6:	40ca      	lsrs	r2, r1
    8fc8:	07d6      	lsls	r6, r2, #31
    8fca:	d544      	bpl.n	9056 <__sflush_r+0xf2>
    8fcc:	2200      	movs	r2, #0
    8fce:	6062      	str	r2, [r4, #4]
    8fd0:	04d9      	lsls	r1, r3, #19
    8fd2:	6922      	ldr	r2, [r4, #16]
    8fd4:	6022      	str	r2, [r4, #0]
    8fd6:	d504      	bpl.n	8fe2 <__sflush_r+0x7e>
    8fd8:	1c42      	adds	r2, r0, #1
    8fda:	d101      	bne.n	8fe0 <__sflush_r+0x7c>
    8fdc:	682b      	ldr	r3, [r5, #0]
    8fde:	b903      	cbnz	r3, 8fe2 <__sflush_r+0x7e>
    8fe0:	6560      	str	r0, [r4, #84]	; 0x54
    8fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8fe4:	602f      	str	r7, [r5, #0]
    8fe6:	2900      	cmp	r1, #0
    8fe8:	d0c9      	beq.n	8f7e <__sflush_r+0x1a>
    8fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8fee:	4299      	cmp	r1, r3
    8ff0:	d002      	beq.n	8ff8 <__sflush_r+0x94>
    8ff2:	4628      	mov	r0, r5
    8ff4:	f000 f98a 	bl	930c <_free_r>
    8ff8:	2000      	movs	r0, #0
    8ffa:	6360      	str	r0, [r4, #52]	; 0x34
    8ffc:	e7c0      	b.n	8f80 <__sflush_r+0x1c>
    8ffe:	2301      	movs	r3, #1
    9000:	4628      	mov	r0, r5
    9002:	47b0      	blx	r6
    9004:	1c41      	adds	r1, r0, #1
    9006:	d1c8      	bne.n	8f9a <__sflush_r+0x36>
    9008:	682b      	ldr	r3, [r5, #0]
    900a:	2b00      	cmp	r3, #0
    900c:	d0c5      	beq.n	8f9a <__sflush_r+0x36>
    900e:	2b1d      	cmp	r3, #29
    9010:	d001      	beq.n	9016 <__sflush_r+0xb2>
    9012:	2b16      	cmp	r3, #22
    9014:	d101      	bne.n	901a <__sflush_r+0xb6>
    9016:	602f      	str	r7, [r5, #0]
    9018:	e7b1      	b.n	8f7e <__sflush_r+0x1a>
    901a:	89a3      	ldrh	r3, [r4, #12]
    901c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9020:	81a3      	strh	r3, [r4, #12]
    9022:	e7ad      	b.n	8f80 <__sflush_r+0x1c>
    9024:	690f      	ldr	r7, [r1, #16]
    9026:	2f00      	cmp	r7, #0
    9028:	d0a9      	beq.n	8f7e <__sflush_r+0x1a>
    902a:	0793      	lsls	r3, r2, #30
    902c:	680e      	ldr	r6, [r1, #0]
    902e:	bf08      	it	eq
    9030:	694b      	ldreq	r3, [r1, #20]
    9032:	600f      	str	r7, [r1, #0]
    9034:	bf18      	it	ne
    9036:	2300      	movne	r3, #0
    9038:	eba6 0807 	sub.w	r8, r6, r7
    903c:	608b      	str	r3, [r1, #8]
    903e:	f1b8 0f00 	cmp.w	r8, #0
    9042:	dd9c      	ble.n	8f7e <__sflush_r+0x1a>
    9044:	4643      	mov	r3, r8
    9046:	463a      	mov	r2, r7
    9048:	6a21      	ldr	r1, [r4, #32]
    904a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    904c:	4628      	mov	r0, r5
    904e:	47b0      	blx	r6
    9050:	2800      	cmp	r0, #0
    9052:	dc06      	bgt.n	9062 <__sflush_r+0xfe>
    9054:	89a3      	ldrh	r3, [r4, #12]
    9056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    905a:	81a3      	strh	r3, [r4, #12]
    905c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9060:	e78e      	b.n	8f80 <__sflush_r+0x1c>
    9062:	4407      	add	r7, r0
    9064:	eba8 0800 	sub.w	r8, r8, r0
    9068:	e7e9      	b.n	903e <__sflush_r+0xda>
    906a:	bf00      	nop
    906c:	20400001 	.word	0x20400001

00009070 <_fflush_r>:
    9070:	b538      	push	{r3, r4, r5, lr}
    9072:	690b      	ldr	r3, [r1, #16]
    9074:	4605      	mov	r5, r0
    9076:	460c      	mov	r4, r1
    9078:	b1db      	cbz	r3, 90b2 <_fflush_r+0x42>
    907a:	b118      	cbz	r0, 9084 <_fflush_r+0x14>
    907c:	6983      	ldr	r3, [r0, #24]
    907e:	b90b      	cbnz	r3, 9084 <_fflush_r+0x14>
    9080:	f000 f872 	bl	9168 <__sinit>
    9084:	4b0c      	ldr	r3, [pc, #48]	; (90b8 <_fflush_r+0x48>)
    9086:	429c      	cmp	r4, r3
    9088:	d109      	bne.n	909e <_fflush_r+0x2e>
    908a:	686c      	ldr	r4, [r5, #4]
    908c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9090:	b17b      	cbz	r3, 90b2 <_fflush_r+0x42>
    9092:	4621      	mov	r1, r4
    9094:	4628      	mov	r0, r5
    9096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    909a:	f7ff bf63 	b.w	8f64 <__sflush_r>
    909e:	4b07      	ldr	r3, [pc, #28]	; (90bc <_fflush_r+0x4c>)
    90a0:	429c      	cmp	r4, r3
    90a2:	d101      	bne.n	90a8 <_fflush_r+0x38>
    90a4:	68ac      	ldr	r4, [r5, #8]
    90a6:	e7f1      	b.n	908c <_fflush_r+0x1c>
    90a8:	4b05      	ldr	r3, [pc, #20]	; (90c0 <_fflush_r+0x50>)
    90aa:	429c      	cmp	r4, r3
    90ac:	bf08      	it	eq
    90ae:	68ec      	ldreq	r4, [r5, #12]
    90b0:	e7ec      	b.n	908c <_fflush_r+0x1c>
    90b2:	2000      	movs	r0, #0
    90b4:	bd38      	pop	{r3, r4, r5, pc}
    90b6:	bf00      	nop
    90b8:	0000ae64 	.word	0x0000ae64
    90bc:	0000ae84 	.word	0x0000ae84
    90c0:	0000ae44 	.word	0x0000ae44

000090c4 <fflush>:
    90c4:	4601      	mov	r1, r0
    90c6:	b920      	cbnz	r0, 90d2 <fflush+0xe>
    90c8:	4b04      	ldr	r3, [pc, #16]	; (90dc <fflush+0x18>)
    90ca:	4905      	ldr	r1, [pc, #20]	; (90e0 <fflush+0x1c>)
    90cc:	6818      	ldr	r0, [r3, #0]
    90ce:	f000 b8b7 	b.w	9240 <_fwalk_reent>
    90d2:	4b04      	ldr	r3, [pc, #16]	; (90e4 <fflush+0x20>)
    90d4:	6818      	ldr	r0, [r3, #0]
    90d6:	f7ff bfcb 	b.w	9070 <_fflush_r>
    90da:	bf00      	nop
    90dc:	0000aea4 	.word	0x0000aea4
    90e0:	00009071 	.word	0x00009071
    90e4:	10000098 	.word	0x10000098

000090e8 <std>:
    90e8:	2300      	movs	r3, #0
    90ea:	b510      	push	{r4, lr}
    90ec:	4604      	mov	r4, r0
    90ee:	e9c0 3300 	strd	r3, r3, [r0]
    90f2:	6083      	str	r3, [r0, #8]
    90f4:	8181      	strh	r1, [r0, #12]
    90f6:	6643      	str	r3, [r0, #100]	; 0x64
    90f8:	81c2      	strh	r2, [r0, #14]
    90fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
    90fe:	6183      	str	r3, [r0, #24]
    9100:	4619      	mov	r1, r3
    9102:	2208      	movs	r2, #8
    9104:	305c      	adds	r0, #92	; 0x5c
    9106:	f000 f8f8 	bl	92fa <memset>
    910a:	4b05      	ldr	r3, [pc, #20]	; (9120 <std+0x38>)
    910c:	6263      	str	r3, [r4, #36]	; 0x24
    910e:	4b05      	ldr	r3, [pc, #20]	; (9124 <std+0x3c>)
    9110:	62a3      	str	r3, [r4, #40]	; 0x28
    9112:	4b05      	ldr	r3, [pc, #20]	; (9128 <std+0x40>)
    9114:	62e3      	str	r3, [r4, #44]	; 0x2c
    9116:	4b05      	ldr	r3, [pc, #20]	; (912c <std+0x44>)
    9118:	6224      	str	r4, [r4, #32]
    911a:	6323      	str	r3, [r4, #48]	; 0x30
    911c:	bd10      	pop	{r4, pc}
    911e:	bf00      	nop
    9120:	00009505 	.word	0x00009505
    9124:	00009527 	.word	0x00009527
    9128:	0000955f 	.word	0x0000955f
    912c:	00009583 	.word	0x00009583

00009130 <_cleanup_r>:
    9130:	4901      	ldr	r1, [pc, #4]	; (9138 <_cleanup_r+0x8>)
    9132:	f000 b885 	b.w	9240 <_fwalk_reent>
    9136:	bf00      	nop
    9138:	00009071 	.word	0x00009071

0000913c <__sfmoreglue>:
    913c:	b570      	push	{r4, r5, r6, lr}
    913e:	1e4a      	subs	r2, r1, #1
    9140:	2568      	movs	r5, #104	; 0x68
    9142:	4355      	muls	r5, r2
    9144:	460e      	mov	r6, r1
    9146:	f105 0174 	add.w	r1, r5, #116	; 0x74
    914a:	f000 f92d 	bl	93a8 <_malloc_r>
    914e:	4604      	mov	r4, r0
    9150:	b140      	cbz	r0, 9164 <__sfmoreglue+0x28>
    9152:	2100      	movs	r1, #0
    9154:	e9c0 1600 	strd	r1, r6, [r0]
    9158:	300c      	adds	r0, #12
    915a:	60a0      	str	r0, [r4, #8]
    915c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    9160:	f000 f8cb 	bl	92fa <memset>
    9164:	4620      	mov	r0, r4
    9166:	bd70      	pop	{r4, r5, r6, pc}

00009168 <__sinit>:
    9168:	6983      	ldr	r3, [r0, #24]
    916a:	b510      	push	{r4, lr}
    916c:	4604      	mov	r4, r0
    916e:	bb33      	cbnz	r3, 91be <__sinit+0x56>
    9170:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    9174:	6503      	str	r3, [r0, #80]	; 0x50
    9176:	4b12      	ldr	r3, [pc, #72]	; (91c0 <__sinit+0x58>)
    9178:	4a12      	ldr	r2, [pc, #72]	; (91c4 <__sinit+0x5c>)
    917a:	681b      	ldr	r3, [r3, #0]
    917c:	6282      	str	r2, [r0, #40]	; 0x28
    917e:	4298      	cmp	r0, r3
    9180:	bf04      	itt	eq
    9182:	2301      	moveq	r3, #1
    9184:	6183      	streq	r3, [r0, #24]
    9186:	f000 f81f 	bl	91c8 <__sfp>
    918a:	6060      	str	r0, [r4, #4]
    918c:	4620      	mov	r0, r4
    918e:	f000 f81b 	bl	91c8 <__sfp>
    9192:	60a0      	str	r0, [r4, #8]
    9194:	4620      	mov	r0, r4
    9196:	f000 f817 	bl	91c8 <__sfp>
    919a:	2200      	movs	r2, #0
    919c:	60e0      	str	r0, [r4, #12]
    919e:	2104      	movs	r1, #4
    91a0:	6860      	ldr	r0, [r4, #4]
    91a2:	f7ff ffa1 	bl	90e8 <std>
    91a6:	2201      	movs	r2, #1
    91a8:	2109      	movs	r1, #9
    91aa:	68a0      	ldr	r0, [r4, #8]
    91ac:	f7ff ff9c 	bl	90e8 <std>
    91b0:	2202      	movs	r2, #2
    91b2:	2112      	movs	r1, #18
    91b4:	68e0      	ldr	r0, [r4, #12]
    91b6:	f7ff ff97 	bl	90e8 <std>
    91ba:	2301      	movs	r3, #1
    91bc:	61a3      	str	r3, [r4, #24]
    91be:	bd10      	pop	{r4, pc}
    91c0:	0000aea4 	.word	0x0000aea4
    91c4:	00009131 	.word	0x00009131

000091c8 <__sfp>:
    91c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91ca:	4b1b      	ldr	r3, [pc, #108]	; (9238 <__sfp+0x70>)
    91cc:	681e      	ldr	r6, [r3, #0]
    91ce:	69b3      	ldr	r3, [r6, #24]
    91d0:	4607      	mov	r7, r0
    91d2:	b913      	cbnz	r3, 91da <__sfp+0x12>
    91d4:	4630      	mov	r0, r6
    91d6:	f7ff ffc7 	bl	9168 <__sinit>
    91da:	3648      	adds	r6, #72	; 0x48
    91dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    91e0:	3b01      	subs	r3, #1
    91e2:	d503      	bpl.n	91ec <__sfp+0x24>
    91e4:	6833      	ldr	r3, [r6, #0]
    91e6:	b133      	cbz	r3, 91f6 <__sfp+0x2e>
    91e8:	6836      	ldr	r6, [r6, #0]
    91ea:	e7f7      	b.n	91dc <__sfp+0x14>
    91ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    91f0:	b16d      	cbz	r5, 920e <__sfp+0x46>
    91f2:	3468      	adds	r4, #104	; 0x68
    91f4:	e7f4      	b.n	91e0 <__sfp+0x18>
    91f6:	2104      	movs	r1, #4
    91f8:	4638      	mov	r0, r7
    91fa:	f7ff ff9f 	bl	913c <__sfmoreglue>
    91fe:	6030      	str	r0, [r6, #0]
    9200:	2800      	cmp	r0, #0
    9202:	d1f1      	bne.n	91e8 <__sfp+0x20>
    9204:	230c      	movs	r3, #12
    9206:	603b      	str	r3, [r7, #0]
    9208:	4604      	mov	r4, r0
    920a:	4620      	mov	r0, r4
    920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    920e:	4b0b      	ldr	r3, [pc, #44]	; (923c <__sfp+0x74>)
    9210:	6665      	str	r5, [r4, #100]	; 0x64
    9212:	e9c4 5500 	strd	r5, r5, [r4]
    9216:	60a5      	str	r5, [r4, #8]
    9218:	e9c4 3503 	strd	r3, r5, [r4, #12]
    921c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    9220:	2208      	movs	r2, #8
    9222:	4629      	mov	r1, r5
    9224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    9228:	f000 f867 	bl	92fa <memset>
    922c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    9230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    9234:	e7e9      	b.n	920a <__sfp+0x42>
    9236:	bf00      	nop
    9238:	0000aea4 	.word	0x0000aea4
    923c:	ffff0001 	.word	0xffff0001

00009240 <_fwalk_reent>:
    9240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9244:	4680      	mov	r8, r0
    9246:	4689      	mov	r9, r1
    9248:	f100 0448 	add.w	r4, r0, #72	; 0x48
    924c:	2600      	movs	r6, #0
    924e:	b914      	cbnz	r4, 9256 <_fwalk_reent+0x16>
    9250:	4630      	mov	r0, r6
    9252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9256:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    925a:	3f01      	subs	r7, #1
    925c:	d501      	bpl.n	9262 <_fwalk_reent+0x22>
    925e:	6824      	ldr	r4, [r4, #0]
    9260:	e7f5      	b.n	924e <_fwalk_reent+0xe>
    9262:	89ab      	ldrh	r3, [r5, #12]
    9264:	2b01      	cmp	r3, #1
    9266:	d907      	bls.n	9278 <_fwalk_reent+0x38>
    9268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    926c:	3301      	adds	r3, #1
    926e:	d003      	beq.n	9278 <_fwalk_reent+0x38>
    9270:	4629      	mov	r1, r5
    9272:	4640      	mov	r0, r8
    9274:	47c8      	blx	r9
    9276:	4306      	orrs	r6, r0
    9278:	3568      	adds	r5, #104	; 0x68
    927a:	e7ee      	b.n	925a <_fwalk_reent+0x1a>

0000927c <__libc_init_array>:
    927c:	b570      	push	{r4, r5, r6, lr}
    927e:	4e0d      	ldr	r6, [pc, #52]	; (92b4 <__libc_init_array+0x38>)
    9280:	4c0d      	ldr	r4, [pc, #52]	; (92b8 <__libc_init_array+0x3c>)
    9282:	1ba4      	subs	r4, r4, r6
    9284:	10a4      	asrs	r4, r4, #2
    9286:	2500      	movs	r5, #0
    9288:	42a5      	cmp	r5, r4
    928a:	d109      	bne.n	92a0 <__libc_init_array+0x24>
    928c:	4e0b      	ldr	r6, [pc, #44]	; (92bc <__libc_init_array+0x40>)
    928e:	4c0c      	ldr	r4, [pc, #48]	; (92c0 <__libc_init_array+0x44>)
    9290:	f7f7 f836 	bl	300 <_init>
    9294:	1ba4      	subs	r4, r4, r6
    9296:	10a4      	asrs	r4, r4, #2
    9298:	2500      	movs	r5, #0
    929a:	42a5      	cmp	r5, r4
    929c:	d105      	bne.n	92aa <__libc_init_array+0x2e>
    929e:	bd70      	pop	{r4, r5, r6, pc}
    92a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    92a4:	4798      	blx	r3
    92a6:	3501      	adds	r5, #1
    92a8:	e7ee      	b.n	9288 <__libc_init_array+0xc>
    92aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    92ae:	4798      	blx	r3
    92b0:	3501      	adds	r5, #1
    92b2:	e7f2      	b.n	929a <__libc_init_array+0x1e>
    92b4:	0000030c 	.word	0x0000030c
    92b8:	0000030c 	.word	0x0000030c
    92bc:	0000030c 	.word	0x0000030c
    92c0:	0000031c 	.word	0x0000031c

000092c4 <malloc>:
    92c4:	4b02      	ldr	r3, [pc, #8]	; (92d0 <malloc+0xc>)
    92c6:	4601      	mov	r1, r0
    92c8:	6818      	ldr	r0, [r3, #0]
    92ca:	f000 b86d 	b.w	93a8 <_malloc_r>
    92ce:	bf00      	nop
    92d0:	10000098 	.word	0x10000098

000092d4 <free>:
    92d4:	4b02      	ldr	r3, [pc, #8]	; (92e0 <free+0xc>)
    92d6:	4601      	mov	r1, r0
    92d8:	6818      	ldr	r0, [r3, #0]
    92da:	f000 b817 	b.w	930c <_free_r>
    92de:	bf00      	nop
    92e0:	10000098 	.word	0x10000098

000092e4 <memcpy>:
    92e4:	b510      	push	{r4, lr}
    92e6:	1e43      	subs	r3, r0, #1
    92e8:	440a      	add	r2, r1
    92ea:	4291      	cmp	r1, r2
    92ec:	d100      	bne.n	92f0 <memcpy+0xc>
    92ee:	bd10      	pop	{r4, pc}
    92f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    92f4:	f803 4f01 	strb.w	r4, [r3, #1]!
    92f8:	e7f7      	b.n	92ea <memcpy+0x6>

000092fa <memset>:
    92fa:	4402      	add	r2, r0
    92fc:	4603      	mov	r3, r0
    92fe:	4293      	cmp	r3, r2
    9300:	d100      	bne.n	9304 <memset+0xa>
    9302:	4770      	bx	lr
    9304:	f803 1b01 	strb.w	r1, [r3], #1
    9308:	e7f9      	b.n	92fe <memset+0x4>
    930a:	Address 0x000000000000930a is out of bounds.


0000930c <_free_r>:
    930c:	b538      	push	{r3, r4, r5, lr}
    930e:	4605      	mov	r5, r0
    9310:	2900      	cmp	r1, #0
    9312:	d045      	beq.n	93a0 <_free_r+0x94>
    9314:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9318:	1f0c      	subs	r4, r1, #4
    931a:	2b00      	cmp	r3, #0
    931c:	bfb8      	it	lt
    931e:	18e4      	addlt	r4, r4, r3
    9320:	f000 f970 	bl	9604 <__malloc_lock>
    9324:	4a1f      	ldr	r2, [pc, #124]	; (93a4 <_free_r+0x98>)
    9326:	6813      	ldr	r3, [r2, #0]
    9328:	4610      	mov	r0, r2
    932a:	b933      	cbnz	r3, 933a <_free_r+0x2e>
    932c:	6063      	str	r3, [r4, #4]
    932e:	6014      	str	r4, [r2, #0]
    9330:	4628      	mov	r0, r5
    9332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9336:	f000 b966 	b.w	9606 <__malloc_unlock>
    933a:	42a3      	cmp	r3, r4
    933c:	d90c      	bls.n	9358 <_free_r+0x4c>
    933e:	6821      	ldr	r1, [r4, #0]
    9340:	1862      	adds	r2, r4, r1
    9342:	4293      	cmp	r3, r2
    9344:	bf04      	itt	eq
    9346:	681a      	ldreq	r2, [r3, #0]
    9348:	685b      	ldreq	r3, [r3, #4]
    934a:	6063      	str	r3, [r4, #4]
    934c:	bf04      	itt	eq
    934e:	1852      	addeq	r2, r2, r1
    9350:	6022      	streq	r2, [r4, #0]
    9352:	6004      	str	r4, [r0, #0]
    9354:	e7ec      	b.n	9330 <_free_r+0x24>
    9356:	4613      	mov	r3, r2
    9358:	685a      	ldr	r2, [r3, #4]
    935a:	b10a      	cbz	r2, 9360 <_free_r+0x54>
    935c:	42a2      	cmp	r2, r4
    935e:	d9fa      	bls.n	9356 <_free_r+0x4a>
    9360:	6819      	ldr	r1, [r3, #0]
    9362:	1858      	adds	r0, r3, r1
    9364:	42a0      	cmp	r0, r4
    9366:	d10b      	bne.n	9380 <_free_r+0x74>
    9368:	6820      	ldr	r0, [r4, #0]
    936a:	4401      	add	r1, r0
    936c:	1858      	adds	r0, r3, r1
    936e:	4282      	cmp	r2, r0
    9370:	6019      	str	r1, [r3, #0]
    9372:	d1dd      	bne.n	9330 <_free_r+0x24>
    9374:	6810      	ldr	r0, [r2, #0]
    9376:	6852      	ldr	r2, [r2, #4]
    9378:	605a      	str	r2, [r3, #4]
    937a:	4401      	add	r1, r0
    937c:	6019      	str	r1, [r3, #0]
    937e:	e7d7      	b.n	9330 <_free_r+0x24>
    9380:	d902      	bls.n	9388 <_free_r+0x7c>
    9382:	230c      	movs	r3, #12
    9384:	602b      	str	r3, [r5, #0]
    9386:	e7d3      	b.n	9330 <_free_r+0x24>
    9388:	6820      	ldr	r0, [r4, #0]
    938a:	1821      	adds	r1, r4, r0
    938c:	428a      	cmp	r2, r1
    938e:	bf04      	itt	eq
    9390:	6811      	ldreq	r1, [r2, #0]
    9392:	6852      	ldreq	r2, [r2, #4]
    9394:	6062      	str	r2, [r4, #4]
    9396:	bf04      	itt	eq
    9398:	1809      	addeq	r1, r1, r0
    939a:	6021      	streq	r1, [r4, #0]
    939c:	605c      	str	r4, [r3, #4]
    939e:	e7c7      	b.n	9330 <_free_r+0x24>
    93a0:	bd38      	pop	{r3, r4, r5, pc}
    93a2:	bf00      	nop
    93a4:	10000ee4 	.word	0x10000ee4

000093a8 <_malloc_r>:
    93a8:	b570      	push	{r4, r5, r6, lr}
    93aa:	1ccd      	adds	r5, r1, #3
    93ac:	f025 0503 	bic.w	r5, r5, #3
    93b0:	3508      	adds	r5, #8
    93b2:	2d0c      	cmp	r5, #12
    93b4:	bf38      	it	cc
    93b6:	250c      	movcc	r5, #12
    93b8:	2d00      	cmp	r5, #0
    93ba:	4606      	mov	r6, r0
    93bc:	db01      	blt.n	93c2 <_malloc_r+0x1a>
    93be:	42a9      	cmp	r1, r5
    93c0:	d903      	bls.n	93ca <_malloc_r+0x22>
    93c2:	230c      	movs	r3, #12
    93c4:	6033      	str	r3, [r6, #0]
    93c6:	2000      	movs	r0, #0
    93c8:	bd70      	pop	{r4, r5, r6, pc}
    93ca:	f000 f91b 	bl	9604 <__malloc_lock>
    93ce:	4a21      	ldr	r2, [pc, #132]	; (9454 <_malloc_r+0xac>)
    93d0:	6814      	ldr	r4, [r2, #0]
    93d2:	4621      	mov	r1, r4
    93d4:	b991      	cbnz	r1, 93fc <_malloc_r+0x54>
    93d6:	4c20      	ldr	r4, [pc, #128]	; (9458 <_malloc_r+0xb0>)
    93d8:	6823      	ldr	r3, [r4, #0]
    93da:	b91b      	cbnz	r3, 93e4 <_malloc_r+0x3c>
    93dc:	4630      	mov	r0, r6
    93de:	f000 f83d 	bl	945c <_sbrk_r>
    93e2:	6020      	str	r0, [r4, #0]
    93e4:	4629      	mov	r1, r5
    93e6:	4630      	mov	r0, r6
    93e8:	f000 f838 	bl	945c <_sbrk_r>
    93ec:	1c43      	adds	r3, r0, #1
    93ee:	d124      	bne.n	943a <_malloc_r+0x92>
    93f0:	230c      	movs	r3, #12
    93f2:	6033      	str	r3, [r6, #0]
    93f4:	4630      	mov	r0, r6
    93f6:	f000 f906 	bl	9606 <__malloc_unlock>
    93fa:	e7e4      	b.n	93c6 <_malloc_r+0x1e>
    93fc:	680b      	ldr	r3, [r1, #0]
    93fe:	1b5b      	subs	r3, r3, r5
    9400:	d418      	bmi.n	9434 <_malloc_r+0x8c>
    9402:	2b0b      	cmp	r3, #11
    9404:	d90f      	bls.n	9426 <_malloc_r+0x7e>
    9406:	600b      	str	r3, [r1, #0]
    9408:	50cd      	str	r5, [r1, r3]
    940a:	18cc      	adds	r4, r1, r3
    940c:	4630      	mov	r0, r6
    940e:	f000 f8fa 	bl	9606 <__malloc_unlock>
    9412:	f104 000b 	add.w	r0, r4, #11
    9416:	1d23      	adds	r3, r4, #4
    9418:	f020 0007 	bic.w	r0, r0, #7
    941c:	1ac3      	subs	r3, r0, r3
    941e:	d0d3      	beq.n	93c8 <_malloc_r+0x20>
    9420:	425a      	negs	r2, r3
    9422:	50e2      	str	r2, [r4, r3]
    9424:	e7d0      	b.n	93c8 <_malloc_r+0x20>
    9426:	428c      	cmp	r4, r1
    9428:	684b      	ldr	r3, [r1, #4]
    942a:	bf16      	itet	ne
    942c:	6063      	strne	r3, [r4, #4]
    942e:	6013      	streq	r3, [r2, #0]
    9430:	460c      	movne	r4, r1
    9432:	e7eb      	b.n	940c <_malloc_r+0x64>
    9434:	460c      	mov	r4, r1
    9436:	6849      	ldr	r1, [r1, #4]
    9438:	e7cc      	b.n	93d4 <_malloc_r+0x2c>
    943a:	1cc4      	adds	r4, r0, #3
    943c:	f024 0403 	bic.w	r4, r4, #3
    9440:	42a0      	cmp	r0, r4
    9442:	d005      	beq.n	9450 <_malloc_r+0xa8>
    9444:	1a21      	subs	r1, r4, r0
    9446:	4630      	mov	r0, r6
    9448:	f000 f808 	bl	945c <_sbrk_r>
    944c:	3001      	adds	r0, #1
    944e:	d0cf      	beq.n	93f0 <_malloc_r+0x48>
    9450:	6025      	str	r5, [r4, #0]
    9452:	e7db      	b.n	940c <_malloc_r+0x64>
    9454:	10000ee4 	.word	0x10000ee4
    9458:	10000ee8 	.word	0x10000ee8

0000945c <_sbrk_r>:
    945c:	b538      	push	{r3, r4, r5, lr}
    945e:	4c06      	ldr	r4, [pc, #24]	; (9478 <_sbrk_r+0x1c>)
    9460:	2300      	movs	r3, #0
    9462:	4605      	mov	r5, r0
    9464:	4608      	mov	r0, r1
    9466:	6023      	str	r3, [r4, #0]
    9468:	f7fb fe10 	bl	508c <_sbrk>
    946c:	1c43      	adds	r3, r0, #1
    946e:	d102      	bne.n	9476 <_sbrk_r+0x1a>
    9470:	6823      	ldr	r3, [r4, #0]
    9472:	b103      	cbz	r3, 9476 <_sbrk_r+0x1a>
    9474:	602b      	str	r3, [r5, #0]
    9476:	bd38      	pop	{r3, r4, r5, pc}
    9478:	10000fdc 	.word	0x10000fdc

0000947c <_raise_r>:
    947c:	291f      	cmp	r1, #31
    947e:	b538      	push	{r3, r4, r5, lr}
    9480:	4604      	mov	r4, r0
    9482:	460d      	mov	r5, r1
    9484:	d904      	bls.n	9490 <_raise_r+0x14>
    9486:	2316      	movs	r3, #22
    9488:	6003      	str	r3, [r0, #0]
    948a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    948e:	bd38      	pop	{r3, r4, r5, pc}
    9490:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9492:	b112      	cbz	r2, 949a <_raise_r+0x1e>
    9494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9498:	b94b      	cbnz	r3, 94ae <_raise_r+0x32>
    949a:	4620      	mov	r0, r4
    949c:	f000 f830 	bl	9500 <_getpid_r>
    94a0:	462a      	mov	r2, r5
    94a2:	4601      	mov	r1, r0
    94a4:	4620      	mov	r0, r4
    94a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    94aa:	f000 b817 	b.w	94dc <_kill_r>
    94ae:	2b01      	cmp	r3, #1
    94b0:	d00a      	beq.n	94c8 <_raise_r+0x4c>
    94b2:	1c59      	adds	r1, r3, #1
    94b4:	d103      	bne.n	94be <_raise_r+0x42>
    94b6:	2316      	movs	r3, #22
    94b8:	6003      	str	r3, [r0, #0]
    94ba:	2001      	movs	r0, #1
    94bc:	e7e7      	b.n	948e <_raise_r+0x12>
    94be:	2400      	movs	r4, #0
    94c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    94c4:	4628      	mov	r0, r5
    94c6:	4798      	blx	r3
    94c8:	2000      	movs	r0, #0
    94ca:	e7e0      	b.n	948e <_raise_r+0x12>

000094cc <raise>:
    94cc:	4b02      	ldr	r3, [pc, #8]	; (94d8 <raise+0xc>)
    94ce:	4601      	mov	r1, r0
    94d0:	6818      	ldr	r0, [r3, #0]
    94d2:	f7ff bfd3 	b.w	947c <_raise_r>
    94d6:	bf00      	nop
    94d8:	10000098 	.word	0x10000098

000094dc <_kill_r>:
    94dc:	b538      	push	{r3, r4, r5, lr}
    94de:	4c07      	ldr	r4, [pc, #28]	; (94fc <_kill_r+0x20>)
    94e0:	2300      	movs	r3, #0
    94e2:	4605      	mov	r5, r0
    94e4:	4608      	mov	r0, r1
    94e6:	4611      	mov	r1, r2
    94e8:	6023      	str	r3, [r4, #0]
    94ea:	f7fb fdc1 	bl	5070 <_kill>
    94ee:	1c43      	adds	r3, r0, #1
    94f0:	d102      	bne.n	94f8 <_kill_r+0x1c>
    94f2:	6823      	ldr	r3, [r4, #0]
    94f4:	b103      	cbz	r3, 94f8 <_kill_r+0x1c>
    94f6:	602b      	str	r3, [r5, #0]
    94f8:	bd38      	pop	{r3, r4, r5, pc}
    94fa:	bf00      	nop
    94fc:	10000fdc 	.word	0x10000fdc

00009500 <_getpid_r>:
    9500:	f7fb bdae 	b.w	5060 <_getpid>

00009504 <__sread>:
    9504:	b510      	push	{r4, lr}
    9506:	460c      	mov	r4, r1
    9508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    950c:	f000 f87c 	bl	9608 <_read_r>
    9510:	2800      	cmp	r0, #0
    9512:	bfab      	itete	ge
    9514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    9516:	89a3      	ldrhlt	r3, [r4, #12]
    9518:	181b      	addge	r3, r3, r0
    951a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    951e:	bfac      	ite	ge
    9520:	6563      	strge	r3, [r4, #84]	; 0x54
    9522:	81a3      	strhlt	r3, [r4, #12]
    9524:	bd10      	pop	{r4, pc}

00009526 <__swrite>:
    9526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    952a:	461f      	mov	r7, r3
    952c:	898b      	ldrh	r3, [r1, #12]
    952e:	05db      	lsls	r3, r3, #23
    9530:	4605      	mov	r5, r0
    9532:	460c      	mov	r4, r1
    9534:	4616      	mov	r6, r2
    9536:	d505      	bpl.n	9544 <__swrite+0x1e>
    9538:	2302      	movs	r3, #2
    953a:	2200      	movs	r2, #0
    953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9540:	f000 f84e 	bl	95e0 <_lseek_r>
    9544:	89a3      	ldrh	r3, [r4, #12]
    9546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    954a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    954e:	81a3      	strh	r3, [r4, #12]
    9550:	4632      	mov	r2, r6
    9552:	463b      	mov	r3, r7
    9554:	4628      	mov	r0, r5
    9556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    955a:	f000 b81f 	b.w	959c <_write_r>

0000955e <__sseek>:
    955e:	b510      	push	{r4, lr}
    9560:	460c      	mov	r4, r1
    9562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9566:	f000 f83b 	bl	95e0 <_lseek_r>
    956a:	1c43      	adds	r3, r0, #1
    956c:	89a3      	ldrh	r3, [r4, #12]
    956e:	bf15      	itete	ne
    9570:	6560      	strne	r0, [r4, #84]	; 0x54
    9572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    9576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    957a:	81a3      	strheq	r3, [r4, #12]
    957c:	bf18      	it	ne
    957e:	81a3      	strhne	r3, [r4, #12]
    9580:	bd10      	pop	{r4, pc}

00009582 <__sclose>:
    9582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9586:	f000 b81b 	b.w	95c0 <_close_r>

0000958a <strlen>:
    958a:	4603      	mov	r3, r0
    958c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9590:	2a00      	cmp	r2, #0
    9592:	d1fb      	bne.n	958c <strlen+0x2>
    9594:	1a18      	subs	r0, r3, r0
    9596:	3801      	subs	r0, #1
    9598:	4770      	bx	lr
    959a:	Address 0x000000000000959a is out of bounds.


0000959c <_write_r>:
    959c:	b538      	push	{r3, r4, r5, lr}
    959e:	4c07      	ldr	r4, [pc, #28]	; (95bc <_write_r+0x20>)
    95a0:	4605      	mov	r5, r0
    95a2:	4608      	mov	r0, r1
    95a4:	4611      	mov	r1, r2
    95a6:	2200      	movs	r2, #0
    95a8:	6022      	str	r2, [r4, #0]
    95aa:	461a      	mov	r2, r3
    95ac:	f7fb fd90 	bl	50d0 <_write>
    95b0:	1c43      	adds	r3, r0, #1
    95b2:	d102      	bne.n	95ba <_write_r+0x1e>
    95b4:	6823      	ldr	r3, [r4, #0]
    95b6:	b103      	cbz	r3, 95ba <_write_r+0x1e>
    95b8:	602b      	str	r3, [r5, #0]
    95ba:	bd38      	pop	{r3, r4, r5, pc}
    95bc:	10000fdc 	.word	0x10000fdc

000095c0 <_close_r>:
    95c0:	b538      	push	{r3, r4, r5, lr}
    95c2:	4c06      	ldr	r4, [pc, #24]	; (95dc <_close_r+0x1c>)
    95c4:	2300      	movs	r3, #0
    95c6:	4605      	mov	r5, r0
    95c8:	4608      	mov	r0, r1
    95ca:	6023      	str	r3, [r4, #0]
    95cc:	f000 f8a6 	bl	971c <_close>
    95d0:	1c43      	adds	r3, r0, #1
    95d2:	d102      	bne.n	95da <_close_r+0x1a>
    95d4:	6823      	ldr	r3, [r4, #0]
    95d6:	b103      	cbz	r3, 95da <_close_r+0x1a>
    95d8:	602b      	str	r3, [r5, #0]
    95da:	bd38      	pop	{r3, r4, r5, pc}
    95dc:	10000fdc 	.word	0x10000fdc

000095e0 <_lseek_r>:
    95e0:	b538      	push	{r3, r4, r5, lr}
    95e2:	4c07      	ldr	r4, [pc, #28]	; (9600 <_lseek_r+0x20>)
    95e4:	4605      	mov	r5, r0
    95e6:	4608      	mov	r0, r1
    95e8:	4611      	mov	r1, r2
    95ea:	2200      	movs	r2, #0
    95ec:	6022      	str	r2, [r4, #0]
    95ee:	461a      	mov	r2, r3
    95f0:	f000 f883 	bl	96fa <_lseek>
    95f4:	1c43      	adds	r3, r0, #1
    95f6:	d102      	bne.n	95fe <_lseek_r+0x1e>
    95f8:	6823      	ldr	r3, [r4, #0]
    95fa:	b103      	cbz	r3, 95fe <_lseek_r+0x1e>
    95fc:	602b      	str	r3, [r5, #0]
    95fe:	bd38      	pop	{r3, r4, r5, pc}
    9600:	10000fdc 	.word	0x10000fdc

00009604 <__malloc_lock>:
    9604:	4770      	bx	lr

00009606 <__malloc_unlock>:
    9606:	4770      	bx	lr

00009608 <_read_r>:
    9608:	b538      	push	{r3, r4, r5, lr}
    960a:	4c07      	ldr	r4, [pc, #28]	; (9628 <_read_r+0x20>)
    960c:	4605      	mov	r5, r0
    960e:	4608      	mov	r0, r1
    9610:	4611      	mov	r1, r2
    9612:	2200      	movs	r2, #0
    9614:	6022      	str	r2, [r4, #0]
    9616:	461a      	mov	r2, r3
    9618:	f7fb fd72 	bl	5100 <_read>
    961c:	1c43      	adds	r3, r0, #1
    961e:	d102      	bne.n	9626 <_read_r+0x1e>
    9620:	6823      	ldr	r3, [r4, #0]
    9622:	b103      	cbz	r3, 9626 <_read_r+0x1e>
    9624:	602b      	str	r3, [r5, #0]
    9626:	bd38      	pop	{r3, r4, r5, pc}
    9628:	10000fdc 	.word	0x10000fdc

0000962c <findslot>:
    962c:	4b0a      	ldr	r3, [pc, #40]	; (9658 <findslot+0x2c>)
    962e:	b510      	push	{r4, lr}
    9630:	4604      	mov	r4, r0
    9632:	6818      	ldr	r0, [r3, #0]
    9634:	b118      	cbz	r0, 963e <findslot+0x12>
    9636:	6983      	ldr	r3, [r0, #24]
    9638:	b90b      	cbnz	r3, 963e <findslot+0x12>
    963a:	f7ff fd95 	bl	9168 <__sinit>
    963e:	2c13      	cmp	r4, #19
    9640:	d807      	bhi.n	9652 <findslot+0x26>
    9642:	4806      	ldr	r0, [pc, #24]	; (965c <findslot+0x30>)
    9644:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
    9648:	3301      	adds	r3, #1
    964a:	d002      	beq.n	9652 <findslot+0x26>
    964c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    9650:	bd10      	pop	{r4, pc}
    9652:	2000      	movs	r0, #0
    9654:	e7fc      	b.n	9650 <findslot+0x24>
    9656:	bf00      	nop
    9658:	10000098 	.word	0x10000098
    965c:	10000eec 	.word	0x10000eec

00009660 <checkerror>:
    9660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9662:	1c43      	adds	r3, r0, #1
    9664:	4605      	mov	r5, r0
    9666:	d109      	bne.n	967c <checkerror+0x1c>
    9668:	f000 f87e 	bl	9768 <__errno>
    966c:	2413      	movs	r4, #19
    966e:	4606      	mov	r6, r0
    9670:	2700      	movs	r7, #0
    9672:	4620      	mov	r0, r4
    9674:	4639      	mov	r1, r7
    9676:	beab      	bkpt	0x00ab
    9678:	4604      	mov	r4, r0
    967a:	6034      	str	r4, [r6, #0]
    967c:	4628      	mov	r0, r5
    967e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009680 <_swilseek>:
    9680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9682:	460c      	mov	r4, r1
    9684:	4616      	mov	r6, r2
    9686:	f7ff ffd1 	bl	962c <findslot>
    968a:	4605      	mov	r5, r0
    968c:	b940      	cbnz	r0, 96a0 <_swilseek+0x20>
    968e:	f000 f86b 	bl	9768 <__errno>
    9692:	2309      	movs	r3, #9
    9694:	6003      	str	r3, [r0, #0]
    9696:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    969a:	4620      	mov	r0, r4
    969c:	b003      	add	sp, #12
    969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96a0:	2e02      	cmp	r6, #2
    96a2:	d903      	bls.n	96ac <_swilseek+0x2c>
    96a4:	f000 f860 	bl	9768 <__errno>
    96a8:	2316      	movs	r3, #22
    96aa:	e7f3      	b.n	9694 <_swilseek+0x14>
    96ac:	2e01      	cmp	r6, #1
    96ae:	d112      	bne.n	96d6 <_swilseek+0x56>
    96b0:	6843      	ldr	r3, [r0, #4]
    96b2:	18e4      	adds	r4, r4, r3
    96b4:	d4f6      	bmi.n	96a4 <_swilseek+0x24>
    96b6:	682b      	ldr	r3, [r5, #0]
    96b8:	260a      	movs	r6, #10
    96ba:	e9cd 3400 	strd	r3, r4, [sp]
    96be:	466f      	mov	r7, sp
    96c0:	4630      	mov	r0, r6
    96c2:	4639      	mov	r1, r7
    96c4:	beab      	bkpt	0x00ab
    96c6:	4606      	mov	r6, r0
    96c8:	4630      	mov	r0, r6
    96ca:	f7ff ffc9 	bl	9660 <checkerror>
    96ce:	2800      	cmp	r0, #0
    96d0:	dbe1      	blt.n	9696 <_swilseek+0x16>
    96d2:	606c      	str	r4, [r5, #4]
    96d4:	e7e1      	b.n	969a <_swilseek+0x1a>
    96d6:	2e02      	cmp	r6, #2
    96d8:	d1ed      	bne.n	96b6 <_swilseek+0x36>
    96da:	af02      	add	r7, sp, #8
    96dc:	6803      	ldr	r3, [r0, #0]
    96de:	f847 3d08 	str.w	r3, [r7, #-8]!
    96e2:	260c      	movs	r6, #12
    96e4:	4630      	mov	r0, r6
    96e6:	4639      	mov	r1, r7
    96e8:	beab      	bkpt	0x00ab
    96ea:	4606      	mov	r6, r0
    96ec:	4630      	mov	r0, r6
    96ee:	f7ff ffb7 	bl	9660 <checkerror>
    96f2:	1c43      	adds	r3, r0, #1
    96f4:	d0cf      	beq.n	9696 <_swilseek+0x16>
    96f6:	4404      	add	r4, r0
    96f8:	e7dd      	b.n	96b6 <_swilseek+0x36>

000096fa <_lseek>:
    96fa:	f7ff bfc1 	b.w	9680 <_swilseek>

000096fe <_swiclose>:
    96fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9700:	ad02      	add	r5, sp, #8
    9702:	2402      	movs	r4, #2
    9704:	f845 0d04 	str.w	r0, [r5, #-4]!
    9708:	4620      	mov	r0, r4
    970a:	4629      	mov	r1, r5
    970c:	beab      	bkpt	0x00ab
    970e:	4604      	mov	r4, r0
    9710:	4620      	mov	r0, r4
    9712:	f7ff ffa5 	bl	9660 <checkerror>
    9716:	b003      	add	sp, #12
    9718:	bd30      	pop	{r4, r5, pc}
    971a:	Address 0x000000000000971a is out of bounds.


0000971c <_close>:
    971c:	b538      	push	{r3, r4, r5, lr}
    971e:	4605      	mov	r5, r0
    9720:	f7ff ff84 	bl	962c <findslot>
    9724:	4604      	mov	r4, r0
    9726:	b930      	cbnz	r0, 9736 <_close+0x1a>
    9728:	f000 f81e 	bl	9768 <__errno>
    972c:	2309      	movs	r3, #9
    972e:	6003      	str	r3, [r0, #0]
    9730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9734:	bd38      	pop	{r3, r4, r5, pc}
    9736:	3d01      	subs	r5, #1
    9738:	2d01      	cmp	r5, #1
    973a:	d809      	bhi.n	9750 <_close+0x34>
    973c:	4b09      	ldr	r3, [pc, #36]	; (9764 <_close+0x48>)
    973e:	689a      	ldr	r2, [r3, #8]
    9740:	691b      	ldr	r3, [r3, #16]
    9742:	429a      	cmp	r2, r3
    9744:	d104      	bne.n	9750 <_close+0x34>
    9746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    974a:	6003      	str	r3, [r0, #0]
    974c:	2000      	movs	r0, #0
    974e:	e7f1      	b.n	9734 <_close+0x18>
    9750:	6820      	ldr	r0, [r4, #0]
    9752:	f7ff ffd4 	bl	96fe <_swiclose>
    9756:	2800      	cmp	r0, #0
    9758:	d1ec      	bne.n	9734 <_close+0x18>
    975a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    975e:	6023      	str	r3, [r4, #0]
    9760:	e7e8      	b.n	9734 <_close+0x18>
    9762:	bf00      	nop
    9764:	10000eec 	.word	0x10000eec

00009768 <__errno>:
    9768:	4b01      	ldr	r3, [pc, #4]	; (9770 <__errno+0x8>)
    976a:	6818      	ldr	r0, [r3, #0]
    976c:	4770      	bx	lr
    976e:	bf00      	nop
    9770:	10000098 	.word	0x10000098

00009774 <sjsu::lpc40xx::Pin::kFunction>:
    9774:	ffff0300                                ....

00009778 <sjsu::lpc40xx::Pin::kResistor>:
    9778:	ffff0203                                ....

0000977c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    977c:	ffff0107                                ....

00009780 <sjsu::lpc40xx::Pin::kOpenDrain>:
    9780:	ffff010a 61766e69 0064696c 6c707061     ....invalid.appl
    9790:	74616369 006e6f69 74736f68 73657420     ication.host tes
    97a0:	00000074 64252020 78302029 58383025     t...  %d) 0x%08X
    97b0:	0000000a 25783020 00583830 64252020     .... 0x%08X.  %d
    97c0:	78302029 000a7025 6e75520a 6874203a     ) 0x%p...Run: th
    97d0:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
    97e0:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
    97f0:	20746365 65726964 726f7463 00000079     ect directory...
    9800:	20200a0a 3b315b1b 006d3733 656b616d     ..  .[1;37m.make
    9810:	61747320 72746b63 2d656361 54207325      stacktrace-%s T
    9820:	45434152 00223d53 25783020 00000070     RACES=". 0x%p...
    9830:	1b0a0a22 006d305b 73696854 6c697720     "...[0m.This wil
    9840:	6572206c 74726f70 65687420 6c696620     l report the fil
    9850:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
    9860:	68742072 6c207461 74206465 6874206f     r that led to th
    9870:	66207369 74636e75 206e6f69 6e696562     is function bein
    9880:	61632067 64656c6c 0000002e 35345b1b     g called.....[45
    9890:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    98a0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    98b0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    98c0:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    98d0:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    98e0:	3a646574 65702820 68706972 6c617265     ted: (peripheral
    98f0:	7669645f 72656469 203d3c20 200a2934     _divider <= 4). 
    9900:	20202020 20202020 76694420 72656469              Divider
    9910:	73756d20 74276e74 63786520 20646565      mustn't exceed 
    9920:	5b1b3233 5b1b6d30 000a6d30 6972500a     32.[0m.[0m...Pri
    9930:	6e69746e 74532067 206b6361 63617254     nting Stack Trac
    9940:	000a3a65 35345b1b 2020206d 4f525245     e:...[45m   ERRO
    9950:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    9960:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    9970:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    9980:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    9990:	6e6f6974 73655420 3a646574 65642820     tion Tested: (de
    99a0:	65726973 72665f64 65757165 2079636e     sired_frequency 
    99b0:	3833203c 484d5f34 2626207a 73656420     < 384_MHz && des
    99c0:	64657269 6572665f 6e657571 3e207963     ired_frequency >
    99d0:	5f323120 297a484d 2020200a 20202020      12_MHz).       
    99e0:	46202020 75716572 79636e65 73756d20        Frequency mus
    99f0:	65622074 776f6c20 74207265 206e6168     t be lower than 
    9a00:	20343833 617a484d 6720646e 74616572     384 MHzand great
    9a10:	74207265 206e6168 6520726f 6c617571     er than or equal
    9a20:	206f7420 4d203231 5b1b7a48 5b1b6d30      to 12 MHz.[0m.[
    9a30:	000a6d30 35345b1b 2020206d 4f525245     0m...[45m   ERRO
    9a40:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    9a50:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    9a60:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    9a70:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    9a80:	6e6f6974 73655420 3a646574 69642820     tion Tested: (di
    9a90:	65646976 61765f72 2065756c 2938203c     vider_value < 8)
    9aa0:	2020200a 20202020 50202020 64204c4c     .          PLL d
    9ab0:	64697669 76207265 65756c61 6e657720     ivider value wen
    9ac0:	756f2074 666f2074 756f6220 1b73646e     t out of bounds.
    9ad0:	1b6d305b 0a6d305b 00000000 35345b1b     [0m.[0m......[45
    9ae0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    9af0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    9b00:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    9b10:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    9b20:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    9b30:	3a646574 70632820 69645f75 65646976     ted: (cpu_divide
    9b40:	203c2072 0a293233 20202020 20202020     r < 32).        
    9b50:	69442020 65646976 756d2072 276e7473       Divider mustn'
    9b60:	78652074 64656563 1b323320 1b6d305b     t exceed 32.[0m.
    9b70:	0a6d305b 00000000 33345b1b 4157206d     [0m......[43m WA
    9b80:	4e494e52 305b1b47 6d34393b 3a73253a     RNING.[0;94m:%s:
    9b90:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    9ba0:	3e64256d 305b1b20 6d37333b 69206f4e     m%d> .[0;37mNo i
    9bb0:	7265746e 74707572 72657320 65636976     nterrupt service
    9bc0:	756f7220 656e6974 756f6620 6620646e      routine found f
    9bd0:	7420726f 76206568 6f746365 64252072     or the vector %d
    9be0:	69442021 6c626173 20676e69 1b525349     ! Disabling ISR.
    9bf0:	0a6d305b 00000000 35345b1b 2020206d     [0m......[45m   
    9c00:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    9c10:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    9c20:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    9c30:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    9c40:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    9c50:	20312820 63203d3c 6e6e6168 2e5f6c65      (1 <= channel_.
    9c60:	6e616863 206c656e 63202626 6e6e6168     channel && chann
    9c70:	2e5f6c65 6e616863 206c656e 36203d3c     el_.channel <= 6
    9c80:	20200a29 20202020 20202020 6e616843     ).          Chan
    9c90:	206c656e 7473756d 20656220 77746562     nel must be betw
    9ca0:	206e6565 6e612031 20362064 4c206e6f     een 1 and 6 on L
    9cb0:	30344350 70207878 6674616c 736d726f     PC40xx platforms
    9cc0:	305b1b2e 305b1b6d 00000a6d 35345b1b     ..[0m.[0m....[45
    9cd0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    9ce0:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    9cf0:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    9d00:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    9d10:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    9d20:	3a646574 2e302820 3c206630 7564203d     ted: (0.0f <= du
    9d30:	635f7974 656c6379 20262620 79747564     ty_cycle && duty
    9d40:	6379635f 3c20656c 2e31203d 0a296630     _cycle <= 1.0f).
    9d50:	20202020 20202020 75642020 635f7974               duty_c
    9d60:	656c6379 20666f20 79747544 63794320     ycle of Duty Cyc
    9d70:	7020656c 69766f72 20646564 6f207369     le provided is o
    9d80:	6f207475 6f622066 73646e75 305b1b2e     ut of bounds..[0
    9d90:	305b1b6d 00000a6d 35345b1b 2020206d     m.[0m....[45m   
    9da0:	4f525245 305b1b52 6d34393b 3a73253a     ERROR.[0;94m:%s:
    9db0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    9dc0:	3e64256d 305b1b20 6d37333b 65737341     m%d> .[0;37mAsse
    9dd0:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    9de0:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    9df0:	72662820 65757165 5f79636e 21207a68      (frequency_hz !
    9e00:	5f30203d 0a297a48 20202020 20202020     = 0_Hz).        
    9e10:	77502020 7246206d 65757165 2079636e       Pwm Frequency 
    9e20:	6e6e6163 6220746f 657a2065 48206f72     cannot be zero H
    9e30:	5b1b2e7a 5b1b6d30 000a6d30 32345b1b     z..[0m.[0m...[42
    9e40:	2020206d 464e4920 305b1b4f 6d34393b     m    INFO.[0;94m
    9e50:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    9e60:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    9e70:	74726175 696e6920 6c616974 64657a69     uart initialized
    9e80:	6d305b1b 0000000a 20636461 52206425     .[0m....adc %d R
    9e90:	20646165 66206625 6620726f 65676e69     ead %f for finge
    9ea0:	64252072 0000000a 00000002 00000003     r %d............
    9eb0:	00000004 00000005 32345b1b 2020206d     .........[42m   
    9ec0:	464e4920 305b1b4f 6d34393b 3a73253a      INFO.[0;94m:%s:
    9ed0:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    9ee0:	3e64256d 305b1b20 6d37333b 656e696c     m%d> .[0;37mline
    9ef0:	615f7261 61757463 25726f74 6e692064     ar_actuator%d in
    9f00:	61697469 657a696c 305b1b64 00000a6d     itialized.[0m...
    9f10:	32345b1b 2020206d 464e4920 305b1b4f     .[42m    INFO.[0
    9f20:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    9f30:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    9f40:	6d37333b 20636461 6e616863 736c656e     ;37madc channels
    9f50:	696e6920 6c616974 64657a69 6d305b1b      initialized.[0m
    9f60:	0000000a 40000000 40066666 400ccccd     .......@ff.@...@
    9f70:	4019999a 74726175 7361745f 0000006b     ...@uart_task...
    9f80:	656e696c 61207261 61757463 20726f74     linear actuator 
    9f90:	20646e61 72727563 20746e65 736e6573     and current sens
    9fa0:	7420726f 006b7361                       or task.

00009fa8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    9fa8:	41400000                                ..@A

00009fac <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    9fac:	ffffff0c                                ....

00009fb0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    9fb0:	41400000                                ..@A

00009fb4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    9fb4:	ffff0100                                ....

00009fb8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    9fb8:	ffff0100                                ....

00009fbc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    9fbc:	ffff0500                                ....

00009fc0 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    9fc0:	ffff0108                                ....

00009fc4 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    9fc4:	ffff0208                                ....

00009fc8 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    9fc8:	ffff0208                                ....

00009fcc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    9fcc:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    9fdc:	70682e72 ffff0070                       r.hpp...

00009fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9fe4:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    9ff4:	70682e72 ffff0070                       r.hpp...

00009ffc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9ffc:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    a00c:	70682e72 ffff0070                       r.hpp...

0000a014 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    a014:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    a024:	70682e72 ffff0070                       r.hpp...

0000a02c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    a02c:	0000a284 00000802                       ........

0000a034 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    a034:	0000a284 00000902                       ........

0000a03c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    a03c:	0000a284 00001c04                       ........

0000a044 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    a044:	0000a284 00001d04                       ........

0000a04c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    a04c:	0000a284 00001d01                       ........

0000a054 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    a054:	0000a284 00000902                       ........

0000a05c <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    a05c:	ffff0800                                ....

0000a060 <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    a060:	ffff0808                                ....

0000a064 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    a064:	ffff0110                                ....

0000a068 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    a068:	ffff0115                                ....

0000a06c <sjsu::lpc40xx::Adc::Control::kStartCode>:
    a06c:	ffff0318                                ....

0000a070 <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    a070:	ffff0c04                                ....

0000a074 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    a074:	ffff011f                                ....

0000a078 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    a078:	0000a284 00001900                       ........

0000a080 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel3>:
    a080:	0000a284 00001a00                       ........

0000a088 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4>:
    a088:	0000a284 00001e01                       ........

0000a090 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5>:
    a090:	0000a284 00001f01                       ........

0000a098 <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    a098:	0000a078 0000000a                       x.......

0000a0a0 <sjsu::lpc40xx::Adc::Channel::kChannel3>:
    a0a0:	0000a080 0000000b                       ........

0000a0a8 <sjsu::lpc40xx::Adc::Channel::kChannel4>:
    a0a8:	0000a088 0000001c                       ........

0000a0b0 <sjsu::lpc40xx::Adc::Channel::kChannel5>:
    a0b0:	0000a090 0000001d                       ........

0000a0b8 <sjsu::lpc40xx::Adc::kClockFrequency>:
    a0b8:	49742400                                .$tI

0000a0bc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    a0bc:	65746e69 70757272 70682e74 ffff0070     interrupt.hpp...

0000a0cc <sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset>:
    a0cc:	ffff0101                                ....

0000a0d0 <sjsu::lpc40xx::Pwm::Timer::kCounterEnable>:
    a0d0:	ffff0100                                ....

0000a0d4 <sjsu::lpc40xx::Pwm::Timer::kCounterReset>:
    a0d4:	ffff0101                                ....

0000a0d8 <sjsu::lpc40xx::Pwm::Timer::kPwmEnable>:
    a0d8:	ffff0103                                ....

0000a0dc <sjsu::lpc40xx::Pwm::CountControl::kMode>:
    a0dc:	ffff0200                                ....

0000a0e0 <sjsu::lpc40xx::Pwm::CountControl::kCountInput>:
    a0e0:	ffff0202                                ....

0000a0e4 <sjsu::lpc40xx::Pwm::Channel::kPwmPin0>:
    a0e4:	0000a284 00000002                       ........

0000a0ec <sjsu::lpc40xx::Pwm::Channel::kPwmPin1>:
    a0ec:	0000a284 00000102                       ........

0000a0f4 <sjsu::lpc40xx::Pwm::Channel::kPwmPin2>:
    a0f4:	0000a284 00000202                       ........

0000a0fc <sjsu::lpc40xx::Pwm::Channel::kPwmPin4>:
    a0fc:	0000a284 00000402                       ........

0000a104 <sjsu::lpc40xx::Pwm::Channel::kPwmPin5>:
    a104:	0000a284 00000502                       ........

0000a10c <sjsu::lpc40xx::Pwm::Channel::kPwm0>:
    a10c:	10000054 0000a0e4 00000009              T...........

0000a118 <sjsu::lpc40xx::Pwm::Channel::kPwm1>:
    a118:	10000054 0000a0ec 0000000a              T...........

0000a124 <sjsu::lpc40xx::Pwm::Channel::kPwm2>:
    a124:	10000054 0000a0f4 0000000b              T...........

0000a130 <sjsu::lpc40xx::Pwm::Channel::kPwm4>:
    a130:	10000054 0000a0fc 0000000d              T...........

0000a13c <sjsu::lpc40xx::Pwm::Channel::kPwm5>:
    a13c:	10000054 0000a104 0000000e              T...........

0000a148 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    a148:	2e6d7770 00707068                       pwm.hpp.

0000a150 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file>:
    a150:	2e6d7770 00707068                       pwm.hpp.

0000a158 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    a158:	2e6d7770 00707068                       pwm.hpp.

0000a160 <sjsu::Servo::kDefaultFrequency>:
    a160:	42480000                                ..HB

0000a164 <motor_controller_freq>:
    a164:	42960000                                ...B

0000a168 <motor_controller_min_pulse>:
    a168:	000003e8 00000000                       ........

0000a170 <motor_controller_max_pulse>:
    a170:	000007d0 00000000                       ........

0000a178 <vUartTask(void*)::file>:
    a178:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

0000a188 <vSensorAndActuatorTask(void*)::file>:
    a188:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

0000a198 <vSensorAndActuatorTask(void*)::file>:
    a198:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

0000a1a8 <vtable for sjsu::Servo>:
	...
    a1b0:	00002439 00002503 00002573 0000259d     9$...%..s%...%..
    a1c0:	000025db 0000267d                       .%..}&..

0000a1c8 <vtable for sjsu::lpc40xx::Pwm>:
	...
    a1d0:	00001e41 00002001 000020d1 00002149     A.... ... ..I!..

0000a1e0 <vtable for sjsu::Pwm>:
	...
    a1e8:	000076e9 000076e9 000076e9 000076e9     .v...v...v...v..

0000a1f8 <vtable for sjsu::lpc40xx::Adc>:
	...
    a200:	00001a85 00001ba1 00001bf1              ............

0000a20c <vtable for sjsu::Adc>:
	...
    a214:	000076e9 000076e9 000076e9              .v...v...v..

0000a220 <vtable for sjsu::lpc40xx::Uart>:
	...
    a228:	00001689 00001749 000017d5 00001879     ....I.......y...
    a238:	00001949                                I...

0000a23c <vtable for sjsu::Uart>:
	...
    a244:	000076e9 000076e9 000076e9 000076e9     .v...v...v...v..
    a254:	000076e9                                .v..

0000a258 <vtable for sjsu::lpc40xx::SystemController>:
	...
    a260:	000009fd 00000a99 00000af1 00000b15     ................
    a270:	00000b31 00000b6d 00000ba1              1...m.......

0000a27c <vtable for sjsu::lpc40xx::Pin>:
	...
    a284:	00000411 00000445 000004b5 00000479     ....E.......y...

0000a294 <vUartTask(void*)::__PRETTY_FUNCTION__>:
    a294:	64696f76 61557620 61547472 76286b73     void vUartTask(v
    a2a4:	2a64696f ffff0029                       oid*)...

0000a2ac <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    a2ac:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    a2bc:	6c3a3a75 30346370 3a3a7878 74737953     u::lpc40xx::Syst
    a2cc:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
    a2dc:	72655074 65687069 436c6172 6b636f6c     tPeripheralClock
    a2ec:	69766944 28726564 736e6f63 6a732074     Divider(const sj
    a2fc:	3a3a7573 74737953 6f436d65 6f72746e     su::SystemContro
    a30c:	72656c6c 65503a3a 68706972 6c617265     ller::Peripheral
    a31c:	2c264449 6e697520 745f3874 6f632029     ID&, uint8_t) co
    a32c:	0074736e                                nst.

0000a330 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    a330:	746e6975 745f3233 736a7320 6c3a3a75     uint32_t sjsu::l
    a340:	30346370 3a3a7878 74737953 6f436d65     pc40xx::SystemCo
    a350:	6f72746e 72656c6c 61433a3a 6c75636c     ntroller::Calcul
    a360:	50657461 75286c6c 7374696e 72663a3a     atePll(units::fr
    a370:	65757165 3a79636e 67656d3a 72656861     equency::megaher
    a380:	745f7a74 6e75202c 3a737469 6572663a     tz_t, units::fre
    a390:	6e657571 3a3a7963 6167656d 74726568     quency::megahert
    a3a0:	29745f7a 6e6f6320 ff007473              z_t) const..

0000a3ac <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    a3ac:	64696f76 736a7320 6c3a3a75 30346370     void sjsu::lpc40
    a3bc:	3a3a7878 74737953 6f436d65 6f72746e     xx::SystemContro
    a3cc:	72656c6c 65533a3a 75704374 636f6c43     ller::SetCpuCloc
    a3dc:	7669446b 72656469 6e697528 745f3874     kDivider(uint8_t
    a3ec:	6f632029 0074736e                       ) const.

0000a3f4 <vSensorAndActuatorTask(void*)::__PRETTY_FUNCTION__>:
    a3f4:	64696f76 65537620 726f736e 41646e41     void vSensorAndA
    a404:	61757463 54726f74 286b7361 64696f76     ctuatorTask(void
    a414:	ff00292a                                *)..

0000a418 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    a418:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    a428:	6c3a3a75 30346370 3a3a7878 3a6d7750     u::lpc40xx::Pwm:
    a438:	7465533a 71657246 636e6575 6e752879     :SetFrequency(un
    a448:	3a737469 6572663a 6e657571 3a3a7963     its::frequency::
    a458:	74726568 29745f7a 6e6f6320 ff007473     hertz_t) const..

0000a468 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__>:
    a468:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    a478:	6c3a3a75 30346370 3a3a7878 3a6d7750     u::lpc40xx::Pwm:
    a488:	7465533a 79747544 6c637943 6c662865     :SetDutyCycle(fl
    a498:	2974616f 6e6f6320 ff007473              oat) const..

0000a4a4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    a4a4:	74726976 206c6175 75736a73 74533a3a     virtual sjsu::St
    a4b4:	73757461 736a7320 6c3a3a75 30346370     atus sjsu::lpc40
    a4c4:	3a3a7878 3a6d7750 696e493a 6c616974     xx::Pwm::Initial
    a4d4:	28657a69 74696e75 663a3a73 75716572     ize(units::frequ
    a4e4:	79636e65 65683a3a 5f7a7472 63202974     ency::hertz_t) c
    a4f4:	74736e6f ffffff00                       onst....

0000a4fc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    a4fc:	74617473 76206369 2064696f 75736a73     static void sjsu
    a50c:	6f633a3a 78657472 6e493a3a 72726574     ::cortex::Interr
    a51c:	43747075 72746e6f 656c6c6f 553a3a72     uptController::U
    a52c:	6765726e 65747369 49646572 7265746e     nregisteredInter
    a53c:	74707572 646e6148 2872656c ffff0029     ruptHandler()...
    a54c:	61766e69 0064696c 6c707061 74616369     invalid.applicat
    a55c:	006e6f69 74736f68 73657420 00000074     ion.host test...
    a56c:	64252020 78302029 58383025 0000000a       %d) 0x%08X....
    a57c:	25783020 00583830 64252020 78302029      0x%08X.  %d) 0x
    a58c:	000a7025 6e75520a 6874203a 6f662065     %p...Run: the fo
    a59c:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
    a5ac:	79206e69 2072756f 6a6f7270 20746365     in your project 
    a5bc:	65726964 726f7463 00000079 20200a0a     directory.....  
    a5cc:	3b315b1b 006d3733 656b616d 61747320     .[1;37m.make sta
    a5dc:	72746b63 2d656361 54207325 45434152     cktrace-%s TRACE
    a5ec:	00223d53 25783020 00000070 1b0a0a22     S=". 0x%p..."...
    a5fc:	006d305b 73696854 6c697720 6572206c     [0m.This will re
    a60c:	74726f70 65687420 6c696620 6e612065     port the file an
    a61c:	696c2064 6e20656e 65626d75 68742072     d line number th
    a62c:	6c207461 74206465 6874206f 66207369     at led to this f
    a63c:	74636e75 206e6f69 6e696562 61632067     unction being ca
    a64c:	64656c6c 0000002e 33345b1b 4157206d     lled.....[43m WA
    a65c:	4e494e52 305b1b47 6d34393b 3a73253a     RNING.[0;94m:%s:
    a66c:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    a67c:	3e64256d 305b1b20 6d37333b 69206f4e     m%d> .[0;37mNo i
    a68c:	7265746e 74707572 72657320 65636976     nterrupt service
    a69c:	756f7220 656e6974 756f6620 6620646e      routine found f
    a6ac:	7420726f 76206568 6f746365 64252072     or the vector %d
    a6bc:	69442021 6c626173 20676e69 1b525349     ! Disabling ISR.
    a6cc:	0a6d305b 00000000 31345b1b 7261486d     [0m......[41mHar
    a6dc:	61462064 20746c75 65637845 6f697470     d Fault Exceptio
    a6ec:	634f206e 72727563 0a216465 6d305b1b     n Occurred!..[0m
    a6fc:	00000000 203a3072 30257830 2c586c38     ....r0: 0x%08lX,
    a70c:	3a317220 25783020 586c3830 3272202c      r1: 0x%08lX, r2
    a71c:	7830203a 6c383025 72202c58 30203a33     : 0x%08lX, r3: 0
    a72c:	38302578 000a586c 3a323172 25783020     x%08lX..r12: 0x%
    a73c:	586c3830 726c202c 7830203a 6c383025     08lX, lr: 0x%08l
    a74c:	70202c58 30203a63 38302578 202c586c     X, pc: 0x%08lX, 
    a75c:	3a727370 25783020 586c3830 0000000a     psr: 0x%08lX....
    a76c:	315b1b0a 6d37333b 32345b1b 6f72506d     ..[1;37m.[42mPro
    a77c:	6d617267 74655220 656e7275 78452064     gram Returned Ex
    a78c:	43207469 3a65646f 646c2520 305b1b0a     it Code: %ld..[0
    a79c:	0000006d 315b1b0a 6d37333b 31345b1b     m.....[1;37m.[41
    a7ac:	6f72506d 6d617267 74655220 656e7275     mProgram Returne
    a7bc:	78452064 43207469 3a65646f 646c2520     d Exit Code: %ld
    a7cc:	305b1b0a ffff006d 454c4449 00000000     ..[0m...IDLE....
    a7dc:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    a7ec:	09752509 25752509 000a0d25 09752509     .%u..%u%%....%u.
    a7fc:	25313c09 000a0d25 ffff000a              .<1%%.......

0000a808 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    a808:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
    a818:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
    a828:	4cbebc20 4e6e6b28 0074743a 61766e69      ..L(knN:tt.inva
    a838:	0064696c 6c707061 74616369 006e6f69     lid.application.
    a848:	74736f68 73657420 00000074 64252020     host test...  %d
    a858:	78302029 58383025 0000000a 25783020     ) 0x%08X.... 0x%
    a868:	00583830 64252020 78302029 000a7025     08X.  %d) 0x%p..
    a878:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
    a888:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
    a898:	2072756f 6a6f7270 20746365 65726964     our project dire
    a8a8:	726f7463 00000079 20200a0a 3b315b1b     ctory.....  .[1;
    a8b8:	006d3733 656b616d 61747320 72746b63     37m.make stacktr
    a8c8:	2d656361 54207325 45434152 00223d53     ace-%s TRACES=".
    a8d8:	25783020 00000070 1b0a0a22 006d305b      0x%p..."...[0m.
    a8e8:	73696854 6c697720 6572206c 74726f70     This will report
    a8f8:	65687420 6c696620 6e612065 696c2064      the file and li
    a908:	6e20656e 65626d75 68742072 6c207461     ne number that l
    a918:	74206465 6874206f 66207369 74636e75     ed to this funct
    a928:	206e6f69 6e696562 61632067 64656c6c     ion being called
    a938:	0000002e 33345b1b 4157206d 4e494e52     .....[43m WARNIN
    a948:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
    a958:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    a968:	305b1b20 6d37333b 69206f4e 7265746e      .[0;37mNo inter
    a978:	74707572 72657320 65636976 756f7220     rupt service rou
    a988:	656e6974 756f6620 6620646e 7420726f     tine found for t
    a998:	76206568 6f746365 64252072 69442021     he vector %d! Di
    a9a8:	6c626173 20676e69 1b525349 0a6d305b     sabling ISR.[0m.
    a9b8:	00000000 ffffffff 00006915 00000001     .........i......
    a9c8:	ffffffff 35345b1b 2020206d 4f525245     .....[45m   ERRO
    a9d8:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    a9e8:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    a9f8:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    aa08:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    aa18:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
    aa28:	68706972 6c617265 7669645f 72656469     ripheral_divider
    aa38:	203d3c20 200a2934 20202020 20202020      <= 4).         
    aa48:	76694420 72656469 73756d20 74276e74      Divider mustn't
    aa58:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
    aa68:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
    aa78:	206b6361 63617254 000a3a65 35345b1b     ack Trace:...[45
    aa88:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    aa98:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    aaa8:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    aab8:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    aac8:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    aad8:	3a646574 65642820 65726973 72665f64     ted: (desired_fr
    aae8:	65757165 2079636e 3833203c 484d5f34     equency < 384_MH
    aaf8:	2626207a 73656420 64657269 6572665f     z && desired_fre
    ab08:	6e657571 3e207963 5f323120 297a484d     quency > 12_MHz)
    ab18:	2020200a 20202020 46202020 75716572     .          Frequ
    ab28:	79636e65 73756d20 65622074 776f6c20     ency must be low
    ab38:	74207265 206e6168 20343833 617a484d     er than 384 MHza
    ab48:	6720646e 74616572 74207265 206e6168     nd greater than 
    ab58:	6520726f 6c617571 206f7420 4d203231     or equal to 12 M
    ab68:	5b1b7a48 5b1b6d30 000a6d30 35345b1b     Hz.[0m.[0m...[45
    ab78:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    ab88:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    ab98:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    aba8:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    abb8:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    abc8:	3a646574 69642820 65646976 61765f72     ted: (divider_va
    abd8:	2065756c 2938203c 2020200a 20202020     lue < 8).       
    abe8:	50202020 64204c4c 64697669 76207265        PLL divider v
    abf8:	65756c61 6e657720 756f2074 666f2074     alue went out of
    ac08:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
    ac18:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
    ac28:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    ac38:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    ac48:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    ac58:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    ac68:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
    ac78:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
    ac88:	20202020 20202020 69442020 65646976               Divide
    ac98:	756d2072 276e7473 78652074 64656563     r mustn't exceed
    aca8:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
    acb8:	fffffffb 00006ed1 00000001 ffffffff     .....n..........
    acc8:	fffffffe 00006fe1 00000001 ffffffff     .....o..........
    acd8:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    ace8:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    acf8:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    ad08:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    ad18:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    ad28:	73655420 3a646574 69742820 5f72656d      Tested: (timer_
    ad38:	72617473 74735f74 73757461 203d3d20     start_status == 
    ad48:	75736a73 74533a3a 73757461 536b3a3a     sjsu::Status::kS
    ad58:	65636375 0a297373 20202020 20202020     uccess).        
    ad68:	79532020 6d657473 6d695420 28207265       System Timer (
    ad78:	64657375 20796220 65657246 534f5452     used by FreeRTOS
    ad88:	61682029 41462073 44454c49 206f7420     ) has FAILED to 
    ad98:	72617473 5b1b2174 5b1b6d30 000a6d30     start!.[0m.[0m..

0000ada8 <std::integral_constant<long long, 1ll>::value>:
    ada8:	00000001 00000000                       ........

0000adb0 <config::kSystemClockRateMhz>:
    adb0:	42400000                                ..@B

0000adb4 <config::kRtosFrequency>:
    adb4:	447a0000                                ..zD

0000adb8 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    adb8:	0000ae0c                                ....

0000adbc <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    adbc:	0000a284 00000200                       ........

0000adc4 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    adc4:	0000a284 00000300                       ........

0000adcc <sjsu::lpc40xx::Uart::Port::kUart0>:
    adcc:	4000c000 00000003 0000adbc 0000adc4     ...@............
    addc:	00000009                                ....

0000ade0 <sjsu::InitializePlatform()::file>:
    ade0:	72617473 2e707574 00707063              startup.cpp.

0000adec <vtable for sjsu::cortex::SystemTimer>:
	...
    adf4:	00006981 00006995 00006a9d 000069b5     .i...i...j...i..

0000ae04 <vtable for sjsu::cortex::InterruptController>:
	...
    ae0c:	00006761 000067b5                       ag...g..

0000ae14 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    ae14:	64696f76 736a7320 493a3a75 6974696e     void sjsu::Initi
    ae24:	7a696c61 616c5065 726f6674 0029286d     alizePlatform().
    ae34:	20726d54 00637653 51726d54 ffffff00     Tmr Svc.TmrQ....

0000ae44 <__sf_fake_stderr>:
	...

0000ae64 <__sf_fake_stdin>:
	...

0000ae84 <__sf_fake_stdout>:
	...

0000aea4 <_global_impure_ptr>:
    aea4:	1000009c                                ....
