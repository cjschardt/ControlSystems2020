
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000038a1

Program Header:
0x70000001 off    0x0001a7ec vaddr 0x0000a7ec paddr 0x0000a7ec align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000a8a4 memsz 0x0000a8a4 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0000a8a4 align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x000200f8 vaddr 0x100000f8 paddr 0x100000f8 align 2**16
         filesz 0x00000000 memsz 0x00000e40 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000a7d4  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000f8  10000000  0000a8a4  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200f8  2**2  CONTENTS
  3 .bss             00000e40  100000f8  100000f8  000200f8  2**3  ALLOC
  4 .ARM.extab       00000018  0000a7d4  0000a7d4  0001a7d4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  0000a7ec  0000a7ec  0001a7ec  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200f8  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200f8  2**2  CONTENTS
  8 .noinit          00000000  10000f38  10000f38  000200f8  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200f8  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020128  2**0  CONTENTS, READONLY
 11 .debug_info      0007d2ce  00000000  00000000  000201a6  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00005285  00000000  00000000  0009d474  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00001080  00000000  00000000  000a26f9  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000fa0  00000000  00000000  000a3779  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00008767  00000000  00000000  000a4719  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002d8a9  00000000  00000000  000ace80  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00005398  00000000  00000000  000da72c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f8 l    d  .bss	00000000 .bss
0000a7d4 l    d  .ARM.extab	00000000 .ARM.extab
0000a7ec l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000f38 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00006378 l     F .text	00000030 NVIC_EnableIRQ
000063a8 l     F .text	00000030 NVIC_DisableIRQ
000063d8 l     F .text	00000054 NVIC_SetPriority
0000a6e0 l     O .text	00000004 config::kSystemClockRateMhz
0000a6e4 l     O .text	00000004 config::kRtosFrequency
000064b8 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000064d4 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
10000078 l     O .data	00000004 (anonymous namespace)::system_controller
100003c8 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100003cc l     O .bss	0000000c (anonymous namespace)::uart0
1000007c l     O .data	0000000c (anonymous namespace)::system_timer
10000088 l     O .data	00000004 (anonymous namespace)::interrupt_controller
000069c8 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
000069ec l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
0000a710 l     O .text	0000000c sjsu::InitializePlatform()::file
0000a744 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00006b7c l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
00006c8c l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000f8 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000fc l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003b0 l     F .text	00000030 NVIC_DisableIRQ
00000632 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000064e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000742 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000075e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000814 l     F .text	00000026 _Unwind_GetGR
000009b0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000009cc l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00009bdc l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00009c60 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00009cdc l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00001448 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00009e2c l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00009dd4 l     O .text	00000055 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00009d98 l     O .text	0000003b sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__
00009d48 l     O .text	0000004f sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000246a l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003118 l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00009a84 l     O .text	00000004 motor_controller_freq
00009a88 l     O .text	00000008 motor_controller_min_pulse
00009a90 l     O .text	00000008 motor_controller_max_pulse
00009a98 l     O .text	0000000f vUartTask(void*)::file
00009aa8 l     O .text	0000000f vUartTask(void*)::file
00009bc4 l     O .text	00000016 vUartTask(void*)::__PRETTY_FUNCTION__
00009ab8 l     O .text	0000000f vSensorAndActuatorTask(void*)::file
00009ac8 l     O .text	0000000f vSensorAndActuatorTask(void*)::file
00009d24 l     O .text	00000023 vSensorAndActuatorTask(void*)::__PRETTY_FUNCTION__
000033bc l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000346c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00003490 l     F .text	00000240 __static_initialization_and_destruction_0(int, int)
000036d0 l     F .text	00000010 _GLOBAL__sub_I_xUartTaskHandle
00000000 l    df *ABS*	00000000 exceptions.cpp
00003890 l       .text	00000000 handler2_address_const
00003910 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00003954 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
100002ac l     O .bss	00000064 pxReadyTasksLists
10000310 l     O .bss	00000014 xDelayedTaskList1
10000324 l     O .bss	00000014 xDelayedTaskList2
10000338 l     O .bss	00000004 pxDelayedTaskList
1000033c l     O .bss	00000004 pxOverflowDelayedTaskList
10000340 l     O .bss	00000014 xPendingReadyList
10000354 l     O .bss	00000014 xTasksWaitingTermination
10000368 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000036c l     O .bss	00000014 xSuspendedTaskList
10000380 l     O .bss	00000004 uxCurrentNumberOfTasks
10000384 l     O .bss	00000004 xTickCount
10000388 l     O .bss	00000004 uxTopReadyPriority
1000038c l     O .bss	00000004 xSchedulerRunning
10000390 l     O .bss	00000004 uxPendedTicks
10000394 l     O .bss	00000004 xYieldPending
10000398 l     O .bss	00000004 xNumOfOverflows
1000039c l     O .bss	00000004 uxTaskNumber
100003a0 l     O .bss	00000004 xNextTaskUnblockTime
100003a4 l     O .bss	00000004 xIdleTaskHandle
100003a8 l     O .bss	00000004 uxSchedulerSuspended
100003ac l     O .bss	00000004 ulTaskSwitchedInTime
100003b0 l     O .bss	00000004 ulTotalRunTime
00003bb6 l     F .text	000000f4 prvInitialiseNewTask
00003cac l     F .text	000000dc prvAddNewTaskToReadyList
000043e0 l     F .text	00000080 prvInitialiseTaskLists
000044b8 l     F .text	0000003c prvDeleteTCB
000044f4 l     F .text	0000004c prvResetNextTaskUnblockTime
00004644 l     F .text	000000cc prvAddCurrentTaskToDelayedList
000043d0 l     F .text	0000000e prvIdleTask
00004460 l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 queue.c
00004862 l     F .text	00000046 prvInitialiseNewQueue
00004bf4 l     F .text	000000d4 prvCopyDataToQueue
00004de4 l     F .text	00000030 prvIsQueueFull
00004d14 l     F .text	000000a4 prvUnlockQueue
00004cc8 l     F .text	0000004c prvCopyDataFromQueue
00004db8 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00005078 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00005094 l     F .text	0000002e _strlen(char const*)
000050c2 l     F .text	00000028 _is_digit(char)
000050ea l     F .text	00000048 _atoi(char const**)
00005132 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00005374 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00005444 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0000a138 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00005524 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00005968 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
000062ac l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
100003b4 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
1000008c l     O .data	00000004 uxCriticalNesting
00006d04 l     F .text	00000030 prvTaskExitError
00006d60 l       .text	00000000 pxCurrentTCBConst2
00006d68 l     F .text	00000024 prvPortStartFirstTask
00006ef8 l     F .text	00000010 vPortEnableVFP
00006eb0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_common.cpp
100003d8 l     O .bss	00000060 idle_task_tcb
10000438 l     O .bss	00000140 idle_task_stack
10000578 l     O .bss	00000060 timer_task_tcb
100005d8 l     O .bss	00000800 timer_task_stack
00000000 l    df *ABS*	00000000 timers.c
10000dd8 l     O .bss	00000014 xActiveTimerList1
10000dec l     O .bss	00000014 xActiveTimerList2
10000e00 l     O .bss	00000004 pxCurrentTimerList
10000e04 l     O .bss	00000004 pxOverflowTimerList
10000e08 l     O .bss	00000004 xTimerQueue
10000e0c l     O .bss	00000004 xTimerTaskHandle
00007468 l     F .text	00000080 prvCheckForValidListAndQueue
000070fc l     F .text	00000024 prvTimerTask
00007098 l     F .text	00000064 prvProcessExpiredTimer
00007244 l     F .text	00000084 prvInsertTimerInActiveList
000071bc l     F .text	00000048 prvGetNextExpireTime
00007120 l     F .text	0000009c prvProcessTimerOrBlockTask
000072c8 l     F .text	000000f8 prvProcessReceivedCommands
00007204 l     F .text	00000040 prvSampleTimeNow
000073c0 l     F .text	000000a8 prvSwitchTimerLists
10000e10 l     O .bss	00000004 xLastTime.6731
10000e8c l     O .bss	00000050 xStaticTimerQueue.6776
10000e14 l     O .bss	00000078 ucStaticTimerQueueStorage.6777
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00007eb4 l     F .text	00000012 selfrel_offset31
00007ec8 l     F .text	00000060 search_EIT_table
00007f28 l     F .text	00000028 __gnu_unwind_get_pr_addr
00007f50 l     F .text	000000a4 get_eit_entry
00007ff4 l     F .text	00000058 restore_non_core_regs
0000804c l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00008058 l     F .text	00000004 __gnu_unwind_24bit.isra.1
0000805c l     F .text	00000002 _Unwind_DebugHook
00008060 l     F .text	0000003e unwind_phase2
000080a0 l     F .text	000000c6 unwind_phase2_forced
00008270 l     F .text	00000018 _Unwind_GetGR
000082b4 l     F .text	0000001a _Unwind_SetGR
00008340 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00008a4c l     F .text	00000038 next_unwind_byte
00008a84 l     F .text	0000001a _Unwind_GetGR.constprop.0
00008aa0 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
0000083c  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00008a04 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
0000816c g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00009a78  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
0000677c  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00003096  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00002950  w    F .text	0000005c sjsu::Servo::Servo(sjsu::Servo const&)
0000377c  w    F .text	0000006c sjsu::InitializeBssSection()
00004f14 g     F .text	00000010 _getpid
000098d8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00006748  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000067c4  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
00009934  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
0000265e  w    F .text	0000001e units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const
000099d0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel5
00000598  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
000066b6  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000396  w    F .text	00000018 std::numeric_limits<float>::epsilon()
00001e40  w    F .text	000001c0 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000060  w    O .data	00000004 sjsu::newlib::in
00006e18 g     F .text	00000034 vPortExitCritical
00009a1c  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin4
000078a0 g     F .text	0000005a .hidden __floatdidf
10000284  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001dec  w    F .text	00000020 sjsu::Pwm::Pwm()
0000267c  w    F .text	000000bc sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00000782  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00009b3c  w    O .text	00000014 vtable for sjsu::Adc
00009034 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
0000623c g     F .text	00000044 printf
00004e64 g     F .text	00000068 vQueueWaitForMessageRestricted
00000000 g       *ABS*	00000000 __vectors_start__
0000906e g     F .text	00000002 __malloc_unlock
000020d0  w    F .text	00000056 sjsu::lpc40xx::Pwm::GetDutyCycle() const
000099a0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel3
00002f52  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00002e56  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001ba0  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
0000661c  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
000008c8  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
000088c0 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
000089e0 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
000049fc g     F .text	000000b2 xQueueGenericSendFromISR
0000a8a4 g       .ARM.exidx	00000000 __exidx_end
00009070  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00006a20 g     F .text	00000014 ThreadRuntimeCounter
00008614 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000070  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00009a38  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm1
00002914  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
000099c8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel4
00000b6c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
100002a8 g     O .bss	00000004 pxCurrentTCB
0000259c  w    F .text	00000024 sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00008d90 g     F .text	0000000a .hidden _Unwind_GetRegionStart
000023c8  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
000089e0 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
000098d0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000997c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10010000 g       *ABS*	00000000 __top_SRAM
10000f34 g     O .bss	00000004 errno
0000a8a4 g       .ARM.exidx	00000000 _etext
00002fe6  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000004b4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000c64  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00008a28 g     F .text	00000022 .hidden _Unwind_Backtrace
0000a6e8  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
10000114  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
000079a8 g     F .text	00000160 .hidden __aeabi_fadd
100003c0  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
000079a4 g     F .text	00000164 .hidden __subsf3
00009984  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000d30  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000995c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00004300 g     F .text	0000002c vTaskInternalSetTimeOutState
000088a0 g     F .text	00000018 .hidden __restore_core_regs
000088e0 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000023c8  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
00009a04  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin0
000098c8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00009b50  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00006534  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
000099fc  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kMode
00009074  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00002438  w    F .text	00000032 sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00006d90 g     F .text	00000054 xPortStartScheduler
00001140  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00008168 g     F .text	00000004 .hidden _Unwind_GetCFA
00008e3c g     F .text	00000016 memcpy
000041f0 g     F .text	0000002c vTaskPlaceOnEventList
00000e68  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007500 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00002148  w    F .text	000000cc sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008288 g     F .text	0000002a .hidden _Unwind_VRS_Set
00007828 g     F .text	00000022 .hidden __floatsidf
00006a34 g     F .text	00000060 vPortSetupTimerInterrupt
1000028c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00006eb8 g     F .text	00000040 xPortSysTickHandler
00007bb8 g     F .text	00000000 .hidden __aeabi_uldivmod
10000270 g     O .bss	00000004 xSensorAndActuatorHandle
10000f38 g       .noinit	00000000 _noinit
00000d48  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00004fb4 g     F .text	00000048 puts
00009a14  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin2
00004ef0 g     F .text	00000024 vPortFree
00001a14  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000099f8  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kPwmEnable
00001204  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00002fc2  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
000099a8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4
10000074  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000a98  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00001634  w    F .text	00000020 sjsu::Uart::Uart()
00008e1c g     F .text	00000010 malloc
00009998  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
00008fd4 g     F .text	00000050 _raise_r
00007b10 g     F .text	0000001c .hidden __aeabi_i2f
10000274 g     O .bss	00000004 Q
000019c0  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
00001990  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
00006e50 g     F .text	00000066 xPortPendSVHandler
00009a00  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kCountInput
000039be g     F .text	00000048 vListInsertEnd
000005f0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000478  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00009058 g     F .text	00000004 _getpid_r
000082d0 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00002e30  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00007808 g     F .text	0000001e .hidden __aeabi_ui2d
000024de  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)
000028cc  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)
10010000 g       *ABS*	00000000 StackTop
00001e0c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
00000e04  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00007be8 g     F .text	000002cc .hidden __udivmoddi4
00007584 g     F .text	00000000 .hidden __aeabi_drsub
00008fb4 g     F .text	00000020 _sbrk_r
00009a80  w    O .text	00000004 sjsu::Servo::kDefaultFrequency
000000fc g       .text	00000000 bss_section_table
00009078  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000068ec  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000088d0 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00001654  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000039a4 g     F .text	0000001a vListInitialiseItem
00008620 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00004ab0 g     F .text	00000144 xQueueReceive
0000861c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000ee4 g     O .bss	00000050 xQueueRegistry
0000681c  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
1000027c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00008a28 g     F .text	00000022 .hidden ___Unwind_Backtrace
0000096c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00001878  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000884  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
0000784c g     F .text	00000042 .hidden __extendsfdf2
00009974  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00006f70 g     F .text	00000034 vApplicationGetTimerTaskMemory
00007590 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100003b8  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
0000a7ec g       .ARM.extab	00000000 __exidx_start
00008dd4 g     F .text	00000048 __libc_init_array
0000137c  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00008998 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
000031ce  w    F .text	00000092 float sjsu::Map<float, int, float>(float, int, int, float, float)
00001424  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00006f58  w    F .text	00000018 unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])
00001c50  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
00008dc4 g     F .text	0000000e abort
000089bc g     F .text	00000022 .hidden ___Unwind_Resume
0000140c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007808 g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00004f40 g     F .text	00000044 _sbrk
00004ecc g     F .text	00000024 pvPortMalloc
10000278  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000066d0  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000029ac g     F .text	00000414 vSensorAndActuatorTask(void*)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
000013a8  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00080000 g       *ABS*	00000000 __top_FLASH
00003964 g     F .text	00000040 vListInitialise
000074e8 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
0000907c  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
000033d8  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00001822  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00007578 g     F .text	0000000a std::terminate()
00000564  w    F .text	00000034 units::detail::abs(float)
000078fc g     F .text	0000009e .hidden __aeabi_d2f
000088e8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000098cc  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
00003fb4 g     F .text	00000020 xTaskGetTickCount
000048a8 g     F .text	00000154 xQueueGenericSend
000025c0  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
000079a4 g     F .text	00000164 .hidden __aeabi_fsub
00001748  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00002f78  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
000028f0  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
00003878 g     F .text	00000026 ArmHardFaultHandler
10000288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000228  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000de2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000f38 g       .bss	00000000 _ebss
00009b10  w    O .text	00000018 vtable for sjsu::Pwm
000017d4  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00009b88  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00009a5c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm5
000030d6  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000694  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000b14  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
0000457c g     F .text	000000c8 xTaskPriorityDisinherit
000067e8  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
00000672  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00007b3c g     F .text	0000007c .hidden __floatdisf
0000a6f4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
000037fc g     F .text	0000007c GetRegistersFromStack
00009988  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
00001654  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000030fa  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
1000026c g     O .bss	00000004 xUartTaskHandle
00004258 g     F .text	000000a8 xTaskRemoveFromEventList
00009a68  w    O .text	00000008 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00007590 g     F .text	00000276 .hidden __aeabi_dadd
00009a2c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm0
000019c0  w    F .text	00000020 sjsu::Adc::Adc()
00007890 g     F .text	0000006a .hidden __aeabi_ul2d
20008000 g       *ABS*	00000000 __top_SRAM_AHB
000088b8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00006a94  w    F .text	000000b8 sjsu::InitializePlatform()
00002214  w    F .text	000000d4 sjsu::lpc40xx::Pwm::EnablePwm(bool) const
00002e92  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
0000a774 g     O .text	00000020 __sf_fake_stderr
00006554  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00009a24  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin5
00007568 g     F .text	00000010 std::get_terminate()
10000f38 g       .bss	00000000 end
00001634  w    F .text	00000020 sjsu::Uart::Uart()
000089bc g     F .text	00000022 .hidden _Unwind_Resume
00001d14  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00009a44  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm2
00008238 g     F .text	0000000c .hidden _Unwind_DeleteException
0000a734  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
00008234 g     F .text	00000002 .hidden _Unwind_Complete
00000c1c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000268  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
00005008 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
0000a71c  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
000098e8  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
0000432c g     F .text	0000008c xTaskCheckForTimeOut
00008e64 g     F .text	0000009c _free_r
0000628e g     F .text	0000001c trace_write
10000280  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00003314  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000f8 g       .bss	00000000 _bss
0000758c g     F .text	0000027a .hidden __aeabi_dsub
0000991c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001bf0  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
00006280 g     F .text	0000000e trace_initialize
00009ad8  w    O .text	00000020 vtable for sjsu::Servo
00003e7c g     F .text	0000001c vTaskSuspendAll
0000998c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
00007890 g     F .text	0000006a .hidden __floatundidf
00007558 g     F .text	00000006 __cxa_pure_virtual
00000e40  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00007b10 g     F .text	0000001c .hidden __floatsisf
0000994c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000120  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00008aa4 g     F .text	000002c4 .hidden __gnu_unwind_execute
00003a78 g     F .text	00000054 uxListRemove
00001e0c  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000290  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000009fc  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000088c8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000003f8  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00003260  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
0000314c  w    F .text	00000082 float sjsu::Map<float, float, float>(float, float, float, float, float)
00006678  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00003acc g     F .text	00000060 xTaskCreateStatic
10000f38 g       .noinit	00000000 _end_noinit
10000128  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000af0  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
0000412c g     F .text	000000c4 vTaskSwitchContext
00001188  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
000098d4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00006644  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
000099dc  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000037e  w    F .text	00000018 std::numeric_limits<float>::min()
00002914  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
000047c4 g     F .text	0000003e xQueueGenericCreateStatic
000081e0 g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000240  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
0000421c g     F .text	0000003c vTaskPlaceOnEventListRestricted
0000665c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
0000642c  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00002642  w    F .text	0000001c float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const
10000298  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
00007828 g     F .text	00000022 .hidden __aeabi_i2d
00009980  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
00009954  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
000088d8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00006904  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006f24 g     F .text	00000034 vApplicationGetIdleTaskMemory
00009af8  w    O .text	00000018 vtable for sjsu::lpc40xx::Pwm
10000294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00007b2c g     F .text	0000008c .hidden __floatundisf
00007018 g     F .text	00000080 xTimerGenericCommand
00002950  w    F .text	0000005c sjsu::Servo::Servo(sjsu::Servo const&)
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00008998 g     F .text	00000022 .hidden _Unwind_RaiseException
00008dc0  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
000037e8  w    F .text	00000014 sjsu::SystemInitialize()
00001a6c  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00001dec  w    F .text	00000020 sjsu::Pwm::Pwm()
00007b08 g     F .text	00000024 .hidden __aeabi_ui2f
000011c0  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
000099ec  w    O .text	00000002 sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset
000000e4 g       .text	00000000 data_section_table
10000118  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002502  w    F .text	00000070 sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000906c g     F .text	00000002 __malloc_lock
00002388  w    F .text	00000040 sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const
1000029c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00007518 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000005c4  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
0000a794 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00009a70  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file
00009a0c  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin1
000010c4  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00002000  w    F .text	000000d0 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const
00008e52 g     F .text	00000010 memset
00002dc0 g     F .text	00000070 main
00006470  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001d24  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00009994  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00007b3c g     F .text	0000007c .hidden __aeabi_l2f
00002738  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00003a06 g     F .text	00000072 vListInsert
000065c8  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00006490  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000a6fc  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00006fa4 g     F .text	00000074 xTimerCreateTimerTask
00009bac  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
000078fc g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
00006d40 g     F .text	00000026 vPortSVCHandler
00008f00 g     F .text	000000b4 _malloc_r
00000000 g       *ABS*	00000000 __base_FLASH
000078a0 g     F .text	0000005a .hidden __aeabi_l2d
000098e0  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000068  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00007b2c g     F .text	0000008c .hidden __aeabi_ul2f
000064f8  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000119c  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
00004802 g     F .text	00000060 xQueueGenericCreate
000081cc g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
0000669a  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000099c0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel3
00002f16  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00008224 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
1000005c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
0000a6d8  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
0000304a  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
000088a0 g     F .text	00000018 .hidden restore_core_regs
00000b30  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00008984 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00003e98 g     F .text	0000011c xTaskResumeAll
0000996c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00003dd0 g     F .text	000000ac vTaskStartScheduler
000067fc  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
0000274a  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00002126  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000196c  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00009a50  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm4
0000799c g     F .text	0000016c .hidden __aeabi_frsub
00008db8 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000094 g     O .data	00000004 _impure_ptr
000098e4  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000d6c  w    F .text	0000001e units::linear_scale<float>::operator()() const
00009990  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000cf4  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00006590  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
000004e8  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00009b28  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
000043b8 g     F .text	00000018 vTaskMissedYield
0000301c  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000025da  w    F .text	00000068 sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000068b0  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
100002a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00002774 g     F .text	00000158 vUartTask(void*)
00008d9c g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00009904  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00004e14 g     F .text	00000050 vQueueAddToRegistry
000019e0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
000038a0 g     F .text	00000070 ArmResetHandler
00003fd4 g     F .text	00000158 xTaskIncrementTick
00003078  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
000019e0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
100002a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00008244 g     F .text	0000002a .hidden _Unwind_VRS_Get
0000656c  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000090 g     O .data	00000004 __cxxabiv1::__terminate_handler
00008970 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000ba0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00004710 g     F .text	000000b4 xQueueGenericReset
00000bd4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00004f84 g     F .text	00000030 _write
00008d68 g     F .text	00000028 .hidden __gnu_unwind_frame
00001c08  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00008a04 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
00002486  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
100000f8 g       .data	00000000 _edata
00001948  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00001a84  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00006b4c  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000124  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00003b2c g     F .text	0000008a xTaskCreate
00001d60  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
000098ec  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000d8a  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00007b08 g     F .text	00000024 .hidden __floatunsisf
0000755e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
0000892c g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00002572  w    F .text	0000002a sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00006f0c  w    F .text	00000016 unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])
00004f24 g     F .text	0000001a _kill
000036e0  w    F .text	0000009c sjsu::InitializeDataSection()
00003414  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00003d88 g     F .text	00000048 vTaskDelay
00000990  w    F .text	00000020 sjsu::DefaultUptime()
0000a7b4 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
000099d8  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
00004540 g     F .text	0000003c xTaskGetSchedulerState
000028f0  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
0000030c g       .text	00000000 __init_array_start
00008dc0  w    F .text	00000002 .hidden __aeabi_idiv0
000099b8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
00002f9c  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000099f0  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterEnable
00004ffc g     F .text	0000000c _exit
00009964  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
00000612  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000012e4  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
000003e0  w    F .text	00000018 sjsu::Pin::GetPort() const
0000905c g     F .text	00000010 strlen
00006c9c g     F .text	00000068 pxPortInitialiseStack
10000000  w    O .data	00000004 sjsu::Uptime
00000410  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00008618  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
000032ba  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000ee0 g     O .bss	00000004 __malloc_sbrk_start
00000ffc  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007538 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000007d4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
000099b0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5
0000784c g     F .text	00000042 .hidden __aeabi_f2d
00006de4 g     F .text	00000034 vPortEnterCritical
00008db0 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00001330  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000edc g     O .bss	00000004 __malloc_free_list
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
000022e8  w    F .text	0000009e sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const
00003364  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000444  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000758c g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
10000064  w    O .data	00000004 heap_position
00000cac  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00002ec8  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001d78  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
000098dc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00009b6c  w    O .text	0000001c vtable for sjsu::Uart
000079a8 g     F .text	00000160 .hidden __addsf3
000030b4  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
000099f4  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterReset
0000a6ec  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
1000006c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001688  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00009024 g     F .text	00000010 raise
00008e2c g     F .text	00000010 free



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 a1 38 00 00 91 65 00 00 79 38 00 00     .....8...e..y8..
      10:	91 65 00 00 91 65 00 00 91 65 00 00 00 00 00 00     .e...e...e......
	...
      2c:	41 6d 00 00 91 65 00 00 00 00 00 00 51 6e 00 00     Am...e......Qn..
      3c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      4c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      5c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      6c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      7c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      8c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      9c:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      ac:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      bc:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      cc:	91 65 00 00 91 65 00 00 91 65 00 00 91 65 00 00     .e...e...e...e..
      dc:	91 65 00 00 91 65 00 00                             .e...e..

000000e4 <data_section_table>:
      e4:	0000a8a4 	.word	0x0000a8a4
      e8:	10000000 	.word	0x10000000
      ec:	000000f8 	.word	0x000000f8
      f0:	0000a8a4 	.word	0x0000a8a4
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f8 	.word	0x100000f8
     100:	00000e40 	.word	0x00000e40
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	000036d1 	.word	0x000036d1
     314:	00003955 	.word	0x00003955
     318:	00006c8d 	.word	0x00006c8d

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000f8 	.word	0x100000f8
     344:	00000000 	.word	0x00000000
     348:	0000a7ec 	.word	0x0000a7ec

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000fc 	.word	0x100000fc
     364:	0000a7ec 	.word	0x0000a7ec

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
     37e:	b480      	push	{r7}
     380:	af00      	add	r7, sp, #0
     382:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     386:	ee07 3a90 	vmov	s15, r3
     38a:	eeb0 0a67 	vmov.f32	s0, s15
     38e:	46bd      	mov	sp, r7
     390:	f85d 7b04 	ldr.w	r7, [sp], #4
     394:	4770      	bx	lr

00000396 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
     396:	b480      	push	{r7}
     398:	af00      	add	r7, sp, #0
     39a:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
     39e:	ee07 3a90 	vmov	s15, r3
     3a2:	eeb0 0a67 	vmov.f32	s0, s15
     3a6:	46bd      	mov	sp, r7
     3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ac:	4770      	bx	lr
     3ae:	Address 0x00000000000003ae is out of bounds.


000003b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	f003 021f 	and.w	r2, r3, #31
     3be:	4907      	ldr	r1, [pc, #28]	; (3dc <NVIC_DisableIRQ+0x2c>)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	095b      	lsrs	r3, r3, #5
     3c4:	2001      	movs	r0, #1
     3c6:	fa00 f202 	lsl.w	r2, r0, r2
     3ca:	3320      	adds	r3, #32
     3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3d0:	bf00      	nop
     3d2:	370c      	adds	r7, #12
     3d4:	46bd      	mov	sp, r7
     3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3da:	4770      	bx	lr
     3dc:	e000e100 	.word	0xe000e100

000003e0 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
  {
    return port_;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	791b      	ldrb	r3, [r3, #4]
  }
     3ec:	4618      	mov	r0, r3
     3ee:	370c      	adds	r7, #12
     3f0:	46bd      	mov	sp, r7
     3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f6:	4770      	bx	lr

000003f8 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     400:	687b      	ldr	r3, [r7, #4]
     402:	795b      	ldrb	r3, [r3, #5]
  }
     404:	4618      	mov	r0, r3
     406:	370c      	adds	r7, #12
     408:	46bd      	mov	sp, r7
     40a:	f85d 7b04 	ldr.w	r7, [sp], #4
     40e:	4770      	bx	lr

00000410 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
     418:	460b      	mov	r3, r1
     41a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     41c:	4b08      	ldr	r3, [pc, #32]	; (440 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     41e:	78f9      	ldrb	r1, [r7, #3]
     420:	781a      	ldrb	r2, [r3, #0]
     422:	785b      	ldrb	r3, [r3, #1]
     424:	021b      	lsls	r3, r3, #8
     426:	431a      	orrs	r2, r3
     428:	2300      	movs	r3, #0
     42a:	f362 030f 	bfi	r3, r2, #0, #16
     42e:	461a      	mov	r2, r3
     430:	6878      	ldr	r0, [r7, #4]
     432:	f000 f859 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     436:	bf00      	nop
     438:	3708      	adds	r7, #8
     43a:	46bd      	mov	sp, r7
     43c:	bd80      	pop	{r7, pc}
     43e:	bf00      	nop
     440:	00009070 	.word	0x00009070

00000444 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     452:	78f9      	ldrb	r1, [r7, #3]
     454:	781a      	ldrb	r2, [r3, #0]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	021b      	lsls	r3, r3, #8
     45a:	431a      	orrs	r2, r3
     45c:	2300      	movs	r3, #0
     45e:	f362 030f 	bfi	r3, r2, #0, #16
     462:	461a      	mov	r2, r3
     464:	6878      	ldr	r0, [r7, #4]
     466:	f000 f83f 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     46a:	bf00      	nop
     46c:	3708      	adds	r7, #8
     46e:	46bd      	mov	sp, r7
     470:	bd80      	pop	{r7, pc}
     472:	bf00      	nop
     474:	00009074 	.word	0x00009074

00000478 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	460b      	mov	r3, r1
     482:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     484:	78fb      	ldrb	r3, [r7, #3]
     486:	f083 0301 	eor.w	r3, r3, #1
     48a:	b2db      	uxtb	r3, r3
     48c:	4619      	mov	r1, r3
     48e:	4b08      	ldr	r3, [pc, #32]	; (4b0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     490:	781a      	ldrb	r2, [r3, #0]
     492:	785b      	ldrb	r3, [r3, #1]
     494:	021b      	lsls	r3, r3, #8
     496:	431a      	orrs	r2, r3
     498:	2300      	movs	r3, #0
     49a:	f362 030f 	bfi	r3, r2, #0, #16
     49e:	461a      	mov	r2, r3
     4a0:	6878      	ldr	r0, [r7, #4]
     4a2:	f000 f821 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4a6:	bf00      	nop
     4a8:	3708      	adds	r7, #8
     4aa:	46bd      	mov	sp, r7
     4ac:	bd80      	pop	{r7, pc}
     4ae:	bf00      	nop
     4b0:	00009078 	.word	0x00009078

000004b4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     4b4:	b580      	push	{r7, lr}
     4b6:	b082      	sub	sp, #8
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	460b      	mov	r3, r1
     4be:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     4c0:	78f9      	ldrb	r1, [r7, #3]
     4c2:	4b08      	ldr	r3, [pc, #32]	; (4e4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	785b      	ldrb	r3, [r3, #1]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	431a      	orrs	r2, r3
     4cc:	2300      	movs	r3, #0
     4ce:	f362 030f 	bfi	r3, r2, #0, #16
     4d2:	461a      	mov	r2, r3
     4d4:	6878      	ldr	r0, [r7, #4]
     4d6:	f000 f807 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4da:	bf00      	nop
     4dc:	3708      	adds	r7, #8
     4de:	46bd      	mov	sp, r7
     4e0:	bd80      	pop	{r7, pc}
     4e2:	bf00      	nop
     4e4:	0000907c 	.word	0x0000907c

000004e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ea:	b087      	sub	sp, #28
     4ec:	af00      	add	r7, sp, #0
     4ee:	60f8      	str	r0, [r7, #12]
     4f0:	460b      	mov	r3, r1
     4f2:	80ba      	strh	r2, [r7, #4]
     4f4:	72fb      	strb	r3, [r7, #11]
     4f6:	68fb      	ldr	r3, [r7, #12]
     4f8:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     4fa:	4b19      	ldr	r3, [pc, #100]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     4fc:	681c      	ldr	r4, [r3, #0]
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	4618      	mov	r0, r3
     502:	f7ff ff6d 	bl	3e0 <sjsu::Pin::GetPort() const>
     506:	4603      	mov	r3, r0
     508:	461d      	mov	r5, r3
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	4618      	mov	r0, r3
     50e:	f7ff ff73 	bl	3f8 <sjsu::Pin::GetPin() const>
     512:	4603      	mov	r3, r0
     514:	461a      	mov	r2, r3
     516:	016b      	lsls	r3, r5, #5
     518:	4413      	add	r3, r2
     51a:	009b      	lsls	r3, r3, #2
     51c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     51e:	681b      	ldr	r3, [r3, #0]
     520:	7af9      	ldrb	r1, [r7, #11]
     522:	687a      	ldr	r2, [r7, #4]
     524:	4618      	mov	r0, r3
     526:	f002 fc83 	bl	2e30 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     52a:	4605      	mov	r5, r0
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     530:	4b0b      	ldr	r3, [pc, #44]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     532:	681c      	ldr	r4, [r3, #0]
     534:	697b      	ldr	r3, [r7, #20]
     536:	4618      	mov	r0, r3
     538:	f7ff ff52 	bl	3e0 <sjsu::Pin::GetPort() const>
     53c:	4603      	mov	r3, r0
     53e:	461e      	mov	r6, r3
     540:	697b      	ldr	r3, [r7, #20]
     542:	4618      	mov	r0, r3
     544:	f7ff ff58 	bl	3f8 <sjsu::Pin::GetPin() const>
     548:	4603      	mov	r3, r0
     54a:	461a      	mov	r2, r3
     54c:	0173      	lsls	r3, r6, #5
     54e:	4413      	add	r3, r2
     550:	009b      	lsls	r3, r3, #2
     552:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     554:	601d      	str	r5, [r3, #0]
  }
     556:	bf00      	nop
     558:	371c      	adds	r7, #28
     55a:	46bd      	mov	sp, r7
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	bf00      	nop
     560:	10000114 	.word	0x10000114

00000564 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	ed87 0a01 	vstr	s0, [r7, #4]
			return x < 0 ? -x : x;
     56e:	edd7 7a01 	vldr	s15, [r7, #4]
     572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     57a:	d504      	bpl.n	586 <units::detail::abs(float)+0x22>
     57c:	edd7 7a01 	vldr	s15, [r7, #4]
     580:	eef1 7a67 	vneg.f32	s15, s15
     584:	e001      	b.n	58a <units::detail::abs(float)+0x26>
     586:	edd7 7a01 	vldr	s15, [r7, #4]
		}
     58a:	eeb0 0a67 	vmov.f32	s0, s15
     58e:	370c      	adds	r7, #12
     590:	46bd      	mov	sp, r7
     592:	f85d 7b04 	ldr.w	r7, [sp], #4
     596:	4770      	bx	lr

00000598 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     598:	b580      	push	{r7, lr}
     59a:	b084      	sub	sp, #16
     59c:	af00      	add	r7, sp, #0
     59e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
     5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
     5a6:	f007 fac1 	bl	7b2c <__aeabi_ul2f>
     5aa:	4602      	mov	r2, r0
     5ac:	f107 030c 	add.w	r3, r7, #12
     5b0:	ee00 2a10 	vmov	s0, r2
     5b4:	4618      	mov	r0, r3
     5b6:	f000 f85c 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	4618      	mov	r0, r3
     5be:	3710      	adds	r7, #16
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}

000005c4 <units::literals::operator"" _MHz(unsigned long long)>:
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     5ce:	e9d7 0100 	ldrd	r0, r1, [r7]
     5d2:	f007 faab 	bl	7b2c <__aeabi_ul2f>
     5d6:	4602      	mov	r2, r0
     5d8:	f107 030c 	add.w	r3, r7, #12
     5dc:	ee00 2a10 	vmov	s0, r2
     5e0:	4618      	mov	r0, r3
     5e2:	f000 f805 	bl	5f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	4618      	mov	r0, r3
     5ea:	3710      	adds	r7, #16
     5ec:	46bd      	mov	sp, r7
     5ee:	bd80      	pop	{r7, pc}

000005f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
     5f8:	ed87 0a00 	vstr	s0, [r7]
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	463a      	mov	r2, r7
     600:	4611      	mov	r1, r2
     602:	4618      	mov	r0, r3
     604:	f000 f805 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     608:	687b      	ldr	r3, [r7, #4]
     60a:	4618      	mov	r0, r3
     60c:	3708      	adds	r7, #8
     60e:	46bd      	mov	sp, r7
     610:	bd80      	pop	{r7, pc}

00000612 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     612:	b480      	push	{r7}
     614:	b083      	sub	sp, #12
     616:	af00      	add	r7, sp, #0
     618:	6078      	str	r0, [r7, #4]
     61a:	6039      	str	r1, [r7, #0]
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	681a      	ldr	r2, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	601a      	str	r2, [r3, #0]
     624:	687b      	ldr	r3, [r7, #4]
     626:	4618      	mov	r0, r3
     628:	370c      	adds	r7, #12
     62a:	46bd      	mov	sp, r7
     62c:	f85d 7b04 	ldr.w	r7, [sp], #4
     630:	4770      	bx	lr

00000632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     632:	b580      	push	{r7, lr}
     634:	b086      	sub	sp, #24
     636:	af00      	add	r7, sp, #0
     638:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	f000 f807 	bl	64e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     640:	eef0 7a40 	vmov.f32	s15, s0
	}
     644:	eeb0 0a67 	vmov.f32	s0, s15
     648:	3718      	adds	r7, #24
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}

0000064e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     64e:	b480      	push	{r7}
     650:	b085      	sub	sp, #20
     652:	af00      	add	r7, sp, #0
     654:	60f8      	str	r0, [r7, #12]
     656:	7239      	strb	r1, [r7, #8]
     658:	713a      	strb	r2, [r7, #4]
     65a:	703b      	strb	r3, [r7, #0]
			return value;
     65c:	68fb      	ldr	r3, [r7, #12]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	ee07 3a90 	vmov	s15, r3
		}
     664:	eeb0 0a67 	vmov.f32	s0, s15
     668:	3714      	adds	r7, #20
     66a:	46bd      	mov	sp, r7
     66c:	f85d 7b04 	ldr.w	r7, [sp], #4
     670:	4770      	bx	lr

00000672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     672:	b580      	push	{r7, lr}
     674:	b082      	sub	sp, #8
     676:	af00      	add	r7, sp, #0
     678:	6078      	str	r0, [r7, #4]
     67a:	ed87 0a00 	vstr	s0, [r7]
     67e:	687b      	ldr	r3, [r7, #4]
     680:	463a      	mov	r2, r7
     682:	4611      	mov	r1, r2
     684:	4618      	mov	r0, r3
     686:	f7ff ffc4 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	4618      	mov	r0, r3
     68e:	3708      	adds	r7, #8
     690:	46bd      	mov	sp, r7
     692:	bd80      	pop	{r7, pc}

00000694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     694:	b580      	push	{r7, lr}
     696:	ed2d 8b04 	vpush	{d8-d9}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	ed93 8a00 	vldr	s16, [r3]
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	4618      	mov	r0, r3
     6ac:	f000 f849 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6b0:	eef0 7a40 	vmov.f32	s15, s0
     6b4:	ee78 7a67 	vsub.f32	s15, s16, s15
     6b8:	eeb0 0a67 	vmov.f32	s0, s15
     6bc:	f7ff ff52 	bl	564 <units::detail::abs(float)>
     6c0:	eef0 8a40 	vmov.f32	s17, s0
     6c4:	f7ff fe67 	bl	396 <std::numeric_limits<float>::epsilon()>
     6c8:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	ed93 8a00 	vldr	s16, [r3]
     6d2:	683b      	ldr	r3, [r7, #0]
     6d4:	4618      	mov	r0, r3
     6d6:	f000 f834 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6da:	eef0 7a40 	vmov.f32	s15, s0
     6de:	ee78 7a27 	vadd.f32	s15, s16, s15
     6e2:	eeb0 0a67 	vmov.f32	s0, s15
     6e6:	f7ff ff3d 	bl	564 <units::detail::abs(float)>
     6ea:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6ee:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6f2:	eef4 8ae7 	vcmpe.f32	s17, s15
     6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6fa:	d419      	bmi.n	730 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	ed93 8a00 	vldr	s16, [r3]
     702:	683b      	ldr	r3, [r7, #0]
     704:	4618      	mov	r0, r3
     706:	f000 f81c 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     70a:	eef0 7a40 	vmov.f32	s15, s0
     70e:	ee78 7a67 	vsub.f32	s15, s16, s15
     712:	eeb0 0a67 	vmov.f32	s0, s15
     716:	f7ff ff25 	bl	564 <units::detail::abs(float)>
     71a:	eeb0 8a40 	vmov.f32	s16, s0
     71e:	f7ff fe2e 	bl	37e <std::numeric_limits<float>::min()>
     722:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     726:	eeb4 8ae7 	vcmpe.f32	s16, s15
     72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     72e:	d501      	bpl.n	734 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
     730:	2301      	movs	r3, #1
     732:	e000      	b.n	736 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
     734:	2300      	movs	r3, #0
		}
     736:	4618      	mov	r0, r3
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	ecbd 8b04 	vpop	{d8-d9}
     740:	bd80      	pop	{r7, pc}

00000742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     742:	b580      	push	{r7, lr}
     744:	b086      	sub	sp, #24
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     74a:	6878      	ldr	r0, [r7, #4]
     74c:	f000 f807 	bl	75e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     750:	eef0 7a40 	vmov.f32	s15, s0
	}
     754:	eeb0 0a67 	vmov.f32	s0, s15
     758:	3718      	adds	r7, #24
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}

0000075e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     75e:	b480      	push	{r7}
     760:	b085      	sub	sp, #20
     762:	af00      	add	r7, sp, #0
     764:	60f8      	str	r0, [r7, #12]
     766:	7239      	strb	r1, [r7, #8]
     768:	713a      	strb	r2, [r7, #4]
     76a:	703b      	strb	r3, [r7, #0]
			return value;
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	ee07 3a90 	vmov	s15, r3
		}
     774:	eeb0 0a67 	vmov.f32	s0, s15
     778:	3714      	adds	r7, #20
     77a:	46bd      	mov	sp, r7
     77c:	f85d 7b04 	ldr.w	r7, [sp], #4
     780:	4770      	bx	lr

00000782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     782:	b580      	push	{r7, lr}
     784:	b086      	sub	sp, #24
     786:	af00      	add	r7, sp, #0
     788:	6078      	str	r0, [r7, #4]
     78a:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	3308      	adds	r3, #8
     792:	681b      	ldr	r3, [r3, #0]
     794:	6839      	ldr	r1, [r7, #0]
     796:	6878      	ldr	r0, [r7, #4]
     798:	4798      	blx	r3
     79a:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     79c:	f04f 0300 	mov.w	r3, #0
     7a0:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7a2:	697b      	ldr	r3, [r7, #20]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d00f      	beq.n	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	330c      	adds	r3, #12
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	4798      	blx	r3
     7b4:	4603      	mov	r3, r0
     7b6:	613b      	str	r3, [r7, #16]
     7b8:	f107 0310 	add.w	r3, r7, #16
     7bc:	6979      	ldr	r1, [r7, #20]
     7be:	4618      	mov	r0, r3
     7c0:	f002 fb49 	bl	2e56 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     7c4:	4603      	mov	r3, r0
     7c6:	60fb      	str	r3, [r7, #12]
    }
    return result;
     7c8:	68fb      	ldr	r3, [r7, #12]
  }
     7ca:	4618      	mov	r0, r3
     7cc:	3718      	adds	r7, #24
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	Address 0x00000000000007d2 is out of bounds.


000007d4 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     7d4:	b480      	push	{r7}
     7d6:	b085      	sub	sp, #20
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     7de:	60fb      	str	r3, [r7, #12]
  switch (target)
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d002      	beq.n	7ec <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     7e6:	2b01      	cmp	r3, #1
     7e8:	d003      	beq.n	7f2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     7ea:	e005      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     7ee:	60fb      	str	r3, [r7, #12]
     7f0:	e002      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     7f4:	60fb      	str	r3, [r7, #12]
     7f6:	bf00      	nop
  }
  return result;
     7f8:	68fb      	ldr	r3, [r7, #12]
}
     7fa:	4618      	mov	r0, r3
     7fc:	3714      	adds	r7, #20
     7fe:	46bd      	mov	sp, r7
     800:	f85d 7b04 	ldr.w	r7, [sp], #4
     804:	4770      	bx	lr
     806:	bf00      	nop
     808:	00009080 	.word	0x00009080
     80c:	00009088 	.word	0x00009088
     810:	00009094 	.word	0x00009094

00000814 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     814:	b580      	push	{r7, lr}
     816:	b086      	sub	sp, #24
     818:	af02      	add	r7, sp, #8
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     81e:	683a      	ldr	r2, [r7, #0]
     820:	f107 030c 	add.w	r3, r7, #12
     824:	9300      	str	r3, [sp, #0]
     826:	2300      	movs	r3, #0
     828:	2100      	movs	r1, #0
     82a:	6878      	ldr	r0, [r7, #4]
     82c:	f007 fd0a 	bl	8244 <_Unwind_VRS_Get>
      return val;
     830:	68fb      	ldr	r3, [r7, #12]
    }
     832:	4618      	mov	r0, r3
     834:	3710      	adds	r7, #16
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	Address 0x000000000000083a is out of bounds.


0000083c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     846:	683b      	ldr	r3, [r7, #0]
     848:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     84a:	210f      	movs	r1, #15
     84c:	6878      	ldr	r0, [r7, #4]
     84e:	f7ff ffe1 	bl	814 <_Unwind_GetGR>
     852:	4603      	mov	r3, r0
     854:	f023 0301 	bic.w	r3, r3, #1
     858:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	6819      	ldr	r1, [r3, #0]
     85e:	68bb      	ldr	r3, [r7, #8]
     860:	3b04      	subs	r3, #4
     862:	461a      	mov	r2, r3
     864:	4806      	ldr	r0, [pc, #24]	; (880 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     866:	f005 fce9 	bl	623c <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     86a:	68fb      	ldr	r3, [r7, #12]
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	1c5a      	adds	r2, r3, #1
     870:	68fb      	ldr	r3, [r7, #12]
     872:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     874:	2300      	movs	r3, #0
}
     876:	4618      	mov	r0, r3
     878:	3710      	adds	r7, #16
     87a:	46bd      	mov	sp, r7
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop
     880:	000090a0 	.word	0x000090a0

00000884 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
     88c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     88e:	683b      	ldr	r3, [r7, #0]
     890:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     892:	210f      	movs	r1, #15
     894:	6878      	ldr	r0, [r7, #4]
     896:	f7ff ffbd 	bl	814 <_Unwind_GetGR>
     89a:	4603      	mov	r3, r0
     89c:	f023 0301 	bic.w	r3, r3, #1
     8a0:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	3b04      	subs	r3, #4
     8a6:	4619      	mov	r1, r3
     8a8:	4806      	ldr	r0, [pc, #24]	; (8c4 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     8aa:	f005 fcc7 	bl	623c <printf>
  (*depth)++;
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	1c5a      	adds	r2, r3, #1
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     8b8:	2300      	movs	r3, #0
}
     8ba:	4618      	mov	r0, r3
     8bc:	3710      	adds	r7, #16
     8be:	46bd      	mov	sp, r7
     8c0:	bd80      	pop	{r7, pc}
     8c2:	bf00      	nop
     8c4:	000090b0 	.word	0x000090b0

000008c8 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
     8ce:	4603      	mov	r3, r0
     8d0:	6039      	str	r1, [r7, #0]
     8d2:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     8d8:	f107 030c 	add.w	r3, r7, #12
     8dc:	4619      	mov	r1, r3
     8de:	481a      	ldr	r0, [pc, #104]	; (948 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     8e0:	f008 f8a2 	bl	8a28 <_Unwind_Backtrace>
    if (final_address)
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d005      	beq.n	8f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	683a      	ldr	r2, [r7, #0]
     8ee:	4619      	mov	r1, r3
     8f0:	4816      	ldr	r0, [pc, #88]	; (94c <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     8f2:	f005 fca3 	bl	623c <printf>
    }

    if (show_make_command)
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d020      	beq.n	93e <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     8fc:	4814      	ldr	r0, [pc, #80]	; (950 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     8fe:	f005 fc9d 	bl	623c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     902:	4814      	ldr	r0, [pc, #80]	; (954 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     904:	f005 fc9a 	bl	623c <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     908:	2000      	movs	r0, #0
     90a:	f7ff ff63 	bl	7d4 <sjsu::build::Stringify(sjsu::build::Target)>
     90e:	4603      	mov	r3, r0
     910:	4619      	mov	r1, r3
     912:	4811      	ldr	r0, [pc, #68]	; (958 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     914:	f005 fc92 	bl	623c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     918:	f107 030c 	add.w	r3, r7, #12
     91c:	4619      	mov	r1, r3
     91e:	480f      	ldr	r0, [pc, #60]	; (95c <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     920:	f008 f882 	bl	8a28 <_Unwind_Backtrace>
      if (final_address)
     924:	683b      	ldr	r3, [r7, #0]
     926:	2b00      	cmp	r3, #0
     928:	d003      	beq.n	932 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     92a:	6839      	ldr	r1, [r7, #0]
     92c:	480c      	ldr	r0, [pc, #48]	; (960 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     92e:	f005 fc85 	bl	623c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     932:	480c      	ldr	r0, [pc, #48]	; (964 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     934:	f005 fc82 	bl	623c <printf>
      printf(
     938:	480b      	ldr	r0, [pc, #44]	; (968 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     93a:	f004 fb3b 	bl	4fb4 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     93e:	bf00      	nop
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	0000083d 	.word	0x0000083d
     94c:	000090b8 	.word	0x000090b8
     950:	000090c4 	.word	0x000090c4
     954:	000090fc 	.word	0x000090fc
     958:	00009108 	.word	0x00009108
     95c:	00000885 	.word	0x00000885
     960:	00009124 	.word	0x00009124
     964:	0000912c 	.word	0x0000912c
     968:	00009134 	.word	0x00009134

0000096c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     96c:	b490      	push	{r4, r7}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     976:	683b      	ldr	r3, [r7, #0]
     978:	e9d3 3400 	ldrd	r3, r4, [r3]
     97c:	687a      	ldr	r2, [r7, #4]
     97e:	e9c2 3400 	strd	r3, r4, [r2]
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	3708      	adds	r7, #8
     988:	46bd      	mov	sp, r7
     98a:	bc90      	pop	{r4, r7}
     98c:	4770      	bx	lr
     98e:	Address 0x000000000000098e is out of bounds.


00000990 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     990:	b580      	push	{r7, lr}
     992:	b082      	sub	sp, #8
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	4903      	ldr	r1, [pc, #12]	; (9ac <sjsu::DefaultUptime()+0x1c>)
     99e:	4618      	mov	r0, r3
     9a0:	f002 fa77 	bl	2e92 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	3708      	adds	r7, #8
     9a8:	46bd      	mov	sp, r7
     9aa:	bd80      	pop	{r7, pc}
     9ac:	10000118 	.word	0x10000118

000009b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     9b0:	b580      	push	{r7, lr}
     9b2:	b086      	sub	sp, #24
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     9b8:	6878      	ldr	r0, [r7, #4]
     9ba:	f000 f807 	bl	9cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     9be:	eef0 7a40 	vmov.f32	s15, s0
	}
     9c2:	eeb0 0a67 	vmov.f32	s0, s15
     9c6:	3718      	adds	r7, #24
     9c8:	46bd      	mov	sp, r7
     9ca:	bd80      	pop	{r7, pc}

000009cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	60f8      	str	r0, [r7, #12]
     9d4:	7239      	strb	r1, [r7, #8]
     9d6:	713a      	strb	r2, [r7, #4]
     9d8:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	edd3 7a00 	vldr	s15, [r3]
     9e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9f8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     9e4:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     9e8:	eeb0 0a67 	vmov.f32	s0, s15
     9ec:	3714      	adds	r7, #20
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	49742400 	.word	0x49742400

000009fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
     a04:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     a06:	2100      	movs	r1, #0
     a08:	6878      	ldr	r0, [r7, #4]
     a0a:	f000 f8e3 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     a0e:	f04f 000c 	mov.w	r0, #12
     a12:	f04f 0100 	mov.w	r1, #0
     a16:	f7ff fdd5 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     a1a:	4603      	mov	r3, r0
     a1c:	60bb      	str	r3, [r7, #8]
     a1e:	f107 0208 	add.w	r2, r7, #8
     a22:	463b      	mov	r3, r7
     a24:	4611      	mov	r1, r2
     a26:	4618      	mov	r0, r3
     a28:	f002 fa75 	bl	2f16 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     a2c:	4603      	mov	r3, r0
     a2e:	2b00      	cmp	r3, #0
     a30:	d00f      	beq.n	a52 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     a32:	4b16      	ldr	r3, [pc, #88]	; (a8c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     a34:	683a      	ldr	r2, [r7, #0]
     a36:	6819      	ldr	r1, [r3, #0]
     a38:	6878      	ldr	r0, [r7, #4]
     a3a:	f000 fadf 	bl	ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     a3e:	2101      	movs	r1, #1
     a40:	6878      	ldr	r0, [r7, #4]
     a42:	f000 f8eb 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     a46:	463b      	mov	r3, r7
     a48:	4619      	mov	r1, r3
     a4a:	4811      	ldr	r0, [pc, #68]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a4c:	f002 fa81 	bl	2f52 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     a50:	e007      	b.n	a62 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     a52:	2100      	movs	r1, #0
     a54:	6878      	ldr	r0, [r7, #4]
     a56:	f000 f8e1 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     a5a:	490e      	ldr	r1, [pc, #56]	; (a94 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     a5c:	480c      	ldr	r0, [pc, #48]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a5e:	f002 fa78 	bl	2f52 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     a62:	2101      	movs	r1, #1
     a64:	6878      	ldr	r0, [r7, #4]
     a66:	f000 fb2d 	bl	10c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     a6a:	23ff      	movs	r3, #255	; 0xff
     a6c:	733b      	strb	r3, [r7, #12]
     a6e:	f107 030c 	add.w	r3, r7, #12
     a72:	2201      	movs	r2, #1
     a74:	4619      	mov	r1, r3
     a76:	6878      	ldr	r0, [r7, #4]
     a78:	f000 f80e 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     a7c:	2100      	movs	r1, #0
     a7e:	6878      	ldr	r0, [r7, #4]
     a80:	f000 fb5e 	bl	1140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     a84:	bf00      	nop
     a86:	3710      	adds	r7, #16
     a88:	46bd      	mov	sp, r7
     a8a:	bd80      	pop	{r7, pc}
     a8c:	000098c8 	.word	0x000098c8
     a90:	10000004 	.word	0x10000004
     a94:	000098d0 	.word	0x000098d0

00000a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     a98:	b580      	push	{r7, lr}
     a9a:	b084      	sub	sp, #16
     a9c:	af00      	add	r7, sp, #0
     a9e:	60f8      	str	r0, [r7, #12]
     aa0:	60b9      	str	r1, [r7, #8]
     aa2:	4613      	mov	r3, r2
     aa4:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	2b04      	cmp	r3, #4
     aaa:	d90d      	bls.n	ac8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     aac:	23b2      	movs	r3, #178	; 0xb2
     aae:	4a0b      	ldr	r2, [pc, #44]	; (adc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     ab0:	490b      	ldr	r1, [pc, #44]	; (ae0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     ab2:	480c      	ldr	r0, [pc, #48]	; (ae4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     ab4:	f005 fbc2 	bl	623c <printf>
     ab8:	480b      	ldr	r0, [pc, #44]	; (ae8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     aba:	f004 fa7b 	bl	4fb4 <puts>
     abe:	2100      	movs	r1, #0
     ac0:	2001      	movs	r0, #1
     ac2:	f7ff ff01 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     ac6:	e7fe      	b.n	ac6 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     ac8:	4b08      	ldr	r3, [pc, #32]	; (aec <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	79fa      	ldrb	r2, [r7, #7]
     ace:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     ad2:	bf00      	nop
     ad4:	3710      	adds	r7, #16
     ad6:	46bd      	mov	sp, r7
     ad8:	bd80      	pop	{r7, pc}
     ada:	bf00      	nop
     adc:	00009bdc 	.word	0x00009bdc
     ae0:	000098ec 	.word	0x000098ec
     ae4:	00009188 	.word	0x00009188
     ae8:	00009228 	.word	0x00009228
     aec:	10000120 	.word	0x10000120

00000af0 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     af0:	b480      	push	{r7}
     af2:	b083      	sub	sp, #12
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     b02:	4618      	mov	r0, r3
     b04:	370c      	adds	r7, #12
     b06:	46bd      	mov	sp, r7
     b08:	f85d 7b04 	ldr.w	r7, [sp], #4
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	10000120 	.word	0x10000120

00000b14 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     b14:	b480      	push	{r7}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     b1e:	681b      	ldr	r3, [r3, #0]
  }
     b20:	4618      	mov	r0, r3
     b22:	370c      	adds	r7, #12
     b24:	46bd      	mov	sp, r7
     b26:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2a:	4770      	bx	lr
     b2c:	10000004 	.word	0x10000004

00000b30 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     b30:	b480      	push	{r7}
     b32:	b085      	sub	sp, #20
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     b3a:	4b0b      	ldr	r3, [pc, #44]	; (b68 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     b42:	683a      	ldr	r2, [r7, #0]
     b44:	7812      	ldrb	r2, [r2, #0]
     b46:	4611      	mov	r1, r2
     b48:	2201      	movs	r2, #1
     b4a:	408a      	lsls	r2, r1
     b4c:	4013      	ands	r3, r2
     b4e:	2b00      	cmp	r3, #0
     b50:	bf14      	ite	ne
     b52:	2301      	movne	r3, #1
     b54:	2300      	moveq	r3, #0
     b56:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     b58:	7bfb      	ldrb	r3, [r7, #15]
  }
     b5a:	4618      	mov	r0, r3
     b5c:	3714      	adds	r7, #20
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	10000120 	.word	0x10000120

00000b6c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     b6c:	b590      	push	{r4, r7, lr}
     b6e:	b083      	sub	sp, #12
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
     b74:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b78:	681b      	ldr	r3, [r3, #0]
     b7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	4619      	mov	r1, r3
    system_controller->PCONP =
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b86:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b88:	4610      	mov	r0, r2
     b8a:	f002 f9f5 	bl	2f78 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     b8e:	4603      	mov	r3, r0
    system_controller->PCONP =
     b90:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     b94:	bf00      	nop
     b96:	370c      	adds	r7, #12
     b98:	46bd      	mov	sp, r7
     b9a:	bd90      	pop	{r4, r7, pc}
     b9c:	10000120 	.word	0x10000120

00000ba0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
     ba8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	4619      	mov	r1, r3
    system_controller->PCONP =
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bba:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     bbc:	4610      	mov	r0, r2
     bbe:	f002 f9ed 	bl	2f9c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     bc2:	4603      	mov	r3, r0
    system_controller->PCONP =
     bc4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     bc8:	bf00      	nop
     bca:	370c      	adds	r7, #12
     bcc:	46bd      	mov	sp, r7
     bce:	bd90      	pop	{r4, r7, pc}
     bd0:	10000120 	.word	0x10000120

00000bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     bd4:	b590      	push	{r4, r7, lr}
     bd6:	b083      	sub	sp, #12
     bd8:	af00      	add	r7, sp, #0
     bda:	6078      	str	r0, [r7, #4]
     bdc:	460b      	mov	r3, r1
     bde:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     be0:	4b0c      	ldr	r3, [pc, #48]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     be8:	8879      	ldrh	r1, [r7, #2]
     bea:	4b0a      	ldr	r3, [pc, #40]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     bec:	681c      	ldr	r4, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	785b      	ldrb	r3, [r3, #1]
     bf4:	021b      	lsls	r3, r3, #8
     bf6:	431a      	orrs	r2, r3
     bf8:	2300      	movs	r3, #0
     bfa:	f362 030f 	bfi	r3, r2, #0, #16
     bfe:	461a      	mov	r2, r3
     c00:	f002 f9df 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c04:	4603      	mov	r3, r0
     c06:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	bd90      	pop	{r4, r7, pc}
     c12:	bf00      	nop
     c14:	10000120 	.word	0x10000120
     c18:	000098d4 	.word	0x000098d4

00000c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     c1c:	b590      	push	{r4, r7, lr}
     c1e:	b083      	sub	sp, #12
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
     c24:	460b      	mov	r3, r1
     c26:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     c30:	8879      	ldrh	r1, [r7, #2]
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c34:	681c      	ldr	r4, [r3, #0]
     c36:	4b0a      	ldr	r3, [pc, #40]	; (c60 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     c38:	781a      	ldrb	r2, [r3, #0]
     c3a:	785b      	ldrb	r3, [r3, #1]
     c3c:	021b      	lsls	r3, r3, #8
     c3e:	431a      	orrs	r2, r3
     c40:	2300      	movs	r3, #0
     c42:	f362 030f 	bfi	r3, r2, #0, #16
     c46:	461a      	mov	r2, r3
     c48:	f002 f9bb 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c4c:	4603      	mov	r3, r0
     c4e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     c52:	bf00      	nop
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bd90      	pop	{r4, r7, pc}
     c5a:	bf00      	nop
     c5c:	10000120 	.word	0x10000120
     c60:	000098e0 	.word	0x000098e0

00000c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     c64:	b590      	push	{r4, r7, lr}
     c66:	b083      	sub	sp, #12
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	460b      	mov	r3, r1
     c6e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     c78:	8879      	ldrh	r1, [r7, #2]
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c7c:	681c      	ldr	r4, [r3, #0]
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     c80:	781a      	ldrb	r2, [r3, #0]
     c82:	785b      	ldrb	r3, [r3, #1]
     c84:	021b      	lsls	r3, r3, #8
     c86:	431a      	orrs	r2, r3
     c88:	2300      	movs	r3, #0
     c8a:	f362 030f 	bfi	r3, r2, #0, #16
     c8e:	461a      	mov	r2, r3
     c90:	f002 f997 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c94:	4603      	mov	r3, r0
     c96:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	bd90      	pop	{r4, r7, pc}
     ca2:	bf00      	nop
     ca4:	10000120 	.word	0x10000120
     ca8:	000098e4 	.word	0x000098e4

00000cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     cac:	b590      	push	{r4, r7, lr}
     cae:	b083      	sub	sp, #12
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
     cb4:	460b      	mov	r3, r1
     cb6:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     cb8:	4b0c      	ldr	r3, [pc, #48]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     cc0:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cc4:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	785b      	ldrb	r3, [r3, #1]
     ccc:	021b      	lsls	r3, r3, #8
     cce:	431a      	orrs	r2, r3
     cd0:	2300      	movs	r3, #0
     cd2:	f362 030f 	bfi	r3, r2, #0, #16
     cd6:	461a      	mov	r2, r3
     cd8:	f002 f973 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     cdc:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     cde:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     ce2:	bf00      	nop
     ce4:	370c      	adds	r7, #12
     ce6:	46bd      	mov	sp, r7
     ce8:	bd90      	pop	{r4, r7, pc}
     cea:	bf00      	nop
     cec:	10000120 	.word	0x10000120
     cf0:	000098e8 	.word	0x000098e8

00000cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     cf4:	b580      	push	{r7, lr}
     cf6:	ed2d 8b02 	vpush	{d8}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
     d00:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	ed93 8a00 	vldr	s16, [r3]
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	4618      	mov	r0, r3
     d0c:	f7ff fc91 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     d10:	eef0 7a40 	vmov.f32	s15, s0
     d14:	eeb4 8ae7 	vcmpe.f32	s16, s15
     d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d1c:	bf4c      	ite	mi
     d1e:	2301      	movmi	r3, #1
     d20:	2300      	movpl	r3, #0
     d22:	b2db      	uxtb	r3, r3
		}
     d24:	4618      	mov	r0, r3
     d26:	3708      	adds	r7, #8
     d28:	46bd      	mov	sp, r7
     d2a:	ecbd 8b02 	vpop	{d8}
     d2e:	bd80      	pop	{r7, pc}

00000d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     d38:	6878      	ldr	r0, [r7, #4]
     d3a:	f000 f805 	bl	d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     d3e:	4603      	mov	r3, r0
		}
     d40:	4618      	mov	r0, r3
     d42:	3708      	adds	r7, #8
     d44:	46bd      	mov	sp, r7
     d46:	bd80      	pop	{r7, pc}

00000d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	4618      	mov	r0, r3
     d54:	f000 f80a 	bl	d6c <units::linear_scale<float>::operator()() const>
     d58:	eef0 7a40 	vmov.f32	s15, s0
     d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d60:	ee17 3a90 	vmov	r3, s15
		}
     d64:	4618      	mov	r0, r3
     d66:	3708      	adds	r7, #8
     d68:	46bd      	mov	sp, r7
     d6a:	bd80      	pop	{r7, pc}

00000d6c <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     d6c:	b480      	push	{r7}
     d6e:	b083      	sub	sp, #12
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	ee07 3a90 	vmov	s15, r3
     d7c:	eeb0 0a67 	vmov.f32	s0, s15
     d80:	370c      	adds	r7, #12
     d82:	46bd      	mov	sp, r7
     d84:	f85d 7b04 	ldr.w	r7, [sp], #4
     d88:	4770      	bx	lr

00000d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     d8a:	b580      	push	{r7, lr}
     d8c:	ed2d 8b02 	vpush	{d8}
     d90:	b084      	sub	sp, #16
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
     d96:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	4618      	mov	r0, r3
     d9c:	f7ff ffe6 	bl	d6c <units::linear_scale<float>::operator()() const>
     da0:	eeb0 8a40 	vmov.f32	s16, s0
     da4:	683b      	ldr	r3, [r7, #0]
     da6:	4618      	mov	r0, r3
     da8:	f7ff ffe0 	bl	d6c <units::linear_scale<float>::operator()() const>
     dac:	eef0 7a40 	vmov.f32	s15, s0
     db0:	edc7 7a03 	vstr	s15, [r7, #12]
     db4:	f107 030c 	add.w	r3, r7, #12
     db8:	4618      	mov	r0, r3
     dba:	f7ff fc3a 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     dbe:	eeb0 7a40 	vmov.f32	s14, s0
     dc2:	eec8 7a07 	vdiv.f32	s15, s16, s14
     dc6:	f107 0308 	add.w	r3, r7, #8
     dca:	eeb0 0a67 	vmov.f32	s0, s15
     dce:	4618      	mov	r0, r3
     dd0:	f000 f807 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     dd4:	68bb      	ldr	r3, [r7, #8]
	}
     dd6:	4618      	mov	r0, r3
     dd8:	3710      	adds	r7, #16
     dda:	46bd      	mov	sp, r7
     ddc:	ecbd 8b02 	vpop	{d8}
     de0:	bd80      	pop	{r7, pc}

00000de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     de2:	b580      	push	{r7, lr}
     de4:	b082      	sub	sp, #8
     de6:	af00      	add	r7, sp, #0
     de8:	6078      	str	r0, [r7, #4]
     dea:	ed87 0a00 	vstr	s0, [r7]
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	463a      	mov	r2, r7
     df2:	4611      	mov	r1, r2
     df4:	4618      	mov	r0, r3
     df6:	f7ff fc0c 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	4618      	mov	r0, r3
     dfe:	3708      	adds	r7, #8
     e00:	46bd      	mov	sp, r7
     e02:	bd80      	pop	{r7, pc}

00000e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	4618      	mov	r0, r3
     e12:	f7ff ffab 	bl	d6c <units::linear_scale<float>::operator()() const>
     e16:	eeb0 7a40 	vmov.f32	s14, s0
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	ee07 3a90 	vmov	s15, r3
     e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e24:	ee77 7a27 	vadd.f32	s15, s14, s15
     e28:	f107 030c 	add.w	r3, r7, #12
     e2c:	eeb0 0a67 	vmov.f32	s0, s15
     e30:	4618      	mov	r0, r3
     e32:	f7ff ffd6 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     e36:	68fb      	ldr	r3, [r7, #12]
	}
     e38:	4618      	mov	r0, r3
     e3a:	3710      	adds	r7, #16
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}

00000e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	4618      	mov	r0, r3
     e4c:	f7ff ff8e 	bl	d6c <units::linear_scale<float>::operator()() const>
     e50:	eef0 7a40 	vmov.f32	s15, s0
     e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e58:	ee17 3a90 	vmov	r3, s15
     e5c:	b29b      	uxth	r3, r3
		}
     e5e:	4618      	mov	r0, r3
     e60:	3708      	adds	r7, #8
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	Address 0x0000000000000e66 is out of bounds.


00000e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     e68:	b590      	push	{r4, r7, lr}
     e6a:	b08d      	sub	sp, #52	; 0x34
     e6c:	af00      	add	r7, sp, #0
     e6e:	60f8      	str	r0, [r7, #12]
     e70:	60b9      	str	r1, [r7, #8]
     e72:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     e74:	f44f 70c0 	mov.w	r0, #384	; 0x180
     e78:	f04f 0100 	mov.w	r1, #0
     e7c:	f7ff fba2 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     e80:	4603      	mov	r3, r0
     e82:	613b      	str	r3, [r7, #16]
     e84:	f107 0210 	add.w	r2, r7, #16
     e88:	1d3b      	adds	r3, r7, #4
     e8a:	4611      	mov	r1, r2
     e8c:	4618      	mov	r0, r3
     e8e:	f7ff ff31 	bl	cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     e92:	4603      	mov	r3, r0
     e94:	f083 0301 	eor.w	r3, r3, #1
     e98:	b2db      	uxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	d114      	bne.n	ec8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     e9e:	f04f 000c 	mov.w	r0, #12
     ea2:	f04f 0100 	mov.w	r1, #0
     ea6:	f7ff fb8d 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     eaa:	4603      	mov	r3, r0
     eac:	617b      	str	r3, [r7, #20]
     eae:	f107 0214 	add.w	r2, r7, #20
     eb2:	1d3b      	adds	r3, r7, #4
     eb4:	4611      	mov	r1, r2
     eb6:	4618      	mov	r0, r3
     eb8:	f002 f82d 	bl	2f16 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     ebc:	4603      	mov	r3, r0
     ebe:	f083 0301 	eor.w	r3, r3, #1
     ec2:	b2db      	uxtb	r3, r3
     ec4:	2b00      	cmp	r3, #0
     ec6:	d001      	beq.n	ecc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     ec8:	2301      	movs	r3, #1
     eca:	e000      	b.n	ece <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     ecc:	2300      	movs	r3, #0
     ece:	2b00      	cmp	r3, #0
     ed0:	d00d      	beq.n	eee <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     ed2:	23f6      	movs	r3, #246	; 0xf6
     ed4:	4a43      	ldr	r2, [pc, #268]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     ed6:	4944      	ldr	r1, [pc, #272]	; (fe8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     ed8:	4844      	ldr	r0, [pc, #272]	; (fec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     eda:	f005 f9af 	bl	623c <printf>
     ede:	4844      	ldr	r0, [pc, #272]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     ee0:	f004 f868 	bl	4fb4 <puts>
     ee4:	2100      	movs	r1, #0
     ee6:	2001      	movs	r0, #1
     ee8:	f7ff fcee 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     eec:	e7fe      	b.n	eec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     eee:	2301      	movs	r3, #1
     ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     ef4:	1d3b      	adds	r3, r7, #4
     ef6:	4618      	mov	r0, r3
     ef8:	f7ff ff1a 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     efc:	4604      	mov	r4, r0
     efe:	f107 0308 	add.w	r3, r7, #8
     f02:	4618      	mov	r0, r3
     f04:	f7ff ff14 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     f08:	4603      	mov	r3, r0
     f0a:	fbb4 f2f3 	udiv	r2, r4, r3
     f0e:	fb03 f302 	mul.w	r3, r3, r2
     f12:	1ae3      	subs	r3, r4, r3
     f14:	2b00      	cmp	r3, #0
     f16:	bf14      	ite	ne
     f18:	2301      	movne	r3, #1
     f1a:	2300      	moveq	r3, #0
     f1c:	b2db      	uxtb	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	d017      	beq.n	f52 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     f22:	f107 0208 	add.w	r2, r7, #8
     f26:	1d3b      	adds	r3, r7, #4
     f28:	4611      	mov	r1, r2
     f2a:	4618      	mov	r0, r3
     f2c:	f7ff ff2d 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f30:	4603      	mov	r3, r0
     f32:	61fb      	str	r3, [r7, #28]
     f34:	f107 031c 	add.w	r3, r7, #28
     f38:	2101      	movs	r1, #1
     f3a:	4618      	mov	r0, r3
     f3c:	f7ff ff62 	bl	e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     f40:	4603      	mov	r3, r0
     f42:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     f44:	f107 0318 	add.w	r3, r7, #24
     f48:	4618      	mov	r0, r3
     f4a:	f002 f84c 	bl	2fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f4e:	62b8      	str	r0, [r7, #40]	; 0x28
     f50:	e00e      	b.n	f70 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     f52:	f107 0208 	add.w	r2, r7, #8
     f56:	1d3b      	adds	r3, r7, #4
     f58:	4611      	mov	r1, r2
     f5a:	4618      	mov	r0, r3
     f5c:	f7ff ff15 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f60:	4603      	mov	r3, r0
     f62:	623b      	str	r3, [r7, #32]
      multiplier_value =
     f64:	f107 0320 	add.w	r3, r7, #32
     f68:	4618      	mov	r0, r3
     f6a:	f002 f83c 	bl	2fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f6e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     f70:	2301      	movs	r3, #1
     f72:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f78:	2b00      	cmp	r3, #0
     f7a:	d02d      	beq.n	fd8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     f7c:	f107 0308 	add.w	r3, r7, #8
     f80:	4618      	mov	r0, r3
     f82:	f7ff ff5d 	bl	e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     f86:	4603      	mov	r3, r0
     f88:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f8c:	b29b      	uxth	r3, r3
     f8e:	fb12 f303 	smulbb	r3, r2, r3
     f92:	b29b      	uxth	r3, r3
     f94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     f96:	fb12 f303 	smulbb	r3, r2, r3
     f9a:	b29b      	uxth	r3, r3
     f9c:	005b      	lsls	r3, r3, #1
     f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     fa2:	2b9b      	cmp	r3, #155	; 0x9b
     fa4:	d903      	bls.n	fae <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     fa6:	2300      	movs	r3, #0
     fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     fac:	e7e2      	b.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb0:	005b      	lsls	r3, r3, #1
     fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb6:	2b07      	cmp	r3, #7
     fb8:	d9dc      	bls.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     fba:	f44f 7389 	mov.w	r3, #274	; 0x112
     fbe:	4a09      	ldr	r2, [pc, #36]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     fc0:	490c      	ldr	r1, [pc, #48]	; (ff4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     fc2:	480d      	ldr	r0, [pc, #52]	; (ff8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     fc4:	f005 f93a 	bl	623c <printf>
     fc8:	4809      	ldr	r0, [pc, #36]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     fca:	f003 fff3 	bl	4fb4 <puts>
     fce:	2100      	movs	r1, #0
     fd0:	2001      	movs	r0, #1
     fd2:	f7ff fc79 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     fd6:	e7fe      	b.n	fd6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     fda:	4618      	mov	r0, r3
     fdc:	3734      	adds	r7, #52	; 0x34
     fde:	46bd      	mov	sp, r7
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	bf00      	nop
     fe4:	00009c60 	.word	0x00009c60
     fe8:	00009904 	.word	0x00009904
     fec:	00009240 	.word	0x00009240
     ff0:	00009228 	.word	0x00009228
     ff4:	0000991c 	.word	0x0000991c
     ff8:	00009330 	.word	0x00009330

00000ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     ffc:	b580      	push	{r7, lr}
     ffe:	b086      	sub	sp, #24
    1000:	af00      	add	r7, sp, #0
    1002:	60f8      	str	r0, [r7, #12]
    1004:	60b9      	str	r1, [r7, #8]
    1006:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    1008:	2301      	movs	r3, #1
    100a:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    100c:	687a      	ldr	r2, [r7, #4]
    100e:	68b9      	ldr	r1, [r7, #8]
    1010:	68f8      	ldr	r0, [r7, #12]
    1012:	f7ff ff29 	bl	e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    1016:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1018:	2100      	movs	r1, #0
    101a:	68f8      	ldr	r0, [r7, #12]
    101c:	f7ff fdda 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1020:	2100      	movs	r1, #0
    1022:	68f8      	ldr	r0, [r7, #12]
    1024:	f7ff fdfa 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1028:	2100      	movs	r1, #0
    102a:	68f8      	ldr	r0, [r7, #12]
    102c:	f7ff fe1a 	bl	c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1030:	2100      	movs	r1, #0
    1032:	68f8      	ldr	r0, [r7, #12]
    1034:	f7ff fe3a 	bl	cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1038:	4b21      	ldr	r3, [pc, #132]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1040:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1048:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    104a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    104c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    104e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1052:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    105a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    105e:	8afb      	ldrh	r3, [r7, #22]
    1060:	015b      	lsls	r3, r3, #5
    1062:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1064:	4b16      	ldr	r3, [pc, #88]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1066:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1068:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    106e:	4b14      	ldr	r3, [pc, #80]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1076:	4b12      	ldr	r3, [pc, #72]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	f042 0201 	orr.w	r2, r2, #1
    107e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    1082:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	22aa      	movs	r2, #170	; 0xaa
    1088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	2255      	movs	r2, #85	; 0x55
    1092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    109e:	210a      	movs	r1, #10
    10a0:	4618      	mov	r0, r3
    10a2:	f001 ffbb 	bl	301c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    10a6:	4603      	mov	r3, r0
    10a8:	f083 0301 	eor.w	r3, r3, #1
    10ac:	b2db      	uxtb	r3, r3
    10ae:	2b00      	cmp	r3, #0
    10b0:	d001      	beq.n	10b6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    10b2:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    10b4:	e7ef      	b.n	1096 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    10b6:	bf00      	nop
    10b8:	3718      	adds	r7, #24
    10ba:	46bd      	mov	sp, r7
    10bc:	bd80      	pop	{r7, pc}
    10be:	bf00      	nop
    10c0:	10000120 	.word	0x10000120

000010c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    10c4:	b590      	push	{r4, r7, lr}
    10c6:	b083      	sub	sp, #12
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
    10cc:	460b      	mov	r3, r1
    10ce:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    10d0:	78fb      	ldrb	r3, [r7, #3]
    10d2:	2b1f      	cmp	r3, #31
    10d4:	d90e      	bls.n	10f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    10d6:	f44f 73a9 	mov.w	r3, #338	; 0x152
    10da:	4a13      	ldr	r2, [pc, #76]	; (1128 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    10dc:	4913      	ldr	r1, [pc, #76]	; (112c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    10de:	4814      	ldr	r0, [pc, #80]	; (1130 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    10e0:	f005 f8ac 	bl	623c <printf>
    10e4:	4813      	ldr	r0, [pc, #76]	; (1134 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    10e6:	f003 ff65 	bl	4fb4 <puts>
    10ea:	2100      	movs	r1, #0
    10ec:	2001      	movs	r0, #1
    10ee:	f7ff fbeb 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    10f2:	e7fe      	b.n	10f2 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    10f4:	4b10      	ldr	r3, [pc, #64]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10f6:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    10f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10fe:	681c      	ldr	r4, [r3, #0]
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    1102:	78f9      	ldrb	r1, [r7, #3]
    1104:	781a      	ldrb	r2, [r3, #0]
    1106:	785b      	ldrb	r3, [r3, #1]
    1108:	021b      	lsls	r3, r3, #8
    110a:	431a      	orrs	r2, r3
    110c:	2300      	movs	r3, #0
    110e:	f362 030f 	bfi	r3, r2, #0, #16
    1112:	461a      	mov	r2, r3
    1114:	f001 fe8c 	bl	2e30 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1118:	4603      	mov	r3, r0
    111a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    111e:	bf00      	nop
    1120:	370c      	adds	r7, #12
    1122:	46bd      	mov	sp, r7
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	bf00      	nop
    1128:	00009cdc 	.word	0x00009cdc
    112c:	00009934 	.word	0x00009934
    1130:	000093d8 	.word	0x000093d8
    1134:	00009228 	.word	0x00009228
    1138:	10000120 	.word	0x10000120
    113c:	000098dc 	.word	0x000098dc

00001140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1140:	b590      	push	{r4, r7, lr}
    1142:	b083      	sub	sp, #12
    1144:	af00      	add	r7, sp, #0
    1146:	6078      	str	r0, [r7, #4]
    1148:	460b      	mov	r3, r1
    114a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    114c:	4b0c      	ldr	r3, [pc, #48]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1154:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1158:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	785b      	ldrb	r3, [r3, #1]
    1160:	021b      	lsls	r3, r3, #8
    1162:	431a      	orrs	r2, r3
    1164:	2300      	movs	r3, #0
    1166:	f362 030f 	bfi	r3, r2, #0, #16
    116a:	461a      	mov	r2, r3
    116c:	f001 ff29 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1170:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    1172:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    1176:	bf00      	nop
    1178:	370c      	adds	r7, #12
    117a:	46bd      	mov	sp, r7
    117c:	bd90      	pop	{r4, r7, pc}
    117e:	bf00      	nop
    1180:	10000120 	.word	0x10000120
    1184:	000098d8 	.word	0x000098d8

00001188 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    1188:	b480      	push	{r7}
    118a:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    118c:	4b02      	ldr	r3, [pc, #8]	; (1198 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    118e:	4618      	mov	r0, r3
    1190:	46bd      	mov	sp, r7
    1192:	f85d 7b04 	ldr.w	r7, [sp], #4
    1196:	4770      	bx	lr
    1198:	10000008 	.word	0x10000008

0000119c <sjsu::Uart::Write(unsigned char) const>:
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  /// @param byte - Write a single byte to the UART port.
  void Write(uint8_t byte) const
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	6078      	str	r0, [r7, #4]
    11a4:	460b      	mov	r3, r1
    11a6:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	3308      	adds	r3, #8
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	1cf9      	adds	r1, r7, #3
    11b2:	2201      	movs	r2, #1
    11b4:	6878      	ldr	r0, [r7, #4]
    11b6:	4798      	blx	r3
  }
    11b8:	bf00      	nop
    11ba:	3708      	adds	r7, #8
    11bc:	46bd      	mov	sp, r7
    11be:	bd80      	pop	{r7, pc}

000011c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  }
  /// Wait to receive just 1 byte
  ///
  /// @param timeout - The maximum amount of time to wait for a byte to be
  ///        transmitted.
  uint8_t Read(std::chrono::microseconds timeout =
    11c0:	b5b0      	push	{r4, r5, r7, lr}
    11c2:	b088      	sub	sp, #32
    11c4:	af02      	add	r7, sp, #8
    11c6:	60f8      	str	r0, [r7, #12]
    11c8:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	330c      	adds	r3, #12
    11d2:	681d      	ldr	r5, [r3, #0]
    11d4:	f107 0117 	add.w	r1, r7, #23
    11d8:	e9d7 3400 	ldrd	r3, r4, [r7]
    11dc:	e9cd 3400 	strd	r3, r4, [sp]
    11e0:	2201      	movs	r2, #1
    11e2:	68f8      	ldr	r0, [r7, #12]
    11e4:	47a8      	blx	r5
    11e6:	4603      	mov	r3, r0
    11e8:	2b01      	cmp	r3, #1
    11ea:	bf0c      	ite	eq
    11ec:	2301      	moveq	r3, #1
    11ee:	2300      	movne	r3, #0
    11f0:	b2db      	uxtb	r3, r3
    11f2:	2b00      	cmp	r3, #0
    11f4:	d001      	beq.n	11fa <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    11f6:	23ff      	movs	r3, #255	; 0xff
    11f8:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    11fa:	7dfb      	ldrb	r3, [r7, #23]
  }
    11fc:	4618      	mov	r0, r3
    11fe:	3718      	adds	r7, #24
    1200:	46bd      	mov	sp, r7
    1202:	bdb0      	pop	{r4, r5, r7, pc}

00001204 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    1204:	b480      	push	{r7}
    1206:	b089      	sub	sp, #36	; 0x24
    1208:	af00      	add	r7, sp, #0
    120a:	6078      	str	r0, [r7, #4]
    120c:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	2200      	movs	r2, #0
    1214:	601a      	str	r2, [r3, #0]
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	2200      	movs	r2, #0
    121a:	605a      	str	r2, [r3, #4]
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	2201      	movs	r2, #1
    1220:	609a      	str	r2, [r3, #8]
  bool finished = false;
    1222:	2300      	movs	r3, #0
    1224:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    1226:	2300      	movs	r3, #0
    1228:	61bb      	str	r3, [r7, #24]
    122a:	69bb      	ldr	r3, [r7, #24]
    122c:	2b0e      	cmp	r3, #14
    122e:	dc4f      	bgt.n	12d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    1230:	7ffb      	ldrb	r3, [r7, #31]
    1232:	2b00      	cmp	r3, #0
    1234:	d14c      	bne.n	12d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1236:	69bb      	ldr	r3, [r7, #24]
    1238:	3301      	adds	r3, #1
    123a:	617b      	str	r3, [r7, #20]
    123c:	697b      	ldr	r3, [r7, #20]
    123e:	2b0e      	cmp	r3, #14
    1240:	dc42      	bgt.n	12c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    1242:	7ffb      	ldrb	r3, [r7, #31]
    1244:	2b00      	cmp	r3, #0
    1246:	d13f      	bne.n	12c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    1248:	69bb      	ldr	r3, [r7, #24]
    124a:	ee07 3a90 	vmov	s15, r3
    124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1252:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    1256:	697b      	ldr	r3, [r7, #20]
    1258:	ee07 3a90 	vmov	s15, r3
    125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1260:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    1264:	edd7 6a04 	vldr	s13, [r7, #16]
    1268:	ed97 7a03 	vldr	s14, [r7, #12]
    126c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1274:	ee77 7a87 	vadd.f32	s15, s15, s14
    1278:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    127c:	edd7 7a02 	vldr	s15, [r7, #8]
    1280:	ed9f 7a17 	vldr	s14, [pc, #92]	; 12e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1284:	ee77 7a87 	vadd.f32	s15, s15, s14
    1288:	ed97 7a00 	vldr	s14, [r7]
    128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1294:	d814      	bhi.n	12c0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    1296:	edd7 7a02 	vldr	s15, [r7, #8]
    129a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 12e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    129e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    12a2:	ed97 7a00 	vldr	s14, [r7]
    12a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12ae:	db07      	blt.n	12c0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    12b0:	69ba      	ldr	r2, [r7, #24]
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    12b6:	697a      	ldr	r2, [r7, #20]
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	609a      	str	r2, [r3, #8]
        finished          = true;
    12bc:	2301      	movs	r3, #1
    12be:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    12c0:	697b      	ldr	r3, [r7, #20]
    12c2:	3301      	adds	r3, #1
    12c4:	617b      	str	r3, [r7, #20]
    12c6:	e7b9      	b.n	123c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	3301      	adds	r3, #1
    12cc:	61bb      	str	r3, [r7, #24]
    12ce:	e7ac      	b.n	122a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    12d0:	bf00      	nop
}
    12d2:	6878      	ldr	r0, [r7, #4]
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop
    12e0:	3d4ccccd 	.word	0x3d4ccccd

000012e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    12e4:	b480      	push	{r7}
    12e6:	b087      	sub	sp, #28
    12e8:	af00      	add	r7, sp, #0
    12ea:	ed87 0a03 	vstr	s0, [r7, #12]
    12ee:	edc7 0a02 	vstr	s1, [r7, #8]
    12f2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	ee07 3a90 	vmov	s15, r3
    12fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12fe:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    1302:	edd7 7a03 	vldr	s15, [r7, #12]
    1306:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    130a:	ee27 7a87 	vmul.f32	s14, s15, s14
    130e:	edd7 7a02 	vldr	s15, [r7, #8]
    1312:	ee67 7a27 	vmul.f32	s15, s14, s15
    1316:	ed97 7a05 	vldr	s14, [r7, #20]
    131a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    131e:	eef0 7a66 	vmov.f32	s15, s13
}
    1322:	eeb0 0a67 	vmov.f32	s0, s15
    1326:	371c      	adds	r7, #28
    1328:	46bd      	mov	sp, r7
    132a:	f85d 7b04 	ldr.w	r7, [sp], #4
    132e:	4770      	bx	lr

00001330 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    1330:	b480      	push	{r7}
    1332:	b087      	sub	sp, #28
    1334:	af00      	add	r7, sp, #0
    1336:	ed87 0a03 	vstr	s0, [r7, #12]
    133a:	edc7 0a02 	vstr	s1, [r7, #8]
    133e:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	ee07 3a90 	vmov	s15, r3
    1346:	eef8 7a67 	vcvt.f32.u32	s15, s15
    134a:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    134e:	edd7 7a03 	vldr	s15, [r7, #12]
    1352:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1356:	ee27 7a87 	vmul.f32	s14, s15, s14
    135a:	edd7 7a02 	vldr	s15, [r7, #8]
    135e:	ee67 7a27 	vmul.f32	s15, s14, s15
    1362:	ed97 7a05 	vldr	s14, [r7, #20]
    1366:	eec7 6a27 	vdiv.f32	s13, s14, s15
    136a:	eef0 7a66 	vmov.f32	s15, s13
}
    136e:	eeb0 0a67 	vmov.f32	s0, s15
    1372:	371c      	adds	r7, #28
    1374:	46bd      	mov	sp, r7
    1376:	f85d 7b04 	ldr.w	r7, [sp], #4
    137a:	4770      	bx	lr

0000137c <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    137c:	b480      	push	{r7}
    137e:	b083      	sub	sp, #12
    1380:	af00      	add	r7, sp, #0
    1382:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    1386:	edd7 7a01 	vldr	s15, [r7, #4]
    138a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    138e:	ee77 7a87 	vadd.f32	s15, s15, s14
    1392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    139a:	eeb0 0a67 	vmov.f32	s0, s15
    139e:	370c      	adds	r7, #12
    13a0:	46bd      	mov	sp, r7
    13a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a6:	4770      	bx	lr

000013a8 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	b086      	sub	sp, #24
    13ac:	af00      	add	r7, sp, #0
    13ae:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    13b2:	2300      	movs	r3, #0
    13b4:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    13b6:	ed97 0a01 	vldr	s0, [r7, #4]
    13ba:	f7ff ffdf 	bl	137c <sjsu::lpc40xx::uart::RoundFloat(float)>
    13be:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    13c2:	ed97 7a01 	vldr	s14, [r7, #4]
    13c6:	edd7 7a04 	vldr	s15, [r7, #16]
    13ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    13ce:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    13d2:	edd7 7a03 	vldr	s15, [r7, #12]
    13d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1404 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    13da:	eef4 7ac7 	vcmpe.f32	s15, s14
    13de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13e2:	db0a      	blt.n	13fa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    13e4:	edd7 7a03 	vldr	s15, [r7, #12]
    13e8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1408 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    13ec:	eef4 7ac7 	vcmpe.f32	s15, s14
    13f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13f4:	d801      	bhi.n	13fa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    13f6:	2301      	movs	r3, #1
    13f8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    13fa:	7dfb      	ldrb	r3, [r7, #23]
}
    13fc:	4618      	mov	r0, r3
    13fe:	3718      	adds	r7, #24
    1400:	46bd      	mov	sp, r7
    1402:	bd80      	pop	{r7, pc}
    1404:	bd4ccccd 	.word	0xbd4ccccd
    1408:	3d4ccccd 	.word	0x3d4ccccd

0000140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    1414:	6878      	ldr	r0, [r7, #4]
    1416:	f000 f805 	bl	1424 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    141a:	4603      	mov	r3, r0
	}
    141c:	4618      	mov	r0, r3
    141e:	3708      	adds	r7, #8
    1420:	46bd      	mov	sp, r7
    1422:	bd80      	pop	{r7, pc}

00001424 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	4618      	mov	r0, r3
    1430:	f7ff fc9c 	bl	d6c <units::linear_scale<float>::operator()() const>
    1434:	eef0 7a40 	vmov.f32	s15, s0
    1438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    143c:	ee17 3a90 	vmov	r3, s15
		}
    1440:	4618      	mov	r0, r3
    1442:	3708      	adds	r7, #8
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}

00001448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    1448:	b590      	push	{r4, r7, lr}
    144a:	b091      	sub	sp, #68	; 0x44
    144c:	af00      	add	r7, sp, #0
    144e:	61f8      	str	r0, [r7, #28]
    1450:	61b9      	str	r1, [r7, #24]
    1452:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    1454:	f107 0314 	add.w	r3, r7, #20
    1458:	4618      	mov	r0, r3
    145a:	f7ff ffd7 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    145e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    1460:	2300      	movs	r3, #0
    1462:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    1464:	69fb      	ldr	r3, [r7, #28]
    1466:	2200      	movs	r2, #0
    1468:	601a      	str	r2, [r3, #0]
    146a:	69fb      	ldr	r3, [r7, #28]
    146c:	2200      	movs	r2, #0
    146e:	605a      	str	r2, [r3, #4]
    1470:	69fb      	ldr	r3, [r7, #28]
    1472:	2201      	movs	r2, #1
    1474:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    1476:	69bb      	ldr	r3, [r7, #24]
    1478:	ee07 3a90 	vmov	s15, r3
    147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1480:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    1484:	f04f 0300 	mov.w	r3, #0
    1488:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    148a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    148e:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1490:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    1494:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    1496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    149e:	2b04      	cmp	r3, #4
    14a0:	f000 80be 	beq.w	1620 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    14a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14a6:	2b03      	cmp	r3, #3
    14a8:	f200 80b8 	bhi.w	161c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    14ac:	a201      	add	r2, pc, #4	; (adr r2, 14b4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    14ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14b2:	bf00      	nop
    14b4:	000014c5 	.word	0x000014c5
    14b8:	0000151f 	.word	0x0000151f
    14bc:	0000157f 	.word	0x0000157f
    14c0:	000015ef 	.word	0x000015ef
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    14c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    14ca:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    14ce:	f7ff ff09 	bl	12e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    14d2:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    14d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    14da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    14de:	eef4 7ac7 	vcmpe.f32	s15, s14
    14e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14e6:	d505      	bpl.n	14f4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    14e8:	69fb      	ldr	r3, [r7, #28]
    14ea:	2200      	movs	r2, #0
    14ec:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    14ee:	2304      	movs	r3, #4
    14f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    14f2:	e094      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    14f4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    14f8:	f7ff ff56 	bl	13a8 <sjsu::lpc40xx::uart::IsDecmial(float)>
    14fc:	4603      	mov	r3, r0
    14fe:	2b00      	cmp	r3, #0
    1500:	d00a      	beq.n	1518 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    1502:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    150a:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    150e:	69fb      	ldr	r3, [r7, #28]
    1510:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    1512:	2304      	movs	r3, #4
    1514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1516:	e082      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    1518:	2301      	movs	r3, #1
    151a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    151c:	e07f      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    151e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1520:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    1524:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1528:	f7ff fedc 	bl	12e4 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    152c:	eef0 7a40 	vmov.f32	s15, s0
    1530:	eeb0 0a67 	vmov.f32	s0, s15
    1534:	f7ff ff22 	bl	137c <sjsu::lpc40xx::uart::RoundFloat(float)>
    1538:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    153c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    153e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    1542:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1546:	f7ff fef3 	bl	1330 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    154a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    154e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1552:	ed9f 7a36 	vldr	s14, [pc, #216]	; 162c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    1556:	eef4 7ac7 	vcmpe.f32	s15, s14
    155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    155e:	db0b      	blt.n	1578 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    1560:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1564:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1630 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    1568:	eef4 7ac7 	vcmpe.f32	s15, s14
    156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1570:	d802      	bhi.n	1578 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    1572:	2303      	movs	r3, #3
    1574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    1576:	e052      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    1578:	2302      	movs	r3, #2
    157a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    157c:	e04f      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    157e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1586:	ee77 7a87 	vadd.f32	s15, s15, s14
    158a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    158e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1592:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1596:	eef4 7ac7 	vcmpe.f32	s15, s14
    159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    159e:	dd02      	ble.n	15a6 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    15a0:	2304      	movs	r3, #4
    15a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    15a4:	e03b      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    15a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    15aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    15ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    15b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15b6:	dd0f      	ble.n	15d8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    15b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    15c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    15c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    15d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    15d8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    15dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    15e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    15e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    15e8:	2301      	movs	r3, #1
    15ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15ec:	e017      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    15ee:	69fc      	ldr	r4, [r7, #28]
    15f0:	463b      	mov	r3, r7
    15f2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    15f6:	4618      	mov	r0, r3
    15f8:	f7ff fe04 	bl	1204 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    15fc:	463b      	mov	r3, r7
    15fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    1606:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    160e:	ee17 2a90 	vmov	r2, s15
    1612:	69fb      	ldr	r3, [r7, #28]
    1614:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    1616:	2304      	movs	r3, #4
    1618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    161a:	e000      	b.n	161e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    161c:	bf00      	nop
  while (state != States::kDone)
    161e:	e73d      	b.n	149c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    1620:	bf00      	nop
}
    1622:	69f8      	ldr	r0, [r7, #28]
    1624:	3744      	adds	r7, #68	; 0x44
    1626:	46bd      	mov	sp, r7
    1628:	bd90      	pop	{r4, r7, pc}
    162a:	bf00      	nop
    162c:	3f8ccccd 	.word	0x3f8ccccd
    1630:	3ff33333 	.word	0x3ff33333

00001634 <sjsu::Uart::Uart()>:
class Uart
    1634:	b480      	push	{r7}
    1636:	b083      	sub	sp, #12
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	4a04      	ldr	r2, [pc, #16]	; (1650 <sjsu::Uart::Uart()+0x1c>)
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	601a      	str	r2, [r3, #0]
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	4618      	mov	r0, r3
    1646:	370c      	adds	r7, #12
    1648:	46bd      	mov	sp, r7
    164a:	f85d 7b04 	ldr.w	r7, [sp], #4
    164e:	4770      	bx	lr
    1650:	00009b74 	.word	0x00009b74

00001654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    1654:	b580      	push	{r7, lr}
    1656:	b084      	sub	sp, #16
    1658:	af00      	add	r7, sp, #0
    165a:	60f8      	str	r0, [r7, #12]
    165c:	60b9      	str	r1, [r7, #8]
    165e:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	4618      	mov	r0, r3
    1664:	f7ff ffe6 	bl	1634 <sjsu::Uart::Uart()>
    1668:	4a06      	ldr	r2, [pc, #24]	; (1684 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	601a      	str	r2, [r3, #0]
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	68ba      	ldr	r2, [r7, #8]
    1672:	605a      	str	r2, [r3, #4]
    1674:	68fb      	ldr	r3, [r7, #12]
    1676:	687a      	ldr	r2, [r7, #4]
    1678:	609a      	str	r2, [r3, #8]
  {
  }
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	4618      	mov	r0, r3
    167e:	3710      	adds	r7, #16
    1680:	46bd      	mov	sp, r7
    1682:	bd80      	pop	{r7, pc}
    1684:	00009b58 	.word	0x00009b58

00001688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1688:	b580      	push	{r7, lr}
    168a:	b084      	sub	sp, #16
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    1692:	2307      	movs	r3, #7
    1694:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	6898      	ldr	r0, [r3, #8]
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	689b      	ldr	r3, [r3, #8]
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	3314      	adds	r3, #20
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	6852      	ldr	r2, [r2, #4]
    16a8:	3204      	adds	r2, #4
    16aa:	4611      	mov	r1, r2
    16ac:	4798      	blx	r3

    SetBaudRate(baud_rate);
    16ae:	6839      	ldr	r1, [r7, #0]
    16b0:	6878      	ldr	r0, [r7, #4]
    16b2:	f000 f849 	bl	1748 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	685b      	ldr	r3, [r3, #4]
    16ba:	68d8      	ldr	r0, [r3, #12]
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	685b      	ldr	r3, [r3, #4]
    16c0:	68db      	ldr	r3, [r3, #12]
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	687a      	ldr	r2, [r7, #4]
    16c8:	6852      	ldr	r2, [r2, #4]
    16ca:	7c12      	ldrb	r2, [r2, #16]
    16cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    16d0:	b2d2      	uxtb	r2, r2
    16d2:	4611      	mov	r1, r2
    16d4:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	685b      	ldr	r3, [r3, #4]
    16da:	6898      	ldr	r0, [r3, #8]
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	689b      	ldr	r3, [r3, #8]
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	687a      	ldr	r2, [r7, #4]
    16e8:	6852      	ldr	r2, [r2, #4]
    16ea:	7c12      	ldrb	r2, [r2, #16]
    16ec:	f3c2 0202 	ubfx	r2, r2, #0, #3
    16f0:	b2d2      	uxtb	r2, r2
    16f2:	4611      	mov	r1, r2
    16f4:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	685b      	ldr	r3, [r3, #4]
    16fa:	68da      	ldr	r2, [r3, #12]
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	685b      	ldr	r3, [r3, #4]
    1700:	68db      	ldr	r3, [r3, #12]
    1702:	681b      	ldr	r3, [r3, #0]
    1704:	3304      	adds	r3, #4
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	2102      	movs	r1, #2
    170a:	4610      	mov	r0, r2
    170c:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	685b      	ldr	r3, [r3, #4]
    1712:	689a      	ldr	r2, [r3, #8]
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	689b      	ldr	r3, [r3, #8]
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	3304      	adds	r3, #4
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	2102      	movs	r1, #2
    1722:	4610      	mov	r0, r2
    1724:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	685b      	ldr	r3, [r3, #4]
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	7a1b      	ldrb	r3, [r3, #8]
    172e:	b2da      	uxtb	r2, r3
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	685b      	ldr	r3, [r3, #4]
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	f042 0207 	orr.w	r2, r2, #7
    173a:	b2d2      	uxtb	r2, r2
    173c:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    173e:	2300      	movs	r3, #0
  }
    1740:	4618      	mov	r0, r3
    1742:	3710      	adds	r7, #16
    1744:	46bd      	mov	sp, r7
    1746:	bd80      	pop	{r7, pc}

00001748 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    1748:	b580      	push	{r7, lr}
    174a:	b086      	sub	sp, #24
    174c:	af00      	add	r7, sp, #0
    174e:	6078      	str	r0, [r7, #4]
    1750:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	689a      	ldr	r2, [r3, #8]
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	685b      	ldr	r3, [r3, #4]
    175a:	3304      	adds	r3, #4
    175c:	4619      	mov	r1, r3
    175e:	4610      	mov	r0, r2
    1760:	f7ff f80f 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1764:	4602      	mov	r2, r0
    1766:	f107 0308 	add.w	r3, r7, #8
    176a:	6839      	ldr	r1, [r7, #0]
    176c:	4618      	mov	r0, r3
    176e:	f7ff fe6b 	bl	1448 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    1772:	2380      	movs	r3, #128	; 0x80
    1774:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    1776:	68bb      	ldr	r3, [r7, #8]
    1778:	0a1b      	lsrs	r3, r3, #8
    177a:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    177c:	68bb      	ldr	r3, [r7, #8]
    177e:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1780:	693b      	ldr	r3, [r7, #16]
    1782:	b2db      	uxtb	r3, r3
    1784:	011b      	lsls	r3, r3, #4
    1786:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	b2db      	uxtb	r3, r3
    178c:	f003 030f 	and.w	r3, r3, #15
    1790:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1792:	4313      	orrs	r3, r2
    1794:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	685b      	ldr	r3, [r3, #4]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	2280      	movs	r2, #128	; 0x80
    179e:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	7dba      	ldrb	r2, [r7, #22]
    17a8:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	685b      	ldr	r3, [r3, #4]
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	7d7a      	ldrb	r2, [r7, #21]
    17b2:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	685b      	ldr	r3, [r3, #4]
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	7d3a      	ldrb	r2, [r7, #20]
    17bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	2203      	movs	r2, #3
    17c8:	731a      	strb	r2, [r3, #12]
    return true;
    17ca:	2301      	movs	r3, #1
  }
    17cc:	4618      	mov	r0, r3
    17ce:	3718      	adds	r7, #24
    17d0:	46bd      	mov	sp, r7
    17d2:	bd80      	pop	{r7, pc}

000017d4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    17d4:	b580      	push	{r7, lr}
    17d6:	b086      	sub	sp, #24
    17d8:	af00      	add	r7, sp, #0
    17da:	60f8      	str	r0, [r7, #12]
    17dc:	60b9      	str	r1, [r7, #8]
    17de:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    17e0:	2300      	movs	r3, #0
    17e2:	617b      	str	r3, [r7, #20]
    17e4:	697a      	ldr	r2, [r7, #20]
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	429a      	cmp	r2, r3
    17ea:	d216      	bcs.n	181a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    17ec:	68ba      	ldr	r2, [r7, #8]
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	441a      	add	r2, r3
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	685b      	ldr	r3, [r3, #4]
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	7812      	ldrb	r2, [r2, #0]
    17fa:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    17fc:	68f8      	ldr	r0, [r7, #12]
    17fe:	f000 f8b5 	bl	196c <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    1802:	4603      	mov	r3, r0
    1804:	f083 0301 	eor.w	r3, r3, #1
    1808:	b2db      	uxtb	r3, r3
    180a:	2b00      	cmp	r3, #0
    180c:	d001      	beq.n	1812 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    180e:	bf00      	nop
      while (!TransmissionComplete())
    1810:	e7f4      	b.n	17fc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    1812:	697b      	ldr	r3, [r7, #20]
    1814:	3301      	adds	r3, #1
    1816:	617b      	str	r3, [r7, #20]
    1818:	e7e4      	b.n	17e4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    181a:	bf00      	nop
    181c:	3718      	adds	r7, #24
    181e:	46bd      	mov	sp, r7
    1820:	bd80      	pop	{r7, pc}

00001822 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1822:	b590      	push	{r4, r7, lr}
    1824:	b083      	sub	sp, #12
    1826:	af00      	add	r7, sp, #0
    1828:	6078      	str	r0, [r7, #4]
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    182e:	4618      	mov	r0, r3
    1830:	f000 f88a 	bl	1948 <sjsu::lpc40xx::Uart::HasData() const>
    1834:	4603      	mov	r3, r0
    1836:	2b00      	cmp	r3, #0
    1838:	d010      	beq.n	185c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    183e:	685b      	ldr	r3, [r3, #4]
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    184a:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1850:	6813      	ldr	r3, [r2, #0]
    1852:	1c58      	adds	r0, r3, #1
    1854:	6010      	str	r0, [r2, #0]
    1856:	440b      	add	r3, r1
    1858:	4622      	mov	r2, r4
    185a:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    1860:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    1866:	429a      	cmp	r2, r3
    1868:	d301      	bcc.n	186e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    186a:	2301      	movs	r3, #1
    186c:	e000      	b.n	1870 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    186e:	2300      	movs	r3, #0
    });
    1870:	4618      	mov	r0, r3
    1872:	370c      	adds	r7, #12
    1874:	46bd      	mov	sp, r7
    1876:	bd90      	pop	{r4, r7, pc}

00001878 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    1878:	b590      	push	{r4, r7, lr}
    187a:	b09d      	sub	sp, #116	; 0x74
    187c:	af00      	add	r7, sp, #0
    187e:	6178      	str	r0, [r7, #20]
    1880:	6139      	str	r1, [r7, #16]
    1882:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    1884:	2300      	movs	r3, #0
    1886:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1888:	697b      	ldr	r3, [r7, #20]
    188a:	643b      	str	r3, [r7, #64]	; 0x40
    188c:	f107 0310 	add.w	r3, r7, #16
    1890:	647b      	str	r3, [r7, #68]	; 0x44
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	64bb      	str	r3, [r7, #72]	; 0x48
    1896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    189a:	64fb      	str	r3, [r7, #76]	; 0x4c
    189c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    18a0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    18a4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    18a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    18ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    18ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    18b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
    18b6:	4618      	mov	r0, r3
    18b8:	f000 ff47 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    18bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
    18c0:	f107 0320 	add.w	r3, r7, #32
    18c4:	4611      	mov	r1, r2
    18c6:	4618      	mov	r0, r3
    18c8:	f001 fafe 	bl	2ec8 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18cc:	4603      	mov	r3, r0
    18ce:	2b00      	cmp	r3, #0
    18d0:	d004      	beq.n	18dc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    18d2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    18d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    18da:	e011      	b.n	1900 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    18dc:	4b19      	ldr	r3, [pc, #100]	; (1944 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    18de:	681b      	ldr	r3, [r3, #0]
    18e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
    18e4:	4610      	mov	r0, r2
    18e6:	4798      	blx	r3
    18e8:	463b      	mov	r3, r7
    18ea:	f107 0220 	add.w	r2, r7, #32
    18ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
    18f2:	4618      	mov	r0, r3
    18f4:	f001 fce1 	bl	32ba <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18f8:	e9d7 3400 	ldrd	r3, r4, [r7]
    18fc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    1900:	2301      	movs	r3, #1
    1902:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    1904:	4b0f      	ldr	r3, [pc, #60]	; (1944 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	f107 0250 	add.w	r2, r7, #80	; 0x50
    190c:	4610      	mov	r0, r2
    190e:	4798      	blx	r3
    1910:	f107 0218 	add.w	r2, r7, #24
    1914:	f107 0350 	add.w	r3, r7, #80	; 0x50
    1918:	4611      	mov	r1, r2
    191a:	4618      	mov	r0, r3
    191c:	f001 fcfa 	bl	3314 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1920:	4603      	mov	r3, r0
    1922:	2b00      	cmp	r3, #0
    1924:	d009      	beq.n	193a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    1926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    192a:	4618      	mov	r0, r3
    192c:	f7ff ff79 	bl	1822 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    1930:	4603      	mov	r3, r0
    1932:	2b00      	cmp	r3, #0
    1934:	d0e6      	beq.n	1904 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    1936:	2300      	movs	r3, #0
    1938:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    193a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    193c:	4618      	mov	r0, r3
    193e:	3774      	adds	r7, #116	; 0x74
    1940:	46bd      	mov	sp, r7
    1942:	bd90      	pop	{r4, r7, pc}
    1944:	10000000 	.word	0x10000000

00001948 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	7d1b      	ldrb	r3, [r3, #20]
    1958:	b2db      	uxtb	r3, r3
    195a:	2100      	movs	r1, #0
    195c:	4618      	mov	r0, r3
    195e:	f001 fb74 	bl	304a <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1962:	4603      	mov	r3, r0
  }
    1964:	4618      	mov	r0, r3
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}

0000196c <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	685b      	ldr	r3, [r3, #4]
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	7d1b      	ldrb	r3, [r3, #20]
    197c:	b2db      	uxtb	r3, r3
    197e:	2105      	movs	r1, #5
    1980:	4618      	mov	r0, r3
    1982:	f001 fb62 	bl	304a <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1986:	4603      	mov	r3, r0
  }
    1988:	4618      	mov	r0, r3
    198a:	3708      	adds	r7, #8
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}

00001990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
  }
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	6818      	ldr	r0, [r3, #0]
    199a:	4b08      	ldr	r3, [pc, #32]	; (19bc <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    199c:	781a      	ldrb	r2, [r3, #0]
    199e:	785b      	ldrb	r3, [r3, #1]
    19a0:	021b      	lsls	r3, r3, #8
    19a2:	431a      	orrs	r2, r3
    19a4:	2300      	movs	r3, #0
    19a6:	f362 030f 	bfi	r3, r2, #0, #16
    19aa:	4619      	mov	r1, r3
    19ac:	f001 fb64 	bl	3078 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    19b0:	4603      	mov	r3, r0
  }
    19b2:	4618      	mov	r0, r3
    19b4:	bd80      	pop	{r7, pc}
    19b6:	bf00      	nop
    19b8:	10000124 	.word	0x10000124
    19bc:	00009984 	.word	0x00009984

000019c0 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    19c0:	b480      	push	{r7}
    19c2:	b083      	sub	sp, #12
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
    19c8:	4a04      	ldr	r2, [pc, #16]	; (19dc <sjsu::Adc::Adc()+0x1c>)
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	601a      	str	r2, [r3, #0]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	4618      	mov	r0, r3
    19d2:	370c      	adds	r7, #12
    19d4:	46bd      	mov	sp, r7
    19d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    19da:	4770      	bx	lr
    19dc:	00009b44 	.word	0x00009b44

000019e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    19e0:	b580      	push	{r7, lr}
    19e2:	b084      	sub	sp, #16
    19e4:	af00      	add	r7, sp, #0
    19e6:	60f8      	str	r0, [r7, #12]
    19e8:	60b9      	str	r1, [r7, #8]
    19ea:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	4618      	mov	r0, r3
    19f0:	f7ff ffe6 	bl	19c0 <sjsu::Adc::Adc()>
    19f4:	4a06      	ldr	r2, [pc, #24]	; (1a10 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	601a      	str	r2, [r3, #0]
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	68ba      	ldr	r2, [r7, #8]
    19fe:	605a      	str	r2, [r3, #4]
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	687a      	ldr	r2, [r7, #4]
    1a04:	609a      	str	r2, [r3, #8]
  {
  }
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	4618      	mov	r0, r3
    1a0a:	3710      	adds	r7, #16
    1a0c:	46bd      	mov	sp, r7
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	00009b30 	.word	0x00009b30

00001a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1a14:	b580      	push	{r7, lr}
    1a16:	ed2d 8b02 	vpush	{d8}
    1a1a:	b084      	sub	sp, #16
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
    1a20:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	4618      	mov	r0, r3
    1a26:	f7ff f9a1 	bl	d6c <units::linear_scale<float>::operator()() const>
    1a2a:	eeb0 8a40 	vmov.f32	s16, s0
    1a2e:	683b      	ldr	r3, [r7, #0]
    1a30:	4618      	mov	r0, r3
    1a32:	f7ff f99b 	bl	d6c <units::linear_scale<float>::operator()() const>
    1a36:	eef0 7a40 	vmov.f32	s15, s0
    1a3a:	edc7 7a03 	vstr	s15, [r7, #12]
    1a3e:	f107 030c 	add.w	r3, r7, #12
    1a42:	4618      	mov	r0, r3
    1a44:	f7fe fe7d 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1a48:	eeb0 7a40 	vmov.f32	s14, s0
    1a4c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1a50:	f107 0308 	add.w	r3, r7, #8
    1a54:	eeb0 0a67 	vmov.f32	s0, s15
    1a58:	4618      	mov	r0, r3
    1a5a:	f7ff f9c2 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1a5e:	68bb      	ldr	r3, [r7, #8]
	}
    1a60:	4618      	mov	r0, r3
    1a62:	3710      	adds	r7, #16
    1a64:	46bd      	mov	sp, r7
    1a66:	ecbd 8b02 	vpop	{d8}
    1a6a:	bd80      	pop	{r7, pc}

00001a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1a74:	6878      	ldr	r0, [r7, #4]
    1a76:	f001 fab6 	bl	2fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1a7a:	4603      	mov	r3, r0
		}
    1a7c:	4618      	mov	r0, r3
    1a7e:	3708      	adds	r7, #8
    1a80:	46bd      	mov	sp, r7
    1a82:	bd80      	pop	{r7, pc}

00001a84 <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    1a84:	b580      	push	{r7, lr}
    1a86:	b086      	sub	sp, #24
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	689a      	ldr	r2, [r3, #8]
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	3314      	adds	r3, #20
    1a98:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    1a9a:	493c      	ldr	r1, [pc, #240]	; (1b8c <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1a9c:	4610      	mov	r0, r2
    1a9e:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	685b      	ldr	r3, [r3, #4]
    1aa4:	6818      	ldr	r0, [r3, #0]
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	685b      	ldr	r3, [r3, #4]
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	681b      	ldr	r3, [r3, #0]
    1ab0:	687a      	ldr	r2, [r7, #4]
    1ab2:	6852      	ldr	r2, [r2, #4]
    1ab4:	7912      	ldrb	r2, [r2, #4]
    1ab6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1aba:	b2d2      	uxtb	r2, r2
    1abc:	4611      	mov	r1, r2
    1abe:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	685b      	ldr	r3, [r3, #4]
    1ac4:	681a      	ldr	r2, [r3, #0]
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	685b      	ldr	r3, [r3, #4]
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	3304      	adds	r3, #4
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	2100      	movs	r1, #0
    1ad4:	4610      	mov	r0, r2
    1ad6:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	685b      	ldr	r3, [r3, #4]
    1adc:	681a      	ldr	r2, [r3, #0]
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	685b      	ldr	r3, [r3, #4]
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	330c      	adds	r3, #12
    1ae8:	681b      	ldr	r3, [r3, #0]
    1aea:	2101      	movs	r1, #1
    1aec:	4610      	mov	r0, r2
    1aee:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1af4:	4925      	ldr	r1, [pc, #148]	; (1b8c <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1af6:	4618      	mov	r0, r3
    1af8:	f7fe fe43 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1afc:	4603      	mov	r3, r0
    1afe:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1b00:	f107 0308 	add.w	r3, r7, #8
    1b04:	4922      	ldr	r1, [pc, #136]	; (1b90 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    1b06:	4618      	mov	r0, r3
    1b08:	f7ff ff84 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1b0c:	4603      	mov	r3, r0
    1b0e:	60fb      	str	r3, [r7, #12]
    1b10:	f107 030c 	add.w	r3, r7, #12
    1b14:	4618      	mov	r0, r3
    1b16:	f7ff ffa9 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1b1a:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1b1c:	4b1d      	ldr	r3, [pc, #116]	; (1b94 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    1b24:	4b1c      	ldr	r3, [pc, #112]	; (1b98 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    1b26:	781a      	ldrb	r2, [r3, #0]
    1b28:	785b      	ldrb	r3, [r3, #1]
    1b2a:	021b      	lsls	r3, r3, #8
    1b2c:	431a      	orrs	r2, r3
    1b2e:	2300      	movs	r3, #0
    1b30:	f362 030f 	bfi	r3, r2, #0, #16
    1b34:	4619      	mov	r1, r3
    1b36:	6978      	ldr	r0, [r7, #20]
    1b38:	f001 faad 	bl	3096 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1b3c:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    1b3e:	4b17      	ldr	r3, [pc, #92]	; (1b9c <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    1b40:	781a      	ldrb	r2, [r3, #0]
    1b42:	785b      	ldrb	r3, [r3, #1]
    1b44:	021b      	lsls	r3, r3, #8
    1b46:	431a      	orrs	r2, r3
    1b48:	2300      	movs	r3, #0
    1b4a:	f362 030f 	bfi	r3, r2, #0, #16
    1b4e:	461a      	mov	r2, r3
    1b50:	6939      	ldr	r1, [r7, #16]
    1b52:	6978      	ldr	r0, [r7, #20]
    1b54:	f001 fa35 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1b58:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    1b5a:	f7ff ff19 	bl	1990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1b5e:	4603      	mov	r3, r0
    1b60:	2b00      	cmp	r3, #0
    1b62:	d00a      	beq.n	1b7a <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	685b      	ldr	r3, [r3, #4]
    1b68:	791b      	ldrb	r3, [r3, #4]
    1b6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	4619      	mov	r1, r3
    1b72:	6978      	ldr	r0, [r7, #20]
    1b74:	f001 fa00 	bl	2f78 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1b78:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    1b7a:	4b06      	ldr	r3, [pc, #24]	; (1b94 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b7c:	681b      	ldr	r3, [r3, #0]
    1b7e:	697a      	ldr	r2, [r7, #20]
    1b80:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    1b82:	2300      	movs	r3, #0
  }
    1b84:	4618      	mov	r0, r3
    1b86:	3718      	adds	r7, #24
    1b88:	46bd      	mov	sp, r7
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	000098cc 	.word	0x000098cc
    1b90:	000099d8 	.word	0x000099d8
    1b94:	10000124 	.word	0x10000124
    1b98:	00009988 	.word	0x00009988
    1b9c:	00009980 	.word	0x00009980

00001ba0 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b084      	sub	sp, #16
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1ba8:	6878      	ldr	r0, [r7, #4]
    1baa:	f000 f851 	bl	1c50 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	687a      	ldr	r2, [r7, #4]
    1bb4:	6852      	ldr	r2, [r2, #4]
    1bb6:	7912      	ldrb	r2, [r2, #4]
    1bb8:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1bbc:	b2d2      	uxtb	r2, r2
    1bbe:	3204      	adds	r2, #4
    1bc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1bc4:	4b09      	ldr	r3, [pc, #36]	; (1bec <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1bc6:	781a      	ldrb	r2, [r3, #0]
    1bc8:	785b      	ldrb	r3, [r3, #1]
    1bca:	021b      	lsls	r3, r3, #8
    1bcc:	431a      	orrs	r2, r3
    1bce:	2300      	movs	r3, #0
    1bd0:	f362 030f 	bfi	r3, r2, #0, #16
    1bd4:	4619      	mov	r1, r3
    1bd6:	f001 fa6d 	bl	30b4 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1bda:	60f8      	str	r0, [r7, #12]
    return result;
    1bdc:	68fb      	ldr	r3, [r7, #12]
  }
    1bde:	4618      	mov	r0, r3
    1be0:	3710      	adds	r7, #16
    1be2:	46bd      	mov	sp, r7
    1be4:	bd80      	pop	{r7, pc}
    1be6:	bf00      	nop
    1be8:	10000124 	.word	0x10000124
    1bec:	00009990 	.word	0x00009990

00001bf0 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1bf8:	230c      	movs	r3, #12
  }
    1bfa:	4618      	mov	r0, r3
    1bfc:	370c      	adds	r7, #12
    1bfe:	46bd      	mov	sp, r7
    1c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c04:	4770      	bx	lr
    1c06:	Address 0x0000000000001c06 is out of bounds.


00001c08 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	687a      	ldr	r2, [r7, #4]
    1c16:	6852      	ldr	r2, [r2, #4]
    1c18:	7912      	ldrb	r2, [r2, #4]
    1c1a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1c1e:	b2d2      	uxtb	r2, r2
    1c20:	3204      	adds	r2, #4
    1c22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1c26:	4b09      	ldr	r3, [pc, #36]	; (1c4c <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1c28:	781a      	ldrb	r2, [r3, #0]
    1c2a:	785b      	ldrb	r3, [r3, #1]
    1c2c:	021b      	lsls	r3, r3, #8
    1c2e:	431a      	orrs	r2, r3
    1c30:	2300      	movs	r3, #0
    1c32:	f362 030f 	bfi	r3, r2, #0, #16
    1c36:	4619      	mov	r1, r3
    1c38:	f001 fa1e 	bl	3078 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1c3c:	4603      	mov	r3, r0
  }
    1c3e:	4618      	mov	r0, r3
    1c40:	3708      	adds	r7, #8
    1c42:	46bd      	mov	sp, r7
    1c44:	bd80      	pop	{r7, pc}
    1c46:	bf00      	nop
    1c48:	10000124 	.word	0x10000124
    1c4c:	00009994 	.word	0x00009994

00001c50 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1c50:	b590      	push	{r4, r7, lr}
    1c52:	b085      	sub	sp, #20
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1c58:	f7ff fe9a 	bl	1990 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1c5c:	4603      	mov	r3, r0
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d013      	beq.n	1c8a <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1c62:	4b29      	ldr	r3, [pc, #164]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	6818      	ldr	r0, [r3, #0]
    1c68:	4b27      	ldr	r3, [pc, #156]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c6a:	681c      	ldr	r4, [r3, #0]
    1c6c:	4b27      	ldr	r3, [pc, #156]	; (1d0c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1c6e:	781a      	ldrb	r2, [r3, #0]
    1c70:	785b      	ldrb	r3, [r3, #1]
    1c72:	021b      	lsls	r3, r3, #8
    1c74:	431a      	orrs	r2, r3
    1c76:	2300      	movs	r3, #0
    1c78:	f362 030f 	bfi	r3, r2, #0, #16
    1c7c:	461a      	mov	r2, r3
    1c7e:	2100      	movs	r1, #0
    1c80:	f001 fa29 	bl	30d6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1c84:	4603      	mov	r3, r0
    1c86:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1c88:	e03a      	b.n	1d00 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	685b      	ldr	r3, [r3, #4]
    1c8e:	791b      	ldrb	r3, [r3, #4]
    1c90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1c94:	b2db      	uxtb	r3, r3
    1c96:	461a      	mov	r2, r3
    1c98:	2301      	movs	r3, #1
    1c9a:	4093      	lsls	r3, r2
    1c9c:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1c9e:	4b1a      	ldr	r3, [pc, #104]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1ca4:	4b18      	ldr	r3, [pc, #96]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ca6:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1ca8:	4b19      	ldr	r3, [pc, #100]	; (1d10 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1caa:	781a      	ldrb	r2, [r3, #0]
    1cac:	785b      	ldrb	r3, [r3, #1]
    1cae:	021b      	lsls	r3, r3, #8
    1cb0:	431a      	orrs	r2, r3
    1cb2:	2300      	movs	r3, #0
    1cb4:	f362 030f 	bfi	r3, r2, #0, #16
    1cb8:	461a      	mov	r2, r3
    1cba:	68f9      	ldr	r1, [r7, #12]
    1cbc:	f001 f981 	bl	2fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1cc0:	4603      	mov	r3, r0
      adc_base->CR =
    1cc2:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1cc4:	4b10      	ldr	r3, [pc, #64]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	6818      	ldr	r0, [r3, #0]
    1cca:	4b0f      	ldr	r3, [pc, #60]	; (1d08 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ccc:	681c      	ldr	r4, [r3, #0]
    1cce:	4b0f      	ldr	r3, [pc, #60]	; (1d0c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1cd0:	781a      	ldrb	r2, [r3, #0]
    1cd2:	785b      	ldrb	r3, [r3, #1]
    1cd4:	021b      	lsls	r3, r3, #8
    1cd6:	431a      	orrs	r2, r3
    1cd8:	2300      	movs	r3, #0
    1cda:	f362 030f 	bfi	r3, r2, #0, #16
    1cde:	461a      	mov	r2, r3
    1ce0:	2101      	movs	r1, #1
    1ce2:	f001 f9f8 	bl	30d6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1ce6:	4603      	mov	r3, r0
    1ce8:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1cea:	6878      	ldr	r0, [r7, #4]
    1cec:	f7ff ff8c 	bl	1c08 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1cf0:	4603      	mov	r3, r0
    1cf2:	f083 0301 	eor.w	r3, r3, #1
    1cf6:	b2db      	uxtb	r3, r3
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d001      	beq.n	1d00 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1cfc:	bf00      	nop
      while (!HasConversionFinished())
    1cfe:	e7f4      	b.n	1cea <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1d00:	bf00      	nop
    1d02:	3714      	adds	r7, #20
    1d04:	46bd      	mov	sp, r7
    1d06:	bd90      	pop	{r4, r7, pc}
    1d08:	10000124 	.word	0x10000124
    1d0c:	0000998c 	.word	0x0000998c
    1d10:	0000997c 	.word	0x0000997c

00001d14 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1d14:	b480      	push	{r7}
    1d16:	af00      	add	r7, sp, #0
    1d18:	bf00      	nop
    1d1a:	46bd      	mov	sp, r7
    1d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d20:	4770      	bx	lr
    1d22:	Address 0x0000000000001d22 is out of bounds.


00001d24 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1d24:	b580      	push	{r7, lr}
    1d26:	b082      	sub	sp, #8
    1d28:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1d2a:	4b09      	ldr	r3, [pc, #36]	; (1d50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1d2c:	681b      	ldr	r3, [r3, #0]
    1d2e:	9300      	str	r3, [sp, #0]
    1d30:	231d      	movs	r3, #29
    1d32:	4a08      	ldr	r2, [pc, #32]	; (1d54 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1d34:	4908      	ldr	r1, [pc, #32]	; (1d58 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1d36:	4809      	ldr	r0, [pc, #36]	; (1d5c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1d38:	f004 fa80 	bl	623c <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	3b10      	subs	r3, #16
    1d42:	4618      	mov	r0, r3
    1d44:	f7fe fb34 	bl	3b0 <NVIC_DisableIRQ>
  }
    1d48:	bf00      	nop
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	10000048 	.word	0x10000048
    1d54:	00009e2c 	.word	0x00009e2c
    1d58:	000099dc 	.word	0x000099dc
    1d5c:	00009474 	.word	0x00009474

00001d60 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1d68:	2340      	movs	r3, #64	; 0x40
    1d6a:	4618      	mov	r0, r3
    1d6c:	370c      	adds	r7, #12
    1d6e:	46bd      	mov	sp, r7
    1d70:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d74:	4770      	bx	lr
    1d76:	Address 0x0000000000001d76 is out of bounds.


00001d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1d78:	b580      	push	{r7, lr}
    1d7a:	b084      	sub	sp, #16
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	4618      	mov	r0, r3
    1d84:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d88:	461a      	mov	r2, r3
    1d8a:	2100      	movs	r1, #0
    1d8c:	f007 f861 	bl	8e52 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d90:	2300      	movs	r3, #0
    1d92:	60fb      	str	r3, [r7, #12]
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	2b0f      	cmp	r3, #15
    1d98:	d808      	bhi.n	1dac <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	68fa      	ldr	r2, [r7, #12]
    1d9e:	4911      	ldr	r1, [pc, #68]	; (1de4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	3301      	adds	r3, #1
    1da8:	60fb      	str	r3, [r7, #12]
    1daa:	e7f3      	b.n	1d94 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1dac:	2310      	movs	r3, #16
    1dae:	60bb      	str	r3, [r7, #8]
    1db0:	6878      	ldr	r0, [r7, #4]
    1db2:	f7ff ffd5 	bl	1d60 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1db6:	4602      	mov	r2, r0
    1db8:	68bb      	ldr	r3, [r7, #8]
    1dba:	4293      	cmp	r3, r2
    1dbc:	bf34      	ite	cc
    1dbe:	2301      	movcc	r3, #1
    1dc0:	2300      	movcs	r3, #0
    1dc2:	b2db      	uxtb	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d008      	beq.n	1dda <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	68ba      	ldr	r2, [r7, #8]
    1dcc:	4906      	ldr	r1, [pc, #24]	; (1de8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1dd2:	68bb      	ldr	r3, [r7, #8]
    1dd4:	3301      	adds	r3, #1
    1dd6:	60bb      	str	r3, [r7, #8]
    1dd8:	e7ea      	b.n	1db0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1dda:	bf00      	nop
    }
    1ddc:	6878      	ldr	r0, [r7, #4]
    1dde:	3710      	adds	r7, #16
    1de0:	46bd      	mov	sp, r7
    1de2:	bd80      	pop	{r7, pc}
    1de4:	00001d15 	.word	0x00001d15
    1de8:	00001d25 	.word	0x00001d25

00001dec <sjsu::Pwm::Pwm()>:

namespace sjsu
{
/// An abstract interface for hardware that can generate Pulse Width Modulation
/// (PWM) waveforms.
class Pwm
    1dec:	b480      	push	{r7}
    1dee:	b083      	sub	sp, #12
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	4a04      	ldr	r2, [pc, #16]	; (1e08 <sjsu::Pwm::Pwm()+0x1c>)
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	601a      	str	r2, [r3, #0]
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	4618      	mov	r0, r3
    1dfe:	370c      	adds	r7, #12
    1e00:	46bd      	mov	sp, r7
    1e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e06:	4770      	bx	lr
    1e08:	00009b18 	.word	0x00009b18

00001e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>:
  ///        instance of the PWM driver.
  /// @param system_controller - Reference to a system controller object. Used
  ///        to power on the peripheral and get the current peripheral
  ///        frequency. Typically only changed from the default for unit testing
  ///        purposes.
  explicit constexpr Pwm(const Channel_t & channel,
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b084      	sub	sp, #16
    1e10:	af00      	add	r7, sp, #0
    1e12:	60f8      	str	r0, [r7, #12]
    1e14:	60b9      	str	r1, [r7, #8]
    1e16:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1e18:	68fb      	ldr	r3, [r7, #12]
    1e1a:	4618      	mov	r0, r3
    1e1c:	f7ff ffe6 	bl	1dec <sjsu::Pwm::Pwm()>
    1e20:	4a06      	ldr	r2, [pc, #24]	; (1e3c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	601a      	str	r2, [r3, #0]
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	68ba      	ldr	r2, [r7, #8]
    1e2a:	605a      	str	r2, [r3, #4]
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	609a      	str	r2, [r3, #8]
  {
  }
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	4618      	mov	r0, r3
    1e36:	3710      	adds	r7, #16
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	00009b00 	.word	0x00009b00

00001e40 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  Status Initialize(units::frequency::hertz_t frequency_hz) const override
    1e40:	b590      	push	{r4, r7, lr}
    1e42:	b085      	sub	sp, #20
    1e44:	af00      	add	r7, sp, #0
    1e46:	6078      	str	r0, [r7, #4]
    1e48:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(1 <= channel_.channel && channel_.channel <= 6,
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	685b      	ldr	r3, [r3, #4]
    1e4e:	7a1b      	ldrb	r3, [r3, #8]
    1e50:	f003 0307 	and.w	r3, r3, #7
    1e54:	b2db      	uxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	d007      	beq.n	1e6a <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x2a>
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	685b      	ldr	r3, [r3, #4]
    1e5e:	7a1b      	ldrb	r3, [r3, #8]
    1e60:	f003 0307 	and.w	r3, r3, #7
    1e64:	b2db      	uxtb	r3, r3
    1e66:	2b07      	cmp	r3, #7
    1e68:	d10d      	bne.n	1e86 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x46>
    1e6a:	23bb      	movs	r3, #187	; 0xbb
    1e6c:	4a5d      	ldr	r2, [pc, #372]	; (1fe4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    1e6e:	495e      	ldr	r1, [pc, #376]	; (1fe8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    1e70:	485e      	ldr	r0, [pc, #376]	; (1fec <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    1e72:	f004 f9e3 	bl	623c <printf>
    1e76:	485e      	ldr	r0, [pc, #376]	; (1ff0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    1e78:	f003 f89c 	bl	4fb4 <puts>
    1e7c:	2100      	movs	r1, #0
    1e7e:	2001      	movs	r0, #1
    1e80:	f7fe fd22 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1e84:	e7fe      	b.n	1e84 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x44>
                     "Channel must be between 1 and 6 on LPC40xx platforms.");

    system_controller_.PowerUpPeripheral(channel_.peripheral.power_on_id);
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	6898      	ldr	r0, [r3, #8]
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	689b      	ldr	r3, [r3, #8]
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	3314      	adds	r3, #20
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	687a      	ldr	r2, [r7, #4]
    1e96:	6852      	ldr	r2, [r2, #4]
    1e98:	6812      	ldr	r2, [r2, #0]
    1e9a:	3204      	adds	r2, #4
    1e9c:	4611      	mov	r1, r2
    1e9e:	4798      	blx	r3
    // Set prescalar to 1 so the input frequency to the PWM peripheral is equal
    // to the peripheral clock frequency.
    //
    // PR = Prescale register = defines the maximum value for the prescaler
    channel_.peripheral.registers->PR = 0;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	685b      	ldr	r3, [r3, #4]
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	2200      	movs	r2, #0
    1eaa:	60da      	str	r2, [r3, #12]
    // PC = Prescale counter. Set to 0 to cause the timer counter to increment
    // after each peripheral clock tick.
    channel_.peripheral.registers->PC = 0;
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	685b      	ldr	r3, [r3, #4]
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2200      	movs	r2, #0
    1eb6:	611a      	str	r2, [r3, #16]
    // Mode 0x0 means increment time counter (TC) after the peripheral clock
    // has cycled the amount inside of the prescale.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kMode);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	685b      	ldr	r3, [r3, #4]
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	685b      	ldr	r3, [r3, #4]
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	681c      	ldr	r4, [r3, #0]
    1eca:	4b4a      	ldr	r3, [pc, #296]	; (1ff4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    1ecc:	781a      	ldrb	r2, [r3, #0]
    1ece:	785b      	ldrb	r3, [r3, #1]
    1ed0:	021b      	lsls	r3, r3, #8
    1ed2:	431a      	orrs	r2, r3
    1ed4:	2300      	movs	r3, #0
    1ed6:	f362 030f 	bfi	r3, r2, #0, #16
    1eda:	461a      	mov	r2, r3
    1edc:	2100      	movs	r1, #0
    1ede:	f001 f8fa 	bl	30d6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1ee2:	4603      	mov	r3, r0
    1ee4:	6723      	str	r3, [r4, #112]	; 0x70
    // 0x0 for this register says to use the TC for input counts.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kCountInput);
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	685b      	ldr	r3, [r3, #4]
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	685b      	ldr	r3, [r3, #4]
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	681c      	ldr	r4, [r3, #0]
    1ef8:	4b3f      	ldr	r3, [pc, #252]	; (1ff8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    1efa:	781a      	ldrb	r2, [r3, #0]
    1efc:	785b      	ldrb	r3, [r3, #1]
    1efe:	021b      	lsls	r3, r3, #8
    1f00:	431a      	orrs	r2, r3
    1f02:	2300      	movs	r3, #0
    1f04:	f362 030f 	bfi	r3, r2, #0, #16
    1f08:	461a      	mov	r2, r3
    1f0a:	2100      	movs	r1, #0
    1f0c:	f001 f8e3 	bl	30d6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1f10:	4603      	mov	r3, r0
    1f12:	6723      	str	r3, [r4, #112]	; 0x70
    // Match register 0 is used to generate the desired frequency. If the time
    // counter TC is equal to MR0
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	685b      	ldr	r3, [r3, #4]
    1f1c:	681b      	ldr	r3, [r3, #0]
    1f1e:	3304      	adds	r3, #4
    1f20:	4619      	mov	r1, r3
    1f22:	4610      	mov	r0, r2
    1f24:	f7fe fc2d 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1f28:	4603      	mov	r3, r0
    1f2a:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1f2c:	463a      	mov	r2, r7
    1f2e:	f107 0308 	add.w	r3, r7, #8
    1f32:	4611      	mov	r1, r2
    1f34:	4618      	mov	r0, r3
    1f36:	f7ff fd6d 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1f3a:	4603      	mov	r3, r0
    1f3c:	60fb      	str	r3, [r7, #12]
    channel_.peripheral.registers->MR0 =
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	685b      	ldr	r3, [r3, #4]
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1f46:	f107 030c 	add.w	r3, r7, #12
    1f4a:	4618      	mov	r0, r3
    1f4c:	f7ff fd8e 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1f50:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1f52:	61a3      	str	r3, [r4, #24]
    // Sets match register 0 to reset when TC and Match 0 match each other,
    // meaning that the PWM pulse will cycle continuously.
    channel_.peripheral.registers->MCR =
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	685b      	ldr	r3, [r3, #4]
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	6958      	ldr	r0, [r3, #20]
    channel_.peripheral.registers->MCR =
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	685b      	ldr	r3, [r3, #4]
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1f66:	4b25      	ldr	r3, [pc, #148]	; (1ffc <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    1f68:	781a      	ldrb	r2, [r3, #0]
    1f6a:	785b      	ldrb	r3, [r3, #1]
    1f6c:	021b      	lsls	r3, r3, #8
    1f6e:	431a      	orrs	r2, r3
    1f70:	2300      	movs	r3, #0
    1f72:	f362 030f 	bfi	r3, r2, #0, #16
    1f76:	4619      	mov	r1, r3
    1f78:	f001 f88d 	bl	3096 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f7c:	4603      	mov	r3, r0
    channel_.peripheral.registers->MCR =
    1f7e:	6163      	str	r3, [r4, #20]
    // Enables PWM TC and PC for counting and enables PWM mode
    EnablePwm();
    1f80:	2101      	movs	r1, #1
    1f82:	6878      	ldr	r0, [r7, #4]
    1f84:	f000 f946 	bl	2214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    // Enables PWM[channel] output
    channel_.peripheral.registers->PCR =
        //bit::Clear(channel_.peripheral.registers->PCR,
        //           OutputControl::kEnableDoubleEdge.position) |
        bit::Set(channel_.peripheral.registers->PCR,
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	685b      	ldr	r3, [r3, #4]
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 OutputControl::kEnableOutput.position + channel_.channel);
    1f92:	2308      	movs	r3, #8
    1f94:	4619      	mov	r1, r3
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	685b      	ldr	r3, [r3, #4]
    1f9a:	7a1b      	ldrb	r3, [r3, #8]
    1f9c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	440b      	add	r3, r1
        bit::Set(channel_.peripheral.registers->PCR,
    1fa4:	4619      	mov	r1, r3
    channel_.peripheral.registers->PCR =
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	685b      	ldr	r3, [r3, #4]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->PCR,
    1fae:	4610      	mov	r0, r2
    1fb0:	f000 ffe2 	bl	2f78 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1fb4:	4603      	mov	r3, r0
    channel_.peripheral.registers->PCR =
    1fb6:	64e3      	str	r3, [r4, #76]	; 0x4c

    channel_.pin.SetPinFunction(channel_.pin_function_id);
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	6858      	ldr	r0, [r3, #4]
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	685b      	ldr	r3, [r3, #4]
    1fc2:	685b      	ldr	r3, [r3, #4]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	687a      	ldr	r2, [r7, #4]
    1fca:	6852      	ldr	r2, [r2, #4]
    1fcc:	7a12      	ldrb	r2, [r2, #8]
    1fce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1fd2:	b2d2      	uxtb	r2, r2
    1fd4:	4611      	mov	r1, r2
    1fd6:	4798      	blx	r3

    return Status::kSuccess;
    1fd8:	2300      	movs	r3, #0
  }
    1fda:	4618      	mov	r0, r3
    1fdc:	3714      	adds	r7, #20
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd90      	pop	{r4, r7, pc}
    1fe2:	bf00      	nop
    1fe4:	00009dd4 	.word	0x00009dd4
    1fe8:	00009a68 	.word	0x00009a68
    1fec:	000094f4 	.word	0x000094f4
    1ff0:	00009228 	.word	0x00009228
    1ff4:	000099fc 	.word	0x000099fc
    1ff8:	00009a00 	.word	0x00009a00
    1ffc:	000099ec 	.word	0x000099ec

00002000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>:

  void SetDutyCycle(float duty_cycle) const override
    2000:	b590      	push	{r4, r7, lr}
    2002:	b083      	sub	sp, #12
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
    2008:	ed87 0a00 	vstr	s0, [r7]
  {
    SJ2_ASSERT_FATAL(0.0f <= duty_cycle && duty_cycle <= 1.0f,
    200c:	edd7 7a00 	vldr	s15, [r7]
    2010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2018:	bfac      	ite	ge
    201a:	2301      	movge	r3, #1
    201c:	2300      	movlt	r3, #0
    201e:	b2db      	uxtb	r3, r3
    2020:	f083 0301 	eor.w	r3, r3, #1
    2024:	b2db      	uxtb	r3, r3
    2026:	2b00      	cmp	r3, #0
    2028:	d110      	bne.n	204c <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x4c>
    202a:	edd7 7a00 	vldr	s15, [r7]
    202e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2032:	eef4 7ac7 	vcmpe.f32	s15, s14
    2036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    203a:	bf94      	ite	ls
    203c:	2301      	movls	r3, #1
    203e:	2300      	movhi	r3, #0
    2040:	b2db      	uxtb	r3, r3
    2042:	f083 0301 	eor.w	r3, r3, #1
    2046:	b2db      	uxtb	r3, r3
    2048:	2b00      	cmp	r3, #0
    204a:	d00d      	beq.n	2068 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x68>
    204c:	23e9      	movs	r3, #233	; 0xe9
    204e:	4a1c      	ldr	r2, [pc, #112]	; (20c0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc0>)
    2050:	491c      	ldr	r1, [pc, #112]	; (20c4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc4>)
    2052:	481d      	ldr	r0, [pc, #116]	; (20c8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc8>)
    2054:	f004 f8f2 	bl	623c <printf>
    2058:	481c      	ldr	r0, [pc, #112]	; (20cc <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xcc>)
    205a:	f002 ffab 	bl	4fb4 <puts>
    205e:	2100      	movs	r1, #0
    2060:	2001      	movs	r0, #1
    2062:	f7fe fc31 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    2066:	e7fe      	b.n	2066 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x66>
                     "duty_cycle of Duty Cycle provided is out of bounds.");
    *GetMatchRegisters(channel_.channel) = CalculateDutyCycle(duty_cycle);
    2068:	ed97 0a00 	vldr	s0, [r7]
    206c:	6878      	ldr	r0, [r7, #4]
    206e:	f000 f98b 	bl	2388 <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>
    2072:	4604      	mov	r4, r0
    2074:	687b      	ldr	r3, [r7, #4]
    2076:	685b      	ldr	r3, [r3, #4]
    2078:	7a1b      	ldrb	r3, [r3, #8]
    207a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    207e:	b2db      	uxtb	r3, r3
    2080:	4619      	mov	r1, r3
    2082:	6878      	ldr	r0, [r7, #4]
    2084:	f000 f930 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    2088:	4603      	mov	r3, r0
    208a:	601c      	str	r4, [r3, #0]
    channel_.peripheral.registers->LER |= (1 << channel_.channel);
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	685b      	ldr	r3, [r3, #4]
    2090:	681b      	ldr	r3, [r3, #0]
    2092:	681b      	ldr	r3, [r3, #0]
    2094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	685b      	ldr	r3, [r3, #4]
    209a:	7a1b      	ldrb	r3, [r3, #8]
    209c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20a0:	b2db      	uxtb	r3, r3
    20a2:	4619      	mov	r1, r3
    20a4:	2301      	movs	r3, #1
    20a6:	408b      	lsls	r3, r1
    20a8:	4619      	mov	r1, r3
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	685b      	ldr	r3, [r3, #4]
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	430a      	orrs	r2, r1
    20b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
    20b6:	bf00      	nop
    20b8:	370c      	adds	r7, #12
    20ba:	46bd      	mov	sp, r7
    20bc:	bd90      	pop	{r4, r7, pc}
    20be:	bf00      	nop
    20c0:	00009d98 	.word	0x00009d98
    20c4:	00009a70 	.word	0x00009a70
    20c8:	000095c8 	.word	0x000095c8
    20cc:	00009228 	.word	0x00009228

000020d0 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>:

  float GetDutyCycle() const override
    20d0:	b580      	push	{r7, lr}
    20d2:	ed2d 8b02 	vpush	{d8}
    20d6:	b082      	sub	sp, #8
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
  {
    return (static_cast<float>(*GetMatchRegisters(channel_.channel)) /
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	685b      	ldr	r3, [r3, #4]
    20e0:	7a1b      	ldrb	r3, [r3, #8]
    20e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    20e6:	b2db      	uxtb	r3, r3
    20e8:	4619      	mov	r1, r3
    20ea:	6878      	ldr	r0, [r7, #4]
    20ec:	f000 f8fc 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    20f0:	4603      	mov	r3, r0
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	ee07 3a90 	vmov	s15, r3
    20f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
            static_cast<float>(*GetMatchRegisters(0)));
    20fc:	2100      	movs	r1, #0
    20fe:	6878      	ldr	r0, [r7, #4]
    2100:	f000 f8f2 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    2104:	4603      	mov	r3, r0
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	ee07 3a90 	vmov	s15, r3
    210c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2110:	ee88 7a27 	vdiv.f32	s14, s16, s15
    2114:	eef0 7a47 	vmov.f32	s15, s14
  }
    2118:	eeb0 0a67 	vmov.f32	s0, s15
    211c:	3708      	adds	r7, #8
    211e:	46bd      	mov	sp, r7
    2120:	ecbd 8b02 	vpop	{d8}
    2124:	bd80      	pop	{r7, pc}

00002126 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2126:	b580      	push	{r7, lr}
    2128:	b082      	sub	sp, #8
    212a:	af00      	add	r7, sp, #0
    212c:	6078      	str	r0, [r7, #4]
    212e:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    2130:	6839      	ldr	r1, [r7, #0]
    2132:	6878      	ldr	r0, [r7, #4]
    2134:	f7fe faae 	bl	694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2138:	4603      	mov	r3, r0
    213a:	f083 0301 	eor.w	r3, r3, #1
    213e:	b2db      	uxtb	r3, r3
		}
    2140:	4618      	mov	r0, r3
    2142:	3708      	adds	r7, #8
    2144:	46bd      	mov	sp, r7
    2146:	bd80      	pop	{r7, pc}

00002148 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetFrequency(units::frequency::hertz_t frequency_hz) const override
    2148:	b590      	push	{r4, r7, lr}
    214a:	b087      	sub	sp, #28
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
    2150:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(frequency_hz != 0_Hz, "Pwm Frequency cannot be zero Hz.");
    2152:	f04f 0000 	mov.w	r0, #0
    2156:	f04f 0100 	mov.w	r1, #0
    215a:	f7fe fa1d 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    215e:	4603      	mov	r3, r0
    2160:	60fb      	str	r3, [r7, #12]
    2162:	f107 020c 	add.w	r2, r7, #12
    2166:	463b      	mov	r3, r7
    2168:	4611      	mov	r1, r2
    216a:	4618      	mov	r0, r3
    216c:	f7ff ffdb 	bl	2126 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    2170:	4603      	mov	r3, r0
    2172:	f083 0301 	eor.w	r3, r3, #1
    2176:	b2db      	uxtb	r3, r3
    2178:	2b00      	cmp	r3, #0
    217a:	d00d      	beq.n	2198 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x50>
    217c:	23f6      	movs	r3, #246	; 0xf6
    217e:	4a21      	ldr	r2, [pc, #132]	; (2204 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xbc>)
    2180:	4921      	ldr	r1, [pc, #132]	; (2208 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    2182:	4822      	ldr	r0, [pc, #136]	; (220c <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    2184:	f004 f85a 	bl	623c <printf>
    2188:	4821      	ldr	r0, [pc, #132]	; (2210 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc8>)
    218a:	f002 ff13 	bl	4fb4 <puts>
    218e:	2100      	movs	r1, #0
    2190:	2001      	movs	r0, #1
    2192:	f7fe fb99 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    2196:	e7fe      	b.n	2196 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x4e>
    // Disables PWM mode; this will reset all counters to 0
    // And allow us to update MR0
    float previous_duty_cycle = GetDutyCycle();
    2198:	6878      	ldr	r0, [r7, #4]
    219a:	f7ff ff99 	bl	20d0 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    219e:	ed87 0a05 	vstr	s0, [r7, #20]
    EnablePwm(false);
    21a2:	2100      	movs	r1, #0
    21a4:	6878      	ldr	r0, [r7, #4]
    21a6:	f000 f835 	bl	2214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	685b      	ldr	r3, [r3, #4]
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	3304      	adds	r3, #4
    21b6:	4619      	mov	r1, r3
    21b8:	4610      	mov	r0, r2
    21ba:	f7fe fae2 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    21be:	4603      	mov	r3, r0
    21c0:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    21c2:	463a      	mov	r2, r7
    21c4:	f107 0308 	add.w	r3, r7, #8
    21c8:	4611      	mov	r1, r2
    21ca:	4618      	mov	r0, r3
    21cc:	f7ff fc22 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    21d0:	4603      	mov	r3, r0
    21d2:	613b      	str	r3, [r7, #16]
    channel_.peripheral.registers->MR0 =
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	685b      	ldr	r3, [r3, #4]
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    21dc:	f107 0310 	add.w	r3, r7, #16
    21e0:	4618      	mov	r0, r3
    21e2:	f7ff fc43 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    21e6:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    21e8:	61a3      	str	r3, [r4, #24]
    SetDutyCycle(previous_duty_cycle);
    21ea:	ed97 0a05 	vldr	s0, [r7, #20]
    21ee:	6878      	ldr	r0, [r7, #4]
    21f0:	f7ff ff06 	bl	2000 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    EnablePwm();
    21f4:	2101      	movs	r1, #1
    21f6:	6878      	ldr	r0, [r7, #4]
    21f8:	f000 f80c 	bl	2214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
  }
    21fc:	bf00      	nop
    21fe:	371c      	adds	r7, #28
    2200:	46bd      	mov	sp, r7
    2202:	bd90      	pop	{r4, r7, pc}
    2204:	00009d48 	.word	0x00009d48
    2208:	00009a78 	.word	0x00009a78
    220c:	00009694 	.word	0x00009694
    2210:	00009228 	.word	0x00009228

00002214 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>:
    return result;
  }
  /// Helper method for enabling and disabling this PWM channel.
  /// @param enable - default to true, if set to false, will disable this PWM
  ///        channel.
  void EnablePwm(bool enable = true) const
    2214:	b580      	push	{r7, lr}
    2216:	b084      	sub	sp, #16
    2218:	af00      	add	r7, sp, #0
    221a:	6078      	str	r0, [r7, #4]
    221c:	460b      	mov	r3, r1
    221e:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pwm_timer = &channel_.peripheral.registers->TCR;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	685b      	ldr	r3, [r3, #4]
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	3304      	adds	r3, #4
    222a:	60fb      	str	r3, [r7, #12]
    if (enable)
    222c:	78fb      	ldrb	r3, [r7, #3]
    222e:	2b00      	cmp	r3, #0
    2230:	d040      	beq.n	22b4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xa0>
    {
      // Reset the Timer Counter
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterReset);
    2232:	68fb      	ldr	r3, [r7, #12]
    2234:	6818      	ldr	r0, [r3, #0]
    2236:	4b29      	ldr	r3, [pc, #164]	; (22dc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    2238:	781a      	ldrb	r2, [r3, #0]
    223a:	785b      	ldrb	r3, [r3, #1]
    223c:	021b      	lsls	r3, r3, #8
    223e:	431a      	orrs	r2, r3
    2240:	2300      	movs	r3, #0
    2242:	f362 030f 	bfi	r3, r2, #0, #16
    2246:	4619      	mov	r1, r3
    2248:	f000 ff25 	bl	3096 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    224c:	4602      	mov	r2, r0
    224e:	68fb      	ldr	r3, [r7, #12]
    2250:	601a      	str	r2, [r3, #0]
      // Clear reset and allow timer to count
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kCounterReset);
    2252:	68fb      	ldr	r3, [r7, #12]
    2254:	6818      	ldr	r0, [r3, #0]
    2256:	4b21      	ldr	r3, [pc, #132]	; (22dc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    2258:	781a      	ldrb	r2, [r3, #0]
    225a:	785b      	ldrb	r3, [r3, #1]
    225c:	021b      	lsls	r3, r3, #8
    225e:	431a      	orrs	r2, r3
    2260:	2300      	movs	r3, #0
    2262:	f362 030f 	bfi	r3, r2, #0, #16
    2266:	4619      	mov	r1, r3
    2268:	f000 ff47 	bl	30fa <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    226c:	4602      	mov	r2, r0
    226e:	68fb      	ldr	r3, [r7, #12]
    2270:	601a      	str	r2, [r3, #0]
      // Enable PWM output
      *pwm_timer = bit::Set(*pwm_timer, Timer::kPwmEnable);
    2272:	68fb      	ldr	r3, [r7, #12]
    2274:	6818      	ldr	r0, [r3, #0]
    2276:	4b1a      	ldr	r3, [pc, #104]	; (22e0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    2278:	781a      	ldrb	r2, [r3, #0]
    227a:	785b      	ldrb	r3, [r3, #1]
    227c:	021b      	lsls	r3, r3, #8
    227e:	431a      	orrs	r2, r3
    2280:	2300      	movs	r3, #0
    2282:	f362 030f 	bfi	r3, r2, #0, #16
    2286:	4619      	mov	r1, r3
    2288:	f000 ff05 	bl	3096 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    228c:	4602      	mov	r2, r0
    228e:	68fb      	ldr	r3, [r7, #12]
    2290:	601a      	str	r2, [r3, #0]
      // Enable counting
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterEnable);
    2292:	68fb      	ldr	r3, [r7, #12]
    2294:	6818      	ldr	r0, [r3, #0]
    2296:	4b13      	ldr	r3, [pc, #76]	; (22e4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xd0>)
    2298:	781a      	ldrb	r2, [r3, #0]
    229a:	785b      	ldrb	r3, [r3, #1]
    229c:	021b      	lsls	r3, r3, #8
    229e:	431a      	orrs	r2, r3
    22a0:	2300      	movs	r3, #0
    22a2:	f362 030f 	bfi	r3, r2, #0, #16
    22a6:	4619      	mov	r1, r3
    22a8:	f000 fef5 	bl	3096 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    22ac:	4602      	mov	r2, r0
    22ae:	68fb      	ldr	r3, [r7, #12]
    22b0:	601a      	str	r2, [r3, #0]
    else
    {
      // Disable PWM output
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    }
  }
    22b2:	e00f      	b.n	22d4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc0>
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	6818      	ldr	r0, [r3, #0]
    22b8:	4b09      	ldr	r3, [pc, #36]	; (22e0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    22ba:	781a      	ldrb	r2, [r3, #0]
    22bc:	785b      	ldrb	r3, [r3, #1]
    22be:	021b      	lsls	r3, r3, #8
    22c0:	431a      	orrs	r2, r3
    22c2:	2300      	movs	r3, #0
    22c4:	f362 030f 	bfi	r3, r2, #0, #16
    22c8:	4619      	mov	r1, r3
    22ca:	f000 ff16 	bl	30fa <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    22ce:	4602      	mov	r2, r0
    22d0:	68fb      	ldr	r3, [r7, #12]
    22d2:	601a      	str	r2, [r3, #0]
  }
    22d4:	bf00      	nop
    22d6:	3710      	adds	r7, #16
    22d8:	46bd      	mov	sp, r7
    22da:	bd80      	pop	{r7, pc}
    22dc:	000099f4 	.word	0x000099f4
    22e0:	000099f8 	.word	0x000099f8
    22e4:	000099f0 	.word	0x000099f0

000022e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>:
  /// Helper method to make getting a pointer to the Match Register 0 more
  /// readable in the code.
  ///
  /// @return a pointer to the match 0 register.
  volatile uint32_t *GetMatchRegisters(uint8_t match) const
    22e8:	b480      	push	{r7}
    22ea:	b083      	sub	sp, #12
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	460b      	mov	r3, r1
    22f2:	70fb      	strb	r3, [r7, #3]
  {
    switch(match)
    22f4:	78fb      	ldrb	r3, [r7, #3]
    22f6:	2b06      	cmp	r3, #6
    22f8:	d83a      	bhi.n	2370 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x88>
    22fa:	a201      	add	r2, pc, #4	; (adr r2, 2300 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x18>)
    22fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2300:	0000231d 	.word	0x0000231d
    2304:	00002329 	.word	0x00002329
    2308:	00002335 	.word	0x00002335
    230c:	00002341 	.word	0x00002341
    2310:	0000234d 	.word	0x0000234d
    2314:	00002359 	.word	0x00002359
    2318:	00002365 	.word	0x00002365
    {
      case 0: 
        return &channel_.peripheral.registers->MR0;
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	685b      	ldr	r3, [r3, #4]
    2320:	681b      	ldr	r3, [r3, #0]
    2322:	681b      	ldr	r3, [r3, #0]
    2324:	3318      	adds	r3, #24
    2326:	e028      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 1: 
        return &channel_.peripheral.registers->MR1;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	685b      	ldr	r3, [r3, #4]
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	331c      	adds	r3, #28
    2332:	e022      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 2: 
        return &channel_.peripheral.registers->MR2;
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	685b      	ldr	r3, [r3, #4]
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	3320      	adds	r3, #32
    233e:	e01c      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 3: 
        return &channel_.peripheral.registers->MR3;
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	685b      	ldr	r3, [r3, #4]
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	3324      	adds	r3, #36	; 0x24
    234a:	e016      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 4: 
        return &channel_.peripheral.registers->MR4;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	685b      	ldr	r3, [r3, #4]
    2350:	681b      	ldr	r3, [r3, #0]
    2352:	681b      	ldr	r3, [r3, #0]
    2354:	3340      	adds	r3, #64	; 0x40
    2356:	e010      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 5: 
        return &channel_.peripheral.registers->MR5;
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	685b      	ldr	r3, [r3, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	3344      	adds	r3, #68	; 0x44
    2362:	e00a      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      case 6: 
        return &channel_.peripheral.registers->MR6;
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	681b      	ldr	r3, [r3, #0]
    236a:	681b      	ldr	r3, [r3, #0]
    236c:	3348      	adds	r3, #72	; 0x48
    236e:	e004      	b.n	237a <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const+0x92>
      default: 
        return &channel_.peripheral.registers->MR0;
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	685b      	ldr	r3, [r3, #4]
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	3318      	adds	r3, #24
    }
  }
    237a:	4618      	mov	r0, r3
    237c:	370c      	adds	r7, #12
    237e:	46bd      	mov	sp, r7
    2380:	f85d 7b04 	ldr.w	r7, [sp], #4
    2384:	4770      	bx	lr
    2386:	bf00      	nop

00002388 <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>:
  ///
  /// @param duty_cycle_percent - value from 0.0f to 1.0f indicating the duty
  ///        cycle precent.
  /// @return the nearest approximate match register value to achieve the
  ///         supplied duty cycle.
  uint32_t CalculateDutyCycle(float duty_cycle_percent) const
    2388:	b580      	push	{r7, lr}
    238a:	b084      	sub	sp, #16
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
    2390:	ed87 0a00 	vstr	s0, [r7]
  {
    float pwm_period = static_cast<float>(*GetMatchRegisters(0));
    2394:	2100      	movs	r1, #0
    2396:	6878      	ldr	r0, [r7, #4]
    2398:	f7ff ffa6 	bl	22e8 <sjsu::lpc40xx::Pwm::GetMatchRegisters(unsigned char) const>
    239c:	4603      	mov	r3, r0
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	ee07 3a90 	vmov	s15, r3
    23a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    23a8:	edc7 7a03 	vstr	s15, [r7, #12]
    return static_cast<uint32_t>(duty_cycle_percent * pwm_period);
    23ac:	ed97 7a00 	vldr	s14, [r7]
    23b0:	edd7 7a03 	vldr	s15, [r7, #12]
    23b4:	ee67 7a27 	vmul.f32	s15, s14, s15
    23b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    23bc:	ee17 3a90 	vmov	r3, s15
  }
    23c0:	4618      	mov	r0, r3
    23c2:	3710      	adds	r7, #16
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}

000023c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>:
  static constexpr units::angle::degree_t kDefaultMinAngle     = 0_deg;
  static constexpr units::angle::degree_t kDefaultMaxAngle     = 90_deg;
  static constexpr std::chrono::microseconds kDefaultMinPulse  = 1000us;
  static constexpr std::chrono::microseconds kDefaultMaxPulse  = 2000us;

  explicit constexpr Servo(const sjsu::Pwm & pwm)
    23c8:	b590      	push	{r4, r7, lr}
    23ca:	b085      	sub	sp, #20
    23cc:	af00      	add	r7, sp, #0
    23ce:	6078      	str	r0, [r7, #4]
    23d0:	6039      	str	r1, [r7, #0]
      : servo_pwm_(pwm),
        waveform_period_(0),
        pulse_lower_bound_(kDefaultMinPulse),
        pulse_upper_bound_(kDefaultMaxPulse),
        min_angle_(kDefaultMinAngle),
        max_angle_(kDefaultMaxAngle)
    23d2:	4a17      	ldr	r2, [pc, #92]	; (2430 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x68>)
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	601a      	str	r2, [r3, #0]
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	683a      	ldr	r2, [r7, #0]
    23dc:	605a      	str	r2, [r3, #4]
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	f103 0208 	add.w	r2, r3, #8
    23e4:	2300      	movs	r3, #0
    23e6:	60fb      	str	r3, [r7, #12]
    23e8:	f107 030c 	add.w	r3, r7, #12
    23ec:	4619      	mov	r1, r3
    23ee:	4610      	mov	r0, r2
    23f0:	f000 fa6c 	bl	28cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    23f4:	687a      	ldr	r2, [r7, #4]
    23f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    23fa:	f04f 0400 	mov.w	r4, #0
    23fe:	e9c2 3404 	strd	r3, r4, [r2, #16]
    2402:	687a      	ldr	r2, [r7, #4]
    2404:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2408:	f04f 0400 	mov.w	r4, #0
    240c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	f04f 0200 	mov.w	r2, #0
    2416:	621a      	str	r2, [r3, #32]
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	f04f 0200 	mov.w	r2, #0
    241e:	625a      	str	r2, [r3, #36]	; 0x24
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	4a04      	ldr	r2, [pc, #16]	; (2434 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x6c>)
    2424:	625a      	str	r2, [r3, #36]	; 0x24
  {
  }
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	4618      	mov	r0, r3
    242a:	3714      	adds	r7, #20
    242c:	46bd      	mov	sp, r7
    242e:	bd90      	pop	{r4, r7, pc}
    2430:	00009ae0 	.word	0x00009ae0
    2434:	42b40000 	.word	0x42b40000

00002438 <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void Initialize(
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
    2440:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.Initialize(frequency);
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	685a      	ldr	r2, [r3, #4]
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	685b      	ldr	r3, [r3, #4]
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	6839      	ldr	r1, [r7, #0]
    2450:	4610      	mov	r0, r2
    2452:	4798      	blx	r3
    SetFrequency(frequency);
    2454:	687b      	ldr	r3, [r7, #4]
    2456:	681b      	ldr	r3, [r3, #0]
    2458:	3304      	adds	r3, #4
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	6839      	ldr	r1, [r7, #0]
    245e:	6878      	ldr	r0, [r7, #4]
    2460:	4798      	blx	r3
  }
    2462:	bf00      	nop
    2464:	3708      	adds	r7, #8
    2466:	46bd      	mov	sp, r7
    2468:	bd80      	pop	{r7, pc}

0000246a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    246a:	b580      	push	{r7, lr}
    246c:	b086      	sub	sp, #24
    246e:	af00      	add	r7, sp, #0
    2470:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2472:	6878      	ldr	r0, [r7, #4]
    2474:	f000 fe50 	bl	3118 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2478:	eef0 7a40 	vmov.f32	s15, s0
	}
    247c:	eeb0 0a67 	vmov.f32	s0, s15
    2480:	3718      	adds	r7, #24
    2482:	46bd      	mov	sp, r7
    2484:	bd80      	pop	{r7, pc}

00002486 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    2486:	b580      	push	{r7, lr}
    2488:	ed2d 8b02 	vpush	{d8}
    248c:	b084      	sub	sp, #16
    248e:	af00      	add	r7, sp, #0
    2490:	6078      	str	r0, [r7, #4]
    2492:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	4618      	mov	r0, r3
    2498:	f7fe fc68 	bl	d6c <units::linear_scale<float>::operator()() const>
    249c:	eeb0 8a40 	vmov.f32	s16, s0
    24a0:	683b      	ldr	r3, [r7, #0]
    24a2:	4618      	mov	r0, r3
    24a4:	f7fe fc62 	bl	d6c <units::linear_scale<float>::operator()() const>
    24a8:	eef0 7a40 	vmov.f32	s15, s0
    24ac:	edc7 7a03 	vstr	s15, [r7, #12]
    24b0:	f107 030c 	add.w	r3, r7, #12
    24b4:	4618      	mov	r0, r3
    24b6:	f7ff ffd8 	bl	246a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    24ba:	eeb0 7a40 	vmov.f32	s14, s0
    24be:	eec8 7a07 	vdiv.f32	s15, s16, s14
    24c2:	f107 0308 	add.w	r3, r7, #8
    24c6:	eeb0 0a67 	vmov.f32	s0, s15
    24ca:	4618      	mov	r0, r3
    24cc:	f7fe fc89 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    24d0:	68bb      	ldr	r3, [r7, #8]
	}
    24d2:	4618      	mov	r0, r3
    24d4:	3710      	adds	r7, #16
    24d6:	46bd      	mov	sp, r7
    24d8:	ecbd 8b02 	vpop	{d8}
    24dc:	bd80      	pop	{r7, pc}

000024de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    24de:	b490      	push	{r4, r7}
    24e0:	b082      	sub	sp, #8
    24e2:	af00      	add	r7, sp, #0
    24e4:	6078      	str	r0, [r7, #4]
    24e6:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    24e8:	683b      	ldr	r3, [r7, #0]
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	f04f 0400 	mov.w	r4, #0
    24f0:	687a      	ldr	r2, [r7, #4]
    24f2:	e9c2 3400 	strd	r3, r4, [r2]
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	4618      	mov	r0, r3
    24fa:	3708      	adds	r7, #8
    24fc:	46bd      	mov	sp, r7
    24fe:	bc90      	pop	{r4, r7}
    2500:	4770      	bx	lr

00002502 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void SetFrequency(
    2502:	b590      	push	{r4, r7, lr}
    2504:	b089      	sub	sp, #36	; 0x24
    2506:	af00      	add	r7, sp, #0
    2508:	6078      	str	r0, [r7, #4]
    250a:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.SetFrequency(frequency);
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	685a      	ldr	r2, [r3, #4]
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	685b      	ldr	r3, [r3, #4]
    2514:	681b      	ldr	r3, [r3, #0]
    2516:	330c      	adds	r3, #12
    2518:	681b      	ldr	r3, [r3, #0]
    251a:	6839      	ldr	r1, [r7, #0]
    251c:	4610      	mov	r0, r2
    251e:	4798      	blx	r3
    waveform_period_ =
        std::chrono::microseconds((1_MHz / frequency).to<uint32_t>());
    2520:	f04f 0001 	mov.w	r0, #1
    2524:	f04f 0100 	mov.w	r1, #0
    2528:	f7fe f84c 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
    252c:	4603      	mov	r3, r0
    252e:	61fb      	str	r3, [r7, #28]
    2530:	463a      	mov	r2, r7
    2532:	f107 031c 	add.w	r3, r7, #28
    2536:	4611      	mov	r1, r2
    2538:	4618      	mov	r0, r3
    253a:	f7ff ffa4 	bl	2486 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    253e:	4603      	mov	r3, r0
    2540:	61bb      	str	r3, [r7, #24]
    2542:	f107 0318 	add.w	r3, r7, #24
    2546:	4618      	mov	r0, r3
    2548:	f7ff fa90 	bl	1a6c <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    254c:	4603      	mov	r3, r0
    254e:	617b      	str	r3, [r7, #20]
    2550:	f107 0214 	add.w	r2, r7, #20
    2554:	f107 0308 	add.w	r3, r7, #8
    2558:	4611      	mov	r1, r2
    255a:	4618      	mov	r0, r3
    255c:	f7ff ffbf 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    waveform_period_ =
    2560:	687a      	ldr	r2, [r7, #4]
    2562:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    2566:	e9c2 3402 	strd	r3, r4, [r2, #8]
  }
    256a:	bf00      	nop
    256c:	3724      	adds	r7, #36	; 0x24
    256e:	46bd      	mov	sp, r7
    2570:	bd90      	pop	{r4, r7, pc}

00002572 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  // Sets the minimum and maximum pulse width lengths that the class will
  // use to clamp its pulse width output when using SetAngle.
  virtual void SetPulseBounds(std::chrono::microseconds lower,
    2572:	b490      	push	{r4, r7}
    2574:	b084      	sub	sp, #16
    2576:	af00      	add	r7, sp, #0
    2578:	60f8      	str	r0, [r7, #12]
    257a:	e9c7 2300 	strd	r2, r3, [r7]
                              std::chrono::microseconds upper)
  {
    pulse_lower_bound_ = lower;
    257e:	68fa      	ldr	r2, [r7, #12]
    2580:	e9d7 3400 	ldrd	r3, r4, [r7]
    2584:	e9c2 3404 	strd	r3, r4, [r2, #16]
    pulse_upper_bound_ = upper;
    2588:	68fa      	ldr	r2, [r7, #12]
    258a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    258e:	e9c2 3406 	strd	r3, r4, [r2, #24]
  }
    2592:	bf00      	nop
    2594:	3710      	adds	r7, #16
    2596:	46bd      	mov	sp, r7
    2598:	bc90      	pop	{r4, r7}
    259a:	4770      	bx	lr

0000259c <sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Sets your angle bounds that maps angles to microseconds when
  // using SetAngle
  virtual void SetAngleBounds(units::angle::degree_t min_angle,
    259c:	b480      	push	{r7}
    259e:	b085      	sub	sp, #20
    25a0:	af00      	add	r7, sp, #0
    25a2:	60f8      	str	r0, [r7, #12]
    25a4:	60b9      	str	r1, [r7, #8]
    25a6:	607a      	str	r2, [r7, #4]
                              units::angle::degree_t max_angle)
  {
    min_angle_ = min_angle;
    25a8:	68fb      	ldr	r3, [r7, #12]
    25aa:	68ba      	ldr	r2, [r7, #8]
    25ac:	621a      	str	r2, [r3, #32]
    max_angle_ = max_angle;
    25ae:	68fb      	ldr	r3, [r7, #12]
    25b0:	687a      	ldr	r2, [r7, #4]
    25b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
    25b4:	bf00      	nop
    25b6:	3714      	adds	r7, #20
    25b8:	46bd      	mov	sp, r7
    25ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    25be:	4770      	bx	lr

000025c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    25c0:	b490      	push	{r4, r7}
    25c2:	b082      	sub	sp, #8
    25c4:	af00      	add	r7, sp, #0
    25c6:	6078      	str	r0, [r7, #4]
	{ return __r; }
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	e9d3 3400 	ldrd	r3, r4, [r3]
    25ce:	4618      	mov	r0, r3
    25d0:	4621      	mov	r1, r4
    25d2:	3708      	adds	r7, #8
    25d4:	46bd      	mov	sp, r7
    25d6:	bc90      	pop	{r4, r7}
    25d8:	4770      	bx	lr

000025da <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  virtual void SetPulseWidthInMicroseconds(
    25da:	b5b0      	push	{r4, r5, r7, lr}
    25dc:	ed2d 8b02 	vpush	{d8}
    25e0:	b084      	sub	sp, #16
    25e2:	af00      	add	r7, sp, #0
    25e4:	60f8      	str	r0, [r7, #12]
    25e6:	e9c7 2300 	strd	r2, r3, [r7]
      std::chrono::microseconds pulse_width)
  {
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    25ea:	68fb      	ldr	r3, [r7, #12]
    25ec:	685d      	ldr	r5, [r3, #4]
    25ee:	68fb      	ldr	r3, [r7, #12]
    25f0:	685b      	ldr	r3, [r3, #4]
                            static_cast<float>(waveform_period_.count()));
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	3304      	adds	r3, #4
    25f6:	681c      	ldr	r4, [r3, #0]
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    25f8:	463b      	mov	r3, r7
    25fa:	4618      	mov	r0, r3
    25fc:	f7ff ffe0 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2600:	4602      	mov	r2, r0
    2602:	460b      	mov	r3, r1
    2604:	4610      	mov	r0, r2
    2606:	4619      	mov	r1, r3
    2608:	f005 fa98 	bl	7b3c <__aeabi_l2f>
    260c:	ee08 0a10 	vmov	s16, r0
                            static_cast<float>(waveform_period_.count()));
    2610:	68fb      	ldr	r3, [r7, #12]
    2612:	3308      	adds	r3, #8
    2614:	4618      	mov	r0, r3
    2616:	f7ff ffd3 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    261a:	4602      	mov	r2, r0
    261c:	460b      	mov	r3, r1
    261e:	4610      	mov	r0, r2
    2620:	4619      	mov	r1, r3
    2622:	f005 fa8b 	bl	7b3c <__aeabi_l2f>
    2626:	ee07 0a10 	vmov	s14, r0
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    262a:	eec8 7a07 	vdiv.f32	s15, s16, s14
    262e:	eeb0 0a67 	vmov.f32	s0, s15
    2632:	4628      	mov	r0, r5
    2634:	47a0      	blx	r4
  }
    2636:	bf00      	nop
    2638:	3710      	adds	r7, #16
    263a:	46bd      	mov	sp, r7
    263c:	ecbd 8b02 	vpop	{d8}
    2640:	bdb0      	pop	{r4, r5, r7, pc}

00002642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>:
		inline constexpr Ty to() const noexcept
    2642:	b580      	push	{r7, lr}
    2644:	b082      	sub	sp, #8
    2646:	af00      	add	r7, sp, #0
    2648:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    264a:	6878      	ldr	r0, [r7, #4]
    264c:	f000 f807 	bl	265e <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    2650:	eef0 7a40 	vmov.f32	s15, s0
		}
    2654:	eeb0 0a67 	vmov.f32	s0, s15
    2658:	3708      	adds	r7, #8
    265a:	46bd      	mov	sp, r7
    265c:	bd80      	pop	{r7, pc}

0000265e <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    265e:	b580      	push	{r7, lr}
    2660:	b082      	sub	sp, #8
    2662:	af00      	add	r7, sp, #0
    2664:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	4618      	mov	r0, r3
    266a:	f7fe fb7f 	bl	d6c <units::linear_scale<float>::operator()() const>
    266e:	eef0 7a40 	vmov.f32	s15, s0
		}
    2672:	eeb0 0a67 	vmov.f32	s0, s15
    2676:	3708      	adds	r7, #8
    2678:	46bd      	mov	sp, r7
    267a:	bd80      	pop	{r7, pc}

0000267c <sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Should only be used after pulse bounds and angle bounds have been set.
  virtual void SetAngle(units::angle::degree_t angle)
    267c:	b5b0      	push	{r4, r5, r7, lr}
    267e:	ed2d 8b04 	vpush	{d8-d9}
    2682:	b086      	sub	sp, #24
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    2688:	6039      	str	r1, [r7, #0]
  {
    float pulse_width = Map(angle.to<float>(),
    268a:	463b      	mov	r3, r7
    268c:	4618      	mov	r0, r3
    268e:	f7ff ffd8 	bl	2642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2692:	eeb0 8a40 	vmov.f32	s16, s0
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	3320      	adds	r3, #32
    269a:	4618      	mov	r0, r3
    269c:	f7ff ffd1 	bl	2642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    26a0:	eef0 8a40 	vmov.f32	s17, s0
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	3324      	adds	r3, #36	; 0x24
    26a8:	4618      	mov	r0, r3
    26aa:	f7ff ffca 	bl	2642 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    26ae:	eeb0 9a40 	vmov.f32	s18, s0
                            min_angle_.to<float>(),
                            max_angle_.to<float>(),
                            static_cast<float>(pulse_lower_bound_.count()),
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	3310      	adds	r3, #16
    26b6:	4618      	mov	r0, r3
    26b8:	f7ff ff82 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    26bc:	4603      	mov	r3, r0
    26be:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    26c0:	4618      	mov	r0, r3
    26c2:	4621      	mov	r1, r4
    26c4:	f005 fa3a 	bl	7b3c <__aeabi_l2f>
    26c8:	4605      	mov	r5, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	3318      	adds	r3, #24
    26ce:	4618      	mov	r0, r3
    26d0:	f7ff ff76 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    26d4:	4603      	mov	r3, r0
    26d6:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    26d8:	4618      	mov	r0, r3
    26da:	4621      	mov	r1, r4
    26dc:	f005 fa2e 	bl	7b3c <__aeabi_l2f>
    26e0:	4603      	mov	r3, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    26e2:	ee02 3a10 	vmov	s4, r3
    26e6:	ee01 5a90 	vmov	s3, r5
    26ea:	eeb0 1a49 	vmov.f32	s2, s18
    26ee:	eef0 0a68 	vmov.f32	s1, s17
    26f2:	eeb0 0a48 	vmov.f32	s0, s16
    26f6:	f000 fd29 	bl	314c <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    26fa:	ed87 0a05 	vstr	s0, [r7, #20]
    SetPulseWidthInMicroseconds(
        std::chrono::microseconds(static_cast<uint32_t>(pulse_width)));
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	681b      	ldr	r3, [r3, #0]
    2702:	3310      	adds	r3, #16
    2704:	681c      	ldr	r4, [r3, #0]
    2706:	edd7 7a05 	vldr	s15, [r7, #20]
    270a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    270e:	ee17 3a90 	vmov	r3, s15
    2712:	613b      	str	r3, [r7, #16]
    SetPulseWidthInMicroseconds(
    2714:	f107 0210 	add.w	r2, r7, #16
    2718:	f107 0308 	add.w	r3, r7, #8
    271c:	4611      	mov	r1, r2
    271e:	4618      	mov	r0, r3
    2720:	f7ff fedd 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    2724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2728:	6878      	ldr	r0, [r7, #4]
    272a:	47a0      	blx	r4
  }
    272c:	bf00      	nop
    272e:	3718      	adds	r7, #24
    2730:	46bd      	mov	sp, r7
    2732:	ecbd 8b04 	vpop	{d8-d9}
    2736:	bdb0      	pop	{r4, r5, r7, pc}

00002738 <std::chrono::duration_values<long long>::max()>:
	max()
    2738:	b598      	push	{r3, r4, r7, lr}
    273a:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    273c:	f7fd fe14 	bl	368 <std::numeric_limits<long long>::max()>
    2740:	4603      	mov	r3, r0
    2742:	460c      	mov	r4, r1
    2744:	4618      	mov	r0, r3
    2746:	4621      	mov	r1, r4
    2748:	bd98      	pop	{r3, r4, r7, pc}

0000274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    274a:	b590      	push	{r4, r7, lr}
    274c:	b085      	sub	sp, #20
    274e:	af00      	add	r7, sp, #0
    2750:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    2752:	f7ff fff1 	bl	2738 <std::chrono::duration_values<long long>::max()>
    2756:	4603      	mov	r3, r0
    2758:	460c      	mov	r4, r1
    275a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    275e:	f107 0308 	add.w	r3, r7, #8
    2762:	4619      	mov	r1, r3
    2764:	6878      	ldr	r0, [r7, #4]
    2766:	f7fe f901 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    276a:	6878      	ldr	r0, [r7, #4]
    276c:	3714      	adds	r7, #20
    276e:	46bd      	mov	sp, r7
    2770:	bd90      	pop	{r4, r7, pc}
    2772:	Address 0x0000000000002772 is out of bounds.


00002774 <vUartTask(void*)>:
#include "third_party/FreeRTOS/Source/include/task.h"
#include "third_party/FreeRTOS/Source/include/queue.h"

//Task to send and recive data over UART
void vUartTask(void *pvParameters)
{
    2774:	b5b0      	push	{r4, r5, r7, lr}
    2776:	b096      	sub	sp, #88	; 0x58
    2778:	af06      	add	r7, sp, #24
    277a:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t receive = 0;
    2780:	2300      	movs	r3, #0
    2782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                              DefaultSystemController())
    2786:	f7fe fcff 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    278a:	4603      	mov	r3, r0
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    278c:	461a      	mov	r2, r3
    278e:	f107 0314 	add.w	r3, r7, #20
    2792:	4947      	ldr	r1, [pc, #284]	; (28b0 <vUartTask(void*)+0x13c>)
    2794:	4618      	mov	r0, r3
    2796:	f7fe ff5d 	bl	1654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
  uart2.Initialize(38400);
    279a:	f107 0314 	add.w	r3, r7, #20
    279e:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    27a2:	4618      	mov	r0, r3
    27a4:	f7fe ff70 	bl	1688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    27a8:	231b      	movs	r3, #27
    27aa:	4a42      	ldr	r2, [pc, #264]	; (28b4 <vUartTask(void*)+0x140>)
    27ac:	4942      	ldr	r1, [pc, #264]	; (28b8 <vUartTask(void*)+0x144>)
    27ae:	4843      	ldr	r0, [pc, #268]	; (28bc <vUartTask(void*)+0x148>)
    27b0:	f003 fd44 	bl	623c <printf>
  int fing_arr[NUM_FINGERS] = {2,3,4};
    27b4:	4a42      	ldr	r2, [pc, #264]	; (28c0 <vUartTask(void*)+0x14c>)
    27b6:	f107 0308 	add.w	r3, r7, #8
    27ba:	ca07      	ldmia	r2, {r0, r1, r2}
    27bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while(1)
  {
    // Send a float (Glove data) over UART
    for(int i = 0; i < NUM_FINGERS; i++)
    27c0:	2300      	movs	r3, #0
    27c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    27c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27c6:	2b02      	cmp	r3, #2
    27c8:	dc6d      	bgt.n	28a6 <vUartTask(void*)+0x132>
    {
      for(size_t j = 24; j > 0; j -= 8)
    27ca:	2318      	movs	r3, #24
    27cc:	63bb      	str	r3, [r7, #56]	; 0x38
    27ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    27d0:	2b00      	cmp	r3, #0
    27d2:	d016      	beq.n	2802 <vUartTask(void*)+0x8e>
      {
        uint8_t sendval = shared_mem->sen[i].ui >> j; 
    27d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    27d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27d8:	3302      	adds	r3, #2
    27da:	009b      	lsls	r3, r3, #2
    27dc:	4413      	add	r3, r2
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    27e2:	fa22 f303 	lsr.w	r3, r2, r3
    27e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uart2.Write(sendval);
    27ea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
    27ee:	f107 0314 	add.w	r3, r7, #20
    27f2:	4611      	mov	r1, r2
    27f4:	4618      	mov	r0, r3
    27f6:	f7fe fcd1 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      for(size_t j = 24; j > 0; j -= 8)
    27fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    27fc:	3b08      	subs	r3, #8
    27fe:	63bb      	str	r3, [r7, #56]	; 0x38
    2800:	e7e5      	b.n	27ce <vUartTask(void*)+0x5a>
      }
      uart2.Write((uint8_t) shared_mem->sen[i].ui);
    2802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2806:	3302      	adds	r3, #2
    2808:	009b      	lsls	r3, r3, #2
    280a:	4413      	add	r3, r2
    280c:	685b      	ldr	r3, [r3, #4]
    280e:	b2da      	uxtb	r2, r3
    2810:	f107 0314 	add.w	r3, r7, #20
    2814:	4611      	mov	r1, r2
    2816:	4618      	mov	r0, r3
    2818:	f7fe fcc0 	bl	119c <sjsu::Uart::Write(unsigned char) const>
      //LOG_INFO("Sent value %f over UART %i", shared_mem->sen[i].f, i);
      for(size_t j = 0; j < 4; j++)
    281c:	2300      	movs	r3, #0
    281e:	637b      	str	r3, [r7, #52]	; 0x34
    2820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2822:	2b03      	cmp	r3, #3
    2824:	d81f      	bhi.n	2866 <vUartTask(void*)+0xf2>
      {
        receive = uart2.Read();
    2826:	f107 0320 	add.w	r3, r7, #32
    282a:	4618      	mov	r0, r3
    282c:	f7ff ff8d 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    2830:	f107 0114 	add.w	r1, r7, #20
    2834:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    2838:	4608      	mov	r0, r1
    283a:	f7fe fcc1 	bl	11c0 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    283e:	4603      	mov	r3, r0
    2840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        shared_mem->rec[i].ui = (shared_mem->rec[i].ui << 8) | receive;
    2844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    284c:	021a      	lsls	r2, r3, #8
    284e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    2852:	ea42 0103 	orr.w	r1, r2, r3
    2856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    285a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for(size_t j = 0; j < 4; j++)
    285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2860:	3301      	adds	r3, #1
    2862:	637b      	str	r3, [r7, #52]	; 0x34
    2864:	e7dc      	b.n	2820 <vUartTask(void*)+0xac>
      }
      LOG_INFO("adc %d Read %f for finger %d", fing_arr[i], shared_mem->rec[i].f, i);
    2866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2868:	009b      	lsls	r3, r3, #2
    286a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    286e:	4413      	add	r3, r2
    2870:	f853 5c38 	ldr.w	r5, [r3, #-56]
    2874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2878:	009b      	lsls	r3, r3, #2
    287a:	4413      	add	r3, r2
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	4618      	mov	r0, r3
    2880:	f004 ffe4 	bl	784c <__aeabi_f2d>
    2884:	4603      	mov	r3, r0
    2886:	460c      	mov	r4, r1
    2888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    288a:	9204      	str	r2, [sp, #16]
    288c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    2890:	9500      	str	r5, [sp, #0]
    2892:	232e      	movs	r3, #46	; 0x2e
    2894:	4a07      	ldr	r2, [pc, #28]	; (28b4 <vUartTask(void*)+0x140>)
    2896:	490b      	ldr	r1, [pc, #44]	; (28c4 <vUartTask(void*)+0x150>)
    2898:	480b      	ldr	r0, [pc, #44]	; (28c8 <vUartTask(void*)+0x154>)
    289a:	f003 fccf 	bl	623c <printf>
    for(int i = 0; i < NUM_FINGERS; i++)
    289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28a0:	3301      	adds	r3, #1
    28a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    28a4:	e78e      	b.n	27c4 <vUartTask(void*)+0x50>
    }
    vTaskDelay(100);
    28a6:	2064      	movs	r0, #100	; 0x64
    28a8:	f001 fa6e 	bl	3d88 <vTaskDelay>
  }
    28ac:	e788      	b.n	27c0 <vUartTask(void*)+0x4c>
    28ae:	bf00      	nop
    28b0:	1000000c 	.word	0x1000000c
    28b4:	00009bc4 	.word	0x00009bc4
    28b8:	00009a98 	.word	0x00009a98
    28bc:	00009738 	.word	0x00009738
    28c0:	000097dc 	.word	0x000097dc
    28c4:	00009aa8 	.word	0x00009aa8
    28c8:	00009784 	.word	0x00009784

000028cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    28cc:	b490      	push	{r4, r7}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    28d6:	683b      	ldr	r3, [r7, #0]
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	ea4f 74e3 	mov.w	r4, r3, asr #31
    28de:	687a      	ldr	r2, [r7, #4]
    28e0:	e9c2 3400 	strd	r3, r4, [r2]
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	4618      	mov	r0, r3
    28e8:	3708      	adds	r7, #8
    28ea:	46bd      	mov	sp, r7
    28ec:	bc90      	pop	{r4, r7}
    28ee:	4770      	bx	lr

000028f0 <sjsu::Adc::Adc(sjsu::Adc const&)>:
    28f0:	b480      	push	{r7}
    28f2:	b083      	sub	sp, #12
    28f4:	af00      	add	r7, sp, #0
    28f6:	6078      	str	r0, [r7, #4]
    28f8:	6039      	str	r1, [r7, #0]
    28fa:	4a05      	ldr	r2, [pc, #20]	; (2910 <sjsu::Adc::Adc(sjsu::Adc const&)+0x20>)
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	601a      	str	r2, [r3, #0]
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	4618      	mov	r0, r3
    2904:	370c      	adds	r7, #12
    2906:	46bd      	mov	sp, r7
    2908:	f85d 7b04 	ldr.w	r7, [sp], #4
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	00009b44 	.word	0x00009b44

00002914 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>:
class Adc final : public sjsu::Adc
    2914:	b580      	push	{r7, lr}
    2916:	b082      	sub	sp, #8
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
    291c:	6039      	str	r1, [r7, #0]
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	683a      	ldr	r2, [r7, #0]
    2922:	4611      	mov	r1, r2
    2924:	4618      	mov	r0, r3
    2926:	f7ff ffe3 	bl	28f0 <sjsu::Adc::Adc(sjsu::Adc const&)>
    292a:	4a08      	ldr	r2, [pc, #32]	; (294c <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)+0x38>)
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	601a      	str	r2, [r3, #0]
    2930:	683b      	ldr	r3, [r7, #0]
    2932:	685a      	ldr	r2, [r3, #4]
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	605a      	str	r2, [r3, #4]
    2938:	683b      	ldr	r3, [r7, #0]
    293a:	689a      	ldr	r2, [r3, #8]
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	609a      	str	r2, [r3, #8]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	4618      	mov	r0, r3
    2944:	3708      	adds	r7, #8
    2946:	46bd      	mov	sp, r7
    2948:	bd80      	pop	{r7, pc}
    294a:	bf00      	nop
    294c:	00009b30 	.word	0x00009b30

00002950 <sjsu::Servo::Servo(sjsu::Servo const&)>:
class Servo
    2950:	b490      	push	{r4, r7}
    2952:	b082      	sub	sp, #8
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
    2958:	6039      	str	r1, [r7, #0]
    295a:	4a13      	ldr	r2, [pc, #76]	; (29a8 <sjsu::Servo::Servo(sjsu::Servo const&)+0x58>)
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	601a      	str	r2, [r3, #0]
    2960:	683b      	ldr	r3, [r7, #0]
    2962:	685a      	ldr	r2, [r3, #4]
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	605a      	str	r2, [r3, #4]
    2968:	687a      	ldr	r2, [r7, #4]
    296a:	683b      	ldr	r3, [r7, #0]
    296c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
    2970:	e9c2 3402 	strd	r3, r4, [r2, #8]
    2974:	687a      	ldr	r2, [r7, #4]
    2976:	683b      	ldr	r3, [r7, #0]
    2978:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
    297c:	e9c2 3404 	strd	r3, r4, [r2, #16]
    2980:	687a      	ldr	r2, [r7, #4]
    2982:	683b      	ldr	r3, [r7, #0]
    2984:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
    2988:	e9c2 3406 	strd	r3, r4, [r2, #24]
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	683a      	ldr	r2, [r7, #0]
    2990:	6a12      	ldr	r2, [r2, #32]
    2992:	621a      	str	r2, [r3, #32]
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	683a      	ldr	r2, [r7, #0]
    2998:	6a52      	ldr	r2, [r2, #36]	; 0x24
    299a:	625a      	str	r2, [r3, #36]	; 0x24
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	4618      	mov	r0, r3
    29a0:	3708      	adds	r7, #8
    29a2:	46bd      	mov	sp, r7
    29a4:	bc90      	pop	{r4, r7}
    29a6:	4770      	bx	lr
    29a8:	00009ae0 	.word	0x00009ae0

000029ac <vSensorAndActuatorTask(void*)>:
} 

void vSensorAndActuatorTask(void *pvParameters)
{
    29ac:	b5b0      	push	{r4, r5, r7, lr}
    29ae:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
    29b2:	af02      	add	r7, sp, #8
    29b4:	1d3b      	adds	r3, r7, #4
    29b6:	6018      	str	r0, [r3, #0]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    29b8:	1d3b      	adds	r3, r7, #4
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  float pot_position = 0;
    29c0:	f04f 0300 	mov.w	r3, #0
    29c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  uint32_t prev_vals[NUM_FINGERS] = {0};
    29c8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
    29cc:	2200      	movs	r2, #0
    29ce:	601a      	str	r2, [r3, #0]
    29d0:	605a      	str	r2, [r3, #4]
    29d2:	609a      	str	r2, [r3, #8]
                             DefaultSystemController())
    29d4:	f7fe fbd8 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    29d8:	4603      	mov	r3, r0
  // Pin initialization for ADC channels
  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    29da:	461a      	mov	r2, r3
    29dc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    29e0:	49e1      	ldr	r1, [pc, #900]	; (2d68 <vSensorAndActuatorTask(void*)+0x3bc>)
    29e2:	4618      	mov	r0, r3
    29e4:	f7fe fffc 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    29e8:	f7fe fbce 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    29ec:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc3(sjsu::lpc40xx::Adc::Channel::kChannel3);
    29ee:	461a      	mov	r2, r3
    29f0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
    29f4:	49dd      	ldr	r1, [pc, #884]	; (2d6c <vSensorAndActuatorTask(void*)+0x3c0>)
    29f6:	4618      	mov	r0, r3
    29f8:	f7fe fff2 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    29fc:	f7fe fbc4 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a00:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc4(sjsu::lpc40xx::Adc::Channel::kChannel4);
    2a02:	461a      	mov	r2, r3
    2a04:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    2a08:	49d9      	ldr	r1, [pc, #868]	; (2d70 <vSensorAndActuatorTask(void*)+0x3c4>)
    2a0a:	4618      	mov	r0, r3
    2a0c:	f7fe ffe8 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2a10:	f7fe fbba 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a14:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc5(sjsu::lpc40xx::Adc::Channel::kChannel5);
    2a16:	461a      	mov	r2, r3
    2a18:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
    2a1c:	49d5      	ldr	r1, [pc, #852]	; (2d74 <vSensorAndActuatorTask(void*)+0x3c8>)
    2a1e:	4618      	mov	r0, r3
    2a20:	f7fe ffde 	bl	19e0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    2a24:	f7fe fbb0 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a28:	4603      	mov	r3, r0

  // Pin initialization for Linear Actuators
  sjsu::lpc40xx::Pwm p2_0(sjsu::lpc40xx::Pwm::Channel::kPwm0);
    2a2a:	461a      	mov	r2, r3
    2a2c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
    2a30:	49d1      	ldr	r1, [pc, #836]	; (2d78 <vSensorAndActuatorTask(void*)+0x3cc>)
    2a32:	4618      	mov	r0, r3
    2a34:	f7ff f9ea 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a38:	f7fe fba6 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a3c:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_1(sjsu::lpc40xx::Pwm::Channel::kPwm1);
    2a3e:	461a      	mov	r2, r3
    2a40:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
    2a44:	49cd      	ldr	r1, [pc, #820]	; (2d7c <vSensorAndActuatorTask(void*)+0x3d0>)
    2a46:	4618      	mov	r0, r3
    2a48:	f7ff f9e0 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a4c:	f7fe fb9c 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a50:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_2(sjsu::lpc40xx::Pwm::Channel::kPwm2);
    2a52:	461a      	mov	r2, r3
    2a54:	f507 73c8 	add.w	r3, r7, #400	; 0x190
    2a58:	49c9      	ldr	r1, [pc, #804]	; (2d80 <vSensorAndActuatorTask(void*)+0x3d4>)
    2a5a:	4618      	mov	r0, r3
    2a5c:	f7ff f9d6 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a60:	f7fe fb92 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a64:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_4(sjsu::lpc40xx::Pwm::Channel::kPwm4);
    2a66:	461a      	mov	r2, r3
    2a68:	f507 73c2 	add.w	r3, r7, #388	; 0x184
    2a6c:	49c5      	ldr	r1, [pc, #788]	; (2d84 <vSensorAndActuatorTask(void*)+0x3d8>)
    2a6e:	4618      	mov	r0, r3
    2a70:	f7ff f9cc 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2a74:	f7fe fb88 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2a78:	4603      	mov	r3, r0
  sjsu::lpc40xx::Pwm p2_5(sjsu::lpc40xx::Pwm::Channel::kPwm5);
    2a7a:	461a      	mov	r2, r3
    2a7c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
    2a80:	49c1      	ldr	r1, [pc, #772]	; (2d88 <vSensorAndActuatorTask(void*)+0x3dc>)
    2a82:	4618      	mov	r0, r3
    2a84:	f7ff f9c2 	bl	1e0c <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
  // Object declaration for Linear actuators
  sjsu::Servo linear_actuator0(p2_0);
    2a88:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
    2a8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    2a90:	4611      	mov	r1, r2
    2a92:	4618      	mov	r0, r3
    2a94:	f7ff fc98 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator1(p2_1);
    2a98:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
    2a9c:	f507 7394 	add.w	r3, r7, #296	; 0x128
    2aa0:	4611      	mov	r1, r2
    2aa2:	4618      	mov	r0, r3
    2aa4:	f7ff fc90 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator2(p2_2);
    2aa8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
    2aac:	f507 7380 	add.w	r3, r7, #256	; 0x100
    2ab0:	4611      	mov	r1, r2
    2ab2:	4618      	mov	r0, r3
    2ab4:	f7ff fc88 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator3(p2_4);
    2ab8:	f507 72c2 	add.w	r2, r7, #388	; 0x184
    2abc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
    2ac0:	4611      	mov	r1, r2
    2ac2:	4618      	mov	r0, r3
    2ac4:	f7ff fc80 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  sjsu::Servo linear_actuator4(p2_5);
    2ac8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
    2acc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    2ad0:	4611      	mov	r1, r2
    2ad2:	4618      	mov	r0, r3
    2ad4:	f7ff fc78 	bl	23c8 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  // Arrays to store peripheral handles
  //sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc3, adc4, adc5};
  sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc3, adc4};
    2ad8:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
    2adc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
    2ae0:	4611      	mov	r1, r2
    2ae2:	4618      	mov	r0, r3
    2ae4:	f7ff ff16 	bl	2914 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2ae8:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
    2aec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
    2af0:	330c      	adds	r3, #12
    2af2:	4611      	mov	r1, r2
    2af4:	4618      	mov	r0, r3
    2af6:	f7ff ff0d 	bl	2914 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2afa:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    2afe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
    2b02:	3318      	adds	r3, #24
    2b04:	4611      	mov	r1, r2
    2b06:	4618      	mov	r0, r3
    2b08:	f7ff ff04 	bl	2914 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
  //sjsu::Servo linear_actuator_arr[NUM_FINGERS] = {linear_actuator0, linear_actuator1, linear_actuator2, linear_actuator3};
  sjsu::Servo linear_actuator_arr[NUM_FINGERS] = {linear_actuator0, linear_actuator1, linear_actuator2};
    2b0c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
    2b10:	f107 0310 	add.w	r3, r7, #16
    2b14:	4611      	mov	r1, r2
    2b16:	4618      	mov	r0, r3
    2b18:	f7ff ff1a 	bl	2950 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2b1c:	f507 7294 	add.w	r2, r7, #296	; 0x128
    2b20:	f107 0310 	add.w	r3, r7, #16
    2b24:	3328      	adds	r3, #40	; 0x28
    2b26:	4611      	mov	r1, r2
    2b28:	4618      	mov	r0, r3
    2b2a:	f7ff ff11 	bl	2950 <sjsu::Servo::Servo(sjsu::Servo const&)>
    2b2e:	f507 7280 	add.w	r2, r7, #256	; 0x100
    2b32:	f107 0310 	add.w	r3, r7, #16
    2b36:	3350      	adds	r3, #80	; 0x50
    2b38:	4611      	mov	r1, r2
    2b3a:	4618      	mov	r0, r3
    2b3c:	f7ff ff08 	bl	2950 <sjsu::Servo::Servo(sjsu::Servo const&)>
  // Set up Linear actuators with proper boundaries and initial conditions
  for(int i = 0; i < NUM_FINGERS; i++)
    2b40:	2300      	movs	r3, #0
    2b42:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    2b46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
    2b4a:	2b02      	cmp	r3, #2
    2b4c:	dc79      	bgt.n	2c42 <vSensorAndActuatorTask(void*)+0x296>
  {
      linear_actuator_arr[i].Initialize();
    2b4e:	f107 0110 	add.w	r1, r7, #16
    2b52:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2b56:	4613      	mov	r3, r2
    2b58:	009b      	lsls	r3, r3, #2
    2b5a:	4413      	add	r3, r2
    2b5c:	00db      	lsls	r3, r3, #3
    2b5e:	18c8      	adds	r0, r1, r3
    2b60:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2b64:	4613      	mov	r3, r2
    2b66:	009b      	lsls	r3, r3, #2
    2b68:	4413      	add	r3, r2
    2b6a:	00db      	lsls	r3, r3, #3
    2b6c:	f107 0110 	add.w	r1, r7, #16
    2b70:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2b74:	4613      	mov	r3, r2
    2b76:	009b      	lsls	r3, r3, #2
    2b78:	4413      	add	r3, r2
    2b7a:	00db      	lsls	r3, r3, #3
    2b7c:	440b      	add	r3, r1
    2b7e:	681b      	ldr	r3, [r3, #0]
    2b80:	681b      	ldr	r3, [r3, #0]
    2b82:	4a82      	ldr	r2, [pc, #520]	; (2d8c <vSensorAndActuatorTask(void*)+0x3e0>)
    2b84:	6811      	ldr	r1, [r2, #0]
    2b86:	4798      	blx	r3
      linear_actuator_arr[i].SetFrequency(motor_controller_freq);
    2b88:	f107 0110 	add.w	r1, r7, #16
    2b8c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2b90:	4613      	mov	r3, r2
    2b92:	009b      	lsls	r3, r3, #2
    2b94:	4413      	add	r3, r2
    2b96:	00db      	lsls	r3, r3, #3
    2b98:	18c8      	adds	r0, r1, r3
    2b9a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2b9e:	4613      	mov	r3, r2
    2ba0:	009b      	lsls	r3, r3, #2
    2ba2:	4413      	add	r3, r2
    2ba4:	00db      	lsls	r3, r3, #3
    2ba6:	f107 0110 	add.w	r1, r7, #16
    2baa:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2bae:	4613      	mov	r3, r2
    2bb0:	009b      	lsls	r3, r3, #2
    2bb2:	4413      	add	r3, r2
    2bb4:	00db      	lsls	r3, r3, #3
    2bb6:	440b      	add	r3, r1
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	3304      	adds	r3, #4
    2bbc:	681b      	ldr	r3, [r3, #0]
    2bbe:	4a74      	ldr	r2, [pc, #464]	; (2d90 <vSensorAndActuatorTask(void*)+0x3e4>)
    2bc0:	6811      	ldr	r1, [r2, #0]
    2bc2:	4798      	blx	r3
      linear_actuator_arr[i].SetPulseBounds(motor_controller_min_pulse, 
    2bc4:	f107 0110 	add.w	r1, r7, #16
    2bc8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2bcc:	4613      	mov	r3, r2
    2bce:	009b      	lsls	r3, r3, #2
    2bd0:	4413      	add	r3, r2
    2bd2:	00db      	lsls	r3, r3, #3
    2bd4:	18c8      	adds	r0, r1, r3
    2bd6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2bda:	4613      	mov	r3, r2
    2bdc:	009b      	lsls	r3, r3, #2
    2bde:	4413      	add	r3, r2
    2be0:	00db      	lsls	r3, r3, #3
                                            motor_controller_max_pulse);
    2be2:	f107 0110 	add.w	r1, r7, #16
    2be6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2bea:	4613      	mov	r3, r2
    2bec:	009b      	lsls	r3, r3, #2
    2bee:	4413      	add	r3, r2
    2bf0:	00db      	lsls	r3, r3, #3
    2bf2:	440b      	add	r3, r1
    2bf4:	681b      	ldr	r3, [r3, #0]
    2bf6:	3308      	adds	r3, #8
    2bf8:	6819      	ldr	r1, [r3, #0]
      linear_actuator_arr[i].SetPulseBounds(motor_controller_min_pulse, 
    2bfa:	4a66      	ldr	r2, [pc, #408]	; (2d94 <vSensorAndActuatorTask(void*)+0x3e8>)
    2bfc:	4b66      	ldr	r3, [pc, #408]	; (2d98 <vSensorAndActuatorTask(void*)+0x3ec>)
    2bfe:	e9d3 3400 	ldrd	r3, r4, [r3]
    2c02:	e9cd 3400 	strd	r3, r4, [sp]
    2c06:	e9d2 2300 	ldrd	r2, r3, [r2]
    2c0a:	4788      	blx	r1
      LOG_INFO("linear_actuator%d initialized", i);
    2c0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
    2c10:	9300      	str	r3, [sp, #0]
    2c12:	2357      	movs	r3, #87	; 0x57
    2c14:	4a61      	ldr	r2, [pc, #388]	; (2d9c <vSensorAndActuatorTask(void*)+0x3f0>)
    2c16:	4962      	ldr	r1, [pc, #392]	; (2da0 <vSensorAndActuatorTask(void*)+0x3f4>)
    2c18:	4862      	ldr	r0, [pc, #392]	; (2da4 <vSensorAndActuatorTask(void*)+0x3f8>)
    2c1a:	f003 fb0f 	bl	623c <printf>
      adc_arr[i].Initialize();
    2c1e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
    2c22:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
    2c26:	4613      	mov	r3, r2
    2c28:	005b      	lsls	r3, r3, #1
    2c2a:	4413      	add	r3, r2
    2c2c:	009b      	lsls	r3, r3, #2
    2c2e:	440b      	add	r3, r1
    2c30:	4618      	mov	r0, r3
    2c32:	f7fe ff27 	bl	1a84 <sjsu::lpc40xx::Adc::Initialize() const>
  for(int i = 0; i < NUM_FINGERS; i++)
    2c36:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
    2c3a:	3301      	adds	r3, #1
    2c3c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    2c40:	e781      	b.n	2b46 <vSensorAndActuatorTask(void*)+0x19a>
  }
  LOG_INFO("adc channels initialized");
    2c42:	235a      	movs	r3, #90	; 0x5a
    2c44:	4a55      	ldr	r2, [pc, #340]	; (2d9c <vSensorAndActuatorTask(void*)+0x3f0>)
    2c46:	4958      	ldr	r1, [pc, #352]	; (2da8 <vSensorAndActuatorTask(void*)+0x3fc>)
    2c48:	4858      	ldr	r0, [pc, #352]	; (2dac <vSensorAndActuatorTask(void*)+0x400>)
    2c4a:	f003 faf7 	bl	623c <printf>
  while(1)
  {
      for(int i = 0; i < NUM_FINGERS; i++)
    2c4e:	2300      	movs	r3, #0
    2c50:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    2c54:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    2c58:	2b02      	cmp	r3, #2
    2c5a:	dc4b      	bgt.n	2cf4 <vSensorAndActuatorTask(void*)+0x348>
      {
        //if(shared_mem->rec[i].ui != prev_vals[i])
        //{
          // Map the output from the PID controller to proper units for the LA 
          int converted_output = (sjsu::Map(shared_mem->rec[i].f, 0.0f, 3.3f, 1000.0f, 2000.0f));
    2c5c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
    2c60:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    2c64:	009b      	lsls	r3, r3, #2
    2c66:	4413      	add	r3, r2
    2c68:	edd3 7a00 	vldr	s15, [r3]
    2c6c:	ed9f 2a50 	vldr	s4, [pc, #320]	; 2db0 <vSensorAndActuatorTask(void*)+0x404>
    2c70:	eddf 1a50 	vldr	s3, [pc, #320]	; 2db4 <vSensorAndActuatorTask(void*)+0x408>
    2c74:	ed9f 1a50 	vldr	s2, [pc, #320]	; 2db8 <vSensorAndActuatorTask(void*)+0x40c>
    2c78:	eddf 0a50 	vldr	s1, [pc, #320]	; 2dbc <vSensorAndActuatorTask(void*)+0x410>
    2c7c:	eeb0 0a67 	vmov.f32	s0, s15
    2c80:	f000 fa64 	bl	314c <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    2c84:	eef0 7a40 	vmov.f32	s15, s0
    2c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2c8c:	ee17 2a90 	vmov	r2, s15
    2c90:	f107 030c 	add.w	r3, r7, #12
    2c94:	601a      	str	r2, [r3, #0]
          // Update the linear actuator position 
          linear_actuator_arr[i].SetPulseWidthInMicroseconds(static_cast<std::chrono::microseconds>(converted_output));
    2c96:	f107 0110 	add.w	r1, r7, #16
    2c9a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
    2c9e:	4613      	mov	r3, r2
    2ca0:	009b      	lsls	r3, r3, #2
    2ca2:	4413      	add	r3, r2
    2ca4:	00db      	lsls	r3, r3, #3
    2ca6:	18cd      	adds	r5, r1, r3
    2ca8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
    2cac:	4613      	mov	r3, r2
    2cae:	009b      	lsls	r3, r3, #2
    2cb0:	4413      	add	r3, r2
    2cb2:	00db      	lsls	r3, r3, #3
    2cb4:	f107 0110 	add.w	r1, r7, #16
    2cb8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
    2cbc:	4613      	mov	r3, r2
    2cbe:	009b      	lsls	r3, r3, #2
    2cc0:	4413      	add	r3, r2
    2cc2:	00db      	lsls	r3, r3, #3
    2cc4:	440b      	add	r3, r1
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	3310      	adds	r3, #16
    2cca:	681c      	ldr	r4, [r3, #0]
    2ccc:	f107 020c 	add.w	r2, r7, #12
    2cd0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
    2cd4:	4611      	mov	r1, r2
    2cd6:	4618      	mov	r0, r3
    2cd8:	f7ff fdf8 	bl	28cc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2cdc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
    2ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ce4:	4628      	mov	r0, r5
    2ce6:	47a0      	blx	r4
      for(int i = 0; i < NUM_FINGERS; i++)
    2ce8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
    2cec:	3301      	adds	r3, #1
    2cee:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    2cf2:	e7af      	b.n	2c54 <vSensorAndActuatorTask(void*)+0x2a8>
          //prev_vals[i] = shared_mem->rec[i].ui;
        //}
      }
    for(int i = 0; i < NUM_FINGERS; i++)
    2cf4:	2300      	movs	r3, #0
    2cf6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    2cfa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
    2cfe:	2b02      	cmp	r3, #2
    2d00:	dc2e      	bgt.n	2d60 <vSensorAndActuatorTask(void*)+0x3b4>
    {
      pot_position = adc_arr[i].Read();
    2d02:	f107 018c 	add.w	r1, r7, #140	; 0x8c
    2d06:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
    2d0a:	4613      	mov	r3, r2
    2d0c:	005b      	lsls	r3, r3, #1
    2d0e:	4413      	add	r3, r2
    2d10:	009b      	lsls	r3, r3, #2
    2d12:	440b      	add	r3, r1
    2d14:	4618      	mov	r0, r3
    2d16:	f7fe ff43 	bl	1ba0 <sjsu::lpc40xx::Adc::Read() const>
    2d1a:	ee07 0a90 	vmov	s15, r0
    2d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d22:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
      //LOG_INFO("Read %f from potentiometer %d", pot_position, i);
      shared_mem->sen[i].f = sjsu::Map(pot_position, 0, 4095, 0.0f, CURRENT_MAX);
    2d26:	ed9f 1a22 	vldr	s2, [pc, #136]	; 2db0 <vSensorAndActuatorTask(void*)+0x404>
    2d2a:	eddf 0a24 	vldr	s1, [pc, #144]	; 2dbc <vSensorAndActuatorTask(void*)+0x410>
    2d2e:	f640 71ff 	movw	r1, #4095	; 0xfff
    2d32:	2000      	movs	r0, #0
    2d34:	ed97 0a7f 	vldr	s0, [r7, #508]	; 0x1fc
    2d38:	f000 fa49 	bl	31ce <float sjsu::Map<float, int, float>(float, int, int, float, float)>
    2d3c:	eef0 7a40 	vmov.f32	s15, s0
    2d40:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
    2d44:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
    2d48:	3302      	adds	r3, #2
    2d4a:	009b      	lsls	r3, r3, #2
    2d4c:	4413      	add	r3, r2
    2d4e:	3304      	adds	r3, #4
    2d50:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < NUM_FINGERS; i++)
    2d54:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
    2d58:	3301      	adds	r3, #1
    2d5a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    2d5e:	e7cc      	b.n	2cfa <vSensorAndActuatorTask(void*)+0x34e>
    }
    vTaskDelay(100);
    2d60:	2064      	movs	r0, #100	; 0x64
    2d62:	f001 f811 	bl	3d88 <vTaskDelay>
  }
    2d66:	e772      	b.n	2c4e <vSensorAndActuatorTask(void*)+0x2a2>
    2d68:	000099b8 	.word	0x000099b8
    2d6c:	000099c0 	.word	0x000099c0
    2d70:	000099c8 	.word	0x000099c8
    2d74:	000099d0 	.word	0x000099d0
    2d78:	00009a2c 	.word	0x00009a2c
    2d7c:	00009a38 	.word	0x00009a38
    2d80:	00009a44 	.word	0x00009a44
    2d84:	00009a50 	.word	0x00009a50
    2d88:	00009a5c 	.word	0x00009a5c
    2d8c:	00009a80 	.word	0x00009a80
    2d90:	00009a84 	.word	0x00009a84
    2d94:	00009a88 	.word	0x00009a88
    2d98:	00009a90 	.word	0x00009a90
    2d9c:	00009d24 	.word	0x00009d24
    2da0:	00009ab8 	.word	0x00009ab8
    2da4:	000097e8 	.word	0x000097e8
    2da8:	00009ac8 	.word	0x00009ac8
    2dac:	00009840 	.word	0x00009840
    2db0:	44fa0000 	.word	0x44fa0000
    2db4:	447a0000 	.word	0x447a0000
    2db8:	40533333 	.word	0x40533333
    2dbc:	00000000 	.word	0x00000000

00002dc0 <main>:
#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"
#include "third_party/FreeRTOS/Source/include/queue.h"

int main()
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b088      	sub	sp, #32
    2dc4:	af02      	add	r7, sp, #8
  Q = xQueueCreate(10, sizeof(vals[NUM_FINGERS]));
    2dc6:	2200      	movs	r2, #0
    2dc8:	210c      	movs	r1, #12
    2dca:	200a      	movs	r0, #10
    2dcc:	f001 fd19 	bl	4802 <xQueueGenericCreate>
    2dd0:	4602      	mov	r2, r0
    2dd2:	4b10      	ldr	r3, [pc, #64]	; (2e14 <main+0x54>)
    2dd4:	601a      	str	r2, [r3, #0]
  paramsStruct pvParameters;
  xTaskCreate(vUartTask, "uart_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 2, &xUartTaskHandle);
    2dd6:	463a      	mov	r2, r7
    2dd8:	4b0f      	ldr	r3, [pc, #60]	; (2e18 <main+0x58>)
    2dda:	9301      	str	r3, [sp, #4]
    2ddc:	2302      	movs	r3, #2
    2dde:	9300      	str	r3, [sp, #0]
    2de0:	4613      	mov	r3, r2
    2de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2de6:	490d      	ldr	r1, [pc, #52]	; (2e1c <main+0x5c>)
    2de8:	480d      	ldr	r0, [pc, #52]	; (2e20 <main+0x60>)
    2dea:	f000 fe9f 	bl	3b2c <xTaskCreate>
  xTaskCreate(vSensorAndActuatorTask, "linear actuator and current sensor task", 1024, &pvParameters, tskIDLE_PRIORITY + 1, &xSensorAndActuatorHandle);
    2dee:	463a      	mov	r2, r7
    2df0:	4b0c      	ldr	r3, [pc, #48]	; (2e24 <main+0x64>)
    2df2:	9301      	str	r3, [sp, #4]
    2df4:	2301      	movs	r3, #1
    2df6:	9300      	str	r3, [sp, #0]
    2df8:	4613      	mov	r3, r2
    2dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2dfe:	490a      	ldr	r1, [pc, #40]	; (2e28 <main+0x68>)
    2e00:	480a      	ldr	r0, [pc, #40]	; (2e2c <main+0x6c>)
    2e02:	f000 fe93 	bl	3b2c <xTaskCreate>
  //xTaskCreate(vLinearActuatorTask, "linear_actuator_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 1, &xLinearActuatorHandle);
  //xTaskCreate(vCurrentSensorTask, "current_sensor_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 1, &xCurrentSensorHandle);

  vTaskStartScheduler();
    2e06:	f000 ffe3 	bl	3dd0 <vTaskStartScheduler>
}
    2e0a:	2300      	movs	r3, #0
    2e0c:	4618      	mov	r0, r3
    2e0e:	3718      	adds	r7, #24
    2e10:	46bd      	mov	sp, r7
    2e12:	bd80      	pop	{r7, pc}
    2e14:	10000274 	.word	0x10000274
    2e18:	1000026c 	.word	0x1000026c
    2e1c:	00009894 	.word	0x00009894
    2e20:	00002775 	.word	0x00002775
    2e24:	10000270 	.word	0x10000270
    2e28:	000098a0 	.word	0x000098a0
    2e2c:	000029ad 	.word	0x000029ad

00002e30 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2e30:	b580      	push	{r7, lr}
    2e32:	b084      	sub	sp, #16
    2e34:	af00      	add	r7, sp, #0
    2e36:	60f8      	str	r0, [r7, #12]
    2e38:	460b      	mov	r3, r1
    2e3a:	80ba      	strh	r2, [r7, #4]
    2e3c:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    2e3e:	793b      	ldrb	r3, [r7, #4]
    2e40:	461a      	mov	r2, r3
    2e42:	797b      	ldrb	r3, [r7, #5]
    2e44:	7af9      	ldrb	r1, [r7, #11]
    2e46:	68f8      	ldr	r0, [r7, #12]
    2e48:	f000 fa0a 	bl	3260 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    2e4c:	4603      	mov	r3, r0
}
    2e4e:	4618      	mov	r0, r3
    2e50:	3710      	adds	r7, #16
    2e52:	46bd      	mov	sp, r7
    2e54:	bd80      	pop	{r7, pc}

00002e56 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    2e56:	b580      	push	{r7, lr}
    2e58:	b084      	sub	sp, #16
    2e5a:	af00      	add	r7, sp, #0
    2e5c:	6078      	str	r0, [r7, #4]
    2e5e:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	4618      	mov	r0, r3
    2e64:	f7fd ff82 	bl	d6c <units::linear_scale<float>::operator()() const>
    2e68:	eef0 6a40 	vmov.f32	s13, s0
    2e6c:	683b      	ldr	r3, [r7, #0]
    2e6e:	ee07 3a90 	vmov	s15, r3
    2e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    2e7a:	f107 030c 	add.w	r3, r7, #12
    2e7e:	eeb0 0a47 	vmov.f32	s0, s14
    2e82:	4618      	mov	r0, r3
    2e84:	f7fd fbf5 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2e88:	68fb      	ldr	r3, [r7, #12]
	}
    2e8a:	4618      	mov	r0, r3
    2e8c:	3710      	adds	r7, #16
    2e8e:	46bd      	mov	sp, r7
    2e90:	bd80      	pop	{r7, pc}

00002e92 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    2e92:	b590      	push	{r4, r7, lr}
    2e94:	b087      	sub	sp, #28
    2e96:	af00      	add	r7, sp, #0
    2e98:	60f8      	str	r0, [r7, #12]
    2e9a:	60b9      	str	r1, [r7, #8]
    2e9c:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    2e9e:	68bb      	ldr	r3, [r7, #8]
    2ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
    2ea4:	1c59      	adds	r1, r3, #1
    2ea6:	f144 0200 	adc.w	r2, r4, #0
    2eaa:	68b8      	ldr	r0, [r7, #8]
    2eac:	e9c0 1200 	strd	r1, r2, [r0]
    2eb0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2eb4:	f107 0310 	add.w	r3, r7, #16
    2eb8:	4619      	mov	r1, r3
    2eba:	68f8      	ldr	r0, [r7, #12]
    2ebc:	f7fd fd56 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2ec0:	68f8      	ldr	r0, [r7, #12]
    2ec2:	371c      	adds	r7, #28
    2ec4:	46bd      	mov	sp, r7
    2ec6:	bd90      	pop	{r4, r7, pc}

00002ec8 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    // comparisons
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
    2ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eca:	b087      	sub	sp, #28
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
    2ed0:	6039      	str	r1, [r7, #0]
		 const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() == __ct(__rhs).count();
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	e9d3 3400 	ldrd	r3, r4, [r3]
    2ed8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2edc:	f107 0308 	add.w	r3, r7, #8
    2ee0:	4618      	mov	r0, r3
    2ee2:	f7ff fb6d 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2ee6:	4605      	mov	r5, r0
    2ee8:	460e      	mov	r6, r1
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	e9d3 3400 	ldrd	r3, r4, [r3]
    2ef0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2ef4:	f107 0310 	add.w	r3, r7, #16
    2ef8:	4618      	mov	r0, r3
    2efa:	f7ff fb61 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2efe:	4603      	mov	r3, r0
    2f00:	460c      	mov	r4, r1
    2f02:	42a6      	cmp	r6, r4
    2f04:	bf06      	itte	eq
    2f06:	429d      	cmpeq	r5, r3
    2f08:	2301      	moveq	r3, #1
    2f0a:	2300      	movne	r3, #0
    2f0c:	b2db      	uxtb	r3, r3
      }
    2f0e:	4618      	mov	r0, r3
    2f10:	371c      	adds	r7, #28
    2f12:	46bd      	mov	sp, r7
    2f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f16 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2f16:	b580      	push	{r7, lr}
    2f18:	ed2d 8b02 	vpush	{d8}
    2f1c:	b082      	sub	sp, #8
    2f1e:	af00      	add	r7, sp, #0
    2f20:	6078      	str	r0, [r7, #4]
    2f22:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	ed93 8a00 	vldr	s16, [r3]
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	4618      	mov	r0, r3
    2f2e:	f7fd fb80 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2f32:	eef0 7a40 	vmov.f32	s15, s0
    2f36:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2f3e:	bfcc      	ite	gt
    2f40:	2301      	movgt	r3, #1
    2f42:	2300      	movle	r3, #0
    2f44:	b2db      	uxtb	r3, r3
		}
    2f46:	4618      	mov	r0, r3
    2f48:	3708      	adds	r7, #8
    2f4a:	46bd      	mov	sp, r7
    2f4c:	ecbd 8b02 	vpop	{d8}
    2f50:	bd80      	pop	{r7, pc}

00002f52 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    2f52:	b580      	push	{r7, lr}
    2f54:	b082      	sub	sp, #8
    2f56:	af00      	add	r7, sp, #0
    2f58:	6078      	str	r0, [r7, #4]
    2f5a:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    2f5c:	683b      	ldr	r3, [r7, #0]
    2f5e:	4618      	mov	r0, r3
    2f60:	f7fd fd26 	bl	9b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2f64:	eef0 7a40 	vmov.f32	s15, s0
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    2f6e:	687b      	ldr	r3, [r7, #4]
		}
    2f70:	4618      	mov	r0, r3
    2f72:	3708      	adds	r7, #8
    2f74:	46bd      	mov	sp, r7
    2f76:	bd80      	pop	{r7, pc}

00002f78 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    2f78:	b480      	push	{r7}
    2f7a:	b083      	sub	sp, #12
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	6078      	str	r0, [r7, #4]
    2f80:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    2f82:	2201      	movs	r2, #1
    2f84:	683b      	ldr	r3, [r7, #0]
    2f86:	fa02 f303 	lsl.w	r3, r2, r3
    2f8a:	461a      	mov	r2, r3
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	4313      	orrs	r3, r2
}
    2f90:	4618      	mov	r0, r3
    2f92:	370c      	adds	r7, #12
    2f94:	46bd      	mov	sp, r7
    2f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f9a:	4770      	bx	lr

00002f9c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    2f9c:	b480      	push	{r7}
    2f9e:	b083      	sub	sp, #12
    2fa0:	af00      	add	r7, sp, #0
    2fa2:	6078      	str	r0, [r7, #4]
    2fa4:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    2fa6:	2201      	movs	r2, #1
    2fa8:	683b      	ldr	r3, [r7, #0]
    2faa:	fa02 f303 	lsl.w	r3, r2, r3
    2fae:	43db      	mvns	r3, r3
    2fb0:	461a      	mov	r2, r3
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	4013      	ands	r3, r2
}
    2fb6:	4618      	mov	r0, r3
    2fb8:	370c      	adds	r7, #12
    2fba:	46bd      	mov	sp, r7
    2fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fc0:	4770      	bx	lr

00002fc2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2fc2:	b580      	push	{r7, lr}
    2fc4:	b084      	sub	sp, #16
    2fc6:	af00      	add	r7, sp, #0
    2fc8:	60f8      	str	r0, [r7, #12]
    2fca:	60b9      	str	r1, [r7, #8]
    2fcc:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2fce:	793b      	ldrb	r3, [r7, #4]
    2fd0:	461a      	mov	r2, r3
    2fd2:	797b      	ldrb	r3, [r7, #5]
    2fd4:	68b9      	ldr	r1, [r7, #8]
    2fd6:	68f8      	ldr	r0, [r7, #12]
    2fd8:	f000 f9c4 	bl	3364 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    2fdc:	4603      	mov	r3, r0
}
    2fde:	4618      	mov	r0, r3
    2fe0:	3710      	adds	r7, #16
    2fe2:	46bd      	mov	sp, r7
    2fe4:	bd80      	pop	{r7, pc}

00002fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    2fe6:	b580      	push	{r7, lr}
    2fe8:	b084      	sub	sp, #16
    2fea:	af00      	add	r7, sp, #0
    2fec:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	4618      	mov	r0, r3
    2ff2:	f7fd febb 	bl	d6c <units::linear_scale<float>::operator()() const>
    2ff6:	eef0 7a40 	vmov.f32	s15, s0
    2ffa:	edc7 7a03 	vstr	s15, [r7, #12]
    2ffe:	f107 030c 	add.w	r3, r7, #12
    3002:	4618      	mov	r0, r3
    3004:	f000 f9da 	bl	33bc <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3008:	eef0 7a40 	vmov.f32	s15, s0
    300c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3010:	ee17 3a90 	vmov	r3, s15
		}
    3014:	4618      	mov	r0, r3
    3016:	3710      	adds	r7, #16
    3018:	46bd      	mov	sp, r7
    301a:	bd80      	pop	{r7, pc}

0000301c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    301c:	b480      	push	{r7}
    301e:	b083      	sub	sp, #12
    3020:	af00      	add	r7, sp, #0
    3022:	6078      	str	r0, [r7, #4]
    3024:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    3026:	2201      	movs	r2, #1
    3028:	683b      	ldr	r3, [r7, #0]
    302a:	fa02 f303 	lsl.w	r3, r2, r3
    302e:	461a      	mov	r2, r3
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	4013      	ands	r3, r2
    3034:	2b00      	cmp	r3, #0
    3036:	bf14      	ite	ne
    3038:	2301      	movne	r3, #1
    303a:	2300      	moveq	r3, #0
    303c:	b2db      	uxtb	r3, r3
}
    303e:	4618      	mov	r0, r3
    3040:	370c      	adds	r7, #12
    3042:	46bd      	mov	sp, r7
    3044:	f85d 7b04 	ldr.w	r7, [sp], #4
    3048:	4770      	bx	lr

0000304a <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    304a:	b480      	push	{r7}
    304c:	b083      	sub	sp, #12
    304e:	af00      	add	r7, sp, #0
    3050:	4603      	mov	r3, r0
    3052:	6039      	str	r1, [r7, #0]
    3054:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    3056:	79fa      	ldrb	r2, [r7, #7]
    3058:	683b      	ldr	r3, [r7, #0]
    305a:	fa42 f303 	asr.w	r3, r2, r3
    305e:	f003 0301 	and.w	r3, r3, #1
    3062:	2b00      	cmp	r3, #0
    3064:	bf14      	ite	ne
    3066:	2301      	movne	r3, #1
    3068:	2300      	moveq	r3, #0
    306a:	b2db      	uxtb	r3, r3
}
    306c:	4618      	mov	r0, r3
    306e:	370c      	adds	r7, #12
    3070:	46bd      	mov	sp, r7
    3072:	f85d 7b04 	ldr.w	r7, [sp], #4
    3076:	4770      	bx	lr

00003078 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    3078:	b580      	push	{r7, lr}
    307a:	b082      	sub	sp, #8
    307c:	af00      	add	r7, sp, #0
    307e:	6078      	str	r0, [r7, #4]
    3080:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    3082:	783b      	ldrb	r3, [r7, #0]
    3084:	4619      	mov	r1, r3
    3086:	6878      	ldr	r0, [r7, #4]
    3088:	f7ff ffc8 	bl	301c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    308c:	4603      	mov	r3, r0
}
    308e:	4618      	mov	r0, r3
    3090:	3708      	adds	r7, #8
    3092:	46bd      	mov	sp, r7
    3094:	bd80      	pop	{r7, pc}

00003096 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    3096:	b580      	push	{r7, lr}
    3098:	b082      	sub	sp, #8
    309a:	af00      	add	r7, sp, #0
    309c:	6078      	str	r0, [r7, #4]
    309e:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    30a0:	783b      	ldrb	r3, [r7, #0]
    30a2:	4619      	mov	r1, r3
    30a4:	6878      	ldr	r0, [r7, #4]
    30a6:	f7ff ff67 	bl	2f78 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    30aa:	4603      	mov	r3, r0
}
    30ac:	4618      	mov	r0, r3
    30ae:	3708      	adds	r7, #8
    30b0:	46bd      	mov	sp, r7
    30b2:	bd80      	pop	{r7, pc}

000030b4 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    30b4:	b580      	push	{r7, lr}
    30b6:	b082      	sub	sp, #8
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
    30bc:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    30be:	783b      	ldrb	r3, [r7, #0]
    30c0:	4619      	mov	r1, r3
    30c2:	787b      	ldrb	r3, [r7, #1]
    30c4:	461a      	mov	r2, r3
    30c6:	6878      	ldr	r0, [r7, #4]
    30c8:	f000 f986 	bl	33d8 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    30cc:	4603      	mov	r3, r0
}
    30ce:	4618      	mov	r0, r3
    30d0:	3708      	adds	r7, #8
    30d2:	46bd      	mov	sp, r7
    30d4:	bd80      	pop	{r7, pc}

000030d6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    30d6:	b580      	push	{r7, lr}
    30d8:	b084      	sub	sp, #16
    30da:	af00      	add	r7, sp, #0
    30dc:	60f8      	str	r0, [r7, #12]
    30de:	60b9      	str	r1, [r7, #8]
    30e0:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    30e2:	793b      	ldrb	r3, [r7, #4]
    30e4:	461a      	mov	r2, r3
    30e6:	797b      	ldrb	r3, [r7, #5]
    30e8:	68b9      	ldr	r1, [r7, #8]
    30ea:	68f8      	ldr	r0, [r7, #12]
    30ec:	f000 f992 	bl	3414 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    30f0:	4603      	mov	r3, r0
}
    30f2:	4618      	mov	r0, r3
    30f4:	3710      	adds	r7, #16
    30f6:	46bd      	mov	sp, r7
    30f8:	bd80      	pop	{r7, pc}

000030fa <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    30fa:	b580      	push	{r7, lr}
    30fc:	b082      	sub	sp, #8
    30fe:	af00      	add	r7, sp, #0
    3100:	6078      	str	r0, [r7, #4]
    3102:	8039      	strh	r1, [r7, #0]
  return Clear(target, bitmask.position);
    3104:	783b      	ldrb	r3, [r7, #0]
    3106:	4619      	mov	r1, r3
    3108:	6878      	ldr	r0, [r7, #4]
    310a:	f7ff ff47 	bl	2f9c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    310e:	4603      	mov	r3, r0
}
    3110:	4618      	mov	r0, r3
    3112:	3708      	adds	r7, #8
    3114:	46bd      	mov	sp, r7
    3116:	bd80      	pop	{r7, pc}

00003118 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    3118:	b480      	push	{r7}
    311a:	b085      	sub	sp, #20
    311c:	af00      	add	r7, sp, #0
    311e:	60f8      	str	r0, [r7, #12]
    3120:	7239      	strb	r1, [r7, #8]
    3122:	713a      	strb	r2, [r7, #4]
    3124:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    3126:	68fb      	ldr	r3, [r7, #12]
    3128:	edd3 7a00 	vldr	s15, [r3]
    312c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 3148 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    3130:	eec7 6a87 	vdiv.f32	s13, s15, s14
    3134:	eef0 7a66 	vmov.f32	s15, s13
		}
    3138:	eeb0 0a67 	vmov.f32	s0, s15
    313c:	3714      	adds	r7, #20
    313e:	46bd      	mov	sp, r7
    3140:	f85d 7b04 	ldr.w	r7, [sp], #4
    3144:	4770      	bx	lr
    3146:	bf00      	nop
    3148:	49742400 	.word	0x49742400

0000314c <float sjsu::Map<float, float, float>(float, float, float, float, float)>:
/// @param min - current minimum value that the value can reach
/// @param max - current maximum value that the value can reach
/// @param new_min - the new minimum value to scale and shift the old value to
/// @param new_max - the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    314c:	b480      	push	{r7}
    314e:	b08f      	sub	sp, #60	; 0x3c
    3150:	af00      	add	r7, sp, #0
    3152:	ed87 0a05 	vstr	s0, [r7, #20]
    3156:	edc7 0a04 	vstr	s1, [r7, #16]
    315a:	ed87 1a03 	vstr	s2, [r7, #12]
    315e:	edc7 1a02 	vstr	s3, [r7, #8]
    3162:	ed87 2a01 	vstr	s4, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    3166:	697b      	ldr	r3, [r7, #20]
    3168:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    316a:	693b      	ldr	r3, [r7, #16]
    316c:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    316e:	68fb      	ldr	r3, [r7, #12]
    3170:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    3172:	68bb      	ldr	r3, [r7, #8]
    3174:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    317a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    317e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    3182:	ee77 6a67 	vsub.f32	s13, s14, s15
    3186:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    318a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    318e:	ee37 7a67 	vsub.f32	s14, s14, s15
    3192:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3196:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    319a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    319e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    31a2:	ee37 7a67 	vsub.f32	s14, s14, s15
    31a6:	edd7 7a08 	vldr	s15, [r7, #32]
    31aa:	ee67 7a27 	vmul.f32	s15, s14, s15
    31ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    31b2:	ee77 7a27 	vadd.f32	s15, s14, s15
    31b6:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    31ba:	69fb      	ldr	r3, [r7, #28]
    31bc:	ee07 3a90 	vmov	s15, r3
};
    31c0:	eeb0 0a67 	vmov.f32	s0, s15
    31c4:	373c      	adds	r7, #60	; 0x3c
    31c6:	46bd      	mov	sp, r7
    31c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31cc:	4770      	bx	lr

000031ce <float sjsu::Map<float, int, float>(float, int, int, float, float)>:
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    31ce:	b480      	push	{r7}
    31d0:	b08f      	sub	sp, #60	; 0x3c
    31d2:	af00      	add	r7, sp, #0
    31d4:	ed87 0a05 	vstr	s0, [r7, #20]
    31d8:	6138      	str	r0, [r7, #16]
    31da:	60f9      	str	r1, [r7, #12]
    31dc:	edc7 0a02 	vstr	s1, [r7, #8]
    31e0:	ed87 1a01 	vstr	s2, [r7, #4]
  float map_value   = static_cast<float>(value);
    31e4:	697b      	ldr	r3, [r7, #20]
    31e6:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    31e8:	693b      	ldr	r3, [r7, #16]
    31ea:	ee07 3a90 	vmov	s15, r3
    31ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    31f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    31f6:	68fb      	ldr	r3, [r7, #12]
    31f8:	ee07 3a90 	vmov	s15, r3
    31fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3200:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    3204:	68bb      	ldr	r3, [r7, #8]
    3206:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    320c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    3210:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    3214:	ee77 6a67 	vsub.f32	s13, s14, s15
    3218:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    321c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3220:	ee37 7a67 	vsub.f32	s14, s14, s15
    3224:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3228:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    322c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    3230:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3234:	ee37 7a67 	vsub.f32	s14, s14, s15
    3238:	edd7 7a08 	vldr	s15, [r7, #32]
    323c:	ee67 7a27 	vmul.f32	s15, s14, s15
    3240:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    3244:	ee77 7a27 	vadd.f32	s15, s14, s15
    3248:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    324c:	69fb      	ldr	r3, [r7, #28]
    324e:	ee07 3a90 	vmov	s15, r3
};
    3252:	eeb0 0a67 	vmov.f32	s0, s15
    3256:	373c      	adds	r7, #60	; 0x3c
    3258:	46bd      	mov	sp, r7
    325a:	f85d 7b04 	ldr.w	r7, [sp], #4
    325e:	4770      	bx	lr

00003260 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3260:	b480      	push	{r7}
    3262:	b089      	sub	sp, #36	; 0x24
    3264:	af00      	add	r7, sp, #0
    3266:	60f8      	str	r0, [r7, #12]
    3268:	607a      	str	r2, [r7, #4]
    326a:	603b      	str	r3, [r7, #0]
    326c:	460b      	mov	r3, r1
    326e:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3274:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3276:	2320      	movs	r3, #32
    3278:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    327a:	683b      	ldr	r3, [r7, #0]
    327c:	f1c3 0320 	rsb	r3, r3, #32
    3280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3284:	fa22 f303 	lsr.w	r3, r2, r3
    3288:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    328a:	697a      	ldr	r2, [r7, #20]
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	fa02 f303 	lsl.w	r3, r2, r3
    3292:	43db      	mvns	r3, r3
    3294:	68fa      	ldr	r2, [r7, #12]
    3296:	4013      	ands	r3, r2
    3298:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    329a:	7afa      	ldrb	r2, [r7, #11]
    329c:	697b      	ldr	r3, [r7, #20]
    329e:	401a      	ands	r2, r3
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	fa02 f303 	lsl.w	r3, r2, r3
    32a6:	68fa      	ldr	r2, [r7, #12]
    32a8:	4313      	orrs	r3, r2
    32aa:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    32ac:	68fb      	ldr	r3, [r7, #12]
}
    32ae:	4618      	mov	r0, r3
    32b0:	3724      	adds	r7, #36	; 0x24
    32b2:	46bd      	mov	sp, r7
    32b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b8:	4770      	bx	lr

000032ba <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    32ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    32bc:	b08b      	sub	sp, #44	; 0x2c
    32be:	af00      	add	r7, sp, #0
    32c0:	60f8      	str	r0, [r7, #12]
    32c2:	60b9      	str	r1, [r7, #8]
    32c4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    32c6:	68bb      	ldr	r3, [r7, #8]
    32c8:	e9d3 3400 	ldrd	r3, r4, [r3]
    32cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
    32d0:	f107 0318 	add.w	r3, r7, #24
    32d4:	4618      	mov	r0, r3
    32d6:	f7ff f973 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    32da:	4605      	mov	r5, r0
    32dc:	460e      	mov	r6, r1
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    32e4:	e9c7 3408 	strd	r3, r4, [r7, #32]
    32e8:	f107 0320 	add.w	r3, r7, #32
    32ec:	4618      	mov	r0, r3
    32ee:	f7ff f967 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    32f2:	460a      	mov	r2, r1
    32f4:	4601      	mov	r1, r0
    32f6:	194b      	adds	r3, r1, r5
    32f8:	eb42 0406 	adc.w	r4, r2, r6
    32fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3300:	f107 0310 	add.w	r3, r7, #16
    3304:	4619      	mov	r1, r3
    3306:	68f8      	ldr	r0, [r7, #12]
    3308:	f7fd fb30 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    330c:	68f8      	ldr	r0, [r7, #12]
    330e:	372c      	adds	r7, #44	; 0x2c
    3310:	46bd      	mov	sp, r7
    3312:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003314 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
    3314:	b5f0      	push	{r4, r5, r6, r7, lr}
    3316:	b087      	sub	sp, #28
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
    331c:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	e9d3 3400 	ldrd	r3, r4, [r3]
    3324:	e9c7 3402 	strd	r3, r4, [r7, #8]
    3328:	f107 0308 	add.w	r3, r7, #8
    332c:	4618      	mov	r0, r3
    332e:	f7ff f947 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    3332:	4605      	mov	r5, r0
    3334:	460e      	mov	r6, r1
    3336:	683b      	ldr	r3, [r7, #0]
    3338:	e9d3 3400 	ldrd	r3, r4, [r3]
    333c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    3340:	f107 0310 	add.w	r3, r7, #16
    3344:	4618      	mov	r0, r3
    3346:	f7ff f93b 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    334a:	4603      	mov	r3, r0
    334c:	460c      	mov	r4, r1
    334e:	429d      	cmp	r5, r3
    3350:	eb76 0304 	sbcs.w	r3, r6, r4
    3354:	bfb4      	ite	lt
    3356:	2301      	movlt	r3, #1
    3358:	2300      	movge	r3, #0
    335a:	b2db      	uxtb	r3, r3
      }
    335c:	4618      	mov	r0, r3
    335e:	371c      	adds	r7, #28
    3360:	46bd      	mov	sp, r7
    3362:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003364 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3364:	b480      	push	{r7}
    3366:	b089      	sub	sp, #36	; 0x24
    3368:	af00      	add	r7, sp, #0
    336a:	60f8      	str	r0, [r7, #12]
    336c:	60b9      	str	r1, [r7, #8]
    336e:	607a      	str	r2, [r7, #4]
    3370:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3376:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3378:	2320      	movs	r3, #32
    337a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    337c:	683b      	ldr	r3, [r7, #0]
    337e:	f1c3 0320 	rsb	r3, r3, #32
    3382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3386:	fa22 f303 	lsr.w	r3, r2, r3
    338a:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    338c:	697a      	ldr	r2, [r7, #20]
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	fa02 f303 	lsl.w	r3, r2, r3
    3394:	43db      	mvns	r3, r3
    3396:	68fa      	ldr	r2, [r7, #12]
    3398:	4013      	ands	r3, r2
    339a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    339c:	68ba      	ldr	r2, [r7, #8]
    339e:	697b      	ldr	r3, [r7, #20]
    33a0:	401a      	ands	r2, r3
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	fa02 f303 	lsl.w	r3, r2, r3
    33a8:	68fa      	ldr	r2, [r7, #12]
    33aa:	4313      	orrs	r3, r2
    33ac:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    33ae:	68fb      	ldr	r3, [r7, #12]
}
    33b0:	4618      	mov	r0, r3
    33b2:	3724      	adds	r7, #36	; 0x24
    33b4:	46bd      	mov	sp, r7
    33b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ba:	4770      	bx	lr

000033bc <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    33bc:	b580      	push	{r7, lr}
    33be:	b086      	sub	sp, #24
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    33c4:	6878      	ldr	r0, [r7, #4]
    33c6:	f000 f851 	bl	346c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    33ca:	eef0 7a40 	vmov.f32	s15, s0
	}
    33ce:	eeb0 0a67 	vmov.f32	s0, s15
    33d2:	3718      	adds	r7, #24
    33d4:	46bd      	mov	sp, r7
    33d6:	bd80      	pop	{r7, pc}

000033d8 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    33d8:	b480      	push	{r7}
    33da:	b089      	sub	sp, #36	; 0x24
    33dc:	af00      	add	r7, sp, #0
    33de:	60f8      	str	r0, [r7, #12]
    33e0:	60b9      	str	r1, [r7, #8]
    33e2:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    33e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33e8:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    33ea:	2320      	movs	r3, #32
    33ec:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	f1c3 0320 	rsb	r3, r3, #32
    33f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33f8:	fa22 f303 	lsr.w	r3, r2, r3
    33fc:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    33fe:	68fa      	ldr	r2, [r7, #12]
    3400:	68bb      	ldr	r3, [r7, #8]
    3402:	40da      	lsrs	r2, r3
    3404:	697b      	ldr	r3, [r7, #20]
    3406:	4013      	ands	r3, r2
}
    3408:	4618      	mov	r0, r3
    340a:	3724      	adds	r7, #36	; 0x24
    340c:	46bd      	mov	sp, r7
    340e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3412:	4770      	bx	lr

00003414 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    3414:	b480      	push	{r7}
    3416:	b089      	sub	sp, #36	; 0x24
    3418:	af00      	add	r7, sp, #0
    341a:	60f8      	str	r0, [r7, #12]
    341c:	60b9      	str	r1, [r7, #8]
    341e:	607a      	str	r2, [r7, #4]
    3420:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    3422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3426:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    3428:	2320      	movs	r3, #32
    342a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    342c:	683b      	ldr	r3, [r7, #0]
    342e:	f1c3 0320 	rsb	r3, r3, #32
    3432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3436:	fa22 f303 	lsr.w	r3, r2, r3
    343a:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    343c:	697a      	ldr	r2, [r7, #20]
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	fa02 f303 	lsl.w	r3, r2, r3
    3444:	43db      	mvns	r3, r3
    3446:	68fa      	ldr	r2, [r7, #12]
    3448:	4013      	ands	r3, r2
    344a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    344c:	68ba      	ldr	r2, [r7, #8]
    344e:	697b      	ldr	r3, [r7, #20]
    3450:	401a      	ands	r2, r3
    3452:	687b      	ldr	r3, [r7, #4]
    3454:	fa02 f303 	lsl.w	r3, r2, r3
    3458:	68fa      	ldr	r2, [r7, #12]
    345a:	4313      	orrs	r3, r2
    345c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    345e:	68fb      	ldr	r3, [r7, #12]
}
    3460:	4618      	mov	r0, r3
    3462:	3724      	adds	r7, #36	; 0x24
    3464:	46bd      	mov	sp, r7
    3466:	f85d 7b04 	ldr.w	r7, [sp], #4
    346a:	4770      	bx	lr

0000346c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    346c:	b480      	push	{r7}
    346e:	b085      	sub	sp, #20
    3470:	af00      	add	r7, sp, #0
    3472:	60f8      	str	r0, [r7, #12]
    3474:	7239      	strb	r1, [r7, #8]
    3476:	713a      	strb	r2, [r7, #4]
    3478:	703b      	strb	r3, [r7, #0]
			return value;
    347a:	68fb      	ldr	r3, [r7, #12]
    347c:	681b      	ldr	r3, [r3, #0]
    347e:	ee07 3a90 	vmov	s15, r3
		}
    3482:	eeb0 0a67 	vmov.f32	s0, s15
    3486:	3714      	adds	r7, #20
    3488:	46bd      	mov	sp, r7
    348a:	f85d 7b04 	ldr.w	r7, [sp], #4
    348e:	4770      	bx	lr

00003490 <__static_initialization_and_destruction_0(int, int)>:
    3490:	b580      	push	{r7, lr}
    3492:	b082      	sub	sp, #8
    3494:	af00      	add	r7, sp, #0
    3496:	6078      	str	r0, [r7, #4]
    3498:	6039      	str	r1, [r7, #0]
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	2b01      	cmp	r3, #1
    349e:	f040 80c4 	bne.w	362a <__static_initialization_and_destruction_0(int, int)+0x19a>
    34a2:	683b      	ldr	r3, [r7, #0]
    34a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    34a8:	4293      	cmp	r3, r2
    34aa:	f040 80be 	bne.w	362a <__static_initialization_and_destruction_0(int, int)+0x19a>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    34ae:	4b61      	ldr	r3, [pc, #388]	; (3634 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    34b0:	681b      	ldr	r3, [r3, #0]
    34b2:	f003 0301 	and.w	r3, r3, #1
    34b6:	2b00      	cmp	r3, #0
    34b8:	d105      	bne.n	34c6 <__static_initialization_and_destruction_0(int, int)+0x36>
    34ba:	4b5e      	ldr	r3, [pc, #376]	; (3634 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    34bc:	2201      	movs	r2, #1
    34be:	601a      	str	r2, [r3, #0]
    34c0:	4a5d      	ldr	r2, [pc, #372]	; (3638 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    34c2:	4b5e      	ldr	r3, [pc, #376]	; (363c <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    34c4:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    34c6:	4b5e      	ldr	r3, [pc, #376]	; (3640 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	f003 0301 	and.w	r3, r3, #1
    34ce:	2b00      	cmp	r3, #0
    34d0:	d105      	bne.n	34de <__static_initialization_and_destruction_0(int, int)+0x4e>
    34d2:	4b5b      	ldr	r3, [pc, #364]	; (3640 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    34d4:	2201      	movs	r2, #1
    34d6:	601a      	str	r2, [r3, #0]
    34d8:	4a5a      	ldr	r2, [pc, #360]	; (3644 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    34da:	4b5b      	ldr	r3, [pc, #364]	; (3648 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    34dc:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    34de:	4b5b      	ldr	r3, [pc, #364]	; (364c <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	f003 0301 	and.w	r3, r3, #1
    34e6:	2b00      	cmp	r3, #0
    34e8:	d105      	bne.n	34f6 <__static_initialization_and_destruction_0(int, int)+0x66>
    34ea:	4b58      	ldr	r3, [pc, #352]	; (364c <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    34ec:	2201      	movs	r2, #1
    34ee:	601a      	str	r2, [r3, #0]
    };
    34f0:	4a57      	ldr	r2, [pc, #348]	; (3650 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    34f2:	4b58      	ldr	r3, [pc, #352]	; (3654 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    34f4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    34f6:	4b58      	ldr	r3, [pc, #352]	; (3658 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    34f8:	681b      	ldr	r3, [r3, #0]
    34fa:	f003 0301 	and.w	r3, r3, #1
    34fe:	2b00      	cmp	r3, #0
    3500:	d105      	bne.n	350e <__static_initialization_and_destruction_0(int, int)+0x7e>
    3502:	4b55      	ldr	r3, [pc, #340]	; (3658 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    3504:	2201      	movs	r2, #1
    3506:	601a      	str	r2, [r3, #0]
    };
    3508:	4a54      	ldr	r2, [pc, #336]	; (365c <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    350a:	4b55      	ldr	r3, [pc, #340]	; (3660 <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    350c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    350e:	4b55      	ldr	r3, [pc, #340]	; (3664 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	f003 0301 	and.w	r3, r3, #1
    3516:	2b00      	cmp	r3, #0
    3518:	d105      	bne.n	3526 <__static_initialization_and_destruction_0(int, int)+0x96>
    351a:	4b52      	ldr	r3, [pc, #328]	; (3664 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    351c:	2201      	movs	r2, #1
    351e:	601a      	str	r2, [r3, #0]
    };
    3520:	4a51      	ldr	r2, [pc, #324]	; (3668 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    3522:	4b52      	ldr	r3, [pc, #328]	; (366c <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    3524:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    3526:	4b52      	ldr	r3, [pc, #328]	; (3670 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	f003 0301 	and.w	r3, r3, #1
    352e:	2b00      	cmp	r3, #0
    3530:	d105      	bne.n	353e <__static_initialization_and_destruction_0(int, int)+0xae>
    3532:	4b4f      	ldr	r3, [pc, #316]	; (3670 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    3534:	2201      	movs	r2, #1
    3536:	601a      	str	r2, [r3, #0]
    3538:	4a4e      	ldr	r2, [pc, #312]	; (3674 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    353a:	4b4f      	ldr	r3, [pc, #316]	; (3678 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    353c:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    353e:	4b4f      	ldr	r3, [pc, #316]	; (367c <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	f003 0301 	and.w	r3, r3, #1
    3546:	2b00      	cmp	r3, #0
    3548:	d106      	bne.n	3558 <__static_initialization_and_destruction_0(int, int)+0xc8>
    354a:	4b4c      	ldr	r3, [pc, #304]	; (367c <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    354c:	2201      	movs	r2, #1
    354e:	601a      	str	r2, [r3, #0]
    3550:	4b4b      	ldr	r3, [pc, #300]	; (3680 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    3552:	4618      	mov	r0, r3
    3554:	f7fe fc10 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    3558:	4b4a      	ldr	r3, [pc, #296]	; (3684 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	f003 0301 	and.w	r3, r3, #1
    3560:	2b00      	cmp	r3, #0
    3562:	d114      	bne.n	358e <__static_initialization_and_destruction_0(int, int)+0xfe>
    3564:	4b47      	ldr	r3, [pc, #284]	; (3684 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    3566:	2201      	movs	r2, #1
    3568:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    356a:	4a47      	ldr	r2, [pc, #284]	; (3688 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    356c:	4b47      	ldr	r3, [pc, #284]	; (368c <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    356e:	601a      	str	r2, [r3, #0]
    3570:	4a47      	ldr	r2, [pc, #284]	; (3690 <__static_initialization_and_destruction_0(int, int)+0x200>)
    3572:	4b46      	ldr	r3, [pc, #280]	; (368c <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    3574:	605a      	str	r2, [r3, #4]
    3576:	4a47      	ldr	r2, [pc, #284]	; (3694 <__static_initialization_and_destruction_0(int, int)+0x204>)
    3578:	4b44      	ldr	r3, [pc, #272]	; (368c <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    357a:	609a      	str	r2, [r3, #8]
    357c:	4a46      	ldr	r2, [pc, #280]	; (3698 <__static_initialization_and_destruction_0(int, int)+0x208>)
    357e:	4b43      	ldr	r3, [pc, #268]	; (368c <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    3580:	60da      	str	r2, [r3, #12]
    3582:	4a46      	ldr	r2, [pc, #280]	; (369c <__static_initialization_and_destruction_0(int, int)+0x20c>)
    3584:	4b41      	ldr	r3, [pc, #260]	; (368c <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    3586:	611a      	str	r2, [r3, #16]
    3588:	4a45      	ldr	r2, [pc, #276]	; (36a0 <__static_initialization_and_destruction_0(int, int)+0x210>)
    358a:	4b40      	ldr	r3, [pc, #256]	; (368c <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    358c:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    358e:	4b45      	ldr	r3, [pc, #276]	; (36a4 <__static_initialization_and_destruction_0(int, int)+0x214>)
    3590:	681b      	ldr	r3, [r3, #0]
    3592:	f003 0301 	and.w	r3, r3, #1
    3596:	2b00      	cmp	r3, #0
    3598:	d122      	bne.n	35e0 <__static_initialization_and_destruction_0(int, int)+0x150>
    359a:	4b42      	ldr	r3, [pc, #264]	; (36a4 <__static_initialization_and_destruction_0(int, int)+0x214>)
    359c:	2201      	movs	r2, #1
    359e:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35a0:	4b41      	ldr	r3, [pc, #260]	; (36a8 <__static_initialization_and_destruction_0(int, int)+0x218>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    35a2:	4a42      	ldr	r2, [pc, #264]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35a4:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35a6:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    35a8:	4a40      	ldr	r2, [pc, #256]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35aa:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35ac:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    35ae:	4a3f      	ldr	r2, [pc, #252]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35b0:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35b2:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    35b4:	4a3d      	ldr	r2, [pc, #244]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35b6:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35b8:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    35ba:	4a3c      	ldr	r2, [pc, #240]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35bc:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35be:	611a      	str	r2, [r3, #16]
    35c0:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    35c2:	4a3a      	ldr	r2, [pc, #232]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35c4:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35c6:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    35c8:	4a38      	ldr	r2, [pc, #224]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35ca:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35cc:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    35ce:	4a37      	ldr	r2, [pc, #220]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35d0:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35d2:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    35d4:	4a35      	ldr	r2, [pc, #212]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35d6:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    35d8:	60da      	str	r2, [r3, #12]
    35da:	4a34      	ldr	r2, [pc, #208]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35dc:	3234      	adds	r2, #52	; 0x34
    35de:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    35e0:	4b33      	ldr	r3, [pc, #204]	; (36b0 <__static_initialization_and_destruction_0(int, int)+0x220>)
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	f003 0301 	and.w	r3, r3, #1
    35e8:	2b00      	cmp	r3, #0
    35ea:	d106      	bne.n	35fa <__static_initialization_and_destruction_0(int, int)+0x16a>
    35ec:	4b30      	ldr	r3, [pc, #192]	; (36b0 <__static_initialization_and_destruction_0(int, int)+0x220>)
    35ee:	2201      	movs	r2, #1
    35f0:	601a      	str	r2, [r3, #0]
    35f2:	4b2e      	ldr	r3, [pc, #184]	; (36ac <__static_initialization_and_destruction_0(int, int)+0x21c>)
    35f4:	461a      	mov	r2, r3
    35f6:	4b2f      	ldr	r3, [pc, #188]	; (36b4 <__static_initialization_and_destruction_0(int, int)+0x224>)
    35f8:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm0Peripheral = {
    35fa:	4b2f      	ldr	r3, [pc, #188]	; (36b8 <__static_initialization_and_destruction_0(int, int)+0x228>)
    35fc:	681b      	ldr	r3, [r3, #0]
    35fe:	f003 0301 	and.w	r3, r3, #1
    3602:	2b00      	cmp	r3, #0
    3604:	d105      	bne.n	3612 <__static_initialization_and_destruction_0(int, int)+0x182>
    3606:	4b2c      	ldr	r3, [pc, #176]	; (36b8 <__static_initialization_and_destruction_0(int, int)+0x228>)
    3608:	2201      	movs	r2, #1
    360a:	601a      	str	r2, [r3, #0]
    };
    360c:	4a2b      	ldr	r2, [pc, #172]	; (36bc <__static_initialization_and_destruction_0(int, int)+0x22c>)
    360e:	4b2c      	ldr	r3, [pc, #176]	; (36c0 <__static_initialization_and_destruction_0(int, int)+0x230>)
    3610:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm1Peripheral = {
    3612:	4b2c      	ldr	r3, [pc, #176]	; (36c4 <__static_initialization_and_destruction_0(int, int)+0x234>)
    3614:	681b      	ldr	r3, [r3, #0]
    3616:	f003 0301 	and.w	r3, r3, #1
    361a:	2b00      	cmp	r3, #0
    361c:	d105      	bne.n	362a <__static_initialization_and_destruction_0(int, int)+0x19a>
    361e:	4b29      	ldr	r3, [pc, #164]	; (36c4 <__static_initialization_and_destruction_0(int, int)+0x234>)
    3620:	2201      	movs	r2, #1
    3622:	601a      	str	r2, [r3, #0]
    };
    3624:	4a28      	ldr	r2, [pc, #160]	; (36c8 <__static_initialization_and_destruction_0(int, int)+0x238>)
    3626:	4b29      	ldr	r3, [pc, #164]	; (36cc <__static_initialization_and_destruction_0(int, int)+0x23c>)
    3628:	601a      	str	r2, [r3, #0]
    362a:	bf00      	nop
    362c:	3708      	adds	r7, #8
    362e:	46bd      	mov	sp, r7
    3630:	bd80      	pop	{r7, pc}
    3632:	bf00      	nop
    3634:	10000278 	.word	0x10000278
    3638:	4002c000 	.word	0x4002c000
    363c:	10000114 	.word	0x10000114
    3640:	1000027c 	.word	0x1000027c
    3644:	400fc000 	.word	0x400fc000
    3648:	10000120 	.word	0x10000120
    364c:	10000280 	.word	0x10000280
    3650:	40098000 	.word	0x40098000
    3654:	1000000c 	.word	0x1000000c
    3658:	10000284 	.word	0x10000284
    365c:	4009c000 	.word	0x4009c000
    3660:	10000020 	.word	0x10000020
    3664:	10000288 	.word	0x10000288
    3668:	400a4000 	.word	0x400a4000
    366c:	10000034 	.word	0x10000034
    3670:	1000028c 	.word	0x1000028c
    3674:	40034000 	.word	0x40034000
    3678:	10000124 	.word	0x10000124
    367c:	10000290 	.word	0x10000290
    3680:	10000128 	.word	0x10000128
    3684:	10000294 	.word	0x10000294
    3688:	20098000 	.word	0x20098000
    368c:	10000228 	.word	0x10000228
    3690:	20098020 	.word	0x20098020
    3694:	20098040 	.word	0x20098040
    3698:	20098060 	.word	0x20098060
    369c:	20098080 	.word	0x20098080
    36a0:	200980a0 	.word	0x200980a0
    36a4:	10000298 	.word	0x10000298
    36a8:	10000240 	.word	0x10000240
    36ac:	40028080 	.word	0x40028080
    36b0:	1000029c 	.word	0x1000029c
    36b4:	10000268 	.word	0x10000268
    36b8:	100002a0 	.word	0x100002a0
    36bc:	40014000 	.word	0x40014000
    36c0:	1000004c 	.word	0x1000004c
    36c4:	100002a4 	.word	0x100002a4
    36c8:	40018000 	.word	0x40018000
    36cc:	10000054 	.word	0x10000054

000036d0 <_GLOBAL__sub_I_xUartTaskHandle>:
    36d0:	b580      	push	{r7, lr}
    36d2:	af00      	add	r7, sp, #0
    36d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    36d8:	2001      	movs	r0, #1
    36da:	f7ff fed9 	bl	3490 <__static_initialization_and_destruction_0(int, int)>
    36de:	bd80      	pop	{r7, pc}

000036e0 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    36e0:	b480      	push	{r7}
    36e2:	b087      	sub	sp, #28
    36e4:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    36e6:	2300      	movs	r3, #0
    36e8:	617b      	str	r3, [r7, #20]
    36ea:	697a      	ldr	r2, [r7, #20]
    36ec:	4613      	mov	r3, r2
    36ee:	005b      	lsls	r3, r3, #1
    36f0:	4413      	add	r3, r2
    36f2:	009b      	lsls	r3, r3, #2
    36f4:	4a1f      	ldr	r2, [pc, #124]	; (3774 <sjsu::InitializeDataSection()+0x94>)
    36f6:	4413      	add	r3, r2
    36f8:	4a1f      	ldr	r2, [pc, #124]	; (3778 <sjsu::InitializeDataSection()+0x98>)
    36fa:	4293      	cmp	r3, r2
    36fc:	d233      	bcs.n	3766 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    36fe:	491d      	ldr	r1, [pc, #116]	; (3774 <sjsu::InitializeDataSection()+0x94>)
    3700:	697a      	ldr	r2, [r7, #20]
    3702:	4613      	mov	r3, r2
    3704:	005b      	lsls	r3, r3, #1
    3706:	4413      	add	r3, r2
    3708:	009b      	lsls	r3, r3, #2
    370a:	440b      	add	r3, r1
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    3710:	4918      	ldr	r1, [pc, #96]	; (3774 <sjsu::InitializeDataSection()+0x94>)
    3712:	697a      	ldr	r2, [r7, #20]
    3714:	4613      	mov	r3, r2
    3716:	005b      	lsls	r3, r3, #1
    3718:	4413      	add	r3, r2
    371a:	009b      	lsls	r3, r3, #2
    371c:	440b      	add	r3, r1
    371e:	685b      	ldr	r3, [r3, #4]
    3720:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    3722:	4914      	ldr	r1, [pc, #80]	; (3774 <sjsu::InitializeDataSection()+0x94>)
    3724:	697a      	ldr	r2, [r7, #20]
    3726:	4613      	mov	r3, r2
    3728:	005b      	lsls	r3, r3, #1
    372a:	4413      	add	r3, r2
    372c:	009b      	lsls	r3, r3, #2
    372e:	440b      	add	r3, r1
    3730:	3308      	adds	r3, #8
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    3736:	2300      	movs	r3, #0
    3738:	613b      	str	r3, [r7, #16]
    373a:	693a      	ldr	r2, [r7, #16]
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	429a      	cmp	r2, r3
    3740:	d20d      	bcs.n	375e <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    3742:	693b      	ldr	r3, [r7, #16]
    3744:	009b      	lsls	r3, r3, #2
    3746:	68fa      	ldr	r2, [r7, #12]
    3748:	441a      	add	r2, r3
    374a:	693b      	ldr	r3, [r7, #16]
    374c:	009b      	lsls	r3, r3, #2
    374e:	68b9      	ldr	r1, [r7, #8]
    3750:	440b      	add	r3, r1
    3752:	6812      	ldr	r2, [r2, #0]
    3754:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    3756:	693b      	ldr	r3, [r7, #16]
    3758:	3301      	adds	r3, #1
    375a:	613b      	str	r3, [r7, #16]
    375c:	e7ed      	b.n	373a <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    375e:	697b      	ldr	r3, [r7, #20]
    3760:	3301      	adds	r3, #1
    3762:	617b      	str	r3, [r7, #20]
    3764:	e7c1      	b.n	36ea <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    3766:	bf00      	nop
    3768:	371c      	adds	r7, #28
    376a:	46bd      	mov	sp, r7
    376c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3770:	4770      	bx	lr
    3772:	bf00      	nop
    3774:	000000e4 	.word	0x000000e4
    3778:	000000fc 	.word	0x000000fc

0000377c <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    377c:	b480      	push	{r7}
    377e:	b085      	sub	sp, #20
    3780:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    3782:	2300      	movs	r3, #0
    3784:	60fb      	str	r3, [r7, #12]
    3786:	68fb      	ldr	r3, [r7, #12]
    3788:	00db      	lsls	r3, r3, #3
    378a:	4a15      	ldr	r2, [pc, #84]	; (37e0 <sjsu::InitializeBssSection()+0x64>)
    378c:	4413      	add	r3, r2
    378e:	4a15      	ldr	r2, [pc, #84]	; (37e4 <sjsu::InitializeBssSection()+0x68>)
    3790:	4293      	cmp	r3, r2
    3792:	d21e      	bcs.n	37d2 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    3794:	4a12      	ldr	r2, [pc, #72]	; (37e0 <sjsu::InitializeBssSection()+0x64>)
    3796:	68fb      	ldr	r3, [r7, #12]
    3798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    379c:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    379e:	4a10      	ldr	r2, [pc, #64]	; (37e0 <sjsu::InitializeBssSection()+0x64>)
    37a0:	68fb      	ldr	r3, [r7, #12]
    37a2:	00db      	lsls	r3, r3, #3
    37a4:	4413      	add	r3, r2
    37a6:	685b      	ldr	r3, [r3, #4]
    37a8:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    37aa:	2300      	movs	r3, #0
    37ac:	60bb      	str	r3, [r7, #8]
    37ae:	68ba      	ldr	r2, [r7, #8]
    37b0:	683b      	ldr	r3, [r7, #0]
    37b2:	429a      	cmp	r2, r3
    37b4:	d209      	bcs.n	37ca <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    37b6:	68bb      	ldr	r3, [r7, #8]
    37b8:	009b      	lsls	r3, r3, #2
    37ba:	687a      	ldr	r2, [r7, #4]
    37bc:	4413      	add	r3, r2
    37be:	2200      	movs	r2, #0
    37c0:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    37c2:	68bb      	ldr	r3, [r7, #8]
    37c4:	3301      	adds	r3, #1
    37c6:	60bb      	str	r3, [r7, #8]
    37c8:	e7f1      	b.n	37ae <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	3301      	adds	r3, #1
    37ce:	60fb      	str	r3, [r7, #12]
    37d0:	e7d9      	b.n	3786 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    37d2:	bf00      	nop
    37d4:	3714      	adds	r7, #20
    37d6:	46bd      	mov	sp, r7
    37d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    37dc:	4770      	bx	lr
    37de:	bf00      	nop
    37e0:	000000fc 	.word	0x000000fc
    37e4:	0000010c 	.word	0x0000010c

000037e8 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    37e8:	b580      	push	{r7, lr}
    37ea:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    37ec:	f7ff ff78 	bl	36e0 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    37f0:	f7ff ffc4 	bl	377c <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    37f4:	f005 faee 	bl	8dd4 <__libc_init_array>
}
    37f8:	bf00      	nop
    37fa:	bd80      	pop	{r7, pc}

000037fc <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    37fc:	b580      	push	{r7, lr}
    37fe:	b08c      	sub	sp, #48	; 0x30
    3800:	af02      	add	r7, sp, #8
    3802:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	681b      	ldr	r3, [r3, #0]
    3808:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	685b      	ldr	r3, [r3, #4]
    380e:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	689b      	ldr	r3, [r3, #8]
    3814:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	68db      	ldr	r3, [r3, #12]
    381a:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	691b      	ldr	r3, [r3, #16]
    3820:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	695b      	ldr	r3, [r3, #20]
    3826:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	699b      	ldr	r3, [r3, #24]
    382c:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	69db      	ldr	r3, [r3, #28]
    3832:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    3834:	480d      	ldr	r0, [pc, #52]	; (386c <GetRegistersFromStack+0x70>)
    3836:	f002 fd01 	bl	623c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    383a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    383c:	6a3a      	ldr	r2, [r7, #32]
    383e:	69f8      	ldr	r0, [r7, #28]
    3840:	69bb      	ldr	r3, [r7, #24]
    3842:	9300      	str	r3, [sp, #0]
    3844:	4603      	mov	r3, r0
    3846:	480a      	ldr	r0, [pc, #40]	; (3870 <GetRegistersFromStack+0x74>)
    3848:	f002 fcf8 	bl	623c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    384c:	6979      	ldr	r1, [r7, #20]
    384e:	693a      	ldr	r2, [r7, #16]
    3850:	68f8      	ldr	r0, [r7, #12]
    3852:	68bb      	ldr	r3, [r7, #8]
    3854:	9300      	str	r3, [sp, #0]
    3856:	4603      	mov	r3, r0
    3858:	4806      	ldr	r0, [pc, #24]	; (3874 <GetRegistersFromStack+0x78>)
    385a:	f002 fcef 	bl	623c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	4619      	mov	r1, r3
    3862:	2001      	movs	r0, #1
    3864:	f7fd f830 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    3868:	e7fe      	b.n	3868 <GetRegistersFromStack+0x6c>
    386a:	bf00      	nop
    386c:	0000a004 	.word	0x0000a004
    3870:	0000a030 	.word	0x0000a030
    3874:	0000a064 	.word	0x0000a064

00003878 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    3878:	b480      	push	{r7}
    387a:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    387c:	f01e 0f04 	tst.w	lr, #4
    3880:	bf0c      	ite	eq
    3882:	f3ef 8008 	mrseq	r0, MSP
    3886:	f3ef 8009 	mrsne	r0, PSP
    388a:	6981      	ldr	r1, [r0, #24]
    388c:	4a00      	ldr	r2, [pc, #0]	; (3890 <handler2_address_const>)
    388e:	4710      	bx	r2

00003890 <handler2_address_const>:
    3890:	000037fd 	.word	0x000037fd
    }
  }
    3894:	bf00      	nop
    3896:	46bd      	mov	sp, r7
    3898:	f85d 7b04 	ldr.w	r7, [sp], #4
    389c:	4770      	bx	lr
    389e:	Address 0x000000000000389e is out of bounds.


000038a0 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    38a0:	b580      	push	{r7, lr}
    38a2:	b084      	sub	sp, #16
    38a4:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    38a6:	4b16      	ldr	r3, [pc, #88]	; (3900 <ArmResetHandler+0x60>)
    38a8:	60fb      	str	r3, [r7, #12]
    38aa:	68fb      	ldr	r3, [r7, #12]
    38ac:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	f383 8809 	msr	PSP, r3
    38b4:	68fb      	ldr	r3, [r7, #12]
    38b6:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    38be:	f7ff ff93 	bl	37e8 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    38c2:	4b10      	ldr	r3, [pc, #64]	; (3904 <ArmResetHandler+0x64>)
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	f003 0301 	and.w	r3, r3, #1
    38ca:	2b00      	cmp	r3, #0
    38cc:	bf14      	ite	ne
    38ce:	2301      	movne	r3, #1
    38d0:	2300      	moveq	r3, #0
    38d2:	b2db      	uxtb	r3, r3
    38d4:	2b00      	cmp	r3, #0
    38d6:	d001      	beq.n	38dc <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    38d8:	f002 fcd2 	bl	6280 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    38dc:	f003 f8da 	bl	6a94 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    38e0:	f7ff fa6e 	bl	2dc0 <main>
    38e4:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    38e6:	68bb      	ldr	r3, [r7, #8]
    38e8:	2b00      	cmp	r3, #0
    38ea:	db04      	blt.n	38f6 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    38ec:	68b9      	ldr	r1, [r7, #8]
    38ee:	4806      	ldr	r0, [pc, #24]	; (3908 <ArmResetHandler+0x68>)
    38f0:	f002 fca4 	bl	623c <printf>
    38f4:	e003      	b.n	38fe <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    38f6:	68b9      	ldr	r1, [r7, #8]
    38f8:	4804      	ldr	r0, [pc, #16]	; (390c <ArmResetHandler+0x6c>)
    38fa:	f002 fc9f 	bl	623c <printf>
    38fe:	e7fe      	b.n	38fe <ArmResetHandler+0x5e>
    3900:	10010000 	.word	0x10010000
    3904:	e000edf0 	.word	0xe000edf0
    3908:	0000a09c 	.word	0x0000a09c
    390c:	0000a0d0 	.word	0x0000a0d0

00003910 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    3910:	b580      	push	{r7, lr}
    3912:	b082      	sub	sp, #8
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	6039      	str	r1, [r7, #0]
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	2b01      	cmp	r3, #1
    391e:	d111      	bne.n	3944 <__static_initialization_and_destruction_0(int, int)+0x34>
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3926:	4293      	cmp	r3, r2
    3928:	d10c      	bne.n	3944 <__static_initialization_and_destruction_0(int, int)+0x34>
    392a:	4b08      	ldr	r3, [pc, #32]	; (394c <__static_initialization_and_destruction_0(int, int)+0x3c>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	f003 0301 	and.w	r3, r3, #1
    3932:	2b00      	cmp	r3, #0
    3934:	d106      	bne.n	3944 <__static_initialization_and_destruction_0(int, int)+0x34>
    3936:	4b05      	ldr	r3, [pc, #20]	; (394c <__static_initialization_and_destruction_0(int, int)+0x3c>)
    3938:	2201      	movs	r2, #1
    393a:	601a      	str	r2, [r3, #0]
    393c:	4b04      	ldr	r3, [pc, #16]	; (3950 <__static_initialization_and_destruction_0(int, int)+0x40>)
    393e:	4618      	mov	r0, r3
    3940:	f7fe fa1a 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    3944:	bf00      	nop
    3946:	3708      	adds	r7, #8
    3948:	46bd      	mov	sp, r7
    394a:	bd80      	pop	{r7, pc}
    394c:	10000290 	.word	0x10000290
    3950:	10000128 	.word	0x10000128

00003954 <_GLOBAL__sub_I_GetRegistersFromStack>:
    3954:	b580      	push	{r7, lr}
    3956:	af00      	add	r7, sp, #0
    3958:	f64f 71ff 	movw	r1, #65535	; 0xffff
    395c:	2001      	movs	r0, #1
    395e:	f7ff ffd7 	bl	3910 <__static_initialization_and_destruction_0(int, int)>
    3962:	bd80      	pop	{r7, pc}

00003964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3964:	b480      	push	{r7}
    3966:	b083      	sub	sp, #12
    3968:	af00      	add	r7, sp, #0
    396a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    396c:	687b      	ldr	r3, [r7, #4]
    396e:	f103 0208 	add.w	r2, r3, #8
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    397c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	f103 0208 	add.w	r2, r3, #8
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	f103 0208 	add.w	r2, r3, #8
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	2200      	movs	r2, #0
    3996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3998:	bf00      	nop
    399a:	370c      	adds	r7, #12
    399c:	46bd      	mov	sp, r7
    399e:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a2:	4770      	bx	lr

000039a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    39a4:	b480      	push	{r7}
    39a6:	b083      	sub	sp, #12
    39a8:	af00      	add	r7, sp, #0
    39aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	2200      	movs	r2, #0
    39b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    39b2:	bf00      	nop
    39b4:	370c      	adds	r7, #12
    39b6:	46bd      	mov	sp, r7
    39b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    39bc:	4770      	bx	lr

000039be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    39be:	b480      	push	{r7}
    39c0:	b085      	sub	sp, #20
    39c2:	af00      	add	r7, sp, #0
    39c4:	6078      	str	r0, [r7, #4]
    39c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	685b      	ldr	r3, [r3, #4]
    39cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    39ce:	683b      	ldr	r3, [r7, #0]
    39d0:	68fa      	ldr	r2, [r7, #12]
    39d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    39d4:	68fb      	ldr	r3, [r7, #12]
    39d6:	689a      	ldr	r2, [r3, #8]
    39d8:	683b      	ldr	r3, [r7, #0]
    39da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	689b      	ldr	r3, [r3, #8]
    39e0:	683a      	ldr	r2, [r7, #0]
    39e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    39e4:	68fb      	ldr	r3, [r7, #12]
    39e6:	683a      	ldr	r2, [r7, #0]
    39e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    39ea:	683b      	ldr	r3, [r7, #0]
    39ec:	687a      	ldr	r2, [r7, #4]
    39ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	1c5a      	adds	r2, r3, #1
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	601a      	str	r2, [r3, #0]
}
    39fa:	bf00      	nop
    39fc:	3714      	adds	r7, #20
    39fe:	46bd      	mov	sp, r7
    3a00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a04:	4770      	bx	lr

00003a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3a06:	b480      	push	{r7}
    3a08:	b085      	sub	sp, #20
    3a0a:	af00      	add	r7, sp, #0
    3a0c:	6078      	str	r0, [r7, #4]
    3a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	681b      	ldr	r3, [r3, #0]
    3a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3a16:	68bb      	ldr	r3, [r7, #8]
    3a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3a1c:	d103      	bne.n	3a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3a1e:	687b      	ldr	r3, [r7, #4]
    3a20:	691b      	ldr	r3, [r3, #16]
    3a22:	60fb      	str	r3, [r7, #12]
    3a24:	e00c      	b.n	3a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	3308      	adds	r3, #8
    3a2a:	60fb      	str	r3, [r7, #12]
    3a2c:	e002      	b.n	3a34 <vListInsert+0x2e>
    3a2e:	68fb      	ldr	r3, [r7, #12]
    3a30:	685b      	ldr	r3, [r3, #4]
    3a32:	60fb      	str	r3, [r7, #12]
    3a34:	68fb      	ldr	r3, [r7, #12]
    3a36:	685b      	ldr	r3, [r3, #4]
    3a38:	681b      	ldr	r3, [r3, #0]
    3a3a:	68ba      	ldr	r2, [r7, #8]
    3a3c:	429a      	cmp	r2, r3
    3a3e:	d2f6      	bcs.n	3a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	685a      	ldr	r2, [r3, #4]
    3a44:	683b      	ldr	r3, [r7, #0]
    3a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3a48:	683b      	ldr	r3, [r7, #0]
    3a4a:	685b      	ldr	r3, [r3, #4]
    3a4c:	683a      	ldr	r2, [r7, #0]
    3a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3a50:	683b      	ldr	r3, [r7, #0]
    3a52:	68fa      	ldr	r2, [r7, #12]
    3a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	683a      	ldr	r2, [r7, #0]
    3a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	687a      	ldr	r2, [r7, #4]
    3a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	681b      	ldr	r3, [r3, #0]
    3a66:	1c5a      	adds	r2, r3, #1
    3a68:	687b      	ldr	r3, [r7, #4]
    3a6a:	601a      	str	r2, [r3, #0]
}
    3a6c:	bf00      	nop
    3a6e:	3714      	adds	r7, #20
    3a70:	46bd      	mov	sp, r7
    3a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a76:	4770      	bx	lr

00003a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    3a78:	b480      	push	{r7}
    3a7a:	b085      	sub	sp, #20
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	691b      	ldr	r3, [r3, #16]
    3a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	685b      	ldr	r3, [r3, #4]
    3a8a:	687a      	ldr	r2, [r7, #4]
    3a8c:	6892      	ldr	r2, [r2, #8]
    3a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	689b      	ldr	r3, [r3, #8]
    3a94:	687a      	ldr	r2, [r7, #4]
    3a96:	6852      	ldr	r2, [r2, #4]
    3a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3a9a:	68fb      	ldr	r3, [r7, #12]
    3a9c:	685b      	ldr	r3, [r3, #4]
    3a9e:	687a      	ldr	r2, [r7, #4]
    3aa0:	429a      	cmp	r2, r3
    3aa2:	d103      	bne.n	3aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	689a      	ldr	r2, [r3, #8]
    3aa8:	68fb      	ldr	r3, [r7, #12]
    3aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	2200      	movs	r2, #0
    3ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    3ab2:	68fb      	ldr	r3, [r7, #12]
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	1e5a      	subs	r2, r3, #1
    3ab8:	68fb      	ldr	r3, [r7, #12]
    3aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    3abc:	68fb      	ldr	r3, [r7, #12]
    3abe:	681b      	ldr	r3, [r3, #0]
}
    3ac0:	4618      	mov	r0, r3
    3ac2:	3714      	adds	r7, #20
    3ac4:	46bd      	mov	sp, r7
    3ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aca:	4770      	bx	lr

00003acc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    3acc:	b580      	push	{r7, lr}
    3ace:	b08a      	sub	sp, #40	; 0x28
    3ad0:	af04      	add	r7, sp, #16
    3ad2:	60f8      	str	r0, [r7, #12]
    3ad4:	60b9      	str	r1, [r7, #8]
    3ad6:	607a      	str	r2, [r7, #4]
    3ad8:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    3ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3adc:	2b00      	cmp	r3, #0
    3ade:	d01e      	beq.n	3b1e <xTaskCreateStatic+0x52>
    3ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d01b      	beq.n	3b1e <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    3ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ae8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    3aea:	697b      	ldr	r3, [r7, #20]
    3aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3aee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    3af0:	697b      	ldr	r3, [r7, #20]
    3af2:	2202      	movs	r2, #2
    3af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    3af8:	2300      	movs	r3, #0
    3afa:	9303      	str	r3, [sp, #12]
    3afc:	697b      	ldr	r3, [r7, #20]
    3afe:	9302      	str	r3, [sp, #8]
    3b00:	f107 0310 	add.w	r3, r7, #16
    3b04:	9301      	str	r3, [sp, #4]
    3b06:	6a3b      	ldr	r3, [r7, #32]
    3b08:	9300      	str	r3, [sp, #0]
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	687a      	ldr	r2, [r7, #4]
    3b0e:	68b9      	ldr	r1, [r7, #8]
    3b10:	68f8      	ldr	r0, [r7, #12]
    3b12:	f000 f850 	bl	3bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3b16:	6978      	ldr	r0, [r7, #20]
    3b18:	f000 f8c8 	bl	3cac <prvAddNewTaskToReadyList>
    3b1c:	e001      	b.n	3b22 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
    3b1e:	2300      	movs	r3, #0
    3b20:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
    3b22:	693b      	ldr	r3, [r7, #16]
	}
    3b24:	4618      	mov	r0, r3
    3b26:	3718      	adds	r7, #24
    3b28:	46bd      	mov	sp, r7
    3b2a:	bd80      	pop	{r7, pc}

00003b2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    3b2c:	b580      	push	{r7, lr}
    3b2e:	b08c      	sub	sp, #48	; 0x30
    3b30:	af04      	add	r7, sp, #16
    3b32:	60f8      	str	r0, [r7, #12]
    3b34:	60b9      	str	r1, [r7, #8]
    3b36:	603b      	str	r3, [r7, #0]
    3b38:	4613      	mov	r3, r2
    3b3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3b3c:	88fb      	ldrh	r3, [r7, #6]
    3b3e:	009b      	lsls	r3, r3, #2
    3b40:	4618      	mov	r0, r3
    3b42:	f001 f9c3 	bl	4ecc <pvPortMalloc>
    3b46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    3b48:	697b      	ldr	r3, [r7, #20]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d00e      	beq.n	3b6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3b4e:	2060      	movs	r0, #96	; 0x60
    3b50:	f001 f9bc 	bl	4ecc <pvPortMalloc>
    3b54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    3b56:	69fb      	ldr	r3, [r7, #28]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d003      	beq.n	3b64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3b5c:	69fb      	ldr	r3, [r7, #28]
    3b5e:	697a      	ldr	r2, [r7, #20]
    3b60:	631a      	str	r2, [r3, #48]	; 0x30
    3b62:	e005      	b.n	3b70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3b64:	6978      	ldr	r0, [r7, #20]
    3b66:	f001 f9c3 	bl	4ef0 <vPortFree>
    3b6a:	e001      	b.n	3b70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    3b6c:	2300      	movs	r3, #0
    3b6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3b70:	69fb      	ldr	r3, [r7, #28]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d017      	beq.n	3ba6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    3b76:	69fb      	ldr	r3, [r7, #28]
    3b78:	2200      	movs	r2, #0
    3b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    3b7e:	88fa      	ldrh	r2, [r7, #6]
    3b80:	2300      	movs	r3, #0
    3b82:	9303      	str	r3, [sp, #12]
    3b84:	69fb      	ldr	r3, [r7, #28]
    3b86:	9302      	str	r3, [sp, #8]
    3b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b8a:	9301      	str	r3, [sp, #4]
    3b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b8e:	9300      	str	r3, [sp, #0]
    3b90:	683b      	ldr	r3, [r7, #0]
    3b92:	68b9      	ldr	r1, [r7, #8]
    3b94:	68f8      	ldr	r0, [r7, #12]
    3b96:	f000 f80e 	bl	3bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3b9a:	69f8      	ldr	r0, [r7, #28]
    3b9c:	f000 f886 	bl	3cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    3ba0:	2301      	movs	r3, #1
    3ba2:	61bb      	str	r3, [r7, #24]
    3ba4:	e002      	b.n	3bac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3baa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    3bac:	69bb      	ldr	r3, [r7, #24]
	}
    3bae:	4618      	mov	r0, r3
    3bb0:	3720      	adds	r7, #32
    3bb2:	46bd      	mov	sp, r7
    3bb4:	bd80      	pop	{r7, pc}

00003bb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    3bb6:	b580      	push	{r7, lr}
    3bb8:	b086      	sub	sp, #24
    3bba:	af00      	add	r7, sp, #0
    3bbc:	60f8      	str	r0, [r7, #12]
    3bbe:	60b9      	str	r1, [r7, #8]
    3bc0:	607a      	str	r2, [r7, #4]
    3bc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    3bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	009b      	lsls	r3, r3, #2
    3bcc:	461a      	mov	r2, r3
    3bce:	21a5      	movs	r1, #165	; 0xa5
    3bd0:	f005 f93f 	bl	8e52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bde:	3b01      	subs	r3, #1
    3be0:	009b      	lsls	r3, r3, #2
    3be2:	4413      	add	r3, r2
    3be4:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3be6:	693b      	ldr	r3, [r7, #16]
    3be8:	f023 0307 	bic.w	r3, r3, #7
    3bec:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3bee:	2300      	movs	r3, #0
    3bf0:	617b      	str	r3, [r7, #20]
    3bf2:	e012      	b.n	3c1a <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3bf4:	68ba      	ldr	r2, [r7, #8]
    3bf6:	697b      	ldr	r3, [r7, #20]
    3bf8:	4413      	add	r3, r2
    3bfa:	7819      	ldrb	r1, [r3, #0]
    3bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bfe:	697b      	ldr	r3, [r7, #20]
    3c00:	4413      	add	r3, r2
    3c02:	3334      	adds	r3, #52	; 0x34
    3c04:	460a      	mov	r2, r1
    3c06:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3c08:	68ba      	ldr	r2, [r7, #8]
    3c0a:	697b      	ldr	r3, [r7, #20]
    3c0c:	4413      	add	r3, r2
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d006      	beq.n	3c22 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3c14:	697b      	ldr	r3, [r7, #20]
    3c16:	3301      	adds	r3, #1
    3c18:	617b      	str	r3, [r7, #20]
    3c1a:	697b      	ldr	r3, [r7, #20]
    3c1c:	2b0f      	cmp	r3, #15
    3c1e:	d9e9      	bls.n	3bf4 <prvInitialiseNewTask+0x3e>
    3c20:	e000      	b.n	3c24 <prvInitialiseNewTask+0x6e>
		{
			break;
    3c22:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c26:	2200      	movs	r2, #0
    3c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3c2c:	6a3b      	ldr	r3, [r7, #32]
    3c2e:	2b04      	cmp	r3, #4
    3c30:	d901      	bls.n	3c36 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3c32:	2304      	movs	r3, #4
    3c34:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    3c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c38:	6a3a      	ldr	r2, [r7, #32]
    3c3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    3c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c3e:	6a3a      	ldr	r2, [r7, #32]
    3c40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    3c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c44:	2200      	movs	r2, #0
    3c46:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    3c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c4a:	3304      	adds	r3, #4
    3c4c:	4618      	mov	r0, r3
    3c4e:	f7ff fea9 	bl	39a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c54:	3318      	adds	r3, #24
    3c56:	4618      	mov	r0, r3
    3c58:	f7ff fea4 	bl	39a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    3c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c62:	6a3b      	ldr	r3, [r7, #32]
    3c64:	f1c3 0205 	rsb	r2, r3, #5
    3c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    3c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    3c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c74:	2200      	movs	r2, #0
    3c76:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    3c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c7a:	2200      	movs	r2, #0
    3c7c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c80:	2200      	movs	r2, #0
    3c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3c86:	683a      	ldr	r2, [r7, #0]
    3c88:	68f9      	ldr	r1, [r7, #12]
    3c8a:	6938      	ldr	r0, [r7, #16]
    3c8c:	f003 f806 	bl	6c9c <pxPortInitialiseStack>
    3c90:	4602      	mov	r2, r0
    3c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c94:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    3c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d002      	beq.n	3ca2 <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3ca2:	bf00      	nop
    3ca4:	3718      	adds	r7, #24
    3ca6:	46bd      	mov	sp, r7
    3ca8:	bd80      	pop	{r7, pc}
    3caa:	Address 0x0000000000003caa is out of bounds.


00003cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    3cac:	b580      	push	{r7, lr}
    3cae:	b082      	sub	sp, #8
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3cb4:	f003 f896 	bl	6de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    3cb8:	4b2c      	ldr	r3, [pc, #176]	; (3d6c <prvAddNewTaskToReadyList+0xc0>)
    3cba:	681b      	ldr	r3, [r3, #0]
    3cbc:	3301      	adds	r3, #1
    3cbe:	4a2b      	ldr	r2, [pc, #172]	; (3d6c <prvAddNewTaskToReadyList+0xc0>)
    3cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    3cc2:	4b2b      	ldr	r3, [pc, #172]	; (3d70 <prvAddNewTaskToReadyList+0xc4>)
    3cc4:	681b      	ldr	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d109      	bne.n	3cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    3cca:	4a29      	ldr	r2, [pc, #164]	; (3d70 <prvAddNewTaskToReadyList+0xc4>)
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3cd0:	4b26      	ldr	r3, [pc, #152]	; (3d6c <prvAddNewTaskToReadyList+0xc0>)
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	2b01      	cmp	r3, #1
    3cd6:	d110      	bne.n	3cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    3cd8:	f000 fb82 	bl	43e0 <prvInitialiseTaskLists>
    3cdc:	e00d      	b.n	3cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3cde:	4b25      	ldr	r3, [pc, #148]	; (3d74 <prvAddNewTaskToReadyList+0xc8>)
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d109      	bne.n	3cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3ce6:	4b22      	ldr	r3, [pc, #136]	; (3d70 <prvAddNewTaskToReadyList+0xc4>)
    3ce8:	681b      	ldr	r3, [r3, #0]
    3cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cf0:	429a      	cmp	r2, r3
    3cf2:	d802      	bhi.n	3cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    3cf4:	4a1e      	ldr	r2, [pc, #120]	; (3d70 <prvAddNewTaskToReadyList+0xc4>)
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    3cfa:	4b1f      	ldr	r3, [pc, #124]	; (3d78 <prvAddNewTaskToReadyList+0xcc>)
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	3301      	adds	r3, #1
    3d00:	4a1d      	ldr	r2, [pc, #116]	; (3d78 <prvAddNewTaskToReadyList+0xcc>)
    3d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    3d04:	4b1c      	ldr	r3, [pc, #112]	; (3d78 <prvAddNewTaskToReadyList+0xcc>)
    3d06:	681a      	ldr	r2, [r3, #0]
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d10:	2201      	movs	r2, #1
    3d12:	409a      	lsls	r2, r3
    3d14:	4b19      	ldr	r3, [pc, #100]	; (3d7c <prvAddNewTaskToReadyList+0xd0>)
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	4313      	orrs	r3, r2
    3d1a:	4a18      	ldr	r2, [pc, #96]	; (3d7c <prvAddNewTaskToReadyList+0xd0>)
    3d1c:	6013      	str	r3, [r2, #0]
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d22:	4613      	mov	r3, r2
    3d24:	009b      	lsls	r3, r3, #2
    3d26:	4413      	add	r3, r2
    3d28:	009b      	lsls	r3, r3, #2
    3d2a:	4a15      	ldr	r2, [pc, #84]	; (3d80 <prvAddNewTaskToReadyList+0xd4>)
    3d2c:	441a      	add	r2, r3
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	3304      	adds	r3, #4
    3d32:	4619      	mov	r1, r3
    3d34:	4610      	mov	r0, r2
    3d36:	f7ff fe42 	bl	39be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    3d3a:	f003 f86d 	bl	6e18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    3d3e:	4b0d      	ldr	r3, [pc, #52]	; (3d74 <prvAddNewTaskToReadyList+0xc8>)
    3d40:	681b      	ldr	r3, [r3, #0]
    3d42:	2b00      	cmp	r3, #0
    3d44:	d00e      	beq.n	3d64 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3d46:	4b0a      	ldr	r3, [pc, #40]	; (3d70 <prvAddNewTaskToReadyList+0xc4>)
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d50:	429a      	cmp	r2, r3
    3d52:	d207      	bcs.n	3d64 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
    3d54:	4b0b      	ldr	r3, [pc, #44]	; (3d84 <prvAddNewTaskToReadyList+0xd8>)
    3d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d5a:	601a      	str	r2, [r3, #0]
    3d5c:	f3bf 8f4f 	dsb	sy
    3d60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3d64:	bf00      	nop
    3d66:	3708      	adds	r7, #8
    3d68:	46bd      	mov	sp, r7
    3d6a:	bd80      	pop	{r7, pc}
    3d6c:	10000380 	.word	0x10000380
    3d70:	100002a8 	.word	0x100002a8
    3d74:	1000038c 	.word	0x1000038c
    3d78:	1000039c 	.word	0x1000039c
    3d7c:	10000388 	.word	0x10000388
    3d80:	100002ac 	.word	0x100002ac
    3d84:	e000ed04 	.word	0xe000ed04

00003d88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b084      	sub	sp, #16
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    3d90:	2300      	movs	r3, #0
    3d92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d008      	beq.n	3dac <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3d9a:	f000 f86f 	bl	3e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3d9e:	2100      	movs	r1, #0
    3da0:	6878      	ldr	r0, [r7, #4]
    3da2:	f000 fc4f 	bl	4644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3da6:	f000 f877 	bl	3e98 <xTaskResumeAll>
    3daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3dac:	68fb      	ldr	r3, [r7, #12]
    3dae:	2b00      	cmp	r3, #0
    3db0:	d107      	bne.n	3dc2 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    3db2:	4b06      	ldr	r3, [pc, #24]	; (3dcc <vTaskDelay+0x44>)
    3db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3db8:	601a      	str	r2, [r3, #0]
    3dba:	f3bf 8f4f 	dsb	sy
    3dbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3dc2:	bf00      	nop
    3dc4:	3710      	adds	r7, #16
    3dc6:	46bd      	mov	sp, r7
    3dc8:	bd80      	pop	{r7, pc}
    3dca:	bf00      	nop
    3dcc:	e000ed04 	.word	0xe000ed04

00003dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3dd0:	b580      	push	{r7, lr}
    3dd2:	b08a      	sub	sp, #40	; 0x28
    3dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    3dd6:	2300      	movs	r3, #0
    3dd8:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    3dda:	2300      	movs	r3, #0
    3ddc:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    3dde:	1d3a      	adds	r2, r7, #4
    3de0:	f107 0108 	add.w	r1, r7, #8
    3de4:	f107 030c 	add.w	r3, r7, #12
    3de8:	4618      	mov	r0, r3
    3dea:	f003 f89b 	bl	6f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    3dee:	6879      	ldr	r1, [r7, #4]
    3df0:	68bb      	ldr	r3, [r7, #8]
    3df2:	68fa      	ldr	r2, [r7, #12]
    3df4:	9202      	str	r2, [sp, #8]
    3df6:	9301      	str	r3, [sp, #4]
    3df8:	2300      	movs	r3, #0
    3dfa:	9300      	str	r3, [sp, #0]
    3dfc:	2300      	movs	r3, #0
    3dfe:	460a      	mov	r2, r1
    3e00:	4918      	ldr	r1, [pc, #96]	; (3e64 <vTaskStartScheduler+0x94>)
    3e02:	4819      	ldr	r0, [pc, #100]	; (3e68 <vTaskStartScheduler+0x98>)
    3e04:	f7ff fe62 	bl	3acc <xTaskCreateStatic>
    3e08:	4602      	mov	r2, r0
    3e0a:	4b18      	ldr	r3, [pc, #96]	; (3e6c <vTaskStartScheduler+0x9c>)
    3e0c:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    3e0e:	4b17      	ldr	r3, [pc, #92]	; (3e6c <vTaskStartScheduler+0x9c>)
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d002      	beq.n	3e1c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
    3e16:	2301      	movs	r3, #1
    3e18:	617b      	str	r3, [r7, #20]
    3e1a:	e001      	b.n	3e20 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    3e1c:	2300      	movs	r3, #0
    3e1e:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    3e20:	697b      	ldr	r3, [r7, #20]
    3e22:	2b01      	cmp	r3, #1
    3e24:	d102      	bne.n	3e2c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
    3e26:	f003 f8bd 	bl	6fa4 <xTimerCreateTimerTask>
    3e2a:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3e2c:	697b      	ldr	r3, [r7, #20]
    3e2e:	2b01      	cmp	r3, #1
    3e30:	d114      	bne.n	3e5c <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    3e32:	f04f 0328 	mov.w	r3, #40	; 0x28
    3e36:	f383 8811 	msr	BASEPRI, r3
    3e3a:	f3bf 8f6f 	isb	sy
    3e3e:	f3bf 8f4f 	dsb	sy
    3e42:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3e44:	4b0a      	ldr	r3, [pc, #40]	; (3e70 <vTaskStartScheduler+0xa0>)
    3e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    3e4c:	4b09      	ldr	r3, [pc, #36]	; (3e74 <vTaskStartScheduler+0xa4>)
    3e4e:	2201      	movs	r2, #1
    3e50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    3e52:	4b09      	ldr	r3, [pc, #36]	; (3e78 <vTaskStartScheduler+0xa8>)
    3e54:	2200      	movs	r2, #0
    3e56:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3e58:	f002 ff9a 	bl	6d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3e5c:	bf00      	nop
    3e5e:	3718      	adds	r7, #24
    3e60:	46bd      	mov	sp, r7
    3e62:	bd80      	pop	{r7, pc}
    3e64:	0000a104 	.word	0x0000a104
    3e68:	000043d1 	.word	0x000043d1
    3e6c:	100003a4 	.word	0x100003a4
    3e70:	100003a0 	.word	0x100003a0
    3e74:	1000038c 	.word	0x1000038c
    3e78:	10000384 	.word	0x10000384

00003e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3e7c:	b480      	push	{r7}
    3e7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3e80:	4b04      	ldr	r3, [pc, #16]	; (3e94 <vTaskSuspendAll+0x18>)
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	3301      	adds	r3, #1
    3e86:	4a03      	ldr	r2, [pc, #12]	; (3e94 <vTaskSuspendAll+0x18>)
    3e88:	6013      	str	r3, [r2, #0]
}
    3e8a:	bf00      	nop
    3e8c:	46bd      	mov	sp, r7
    3e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e92:	4770      	bx	lr
    3e94:	100003a8 	.word	0x100003a8

00003e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3e98:	b580      	push	{r7, lr}
    3e9a:	b084      	sub	sp, #16
    3e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    3e9e:	2300      	movs	r3, #0
    3ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    3ea2:	2300      	movs	r3, #0
    3ea4:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ea6:	f002 ff9d 	bl	6de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3eaa:	4b39      	ldr	r3, [pc, #228]	; (3f90 <xTaskResumeAll+0xf8>)
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	3b01      	subs	r3, #1
    3eb0:	4a37      	ldr	r2, [pc, #220]	; (3f90 <xTaskResumeAll+0xf8>)
    3eb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3eb4:	4b36      	ldr	r3, [pc, #216]	; (3f90 <xTaskResumeAll+0xf8>)
    3eb6:	681b      	ldr	r3, [r3, #0]
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d161      	bne.n	3f80 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3ebc:	4b35      	ldr	r3, [pc, #212]	; (3f94 <xTaskResumeAll+0xfc>)
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d05d      	beq.n	3f80 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3ec4:	e02e      	b.n	3f24 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3ec6:	4b34      	ldr	r3, [pc, #208]	; (3f98 <xTaskResumeAll+0x100>)
    3ec8:	68db      	ldr	r3, [r3, #12]
    3eca:	68db      	ldr	r3, [r3, #12]
    3ecc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3ece:	68fb      	ldr	r3, [r7, #12]
    3ed0:	3318      	adds	r3, #24
    3ed2:	4618      	mov	r0, r3
    3ed4:	f7ff fdd0 	bl	3a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3ed8:	68fb      	ldr	r3, [r7, #12]
    3eda:	3304      	adds	r3, #4
    3edc:	4618      	mov	r0, r3
    3ede:	f7ff fdcb 	bl	3a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3ee2:	68fb      	ldr	r3, [r7, #12]
    3ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ee6:	2201      	movs	r2, #1
    3ee8:	409a      	lsls	r2, r3
    3eea:	4b2c      	ldr	r3, [pc, #176]	; (3f9c <xTaskResumeAll+0x104>)
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	4313      	orrs	r3, r2
    3ef0:	4a2a      	ldr	r2, [pc, #168]	; (3f9c <xTaskResumeAll+0x104>)
    3ef2:	6013      	str	r3, [r2, #0]
    3ef4:	68fb      	ldr	r3, [r7, #12]
    3ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ef8:	4613      	mov	r3, r2
    3efa:	009b      	lsls	r3, r3, #2
    3efc:	4413      	add	r3, r2
    3efe:	009b      	lsls	r3, r3, #2
    3f00:	4a27      	ldr	r2, [pc, #156]	; (3fa0 <xTaskResumeAll+0x108>)
    3f02:	441a      	add	r2, r3
    3f04:	68fb      	ldr	r3, [r7, #12]
    3f06:	3304      	adds	r3, #4
    3f08:	4619      	mov	r1, r3
    3f0a:	4610      	mov	r0, r2
    3f0c:	f7ff fd57 	bl	39be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f10:	68fb      	ldr	r3, [r7, #12]
    3f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f14:	4b23      	ldr	r3, [pc, #140]	; (3fa4 <xTaskResumeAll+0x10c>)
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f1a:	429a      	cmp	r2, r3
    3f1c:	d302      	bcc.n	3f24 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    3f1e:	4b22      	ldr	r3, [pc, #136]	; (3fa8 <xTaskResumeAll+0x110>)
    3f20:	2201      	movs	r2, #1
    3f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3f24:	4b1c      	ldr	r3, [pc, #112]	; (3f98 <xTaskResumeAll+0x100>)
    3f26:	681b      	ldr	r3, [r3, #0]
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d1cc      	bne.n	3ec6 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    3f2c:	68fb      	ldr	r3, [r7, #12]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d001      	beq.n	3f36 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    3f32:	f000 fadf 	bl	44f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    3f36:	4b1d      	ldr	r3, [pc, #116]	; (3fac <xTaskResumeAll+0x114>)
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	2b00      	cmp	r3, #0
    3f40:	d010      	beq.n	3f64 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    3f42:	f000 f847 	bl	3fd4 <xTaskIncrementTick>
    3f46:	4603      	mov	r3, r0
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d002      	beq.n	3f52 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    3f4c:	4b16      	ldr	r3, [pc, #88]	; (3fa8 <xTaskResumeAll+0x110>)
    3f4e:	2201      	movs	r2, #1
    3f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	3b01      	subs	r3, #1
    3f56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	d1f1      	bne.n	3f42 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    3f5e:	4b13      	ldr	r3, [pc, #76]	; (3fac <xTaskResumeAll+0x114>)
    3f60:	2200      	movs	r2, #0
    3f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    3f64:	4b10      	ldr	r3, [pc, #64]	; (3fa8 <xTaskResumeAll+0x110>)
    3f66:	681b      	ldr	r3, [r3, #0]
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d009      	beq.n	3f80 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3f6c:	2301      	movs	r3, #1
    3f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3f70:	4b0f      	ldr	r3, [pc, #60]	; (3fb0 <xTaskResumeAll+0x118>)
    3f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f76:	601a      	str	r2, [r3, #0]
    3f78:	f3bf 8f4f 	dsb	sy
    3f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3f80:	f002 ff4a 	bl	6e18 <vPortExitCritical>

	return xAlreadyYielded;
    3f84:	68bb      	ldr	r3, [r7, #8]
}
    3f86:	4618      	mov	r0, r3
    3f88:	3710      	adds	r7, #16
    3f8a:	46bd      	mov	sp, r7
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	bf00      	nop
    3f90:	100003a8 	.word	0x100003a8
    3f94:	10000380 	.word	0x10000380
    3f98:	10000340 	.word	0x10000340
    3f9c:	10000388 	.word	0x10000388
    3fa0:	100002ac 	.word	0x100002ac
    3fa4:	100002a8 	.word	0x100002a8
    3fa8:	10000394 	.word	0x10000394
    3fac:	10000390 	.word	0x10000390
    3fb0:	e000ed04 	.word	0xe000ed04

00003fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3fb4:	b480      	push	{r7}
    3fb6:	b083      	sub	sp, #12
    3fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    3fba:	4b05      	ldr	r3, [pc, #20]	; (3fd0 <xTaskGetTickCount+0x1c>)
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    3fc0:	687b      	ldr	r3, [r7, #4]
}
    3fc2:	4618      	mov	r0, r3
    3fc4:	370c      	adds	r7, #12
    3fc6:	46bd      	mov	sp, r7
    3fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	10000384 	.word	0x10000384

00003fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b086      	sub	sp, #24
    3fd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3fda:	2300      	movs	r3, #0
    3fdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3fde:	4b48      	ldr	r3, [pc, #288]	; (4100 <xTaskIncrementTick+0x12c>)
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d17c      	bne.n	40e0 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3fe6:	4b47      	ldr	r3, [pc, #284]	; (4104 <xTaskIncrementTick+0x130>)
    3fe8:	681b      	ldr	r3, [r3, #0]
    3fea:	3301      	adds	r3, #1
    3fec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    3fee:	4a45      	ldr	r2, [pc, #276]	; (4104 <xTaskIncrementTick+0x130>)
    3ff0:	693b      	ldr	r3, [r7, #16]
    3ff2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3ff4:	693b      	ldr	r3, [r7, #16]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d110      	bne.n	401c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
    3ffa:	4b43      	ldr	r3, [pc, #268]	; (4108 <xTaskIncrementTick+0x134>)
    3ffc:	681b      	ldr	r3, [r3, #0]
    3ffe:	60fb      	str	r3, [r7, #12]
    4000:	4b42      	ldr	r3, [pc, #264]	; (410c <xTaskIncrementTick+0x138>)
    4002:	681b      	ldr	r3, [r3, #0]
    4004:	4a40      	ldr	r2, [pc, #256]	; (4108 <xTaskIncrementTick+0x134>)
    4006:	6013      	str	r3, [r2, #0]
    4008:	4a40      	ldr	r2, [pc, #256]	; (410c <xTaskIncrementTick+0x138>)
    400a:	68fb      	ldr	r3, [r7, #12]
    400c:	6013      	str	r3, [r2, #0]
    400e:	4b40      	ldr	r3, [pc, #256]	; (4110 <xTaskIncrementTick+0x13c>)
    4010:	681b      	ldr	r3, [r3, #0]
    4012:	3301      	adds	r3, #1
    4014:	4a3e      	ldr	r2, [pc, #248]	; (4110 <xTaskIncrementTick+0x13c>)
    4016:	6013      	str	r3, [r2, #0]
    4018:	f000 fa6c 	bl	44f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    401c:	4b3d      	ldr	r3, [pc, #244]	; (4114 <xTaskIncrementTick+0x140>)
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	693a      	ldr	r2, [r7, #16]
    4022:	429a      	cmp	r2, r3
    4024:	d34d      	bcc.n	40c2 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4026:	4b38      	ldr	r3, [pc, #224]	; (4108 <xTaskIncrementTick+0x134>)
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	2b00      	cmp	r3, #0
    402e:	d101      	bne.n	4034 <xTaskIncrementTick+0x60>
    4030:	2301      	movs	r3, #1
    4032:	e000      	b.n	4036 <xTaskIncrementTick+0x62>
    4034:	2300      	movs	r3, #0
    4036:	2b00      	cmp	r3, #0
    4038:	d004      	beq.n	4044 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    403a:	4b36      	ldr	r3, [pc, #216]	; (4114 <xTaskIncrementTick+0x140>)
    403c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4040:	601a      	str	r2, [r3, #0]
					break;
    4042:	e03e      	b.n	40c2 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4044:	4b30      	ldr	r3, [pc, #192]	; (4108 <xTaskIncrementTick+0x134>)
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	68db      	ldr	r3, [r3, #12]
    404a:	68db      	ldr	r3, [r3, #12]
    404c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    404e:	68bb      	ldr	r3, [r7, #8]
    4050:	685b      	ldr	r3, [r3, #4]
    4052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    4054:	693a      	ldr	r2, [r7, #16]
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	429a      	cmp	r2, r3
    405a:	d203      	bcs.n	4064 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    405c:	4a2d      	ldr	r2, [pc, #180]	; (4114 <xTaskIncrementTick+0x140>)
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	6013      	str	r3, [r2, #0]
						break;
    4062:	e02e      	b.n	40c2 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4064:	68bb      	ldr	r3, [r7, #8]
    4066:	3304      	adds	r3, #4
    4068:	4618      	mov	r0, r3
    406a:	f7ff fd05 	bl	3a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    406e:	68bb      	ldr	r3, [r7, #8]
    4070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4072:	2b00      	cmp	r3, #0
    4074:	d004      	beq.n	4080 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4076:	68bb      	ldr	r3, [r7, #8]
    4078:	3318      	adds	r3, #24
    407a:	4618      	mov	r0, r3
    407c:	f7ff fcfc 	bl	3a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    4080:	68bb      	ldr	r3, [r7, #8]
    4082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4084:	2201      	movs	r2, #1
    4086:	409a      	lsls	r2, r3
    4088:	4b23      	ldr	r3, [pc, #140]	; (4118 <xTaskIncrementTick+0x144>)
    408a:	681b      	ldr	r3, [r3, #0]
    408c:	4313      	orrs	r3, r2
    408e:	4a22      	ldr	r2, [pc, #136]	; (4118 <xTaskIncrementTick+0x144>)
    4090:	6013      	str	r3, [r2, #0]
    4092:	68bb      	ldr	r3, [r7, #8]
    4094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4096:	4613      	mov	r3, r2
    4098:	009b      	lsls	r3, r3, #2
    409a:	4413      	add	r3, r2
    409c:	009b      	lsls	r3, r3, #2
    409e:	4a1f      	ldr	r2, [pc, #124]	; (411c <xTaskIncrementTick+0x148>)
    40a0:	441a      	add	r2, r3
    40a2:	68bb      	ldr	r3, [r7, #8]
    40a4:	3304      	adds	r3, #4
    40a6:	4619      	mov	r1, r3
    40a8:	4610      	mov	r0, r2
    40aa:	f7ff fc88 	bl	39be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    40ae:	68bb      	ldr	r3, [r7, #8]
    40b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    40b2:	4b1b      	ldr	r3, [pc, #108]	; (4120 <xTaskIncrementTick+0x14c>)
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40b8:	429a      	cmp	r2, r3
    40ba:	d3b4      	bcc.n	4026 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
    40bc:	2301      	movs	r3, #1
    40be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    40c0:	e7b1      	b.n	4026 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    40c2:	4b17      	ldr	r3, [pc, #92]	; (4120 <xTaskIncrementTick+0x14c>)
    40c4:	681b      	ldr	r3, [r3, #0]
    40c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    40c8:	4914      	ldr	r1, [pc, #80]	; (411c <xTaskIncrementTick+0x148>)
    40ca:	4613      	mov	r3, r2
    40cc:	009b      	lsls	r3, r3, #2
    40ce:	4413      	add	r3, r2
    40d0:	009b      	lsls	r3, r3, #2
    40d2:	440b      	add	r3, r1
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	2b01      	cmp	r3, #1
    40d8:	d907      	bls.n	40ea <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
    40da:	2301      	movs	r3, #1
    40dc:	617b      	str	r3, [r7, #20]
    40de:	e004      	b.n	40ea <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    40e0:	4b10      	ldr	r3, [pc, #64]	; (4124 <xTaskIncrementTick+0x150>)
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	3301      	adds	r3, #1
    40e6:	4a0f      	ldr	r2, [pc, #60]	; (4124 <xTaskIncrementTick+0x150>)
    40e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    40ea:	4b0f      	ldr	r3, [pc, #60]	; (4128 <xTaskIncrementTick+0x154>)
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d001      	beq.n	40f6 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
    40f2:	2301      	movs	r3, #1
    40f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    40f6:	697b      	ldr	r3, [r7, #20]
}
    40f8:	4618      	mov	r0, r3
    40fa:	3718      	adds	r7, #24
    40fc:	46bd      	mov	sp, r7
    40fe:	bd80      	pop	{r7, pc}
    4100:	100003a8 	.word	0x100003a8
    4104:	10000384 	.word	0x10000384
    4108:	10000338 	.word	0x10000338
    410c:	1000033c 	.word	0x1000033c
    4110:	10000398 	.word	0x10000398
    4114:	100003a0 	.word	0x100003a0
    4118:	10000388 	.word	0x10000388
    411c:	100002ac 	.word	0x100002ac
    4120:	100002a8 	.word	0x100002a8
    4124:	10000390 	.word	0x10000390
    4128:	10000394 	.word	0x10000394

0000412c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    412c:	b580      	push	{r7, lr}
    412e:	b084      	sub	sp, #16
    4130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4132:	4b28      	ldr	r3, [pc, #160]	; (41d4 <vTaskSwitchContext+0xa8>)
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	2b00      	cmp	r3, #0
    4138:	d003      	beq.n	4142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    413a:	4b27      	ldr	r3, [pc, #156]	; (41d8 <vTaskSwitchContext+0xac>)
    413c:	2201      	movs	r2, #1
    413e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4140:	e043      	b.n	41ca <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    4142:	4b25      	ldr	r3, [pc, #148]	; (41d8 <vTaskSwitchContext+0xac>)
    4144:	2200      	movs	r2, #0
    4146:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    4148:	f002 fc6a 	bl	6a20 <ThreadRuntimeCounter>
    414c:	4602      	mov	r2, r0
    414e:	4b23      	ldr	r3, [pc, #140]	; (41dc <vTaskSwitchContext+0xb0>)
    4150:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    4152:	4b22      	ldr	r3, [pc, #136]	; (41dc <vTaskSwitchContext+0xb0>)
    4154:	681a      	ldr	r2, [r3, #0]
    4156:	4b22      	ldr	r3, [pc, #136]	; (41e0 <vTaskSwitchContext+0xb4>)
    4158:	681b      	ldr	r3, [r3, #0]
    415a:	429a      	cmp	r2, r3
    415c:	d909      	bls.n	4172 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    415e:	4b21      	ldr	r3, [pc, #132]	; (41e4 <vTaskSwitchContext+0xb8>)
    4160:	681b      	ldr	r3, [r3, #0]
    4162:	6d59      	ldr	r1, [r3, #84]	; 0x54
    4164:	4a1d      	ldr	r2, [pc, #116]	; (41dc <vTaskSwitchContext+0xb0>)
    4166:	6810      	ldr	r0, [r2, #0]
    4168:	4a1d      	ldr	r2, [pc, #116]	; (41e0 <vTaskSwitchContext+0xb4>)
    416a:	6812      	ldr	r2, [r2, #0]
    416c:	1a82      	subs	r2, r0, r2
    416e:	440a      	add	r2, r1
    4170:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    4172:	4b1a      	ldr	r3, [pc, #104]	; (41dc <vTaskSwitchContext+0xb0>)
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	4a1a      	ldr	r2, [pc, #104]	; (41e0 <vTaskSwitchContext+0xb4>)
    4178:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    417a:	4b1b      	ldr	r3, [pc, #108]	; (41e8 <vTaskSwitchContext+0xbc>)
    417c:	681b      	ldr	r3, [r3, #0]
    417e:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	fab3 f383 	clz	r3, r3
    4186:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    4188:	78fb      	ldrb	r3, [r7, #3]
    418a:	f1c3 031f 	rsb	r3, r3, #31
    418e:	60fb      	str	r3, [r7, #12]
    4190:	68fa      	ldr	r2, [r7, #12]
    4192:	4613      	mov	r3, r2
    4194:	009b      	lsls	r3, r3, #2
    4196:	4413      	add	r3, r2
    4198:	009b      	lsls	r3, r3, #2
    419a:	4a14      	ldr	r2, [pc, #80]	; (41ec <vTaskSwitchContext+0xc0>)
    419c:	4413      	add	r3, r2
    419e:	60bb      	str	r3, [r7, #8]
    41a0:	68bb      	ldr	r3, [r7, #8]
    41a2:	685b      	ldr	r3, [r3, #4]
    41a4:	685a      	ldr	r2, [r3, #4]
    41a6:	68bb      	ldr	r3, [r7, #8]
    41a8:	605a      	str	r2, [r3, #4]
    41aa:	68bb      	ldr	r3, [r7, #8]
    41ac:	685a      	ldr	r2, [r3, #4]
    41ae:	68bb      	ldr	r3, [r7, #8]
    41b0:	3308      	adds	r3, #8
    41b2:	429a      	cmp	r2, r3
    41b4:	d104      	bne.n	41c0 <vTaskSwitchContext+0x94>
    41b6:	68bb      	ldr	r3, [r7, #8]
    41b8:	685b      	ldr	r3, [r3, #4]
    41ba:	685a      	ldr	r2, [r3, #4]
    41bc:	68bb      	ldr	r3, [r7, #8]
    41be:	605a      	str	r2, [r3, #4]
    41c0:	68bb      	ldr	r3, [r7, #8]
    41c2:	685b      	ldr	r3, [r3, #4]
    41c4:	68db      	ldr	r3, [r3, #12]
    41c6:	4a07      	ldr	r2, [pc, #28]	; (41e4 <vTaskSwitchContext+0xb8>)
    41c8:	6013      	str	r3, [r2, #0]
}
    41ca:	bf00      	nop
    41cc:	3710      	adds	r7, #16
    41ce:	46bd      	mov	sp, r7
    41d0:	bd80      	pop	{r7, pc}
    41d2:	bf00      	nop
    41d4:	100003a8 	.word	0x100003a8
    41d8:	10000394 	.word	0x10000394
    41dc:	100003b0 	.word	0x100003b0
    41e0:	100003ac 	.word	0x100003ac
    41e4:	100002a8 	.word	0x100002a8
    41e8:	10000388 	.word	0x10000388
    41ec:	100002ac 	.word	0x100002ac

000041f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    41f0:	b580      	push	{r7, lr}
    41f2:	b082      	sub	sp, #8
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
    41f8:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    41fa:	4b07      	ldr	r3, [pc, #28]	; (4218 <vTaskPlaceOnEventList+0x28>)
    41fc:	681b      	ldr	r3, [r3, #0]
    41fe:	3318      	adds	r3, #24
    4200:	4619      	mov	r1, r3
    4202:	6878      	ldr	r0, [r7, #4]
    4204:	f7ff fbff 	bl	3a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4208:	2101      	movs	r1, #1
    420a:	6838      	ldr	r0, [r7, #0]
    420c:	f000 fa1a 	bl	4644 <prvAddCurrentTaskToDelayedList>
}
    4210:	bf00      	nop
    4212:	3708      	adds	r7, #8
    4214:	46bd      	mov	sp, r7
    4216:	bd80      	pop	{r7, pc}
    4218:	100002a8 	.word	0x100002a8

0000421c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    421c:	b580      	push	{r7, lr}
    421e:	b084      	sub	sp, #16
    4220:	af00      	add	r7, sp, #0
    4222:	60f8      	str	r0, [r7, #12]
    4224:	60b9      	str	r1, [r7, #8]
    4226:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4228:	4b0a      	ldr	r3, [pc, #40]	; (4254 <vTaskPlaceOnEventListRestricted+0x38>)
    422a:	681b      	ldr	r3, [r3, #0]
    422c:	3318      	adds	r3, #24
    422e:	4619      	mov	r1, r3
    4230:	68f8      	ldr	r0, [r7, #12]
    4232:	f7ff fbc4 	bl	39be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	2b00      	cmp	r3, #0
    423a:	d002      	beq.n	4242 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
    423c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    4242:	6879      	ldr	r1, [r7, #4]
    4244:	68b8      	ldr	r0, [r7, #8]
    4246:	f000 f9fd 	bl	4644 <prvAddCurrentTaskToDelayedList>
	}
    424a:	bf00      	nop
    424c:	3710      	adds	r7, #16
    424e:	46bd      	mov	sp, r7
    4250:	bd80      	pop	{r7, pc}
    4252:	bf00      	nop
    4254:	100002a8 	.word	0x100002a8

00004258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    4258:	b580      	push	{r7, lr}
    425a:	b084      	sub	sp, #16
    425c:	af00      	add	r7, sp, #0
    425e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	68db      	ldr	r3, [r3, #12]
    4264:	68db      	ldr	r3, [r3, #12]
    4266:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4268:	68bb      	ldr	r3, [r7, #8]
    426a:	3318      	adds	r3, #24
    426c:	4618      	mov	r0, r3
    426e:	f7ff fc03 	bl	3a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4272:	4b1d      	ldr	r3, [pc, #116]	; (42e8 <xTaskRemoveFromEventList+0x90>)
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d11c      	bne.n	42b4 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    427a:	68bb      	ldr	r3, [r7, #8]
    427c:	3304      	adds	r3, #4
    427e:	4618      	mov	r0, r3
    4280:	f7ff fbfa 	bl	3a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    4284:	68bb      	ldr	r3, [r7, #8]
    4286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4288:	2201      	movs	r2, #1
    428a:	409a      	lsls	r2, r3
    428c:	4b17      	ldr	r3, [pc, #92]	; (42ec <xTaskRemoveFromEventList+0x94>)
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	4313      	orrs	r3, r2
    4292:	4a16      	ldr	r2, [pc, #88]	; (42ec <xTaskRemoveFromEventList+0x94>)
    4294:	6013      	str	r3, [r2, #0]
    4296:	68bb      	ldr	r3, [r7, #8]
    4298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    429a:	4613      	mov	r3, r2
    429c:	009b      	lsls	r3, r3, #2
    429e:	4413      	add	r3, r2
    42a0:	009b      	lsls	r3, r3, #2
    42a2:	4a13      	ldr	r2, [pc, #76]	; (42f0 <xTaskRemoveFromEventList+0x98>)
    42a4:	441a      	add	r2, r3
    42a6:	68bb      	ldr	r3, [r7, #8]
    42a8:	3304      	adds	r3, #4
    42aa:	4619      	mov	r1, r3
    42ac:	4610      	mov	r0, r2
    42ae:	f7ff fb86 	bl	39be <vListInsertEnd>
    42b2:	e005      	b.n	42c0 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    42b4:	68bb      	ldr	r3, [r7, #8]
    42b6:	3318      	adds	r3, #24
    42b8:	4619      	mov	r1, r3
    42ba:	480e      	ldr	r0, [pc, #56]	; (42f4 <xTaskRemoveFromEventList+0x9c>)
    42bc:	f7ff fb7f 	bl	39be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    42c0:	68bb      	ldr	r3, [r7, #8]
    42c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42c4:	4b0c      	ldr	r3, [pc, #48]	; (42f8 <xTaskRemoveFromEventList+0xa0>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    42ca:	429a      	cmp	r2, r3
    42cc:	d905      	bls.n	42da <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    42ce:	2301      	movs	r3, #1
    42d0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    42d2:	4b0a      	ldr	r3, [pc, #40]	; (42fc <xTaskRemoveFromEventList+0xa4>)
    42d4:	2201      	movs	r2, #1
    42d6:	601a      	str	r2, [r3, #0]
    42d8:	e001      	b.n	42de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    42da:	2300      	movs	r3, #0
    42dc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    42de:	68fb      	ldr	r3, [r7, #12]
}
    42e0:	4618      	mov	r0, r3
    42e2:	3710      	adds	r7, #16
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}
    42e8:	100003a8 	.word	0x100003a8
    42ec:	10000388 	.word	0x10000388
    42f0:	100002ac 	.word	0x100002ac
    42f4:	10000340 	.word	0x10000340
    42f8:	100002a8 	.word	0x100002a8
    42fc:	10000394 	.word	0x10000394

00004300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    4300:	b480      	push	{r7}
    4302:	b083      	sub	sp, #12
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4308:	4b06      	ldr	r3, [pc, #24]	; (4324 <vTaskInternalSetTimeOutState+0x24>)
    430a:	681a      	ldr	r2, [r3, #0]
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4310:	4b05      	ldr	r3, [pc, #20]	; (4328 <vTaskInternalSetTimeOutState+0x28>)
    4312:	681a      	ldr	r2, [r3, #0]
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	605a      	str	r2, [r3, #4]
}
    4318:	bf00      	nop
    431a:	370c      	adds	r7, #12
    431c:	46bd      	mov	sp, r7
    431e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4322:	4770      	bx	lr
    4324:	10000398 	.word	0x10000398
    4328:	10000384 	.word	0x10000384

0000432c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    432c:	b580      	push	{r7, lr}
    432e:	b086      	sub	sp, #24
    4330:	af00      	add	r7, sp, #0
    4332:	6078      	str	r0, [r7, #4]
    4334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4336:	f002 fd55 	bl	6de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    433a:	4b1d      	ldr	r3, [pc, #116]	; (43b0 <xTaskCheckForTimeOut+0x84>)
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	685b      	ldr	r3, [r3, #4]
    4344:	693a      	ldr	r2, [r7, #16]
    4346:	1ad3      	subs	r3, r2, r3
    4348:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    434a:	683b      	ldr	r3, [r7, #0]
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4352:	d102      	bne.n	435a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    4354:	2300      	movs	r3, #0
    4356:	617b      	str	r3, [r7, #20]
    4358:	e023      	b.n	43a2 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681a      	ldr	r2, [r3, #0]
    435e:	4b15      	ldr	r3, [pc, #84]	; (43b4 <xTaskCheckForTimeOut+0x88>)
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	429a      	cmp	r2, r3
    4364:	d007      	beq.n	4376 <xTaskCheckForTimeOut+0x4a>
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	685b      	ldr	r3, [r3, #4]
    436a:	693a      	ldr	r2, [r7, #16]
    436c:	429a      	cmp	r2, r3
    436e:	d302      	bcc.n	4376 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    4370:	2301      	movs	r3, #1
    4372:	617b      	str	r3, [r7, #20]
    4374:	e015      	b.n	43a2 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    4376:	683b      	ldr	r3, [r7, #0]
    4378:	681b      	ldr	r3, [r3, #0]
    437a:	68fa      	ldr	r2, [r7, #12]
    437c:	429a      	cmp	r2, r3
    437e:	d20b      	bcs.n	4398 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	681a      	ldr	r2, [r3, #0]
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	1ad2      	subs	r2, r2, r3
    4388:	683b      	ldr	r3, [r7, #0]
    438a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    438c:	6878      	ldr	r0, [r7, #4]
    438e:	f7ff ffb7 	bl	4300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    4392:	2300      	movs	r3, #0
    4394:	617b      	str	r3, [r7, #20]
    4396:	e004      	b.n	43a2 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    4398:	683b      	ldr	r3, [r7, #0]
    439a:	2200      	movs	r2, #0
    439c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    439e:	2301      	movs	r3, #1
    43a0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    43a2:	f002 fd39 	bl	6e18 <vPortExitCritical>

	return xReturn;
    43a6:	697b      	ldr	r3, [r7, #20]
}
    43a8:	4618      	mov	r0, r3
    43aa:	3718      	adds	r7, #24
    43ac:	46bd      	mov	sp, r7
    43ae:	bd80      	pop	{r7, pc}
    43b0:	10000384 	.word	0x10000384
    43b4:	10000398 	.word	0x10000398

000043b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    43b8:	b480      	push	{r7}
    43ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    43bc:	4b03      	ldr	r3, [pc, #12]	; (43cc <vTaskMissedYield+0x14>)
    43be:	2201      	movs	r2, #1
    43c0:	601a      	str	r2, [r3, #0]
}
    43c2:	bf00      	nop
    43c4:	46bd      	mov	sp, r7
    43c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ca:	4770      	bx	lr
    43cc:	10000394 	.word	0x10000394

000043d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
    43d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    43d8:	f000 f842 	bl	4460 <prvCheckTasksWaitingTermination>
    43dc:	e7fc      	b.n	43d8 <prvIdleTask+0x8>
    43de:	Address 0x00000000000043de is out of bounds.


000043e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b082      	sub	sp, #8
    43e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    43e6:	2300      	movs	r3, #0
    43e8:	607b      	str	r3, [r7, #4]
    43ea:	e00c      	b.n	4406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    43ec:	687a      	ldr	r2, [r7, #4]
    43ee:	4613      	mov	r3, r2
    43f0:	009b      	lsls	r3, r3, #2
    43f2:	4413      	add	r3, r2
    43f4:	009b      	lsls	r3, r3, #2
    43f6:	4a12      	ldr	r2, [pc, #72]	; (4440 <prvInitialiseTaskLists+0x60>)
    43f8:	4413      	add	r3, r2
    43fa:	4618      	mov	r0, r3
    43fc:	f7ff fab2 	bl	3964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	3301      	adds	r3, #1
    4404:	607b      	str	r3, [r7, #4]
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	2b04      	cmp	r3, #4
    440a:	d9ef      	bls.n	43ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    440c:	480d      	ldr	r0, [pc, #52]	; (4444 <prvInitialiseTaskLists+0x64>)
    440e:	f7ff faa9 	bl	3964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    4412:	480d      	ldr	r0, [pc, #52]	; (4448 <prvInitialiseTaskLists+0x68>)
    4414:	f7ff faa6 	bl	3964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    4418:	480c      	ldr	r0, [pc, #48]	; (444c <prvInitialiseTaskLists+0x6c>)
    441a:	f7ff faa3 	bl	3964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    441e:	480c      	ldr	r0, [pc, #48]	; (4450 <prvInitialiseTaskLists+0x70>)
    4420:	f7ff faa0 	bl	3964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    4424:	480b      	ldr	r0, [pc, #44]	; (4454 <prvInitialiseTaskLists+0x74>)
    4426:	f7ff fa9d 	bl	3964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    442a:	4b0b      	ldr	r3, [pc, #44]	; (4458 <prvInitialiseTaskLists+0x78>)
    442c:	4a05      	ldr	r2, [pc, #20]	; (4444 <prvInitialiseTaskLists+0x64>)
    442e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4430:	4b0a      	ldr	r3, [pc, #40]	; (445c <prvInitialiseTaskLists+0x7c>)
    4432:	4a05      	ldr	r2, [pc, #20]	; (4448 <prvInitialiseTaskLists+0x68>)
    4434:	601a      	str	r2, [r3, #0]
}
    4436:	bf00      	nop
    4438:	3708      	adds	r7, #8
    443a:	46bd      	mov	sp, r7
    443c:	bd80      	pop	{r7, pc}
    443e:	bf00      	nop
    4440:	100002ac 	.word	0x100002ac
    4444:	10000310 	.word	0x10000310
    4448:	10000324 	.word	0x10000324
    444c:	10000340 	.word	0x10000340
    4450:	10000354 	.word	0x10000354
    4454:	1000036c 	.word	0x1000036c
    4458:	10000338 	.word	0x10000338
    445c:	1000033c 	.word	0x1000033c

00004460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4460:	b580      	push	{r7, lr}
    4462:	b082      	sub	sp, #8
    4464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4466:	e019      	b.n	449c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    4468:	f002 fcbc 	bl	6de4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    446c:	4b0f      	ldr	r3, [pc, #60]	; (44ac <prvCheckTasksWaitingTermination+0x4c>)
    446e:	68db      	ldr	r3, [r3, #12]
    4470:	68db      	ldr	r3, [r3, #12]
    4472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	3304      	adds	r3, #4
    4478:	4618      	mov	r0, r3
    447a:	f7ff fafd 	bl	3a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
    447e:	4b0c      	ldr	r3, [pc, #48]	; (44b0 <prvCheckTasksWaitingTermination+0x50>)
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	3b01      	subs	r3, #1
    4484:	4a0a      	ldr	r2, [pc, #40]	; (44b0 <prvCheckTasksWaitingTermination+0x50>)
    4486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    4488:	4b0a      	ldr	r3, [pc, #40]	; (44b4 <prvCheckTasksWaitingTermination+0x54>)
    448a:	681b      	ldr	r3, [r3, #0]
    448c:	3b01      	subs	r3, #1
    448e:	4a09      	ldr	r2, [pc, #36]	; (44b4 <prvCheckTasksWaitingTermination+0x54>)
    4490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    4492:	f002 fcc1 	bl	6e18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    4496:	6878      	ldr	r0, [r7, #4]
    4498:	f000 f80e 	bl	44b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    449c:	4b05      	ldr	r3, [pc, #20]	; (44b4 <prvCheckTasksWaitingTermination+0x54>)
    449e:	681b      	ldr	r3, [r3, #0]
    44a0:	2b00      	cmp	r3, #0
    44a2:	d1e1      	bne.n	4468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    44a4:	bf00      	nop
    44a6:	3708      	adds	r7, #8
    44a8:	46bd      	mov	sp, r7
    44aa:	bd80      	pop	{r7, pc}
    44ac:	10000354 	.word	0x10000354
    44b0:	10000380 	.word	0x10000380
    44b4:	10000368 	.word	0x10000368

000044b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    44b8:	b580      	push	{r7, lr}
    44ba:	b082      	sub	sp, #8
    44bc:	af00      	add	r7, sp, #0
    44be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    44c6:	2b00      	cmp	r3, #0
    44c8:	d108      	bne.n	44dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    44ce:	4618      	mov	r0, r3
    44d0:	f000 fd0e 	bl	4ef0 <vPortFree>
				vPortFree( pxTCB );
    44d4:	6878      	ldr	r0, [r7, #4]
    44d6:	f000 fd0b 	bl	4ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    44da:	e007      	b.n	44ec <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    44e2:	2b01      	cmp	r3, #1
    44e4:	d102      	bne.n	44ec <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
    44e6:	6878      	ldr	r0, [r7, #4]
    44e8:	f000 fd02 	bl	4ef0 <vPortFree>
	}
    44ec:	bf00      	nop
    44ee:	3708      	adds	r7, #8
    44f0:	46bd      	mov	sp, r7
    44f2:	bd80      	pop	{r7, pc}

000044f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    44f4:	b480      	push	{r7}
    44f6:	b083      	sub	sp, #12
    44f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    44fa:	4b0f      	ldr	r3, [pc, #60]	; (4538 <prvResetNextTaskUnblockTime+0x44>)
    44fc:	681b      	ldr	r3, [r3, #0]
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	2b00      	cmp	r3, #0
    4502:	d101      	bne.n	4508 <prvResetNextTaskUnblockTime+0x14>
    4504:	2301      	movs	r3, #1
    4506:	e000      	b.n	450a <prvResetNextTaskUnblockTime+0x16>
    4508:	2300      	movs	r3, #0
    450a:	2b00      	cmp	r3, #0
    450c:	d004      	beq.n	4518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    450e:	4b0b      	ldr	r3, [pc, #44]	; (453c <prvResetNextTaskUnblockTime+0x48>)
    4510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    4516:	e008      	b.n	452a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4518:	4b07      	ldr	r3, [pc, #28]	; (4538 <prvResetNextTaskUnblockTime+0x44>)
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	68db      	ldr	r3, [r3, #12]
    451e:	68db      	ldr	r3, [r3, #12]
    4520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    4522:	687b      	ldr	r3, [r7, #4]
    4524:	685b      	ldr	r3, [r3, #4]
    4526:	4a05      	ldr	r2, [pc, #20]	; (453c <prvResetNextTaskUnblockTime+0x48>)
    4528:	6013      	str	r3, [r2, #0]
}
    452a:	bf00      	nop
    452c:	370c      	adds	r7, #12
    452e:	46bd      	mov	sp, r7
    4530:	f85d 7b04 	ldr.w	r7, [sp], #4
    4534:	4770      	bx	lr
    4536:	bf00      	nop
    4538:	10000338 	.word	0x10000338
    453c:	100003a0 	.word	0x100003a0

00004540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    4540:	b480      	push	{r7}
    4542:	b083      	sub	sp, #12
    4544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    4546:	4b0b      	ldr	r3, [pc, #44]	; (4574 <xTaskGetSchedulerState+0x34>)
    4548:	681b      	ldr	r3, [r3, #0]
    454a:	2b00      	cmp	r3, #0
    454c:	d102      	bne.n	4554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    454e:	2301      	movs	r3, #1
    4550:	607b      	str	r3, [r7, #4]
    4552:	e008      	b.n	4566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4554:	4b08      	ldr	r3, [pc, #32]	; (4578 <xTaskGetSchedulerState+0x38>)
    4556:	681b      	ldr	r3, [r3, #0]
    4558:	2b00      	cmp	r3, #0
    455a:	d102      	bne.n	4562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    455c:	2302      	movs	r3, #2
    455e:	607b      	str	r3, [r7, #4]
    4560:	e001      	b.n	4566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    4562:	2300      	movs	r3, #0
    4564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    4566:	687b      	ldr	r3, [r7, #4]
	}
    4568:	4618      	mov	r0, r3
    456a:	370c      	adds	r7, #12
    456c:	46bd      	mov	sp, r7
    456e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4572:	4770      	bx	lr
    4574:	1000038c 	.word	0x1000038c
    4578:	100003a8 	.word	0x100003a8

0000457c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    457c:	b580      	push	{r7, lr}
    457e:	b084      	sub	sp, #16
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    4588:	2300      	movs	r3, #0
    458a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	2b00      	cmp	r3, #0
    4590:	d04f      	beq.n	4632 <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4592:	68bb      	ldr	r3, [r7, #8]
    4594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4596:	1e5a      	subs	r2, r3, #1
    4598:	68bb      	ldr	r3, [r7, #8]
    459a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    459c:	68bb      	ldr	r3, [r7, #8]
    459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45a0:	68bb      	ldr	r3, [r7, #8]
    45a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    45a4:	429a      	cmp	r2, r3
    45a6:	d044      	beq.n	4632 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    45a8:	68bb      	ldr	r3, [r7, #8]
    45aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    45ac:	2b00      	cmp	r3, #0
    45ae:	d140      	bne.n	4632 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    45b0:	68bb      	ldr	r3, [r7, #8]
    45b2:	3304      	adds	r3, #4
    45b4:	4618      	mov	r0, r3
    45b6:	f7ff fa5f 	bl	3a78 <uxListRemove>
    45ba:	4603      	mov	r3, r0
    45bc:	2b00      	cmp	r3, #0
    45be:	d115      	bne.n	45ec <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    45c0:	68bb      	ldr	r3, [r7, #8]
    45c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45c4:	491d      	ldr	r1, [pc, #116]	; (463c <xTaskPriorityDisinherit+0xc0>)
    45c6:	4613      	mov	r3, r2
    45c8:	009b      	lsls	r3, r3, #2
    45ca:	4413      	add	r3, r2
    45cc:	009b      	lsls	r3, r3, #2
    45ce:	440b      	add	r3, r1
    45d0:	681b      	ldr	r3, [r3, #0]
    45d2:	2b00      	cmp	r3, #0
    45d4:	d10a      	bne.n	45ec <xTaskPriorityDisinherit+0x70>
    45d6:	68bb      	ldr	r3, [r7, #8]
    45d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45da:	2201      	movs	r2, #1
    45dc:	fa02 f303 	lsl.w	r3, r2, r3
    45e0:	43da      	mvns	r2, r3
    45e2:	4b17      	ldr	r3, [pc, #92]	; (4640 <xTaskPriorityDisinherit+0xc4>)
    45e4:	681b      	ldr	r3, [r3, #0]
    45e6:	4013      	ands	r3, r2
    45e8:	4a15      	ldr	r2, [pc, #84]	; (4640 <xTaskPriorityDisinherit+0xc4>)
    45ea:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    45ec:	68bb      	ldr	r3, [r7, #8]
    45ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    45f0:	68bb      	ldr	r3, [r7, #8]
    45f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    45f4:	68bb      	ldr	r3, [r7, #8]
    45f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45f8:	f1c3 0205 	rsb	r2, r3, #5
    45fc:	68bb      	ldr	r3, [r7, #8]
    45fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    4600:	68bb      	ldr	r3, [r7, #8]
    4602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4604:	2201      	movs	r2, #1
    4606:	409a      	lsls	r2, r3
    4608:	4b0d      	ldr	r3, [pc, #52]	; (4640 <xTaskPriorityDisinherit+0xc4>)
    460a:	681b      	ldr	r3, [r3, #0]
    460c:	4313      	orrs	r3, r2
    460e:	4a0c      	ldr	r2, [pc, #48]	; (4640 <xTaskPriorityDisinherit+0xc4>)
    4610:	6013      	str	r3, [r2, #0]
    4612:	68bb      	ldr	r3, [r7, #8]
    4614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4616:	4613      	mov	r3, r2
    4618:	009b      	lsls	r3, r3, #2
    461a:	4413      	add	r3, r2
    461c:	009b      	lsls	r3, r3, #2
    461e:	4a07      	ldr	r2, [pc, #28]	; (463c <xTaskPriorityDisinherit+0xc0>)
    4620:	441a      	add	r2, r3
    4622:	68bb      	ldr	r3, [r7, #8]
    4624:	3304      	adds	r3, #4
    4626:	4619      	mov	r1, r3
    4628:	4610      	mov	r0, r2
    462a:	f7ff f9c8 	bl	39be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    462e:	2301      	movs	r3, #1
    4630:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4632:	68fb      	ldr	r3, [r7, #12]
	}
    4634:	4618      	mov	r0, r3
    4636:	3710      	adds	r7, #16
    4638:	46bd      	mov	sp, r7
    463a:	bd80      	pop	{r7, pc}
    463c:	100002ac 	.word	0x100002ac
    4640:	10000388 	.word	0x10000388

00004644 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4644:	b580      	push	{r7, lr}
    4646:	b084      	sub	sp, #16
    4648:	af00      	add	r7, sp, #0
    464a:	6078      	str	r0, [r7, #4]
    464c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    464e:	4b29      	ldr	r3, [pc, #164]	; (46f4 <prvAddCurrentTaskToDelayedList+0xb0>)
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4654:	4b28      	ldr	r3, [pc, #160]	; (46f8 <prvAddCurrentTaskToDelayedList+0xb4>)
    4656:	681b      	ldr	r3, [r3, #0]
    4658:	3304      	adds	r3, #4
    465a:	4618      	mov	r0, r3
    465c:	f7ff fa0c 	bl	3a78 <uxListRemove>
    4660:	4603      	mov	r3, r0
    4662:	2b00      	cmp	r3, #0
    4664:	d10b      	bne.n	467e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    4666:	4b24      	ldr	r3, [pc, #144]	; (46f8 <prvAddCurrentTaskToDelayedList+0xb4>)
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    466c:	2201      	movs	r2, #1
    466e:	fa02 f303 	lsl.w	r3, r2, r3
    4672:	43da      	mvns	r2, r3
    4674:	4b21      	ldr	r3, [pc, #132]	; (46fc <prvAddCurrentTaskToDelayedList+0xb8>)
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	4013      	ands	r3, r2
    467a:	4a20      	ldr	r2, [pc, #128]	; (46fc <prvAddCurrentTaskToDelayedList+0xb8>)
    467c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4684:	d10a      	bne.n	469c <prvAddCurrentTaskToDelayedList+0x58>
    4686:	683b      	ldr	r3, [r7, #0]
    4688:	2b00      	cmp	r3, #0
    468a:	d007      	beq.n	469c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    468c:	4b1a      	ldr	r3, [pc, #104]	; (46f8 <prvAddCurrentTaskToDelayedList+0xb4>)
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	3304      	adds	r3, #4
    4692:	4619      	mov	r1, r3
    4694:	481a      	ldr	r0, [pc, #104]	; (4700 <prvAddCurrentTaskToDelayedList+0xbc>)
    4696:	f7ff f992 	bl	39be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    469a:	e026      	b.n	46ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    469c:	68fa      	ldr	r2, [r7, #12]
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	4413      	add	r3, r2
    46a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    46a4:	4b14      	ldr	r3, [pc, #80]	; (46f8 <prvAddCurrentTaskToDelayedList+0xb4>)
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	68ba      	ldr	r2, [r7, #8]
    46aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    46ac:	68ba      	ldr	r2, [r7, #8]
    46ae:	68fb      	ldr	r3, [r7, #12]
    46b0:	429a      	cmp	r2, r3
    46b2:	d209      	bcs.n	46c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    46b4:	4b13      	ldr	r3, [pc, #76]	; (4704 <prvAddCurrentTaskToDelayedList+0xc0>)
    46b6:	681a      	ldr	r2, [r3, #0]
    46b8:	4b0f      	ldr	r3, [pc, #60]	; (46f8 <prvAddCurrentTaskToDelayedList+0xb4>)
    46ba:	681b      	ldr	r3, [r3, #0]
    46bc:	3304      	adds	r3, #4
    46be:	4619      	mov	r1, r3
    46c0:	4610      	mov	r0, r2
    46c2:	f7ff f9a0 	bl	3a06 <vListInsert>
}
    46c6:	e010      	b.n	46ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    46c8:	4b0f      	ldr	r3, [pc, #60]	; (4708 <prvAddCurrentTaskToDelayedList+0xc4>)
    46ca:	681a      	ldr	r2, [r3, #0]
    46cc:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <prvAddCurrentTaskToDelayedList+0xb4>)
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	3304      	adds	r3, #4
    46d2:	4619      	mov	r1, r3
    46d4:	4610      	mov	r0, r2
    46d6:	f7ff f996 	bl	3a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    46da:	4b0c      	ldr	r3, [pc, #48]	; (470c <prvAddCurrentTaskToDelayedList+0xc8>)
    46dc:	681b      	ldr	r3, [r3, #0]
    46de:	68ba      	ldr	r2, [r7, #8]
    46e0:	429a      	cmp	r2, r3
    46e2:	d202      	bcs.n	46ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    46e4:	4a09      	ldr	r2, [pc, #36]	; (470c <prvAddCurrentTaskToDelayedList+0xc8>)
    46e6:	68bb      	ldr	r3, [r7, #8]
    46e8:	6013      	str	r3, [r2, #0]
}
    46ea:	bf00      	nop
    46ec:	3710      	adds	r7, #16
    46ee:	46bd      	mov	sp, r7
    46f0:	bd80      	pop	{r7, pc}
    46f2:	bf00      	nop
    46f4:	10000384 	.word	0x10000384
    46f8:	100002a8 	.word	0x100002a8
    46fc:	10000388 	.word	0x10000388
    4700:	1000036c 	.word	0x1000036c
    4704:	1000033c 	.word	0x1000033c
    4708:	10000338 	.word	0x10000338
    470c:	100003a0 	.word	0x100003a0

00004710 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    4710:	b580      	push	{r7, lr}
    4712:	b084      	sub	sp, #16
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    471e:	f002 fb61 	bl	6de4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	681a      	ldr	r2, [r3, #0]
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    472a:	68f9      	ldr	r1, [r7, #12]
    472c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    472e:	fb01 f303 	mul.w	r3, r1, r3
    4732:	441a      	add	r2, r3
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	2200      	movs	r2, #0
    473c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	681a      	ldr	r2, [r3, #0]
    4742:	68fb      	ldr	r3, [r7, #12]
    4744:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    4746:	68fb      	ldr	r3, [r7, #12]
    4748:	681a      	ldr	r2, [r3, #0]
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    474e:	3b01      	subs	r3, #1
    4750:	68f9      	ldr	r1, [r7, #12]
    4752:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4754:	fb01 f303 	mul.w	r3, r1, r3
    4758:	441a      	add	r2, r3
    475a:	68fb      	ldr	r3, [r7, #12]
    475c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	22ff      	movs	r2, #255	; 0xff
    4762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    4766:	68fb      	ldr	r3, [r7, #12]
    4768:	22ff      	movs	r2, #255	; 0xff
    476a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    476e:	683b      	ldr	r3, [r7, #0]
    4770:	2b00      	cmp	r3, #0
    4772:	d114      	bne.n	479e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4774:	68fb      	ldr	r3, [r7, #12]
    4776:	691b      	ldr	r3, [r3, #16]
    4778:	2b00      	cmp	r3, #0
    477a:	d01a      	beq.n	47b2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    477c:	68fb      	ldr	r3, [r7, #12]
    477e:	3310      	adds	r3, #16
    4780:	4618      	mov	r0, r3
    4782:	f7ff fd69 	bl	4258 <xTaskRemoveFromEventList>
    4786:	4603      	mov	r3, r0
    4788:	2b00      	cmp	r3, #0
    478a:	d012      	beq.n	47b2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    478c:	4b0c      	ldr	r3, [pc, #48]	; (47c0 <xQueueGenericReset+0xb0>)
    478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4792:	601a      	str	r2, [r3, #0]
    4794:	f3bf 8f4f 	dsb	sy
    4798:	f3bf 8f6f 	isb	sy
    479c:	e009      	b.n	47b2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	3310      	adds	r3, #16
    47a2:	4618      	mov	r0, r3
    47a4:	f7ff f8de 	bl	3964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    47a8:	68fb      	ldr	r3, [r7, #12]
    47aa:	3324      	adds	r3, #36	; 0x24
    47ac:	4618      	mov	r0, r3
    47ae:	f7ff f8d9 	bl	3964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    47b2:	f002 fb31 	bl	6e18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    47b6:	2301      	movs	r3, #1
}
    47b8:	4618      	mov	r0, r3
    47ba:	3710      	adds	r7, #16
    47bc:	46bd      	mov	sp, r7
    47be:	bd80      	pop	{r7, pc}
    47c0:	e000ed04 	.word	0xe000ed04

000047c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    47c4:	b580      	push	{r7, lr}
    47c6:	b088      	sub	sp, #32
    47c8:	af02      	add	r7, sp, #8
    47ca:	60f8      	str	r0, [r7, #12]
    47cc:	60b9      	str	r1, [r7, #8]
    47ce:	607a      	str	r2, [r7, #4]
    47d0:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    47d2:	683b      	ldr	r3, [r7, #0]
    47d4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
    47d6:	697b      	ldr	r3, [r7, #20]
    47d8:	2b00      	cmp	r3, #0
    47da:	d00d      	beq.n	47f8 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    47dc:	697b      	ldr	r3, [r7, #20]
    47de:	2201      	movs	r2, #1
    47e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    47e4:	f897 2020 	ldrb.w	r2, [r7, #32]
    47e8:	697b      	ldr	r3, [r7, #20]
    47ea:	9300      	str	r3, [sp, #0]
    47ec:	4613      	mov	r3, r2
    47ee:	687a      	ldr	r2, [r7, #4]
    47f0:	68b9      	ldr	r1, [r7, #8]
    47f2:	68f8      	ldr	r0, [r7, #12]
    47f4:	f000 f835 	bl	4862 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    47f8:	697b      	ldr	r3, [r7, #20]
	}
    47fa:	4618      	mov	r0, r3
    47fc:	3718      	adds	r7, #24
    47fe:	46bd      	mov	sp, r7
    4800:	bd80      	pop	{r7, pc}

00004802 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    4802:	b580      	push	{r7, lr}
    4804:	b08a      	sub	sp, #40	; 0x28
    4806:	af02      	add	r7, sp, #8
    4808:	60f8      	str	r0, [r7, #12]
    480a:	60b9      	str	r1, [r7, #8]
    480c:	4613      	mov	r3, r2
    480e:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    4810:	68bb      	ldr	r3, [r7, #8]
    4812:	2b00      	cmp	r3, #0
    4814:	d102      	bne.n	481c <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    4816:	2300      	movs	r3, #0
    4818:	61fb      	str	r3, [r7, #28]
    481a:	e004      	b.n	4826 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	68ba      	ldr	r2, [r7, #8]
    4820:	fb02 f303 	mul.w	r3, r2, r3
    4824:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    4826:	69fb      	ldr	r3, [r7, #28]
    4828:	3350      	adds	r3, #80	; 0x50
    482a:	4618      	mov	r0, r3
    482c:	f000 fb4e 	bl	4ecc <pvPortMalloc>
    4830:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
    4832:	69bb      	ldr	r3, [r7, #24]
    4834:	2b00      	cmp	r3, #0
    4836:	d00f      	beq.n	4858 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    4838:	69bb      	ldr	r3, [r7, #24]
    483a:	3350      	adds	r3, #80	; 0x50
    483c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
    483e:	69bb      	ldr	r3, [r7, #24]
    4840:	2200      	movs	r2, #0
    4842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    4846:	79fa      	ldrb	r2, [r7, #7]
    4848:	69bb      	ldr	r3, [r7, #24]
    484a:	9300      	str	r3, [sp, #0]
    484c:	4613      	mov	r3, r2
    484e:	697a      	ldr	r2, [r7, #20]
    4850:	68b9      	ldr	r1, [r7, #8]
    4852:	68f8      	ldr	r0, [r7, #12]
    4854:	f000 f805 	bl	4862 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    4858:	69bb      	ldr	r3, [r7, #24]
	}
    485a:	4618      	mov	r0, r3
    485c:	3720      	adds	r7, #32
    485e:	46bd      	mov	sp, r7
    4860:	bd80      	pop	{r7, pc}

00004862 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    4862:	b580      	push	{r7, lr}
    4864:	b084      	sub	sp, #16
    4866:	af00      	add	r7, sp, #0
    4868:	60f8      	str	r0, [r7, #12]
    486a:	60b9      	str	r1, [r7, #8]
    486c:	607a      	str	r2, [r7, #4]
    486e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    4870:	68bb      	ldr	r3, [r7, #8]
    4872:	2b00      	cmp	r3, #0
    4874:	d103      	bne.n	487e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    4876:	69bb      	ldr	r3, [r7, #24]
    4878:	69ba      	ldr	r2, [r7, #24]
    487a:	601a      	str	r2, [r3, #0]
    487c:	e002      	b.n	4884 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    487e:	69bb      	ldr	r3, [r7, #24]
    4880:	687a      	ldr	r2, [r7, #4]
    4882:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    4884:	69bb      	ldr	r3, [r7, #24]
    4886:	68fa      	ldr	r2, [r7, #12]
    4888:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    488a:	69bb      	ldr	r3, [r7, #24]
    488c:	68ba      	ldr	r2, [r7, #8]
    488e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    4890:	2101      	movs	r1, #1
    4892:	69b8      	ldr	r0, [r7, #24]
    4894:	f7ff ff3c 	bl	4710 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    4898:	69bb      	ldr	r3, [r7, #24]
    489a:	78fa      	ldrb	r2, [r7, #3]
    489c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    48a0:	bf00      	nop
    48a2:	3710      	adds	r7, #16
    48a4:	46bd      	mov	sp, r7
    48a6:	bd80      	pop	{r7, pc}

000048a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    48a8:	b580      	push	{r7, lr}
    48aa:	b08a      	sub	sp, #40	; 0x28
    48ac:	af00      	add	r7, sp, #0
    48ae:	60f8      	str	r0, [r7, #12]
    48b0:	60b9      	str	r1, [r7, #8]
    48b2:	607a      	str	r2, [r7, #4]
    48b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    48b6:	2300      	movs	r3, #0
    48b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    48ba:	68fb      	ldr	r3, [r7, #12]
    48bc:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    48be:	f002 fa91 	bl	6de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    48c2:	6a3b      	ldr	r3, [r7, #32]
    48c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    48c6:	6a3b      	ldr	r3, [r7, #32]
    48c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    48ca:	429a      	cmp	r2, r3
    48cc:	d302      	bcc.n	48d4 <xQueueGenericSend+0x2c>
    48ce:	683b      	ldr	r3, [r7, #0]
    48d0:	2b02      	cmp	r3, #2
    48d2:	d129      	bne.n	4928 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    48d4:	683a      	ldr	r2, [r7, #0]
    48d6:	68b9      	ldr	r1, [r7, #8]
    48d8:	6a38      	ldr	r0, [r7, #32]
    48da:	f000 f98b 	bl	4bf4 <prvCopyDataToQueue>
    48de:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48e0:	6a3b      	ldr	r3, [r7, #32]
    48e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48e4:	2b00      	cmp	r3, #0
    48e6:	d010      	beq.n	490a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48e8:	6a3b      	ldr	r3, [r7, #32]
    48ea:	3324      	adds	r3, #36	; 0x24
    48ec:	4618      	mov	r0, r3
    48ee:	f7ff fcb3 	bl	4258 <xTaskRemoveFromEventList>
    48f2:	4603      	mov	r3, r0
    48f4:	2b00      	cmp	r3, #0
    48f6:	d013      	beq.n	4920 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    48f8:	4b3f      	ldr	r3, [pc, #252]	; (49f8 <xQueueGenericSend+0x150>)
    48fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    48fe:	601a      	str	r2, [r3, #0]
    4900:	f3bf 8f4f 	dsb	sy
    4904:	f3bf 8f6f 	isb	sy
    4908:	e00a      	b.n	4920 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    490a:	69fb      	ldr	r3, [r7, #28]
    490c:	2b00      	cmp	r3, #0
    490e:	d007      	beq.n	4920 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    4910:	4b39      	ldr	r3, [pc, #228]	; (49f8 <xQueueGenericSend+0x150>)
    4912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4916:	601a      	str	r2, [r3, #0]
    4918:	f3bf 8f4f 	dsb	sy
    491c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    4920:	f002 fa7a 	bl	6e18 <vPortExitCritical>
				return pdPASS;
    4924:	2301      	movs	r3, #1
    4926:	e063      	b.n	49f0 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4928:	687b      	ldr	r3, [r7, #4]
    492a:	2b00      	cmp	r3, #0
    492c:	d103      	bne.n	4936 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    492e:	f002 fa73 	bl	6e18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4932:	2300      	movs	r3, #0
    4934:	e05c      	b.n	49f0 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    4936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4938:	2b00      	cmp	r3, #0
    493a:	d106      	bne.n	494a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    493c:	f107 0314 	add.w	r3, r7, #20
    4940:	4618      	mov	r0, r3
    4942:	f7ff fcdd 	bl	4300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4946:	2301      	movs	r3, #1
    4948:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    494a:	f002 fa65 	bl	6e18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    494e:	f7ff fa95 	bl	3e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4952:	f002 fa47 	bl	6de4 <vPortEnterCritical>
    4956:	6a3b      	ldr	r3, [r7, #32]
    4958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    495c:	b25b      	sxtb	r3, r3
    495e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4962:	d103      	bne.n	496c <xQueueGenericSend+0xc4>
    4964:	6a3b      	ldr	r3, [r7, #32]
    4966:	2200      	movs	r2, #0
    4968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    496c:	6a3b      	ldr	r3, [r7, #32]
    496e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4972:	b25b      	sxtb	r3, r3
    4974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4978:	d103      	bne.n	4982 <xQueueGenericSend+0xda>
    497a:	6a3b      	ldr	r3, [r7, #32]
    497c:	2200      	movs	r2, #0
    497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4982:	f002 fa49 	bl	6e18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4986:	1d3a      	adds	r2, r7, #4
    4988:	f107 0314 	add.w	r3, r7, #20
    498c:	4611      	mov	r1, r2
    498e:	4618      	mov	r0, r3
    4990:	f7ff fccc 	bl	432c <xTaskCheckForTimeOut>
    4994:	4603      	mov	r3, r0
    4996:	2b00      	cmp	r3, #0
    4998:	d124      	bne.n	49e4 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    499a:	6a38      	ldr	r0, [r7, #32]
    499c:	f000 fa22 	bl	4de4 <prvIsQueueFull>
    49a0:	4603      	mov	r3, r0
    49a2:	2b00      	cmp	r3, #0
    49a4:	d018      	beq.n	49d8 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    49a6:	6a3b      	ldr	r3, [r7, #32]
    49a8:	3310      	adds	r3, #16
    49aa:	687a      	ldr	r2, [r7, #4]
    49ac:	4611      	mov	r1, r2
    49ae:	4618      	mov	r0, r3
    49b0:	f7ff fc1e 	bl	41f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    49b4:	6a38      	ldr	r0, [r7, #32]
    49b6:	f000 f9ad 	bl	4d14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    49ba:	f7ff fa6d 	bl	3e98 <xTaskResumeAll>
    49be:	4603      	mov	r3, r0
    49c0:	2b00      	cmp	r3, #0
    49c2:	f47f af7c 	bne.w	48be <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    49c6:	4b0c      	ldr	r3, [pc, #48]	; (49f8 <xQueueGenericSend+0x150>)
    49c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    49cc:	601a      	str	r2, [r3, #0]
    49ce:	f3bf 8f4f 	dsb	sy
    49d2:	f3bf 8f6f 	isb	sy
    49d6:	e772      	b.n	48be <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    49d8:	6a38      	ldr	r0, [r7, #32]
    49da:	f000 f99b 	bl	4d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    49de:	f7ff fa5b 	bl	3e98 <xTaskResumeAll>
    49e2:	e76c      	b.n	48be <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    49e4:	6a38      	ldr	r0, [r7, #32]
    49e6:	f000 f995 	bl	4d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    49ea:	f7ff fa55 	bl	3e98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    49ee:	2300      	movs	r3, #0
		}
	}
}
    49f0:	4618      	mov	r0, r3
    49f2:	3728      	adds	r7, #40	; 0x28
    49f4:	46bd      	mov	sp, r7
    49f6:	bd80      	pop	{r7, pc}
    49f8:	e000ed04 	.word	0xe000ed04

000049fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b08c      	sub	sp, #48	; 0x30
    4a00:	af00      	add	r7, sp, #0
    4a02:	60f8      	str	r0, [r7, #12]
    4a04:	60b9      	str	r1, [r7, #8]
    4a06:	607a      	str	r2, [r7, #4]
    4a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    4a0e:	f3ef 8211 	mrs	r2, BASEPRI
    4a12:	f04f 0328 	mov.w	r3, #40	; 0x28
    4a16:	f383 8811 	msr	BASEPRI, r3
    4a1a:	f3bf 8f6f 	isb	sy
    4a1e:	f3bf 8f4f 	dsb	sy
    4a22:	61fa      	str	r2, [r7, #28]
    4a24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    4a26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4a28:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a32:	429a      	cmp	r2, r3
    4a34:	d302      	bcc.n	4a3c <xQueueGenericSendFromISR+0x40>
    4a36:	683b      	ldr	r3, [r7, #0]
    4a38:	2b02      	cmp	r3, #2
    4a3a:	d12c      	bne.n	4a96 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    4a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4a46:	683a      	ldr	r2, [r7, #0]
    4a48:	68b9      	ldr	r1, [r7, #8]
    4a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4a4c:	f000 f8d2 	bl	4bf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    4a50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    4a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4a58:	d112      	bne.n	4a80 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d016      	beq.n	4a90 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a64:	3324      	adds	r3, #36	; 0x24
    4a66:	4618      	mov	r0, r3
    4a68:	f7ff fbf6 	bl	4258 <xTaskRemoveFromEventList>
    4a6c:	4603      	mov	r3, r0
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d00e      	beq.n	4a90 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	2b00      	cmp	r3, #0
    4a76:	d00b      	beq.n	4a90 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    4a78:	687b      	ldr	r3, [r7, #4]
    4a7a:	2201      	movs	r2, #1
    4a7c:	601a      	str	r2, [r3, #0]
    4a7e:	e007      	b.n	4a90 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    4a84:	3301      	adds	r3, #1
    4a86:	b2db      	uxtb	r3, r3
    4a88:	b25a      	sxtb	r2, r3
    4a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    4a90:	2301      	movs	r3, #1
    4a92:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    4a94:	e001      	b.n	4a9a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4a96:	2300      	movs	r3, #0
    4a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    4a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    4aa6:	4618      	mov	r0, r3
    4aa8:	3730      	adds	r7, #48	; 0x30
    4aaa:	46bd      	mov	sp, r7
    4aac:	bd80      	pop	{r7, pc}
    4aae:	Address 0x0000000000004aae is out of bounds.


00004ab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b08a      	sub	sp, #40	; 0x28
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	60f8      	str	r0, [r7, #12]
    4ab8:	60b9      	str	r1, [r7, #8]
    4aba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    4abc:	2300      	movs	r3, #0
    4abe:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4ac0:	68fb      	ldr	r3, [r7, #12]
    4ac2:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4ac4:	f002 f98e 	bl	6de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4ac8:	6a3b      	ldr	r3, [r7, #32]
    4aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4acc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4ace:	69fb      	ldr	r3, [r7, #28]
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d01f      	beq.n	4b14 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4ad4:	68b9      	ldr	r1, [r7, #8]
    4ad6:	6a38      	ldr	r0, [r7, #32]
    4ad8:	f000 f8f6 	bl	4cc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    4adc:	69fb      	ldr	r3, [r7, #28]
    4ade:	1e5a      	subs	r2, r3, #1
    4ae0:	6a3b      	ldr	r3, [r7, #32]
    4ae2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4ae4:	6a3b      	ldr	r3, [r7, #32]
    4ae6:	691b      	ldr	r3, [r3, #16]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d00f      	beq.n	4b0c <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4aec:	6a3b      	ldr	r3, [r7, #32]
    4aee:	3310      	adds	r3, #16
    4af0:	4618      	mov	r0, r3
    4af2:	f7ff fbb1 	bl	4258 <xTaskRemoveFromEventList>
    4af6:	4603      	mov	r3, r0
    4af8:	2b00      	cmp	r3, #0
    4afa:	d007      	beq.n	4b0c <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    4afc:	4b3c      	ldr	r3, [pc, #240]	; (4bf0 <xQueueReceive+0x140>)
    4afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b02:	601a      	str	r2, [r3, #0]
    4b04:	f3bf 8f4f 	dsb	sy
    4b08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    4b0c:	f002 f984 	bl	6e18 <vPortExitCritical>
				return pdPASS;
    4b10:	2301      	movs	r3, #1
    4b12:	e069      	b.n	4be8 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	2b00      	cmp	r3, #0
    4b18:	d103      	bne.n	4b22 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4b1a:	f002 f97d 	bl	6e18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4b1e:	2300      	movs	r3, #0
    4b20:	e062      	b.n	4be8 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    4b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b24:	2b00      	cmp	r3, #0
    4b26:	d106      	bne.n	4b36 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4b28:	f107 0314 	add.w	r3, r7, #20
    4b2c:	4618      	mov	r0, r3
    4b2e:	f7ff fbe7 	bl	4300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4b32:	2301      	movs	r3, #1
    4b34:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4b36:	f002 f96f 	bl	6e18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4b3a:	f7ff f99f 	bl	3e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4b3e:	f002 f951 	bl	6de4 <vPortEnterCritical>
    4b42:	6a3b      	ldr	r3, [r7, #32]
    4b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4b48:	b25b      	sxtb	r3, r3
    4b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b4e:	d103      	bne.n	4b58 <xQueueReceive+0xa8>
    4b50:	6a3b      	ldr	r3, [r7, #32]
    4b52:	2200      	movs	r2, #0
    4b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4b58:	6a3b      	ldr	r3, [r7, #32]
    4b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4b5e:	b25b      	sxtb	r3, r3
    4b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b64:	d103      	bne.n	4b6e <xQueueReceive+0xbe>
    4b66:	6a3b      	ldr	r3, [r7, #32]
    4b68:	2200      	movs	r2, #0
    4b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4b6e:	f002 f953 	bl	6e18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4b72:	1d3a      	adds	r2, r7, #4
    4b74:	f107 0314 	add.w	r3, r7, #20
    4b78:	4611      	mov	r1, r2
    4b7a:	4618      	mov	r0, r3
    4b7c:	f7ff fbd6 	bl	432c <xTaskCheckForTimeOut>
    4b80:	4603      	mov	r3, r0
    4b82:	2b00      	cmp	r3, #0
    4b84:	d123      	bne.n	4bce <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4b86:	6a38      	ldr	r0, [r7, #32]
    4b88:	f000 f916 	bl	4db8 <prvIsQueueEmpty>
    4b8c:	4603      	mov	r3, r0
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d017      	beq.n	4bc2 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4b92:	6a3b      	ldr	r3, [r7, #32]
    4b94:	3324      	adds	r3, #36	; 0x24
    4b96:	687a      	ldr	r2, [r7, #4]
    4b98:	4611      	mov	r1, r2
    4b9a:	4618      	mov	r0, r3
    4b9c:	f7ff fb28 	bl	41f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4ba0:	6a38      	ldr	r0, [r7, #32]
    4ba2:	f000 f8b7 	bl	4d14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4ba6:	f7ff f977 	bl	3e98 <xTaskResumeAll>
    4baa:	4603      	mov	r3, r0
    4bac:	2b00      	cmp	r3, #0
    4bae:	d189      	bne.n	4ac4 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    4bb0:	4b0f      	ldr	r3, [pc, #60]	; (4bf0 <xQueueReceive+0x140>)
    4bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4bb6:	601a      	str	r2, [r3, #0]
    4bb8:	f3bf 8f4f 	dsb	sy
    4bbc:	f3bf 8f6f 	isb	sy
    4bc0:	e780      	b.n	4ac4 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    4bc2:	6a38      	ldr	r0, [r7, #32]
    4bc4:	f000 f8a6 	bl	4d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4bc8:	f7ff f966 	bl	3e98 <xTaskResumeAll>
    4bcc:	e77a      	b.n	4ac4 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    4bce:	6a38      	ldr	r0, [r7, #32]
    4bd0:	f000 f8a0 	bl	4d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4bd4:	f7ff f960 	bl	3e98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4bd8:	6a38      	ldr	r0, [r7, #32]
    4bda:	f000 f8ed 	bl	4db8 <prvIsQueueEmpty>
    4bde:	4603      	mov	r3, r0
    4be0:	2b00      	cmp	r3, #0
    4be2:	f43f af6f 	beq.w	4ac4 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    4be6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    4be8:	4618      	mov	r0, r3
    4bea:	3728      	adds	r7, #40	; 0x28
    4bec:	46bd      	mov	sp, r7
    4bee:	bd80      	pop	{r7, pc}
    4bf0:	e000ed04 	.word	0xe000ed04

00004bf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b086      	sub	sp, #24
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	60f8      	str	r0, [r7, #12]
    4bfc:	60b9      	str	r1, [r7, #8]
    4bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    4c00:	2300      	movs	r3, #0
    4c02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4c08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d10d      	bne.n	4c2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4c12:	68fb      	ldr	r3, [r7, #12]
    4c14:	681b      	ldr	r3, [r3, #0]
    4c16:	2b00      	cmp	r3, #0
    4c18:	d14d      	bne.n	4cb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4c1a:	68fb      	ldr	r3, [r7, #12]
    4c1c:	685b      	ldr	r3, [r3, #4]
    4c1e:	4618      	mov	r0, r3
    4c20:	f7ff fcac 	bl	457c <xTaskPriorityDisinherit>
    4c24:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    4c26:	68fb      	ldr	r3, [r7, #12]
    4c28:	2200      	movs	r2, #0
    4c2a:	605a      	str	r2, [r3, #4]
    4c2c:	e043      	b.n	4cb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    4c2e:	687b      	ldr	r3, [r7, #4]
    4c30:	2b00      	cmp	r3, #0
    4c32:	d119      	bne.n	4c68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    4c34:	68fb      	ldr	r3, [r7, #12]
    4c36:	6898      	ldr	r0, [r3, #8]
    4c38:	68fb      	ldr	r3, [r7, #12]
    4c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c3c:	461a      	mov	r2, r3
    4c3e:	68b9      	ldr	r1, [r7, #8]
    4c40:	f004 f8fc 	bl	8e3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4c44:	68fb      	ldr	r3, [r7, #12]
    4c46:	689a      	ldr	r2, [r3, #8]
    4c48:	68fb      	ldr	r3, [r7, #12]
    4c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c4c:	441a      	add	r2, r3
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	689a      	ldr	r2, [r3, #8]
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	685b      	ldr	r3, [r3, #4]
    4c5a:	429a      	cmp	r2, r3
    4c5c:	d32b      	bcc.n	4cb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4c5e:	68fb      	ldr	r3, [r7, #12]
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	68fb      	ldr	r3, [r7, #12]
    4c64:	609a      	str	r2, [r3, #8]
    4c66:	e026      	b.n	4cb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	68d8      	ldr	r0, [r3, #12]
    4c6c:	68fb      	ldr	r3, [r7, #12]
    4c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c70:	461a      	mov	r2, r3
    4c72:	68b9      	ldr	r1, [r7, #8]
    4c74:	f004 f8e2 	bl	8e3c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    4c78:	68fb      	ldr	r3, [r7, #12]
    4c7a:	68da      	ldr	r2, [r3, #12]
    4c7c:	68fb      	ldr	r3, [r7, #12]
    4c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c80:	425b      	negs	r3, r3
    4c82:	441a      	add	r2, r3
    4c84:	68fb      	ldr	r3, [r7, #12]
    4c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4c88:	68fb      	ldr	r3, [r7, #12]
    4c8a:	68da      	ldr	r2, [r3, #12]
    4c8c:	68fb      	ldr	r3, [r7, #12]
    4c8e:	681b      	ldr	r3, [r3, #0]
    4c90:	429a      	cmp	r2, r3
    4c92:	d207      	bcs.n	4ca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4c94:	68fb      	ldr	r3, [r7, #12]
    4c96:	685a      	ldr	r2, [r3, #4]
    4c98:	68fb      	ldr	r3, [r7, #12]
    4c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c9c:	425b      	negs	r3, r3
    4c9e:	441a      	add	r2, r3
    4ca0:	68fb      	ldr	r3, [r7, #12]
    4ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	2b02      	cmp	r3, #2
    4ca8:	d105      	bne.n	4cb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4caa:	693b      	ldr	r3, [r7, #16]
    4cac:	2b00      	cmp	r3, #0
    4cae:	d002      	beq.n	4cb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    4cb0:	693b      	ldr	r3, [r7, #16]
    4cb2:	3b01      	subs	r3, #1
    4cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    4cb6:	693b      	ldr	r3, [r7, #16]
    4cb8:	1c5a      	adds	r2, r3, #1
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    4cbe:	697b      	ldr	r3, [r7, #20]
}
    4cc0:	4618      	mov	r0, r3
    4cc2:	3718      	adds	r7, #24
    4cc4:	46bd      	mov	sp, r7
    4cc6:	bd80      	pop	{r7, pc}

00004cc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	b082      	sub	sp, #8
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
    4cd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d018      	beq.n	4d0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	68da      	ldr	r2, [r3, #12]
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ce2:	441a      	add	r2, r3
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	68da      	ldr	r2, [r3, #12]
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	685b      	ldr	r3, [r3, #4]
    4cf0:	429a      	cmp	r2, r3
    4cf2:	d303      	bcc.n	4cfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	681a      	ldr	r2, [r3, #0]
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	68d9      	ldr	r1, [r3, #12]
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d04:	461a      	mov	r2, r3
    4d06:	6838      	ldr	r0, [r7, #0]
    4d08:	f004 f898 	bl	8e3c <memcpy>
	}
}
    4d0c:	bf00      	nop
    4d0e:	3708      	adds	r7, #8
    4d10:	46bd      	mov	sp, r7
    4d12:	bd80      	pop	{r7, pc}

00004d14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    4d14:	b580      	push	{r7, lr}
    4d16:	b084      	sub	sp, #16
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4d1c:	f002 f862 	bl	6de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4d26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4d28:	e011      	b.n	4d4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d012      	beq.n	4d58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	3324      	adds	r3, #36	; 0x24
    4d36:	4618      	mov	r0, r3
    4d38:	f7ff fa8e 	bl	4258 <xTaskRemoveFromEventList>
    4d3c:	4603      	mov	r3, r0
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d001      	beq.n	4d46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    4d42:	f7ff fb39 	bl	43b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    4d46:	7bfb      	ldrb	r3, [r7, #15]
    4d48:	3b01      	subs	r3, #1
    4d4a:	b2db      	uxtb	r3, r3
    4d4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    4d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d52:	2b00      	cmp	r3, #0
    4d54:	dce9      	bgt.n	4d2a <prvUnlockQueue+0x16>
    4d56:	e000      	b.n	4d5a <prvUnlockQueue+0x46>
					break;
    4d58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	22ff      	movs	r2, #255	; 0xff
    4d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    4d62:	f002 f859 	bl	6e18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4d66:	f002 f83d 	bl	6de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4d70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    4d72:	e011      	b.n	4d98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4d74:	687b      	ldr	r3, [r7, #4]
    4d76:	691b      	ldr	r3, [r3, #16]
    4d78:	2b00      	cmp	r3, #0
    4d7a:	d012      	beq.n	4da2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	3310      	adds	r3, #16
    4d80:	4618      	mov	r0, r3
    4d82:	f7ff fa69 	bl	4258 <xTaskRemoveFromEventList>
    4d86:	4603      	mov	r3, r0
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d001      	beq.n	4d90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    4d8c:	f7ff fb14 	bl	43b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    4d90:	7bbb      	ldrb	r3, [r7, #14]
    4d92:	3b01      	subs	r3, #1
    4d94:	b2db      	uxtb	r3, r3
    4d96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    4d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	dce9      	bgt.n	4d74 <prvUnlockQueue+0x60>
    4da0:	e000      	b.n	4da4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    4da2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	22ff      	movs	r2, #255	; 0xff
    4da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4dac:	f002 f834 	bl	6e18 <vPortExitCritical>
}
    4db0:	bf00      	nop
    4db2:	3710      	adds	r7, #16
    4db4:	46bd      	mov	sp, r7
    4db6:	bd80      	pop	{r7, pc}

00004db8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    4db8:	b580      	push	{r7, lr}
    4dba:	b084      	sub	sp, #16
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4dc0:	f002 f810 	bl	6de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d102      	bne.n	4dd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    4dcc:	2301      	movs	r3, #1
    4dce:	60fb      	str	r3, [r7, #12]
    4dd0:	e001      	b.n	4dd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    4dd2:	2300      	movs	r3, #0
    4dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4dd6:	f002 f81f 	bl	6e18 <vPortExitCritical>

	return xReturn;
    4dda:	68fb      	ldr	r3, [r7, #12]
}
    4ddc:	4618      	mov	r0, r3
    4dde:	3710      	adds	r7, #16
    4de0:	46bd      	mov	sp, r7
    4de2:	bd80      	pop	{r7, pc}

00004de4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    4de4:	b580      	push	{r7, lr}
    4de6:	b084      	sub	sp, #16
    4de8:	af00      	add	r7, sp, #0
    4dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4dec:	f001 fffa 	bl	6de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4df8:	429a      	cmp	r2, r3
    4dfa:	d102      	bne.n	4e02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    4dfc:	2301      	movs	r3, #1
    4dfe:	60fb      	str	r3, [r7, #12]
    4e00:	e001      	b.n	4e06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    4e02:	2300      	movs	r3, #0
    4e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4e06:	f002 f807 	bl	6e18 <vPortExitCritical>

	return xReturn;
    4e0a:	68fb      	ldr	r3, [r7, #12]
}
    4e0c:	4618      	mov	r0, r3
    4e0e:	3710      	adds	r7, #16
    4e10:	46bd      	mov	sp, r7
    4e12:	bd80      	pop	{r7, pc}

00004e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    4e14:	b480      	push	{r7}
    4e16:	b085      	sub	sp, #20
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4e1e:	2300      	movs	r3, #0
    4e20:	60fb      	str	r3, [r7, #12]
    4e22:	e014      	b.n	4e4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    4e24:	4a0e      	ldr	r2, [pc, #56]	; (4e60 <vQueueAddToRegistry+0x4c>)
    4e26:	68fb      	ldr	r3, [r7, #12]
    4e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d10b      	bne.n	4e48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    4e30:	490b      	ldr	r1, [pc, #44]	; (4e60 <vQueueAddToRegistry+0x4c>)
    4e32:	68fb      	ldr	r3, [r7, #12]
    4e34:	683a      	ldr	r2, [r7, #0]
    4e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    4e3a:	4a09      	ldr	r2, [pc, #36]	; (4e60 <vQueueAddToRegistry+0x4c>)
    4e3c:	68fb      	ldr	r3, [r7, #12]
    4e3e:	00db      	lsls	r3, r3, #3
    4e40:	4413      	add	r3, r2
    4e42:	687a      	ldr	r2, [r7, #4]
    4e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    4e46:	e005      	b.n	4e54 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4e48:	68fb      	ldr	r3, [r7, #12]
    4e4a:	3301      	adds	r3, #1
    4e4c:	60fb      	str	r3, [r7, #12]
    4e4e:	68fb      	ldr	r3, [r7, #12]
    4e50:	2b09      	cmp	r3, #9
    4e52:	d9e7      	bls.n	4e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    4e54:	bf00      	nop
    4e56:	3714      	adds	r7, #20
    4e58:	46bd      	mov	sp, r7
    4e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5e:	4770      	bx	lr
    4e60:	10000ee4 	.word	0x10000ee4

00004e64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    4e64:	b580      	push	{r7, lr}
    4e66:	b086      	sub	sp, #24
    4e68:	af00      	add	r7, sp, #0
    4e6a:	60f8      	str	r0, [r7, #12]
    4e6c:	60b9      	str	r1, [r7, #8]
    4e6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4e70:	68fb      	ldr	r3, [r7, #12]
    4e72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    4e74:	f001 ffb6 	bl	6de4 <vPortEnterCritical>
    4e78:	697b      	ldr	r3, [r7, #20]
    4e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4e7e:	b25b      	sxtb	r3, r3
    4e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4e84:	d103      	bne.n	4e8e <vQueueWaitForMessageRestricted+0x2a>
    4e86:	697b      	ldr	r3, [r7, #20]
    4e88:	2200      	movs	r2, #0
    4e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    4e8e:	697b      	ldr	r3, [r7, #20]
    4e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    4e94:	b25b      	sxtb	r3, r3
    4e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4e9a:	d103      	bne.n	4ea4 <vQueueWaitForMessageRestricted+0x40>
    4e9c:	697b      	ldr	r3, [r7, #20]
    4e9e:	2200      	movs	r2, #0
    4ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    4ea4:	f001 ffb8 	bl	6e18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    4ea8:	697b      	ldr	r3, [r7, #20]
    4eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4eac:	2b00      	cmp	r3, #0
    4eae:	d106      	bne.n	4ebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    4eb0:	697b      	ldr	r3, [r7, #20]
    4eb2:	3324      	adds	r3, #36	; 0x24
    4eb4:	687a      	ldr	r2, [r7, #4]
    4eb6:	68b9      	ldr	r1, [r7, #8]
    4eb8:	4618      	mov	r0, r3
    4eba:	f7ff f9af 	bl	421c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    4ebe:	6978      	ldr	r0, [r7, #20]
    4ec0:	f7ff ff28 	bl	4d14 <prvUnlockQueue>
	}
    4ec4:	bf00      	nop
    4ec6:	3718      	adds	r7, #24
    4ec8:	46bd      	mov	sp, r7
    4eca:	bd80      	pop	{r7, pc}

00004ecc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b084      	sub	sp, #16
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    4ed4:	f7fe ffd2 	bl	3e7c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    4ed8:	6878      	ldr	r0, [r7, #4]
    4eda:	f003 ff9f 	bl	8e1c <malloc>
    4ede:	4603      	mov	r3, r0
    4ee0:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    4ee2:	f7fe ffd9 	bl	3e98 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    4ee6:	68fb      	ldr	r3, [r7, #12]
}
    4ee8:	4618      	mov	r0, r3
    4eea:	3710      	adds	r7, #16
    4eec:	46bd      	mov	sp, r7
    4eee:	bd80      	pop	{r7, pc}

00004ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4ef0:	b580      	push	{r7, lr}
    4ef2:	b082      	sub	sp, #8
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]
	if( pv )
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	2b00      	cmp	r3, #0
    4efc:	d006      	beq.n	4f0c <vPortFree+0x1c>
	{
		vTaskSuspendAll();
    4efe:	f7fe ffbd 	bl	3e7c <vTaskSuspendAll>
		{
			free( pv );
    4f02:	6878      	ldr	r0, [r7, #4]
    4f04:	f003 ff92 	bl	8e2c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    4f08:	f7fe ffc6 	bl	3e98 <xTaskResumeAll>
	}
}
    4f0c:	bf00      	nop
    4f0e:	3708      	adds	r7, #8
    4f10:	46bd      	mov	sp, r7
    4f12:	bd80      	pop	{r7, pc}

00004f14 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    4f14:	b480      	push	{r7}
    4f16:	af00      	add	r7, sp, #0
    return 1;
    4f18:	2301      	movs	r3, #1
  }
    4f1a:	4618      	mov	r0, r3
    4f1c:	46bd      	mov	sp, r7
    4f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f22:	4770      	bx	lr

00004f24 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    4f24:	b480      	push	{r7}
    4f26:	b083      	sub	sp, #12
    4f28:	af00      	add	r7, sp, #0
    4f2a:	6078      	str	r0, [r7, #4]
    4f2c:	6039      	str	r1, [r7, #0]
    return -1;
    4f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    4f32:	4618      	mov	r0, r3
    4f34:	370c      	adds	r7, #12
    4f36:	46bd      	mov	sp, r7
    4f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f3c:	4770      	bx	lr
    4f3e:	Address 0x0000000000004f3e is out of bounds.


00004f40 <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    4f40:	b480      	push	{r7}
    4f42:	b085      	sub	sp, #20
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    4f48:	4b0c      	ldr	r3, [pc, #48]	; (4f7c <_sbrk+0x3c>)
    4f4a:	681b      	ldr	r3, [r3, #0]
    4f4c:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    4f4e:	4b0b      	ldr	r3, [pc, #44]	; (4f7c <_sbrk+0x3c>)
    4f50:	681a      	ldr	r2, [r3, #0]
    4f52:	687b      	ldr	r3, [r7, #4]
    4f54:	4413      	add	r3, r2
    4f56:	4a0a      	ldr	r2, [pc, #40]	; (4f80 <_sbrk+0x40>)
    4f58:	4293      	cmp	r3, r2
    4f5a:	d901      	bls.n	4f60 <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    4f5c:	2300      	movs	r3, #0
    4f5e:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    4f60:	4b06      	ldr	r3, [pc, #24]	; (4f7c <_sbrk+0x3c>)
    4f62:	681a      	ldr	r2, [r3, #0]
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	4413      	add	r3, r2
    4f68:	4a04      	ldr	r2, [pc, #16]	; (4f7c <_sbrk+0x3c>)
    4f6a:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    4f6c:	68fb      	ldr	r3, [r7, #12]
  }
    4f6e:	4618      	mov	r0, r3
    4f70:	3714      	adds	r7, #20
    4f72:	46bd      	mov	sp, r7
    4f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f78:	4770      	bx	lr
    4f7a:	bf00      	nop
    4f7c:	10000064 	.word	0x10000064
    4f80:	20008000 	.word	0x20008000

00004f84 <_write>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    4f84:	b580      	push	{r7, lr}
    4f86:	b084      	sub	sp, #16
    4f88:	af00      	add	r7, sp, #0
    4f8a:	60f8      	str	r0, [r7, #12]
    4f8c:	60b9      	str	r1, [r7, #8]
    4f8e:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	4619      	mov	r1, r3
    4f94:	68b8      	ldr	r0, [r7, #8]
    4f96:	f001 f97a 	bl	628e <trace_write>
    return sjsu::newlib::out(ptr, length);
    4f9a:	4b05      	ldr	r3, [pc, #20]	; (4fb0 <_write+0x2c>)
    4f9c:	681b      	ldr	r3, [r3, #0]
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	4611      	mov	r1, r2
    4fa2:	68b8      	ldr	r0, [r7, #8]
    4fa4:	4798      	blx	r3
    4fa6:	4603      	mov	r3, r0
  }
    4fa8:	4618      	mov	r0, r3
    4faa:	3710      	adds	r7, #16
    4fac:	46bd      	mov	sp, r7
    4fae:	bd80      	pop	{r7, pc}
    4fb0:	1000005c 	.word	0x1000005c

00004fb4 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b084      	sub	sp, #16
    4fb8:	af00      	add	r7, sp, #0
    4fba:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    4fbc:	6878      	ldr	r0, [r7, #4]
    4fbe:	f004 f84d 	bl	905c <strlen>
    4fc2:	4603      	mov	r3, r0
    4fc4:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    4fc6:	2300      	movs	r3, #0
    4fc8:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    4fca:	68fa      	ldr	r2, [r7, #12]
    4fcc:	6879      	ldr	r1, [r7, #4]
    4fce:	2000      	movs	r0, #0
    4fd0:	f7ff ffd8 	bl	4f84 <_write>
    4fd4:	4602      	mov	r2, r0
    4fd6:	68bb      	ldr	r3, [r7, #8]
    4fd8:	4413      	add	r3, r2
    4fda:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    4fdc:	2201      	movs	r2, #1
    4fde:	4906      	ldr	r1, [pc, #24]	; (4ff8 <puts+0x44>)
    4fe0:	2000      	movs	r0, #0
    4fe2:	f7ff ffcf 	bl	4f84 <_write>
    4fe6:	4602      	mov	r2, r0
    4fe8:	68bb      	ldr	r3, [r7, #8]
    4fea:	4413      	add	r3, r2
    4fec:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    4fee:	68bb      	ldr	r3, [r7, #8]
  }
    4ff0:	4618      	mov	r0, r3
    4ff2:	3710      	adds	r7, #16
    4ff4:	46bd      	mov	sp, r7
    4ff6:	bd80      	pop	{r7, pc}
    4ff8:	0000a134 	.word	0x0000a134

00004ffc <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    4ffc:	b480      	push	{r7}
    4ffe:	b083      	sub	sp, #12
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    5004:	bf00      	nop
    while (1)
    5006:	e7fd      	b.n	5004 <_exit+0x8>

00005008 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    5008:	b580      	push	{r7, lr}
    500a:	b088      	sub	sp, #32
    500c:	af00      	add	r7, sp, #0
    500e:	60b9      	str	r1, [r7, #8]
    5010:	607a      	str	r2, [r7, #4]
    5012:	603b      	str	r3, [r7, #0]
    5014:	4603      	mov	r3, r0
    5016:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    5018:	23fe      	movs	r3, #254	; 0xfe
    501a:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    501c:	697a      	ldr	r2, [r7, #20]
    501e:	687b      	ldr	r3, [r7, #4]
    5020:	fbb3 f1f2 	udiv	r1, r3, r2
    5024:	fb02 f201 	mul.w	r2, r2, r1
    5028:	1a9b      	subs	r3, r3, r2
    502a:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    502c:	68ba      	ldr	r2, [r7, #8]
    502e:	69fb      	ldr	r3, [r7, #28]
    5030:	4413      	add	r3, r2
    5032:	7bfa      	ldrb	r2, [r7, #15]
    5034:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    5036:	7bfb      	ldrb	r3, [r7, #15]
    5038:	2b00      	cmp	r3, #0
    503a:	d106      	bne.n	504a <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    503c:	69fb      	ldr	r3, [r7, #28]
    503e:	461a      	mov	r2, r3
    5040:	68b9      	ldr	r1, [r7, #8]
    5042:	2001      	movs	r0, #1
    5044:	f7ff ff9e 	bl	4f84 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    5048:	e012      	b.n	5070 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    504a:	69fb      	ldr	r3, [r7, #28]
    504c:	1c5a      	adds	r2, r3, #1
    504e:	697b      	ldr	r3, [r7, #20]
    5050:	429a      	cmp	r2, r3
    5052:	d10d      	bne.n	5070 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    5054:	697b      	ldr	r3, [r7, #20]
    5056:	3301      	adds	r3, #1
    5058:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    505a:	68ba      	ldr	r2, [r7, #8]
    505c:	69bb      	ldr	r3, [r7, #24]
    505e:	4413      	add	r3, r2
    5060:	2200      	movs	r2, #0
    5062:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    5064:	69bb      	ldr	r3, [r7, #24]
    5066:	461a      	mov	r2, r3
    5068:	68b9      	ldr	r1, [r7, #8]
    506a:	2001      	movs	r0, #1
    506c:	f7ff ff8a 	bl	4f84 <_write>
}
    5070:	bf00      	nop
    5072:	3720      	adds	r7, #32
    5074:	46bd      	mov	sp, r7
    5076:	bd80      	pop	{r7, pc}

00005078 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    5078:	b480      	push	{r7}
    507a:	b085      	sub	sp, #20
    507c:	af00      	add	r7, sp, #0
    507e:	60b9      	str	r1, [r7, #8]
    5080:	607a      	str	r2, [r7, #4]
    5082:	603b      	str	r3, [r7, #0]
    5084:	4603      	mov	r3, r0
    5086:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    5088:	bf00      	nop
    508a:	3714      	adds	r7, #20
    508c:	46bd      	mov	sp, r7
    508e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5092:	4770      	bx	lr

00005094 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    5094:	b480      	push	{r7}
    5096:	b085      	sub	sp, #20
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	60fb      	str	r3, [r7, #12]
    50a0:	68fb      	ldr	r3, [r7, #12]
    50a2:	781b      	ldrb	r3, [r3, #0]
    50a4:	2b00      	cmp	r3, #0
    50a6:	d003      	beq.n	50b0 <_strlen(char const*)+0x1c>
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	3301      	adds	r3, #1
    50ac:	60fb      	str	r3, [r7, #12]
    50ae:	e7f7      	b.n	50a0 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    50b0:	68fa      	ldr	r2, [r7, #12]
    50b2:	687b      	ldr	r3, [r7, #4]
    50b4:	1ad3      	subs	r3, r2, r3
}
    50b6:	4618      	mov	r0, r3
    50b8:	3714      	adds	r7, #20
    50ba:	46bd      	mov	sp, r7
    50bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c0:	4770      	bx	lr

000050c2 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    50c2:	b480      	push	{r7}
    50c4:	b083      	sub	sp, #12
    50c6:	af00      	add	r7, sp, #0
    50c8:	4603      	mov	r3, r0
    50ca:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    50cc:	79fb      	ldrb	r3, [r7, #7]
    50ce:	2b2f      	cmp	r3, #47	; 0x2f
    50d0:	d904      	bls.n	50dc <_is_digit(char)+0x1a>
    50d2:	79fb      	ldrb	r3, [r7, #7]
    50d4:	2b39      	cmp	r3, #57	; 0x39
    50d6:	d801      	bhi.n	50dc <_is_digit(char)+0x1a>
    50d8:	2301      	movs	r3, #1
    50da:	e000      	b.n	50de <_is_digit(char)+0x1c>
    50dc:	2300      	movs	r3, #0
}
    50de:	4618      	mov	r0, r3
    50e0:	370c      	adds	r7, #12
    50e2:	46bd      	mov	sp, r7
    50e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e8:	4770      	bx	lr

000050ea <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    50ea:	b580      	push	{r7, lr}
    50ec:	b084      	sub	sp, #16
    50ee:	af00      	add	r7, sp, #0
    50f0:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    50f2:	2300      	movs	r3, #0
    50f4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    50f6:	687b      	ldr	r3, [r7, #4]
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	781b      	ldrb	r3, [r3, #0]
    50fc:	4618      	mov	r0, r3
    50fe:	f7ff ffe0 	bl	50c2 <_is_digit(char)>
    5102:	4603      	mov	r3, r0
    5104:	2b00      	cmp	r3, #0
    5106:	d00f      	beq.n	5128 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    5108:	68fa      	ldr	r2, [r7, #12]
    510a:	4613      	mov	r3, r2
    510c:	009b      	lsls	r3, r3, #2
    510e:	4413      	add	r3, r2
    5110:	005b      	lsls	r3, r3, #1
    5112:	4618      	mov	r0, r3
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	681b      	ldr	r3, [r3, #0]
    5118:	1c59      	adds	r1, r3, #1
    511a:	687a      	ldr	r2, [r7, #4]
    511c:	6011      	str	r1, [r2, #0]
    511e:	781b      	ldrb	r3, [r3, #0]
    5120:	4403      	add	r3, r0
    5122:	3b30      	subs	r3, #48	; 0x30
    5124:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    5126:	e7e6      	b.n	50f6 <_atoi(char const**)+0xc>
  }
  return i;
    5128:	68fb      	ldr	r3, [r7, #12]
}
    512a:	4618      	mov	r0, r3
    512c:	3710      	adds	r7, #16
    512e:	46bd      	mov	sp, r7
    5130:	bd80      	pop	{r7, pc}

00005132 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    5132:	b590      	push	{r4, r7, lr}
    5134:	b089      	sub	sp, #36	; 0x24
    5136:	af00      	add	r7, sp, #0
    5138:	60f8      	str	r0, [r7, #12]
    513a:	60b9      	str	r1, [r7, #8]
    513c:	607a      	str	r2, [r7, #4]
    513e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5146:	f003 0302 	and.w	r3, r3, #2
    514a:	2b00      	cmp	r3, #0
    514c:	d10e      	bne.n	516c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    514e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5152:	429a      	cmp	r2, r3
    5154:	d20a      	bcs.n	516c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    5156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5158:	2b1f      	cmp	r3, #31
    515a:	d807      	bhi.n	516c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    515e:	1c5a      	adds	r2, r3, #1
    5160:	637a      	str	r2, [r7, #52]	; 0x34
    5162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5164:	4413      	add	r3, r2
    5166:	2230      	movs	r2, #48	; 0x30
    5168:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    516a:	e7eb      	b.n	5144 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    516c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    516e:	f003 0302 	and.w	r3, r3, #2
    5172:	2b00      	cmp	r3, #0
    5174:	d113      	bne.n	519e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5178:	f003 0301 	and.w	r3, r3, #1
    517c:	2b00      	cmp	r3, #0
    517e:	d00e      	beq.n	519e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5184:	429a      	cmp	r2, r3
    5186:	d20a      	bcs.n	519e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    5188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    518a:	2b1f      	cmp	r3, #31
    518c:	d807      	bhi.n	519e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5190:	1c5a      	adds	r2, r3, #1
    5192:	637a      	str	r2, [r7, #52]	; 0x34
    5194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5196:	4413      	add	r3, r2
    5198:	2230      	movs	r2, #48	; 0x30
    519a:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    519c:	e7e6      	b.n	516c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    51a0:	f003 0310 	and.w	r3, r3, #16
    51a4:	2b00      	cmp	r3, #0
    51a6:	d058      	beq.n	525a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    51a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    51aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    51ae:	2b00      	cmp	r3, #0
    51b0:	d116      	bne.n	51e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    51b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51b4:	2b00      	cmp	r3, #0
    51b6:	d013      	beq.n	51e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    51b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    51ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51bc:	429a      	cmp	r2, r3
    51be:	d003      	beq.n	51c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    51c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    51c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    51c4:	429a      	cmp	r2, r3
    51c6:	d10b      	bne.n	51e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    51c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51ca:	3b01      	subs	r3, #1
    51cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    51ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51d0:	2b00      	cmp	r3, #0
    51d2:	d005      	beq.n	51e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    51d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    51d6:	2b10      	cmp	r3, #16
    51d8:	d102      	bne.n	51e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    51da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51dc:	3b01      	subs	r3, #1
    51de:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    51e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    51e2:	2b10      	cmp	r3, #16
    51e4:	d10f      	bne.n	5206 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    51e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    51e8:	f003 0320 	and.w	r3, r3, #32
    51ec:	2b00      	cmp	r3, #0
    51ee:	d10a      	bne.n	5206 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    51f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51f2:	2b1f      	cmp	r3, #31
    51f4:	d807      	bhi.n	5206 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    51f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51f8:	1c5a      	adds	r2, r3, #1
    51fa:	637a      	str	r2, [r7, #52]	; 0x34
    51fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    51fe:	4413      	add	r3, r2
    5200:	2278      	movs	r2, #120	; 0x78
    5202:	701a      	strb	r2, [r3, #0]
    5204:	e01f      	b.n	5246 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    5206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5208:	2b10      	cmp	r3, #16
    520a:	d10f      	bne.n	522c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    520c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    520e:	f003 0320 	and.w	r3, r3, #32
    5212:	2b00      	cmp	r3, #0
    5214:	d00a      	beq.n	522c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    5216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5218:	2b1f      	cmp	r3, #31
    521a:	d807      	bhi.n	522c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    521e:	1c5a      	adds	r2, r3, #1
    5220:	637a      	str	r2, [r7, #52]	; 0x34
    5222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5224:	4413      	add	r3, r2
    5226:	2258      	movs	r2, #88	; 0x58
    5228:	701a      	strb	r2, [r3, #0]
    522a:	e00c      	b.n	5246 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    522c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    522e:	2b02      	cmp	r3, #2
    5230:	d109      	bne.n	5246 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    5232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5234:	2b1f      	cmp	r3, #31
    5236:	d806      	bhi.n	5246 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    5238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    523a:	1c5a      	adds	r2, r3, #1
    523c:	637a      	str	r2, [r7, #52]	; 0x34
    523e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5240:	4413      	add	r3, r2
    5242:	2262      	movs	r2, #98	; 0x62
    5244:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    5246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5248:	2b1f      	cmp	r3, #31
    524a:	d806      	bhi.n	525a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    524e:	1c5a      	adds	r2, r3, #1
    5250:	637a      	str	r2, [r7, #52]	; 0x34
    5252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5254:	4413      	add	r3, r2
    5256:	2230      	movs	r2, #48	; 0x30
    5258:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    525c:	2b00      	cmp	r3, #0
    525e:	d014      	beq.n	528a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    5260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5264:	429a      	cmp	r2, r3
    5266:	d110      	bne.n	528a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    5268:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    526c:	2b00      	cmp	r3, #0
    526e:	d109      	bne.n	5284 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    5270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5272:	f003 0304 	and.w	r3, r3, #4
    5276:	2b00      	cmp	r3, #0
    5278:	d104      	bne.n	5284 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    527a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    527c:	f003 0308 	and.w	r3, r3, #8
    5280:	2b00      	cmp	r3, #0
    5282:	d002      	beq.n	528a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    5284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5286:	3b01      	subs	r3, #1
    5288:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    528c:	2b1f      	cmp	r3, #31
    528e:	d824      	bhi.n	52da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    5290:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5294:	2b00      	cmp	r3, #0
    5296:	d007      	beq.n	52a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    5298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    529a:	1c5a      	adds	r2, r3, #1
    529c:	637a      	str	r2, [r7, #52]	; 0x34
    529e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    52a0:	4413      	add	r3, r2
    52a2:	222d      	movs	r2, #45	; 0x2d
    52a4:	701a      	strb	r2, [r3, #0]
    52a6:	e018      	b.n	52da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    52a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52aa:	f003 0304 	and.w	r3, r3, #4
    52ae:	2b00      	cmp	r3, #0
    52b0:	d007      	beq.n	52c2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    52b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52b4:	1c5a      	adds	r2, r3, #1
    52b6:	637a      	str	r2, [r7, #52]	; 0x34
    52b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    52ba:	4413      	add	r3, r2
    52bc:	222b      	movs	r2, #43	; 0x2b
    52be:	701a      	strb	r2, [r3, #0]
    52c0:	e00b      	b.n	52da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    52c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52c4:	f003 0308 	and.w	r3, r3, #8
    52c8:	2b00      	cmp	r3, #0
    52ca:	d006      	beq.n	52da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    52cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ce:	1c5a      	adds	r2, r3, #1
    52d0:	637a      	str	r2, [r7, #52]	; 0x34
    52d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    52d4:	4413      	add	r3, r2
    52d6:	2220      	movs	r2, #32
    52d8:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    52da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52dc:	f003 0302 	and.w	r3, r3, #2
    52e0:	2b00      	cmp	r3, #0
    52e2:	d116      	bne.n	5312 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    52e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52e6:	f003 0301 	and.w	r3, r3, #1
    52ea:	2b00      	cmp	r3, #0
    52ec:	d111      	bne.n	5312 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    52ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52f0:	61fb      	str	r3, [r7, #28]
    52f2:	69fa      	ldr	r2, [r7, #28]
    52f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    52f6:	429a      	cmp	r2, r3
    52f8:	d20b      	bcs.n	5312 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    52fa:	687a      	ldr	r2, [r7, #4]
    52fc:	1c53      	adds	r3, r2, #1
    52fe:	607b      	str	r3, [r7, #4]
    5300:	68fc      	ldr	r4, [r7, #12]
    5302:	683b      	ldr	r3, [r7, #0]
    5304:	68b9      	ldr	r1, [r7, #8]
    5306:	2020      	movs	r0, #32
    5308:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    530a:	69fb      	ldr	r3, [r7, #28]
    530c:	3301      	adds	r3, #1
    530e:	61fb      	str	r3, [r7, #28]
    5310:	e7ef      	b.n	52f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    5312:	2300      	movs	r3, #0
    5314:	61bb      	str	r3, [r7, #24]
    5316:	69ba      	ldr	r2, [r7, #24]
    5318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    531a:	429a      	cmp	r2, r3
    531c:	d211      	bcs.n	5342 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    531e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5320:	69bb      	ldr	r3, [r7, #24]
    5322:	1ad3      	subs	r3, r2, r3
    5324:	3b01      	subs	r3, #1
    5326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5328:	4413      	add	r3, r2
    532a:	7818      	ldrb	r0, [r3, #0]
    532c:	687a      	ldr	r2, [r7, #4]
    532e:	1c53      	adds	r3, r2, #1
    5330:	607b      	str	r3, [r7, #4]
    5332:	68fc      	ldr	r4, [r7, #12]
    5334:	683b      	ldr	r3, [r7, #0]
    5336:	68b9      	ldr	r1, [r7, #8]
    5338:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    533a:	69bb      	ldr	r3, [r7, #24]
    533c:	3301      	adds	r3, #1
    533e:	61bb      	str	r3, [r7, #24]
    5340:	e7e9      	b.n	5316 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    5342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5344:	f003 0302 	and.w	r3, r3, #2
    5348:	2b00      	cmp	r3, #0
    534a:	d00e      	beq.n	536a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    534c:	687a      	ldr	r2, [r7, #4]
    534e:	697b      	ldr	r3, [r7, #20]
    5350:	1ad3      	subs	r3, r2, r3
    5352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5354:	429a      	cmp	r2, r3
    5356:	d908      	bls.n	536a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    5358:	687a      	ldr	r2, [r7, #4]
    535a:	1c53      	adds	r3, r2, #1
    535c:	607b      	str	r3, [r7, #4]
    535e:	68fc      	ldr	r4, [r7, #12]
    5360:	683b      	ldr	r3, [r7, #0]
    5362:	68b9      	ldr	r1, [r7, #8]
    5364:	2020      	movs	r0, #32
    5366:	47a0      	blx	r4
    while (idx - start_idx < width) {
    5368:	e7f0      	b.n	534c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    536a:	687b      	ldr	r3, [r7, #4]
}
    536c:	4618      	mov	r0, r3
    536e:	3724      	adds	r7, #36	; 0x24
    5370:	46bd      	mov	sp, r7
    5372:	bd90      	pop	{r4, r7, pc}

00005374 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    5374:	b580      	push	{r7, lr}
    5376:	b096      	sub	sp, #88	; 0x58
    5378:	af08      	add	r7, sp, #32
    537a:	60f8      	str	r0, [r7, #12]
    537c:	60b9      	str	r1, [r7, #8]
    537e:	607a      	str	r2, [r7, #4]
    5380:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    5382:	2300      	movs	r3, #0
    5384:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    5386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5388:	2b00      	cmp	r3, #0
    538a:	d103      	bne.n	5394 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    538c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    538e:	f023 0310 	bic.w	r3, r3, #16
    5392:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    5394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    539a:	2b00      	cmp	r3, #0
    539c:	d002      	beq.n	53a4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53a0:	2b00      	cmp	r3, #0
    53a2:	d034      	beq.n	540e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    53a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    53a8:	fbb3 f2f2 	udiv	r2, r3, r2
    53ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    53ae:	fb01 f202 	mul.w	r2, r1, r2
    53b2:	1a9b      	subs	r3, r3, r2
    53b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    53b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    53bc:	2b09      	cmp	r3, #9
    53be:	d804      	bhi.n	53ca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    53c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    53c4:	3330      	adds	r3, #48	; 0x30
    53c6:	b2da      	uxtb	r2, r3
    53c8:	e00d      	b.n	53e6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    53ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    53cc:	f003 0320 	and.w	r3, r3, #32
    53d0:	2b00      	cmp	r3, #0
    53d2:	d001      	beq.n	53d8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    53d4:	2241      	movs	r2, #65	; 0x41
    53d6:	e000      	b.n	53da <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    53d8:	2261      	movs	r2, #97	; 0x61
    53da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    53de:	4413      	add	r3, r2
    53e0:	b2db      	uxtb	r3, r3
    53e2:	3b0a      	subs	r3, #10
    53e4:	b2da      	uxtb	r2, r3
    53e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53e8:	1c59      	adds	r1, r3, #1
    53ea:	6379      	str	r1, [r7, #52]	; 0x34
    53ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
    53f0:	440b      	add	r3, r1
    53f2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    53f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    53f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    53fa:	fbb2 f3f3 	udiv	r3, r2, r3
    53fe:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    5400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5402:	2b00      	cmp	r3, #0
    5404:	d003      	beq.n	540e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    5406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5408:	2b1f      	cmp	r3, #31
    540a:	d800      	bhi.n	540e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    540c:	e7ca      	b.n	53a4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    540e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5410:	9306      	str	r3, [sp, #24]
    5412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5414:	9305      	str	r3, [sp, #20]
    5416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5418:	9304      	str	r3, [sp, #16]
    541a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    541c:	9303      	str	r3, [sp, #12]
    541e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    5422:	9302      	str	r3, [sp, #8]
    5424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5426:	9301      	str	r3, [sp, #4]
    5428:	f107 0310 	add.w	r3, r7, #16
    542c:	9300      	str	r3, [sp, #0]
    542e:	683b      	ldr	r3, [r7, #0]
    5430:	687a      	ldr	r2, [r7, #4]
    5432:	68b9      	ldr	r1, [r7, #8]
    5434:	68f8      	ldr	r0, [r7, #12]
    5436:	f7ff fe7c 	bl	5132 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    543a:	4603      	mov	r3, r0
}
    543c:	4618      	mov	r0, r3
    543e:	3738      	adds	r7, #56	; 0x38
    5440:	46bd      	mov	sp, r7
    5442:	bd80      	pop	{r7, pc}

00005444 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    5444:	b590      	push	{r4, r7, lr}
    5446:	b097      	sub	sp, #92	; 0x5c
    5448:	af08      	add	r7, sp, #32
    544a:	60f8      	str	r0, [r7, #12]
    544c:	60b9      	str	r1, [r7, #8]
    544e:	607a      	str	r2, [r7, #4]
    5450:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    5452:	2300      	movs	r3, #0
    5454:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    5456:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    545a:	4323      	orrs	r3, r4
    545c:	d103      	bne.n	5466 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    545e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5460:	f023 0310 	bic.w	r3, r3, #16
    5464:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    5466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    546c:	2b00      	cmp	r3, #0
    546e:	d003      	beq.n	5478 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    5470:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    5474:	4323      	orrs	r3, r4
    5476:	d03a      	beq.n	54ee <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    5478:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    547c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    5480:	f002 fb9a 	bl	7bb8 <__aeabi_uldivmod>
    5484:	461c      	mov	r4, r3
    5486:	4613      	mov	r3, r2
    5488:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    548c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5490:	2b09      	cmp	r3, #9
    5492:	d804      	bhi.n	549e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    5494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5498:	3330      	adds	r3, #48	; 0x30
    549a:	b2da      	uxtb	r2, r3
    549c:	e00d      	b.n	54ba <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    549e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    54a0:	f003 0320 	and.w	r3, r3, #32
    54a4:	2b00      	cmp	r3, #0
    54a6:	d001      	beq.n	54ac <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    54a8:	2241      	movs	r2, #65	; 0x41
    54aa:	e000      	b.n	54ae <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    54ac:	2261      	movs	r2, #97	; 0x61
    54ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    54b2:	4413      	add	r3, r2
    54b4:	b2db      	uxtb	r3, r3
    54b6:	3b0a      	subs	r3, #10
    54b8:	b2da      	uxtb	r2, r3
    54ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54bc:	1c59      	adds	r1, r3, #1
    54be:	6379      	str	r1, [r7, #52]	; 0x34
    54c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
    54c4:	440b      	add	r3, r1
    54c6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    54ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    54ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    54d2:	f002 fb71 	bl	7bb8 <__aeabi_uldivmod>
    54d6:	4603      	mov	r3, r0
    54d8:	460c      	mov	r4, r1
    54da:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    54de:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    54e2:	4323      	orrs	r3, r4
    54e4:	d003      	beq.n	54ee <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    54e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54e8:	2b1f      	cmp	r3, #31
    54ea:	d800      	bhi.n	54ee <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    54ec:	e7c4      	b.n	5478 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    54ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    54f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
    54f2:	9206      	str	r2, [sp, #24]
    54f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    54f6:	9205      	str	r2, [sp, #20]
    54f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    54fa:	9204      	str	r2, [sp, #16]
    54fc:	9303      	str	r3, [sp, #12]
    54fe:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    5502:	9302      	str	r3, [sp, #8]
    5504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5506:	9301      	str	r3, [sp, #4]
    5508:	f107 0310 	add.w	r3, r7, #16
    550c:	9300      	str	r3, [sp, #0]
    550e:	683b      	ldr	r3, [r7, #0]
    5510:	687a      	ldr	r2, [r7, #4]
    5512:	68b9      	ldr	r1, [r7, #8]
    5514:	68f8      	ldr	r0, [r7, #12]
    5516:	f7ff fe0c 	bl	5132 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    551a:	4603      	mov	r3, r0
}
    551c:	4618      	mov	r0, r3
    551e:	373c      	adds	r7, #60	; 0x3c
    5520:	46bd      	mov	sp, r7
    5522:	bd90      	pop	{r4, r7, pc}

00005524 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    5524:	b590      	push	{r4, r7, lr}
    5526:	b09b      	sub	sp, #108	; 0x6c
    5528:	af00      	add	r7, sp, #0
    552a:	6178      	str	r0, [r7, #20]
    552c:	6139      	str	r1, [r7, #16]
    552e:	60fa      	str	r2, [r7, #12]
    5530:	60bb      	str	r3, [r7, #8]
    5532:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    5536:	68fb      	ldr	r3, [r7, #12]
    5538:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    553a:	e9d7 0100 	ldrd	r0, r1, [r7]
    553e:	f002 f9dd 	bl	78fc <__aeabi_d2f>
    5542:	4603      	mov	r3, r0
    5544:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    5546:	2300      	movs	r3, #0
    5548:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    554a:	f04f 0300 	mov.w	r3, #0
    554e:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    5550:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    5554:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    5556:	2300      	movs	r3, #0
    5558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    555c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5568:	d50a      	bpl.n	5580 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    556a:	2301      	movs	r3, #1
    556c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    5570:	ed9f 7aab 	vldr	s14, [pc, #684]	; 5820 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    5574:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    5578:	ee77 7a67 	vsub.f32	s15, s14, s15
    557c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    5580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5588:	2b00      	cmp	r3, #0
    558a:	d101      	bne.n	5590 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    558c:	2306      	movs	r3, #6
    558e:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    5590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5592:	2b1f      	cmp	r3, #31
    5594:	d80f      	bhi.n	55b6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    5596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5598:	2b09      	cmp	r3, #9
    559a:	d90c      	bls.n	55b6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    559c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    559e:	1c5a      	adds	r2, r3, #1
    55a0:	663a      	str	r2, [r7, #96]	; 0x60
    55a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    55a6:	4413      	add	r3, r2
    55a8:	2230      	movs	r2, #48	; 0x30
    55aa:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    55ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    55b0:	3b01      	subs	r3, #1
    55b2:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    55b4:	e7ec      	b.n	5590 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    55b6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    55ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    55be:	ee17 3a90 	vmov	r3, s15
    55c2:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    55c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    55c6:	ee07 3a90 	vmov	s15, r3
    55ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    55ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    55d2:	ee37 7a67 	vsub.f32	s14, s14, s15
    55d6:	4a93      	ldr	r2, [pc, #588]	; (5824 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    55d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    55da:	009b      	lsls	r3, r3, #2
    55dc:	4413      	add	r3, r2
    55de:	edd3 7a00 	vldr	s15, [r3]
    55e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    55e6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    55ea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    55ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    55f2:	ee17 3a90 	vmov	r3, s15
    55f6:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    55f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    55fa:	ee07 3a90 	vmov	s15, r3
    55fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5602:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    5606:	ee77 7a67 	vsub.f32	s15, s14, s15
    560a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    560e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    5612:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    5616:	eef4 7ac7 	vcmpe.f32	s15, s14
    561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    561e:	dd18      	ble.n	5652 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    5620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5622:	3301      	adds	r3, #1
    5624:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    5626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5628:	ee07 3a90 	vmov	s15, r3
    562c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    5630:	4a7c      	ldr	r2, [pc, #496]	; (5824 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    5632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5634:	009b      	lsls	r3, r3, #2
    5636:	4413      	add	r3, r2
    5638:	edd3 7a00 	vldr	s15, [r3]
    563c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5644:	db19      	blt.n	567a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    5646:	2300      	movs	r3, #0
    5648:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    564a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    564c:	3301      	adds	r3, #1
    564e:	65bb      	str	r3, [r7, #88]	; 0x58
    5650:	e013      	b.n	567a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    5652:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    5656:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    565a:	eef4 7a47 	vcmp.f32	s15, s14
    565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5662:	d10a      	bne.n	567a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    5664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5666:	2b00      	cmp	r3, #0
    5668:	d004      	beq.n	5674 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    566a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    566c:	f003 0301 	and.w	r3, r3, #1
    5670:	2b00      	cmp	r3, #0
    5672:	d002      	beq.n	567a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    5674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5676:	3301      	adds	r3, #1
    5678:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    567a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    567e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 5828 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    5682:	eef4 7ac7 	vcmpe.f32	s15, s14
    5686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    568a:	dd01      	ble.n	5690 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    568c:	2300      	movs	r3, #0
    568e:	e166      	b.n	595e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    5690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5692:	2b00      	cmp	r3, #0
    5694:	d129      	bne.n	56ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    5696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5698:	ee07 3a90 	vmov	s15, r3
    569c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    56a0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    56a4:	ee77 7a67 	vsub.f32	s15, s14, s15
    56a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    56ac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    56b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    56b4:	eef4 7ac7 	vcmpe.f32	s15, s14
    56b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56bc:	dd03      	ble.n	56c6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    56be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    56c0:	3301      	adds	r3, #1
    56c2:	65bb      	str	r3, [r7, #88]	; 0x58
    56c4:	e062      	b.n	578c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    56c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    56ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    56ce:	eef4 7a47 	vcmp.f32	s15, s14
    56d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56d6:	d159      	bne.n	578c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    56d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    56da:	f003 0301 	and.w	r3, r3, #1
    56de:	2b00      	cmp	r3, #0
    56e0:	d054      	beq.n	578c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    56e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    56e4:	3301      	adds	r3, #1
    56e6:	65bb      	str	r3, [r7, #88]	; 0x58
    56e8:	e050      	b.n	578c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    56ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    56ec:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    56ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    56f0:	2b1f      	cmp	r3, #31
    56f2:	d828      	bhi.n	5746 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    56f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    56f6:	3b01      	subs	r3, #1
    56f8:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    56fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
    56fc:	4b4b      	ldr	r3, [pc, #300]	; (582c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    56fe:	fba3 2301 	umull	r2, r3, r3, r1
    5702:	08da      	lsrs	r2, r3, #3
    5704:	4613      	mov	r3, r2
    5706:	009b      	lsls	r3, r3, #2
    5708:	4413      	add	r3, r2
    570a:	005b      	lsls	r3, r3, #1
    570c:	1aca      	subs	r2, r1, r3
    570e:	b2d3      	uxtb	r3, r2
    5710:	3330      	adds	r3, #48	; 0x30
    5712:	b2d9      	uxtb	r1, r3
    5714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5716:	1c5a      	adds	r2, r3, #1
    5718:	663a      	str	r2, [r7, #96]	; 0x60
    571a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    571e:	4413      	add	r3, r2
    5720:	460a      	mov	r2, r1
    5722:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    5726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5728:	4a40      	ldr	r2, [pc, #256]	; (582c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    572a:	fba2 2303 	umull	r2, r3, r2, r3
    572e:	08db      	lsrs	r3, r3, #3
    5730:	657b      	str	r3, [r7, #84]	; 0x54
    5732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5734:	2b00      	cmp	r3, #0
    5736:	bf0c      	ite	eq
    5738:	2301      	moveq	r3, #1
    573a:	2300      	movne	r3, #0
    573c:	b2db      	uxtb	r3, r3
    573e:	2b00      	cmp	r3, #0
    5740:	d100      	bne.n	5744 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    5742:	e7d4      	b.n	56ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    5744:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    5746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5748:	2b1f      	cmp	r3, #31
    574a:	d806      	bhi.n	575a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    574c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    574e:	1e5a      	subs	r2, r3, #1
    5750:	653a      	str	r2, [r7, #80]	; 0x50
    5752:	2b00      	cmp	r3, #0
    5754:	d001      	beq.n	575a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    5756:	2301      	movs	r3, #1
    5758:	e000      	b.n	575c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    575a:	2300      	movs	r3, #0
    575c:	2b00      	cmp	r3, #0
    575e:	d009      	beq.n	5774 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    5760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5762:	1c5a      	adds	r2, r3, #1
    5764:	663a      	str	r2, [r7, #96]	; 0x60
    5766:	f107 0268 	add.w	r2, r7, #104	; 0x68
    576a:	4413      	add	r3, r2
    576c:	2230      	movs	r2, #48	; 0x30
    576e:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    5772:	e7e8      	b.n	5746 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    5774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5776:	2b1f      	cmp	r3, #31
    5778:	d808      	bhi.n	578c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    577c:	1c5a      	adds	r2, r3, #1
    577e:	663a      	str	r2, [r7, #96]	; 0x60
    5780:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5784:	4413      	add	r3, r2
    5786:	222e      	movs	r2, #46	; 0x2e
    5788:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    578c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    578e:	2b1f      	cmp	r3, #31
    5790:	d829      	bhi.n	57e6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    5792:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5794:	4b26      	ldr	r3, [pc, #152]	; (5830 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    5796:	fb83 1302 	smull	r1, r3, r3, r2
    579a:	1099      	asrs	r1, r3, #2
    579c:	17d3      	asrs	r3, r2, #31
    579e:	1ac9      	subs	r1, r1, r3
    57a0:	460b      	mov	r3, r1
    57a2:	009b      	lsls	r3, r3, #2
    57a4:	440b      	add	r3, r1
    57a6:	005b      	lsls	r3, r3, #1
    57a8:	1ad1      	subs	r1, r2, r3
    57aa:	b2cb      	uxtb	r3, r1
    57ac:	3330      	adds	r3, #48	; 0x30
    57ae:	b2d9      	uxtb	r1, r3
    57b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    57b2:	1c5a      	adds	r2, r3, #1
    57b4:	663a      	str	r2, [r7, #96]	; 0x60
    57b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    57ba:	4413      	add	r3, r2
    57bc:	460a      	mov	r2, r1
    57be:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    57c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    57c4:	4a1a      	ldr	r2, [pc, #104]	; (5830 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    57c6:	fb82 1203 	smull	r1, r2, r2, r3
    57ca:	1092      	asrs	r2, r2, #2
    57cc:	17db      	asrs	r3, r3, #31
    57ce:	1ad3      	subs	r3, r2, r3
    57d0:	65bb      	str	r3, [r7, #88]	; 0x58
    57d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    57d4:	2b00      	cmp	r3, #0
    57d6:	bf0c      	ite	eq
    57d8:	2301      	moveq	r3, #1
    57da:	2300      	movne	r3, #0
    57dc:	b2db      	uxtb	r3, r3
    57de:	2b00      	cmp	r3, #0
    57e0:	d100      	bne.n	57e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    57e2:	e7d3      	b.n	578c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    57e4:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    57e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    57ea:	f003 0302 	and.w	r3, r3, #2
    57ee:	2b00      	cmp	r3, #0
    57f0:	d120      	bne.n	5834 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    57f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    57f6:	f003 0301 	and.w	r3, r3, #1
    57fa:	2b00      	cmp	r3, #0
    57fc:	d01a      	beq.n	5834 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    57fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5800:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5802:	429a      	cmp	r2, r3
    5804:	d216      	bcs.n	5834 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    5806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5808:	2b1f      	cmp	r3, #31
    580a:	d813      	bhi.n	5834 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    580c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    580e:	1c5a      	adds	r2, r3, #1
    5810:	663a      	str	r2, [r7, #96]	; 0x60
    5812:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5816:	4413      	add	r3, r2
    5818:	2230      	movs	r2, #48	; 0x30
    581a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    581e:	e7e2      	b.n	57e6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    5820:	00000000 	.word	0x00000000
    5824:	0000a138 	.word	0x0000a138
    5828:	4f000000 	.word	0x4f000000
    582c:	cccccccd 	.word	0xcccccccd
    5830:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    5834:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5838:	429a      	cmp	r2, r3
    583a:	d112      	bne.n	5862 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    583c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5840:	2b00      	cmp	r3, #0
    5842:	d10b      	bne.n	585c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    5844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5848:	f003 0304 	and.w	r3, r3, #4
    584c:	2b00      	cmp	r3, #0
    584e:	d105      	bne.n	585c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    5850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5854:	f003 0308 	and.w	r3, r3, #8
    5858:	2b00      	cmp	r3, #0
    585a:	d002      	beq.n	5862 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    585c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    585e:	3b01      	subs	r3, #1
    5860:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    5862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5864:	2b1f      	cmp	r3, #31
    5866:	d82c      	bhi.n	58c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    5868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    586c:	2b00      	cmp	r3, #0
    586e:	d009      	beq.n	5884 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    5870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5872:	1c5a      	adds	r2, r3, #1
    5874:	663a      	str	r2, [r7, #96]	; 0x60
    5876:	f107 0268 	add.w	r2, r7, #104	; 0x68
    587a:	4413      	add	r3, r2
    587c:	222d      	movs	r2, #45	; 0x2d
    587e:	f803 2c50 	strb.w	r2, [r3, #-80]
    5882:	e01e      	b.n	58c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    5884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5888:	f003 0304 	and.w	r3, r3, #4
    588c:	2b00      	cmp	r3, #0
    588e:	d009      	beq.n	58a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    5890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5892:	1c5a      	adds	r2, r3, #1
    5894:	663a      	str	r2, [r7, #96]	; 0x60
    5896:	f107 0268 	add.w	r2, r7, #104	; 0x68
    589a:	4413      	add	r3, r2
    589c:	222b      	movs	r2, #43	; 0x2b
    589e:	f803 2c50 	strb.w	r2, [r3, #-80]
    58a2:	e00e      	b.n	58c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    58a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    58a8:	f003 0308 	and.w	r3, r3, #8
    58ac:	2b00      	cmp	r3, #0
    58ae:	d008      	beq.n	58c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    58b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58b2:	1c5a      	adds	r2, r3, #1
    58b4:	663a      	str	r2, [r7, #96]	; 0x60
    58b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    58ba:	4413      	add	r3, r2
    58bc:	2220      	movs	r2, #32
    58be:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    58c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    58c6:	f003 0302 	and.w	r3, r3, #2
    58ca:	2b00      	cmp	r3, #0
    58cc:	d117      	bne.n	58fe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    58ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    58d2:	f003 0301 	and.w	r3, r3, #1
    58d6:	2b00      	cmp	r3, #0
    58d8:	d111      	bne.n	58fe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    58da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    58dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    58de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    58e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    58e2:	429a      	cmp	r2, r3
    58e4:	d20b      	bcs.n	58fe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    58e6:	68fa      	ldr	r2, [r7, #12]
    58e8:	1c53      	adds	r3, r2, #1
    58ea:	60fb      	str	r3, [r7, #12]
    58ec:	697c      	ldr	r4, [r7, #20]
    58ee:	68bb      	ldr	r3, [r7, #8]
    58f0:	6939      	ldr	r1, [r7, #16]
    58f2:	2020      	movs	r0, #32
    58f4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    58f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    58f8:	3301      	adds	r3, #1
    58fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    58fc:	e7ef      	b.n	58de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    58fe:	2300      	movs	r3, #0
    5900:	64bb      	str	r3, [r7, #72]	; 0x48
    5902:	6cba      	ldr	r2, [r7, #72]	; 0x48
    5904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5906:	429a      	cmp	r2, r3
    5908:	d213      	bcs.n	5932 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    590a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    590c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    590e:	1ad3      	subs	r3, r2, r3
    5910:	3b01      	subs	r3, #1
    5912:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5916:	4413      	add	r3, r2
    5918:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    591c:	68fa      	ldr	r2, [r7, #12]
    591e:	1c53      	adds	r3, r2, #1
    5920:	60fb      	str	r3, [r7, #12]
    5922:	697c      	ldr	r4, [r7, #20]
    5924:	68bb      	ldr	r3, [r7, #8]
    5926:	6939      	ldr	r1, [r7, #16]
    5928:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    592a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    592c:	3301      	adds	r3, #1
    592e:	64bb      	str	r3, [r7, #72]	; 0x48
    5930:	e7e7      	b.n	5902 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    5932:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    5936:	f003 0302 	and.w	r3, r3, #2
    593a:	2b00      	cmp	r3, #0
    593c:	d00e      	beq.n	595c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    593e:	68fa      	ldr	r2, [r7, #12]
    5940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5942:	1ad3      	subs	r3, r2, r3
    5944:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    5946:	429a      	cmp	r2, r3
    5948:	d908      	bls.n	595c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    594a:	68fa      	ldr	r2, [r7, #12]
    594c:	1c53      	adds	r3, r2, #1
    594e:	60fb      	str	r3, [r7, #12]
    5950:	697c      	ldr	r4, [r7, #20]
    5952:	68bb      	ldr	r3, [r7, #8]
    5954:	6939      	ldr	r1, [r7, #16]
    5956:	2020      	movs	r0, #32
    5958:	47a0      	blx	r4
    while (idx - start_idx < width) {
    595a:	e7f0      	b.n	593e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    595c:	68fb      	ldr	r3, [r7, #12]
}
    595e:	4618      	mov	r0, r3
    5960:	376c      	adds	r7, #108	; 0x6c
    5962:	46bd      	mov	sp, r7
    5964:	bd90      	pop	{r4, r7, pc}
    5966:	bf00      	nop

00005968 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    5968:	b5b0      	push	{r4, r5, r7, lr}
    596a:	b0a0      	sub	sp, #128	; 0x80
    596c:	af0a      	add	r7, sp, #40	; 0x28
    596e:	60f8      	str	r0, [r7, #12]
    5970:	60b9      	str	r1, [r7, #8]
    5972:	607a      	str	r2, [r7, #4]
    5974:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    5976:	2300      	movs	r3, #0
    5978:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    597a:	68bb      	ldr	r3, [r7, #8]
    597c:	2b00      	cmp	r3, #0
    597e:	d101      	bne.n	5984 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    5980:	4ba2      	ldr	r3, [pc, #648]	; (5c0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    5982:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    5984:	683b      	ldr	r3, [r7, #0]
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	2b00      	cmp	r3, #0
    598a:	f000 8445 	beq.w	6218 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    598e:	683b      	ldr	r3, [r7, #0]
    5990:	781b      	ldrb	r3, [r3, #0]
    5992:	2b25      	cmp	r3, #37	; 0x25
    5994:	d00d      	beq.n	59b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    5996:	683b      	ldr	r3, [r7, #0]
    5998:	7818      	ldrb	r0, [r3, #0]
    599a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    599c:	1c53      	adds	r3, r2, #1
    599e:	647b      	str	r3, [r7, #68]	; 0x44
    59a0:	68fc      	ldr	r4, [r7, #12]
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	68b9      	ldr	r1, [r7, #8]
    59a6:	47a0      	blx	r4
      format++;
    59a8:	683b      	ldr	r3, [r7, #0]
    59aa:	3301      	adds	r3, #1
    59ac:	603b      	str	r3, [r7, #0]
      continue;
    59ae:	f000 bc31 	b.w	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    59b2:	683b      	ldr	r3, [r7, #0]
    59b4:	3301      	adds	r3, #1
    59b6:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    59b8:	2300      	movs	r3, #0
    59ba:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    59bc:	683b      	ldr	r3, [r7, #0]
    59be:	781b      	ldrb	r3, [r3, #0]
    59c0:	3b20      	subs	r3, #32
    59c2:	2b10      	cmp	r3, #16
    59c4:	d856      	bhi.n	5a74 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    59c6:	a201      	add	r2, pc, #4	; (adr r2, 59cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    59c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59cc:	00005a4d 	.word	0x00005a4d
    59d0:	00005a75 	.word	0x00005a75
    59d4:	00005a75 	.word	0x00005a75
    59d8:	00005a61 	.word	0x00005a61
    59dc:	00005a75 	.word	0x00005a75
    59e0:	00005a75 	.word	0x00005a75
    59e4:	00005a75 	.word	0x00005a75
    59e8:	00005a75 	.word	0x00005a75
    59ec:	00005a75 	.word	0x00005a75
    59f0:	00005a75 	.word	0x00005a75
    59f4:	00005a75 	.word	0x00005a75
    59f8:	00005a39 	.word	0x00005a39
    59fc:	00005a75 	.word	0x00005a75
    5a00:	00005a25 	.word	0x00005a25
    5a04:	00005a75 	.word	0x00005a75
    5a08:	00005a75 	.word	0x00005a75
    5a0c:	00005a11 	.word	0x00005a11
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    5a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5a12:	f043 0301 	orr.w	r3, r3, #1
    5a16:	657b      	str	r3, [r7, #84]	; 0x54
    5a18:	683b      	ldr	r3, [r7, #0]
    5a1a:	3301      	adds	r3, #1
    5a1c:	603b      	str	r3, [r7, #0]
    5a1e:	2301      	movs	r3, #1
    5a20:	64bb      	str	r3, [r7, #72]	; 0x48
    5a22:	e02a      	b.n	5a7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    5a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5a26:	f043 0302 	orr.w	r3, r3, #2
    5a2a:	657b      	str	r3, [r7, #84]	; 0x54
    5a2c:	683b      	ldr	r3, [r7, #0]
    5a2e:	3301      	adds	r3, #1
    5a30:	603b      	str	r3, [r7, #0]
    5a32:	2301      	movs	r3, #1
    5a34:	64bb      	str	r3, [r7, #72]	; 0x48
    5a36:	e020      	b.n	5a7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    5a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5a3a:	f043 0304 	orr.w	r3, r3, #4
    5a3e:	657b      	str	r3, [r7, #84]	; 0x54
    5a40:	683b      	ldr	r3, [r7, #0]
    5a42:	3301      	adds	r3, #1
    5a44:	603b      	str	r3, [r7, #0]
    5a46:	2301      	movs	r3, #1
    5a48:	64bb      	str	r3, [r7, #72]	; 0x48
    5a4a:	e016      	b.n	5a7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    5a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5a4e:	f043 0308 	orr.w	r3, r3, #8
    5a52:	657b      	str	r3, [r7, #84]	; 0x54
    5a54:	683b      	ldr	r3, [r7, #0]
    5a56:	3301      	adds	r3, #1
    5a58:	603b      	str	r3, [r7, #0]
    5a5a:	2301      	movs	r3, #1
    5a5c:	64bb      	str	r3, [r7, #72]	; 0x48
    5a5e:	e00c      	b.n	5a7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    5a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5a62:	f043 0310 	orr.w	r3, r3, #16
    5a66:	657b      	str	r3, [r7, #84]	; 0x54
    5a68:	683b      	ldr	r3, [r7, #0]
    5a6a:	3301      	adds	r3, #1
    5a6c:	603b      	str	r3, [r7, #0]
    5a6e:	2301      	movs	r3, #1
    5a70:	64bb      	str	r3, [r7, #72]	; 0x48
    5a72:	e002      	b.n	5a7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    5a74:	2300      	movs	r3, #0
    5a76:	64bb      	str	r3, [r7, #72]	; 0x48
    5a78:	bf00      	nop
      }
    } while (n);
    5a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	d000      	beq.n	5a82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    5a80:	e79c      	b.n	59bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    5a82:	2300      	movs	r3, #0
    5a84:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    5a86:	683b      	ldr	r3, [r7, #0]
    5a88:	781b      	ldrb	r3, [r3, #0]
    5a8a:	4618      	mov	r0, r3
    5a8c:	f7ff fb19 	bl	50c2 <_is_digit(char)>
    5a90:	4603      	mov	r3, r0
    5a92:	2b00      	cmp	r3, #0
    5a94:	d005      	beq.n	5aa2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    5a96:	463b      	mov	r3, r7
    5a98:	4618      	mov	r0, r3
    5a9a:	f7ff fb26 	bl	50ea <_atoi(char const**)>
    5a9e:	6538      	str	r0, [r7, #80]	; 0x50
    5aa0:	e018      	b.n	5ad4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	2b2a      	cmp	r3, #42	; 0x2a
    5aa8:	d114      	bne.n	5ad4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    5aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5aac:	1d1a      	adds	r2, r3, #4
    5aae:	66ba      	str	r2, [r7, #104]	; 0x68
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    5ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	da07      	bge.n	5aca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    5aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5abc:	f043 0302 	orr.w	r3, r3, #2
    5ac0:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    5ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ac4:	425b      	negs	r3, r3
    5ac6:	653b      	str	r3, [r7, #80]	; 0x50
    5ac8:	e001      	b.n	5ace <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    5aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5acc:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    5ace:	683b      	ldr	r3, [r7, #0]
    5ad0:	3301      	adds	r3, #1
    5ad2:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    5ad4:	2300      	movs	r3, #0
    5ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    5ad8:	683b      	ldr	r3, [r7, #0]
    5ada:	781b      	ldrb	r3, [r3, #0]
    5adc:	2b2e      	cmp	r3, #46	; 0x2e
    5ade:	d124      	bne.n	5b2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    5ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5ae6:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    5ae8:	683b      	ldr	r3, [r7, #0]
    5aea:	3301      	adds	r3, #1
    5aec:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    5aee:	683b      	ldr	r3, [r7, #0]
    5af0:	781b      	ldrb	r3, [r3, #0]
    5af2:	4618      	mov	r0, r3
    5af4:	f7ff fae5 	bl	50c2 <_is_digit(char)>
    5af8:	4603      	mov	r3, r0
    5afa:	2b00      	cmp	r3, #0
    5afc:	d005      	beq.n	5b0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    5afe:	463b      	mov	r3, r7
    5b00:	4618      	mov	r0, r3
    5b02:	f7ff faf2 	bl	50ea <_atoi(char const**)>
    5b06:	64f8      	str	r0, [r7, #76]	; 0x4c
    5b08:	e00f      	b.n	5b2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    5b0a:	683b      	ldr	r3, [r7, #0]
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	2b2a      	cmp	r3, #42	; 0x2a
    5b10:	d10b      	bne.n	5b2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    5b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5b14:	1d1a      	adds	r2, r3, #4
    5b16:	66ba      	str	r2, [r7, #104]	; 0x68
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    5b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5b22:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    5b24:	683b      	ldr	r3, [r7, #0]
    5b26:	3301      	adds	r3, #1
    5b28:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    5b2a:	683b      	ldr	r3, [r7, #0]
    5b2c:	781b      	ldrb	r3, [r3, #0]
    5b2e:	3b68      	subs	r3, #104	; 0x68
    5b30:	2b12      	cmp	r3, #18
    5b32:	d867      	bhi.n	5c04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    5b34:	a201      	add	r2, pc, #4	; (adr r2, 5b3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    5b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5b3a:	bf00      	nop
    5b3c:	00005baf 	.word	0x00005baf
    5b40:	00005c05 	.word	0x00005c05
    5b44:	00005be5 	.word	0x00005be5
    5b48:	00005c05 	.word	0x00005c05
    5b4c:	00005b89 	.word	0x00005b89
    5b50:	00005c05 	.word	0x00005c05
    5b54:	00005c05 	.word	0x00005c05
    5b58:	00005c05 	.word	0x00005c05
    5b5c:	00005c05 	.word	0x00005c05
    5b60:	00005c05 	.word	0x00005c05
    5b64:	00005c05 	.word	0x00005c05
    5b68:	00005c05 	.word	0x00005c05
    5b6c:	00005bd5 	.word	0x00005bd5
    5b70:	00005c05 	.word	0x00005c05
    5b74:	00005c05 	.word	0x00005c05
    5b78:	00005c05 	.word	0x00005c05
    5b7c:	00005c05 	.word	0x00005c05
    5b80:	00005c05 	.word	0x00005c05
    5b84:	00005bf5 	.word	0x00005bf5
      case 'l' :
        flags |= FLAGS_LONG;
    5b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5b8e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5b90:	683b      	ldr	r3, [r7, #0]
    5b92:	3301      	adds	r3, #1
    5b94:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    5b96:	683b      	ldr	r3, [r7, #0]
    5b98:	781b      	ldrb	r3, [r3, #0]
    5b9a:	2b6c      	cmp	r3, #108	; 0x6c
    5b9c:	d134      	bne.n	5c08 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    5b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5ba4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    5ba6:	683b      	ldr	r3, [r7, #0]
    5ba8:	3301      	adds	r3, #1
    5baa:	603b      	str	r3, [r7, #0]
        }
        break;
    5bac:	e02c      	b.n	5c08 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    5bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5bb4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5bb6:	683b      	ldr	r3, [r7, #0]
    5bb8:	3301      	adds	r3, #1
    5bba:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    5bbc:	683b      	ldr	r3, [r7, #0]
    5bbe:	781b      	ldrb	r3, [r3, #0]
    5bc0:	2b68      	cmp	r3, #104	; 0x68
    5bc2:	d125      	bne.n	5c10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    5bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5bca:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    5bcc:	683b      	ldr	r3, [r7, #0]
    5bce:	3301      	adds	r3, #1
    5bd0:	603b      	str	r3, [r7, #0]
        }
        break;
    5bd2:	e01d      	b.n	5c10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5bda:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5bdc:	683b      	ldr	r3, [r7, #0]
    5bde:	3301      	adds	r3, #1
    5be0:	603b      	str	r3, [r7, #0]
        break;
    5be2:	e016      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5bea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5bec:	683b      	ldr	r3, [r7, #0]
    5bee:	3301      	adds	r3, #1
    5bf0:	603b      	str	r3, [r7, #0]
        break;
    5bf2:	e00e      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    5bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5bfa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    5bfc:	683b      	ldr	r3, [r7, #0]
    5bfe:	3301      	adds	r3, #1
    5c00:	603b      	str	r3, [r7, #0]
        break;
    5c02:	e006      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    5c04:	bf00      	nop
    5c06:	e004      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    5c08:	bf00      	nop
    5c0a:	e002      	b.n	5c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    5c0c:	00005079 	.word	0x00005079
        break;
    5c10:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    5c12:	683b      	ldr	r3, [r7, #0]
    5c14:	781b      	ldrb	r3, [r3, #0]
    5c16:	3b25      	subs	r3, #37	; 0x25
    5c18:	2b53      	cmp	r3, #83	; 0x53
    5c1a:	f200 82ee 	bhi.w	61fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    5c1e:	a201      	add	r2, pc, #4	; (adr r2, 5c24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    5c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c24:	000061e3 	.word	0x000061e3
    5c28:	000061fb 	.word	0x000061fb
    5c2c:	000061fb 	.word	0x000061fb
    5c30:	000061fb 	.word	0x000061fb
    5c34:	000061fb 	.word	0x000061fb
    5c38:	000061fb 	.word	0x000061fb
    5c3c:	000061fb 	.word	0x000061fb
    5c40:	000061fb 	.word	0x000061fb
    5c44:	000061fb 	.word	0x000061fb
    5c48:	000061fb 	.word	0x000061fb
    5c4c:	000061fb 	.word	0x000061fb
    5c50:	000061fb 	.word	0x000061fb
    5c54:	000061fb 	.word	0x000061fb
    5c58:	000061fb 	.word	0x000061fb
    5c5c:	000061fb 	.word	0x000061fb
    5c60:	000061fb 	.word	0x000061fb
    5c64:	000061fb 	.word	0x000061fb
    5c68:	000061fb 	.word	0x000061fb
    5c6c:	000061fb 	.word	0x000061fb
    5c70:	000061fb 	.word	0x000061fb
    5c74:	000061fb 	.word	0x000061fb
    5c78:	000061fb 	.word	0x000061fb
    5c7c:	000061fb 	.word	0x000061fb
    5c80:	000061fb 	.word	0x000061fb
    5c84:	000061fb 	.word	0x000061fb
    5c88:	000061fb 	.word	0x000061fb
    5c8c:	000061fb 	.word	0x000061fb
    5c90:	000061fb 	.word	0x000061fb
    5c94:	000061fb 	.word	0x000061fb
    5c98:	000061fb 	.word	0x000061fb
    5c9c:	000061fb 	.word	0x000061fb
    5ca0:	000061fb 	.word	0x000061fb
    5ca4:	000061fb 	.word	0x000061fb
    5ca8:	00006001 	.word	0x00006001
    5cac:	000061fb 	.word	0x000061fb
    5cb0:	000061fb 	.word	0x000061fb
    5cb4:	000061fb 	.word	0x000061fb
    5cb8:	000061fb 	.word	0x000061fb
    5cbc:	000061fb 	.word	0x000061fb
    5cc0:	000061fb 	.word	0x000061fb
    5cc4:	000061fb 	.word	0x000061fb
    5cc8:	000061fb 	.word	0x000061fb
    5ccc:	000061fb 	.word	0x000061fb
    5cd0:	000061fb 	.word	0x000061fb
    5cd4:	000061fb 	.word	0x000061fb
    5cd8:	000061fb 	.word	0x000061fb
    5cdc:	000061fb 	.word	0x000061fb
    5ce0:	000061fb 	.word	0x000061fb
    5ce4:	000061fb 	.word	0x000061fb
    5ce8:	000061fb 	.word	0x000061fb
    5cec:	000061fb 	.word	0x000061fb
    5cf0:	00005d75 	.word	0x00005d75
    5cf4:	000061fb 	.word	0x000061fb
    5cf8:	000061fb 	.word	0x000061fb
    5cfc:	000061fb 	.word	0x000061fb
    5d00:	000061fb 	.word	0x000061fb
    5d04:	000061fb 	.word	0x000061fb
    5d08:	000061fb 	.word	0x000061fb
    5d0c:	000061fb 	.word	0x000061fb
    5d10:	000061fb 	.word	0x000061fb
    5d14:	000061fb 	.word	0x000061fb
    5d18:	00005d75 	.word	0x00005d75
    5d1c:	0000603d 	.word	0x0000603d
    5d20:	00005d75 	.word	0x00005d75
    5d24:	000061fb 	.word	0x000061fb
    5d28:	00006001 	.word	0x00006001
    5d2c:	000061fb 	.word	0x000061fb
    5d30:	000061fb 	.word	0x000061fb
    5d34:	00005d75 	.word	0x00005d75
    5d38:	000061fb 	.word	0x000061fb
    5d3c:	000061fb 	.word	0x000061fb
    5d40:	000061fb 	.word	0x000061fb
    5d44:	000061fb 	.word	0x000061fb
    5d48:	000061fb 	.word	0x000061fb
    5d4c:	00005d75 	.word	0x00005d75
    5d50:	0000619b 	.word	0x0000619b
    5d54:	000061fb 	.word	0x000061fb
    5d58:	000061fb 	.word	0x000061fb
    5d5c:	000060c5 	.word	0x000060c5
    5d60:	000061fb 	.word	0x000061fb
    5d64:	00005d75 	.word	0x00005d75
    5d68:	000061fb 	.word	0x000061fb
    5d6c:	000061fb 	.word	0x000061fb
    5d70:	00005d75 	.word	0x00005d75
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    5d74:	683b      	ldr	r3, [r7, #0]
    5d76:	781b      	ldrb	r3, [r3, #0]
    5d78:	2b78      	cmp	r3, #120	; 0x78
    5d7a:	d003      	beq.n	5d84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    5d7c:	683b      	ldr	r3, [r7, #0]
    5d7e:	781b      	ldrb	r3, [r3, #0]
    5d80:	2b58      	cmp	r3, #88	; 0x58
    5d82:	d102      	bne.n	5d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    5d84:	2310      	movs	r3, #16
    5d86:	643b      	str	r3, [r7, #64]	; 0x40
    5d88:	e013      	b.n	5db2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    5d8a:	683b      	ldr	r3, [r7, #0]
    5d8c:	781b      	ldrb	r3, [r3, #0]
    5d8e:	2b6f      	cmp	r3, #111	; 0x6f
    5d90:	d102      	bne.n	5d98 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    5d92:	2308      	movs	r3, #8
    5d94:	643b      	str	r3, [r7, #64]	; 0x40
    5d96:	e00c      	b.n	5db2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    5d98:	683b      	ldr	r3, [r7, #0]
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	2b62      	cmp	r3, #98	; 0x62
    5d9e:	d102      	bne.n	5da6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    5da0:	2302      	movs	r3, #2
    5da2:	643b      	str	r3, [r7, #64]	; 0x40
    5da4:	e005      	b.n	5db2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    5da6:	230a      	movs	r3, #10
    5da8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    5daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5dac:	f023 0310 	bic.w	r3, r3, #16
    5db0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    5db2:	683b      	ldr	r3, [r7, #0]
    5db4:	781b      	ldrb	r3, [r3, #0]
    5db6:	2b58      	cmp	r3, #88	; 0x58
    5db8:	d103      	bne.n	5dc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    5dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5dbc:	f043 0320 	orr.w	r3, r3, #32
    5dc0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    5dc2:	683b      	ldr	r3, [r7, #0]
    5dc4:	781b      	ldrb	r3, [r3, #0]
    5dc6:	2b69      	cmp	r3, #105	; 0x69
    5dc8:	d007      	beq.n	5dda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    5dca:	683b      	ldr	r3, [r7, #0]
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	2b64      	cmp	r3, #100	; 0x64
    5dd0:	d003      	beq.n	5dda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    5dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5dd4:	f023 030c 	bic.w	r3, r3, #12
    5dd8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    5dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5de0:	2b00      	cmp	r3, #0
    5de2:	d003      	beq.n	5dec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    5de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5de6:	f023 0301 	bic.w	r3, r3, #1
    5dea:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    5dec:	683b      	ldr	r3, [r7, #0]
    5dee:	781b      	ldrb	r3, [r3, #0]
    5df0:	2b69      	cmp	r3, #105	; 0x69
    5df2:	d004      	beq.n	5dfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    5df4:	683b      	ldr	r3, [r7, #0]
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	2b64      	cmp	r3, #100	; 0x64
    5dfa:	f040 808d 	bne.w	5f18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    5dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5e04:	2b00      	cmp	r3, #0
    5e06:	d02e      	beq.n	5e66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    5e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5e0a:	3307      	adds	r3, #7
    5e0c:	f023 0307 	bic.w	r3, r3, #7
    5e10:	f103 0208 	add.w	r2, r3, #8
    5e14:	66ba      	str	r2, [r7, #104]	; 0x68
    5e16:	e9d3 3400 	ldrd	r3, r4, [r3]
    5e1a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5e1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    5e22:	2b00      	cmp	r3, #0
    5e24:	f174 0200 	sbcs.w	r2, r4, #0
    5e28:	da02      	bge.n	5e30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    5e2a:	425b      	negs	r3, r3
    5e2c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    5e30:	4619      	mov	r1, r3
    5e32:	4622      	mov	r2, r4
    5e34:	697b      	ldr	r3, [r7, #20]
    5e36:	0fdb      	lsrs	r3, r3, #31
    5e38:	b2d8      	uxtb	r0, r3
    5e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e3c:	f04f 0400 	mov.w	r4, #0
    5e40:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    5e42:	9508      	str	r5, [sp, #32]
    5e44:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    5e46:	9507      	str	r5, [sp, #28]
    5e48:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    5e4a:	9506      	str	r5, [sp, #24]
    5e4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5e50:	9002      	str	r0, [sp, #8]
    5e52:	e9cd 1200 	strd	r1, r2, [sp]
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5e5a:	68b9      	ldr	r1, [r7, #8]
    5e5c:	68f8      	ldr	r0, [r7, #12]
    5e5e:	f7ff faf1 	bl	5444 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    5e62:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    5e64:	e0c8      	b.n	5ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    5e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d01e      	beq.n	5eae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    5e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5e72:	1d1a      	adds	r2, r3, #4
    5e74:	66ba      	str	r2, [r7, #104]	; 0x68
    5e76:	681b      	ldr	r3, [r3, #0]
    5e78:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5e7a:	69fb      	ldr	r3, [r7, #28]
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	bfb8      	it	lt
    5e80:	425b      	neglt	r3, r3
    5e82:	4619      	mov	r1, r3
    5e84:	69fb      	ldr	r3, [r7, #28]
    5e86:	0fdb      	lsrs	r3, r3, #31
    5e88:	b2db      	uxtb	r3, r3
    5e8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5e8c:	9205      	str	r2, [sp, #20]
    5e8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5e90:	9204      	str	r2, [sp, #16]
    5e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5e94:	9203      	str	r2, [sp, #12]
    5e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5e98:	9202      	str	r2, [sp, #8]
    5e9a:	9301      	str	r3, [sp, #4]
    5e9c:	9100      	str	r1, [sp, #0]
    5e9e:	687b      	ldr	r3, [r7, #4]
    5ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5ea2:	68b9      	ldr	r1, [r7, #8]
    5ea4:	68f8      	ldr	r0, [r7, #12]
    5ea6:	f7ff fa65 	bl	5374 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5eaa:	6478      	str	r0, [r7, #68]	; 0x44
          }
    5eac:	e0a4      	b.n	5ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    5eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d005      	beq.n	5ec4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    5eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5eba:	1d1a      	adds	r2, r3, #4
    5ebc:	66ba      	str	r2, [r7, #104]	; 0x68
    5ebe:	681b      	ldr	r3, [r3, #0]
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	e00e      	b.n	5ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    5ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5eca:	2b00      	cmp	r3, #0
    5ecc:	d005      	beq.n	5eda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    5ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5ed0:	1d1a      	adds	r2, r3, #4
    5ed2:	66ba      	str	r2, [r7, #104]	; 0x68
    5ed4:	681b      	ldr	r3, [r3, #0]
    5ed6:	b21b      	sxth	r3, r3
    5ed8:	e003      	b.n	5ee2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    5eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5edc:	1d1a      	adds	r2, r3, #4
    5ede:	66ba      	str	r2, [r7, #104]	; 0x68
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5ee4:	6a3b      	ldr	r3, [r7, #32]
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	bfb8      	it	lt
    5eea:	425b      	neglt	r3, r3
    5eec:	4619      	mov	r1, r3
    5eee:	6a3b      	ldr	r3, [r7, #32]
    5ef0:	0fdb      	lsrs	r3, r3, #31
    5ef2:	b2db      	uxtb	r3, r3
    5ef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5ef6:	9205      	str	r2, [sp, #20]
    5ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5efa:	9204      	str	r2, [sp, #16]
    5efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5efe:	9203      	str	r2, [sp, #12]
    5f00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5f02:	9202      	str	r2, [sp, #8]
    5f04:	9301      	str	r3, [sp, #4]
    5f06:	9100      	str	r1, [sp, #0]
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5f0c:	68b9      	ldr	r1, [r7, #8]
    5f0e:	68f8      	ldr	r0, [r7, #12]
    5f10:	f7ff fa30 	bl	5374 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5f14:	6478      	str	r0, [r7, #68]	; 0x44
          }
    5f16:	e06f      	b.n	5ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    5f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d020      	beq.n	5f64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    5f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5f24:	3307      	adds	r3, #7
    5f26:	f023 0307 	bic.w	r3, r3, #7
    5f2a:	f103 0208 	add.w	r2, r3, #8
    5f2e:	66ba      	str	r2, [r7, #104]	; 0x68
    5f30:	e9d3 3400 	ldrd	r3, r4, [r3]
    5f34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5f36:	4611      	mov	r1, r2
    5f38:	f04f 0200 	mov.w	r2, #0
    5f3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    5f3e:	9008      	str	r0, [sp, #32]
    5f40:	6d38      	ldr	r0, [r7, #80]	; 0x50
    5f42:	9007      	str	r0, [sp, #28]
    5f44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    5f46:	9006      	str	r0, [sp, #24]
    5f48:	e9cd 1204 	strd	r1, r2, [sp, #16]
    5f4c:	2200      	movs	r2, #0
    5f4e:	9202      	str	r2, [sp, #8]
    5f50:	e9cd 3400 	strd	r3, r4, [sp]
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5f58:	68b9      	ldr	r1, [r7, #8]
    5f5a:	68f8      	ldr	r0, [r7, #12]
    5f5c:	f7ff fa72 	bl	5444 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    5f60:	6478      	str	r0, [r7, #68]	; 0x44
    5f62:	e049      	b.n	5ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    5f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d016      	beq.n	5f9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    5f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5f70:	1d1a      	adds	r2, r3, #4
    5f72:	66ba      	str	r2, [r7, #104]	; 0x68
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5f78:	9205      	str	r2, [sp, #20]
    5f7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5f7c:	9204      	str	r2, [sp, #16]
    5f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5f80:	9203      	str	r2, [sp, #12]
    5f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5f84:	9202      	str	r2, [sp, #8]
    5f86:	2200      	movs	r2, #0
    5f88:	9201      	str	r2, [sp, #4]
    5f8a:	9300      	str	r3, [sp, #0]
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5f90:	68b9      	ldr	r1, [r7, #8]
    5f92:	68f8      	ldr	r0, [r7, #12]
    5f94:	f7ff f9ee 	bl	5374 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5f98:	6478      	str	r0, [r7, #68]	; 0x44
    5f9a:	e02d      	b.n	5ff8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    5f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d005      	beq.n	5fb2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    5fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5fa8:	1d1a      	adds	r2, r3, #4
    5faa:	66ba      	str	r2, [r7, #104]	; 0x68
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	b2db      	uxtb	r3, r3
    5fb0:	e00e      	b.n	5fd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    5fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5fb8:	2b00      	cmp	r3, #0
    5fba:	d005      	beq.n	5fc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    5fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5fbe:	1d1a      	adds	r2, r3, #4
    5fc0:	66ba      	str	r2, [r7, #104]	; 0x68
    5fc2:	681b      	ldr	r3, [r3, #0]
    5fc4:	b29b      	uxth	r3, r3
    5fc6:	e003      	b.n	5fd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    5fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5fca:	1d1a      	adds	r2, r3, #4
    5fcc:	66ba      	str	r2, [r7, #104]	; 0x68
    5fce:	681b      	ldr	r3, [r3, #0]
    5fd0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    5fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5fd4:	9305      	str	r3, [sp, #20]
    5fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5fd8:	9304      	str	r3, [sp, #16]
    5fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5fdc:	9303      	str	r3, [sp, #12]
    5fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5fe0:	9302      	str	r3, [sp, #8]
    5fe2:	2300      	movs	r3, #0
    5fe4:	9301      	str	r3, [sp, #4]
    5fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fe8:	9300      	str	r3, [sp, #0]
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5fee:	68b9      	ldr	r1, [r7, #8]
    5ff0:	68f8      	ldr	r0, [r7, #12]
    5ff2:	f7ff f9bf 	bl	5374 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5ff6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    5ff8:	683b      	ldr	r3, [r7, #0]
    5ffa:	3301      	adds	r3, #1
    5ffc:	603b      	str	r3, [r7, #0]
        break;
    5ffe:	e109      	b.n	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    6000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6002:	3307      	adds	r3, #7
    6004:	f023 0307 	bic.w	r3, r3, #7
    6008:	f103 0208 	add.w	r2, r3, #8
    600c:	66ba      	str	r2, [r7, #104]	; 0x68
    600e:	ed93 7b00 	vldr	d7, [r3]
    6012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6014:	9302      	str	r3, [sp, #8]
    6016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6018:	9301      	str	r3, [sp, #4]
    601a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    601c:	9300      	str	r3, [sp, #0]
    601e:	eeb0 0a47 	vmov.f32	s0, s14
    6022:	eef0 0a67 	vmov.f32	s1, s15
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    602a:	68b9      	ldr	r1, [r7, #8]
    602c:	68f8      	ldr	r0, [r7, #12]
    602e:	f7ff fa79 	bl	5524 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    6032:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    6034:	683b      	ldr	r3, [r7, #0]
    6036:	3301      	adds	r3, #1
    6038:	603b      	str	r3, [r7, #0]
        break;
    603a:	e0eb      	b.n	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    603c:	2301      	movs	r3, #1
    603e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    6040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6042:	f003 0302 	and.w	r3, r3, #2
    6046:	2b00      	cmp	r3, #0
    6048:	d113      	bne.n	6072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    604a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    604c:	1c5a      	adds	r2, r3, #1
    604e:	63fa      	str	r2, [r7, #60]	; 0x3c
    6050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6052:	429a      	cmp	r2, r3
    6054:	bf8c      	ite	hi
    6056:	2301      	movhi	r3, #1
    6058:	2300      	movls	r3, #0
    605a:	b2db      	uxtb	r3, r3
    605c:	2b00      	cmp	r3, #0
    605e:	d008      	beq.n	6072 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    6060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6062:	1c53      	adds	r3, r2, #1
    6064:	647b      	str	r3, [r7, #68]	; 0x44
    6066:	68fc      	ldr	r4, [r7, #12]
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	68b9      	ldr	r1, [r7, #8]
    606c:	2020      	movs	r0, #32
    606e:	47a0      	blx	r4
          while (l++ < width) {
    6070:	e7eb      	b.n	604a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    6072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6074:	1d1a      	adds	r2, r3, #4
    6076:	66ba      	str	r2, [r7, #104]	; 0x68
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	b2d8      	uxtb	r0, r3
    607c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    607e:	1c53      	adds	r3, r2, #1
    6080:	647b      	str	r3, [r7, #68]	; 0x44
    6082:	68fc      	ldr	r4, [r7, #12]
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	68b9      	ldr	r1, [r7, #8]
    6088:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    608a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    608c:	f003 0302 	and.w	r3, r3, #2
    6090:	2b00      	cmp	r3, #0
    6092:	d013      	beq.n	60bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    6094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6096:	1c5a      	adds	r2, r3, #1
    6098:	63fa      	str	r2, [r7, #60]	; 0x3c
    609a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    609c:	429a      	cmp	r2, r3
    609e:	bf8c      	ite	hi
    60a0:	2301      	movhi	r3, #1
    60a2:	2300      	movls	r3, #0
    60a4:	b2db      	uxtb	r3, r3
    60a6:	2b00      	cmp	r3, #0
    60a8:	d008      	beq.n	60bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    60aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    60ac:	1c53      	adds	r3, r2, #1
    60ae:	647b      	str	r3, [r7, #68]	; 0x44
    60b0:	68fc      	ldr	r4, [r7, #12]
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	68b9      	ldr	r1, [r7, #8]
    60b6:	2020      	movs	r0, #32
    60b8:	47a0      	blx	r4
          while (l++ < width) {
    60ba:	e7eb      	b.n	6094 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	3301      	adds	r3, #1
    60c0:	603b      	str	r3, [r7, #0]
        break;
    60c2:	e0a7      	b.n	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    60c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    60c6:	1d1a      	adds	r2, r3, #4
    60c8:	66ba      	str	r2, [r7, #104]	; 0x68
    60ca:	681b      	ldr	r3, [r3, #0]
    60cc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    60ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    60d0:	f7fe ffe0 	bl	5094 <_strlen(char const*)>
    60d4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    60d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    60d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    60dc:	2b00      	cmp	r3, #0
    60de:	d007      	beq.n	60f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    60e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    60e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    60e4:	429a      	cmp	r2, r3
    60e6:	d201      	bcs.n	60ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    60e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    60ea:	e000      	b.n	60ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    60ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    60ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    60f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    60f2:	f003 0302 	and.w	r3, r3, #2
    60f6:	2b00      	cmp	r3, #0
    60f8:	d113      	bne.n	6122 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    60fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    60fc:	1c5a      	adds	r2, r3, #1
    60fe:	637a      	str	r2, [r7, #52]	; 0x34
    6100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6102:	429a      	cmp	r2, r3
    6104:	bf8c      	ite	hi
    6106:	2301      	movhi	r3, #1
    6108:	2300      	movls	r3, #0
    610a:	b2db      	uxtb	r3, r3
    610c:	2b00      	cmp	r3, #0
    610e:	d008      	beq.n	6122 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    6110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6112:	1c53      	adds	r3, r2, #1
    6114:	647b      	str	r3, [r7, #68]	; 0x44
    6116:	68fc      	ldr	r4, [r7, #12]
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	68b9      	ldr	r1, [r7, #8]
    611c:	2020      	movs	r0, #32
    611e:	47a0      	blx	r4
          while (l++ < width) {
    6120:	e7eb      	b.n	60fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    6122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6124:	781b      	ldrb	r3, [r3, #0]
    6126:	2b00      	cmp	r3, #0
    6128:	d00b      	beq.n	6142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    612a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    612c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6130:	2b00      	cmp	r3, #0
    6132:	d004      	beq.n	613e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    6134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6136:	1e5a      	subs	r2, r3, #1
    6138:	64fa      	str	r2, [r7, #76]	; 0x4c
    613a:	2b00      	cmp	r3, #0
    613c:	d001      	beq.n	6142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    613e:	2301      	movs	r3, #1
    6140:	e000      	b.n	6144 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    6142:	2300      	movs	r3, #0
    6144:	2b00      	cmp	r3, #0
    6146:	d00b      	beq.n	6160 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    6148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    614a:	1c5a      	adds	r2, r3, #1
    614c:	63ba      	str	r2, [r7, #56]	; 0x38
    614e:	7818      	ldrb	r0, [r3, #0]
    6150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6152:	1c53      	adds	r3, r2, #1
    6154:	647b      	str	r3, [r7, #68]	; 0x44
    6156:	68fc      	ldr	r4, [r7, #12]
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	68b9      	ldr	r1, [r7, #8]
    615c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    615e:	e7e0      	b.n	6122 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    6160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6162:	f003 0302 	and.w	r3, r3, #2
    6166:	2b00      	cmp	r3, #0
    6168:	d013      	beq.n	6192 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    616c:	1c5a      	adds	r2, r3, #1
    616e:	637a      	str	r2, [r7, #52]	; 0x34
    6170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6172:	429a      	cmp	r2, r3
    6174:	bf8c      	ite	hi
    6176:	2301      	movhi	r3, #1
    6178:	2300      	movls	r3, #0
    617a:	b2db      	uxtb	r3, r3
    617c:	2b00      	cmp	r3, #0
    617e:	d008      	beq.n	6192 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    6180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6182:	1c53      	adds	r3, r2, #1
    6184:	647b      	str	r3, [r7, #68]	; 0x44
    6186:	68fc      	ldr	r4, [r7, #12]
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	68b9      	ldr	r1, [r7, #8]
    618c:	2020      	movs	r0, #32
    618e:	47a0      	blx	r4
          while (l++ < width) {
    6190:	e7eb      	b.n	616a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    6192:	683b      	ldr	r3, [r7, #0]
    6194:	3301      	adds	r3, #1
    6196:	603b      	str	r3, [r7, #0]
        break;
    6198:	e03c      	b.n	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    619a:	2308      	movs	r3, #8
    619c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    619e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61a0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    61a4:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    61a6:	2300      	movs	r3, #0
    61a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    61ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    61ae:	1d1a      	adds	r2, r3, #4
    61b0:	66ba      	str	r2, [r7, #104]	; 0x68
    61b2:	681b      	ldr	r3, [r3, #0]
    61b4:	461a      	mov	r2, r3
    61b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    61b8:	9305      	str	r3, [sp, #20]
    61ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    61bc:	9304      	str	r3, [sp, #16]
    61be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    61c0:	9303      	str	r3, [sp, #12]
    61c2:	2310      	movs	r3, #16
    61c4:	9302      	str	r3, [sp, #8]
    61c6:	2300      	movs	r3, #0
    61c8:	9301      	str	r3, [sp, #4]
    61ca:	9200      	str	r2, [sp, #0]
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    61d0:	68b9      	ldr	r1, [r7, #8]
    61d2:	68f8      	ldr	r0, [r7, #12]
    61d4:	f7ff f8ce 	bl	5374 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    61d8:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    61da:	683b      	ldr	r3, [r7, #0]
    61dc:	3301      	adds	r3, #1
    61de:	603b      	str	r3, [r7, #0]
        break;
    61e0:	e018      	b.n	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    61e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    61e4:	1c53      	adds	r3, r2, #1
    61e6:	647b      	str	r3, [r7, #68]	; 0x44
    61e8:	68fc      	ldr	r4, [r7, #12]
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	68b9      	ldr	r1, [r7, #8]
    61ee:	2025      	movs	r0, #37	; 0x25
    61f0:	47a0      	blx	r4
        format++;
    61f2:	683b      	ldr	r3, [r7, #0]
    61f4:	3301      	adds	r3, #1
    61f6:	603b      	str	r3, [r7, #0]
        break;
    61f8:	e00c      	b.n	6214 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    61fa:	683b      	ldr	r3, [r7, #0]
    61fc:	7818      	ldrb	r0, [r3, #0]
    61fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6200:	1c53      	adds	r3, r2, #1
    6202:	647b      	str	r3, [r7, #68]	; 0x44
    6204:	68fc      	ldr	r4, [r7, #12]
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	68b9      	ldr	r1, [r7, #8]
    620a:	47a0      	blx	r4
        format++;
    620c:	683b      	ldr	r3, [r7, #0]
    620e:	3301      	adds	r3, #1
    6210:	603b      	str	r3, [r7, #0]
        break;
    6212:	bf00      	nop
  while (*format)
    6214:	f7ff bbb6 	b.w	5984 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    6218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	429a      	cmp	r2, r3
    621e:	d302      	bcc.n	6226 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	1e5a      	subs	r2, r3, #1
    6224:	e000      	b.n	6228 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    6226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6228:	68fc      	ldr	r4, [r7, #12]
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	68b9      	ldr	r1, [r7, #8]
    622e:	2000      	movs	r0, #0
    6230:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    6232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    6234:	4618      	mov	r0, r3
    6236:	3758      	adds	r7, #88	; 0x58
    6238:	46bd      	mov	sp, r7
    623a:	bdb0      	pop	{r4, r5, r7, pc}

0000623c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    623c:	b40f      	push	{r0, r1, r2, r3}
    623e:	b580      	push	{r7, lr}
    6240:	b0c4      	sub	sp, #272	; 0x110
    6242:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    6244:	f507 738a 	add.w	r3, r7, #276	; 0x114
    6248:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    624c:	4639      	mov	r1, r7
    624e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    6252:	9300      	str	r3, [sp, #0]
    6254:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    6258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    625c:	4807      	ldr	r0, [pc, #28]	; (627c <printf+0x40>)
    625e:	f7ff fb83 	bl	5968 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    6262:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    6266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    626a:	4618      	mov	r0, r3
    626c:	f507 7784 	add.w	r7, r7, #264	; 0x108
    6270:	46bd      	mov	sp, r7
    6272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    6276:	b004      	add	sp, #16
    6278:	4770      	bx	lr
    627a:	bf00      	nop
    627c:	00005009 	.word	0x00005009

00006280 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    6280:	b480      	push	{r7}
    6282:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    6284:	bf00      	nop
    6286:	46bd      	mov	sp, r7
    6288:	f85d 7b04 	ldr.w	r7, [sp], #4
    628c:	4770      	bx	lr

0000628e <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    628e:	b580      	push	{r7, lr}
    6290:	b082      	sub	sp, #8
    6292:	af00      	add	r7, sp, #0
    6294:	6078      	str	r0, [r7, #4]
    6296:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    6298:	6839      	ldr	r1, [r7, #0]
    629a:	6878      	ldr	r0, [r7, #4]
    629c:	f000 f806 	bl	62ac <_trace_write_semihosting_stdout(char const*, unsigned int)>
    62a0:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    62a2:	4618      	mov	r0, r3
    62a4:	3708      	adds	r7, #8
    62a6:	46bd      	mov	sp, r7
    62a8:	bd80      	pop	{r7, pc}
    62aa:	Address 0x00000000000062aa is out of bounds.


000062ac <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    62ac:	b5b0      	push	{r4, r5, r7, lr}
    62ae:	b08c      	sub	sp, #48	; 0x30
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
    62b4:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    62b6:	4b2d      	ldr	r3, [pc, #180]	; (636c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    62b8:	681b      	ldr	r3, [r3, #0]
    62ba:	f003 0301 	and.w	r3, r3, #1
    62be:	2b00      	cmp	r3, #0
    62c0:	bf0c      	ite	eq
    62c2:	2301      	moveq	r3, #1
    62c4:	2300      	movne	r3, #0
    62c6:	b2db      	uxtb	r3, r3
    62c8:	2b00      	cmp	r3, #0
    62ca:	d001      	beq.n	62d0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    62cc:	683b      	ldr	r3, [r7, #0]
    62ce:	e049      	b.n	6364 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    62d0:	4b27      	ldr	r3, [pc, #156]	; (6370 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	2b00      	cmp	r3, #0
    62d6:	d11d      	bne.n	6314 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    62d8:	4b26      	ldr	r3, [pc, #152]	; (6374 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    62da:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    62dc:	2304      	movs	r3, #4
    62de:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    62e0:	2303      	movs	r3, #3
    62e2:	613b      	str	r3, [r7, #16]
    62e4:	2301      	movs	r3, #1
    62e6:	62bb      	str	r3, [r7, #40]	; 0x28
    62e8:	f107 0308 	add.w	r3, r7, #8
    62ec:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    62ee:	6abc      	ldr	r4, [r7, #40]	; 0x28
    62f0:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    62f2:	4620      	mov	r0, r4
    62f4:	4629      	mov	r1, r5
    62f6:	beab      	bkpt	0x00ab
    62f8:	4604      	mov	r4, r0
    62fa:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    62fc:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    62fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    6300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6306:	d102      	bne.n	630e <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    6308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    630c:	e02a      	b.n	6364 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    630e:	4a18      	ldr	r2, [pc, #96]	; (6370 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    6310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6312:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    6314:	4b16      	ldr	r3, [pc, #88]	; (6370 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    631e:	683b      	ldr	r3, [r7, #0]
    6320:	613b      	str	r3, [r7, #16]
    6322:	2305      	movs	r3, #5
    6324:	61fb      	str	r3, [r7, #28]
    6326:	f107 0308 	add.w	r3, r7, #8
    632a:	61bb      	str	r3, [r7, #24]
  );
    632c:	69fc      	ldr	r4, [r7, #28]
    632e:	69bd      	ldr	r5, [r7, #24]
    6330:	4620      	mov	r0, r4
    6332:	4629      	mov	r1, r5
    6334:	beab      	bkpt	0x00ab
    6336:	4604      	mov	r4, r0
    6338:	617c      	str	r4, [r7, #20]
  return value;
    633a:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    633c:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6344:	d102      	bne.n	634c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    6346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    634a:	e00b      	b.n	6364 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    634c:	683b      	ldr	r3, [r7, #0]
    634e:	461a      	mov	r2, r3
    6350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6352:	4293      	cmp	r3, r2
    6354:	d102      	bne.n	635c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    6356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    635a:	e003      	b.n	6364 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    635c:	683b      	ldr	r3, [r7, #0]
    635e:	461a      	mov	r2, r3
    6360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6362:	1ad3      	subs	r3, r2, r3
}
    6364:	4618      	mov	r0, r3
    6366:	3730      	adds	r7, #48	; 0x30
    6368:	46bd      	mov	sp, r7
    636a:	bdb0      	pop	{r4, r5, r7, pc}
    636c:	e000edf0 	.word	0xe000edf0
    6370:	100003b4 	.word	0x100003b4
    6374:	0000a160 	.word	0x0000a160

00006378 <NVIC_EnableIRQ>:
{
    6378:	b480      	push	{r7}
    637a:	b083      	sub	sp, #12
    637c:	af00      	add	r7, sp, #0
    637e:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	f003 021f 	and.w	r2, r3, #31
    6386:	4907      	ldr	r1, [pc, #28]	; (63a4 <NVIC_EnableIRQ+0x2c>)
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	095b      	lsrs	r3, r3, #5
    638c:	2001      	movs	r0, #1
    638e:	fa00 f202 	lsl.w	r2, r0, r2
    6392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6396:	bf00      	nop
    6398:	370c      	adds	r7, #12
    639a:	46bd      	mov	sp, r7
    639c:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a0:	4770      	bx	lr
    63a2:	bf00      	nop
    63a4:	e000e100 	.word	0xe000e100

000063a8 <NVIC_DisableIRQ>:
{
    63a8:	b480      	push	{r7}
    63aa:	b083      	sub	sp, #12
    63ac:	af00      	add	r7, sp, #0
    63ae:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    63b0:	687b      	ldr	r3, [r7, #4]
    63b2:	f003 021f 	and.w	r2, r3, #31
    63b6:	4907      	ldr	r1, [pc, #28]	; (63d4 <NVIC_DisableIRQ+0x2c>)
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	095b      	lsrs	r3, r3, #5
    63bc:	2001      	movs	r0, #1
    63be:	fa00 f202 	lsl.w	r2, r0, r2
    63c2:	3320      	adds	r3, #32
    63c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63c8:	bf00      	nop
    63ca:	370c      	adds	r7, #12
    63cc:	46bd      	mov	sp, r7
    63ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d2:	4770      	bx	lr
    63d4:	e000e100 	.word	0xe000e100

000063d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    63d8:	b480      	push	{r7}
    63da:	b083      	sub	sp, #12
    63dc:	af00      	add	r7, sp, #0
    63de:	6078      	str	r0, [r7, #4]
    63e0:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	2b00      	cmp	r3, #0
    63e6:	da0b      	bge.n	6400 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    63e8:	683b      	ldr	r3, [r7, #0]
    63ea:	b2da      	uxtb	r2, r3
    63ec:	490d      	ldr	r1, [pc, #52]	; (6424 <NVIC_SetPriority+0x4c>)
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	f003 030f 	and.w	r3, r3, #15
    63f4:	3b04      	subs	r3, #4
    63f6:	0152      	lsls	r2, r2, #5
    63f8:	b2d2      	uxtb	r2, r2
    63fa:	440b      	add	r3, r1
    63fc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    63fe:	e00a      	b.n	6416 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6400:	683b      	ldr	r3, [r7, #0]
    6402:	b2db      	uxtb	r3, r3
    6404:	4a08      	ldr	r2, [pc, #32]	; (6428 <NVIC_SetPriority+0x50>)
    6406:	6879      	ldr	r1, [r7, #4]
    6408:	4608      	mov	r0, r1
    640a:	015b      	lsls	r3, r3, #5
    640c:	b2d9      	uxtb	r1, r3
    640e:	1813      	adds	r3, r2, r0
    6410:	460a      	mov	r2, r1
    6412:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    6416:	bf00      	nop
    6418:	370c      	adds	r7, #12
    641a:	46bd      	mov	sp, r7
    641c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6420:	4770      	bx	lr
    6422:	bf00      	nop
    6424:	e000ed00 	.word	0xe000ed00
    6428:	e000e100 	.word	0xe000e100

0000642c <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    642c:	b480      	push	{r7}
    642e:	b083      	sub	sp, #12
    6430:	af00      	add	r7, sp, #0
    6432:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    6434:	4b0c      	ldr	r3, [pc, #48]	; (6468 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	68da      	ldr	r2, [r3, #12]
    643a:	4b0b      	ldr	r3, [pc, #44]	; (6468 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    643c:	681b      	ldr	r3, [r3, #0]
    643e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    6442:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    6444:	4b09      	ldr	r3, [pc, #36]	; (646c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	2200      	movs	r2, #0
    644a:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    644c:	4b07      	ldr	r3, [pc, #28]	; (646c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    644e:	681b      	ldr	r3, [r3, #0]
    6450:	681a      	ldr	r2, [r3, #0]
    6452:	4b06      	ldr	r3, [pc, #24]	; (646c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    6454:	681b      	ldr	r3, [r3, #0]
    6456:	f042 0201 	orr.w	r2, r2, #1
    645a:	601a      	str	r2, [r3, #0]
  }
    645c:	bf00      	nop
    645e:	370c      	adds	r7, #12
    6460:	46bd      	mov	sp, r7
    6462:	f85d 7b04 	ldr.w	r7, [sp], #4
    6466:	4770      	bx	lr
    6468:	1000006c 	.word	0x1000006c
    646c:	10000068 	.word	0x10000068

00006470 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    6470:	b480      	push	{r7}
    6472:	b083      	sub	sp, #12
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    6478:	4b04      	ldr	r3, [pc, #16]	; (648c <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    647a:	681b      	ldr	r3, [r3, #0]
    647c:	685b      	ldr	r3, [r3, #4]
  }
    647e:	4618      	mov	r0, r3
    6480:	370c      	adds	r7, #12
    6482:	46bd      	mov	sp, r7
    6484:	f85d 7b04 	ldr.w	r7, [sp], #4
    6488:	4770      	bx	lr
    648a:	bf00      	nop
    648c:	10000068 	.word	0x10000068

00006490 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    6490:	b480      	push	{r7}
    6492:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    6494:	f8df 001c 	ldr.w	r0, [pc, #28]	; 64b4 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    6498:	6801      	ldr	r1, [r0, #0]
    649a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    649e:	6001      	str	r1, [r0, #0]
    64a0:	f3bf 8f4f 	dsb	sy
    64a4:	f3bf 8f6f 	isb	sy
  }
}
    64a8:	bf00      	nop
    64aa:	46bd      	mov	sp, r7
    64ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    64b0:	4770      	bx	lr
    64b2:	0000      	.short	0x0000
    64b4:	e000ed88 	.word	0xe000ed88

000064b8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    64b8:	b580      	push	{r7, lr}
    64ba:	b086      	sub	sp, #24
    64bc:	af00      	add	r7, sp, #0
    64be:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    64c0:	6878      	ldr	r0, [r7, #4]
    64c2:	f000 f807 	bl	64d4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    64c6:	eef0 7a40 	vmov.f32	s15, s0
	}
    64ca:	eeb0 0a67 	vmov.f32	s0, s15
    64ce:	3718      	adds	r7, #24
    64d0:	46bd      	mov	sp, r7
    64d2:	bd80      	pop	{r7, pc}

000064d4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    64d4:	b480      	push	{r7}
    64d6:	b085      	sub	sp, #20
    64d8:	af00      	add	r7, sp, #0
    64da:	60f8      	str	r0, [r7, #12]
    64dc:	7239      	strb	r1, [r7, #8]
    64de:	713a      	strb	r2, [r7, #4]
    64e0:	703b      	strb	r3, [r7, #0]
			return value;
    64e2:	68fb      	ldr	r3, [r7, #12]
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	ee07 3a90 	vmov	s15, r3
		}
    64ea:	eeb0 0a67 	vmov.f32	s0, s15
    64ee:	3714      	adds	r7, #20
    64f0:	46bd      	mov	sp, r7
    64f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    64f6:	4770      	bx	lr

000064f8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    64f8:	b580      	push	{r7, lr}
    64fa:	ed2d 8b02 	vpush	{d8}
    64fe:	b082      	sub	sp, #8
    6500:	af00      	add	r7, sp, #0
    6502:	6078      	str	r0, [r7, #4]
    6504:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	ed93 8a00 	vldr	s16, [r3]
    650c:	683b      	ldr	r3, [r7, #0]
    650e:	4618      	mov	r0, r3
    6510:	f7ff ffd2 	bl	64b8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    6514:	eef0 7a40 	vmov.f32	s15, s0
    6518:	eeb4 8ae7 	vcmpe.f32	s16, s15
    651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6520:	bf94      	ite	ls
    6522:	2301      	movls	r3, #1
    6524:	2300      	movhi	r3, #0
    6526:	b2db      	uxtb	r3, r3
		}
    6528:	4618      	mov	r0, r3
    652a:	3708      	adds	r7, #8
    652c:	46bd      	mov	sp, r7
    652e:	ecbd 8b02 	vpop	{d8}
    6532:	bd80      	pop	{r7, pc}

00006534 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    6534:	b480      	push	{r7}
    6536:	b083      	sub	sp, #12
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    653c:	4a04      	ldr	r2, [pc, #16]	; (6550 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	6013      	str	r3, [r2, #0]
}
    6542:	bf00      	nop
    6544:	370c      	adds	r7, #12
    6546:	46bd      	mov	sp, r7
    6548:	f85d 7b04 	ldr.w	r7, [sp], #4
    654c:	4770      	bx	lr
    654e:	bf00      	nop
    6550:	10000000 	.word	0x10000000

00006554 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    6554:	b480      	push	{r7}
    6556:	b083      	sub	sp, #12
    6558:	af00      	add	r7, sp, #0
    655a:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	3310      	adds	r3, #16
  }
    6560:	4618      	mov	r0, r3
    6562:	370c      	adds	r7, #12
    6564:	46bd      	mov	sp, r7
    6566:	f85d 7b04 	ldr.w	r7, [sp], #4
    656a:	4770      	bx	lr

0000656c <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    656c:	b580      	push	{r7, lr}
    656e:	b082      	sub	sp, #8
    6570:	af00      	add	r7, sp, #0
    6572:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    6574:	6878      	ldr	r0, [r7, #4]
    6576:	f7ff ffed 	bl	6554 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    657a:	4603      	mov	r3, r0
    657c:	009b      	lsls	r3, r3, #2
    657e:	4a03      	ldr	r2, [pc, #12]	; (658c <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    6580:	4413      	add	r3, r2
  }
    6582:	4618      	mov	r0, r3
    6584:	3708      	adds	r7, #8
    6586:	46bd      	mov	sp, r7
    6588:	bd80      	pop	{r7, pc}
    658a:	bf00      	nop
    658c:	10000128 	.word	0x10000128

00006590 <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    6590:	b580      	push	{r7, lr}
    6592:	b082      	sub	sp, #8
    6594:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    6596:	4b09      	ldr	r3, [pc, #36]	; (65bc <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    6598:	681b      	ldr	r3, [r3, #0]
    659a:	685b      	ldr	r3, [r3, #4]
    659c:	b2db      	uxtb	r3, r3
    659e:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    65a0:	4a07      	ldr	r2, [pc, #28]	; (65c0 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    65a6:	4a07      	ldr	r2, [pc, #28]	; (65c4 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65ae:	603b      	str	r3, [r7, #0]
    isr();
    65b0:	683b      	ldr	r3, [r7, #0]
    65b2:	4798      	blx	r3
  }
    65b4:	bf00      	nop
    65b6:	3708      	adds	r7, #8
    65b8:	46bd      	mov	sp, r7
    65ba:	bd80      	pop	{r7, pc}
    65bc:	10000070 	.word	0x10000070
    65c0:	10000048 	.word	0x10000048
    65c4:	10000128 	.word	0x10000128

000065c8 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    65c8:	b084      	sub	sp, #16
    65ca:	b590      	push	{r4, r7, lr}
    65cc:	b085      	sub	sp, #20
    65ce:	af00      	add	r7, sp, #0
    65d0:	6078      	str	r0, [r7, #4]
    65d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
    65d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    65da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65dc:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    65de:	6abc      	ldr	r4, [r7, #40]	; 0x28
    65e0:	68f8      	ldr	r0, [r7, #12]
    65e2:	f7ff ffc3 	bl	656c <sjsu::cortex::InterruptController::GetVector(int)>
    65e6:	4603      	mov	r3, r0
    65e8:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    65ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    65ee:	2b00      	cmp	r3, #0
    65f0:	d005      	beq.n	65fe <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    65f2:	68fb      	ldr	r3, [r7, #12]
    65f4:	2b00      	cmp	r3, #0
    65f6:	db02      	blt.n	65fe <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    65f8:	68f8      	ldr	r0, [r7, #12]
    65fa:	f7ff febd 	bl	6378 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    65fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6600:	2b00      	cmp	r3, #0
    6602:	db04      	blt.n	660e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    6604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6606:	4619      	mov	r1, r3
    6608:	68f8      	ldr	r0, [r7, #12]
    660a:	f7ff fee5 	bl	63d8 <NVIC_SetPriority>
    }
  }
    660e:	bf00      	nop
    6610:	3714      	adds	r7, #20
    6612:	46bd      	mov	sp, r7
    6614:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    6618:	b004      	add	sp, #16
    661a:	4770      	bx	lr

0000661c <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    661c:	b580      	push	{r7, lr}
    661e:	b082      	sub	sp, #8
    6620:	af00      	add	r7, sp, #0
    6622:	6078      	str	r0, [r7, #4]
    6624:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    6626:	6838      	ldr	r0, [r7, #0]
    6628:	f7ff febe 	bl	63a8 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    662c:	6838      	ldr	r0, [r7, #0]
    662e:	f7ff ff9d 	bl	656c <sjsu::cortex::InterruptController::GetVector(int)>
    6632:	4602      	mov	r2, r0
    6634:	4b02      	ldr	r3, [pc, #8]	; (6640 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    6636:	6013      	str	r3, [r2, #0]
  }
    6638:	bf00      	nop
    663a:	3708      	adds	r7, #8
    663c:	46bd      	mov	sp, r7
    663e:	bd80      	pop	{r7, pc}
    6640:	00001d25 	.word	0x00001d25

00006644 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    6644:	b580      	push	{r7, lr}
    6646:	b082      	sub	sp, #8
    6648:	af00      	add	r7, sp, #0
    664a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	4618      	mov	r0, r3
    6650:	f000 f804 	bl	665c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    6654:	6878      	ldr	r0, [r7, #4]
    6656:	3708      	adds	r7, #8
    6658:	46bd      	mov	sp, r7
    665a:	bd80      	pop	{r7, pc}

0000665c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    665c:	b580      	push	{r7, lr}
    665e:	b082      	sub	sp, #8
    6660:	af00      	add	r7, sp, #0
    6662:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    6664:	4903      	ldr	r1, [pc, #12]	; (6674 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    6666:	6878      	ldr	r0, [r7, #4]
    6668:	f000 f806 	bl	6678 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    666c:	6878      	ldr	r0, [r7, #4]
    666e:	3708      	adds	r7, #8
    6670:	46bd      	mov	sp, r7
    6672:	bd80      	pop	{r7, pc}
    6674:	0000a6d8 	.word	0x0000a6d8

00006678 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    6678:	b490      	push	{r4, r7}
    667a:	b082      	sub	sp, #8
    667c:	af00      	add	r7, sp, #0
    667e:	6078      	str	r0, [r7, #4]
    6680:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    6682:	683b      	ldr	r3, [r7, #0]
    6684:	e9d3 3400 	ldrd	r3, r4, [r3]
    6688:	687a      	ldr	r2, [r7, #4]
    668a:	e9c2 3400 	strd	r3, r4, [r2]
    668e:	687b      	ldr	r3, [r7, #4]
    6690:	4618      	mov	r0, r3
    6692:	3708      	adds	r7, #8
    6694:	46bd      	mov	sp, r7
    6696:	bc90      	pop	{r4, r7}
    6698:	4770      	bx	lr

0000669a <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    669a:	b580      	push	{r7, lr}
    669c:	b082      	sub	sp, #8
    669e:	af00      	add	r7, sp, #0
    66a0:	6078      	str	r0, [r7, #4]
    66a2:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	6839      	ldr	r1, [r7, #0]
    66a8:	4618      	mov	r0, r3
    66aa:	f000 f811 	bl	66d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    66ae:	6878      	ldr	r0, [r7, #4]
    66b0:	3708      	adds	r7, #8
    66b2:	46bd      	mov	sp, r7
    66b4:	bd80      	pop	{r7, pc}

000066b6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    66b6:	b490      	push	{r4, r7}
    66b8:	b082      	sub	sp, #8
    66ba:	af00      	add	r7, sp, #0
    66bc:	6078      	str	r0, [r7, #4]
	{ return __r; }
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	e9d3 3400 	ldrd	r3, r4, [r3]
    66c4:	4618      	mov	r0, r3
    66c6:	4621      	mov	r1, r4
    66c8:	3708      	adds	r7, #8
    66ca:	46bd      	mov	sp, r7
    66cc:	bc90      	pop	{r4, r7}
    66ce:	4770      	bx	lr

000066d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    66d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66d2:	b085      	sub	sp, #20
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    66da:	6838      	ldr	r0, [r7, #0]
    66dc:	f7ff ffeb 	bl	66b6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    66e0:	4605      	mov	r5, r0
    66e2:	460e      	mov	r6, r1
    66e4:	462b      	mov	r3, r5
    66e6:	4634      	mov	r4, r6
    66e8:	f04f 0100 	mov.w	r1, #0
    66ec:	f04f 0200 	mov.w	r2, #0
    66f0:	0162      	lsls	r2, r4, #5
    66f2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    66f6:	0159      	lsls	r1, r3, #5
    66f8:	460b      	mov	r3, r1
    66fa:	4614      	mov	r4, r2
    66fc:	1b5b      	subs	r3, r3, r5
    66fe:	eb64 0406 	sbc.w	r4, r4, r6
    6702:	f04f 0100 	mov.w	r1, #0
    6706:	f04f 0200 	mov.w	r2, #0
    670a:	00a2      	lsls	r2, r4, #2
    670c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    6710:	0099      	lsls	r1, r3, #2
    6712:	460b      	mov	r3, r1
    6714:	4614      	mov	r4, r2
    6716:	195b      	adds	r3, r3, r5
    6718:	eb44 0406 	adc.w	r4, r4, r6
    671c:	f04f 0100 	mov.w	r1, #0
    6720:	f04f 0200 	mov.w	r2, #0
    6724:	00e2      	lsls	r2, r4, #3
    6726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    672a:	00d9      	lsls	r1, r3, #3
    672c:	460b      	mov	r3, r1
    672e:	4614      	mov	r4, r2
    6730:	e9c7 3402 	strd	r3, r4, [r7, #8]
    6734:	f107 0308 	add.w	r3, r7, #8
    6738:	4619      	mov	r1, r3
    673a:	6878      	ldr	r0, [r7, #4]
    673c:	f7fa f916 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    6740:	6878      	ldr	r0, [r7, #4]
    6742:	3714      	adds	r7, #20
    6744:	46bd      	mov	sp, r7
    6746:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006748 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    6748:	b590      	push	{r4, r7, lr}
    674a:	b085      	sub	sp, #20
    674c:	af00      	add	r7, sp, #0
    674e:	6078      	str	r0, [r7, #4]
    6750:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    6752:	f107 0308 	add.w	r3, r7, #8
    6756:	6839      	ldr	r1, [r7, #0]
    6758:	4618      	mov	r0, r3
    675a:	f7ff ff9e 	bl	669a <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    675e:	f107 0308 	add.w	r3, r7, #8
    6762:	4618      	mov	r0, r3
    6764:	f7fb ff2c 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    6768:	4603      	mov	r3, r0
    676a:	460c      	mov	r4, r1
    676c:	687a      	ldr	r2, [r7, #4]
    676e:	e9c2 3400 	strd	r3, r4, [r2]
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	4618      	mov	r0, r3
    6776:	3714      	adds	r7, #20
    6778:	46bd      	mov	sp, r7
    677a:	bd90      	pop	{r4, r7, pc}

0000677c <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    677c:	b580      	push	{r7, lr}
    677e:	b084      	sub	sp, #16
    6780:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    6782:	f107 0308 	add.w	r3, r7, #8
    6786:	4618      	mov	r0, r3
    6788:	f7ff ff5c 	bl	6644 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    678c:	f107 0208 	add.w	r2, r7, #8
    6790:	463b      	mov	r3, r7
    6792:	4611      	mov	r1, r2
    6794:	4618      	mov	r0, r3
    6796:	f7ff ffd7 	bl	6748 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    679a:	463b      	mov	r3, r7
    679c:	4619      	mov	r1, r3
    679e:	4807      	ldr	r0, [pc, #28]	; (67bc <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    67a0:	f000 f9d4 	bl	6b4c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    67a4:	4b06      	ldr	r3, [pc, #24]	; (67c0 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    67a6:	681b      	ldr	r3, [r3, #0]
    67a8:	2b00      	cmp	r3, #0
    67aa:	d002      	beq.n	67b2 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    67ac:	4b04      	ldr	r3, [pc, #16]	; (67c0 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    67ae:	681b      	ldr	r3, [r3, #0]
    67b0:	4798      	blx	r3
    }
  }
    67b2:	bf00      	nop
    67b4:	3710      	adds	r7, #16
    67b6:	46bd      	mov	sp, r7
    67b8:	bd80      	pop	{r7, pc}
    67ba:	bf00      	nop
    67bc:	100003c0 	.word	0x100003c0
    67c0:	100003b8 	.word	0x100003b8

000067c4 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    67c4:	b490      	push	{r4, r7}
    67c6:	b082      	sub	sp, #8
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
  {
    return counter;
    67cc:	687a      	ldr	r2, [r7, #4]
    67ce:	4b05      	ldr	r3, [pc, #20]	; (67e4 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    67d0:	e9d3 3400 	ldrd	r3, r4, [r3]
    67d4:	e9c2 3400 	strd	r3, r4, [r2]
  }
    67d8:	6878      	ldr	r0, [r7, #4]
    67da:	3708      	adds	r7, #8
    67dc:	46bd      	mov	sp, r7
    67de:	bc90      	pop	{r4, r7}
    67e0:	4770      	bx	lr
    67e2:	bf00      	nop
    67e4:	100003c0 	.word	0x100003c0

000067e8 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    67e8:	b480      	push	{r7}
    67ea:	b083      	sub	sp, #12
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
    67f0:	bf00      	nop
    67f2:	370c      	adds	r7, #12
    67f4:	46bd      	mov	sp, r7
    67f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    67fa:	4770      	bx	lr

000067fc <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    67fc:	b480      	push	{r7}
    67fe:	b083      	sub	sp, #12
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
    6804:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    6806:	4a04      	ldr	r2, [pc, #16]	; (6818 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    6808:	683b      	ldr	r3, [r7, #0]
    680a:	6013      	str	r3, [r2, #0]
  }
    680c:	bf00      	nop
    680e:	370c      	adds	r7, #12
    6810:	46bd      	mov	sp, r7
    6812:	f85d 7b04 	ldr.w	r7, [sp], #4
    6816:	4770      	bx	lr
    6818:	100003b8 	.word	0x100003b8

0000681c <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    681c:	b5f0      	push	{r4, r5, r6, r7, lr}
    681e:	b08b      	sub	sp, #44	; 0x2c
    6820:	af02      	add	r7, sp, #8
    6822:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    6824:	2304      	movs	r3, #4
    6826:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    6828:	4b1f      	ldr	r3, [pc, #124]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    682a:	681b      	ldr	r3, [r3, #0]
    682c:	685b      	ldr	r3, [r3, #4]
    682e:	2b00      	cmp	r3, #0
    6830:	bf14      	ite	ne
    6832:	2301      	movne	r3, #1
    6834:	2300      	moveq	r3, #0
    6836:	b2db      	uxtb	r3, r3
    6838:	2b00      	cmp	r3, #0
    683a:	d030      	beq.n	689e <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    683c:	4b1a      	ldr	r3, [pc, #104]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    683e:	681b      	ldr	r3, [r3, #0]
    6840:	2200      	movs	r2, #0
    6842:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    6844:	4b18      	ldr	r3, [pc, #96]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6846:	681b      	ldr	r3, [r3, #0]
    6848:	681a      	ldr	r2, [r3, #0]
    684a:	4b17      	ldr	r3, [pc, #92]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    684c:	681b      	ldr	r3, [r3, #0]
    684e:	f042 0202 	orr.w	r2, r2, #2
    6852:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    6854:	4b14      	ldr	r3, [pc, #80]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6856:	681b      	ldr	r3, [r3, #0]
    6858:	681a      	ldr	r2, [r3, #0]
    685a:	4b13      	ldr	r3, [pc, #76]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    685c:	681b      	ldr	r3, [r3, #0]
    685e:	f042 0201 	orr.w	r2, r2, #1
    6862:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    6864:	4b10      	ldr	r3, [pc, #64]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    6866:	681b      	ldr	r3, [r3, #0]
    6868:	681a      	ldr	r2, [r3, #0]
    686a:	4b0f      	ldr	r3, [pc, #60]	; (68a8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    686c:	681b      	ldr	r3, [r3, #0]
    686e:	f042 0204 	orr.w	r2, r2, #4
    6872:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	689e      	ldr	r6, [r3, #8]
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    687c:	681b      	ldr	r3, [r3, #0]
    687e:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    6880:	4b0a      	ldr	r3, [pc, #40]	; (68ac <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    6882:	f107 040c 	add.w	r4, r7, #12
    6886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    688c:	69bb      	ldr	r3, [r7, #24]
    688e:	9300      	str	r3, [sp, #0]
    6890:	f107 030c 	add.w	r3, r7, #12
    6894:	cb0e      	ldmia	r3, {r1, r2, r3}
    6896:	4630      	mov	r0, r6
    6898:	47a8      	blx	r5
      status = Status::kSuccess;
    689a:	2300      	movs	r3, #0
    689c:	61fb      	str	r3, [r7, #28]
    }

    return status;
    689e:	69fb      	ldr	r3, [r7, #28]
  }
    68a0:	4618      	mov	r0, r3
    68a2:	3724      	adds	r7, #36	; 0x24
    68a4:	46bd      	mov	sp, r7
    68a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68a8:	10000074 	.word	0x10000074
    68ac:	0000a2ec 	.word	0x0000a2ec

000068b0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    68b0:	b580      	push	{r7, lr}
    68b2:	b084      	sub	sp, #16
    68b4:	af00      	add	r7, sp, #0
    68b6:	6078      	str	r0, [r7, #4]
    68b8:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	4618      	mov	r0, r3
    68be:	f7fa fa55 	bl	d6c <units::linear_scale<float>::operator()() const>
    68c2:	eeb0 7a40 	vmov.f32	s14, s0
    68c6:	683b      	ldr	r3, [r7, #0]
    68c8:	ee07 3a90 	vmov	s15, r3
    68cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    68d0:	ee77 7a67 	vsub.f32	s15, s14, s15
    68d4:	f107 030c 	add.w	r3, r7, #12
    68d8:	eeb0 0a67 	vmov.f32	s0, s15
    68dc:	4618      	mov	r0, r3
    68de:	f7fa fa80 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    68e2:	68fb      	ldr	r3, [r7, #12]
	}
    68e4:	4618      	mov	r0, r3
    68e6:	3710      	adds	r7, #16
    68e8:	46bd      	mov	sp, r7
    68ea:	bd80      	pop	{r7, pc}

000068ec <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    68ec:	b580      	push	{r7, lr}
    68ee:	b082      	sub	sp, #8
    68f0:	af00      	add	r7, sp, #0
    68f2:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    68f4:	6878      	ldr	r0, [r7, #4]
    68f6:	f7fc fb76 	bl	2fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    68fa:	4603      	mov	r3, r0
	}
    68fc:	4618      	mov	r0, r3
    68fe:	3708      	adds	r7, #8
    6900:	46bd      	mov	sp, r7
    6902:	bd80      	pop	{r7, pc}

00006904 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    6904:	b590      	push	{r4, r7, lr}
    6906:	b089      	sub	sp, #36	; 0x24
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
    690c:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    690e:	f04f 0001 	mov.w	r0, #1
    6912:	f04f 0100 	mov.w	r1, #0
    6916:	f7f9 fe3f 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    691a:	4603      	mov	r3, r0
    691c:	60fb      	str	r3, [r7, #12]
    691e:	f107 020c 	add.w	r2, r7, #12
    6922:	463b      	mov	r3, r7
    6924:	4611      	mov	r1, r2
    6926:	4618      	mov	r0, r3
    6928:	f7ff fde6 	bl	64f8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    692c:	4603      	mov	r3, r0
    692e:	2b00      	cmp	r3, #0
    6930:	d002      	beq.n	6938 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    6932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6936:	e041      	b.n	69bc <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	685a      	ldr	r2, [r3, #4]
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	685b      	ldr	r3, [r3, #4]
    6940:	681b      	ldr	r3, [r3, #0]
    6942:	330c      	adds	r3, #12
    6944:	681b      	ldr	r3, [r3, #0]
    6946:	4610      	mov	r0, r2
    6948:	4798      	blx	r3
    694a:	4603      	mov	r3, r0
    694c:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    694e:	463a      	mov	r2, r7
    6950:	f107 0308 	add.w	r3, r7, #8
    6954:	4611      	mov	r1, r2
    6956:	4618      	mov	r0, r3
    6958:	f7fb f85c 	bl	1a14 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    695c:	4603      	mov	r3, r0
    695e:	617b      	str	r3, [r7, #20]
    6960:	f107 0314 	add.w	r3, r7, #20
    6964:	2101      	movs	r1, #1
    6966:	4618      	mov	r0, r3
    6968:	f7ff ffa2 	bl	68b0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    696c:	4603      	mov	r3, r0
    696e:	613b      	str	r3, [r7, #16]
    6970:	f107 0310 	add.w	r3, r7, #16
    6974:	4618      	mov	r0, r3
    6976:	f7ff ffb9 	bl	68ec <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    697a:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    697c:	f107 0308 	add.w	r3, r7, #8
    6980:	4618      	mov	r0, r3
    6982:	f7fa fd43 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6986:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    6988:	463b      	mov	r3, r7
    698a:	4618      	mov	r0, r3
    698c:	f7fa fd3e 	bl	140c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    6990:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    6992:	fbb4 f2f3 	udiv	r2, r4, r3
    6996:	fb03 f302 	mul.w	r3, r3, r2
    699a:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    699c:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    699e:	69fb      	ldr	r3, [r7, #28]
    69a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    69a4:	d305      	bcc.n	69b2 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    69a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    69aa:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    69ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    69b0:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    69b2:	4b04      	ldr	r3, [pc, #16]	; (69c4 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    69b4:	681b      	ldr	r3, [r3, #0]
    69b6:	69fa      	ldr	r2, [r7, #28]
    69b8:	605a      	str	r2, [r3, #4]
    return remainder;
    69ba:	69bb      	ldr	r3, [r7, #24]
  }
    69bc:	4618      	mov	r0, r3
    69be:	3724      	adds	r7, #36	; 0x24
    69c0:	46bd      	mov	sp, r7
    69c2:	bd90      	pop	{r4, r7, pc}
    69c4:	10000074 	.word	0x10000074

000069c8 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    69c8:	b580      	push	{r7, lr}
    69ca:	b082      	sub	sp, #8
    69cc:	af00      	add	r7, sp, #0
    69ce:	6078      	str	r0, [r7, #4]
    69d0:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    69d2:	683a      	ldr	r2, [r7, #0]
    69d4:	6879      	ldr	r1, [r7, #4]
    69d6:	4804      	ldr	r0, [pc, #16]	; (69e8 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    69d8:	f7fa fefc 	bl	17d4 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    69dc:	683b      	ldr	r3, [r7, #0]
}
    69de:	4618      	mov	r0, r3
    69e0:	3708      	adds	r7, #8
    69e2:	46bd      	mov	sp, r7
    69e4:	bd80      	pop	{r7, pc}
    69e6:	bf00      	nop
    69e8:	100003cc 	.word	0x100003cc

000069ec <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    69ec:	b590      	push	{r4, r7, lr}
    69ee:	b087      	sub	sp, #28
    69f0:	af02      	add	r7, sp, #8
    69f2:	6078      	str	r0, [r7, #4]
    69f4:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    69f6:	f107 0308 	add.w	r3, r7, #8
    69fa:	4618      	mov	r0, r3
    69fc:	f7fb fea5 	bl	274a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    6a00:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    6a04:	e9cd 3400 	strd	r3, r4, [sp]
    6a08:	683a      	ldr	r2, [r7, #0]
    6a0a:	6879      	ldr	r1, [r7, #4]
    6a0c:	4803      	ldr	r0, [pc, #12]	; (6a1c <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    6a0e:	f7fa ff33 	bl	1878 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    6a12:	683b      	ldr	r3, [r7, #0]
}
    6a14:	4618      	mov	r0, r3
    6a16:	3714      	adds	r7, #20
    6a18:	46bd      	mov	sp, r7
    6a1a:	bd90      	pop	{r4, r7, pc}
    6a1c:	100003cc 	.word	0x100003cc

00006a20 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    6a20:	b580      	push	{r7, lr}
    6a22:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    6a24:	4802      	ldr	r0, [pc, #8]	; (6a30 <ThreadRuntimeCounter+0x10>)
    6a26:	f7ff fd23 	bl	6470 <sjsu::cortex::DwtCounter::GetCount()>
    6a2a:	4603      	mov	r3, r0
}
    6a2c:	4618      	mov	r0, r3
    6a2e:	bd80      	pop	{r7, pc}
    6a30:	100003c8 	.word	0x100003c8

00006a34 <vPortSetupTimerInterrupt>:
  // definitions.
  extern void ArmHardFaultHandler(void);
  extern void ArmResetHandler(void);

  void vPortSetupTimerInterrupt(void)  // NOLINT
  {
    6a34:	b590      	push	{r4, r7, lr}
    6a36:	b08b      	sub	sp, #44	; 0x2c
    6a38:	af02      	add	r7, sp, #8
    interrupt_controller.Register({
    6a3a:	4b11      	ldr	r3, [pc, #68]	; (6a80 <vPortSetupTimerInterrupt+0x4c>)
    6a3c:	463c      	mov	r4, r7
    6a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6a44:	68fb      	ldr	r3, [r7, #12]
    6a46:	9300      	str	r3, [sp, #0]
    6a48:	463b      	mov	r3, r7
    6a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    6a4c:	480d      	ldr	r0, [pc, #52]	; (6a84 <vPortSetupTimerInterrupt+0x50>)
    6a4e:	f7ff fdbb 	bl	65c8 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
        .interrupt_request_number  = sjsu::cortex::SVCall_IRQn,
        .interrupt_service_routine = vPortSVCHandler,
    });
    interrupt_controller.Register({
    6a52:	4b0d      	ldr	r3, [pc, #52]	; (6a88 <vPortSetupTimerInterrupt+0x54>)
    6a54:	f107 0410 	add.w	r4, r7, #16
    6a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6a5e:	69fb      	ldr	r3, [r7, #28]
    6a60:	9300      	str	r3, [sp, #0]
    6a62:	f107 0310 	add.w	r3, r7, #16
    6a66:	cb0e      	ldmia	r3, {r1, r2, r3}
    6a68:	4806      	ldr	r0, [pc, #24]	; (6a84 <vPortSetupTimerInterrupt+0x50>)
    6a6a:	f7ff fdad 	bl	65c8 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
    });
    // Set the SystemTick frequency to the RTOS tick frequency
    // It is critical that this happens before you set the system_clock,
    // since The system_timer keeps the time that the system_clock uses to
    // delay itself.
    system_timer.SetInterrupt(xPortSysTickHandler);
    6a6e:	4907      	ldr	r1, [pc, #28]	; (6a8c <vPortSetupTimerInterrupt+0x58>)
    6a70:	4807      	ldr	r0, [pc, #28]	; (6a90 <vPortSetupTimerInterrupt+0x5c>)
    6a72:	f7ff fec3 	bl	67fc <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>
  }
    6a76:	bf00      	nop
    6a78:	3724      	adds	r7, #36	; 0x24
    6a7a:	46bd      	mov	sp, r7
    6a7c:	bd90      	pop	{r4, r7, pc}
    6a7e:	bf00      	nop
    6a80:	0000a5e8 	.word	0x0000a5e8
    6a84:	10000088 	.word	0x10000088
    6a88:	0000a5f8 	.word	0x0000a5f8
    6a8c:	00006eb9 	.word	0x00006eb9
    6a90:	1000007c 	.word	0x1000007c

00006a94 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    6a94:	b580      	push	{r7, lr}
    6a96:	b082      	sub	sp, #8
    6a98:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    6a9a:	f7ff fcf9 	bl	6490 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    6a9e:	4b1e      	ldr	r3, [pc, #120]	; (6b18 <sjsu::InitializePlatform()+0x84>)
    6aa0:	6819      	ldr	r1, [r3, #0]
    6aa2:	481e      	ldr	r0, [pc, #120]	; (6b1c <sjsu::InitializePlatform()+0x88>)
    6aa4:	f7f9 ffaa 	bl	9fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    6aa8:	23ff      	movs	r3, #255	; 0xff
    6aaa:	703b      	strb	r3, [r7, #0]
    6aac:	463b      	mov	r3, r7
    6aae:	2201      	movs	r2, #1
    6ab0:	4619      	mov	r1, r3
    6ab2:	481a      	ldr	r0, [pc, #104]	; (6b1c <sjsu::InitializePlatform()+0x88>)
    6ab4:	f7f9 fff0 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    6ab8:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    6abc:	4818      	ldr	r0, [pc, #96]	; (6b20 <sjsu::InitializePlatform()+0x8c>)
    6abe:	f7fa fde3 	bl	1688 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    6ac2:	4818      	ldr	r0, [pc, #96]	; (6b24 <sjsu::InitializePlatform()+0x90>)
    6ac4:	f000 fd28 	bl	7518 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    6ac8:	4817      	ldr	r0, [pc, #92]	; (6b28 <sjsu::InitializePlatform()+0x94>)
    6aca:	f000 fd35 	bl	7538 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    6ace:	4b17      	ldr	r3, [pc, #92]	; (6b2c <sjsu::InitializePlatform()+0x98>)
    6ad0:	6819      	ldr	r1, [r3, #0]
    6ad2:	4817      	ldr	r0, [pc, #92]	; (6b30 <sjsu::InitializePlatform()+0x9c>)
    6ad4:	f7ff ff16 	bl	6904 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    6ad8:	4815      	ldr	r0, [pc, #84]	; (6b30 <sjsu::InitializePlatform()+0x9c>)
    6ada:	f7ff fe9f 	bl	681c <sjsu::cortex::SystemTimer::StartTimer() const>
    6ade:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d00d      	beq.n	6b02 <sjsu::InitializePlatform()+0x6e>
    6ae6:	23d6      	movs	r3, #214	; 0xd6
    6ae8:	4a12      	ldr	r2, [pc, #72]	; (6b34 <sjsu::InitializePlatform()+0xa0>)
    6aea:	4913      	ldr	r1, [pc, #76]	; (6b38 <sjsu::InitializePlatform()+0xa4>)
    6aec:	4813      	ldr	r0, [pc, #76]	; (6b3c <sjsu::InitializePlatform()+0xa8>)
    6aee:	f7ff fba5 	bl	623c <printf>
    6af2:	4813      	ldr	r0, [pc, #76]	; (6b40 <sjsu::InitializePlatform()+0xac>)
    6af4:	f7fe fa5e 	bl	4fb4 <puts>
    6af8:	2100      	movs	r1, #0
    6afa:	2001      	movs	r0, #1
    6afc:	f7f9 fee4 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    6b00:	e7fe      	b.n	6b00 <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    6b02:	4810      	ldr	r0, [pc, #64]	; (6b44 <sjsu::InitializePlatform()+0xb0>)
    6b04:	f7ff fc92 	bl	642c <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    6b08:	480f      	ldr	r0, [pc, #60]	; (6b48 <sjsu::InitializePlatform()+0xb4>)
    6b0a:	f7ff fd13 	bl	6534 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    6b0e:	bf00      	nop
    6b10:	3708      	adds	r7, #8
    6b12:	46bd      	mov	sp, r7
    6b14:	bd80      	pop	{r7, pc}
    6b16:	bf00      	nop
    6b18:	0000a6e0 	.word	0x0000a6e0
    6b1c:	10000078 	.word	0x10000078
    6b20:	100003cc 	.word	0x100003cc
    6b24:	000069c9 	.word	0x000069c9
    6b28:	000069ed 	.word	0x000069ed
    6b2c:	0000a6e4 	.word	0x0000a6e4
    6b30:	1000007c 	.word	0x1000007c
    6b34:	0000a744 	.word	0x0000a744
    6b38:	0000a710 	.word	0x0000a710
    6b3c:	0000a608 	.word	0x0000a608
    6b40:	0000a39c 	.word	0x0000a39c
    6b44:	100003c8 	.word	0x100003c8
    6b48:	000067c5 	.word	0x000067c5

00006b4c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    6b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b4e:	b083      	sub	sp, #12
    6b50:	af00      	add	r7, sp, #0
    6b52:	6078      	str	r0, [r7, #4]
    6b54:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    6b56:	6838      	ldr	r0, [r7, #0]
    6b58:	f7fb fd32 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    6b5c:	460a      	mov	r2, r1
    6b5e:	4601      	mov	r1, r0
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	e9d3 5600 	ldrd	r5, r6, [r3]
    6b66:	186b      	adds	r3, r5, r1
    6b68:	eb46 0402 	adc.w	r4, r6, r2
    6b6c:	687a      	ldr	r2, [r7, #4]
    6b6e:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    6b72:	687b      	ldr	r3, [r7, #4]
	}
    6b74:	4618      	mov	r0, r3
    6b76:	370c      	adds	r7, #12
    6b78:	46bd      	mov	sp, r7
    6b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006b7c <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    6b7c:	b580      	push	{r7, lr}
    6b7e:	b082      	sub	sp, #8
    6b80:	af00      	add	r7, sp, #0
    6b82:	6078      	str	r0, [r7, #4]
    6b84:	6039      	str	r1, [r7, #0]
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	2b01      	cmp	r3, #1
    6b8a:	d155      	bne.n	6c38 <__static_initialization_and_destruction_0(int, int)+0xbc>
    6b8c:	683b      	ldr	r3, [r7, #0]
    6b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6b92:	4293      	cmp	r3, r2
    6b94:	d150      	bne.n	6c38 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    6b96:	4b2a      	ldr	r3, [pc, #168]	; (6c40 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    6b98:	681b      	ldr	r3, [r3, #0]
    6b9a:	f003 0301 	and.w	r3, r3, #1
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d106      	bne.n	6bb0 <__static_initialization_and_destruction_0(int, int)+0x34>
    6ba2:	4b27      	ldr	r3, [pc, #156]	; (6c40 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    6ba4:	2201      	movs	r2, #1
    6ba6:	601a      	str	r2, [r3, #0]
    6ba8:	4b26      	ldr	r3, [pc, #152]	; (6c44 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    6baa:	4618      	mov	r0, r3
    6bac:	f7fb f8e4 	bl	1d78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    6bb0:	4b25      	ldr	r3, [pc, #148]	; (6c48 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    6bb2:	681b      	ldr	r3, [r3, #0]
    6bb4:	f003 0301 	and.w	r3, r3, #1
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d105      	bne.n	6bc8 <__static_initialization_and_destruction_0(int, int)+0x4c>
    6bbc:	4b22      	ldr	r3, [pc, #136]	; (6c48 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    6bbe:	2201      	movs	r2, #1
    6bc0:	601a      	str	r2, [r3, #0]
    6bc2:	4a22      	ldr	r2, [pc, #136]	; (6c4c <__static_initialization_and_destruction_0(int, int)+0xd0>)
    6bc4:	4b22      	ldr	r3, [pc, #136]	; (6c50 <__static_initialization_and_destruction_0(int, int)+0xd4>)
    6bc6:	601a      	str	r2, [r3, #0]
    6bc8:	4b22      	ldr	r3, [pc, #136]	; (6c54 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    6bca:	681b      	ldr	r3, [r3, #0]
    6bcc:	f003 0301 	and.w	r3, r3, #1
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d105      	bne.n	6be0 <__static_initialization_and_destruction_0(int, int)+0x64>
    6bd4:	4b1f      	ldr	r3, [pc, #124]	; (6c54 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    6bd6:	2201      	movs	r2, #1
    6bd8:	601a      	str	r2, [r3, #0]
    6bda:	4a1f      	ldr	r2, [pc, #124]	; (6c58 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    6bdc:	4b1f      	ldr	r3, [pc, #124]	; (6c5c <__static_initialization_and_destruction_0(int, int)+0xe0>)
    6bde:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    6be0:	4b1f      	ldr	r3, [pc, #124]	; (6c60 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    6be2:	681b      	ldr	r3, [r3, #0]
    6be4:	f003 0301 	and.w	r3, r3, #1
    6be8:	2b00      	cmp	r3, #0
    6bea:	d105      	bne.n	6bf8 <__static_initialization_and_destruction_0(int, int)+0x7c>
    6bec:	4b1c      	ldr	r3, [pc, #112]	; (6c60 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    6bee:	2201      	movs	r2, #1
    6bf0:	601a      	str	r2, [r3, #0]
    };
    6bf2:	4a1c      	ldr	r2, [pc, #112]	; (6c64 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    6bf4:	4b1c      	ldr	r3, [pc, #112]	; (6c68 <__static_initialization_and_destruction_0(int, int)+0xec>)
    6bf6:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    6bf8:	4b1c      	ldr	r3, [pc, #112]	; (6c6c <__static_initialization_and_destruction_0(int, int)+0xf0>)
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	f003 0301 	and.w	r3, r3, #1
    6c00:	2b00      	cmp	r3, #0
    6c02:	d105      	bne.n	6c10 <__static_initialization_and_destruction_0(int, int)+0x94>
    6c04:	4b19      	ldr	r3, [pc, #100]	; (6c6c <__static_initialization_and_destruction_0(int, int)+0xf0>)
    6c06:	2201      	movs	r2, #1
    6c08:	601a      	str	r2, [r3, #0]
    };
    6c0a:	4a19      	ldr	r2, [pc, #100]	; (6c70 <__static_initialization_and_destruction_0(int, int)+0xf4>)
    6c0c:	4b19      	ldr	r3, [pc, #100]	; (6c74 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    6c0e:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    6c10:	4b19      	ldr	r3, [pc, #100]	; (6c78 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    6c12:	681b      	ldr	r3, [r3, #0]
    6c14:	f003 0301 	and.w	r3, r3, #1
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d105      	bne.n	6c28 <__static_initialization_and_destruction_0(int, int)+0xac>
    6c1c:	4b16      	ldr	r3, [pc, #88]	; (6c78 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    6c1e:	2201      	movs	r2, #1
    6c20:	601a      	str	r2, [r3, #0]
    };
    6c22:	4a16      	ldr	r2, [pc, #88]	; (6c7c <__static_initialization_and_destruction_0(int, int)+0x100>)
    6c24:	4b16      	ldr	r3, [pc, #88]	; (6c80 <__static_initialization_and_destruction_0(int, int)+0x104>)
    6c26:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    6c28:	f7fa faae 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    6c2c:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    6c2e:	461a      	mov	r2, r3
    6c30:	4914      	ldr	r1, [pc, #80]	; (6c84 <__static_initialization_and_destruction_0(int, int)+0x108>)
    6c32:	4815      	ldr	r0, [pc, #84]	; (6c88 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6c34:	f7fa fd0e 	bl	1654 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    6c38:	bf00      	nop
    6c3a:	3708      	adds	r7, #8
    6c3c:	46bd      	mov	sp, r7
    6c3e:	bd80      	pop	{r7, pc}
    6c40:	10000290 	.word	0x10000290
    6c44:	10000128 	.word	0x10000128
    6c48:	1000027c 	.word	0x1000027c
    6c4c:	400fc000 	.word	0x400fc000
    6c50:	10000120 	.word	0x10000120
    6c54:	10000278 	.word	0x10000278
    6c58:	4002c000 	.word	0x4002c000
    6c5c:	10000114 	.word	0x10000114
    6c60:	10000280 	.word	0x10000280
    6c64:	40098000 	.word	0x40098000
    6c68:	1000000c 	.word	0x1000000c
    6c6c:	10000284 	.word	0x10000284
    6c70:	4009c000 	.word	0x4009c000
    6c74:	10000020 	.word	0x10000020
    6c78:	10000288 	.word	0x10000288
    6c7c:	400a4000 	.word	0x400a4000
    6c80:	10000034 	.word	0x10000034
    6c84:	0000a6fc 	.word	0x0000a6fc
    6c88:	100003cc 	.word	0x100003cc

00006c8c <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    6c8c:	b580      	push	{r7, lr}
    6c8e:	af00      	add	r7, sp, #0
    6c90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c94:	2001      	movs	r0, #1
    6c96:	f7ff ff71 	bl	6b7c <__static_initialization_and_destruction_0(int, int)>
    6c9a:	bd80      	pop	{r7, pc}

00006c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    6c9c:	b480      	push	{r7}
    6c9e:	b085      	sub	sp, #20
    6ca0:	af00      	add	r7, sp, #0
    6ca2:	60f8      	str	r0, [r7, #12]
    6ca4:	60b9      	str	r1, [r7, #8]
    6ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    6ca8:	68fb      	ldr	r3, [r7, #12]
    6caa:	3b04      	subs	r3, #4
    6cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6cae:	68fb      	ldr	r3, [r7, #12]
    6cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6cb6:	68fb      	ldr	r3, [r7, #12]
    6cb8:	3b04      	subs	r3, #4
    6cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    6cbc:	68bb      	ldr	r3, [r7, #8]
    6cbe:	f023 0201 	bic.w	r2, r3, #1
    6cc2:	68fb      	ldr	r3, [r7, #12]
    6cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	3b04      	subs	r3, #4
    6cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6ccc:	4a0c      	ldr	r2, [pc, #48]	; (6d00 <pxPortInitialiseStack+0x64>)
    6cce:	68fb      	ldr	r3, [r7, #12]
    6cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6cd2:	68fb      	ldr	r3, [r7, #12]
    6cd4:	3b14      	subs	r3, #20
    6cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6cd8:	687a      	ldr	r2, [r7, #4]
    6cda:	68fb      	ldr	r3, [r7, #12]
    6cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    6cde:	68fb      	ldr	r3, [r7, #12]
    6ce0:	3b04      	subs	r3, #4
    6ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    6ce4:	68fb      	ldr	r3, [r7, #12]
    6ce6:	f06f 0202 	mvn.w	r2, #2
    6cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    6cec:	68fb      	ldr	r3, [r7, #12]
    6cee:	3b20      	subs	r3, #32
    6cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6cf2:	68fb      	ldr	r3, [r7, #12]
}
    6cf4:	4618      	mov	r0, r3
    6cf6:	3714      	adds	r7, #20
    6cf8:	46bd      	mov	sp, r7
    6cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cfe:	4770      	bx	lr
    6d00:	00006d05 	.word	0x00006d05

00006d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6d04:	b480      	push	{r7}
    6d06:	b083      	sub	sp, #12
    6d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    6d0a:	2300      	movs	r3, #0
    6d0c:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    6d0e:	f04f 0328 	mov.w	r3, #40	; 0x28
    6d12:	f383 8811 	msr	BASEPRI, r3
    6d16:	f3bf 8f6f 	isb	sy
    6d1a:	f3bf 8f4f 	dsb	sy
    6d1e:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    6d20:	bf00      	nop
    6d22:	683b      	ldr	r3, [r7, #0]
    6d24:	2b00      	cmp	r3, #0
    6d26:	d0fc      	beq.n	6d22 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6d28:	bf00      	nop
    6d2a:	370c      	adds	r7, #12
    6d2c:	46bd      	mov	sp, r7
    6d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d32:	4770      	bx	lr
    6d34:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6d38:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6d3c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006d40 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    6d40:	4b07      	ldr	r3, [pc, #28]	; (6d60 <pxCurrentTCBConst2>)
    6d42:	6819      	ldr	r1, [r3, #0]
    6d44:	6808      	ldr	r0, [r1, #0]
    6d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d4a:	f380 8809 	msr	PSP, r0
    6d4e:	f3bf 8f6f 	isb	sy
    6d52:	f04f 0000 	mov.w	r0, #0
    6d56:	f380 8811 	msr	BASEPRI, r0
    6d5a:	4770      	bx	lr
    6d5c:	f3af 8000 	nop.w

00006d60 <pxCurrentTCBConst2>:
    6d60:	100002a8 	.word	0x100002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6d64:	bf00      	nop
    6d66:	bf00      	nop

00006d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    6d68:	4808      	ldr	r0, [pc, #32]	; (6d8c <prvPortStartFirstTask+0x24>)
    6d6a:	6800      	ldr	r0, [r0, #0]
    6d6c:	6800      	ldr	r0, [r0, #0]
    6d6e:	f380 8808 	msr	MSP, r0
    6d72:	f04f 0000 	mov.w	r0, #0
    6d76:	f380 8814 	msr	CONTROL, r0
    6d7a:	b662      	cpsie	i
    6d7c:	b661      	cpsie	f
    6d7e:	f3bf 8f4f 	dsb	sy
    6d82:	f3bf 8f6f 	isb	sy
    6d86:	df00      	svc	0
    6d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    6d8a:	bf00      	nop
    6d8c:	e000ed08 	.word	0xe000ed08

00006d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6d90:	b580      	push	{r7, lr}
    6d92:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    6d94:	4b10      	ldr	r3, [pc, #64]	; (6dd8 <xPortStartScheduler+0x48>)
    6d96:	681b      	ldr	r3, [r3, #0]
    6d98:	4a0f      	ldr	r2, [pc, #60]	; (6dd8 <xPortStartScheduler+0x48>)
    6d9a:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    6d9e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    6da0:	4b0d      	ldr	r3, [pc, #52]	; (6dd8 <xPortStartScheduler+0x48>)
    6da2:	681b      	ldr	r3, [r3, #0]
    6da4:	4a0c      	ldr	r2, [pc, #48]	; (6dd8 <xPortStartScheduler+0x48>)
    6da6:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    6daa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    6dac:	f7ff fe42 	bl	6a34 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    6db0:	4b0a      	ldr	r3, [pc, #40]	; (6ddc <xPortStartScheduler+0x4c>)
    6db2:	2200      	movs	r2, #0
    6db4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    6db6:	f000 f89f 	bl	6ef8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    6dba:	4b09      	ldr	r3, [pc, #36]	; (6de0 <xPortStartScheduler+0x50>)
    6dbc:	681b      	ldr	r3, [r3, #0]
    6dbe:	4a08      	ldr	r2, [pc, #32]	; (6de0 <xPortStartScheduler+0x50>)
    6dc0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6dc4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    6dc6:	f7ff ffcf 	bl	6d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    6dca:	f7fd f9af 	bl	412c <vTaskSwitchContext>
	prvTaskExitError();
    6dce:	f7ff ff99 	bl	6d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    6dd2:	2300      	movs	r3, #0
}
    6dd4:	4618      	mov	r0, r3
    6dd6:	bd80      	pop	{r7, pc}
    6dd8:	e000ed20 	.word	0xe000ed20
    6ddc:	1000008c 	.word	0x1000008c
    6de0:	e000ef34 	.word	0xe000ef34

00006de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    6de4:	b480      	push	{r7}
    6de6:	b083      	sub	sp, #12
    6de8:	af00      	add	r7, sp, #0
    6dea:	f04f 0328 	mov.w	r3, #40	; 0x28
    6dee:	f383 8811 	msr	BASEPRI, r3
    6df2:	f3bf 8f6f 	isb	sy
    6df6:	f3bf 8f4f 	dsb	sy
    6dfa:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    6dfc:	4b05      	ldr	r3, [pc, #20]	; (6e14 <vPortEnterCritical+0x30>)
    6dfe:	681b      	ldr	r3, [r3, #0]
    6e00:	3301      	adds	r3, #1
    6e02:	4a04      	ldr	r2, [pc, #16]	; (6e14 <vPortEnterCritical+0x30>)
    6e04:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    6e06:	bf00      	nop
    6e08:	370c      	adds	r7, #12
    6e0a:	46bd      	mov	sp, r7
    6e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e10:	4770      	bx	lr
    6e12:	bf00      	nop
    6e14:	1000008c 	.word	0x1000008c

00006e18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    6e18:	b480      	push	{r7}
    6e1a:	b083      	sub	sp, #12
    6e1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    6e1e:	4b0a      	ldr	r3, [pc, #40]	; (6e48 <vPortExitCritical+0x30>)
    6e20:	681b      	ldr	r3, [r3, #0]
    6e22:	3b01      	subs	r3, #1
    6e24:	4a08      	ldr	r2, [pc, #32]	; (6e48 <vPortExitCritical+0x30>)
    6e26:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    6e28:	4b07      	ldr	r3, [pc, #28]	; (6e48 <vPortExitCritical+0x30>)
    6e2a:	681b      	ldr	r3, [r3, #0]
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d104      	bne.n	6e3a <vPortExitCritical+0x22>
    6e30:	2300      	movs	r3, #0
    6e32:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    6e3a:	bf00      	nop
    6e3c:	370c      	adds	r7, #12
    6e3e:	46bd      	mov	sp, r7
    6e40:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e44:	4770      	bx	lr
    6e46:	bf00      	nop
    6e48:	1000008c 	.word	0x1000008c
    6e4c:	ffffffff 	.word	0xffffffff

00006e50 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6e50:	f3ef 8009 	mrs	r0, PSP
    6e54:	f3bf 8f6f 	isb	sy
    6e58:	4b15      	ldr	r3, [pc, #84]	; (6eb0 <pxCurrentTCBConst>)
    6e5a:	681a      	ldr	r2, [r3, #0]
    6e5c:	f01e 0f10 	tst.w	lr, #16
    6e60:	bf08      	it	eq
    6e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e6a:	6010      	str	r0, [r2, #0]
    6e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
    6e70:	f04f 0028 	mov.w	r0, #40	; 0x28
    6e74:	f380 8811 	msr	BASEPRI, r0
    6e78:	f3bf 8f4f 	dsb	sy
    6e7c:	f3bf 8f6f 	isb	sy
    6e80:	f7fd f954 	bl	412c <vTaskSwitchContext>
    6e84:	f04f 0000 	mov.w	r0, #0
    6e88:	f380 8811 	msr	BASEPRI, r0
    6e8c:	bc09      	pop	{r0, r3}
    6e8e:	6819      	ldr	r1, [r3, #0]
    6e90:	6808      	ldr	r0, [r1, #0]
    6e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e96:	f01e 0f10 	tst.w	lr, #16
    6e9a:	bf08      	it	eq
    6e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    6ea0:	f380 8809 	msr	PSP, r0
    6ea4:	f3bf 8f6f 	isb	sy
    6ea8:	4770      	bx	lr
    6eaa:	bf00      	nop
    6eac:	f3af 8000 	nop.w

00006eb0 <pxCurrentTCBConst>:
    6eb0:	100002a8 	.word	0x100002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6eb4:	bf00      	nop
    6eb6:	bf00      	nop

00006eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    6eb8:	b580      	push	{r7, lr}
    6eba:	b082      	sub	sp, #8
    6ebc:	af00      	add	r7, sp, #0
	__asm volatile
    6ebe:	f04f 0328 	mov.w	r3, #40	; 0x28
    6ec2:	f383 8811 	msr	BASEPRI, r3
    6ec6:	f3bf 8f6f 	isb	sy
    6eca:	f3bf 8f4f 	dsb	sy
    6ece:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    6ed0:	f7fd f880 	bl	3fd4 <xTaskIncrementTick>
    6ed4:	4603      	mov	r3, r0
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d003      	beq.n	6ee2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    6eda:	4b06      	ldr	r3, [pc, #24]	; (6ef4 <xPortSysTickHandler+0x3c>)
    6edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6ee0:	601a      	str	r2, [r3, #0]
    6ee2:	2300      	movs	r3, #0
    6ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
    6ee6:	683b      	ldr	r3, [r7, #0]
    6ee8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    6eec:	bf00      	nop
    6eee:	3708      	adds	r7, #8
    6ef0:	46bd      	mov	sp, r7
    6ef2:	bd80      	pop	{r7, pc}
    6ef4:	e000ed04 	.word	0xe000ed04

00006ef8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    6ef8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 6f08 <vPortEnableVFP+0x10>
    6efc:	6801      	ldr	r1, [r0, #0]
    6efe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6f02:	6001      	str	r1, [r0, #0]
    6f04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    6f06:	bf00      	nop
    6f08:	e000ed88 	.word	0xe000ed88

00006f0c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    6f0c:	b480      	push	{r7}
    6f0e:	b083      	sub	sp, #12
    6f10:	af00      	add	r7, sp, #0
    6f12:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    6f14:	2350      	movs	r3, #80	; 0x50
    6f16:	4618      	mov	r0, r3
    6f18:	370c      	adds	r7, #12
    6f1a:	46bd      	mov	sp, r7
    6f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f20:	4770      	bx	lr
    6f22:	Address 0x0000000000006f22 is out of bounds.


00006f24 <vApplicationGetIdleTaskMemory>:
static StackType_t idle_task_stack[configMINIMAL_STACK_SIZE];
extern "C" void vApplicationGetIdleTaskMemory(  // NOLINT
    StaticTask_t ** ppx_idle_task_tcb_buffer,
    StackType_t ** ppx_idle_task_stack_buffer,
    uint32_t * pul_idle_task_stack_size)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b084      	sub	sp, #16
    6f28:	af00      	add	r7, sp, #0
    6f2a:	60f8      	str	r0, [r7, #12]
    6f2c:	60b9      	str	r1, [r7, #8]
    6f2e:	607a      	str	r2, [r7, #4]
  *ppx_idle_task_tcb_buffer   = &idle_task_tcb;
    6f30:	68fb      	ldr	r3, [r7, #12]
    6f32:	4a07      	ldr	r2, [pc, #28]	; (6f50 <vApplicationGetIdleTaskMemory+0x2c>)
    6f34:	601a      	str	r2, [r3, #0]
  *ppx_idle_task_stack_buffer = idle_task_stack;
    6f36:	68bb      	ldr	r3, [r7, #8]
    6f38:	4a06      	ldr	r2, [pc, #24]	; (6f54 <vApplicationGetIdleTaskMemory+0x30>)
    6f3a:	601a      	str	r2, [r3, #0]
  *pul_idle_task_stack_size   = std::size(idle_task_stack);
    6f3c:	4805      	ldr	r0, [pc, #20]	; (6f54 <vApplicationGetIdleTaskMemory+0x30>)
    6f3e:	f7ff ffe5 	bl	6f0c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>
    6f42:	4602      	mov	r2, r0
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	601a      	str	r2, [r3, #0]
}
    6f48:	bf00      	nop
    6f4a:	3710      	adds	r7, #16
    6f4c:	46bd      	mov	sp, r7
    6f4e:	bd80      	pop	{r7, pc}
    6f50:	100003d8 	.word	0x100003d8
    6f54:	10000438 	.word	0x10000438

00006f58 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    6f58:	b480      	push	{r7}
    6f5a:	b083      	sub	sp, #12
    6f5c:	af00      	add	r7, sp, #0
    6f5e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    6f60:	f44f 7300 	mov.w	r3, #512	; 0x200
    6f64:	4618      	mov	r0, r3
    6f66:	370c      	adds	r7, #12
    6f68:	46bd      	mov	sp, r7
    6f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f6e:	4770      	bx	lr

00006f70 <vApplicationGetTimerTaskMemory>:
static StackType_t timer_task_stack[configTIMER_TASK_STACK_DEPTH];
extern "C" void vApplicationGetTimerTaskMemory( // NOLINT
    StaticTask_t ** ppx_timer_task_tcb_buffer,
    StackType_t ** ppx_timer_task_stack_buffer,
    uint32_t * pul_timer_task_stack_size)
{
    6f70:	b580      	push	{r7, lr}
    6f72:	b084      	sub	sp, #16
    6f74:	af00      	add	r7, sp, #0
    6f76:	60f8      	str	r0, [r7, #12]
    6f78:	60b9      	str	r1, [r7, #8]
    6f7a:	607a      	str	r2, [r7, #4]
    *ppx_timer_task_tcb_buffer = &timer_task_tcb;
    6f7c:	68fb      	ldr	r3, [r7, #12]
    6f7e:	4a07      	ldr	r2, [pc, #28]	; (6f9c <vApplicationGetTimerTaskMemory+0x2c>)
    6f80:	601a      	str	r2, [r3, #0]
    *ppx_timer_task_stack_buffer = timer_task_stack;
    6f82:	68bb      	ldr	r3, [r7, #8]
    6f84:	4a06      	ldr	r2, [pc, #24]	; (6fa0 <vApplicationGetTimerTaskMemory+0x30>)
    6f86:	601a      	str	r2, [r3, #0]
    *pul_timer_task_stack_size = std::size(timer_task_stack);
    6f88:	4805      	ldr	r0, [pc, #20]	; (6fa0 <vApplicationGetTimerTaskMemory+0x30>)
    6f8a:	f7ff ffe5 	bl	6f58 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>
    6f8e:	4602      	mov	r2, r0
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	601a      	str	r2, [r3, #0]
}
    6f94:	bf00      	nop
    6f96:	3710      	adds	r7, #16
    6f98:	46bd      	mov	sp, r7
    6f9a:	bd80      	pop	{r7, pc}
    6f9c:	10000578 	.word	0x10000578
    6fa0:	100005d8 	.word	0x100005d8

00006fa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    6fa4:	b580      	push	{r7, lr}
    6fa6:	b088      	sub	sp, #32
    6fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    6faa:	2300      	movs	r3, #0
    6fac:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    6fae:	f000 fa5b 	bl	7468 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    6fb2:	4b15      	ldr	r3, [pc, #84]	; (7008 <xTimerCreateTimerTask+0x64>)
    6fb4:	681b      	ldr	r3, [r3, #0]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d020      	beq.n	6ffc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    6fba:	2300      	movs	r3, #0
    6fbc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    6fbe:	2300      	movs	r3, #0
    6fc0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    6fc2:	463a      	mov	r2, r7
    6fc4:	1d39      	adds	r1, r7, #4
    6fc6:	f107 0308 	add.w	r3, r7, #8
    6fca:	4618      	mov	r0, r3
    6fcc:	f7ff ffd0 	bl	6f70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    6fd0:	6839      	ldr	r1, [r7, #0]
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	68ba      	ldr	r2, [r7, #8]
    6fd6:	9202      	str	r2, [sp, #8]
    6fd8:	9301      	str	r3, [sp, #4]
    6fda:	2304      	movs	r3, #4
    6fdc:	9300      	str	r3, [sp, #0]
    6fde:	2300      	movs	r3, #0
    6fe0:	460a      	mov	r2, r1
    6fe2:	490a      	ldr	r1, [pc, #40]	; (700c <xTimerCreateTimerTask+0x68>)
    6fe4:	480a      	ldr	r0, [pc, #40]	; (7010 <xTimerCreateTimerTask+0x6c>)
    6fe6:	f7fc fd71 	bl	3acc <xTaskCreateStatic>
    6fea:	4602      	mov	r2, r0
    6fec:	4b09      	ldr	r3, [pc, #36]	; (7014 <xTimerCreateTimerTask+0x70>)
    6fee:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    6ff0:	4b08      	ldr	r3, [pc, #32]	; (7014 <xTimerCreateTimerTask+0x70>)
    6ff2:	681b      	ldr	r3, [r3, #0]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d001      	beq.n	6ffc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
    6ff8:	2301      	movs	r3, #1
    6ffa:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    6ffc:	68fb      	ldr	r3, [r7, #12]
}
    6ffe:	4618      	mov	r0, r3
    7000:	3710      	adds	r7, #16
    7002:	46bd      	mov	sp, r7
    7004:	bd80      	pop	{r7, pc}
    7006:	bf00      	nop
    7008:	10000e08 	.word	0x10000e08
    700c:	0000a764 	.word	0x0000a764
    7010:	000070fd 	.word	0x000070fd
    7014:	10000e0c 	.word	0x10000e0c

00007018 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    7018:	b580      	push	{r7, lr}
    701a:	b088      	sub	sp, #32
    701c:	af00      	add	r7, sp, #0
    701e:	60f8      	str	r0, [r7, #12]
    7020:	60b9      	str	r1, [r7, #8]
    7022:	607a      	str	r2, [r7, #4]
    7024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    7026:	2300      	movs	r3, #0
    7028:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    702a:	4b1a      	ldr	r3, [pc, #104]	; (7094 <xTimerGenericCommand+0x7c>)
    702c:	681b      	ldr	r3, [r3, #0]
    702e:	2b00      	cmp	r3, #0
    7030:	d02a      	beq.n	7088 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    7032:	68bb      	ldr	r3, [r7, #8]
    7034:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    703a:	68fb      	ldr	r3, [r7, #12]
    703c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    703e:	68bb      	ldr	r3, [r7, #8]
    7040:	2b05      	cmp	r3, #5
    7042:	dc18      	bgt.n	7076 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    7044:	f7fd fa7c 	bl	4540 <xTaskGetSchedulerState>
    7048:	4603      	mov	r3, r0
    704a:	2b02      	cmp	r3, #2
    704c:	d109      	bne.n	7062 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    704e:	4b11      	ldr	r3, [pc, #68]	; (7094 <xTimerGenericCommand+0x7c>)
    7050:	6818      	ldr	r0, [r3, #0]
    7052:	f107 0110 	add.w	r1, r7, #16
    7056:	2300      	movs	r3, #0
    7058:	6aba      	ldr	r2, [r7, #40]	; 0x28
    705a:	f7fd fc25 	bl	48a8 <xQueueGenericSend>
    705e:	61f8      	str	r0, [r7, #28]
    7060:	e012      	b.n	7088 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    7062:	4b0c      	ldr	r3, [pc, #48]	; (7094 <xTimerGenericCommand+0x7c>)
    7064:	6818      	ldr	r0, [r3, #0]
    7066:	f107 0110 	add.w	r1, r7, #16
    706a:	2300      	movs	r3, #0
    706c:	2200      	movs	r2, #0
    706e:	f7fd fc1b 	bl	48a8 <xQueueGenericSend>
    7072:	61f8      	str	r0, [r7, #28]
    7074:	e008      	b.n	7088 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    7076:	4b07      	ldr	r3, [pc, #28]	; (7094 <xTimerGenericCommand+0x7c>)
    7078:	6818      	ldr	r0, [r3, #0]
    707a:	f107 0110 	add.w	r1, r7, #16
    707e:	2300      	movs	r3, #0
    7080:	683a      	ldr	r2, [r7, #0]
    7082:	f7fd fcbb 	bl	49fc <xQueueGenericSendFromISR>
    7086:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    7088:	69fb      	ldr	r3, [r7, #28]
}
    708a:	4618      	mov	r0, r3
    708c:	3720      	adds	r7, #32
    708e:	46bd      	mov	sp, r7
    7090:	bd80      	pop	{r7, pc}
    7092:	bf00      	nop
    7094:	10000e08 	.word	0x10000e08

00007098 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    7098:	b580      	push	{r7, lr}
    709a:	b086      	sub	sp, #24
    709c:	af02      	add	r7, sp, #8
    709e:	6078      	str	r0, [r7, #4]
    70a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    70a2:	4b15      	ldr	r3, [pc, #84]	; (70f8 <prvProcessExpiredTimer+0x60>)
    70a4:	681b      	ldr	r3, [r3, #0]
    70a6:	68db      	ldr	r3, [r3, #12]
    70a8:	68db      	ldr	r3, [r3, #12]
    70aa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    70ac:	68fb      	ldr	r3, [r7, #12]
    70ae:	3304      	adds	r3, #4
    70b0:	4618      	mov	r0, r3
    70b2:	f7fc fce1 	bl	3a78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    70b6:	68fb      	ldr	r3, [r7, #12]
    70b8:	69db      	ldr	r3, [r3, #28]
    70ba:	2b01      	cmp	r3, #1
    70bc:	d114      	bne.n	70e8 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    70be:	68fb      	ldr	r3, [r7, #12]
    70c0:	699a      	ldr	r2, [r3, #24]
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	18d1      	adds	r1, r2, r3
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	683a      	ldr	r2, [r7, #0]
    70ca:	68f8      	ldr	r0, [r7, #12]
    70cc:	f000 f8ba 	bl	7244 <prvInsertTimerInActiveList>
    70d0:	4603      	mov	r3, r0
    70d2:	2b00      	cmp	r3, #0
    70d4:	d008      	beq.n	70e8 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    70d6:	2300      	movs	r3, #0
    70d8:	9300      	str	r3, [sp, #0]
    70da:	2300      	movs	r3, #0
    70dc:	687a      	ldr	r2, [r7, #4]
    70de:	2100      	movs	r1, #0
    70e0:	68f8      	ldr	r0, [r7, #12]
    70e2:	f7ff ff99 	bl	7018 <xTimerGenericCommand>
    70e6:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    70e8:	68fb      	ldr	r3, [r7, #12]
    70ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70ec:	68f8      	ldr	r0, [r7, #12]
    70ee:	4798      	blx	r3
}
    70f0:	bf00      	nop
    70f2:	3710      	adds	r7, #16
    70f4:	46bd      	mov	sp, r7
    70f6:	bd80      	pop	{r7, pc}
    70f8:	10000e00 	.word	0x10000e00

000070fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    70fc:	b580      	push	{r7, lr}
    70fe:	b084      	sub	sp, #16
    7100:	af00      	add	r7, sp, #0
    7102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    7104:	f107 0308 	add.w	r3, r7, #8
    7108:	4618      	mov	r0, r3
    710a:	f000 f857 	bl	71bc <prvGetNextExpireTime>
    710e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    7110:	68bb      	ldr	r3, [r7, #8]
    7112:	4619      	mov	r1, r3
    7114:	68f8      	ldr	r0, [r7, #12]
    7116:	f000 f803 	bl	7120 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    711a:	f000 f8d5 	bl	72c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    711e:	e7f1      	b.n	7104 <prvTimerTask+0x8>

00007120 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    7120:	b580      	push	{r7, lr}
    7122:	b084      	sub	sp, #16
    7124:	af00      	add	r7, sp, #0
    7126:	6078      	str	r0, [r7, #4]
    7128:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    712a:	f7fc fea7 	bl	3e7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    712e:	f107 0308 	add.w	r3, r7, #8
    7132:	4618      	mov	r0, r3
    7134:	f000 f866 	bl	7204 <prvSampleTimeNow>
    7138:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    713a:	68bb      	ldr	r3, [r7, #8]
    713c:	2b00      	cmp	r3, #0
    713e:	d130      	bne.n	71a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    7140:	683b      	ldr	r3, [r7, #0]
    7142:	2b00      	cmp	r3, #0
    7144:	d10a      	bne.n	715c <prvProcessTimerOrBlockTask+0x3c>
    7146:	687a      	ldr	r2, [r7, #4]
    7148:	68fb      	ldr	r3, [r7, #12]
    714a:	429a      	cmp	r2, r3
    714c:	d806      	bhi.n	715c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    714e:	f7fc fea3 	bl	3e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    7152:	68f9      	ldr	r1, [r7, #12]
    7154:	6878      	ldr	r0, [r7, #4]
    7156:	f7ff ff9f 	bl	7098 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    715a:	e024      	b.n	71a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    715c:	683b      	ldr	r3, [r7, #0]
    715e:	2b00      	cmp	r3, #0
    7160:	d008      	beq.n	7174 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    7162:	4b13      	ldr	r3, [pc, #76]	; (71b0 <prvProcessTimerOrBlockTask+0x90>)
    7164:	681b      	ldr	r3, [r3, #0]
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	2b00      	cmp	r3, #0
    716a:	bf0c      	ite	eq
    716c:	2301      	moveq	r3, #1
    716e:	2300      	movne	r3, #0
    7170:	b2db      	uxtb	r3, r3
    7172:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    7174:	4b0f      	ldr	r3, [pc, #60]	; (71b4 <prvProcessTimerOrBlockTask+0x94>)
    7176:	6818      	ldr	r0, [r3, #0]
    7178:	687a      	ldr	r2, [r7, #4]
    717a:	68fb      	ldr	r3, [r7, #12]
    717c:	1ad3      	subs	r3, r2, r3
    717e:	683a      	ldr	r2, [r7, #0]
    7180:	4619      	mov	r1, r3
    7182:	f7fd fe6f 	bl	4e64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    7186:	f7fc fe87 	bl	3e98 <xTaskResumeAll>
    718a:	4603      	mov	r3, r0
    718c:	2b00      	cmp	r3, #0
    718e:	d10a      	bne.n	71a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    7190:	4b09      	ldr	r3, [pc, #36]	; (71b8 <prvProcessTimerOrBlockTask+0x98>)
    7192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7196:	601a      	str	r2, [r3, #0]
    7198:	f3bf 8f4f 	dsb	sy
    719c:	f3bf 8f6f 	isb	sy
}
    71a0:	e001      	b.n	71a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    71a2:	f7fc fe79 	bl	3e98 <xTaskResumeAll>
}
    71a6:	bf00      	nop
    71a8:	3710      	adds	r7, #16
    71aa:	46bd      	mov	sp, r7
    71ac:	bd80      	pop	{r7, pc}
    71ae:	bf00      	nop
    71b0:	10000e04 	.word	0x10000e04
    71b4:	10000e08 	.word	0x10000e08
    71b8:	e000ed04 	.word	0xe000ed04

000071bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    71bc:	b480      	push	{r7}
    71be:	b085      	sub	sp, #20
    71c0:	af00      	add	r7, sp, #0
    71c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    71c4:	4b0e      	ldr	r3, [pc, #56]	; (7200 <prvGetNextExpireTime+0x44>)
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	2b00      	cmp	r3, #0
    71cc:	bf0c      	ite	eq
    71ce:	2301      	moveq	r3, #1
    71d0:	2300      	movne	r3, #0
    71d2:	b2db      	uxtb	r3, r3
    71d4:	461a      	mov	r2, r3
    71d6:	687b      	ldr	r3, [r7, #4]
    71d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	681b      	ldr	r3, [r3, #0]
    71de:	2b00      	cmp	r3, #0
    71e0:	d105      	bne.n	71ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    71e2:	4b07      	ldr	r3, [pc, #28]	; (7200 <prvGetNextExpireTime+0x44>)
    71e4:	681b      	ldr	r3, [r3, #0]
    71e6:	68db      	ldr	r3, [r3, #12]
    71e8:	681b      	ldr	r3, [r3, #0]
    71ea:	60fb      	str	r3, [r7, #12]
    71ec:	e001      	b.n	71f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    71ee:	2300      	movs	r3, #0
    71f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    71f2:	68fb      	ldr	r3, [r7, #12]
}
    71f4:	4618      	mov	r0, r3
    71f6:	3714      	adds	r7, #20
    71f8:	46bd      	mov	sp, r7
    71fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fe:	4770      	bx	lr
    7200:	10000e00 	.word	0x10000e00

00007204 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    7204:	b580      	push	{r7, lr}
    7206:	b084      	sub	sp, #16
    7208:	af00      	add	r7, sp, #0
    720a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    720c:	f7fc fed2 	bl	3fb4 <xTaskGetTickCount>
    7210:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    7212:	4b0b      	ldr	r3, [pc, #44]	; (7240 <prvSampleTimeNow+0x3c>)
    7214:	681b      	ldr	r3, [r3, #0]
    7216:	68fa      	ldr	r2, [r7, #12]
    7218:	429a      	cmp	r2, r3
    721a:	d205      	bcs.n	7228 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    721c:	f000 f8d0 	bl	73c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	2201      	movs	r2, #1
    7224:	601a      	str	r2, [r3, #0]
    7226:	e002      	b.n	722e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    7228:	687b      	ldr	r3, [r7, #4]
    722a:	2200      	movs	r2, #0
    722c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    722e:	4a04      	ldr	r2, [pc, #16]	; (7240 <prvSampleTimeNow+0x3c>)
    7230:	68fb      	ldr	r3, [r7, #12]
    7232:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    7234:	68fb      	ldr	r3, [r7, #12]
}
    7236:	4618      	mov	r0, r3
    7238:	3710      	adds	r7, #16
    723a:	46bd      	mov	sp, r7
    723c:	bd80      	pop	{r7, pc}
    723e:	bf00      	nop
    7240:	10000e10 	.word	0x10000e10

00007244 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    7244:	b580      	push	{r7, lr}
    7246:	b086      	sub	sp, #24
    7248:	af00      	add	r7, sp, #0
    724a:	60f8      	str	r0, [r7, #12]
    724c:	60b9      	str	r1, [r7, #8]
    724e:	607a      	str	r2, [r7, #4]
    7250:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    7252:	2300      	movs	r3, #0
    7254:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    7256:	68fb      	ldr	r3, [r7, #12]
    7258:	68ba      	ldr	r2, [r7, #8]
    725a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    725c:	68fb      	ldr	r3, [r7, #12]
    725e:	68fa      	ldr	r2, [r7, #12]
    7260:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    7262:	68ba      	ldr	r2, [r7, #8]
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	429a      	cmp	r2, r3
    7268:	d812      	bhi.n	7290 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    726a:	687a      	ldr	r2, [r7, #4]
    726c:	683b      	ldr	r3, [r7, #0]
    726e:	1ad2      	subs	r2, r2, r3
    7270:	68fb      	ldr	r3, [r7, #12]
    7272:	699b      	ldr	r3, [r3, #24]
    7274:	429a      	cmp	r2, r3
    7276:	d302      	bcc.n	727e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    7278:	2301      	movs	r3, #1
    727a:	617b      	str	r3, [r7, #20]
    727c:	e01b      	b.n	72b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    727e:	4b10      	ldr	r3, [pc, #64]	; (72c0 <prvInsertTimerInActiveList+0x7c>)
    7280:	681a      	ldr	r2, [r3, #0]
    7282:	68fb      	ldr	r3, [r7, #12]
    7284:	3304      	adds	r3, #4
    7286:	4619      	mov	r1, r3
    7288:	4610      	mov	r0, r2
    728a:	f7fc fbbc 	bl	3a06 <vListInsert>
    728e:	e012      	b.n	72b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    7290:	687a      	ldr	r2, [r7, #4]
    7292:	683b      	ldr	r3, [r7, #0]
    7294:	429a      	cmp	r2, r3
    7296:	d206      	bcs.n	72a6 <prvInsertTimerInActiveList+0x62>
    7298:	68ba      	ldr	r2, [r7, #8]
    729a:	683b      	ldr	r3, [r7, #0]
    729c:	429a      	cmp	r2, r3
    729e:	d302      	bcc.n	72a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    72a0:	2301      	movs	r3, #1
    72a2:	617b      	str	r3, [r7, #20]
    72a4:	e007      	b.n	72b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    72a6:	4b07      	ldr	r3, [pc, #28]	; (72c4 <prvInsertTimerInActiveList+0x80>)
    72a8:	681a      	ldr	r2, [r3, #0]
    72aa:	68fb      	ldr	r3, [r7, #12]
    72ac:	3304      	adds	r3, #4
    72ae:	4619      	mov	r1, r3
    72b0:	4610      	mov	r0, r2
    72b2:	f7fc fba8 	bl	3a06 <vListInsert>
		}
	}

	return xProcessTimerNow;
    72b6:	697b      	ldr	r3, [r7, #20]
}
    72b8:	4618      	mov	r0, r3
    72ba:	3718      	adds	r7, #24
    72bc:	46bd      	mov	sp, r7
    72be:	bd80      	pop	{r7, pc}
    72c0:	10000e04 	.word	0x10000e04
    72c4:	10000e00 	.word	0x10000e00

000072c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    72c8:	b580      	push	{r7, lr}
    72ca:	b08a      	sub	sp, #40	; 0x28
    72cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    72ce:	e065      	b.n	739c <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    72d0:	68bb      	ldr	r3, [r7, #8]
    72d2:	2b00      	cmp	r3, #0
    72d4:	db61      	blt.n	739a <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    72d6:	693b      	ldr	r3, [r7, #16]
    72d8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    72da:	69fb      	ldr	r3, [r7, #28]
    72dc:	695b      	ldr	r3, [r3, #20]
    72de:	2b00      	cmp	r3, #0
    72e0:	d004      	beq.n	72ec <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    72e2:	69fb      	ldr	r3, [r7, #28]
    72e4:	3304      	adds	r3, #4
    72e6:	4618      	mov	r0, r3
    72e8:	f7fc fbc6 	bl	3a78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    72ec:	1d3b      	adds	r3, r7, #4
    72ee:	4618      	mov	r0, r3
    72f0:	f7ff ff88 	bl	7204 <prvSampleTimeNow>
    72f4:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
    72f6:	68bb      	ldr	r3, [r7, #8]
    72f8:	2b09      	cmp	r3, #9
    72fa:	d84f      	bhi.n	739c <prvProcessReceivedCommands+0xd4>
    72fc:	a201      	add	r2, pc, #4	; (adr r2, 7304 <prvProcessReceivedCommands+0x3c>)
    72fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7302:	bf00      	nop
    7304:	0000732d 	.word	0x0000732d
    7308:	0000732d 	.word	0x0000732d
    730c:	0000732d 	.word	0x0000732d
    7310:	0000739d 	.word	0x0000739d
    7314:	0000736f 	.word	0x0000736f
    7318:	00007389 	.word	0x00007389
    731c:	0000732d 	.word	0x0000732d
    7320:	0000732d 	.word	0x0000732d
    7324:	0000739d 	.word	0x0000739d
    7328:	0000736f 	.word	0x0000736f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    732c:	68fa      	ldr	r2, [r7, #12]
    732e:	69fb      	ldr	r3, [r7, #28]
    7330:	699b      	ldr	r3, [r3, #24]
    7332:	18d1      	adds	r1, r2, r3
    7334:	68fb      	ldr	r3, [r7, #12]
    7336:	69ba      	ldr	r2, [r7, #24]
    7338:	69f8      	ldr	r0, [r7, #28]
    733a:	f7ff ff83 	bl	7244 <prvInsertTimerInActiveList>
    733e:	4603      	mov	r3, r0
    7340:	2b00      	cmp	r3, #0
    7342:	d02b      	beq.n	739c <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    7344:	69fb      	ldr	r3, [r7, #28]
    7346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7348:	69f8      	ldr	r0, [r7, #28]
    734a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    734c:	69fb      	ldr	r3, [r7, #28]
    734e:	69db      	ldr	r3, [r3, #28]
    7350:	2b01      	cmp	r3, #1
    7352:	d123      	bne.n	739c <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    7354:	68fa      	ldr	r2, [r7, #12]
    7356:	69fb      	ldr	r3, [r7, #28]
    7358:	699b      	ldr	r3, [r3, #24]
    735a:	441a      	add	r2, r3
    735c:	2300      	movs	r3, #0
    735e:	9300      	str	r3, [sp, #0]
    7360:	2300      	movs	r3, #0
    7362:	2100      	movs	r1, #0
    7364:	69f8      	ldr	r0, [r7, #28]
    7366:	f7ff fe57 	bl	7018 <xTimerGenericCommand>
    736a:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    736c:	e016      	b.n	739c <prvProcessReceivedCommands+0xd4>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    736e:	68fa      	ldr	r2, [r7, #12]
    7370:	69fb      	ldr	r3, [r7, #28]
    7372:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    7374:	69fb      	ldr	r3, [r7, #28]
    7376:	699a      	ldr	r2, [r3, #24]
    7378:	69bb      	ldr	r3, [r7, #24]
    737a:	18d1      	adds	r1, r2, r3
    737c:	69bb      	ldr	r3, [r7, #24]
    737e:	69ba      	ldr	r2, [r7, #24]
    7380:	69f8      	ldr	r0, [r7, #28]
    7382:	f7ff ff5f 	bl	7244 <prvInsertTimerInActiveList>
					break;
    7386:	e009      	b.n	739c <prvProcessReceivedCommands+0xd4>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    7388:	69fb      	ldr	r3, [r7, #28]
    738a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    738e:	2b00      	cmp	r3, #0
    7390:	d104      	bne.n	739c <prvProcessReceivedCommands+0xd4>
						{
							vPortFree( pxTimer );
    7392:	69f8      	ldr	r0, [r7, #28]
    7394:	f7fd fdac 	bl	4ef0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    7398:	e000      	b.n	739c <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    739a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    739c:	4b07      	ldr	r3, [pc, #28]	; (73bc <prvProcessReceivedCommands+0xf4>)
    739e:	681b      	ldr	r3, [r3, #0]
    73a0:	f107 0108 	add.w	r1, r7, #8
    73a4:	2200      	movs	r2, #0
    73a6:	4618      	mov	r0, r3
    73a8:	f7fd fb82 	bl	4ab0 <xQueueReceive>
    73ac:	4603      	mov	r3, r0
    73ae:	2b00      	cmp	r3, #0
    73b0:	d18e      	bne.n	72d0 <prvProcessReceivedCommands+0x8>
	}
}
    73b2:	bf00      	nop
    73b4:	3720      	adds	r7, #32
    73b6:	46bd      	mov	sp, r7
    73b8:	bd80      	pop	{r7, pc}
    73ba:	bf00      	nop
    73bc:	10000e08 	.word	0x10000e08

000073c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    73c0:	b580      	push	{r7, lr}
    73c2:	b088      	sub	sp, #32
    73c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    73c6:	e037      	b.n	7438 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    73c8:	4b25      	ldr	r3, [pc, #148]	; (7460 <prvSwitchTimerLists+0xa0>)
    73ca:	681b      	ldr	r3, [r3, #0]
    73cc:	68db      	ldr	r3, [r3, #12]
    73ce:	681b      	ldr	r3, [r3, #0]
    73d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    73d2:	4b23      	ldr	r3, [pc, #140]	; (7460 <prvSwitchTimerLists+0xa0>)
    73d4:	681b      	ldr	r3, [r3, #0]
    73d6:	68db      	ldr	r3, [r3, #12]
    73d8:	68db      	ldr	r3, [r3, #12]
    73da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    73dc:	68fb      	ldr	r3, [r7, #12]
    73de:	3304      	adds	r3, #4
    73e0:	4618      	mov	r0, r3
    73e2:	f7fc fb49 	bl	3a78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    73e6:	68fb      	ldr	r3, [r7, #12]
    73e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73ea:	68f8      	ldr	r0, [r7, #12]
    73ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    73ee:	68fb      	ldr	r3, [r7, #12]
    73f0:	69db      	ldr	r3, [r3, #28]
    73f2:	2b01      	cmp	r3, #1
    73f4:	d120      	bne.n	7438 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    73f6:	68fb      	ldr	r3, [r7, #12]
    73f8:	699b      	ldr	r3, [r3, #24]
    73fa:	693a      	ldr	r2, [r7, #16]
    73fc:	4413      	add	r3, r2
    73fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    7400:	68ba      	ldr	r2, [r7, #8]
    7402:	693b      	ldr	r3, [r7, #16]
    7404:	429a      	cmp	r2, r3
    7406:	d90e      	bls.n	7426 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    7408:	68fb      	ldr	r3, [r7, #12]
    740a:	68ba      	ldr	r2, [r7, #8]
    740c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    740e:	68fb      	ldr	r3, [r7, #12]
    7410:	68fa      	ldr	r2, [r7, #12]
    7412:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    7414:	4b12      	ldr	r3, [pc, #72]	; (7460 <prvSwitchTimerLists+0xa0>)
    7416:	681a      	ldr	r2, [r3, #0]
    7418:	68fb      	ldr	r3, [r7, #12]
    741a:	3304      	adds	r3, #4
    741c:	4619      	mov	r1, r3
    741e:	4610      	mov	r0, r2
    7420:	f7fc faf1 	bl	3a06 <vListInsert>
    7424:	e008      	b.n	7438 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    7426:	2300      	movs	r3, #0
    7428:	9300      	str	r3, [sp, #0]
    742a:	2300      	movs	r3, #0
    742c:	693a      	ldr	r2, [r7, #16]
    742e:	2100      	movs	r1, #0
    7430:	68f8      	ldr	r0, [r7, #12]
    7432:	f7ff fdf1 	bl	7018 <xTimerGenericCommand>
    7436:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    7438:	4b09      	ldr	r3, [pc, #36]	; (7460 <prvSwitchTimerLists+0xa0>)
    743a:	681b      	ldr	r3, [r3, #0]
    743c:	681b      	ldr	r3, [r3, #0]
    743e:	2b00      	cmp	r3, #0
    7440:	d1c2      	bne.n	73c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    7442:	4b07      	ldr	r3, [pc, #28]	; (7460 <prvSwitchTimerLists+0xa0>)
    7444:	681b      	ldr	r3, [r3, #0]
    7446:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    7448:	4b06      	ldr	r3, [pc, #24]	; (7464 <prvSwitchTimerLists+0xa4>)
    744a:	681b      	ldr	r3, [r3, #0]
    744c:	4a04      	ldr	r2, [pc, #16]	; (7460 <prvSwitchTimerLists+0xa0>)
    744e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    7450:	4a04      	ldr	r2, [pc, #16]	; (7464 <prvSwitchTimerLists+0xa4>)
    7452:	697b      	ldr	r3, [r7, #20]
    7454:	6013      	str	r3, [r2, #0]
}
    7456:	bf00      	nop
    7458:	3718      	adds	r7, #24
    745a:	46bd      	mov	sp, r7
    745c:	bd80      	pop	{r7, pc}
    745e:	bf00      	nop
    7460:	10000e00 	.word	0x10000e00
    7464:	10000e04 	.word	0x10000e04

00007468 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    7468:	b580      	push	{r7, lr}
    746a:	b082      	sub	sp, #8
    746c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    746e:	f7ff fcb9 	bl	6de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    7472:	4b15      	ldr	r3, [pc, #84]	; (74c8 <prvCheckForValidListAndQueue+0x60>)
    7474:	681b      	ldr	r3, [r3, #0]
    7476:	2b00      	cmp	r3, #0
    7478:	d120      	bne.n	74bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    747a:	4814      	ldr	r0, [pc, #80]	; (74cc <prvCheckForValidListAndQueue+0x64>)
    747c:	f7fc fa72 	bl	3964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    7480:	4813      	ldr	r0, [pc, #76]	; (74d0 <prvCheckForValidListAndQueue+0x68>)
    7482:	f7fc fa6f 	bl	3964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    7486:	4b13      	ldr	r3, [pc, #76]	; (74d4 <prvCheckForValidListAndQueue+0x6c>)
    7488:	4a10      	ldr	r2, [pc, #64]	; (74cc <prvCheckForValidListAndQueue+0x64>)
    748a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    748c:	4b12      	ldr	r3, [pc, #72]	; (74d8 <prvCheckForValidListAndQueue+0x70>)
    748e:	4a10      	ldr	r2, [pc, #64]	; (74d0 <prvCheckForValidListAndQueue+0x68>)
    7490:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    7492:	2300      	movs	r3, #0
    7494:	9300      	str	r3, [sp, #0]
    7496:	4b11      	ldr	r3, [pc, #68]	; (74dc <prvCheckForValidListAndQueue+0x74>)
    7498:	4a11      	ldr	r2, [pc, #68]	; (74e0 <prvCheckForValidListAndQueue+0x78>)
    749a:	210c      	movs	r1, #12
    749c:	200a      	movs	r0, #10
    749e:	f7fd f991 	bl	47c4 <xQueueGenericCreateStatic>
    74a2:	4602      	mov	r2, r0
    74a4:	4b08      	ldr	r3, [pc, #32]	; (74c8 <prvCheckForValidListAndQueue+0x60>)
    74a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    74a8:	4b07      	ldr	r3, [pc, #28]	; (74c8 <prvCheckForValidListAndQueue+0x60>)
    74aa:	681b      	ldr	r3, [r3, #0]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d005      	beq.n	74bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    74b0:	4b05      	ldr	r3, [pc, #20]	; (74c8 <prvCheckForValidListAndQueue+0x60>)
    74b2:	681b      	ldr	r3, [r3, #0]
    74b4:	490b      	ldr	r1, [pc, #44]	; (74e4 <prvCheckForValidListAndQueue+0x7c>)
    74b6:	4618      	mov	r0, r3
    74b8:	f7fd fcac 	bl	4e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    74bc:	f7ff fcac 	bl	6e18 <vPortExitCritical>
}
    74c0:	bf00      	nop
    74c2:	46bd      	mov	sp, r7
    74c4:	bd80      	pop	{r7, pc}
    74c6:	bf00      	nop
    74c8:	10000e08 	.word	0x10000e08
    74cc:	10000dd8 	.word	0x10000dd8
    74d0:	10000dec 	.word	0x10000dec
    74d4:	10000e00 	.word	0x10000e00
    74d8:	10000e04 	.word	0x10000e04
    74dc:	10000e8c 	.word	0x10000e8c
    74e0:	10000e14 	.word	0x10000e14
    74e4:	0000a76c 	.word	0x0000a76c

000074e8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    74e8:	b480      	push	{r7}
    74ea:	b083      	sub	sp, #12
    74ec:	af00      	add	r7, sp, #0
    74ee:	6078      	str	r0, [r7, #4]
    74f0:	6039      	str	r1, [r7, #0]
  return 1;
    74f2:	2301      	movs	r3, #1
}
    74f4:	4618      	mov	r0, r3
    74f6:	370c      	adds	r7, #12
    74f8:	46bd      	mov	sp, r7
    74fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    74fe:	4770      	bx	lr

00007500 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    7500:	b480      	push	{r7}
    7502:	b083      	sub	sp, #12
    7504:	af00      	add	r7, sp, #0
    7506:	6078      	str	r0, [r7, #4]
    7508:	6039      	str	r1, [r7, #0]
  return 0;
    750a:	2300      	movs	r3, #0
}
    750c:	4618      	mov	r0, r3
    750e:	370c      	adds	r7, #12
    7510:	46bd      	mov	sp, r7
    7512:	f85d 7b04 	ldr.w	r7, [sp], #4
    7516:	4770      	bx	lr

00007518 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    7518:	b480      	push	{r7}
    751a:	b083      	sub	sp, #12
    751c:	af00      	add	r7, sp, #0
    751e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    7520:	4a04      	ldr	r2, [pc, #16]	; (7534 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    7522:	687b      	ldr	r3, [r7, #4]
    7524:	6013      	str	r3, [r2, #0]
}
    7526:	bf00      	nop
    7528:	370c      	adds	r7, #12
    752a:	46bd      	mov	sp, r7
    752c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7530:	4770      	bx	lr
    7532:	bf00      	nop
    7534:	1000005c 	.word	0x1000005c

00007538 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    7538:	b480      	push	{r7}
    753a:	b083      	sub	sp, #12
    753c:	af00      	add	r7, sp, #0
    753e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    7540:	4a04      	ldr	r2, [pc, #16]	; (7554 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	6013      	str	r3, [r2, #0]
}
    7546:	bf00      	nop
    7548:	370c      	adds	r7, #12
    754a:	46bd      	mov	sp, r7
    754c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7550:	4770      	bx	lr
    7552:	bf00      	nop
    7554:	10000060 	.word	0x10000060

00007558 <__cxa_pure_virtual>:
    7558:	b508      	push	{r3, lr}
    755a:	f000 f80d 	bl	7578 <std::terminate()>

0000755e <__cxxabiv1::__terminate(void (*)())>:
    755e:	b508      	push	{r3, lr}
    7560:	4780      	blx	r0
    7562:	f001 fc2f 	bl	8dc4 <abort>
    7566:	Address 0x0000000000007566 is out of bounds.


00007568 <std::get_terminate()>:
    7568:	4b02      	ldr	r3, [pc, #8]	; (7574 <std::get_terminate()+0xc>)
    756a:	6818      	ldr	r0, [r3, #0]
    756c:	f3bf 8f5b 	dmb	ish
    7570:	4770      	bx	lr
    7572:	bf00      	nop
    7574:	10000090 	.word	0x10000090

00007578 <std::terminate()>:
    7578:	b508      	push	{r3, lr}
    757a:	f7ff fff5 	bl	7568 <std::get_terminate()>
    757e:	f7ff ffee 	bl	755e <__cxxabiv1::__terminate(void (*)())>
    7582:	Address 0x0000000000007582 is out of bounds.


00007584 <__aeabi_drsub>:
    7584:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    7588:	e002      	b.n	7590 <__adddf3>
    758a:	bf00      	nop

0000758c <__aeabi_dsub>:
    758c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00007590 <__adddf3>:
    7590:	b530      	push	{r4, r5, lr}
    7592:	ea4f 0441 	mov.w	r4, r1, lsl #1
    7596:	ea4f 0543 	mov.w	r5, r3, lsl #1
    759a:	ea94 0f05 	teq	r4, r5
    759e:	bf08      	it	eq
    75a0:	ea90 0f02 	teqeq	r0, r2
    75a4:	bf1f      	itttt	ne
    75a6:	ea54 0c00 	orrsne.w	ip, r4, r0
    75aa:	ea55 0c02 	orrsne.w	ip, r5, r2
    75ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    75b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    75b6:	f000 80e2 	beq.w	777e <__adddf3+0x1ee>
    75ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
    75be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    75c2:	bfb8      	it	lt
    75c4:	426d      	neglt	r5, r5
    75c6:	dd0c      	ble.n	75e2 <__adddf3+0x52>
    75c8:	442c      	add	r4, r5
    75ca:	ea80 0202 	eor.w	r2, r0, r2
    75ce:	ea81 0303 	eor.w	r3, r1, r3
    75d2:	ea82 0000 	eor.w	r0, r2, r0
    75d6:	ea83 0101 	eor.w	r1, r3, r1
    75da:	ea80 0202 	eor.w	r2, r0, r2
    75de:	ea81 0303 	eor.w	r3, r1, r3
    75e2:	2d36      	cmp	r5, #54	; 0x36
    75e4:	bf88      	it	hi
    75e6:	bd30      	pophi	{r4, r5, pc}
    75e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    75ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
    75f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    75f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    75f8:	d002      	beq.n	7600 <__adddf3+0x70>
    75fa:	4240      	negs	r0, r0
    75fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7600:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    7604:	ea4f 3303 	mov.w	r3, r3, lsl #12
    7608:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    760c:	d002      	beq.n	7614 <__adddf3+0x84>
    760e:	4252      	negs	r2, r2
    7610:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    7614:	ea94 0f05 	teq	r4, r5
    7618:	f000 80a7 	beq.w	776a <__adddf3+0x1da>
    761c:	f1a4 0401 	sub.w	r4, r4, #1
    7620:	f1d5 0e20 	rsbs	lr, r5, #32
    7624:	db0d      	blt.n	7642 <__adddf3+0xb2>
    7626:	fa02 fc0e 	lsl.w	ip, r2, lr
    762a:	fa22 f205 	lsr.w	r2, r2, r5
    762e:	1880      	adds	r0, r0, r2
    7630:	f141 0100 	adc.w	r1, r1, #0
    7634:	fa03 f20e 	lsl.w	r2, r3, lr
    7638:	1880      	adds	r0, r0, r2
    763a:	fa43 f305 	asr.w	r3, r3, r5
    763e:	4159      	adcs	r1, r3
    7640:	e00e      	b.n	7660 <__adddf3+0xd0>
    7642:	f1a5 0520 	sub.w	r5, r5, #32
    7646:	f10e 0e20 	add.w	lr, lr, #32
    764a:	2a01      	cmp	r2, #1
    764c:	fa03 fc0e 	lsl.w	ip, r3, lr
    7650:	bf28      	it	cs
    7652:	f04c 0c02 	orrcs.w	ip, ip, #2
    7656:	fa43 f305 	asr.w	r3, r3, r5
    765a:	18c0      	adds	r0, r0, r3
    765c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    7660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7664:	d507      	bpl.n	7676 <__adddf3+0xe6>
    7666:	f04f 0e00 	mov.w	lr, #0
    766a:	f1dc 0c00 	rsbs	ip, ip, #0
    766e:	eb7e 0000 	sbcs.w	r0, lr, r0
    7672:	eb6e 0101 	sbc.w	r1, lr, r1
    7676:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    767a:	d31b      	bcc.n	76b4 <__adddf3+0x124>
    767c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    7680:	d30c      	bcc.n	769c <__adddf3+0x10c>
    7682:	0849      	lsrs	r1, r1, #1
    7684:	ea5f 0030 	movs.w	r0, r0, rrx
    7688:	ea4f 0c3c 	mov.w	ip, ip, rrx
    768c:	f104 0401 	add.w	r4, r4, #1
    7690:	ea4f 5244 	mov.w	r2, r4, lsl #21
    7694:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    7698:	f080 809a 	bcs.w	77d0 <__adddf3+0x240>
    769c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    76a0:	bf08      	it	eq
    76a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    76a6:	f150 0000 	adcs.w	r0, r0, #0
    76aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    76ae:	ea41 0105 	orr.w	r1, r1, r5
    76b2:	bd30      	pop	{r4, r5, pc}
    76b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    76b8:	4140      	adcs	r0, r0
    76ba:	eb41 0101 	adc.w	r1, r1, r1
    76be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    76c2:	f1a4 0401 	sub.w	r4, r4, #1
    76c6:	d1e9      	bne.n	769c <__adddf3+0x10c>
    76c8:	f091 0f00 	teq	r1, #0
    76cc:	bf04      	itt	eq
    76ce:	4601      	moveq	r1, r0
    76d0:	2000      	moveq	r0, #0
    76d2:	fab1 f381 	clz	r3, r1
    76d6:	bf08      	it	eq
    76d8:	3320      	addeq	r3, #32
    76da:	f1a3 030b 	sub.w	r3, r3, #11
    76de:	f1b3 0220 	subs.w	r2, r3, #32
    76e2:	da0c      	bge.n	76fe <__adddf3+0x16e>
    76e4:	320c      	adds	r2, #12
    76e6:	dd08      	ble.n	76fa <__adddf3+0x16a>
    76e8:	f102 0c14 	add.w	ip, r2, #20
    76ec:	f1c2 020c 	rsb	r2, r2, #12
    76f0:	fa01 f00c 	lsl.w	r0, r1, ip
    76f4:	fa21 f102 	lsr.w	r1, r1, r2
    76f8:	e00c      	b.n	7714 <__adddf3+0x184>
    76fa:	f102 0214 	add.w	r2, r2, #20
    76fe:	bfd8      	it	le
    7700:	f1c2 0c20 	rsble	ip, r2, #32
    7704:	fa01 f102 	lsl.w	r1, r1, r2
    7708:	fa20 fc0c 	lsr.w	ip, r0, ip
    770c:	bfdc      	itt	le
    770e:	ea41 010c 	orrle.w	r1, r1, ip
    7712:	4090      	lslle	r0, r2
    7714:	1ae4      	subs	r4, r4, r3
    7716:	bfa2      	ittt	ge
    7718:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    771c:	4329      	orrge	r1, r5
    771e:	bd30      	popge	{r4, r5, pc}
    7720:	ea6f 0404 	mvn.w	r4, r4
    7724:	3c1f      	subs	r4, #31
    7726:	da1c      	bge.n	7762 <__adddf3+0x1d2>
    7728:	340c      	adds	r4, #12
    772a:	dc0e      	bgt.n	774a <__adddf3+0x1ba>
    772c:	f104 0414 	add.w	r4, r4, #20
    7730:	f1c4 0220 	rsb	r2, r4, #32
    7734:	fa20 f004 	lsr.w	r0, r0, r4
    7738:	fa01 f302 	lsl.w	r3, r1, r2
    773c:	ea40 0003 	orr.w	r0, r0, r3
    7740:	fa21 f304 	lsr.w	r3, r1, r4
    7744:	ea45 0103 	orr.w	r1, r5, r3
    7748:	bd30      	pop	{r4, r5, pc}
    774a:	f1c4 040c 	rsb	r4, r4, #12
    774e:	f1c4 0220 	rsb	r2, r4, #32
    7752:	fa20 f002 	lsr.w	r0, r0, r2
    7756:	fa01 f304 	lsl.w	r3, r1, r4
    775a:	ea40 0003 	orr.w	r0, r0, r3
    775e:	4629      	mov	r1, r5
    7760:	bd30      	pop	{r4, r5, pc}
    7762:	fa21 f004 	lsr.w	r0, r1, r4
    7766:	4629      	mov	r1, r5
    7768:	bd30      	pop	{r4, r5, pc}
    776a:	f094 0f00 	teq	r4, #0
    776e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    7772:	bf06      	itte	eq
    7774:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    7778:	3401      	addeq	r4, #1
    777a:	3d01      	subne	r5, #1
    777c:	e74e      	b.n	761c <__adddf3+0x8c>
    777e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    7782:	bf18      	it	ne
    7784:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7788:	d029      	beq.n	77de <__adddf3+0x24e>
    778a:	ea94 0f05 	teq	r4, r5
    778e:	bf08      	it	eq
    7790:	ea90 0f02 	teqeq	r0, r2
    7794:	d005      	beq.n	77a2 <__adddf3+0x212>
    7796:	ea54 0c00 	orrs.w	ip, r4, r0
    779a:	bf04      	itt	eq
    779c:	4619      	moveq	r1, r3
    779e:	4610      	moveq	r0, r2
    77a0:	bd30      	pop	{r4, r5, pc}
    77a2:	ea91 0f03 	teq	r1, r3
    77a6:	bf1e      	ittt	ne
    77a8:	2100      	movne	r1, #0
    77aa:	2000      	movne	r0, #0
    77ac:	bd30      	popne	{r4, r5, pc}
    77ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    77b2:	d105      	bne.n	77c0 <__adddf3+0x230>
    77b4:	0040      	lsls	r0, r0, #1
    77b6:	4149      	adcs	r1, r1
    77b8:	bf28      	it	cs
    77ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    77be:	bd30      	pop	{r4, r5, pc}
    77c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    77c4:	bf3c      	itt	cc
    77c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    77ca:	bd30      	popcc	{r4, r5, pc}
    77cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    77d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    77d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    77d8:	f04f 0000 	mov.w	r0, #0
    77dc:	bd30      	pop	{r4, r5, pc}
    77de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    77e2:	bf1a      	itte	ne
    77e4:	4619      	movne	r1, r3
    77e6:	4610      	movne	r0, r2
    77e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    77ec:	bf1c      	itt	ne
    77ee:	460b      	movne	r3, r1
    77f0:	4602      	movne	r2, r0
    77f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    77f6:	bf06      	itte	eq
    77f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    77fc:	ea91 0f03 	teqeq	r1, r3
    7800:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    7804:	bd30      	pop	{r4, r5, pc}
    7806:	bf00      	nop

00007808 <__aeabi_ui2d>:
    7808:	f090 0f00 	teq	r0, #0
    780c:	bf04      	itt	eq
    780e:	2100      	moveq	r1, #0
    7810:	4770      	bxeq	lr
    7812:	b530      	push	{r4, r5, lr}
    7814:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7818:	f104 0432 	add.w	r4, r4, #50	; 0x32
    781c:	f04f 0500 	mov.w	r5, #0
    7820:	f04f 0100 	mov.w	r1, #0
    7824:	e750      	b.n	76c8 <__adddf3+0x138>
    7826:	bf00      	nop

00007828 <__aeabi_i2d>:
    7828:	f090 0f00 	teq	r0, #0
    782c:	bf04      	itt	eq
    782e:	2100      	moveq	r1, #0
    7830:	4770      	bxeq	lr
    7832:	b530      	push	{r4, r5, lr}
    7834:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7838:	f104 0432 	add.w	r4, r4, #50	; 0x32
    783c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    7840:	bf48      	it	mi
    7842:	4240      	negmi	r0, r0
    7844:	f04f 0100 	mov.w	r1, #0
    7848:	e73e      	b.n	76c8 <__adddf3+0x138>
    784a:	bf00      	nop

0000784c <__aeabi_f2d>:
    784c:	0042      	lsls	r2, r0, #1
    784e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    7852:	ea4f 0131 	mov.w	r1, r1, rrx
    7856:	ea4f 7002 	mov.w	r0, r2, lsl #28
    785a:	bf1f      	itttt	ne
    785c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    7860:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    7864:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    7868:	4770      	bxne	lr
    786a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    786e:	bf08      	it	eq
    7870:	4770      	bxeq	lr
    7872:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    7876:	bf04      	itt	eq
    7878:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    787c:	4770      	bxeq	lr
    787e:	b530      	push	{r4, r5, lr}
    7880:	f44f 7460 	mov.w	r4, #896	; 0x380
    7884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    788c:	e71c      	b.n	76c8 <__adddf3+0x138>
    788e:	bf00      	nop

00007890 <__aeabi_ul2d>:
    7890:	ea50 0201 	orrs.w	r2, r0, r1
    7894:	bf08      	it	eq
    7896:	4770      	bxeq	lr
    7898:	b530      	push	{r4, r5, lr}
    789a:	f04f 0500 	mov.w	r5, #0
    789e:	e00a      	b.n	78b6 <__aeabi_l2d+0x16>

000078a0 <__aeabi_l2d>:
    78a0:	ea50 0201 	orrs.w	r2, r0, r1
    78a4:	bf08      	it	eq
    78a6:	4770      	bxeq	lr
    78a8:	b530      	push	{r4, r5, lr}
    78aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    78ae:	d502      	bpl.n	78b6 <__aeabi_l2d+0x16>
    78b0:	4240      	negs	r0, r0
    78b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    78b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    78ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
    78be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    78c2:	f43f aed8 	beq.w	7676 <__adddf3+0xe6>
    78c6:	f04f 0203 	mov.w	r2, #3
    78ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    78ce:	bf18      	it	ne
    78d0:	3203      	addne	r2, #3
    78d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    78d6:	bf18      	it	ne
    78d8:	3203      	addne	r2, #3
    78da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    78de:	f1c2 0320 	rsb	r3, r2, #32
    78e2:	fa00 fc03 	lsl.w	ip, r0, r3
    78e6:	fa20 f002 	lsr.w	r0, r0, r2
    78ea:	fa01 fe03 	lsl.w	lr, r1, r3
    78ee:	ea40 000e 	orr.w	r0, r0, lr
    78f2:	fa21 f102 	lsr.w	r1, r1, r2
    78f6:	4414      	add	r4, r2
    78f8:	e6bd      	b.n	7676 <__adddf3+0xe6>
    78fa:	bf00      	nop

000078fc <__aeabi_d2f>:
    78fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    7900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    7904:	bf24      	itt	cs
    7906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    790a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    790e:	d90d      	bls.n	792c <__aeabi_d2f+0x30>
    7910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    7914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    7918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    791c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    7924:	bf08      	it	eq
    7926:	f020 0001 	biceq.w	r0, r0, #1
    792a:	4770      	bx	lr
    792c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    7930:	d121      	bne.n	7976 <__aeabi_d2f+0x7a>
    7932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    7936:	bfbc      	itt	lt
    7938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    793c:	4770      	bxlt	lr
    793e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7942:	ea4f 5252 	mov.w	r2, r2, lsr #21
    7946:	f1c2 0218 	rsb	r2, r2, #24
    794a:	f1c2 0c20 	rsb	ip, r2, #32
    794e:	fa10 f30c 	lsls.w	r3, r0, ip
    7952:	fa20 f002 	lsr.w	r0, r0, r2
    7956:	bf18      	it	ne
    7958:	f040 0001 	orrne.w	r0, r0, #1
    795c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    7960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    7964:	fa03 fc0c 	lsl.w	ip, r3, ip
    7968:	ea40 000c 	orr.w	r0, r0, ip
    796c:	fa23 f302 	lsr.w	r3, r3, r2
    7970:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7974:	e7cc      	b.n	7910 <__aeabi_d2f+0x14>
    7976:	ea7f 5362 	mvns.w	r3, r2, asr #21
    797a:	d107      	bne.n	798c <__aeabi_d2f+0x90>
    797c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    7980:	bf1e      	ittt	ne
    7982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    7986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    798a:	4770      	bxne	lr
    798c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    7990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7998:	4770      	bx	lr
    799a:	bf00      	nop

0000799c <__aeabi_frsub>:
    799c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    79a0:	e002      	b.n	79a8 <__addsf3>
    79a2:	bf00      	nop

000079a4 <__aeabi_fsub>:
    79a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000079a8 <__addsf3>:
    79a8:	0042      	lsls	r2, r0, #1
    79aa:	bf1f      	itttt	ne
    79ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    79b0:	ea92 0f03 	teqne	r2, r3
    79b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    79b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    79bc:	d06a      	beq.n	7a94 <__addsf3+0xec>
    79be:	ea4f 6212 	mov.w	r2, r2, lsr #24
    79c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    79c6:	bfc1      	itttt	gt
    79c8:	18d2      	addgt	r2, r2, r3
    79ca:	4041      	eorgt	r1, r0
    79cc:	4048      	eorgt	r0, r1
    79ce:	4041      	eorgt	r1, r0
    79d0:	bfb8      	it	lt
    79d2:	425b      	neglt	r3, r3
    79d4:	2b19      	cmp	r3, #25
    79d6:	bf88      	it	hi
    79d8:	4770      	bxhi	lr
    79da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    79de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    79e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    79e6:	bf18      	it	ne
    79e8:	4240      	negne	r0, r0
    79ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    79ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    79f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    79f6:	bf18      	it	ne
    79f8:	4249      	negne	r1, r1
    79fa:	ea92 0f03 	teq	r2, r3
    79fe:	d03f      	beq.n	7a80 <__addsf3+0xd8>
    7a00:	f1a2 0201 	sub.w	r2, r2, #1
    7a04:	fa41 fc03 	asr.w	ip, r1, r3
    7a08:	eb10 000c 	adds.w	r0, r0, ip
    7a0c:	f1c3 0320 	rsb	r3, r3, #32
    7a10:	fa01 f103 	lsl.w	r1, r1, r3
    7a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7a18:	d502      	bpl.n	7a20 <__addsf3+0x78>
    7a1a:	4249      	negs	r1, r1
    7a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    7a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7a24:	d313      	bcc.n	7a4e <__addsf3+0xa6>
    7a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    7a2a:	d306      	bcc.n	7a3a <__addsf3+0x92>
    7a2c:	0840      	lsrs	r0, r0, #1
    7a2e:	ea4f 0131 	mov.w	r1, r1, rrx
    7a32:	f102 0201 	add.w	r2, r2, #1
    7a36:	2afe      	cmp	r2, #254	; 0xfe
    7a38:	d251      	bcs.n	7ade <__addsf3+0x136>
    7a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    7a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7a42:	bf08      	it	eq
    7a44:	f020 0001 	biceq.w	r0, r0, #1
    7a48:	ea40 0003 	orr.w	r0, r0, r3
    7a4c:	4770      	bx	lr
    7a4e:	0049      	lsls	r1, r1, #1
    7a50:	eb40 0000 	adc.w	r0, r0, r0
    7a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    7a58:	f1a2 0201 	sub.w	r2, r2, #1
    7a5c:	d1ed      	bne.n	7a3a <__addsf3+0x92>
    7a5e:	fab0 fc80 	clz	ip, r0
    7a62:	f1ac 0c08 	sub.w	ip, ip, #8
    7a66:	ebb2 020c 	subs.w	r2, r2, ip
    7a6a:	fa00 f00c 	lsl.w	r0, r0, ip
    7a6e:	bfaa      	itet	ge
    7a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    7a74:	4252      	neglt	r2, r2
    7a76:	4318      	orrge	r0, r3
    7a78:	bfbc      	itt	lt
    7a7a:	40d0      	lsrlt	r0, r2
    7a7c:	4318      	orrlt	r0, r3
    7a7e:	4770      	bx	lr
    7a80:	f092 0f00 	teq	r2, #0
    7a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    7a88:	bf06      	itte	eq
    7a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    7a8e:	3201      	addeq	r2, #1
    7a90:	3b01      	subne	r3, #1
    7a92:	e7b5      	b.n	7a00 <__addsf3+0x58>
    7a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7a9c:	bf18      	it	ne
    7a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7aa2:	d021      	beq.n	7ae8 <__addsf3+0x140>
    7aa4:	ea92 0f03 	teq	r2, r3
    7aa8:	d004      	beq.n	7ab4 <__addsf3+0x10c>
    7aaa:	f092 0f00 	teq	r2, #0
    7aae:	bf08      	it	eq
    7ab0:	4608      	moveq	r0, r1
    7ab2:	4770      	bx	lr
    7ab4:	ea90 0f01 	teq	r0, r1
    7ab8:	bf1c      	itt	ne
    7aba:	2000      	movne	r0, #0
    7abc:	4770      	bxne	lr
    7abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    7ac2:	d104      	bne.n	7ace <__addsf3+0x126>
    7ac4:	0040      	lsls	r0, r0, #1
    7ac6:	bf28      	it	cs
    7ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    7acc:	4770      	bx	lr
    7ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    7ad2:	bf3c      	itt	cc
    7ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    7ad8:	4770      	bxcc	lr
    7ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    7ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7ae6:	4770      	bx	lr
    7ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
    7aec:	bf16      	itet	ne
    7aee:	4608      	movne	r0, r1
    7af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    7af4:	4601      	movne	r1, r0
    7af6:	0242      	lsls	r2, r0, #9
    7af8:	bf06      	itte	eq
    7afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    7afe:	ea90 0f01 	teqeq	r0, r1
    7b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    7b06:	4770      	bx	lr

00007b08 <__aeabi_ui2f>:
    7b08:	f04f 0300 	mov.w	r3, #0
    7b0c:	e004      	b.n	7b18 <__aeabi_i2f+0x8>
    7b0e:	bf00      	nop

00007b10 <__aeabi_i2f>:
    7b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    7b14:	bf48      	it	mi
    7b16:	4240      	negmi	r0, r0
    7b18:	ea5f 0c00 	movs.w	ip, r0
    7b1c:	bf08      	it	eq
    7b1e:	4770      	bxeq	lr
    7b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    7b24:	4601      	mov	r1, r0
    7b26:	f04f 0000 	mov.w	r0, #0
    7b2a:	e01c      	b.n	7b66 <__aeabi_l2f+0x2a>

00007b2c <__aeabi_ul2f>:
    7b2c:	ea50 0201 	orrs.w	r2, r0, r1
    7b30:	bf08      	it	eq
    7b32:	4770      	bxeq	lr
    7b34:	f04f 0300 	mov.w	r3, #0
    7b38:	e00a      	b.n	7b50 <__aeabi_l2f+0x14>
    7b3a:	bf00      	nop

00007b3c <__aeabi_l2f>:
    7b3c:	ea50 0201 	orrs.w	r2, r0, r1
    7b40:	bf08      	it	eq
    7b42:	4770      	bxeq	lr
    7b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    7b48:	d502      	bpl.n	7b50 <__aeabi_l2f+0x14>
    7b4a:	4240      	negs	r0, r0
    7b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7b50:	ea5f 0c01 	movs.w	ip, r1
    7b54:	bf02      	ittt	eq
    7b56:	4684      	moveq	ip, r0
    7b58:	4601      	moveq	r1, r0
    7b5a:	2000      	moveq	r0, #0
    7b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    7b60:	bf08      	it	eq
    7b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    7b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    7b6a:	fabc f28c 	clz	r2, ip
    7b6e:	3a08      	subs	r2, #8
    7b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    7b74:	db10      	blt.n	7b98 <__aeabi_l2f+0x5c>
    7b76:	fa01 fc02 	lsl.w	ip, r1, r2
    7b7a:	4463      	add	r3, ip
    7b7c:	fa00 fc02 	lsl.w	ip, r0, r2
    7b80:	f1c2 0220 	rsb	r2, r2, #32
    7b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7b88:	fa20 f202 	lsr.w	r2, r0, r2
    7b8c:	eb43 0002 	adc.w	r0, r3, r2
    7b90:	bf08      	it	eq
    7b92:	f020 0001 	biceq.w	r0, r0, #1
    7b96:	4770      	bx	lr
    7b98:	f102 0220 	add.w	r2, r2, #32
    7b9c:	fa01 fc02 	lsl.w	ip, r1, r2
    7ba0:	f1c2 0220 	rsb	r2, r2, #32
    7ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    7ba8:	fa21 f202 	lsr.w	r2, r1, r2
    7bac:	eb43 0002 	adc.w	r0, r3, r2
    7bb0:	bf08      	it	eq
    7bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7bb6:	4770      	bx	lr

00007bb8 <__aeabi_uldivmod>:
    7bb8:	b953      	cbnz	r3, 7bd0 <__aeabi_uldivmod+0x18>
    7bba:	b94a      	cbnz	r2, 7bd0 <__aeabi_uldivmod+0x18>
    7bbc:	2900      	cmp	r1, #0
    7bbe:	bf08      	it	eq
    7bc0:	2800      	cmpeq	r0, #0
    7bc2:	bf1c      	itt	ne
    7bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7bcc:	f001 b8f8 	b.w	8dc0 <__aeabi_idiv0>
    7bd0:	f1ad 0c08 	sub.w	ip, sp, #8
    7bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    7bd8:	f000 f806 	bl	7be8 <__udivmoddi4>
    7bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
    7be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7be4:	b004      	add	sp, #16
    7be6:	4770      	bx	lr

00007be8 <__udivmoddi4>:
    7be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bec:	9e08      	ldr	r6, [sp, #32]
    7bee:	4604      	mov	r4, r0
    7bf0:	4688      	mov	r8, r1
    7bf2:	2b00      	cmp	r3, #0
    7bf4:	d14b      	bne.n	7c8e <__udivmoddi4+0xa6>
    7bf6:	428a      	cmp	r2, r1
    7bf8:	4615      	mov	r5, r2
    7bfa:	d967      	bls.n	7ccc <__udivmoddi4+0xe4>
    7bfc:	fab2 f282 	clz	r2, r2
    7c00:	b14a      	cbz	r2, 7c16 <__udivmoddi4+0x2e>
    7c02:	f1c2 0720 	rsb	r7, r2, #32
    7c06:	fa01 f302 	lsl.w	r3, r1, r2
    7c0a:	fa20 f707 	lsr.w	r7, r0, r7
    7c0e:	4095      	lsls	r5, r2
    7c10:	ea47 0803 	orr.w	r8, r7, r3
    7c14:	4094      	lsls	r4, r2
    7c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7c1a:	0c23      	lsrs	r3, r4, #16
    7c1c:	fbb8 f7fe 	udiv	r7, r8, lr
    7c20:	fa1f fc85 	uxth.w	ip, r5
    7c24:	fb0e 8817 	mls	r8, lr, r7, r8
    7c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    7c2c:	fb07 f10c 	mul.w	r1, r7, ip
    7c30:	4299      	cmp	r1, r3
    7c32:	d909      	bls.n	7c48 <__udivmoddi4+0x60>
    7c34:	18eb      	adds	r3, r5, r3
    7c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    7c3a:	f080 811b 	bcs.w	7e74 <__udivmoddi4+0x28c>
    7c3e:	4299      	cmp	r1, r3
    7c40:	f240 8118 	bls.w	7e74 <__udivmoddi4+0x28c>
    7c44:	3f02      	subs	r7, #2
    7c46:	442b      	add	r3, r5
    7c48:	1a5b      	subs	r3, r3, r1
    7c4a:	b2a4      	uxth	r4, r4
    7c4c:	fbb3 f0fe 	udiv	r0, r3, lr
    7c50:	fb0e 3310 	mls	r3, lr, r0, r3
    7c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7c58:	fb00 fc0c 	mul.w	ip, r0, ip
    7c5c:	45a4      	cmp	ip, r4
    7c5e:	d909      	bls.n	7c74 <__udivmoddi4+0x8c>
    7c60:	192c      	adds	r4, r5, r4
    7c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7c66:	f080 8107 	bcs.w	7e78 <__udivmoddi4+0x290>
    7c6a:	45a4      	cmp	ip, r4
    7c6c:	f240 8104 	bls.w	7e78 <__udivmoddi4+0x290>
    7c70:	3802      	subs	r0, #2
    7c72:	442c      	add	r4, r5
    7c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    7c78:	eba4 040c 	sub.w	r4, r4, ip
    7c7c:	2700      	movs	r7, #0
    7c7e:	b11e      	cbz	r6, 7c88 <__udivmoddi4+0xa0>
    7c80:	40d4      	lsrs	r4, r2
    7c82:	2300      	movs	r3, #0
    7c84:	e9c6 4300 	strd	r4, r3, [r6]
    7c88:	4639      	mov	r1, r7
    7c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c8e:	428b      	cmp	r3, r1
    7c90:	d909      	bls.n	7ca6 <__udivmoddi4+0xbe>
    7c92:	2e00      	cmp	r6, #0
    7c94:	f000 80eb 	beq.w	7e6e <__udivmoddi4+0x286>
    7c98:	2700      	movs	r7, #0
    7c9a:	e9c6 0100 	strd	r0, r1, [r6]
    7c9e:	4638      	mov	r0, r7
    7ca0:	4639      	mov	r1, r7
    7ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ca6:	fab3 f783 	clz	r7, r3
    7caa:	2f00      	cmp	r7, #0
    7cac:	d147      	bne.n	7d3e <__udivmoddi4+0x156>
    7cae:	428b      	cmp	r3, r1
    7cb0:	d302      	bcc.n	7cb8 <__udivmoddi4+0xd0>
    7cb2:	4282      	cmp	r2, r0
    7cb4:	f200 80fa 	bhi.w	7eac <__udivmoddi4+0x2c4>
    7cb8:	1a84      	subs	r4, r0, r2
    7cba:	eb61 0303 	sbc.w	r3, r1, r3
    7cbe:	2001      	movs	r0, #1
    7cc0:	4698      	mov	r8, r3
    7cc2:	2e00      	cmp	r6, #0
    7cc4:	d0e0      	beq.n	7c88 <__udivmoddi4+0xa0>
    7cc6:	e9c6 4800 	strd	r4, r8, [r6]
    7cca:	e7dd      	b.n	7c88 <__udivmoddi4+0xa0>
    7ccc:	b902      	cbnz	r2, 7cd0 <__udivmoddi4+0xe8>
    7cce:	deff      	udf	#255	; 0xff
    7cd0:	fab2 f282 	clz	r2, r2
    7cd4:	2a00      	cmp	r2, #0
    7cd6:	f040 808f 	bne.w	7df8 <__udivmoddi4+0x210>
    7cda:	1b49      	subs	r1, r1, r5
    7cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7ce0:	fa1f f885 	uxth.w	r8, r5
    7ce4:	2701      	movs	r7, #1
    7ce6:	fbb1 fcfe 	udiv	ip, r1, lr
    7cea:	0c23      	lsrs	r3, r4, #16
    7cec:	fb0e 111c 	mls	r1, lr, ip, r1
    7cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7cf4:	fb08 f10c 	mul.w	r1, r8, ip
    7cf8:	4299      	cmp	r1, r3
    7cfa:	d907      	bls.n	7d0c <__udivmoddi4+0x124>
    7cfc:	18eb      	adds	r3, r5, r3
    7cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    7d02:	d202      	bcs.n	7d0a <__udivmoddi4+0x122>
    7d04:	4299      	cmp	r1, r3
    7d06:	f200 80cd 	bhi.w	7ea4 <__udivmoddi4+0x2bc>
    7d0a:	4684      	mov	ip, r0
    7d0c:	1a59      	subs	r1, r3, r1
    7d0e:	b2a3      	uxth	r3, r4
    7d10:	fbb1 f0fe 	udiv	r0, r1, lr
    7d14:	fb0e 1410 	mls	r4, lr, r0, r1
    7d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    7d1c:	fb08 f800 	mul.w	r8, r8, r0
    7d20:	45a0      	cmp	r8, r4
    7d22:	d907      	bls.n	7d34 <__udivmoddi4+0x14c>
    7d24:	192c      	adds	r4, r5, r4
    7d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7d2a:	d202      	bcs.n	7d32 <__udivmoddi4+0x14a>
    7d2c:	45a0      	cmp	r8, r4
    7d2e:	f200 80b6 	bhi.w	7e9e <__udivmoddi4+0x2b6>
    7d32:	4618      	mov	r0, r3
    7d34:	eba4 0408 	sub.w	r4, r4, r8
    7d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    7d3c:	e79f      	b.n	7c7e <__udivmoddi4+0x96>
    7d3e:	f1c7 0c20 	rsb	ip, r7, #32
    7d42:	40bb      	lsls	r3, r7
    7d44:	fa22 fe0c 	lsr.w	lr, r2, ip
    7d48:	ea4e 0e03 	orr.w	lr, lr, r3
    7d4c:	fa01 f407 	lsl.w	r4, r1, r7
    7d50:	fa20 f50c 	lsr.w	r5, r0, ip
    7d54:	fa21 f30c 	lsr.w	r3, r1, ip
    7d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
    7d5c:	4325      	orrs	r5, r4
    7d5e:	fbb3 f9f8 	udiv	r9, r3, r8
    7d62:	0c2c      	lsrs	r4, r5, #16
    7d64:	fb08 3319 	mls	r3, r8, r9, r3
    7d68:	fa1f fa8e 	uxth.w	sl, lr
    7d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    7d70:	fb09 f40a 	mul.w	r4, r9, sl
    7d74:	429c      	cmp	r4, r3
    7d76:	fa02 f207 	lsl.w	r2, r2, r7
    7d7a:	fa00 f107 	lsl.w	r1, r0, r7
    7d7e:	d90b      	bls.n	7d98 <__udivmoddi4+0x1b0>
    7d80:	eb1e 0303 	adds.w	r3, lr, r3
    7d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    7d88:	f080 8087 	bcs.w	7e9a <__udivmoddi4+0x2b2>
    7d8c:	429c      	cmp	r4, r3
    7d8e:	f240 8084 	bls.w	7e9a <__udivmoddi4+0x2b2>
    7d92:	f1a9 0902 	sub.w	r9, r9, #2
    7d96:	4473      	add	r3, lr
    7d98:	1b1b      	subs	r3, r3, r4
    7d9a:	b2ad      	uxth	r5, r5
    7d9c:	fbb3 f0f8 	udiv	r0, r3, r8
    7da0:	fb08 3310 	mls	r3, r8, r0, r3
    7da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    7da8:	fb00 fa0a 	mul.w	sl, r0, sl
    7dac:	45a2      	cmp	sl, r4
    7dae:	d908      	bls.n	7dc2 <__udivmoddi4+0x1da>
    7db0:	eb1e 0404 	adds.w	r4, lr, r4
    7db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7db8:	d26b      	bcs.n	7e92 <__udivmoddi4+0x2aa>
    7dba:	45a2      	cmp	sl, r4
    7dbc:	d969      	bls.n	7e92 <__udivmoddi4+0x2aa>
    7dbe:	3802      	subs	r0, #2
    7dc0:	4474      	add	r4, lr
    7dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    7dc6:	fba0 8902 	umull	r8, r9, r0, r2
    7dca:	eba4 040a 	sub.w	r4, r4, sl
    7dce:	454c      	cmp	r4, r9
    7dd0:	46c2      	mov	sl, r8
    7dd2:	464b      	mov	r3, r9
    7dd4:	d354      	bcc.n	7e80 <__udivmoddi4+0x298>
    7dd6:	d051      	beq.n	7e7c <__udivmoddi4+0x294>
    7dd8:	2e00      	cmp	r6, #0
    7dda:	d069      	beq.n	7eb0 <__udivmoddi4+0x2c8>
    7ddc:	ebb1 050a 	subs.w	r5, r1, sl
    7de0:	eb64 0403 	sbc.w	r4, r4, r3
    7de4:	fa04 fc0c 	lsl.w	ip, r4, ip
    7de8:	40fd      	lsrs	r5, r7
    7dea:	40fc      	lsrs	r4, r7
    7dec:	ea4c 0505 	orr.w	r5, ip, r5
    7df0:	e9c6 5400 	strd	r5, r4, [r6]
    7df4:	2700      	movs	r7, #0
    7df6:	e747      	b.n	7c88 <__udivmoddi4+0xa0>
    7df8:	f1c2 0320 	rsb	r3, r2, #32
    7dfc:	fa20 f703 	lsr.w	r7, r0, r3
    7e00:	4095      	lsls	r5, r2
    7e02:	fa01 f002 	lsl.w	r0, r1, r2
    7e06:	fa21 f303 	lsr.w	r3, r1, r3
    7e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7e0e:	4338      	orrs	r0, r7
    7e10:	0c01      	lsrs	r1, r0, #16
    7e12:	fbb3 f7fe 	udiv	r7, r3, lr
    7e16:	fa1f f885 	uxth.w	r8, r5
    7e1a:	fb0e 3317 	mls	r3, lr, r7, r3
    7e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    7e22:	fb07 f308 	mul.w	r3, r7, r8
    7e26:	428b      	cmp	r3, r1
    7e28:	fa04 f402 	lsl.w	r4, r4, r2
    7e2c:	d907      	bls.n	7e3e <__udivmoddi4+0x256>
    7e2e:	1869      	adds	r1, r5, r1
    7e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    7e34:	d22f      	bcs.n	7e96 <__udivmoddi4+0x2ae>
    7e36:	428b      	cmp	r3, r1
    7e38:	d92d      	bls.n	7e96 <__udivmoddi4+0x2ae>
    7e3a:	3f02      	subs	r7, #2
    7e3c:	4429      	add	r1, r5
    7e3e:	1acb      	subs	r3, r1, r3
    7e40:	b281      	uxth	r1, r0
    7e42:	fbb3 f0fe 	udiv	r0, r3, lr
    7e46:	fb0e 3310 	mls	r3, lr, r0, r3
    7e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    7e4e:	fb00 f308 	mul.w	r3, r0, r8
    7e52:	428b      	cmp	r3, r1
    7e54:	d907      	bls.n	7e66 <__udivmoddi4+0x27e>
    7e56:	1869      	adds	r1, r5, r1
    7e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    7e5c:	d217      	bcs.n	7e8e <__udivmoddi4+0x2a6>
    7e5e:	428b      	cmp	r3, r1
    7e60:	d915      	bls.n	7e8e <__udivmoddi4+0x2a6>
    7e62:	3802      	subs	r0, #2
    7e64:	4429      	add	r1, r5
    7e66:	1ac9      	subs	r1, r1, r3
    7e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    7e6c:	e73b      	b.n	7ce6 <__udivmoddi4+0xfe>
    7e6e:	4637      	mov	r7, r6
    7e70:	4630      	mov	r0, r6
    7e72:	e709      	b.n	7c88 <__udivmoddi4+0xa0>
    7e74:	4607      	mov	r7, r0
    7e76:	e6e7      	b.n	7c48 <__udivmoddi4+0x60>
    7e78:	4618      	mov	r0, r3
    7e7a:	e6fb      	b.n	7c74 <__udivmoddi4+0x8c>
    7e7c:	4541      	cmp	r1, r8
    7e7e:	d2ab      	bcs.n	7dd8 <__udivmoddi4+0x1f0>
    7e80:	ebb8 0a02 	subs.w	sl, r8, r2
    7e84:	eb69 020e 	sbc.w	r2, r9, lr
    7e88:	3801      	subs	r0, #1
    7e8a:	4613      	mov	r3, r2
    7e8c:	e7a4      	b.n	7dd8 <__udivmoddi4+0x1f0>
    7e8e:	4660      	mov	r0, ip
    7e90:	e7e9      	b.n	7e66 <__udivmoddi4+0x27e>
    7e92:	4618      	mov	r0, r3
    7e94:	e795      	b.n	7dc2 <__udivmoddi4+0x1da>
    7e96:	4667      	mov	r7, ip
    7e98:	e7d1      	b.n	7e3e <__udivmoddi4+0x256>
    7e9a:	4681      	mov	r9, r0
    7e9c:	e77c      	b.n	7d98 <__udivmoddi4+0x1b0>
    7e9e:	3802      	subs	r0, #2
    7ea0:	442c      	add	r4, r5
    7ea2:	e747      	b.n	7d34 <__udivmoddi4+0x14c>
    7ea4:	f1ac 0c02 	sub.w	ip, ip, #2
    7ea8:	442b      	add	r3, r5
    7eaa:	e72f      	b.n	7d0c <__udivmoddi4+0x124>
    7eac:	4638      	mov	r0, r7
    7eae:	e708      	b.n	7cc2 <__udivmoddi4+0xda>
    7eb0:	4637      	mov	r7, r6
    7eb2:	e6e9      	b.n	7c88 <__udivmoddi4+0xa0>

00007eb4 <selfrel_offset31>:
    7eb4:	6803      	ldr	r3, [r0, #0]
    7eb6:	005a      	lsls	r2, r3, #1
    7eb8:	bf4c      	ite	mi
    7eba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    7ebe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    7ec2:	4418      	add	r0, r3
    7ec4:	4770      	bx	lr
    7ec6:	bf00      	nop

00007ec8 <search_EIT_table>:
    7ec8:	b361      	cbz	r1, 7f24 <search_EIT_table+0x5c>
    7eca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ece:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    7ed2:	4690      	mov	r8, r2
    7ed4:	4606      	mov	r6, r0
    7ed6:	46d1      	mov	r9, sl
    7ed8:	2700      	movs	r7, #0
    7eda:	eb07 0409 	add.w	r4, r7, r9
    7ede:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    7ee2:	1064      	asrs	r4, r4, #1
    7ee4:	00e5      	lsls	r5, r4, #3
    7ee6:	1971      	adds	r1, r6, r5
    7ee8:	4608      	mov	r0, r1
    7eea:	f7ff ffe3 	bl	7eb4 <selfrel_offset31>
    7eee:	45a2      	cmp	sl, r4
    7ef0:	4683      	mov	fp, r0
    7ef2:	f105 0008 	add.w	r0, r5, #8
    7ef6:	4430      	add	r0, r6
    7ef8:	d009      	beq.n	7f0e <search_EIT_table+0x46>
    7efa:	f7ff ffdb 	bl	7eb4 <selfrel_offset31>
    7efe:	45c3      	cmp	fp, r8
    7f00:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    7f04:	d805      	bhi.n	7f12 <search_EIT_table+0x4a>
    7f06:	4540      	cmp	r0, r8
    7f08:	d209      	bcs.n	7f1e <search_EIT_table+0x56>
    7f0a:	1c67      	adds	r7, r4, #1
    7f0c:	e7e5      	b.n	7eda <search_EIT_table+0x12>
    7f0e:	45c3      	cmp	fp, r8
    7f10:	d905      	bls.n	7f1e <search_EIT_table+0x56>
    7f12:	42a7      	cmp	r7, r4
    7f14:	d002      	beq.n	7f1c <search_EIT_table+0x54>
    7f16:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    7f1a:	e7de      	b.n	7eda <search_EIT_table+0x12>
    7f1c:	2100      	movs	r1, #0
    7f1e:	4608      	mov	r0, r1
    7f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f24:	4608      	mov	r0, r1
    7f26:	4770      	bx	lr

00007f28 <__gnu_unwind_get_pr_addr>:
    7f28:	2801      	cmp	r0, #1
    7f2a:	d007      	beq.n	7f3c <__gnu_unwind_get_pr_addr+0x14>
    7f2c:	2802      	cmp	r0, #2
    7f2e:	d007      	beq.n	7f40 <__gnu_unwind_get_pr_addr+0x18>
    7f30:	4b04      	ldr	r3, [pc, #16]	; (7f44 <__gnu_unwind_get_pr_addr+0x1c>)
    7f32:	2800      	cmp	r0, #0
    7f34:	bf0c      	ite	eq
    7f36:	4618      	moveq	r0, r3
    7f38:	2000      	movne	r0, #0
    7f3a:	4770      	bx	lr
    7f3c:	4802      	ldr	r0, [pc, #8]	; (7f48 <__gnu_unwind_get_pr_addr+0x20>)
    7f3e:	4770      	bx	lr
    7f40:	4802      	ldr	r0, [pc, #8]	; (7f4c <__gnu_unwind_get_pr_addr+0x24>)
    7f42:	4770      	bx	lr
    7f44:	00008615 	.word	0x00008615
    7f48:	00008619 	.word	0x00008619
    7f4c:	0000861d 	.word	0x0000861d

00007f50 <get_eit_entry>:
    7f50:	b530      	push	{r4, r5, lr}
    7f52:	4b25      	ldr	r3, [pc, #148]	; (7fe8 <get_eit_entry+0x98>)
    7f54:	b083      	sub	sp, #12
    7f56:	4604      	mov	r4, r0
    7f58:	1e8d      	subs	r5, r1, #2
    7f5a:	b34b      	cbz	r3, 7fb0 <get_eit_entry+0x60>
    7f5c:	a901      	add	r1, sp, #4
    7f5e:	4628      	mov	r0, r5
    7f60:	f3af 8000 	nop.w
    7f64:	b1f0      	cbz	r0, 7fa4 <get_eit_entry+0x54>
    7f66:	9901      	ldr	r1, [sp, #4]
    7f68:	462a      	mov	r2, r5
    7f6a:	f7ff ffad 	bl	7ec8 <search_EIT_table>
    7f6e:	4601      	mov	r1, r0
    7f70:	b1c0      	cbz	r0, 7fa4 <get_eit_entry+0x54>
    7f72:	f7ff ff9f 	bl	7eb4 <selfrel_offset31>
    7f76:	684b      	ldr	r3, [r1, #4]
    7f78:	64a0      	str	r0, [r4, #72]	; 0x48
    7f7a:	2b01      	cmp	r3, #1
    7f7c:	d02e      	beq.n	7fdc <get_eit_entry+0x8c>
    7f7e:	2b00      	cmp	r3, #0
    7f80:	f101 0004 	add.w	r0, r1, #4
    7f84:	db26      	blt.n	7fd4 <get_eit_entry+0x84>
    7f86:	f7ff ff95 	bl	7eb4 <selfrel_offset31>
    7f8a:	2300      	movs	r3, #0
    7f8c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7f90:	6803      	ldr	r3, [r0, #0]
    7f92:	2b00      	cmp	r3, #0
    7f94:	db12      	blt.n	7fbc <get_eit_entry+0x6c>
    7f96:	f7ff ff8d 	bl	7eb4 <selfrel_offset31>
    7f9a:	2300      	movs	r3, #0
    7f9c:	6120      	str	r0, [r4, #16]
    7f9e:	4618      	mov	r0, r3
    7fa0:	b003      	add	sp, #12
    7fa2:	bd30      	pop	{r4, r5, pc}
    7fa4:	2300      	movs	r3, #0
    7fa6:	6123      	str	r3, [r4, #16]
    7fa8:	2309      	movs	r3, #9
    7faa:	4618      	mov	r0, r3
    7fac:	b003      	add	sp, #12
    7fae:	bd30      	pop	{r4, r5, pc}
    7fb0:	490e      	ldr	r1, [pc, #56]	; (7fec <get_eit_entry+0x9c>)
    7fb2:	480f      	ldr	r0, [pc, #60]	; (7ff0 <get_eit_entry+0xa0>)
    7fb4:	1a09      	subs	r1, r1, r0
    7fb6:	10c9      	asrs	r1, r1, #3
    7fb8:	9101      	str	r1, [sp, #4]
    7fba:	e7d5      	b.n	7f68 <get_eit_entry+0x18>
    7fbc:	f3c3 6003 	ubfx	r0, r3, #24, #4
    7fc0:	f7ff ffb2 	bl	7f28 <__gnu_unwind_get_pr_addr>
    7fc4:	2800      	cmp	r0, #0
    7fc6:	bf14      	ite	ne
    7fc8:	2300      	movne	r3, #0
    7fca:	2309      	moveq	r3, #9
    7fcc:	6120      	str	r0, [r4, #16]
    7fce:	4618      	mov	r0, r3
    7fd0:	b003      	add	sp, #12
    7fd2:	bd30      	pop	{r4, r5, pc}
    7fd4:	2301      	movs	r3, #1
    7fd6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7fda:	e7d9      	b.n	7f90 <get_eit_entry+0x40>
    7fdc:	2300      	movs	r3, #0
    7fde:	6123      	str	r3, [r4, #16]
    7fe0:	2305      	movs	r3, #5
    7fe2:	4618      	mov	r0, r3
    7fe4:	b003      	add	sp, #12
    7fe6:	bd30      	pop	{r4, r5, pc}
    7fe8:	00000000 	.word	0x00000000
    7fec:	0000a8a4 	.word	0x0000a8a4
    7ff0:	0000a7ec 	.word	0x0000a7ec

00007ff4 <restore_non_core_regs>:
    7ff4:	6803      	ldr	r3, [r0, #0]
    7ff6:	07da      	lsls	r2, r3, #31
    7ff8:	b510      	push	{r4, lr}
    7ffa:	4604      	mov	r4, r0
    7ffc:	d406      	bmi.n	800c <restore_non_core_regs+0x18>
    7ffe:	079b      	lsls	r3, r3, #30
    8000:	f100 0048 	add.w	r0, r0, #72	; 0x48
    8004:	d509      	bpl.n	801a <restore_non_core_regs+0x26>
    8006:	f000 fc5f 	bl	88c8 <__gnu_Unwind_Restore_VFP_D>
    800a:	6823      	ldr	r3, [r4, #0]
    800c:	0759      	lsls	r1, r3, #29
    800e:	d509      	bpl.n	8024 <restore_non_core_regs+0x30>
    8010:	071a      	lsls	r2, r3, #28
    8012:	d50e      	bpl.n	8032 <restore_non_core_regs+0x3e>
    8014:	06db      	lsls	r3, r3, #27
    8016:	d513      	bpl.n	8040 <restore_non_core_regs+0x4c>
    8018:	bd10      	pop	{r4, pc}
    801a:	f000 fc4d 	bl	88b8 <__gnu_Unwind_Restore_VFP>
    801e:	6823      	ldr	r3, [r4, #0]
    8020:	0759      	lsls	r1, r3, #29
    8022:	d4f5      	bmi.n	8010 <restore_non_core_regs+0x1c>
    8024:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    8028:	f000 fc56 	bl	88d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    802c:	6823      	ldr	r3, [r4, #0]
    802e:	071a      	lsls	r2, r3, #28
    8030:	d4f0      	bmi.n	8014 <restore_non_core_regs+0x20>
    8032:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    8036:	f000 fc57 	bl	88e8 <__gnu_Unwind_Restore_WMMXD>
    803a:	6823      	ldr	r3, [r4, #0]
    803c:	06db      	lsls	r3, r3, #27
    803e:	d4eb      	bmi.n	8018 <restore_non_core_regs+0x24>
    8040:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    8044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8048:	f000 bc92 	b.w	8970 <__gnu_Unwind_Restore_WMMXC>

0000804c <_Unwind_decode_typeinfo_ptr.isra.0>:
    804c:	6803      	ldr	r3, [r0, #0]
    804e:	b103      	cbz	r3, 8052 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    8050:	4403      	add	r3, r0
    8052:	4618      	mov	r0, r3
    8054:	4770      	bx	lr
    8056:	bf00      	nop

00008058 <__gnu_unwind_24bit.isra.1>:
    8058:	2009      	movs	r0, #9
    805a:	4770      	bx	lr

0000805c <_Unwind_DebugHook>:
    805c:	4770      	bx	lr
    805e:	bf00      	nop

00008060 <unwind_phase2>:
    8060:	b570      	push	{r4, r5, r6, lr}
    8062:	4604      	mov	r4, r0
    8064:	460d      	mov	r5, r1
    8066:	e008      	b.n	807a <unwind_phase2+0x1a>
    8068:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    806a:	6163      	str	r3, [r4, #20]
    806c:	462a      	mov	r2, r5
    806e:	6923      	ldr	r3, [r4, #16]
    8070:	4621      	mov	r1, r4
    8072:	2001      	movs	r0, #1
    8074:	4798      	blx	r3
    8076:	2808      	cmp	r0, #8
    8078:	d108      	bne.n	808c <unwind_phase2+0x2c>
    807a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    807c:	4620      	mov	r0, r4
    807e:	f7ff ff67 	bl	7f50 <get_eit_entry>
    8082:	4606      	mov	r6, r0
    8084:	2800      	cmp	r0, #0
    8086:	d0ef      	beq.n	8068 <unwind_phase2+0x8>
    8088:	f000 fe9c 	bl	8dc4 <abort>
    808c:	2807      	cmp	r0, #7
    808e:	d1fb      	bne.n	8088 <unwind_phase2+0x28>
    8090:	4630      	mov	r0, r6
    8092:	6c29      	ldr	r1, [r5, #64]	; 0x40
    8094:	f7ff ffe2 	bl	805c <_Unwind_DebugHook>
    8098:	1d28      	adds	r0, r5, #4
    809a:	f000 fc01 	bl	88a0 <__restore_core_regs>
    809e:	bf00      	nop

000080a0 <unwind_phase2_forced>:
    80a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80a4:	1d0c      	adds	r4, r1, #4
    80a6:	4605      	mov	r5, r0
    80a8:	4617      	mov	r7, r2
    80aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    80ac:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    80b0:	ae03      	add	r6, sp, #12
    80b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    80b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    80b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    80b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    80ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    80bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    80c0:	ac02      	add	r4, sp, #8
    80c2:	f8d5 800c 	ldr.w	r8, [r5, #12]
    80c6:	f8d5 9018 	ldr.w	r9, [r5, #24]
    80ca:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    80ce:	2300      	movs	r3, #0
    80d0:	6023      	str	r3, [r4, #0]
    80d2:	e021      	b.n	8118 <unwind_phase2_forced+0x78>
    80d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    80d6:	616b      	str	r3, [r5, #20]
    80d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    80dc:	4621      	mov	r1, r4
    80de:	a87a      	add	r0, sp, #488	; 0x1e8
    80e0:	f000 feac 	bl	8e3c <memcpy>
    80e4:	692b      	ldr	r3, [r5, #16]
    80e6:	aa7a      	add	r2, sp, #488	; 0x1e8
    80e8:	4629      	mov	r1, r5
    80ea:	4630      	mov	r0, r6
    80ec:	4798      	blx	r3
    80ee:	9b88      	ldr	r3, [sp, #544]	; 0x220
    80f0:	e9cd 4900 	strd	r4, r9, [sp]
    80f4:	4682      	mov	sl, r0
    80f6:	6463      	str	r3, [r4, #68]	; 0x44
    80f8:	4631      	mov	r1, r6
    80fa:	462b      	mov	r3, r5
    80fc:	462a      	mov	r2, r5
    80fe:	2001      	movs	r0, #1
    8100:	47c0      	blx	r8
    8102:	4607      	mov	r7, r0
    8104:	b9f8      	cbnz	r0, 8146 <unwind_phase2_forced+0xa6>
    8106:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    810a:	a97a      	add	r1, sp, #488	; 0x1e8
    810c:	4620      	mov	r0, r4
    810e:	f000 fe95 	bl	8e3c <memcpy>
    8112:	f1ba 0f08 	cmp.w	sl, #8
    8116:	d11c      	bne.n	8152 <unwind_phase2_forced+0xb2>
    8118:	6c21      	ldr	r1, [r4, #64]	; 0x40
    811a:	4628      	mov	r0, r5
    811c:	f7ff ff18 	bl	7f50 <get_eit_entry>
    8120:	2f00      	cmp	r7, #0
    8122:	bf08      	it	eq
    8124:	2609      	moveq	r6, #9
    8126:	4607      	mov	r7, r0
    8128:	bf18      	it	ne
    812a:	260a      	movne	r6, #10
    812c:	2800      	cmp	r0, #0
    812e:	d0d1      	beq.n	80d4 <unwind_phase2_forced+0x34>
    8130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8132:	f046 0110 	orr.w	r1, r6, #16
    8136:	e9cd 4900 	strd	r4, r9, [sp]
    813a:	462a      	mov	r2, r5
    813c:	6463      	str	r3, [r4, #68]	; 0x44
    813e:	2001      	movs	r0, #1
    8140:	462b      	mov	r3, r5
    8142:	47c0      	blx	r8
    8144:	b100      	cbz	r0, 8148 <unwind_phase2_forced+0xa8>
    8146:	2709      	movs	r7, #9
    8148:	4638      	mov	r0, r7
    814a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8152:	f1ba 0f07 	cmp.w	sl, #7
    8156:	d1f6      	bne.n	8146 <unwind_phase2_forced+0xa6>
    8158:	4638      	mov	r0, r7
    815a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    815c:	f7ff ff7e 	bl	805c <_Unwind_DebugHook>
    8160:	a803      	add	r0, sp, #12
    8162:	f000 fb9d 	bl	88a0 <__restore_core_regs>
    8166:	bf00      	nop

00008168 <_Unwind_GetCFA>:
    8168:	6c40      	ldr	r0, [r0, #68]	; 0x44
    816a:	4770      	bx	lr

0000816c <__gnu_Unwind_RaiseException>:
    816c:	b5f0      	push	{r4, r5, r6, r7, lr}
    816e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    8170:	640b      	str	r3, [r1, #64]	; 0x40
    8172:	1d0d      	adds	r5, r1, #4
    8174:	460f      	mov	r7, r1
    8176:	4606      	mov	r6, r0
    8178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    817a:	b0f9      	sub	sp, #484	; 0x1e4
    817c:	ac01      	add	r4, sp, #4
    817e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    818c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    8190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    8194:	9500      	str	r5, [sp, #0]
    8196:	e006      	b.n	81a6 <__gnu_Unwind_RaiseException+0x3a>
    8198:	6933      	ldr	r3, [r6, #16]
    819a:	466a      	mov	r2, sp
    819c:	4631      	mov	r1, r6
    819e:	4798      	blx	r3
    81a0:	2808      	cmp	r0, #8
    81a2:	4604      	mov	r4, r0
    81a4:	d108      	bne.n	81b8 <__gnu_Unwind_RaiseException+0x4c>
    81a6:	9910      	ldr	r1, [sp, #64]	; 0x40
    81a8:	4630      	mov	r0, r6
    81aa:	f7ff fed1 	bl	7f50 <get_eit_entry>
    81ae:	2800      	cmp	r0, #0
    81b0:	d0f2      	beq.n	8198 <__gnu_Unwind_RaiseException+0x2c>
    81b2:	2009      	movs	r0, #9
    81b4:	b079      	add	sp, #484	; 0x1e4
    81b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81b8:	4668      	mov	r0, sp
    81ba:	f7ff ff1b 	bl	7ff4 <restore_non_core_regs>
    81be:	2c06      	cmp	r4, #6
    81c0:	d1f7      	bne.n	81b2 <__gnu_Unwind_RaiseException+0x46>
    81c2:	4639      	mov	r1, r7
    81c4:	4630      	mov	r0, r6
    81c6:	f7ff ff4b 	bl	8060 <unwind_phase2>
    81ca:	bf00      	nop

000081cc <__gnu_Unwind_ForcedUnwind>:
    81cc:	b430      	push	{r4, r5}
    81ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    81d0:	60c1      	str	r1, [r0, #12]
    81d2:	6182      	str	r2, [r0, #24]
    81d4:	4619      	mov	r1, r3
    81d6:	641d      	str	r5, [r3, #64]	; 0x40
    81d8:	2200      	movs	r2, #0
    81da:	bc30      	pop	{r4, r5}
    81dc:	e760      	b.n	80a0 <unwind_phase2_forced>
    81de:	bf00      	nop

000081e0 <__gnu_Unwind_Resume>:
    81e0:	b570      	push	{r4, r5, r6, lr}
    81e2:	68c6      	ldr	r6, [r0, #12]
    81e4:	6943      	ldr	r3, [r0, #20]
    81e6:	640b      	str	r3, [r1, #64]	; 0x40
    81e8:	b9be      	cbnz	r6, 821a <__gnu_Unwind_Resume+0x3a>
    81ea:	6903      	ldr	r3, [r0, #16]
    81ec:	460a      	mov	r2, r1
    81ee:	4604      	mov	r4, r0
    81f0:	460d      	mov	r5, r1
    81f2:	4601      	mov	r1, r0
    81f4:	2002      	movs	r0, #2
    81f6:	4798      	blx	r3
    81f8:	2807      	cmp	r0, #7
    81fa:	d007      	beq.n	820c <__gnu_Unwind_Resume+0x2c>
    81fc:	2808      	cmp	r0, #8
    81fe:	d103      	bne.n	8208 <__gnu_Unwind_Resume+0x28>
    8200:	4629      	mov	r1, r5
    8202:	4620      	mov	r0, r4
    8204:	f7ff ff2c 	bl	8060 <unwind_phase2>
    8208:	f000 fddc 	bl	8dc4 <abort>
    820c:	4630      	mov	r0, r6
    820e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    8210:	f7ff ff24 	bl	805c <_Unwind_DebugHook>
    8214:	1d28      	adds	r0, r5, #4
    8216:	f000 fb43 	bl	88a0 <__restore_core_regs>
    821a:	2201      	movs	r2, #1
    821c:	f7ff ff40 	bl	80a0 <unwind_phase2_forced>
    8220:	f000 fdd0 	bl	8dc4 <abort>

00008224 <__gnu_Unwind_Resume_or_Rethrow>:
    8224:	68c2      	ldr	r2, [r0, #12]
    8226:	b11a      	cbz	r2, 8230 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    8228:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    822a:	640a      	str	r2, [r1, #64]	; 0x40
    822c:	2200      	movs	r2, #0
    822e:	e737      	b.n	80a0 <unwind_phase2_forced>
    8230:	e79c      	b.n	816c <__gnu_Unwind_RaiseException>
    8232:	bf00      	nop

00008234 <_Unwind_Complete>:
    8234:	4770      	bx	lr
    8236:	bf00      	nop

00008238 <_Unwind_DeleteException>:
    8238:	6883      	ldr	r3, [r0, #8]
    823a:	b113      	cbz	r3, 8242 <_Unwind_DeleteException+0xa>
    823c:	4601      	mov	r1, r0
    823e:	2001      	movs	r0, #1
    8240:	4718      	bx	r3
    8242:	4770      	bx	lr

00008244 <_Unwind_VRS_Get>:
    8244:	2904      	cmp	r1, #4
    8246:	d807      	bhi.n	8258 <_Unwind_VRS_Get+0x14>
    8248:	e8df f001 	tbb	[pc, r1]
    824c:	08060803 	.word	0x08060803
    8250:	08          	.byte	0x08
    8251:	00          	.byte	0x00
    8252:	b90b      	cbnz	r3, 8258 <_Unwind_VRS_Get+0x14>
    8254:	2a0f      	cmp	r2, #15
    8256:	d903      	bls.n	8260 <_Unwind_VRS_Get+0x1c>
    8258:	2002      	movs	r0, #2
    825a:	4770      	bx	lr
    825c:	2001      	movs	r0, #1
    825e:	4770      	bx	lr
    8260:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8264:	4618      	mov	r0, r3
    8266:	6853      	ldr	r3, [r2, #4]
    8268:	9a00      	ldr	r2, [sp, #0]
    826a:	6013      	str	r3, [r2, #0]
    826c:	4770      	bx	lr
    826e:	bf00      	nop

00008270 <_Unwind_GetGR>:
    8270:	b510      	push	{r4, lr}
    8272:	b084      	sub	sp, #16
    8274:	2300      	movs	r3, #0
    8276:	ac03      	add	r4, sp, #12
    8278:	460a      	mov	r2, r1
    827a:	9400      	str	r4, [sp, #0]
    827c:	4619      	mov	r1, r3
    827e:	f7ff ffe1 	bl	8244 <_Unwind_VRS_Get>
    8282:	9803      	ldr	r0, [sp, #12]
    8284:	b004      	add	sp, #16
    8286:	bd10      	pop	{r4, pc}

00008288 <_Unwind_VRS_Set>:
    8288:	2904      	cmp	r1, #4
    828a:	d807      	bhi.n	829c <_Unwind_VRS_Set+0x14>
    828c:	e8df f001 	tbb	[pc, r1]
    8290:	08060803 	.word	0x08060803
    8294:	08          	.byte	0x08
    8295:	00          	.byte	0x00
    8296:	b90b      	cbnz	r3, 829c <_Unwind_VRS_Set+0x14>
    8298:	2a0f      	cmp	r2, #15
    829a:	d903      	bls.n	82a4 <_Unwind_VRS_Set+0x1c>
    829c:	2002      	movs	r0, #2
    829e:	4770      	bx	lr
    82a0:	2001      	movs	r0, #1
    82a2:	4770      	bx	lr
    82a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    82a8:	9a00      	ldr	r2, [sp, #0]
    82aa:	6812      	ldr	r2, [r2, #0]
    82ac:	6042      	str	r2, [r0, #4]
    82ae:	4618      	mov	r0, r3
    82b0:	4770      	bx	lr
    82b2:	bf00      	nop

000082b4 <_Unwind_SetGR>:
    82b4:	b510      	push	{r4, lr}
    82b6:	b084      	sub	sp, #16
    82b8:	ac04      	add	r4, sp, #16
    82ba:	2300      	movs	r3, #0
    82bc:	f844 2d04 	str.w	r2, [r4, #-4]!
    82c0:	460a      	mov	r2, r1
    82c2:	9400      	str	r4, [sp, #0]
    82c4:	4619      	mov	r1, r3
    82c6:	f7ff ffdf 	bl	8288 <_Unwind_VRS_Set>
    82ca:	b004      	add	sp, #16
    82cc:	bd10      	pop	{r4, pc}
    82ce:	bf00      	nop

000082d0 <__gnu_Unwind_Backtrace>:
    82d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82d2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    82d4:	6413      	str	r3, [r2, #64]	; 0x40
    82d6:	1d15      	adds	r5, r2, #4
    82d8:	4607      	mov	r7, r0
    82da:	460e      	mov	r6, r1
    82dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    82de:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    82e2:	ac17      	add	r4, sp, #92	; 0x5c
    82e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    82e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    82e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    82ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    82ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    82ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    82f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    82f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    82fa:	9516      	str	r5, [sp, #88]	; 0x58
    82fc:	e010      	b.n	8320 <__gnu_Unwind_Backtrace+0x50>
    82fe:	a816      	add	r0, sp, #88	; 0x58
    8300:	f7ff ffd8 	bl	82b4 <_Unwind_SetGR>
    8304:	4631      	mov	r1, r6
    8306:	a816      	add	r0, sp, #88	; 0x58
    8308:	47b8      	blx	r7
    830a:	aa16      	add	r2, sp, #88	; 0x58
    830c:	4669      	mov	r1, sp
    830e:	b978      	cbnz	r0, 8330 <__gnu_Unwind_Backtrace+0x60>
    8310:	9b04      	ldr	r3, [sp, #16]
    8312:	2008      	movs	r0, #8
    8314:	4798      	blx	r3
    8316:	2805      	cmp	r0, #5
    8318:	4604      	mov	r4, r0
    831a:	d00a      	beq.n	8332 <__gnu_Unwind_Backtrace+0x62>
    831c:	2809      	cmp	r0, #9
    831e:	d007      	beq.n	8330 <__gnu_Unwind_Backtrace+0x60>
    8320:	9926      	ldr	r1, [sp, #152]	; 0x98
    8322:	4668      	mov	r0, sp
    8324:	f7ff fe14 	bl	7f50 <get_eit_entry>
    8328:	466a      	mov	r2, sp
    832a:	210c      	movs	r1, #12
    832c:	2800      	cmp	r0, #0
    832e:	d0e6      	beq.n	82fe <__gnu_Unwind_Backtrace+0x2e>
    8330:	2409      	movs	r4, #9
    8332:	a816      	add	r0, sp, #88	; 0x58
    8334:	f7ff fe5e 	bl	7ff4 <restore_non_core_regs>
    8338:	4620      	mov	r0, r4
    833a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    833e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008340 <__gnu_unwind_pr_common>:
    8340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8344:	460d      	mov	r5, r1
    8346:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    8348:	b089      	sub	sp, #36	; 0x24
    834a:	1d0c      	adds	r4, r1, #4
    834c:	4616      	mov	r6, r2
    834e:	f000 0b03 	and.w	fp, r0, #3
    8352:	680a      	ldr	r2, [r1, #0]
    8354:	9406      	str	r4, [sp, #24]
    8356:	461f      	mov	r7, r3
    8358:	2b00      	cmp	r3, #0
    835a:	d068      	beq.n	842e <__gnu_unwind_pr_common+0xee>
    835c:	0c13      	lsrs	r3, r2, #16
    835e:	b2d9      	uxtb	r1, r3
    8360:	0412      	lsls	r2, r2, #16
    8362:	f88d 301d 	strb.w	r3, [sp, #29]
    8366:	2302      	movs	r3, #2
    8368:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    836c:	9205      	str	r2, [sp, #20]
    836e:	f88d 301c 	strb.w	r3, [sp, #28]
    8372:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    8374:	f1bb 0f02 	cmp.w	fp, #2
    8378:	bf08      	it	eq
    837a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    837c:	f013 0301 	ands.w	r3, r3, #1
    8380:	d146      	bne.n	8410 <__gnu_unwind_pr_common+0xd0>
    8382:	9301      	str	r3, [sp, #4]
    8384:	f000 0308 	and.w	r3, r0, #8
    8388:	9300      	str	r3, [sp, #0]
    838a:	f8d4 9000 	ldr.w	r9, [r4]
    838e:	f1b9 0f00 	cmp.w	r9, #0
    8392:	f000 80f3 	beq.w	857c <__gnu_unwind_pr_common+0x23c>
    8396:	2f02      	cmp	r7, #2
    8398:	d045      	beq.n	8426 <__gnu_unwind_pr_common+0xe6>
    839a:	f8b4 9000 	ldrh.w	r9, [r4]
    839e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    83a2:	3404      	adds	r4, #4
    83a4:	6cab      	ldr	r3, [r5, #72]	; 0x48
    83a6:	f028 0a01 	bic.w	sl, r8, #1
    83aa:	210f      	movs	r1, #15
    83ac:	4630      	mov	r0, r6
    83ae:	449a      	add	sl, r3
    83b0:	f7ff ff5e 	bl	8270 <_Unwind_GetGR>
    83b4:	4582      	cmp	sl, r0
    83b6:	d834      	bhi.n	8422 <__gnu_unwind_pr_common+0xe2>
    83b8:	f029 0301 	bic.w	r3, r9, #1
    83bc:	4453      	add	r3, sl
    83be:	4283      	cmp	r3, r0
    83c0:	bf94      	ite	ls
    83c2:	2000      	movls	r0, #0
    83c4:	2001      	movhi	r0, #1
    83c6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    83ca:	f008 0802 	and.w	r8, r8, #2
    83ce:	f009 0901 	and.w	r9, r9, #1
    83d2:	ea48 0809 	orr.w	r8, r8, r9
    83d6:	f1b8 0f01 	cmp.w	r8, #1
    83da:	d03a      	beq.n	8452 <__gnu_unwind_pr_common+0x112>
    83dc:	d331      	bcc.n	8442 <__gnu_unwind_pr_common+0x102>
    83de:	f1b8 0f02 	cmp.w	r8, #2
    83e2:	d11a      	bne.n	841a <__gnu_unwind_pr_common+0xda>
    83e4:	6823      	ldr	r3, [r4, #0]
    83e6:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    83ea:	f1bb 0f00 	cmp.w	fp, #0
    83ee:	d166      	bne.n	84be <__gnu_unwind_pr_common+0x17e>
    83f0:	b130      	cbz	r0, 8400 <__gnu_unwind_pr_common+0xc0>
    83f2:	9a00      	ldr	r2, [sp, #0]
    83f4:	2a00      	cmp	r2, #0
    83f6:	d06c      	beq.n	84d2 <__gnu_unwind_pr_common+0x192>
    83f8:	f1ba 0f00 	cmp.w	sl, #0
    83fc:	f000 8090 	beq.w	8520 <__gnu_unwind_pr_common+0x1e0>
    8400:	2b00      	cmp	r3, #0
    8402:	da00      	bge.n	8406 <__gnu_unwind_pr_common+0xc6>
    8404:	3404      	adds	r4, #4
    8406:	f10a 0301 	add.w	r3, sl, #1
    840a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    840e:	e7bc      	b.n	838a <__gnu_unwind_pr_common+0x4a>
    8410:	4630      	mov	r0, r6
    8412:	a905      	add	r1, sp, #20
    8414:	f000 fb46 	bl	8aa4 <__gnu_unwind_execute>
    8418:	b178      	cbz	r0, 843a <__gnu_unwind_pr_common+0xfa>
    841a:	2009      	movs	r0, #9
    841c:	b009      	add	sp, #36	; 0x24
    841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8422:	2000      	movs	r0, #0
    8424:	e7cf      	b.n	83c6 <__gnu_unwind_pr_common+0x86>
    8426:	f8d4 8004 	ldr.w	r8, [r4, #4]
    842a:	3408      	adds	r4, #8
    842c:	e7ba      	b.n	83a4 <__gnu_unwind_pr_common+0x64>
    842e:	0212      	lsls	r2, r2, #8
    8430:	2303      	movs	r3, #3
    8432:	9205      	str	r2, [sp, #20]
    8434:	f8ad 301c 	strh.w	r3, [sp, #28]
    8438:	e79b      	b.n	8372 <__gnu_unwind_pr_common+0x32>
    843a:	2008      	movs	r0, #8
    843c:	b009      	add	sp, #36	; 0x24
    843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8442:	f1bb 0f00 	cmp.w	fp, #0
    8446:	d002      	beq.n	844e <__gnu_unwind_pr_common+0x10e>
    8448:	2800      	cmp	r0, #0
    844a:	f040 80b4 	bne.w	85b6 <__gnu_unwind_pr_common+0x276>
    844e:	3404      	adds	r4, #4
    8450:	e79b      	b.n	838a <__gnu_unwind_pr_common+0x4a>
    8452:	f1bb 0f00 	cmp.w	fp, #0
    8456:	d118      	bne.n	848a <__gnu_unwind_pr_common+0x14a>
    8458:	b1a8      	cbz	r0, 8486 <__gnu_unwind_pr_common+0x146>
    845a:	e9d4 2300 	ldrd	r2, r3, [r4]
    845e:	1c99      	adds	r1, r3, #2
    8460:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    8464:	d0d9      	beq.n	841a <__gnu_unwind_pr_common+0xda>
    8466:	f105 0158 	add.w	r1, r5, #88	; 0x58
    846a:	3301      	adds	r3, #1
    846c:	9104      	str	r1, [sp, #16]
    846e:	f000 80b5 	beq.w	85dc <__gnu_unwind_pr_common+0x29c>
    8472:	1d20      	adds	r0, r4, #4
    8474:	f7ff fdea 	bl	804c <_Unwind_decode_typeinfo_ptr.isra.0>
    8478:	ab04      	add	r3, sp, #16
    847a:	4601      	mov	r1, r0
    847c:	4628      	mov	r0, r5
    847e:	f3af 8000 	nop.w
    8482:	2800      	cmp	r0, #0
    8484:	d167      	bne.n	8556 <__gnu_unwind_pr_common+0x216>
    8486:	3408      	adds	r4, #8
    8488:	e77f      	b.n	838a <__gnu_unwind_pr_common+0x4a>
    848a:	210d      	movs	r1, #13
    848c:	4630      	mov	r0, r6
    848e:	f8d5 8020 	ldr.w	r8, [r5, #32]
    8492:	f7ff feed 	bl	8270 <_Unwind_GetGR>
    8496:	4580      	cmp	r8, r0
    8498:	d1f5      	bne.n	8486 <__gnu_unwind_pr_common+0x146>
    849a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    849c:	429c      	cmp	r4, r3
    849e:	d1f2      	bne.n	8486 <__gnu_unwind_pr_common+0x146>
    84a0:	4620      	mov	r0, r4
    84a2:	f7ff fd07 	bl	7eb4 <selfrel_offset31>
    84a6:	210f      	movs	r1, #15
    84a8:	4602      	mov	r2, r0
    84aa:	4630      	mov	r0, r6
    84ac:	f7ff ff02 	bl	82b4 <_Unwind_SetGR>
    84b0:	4630      	mov	r0, r6
    84b2:	462a      	mov	r2, r5
    84b4:	2100      	movs	r1, #0
    84b6:	f7ff fefd 	bl	82b4 <_Unwind_SetGR>
    84ba:	2007      	movs	r0, #7
    84bc:	e7ae      	b.n	841c <__gnu_unwind_pr_common+0xdc>
    84be:	210d      	movs	r1, #13
    84c0:	4630      	mov	r0, r6
    84c2:	f8d5 8020 	ldr.w	r8, [r5, #32]
    84c6:	f7ff fed3 	bl	8270 <_Unwind_GetGR>
    84ca:	4580      	cmp	r8, r0
    84cc:	d032      	beq.n	8534 <__gnu_unwind_pr_common+0x1f4>
    84ce:	6823      	ldr	r3, [r4, #0]
    84d0:	e796      	b.n	8400 <__gnu_unwind_pr_common+0xc0>
    84d2:	f1ba 0f00 	cmp.w	sl, #0
    84d6:	d023      	beq.n	8520 <__gnu_unwind_pr_common+0x1e0>
    84d8:	f105 0358 	add.w	r3, r5, #88	; 0x58
    84dc:	f104 0804 	add.w	r8, r4, #4
    84e0:	f8cd b008 	str.w	fp, [sp, #8]
    84e4:	f8dd 9000 	ldr.w	r9, [sp]
    84e8:	9703      	str	r7, [sp, #12]
    84ea:	46a3      	mov	fp, r4
    84ec:	461c      	mov	r4, r3
    84ee:	e002      	b.n	84f6 <__gnu_unwind_pr_common+0x1b6>
    84f0:	4557      	cmp	r7, sl
    84f2:	46b9      	mov	r9, r7
    84f4:	d040      	beq.n	8578 <__gnu_unwind_pr_common+0x238>
    84f6:	4640      	mov	r0, r8
    84f8:	9404      	str	r4, [sp, #16]
    84fa:	f7ff fda7 	bl	804c <_Unwind_decode_typeinfo_ptr.isra.0>
    84fe:	ab04      	add	r3, sp, #16
    8500:	4601      	mov	r1, r0
    8502:	2200      	movs	r2, #0
    8504:	4628      	mov	r0, r5
    8506:	f3af 8000 	nop.w
    850a:	f109 0701 	add.w	r7, r9, #1
    850e:	f108 0804 	add.w	r8, r8, #4
    8512:	2800      	cmp	r0, #0
    8514:	d0ec      	beq.n	84f0 <__gnu_unwind_pr_common+0x1b0>
    8516:	45d1      	cmp	r9, sl
    8518:	465c      	mov	r4, fp
    851a:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    851e:	d1d6      	bne.n	84ce <__gnu_unwind_pr_common+0x18e>
    8520:	4630      	mov	r0, r6
    8522:	210d      	movs	r1, #13
    8524:	f7ff fea4 	bl	8270 <_Unwind_GetGR>
    8528:	9b04      	ldr	r3, [sp, #16]
    852a:	6228      	str	r0, [r5, #32]
    852c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    8530:	2006      	movs	r0, #6
    8532:	e773      	b.n	841c <__gnu_unwind_pr_common+0xdc>
    8534:	6aab      	ldr	r3, [r5, #40]	; 0x28
    8536:	429c      	cmp	r4, r3
    8538:	d1c9      	bne.n	84ce <__gnu_unwind_pr_common+0x18e>
    853a:	2204      	movs	r2, #4
    853c:	f04f 0800 	mov.w	r8, #0
    8540:	18a3      	adds	r3, r4, r2
    8542:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    8546:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    854a:	6823      	ldr	r3, [r4, #0]
    854c:	4543      	cmp	r3, r8
    854e:	db4d      	blt.n	85ec <__gnu_unwind_pr_common+0x2ac>
    8550:	2301      	movs	r3, #1
    8552:	9301      	str	r3, [sp, #4]
    8554:	e757      	b.n	8406 <__gnu_unwind_pr_common+0xc6>
    8556:	4680      	mov	r8, r0
    8558:	210d      	movs	r1, #13
    855a:	4630      	mov	r0, r6
    855c:	f7ff fe88 	bl	8270 <_Unwind_GetGR>
    8560:	f1b8 0f02 	cmp.w	r8, #2
    8564:	6228      	str	r0, [r5, #32]
    8566:	d13e      	bne.n	85e6 <__gnu_unwind_pr_common+0x2a6>
    8568:	462b      	mov	r3, r5
    856a:	9a04      	ldr	r2, [sp, #16]
    856c:	f843 2f2c 	str.w	r2, [r3, #44]!
    8570:	626b      	str	r3, [r5, #36]	; 0x24
    8572:	62ac      	str	r4, [r5, #40]	; 0x28
    8574:	2006      	movs	r0, #6
    8576:	e751      	b.n	841c <__gnu_unwind_pr_common+0xdc>
    8578:	465c      	mov	r4, fp
    857a:	e7d1      	b.n	8520 <__gnu_unwind_pr_common+0x1e0>
    857c:	a905      	add	r1, sp, #20
    857e:	4630      	mov	r0, r6
    8580:	f000 fa90 	bl	8aa4 <__gnu_unwind_execute>
    8584:	2800      	cmp	r0, #0
    8586:	f47f af48 	bne.w	841a <__gnu_unwind_pr_common+0xda>
    858a:	9b01      	ldr	r3, [sp, #4]
    858c:	2b00      	cmp	r3, #0
    858e:	f43f af54 	beq.w	843a <__gnu_unwind_pr_common+0xfa>
    8592:	210f      	movs	r1, #15
    8594:	4630      	mov	r0, r6
    8596:	f7ff fe6b 	bl	8270 <_Unwind_GetGR>
    859a:	210e      	movs	r1, #14
    859c:	4602      	mov	r2, r0
    859e:	4630      	mov	r0, r6
    85a0:	f7ff fe88 	bl	82b4 <_Unwind_SetGR>
    85a4:	4630      	mov	r0, r6
    85a6:	4a1a      	ldr	r2, [pc, #104]	; (8610 <__gnu_unwind_pr_common+0x2d0>)
    85a8:	210f      	movs	r1, #15
    85aa:	f7ff fe83 	bl	82b4 <_Unwind_SetGR>
    85ae:	2007      	movs	r0, #7
    85b0:	b009      	add	sp, #36	; 0x24
    85b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85b6:	4620      	mov	r0, r4
    85b8:	f7ff fc7c 	bl	7eb4 <selfrel_offset31>
    85bc:	3404      	adds	r4, #4
    85be:	4607      	mov	r7, r0
    85c0:	63ac      	str	r4, [r5, #56]	; 0x38
    85c2:	4628      	mov	r0, r5
    85c4:	f3af 8000 	nop.w
    85c8:	2800      	cmp	r0, #0
    85ca:	f43f af26 	beq.w	841a <__gnu_unwind_pr_common+0xda>
    85ce:	4630      	mov	r0, r6
    85d0:	463a      	mov	r2, r7
    85d2:	210f      	movs	r1, #15
    85d4:	f7ff fe6e 	bl	82b4 <_Unwind_SetGR>
    85d8:	2007      	movs	r0, #7
    85da:	e71f      	b.n	841c <__gnu_unwind_pr_common+0xdc>
    85dc:	4630      	mov	r0, r6
    85de:	210d      	movs	r1, #13
    85e0:	f7ff fe46 	bl	8270 <_Unwind_GetGR>
    85e4:	6228      	str	r0, [r5, #32]
    85e6:	9b04      	ldr	r3, [sp, #16]
    85e8:	626b      	str	r3, [r5, #36]	; 0x24
    85ea:	e7c2      	b.n	8572 <__gnu_unwind_pr_common+0x232>
    85ec:	f10a 0001 	add.w	r0, sl, #1
    85f0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    85f4:	f7ff fc5e 	bl	7eb4 <selfrel_offset31>
    85f8:	210f      	movs	r1, #15
    85fa:	4602      	mov	r2, r0
    85fc:	4630      	mov	r0, r6
    85fe:	f7ff fe59 	bl	82b4 <_Unwind_SetGR>
    8602:	4630      	mov	r0, r6
    8604:	462a      	mov	r2, r5
    8606:	4641      	mov	r1, r8
    8608:	f7ff fe54 	bl	82b4 <_Unwind_SetGR>
    860c:	2007      	movs	r0, #7
    860e:	e705      	b.n	841c <__gnu_unwind_pr_common+0xdc>
    8610:	00000000 	.word	0x00000000

00008614 <__aeabi_unwind_cpp_pr0>:
    8614:	2300      	movs	r3, #0
    8616:	e693      	b.n	8340 <__gnu_unwind_pr_common>

00008618 <__aeabi_unwind_cpp_pr1>:
    8618:	2301      	movs	r3, #1
    861a:	e691      	b.n	8340 <__gnu_unwind_pr_common>

0000861c <__aeabi_unwind_cpp_pr2>:
    861c:	2302      	movs	r3, #2
    861e:	e68f      	b.n	8340 <__gnu_unwind_pr_common>

00008620 <_Unwind_VRS_Pop>:
    8620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8624:	4605      	mov	r5, r0
    8626:	b0c4      	sub	sp, #272	; 0x110
    8628:	2904      	cmp	r1, #4
    862a:	d806      	bhi.n	863a <_Unwind_VRS_Pop+0x1a>
    862c:	e8df f001 	tbb	[pc, r1]
    8630:	03052b4d 	.word	0x03052b4d
    8634:	09          	.byte	0x09
    8635:	00          	.byte	0x00
    8636:	2b03      	cmp	r3, #3
    8638:	d05f      	beq.n	86fa <_Unwind_VRS_Pop+0xda>
    863a:	2002      	movs	r0, #2
    863c:	b044      	add	sp, #272	; 0x110
    863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8642:	2b00      	cmp	r3, #0
    8644:	d1f9      	bne.n	863a <_Unwind_VRS_Pop+0x1a>
    8646:	2a10      	cmp	r2, #16
    8648:	d8f7      	bhi.n	863a <_Unwind_VRS_Pop+0x1a>
    864a:	682b      	ldr	r3, [r5, #0]
    864c:	06dc      	lsls	r4, r3, #27
    864e:	f100 80f4 	bmi.w	883a <_Unwind_VRS_Pop+0x21a>
    8652:	ac22      	add	r4, sp, #136	; 0x88
    8654:	4620      	mov	r0, r4
    8656:	9201      	str	r2, [sp, #4]
    8658:	f000 f994 	bl	8984 <__gnu_Unwind_Save_WMMXC>
    865c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    865e:	9a01      	ldr	r2, [sp, #4]
    8660:	2300      	movs	r3, #0
    8662:	2601      	movs	r6, #1
    8664:	fa06 f103 	lsl.w	r1, r6, r3
    8668:	4211      	tst	r1, r2
    866a:	d003      	beq.n	8674 <_Unwind_VRS_Pop+0x54>
    866c:	6801      	ldr	r1, [r0, #0]
    866e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    8672:	3004      	adds	r0, #4
    8674:	3301      	adds	r3, #1
    8676:	2b04      	cmp	r3, #4
    8678:	d1f4      	bne.n	8664 <_Unwind_VRS_Pop+0x44>
    867a:	63a8      	str	r0, [r5, #56]	; 0x38
    867c:	4620      	mov	r0, r4
    867e:	f000 f977 	bl	8970 <__gnu_Unwind_Restore_WMMXC>
    8682:	2000      	movs	r0, #0
    8684:	e7da      	b.n	863c <_Unwind_VRS_Pop+0x1c>
    8686:	2b01      	cmp	r3, #1
    8688:	ea4f 4612 	mov.w	r6, r2, lsr #16
    868c:	b297      	uxth	r7, r2
    868e:	d052      	beq.n	8736 <_Unwind_VRS_Pop+0x116>
    8690:	2b05      	cmp	r3, #5
    8692:	d1d2      	bne.n	863a <_Unwind_VRS_Pop+0x1a>
    8694:	eb06 0807 	add.w	r8, r6, r7
    8698:	f1b8 0f20 	cmp.w	r8, #32
    869c:	d8cd      	bhi.n	863a <_Unwind_VRS_Pop+0x1a>
    869e:	2e0f      	cmp	r6, #15
    86a0:	f240 8099 	bls.w	87d6 <_Unwind_VRS_Pop+0x1b6>
    86a4:	46b8      	mov	r8, r7
    86a6:	2f00      	cmp	r7, #0
    86a8:	f040 80db 	bne.w	8862 <_Unwind_VRS_Pop+0x242>
    86ac:	6baa      	ldr	r2, [r5, #56]	; 0x38
    86ae:	63aa      	str	r2, [r5, #56]	; 0x38
    86b0:	2e0f      	cmp	r6, #15
    86b2:	f240 80be 	bls.w	8832 <_Unwind_VRS_Pop+0x212>
    86b6:	f1b8 0f00 	cmp.w	r8, #0
    86ba:	d002      	beq.n	86c2 <_Unwind_VRS_Pop+0xa2>
    86bc:	a802      	add	r0, sp, #8
    86be:	f000 f90b 	bl	88d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    86c2:	2000      	movs	r0, #0
    86c4:	b044      	add	sp, #272	; 0x110
    86c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86ca:	2b00      	cmp	r3, #0
    86cc:	d1b5      	bne.n	863a <_Unwind_VRS_Pop+0x1a>
    86ce:	6bac      	ldr	r4, [r5, #56]	; 0x38
    86d0:	b297      	uxth	r7, r2
    86d2:	1d28      	adds	r0, r5, #4
    86d4:	2601      	movs	r6, #1
    86d6:	fa06 f103 	lsl.w	r1, r6, r3
    86da:	4239      	tst	r1, r7
    86dc:	f103 0301 	add.w	r3, r3, #1
    86e0:	d002      	beq.n	86e8 <_Unwind_VRS_Pop+0xc8>
    86e2:	6821      	ldr	r1, [r4, #0]
    86e4:	6001      	str	r1, [r0, #0]
    86e6:	3404      	adds	r4, #4
    86e8:	2b10      	cmp	r3, #16
    86ea:	f100 0004 	add.w	r0, r0, #4
    86ee:	d1f2      	bne.n	86d6 <_Unwind_VRS_Pop+0xb6>
    86f0:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    86f4:	d1e5      	bne.n	86c2 <_Unwind_VRS_Pop+0xa2>
    86f6:	63ac      	str	r4, [r5, #56]	; 0x38
    86f8:	e7a0      	b.n	863c <_Unwind_VRS_Pop+0x1c>
    86fa:	0c16      	lsrs	r6, r2, #16
    86fc:	b297      	uxth	r7, r2
    86fe:	19f3      	adds	r3, r6, r7
    8700:	2b10      	cmp	r3, #16
    8702:	d89a      	bhi.n	863a <_Unwind_VRS_Pop+0x1a>
    8704:	682b      	ldr	r3, [r5, #0]
    8706:	071a      	lsls	r2, r3, #28
    8708:	d45d      	bmi.n	87c6 <_Unwind_VRS_Pop+0x1a6>
    870a:	ac22      	add	r4, sp, #136	; 0x88
    870c:	4620      	mov	r0, r4
    870e:	f000 f90d 	bl	892c <__gnu_Unwind_Save_WMMXD>
    8712:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    8716:	6bab      	ldr	r3, [r5, #56]	; 0x38
    8718:	b13f      	cbz	r7, 872a <_Unwind_VRS_Pop+0x10a>
    871a:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    871e:	6818      	ldr	r0, [r3, #0]
    8720:	f841 0b04 	str.w	r0, [r1], #4
    8724:	3304      	adds	r3, #4
    8726:	4293      	cmp	r3, r2
    8728:	d1f9      	bne.n	871e <_Unwind_VRS_Pop+0xfe>
    872a:	4620      	mov	r0, r4
    872c:	63ab      	str	r3, [r5, #56]	; 0x38
    872e:	f000 f8db 	bl	88e8 <__gnu_Unwind_Restore_WMMXD>
    8732:	2000      	movs	r0, #0
    8734:	e782      	b.n	863c <_Unwind_VRS_Pop+0x1c>
    8736:	19f2      	adds	r2, r6, r7
    8738:	2a10      	cmp	r2, #16
    873a:	f63f af7e 	bhi.w	863a <_Unwind_VRS_Pop+0x1a>
    873e:	2e0f      	cmp	r6, #15
    8740:	f63f af7b 	bhi.w	863a <_Unwind_VRS_Pop+0x1a>
    8744:	682a      	ldr	r2, [r5, #0]
    8746:	07d1      	lsls	r1, r2, #31
    8748:	d508      	bpl.n	875c <_Unwind_VRS_Pop+0x13c>
    874a:	4628      	mov	r0, r5
    874c:	f022 0203 	bic.w	r2, r2, #3
    8750:	f840 2b48 	str.w	r2, [r0], #72
    8754:	9301      	str	r3, [sp, #4]
    8756:	f000 f8b3 	bl	88c0 <__gnu_Unwind_Save_VFP>
    875a:	9b01      	ldr	r3, [sp, #4]
    875c:	9301      	str	r3, [sp, #4]
    875e:	ac22      	add	r4, sp, #136	; 0x88
    8760:	4620      	mov	r0, r4
    8762:	f000 f8ad 	bl	88c0 <__gnu_Unwind_Save_VFP>
    8766:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8768:	9b01      	ldr	r3, [sp, #4]
    876a:	2f00      	cmp	r7, #0
    876c:	f000 8095 	beq.w	889a <_Unwind_VRS_Pop+0x27a>
    8770:	007f      	lsls	r7, r7, #1
    8772:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    8776:	f04f 0800 	mov.w	r8, #0
    877a:	3c04      	subs	r4, #4
    877c:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    8780:	f851 0b04 	ldr.w	r0, [r1], #4
    8784:	f844 0f04 	str.w	r0, [r4, #4]!
    8788:	4291      	cmp	r1, r2
    878a:	d1f9      	bne.n	8780 <_Unwind_VRS_Pop+0x160>
    878c:	f1b8 0f00 	cmp.w	r8, #0
    8790:	d00f      	beq.n	87b2 <_Unwind_VRS_Pop+0x192>
    8792:	ac02      	add	r4, sp, #8
    8794:	2e10      	cmp	r6, #16
    8796:	4631      	mov	r1, r6
    8798:	bf38      	it	cc
    879a:	2110      	movcc	r1, #16
    879c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    87a0:	3984      	subs	r1, #132	; 0x84
    87a2:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    87a6:	f852 0b04 	ldr.w	r0, [r2], #4
    87aa:	f841 0f04 	str.w	r0, [r1, #4]!
    87ae:	4294      	cmp	r4, r2
    87b0:	d1f9      	bne.n	87a6 <_Unwind_VRS_Pop+0x186>
    87b2:	2b01      	cmp	r3, #1
    87b4:	f47f af7b 	bne.w	86ae <_Unwind_VRS_Pop+0x8e>
    87b8:	ac22      	add	r4, sp, #136	; 0x88
    87ba:	3204      	adds	r2, #4
    87bc:	63aa      	str	r2, [r5, #56]	; 0x38
    87be:	4620      	mov	r0, r4
    87c0:	f000 f87a 	bl	88b8 <__gnu_Unwind_Restore_VFP>
    87c4:	e77d      	b.n	86c2 <_Unwind_VRS_Pop+0xa2>
    87c6:	f023 0308 	bic.w	r3, r3, #8
    87ca:	602b      	str	r3, [r5, #0]
    87cc:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    87d0:	f000 f8ac 	bl	892c <__gnu_Unwind_Save_WMMXD>
    87d4:	e799      	b.n	870a <_Unwind_VRS_Pop+0xea>
    87d6:	f1b8 0f10 	cmp.w	r8, #16
    87da:	682a      	ldr	r2, [r5, #0]
    87dc:	d943      	bls.n	8866 <_Unwind_VRS_Pop+0x246>
    87de:	07d0      	lsls	r0, r2, #31
    87e0:	f1a8 0810 	sub.w	r8, r8, #16
    87e4:	d50b      	bpl.n	87fe <_Unwind_VRS_Pop+0x1de>
    87e6:	4628      	mov	r0, r5
    87e8:	f022 0201 	bic.w	r2, r2, #1
    87ec:	f042 0202 	orr.w	r2, r2, #2
    87f0:	f840 2b48 	str.w	r2, [r0], #72
    87f4:	9301      	str	r3, [sp, #4]
    87f6:	f000 f86b 	bl	88d0 <__gnu_Unwind_Save_VFP_D>
    87fa:	682a      	ldr	r2, [r5, #0]
    87fc:	9b01      	ldr	r3, [sp, #4]
    87fe:	0751      	lsls	r1, r2, #29
    8800:	d425      	bmi.n	884e <_Unwind_VRS_Pop+0x22e>
    8802:	2e0f      	cmp	r6, #15
    8804:	d804      	bhi.n	8810 <_Unwind_VRS_Pop+0x1f0>
    8806:	a822      	add	r0, sp, #136	; 0x88
    8808:	9301      	str	r3, [sp, #4]
    880a:	f000 f861 	bl	88d0 <__gnu_Unwind_Save_VFP_D>
    880e:	9b01      	ldr	r3, [sp, #4]
    8810:	9301      	str	r3, [sp, #4]
    8812:	ac02      	add	r4, sp, #8
    8814:	4620      	mov	r0, r4
    8816:	f000 f863 	bl	88e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
    881a:	f1c6 0110 	rsb	r1, r6, #16
    881e:	2900      	cmp	r1, #0
    8820:	6baa      	ldr	r2, [r5, #56]	; 0x38
    8822:	9b01      	ldr	r3, [sp, #4]
    8824:	ddb6      	ble.n	8794 <_Unwind_VRS_Pop+0x174>
    8826:	ac22      	add	r4, sp, #136	; 0x88
    8828:	004f      	lsls	r7, r1, #1
    882a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    882e:	4611      	mov	r1, r2
    8830:	e7a3      	b.n	877a <_Unwind_VRS_Pop+0x15a>
    8832:	a822      	add	r0, sp, #136	; 0x88
    8834:	f000 f848 	bl	88c8 <__gnu_Unwind_Restore_VFP_D>
    8838:	e73d      	b.n	86b6 <_Unwind_VRS_Pop+0x96>
    883a:	f023 0310 	bic.w	r3, r3, #16
    883e:	602b      	str	r3, [r5, #0]
    8840:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    8844:	9201      	str	r2, [sp, #4]
    8846:	f000 f89d 	bl	8984 <__gnu_Unwind_Save_WMMXC>
    884a:	9a01      	ldr	r2, [sp, #4]
    884c:	e701      	b.n	8652 <_Unwind_VRS_Pop+0x32>
    884e:	4628      	mov	r0, r5
    8850:	f022 0204 	bic.w	r2, r2, #4
    8854:	f840 2bd0 	str.w	r2, [r0], #208
    8858:	9301      	str	r3, [sp, #4]
    885a:	f000 f841 	bl	88e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
    885e:	9b01      	ldr	r3, [sp, #4]
    8860:	e7cf      	b.n	8802 <_Unwind_VRS_Pop+0x1e2>
    8862:	682a      	ldr	r2, [r5, #0]
    8864:	e7cb      	b.n	87fe <_Unwind_VRS_Pop+0x1de>
    8866:	07d0      	lsls	r0, r2, #31
    8868:	d50a      	bpl.n	8880 <_Unwind_VRS_Pop+0x260>
    886a:	4628      	mov	r0, r5
    886c:	f022 0201 	bic.w	r2, r2, #1
    8870:	f042 0202 	orr.w	r2, r2, #2
    8874:	f840 2b48 	str.w	r2, [r0], #72
    8878:	9301      	str	r3, [sp, #4]
    887a:	f000 f829 	bl	88d0 <__gnu_Unwind_Save_VFP_D>
    887e:	9b01      	ldr	r3, [sp, #4]
    8880:	9301      	str	r3, [sp, #4]
    8882:	ac22      	add	r4, sp, #136	; 0x88
    8884:	4620      	mov	r0, r4
    8886:	f000 f823 	bl	88d0 <__gnu_Unwind_Save_VFP_D>
    888a:	46b8      	mov	r8, r7
    888c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    888e:	9b01      	ldr	r3, [sp, #4]
    8890:	2f00      	cmp	r7, #0
    8892:	f47f af6d 	bne.w	8770 <_Unwind_VRS_Pop+0x150>
    8896:	460a      	mov	r2, r1
    8898:	e709      	b.n	86ae <_Unwind_VRS_Pop+0x8e>
    889a:	460a      	mov	r2, r1
    889c:	e78d      	b.n	87ba <_Unwind_VRS_Pop+0x19a>
    889e:	bf00      	nop

000088a0 <__restore_core_regs>:
    88a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
    88a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    88a8:	469c      	mov	ip, r3
    88aa:	46a6      	mov	lr, r4
    88ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
    88b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    88b4:	46e5      	mov	sp, ip
    88b6:	bd00      	pop	{pc}

000088b8 <__gnu_Unwind_Restore_VFP>:
    88b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    88bc:	4770      	bx	lr
    88be:	bf00      	nop

000088c0 <__gnu_Unwind_Save_VFP>:
    88c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    88c4:	4770      	bx	lr
    88c6:	bf00      	nop

000088c8 <__gnu_Unwind_Restore_VFP_D>:
    88c8:	ec90 0b20 	vldmia	r0, {d0-d15}
    88cc:	4770      	bx	lr
    88ce:	bf00      	nop

000088d0 <__gnu_Unwind_Save_VFP_D>:
    88d0:	ec80 0b20 	vstmia	r0, {d0-d15}
    88d4:	4770      	bx	lr
    88d6:	bf00      	nop

000088d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    88d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
    88dc:	4770      	bx	lr
    88de:	bf00      	nop

000088e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    88e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
    88e4:	4770      	bx	lr
    88e6:	bf00      	nop

000088e8 <__gnu_Unwind_Restore_WMMXD>:
    88e8:	ecf0 0102 	ldfe	f0, [r0], #8
    88ec:	ecf0 1102 	ldfe	f1, [r0], #8
    88f0:	ecf0 2102 	ldfe	f2, [r0], #8
    88f4:	ecf0 3102 	ldfe	f3, [r0], #8
    88f8:	ecf0 4102 	ldfe	f4, [r0], #8
    88fc:	ecf0 5102 	ldfe	f5, [r0], #8
    8900:	ecf0 6102 	ldfe	f6, [r0], #8
    8904:	ecf0 7102 	ldfe	f7, [r0], #8
    8908:	ecf0 8102 	ldfp	f0, [r0], #8
    890c:	ecf0 9102 	ldfp	f1, [r0], #8
    8910:	ecf0 a102 	ldfp	f2, [r0], #8
    8914:	ecf0 b102 	ldfp	f3, [r0], #8
    8918:	ecf0 c102 	ldfp	f4, [r0], #8
    891c:	ecf0 d102 	ldfp	f5, [r0], #8
    8920:	ecf0 e102 	ldfp	f6, [r0], #8
    8924:	ecf0 f102 	ldfp	f7, [r0], #8
    8928:	4770      	bx	lr
    892a:	bf00      	nop

0000892c <__gnu_Unwind_Save_WMMXD>:
    892c:	ece0 0102 	stfe	f0, [r0], #8
    8930:	ece0 1102 	stfe	f1, [r0], #8
    8934:	ece0 2102 	stfe	f2, [r0], #8
    8938:	ece0 3102 	stfe	f3, [r0], #8
    893c:	ece0 4102 	stfe	f4, [r0], #8
    8940:	ece0 5102 	stfe	f5, [r0], #8
    8944:	ece0 6102 	stfe	f6, [r0], #8
    8948:	ece0 7102 	stfe	f7, [r0], #8
    894c:	ece0 8102 	stfp	f0, [r0], #8
    8950:	ece0 9102 	stfp	f1, [r0], #8
    8954:	ece0 a102 	stfp	f2, [r0], #8
    8958:	ece0 b102 	stfp	f3, [r0], #8
    895c:	ece0 c102 	stfp	f4, [r0], #8
    8960:	ece0 d102 	stfp	f5, [r0], #8
    8964:	ece0 e102 	stfp	f6, [r0], #8
    8968:	ece0 f102 	stfp	f7, [r0], #8
    896c:	4770      	bx	lr
    896e:	bf00      	nop

00008970 <__gnu_Unwind_Restore_WMMXC>:
    8970:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    8974:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    8978:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    897c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    8980:	4770      	bx	lr
    8982:	bf00      	nop

00008984 <__gnu_Unwind_Save_WMMXC>:
    8984:	fca0 8101 	stc2	1, cr8, [r0], #4
    8988:	fca0 9101 	stc2	1, cr9, [r0], #4
    898c:	fca0 a101 	stc2	1, cr10, [r0], #4
    8990:	fca0 b101 	stc2	1, cr11, [r0], #4
    8994:	4770      	bx	lr
    8996:	bf00      	nop

00008998 <_Unwind_RaiseException>:
    8998:	46ec      	mov	ip, sp
    899a:	b500      	push	{lr}
    899c:	e92d 5000 	stmdb	sp!, {ip, lr}
    89a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    89a4:	f04f 0300 	mov.w	r3, #0
    89a8:	e92d 000c 	stmdb	sp!, {r2, r3}
    89ac:	a901      	add	r1, sp, #4
    89ae:	f7ff fbdd 	bl	816c <__gnu_Unwind_RaiseException>
    89b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    89b6:	b012      	add	sp, #72	; 0x48
    89b8:	4770      	bx	lr
    89ba:	bf00      	nop

000089bc <_Unwind_Resume>:
    89bc:	46ec      	mov	ip, sp
    89be:	b500      	push	{lr}
    89c0:	e92d 5000 	stmdb	sp!, {ip, lr}
    89c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    89c8:	f04f 0300 	mov.w	r3, #0
    89cc:	e92d 000c 	stmdb	sp!, {r2, r3}
    89d0:	a901      	add	r1, sp, #4
    89d2:	f7ff fc05 	bl	81e0 <__gnu_Unwind_Resume>
    89d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    89da:	b012      	add	sp, #72	; 0x48
    89dc:	4770      	bx	lr
    89de:	bf00      	nop

000089e0 <_Unwind_Resume_or_Rethrow>:
    89e0:	46ec      	mov	ip, sp
    89e2:	b500      	push	{lr}
    89e4:	e92d 5000 	stmdb	sp!, {ip, lr}
    89e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    89ec:	f04f 0300 	mov.w	r3, #0
    89f0:	e92d 000c 	stmdb	sp!, {r2, r3}
    89f4:	a901      	add	r1, sp, #4
    89f6:	f7ff fc15 	bl	8224 <__gnu_Unwind_Resume_or_Rethrow>
    89fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    89fe:	b012      	add	sp, #72	; 0x48
    8a00:	4770      	bx	lr
    8a02:	bf00      	nop

00008a04 <_Unwind_ForcedUnwind>:
    8a04:	46ec      	mov	ip, sp
    8a06:	b500      	push	{lr}
    8a08:	e92d 5000 	stmdb	sp!, {ip, lr}
    8a0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8a10:	f04f 0300 	mov.w	r3, #0
    8a14:	e92d 000c 	stmdb	sp!, {r2, r3}
    8a18:	ab01      	add	r3, sp, #4
    8a1a:	f7ff fbd7 	bl	81cc <__gnu_Unwind_ForcedUnwind>
    8a1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8a22:	b012      	add	sp, #72	; 0x48
    8a24:	4770      	bx	lr
    8a26:	bf00      	nop

00008a28 <_Unwind_Backtrace>:
    8a28:	46ec      	mov	ip, sp
    8a2a:	b500      	push	{lr}
    8a2c:	e92d 5000 	stmdb	sp!, {ip, lr}
    8a30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8a34:	f04f 0300 	mov.w	r3, #0
    8a38:	e92d 000c 	stmdb	sp!, {r2, r3}
    8a3c:	aa01      	add	r2, sp, #4
    8a3e:	f7ff fc47 	bl	82d0 <__gnu_Unwind_Backtrace>
    8a42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8a46:	b012      	add	sp, #72	; 0x48
    8a48:	4770      	bx	lr
    8a4a:	bf00      	nop

00008a4c <next_unwind_byte>:
    8a4c:	7a02      	ldrb	r2, [r0, #8]
    8a4e:	b982      	cbnz	r2, 8a72 <next_unwind_byte+0x26>
    8a50:	7a43      	ldrb	r3, [r0, #9]
    8a52:	b1ab      	cbz	r3, 8a80 <next_unwind_byte+0x34>
    8a54:	6842      	ldr	r2, [r0, #4]
    8a56:	3b01      	subs	r3, #1
    8a58:	b410      	push	{r4}
    8a5a:	7243      	strb	r3, [r0, #9]
    8a5c:	6813      	ldr	r3, [r2, #0]
    8a5e:	2103      	movs	r1, #3
    8a60:	1d14      	adds	r4, r2, #4
    8a62:	7201      	strb	r1, [r0, #8]
    8a64:	021a      	lsls	r2, r3, #8
    8a66:	6044      	str	r4, [r0, #4]
    8a68:	6002      	str	r2, [r0, #0]
    8a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    8a6e:	0e18      	lsrs	r0, r3, #24
    8a70:	4770      	bx	lr
    8a72:	6803      	ldr	r3, [r0, #0]
    8a74:	3a01      	subs	r2, #1
    8a76:	7202      	strb	r2, [r0, #8]
    8a78:	021a      	lsls	r2, r3, #8
    8a7a:	6002      	str	r2, [r0, #0]
    8a7c:	0e18      	lsrs	r0, r3, #24
    8a7e:	4770      	bx	lr
    8a80:	20b0      	movs	r0, #176	; 0xb0
    8a82:	4770      	bx	lr

00008a84 <_Unwind_GetGR.constprop.0>:
    8a84:	b500      	push	{lr}
    8a86:	b085      	sub	sp, #20
    8a88:	aa03      	add	r2, sp, #12
    8a8a:	2300      	movs	r3, #0
    8a8c:	9200      	str	r2, [sp, #0]
    8a8e:	4619      	mov	r1, r3
    8a90:	220c      	movs	r2, #12
    8a92:	f7ff fbd7 	bl	8244 <_Unwind_VRS_Get>
    8a96:	9803      	ldr	r0, [sp, #12]
    8a98:	b005      	add	sp, #20
    8a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    8a9e:	bf00      	nop

00008aa0 <unwind_UCB_from_context>:
    8aa0:	e7f0      	b.n	8a84 <_Unwind_GetGR.constprop.0>
    8aa2:	bf00      	nop

00008aa4 <__gnu_unwind_execute>:
    8aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8aa8:	4605      	mov	r5, r0
    8aaa:	b085      	sub	sp, #20
    8aac:	460e      	mov	r6, r1
    8aae:	f04f 0800 	mov.w	r8, #0
    8ab2:	4630      	mov	r0, r6
    8ab4:	f7ff ffca 	bl	8a4c <next_unwind_byte>
    8ab8:	28b0      	cmp	r0, #176	; 0xb0
    8aba:	4604      	mov	r4, r0
    8abc:	f000 80b1 	beq.w	8c22 <__gnu_unwind_execute+0x17e>
    8ac0:	0607      	lsls	r7, r0, #24
    8ac2:	d520      	bpl.n	8b06 <__gnu_unwind_execute+0x62>
    8ac4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    8ac8:	2b80      	cmp	r3, #128	; 0x80
    8aca:	d065      	beq.n	8b98 <__gnu_unwind_execute+0xf4>
    8acc:	2b90      	cmp	r3, #144	; 0x90
    8ace:	d036      	beq.n	8b3e <__gnu_unwind_execute+0x9a>
    8ad0:	2ba0      	cmp	r3, #160	; 0xa0
    8ad2:	d078      	beq.n	8bc6 <__gnu_unwind_execute+0x122>
    8ad4:	2bb0      	cmp	r3, #176	; 0xb0
    8ad6:	d047      	beq.n	8b68 <__gnu_unwind_execute+0xc4>
    8ad8:	2bc0      	cmp	r3, #192	; 0xc0
    8ada:	f000 808a 	beq.w	8bf2 <__gnu_unwind_execute+0x14e>
    8ade:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    8ae2:	2bd0      	cmp	r3, #208	; 0xd0
    8ae4:	d10b      	bne.n	8afe <__gnu_unwind_execute+0x5a>
    8ae6:	f000 0207 	and.w	r2, r0, #7
    8aea:	3201      	adds	r2, #1
    8aec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8af0:	2305      	movs	r3, #5
    8af2:	2101      	movs	r1, #1
    8af4:	4628      	mov	r0, r5
    8af6:	f7ff fd93 	bl	8620 <_Unwind_VRS_Pop>
    8afa:	2800      	cmp	r0, #0
    8afc:	d0d9      	beq.n	8ab2 <__gnu_unwind_execute+0xe>
    8afe:	2009      	movs	r0, #9
    8b00:	b005      	add	sp, #20
    8b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8b06:	f10d 090c 	add.w	r9, sp, #12
    8b0a:	2300      	movs	r3, #0
    8b0c:	4619      	mov	r1, r3
    8b0e:	0087      	lsls	r7, r0, #2
    8b10:	f8cd 9000 	str.w	r9, [sp]
    8b14:	220d      	movs	r2, #13
    8b16:	4628      	mov	r0, r5
    8b18:	f7ff fb94 	bl	8244 <_Unwind_VRS_Get>
    8b1c:	b2ff      	uxtb	r7, r7
    8b1e:	9b03      	ldr	r3, [sp, #12]
    8b20:	f8cd 9000 	str.w	r9, [sp]
    8b24:	3704      	adds	r7, #4
    8b26:	0660      	lsls	r0, r4, #25
    8b28:	bf4c      	ite	mi
    8b2a:	1bdf      	submi	r7, r3, r7
    8b2c:	18ff      	addpl	r7, r7, r3
    8b2e:	2300      	movs	r3, #0
    8b30:	4619      	mov	r1, r3
    8b32:	220d      	movs	r2, #13
    8b34:	4628      	mov	r0, r5
    8b36:	9703      	str	r7, [sp, #12]
    8b38:	f7ff fba6 	bl	8288 <_Unwind_VRS_Set>
    8b3c:	e7b9      	b.n	8ab2 <__gnu_unwind_execute+0xe>
    8b3e:	f000 030d 	and.w	r3, r0, #13
    8b42:	2b0d      	cmp	r3, #13
    8b44:	d0db      	beq.n	8afe <__gnu_unwind_execute+0x5a>
    8b46:	af03      	add	r7, sp, #12
    8b48:	2300      	movs	r3, #0
    8b4a:	f000 020f 	and.w	r2, r0, #15
    8b4e:	4619      	mov	r1, r3
    8b50:	9700      	str	r7, [sp, #0]
    8b52:	4628      	mov	r0, r5
    8b54:	f7ff fb76 	bl	8244 <_Unwind_VRS_Get>
    8b58:	2300      	movs	r3, #0
    8b5a:	9700      	str	r7, [sp, #0]
    8b5c:	4619      	mov	r1, r3
    8b5e:	220d      	movs	r2, #13
    8b60:	4628      	mov	r0, r5
    8b62:	f7ff fb91 	bl	8288 <_Unwind_VRS_Set>
    8b66:	e7a4      	b.n	8ab2 <__gnu_unwind_execute+0xe>
    8b68:	28b1      	cmp	r0, #177	; 0xb1
    8b6a:	d05f      	beq.n	8c2c <__gnu_unwind_execute+0x188>
    8b6c:	28b2      	cmp	r0, #178	; 0xb2
    8b6e:	f000 80cc 	beq.w	8d0a <__gnu_unwind_execute+0x266>
    8b72:	28b3      	cmp	r0, #179	; 0xb3
    8b74:	d07e      	beq.n	8c74 <__gnu_unwind_execute+0x1d0>
    8b76:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    8b7a:	2bb4      	cmp	r3, #180	; 0xb4
    8b7c:	d0bf      	beq.n	8afe <__gnu_unwind_execute+0x5a>
    8b7e:	f000 0207 	and.w	r2, r0, #7
    8b82:	3201      	adds	r2, #1
    8b84:	2301      	movs	r3, #1
    8b86:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8b8a:	4619      	mov	r1, r3
    8b8c:	4628      	mov	r0, r5
    8b8e:	f7ff fd47 	bl	8620 <_Unwind_VRS_Pop>
    8b92:	2800      	cmp	r0, #0
    8b94:	d08d      	beq.n	8ab2 <__gnu_unwind_execute+0xe>
    8b96:	e7b2      	b.n	8afe <__gnu_unwind_execute+0x5a>
    8b98:	4630      	mov	r0, r6
    8b9a:	f7ff ff57 	bl	8a4c <next_unwind_byte>
    8b9e:	0224      	lsls	r4, r4, #8
    8ba0:	4304      	orrs	r4, r0
    8ba2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    8ba6:	d0aa      	beq.n	8afe <__gnu_unwind_execute+0x5a>
    8ba8:	0124      	lsls	r4, r4, #4
    8baa:	2300      	movs	r3, #0
    8bac:	b2a2      	uxth	r2, r4
    8bae:	4619      	mov	r1, r3
    8bb0:	4628      	mov	r0, r5
    8bb2:	f7ff fd35 	bl	8620 <_Unwind_VRS_Pop>
    8bb6:	2800      	cmp	r0, #0
    8bb8:	d1a1      	bne.n	8afe <__gnu_unwind_execute+0x5a>
    8bba:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    8bbe:	bf18      	it	ne
    8bc0:	f04f 0801 	movne.w	r8, #1
    8bc4:	e775      	b.n	8ab2 <__gnu_unwind_execute+0xe>
    8bc6:	43c2      	mvns	r2, r0
    8bc8:	f002 0307 	and.w	r3, r2, #7
    8bcc:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    8bd0:	411a      	asrs	r2, r3
    8bd2:	0701      	lsls	r1, r0, #28
    8bd4:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    8bd8:	f04f 0300 	mov.w	r3, #0
    8bdc:	bf48      	it	mi
    8bde:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    8be2:	4619      	mov	r1, r3
    8be4:	4628      	mov	r0, r5
    8be6:	f7ff fd1b 	bl	8620 <_Unwind_VRS_Pop>
    8bea:	2800      	cmp	r0, #0
    8bec:	f43f af61 	beq.w	8ab2 <__gnu_unwind_execute+0xe>
    8bf0:	e785      	b.n	8afe <__gnu_unwind_execute+0x5a>
    8bf2:	28c6      	cmp	r0, #198	; 0xc6
    8bf4:	d051      	beq.n	8c9a <__gnu_unwind_execute+0x1f6>
    8bf6:	28c7      	cmp	r0, #199	; 0xc7
    8bf8:	d05a      	beq.n	8cb0 <__gnu_unwind_execute+0x20c>
    8bfa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    8bfe:	2bc0      	cmp	r3, #192	; 0xc0
    8c00:	d069      	beq.n	8cd6 <__gnu_unwind_execute+0x232>
    8c02:	28c8      	cmp	r0, #200	; 0xc8
    8c04:	d075      	beq.n	8cf2 <__gnu_unwind_execute+0x24e>
    8c06:	28c9      	cmp	r0, #201	; 0xc9
    8c08:	f47f af79 	bne.w	8afe <__gnu_unwind_execute+0x5a>
    8c0c:	4630      	mov	r0, r6
    8c0e:	f7ff ff1d 	bl	8a4c <next_unwind_byte>
    8c12:	0302      	lsls	r2, r0, #12
    8c14:	f000 000f 	and.w	r0, r0, #15
    8c18:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    8c1c:	3001      	adds	r0, #1
    8c1e:	4302      	orrs	r2, r0
    8c20:	e766      	b.n	8af0 <__gnu_unwind_execute+0x4c>
    8c22:	f1b8 0f00 	cmp.w	r8, #0
    8c26:	d014      	beq.n	8c52 <__gnu_unwind_execute+0x1ae>
    8c28:	2000      	movs	r0, #0
    8c2a:	e769      	b.n	8b00 <__gnu_unwind_execute+0x5c>
    8c2c:	4630      	mov	r0, r6
    8c2e:	f7ff ff0d 	bl	8a4c <next_unwind_byte>
    8c32:	2800      	cmp	r0, #0
    8c34:	f43f af63 	beq.w	8afe <__gnu_unwind_execute+0x5a>
    8c38:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8c3c:	f47f af5f 	bne.w	8afe <__gnu_unwind_execute+0x5a>
    8c40:	4602      	mov	r2, r0
    8c42:	4619      	mov	r1, r3
    8c44:	4628      	mov	r0, r5
    8c46:	f7ff fceb 	bl	8620 <_Unwind_VRS_Pop>
    8c4a:	2800      	cmp	r0, #0
    8c4c:	f43f af31 	beq.w	8ab2 <__gnu_unwind_execute+0xe>
    8c50:	e755      	b.n	8afe <__gnu_unwind_execute+0x5a>
    8c52:	ac03      	add	r4, sp, #12
    8c54:	4643      	mov	r3, r8
    8c56:	220e      	movs	r2, #14
    8c58:	4641      	mov	r1, r8
    8c5a:	9400      	str	r4, [sp, #0]
    8c5c:	4628      	mov	r0, r5
    8c5e:	f7ff faf1 	bl	8244 <_Unwind_VRS_Get>
    8c62:	9400      	str	r4, [sp, #0]
    8c64:	4628      	mov	r0, r5
    8c66:	4643      	mov	r3, r8
    8c68:	220f      	movs	r2, #15
    8c6a:	4641      	mov	r1, r8
    8c6c:	f7ff fb0c 	bl	8288 <_Unwind_VRS_Set>
    8c70:	4640      	mov	r0, r8
    8c72:	e745      	b.n	8b00 <__gnu_unwind_execute+0x5c>
    8c74:	4630      	mov	r0, r6
    8c76:	f7ff fee9 	bl	8a4c <next_unwind_byte>
    8c7a:	0301      	lsls	r1, r0, #12
    8c7c:	f000 000f 	and.w	r0, r0, #15
    8c80:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8c84:	1c42      	adds	r2, r0, #1
    8c86:	2301      	movs	r3, #1
    8c88:	430a      	orrs	r2, r1
    8c8a:	4628      	mov	r0, r5
    8c8c:	4619      	mov	r1, r3
    8c8e:	f7ff fcc7 	bl	8620 <_Unwind_VRS_Pop>
    8c92:	2800      	cmp	r0, #0
    8c94:	f43f af0d 	beq.w	8ab2 <__gnu_unwind_execute+0xe>
    8c98:	e731      	b.n	8afe <__gnu_unwind_execute+0x5a>
    8c9a:	4630      	mov	r0, r6
    8c9c:	f7ff fed6 	bl	8a4c <next_unwind_byte>
    8ca0:	0301      	lsls	r1, r0, #12
    8ca2:	f000 000f 	and.w	r0, r0, #15
    8ca6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8caa:	1c42      	adds	r2, r0, #1
    8cac:	2303      	movs	r3, #3
    8cae:	e7eb      	b.n	8c88 <__gnu_unwind_execute+0x1e4>
    8cb0:	4630      	mov	r0, r6
    8cb2:	f7ff fecb 	bl	8a4c <next_unwind_byte>
    8cb6:	4602      	mov	r2, r0
    8cb8:	2800      	cmp	r0, #0
    8cba:	f43f af20 	beq.w	8afe <__gnu_unwind_execute+0x5a>
    8cbe:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8cc2:	f47f af1c 	bne.w	8afe <__gnu_unwind_execute+0x5a>
    8cc6:	2104      	movs	r1, #4
    8cc8:	4628      	mov	r0, r5
    8cca:	f7ff fca9 	bl	8620 <_Unwind_VRS_Pop>
    8cce:	2800      	cmp	r0, #0
    8cd0:	f43f aeef 	beq.w	8ab2 <__gnu_unwind_execute+0xe>
    8cd4:	e713      	b.n	8afe <__gnu_unwind_execute+0x5a>
    8cd6:	f000 020f 	and.w	r2, r0, #15
    8cda:	3201      	adds	r2, #1
    8cdc:	2303      	movs	r3, #3
    8cde:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    8ce2:	4619      	mov	r1, r3
    8ce4:	4628      	mov	r0, r5
    8ce6:	f7ff fc9b 	bl	8620 <_Unwind_VRS_Pop>
    8cea:	2800      	cmp	r0, #0
    8cec:	f43f aee1 	beq.w	8ab2 <__gnu_unwind_execute+0xe>
    8cf0:	e705      	b.n	8afe <__gnu_unwind_execute+0x5a>
    8cf2:	4630      	mov	r0, r6
    8cf4:	f7ff feaa 	bl	8a4c <next_unwind_byte>
    8cf8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    8cfc:	f000 030f 	and.w	r3, r0, #15
    8d00:	3210      	adds	r2, #16
    8d02:	3301      	adds	r3, #1
    8d04:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    8d08:	e6f2      	b.n	8af0 <__gnu_unwind_execute+0x4c>
    8d0a:	2300      	movs	r3, #0
    8d0c:	f10d 090c 	add.w	r9, sp, #12
    8d10:	220d      	movs	r2, #13
    8d12:	4619      	mov	r1, r3
    8d14:	f8cd 9000 	str.w	r9, [sp]
    8d18:	4628      	mov	r0, r5
    8d1a:	f7ff fa93 	bl	8244 <_Unwind_VRS_Get>
    8d1e:	4630      	mov	r0, r6
    8d20:	f7ff fe94 	bl	8a4c <next_unwind_byte>
    8d24:	0602      	lsls	r2, r0, #24
    8d26:	f04f 0702 	mov.w	r7, #2
    8d2a:	d50c      	bpl.n	8d46 <__gnu_unwind_execute+0x2a2>
    8d2c:	9b03      	ldr	r3, [sp, #12]
    8d2e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    8d32:	40b8      	lsls	r0, r7
    8d34:	4403      	add	r3, r0
    8d36:	4630      	mov	r0, r6
    8d38:	9303      	str	r3, [sp, #12]
    8d3a:	f7ff fe87 	bl	8a4c <next_unwind_byte>
    8d3e:	0603      	lsls	r3, r0, #24
    8d40:	f107 0707 	add.w	r7, r7, #7
    8d44:	d4f2      	bmi.n	8d2c <__gnu_unwind_execute+0x288>
    8d46:	9b03      	ldr	r3, [sp, #12]
    8d48:	f8cd 9000 	str.w	r9, [sp]
    8d4c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    8d50:	f503 7201 	add.w	r2, r3, #516	; 0x204
    8d54:	40bc      	lsls	r4, r7
    8d56:	2300      	movs	r3, #0
    8d58:	4414      	add	r4, r2
    8d5a:	4619      	mov	r1, r3
    8d5c:	220d      	movs	r2, #13
    8d5e:	4628      	mov	r0, r5
    8d60:	9403      	str	r4, [sp, #12]
    8d62:	f7ff fa91 	bl	8288 <_Unwind_VRS_Set>
    8d66:	e6a4      	b.n	8ab2 <__gnu_unwind_execute+0xe>

00008d68 <__gnu_unwind_frame>:
    8d68:	b510      	push	{r4, lr}
    8d6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    8d6c:	b084      	sub	sp, #16
    8d6e:	685a      	ldr	r2, [r3, #4]
    8d70:	2003      	movs	r0, #3
    8d72:	f88d 000c 	strb.w	r0, [sp, #12]
    8d76:	79dc      	ldrb	r4, [r3, #7]
    8d78:	f88d 400d 	strb.w	r4, [sp, #13]
    8d7c:	0212      	lsls	r2, r2, #8
    8d7e:	3308      	adds	r3, #8
    8d80:	4608      	mov	r0, r1
    8d82:	a901      	add	r1, sp, #4
    8d84:	9201      	str	r2, [sp, #4]
    8d86:	9302      	str	r3, [sp, #8]
    8d88:	f7ff fe8c 	bl	8aa4 <__gnu_unwind_execute>
    8d8c:	b004      	add	sp, #16
    8d8e:	bd10      	pop	{r4, pc}

00008d90 <_Unwind_GetRegionStart>:
    8d90:	b508      	push	{r3, lr}
    8d92:	f7ff fe85 	bl	8aa0 <unwind_UCB_from_context>
    8d96:	6c80      	ldr	r0, [r0, #72]	; 0x48
    8d98:	bd08      	pop	{r3, pc}
    8d9a:	bf00      	nop

00008d9c <_Unwind_GetLanguageSpecificData>:
    8d9c:	b508      	push	{r3, lr}
    8d9e:	f7ff fe7f 	bl	8aa0 <unwind_UCB_from_context>
    8da2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    8da4:	79c3      	ldrb	r3, [r0, #7]
    8da6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8daa:	3008      	adds	r0, #8
    8dac:	bd08      	pop	{r3, pc}
    8dae:	bf00      	nop

00008db0 <_Unwind_GetDataRelBase>:
    8db0:	b508      	push	{r3, lr}
    8db2:	f000 f807 	bl	8dc4 <abort>
    8db6:	bf00      	nop

00008db8 <_Unwind_GetTextRelBase>:
    8db8:	b508      	push	{r3, lr}
    8dba:	f7ff fff9 	bl	8db0 <_Unwind_GetDataRelBase>
    8dbe:	bf00      	nop

00008dc0 <__aeabi_idiv0>:
    8dc0:	4770      	bx	lr
    8dc2:	bf00      	nop

00008dc4 <abort>:
    8dc4:	b508      	push	{r3, lr}
    8dc6:	2006      	movs	r0, #6
    8dc8:	f000 f92c 	bl	9024 <raise>
    8dcc:	2001      	movs	r0, #1
    8dce:	f7fc f915 	bl	4ffc <_exit>
    8dd2:	Address 0x0000000000008dd2 is out of bounds.


00008dd4 <__libc_init_array>:
    8dd4:	b570      	push	{r4, r5, r6, lr}
    8dd6:	4e0d      	ldr	r6, [pc, #52]	; (8e0c <__libc_init_array+0x38>)
    8dd8:	4c0d      	ldr	r4, [pc, #52]	; (8e10 <__libc_init_array+0x3c>)
    8dda:	1ba4      	subs	r4, r4, r6
    8ddc:	10a4      	asrs	r4, r4, #2
    8dde:	2500      	movs	r5, #0
    8de0:	42a5      	cmp	r5, r4
    8de2:	d109      	bne.n	8df8 <__libc_init_array+0x24>
    8de4:	4e0b      	ldr	r6, [pc, #44]	; (8e14 <__libc_init_array+0x40>)
    8de6:	4c0c      	ldr	r4, [pc, #48]	; (8e18 <__libc_init_array+0x44>)
    8de8:	f7f7 fa8a 	bl	300 <_init>
    8dec:	1ba4      	subs	r4, r4, r6
    8dee:	10a4      	asrs	r4, r4, #2
    8df0:	2500      	movs	r5, #0
    8df2:	42a5      	cmp	r5, r4
    8df4:	d105      	bne.n	8e02 <__libc_init_array+0x2e>
    8df6:	bd70      	pop	{r4, r5, r6, pc}
    8df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8dfc:	4798      	blx	r3
    8dfe:	3501      	adds	r5, #1
    8e00:	e7ee      	b.n	8de0 <__libc_init_array+0xc>
    8e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8e06:	4798      	blx	r3
    8e08:	3501      	adds	r5, #1
    8e0a:	e7f2      	b.n	8df2 <__libc_init_array+0x1e>
    8e0c:	0000030c 	.word	0x0000030c
    8e10:	0000030c 	.word	0x0000030c
    8e14:	0000030c 	.word	0x0000030c
    8e18:	0000031c 	.word	0x0000031c

00008e1c <malloc>:
    8e1c:	4b02      	ldr	r3, [pc, #8]	; (8e28 <malloc+0xc>)
    8e1e:	4601      	mov	r1, r0
    8e20:	6818      	ldr	r0, [r3, #0]
    8e22:	f000 b86d 	b.w	8f00 <_malloc_r>
    8e26:	bf00      	nop
    8e28:	10000094 	.word	0x10000094

00008e2c <free>:
    8e2c:	4b02      	ldr	r3, [pc, #8]	; (8e38 <free+0xc>)
    8e2e:	4601      	mov	r1, r0
    8e30:	6818      	ldr	r0, [r3, #0]
    8e32:	f000 b817 	b.w	8e64 <_free_r>
    8e36:	bf00      	nop
    8e38:	10000094 	.word	0x10000094

00008e3c <memcpy>:
    8e3c:	b510      	push	{r4, lr}
    8e3e:	1e43      	subs	r3, r0, #1
    8e40:	440a      	add	r2, r1
    8e42:	4291      	cmp	r1, r2
    8e44:	d100      	bne.n	8e48 <memcpy+0xc>
    8e46:	bd10      	pop	{r4, pc}
    8e48:	f811 4b01 	ldrb.w	r4, [r1], #1
    8e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
    8e50:	e7f7      	b.n	8e42 <memcpy+0x6>

00008e52 <memset>:
    8e52:	4402      	add	r2, r0
    8e54:	4603      	mov	r3, r0
    8e56:	4293      	cmp	r3, r2
    8e58:	d100      	bne.n	8e5c <memset+0xa>
    8e5a:	4770      	bx	lr
    8e5c:	f803 1b01 	strb.w	r1, [r3], #1
    8e60:	e7f9      	b.n	8e56 <memset+0x4>
    8e62:	Address 0x0000000000008e62 is out of bounds.


00008e64 <_free_r>:
    8e64:	b538      	push	{r3, r4, r5, lr}
    8e66:	4605      	mov	r5, r0
    8e68:	2900      	cmp	r1, #0
    8e6a:	d045      	beq.n	8ef8 <_free_r+0x94>
    8e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8e70:	1f0c      	subs	r4, r1, #4
    8e72:	2b00      	cmp	r3, #0
    8e74:	bfb8      	it	lt
    8e76:	18e4      	addlt	r4, r4, r3
    8e78:	f000 f8f8 	bl	906c <__malloc_lock>
    8e7c:	4a1f      	ldr	r2, [pc, #124]	; (8efc <_free_r+0x98>)
    8e7e:	6813      	ldr	r3, [r2, #0]
    8e80:	4610      	mov	r0, r2
    8e82:	b933      	cbnz	r3, 8e92 <_free_r+0x2e>
    8e84:	6063      	str	r3, [r4, #4]
    8e86:	6014      	str	r4, [r2, #0]
    8e88:	4628      	mov	r0, r5
    8e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e8e:	f000 b8ee 	b.w	906e <__malloc_unlock>
    8e92:	42a3      	cmp	r3, r4
    8e94:	d90c      	bls.n	8eb0 <_free_r+0x4c>
    8e96:	6821      	ldr	r1, [r4, #0]
    8e98:	1862      	adds	r2, r4, r1
    8e9a:	4293      	cmp	r3, r2
    8e9c:	bf04      	itt	eq
    8e9e:	681a      	ldreq	r2, [r3, #0]
    8ea0:	685b      	ldreq	r3, [r3, #4]
    8ea2:	6063      	str	r3, [r4, #4]
    8ea4:	bf04      	itt	eq
    8ea6:	1852      	addeq	r2, r2, r1
    8ea8:	6022      	streq	r2, [r4, #0]
    8eaa:	6004      	str	r4, [r0, #0]
    8eac:	e7ec      	b.n	8e88 <_free_r+0x24>
    8eae:	4613      	mov	r3, r2
    8eb0:	685a      	ldr	r2, [r3, #4]
    8eb2:	b10a      	cbz	r2, 8eb8 <_free_r+0x54>
    8eb4:	42a2      	cmp	r2, r4
    8eb6:	d9fa      	bls.n	8eae <_free_r+0x4a>
    8eb8:	6819      	ldr	r1, [r3, #0]
    8eba:	1858      	adds	r0, r3, r1
    8ebc:	42a0      	cmp	r0, r4
    8ebe:	d10b      	bne.n	8ed8 <_free_r+0x74>
    8ec0:	6820      	ldr	r0, [r4, #0]
    8ec2:	4401      	add	r1, r0
    8ec4:	1858      	adds	r0, r3, r1
    8ec6:	4282      	cmp	r2, r0
    8ec8:	6019      	str	r1, [r3, #0]
    8eca:	d1dd      	bne.n	8e88 <_free_r+0x24>
    8ecc:	6810      	ldr	r0, [r2, #0]
    8ece:	6852      	ldr	r2, [r2, #4]
    8ed0:	605a      	str	r2, [r3, #4]
    8ed2:	4401      	add	r1, r0
    8ed4:	6019      	str	r1, [r3, #0]
    8ed6:	e7d7      	b.n	8e88 <_free_r+0x24>
    8ed8:	d902      	bls.n	8ee0 <_free_r+0x7c>
    8eda:	230c      	movs	r3, #12
    8edc:	602b      	str	r3, [r5, #0]
    8ede:	e7d3      	b.n	8e88 <_free_r+0x24>
    8ee0:	6820      	ldr	r0, [r4, #0]
    8ee2:	1821      	adds	r1, r4, r0
    8ee4:	428a      	cmp	r2, r1
    8ee6:	bf04      	itt	eq
    8ee8:	6811      	ldreq	r1, [r2, #0]
    8eea:	6852      	ldreq	r2, [r2, #4]
    8eec:	6062      	str	r2, [r4, #4]
    8eee:	bf04      	itt	eq
    8ef0:	1809      	addeq	r1, r1, r0
    8ef2:	6021      	streq	r1, [r4, #0]
    8ef4:	605c      	str	r4, [r3, #4]
    8ef6:	e7c7      	b.n	8e88 <_free_r+0x24>
    8ef8:	bd38      	pop	{r3, r4, r5, pc}
    8efa:	bf00      	nop
    8efc:	10000edc 	.word	0x10000edc

00008f00 <_malloc_r>:
    8f00:	b570      	push	{r4, r5, r6, lr}
    8f02:	1ccd      	adds	r5, r1, #3
    8f04:	f025 0503 	bic.w	r5, r5, #3
    8f08:	3508      	adds	r5, #8
    8f0a:	2d0c      	cmp	r5, #12
    8f0c:	bf38      	it	cc
    8f0e:	250c      	movcc	r5, #12
    8f10:	2d00      	cmp	r5, #0
    8f12:	4606      	mov	r6, r0
    8f14:	db01      	blt.n	8f1a <_malloc_r+0x1a>
    8f16:	42a9      	cmp	r1, r5
    8f18:	d903      	bls.n	8f22 <_malloc_r+0x22>
    8f1a:	230c      	movs	r3, #12
    8f1c:	6033      	str	r3, [r6, #0]
    8f1e:	2000      	movs	r0, #0
    8f20:	bd70      	pop	{r4, r5, r6, pc}
    8f22:	f000 f8a3 	bl	906c <__malloc_lock>
    8f26:	4a21      	ldr	r2, [pc, #132]	; (8fac <_malloc_r+0xac>)
    8f28:	6814      	ldr	r4, [r2, #0]
    8f2a:	4621      	mov	r1, r4
    8f2c:	b991      	cbnz	r1, 8f54 <_malloc_r+0x54>
    8f2e:	4c20      	ldr	r4, [pc, #128]	; (8fb0 <_malloc_r+0xb0>)
    8f30:	6823      	ldr	r3, [r4, #0]
    8f32:	b91b      	cbnz	r3, 8f3c <_malloc_r+0x3c>
    8f34:	4630      	mov	r0, r6
    8f36:	f000 f83d 	bl	8fb4 <_sbrk_r>
    8f3a:	6020      	str	r0, [r4, #0]
    8f3c:	4629      	mov	r1, r5
    8f3e:	4630      	mov	r0, r6
    8f40:	f000 f838 	bl	8fb4 <_sbrk_r>
    8f44:	1c43      	adds	r3, r0, #1
    8f46:	d124      	bne.n	8f92 <_malloc_r+0x92>
    8f48:	230c      	movs	r3, #12
    8f4a:	6033      	str	r3, [r6, #0]
    8f4c:	4630      	mov	r0, r6
    8f4e:	f000 f88e 	bl	906e <__malloc_unlock>
    8f52:	e7e4      	b.n	8f1e <_malloc_r+0x1e>
    8f54:	680b      	ldr	r3, [r1, #0]
    8f56:	1b5b      	subs	r3, r3, r5
    8f58:	d418      	bmi.n	8f8c <_malloc_r+0x8c>
    8f5a:	2b0b      	cmp	r3, #11
    8f5c:	d90f      	bls.n	8f7e <_malloc_r+0x7e>
    8f5e:	600b      	str	r3, [r1, #0]
    8f60:	50cd      	str	r5, [r1, r3]
    8f62:	18cc      	adds	r4, r1, r3
    8f64:	4630      	mov	r0, r6
    8f66:	f000 f882 	bl	906e <__malloc_unlock>
    8f6a:	f104 000b 	add.w	r0, r4, #11
    8f6e:	1d23      	adds	r3, r4, #4
    8f70:	f020 0007 	bic.w	r0, r0, #7
    8f74:	1ac3      	subs	r3, r0, r3
    8f76:	d0d3      	beq.n	8f20 <_malloc_r+0x20>
    8f78:	425a      	negs	r2, r3
    8f7a:	50e2      	str	r2, [r4, r3]
    8f7c:	e7d0      	b.n	8f20 <_malloc_r+0x20>
    8f7e:	428c      	cmp	r4, r1
    8f80:	684b      	ldr	r3, [r1, #4]
    8f82:	bf16      	itet	ne
    8f84:	6063      	strne	r3, [r4, #4]
    8f86:	6013      	streq	r3, [r2, #0]
    8f88:	460c      	movne	r4, r1
    8f8a:	e7eb      	b.n	8f64 <_malloc_r+0x64>
    8f8c:	460c      	mov	r4, r1
    8f8e:	6849      	ldr	r1, [r1, #4]
    8f90:	e7cc      	b.n	8f2c <_malloc_r+0x2c>
    8f92:	1cc4      	adds	r4, r0, #3
    8f94:	f024 0403 	bic.w	r4, r4, #3
    8f98:	42a0      	cmp	r0, r4
    8f9a:	d005      	beq.n	8fa8 <_malloc_r+0xa8>
    8f9c:	1a21      	subs	r1, r4, r0
    8f9e:	4630      	mov	r0, r6
    8fa0:	f000 f808 	bl	8fb4 <_sbrk_r>
    8fa4:	3001      	adds	r0, #1
    8fa6:	d0cf      	beq.n	8f48 <_malloc_r+0x48>
    8fa8:	6025      	str	r5, [r4, #0]
    8faa:	e7db      	b.n	8f64 <_malloc_r+0x64>
    8fac:	10000edc 	.word	0x10000edc
    8fb0:	10000ee0 	.word	0x10000ee0

00008fb4 <_sbrk_r>:
    8fb4:	b538      	push	{r3, r4, r5, lr}
    8fb6:	4c06      	ldr	r4, [pc, #24]	; (8fd0 <_sbrk_r+0x1c>)
    8fb8:	2300      	movs	r3, #0
    8fba:	4605      	mov	r5, r0
    8fbc:	4608      	mov	r0, r1
    8fbe:	6023      	str	r3, [r4, #0]
    8fc0:	f7fb ffbe 	bl	4f40 <_sbrk>
    8fc4:	1c43      	adds	r3, r0, #1
    8fc6:	d102      	bne.n	8fce <_sbrk_r+0x1a>
    8fc8:	6823      	ldr	r3, [r4, #0]
    8fca:	b103      	cbz	r3, 8fce <_sbrk_r+0x1a>
    8fcc:	602b      	str	r3, [r5, #0]
    8fce:	bd38      	pop	{r3, r4, r5, pc}
    8fd0:	10000f34 	.word	0x10000f34

00008fd4 <_raise_r>:
    8fd4:	291f      	cmp	r1, #31
    8fd6:	b538      	push	{r3, r4, r5, lr}
    8fd8:	4604      	mov	r4, r0
    8fda:	460d      	mov	r5, r1
    8fdc:	d904      	bls.n	8fe8 <_raise_r+0x14>
    8fde:	2316      	movs	r3, #22
    8fe0:	6003      	str	r3, [r0, #0]
    8fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8fe6:	bd38      	pop	{r3, r4, r5, pc}
    8fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8fea:	b112      	cbz	r2, 8ff2 <_raise_r+0x1e>
    8fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8ff0:	b94b      	cbnz	r3, 9006 <_raise_r+0x32>
    8ff2:	4620      	mov	r0, r4
    8ff4:	f000 f830 	bl	9058 <_getpid_r>
    8ff8:	462a      	mov	r2, r5
    8ffa:	4601      	mov	r1, r0
    8ffc:	4620      	mov	r0, r4
    8ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9002:	f000 b817 	b.w	9034 <_kill_r>
    9006:	2b01      	cmp	r3, #1
    9008:	d00a      	beq.n	9020 <_raise_r+0x4c>
    900a:	1c59      	adds	r1, r3, #1
    900c:	d103      	bne.n	9016 <_raise_r+0x42>
    900e:	2316      	movs	r3, #22
    9010:	6003      	str	r3, [r0, #0]
    9012:	2001      	movs	r0, #1
    9014:	e7e7      	b.n	8fe6 <_raise_r+0x12>
    9016:	2400      	movs	r4, #0
    9018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    901c:	4628      	mov	r0, r5
    901e:	4798      	blx	r3
    9020:	2000      	movs	r0, #0
    9022:	e7e0      	b.n	8fe6 <_raise_r+0x12>

00009024 <raise>:
    9024:	4b02      	ldr	r3, [pc, #8]	; (9030 <raise+0xc>)
    9026:	4601      	mov	r1, r0
    9028:	6818      	ldr	r0, [r3, #0]
    902a:	f7ff bfd3 	b.w	8fd4 <_raise_r>
    902e:	bf00      	nop
    9030:	10000094 	.word	0x10000094

00009034 <_kill_r>:
    9034:	b538      	push	{r3, r4, r5, lr}
    9036:	4c07      	ldr	r4, [pc, #28]	; (9054 <_kill_r+0x20>)
    9038:	2300      	movs	r3, #0
    903a:	4605      	mov	r5, r0
    903c:	4608      	mov	r0, r1
    903e:	4611      	mov	r1, r2
    9040:	6023      	str	r3, [r4, #0]
    9042:	f7fb ff6f 	bl	4f24 <_kill>
    9046:	1c43      	adds	r3, r0, #1
    9048:	d102      	bne.n	9050 <_kill_r+0x1c>
    904a:	6823      	ldr	r3, [r4, #0]
    904c:	b103      	cbz	r3, 9050 <_kill_r+0x1c>
    904e:	602b      	str	r3, [r5, #0]
    9050:	bd38      	pop	{r3, r4, r5, pc}
    9052:	bf00      	nop
    9054:	10000f34 	.word	0x10000f34

00009058 <_getpid_r>:
    9058:	f7fb bf5c 	b.w	4f14 <_getpid>

0000905c <strlen>:
    905c:	4603      	mov	r3, r0
    905e:	f813 2b01 	ldrb.w	r2, [r3], #1
    9062:	2a00      	cmp	r2, #0
    9064:	d1fb      	bne.n	905e <strlen+0x2>
    9066:	1a18      	subs	r0, r3, r0
    9068:	3801      	subs	r0, #1
    906a:	4770      	bx	lr

0000906c <__malloc_lock>:
    906c:	4770      	bx	lr

0000906e <__malloc_unlock>:
    906e:	4770      	bx	lr

00009070 <sjsu::lpc40xx::Pin::kFunction>:
    9070:	0300 ffff                                   ....

00009074 <sjsu::lpc40xx::Pin::kResistor>:
    9074:	0203 ffff                                   ....

00009078 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    9078:	0107 ffff                                   ....

0000907c <sjsu::lpc40xx::Pin::kOpenDrain>:
    907c:	010a ffff 6e69 6176 696c 0064 7061 6c70     ....invalid.appl
    908c:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    909c:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    90ac:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    90bc:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    90cc:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    90dc:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    90ec:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    90fc:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    910c:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    911c:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    912c:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    913c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    914c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    915c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    916c:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    917c:	2067 6163 6c6c 6465 002e 0000 5b1b 3534     g called.....[45
    918c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    919c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    91ac:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    91bc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    91cc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    91dc:	6574 3a64 2820 6570 6972 6870 7265 6c61     ted: (peripheral
    91ec:	645f 7669 6469 7265 3c20 203d 2934 200a     _divider <= 4). 
    91fc:	2020 2020 2020 2020 4420 7669 6469 7265              Divider
    920c:	6d20 7375 6e74 7427 6520 6378 6565 2064      mustn't exceed 
    921c:	3233 5b1b 6d30 5b1b 6d30 000a 500a 6972     32.[0m.[0m...Pri
    922c:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
    923c:	3a65 000a 5b1b 3534 206d 2020 5245 4f52     e:...[45m   ERRO
    924c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    925c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    926c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    927c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    928c:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    929c:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    92ac:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    92bc:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    92cc:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    92dc:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    92ec:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    92fc:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    930c:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    931c:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    932c:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    933c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    934c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    935c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    936c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    937c:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    938c:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    939c:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    93ac:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    93bc:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    93cc:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3534     [0m.[0m......[45
    93dc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    93ec:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    93fc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    940c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    941c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    942c:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
    943c:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
    944c:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
    945c:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
    946c:	305b 0a6d 0000 0000 5b1b 3334 206d 4157     [0m......[43m WA
    947c:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    948c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    949c:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    94ac:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    94bc:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    94cc:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    94dc:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    94ec:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
    94fc:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    950c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    951c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    952c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    953c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    954c:	2820 2031 3d3c 6320 6168 6e6e 6c65 2e5f      (1 <= channel_.
    955c:	6863 6e61 656e 206c 2626 6320 6168 6e6e     channel && chann
    956c:	6c65 2e5f 6863 6e61 656e 206c 3d3c 3620     el_.channel <= 6
    957c:	0a29 2020 2020 2020 2020 2020 6843 6e61     ).          Chan
    958c:	656e 206c 756d 7473 6220 2065 6562 7774     nel must be betw
    959c:	6565 206e 2031 6e61 2064 2036 6e6f 4c20     een 1 and 6 on L
    95ac:	4350 3034 7878 7020 616c 6674 726f 736d     PC40xx platforms
    95bc:	1b2e 305b 1b6d 305b 0a6d 0000 5b1b 3534     ..[0m.[0m....[45
    95cc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    95dc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    95ec:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    95fc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    960c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    961c:	6574 3a64 2820 2e30 6630 3c20 203d 7564     ted: (0.0f <= du
    962c:	7974 635f 6379 656c 2620 2026 7564 7974     ty_cycle && duty
    963c:	635f 6379 656c 3c20 203d 2e31 6630 0a29     _cycle <= 1.0f).
    964c:	2020 2020 2020 2020 2020 7564 7974 635f               duty_c
    965c:	6379 656c 6f20 2066 7544 7974 4320 6379     ycle of Duty Cyc
    966c:	656c 7020 6f72 6976 6564 2064 7369 6f20     le provided is o
    967c:	7475 6f20 2066 6f62 6e75 7364 1b2e 305b     ut of bounds..[0
    968c:	1b6d 305b 0a6d 0000 5b1b 3534 206d 2020     m.[0m....[45m   
    969c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    96ac:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    96bc:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    96cc:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    96dc:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    96ec:	2820 7266 7165 6575 636e 5f79 7a68 2120      (frequency_hz !
    96fc:	203d 5f30 7a48 0a29 2020 2020 2020 2020     = 0_Hz).        
    970c:	2020 7750 206d 7246 7165 6575 636e 2079       Pwm Frequency 
    971c:	6163 6e6e 746f 6220 2065 657a 6f72 4820     cannot be zero H
    972c:	2e7a 5b1b 6d30 5b1b 6d30 000a 5b1b 3234     z..[0m.[0m...[42
    973c:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    974c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    975c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    976c:	6175 7472 6920 696e 6974 6c61 7a69 6465     uart initialized
    977c:	5b1b 6d30 000a 0000 5b1b 3234 206d 2020     .[0m.....[42m   
    978c:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    979c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    97ac:	256d 3e64 1b20 305b 333b 6d37 6461 2063     m%d> .[0;37madc 
    97bc:	6425 5220 6165 2064 6625 6620 726f 6620     %d Read %f for f
    97cc:	6e69 6567 2072 6425 5b1b 6d30 000a 0000     inger %d.[0m....
    97dc:	0002 0000 0003 0000 0004 0000 5b1b 3234     .............[42
    97ec:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    97fc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    980c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    981c:	696c 656e 7261 615f 7463 6175 6f74 2572     linear_actuator%
    982c:	2064 6e69 7469 6169 696c 657a 1b64 305b     d initialized.[0
    983c:	0a6d 0000 5b1b 3234 206d 2020 4920 464e     m....[42m    INF
    984c:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    985c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    986c:	1b20 305b 333b 6d37 6461 2063 6863 6e61      .[0;37madc chan
    987c:	656e 736c 6920 696e 6974 6c61 7a69 6465     nels initialized
    988c:	5b1b 6d30 000a 0000 6175 7472 745f 7361     .[0m....uart_tas
    989c:	006b 0000 696c 656e 7261 6120 7463 6175     k...linear actua
    98ac:	6f74 2072 6e61 2064 7563 7272 6e65 2074     tor and current 
    98bc:	6573 736e 726f 7420 7361 006b               sensor task.

000098c8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    98c8:	0000 4140                                   ..@A

000098cc <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    98cc:	ff0c ffff                                   ....

000098d0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    98d0:	0000 4140                                   ..@A

000098d4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    98d4:	0100 ffff                                   ....

000098d8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    98d8:	0100 ffff                                   ....

000098dc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    98dc:	0500 ffff                                   ....

000098e0 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    98e0:	0108 ffff                                   ....

000098e4 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    98e4:	0208 ffff                                   ....

000098e8 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    98e8:	0208 ffff                                   ....

000098ec <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    98ec:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    98fc:	2e72 7068 0070 ffff                         r.hpp...

00009904 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9904:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9914:	2e72 7068 0070 ffff                         r.hpp...

0000991c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    991c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    992c:	2e72 7068 0070 ffff                         r.hpp...

00009934 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    9934:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9944:	2e72 7068 0070 ffff                         r.hpp...

0000994c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    994c:	9bb4 0000 0802 0000                         ........

00009954 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    9954:	9bb4 0000 0902 0000                         ........

0000995c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    995c:	9bb4 0000 1c04 0000                         ........

00009964 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    9964:	9bb4 0000 1d04 0000                         ........

0000996c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    996c:	9bb4 0000 1d01 0000                         ........

00009974 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    9974:	9bb4 0000 0902 0000                         ........

0000997c <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    997c:	0800 ffff                                   ....

00009980 <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    9980:	0808 ffff                                   ....

00009984 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    9984:	0110 ffff                                   ....

00009988 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    9988:	0115 ffff                                   ....

0000998c <sjsu::lpc40xx::Adc::Control::kStartCode>:
    998c:	0318 ffff                                   ....

00009990 <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    9990:	0c04 ffff                                   ....

00009994 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    9994:	011f ffff                                   ....

00009998 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    9998:	9bb4 0000 1900 0000                         ........

000099a0 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel3>:
    99a0:	9bb4 0000 1a00 0000                         ........

000099a8 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4>:
    99a8:	9bb4 0000 1e01 0000                         ........

000099b0 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5>:
    99b0:	9bb4 0000 1f01 0000                         ........

000099b8 <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    99b8:	9998 0000 000a 0000                         ........

000099c0 <sjsu::lpc40xx::Adc::Channel::kChannel3>:
    99c0:	99a0 0000 000b 0000                         ........

000099c8 <sjsu::lpc40xx::Adc::Channel::kChannel4>:
    99c8:	99a8 0000 001c 0000                         ........

000099d0 <sjsu::lpc40xx::Adc::Channel::kChannel5>:
    99d0:	99b0 0000 001d 0000                         ........

000099d8 <sjsu::lpc40xx::Adc::kClockFrequency>:
    99d8:	2400 4974                                   .$tI

000099dc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    99dc:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

000099ec <sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset>:
    99ec:	0101 ffff                                   ....

000099f0 <sjsu::lpc40xx::Pwm::Timer::kCounterEnable>:
    99f0:	0100 ffff                                   ....

000099f4 <sjsu::lpc40xx::Pwm::Timer::kCounterReset>:
    99f4:	0101 ffff                                   ....

000099f8 <sjsu::lpc40xx::Pwm::Timer::kPwmEnable>:
    99f8:	0103 ffff                                   ....

000099fc <sjsu::lpc40xx::Pwm::CountControl::kMode>:
    99fc:	0200 ffff                                   ....

00009a00 <sjsu::lpc40xx::Pwm::CountControl::kCountInput>:
    9a00:	0202 ffff                                   ....

00009a04 <sjsu::lpc40xx::Pwm::Channel::kPwmPin0>:
    9a04:	9bb4 0000 0002 0000                         ........

00009a0c <sjsu::lpc40xx::Pwm::Channel::kPwmPin1>:
    9a0c:	9bb4 0000 0102 0000                         ........

00009a14 <sjsu::lpc40xx::Pwm::Channel::kPwmPin2>:
    9a14:	9bb4 0000 0202 0000                         ........

00009a1c <sjsu::lpc40xx::Pwm::Channel::kPwmPin4>:
    9a1c:	9bb4 0000 0402 0000                         ........

00009a24 <sjsu::lpc40xx::Pwm::Channel::kPwmPin5>:
    9a24:	9bb4 0000 0502 0000                         ........

00009a2c <sjsu::lpc40xx::Pwm::Channel::kPwm0>:
    9a2c:	0054 1000 9a04 0000 0009 0000               T...........

00009a38 <sjsu::lpc40xx::Pwm::Channel::kPwm1>:
    9a38:	0054 1000 9a0c 0000 000a 0000               T...........

00009a44 <sjsu::lpc40xx::Pwm::Channel::kPwm2>:
    9a44:	0054 1000 9a14 0000 000b 0000               T...........

00009a50 <sjsu::lpc40xx::Pwm::Channel::kPwm4>:
    9a50:	0054 1000 9a1c 0000 000d 0000               T...........

00009a5c <sjsu::lpc40xx::Pwm::Channel::kPwm5>:
    9a5c:	0054 1000 9a24 0000 000e 0000               T...$.......

00009a68 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9a68:	7770 2e6d 7068 0070                         pwm.hpp.

00009a70 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file>:
    9a70:	7770 2e6d 7068 0070                         pwm.hpp.

00009a78 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9a78:	7770 2e6d 7068 0070                         pwm.hpp.

00009a80 <sjsu::Servo::kDefaultFrequency>:
    9a80:	0000 4248                                   ..HB

00009a84 <motor_controller_freq>:
    9a84:	0000 4296                                   ...B

00009a88 <motor_controller_min_pulse>:
    9a88:	03e8 0000 0000 0000                         ........

00009a90 <motor_controller_max_pulse>:
    9a90:	07d0 0000 0000 0000                         ........

00009a98 <vUartTask(void*)::file>:
    9a98:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009aa8 <vUartTask(void*)::file>:
    9aa8:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009ab8 <vSensorAndActuatorTask(void*)::file>:
    9ab8:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009ac8 <vSensorAndActuatorTask(void*)::file>:
    9ac8:	5452 534f 545f 7361 736b 682e 7070 ff00     RTOS_Tasks.hpp..

00009ad8 <vtable for sjsu::Servo>:
	...
    9ae0:	2439 0000 2503 0000 2573 0000 259d 0000     9$...%..s%...%..
    9af0:	25db 0000 267d 0000                         .%..}&..

00009af8 <vtable for sjsu::lpc40xx::Pwm>:
	...
    9b00:	1e41 0000 2001 0000 20d1 0000 2149 0000     A.... ... ..I!..

00009b10 <vtable for sjsu::Pwm>:
	...
    9b18:	7559 0000 7559 0000 7559 0000 7559 0000     Yu..Yu..Yu..Yu..

00009b28 <vtable for sjsu::lpc40xx::Adc>:
	...
    9b30:	1a85 0000 1ba1 0000 1bf1 0000               ............

00009b3c <vtable for sjsu::Adc>:
	...
    9b44:	7559 0000 7559 0000 7559 0000               Yu..Yu..Yu..

00009b50 <vtable for sjsu::lpc40xx::Uart>:
	...
    9b58:	1689 0000 1749 0000 17d5 0000 1879 0000     ....I.......y...
    9b68:	1949 0000                                   I...

00009b6c <vtable for sjsu::Uart>:
	...
    9b74:	7559 0000 7559 0000 7559 0000 7559 0000     Yu..Yu..Yu..Yu..
    9b84:	7559 0000                                   Yu..

00009b88 <vtable for sjsu::lpc40xx::SystemController>:
	...
    9b90:	09fd 0000 0a99 0000 0af1 0000 0b15 0000     ................
    9ba0:	0b31 0000 0b6d 0000 0ba1 0000               1...m.......

00009bac <vtable for sjsu::lpc40xx::Pin>:
	...
    9bb4:	0411 0000 0445 0000 04b5 0000 0479 0000     ....E.......y...

00009bc4 <vUartTask(void*)::__PRETTY_FUNCTION__>:
    9bc4:	6f76 6469 7620 6155 7472 6154 6b73 7628     void vUartTask(v
    9bd4:	696f 2a64 0029 ffff                         oid*)...

00009bdc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    9bdc:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    9bec:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    9bfc:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    9c0c:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    9c1c:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    9c2c:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    9c3c:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    9c4c:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    9c5c:	736e 0074                                   nst.

00009c60 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    9c60:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    9c70:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    9c80:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    9c90:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    9ca0:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    9cb0:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    9cc0:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    9cd0:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00009cdc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    9cdc:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    9cec:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    9cfc:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    9d0c:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    9d1c:	2029 6f63 736e 0074                         ) const.

00009d24 <vSensorAndActuatorTask(void*)::__PRETTY_FUNCTION__>:
    9d24:	6f76 6469 7620 6553 736e 726f 6e41 4164     void vSensorAndA
    9d34:	7463 6175 6f74 5472 7361 286b 6f76 6469     ctuatorTask(void
    9d44:	292a ff00                                   *)..

00009d48 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    9d48:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    9d58:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    9d68:	533a 7465 7246 7165 6575 636e 2879 6e75     :SetFrequency(un
    9d78:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    9d88:	6568 7472 5f7a 2974 6320 6e6f 7473 ff00     hertz_t) const..

00009d98 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__>:
    9d98:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    9da8:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    9db8:	533a 7465 7544 7974 7943 6c63 2865 6c66     :SetDutyCycle(fl
    9dc8:	616f 2974 6320 6e6f 7473 ff00               oat) const..

00009dd4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    9dd4:	6976 7472 6175 206c 6a73 7573 3a3a 7453     virtual sjsu::St
    9de4:	7461 7375 7320 736a 3a75 6c3a 6370 3034     atus sjsu::lpc40
    9df4:	7878 3a3a 7750 3a6d 493a 696e 6974 6c61     xx::Pwm::Initial
    9e04:	7a69 2865 6e75 7469 3a73 663a 6572 7571     ize(units::frequ
    9e14:	6e65 7963 3a3a 6568 7472 5f7a 2974 6320     ency::hertz_t) c
    9e24:	6e6f 7473 ff00 ffff                         onst....

00009e2c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    9e2c:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    9e3c:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    9e4c:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    9e5c:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    9e6c:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    9e7c:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    9e8c:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    9e9c:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    9eac:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    9ebc:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    9ecc:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    9edc:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    9eec:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    9efc:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    9f0c:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    9f1c:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    9f2c:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    9f3c:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    9f4c:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    9f5c:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    9f6c:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    9f7c:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    9f8c:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    9f9c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    9fac:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    9fbc:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    9fcc:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    9fdc:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    9fec:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    9ffc:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    a00c:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    a01c:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    a02c:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    a03c:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    a04c:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    a05c:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    a06c:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    a07c:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    a08c:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    a09c:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    a0ac:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    a0bc:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    a0cc:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    a0dc:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    a0ec:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    a0fc:	1b0a 305b 006d ffff 4449 454c 0000 0000     ..[0m...IDLE....
    a10c:	2509 0963 7525 2509 0975 7525 0a0d 0000     .%c.%u.%u.%u....
    a11c:	2509 0975 2509 2575 0d25 000a 2509 0975     .%u..%u%%....%u.
    a12c:	3c09 2531 0d25 000a 000a ffff               .<1%%.......

0000a138 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    a138:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    a148:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    a158:	bc20 4cbe 6b28 4e6e 743a 0074 6e69 6176      ..L(knN:tt.inva
    a168:	696c 0064 7061 6c70 6369 7461 6f69 006e     lid.application.
    a178:	6f68 7473 7420 7365 0074 0000 2020 6425     host test...  %d
    a188:	2029 7830 3025 5838 000a 0000 3020 2578     ) 0x%08X.... 0x%
    a198:	3830 0058 2020 6425 2029 7830 7025 000a     08X.  %d) 0x%p..
    a1a8:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
    a1b8:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
    a1c8:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
    a1d8:	7463 726f 0079 0000 0a0a 2020 5b1b 3b31     ctory.....  .[1;
    a1e8:	3733 006d 616d 656b 7320 6174 6b63 7274     37m.make stacktr
    a1f8:	6361 2d65 7325 5420 4152 4543 3d53 0022     ace-%s TRACES=".
    a208:	3020 2578 0070 0000 0a22 1b0a 305b 006d      0x%p..."...[0m.
    a218:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
    a228:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
    a238:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
    a248:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
    a258:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
    a268:	002e 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    a278:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    a288:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    a298:	1b20 305b 333b 6d37 6f4e 6920 746e 7265      .[0;37mNo inter
    a2a8:	7572 7470 7320 7265 6976 6563 7220 756f     rupt service rou
    a2b8:	6974 656e 6620 756f 646e 6620 726f 7420     tine found for t
    a2c8:	6568 7620 6365 6f74 2072 6425 2021 6944     he vector %d! Di
    a2d8:	6173 6c62 6e69 2067 5349 1b52 305b 0a6d     sabling ISR.[0m.
    a2e8:	0000 0000 ffff ffff 677d 0000 0001 0000     ........}g......
    a2f8:	ffff ffff 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
    a308:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    a318:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    a328:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    a338:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    a348:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
    a358:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
    a368:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
    a378:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
    a388:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
    a398:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
    a3a8:	6361 206b 7254 6361 3a65 000a 5b1b 3534     ack Trace:...[45
    a3b8:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    a3c8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    a3d8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    a3e8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    a3f8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    a408:	6574 3a64 2820 6564 6973 6572 5f64 7266     ted: (desired_fr
    a418:	7165 6575 636e 2079 203c 3833 5f34 484d     equency < 384_MH
    a428:	207a 2626 6420 7365 7269 6465 665f 6572     z && desired_fre
    a438:	7571 6e65 7963 3e20 3120 5f32 484d 297a     quency > 12_MHz)
    a448:	200a 2020 2020 2020 2020 4620 6572 7571     .          Frequ
    a458:	6e65 7963 6d20 7375 2074 6562 6c20 776f     ency must be low
    a468:	7265 7420 6168 206e 3833 2034 484d 617a     er than 384 MHza
    a478:	646e 6720 6572 7461 7265 7420 6168 206e     nd greater than 
    a488:	726f 6520 7571 6c61 7420 206f 3231 4d20     or equal to 12 M
    a498:	7a48 5b1b 6d30 5b1b 6d30 000a 5b1b 3534     Hz.[0m.[0m...[45
    a4a8:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
    a4b8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    a4c8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    a4d8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    a4e8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    a4f8:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
    a508:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
    a518:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
    a528:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
    a538:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
    a548:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
    a558:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    a568:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    a578:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    a588:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    a598:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    a5a8:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    a5b8:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    a5c8:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    a5d8:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    a5e8:	fffb ffff 6d41 0000 0001 0000 ffff ffff     ....Am..........
    a5f8:	fffe ffff 6e51 0000 0001 0000 ffff ffff     ....Qn..........
    a608:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    a618:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    a628:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    a638:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    a648:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    a658:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    a668:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    a678:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    a688:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    a698:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    a6a8:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    a6b8:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    a6c8:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..

0000a6d8 <std::integral_constant<long long, 1ll>::value>:
    a6d8:	0001 0000 0000 0000                         ........

0000a6e0 <config::kSystemClockRateMhz>:
    a6e0:	0000 4240                                   ..@B

0000a6e4 <config::kRtosFrequency>:
    a6e4:	0000 447a                                   ..zD

0000a6e8 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    a6e8:	a73c 0000                                   <...

0000a6ec <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    a6ec:	9bb4 0000 0200 0000                         ........

0000a6f4 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    a6f4:	9bb4 0000 0300 0000                         ........

0000a6fc <sjsu::lpc40xx::Uart::Port::kUart0>:
    a6fc:	c000 4000 0003 0000 a6ec 0000 a6f4 0000     ...@............
    a70c:	0009 0000                                   ....

0000a710 <sjsu::InitializePlatform()::file>:
    a710:	7473 7261 7574 2e70 7063 0070               startup.cpp.

0000a71c <vtable for sjsu::cortex::SystemTimer>:
	...
    a724:	67e9 0000 67fd 0000 6905 0000 681d 0000     .g...g...i...h..

0000a734 <vtable for sjsu::cortex::InterruptController>:
	...
    a73c:	65c9 0000 661d 0000                         .e...f..

0000a744 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    a744:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    a754:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    a764:	6d54 2072 7653 0063 6d54 5172 ff00 ffff     Tmr Svc.TmrQ....

0000a774 <__sf_fake_stderr>:
	...

0000a794 <__sf_fake_stdin>:
	...

0000a7b4 <__sf_fake_stdout>:
	...
