
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002f4d

Program Header:
0x70000001 off    0x0001975c vaddr 0x0000975c paddr 0x0000975c align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009814 memsz 0x00009814 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009814 align 2**16
         filesz 0x0000014c memsz 0x0000014c flags rw-
    LOAD off    0x00020150 vaddr 0x10000150 paddr 0x10000150 align 2**16
         filesz 0x00000000 memsz 0x00000e68 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00009744  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000014c  10000000  00009814  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002014c  2**2  CONTENTS
  3 .bss             00000e68  10000150  10000150  00020150  2**3  ALLOC
  4 .ARM.extab       00000018  00009744  00009744  00019744  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  0000975c  0000975c  0001975c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  0002014c  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  0002014c  2**2  CONTENTS
  8 .noinit          00000000  10000fb8  10000fb8  0002014c  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  0002014c  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  0002017c  2**0  CONTENTS, READONLY
 11 .debug_info      000785a8  00000000  00000000  000201fa  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00004f51  00000000  00000000  000987a2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000fe0  00000000  00000000  0009d6f3  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000f10  00000000  00000000  0009e6d3  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00008095  00000000  00000000  0009f5e3  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002d2ae  00000000  00000000  000a7678  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00005064  00000000  00000000  000d4928  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000150 l    d  .bss	00000000 .bss
00009744 l    d  .ARM.extab	00000000 .ARM.extab
0000975c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000fb8 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
000050d4 l     F .text	00000030 NVIC_EnableIRQ
00005104 l     F .text	00000030 NVIC_DisableIRQ
00005134 l     F .text	00000054 NVIC_SetPriority
00009650 l     O .text	00000004 config::kSystemClockRateMhz
00009654 l     O .text	00000004 config::kRtosFrequency
00005214 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00005230 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
100000cc l     O .data	00000004 (anonymous namespace)::system_controller
10000448 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
1000044c l     O .bss	0000000c (anonymous namespace)::uart0
100000d0 l     O .data	0000000c (anonymous namespace)::system_timer
100000dc l     O .data	00000004 (anonymous namespace)::interrupt_controller
00005724 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005748 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00009680 l     O .text	0000000c sjsu::InitializePlatform()::file
000096b4 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
000058d8 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
000059e8 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/nathan/Videos/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/nathan/Videos/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
10000150 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
10000154 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003b0 l     F .text	00000030 NVIC_DisableIRQ
00000632 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000064e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000742 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000075e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000814 l     F .text	00000026 _Unwind_GetGR
000009b0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000009cc l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00008bc0 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00008c44 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00008cc0 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00001424 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00008b70 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00008d94 l     O .text	00000055 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00008d58 l     O .text	0000003b sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__
00008d08 l     O .text	0000004f sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000203e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000284c l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00008a74 l     O .text	00000004 motor_controller_freq
00008a78 l     O .text	00000008 motor_controller_min_pulse
00008a80 l     O .text	00000008 motor_controller_max_pulse
00008a88 l     O .text	00000009 main::file
00008a94 l     O .text	00000009 main::file
00008b64 l     O .text	0000000b main::__PRETTY_FUNCTION__
00002a5e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002ad2 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002af8 l     F .text	00000284 __static_initialization_and_destruction_0(int, int)
00002d7c l     F .text	00000010 _GLOBAL__sub_I_xUartTaskHandle
00000000 l    df *ABS*	00000000 exceptions.cpp
00002f3c l       .text	00000000 handler2_address_const
00002fa0 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00002fe4 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
10000330 l     O .bss	00000064 pxReadyTasksLists
10000394 l     O .bss	00000014 xDelayedTaskList1
100003a8 l     O .bss	00000014 xDelayedTaskList2
100003bc l     O .bss	00000004 pxDelayedTaskList
100003c0 l     O .bss	00000004 pxOverflowDelayedTaskList
100003c4 l     O .bss	00000014 xPendingReadyList
100003d8 l     O .bss	00000014 xTasksWaitingTermination
100003ec l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100003f0 l     O .bss	00000014 xSuspendedTaskList
10000404 l     O .bss	00000004 uxCurrentNumberOfTasks
10000408 l     O .bss	00000004 xTickCount
1000040c l     O .bss	00000004 uxTopReadyPriority
10000410 l     O .bss	00000004 xSchedulerRunning
10000414 l     O .bss	00000004 uxPendedTicks
10000418 l     O .bss	00000004 xYieldPending
1000041c l     O .bss	00000004 xNumOfOverflows
10000420 l     O .bss	00000004 uxTaskNumber
10000424 l     O .bss	00000004 xNextTaskUnblockTime
10000428 l     O .bss	00000004 xIdleTaskHandle
1000042c l     O .bss	00000004 uxSchedulerSuspended
10000430 l     O .bss	00000004 ulTaskSwitchedInTime
10000434 l     O .bss	00000004 ulTotalRunTime
00003246 l     F .text	000000f4 prvInitialiseNewTask
0000333c l     F .text	000000dc prvAddNewTaskToReadyList
00003a70 l     F .text	00000080 prvInitialiseTaskLists
00003b48 l     F .text	0000003c prvDeleteTCB
00003b84 l     F .text	0000004c prvResetNextTaskUnblockTime
00003cd4 l     F .text	000000cc prvAddCurrentTaskToDelayedList
00003a60 l     F .text	0000000e prvIdleTask
00003af0 l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00003eb0 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00003ecc l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
00003ef2 l     F .text	0000002e _strlen(char const*)
00003f20 l     F .text	00000028 _is_digit(char)
00003f48 l     F .text	00000048 _atoi(char const**)
00003f90 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000041d2 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000042a2 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
000090a8 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00004384 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
000047c8 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
100000e0 l     O .data	00000004 uxCriticalNesting
00005a60 l     F .text	00000030 prvTaskExitError
00005ab0 l       .text	00000000 pxCurrentTCBConst2
00005ab8 l     F .text	00000024 prvPortStartFirstTask
00005c48 l     F .text	00000010 vPortEnableVFP
00005c00 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_common.cpp
10000458 l     O .bss	00000060 idle_task_tcb
100004b8 l     O .bss	00000140 idle_task_stack
100005f8 l     O .bss	00000060 timer_task_tcb
10000658 l     O .bss	00000800 timer_task_stack
00000000 l    df *ABS*	00000000 timers.c
10000e58 l     O .bss	00000014 xActiveTimerList1
10000e6c l     O .bss	00000014 xActiveTimerList2
10000e80 l     O .bss	00000004 pxCurrentTimerList
10000e84 l     O .bss	00000004 pxOverflowTimerList
10000e88 l     O .bss	00000004 xTimerQueue
10000e8c l     O .bss	00000004 xTimerTaskHandle
000061b8 l     F .text	00000080 prvCheckForValidListAndQueue
00005e4c l     F .text	00000024 prvTimerTask
00005de8 l     F .text	00000064 prvProcessExpiredTimer
00005f94 l     F .text	00000084 prvInsertTimerInActiveList
00005f0c l     F .text	00000048 prvGetNextExpireTime
00005e70 l     F .text	0000009c prvProcessTimerOrBlockTask
00006018 l     F .text	000000f8 prvProcessReceivedCommands
00005f54 l     F .text	00000040 prvSampleTimeNow
00006110 l     F .text	000000a8 prvSwitchTimerLists
10000e90 l     O .bss	00000004 xLastTime.6731
10000f0c l     O .bss	00000050 xStaticTimerQueue.6776
10000e94 l     O .bss	00000078 ucStaticTimerQueueStorage.6777
00000000 l    df *ABS*	00000000 queue.c
0000632a l     F .text	00000046 prvInitialiseNewQueue
000066bc l     F .text	000000d4 prvCopyDataToQueue
000068ac l     F .text	00000030 prvIsQueueFull
000067dc l     F .text	000000a4 prvUnlockQueue
00006790 l     F .text	0000004c prvCopyDataFromQueue
00006880 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
0000700c l     F .text	00000012 selfrel_offset31
00007020 l     F .text	00000060 search_EIT_table
00007080 l     F .text	00000028 __gnu_unwind_get_pr_addr
000070a8 l     F .text	000000a4 get_eit_entry
0000714c l     F .text	00000058 restore_non_core_regs
000071a4 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000071b0 l     F .text	00000004 __gnu_unwind_24bit.isra.1
000071b4 l     F .text	00000002 _Unwind_DebugHook
000071b8 l     F .text	0000003e unwind_phase2
000071f8 l     F .text	000000c6 unwind_phase2_forced
000073c8 l     F .text	00000018 _Unwind_GetGR
0000740c l     F .text	0000001a _Unwind_SetGR
00007498 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00007ba4 l     F .text	00000038 next_unwind_byte
00007bdc l     F .text	0000001a _Unwind_GetGR.constprop.0
00007bf8 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100000ec l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
0000083c  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00007b5c g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000072c4 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00008a68  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000054d8  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
000027ec  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00002e28  w    F .text	0000006c sjsu::InitializeBssSection()
00003df4 g     F .text	00000010 _getpid
00006a04 g     F .text	00000024 _putchar
00008964  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
000054a4  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00005520  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
000089c0  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00002232  w    F .text	0000001e units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const
00000598  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00005412  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000396  w    F .text	00000018 std::numeric_limits<float>::epsilon()
00001b08  w    F .text	000001c0 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
100000b4  w    O .data	00000004 sjsu::newlib::in
00005b68 g     F .text	00000034 vPortExitCritical
10000308  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001ab4  w    F .text	00000020 sjsu::Pwm::Pwm()
00002250  w    F .text	000000bc sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00000782  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
0000818c g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
0000509c g     F .text	00000038 printf
0000692c g     F .text	00000068 vQueueWaitForMessageRestricted
00000000 g       *ABS*	00000000 __vectors_start__
000081c6 g     F .text	00000002 __malloc_unlock
00001d98  w    F .text	00000056 sjsu::lpc40xx::Pwm::GetDutyCycle() const
000026c6  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000025ca  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00005378  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
000008c8  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
00007a18 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00007b38 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
000064c4 g     F .text	000000b2 xQueueGenericSendFromISR
00009814 g       .ARM.exidx	00000000 __exidx_end
000081c8  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
0000577c g     F .text	00000014 ThreadRuntimeCounter
0000776c g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
100000c4  w    O .data	00000004 sjsu::cortex::InterruptController::scb
000024e8 g     F .text	000000bc xLinearActuator(void*)
00008a4c  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm1
00000b6c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
1000032c g     O .bss	00000004 pxCurrentTCB
00002170  w    F .text	00000024 sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00007ee8 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00007b38 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
0000895c  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
10000fb4 g     O .bss	00000004 errno
00009814 g       .ARM.exidx	00000000 _etext
0000275a  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000004b4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000c64  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00007b80 g     F .text	00000022 .hidden _Unwind_Backtrace
00009658  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
1000016c  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00006b00 g     F .text	00000160 .hidden __aeabi_fadd
10000440  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00006afc g     F .text	00000164 .hidden __subsf3
00000d30  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
000089e8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00003990 g     F .text	0000002c vTaskInternalSetTimeOutState
000079f8 g     F .text	00000018 .hidden __restore_core_regs
00007a38 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00008a30  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin0
00008958  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00008af0  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00005290  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00008a28  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kMode
000081cc  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
0000200c  w    F .text	00000032 sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00005ae0 g     F .text	00000054 xPortStartScheduler
00001140  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000072c0 g     F .text	00000004 .hidden _Unwind_GetCFA
00007f94 g     F .text	00000016 memcpy
00003880 g     F .text	0000002c vTaskPlaceOnEventList
00000e68  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000069ac g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00001e10  w    F .text	000000cc sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000073e0 g     F .text	0000002a .hidden _Unwind_VRS_Set
00005790 g     F .text	00000060 vPortSetupTimerInterrupt
10000310  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00005c08 g     F .text	00000040 xPortSysTickHandler
00006d10 g     F .text	00000000 .hidden __aeabi_uldivmod
00002470 g     F .text	00000078 xUartTask(void*)
10000fb8 g       .noinit	00000000 _noinit
00000d48  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00003e64 g     F .text	0000004c puts
00003dc4 g     F .text	00000024 vPortFree
0000196c  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00008a24  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kPwmEnable
000011e0  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00002736  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
100000c8  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000a98  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00001610  w    F .text	00000020 sjsu::Uart::Uart()
00007f74 g     F .text	00000010 malloc
0000812c g     F .text	00000050 _raise_r
00006c68 g     F .text	0000001c .hidden __aeabi_i2f
100002f0 g     O .bss	0000000c p2_1
10010000 g       *ABS*	00000000 __top_RAM
00005ba0 g     F .text	00000066 xPortPendSVHandler
00008a2c  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kCountInput
10000000 g       *ABS*	00000000 __base_RamLoc64
0000304e g     F .text	00000048 vListInsertEnd
000005f0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000478  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
000081b0 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00007428 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
000025a4  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
0000230c  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)
000020b2  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)
10010000 g       *ABS*	00000000 StackTop
00001ad4  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
00000e04  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00006d40 g     F .text	000002cc .hidden __udivmoddi4
100002c8 g     O .bss	00000004 xLinearActuatorHandle
0000810c g     F .text	00000020 _sbrk_r
00008a70  w    O .text	00000004 sjsu::Servo::kDefaultFrequency
000000fc g       .text	00000000 bss_section_table
000081d0  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00005648  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007a28 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00001630  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00003034 g     F .text	0000001a vListInitialiseItem
00007778 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00006578 g     F .text	00000144 xQueueReceive
00007774  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000f64 g     O .bss	00000050 xQueueRegistry
00005578  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000300  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00007b80 g     F .text	00000022 .hidden ___Unwind_Backtrace
0000096c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00001854  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000884  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00008a00  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00005cc0 g     F .text	00000034 vApplicationGetTimerTaskMemory
20000000 g       *ABS*	00000000 __user_heap_base
10000438  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
0000975c g       .ARM.extab	00000000 __exidx_start
00007f2c g     F .text	00000048 __libc_init_array
00001358  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00007af0 g     F .text	00000022 .hidden ___Unwind_RaiseException
00001400  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00005ca8  w    F .text	00000018 unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])
00007f1c g     F .text	0000000e abort
00007b14 g     F .text	00000022 .hidden ___Unwind_Resume
000013e8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00003e20 g     F .text	00000044 _sbrk
00003da0 g     F .text	00000024 pvPortMalloc
100002fc  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
0000542c  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00001384  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
10000088 g     O .data	00000028 linear_actuator2
00002ff4 g     F .text	00000040 vListInitialise
00006994 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
000081d4  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
000017fe  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00006a48 g     F .text	0000000a std::terminate()
00000564  w    F .text	00000034 units::detail::abs(float)
00006a54 g     F .text	0000009e .hidden __aeabi_d2f
00007a40 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00003644 g     F .text	00000020 xTaskGetTickCount
00006370 g     F .text	00000154 xQueueGenericSend
00002194  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00006afc g     F .text	00000164 .hidden __aeabi_fsub
00001724  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
000026ec  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00002f24 g     F .text	00000026 ArmHardFaultHandler
1000030c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000280  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000de2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000fb8 g       .bss	00000000 _ebss
00008ad8  w    O .text	00000018 vtable for sjsu::Pwm
000017b0  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00008b28  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
0000280a  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000694  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000b14  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00003c0c g     F .text	000000c8 xTaskPriorityDisinherit
00005544  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
00000672  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006c94 g     F .text	0000007c .hidden __floatdisf
00009664  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00002ea8 g     F .text	0000007c GetRegistersFromStack
00001630  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
0000282e  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
100002c4 g     O .bss	00000004 xUartTaskHandle
000038e8 g     F .text	000000a8 xTaskRemoveFromEventList
00008a58  w    O .text	00000008 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00008a40  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm0
00007a10 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
000057f0  w    F .text	000000b8 sjsu::InitializePlatform()
00001edc  w    F .text	000000d4 sjsu::lpc40xx::Pwm::EnablePwm(bool) const
00002606  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
000096e4 g     O .text	00000020 __sf_fake_stderr
000052b0  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00006a38 g     F .text	00000010 std::get_terminate()
00001610  w    F .text	00000020 sjsu::Uart::Uart()
00007b14 g     F .text	00000022 .hidden _Unwind_Resume
000019dc  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00007390 g     F .text	0000000c .hidden _Unwind_DeleteException
000096a4  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
0000738c g     F .text	00000002 .hidden _Unwind_Complete
00000c1c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
100002c0  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
0000968c  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00008974  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
000039bc g     F .text	0000008c xTaskCheckForTimeOut
00007fbc g     F .text	0000009c _free_r
10010000 g       *ABS*	00000000 __top_RamLoc64
10000304  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
000029b6  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000150 g       .bss	00000000 _bss
000089a8  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00008aa0  w    O .text	00000020 vtable for sjsu::Servo
0000350c g     F .text	0000001c vTaskSuspendAll
00006a28 g     F .text	00000006 __cxa_pure_virtual
00000e40  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00006c68 g     F .text	0000001c .hidden __floatsisf
000089d8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000178  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007bfc g     F .text	000002c4 .hidden __gnu_unwind_execute
00003108 g     F .text	00000054 uxListRemove
00001ad4  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000314  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000009fc  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007a20 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000003f8  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002902  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00002880  w    F .text	00000082 float sjsu::Map<float, float, float>(float, float, float, float, float)
000053d4  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
0000315c g     F .text	00000060 xTaskCreateStatic
10000fb8 g       .noinit	00000000 _end_noinit
10000180  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000af0  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
000037bc g     F .text	000000c4 vTaskSwitchContext
00001188  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00008960  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000053a0  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00008a08  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000037e  w    F .text	00000018 std::numeric_limits<float>::min()
000062ec g     F .text	0000003e xQueueGenericCreateStatic
00007338 g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000298  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
000038ac g     F .text	0000003c vTaskPlaceOnEventListRestricted
000053b8  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00005188  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00002216  w    F .text	0000001c float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const
1000031c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
000089e0  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
00007a30 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
100002e4 g     O .bss	0000000c p2_0
00005660  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005c74 g     F .text	00000034 vApplicationGetIdleTaskMemory
00008ac0  w    O .text	00000018 vtable for sjsu::lpc40xx::Pwm
10000318  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00006c84 g     F .text	0000008c .hidden __floatundisf
00005d68 g     F .text	00000080 xTimerGenericCommand
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00007af0 g     F .text	00000022 .hidden _Unwind_RaiseException
00007f18  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00002e94  w    F .text	00000014 sjsu::SystemInitialize()
000019c4  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00001ab4  w    F .text	00000020 sjsu::Pwm::Pwm()
00006c60 g     F .text	00000024 .hidden __aeabi_ui2f
0000119c  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00008a18  w    O .text	00000002 sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset
000000e4 g       .text	00000000 data_section_table
10000170  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
000020d6  w    F .text	00000070 sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
000081c4 g     F .text	00000002 __malloc_lock
00001fce  w    F .text	0000003e sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const
10000320  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
000069c4 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000005c4  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00009704 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00008a60  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file
00008a38  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin1
000010c4  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00001cc8  w    F .text	000000d0 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const
00007faa g     F .text	00000010 memset
00002330 g     F .text	00000104 main
000051cc  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
000019ec  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00006c94 g     F .text	0000007c .hidden __aeabi_l2f
00002434  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00003096 g     F .text	00000072 vListInsert
00005324  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
000051ec  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000966c  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00005cf4 g     F .text	00000074 xTimerCreateTimerTask
00008b4c  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00006a54 g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
00005a90 g     F .text	00000026 vPortSVCHandler
00008058 g     F .text	000000b4 _malloc_r
00001fb0  w    F .text	0000001e sjsu::lpc40xx::Pwm::GetMatchRegisters() const
0000896c  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
100000bc  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006c84 g     F .text	0000008c .hidden __aeabi_ul2f
00005254  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00007324 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000053f6  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000268a  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000737c g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
100000b0  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00009648  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
000027be  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
000079f8 g     F .text	00000018 .hidden restore_core_regs
00000b30  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00007adc g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00003528 g     F .text	0000011c xTaskResumeAll
000089f8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00003460 g     F .text	000000ac vTaskStartScheduler
00005558  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00002446  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000060 g     O .data	00000028 linear_actuator1
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00001dee  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001948  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00006af4 g     F .text	0000016c .hidden __aeabi_frsub
00007f10 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
100000e8 g     O .data	00000004 _impure_ptr
100002d4 g     O .bss	00000001 receive
00008970  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000d6c  w    F .text	0000001e units::linear_scale<float>::operator()() const
00000cf4  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000052ec  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
000004e8  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
00003a48 g     F .text	00000018 vTaskMissedYield
00002790  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000021ae  w    F .text	00000068 sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
0000560c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
10000324  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
100002d8 g     O .bss	0000000c uart2
00007ef4 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00008990  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000068dc g     F .text	00000050 vQueueAddToRegistry
00002f4c g     F .text	00000054 ArmResetHandler
00003664 g     F .text	00000158 xTaskIncrementTick
10000328  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
0000739c g     F .text	0000002a .hidden _Unwind_VRS_Get
000052c8  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
100000e4 g     O .data	00000004 __cxxabiv1::__terminate_handler
00007ac8 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000ba0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00006238 g     F .text	000000b4 xQueueGenericReset
00000bd4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00007ec0 g     F .text	00000028 .hidden __gnu_unwind_frame
00007b5c g     F .text	00000022 .hidden _Unwind_ForcedUnwind
0000205a  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
1000014c g       .data	00000000 _edata
00001924  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
000058a8  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
1000017c  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
000031bc g     F .text	0000008a xTaskCreate
00001a28  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
00008978  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000d8a  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00006c60 g     F .text	00000024 .hidden __floatunsisf
00006a2e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00007a84 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00002146  w    F .text	0000002a sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00005c5c  w    F .text	00000016 unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])
00003e04 g     F .text	0000001a _kill
00002d8c  w    F .text	0000009c sjsu::InitializeDataSection()
00002a7a  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00003418 g     F .text	00000048 vTaskDelay
00000990  w    F .text	00000020 sjsu::DefaultUptime()
00009724 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
00003bd0 g     F .text	0000003c xTaskGetSchedulerState
0000030c g       .text	00000000 __init_array_start
00007f18  w    F .text	00000002 .hidden __aeabi_idiv0
00002710  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00008a1c  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterEnable
00003de8 g     F .text	0000000c _exit
000089f0  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
100002cc g     O .bss	00000008 rec
00000612  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000012c0  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
000003e0  w    F .text	00000018 sjsu::Pin::GetPort() const
000081b4 g     F .text	00000010 strlen
000059f8 g     F .text	00000068 pxPortInitialiseStack
10000000  w    O .data	00000004 sjsu::Uptime
00000410  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00007770  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
0000295c  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000f60 g     O .bss	00000004 __malloc_sbrk_start
00000ffc  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000069e4 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000007d4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00005b34 g     F .text	00000034 vPortEnterCritical
00007f08 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
0000130c  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000f5c g     O .bss	00000004 __malloc_free_list
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
00002a06  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000444  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
100000b8  w    O .data	00000004 heap_position
00000cac  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
0000263c  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001a40  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
00008968  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00008b0c  w    O .text	0000001c vtable for sjsu::Uart
00006b00 g     F .text	00000160 .hidden __addsf3
00008a20  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterReset
0000965c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
100000c0  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001664  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
0000817c g     F .text	00000010 raise
00007f84 g     F .text	00000010 free



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 4d 2f 00 00 ed 52 00 00 25 2f 00 00     ....M/...R..%/..
      10:	ed 52 00 00 ed 52 00 00 ed 52 00 00 00 00 00 00     .R...R...R......
	...
      2c:	91 5a 00 00 ed 52 00 00 00 00 00 00 a1 5b 00 00     .Z...R.......[..
      3c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      4c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      5c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      6c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      7c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      8c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      9c:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      ac:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      bc:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      cc:	ed 52 00 00 ed 52 00 00 ed 52 00 00 ed 52 00 00     .R...R...R...R..
      dc:	ed 52 00 00 ed 52 00 00                             .R...R..

000000e4 <data_section_table>:
      e4:	00009814 	.word	0x00009814
      e8:	10000000 	.word	0x10000000
      ec:	0000014c 	.word	0x0000014c
      f0:	00009814 	.word	0x00009814
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	10000150 	.word	0x10000150
     100:	00000e68 	.word	0x00000e68
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	00002d7d 	.word	0x00002d7d
     314:	00002fe5 	.word	0x00002fe5
     318:	000059e9 	.word	0x000059e9

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	10000150 	.word	0x10000150
     344:	00000000 	.word	0x00000000
     348:	0000975c 	.word	0x0000975c

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	10000154 	.word	0x10000154
     364:	0000975c 	.word	0x0000975c

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
     37e:	b480      	push	{r7}
     380:	af00      	add	r7, sp, #0
     382:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     386:	ee07 3a90 	vmov	s15, r3
     38a:	eeb0 0a67 	vmov.f32	s0, s15
     38e:	46bd      	mov	sp, r7
     390:	f85d 7b04 	ldr.w	r7, [sp], #4
     394:	4770      	bx	lr

00000396 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
     396:	b480      	push	{r7}
     398:	af00      	add	r7, sp, #0
     39a:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
     39e:	ee07 3a90 	vmov	s15, r3
     3a2:	eeb0 0a67 	vmov.f32	s0, s15
     3a6:	46bd      	mov	sp, r7
     3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ac:	4770      	bx	lr
     3ae:	Address 0x00000000000003ae is out of bounds.


000003b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	f003 021f 	and.w	r2, r3, #31
     3be:	4907      	ldr	r1, [pc, #28]	; (3dc <NVIC_DisableIRQ+0x2c>)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	095b      	lsrs	r3, r3, #5
     3c4:	2001      	movs	r0, #1
     3c6:	fa00 f202 	lsl.w	r2, r0, r2
     3ca:	3320      	adds	r3, #32
     3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3d0:	bf00      	nop
     3d2:	370c      	adds	r7, #12
     3d4:	46bd      	mov	sp, r7
     3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3da:	4770      	bx	lr
     3dc:	e000e100 	.word	0xe000e100

000003e0 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
  {
    return port_;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	791b      	ldrb	r3, [r3, #4]
  }
     3ec:	4618      	mov	r0, r3
     3ee:	370c      	adds	r7, #12
     3f0:	46bd      	mov	sp, r7
     3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f6:	4770      	bx	lr

000003f8 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     400:	687b      	ldr	r3, [r7, #4]
     402:	795b      	ldrb	r3, [r3, #5]
  }
     404:	4618      	mov	r0, r3
     406:	370c      	adds	r7, #12
     408:	46bd      	mov	sp, r7
     40a:	f85d 7b04 	ldr.w	r7, [sp], #4
     40e:	4770      	bx	lr

00000410 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
     418:	460b      	mov	r3, r1
     41a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     41c:	4b08      	ldr	r3, [pc, #32]	; (440 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     41e:	78f9      	ldrb	r1, [r7, #3]
     420:	781a      	ldrb	r2, [r3, #0]
     422:	785b      	ldrb	r3, [r3, #1]
     424:	021b      	lsls	r3, r3, #8
     426:	431a      	orrs	r2, r3
     428:	2300      	movs	r3, #0
     42a:	f362 030f 	bfi	r3, r2, #0, #16
     42e:	461a      	mov	r2, r3
     430:	6878      	ldr	r0, [r7, #4]
     432:	f000 f859 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     436:	bf00      	nop
     438:	3708      	adds	r7, #8
     43a:	46bd      	mov	sp, r7
     43c:	bd80      	pop	{r7, pc}
     43e:	bf00      	nop
     440:	000081c8 	.word	0x000081c8

00000444 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     452:	78f9      	ldrb	r1, [r7, #3]
     454:	781a      	ldrb	r2, [r3, #0]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	021b      	lsls	r3, r3, #8
     45a:	431a      	orrs	r2, r3
     45c:	2300      	movs	r3, #0
     45e:	f362 030f 	bfi	r3, r2, #0, #16
     462:	461a      	mov	r2, r3
     464:	6878      	ldr	r0, [r7, #4]
     466:	f000 f83f 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     46a:	bf00      	nop
     46c:	3708      	adds	r7, #8
     46e:	46bd      	mov	sp, r7
     470:	bd80      	pop	{r7, pc}
     472:	bf00      	nop
     474:	000081cc 	.word	0x000081cc

00000478 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	460b      	mov	r3, r1
     482:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     484:	78fb      	ldrb	r3, [r7, #3]
     486:	f083 0301 	eor.w	r3, r3, #1
     48a:	b2db      	uxtb	r3, r3
     48c:	4619      	mov	r1, r3
     48e:	4b08      	ldr	r3, [pc, #32]	; (4b0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     490:	781a      	ldrb	r2, [r3, #0]
     492:	785b      	ldrb	r3, [r3, #1]
     494:	021b      	lsls	r3, r3, #8
     496:	431a      	orrs	r2, r3
     498:	2300      	movs	r3, #0
     49a:	f362 030f 	bfi	r3, r2, #0, #16
     49e:	461a      	mov	r2, r3
     4a0:	6878      	ldr	r0, [r7, #4]
     4a2:	f000 f821 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4a6:	bf00      	nop
     4a8:	3708      	adds	r7, #8
     4aa:	46bd      	mov	sp, r7
     4ac:	bd80      	pop	{r7, pc}
     4ae:	bf00      	nop
     4b0:	000081d0 	.word	0x000081d0

000004b4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     4b4:	b580      	push	{r7, lr}
     4b6:	b082      	sub	sp, #8
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	460b      	mov	r3, r1
     4be:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     4c0:	78f9      	ldrb	r1, [r7, #3]
     4c2:	4b08      	ldr	r3, [pc, #32]	; (4e4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	785b      	ldrb	r3, [r3, #1]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	431a      	orrs	r2, r3
     4cc:	2300      	movs	r3, #0
     4ce:	f362 030f 	bfi	r3, r2, #0, #16
     4d2:	461a      	mov	r2, r3
     4d4:	6878      	ldr	r0, [r7, #4]
     4d6:	f000 f807 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4da:	bf00      	nop
     4dc:	3708      	adds	r7, #8
     4de:	46bd      	mov	sp, r7
     4e0:	bd80      	pop	{r7, pc}
     4e2:	bf00      	nop
     4e4:	000081d4 	.word	0x000081d4

000004e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ea:	b087      	sub	sp, #28
     4ec:	af00      	add	r7, sp, #0
     4ee:	60f8      	str	r0, [r7, #12]
     4f0:	460b      	mov	r3, r1
     4f2:	80ba      	strh	r2, [r7, #4]
     4f4:	72fb      	strb	r3, [r7, #11]
     4f6:	68fb      	ldr	r3, [r7, #12]
     4f8:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     4fa:	4b19      	ldr	r3, [pc, #100]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     4fc:	681c      	ldr	r4, [r3, #0]
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	4618      	mov	r0, r3
     502:	f7ff ff6d 	bl	3e0 <sjsu::Pin::GetPort() const>
     506:	4603      	mov	r3, r0
     508:	461d      	mov	r5, r3
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	4618      	mov	r0, r3
     50e:	f7ff ff73 	bl	3f8 <sjsu::Pin::GetPin() const>
     512:	4603      	mov	r3, r0
     514:	461a      	mov	r2, r3
     516:	016b      	lsls	r3, r5, #5
     518:	4413      	add	r3, r2
     51a:	009b      	lsls	r3, r3, #2
     51c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     51e:	681b      	ldr	r3, [r3, #0]
     520:	7af9      	ldrb	r1, [r7, #11]
     522:	687a      	ldr	r2, [r7, #4]
     524:	4618      	mov	r0, r3
     526:	f002 f83d 	bl	25a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     52a:	4605      	mov	r5, r0
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     530:	4b0b      	ldr	r3, [pc, #44]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     532:	681c      	ldr	r4, [r3, #0]
     534:	697b      	ldr	r3, [r7, #20]
     536:	4618      	mov	r0, r3
     538:	f7ff ff52 	bl	3e0 <sjsu::Pin::GetPort() const>
     53c:	4603      	mov	r3, r0
     53e:	461e      	mov	r6, r3
     540:	697b      	ldr	r3, [r7, #20]
     542:	4618      	mov	r0, r3
     544:	f7ff ff58 	bl	3f8 <sjsu::Pin::GetPin() const>
     548:	4603      	mov	r3, r0
     54a:	461a      	mov	r2, r3
     54c:	0173      	lsls	r3, r6, #5
     54e:	4413      	add	r3, r2
     550:	009b      	lsls	r3, r3, #2
     552:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     554:	601d      	str	r5, [r3, #0]
  }
     556:	bf00      	nop
     558:	371c      	adds	r7, #28
     55a:	46bd      	mov	sp, r7
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	bf00      	nop
     560:	1000016c 	.word	0x1000016c

00000564 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	ed87 0a01 	vstr	s0, [r7, #4]
			return x < 0 ? -x : x;
     56e:	edd7 7a01 	vldr	s15, [r7, #4]
     572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     57a:	d504      	bpl.n	586 <units::detail::abs(float)+0x22>
     57c:	edd7 7a01 	vldr	s15, [r7, #4]
     580:	eef1 7a67 	vneg.f32	s15, s15
     584:	e001      	b.n	58a <units::detail::abs(float)+0x26>
     586:	edd7 7a01 	vldr	s15, [r7, #4]
		}
     58a:	eeb0 0a67 	vmov.f32	s0, s15
     58e:	370c      	adds	r7, #12
     590:	46bd      	mov	sp, r7
     592:	f85d 7b04 	ldr.w	r7, [sp], #4
     596:	4770      	bx	lr

00000598 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     598:	b580      	push	{r7, lr}
     59a:	b084      	sub	sp, #16
     59c:	af00      	add	r7, sp, #0
     59e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
     5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
     5a6:	f006 fb6d 	bl	6c84 <__aeabi_ul2f>
     5aa:	4602      	mov	r2, r0
     5ac:	f107 030c 	add.w	r3, r7, #12
     5b0:	ee00 2a10 	vmov	s0, r2
     5b4:	4618      	mov	r0, r3
     5b6:	f000 f85c 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	4618      	mov	r0, r3
     5be:	3710      	adds	r7, #16
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}

000005c4 <units::literals::operator"" _MHz(unsigned long long)>:
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     5ce:	e9d7 0100 	ldrd	r0, r1, [r7]
     5d2:	f006 fb57 	bl	6c84 <__aeabi_ul2f>
     5d6:	4602      	mov	r2, r0
     5d8:	f107 030c 	add.w	r3, r7, #12
     5dc:	ee00 2a10 	vmov	s0, r2
     5e0:	4618      	mov	r0, r3
     5e2:	f000 f805 	bl	5f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	4618      	mov	r0, r3
     5ea:	3710      	adds	r7, #16
     5ec:	46bd      	mov	sp, r7
     5ee:	bd80      	pop	{r7, pc}

000005f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
     5f8:	ed87 0a00 	vstr	s0, [r7]
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	463a      	mov	r2, r7
     600:	4611      	mov	r1, r2
     602:	4618      	mov	r0, r3
     604:	f000 f805 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     608:	687b      	ldr	r3, [r7, #4]
     60a:	4618      	mov	r0, r3
     60c:	3708      	adds	r7, #8
     60e:	46bd      	mov	sp, r7
     610:	bd80      	pop	{r7, pc}

00000612 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     612:	b480      	push	{r7}
     614:	b083      	sub	sp, #12
     616:	af00      	add	r7, sp, #0
     618:	6078      	str	r0, [r7, #4]
     61a:	6039      	str	r1, [r7, #0]
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	681a      	ldr	r2, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	601a      	str	r2, [r3, #0]
     624:	687b      	ldr	r3, [r7, #4]
     626:	4618      	mov	r0, r3
     628:	370c      	adds	r7, #12
     62a:	46bd      	mov	sp, r7
     62c:	f85d 7b04 	ldr.w	r7, [sp], #4
     630:	4770      	bx	lr

00000632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     632:	b580      	push	{r7, lr}
     634:	b086      	sub	sp, #24
     636:	af00      	add	r7, sp, #0
     638:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	f000 f807 	bl	64e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     640:	eef0 7a40 	vmov.f32	s15, s0
	}
     644:	eeb0 0a67 	vmov.f32	s0, s15
     648:	3718      	adds	r7, #24
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}

0000064e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     64e:	b480      	push	{r7}
     650:	b085      	sub	sp, #20
     652:	af00      	add	r7, sp, #0
     654:	60f8      	str	r0, [r7, #12]
     656:	7239      	strb	r1, [r7, #8]
     658:	713a      	strb	r2, [r7, #4]
     65a:	703b      	strb	r3, [r7, #0]
			return value;
     65c:	68fb      	ldr	r3, [r7, #12]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	ee07 3a90 	vmov	s15, r3
		}
     664:	eeb0 0a67 	vmov.f32	s0, s15
     668:	3714      	adds	r7, #20
     66a:	46bd      	mov	sp, r7
     66c:	f85d 7b04 	ldr.w	r7, [sp], #4
     670:	4770      	bx	lr

00000672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     672:	b580      	push	{r7, lr}
     674:	b082      	sub	sp, #8
     676:	af00      	add	r7, sp, #0
     678:	6078      	str	r0, [r7, #4]
     67a:	ed87 0a00 	vstr	s0, [r7]
     67e:	687b      	ldr	r3, [r7, #4]
     680:	463a      	mov	r2, r7
     682:	4611      	mov	r1, r2
     684:	4618      	mov	r0, r3
     686:	f7ff ffc4 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	4618      	mov	r0, r3
     68e:	3708      	adds	r7, #8
     690:	46bd      	mov	sp, r7
     692:	bd80      	pop	{r7, pc}

00000694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     694:	b580      	push	{r7, lr}
     696:	ed2d 8b04 	vpush	{d8-d9}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	ed93 8a00 	vldr	s16, [r3]
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	4618      	mov	r0, r3
     6ac:	f000 f849 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6b0:	eef0 7a40 	vmov.f32	s15, s0
     6b4:	ee78 7a67 	vsub.f32	s15, s16, s15
     6b8:	eeb0 0a67 	vmov.f32	s0, s15
     6bc:	f7ff ff52 	bl	564 <units::detail::abs(float)>
     6c0:	eef0 8a40 	vmov.f32	s17, s0
     6c4:	f7ff fe67 	bl	396 <std::numeric_limits<float>::epsilon()>
     6c8:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	ed93 8a00 	vldr	s16, [r3]
     6d2:	683b      	ldr	r3, [r7, #0]
     6d4:	4618      	mov	r0, r3
     6d6:	f000 f834 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6da:	eef0 7a40 	vmov.f32	s15, s0
     6de:	ee78 7a27 	vadd.f32	s15, s16, s15
     6e2:	eeb0 0a67 	vmov.f32	s0, s15
     6e6:	f7ff ff3d 	bl	564 <units::detail::abs(float)>
     6ea:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6ee:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6f2:	eef4 8ae7 	vcmpe.f32	s17, s15
     6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6fa:	d419      	bmi.n	730 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	ed93 8a00 	vldr	s16, [r3]
     702:	683b      	ldr	r3, [r7, #0]
     704:	4618      	mov	r0, r3
     706:	f000 f81c 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     70a:	eef0 7a40 	vmov.f32	s15, s0
     70e:	ee78 7a67 	vsub.f32	s15, s16, s15
     712:	eeb0 0a67 	vmov.f32	s0, s15
     716:	f7ff ff25 	bl	564 <units::detail::abs(float)>
     71a:	eeb0 8a40 	vmov.f32	s16, s0
     71e:	f7ff fe2e 	bl	37e <std::numeric_limits<float>::min()>
     722:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     726:	eeb4 8ae7 	vcmpe.f32	s16, s15
     72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     72e:	d501      	bpl.n	734 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
     730:	2301      	movs	r3, #1
     732:	e000      	b.n	736 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
     734:	2300      	movs	r3, #0
		}
     736:	4618      	mov	r0, r3
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	ecbd 8b04 	vpop	{d8-d9}
     740:	bd80      	pop	{r7, pc}

00000742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     742:	b580      	push	{r7, lr}
     744:	b086      	sub	sp, #24
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     74a:	6878      	ldr	r0, [r7, #4]
     74c:	f000 f807 	bl	75e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     750:	eef0 7a40 	vmov.f32	s15, s0
	}
     754:	eeb0 0a67 	vmov.f32	s0, s15
     758:	3718      	adds	r7, #24
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}

0000075e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     75e:	b480      	push	{r7}
     760:	b085      	sub	sp, #20
     762:	af00      	add	r7, sp, #0
     764:	60f8      	str	r0, [r7, #12]
     766:	7239      	strb	r1, [r7, #8]
     768:	713a      	strb	r2, [r7, #4]
     76a:	703b      	strb	r3, [r7, #0]
			return value;
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	ee07 3a90 	vmov	s15, r3
		}
     774:	eeb0 0a67 	vmov.f32	s0, s15
     778:	3714      	adds	r7, #20
     77a:	46bd      	mov	sp, r7
     77c:	f85d 7b04 	ldr.w	r7, [sp], #4
     780:	4770      	bx	lr

00000782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     782:	b580      	push	{r7, lr}
     784:	b086      	sub	sp, #24
     786:	af00      	add	r7, sp, #0
     788:	6078      	str	r0, [r7, #4]
     78a:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	3308      	adds	r3, #8
     792:	681b      	ldr	r3, [r3, #0]
     794:	6839      	ldr	r1, [r7, #0]
     796:	6878      	ldr	r0, [r7, #4]
     798:	4798      	blx	r3
     79a:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     79c:	f04f 0300 	mov.w	r3, #0
     7a0:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7a2:	697b      	ldr	r3, [r7, #20]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d00f      	beq.n	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	330c      	adds	r3, #12
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	4798      	blx	r3
     7b4:	4603      	mov	r3, r0
     7b6:	613b      	str	r3, [r7, #16]
     7b8:	f107 0310 	add.w	r3, r7, #16
     7bc:	6979      	ldr	r1, [r7, #20]
     7be:	4618      	mov	r0, r3
     7c0:	f001 ff03 	bl	25ca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     7c4:	4603      	mov	r3, r0
     7c6:	60fb      	str	r3, [r7, #12]
    }
    return result;
     7c8:	68fb      	ldr	r3, [r7, #12]
  }
     7ca:	4618      	mov	r0, r3
     7cc:	3718      	adds	r7, #24
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	Address 0x00000000000007d2 is out of bounds.


000007d4 <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
     7d4:	b480      	push	{r7}
     7d6:	b085      	sub	sp, #20
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     7de:	60fb      	str	r3, [r7, #12]
  switch (target)
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d002      	beq.n	7ec <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     7e6:	2b01      	cmp	r3, #1
     7e8:	d003      	beq.n	7f2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     7ea:	e005      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     7ee:	60fb      	str	r3, [r7, #12]
     7f0:	e002      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     7f4:	60fb      	str	r3, [r7, #12]
     7f6:	bf00      	nop
  }
  return result;
     7f8:	68fb      	ldr	r3, [r7, #12]
}
     7fa:	4618      	mov	r0, r3
     7fc:	3714      	adds	r7, #20
     7fe:	46bd      	mov	sp, r7
     800:	f85d 7b04 	ldr.w	r7, [sp], #4
     804:	4770      	bx	lr
     806:	bf00      	nop
     808:	000081d8 	.word	0x000081d8
     80c:	000081e0 	.word	0x000081e0
     810:	000081ec 	.word	0x000081ec

00000814 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     814:	b580      	push	{r7, lr}
     816:	b086      	sub	sp, #24
     818:	af02      	add	r7, sp, #8
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     81e:	683a      	ldr	r2, [r7, #0]
     820:	f107 030c 	add.w	r3, r7, #12
     824:	9300      	str	r3, [sp, #0]
     826:	2300      	movs	r3, #0
     828:	2100      	movs	r1, #0
     82a:	6878      	ldr	r0, [r7, #4]
     82c:	f006 fdb6 	bl	739c <_Unwind_VRS_Get>
      return val;
     830:	68fb      	ldr	r3, [r7, #12]
    }
     832:	4618      	mov	r0, r3
     834:	3710      	adds	r7, #16
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	Address 0x000000000000083a is out of bounds.


0000083c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     846:	683b      	ldr	r3, [r7, #0]
     848:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     84a:	210f      	movs	r1, #15
     84c:	6878      	ldr	r0, [r7, #4]
     84e:	f7ff ffe1 	bl	814 <_Unwind_GetGR>
     852:	4603      	mov	r3, r0
     854:	f023 0301 	bic.w	r3, r3, #1
     858:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	6819      	ldr	r1, [r3, #0]
     85e:	68bb      	ldr	r3, [r7, #8]
     860:	3b04      	subs	r3, #4
     862:	461a      	mov	r2, r3
     864:	4806      	ldr	r0, [pc, #24]	; (880 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     866:	f004 fc19 	bl	509c <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     86a:	68fb      	ldr	r3, [r7, #12]
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	1c5a      	adds	r2, r3, #1
     870:	68fb      	ldr	r3, [r7, #12]
     872:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     874:	2300      	movs	r3, #0
}
     876:	4618      	mov	r0, r3
     878:	3710      	adds	r7, #16
     87a:	46bd      	mov	sp, r7
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop
     880:	000081f8 	.word	0x000081f8

00000884 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
     88c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     88e:	683b      	ldr	r3, [r7, #0]
     890:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     892:	210f      	movs	r1, #15
     894:	6878      	ldr	r0, [r7, #4]
     896:	f7ff ffbd 	bl	814 <_Unwind_GetGR>
     89a:	4603      	mov	r3, r0
     89c:	f023 0301 	bic.w	r3, r3, #1
     8a0:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	3b04      	subs	r3, #4
     8a6:	4619      	mov	r1, r3
     8a8:	4806      	ldr	r0, [pc, #24]	; (8c4 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     8aa:	f004 fbf7 	bl	509c <printf>
  (*depth)++;
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	1c5a      	adds	r2, r3, #1
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     8b8:	2300      	movs	r3, #0
}
     8ba:	4618      	mov	r0, r3
     8bc:	3710      	adds	r7, #16
     8be:	46bd      	mov	sp, r7
     8c0:	bd80      	pop	{r7, pc}
     8c2:	bf00      	nop
     8c4:	00008208 	.word	0x00008208

000008c8 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
     8ce:	4603      	mov	r3, r0
     8d0:	6039      	str	r1, [r7, #0]
     8d2:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     8d8:	f107 030c 	add.w	r3, r7, #12
     8dc:	4619      	mov	r1, r3
     8de:	481a      	ldr	r0, [pc, #104]	; (948 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     8e0:	f007 f94e 	bl	7b80 <_Unwind_Backtrace>
    if (final_address)
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d005      	beq.n	8f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	683a      	ldr	r2, [r7, #0]
     8ee:	4619      	mov	r1, r3
     8f0:	4816      	ldr	r0, [pc, #88]	; (94c <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     8f2:	f004 fbd3 	bl	509c <printf>
    }

    if (show_make_command)
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d020      	beq.n	93e <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     8fc:	4814      	ldr	r0, [pc, #80]	; (950 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     8fe:	f004 fbcd 	bl	509c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     902:	4814      	ldr	r0, [pc, #80]	; (954 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     904:	f004 fbca 	bl	509c <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     908:	2000      	movs	r0, #0
     90a:	f7ff ff63 	bl	7d4 <sjsu::build::Stringify(sjsu::build::Target)>
     90e:	4603      	mov	r3, r0
     910:	4619      	mov	r1, r3
     912:	4811      	ldr	r0, [pc, #68]	; (958 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     914:	f004 fbc2 	bl	509c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     918:	f107 030c 	add.w	r3, r7, #12
     91c:	4619      	mov	r1, r3
     91e:	480f      	ldr	r0, [pc, #60]	; (95c <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     920:	f007 f92e 	bl	7b80 <_Unwind_Backtrace>
      if (final_address)
     924:	683b      	ldr	r3, [r7, #0]
     926:	2b00      	cmp	r3, #0
     928:	d003      	beq.n	932 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     92a:	6839      	ldr	r1, [r7, #0]
     92c:	480c      	ldr	r0, [pc, #48]	; (960 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     92e:	f004 fbb5 	bl	509c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     932:	480c      	ldr	r0, [pc, #48]	; (964 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     934:	f004 fbb2 	bl	509c <printf>
      printf(
     938:	480b      	ldr	r0, [pc, #44]	; (968 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     93a:	f003 fa93 	bl	3e64 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     93e:	bf00      	nop
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	0000083d 	.word	0x0000083d
     94c:	00008210 	.word	0x00008210
     950:	0000821c 	.word	0x0000821c
     954:	00008254 	.word	0x00008254
     958:	00008260 	.word	0x00008260
     95c:	00000885 	.word	0x00000885
     960:	0000827c 	.word	0x0000827c
     964:	00008284 	.word	0x00008284
     968:	0000828c 	.word	0x0000828c

0000096c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     96c:	b490      	push	{r4, r7}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     976:	683b      	ldr	r3, [r7, #0]
     978:	e9d3 3400 	ldrd	r3, r4, [r3]
     97c:	687a      	ldr	r2, [r7, #4]
     97e:	e9c2 3400 	strd	r3, r4, [r2]
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	3708      	adds	r7, #8
     988:	46bd      	mov	sp, r7
     98a:	bc90      	pop	{r4, r7}
     98c:	4770      	bx	lr
     98e:	Address 0x000000000000098e is out of bounds.


00000990 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     990:	b580      	push	{r7, lr}
     992:	b082      	sub	sp, #8
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	4903      	ldr	r1, [pc, #12]	; (9ac <sjsu::DefaultUptime()+0x1c>)
     99e:	4618      	mov	r0, r3
     9a0:	f001 fe31 	bl	2606 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	3708      	adds	r7, #8
     9a8:	46bd      	mov	sp, r7
     9aa:	bd80      	pop	{r7, pc}
     9ac:	10000170 	.word	0x10000170

000009b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     9b0:	b580      	push	{r7, lr}
     9b2:	b086      	sub	sp, #24
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     9b8:	6878      	ldr	r0, [r7, #4]
     9ba:	f000 f807 	bl	9cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     9be:	eef0 7a40 	vmov.f32	s15, s0
	}
     9c2:	eeb0 0a67 	vmov.f32	s0, s15
     9c6:	3718      	adds	r7, #24
     9c8:	46bd      	mov	sp, r7
     9ca:	bd80      	pop	{r7, pc}

000009cc <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	60f8      	str	r0, [r7, #12]
     9d4:	7239      	strb	r1, [r7, #8]
     9d6:	713a      	strb	r2, [r7, #4]
     9d8:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	edd3 7a00 	vldr	s15, [r3]
     9e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9f8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     9e4:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     9e8:	eeb0 0a67 	vmov.f32	s0, s15
     9ec:	3714      	adds	r7, #20
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	49742400 	.word	0x49742400

000009fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
     a04:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     a06:	2100      	movs	r1, #0
     a08:	6878      	ldr	r0, [r7, #4]
     a0a:	f000 f8e3 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     a0e:	f04f 000c 	mov.w	r0, #12
     a12:	f04f 0100 	mov.w	r1, #0
     a16:	f7ff fdd5 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     a1a:	4603      	mov	r3, r0
     a1c:	60bb      	str	r3, [r7, #8]
     a1e:	f107 0208 	add.w	r2, r7, #8
     a22:	463b      	mov	r3, r7
     a24:	4611      	mov	r1, r2
     a26:	4618      	mov	r0, r3
     a28:	f001 fe2f 	bl	268a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     a2c:	4603      	mov	r3, r0
     a2e:	2b00      	cmp	r3, #0
     a30:	d00f      	beq.n	a52 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     a32:	4b16      	ldr	r3, [pc, #88]	; (a8c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     a34:	683a      	ldr	r2, [r7, #0]
     a36:	6819      	ldr	r1, [r3, #0]
     a38:	6878      	ldr	r0, [r7, #4]
     a3a:	f000 fadf 	bl	ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     a3e:	2101      	movs	r1, #1
     a40:	6878      	ldr	r0, [r7, #4]
     a42:	f000 f8eb 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     a46:	463b      	mov	r3, r7
     a48:	4619      	mov	r1, r3
     a4a:	4811      	ldr	r0, [pc, #68]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a4c:	f001 fe3b 	bl	26c6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     a50:	e007      	b.n	a62 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     a52:	2100      	movs	r1, #0
     a54:	6878      	ldr	r0, [r7, #4]
     a56:	f000 f8e1 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     a5a:	490e      	ldr	r1, [pc, #56]	; (a94 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     a5c:	480c      	ldr	r0, [pc, #48]	; (a90 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a5e:	f001 fe32 	bl	26c6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     a62:	2101      	movs	r1, #1
     a64:	6878      	ldr	r0, [r7, #4]
     a66:	f000 fb2d 	bl	10c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     a6a:	23ff      	movs	r3, #255	; 0xff
     a6c:	733b      	strb	r3, [r7, #12]
     a6e:	f107 030c 	add.w	r3, r7, #12
     a72:	2201      	movs	r2, #1
     a74:	4619      	mov	r1, r3
     a76:	6878      	ldr	r0, [r7, #4]
     a78:	f000 f80e 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     a7c:	2100      	movs	r1, #0
     a7e:	6878      	ldr	r0, [r7, #4]
     a80:	f000 fb5e 	bl	1140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     a84:	bf00      	nop
     a86:	3710      	adds	r7, #16
     a88:	46bd      	mov	sp, r7
     a8a:	bd80      	pop	{r7, pc}
     a8c:	00008958 	.word	0x00008958
     a90:	10000004 	.word	0x10000004
     a94:	0000895c 	.word	0x0000895c

00000a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     a98:	b580      	push	{r7, lr}
     a9a:	b084      	sub	sp, #16
     a9c:	af00      	add	r7, sp, #0
     a9e:	60f8      	str	r0, [r7, #12]
     aa0:	60b9      	str	r1, [r7, #8]
     aa2:	4613      	mov	r3, r2
     aa4:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	2b04      	cmp	r3, #4
     aaa:	d90d      	bls.n	ac8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     aac:	23b2      	movs	r3, #178	; 0xb2
     aae:	4a0b      	ldr	r2, [pc, #44]	; (adc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     ab0:	490b      	ldr	r1, [pc, #44]	; (ae0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     ab2:	480c      	ldr	r0, [pc, #48]	; (ae4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     ab4:	f004 faf2 	bl	509c <printf>
     ab8:	480b      	ldr	r0, [pc, #44]	; (ae8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     aba:	f003 f9d3 	bl	3e64 <puts>
     abe:	2100      	movs	r1, #0
     ac0:	2001      	movs	r0, #1
     ac2:	f7ff ff01 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     ac6:	e7fe      	b.n	ac6 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     ac8:	4b08      	ldr	r3, [pc, #32]	; (aec <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	79fa      	ldrb	r2, [r7, #7]
     ace:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     ad2:	bf00      	nop
     ad4:	3710      	adds	r7, #16
     ad6:	46bd      	mov	sp, r7
     ad8:	bd80      	pop	{r7, pc}
     ada:	bf00      	nop
     adc:	00008bc0 	.word	0x00008bc0
     ae0:	00008978 	.word	0x00008978
     ae4:	000082e0 	.word	0x000082e0
     ae8:	00008380 	.word	0x00008380
     aec:	10000178 	.word	0x10000178

00000af0 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     af0:	b480      	push	{r7}
     af2:	b083      	sub	sp, #12
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     b02:	4618      	mov	r0, r3
     b04:	370c      	adds	r7, #12
     b06:	46bd      	mov	sp, r7
     b08:	f85d 7b04 	ldr.w	r7, [sp], #4
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	10000178 	.word	0x10000178

00000b14 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     b14:	b480      	push	{r7}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     b1e:	681b      	ldr	r3, [r3, #0]
  }
     b20:	4618      	mov	r0, r3
     b22:	370c      	adds	r7, #12
     b24:	46bd      	mov	sp, r7
     b26:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2a:	4770      	bx	lr
     b2c:	10000004 	.word	0x10000004

00000b30 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     b30:	b480      	push	{r7}
     b32:	b085      	sub	sp, #20
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     b3a:	4b0b      	ldr	r3, [pc, #44]	; (b68 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     b42:	683a      	ldr	r2, [r7, #0]
     b44:	7812      	ldrb	r2, [r2, #0]
     b46:	4611      	mov	r1, r2
     b48:	2201      	movs	r2, #1
     b4a:	408a      	lsls	r2, r1
     b4c:	4013      	ands	r3, r2
     b4e:	2b00      	cmp	r3, #0
     b50:	bf14      	ite	ne
     b52:	2301      	movne	r3, #1
     b54:	2300      	moveq	r3, #0
     b56:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     b58:	7bfb      	ldrb	r3, [r7, #15]
  }
     b5a:	4618      	mov	r0, r3
     b5c:	3714      	adds	r7, #20
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	10000178 	.word	0x10000178

00000b6c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     b6c:	b590      	push	{r4, r7, lr}
     b6e:	b083      	sub	sp, #12
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
     b74:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b78:	681b      	ldr	r3, [r3, #0]
     b7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	4619      	mov	r1, r3
    system_controller->PCONP =
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b86:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b88:	4610      	mov	r0, r2
     b8a:	f001 fdaf 	bl	26ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     b8e:	4603      	mov	r3, r0
    system_controller->PCONP =
     b90:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     b94:	bf00      	nop
     b96:	370c      	adds	r7, #12
     b98:	46bd      	mov	sp, r7
     b9a:	bd90      	pop	{r4, r7, pc}
     b9c:	10000178 	.word	0x10000178

00000ba0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
     ba8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	4619      	mov	r1, r3
    system_controller->PCONP =
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     bba:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     bbc:	4610      	mov	r0, r2
     bbe:	f001 fda7 	bl	2710 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     bc2:	4603      	mov	r3, r0
    system_controller->PCONP =
     bc4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     bc8:	bf00      	nop
     bca:	370c      	adds	r7, #12
     bcc:	46bd      	mov	sp, r7
     bce:	bd90      	pop	{r4, r7, pc}
     bd0:	10000178 	.word	0x10000178

00000bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     bd4:	b590      	push	{r4, r7, lr}
     bd6:	b083      	sub	sp, #12
     bd8:	af00      	add	r7, sp, #0
     bda:	6078      	str	r0, [r7, #4]
     bdc:	460b      	mov	r3, r1
     bde:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     be0:	4b0c      	ldr	r3, [pc, #48]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     be8:	8879      	ldrh	r1, [r7, #2]
     bea:	4b0a      	ldr	r3, [pc, #40]	; (c14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     bec:	681c      	ldr	r4, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	785b      	ldrb	r3, [r3, #1]
     bf4:	021b      	lsls	r3, r3, #8
     bf6:	431a      	orrs	r2, r3
     bf8:	2300      	movs	r3, #0
     bfa:	f362 030f 	bfi	r3, r2, #0, #16
     bfe:	461a      	mov	r2, r3
     c00:	f001 fd99 	bl	2736 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c04:	4603      	mov	r3, r0
     c06:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	bd90      	pop	{r4, r7, pc}
     c12:	bf00      	nop
     c14:	10000178 	.word	0x10000178
     c18:	00008960 	.word	0x00008960

00000c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     c1c:	b590      	push	{r4, r7, lr}
     c1e:	b083      	sub	sp, #12
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
     c24:	460b      	mov	r3, r1
     c26:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     c30:	8879      	ldrh	r1, [r7, #2]
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c34:	681c      	ldr	r4, [r3, #0]
     c36:	4b0a      	ldr	r3, [pc, #40]	; (c60 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     c38:	781a      	ldrb	r2, [r3, #0]
     c3a:	785b      	ldrb	r3, [r3, #1]
     c3c:	021b      	lsls	r3, r3, #8
     c3e:	431a      	orrs	r2, r3
     c40:	2300      	movs	r3, #0
     c42:	f362 030f 	bfi	r3, r2, #0, #16
     c46:	461a      	mov	r2, r3
     c48:	f001 fd75 	bl	2736 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c4c:	4603      	mov	r3, r0
     c4e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     c52:	bf00      	nop
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bd90      	pop	{r4, r7, pc}
     c5a:	bf00      	nop
     c5c:	10000178 	.word	0x10000178
     c60:	0000896c 	.word	0x0000896c

00000c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     c64:	b590      	push	{r4, r7, lr}
     c66:	b083      	sub	sp, #12
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	460b      	mov	r3, r1
     c6e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     c78:	8879      	ldrh	r1, [r7, #2]
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c7c:	681c      	ldr	r4, [r3, #0]
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     c80:	781a      	ldrb	r2, [r3, #0]
     c82:	785b      	ldrb	r3, [r3, #1]
     c84:	021b      	lsls	r3, r3, #8
     c86:	431a      	orrs	r2, r3
     c88:	2300      	movs	r3, #0
     c8a:	f362 030f 	bfi	r3, r2, #0, #16
     c8e:	461a      	mov	r2, r3
     c90:	f001 fd51 	bl	2736 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c94:	4603      	mov	r3, r0
     c96:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	bd90      	pop	{r4, r7, pc}
     ca2:	bf00      	nop
     ca4:	10000178 	.word	0x10000178
     ca8:	00008970 	.word	0x00008970

00000cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     cac:	b590      	push	{r4, r7, lr}
     cae:	b083      	sub	sp, #12
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
     cb4:	460b      	mov	r3, r1
     cb6:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     cb8:	4b0c      	ldr	r3, [pc, #48]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     cc0:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cc4:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	785b      	ldrb	r3, [r3, #1]
     ccc:	021b      	lsls	r3, r3, #8
     cce:	431a      	orrs	r2, r3
     cd0:	2300      	movs	r3, #0
     cd2:	f362 030f 	bfi	r3, r2, #0, #16
     cd6:	461a      	mov	r2, r3
     cd8:	f001 fd2d 	bl	2736 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     cdc:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     cde:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     ce2:	bf00      	nop
     ce4:	370c      	adds	r7, #12
     ce6:	46bd      	mov	sp, r7
     ce8:	bd90      	pop	{r4, r7, pc}
     cea:	bf00      	nop
     cec:	10000178 	.word	0x10000178
     cf0:	00008974 	.word	0x00008974

00000cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     cf4:	b580      	push	{r7, lr}
     cf6:	ed2d 8b02 	vpush	{d8}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
     d00:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	ed93 8a00 	vldr	s16, [r3]
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	4618      	mov	r0, r3
     d0c:	f7ff fc91 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     d10:	eef0 7a40 	vmov.f32	s15, s0
     d14:	eeb4 8ae7 	vcmpe.f32	s16, s15
     d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d1c:	bf4c      	ite	mi
     d1e:	2301      	movmi	r3, #1
     d20:	2300      	movpl	r3, #0
     d22:	b2db      	uxtb	r3, r3
		}
     d24:	4618      	mov	r0, r3
     d26:	3708      	adds	r7, #8
     d28:	46bd      	mov	sp, r7
     d2a:	ecbd 8b02 	vpop	{d8}
     d2e:	bd80      	pop	{r7, pc}

00000d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     d38:	6878      	ldr	r0, [r7, #4]
     d3a:	f000 f805 	bl	d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     d3e:	4603      	mov	r3, r0
		}
     d40:	4618      	mov	r0, r3
     d42:	3708      	adds	r7, #8
     d44:	46bd      	mov	sp, r7
     d46:	bd80      	pop	{r7, pc}

00000d48 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	4618      	mov	r0, r3
     d54:	f000 f80a 	bl	d6c <units::linear_scale<float>::operator()() const>
     d58:	eef0 7a40 	vmov.f32	s15, s0
     d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d60:	ee17 3a90 	vmov	r3, s15
		}
     d64:	4618      	mov	r0, r3
     d66:	3708      	adds	r7, #8
     d68:	46bd      	mov	sp, r7
     d6a:	bd80      	pop	{r7, pc}

00000d6c <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     d6c:	b480      	push	{r7}
     d6e:	b083      	sub	sp, #12
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	ee07 3a90 	vmov	s15, r3
     d7c:	eeb0 0a67 	vmov.f32	s0, s15
     d80:	370c      	adds	r7, #12
     d82:	46bd      	mov	sp, r7
     d84:	f85d 7b04 	ldr.w	r7, [sp], #4
     d88:	4770      	bx	lr

00000d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     d8a:	b580      	push	{r7, lr}
     d8c:	ed2d 8b02 	vpush	{d8}
     d90:	b084      	sub	sp, #16
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
     d96:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	4618      	mov	r0, r3
     d9c:	f7ff ffe6 	bl	d6c <units::linear_scale<float>::operator()() const>
     da0:	eeb0 8a40 	vmov.f32	s16, s0
     da4:	683b      	ldr	r3, [r7, #0]
     da6:	4618      	mov	r0, r3
     da8:	f7ff ffe0 	bl	d6c <units::linear_scale<float>::operator()() const>
     dac:	eef0 7a40 	vmov.f32	s15, s0
     db0:	edc7 7a03 	vstr	s15, [r7, #12]
     db4:	f107 030c 	add.w	r3, r7, #12
     db8:	4618      	mov	r0, r3
     dba:	f7ff fc3a 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     dbe:	eeb0 7a40 	vmov.f32	s14, s0
     dc2:	eec8 7a07 	vdiv.f32	s15, s16, s14
     dc6:	f107 0308 	add.w	r3, r7, #8
     dca:	eeb0 0a67 	vmov.f32	s0, s15
     dce:	4618      	mov	r0, r3
     dd0:	f000 f807 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     dd4:	68bb      	ldr	r3, [r7, #8]
	}
     dd6:	4618      	mov	r0, r3
     dd8:	3710      	adds	r7, #16
     dda:	46bd      	mov	sp, r7
     ddc:	ecbd 8b02 	vpop	{d8}
     de0:	bd80      	pop	{r7, pc}

00000de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     de2:	b580      	push	{r7, lr}
     de4:	b082      	sub	sp, #8
     de6:	af00      	add	r7, sp, #0
     de8:	6078      	str	r0, [r7, #4]
     dea:	ed87 0a00 	vstr	s0, [r7]
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	463a      	mov	r2, r7
     df2:	4611      	mov	r1, r2
     df4:	4618      	mov	r0, r3
     df6:	f7ff fc0c 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	4618      	mov	r0, r3
     dfe:	3708      	adds	r7, #8
     e00:	46bd      	mov	sp, r7
     e02:	bd80      	pop	{r7, pc}

00000e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	4618      	mov	r0, r3
     e12:	f7ff ffab 	bl	d6c <units::linear_scale<float>::operator()() const>
     e16:	eeb0 7a40 	vmov.f32	s14, s0
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	ee07 3a90 	vmov	s15, r3
     e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e24:	ee77 7a27 	vadd.f32	s15, s14, s15
     e28:	f107 030c 	add.w	r3, r7, #12
     e2c:	eeb0 0a67 	vmov.f32	s0, s15
     e30:	4618      	mov	r0, r3
     e32:	f7ff ffd6 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     e36:	68fb      	ldr	r3, [r7, #12]
	}
     e38:	4618      	mov	r0, r3
     e3a:	3710      	adds	r7, #16
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}

00000e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	4618      	mov	r0, r3
     e4c:	f7ff ff8e 	bl	d6c <units::linear_scale<float>::operator()() const>
     e50:	eef0 7a40 	vmov.f32	s15, s0
     e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e58:	ee17 3a90 	vmov	r3, s15
     e5c:	b29b      	uxth	r3, r3
		}
     e5e:	4618      	mov	r0, r3
     e60:	3708      	adds	r7, #8
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	Address 0x0000000000000e66 is out of bounds.


00000e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     e68:	b590      	push	{r4, r7, lr}
     e6a:	b08d      	sub	sp, #52	; 0x34
     e6c:	af00      	add	r7, sp, #0
     e6e:	60f8      	str	r0, [r7, #12]
     e70:	60b9      	str	r1, [r7, #8]
     e72:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     e74:	f44f 70c0 	mov.w	r0, #384	; 0x180
     e78:	f04f 0100 	mov.w	r1, #0
     e7c:	f7ff fba2 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     e80:	4603      	mov	r3, r0
     e82:	613b      	str	r3, [r7, #16]
     e84:	f107 0210 	add.w	r2, r7, #16
     e88:	1d3b      	adds	r3, r7, #4
     e8a:	4611      	mov	r1, r2
     e8c:	4618      	mov	r0, r3
     e8e:	f7ff ff31 	bl	cf4 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     e92:	4603      	mov	r3, r0
     e94:	f083 0301 	eor.w	r3, r3, #1
     e98:	b2db      	uxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	d114      	bne.n	ec8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     e9e:	f04f 000c 	mov.w	r0, #12
     ea2:	f04f 0100 	mov.w	r1, #0
     ea6:	f7ff fb8d 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     eaa:	4603      	mov	r3, r0
     eac:	617b      	str	r3, [r7, #20]
     eae:	f107 0214 	add.w	r2, r7, #20
     eb2:	1d3b      	adds	r3, r7, #4
     eb4:	4611      	mov	r1, r2
     eb6:	4618      	mov	r0, r3
     eb8:	f001 fbe7 	bl	268a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     ebc:	4603      	mov	r3, r0
     ebe:	f083 0301 	eor.w	r3, r3, #1
     ec2:	b2db      	uxtb	r3, r3
     ec4:	2b00      	cmp	r3, #0
     ec6:	d001      	beq.n	ecc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     ec8:	2301      	movs	r3, #1
     eca:	e000      	b.n	ece <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     ecc:	2300      	movs	r3, #0
     ece:	2b00      	cmp	r3, #0
     ed0:	d00d      	beq.n	eee <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     ed2:	23f6      	movs	r3, #246	; 0xf6
     ed4:	4a43      	ldr	r2, [pc, #268]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     ed6:	4944      	ldr	r1, [pc, #272]	; (fe8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     ed8:	4844      	ldr	r0, [pc, #272]	; (fec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     eda:	f004 f8df 	bl	509c <printf>
     ede:	4844      	ldr	r0, [pc, #272]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     ee0:	f002 ffc0 	bl	3e64 <puts>
     ee4:	2100      	movs	r1, #0
     ee6:	2001      	movs	r0, #1
     ee8:	f7ff fcee 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     eec:	e7fe      	b.n	eec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     eee:	2301      	movs	r3, #1
     ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     ef4:	1d3b      	adds	r3, r7, #4
     ef6:	4618      	mov	r0, r3
     ef8:	f7ff ff1a 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     efc:	4604      	mov	r4, r0
     efe:	f107 0308 	add.w	r3, r7, #8
     f02:	4618      	mov	r0, r3
     f04:	f7ff ff14 	bl	d30 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     f08:	4603      	mov	r3, r0
     f0a:	fbb4 f2f3 	udiv	r2, r4, r3
     f0e:	fb03 f302 	mul.w	r3, r3, r2
     f12:	1ae3      	subs	r3, r4, r3
     f14:	2b00      	cmp	r3, #0
     f16:	bf14      	ite	ne
     f18:	2301      	movne	r3, #1
     f1a:	2300      	moveq	r3, #0
     f1c:	b2db      	uxtb	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	d017      	beq.n	f52 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     f22:	f107 0208 	add.w	r2, r7, #8
     f26:	1d3b      	adds	r3, r7, #4
     f28:	4611      	mov	r1, r2
     f2a:	4618      	mov	r0, r3
     f2c:	f7ff ff2d 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f30:	4603      	mov	r3, r0
     f32:	61fb      	str	r3, [r7, #28]
     f34:	f107 031c 	add.w	r3, r7, #28
     f38:	2101      	movs	r1, #1
     f3a:	4618      	mov	r0, r3
     f3c:	f7ff ff62 	bl	e04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     f40:	4603      	mov	r3, r0
     f42:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     f44:	f107 0318 	add.w	r3, r7, #24
     f48:	4618      	mov	r0, r3
     f4a:	f001 fc06 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f4e:	62b8      	str	r0, [r7, #40]	; 0x28
     f50:	e00e      	b.n	f70 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     f52:	f107 0208 	add.w	r2, r7, #8
     f56:	1d3b      	adds	r3, r7, #4
     f58:	4611      	mov	r1, r2
     f5a:	4618      	mov	r0, r3
     f5c:	f7ff ff15 	bl	d8a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f60:	4603      	mov	r3, r0
     f62:	623b      	str	r3, [r7, #32]
      multiplier_value =
     f64:	f107 0320 	add.w	r3, r7, #32
     f68:	4618      	mov	r0, r3
     f6a:	f001 fbf6 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f6e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     f70:	2301      	movs	r3, #1
     f72:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f78:	2b00      	cmp	r3, #0
     f7a:	d02d      	beq.n	fd8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     f7c:	f107 0308 	add.w	r3, r7, #8
     f80:	4618      	mov	r0, r3
     f82:	f7ff ff5d 	bl	e40 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     f86:	4603      	mov	r3, r0
     f88:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f8c:	b29b      	uxth	r3, r3
     f8e:	fb12 f303 	smulbb	r3, r2, r3
     f92:	b29b      	uxth	r3, r3
     f94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     f96:	fb12 f303 	smulbb	r3, r2, r3
     f9a:	b29b      	uxth	r3, r3
     f9c:	005b      	lsls	r3, r3, #1
     f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     fa2:	2b9b      	cmp	r3, #155	; 0x9b
     fa4:	d903      	bls.n	fae <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     fa6:	2300      	movs	r3, #0
     fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     fac:	e7e2      	b.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb0:	005b      	lsls	r3, r3, #1
     fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fb6:	2b07      	cmp	r3, #7
     fb8:	d9dc      	bls.n	f74 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     fba:	f44f 7389 	mov.w	r3, #274	; 0x112
     fbe:	4a09      	ldr	r2, [pc, #36]	; (fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     fc0:	490c      	ldr	r1, [pc, #48]	; (ff4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     fc2:	480d      	ldr	r0, [pc, #52]	; (ff8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     fc4:	f004 f86a 	bl	509c <printf>
     fc8:	4809      	ldr	r0, [pc, #36]	; (ff0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     fca:	f002 ff4b 	bl	3e64 <puts>
     fce:	2100      	movs	r1, #0
     fd0:	2001      	movs	r0, #1
     fd2:	f7ff fc79 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     fd6:	e7fe      	b.n	fd6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     fda:	4618      	mov	r0, r3
     fdc:	3734      	adds	r7, #52	; 0x34
     fde:	46bd      	mov	sp, r7
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	bf00      	nop
     fe4:	00008c44 	.word	0x00008c44
     fe8:	00008990 	.word	0x00008990
     fec:	00008398 	.word	0x00008398
     ff0:	00008380 	.word	0x00008380
     ff4:	000089a8 	.word	0x000089a8
     ff8:	00008488 	.word	0x00008488

00000ffc <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     ffc:	b580      	push	{r7, lr}
     ffe:	b086      	sub	sp, #24
    1000:	af00      	add	r7, sp, #0
    1002:	60f8      	str	r0, [r7, #12]
    1004:	60b9      	str	r1, [r7, #8]
    1006:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    1008:	2301      	movs	r3, #1
    100a:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    100c:	687a      	ldr	r2, [r7, #4]
    100e:	68b9      	ldr	r1, [r7, #8]
    1010:	68f8      	ldr	r0, [r7, #12]
    1012:	f7ff ff29 	bl	e68 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    1016:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1018:	2100      	movs	r1, #0
    101a:	68f8      	ldr	r0, [r7, #12]
    101c:	f7ff fdda 	bl	bd4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1020:	2100      	movs	r1, #0
    1022:	68f8      	ldr	r0, [r7, #12]
    1024:	f7ff fdfa 	bl	c1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1028:	2100      	movs	r1, #0
    102a:	68f8      	ldr	r0, [r7, #12]
    102c:	f7ff fe1a 	bl	c64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1030:	2100      	movs	r1, #0
    1032:	68f8      	ldr	r0, [r7, #12]
    1034:	f7ff fe3a 	bl	cac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1038:	4b21      	ldr	r3, [pc, #132]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1040:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1048:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    104a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    104c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    104e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1052:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    105a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    105e:	8afb      	ldrh	r3, [r7, #22]
    1060:	015b      	lsls	r3, r3, #5
    1062:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1064:	4b16      	ldr	r3, [pc, #88]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1066:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1068:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    106e:	4b14      	ldr	r3, [pc, #80]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1076:	4b12      	ldr	r3, [pc, #72]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	f042 0201 	orr.w	r2, r2, #1
    107e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    1082:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	22aa      	movs	r2, #170	; 0xaa
    1088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	2255      	movs	r2, #85	; 0x55
    1092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    109e:	210a      	movs	r1, #10
    10a0:	4618      	mov	r0, r3
    10a2:	f001 fb75 	bl	2790 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    10a6:	4603      	mov	r3, r0
    10a8:	f083 0301 	eor.w	r3, r3, #1
    10ac:	b2db      	uxtb	r3, r3
    10ae:	2b00      	cmp	r3, #0
    10b0:	d001      	beq.n	10b6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    10b2:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    10b4:	e7ef      	b.n	1096 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    10b6:	bf00      	nop
    10b8:	3718      	adds	r7, #24
    10ba:	46bd      	mov	sp, r7
    10bc:	bd80      	pop	{r7, pc}
    10be:	bf00      	nop
    10c0:	10000178 	.word	0x10000178

000010c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    10c4:	b590      	push	{r4, r7, lr}
    10c6:	b083      	sub	sp, #12
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
    10cc:	460b      	mov	r3, r1
    10ce:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    10d0:	78fb      	ldrb	r3, [r7, #3]
    10d2:	2b1f      	cmp	r3, #31
    10d4:	d90e      	bls.n	10f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    10d6:	f44f 73a9 	mov.w	r3, #338	; 0x152
    10da:	4a13      	ldr	r2, [pc, #76]	; (1128 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    10dc:	4913      	ldr	r1, [pc, #76]	; (112c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    10de:	4814      	ldr	r0, [pc, #80]	; (1130 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    10e0:	f003 ffdc 	bl	509c <printf>
    10e4:	4813      	ldr	r0, [pc, #76]	; (1134 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    10e6:	f002 febd 	bl	3e64 <puts>
    10ea:	2100      	movs	r1, #0
    10ec:	2001      	movs	r0, #1
    10ee:	f7ff fbeb 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    10f2:	e7fe      	b.n	10f2 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    10f4:	4b10      	ldr	r3, [pc, #64]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10f6:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    10f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10fe:	681c      	ldr	r4, [r3, #0]
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    1102:	78f9      	ldrb	r1, [r7, #3]
    1104:	781a      	ldrb	r2, [r3, #0]
    1106:	785b      	ldrb	r3, [r3, #1]
    1108:	021b      	lsls	r3, r3, #8
    110a:	431a      	orrs	r2, r3
    110c:	2300      	movs	r3, #0
    110e:	f362 030f 	bfi	r3, r2, #0, #16
    1112:	461a      	mov	r2, r3
    1114:	f001 fa46 	bl	25a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1118:	4603      	mov	r3, r0
    111a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    111e:	bf00      	nop
    1120:	370c      	adds	r7, #12
    1122:	46bd      	mov	sp, r7
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	bf00      	nop
    1128:	00008cc0 	.word	0x00008cc0
    112c:	000089c0 	.word	0x000089c0
    1130:	00008530 	.word	0x00008530
    1134:	00008380 	.word	0x00008380
    1138:	10000178 	.word	0x10000178
    113c:	00008968 	.word	0x00008968

00001140 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1140:	b590      	push	{r4, r7, lr}
    1142:	b083      	sub	sp, #12
    1144:	af00      	add	r7, sp, #0
    1146:	6078      	str	r0, [r7, #4]
    1148:	460b      	mov	r3, r1
    114a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    114c:	4b0c      	ldr	r3, [pc, #48]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1154:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1158:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	785b      	ldrb	r3, [r3, #1]
    1160:	021b      	lsls	r3, r3, #8
    1162:	431a      	orrs	r2, r3
    1164:	2300      	movs	r3, #0
    1166:	f362 030f 	bfi	r3, r2, #0, #16
    116a:	461a      	mov	r2, r3
    116c:	f001 fae3 	bl	2736 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1170:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    1172:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    1176:	bf00      	nop
    1178:	370c      	adds	r7, #12
    117a:	46bd      	mov	sp, r7
    117c:	bd90      	pop	{r4, r7, pc}
    117e:	bf00      	nop
    1180:	10000178 	.word	0x10000178
    1184:	00008964 	.word	0x00008964

00001188 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    1188:	b480      	push	{r7}
    118a:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    118c:	4b02      	ldr	r3, [pc, #8]	; (1198 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    118e:	4618      	mov	r0, r3
    1190:	46bd      	mov	sp, r7
    1192:	f85d 7b04 	ldr.w	r7, [sp], #4
    1196:	4770      	bx	lr
    1198:	10000008 	.word	0x10000008

0000119c <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  }
  /// Wait to receive just 1 byte
  ///
  /// @param timeout - The maximum amount of time to wait for a byte to be
  ///        transmitted.
  uint8_t Read(std::chrono::microseconds timeout =
    119c:	b5b0      	push	{r4, r5, r7, lr}
    119e:	b088      	sub	sp, #32
    11a0:	af02      	add	r7, sp, #8
    11a2:	60f8      	str	r0, [r7, #12]
    11a4:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    11a8:	68fb      	ldr	r3, [r7, #12]
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	330c      	adds	r3, #12
    11ae:	681d      	ldr	r5, [r3, #0]
    11b0:	f107 0117 	add.w	r1, r7, #23
    11b4:	e9d7 3400 	ldrd	r3, r4, [r7]
    11b8:	e9cd 3400 	strd	r3, r4, [sp]
    11bc:	2201      	movs	r2, #1
    11be:	68f8      	ldr	r0, [r7, #12]
    11c0:	47a8      	blx	r5
    11c2:	4603      	mov	r3, r0
    11c4:	2b01      	cmp	r3, #1
    11c6:	bf0c      	ite	eq
    11c8:	2301      	moveq	r3, #1
    11ca:	2300      	movne	r3, #0
    11cc:	b2db      	uxtb	r3, r3
    11ce:	2b00      	cmp	r3, #0
    11d0:	d001      	beq.n	11d6 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    11d2:	23ff      	movs	r3, #255	; 0xff
    11d4:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    11d6:	7dfb      	ldrb	r3, [r7, #23]
  }
    11d8:	4618      	mov	r0, r3
    11da:	3718      	adds	r7, #24
    11dc:	46bd      	mov	sp, r7
    11de:	bdb0      	pop	{r4, r5, r7, pc}

000011e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    11e0:	b480      	push	{r7}
    11e2:	b089      	sub	sp, #36	; 0x24
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
    11e8:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	2200      	movs	r2, #0
    11f0:	601a      	str	r2, [r3, #0]
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	2200      	movs	r2, #0
    11f6:	605a      	str	r2, [r3, #4]
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	2201      	movs	r2, #1
    11fc:	609a      	str	r2, [r3, #8]
  bool finished = false;
    11fe:	2300      	movs	r3, #0
    1200:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    1202:	2300      	movs	r3, #0
    1204:	61bb      	str	r3, [r7, #24]
    1206:	69bb      	ldr	r3, [r7, #24]
    1208:	2b0e      	cmp	r3, #14
    120a:	dc4f      	bgt.n	12ac <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    120c:	7ffb      	ldrb	r3, [r7, #31]
    120e:	2b00      	cmp	r3, #0
    1210:	d14c      	bne.n	12ac <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1212:	69bb      	ldr	r3, [r7, #24]
    1214:	3301      	adds	r3, #1
    1216:	617b      	str	r3, [r7, #20]
    1218:	697b      	ldr	r3, [r7, #20]
    121a:	2b0e      	cmp	r3, #14
    121c:	dc42      	bgt.n	12a4 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    121e:	7ffb      	ldrb	r3, [r7, #31]
    1220:	2b00      	cmp	r3, #0
    1222:	d13f      	bne.n	12a4 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    1224:	69bb      	ldr	r3, [r7, #24]
    1226:	ee07 3a90 	vmov	s15, r3
    122a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    122e:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    1232:	697b      	ldr	r3, [r7, #20]
    1234:	ee07 3a90 	vmov	s15, r3
    1238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    123c:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    1240:	edd7 6a04 	vldr	s13, [r7, #16]
    1244:	ed97 7a03 	vldr	s14, [r7, #12]
    1248:	eec6 7a87 	vdiv.f32	s15, s13, s14
    124c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1250:	ee77 7a87 	vadd.f32	s15, s15, s14
    1254:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    1258:	edd7 7a02 	vldr	s15, [r7, #8]
    125c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 12bc <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1260:	ee77 7a87 	vadd.f32	s15, s15, s14
    1264:	ed97 7a00 	vldr	s14, [r7]
    1268:	eeb4 7ae7 	vcmpe.f32	s14, s15
    126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1270:	d814      	bhi.n	129c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    1272:	edd7 7a02 	vldr	s15, [r7, #8]
    1276:	ed9f 7a11 	vldr	s14, [pc, #68]	; 12bc <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    127a:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    127e:	ed97 7a00 	vldr	s14, [r7]
    1282:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    128a:	db07      	blt.n	129c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    128c:	69ba      	ldr	r2, [r7, #24]
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    1292:	697a      	ldr	r2, [r7, #20]
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	609a      	str	r2, [r3, #8]
        finished          = true;
    1298:	2301      	movs	r3, #1
    129a:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    129c:	697b      	ldr	r3, [r7, #20]
    129e:	3301      	adds	r3, #1
    12a0:	617b      	str	r3, [r7, #20]
    12a2:	e7b9      	b.n	1218 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    12a4:	69bb      	ldr	r3, [r7, #24]
    12a6:	3301      	adds	r3, #1
    12a8:	61bb      	str	r3, [r7, #24]
    12aa:	e7ac      	b.n	1206 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    12ac:	bf00      	nop
}
    12ae:	6878      	ldr	r0, [r7, #4]
    12b0:	3724      	adds	r7, #36	; 0x24
    12b2:	46bd      	mov	sp, r7
    12b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b8:	4770      	bx	lr
    12ba:	bf00      	nop
    12bc:	3d4ccccd 	.word	0x3d4ccccd

000012c0 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    12c0:	b480      	push	{r7}
    12c2:	b087      	sub	sp, #28
    12c4:	af00      	add	r7, sp, #0
    12c6:	ed87 0a03 	vstr	s0, [r7, #12]
    12ca:	edc7 0a02 	vstr	s1, [r7, #8]
    12ce:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	ee07 3a90 	vmov	s15, r3
    12d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12da:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    12de:	edd7 7a03 	vldr	s15, [r7, #12]
    12e2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    12e6:	ee27 7a87 	vmul.f32	s14, s15, s14
    12ea:	edd7 7a02 	vldr	s15, [r7, #8]
    12ee:	ee67 7a27 	vmul.f32	s15, s14, s15
    12f2:	ed97 7a05 	vldr	s14, [r7, #20]
    12f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    12fa:	eef0 7a66 	vmov.f32	s15, s13
}
    12fe:	eeb0 0a67 	vmov.f32	s0, s15
    1302:	371c      	adds	r7, #28
    1304:	46bd      	mov	sp, r7
    1306:	f85d 7b04 	ldr.w	r7, [sp], #4
    130a:	4770      	bx	lr

0000130c <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    130c:	b480      	push	{r7}
    130e:	b087      	sub	sp, #28
    1310:	af00      	add	r7, sp, #0
    1312:	ed87 0a03 	vstr	s0, [r7, #12]
    1316:	edc7 0a02 	vstr	s1, [r7, #8]
    131a:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	ee07 3a90 	vmov	s15, r3
    1322:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1326:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    132a:	edd7 7a03 	vldr	s15, [r7, #12]
    132e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1332:	ee27 7a87 	vmul.f32	s14, s15, s14
    1336:	edd7 7a02 	vldr	s15, [r7, #8]
    133a:	ee67 7a27 	vmul.f32	s15, s14, s15
    133e:	ed97 7a05 	vldr	s14, [r7, #20]
    1342:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1346:	eef0 7a66 	vmov.f32	s15, s13
}
    134a:	eeb0 0a67 	vmov.f32	s0, s15
    134e:	371c      	adds	r7, #28
    1350:	46bd      	mov	sp, r7
    1352:	f85d 7b04 	ldr.w	r7, [sp], #4
    1356:	4770      	bx	lr

00001358 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    1358:	b480      	push	{r7}
    135a:	b083      	sub	sp, #12
    135c:	af00      	add	r7, sp, #0
    135e:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    1362:	edd7 7a01 	vldr	s15, [r7, #4]
    1366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    136a:	ee77 7a87 	vadd.f32	s15, s15, s14
    136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    1376:	eeb0 0a67 	vmov.f32	s0, s15
    137a:	370c      	adds	r7, #12
    137c:	46bd      	mov	sp, r7
    137e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1382:	4770      	bx	lr

00001384 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    1384:	b580      	push	{r7, lr}
    1386:	b086      	sub	sp, #24
    1388:	af00      	add	r7, sp, #0
    138a:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    138e:	2300      	movs	r3, #0
    1390:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    1392:	ed97 0a01 	vldr	s0, [r7, #4]
    1396:	f7ff ffdf 	bl	1358 <sjsu::lpc40xx::uart::RoundFloat(float)>
    139a:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    139e:	ed97 7a01 	vldr	s14, [r7, #4]
    13a2:	edd7 7a04 	vldr	s15, [r7, #16]
    13a6:	ee77 7a67 	vsub.f32	s15, s14, s15
    13aa:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    13ae:	edd7 7a03 	vldr	s15, [r7, #12]
    13b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 13e0 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    13b6:	eef4 7ac7 	vcmpe.f32	s15, s14
    13ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13be:	db0a      	blt.n	13d6 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    13c0:	edd7 7a03 	vldr	s15, [r7, #12]
    13c4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 13e4 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    13c8:	eef4 7ac7 	vcmpe.f32	s15, s14
    13cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13d0:	d801      	bhi.n	13d6 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    13d2:	2301      	movs	r3, #1
    13d4:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    13d6:	7dfb      	ldrb	r3, [r7, #23]
}
    13d8:	4618      	mov	r0, r3
    13da:	3718      	adds	r7, #24
    13dc:	46bd      	mov	sp, r7
    13de:	bd80      	pop	{r7, pc}
    13e0:	bd4ccccd 	.word	0xbd4ccccd
    13e4:	3d4ccccd 	.word	0x3d4ccccd

000013e8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    13e8:	b580      	push	{r7, lr}
    13ea:	b082      	sub	sp, #8
    13ec:	af00      	add	r7, sp, #0
    13ee:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    13f0:	6878      	ldr	r0, [r7, #4]
    13f2:	f000 f805 	bl	1400 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    13f6:	4603      	mov	r3, r0
	}
    13f8:	4618      	mov	r0, r3
    13fa:	3708      	adds	r7, #8
    13fc:	46bd      	mov	sp, r7
    13fe:	bd80      	pop	{r7, pc}

00001400 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1400:	b580      	push	{r7, lr}
    1402:	b082      	sub	sp, #8
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	4618      	mov	r0, r3
    140c:	f7ff fcae 	bl	d6c <units::linear_scale<float>::operator()() const>
    1410:	eef0 7a40 	vmov.f32	s15, s0
    1414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1418:	ee17 3a90 	vmov	r3, s15
		}
    141c:	4618      	mov	r0, r3
    141e:	3708      	adds	r7, #8
    1420:	46bd      	mov	sp, r7
    1422:	bd80      	pop	{r7, pc}

00001424 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    1424:	b590      	push	{r4, r7, lr}
    1426:	b091      	sub	sp, #68	; 0x44
    1428:	af00      	add	r7, sp, #0
    142a:	61f8      	str	r0, [r7, #28]
    142c:	61b9      	str	r1, [r7, #24]
    142e:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    1430:	f107 0314 	add.w	r3, r7, #20
    1434:	4618      	mov	r0, r3
    1436:	f7ff ffd7 	bl	13e8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    143a:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    143c:	2300      	movs	r3, #0
    143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    1440:	69fb      	ldr	r3, [r7, #28]
    1442:	2200      	movs	r2, #0
    1444:	601a      	str	r2, [r3, #0]
    1446:	69fb      	ldr	r3, [r7, #28]
    1448:	2200      	movs	r2, #0
    144a:	605a      	str	r2, [r3, #4]
    144c:	69fb      	ldr	r3, [r7, #28]
    144e:	2201      	movs	r2, #1
    1450:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    1452:	69bb      	ldr	r3, [r7, #24]
    1454:	ee07 3a90 	vmov	s15, r3
    1458:	eef8 7a67 	vcvt.f32.u32	s15, s15
    145c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    1460:	f04f 0300 	mov.w	r3, #0
    1464:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    1466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    146a:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    146c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    1470:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    1472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1476:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    1478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    147a:	2b04      	cmp	r3, #4
    147c:	f000 80be 	beq.w	15fc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    1480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1482:	2b03      	cmp	r3, #3
    1484:	f200 80b8 	bhi.w	15f8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    1488:	a201      	add	r2, pc, #4	; (adr r2, 1490 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    148e:	bf00      	nop
    1490:	000014a1 	.word	0x000014a1
    1494:	000014fb 	.word	0x000014fb
    1498:	0000155b 	.word	0x0000155b
    149c:	000015cb 	.word	0x000015cb
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    14a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    14a6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    14aa:	f7ff ff09 	bl	12c0 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    14ae:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    14b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    14b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    14ba:	eef4 7ac7 	vcmpe.f32	s15, s14
    14be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14c2:	d505      	bpl.n	14d0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    14c4:	69fb      	ldr	r3, [r7, #28]
    14c6:	2200      	movs	r2, #0
    14c8:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    14ca:	2304      	movs	r3, #4
    14cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    14ce:	e094      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    14d0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    14d4:	f7ff ff56 	bl	1384 <sjsu::lpc40xx::uart::IsDecmial(float)>
    14d8:	4603      	mov	r3, r0
    14da:	2b00      	cmp	r3, #0
    14dc:	d00a      	beq.n	14f4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    14de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    14e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    14e6:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    14ea:	69fb      	ldr	r3, [r7, #28]
    14ec:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    14ee:	2304      	movs	r3, #4
    14f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    14f2:	e082      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    14f4:	2301      	movs	r3, #1
    14f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    14f8:	e07f      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    14fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14fc:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    1500:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1504:	f7ff fedc 	bl	12c0 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    1508:	eef0 7a40 	vmov.f32	s15, s0
    150c:	eeb0 0a67 	vmov.f32	s0, s15
    1510:	f7ff ff22 	bl	1358 <sjsu::lpc40xx::uart::RoundFloat(float)>
    1514:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    1518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    151a:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    151e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1522:	f7ff fef3 	bl	130c <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    1526:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    152a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    152e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1608 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    1532:	eef4 7ac7 	vcmpe.f32	s15, s14
    1536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    153a:	db0b      	blt.n	1554 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    153c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1540:	ed9f 7a32 	vldr	s14, [pc, #200]	; 160c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    1544:	eef4 7ac7 	vcmpe.f32	s15, s14
    1548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    154c:	d802      	bhi.n	1554 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    154e:	2303      	movs	r3, #3
    1550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    1552:	e052      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    1554:	2302      	movs	r3, #2
    1556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1558:	e04f      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    155a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    155e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1562:	ee77 7a87 	vadd.f32	s15, s15, s14
    1566:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    156a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    156e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1572:	eef4 7ac7 	vcmpe.f32	s15, s14
    1576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    157a:	dd02      	ble.n	1582 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    157c:	2304      	movs	r3, #4
    157e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    1580:	e03b      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    1582:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1586:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    158a:	eef4 7ac7 	vcmpe.f32	s15, s14
    158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1592:	dd0f      	ble.n	15b4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    1594:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    159c:	ee77 7a87 	vadd.f32	s15, s15, s14
    15a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    15a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    15a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    15b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    15b4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    15b8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    15bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    15c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    15c4:	2301      	movs	r3, #1
    15c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15c8:	e017      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    15ca:	69fc      	ldr	r4, [r7, #28]
    15cc:	463b      	mov	r3, r7
    15ce:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    15d2:	4618      	mov	r0, r3
    15d4:	f7ff fe04 	bl	11e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    15d8:	463b      	mov	r3, r7
    15da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    15de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    15e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    15e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    15ea:	ee17 2a90 	vmov	r2, s15
    15ee:	69fb      	ldr	r3, [r7, #28]
    15f0:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    15f2:	2304      	movs	r3, #4
    15f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15f6:	e000      	b.n	15fa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    15f8:	bf00      	nop
  while (state != States::kDone)
    15fa:	e73d      	b.n	1478 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    15fc:	bf00      	nop
}
    15fe:	69f8      	ldr	r0, [r7, #28]
    1600:	3744      	adds	r7, #68	; 0x44
    1602:	46bd      	mov	sp, r7
    1604:	bd90      	pop	{r4, r7, pc}
    1606:	bf00      	nop
    1608:	3f8ccccd 	.word	0x3f8ccccd
    160c:	3ff33333 	.word	0x3ff33333

00001610 <sjsu::Uart::Uart()>:
class Uart
    1610:	b480      	push	{r7}
    1612:	b083      	sub	sp, #12
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
    1618:	4a04      	ldr	r2, [pc, #16]	; (162c <sjsu::Uart::Uart()+0x1c>)
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	601a      	str	r2, [r3, #0]
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	4618      	mov	r0, r3
    1622:	370c      	adds	r7, #12
    1624:	46bd      	mov	sp, r7
    1626:	f85d 7b04 	ldr.w	r7, [sp], #4
    162a:	4770      	bx	lr
    162c:	00008b14 	.word	0x00008b14

00001630 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    1630:	b580      	push	{r7, lr}
    1632:	b084      	sub	sp, #16
    1634:	af00      	add	r7, sp, #0
    1636:	60f8      	str	r0, [r7, #12]
    1638:	60b9      	str	r1, [r7, #8]
    163a:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    163c:	68fb      	ldr	r3, [r7, #12]
    163e:	4618      	mov	r0, r3
    1640:	f7ff ffe6 	bl	1610 <sjsu::Uart::Uart()>
    1644:	4a06      	ldr	r2, [pc, #24]	; (1660 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    1646:	68fb      	ldr	r3, [r7, #12]
    1648:	601a      	str	r2, [r3, #0]
    164a:	68fb      	ldr	r3, [r7, #12]
    164c:	68ba      	ldr	r2, [r7, #8]
    164e:	605a      	str	r2, [r3, #4]
    1650:	68fb      	ldr	r3, [r7, #12]
    1652:	687a      	ldr	r2, [r7, #4]
    1654:	609a      	str	r2, [r3, #8]
  {
  }
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	4618      	mov	r0, r3
    165a:	3710      	adds	r7, #16
    165c:	46bd      	mov	sp, r7
    165e:	bd80      	pop	{r7, pc}
    1660:	00008af8 	.word	0x00008af8

00001664 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1664:	b580      	push	{r7, lr}
    1666:	b084      	sub	sp, #16
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    166e:	2307      	movs	r3, #7
    1670:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	6898      	ldr	r0, [r3, #8]
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	689b      	ldr	r3, [r3, #8]
    167a:	681b      	ldr	r3, [r3, #0]
    167c:	3314      	adds	r3, #20
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	6852      	ldr	r2, [r2, #4]
    1684:	3204      	adds	r2, #4
    1686:	4611      	mov	r1, r2
    1688:	4798      	blx	r3

    SetBaudRate(baud_rate);
    168a:	6839      	ldr	r1, [r7, #0]
    168c:	6878      	ldr	r0, [r7, #4]
    168e:	f000 f849 	bl	1724 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	685b      	ldr	r3, [r3, #4]
    1696:	68d8      	ldr	r0, [r3, #12]
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	685b      	ldr	r3, [r3, #4]
    169c:	68db      	ldr	r3, [r3, #12]
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	681b      	ldr	r3, [r3, #0]
    16a2:	687a      	ldr	r2, [r7, #4]
    16a4:	6852      	ldr	r2, [r2, #4]
    16a6:	7c12      	ldrb	r2, [r2, #16]
    16a8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    16ac:	b2d2      	uxtb	r2, r2
    16ae:	4611      	mov	r1, r2
    16b0:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	685b      	ldr	r3, [r3, #4]
    16b6:	6898      	ldr	r0, [r3, #8]
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	685b      	ldr	r3, [r3, #4]
    16bc:	689b      	ldr	r3, [r3, #8]
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	687a      	ldr	r2, [r7, #4]
    16c4:	6852      	ldr	r2, [r2, #4]
    16c6:	7c12      	ldrb	r2, [r2, #16]
    16c8:	f3c2 0202 	ubfx	r2, r2, #0, #3
    16cc:	b2d2      	uxtb	r2, r2
    16ce:	4611      	mov	r1, r2
    16d0:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	685b      	ldr	r3, [r3, #4]
    16d6:	68da      	ldr	r2, [r3, #12]
    16d8:	687b      	ldr	r3, [r7, #4]
    16da:	685b      	ldr	r3, [r3, #4]
    16dc:	68db      	ldr	r3, [r3, #12]
    16de:	681b      	ldr	r3, [r3, #0]
    16e0:	3304      	adds	r3, #4
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	2102      	movs	r1, #2
    16e6:	4610      	mov	r0, r2
    16e8:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	685b      	ldr	r3, [r3, #4]
    16ee:	689a      	ldr	r2, [r3, #8]
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	685b      	ldr	r3, [r3, #4]
    16f4:	689b      	ldr	r3, [r3, #8]
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	3304      	adds	r3, #4
    16fa:	681b      	ldr	r3, [r3, #0]
    16fc:	2102      	movs	r1, #2
    16fe:	4610      	mov	r0, r2
    1700:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	685b      	ldr	r3, [r3, #4]
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	7a1b      	ldrb	r3, [r3, #8]
    170a:	b2da      	uxtb	r2, r3
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	685b      	ldr	r3, [r3, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	f042 0207 	orr.w	r2, r2, #7
    1716:	b2d2      	uxtb	r2, r2
    1718:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    171a:	2300      	movs	r3, #0
  }
    171c:	4618      	mov	r0, r3
    171e:	3710      	adds	r7, #16
    1720:	46bd      	mov	sp, r7
    1722:	bd80      	pop	{r7, pc}

00001724 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    1724:	b580      	push	{r7, lr}
    1726:	b086      	sub	sp, #24
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
    172c:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	689a      	ldr	r2, [r3, #8]
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	685b      	ldr	r3, [r3, #4]
    1736:	3304      	adds	r3, #4
    1738:	4619      	mov	r1, r3
    173a:	4610      	mov	r0, r2
    173c:	f7ff f821 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1740:	4602      	mov	r2, r0
    1742:	f107 0308 	add.w	r3, r7, #8
    1746:	6839      	ldr	r1, [r7, #0]
    1748:	4618      	mov	r0, r3
    174a:	f7ff fe6b 	bl	1424 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    174e:	2380      	movs	r3, #128	; 0x80
    1750:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    1752:	68bb      	ldr	r3, [r7, #8]
    1754:	0a1b      	lsrs	r3, r3, #8
    1756:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    1758:	68bb      	ldr	r3, [r7, #8]
    175a:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    175c:	693b      	ldr	r3, [r7, #16]
    175e:	b2db      	uxtb	r3, r3
    1760:	011b      	lsls	r3, r3, #4
    1762:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	b2db      	uxtb	r3, r3
    1768:	f003 030f 	and.w	r3, r3, #15
    176c:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    176e:	4313      	orrs	r3, r2
    1770:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	685b      	ldr	r3, [r3, #4]
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	2280      	movs	r2, #128	; 0x80
    177a:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    177c:	687b      	ldr	r3, [r7, #4]
    177e:	685b      	ldr	r3, [r3, #4]
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	7dba      	ldrb	r2, [r7, #22]
    1784:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	685b      	ldr	r3, [r3, #4]
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	7d7a      	ldrb	r2, [r7, #21]
    178e:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	685b      	ldr	r3, [r3, #4]
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	7d3a      	ldrb	r2, [r7, #20]
    1798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	685b      	ldr	r3, [r3, #4]
    17a0:	681b      	ldr	r3, [r3, #0]
    17a2:	2203      	movs	r2, #3
    17a4:	731a      	strb	r2, [r3, #12]
    return true;
    17a6:	2301      	movs	r3, #1
  }
    17a8:	4618      	mov	r0, r3
    17aa:	3718      	adds	r7, #24
    17ac:	46bd      	mov	sp, r7
    17ae:	bd80      	pop	{r7, pc}

000017b0 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    17b0:	b580      	push	{r7, lr}
    17b2:	b086      	sub	sp, #24
    17b4:	af00      	add	r7, sp, #0
    17b6:	60f8      	str	r0, [r7, #12]
    17b8:	60b9      	str	r1, [r7, #8]
    17ba:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    17bc:	2300      	movs	r3, #0
    17be:	617b      	str	r3, [r7, #20]
    17c0:	697a      	ldr	r2, [r7, #20]
    17c2:	687b      	ldr	r3, [r7, #4]
    17c4:	429a      	cmp	r2, r3
    17c6:	d216      	bcs.n	17f6 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    17c8:	68ba      	ldr	r2, [r7, #8]
    17ca:	697b      	ldr	r3, [r7, #20]
    17cc:	441a      	add	r2, r3
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	685b      	ldr	r3, [r3, #4]
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	7812      	ldrb	r2, [r2, #0]
    17d6:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    17d8:	68f8      	ldr	r0, [r7, #12]
    17da:	f000 f8b5 	bl	1948 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    17de:	4603      	mov	r3, r0
    17e0:	f083 0301 	eor.w	r3, r3, #1
    17e4:	b2db      	uxtb	r3, r3
    17e6:	2b00      	cmp	r3, #0
    17e8:	d001      	beq.n	17ee <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    17ea:	bf00      	nop
      while (!TransmissionComplete())
    17ec:	e7f4      	b.n	17d8 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	3301      	adds	r3, #1
    17f2:	617b      	str	r3, [r7, #20]
    17f4:	e7e4      	b.n	17c0 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    17f6:	bf00      	nop
    17f8:	3718      	adds	r7, #24
    17fa:	46bd      	mov	sp, r7
    17fc:	bd80      	pop	{r7, pc}

000017fe <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17fe:	b590      	push	{r4, r7, lr}
    1800:	b083      	sub	sp, #12
    1802:	af00      	add	r7, sp, #0
    1804:	6078      	str	r0, [r7, #4]
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    180a:	4618      	mov	r0, r3
    180c:	f000 f88a 	bl	1924 <sjsu::lpc40xx::Uart::HasData() const>
    1810:	4603      	mov	r3, r0
    1812:	2b00      	cmp	r3, #0
    1814:	d010      	beq.n	1838 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    181a:	685b      	ldr	r3, [r3, #4]
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1826:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    182c:	6813      	ldr	r3, [r2, #0]
    182e:	1c58      	adds	r0, r3, #1
    1830:	6010      	str	r0, [r2, #0]
    1832:	440b      	add	r3, r1
    1834:	4622      	mov	r2, r4
    1836:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    183c:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    1842:	429a      	cmp	r2, r3
    1844:	d301      	bcc.n	184a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    1846:	2301      	movs	r3, #1
    1848:	e000      	b.n	184c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    184a:	2300      	movs	r3, #0
    });
    184c:	4618      	mov	r0, r3
    184e:	370c      	adds	r7, #12
    1850:	46bd      	mov	sp, r7
    1852:	bd90      	pop	{r4, r7, pc}

00001854 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    1854:	b590      	push	{r4, r7, lr}
    1856:	b09d      	sub	sp, #116	; 0x74
    1858:	af00      	add	r7, sp, #0
    185a:	6178      	str	r0, [r7, #20]
    185c:	6139      	str	r1, [r7, #16]
    185e:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    1860:	2300      	movs	r3, #0
    1862:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1864:	697b      	ldr	r3, [r7, #20]
    1866:	643b      	str	r3, [r7, #64]	; 0x40
    1868:	f107 0310 	add.w	r3, r7, #16
    186c:	647b      	str	r3, [r7, #68]	; 0x44
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	64bb      	str	r3, [r7, #72]	; 0x48
    1872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    1876:	64fb      	str	r3, [r7, #76]	; 0x4c
    1878:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    187c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    1880:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    1884:	f107 0340 	add.w	r3, r7, #64	; 0x40
    1888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    188a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    188e:	f107 0360 	add.w	r3, r7, #96	; 0x60
    1892:	4618      	mov	r0, r3
    1894:	f000 fdd7 	bl	2446 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    1898:	f107 0260 	add.w	r2, r7, #96	; 0x60
    189c:	f107 0320 	add.w	r3, r7, #32
    18a0:	4611      	mov	r1, r2
    18a2:	4618      	mov	r0, r3
    18a4:	f000 feca 	bl	263c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18a8:	4603      	mov	r3, r0
    18aa:	2b00      	cmp	r3, #0
    18ac:	d004      	beq.n	18b8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    18ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    18b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    18b6:	e011      	b.n	18dc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    18b8:	4b19      	ldr	r3, [pc, #100]	; (1920 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
    18c0:	4610      	mov	r0, r2
    18c2:	4798      	blx	r3
    18c4:	463b      	mov	r3, r7
    18c6:	f107 0220 	add.w	r2, r7, #32
    18ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
    18ce:	4618      	mov	r0, r3
    18d0:	f001 f844 	bl	295c <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18d4:	e9d7 3400 	ldrd	r3, r4, [r7]
    18d8:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    18dc:	2301      	movs	r3, #1
    18de:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    18e0:	4b0f      	ldr	r3, [pc, #60]	; (1920 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    18e2:	681b      	ldr	r3, [r3, #0]
    18e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
    18e8:	4610      	mov	r0, r2
    18ea:	4798      	blx	r3
    18ec:	f107 0218 	add.w	r2, r7, #24
    18f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
    18f4:	4611      	mov	r1, r2
    18f6:	4618      	mov	r0, r3
    18f8:	f001 f85d 	bl	29b6 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18fc:	4603      	mov	r3, r0
    18fe:	2b00      	cmp	r3, #0
    1900:	d009      	beq.n	1916 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    1902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    1906:	4618      	mov	r0, r3
    1908:	f7ff ff79 	bl	17fe <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    190c:	4603      	mov	r3, r0
    190e:	2b00      	cmp	r3, #0
    1910:	d0e6      	beq.n	18e0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    1912:	2300      	movs	r3, #0
    1914:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    1916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    1918:	4618      	mov	r0, r3
    191a:	3774      	adds	r7, #116	; 0x74
    191c:	46bd      	mov	sp, r7
    191e:	bd90      	pop	{r4, r7, pc}
    1920:	10000000 	.word	0x10000000

00001924 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    1924:	b580      	push	{r7, lr}
    1926:	b082      	sub	sp, #8
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	685b      	ldr	r3, [r3, #4]
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	7d1b      	ldrb	r3, [r3, #20]
    1934:	b2db      	uxtb	r3, r3
    1936:	2100      	movs	r1, #0
    1938:	4618      	mov	r0, r3
    193a:	f000 ff40 	bl	27be <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    193e:	4603      	mov	r3, r0
  }
    1940:	4618      	mov	r0, r3
    1942:	3708      	adds	r7, #8
    1944:	46bd      	mov	sp, r7
    1946:	bd80      	pop	{r7, pc}

00001948 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	7d1b      	ldrb	r3, [r3, #20]
    1958:	b2db      	uxtb	r3, r3
    195a:	2105      	movs	r1, #5
    195c:	4618      	mov	r0, r3
    195e:	f000 ff2e 	bl	27be <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1962:	4603      	mov	r3, r0
  }
    1964:	4618      	mov	r0, r3
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}

0000196c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    196c:	b580      	push	{r7, lr}
    196e:	ed2d 8b02 	vpush	{d8}
    1972:	b084      	sub	sp, #16
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	4618      	mov	r0, r3
    197e:	f7ff f9f5 	bl	d6c <units::linear_scale<float>::operator()() const>
    1982:	eeb0 8a40 	vmov.f32	s16, s0
    1986:	683b      	ldr	r3, [r7, #0]
    1988:	4618      	mov	r0, r3
    198a:	f7ff f9ef 	bl	d6c <units::linear_scale<float>::operator()() const>
    198e:	eef0 7a40 	vmov.f32	s15, s0
    1992:	edc7 7a03 	vstr	s15, [r7, #12]
    1996:	f107 030c 	add.w	r3, r7, #12
    199a:	4618      	mov	r0, r3
    199c:	f7fe fed1 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    19a0:	eeb0 7a40 	vmov.f32	s14, s0
    19a4:	eec8 7a07 	vdiv.f32	s15, s16, s14
    19a8:	f107 0308 	add.w	r3, r7, #8
    19ac:	eeb0 0a67 	vmov.f32	s0, s15
    19b0:	4618      	mov	r0, r3
    19b2:	f7ff fa16 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    19b6:	68bb      	ldr	r3, [r7, #8]
	}
    19b8:	4618      	mov	r0, r3
    19ba:	3710      	adds	r7, #16
    19bc:	46bd      	mov	sp, r7
    19be:	ecbd 8b02 	vpop	{d8}
    19c2:	bd80      	pop	{r7, pc}

000019c4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    19cc:	6878      	ldr	r0, [r7, #4]
    19ce:	f000 fec4 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    19d2:	4603      	mov	r3, r0
		}
    19d4:	4618      	mov	r0, r3
    19d6:	3708      	adds	r7, #8
    19d8:	46bd      	mov	sp, r7
    19da:	bd80      	pop	{r7, pc}

000019dc <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    19dc:	b480      	push	{r7}
    19de:	af00      	add	r7, sp, #0
    19e0:	bf00      	nop
    19e2:	46bd      	mov	sp, r7
    19e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19e8:	4770      	bx	lr
    19ea:	Address 0x00000000000019ea is out of bounds.


000019ec <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    19f2:	4b09      	ldr	r3, [pc, #36]	; (1a18 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	9300      	str	r3, [sp, #0]
    19f8:	231d      	movs	r3, #29
    19fa:	4a08      	ldr	r2, [pc, #32]	; (1a1c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    19fc:	4908      	ldr	r1, [pc, #32]	; (1a20 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    19fe:	4809      	ldr	r0, [pc, #36]	; (1a24 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1a00:	f003 fb4c 	bl	509c <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1a06:	681b      	ldr	r3, [r3, #0]
    1a08:	3b10      	subs	r3, #16
    1a0a:	4618      	mov	r0, r3
    1a0c:	f7fe fcd0 	bl	3b0 <NVIC_DisableIRQ>
  }
    1a10:	bf00      	nop
    1a12:	46bd      	mov	sp, r7
    1a14:	bd80      	pop	{r7, pc}
    1a16:	bf00      	nop
    1a18:	10000048 	.word	0x10000048
    1a1c:	00008b70 	.word	0x00008b70
    1a20:	00008a08 	.word	0x00008a08
    1a24:	000085cc 	.word	0x000085cc

00001a28 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1a28:	b480      	push	{r7}
    1a2a:	b083      	sub	sp, #12
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1a30:	2340      	movs	r3, #64	; 0x40
    1a32:	4618      	mov	r0, r3
    1a34:	370c      	adds	r7, #12
    1a36:	46bd      	mov	sp, r7
    1a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a3c:	4770      	bx	lr
    1a3e:	Address 0x0000000000001a3e is out of bounds.


00001a40 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1a40:	b580      	push	{r7, lr}
    1a42:	b084      	sub	sp, #16
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	4618      	mov	r0, r3
    1a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    1a50:	461a      	mov	r2, r3
    1a52:	2100      	movs	r1, #0
    1a54:	f006 faa9 	bl	7faa <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1a58:	2300      	movs	r3, #0
    1a5a:	60fb      	str	r3, [r7, #12]
    1a5c:	68fb      	ldr	r3, [r7, #12]
    1a5e:	2b0f      	cmp	r3, #15
    1a60:	d808      	bhi.n	1a74 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	68fa      	ldr	r2, [r7, #12]
    1a66:	4911      	ldr	r1, [pc, #68]	; (1aac <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	3301      	adds	r3, #1
    1a70:	60fb      	str	r3, [r7, #12]
    1a72:	e7f3      	b.n	1a5c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1a74:	2310      	movs	r3, #16
    1a76:	60bb      	str	r3, [r7, #8]
    1a78:	6878      	ldr	r0, [r7, #4]
    1a7a:	f7ff ffd5 	bl	1a28 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1a7e:	4602      	mov	r2, r0
    1a80:	68bb      	ldr	r3, [r7, #8]
    1a82:	4293      	cmp	r3, r2
    1a84:	bf34      	ite	cc
    1a86:	2301      	movcc	r3, #1
    1a88:	2300      	movcs	r3, #0
    1a8a:	b2db      	uxtb	r3, r3
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d008      	beq.n	1aa2 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	68ba      	ldr	r2, [r7, #8]
    1a94:	4906      	ldr	r1, [pc, #24]	; (1ab0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1a9a:	68bb      	ldr	r3, [r7, #8]
    1a9c:	3301      	adds	r3, #1
    1a9e:	60bb      	str	r3, [r7, #8]
    1aa0:	e7ea      	b.n	1a78 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1aa2:	bf00      	nop
    }
    1aa4:	6878      	ldr	r0, [r7, #4]
    1aa6:	3710      	adds	r7, #16
    1aa8:	46bd      	mov	sp, r7
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	000019dd 	.word	0x000019dd
    1ab0:	000019ed 	.word	0x000019ed

00001ab4 <sjsu::Pwm::Pwm()>:

namespace sjsu
{
/// An abstract interface for hardware that can generate Pulse Width Modulation
/// (PWM) waveforms.
class Pwm
    1ab4:	b480      	push	{r7}
    1ab6:	b083      	sub	sp, #12
    1ab8:	af00      	add	r7, sp, #0
    1aba:	6078      	str	r0, [r7, #4]
    1abc:	4a04      	ldr	r2, [pc, #16]	; (1ad0 <sjsu::Pwm::Pwm()+0x1c>)
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	601a      	str	r2, [r3, #0]
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	4618      	mov	r0, r3
    1ac6:	370c      	adds	r7, #12
    1ac8:	46bd      	mov	sp, r7
    1aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ace:	4770      	bx	lr
    1ad0:	00008ae0 	.word	0x00008ae0

00001ad4 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>:
  ///        instance of the PWM driver.
  /// @param system_controller - Reference to a system controller object. Used
  ///        to power on the peripheral and get the current peripheral
  ///        frequency. Typically only changed from the default for unit testing
  ///        purposes.
  explicit constexpr Pwm(const Channel_t & channel,
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b084      	sub	sp, #16
    1ad8:	af00      	add	r7, sp, #0
    1ada:	60f8      	str	r0, [r7, #12]
    1adc:	60b9      	str	r1, [r7, #8]
    1ade:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1ae0:	68fb      	ldr	r3, [r7, #12]
    1ae2:	4618      	mov	r0, r3
    1ae4:	f7ff ffe6 	bl	1ab4 <sjsu::Pwm::Pwm()>
    1ae8:	4a06      	ldr	r2, [pc, #24]	; (1b04 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	601a      	str	r2, [r3, #0]
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	68ba      	ldr	r2, [r7, #8]
    1af2:	605a      	str	r2, [r3, #4]
    1af4:	68fb      	ldr	r3, [r7, #12]
    1af6:	687a      	ldr	r2, [r7, #4]
    1af8:	609a      	str	r2, [r3, #8]
  {
  }
    1afa:	68fb      	ldr	r3, [r7, #12]
    1afc:	4618      	mov	r0, r3
    1afe:	3710      	adds	r7, #16
    1b00:	46bd      	mov	sp, r7
    1b02:	bd80      	pop	{r7, pc}
    1b04:	00008ac8 	.word	0x00008ac8

00001b08 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  Status Initialize(units::frequency::hertz_t frequency_hz) const override
    1b08:	b590      	push	{r4, r7, lr}
    1b0a:	b085      	sub	sp, #20
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	6078      	str	r0, [r7, #4]
    1b10:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(1 <= channel_.channel && channel_.channel <= 6,
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	685b      	ldr	r3, [r3, #4]
    1b16:	7a1b      	ldrb	r3, [r3, #8]
    1b18:	f003 0307 	and.w	r3, r3, #7
    1b1c:	b2db      	uxtb	r3, r3
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d007      	beq.n	1b32 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x2a>
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	685b      	ldr	r3, [r3, #4]
    1b26:	7a1b      	ldrb	r3, [r3, #8]
    1b28:	f003 0307 	and.w	r3, r3, #7
    1b2c:	b2db      	uxtb	r3, r3
    1b2e:	2b07      	cmp	r3, #7
    1b30:	d10d      	bne.n	1b4e <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x46>
    1b32:	23bb      	movs	r3, #187	; 0xbb
    1b34:	4a5d      	ldr	r2, [pc, #372]	; (1cac <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    1b36:	495e      	ldr	r1, [pc, #376]	; (1cb0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    1b38:	485e      	ldr	r0, [pc, #376]	; (1cb4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    1b3a:	f003 faaf 	bl	509c <printf>
    1b3e:	485e      	ldr	r0, [pc, #376]	; (1cb8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    1b40:	f002 f990 	bl	3e64 <puts>
    1b44:	2100      	movs	r1, #0
    1b46:	2001      	movs	r0, #1
    1b48:	f7fe febe 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1b4c:	e7fe      	b.n	1b4c <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x44>
                     "Channel must be between 1 and 6 on LPC40xx platforms.");

    system_controller_.PowerUpPeripheral(channel_.peripheral.power_on_id);
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	6898      	ldr	r0, [r3, #8]
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	689b      	ldr	r3, [r3, #8]
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	3314      	adds	r3, #20
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	687a      	ldr	r2, [r7, #4]
    1b5e:	6852      	ldr	r2, [r2, #4]
    1b60:	6812      	ldr	r2, [r2, #0]
    1b62:	3204      	adds	r2, #4
    1b64:	4611      	mov	r1, r2
    1b66:	4798      	blx	r3
    // Set prescalar to 1 so the input frequency to the PWM peripheral is equal
    // to the peripheral clock frequency.
    //
    // PR = Prescale register = defines the maximum value for the prescaler
    channel_.peripheral.registers->PR = 0;
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	685b      	ldr	r3, [r3, #4]
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	2200      	movs	r2, #0
    1b72:	60da      	str	r2, [r3, #12]
    // PC = Prescale counter. Set to 0 to cause the timer counter to increment
    // after each peripheral clock tick.
    channel_.peripheral.registers->PC = 0;
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	685b      	ldr	r3, [r3, #4]
    1b78:	681b      	ldr	r3, [r3, #0]
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	2200      	movs	r2, #0
    1b7e:	611a      	str	r2, [r3, #16]
    // Mode 0x0 means increment time counter (TC) after the peripheral clock
    // has cycled the amount inside of the prescale.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kMode);
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	685b      	ldr	r3, [r3, #4]
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	685b      	ldr	r3, [r3, #4]
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	681c      	ldr	r4, [r3, #0]
    1b92:	4b4a      	ldr	r3, [pc, #296]	; (1cbc <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    1b94:	781a      	ldrb	r2, [r3, #0]
    1b96:	785b      	ldrb	r3, [r3, #1]
    1b98:	021b      	lsls	r3, r3, #8
    1b9a:	431a      	orrs	r2, r3
    1b9c:	2300      	movs	r3, #0
    1b9e:	f362 030f 	bfi	r3, r2, #0, #16
    1ba2:	461a      	mov	r2, r3
    1ba4:	2100      	movs	r1, #0
    1ba6:	f000 fe30 	bl	280a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1baa:	4603      	mov	r3, r0
    1bac:	6723      	str	r3, [r4, #112]	; 0x70
    // 0x0 for this register says to use the TC for input counts.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kCountInput);
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	685b      	ldr	r3, [r3, #4]
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	685b      	ldr	r3, [r3, #4]
    1bbc:	681b      	ldr	r3, [r3, #0]
    1bbe:	681c      	ldr	r4, [r3, #0]
    1bc0:	4b3f      	ldr	r3, [pc, #252]	; (1cc0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    1bc2:	781a      	ldrb	r2, [r3, #0]
    1bc4:	785b      	ldrb	r3, [r3, #1]
    1bc6:	021b      	lsls	r3, r3, #8
    1bc8:	431a      	orrs	r2, r3
    1bca:	2300      	movs	r3, #0
    1bcc:	f362 030f 	bfi	r3, r2, #0, #16
    1bd0:	461a      	mov	r2, r3
    1bd2:	2100      	movs	r1, #0
    1bd4:	f000 fe19 	bl	280a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1bd8:	4603      	mov	r3, r0
    1bda:	6723      	str	r3, [r4, #112]	; 0x70
    // Match register 0 is used to generate the desired frequency. If the time
    // counter TC is equal to MR0
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	685b      	ldr	r3, [r3, #4]
    1be4:	681b      	ldr	r3, [r3, #0]
    1be6:	3304      	adds	r3, #4
    1be8:	4619      	mov	r1, r3
    1bea:	4610      	mov	r0, r2
    1bec:	f7fe fdc9 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1bf0:	4603      	mov	r3, r0
    1bf2:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1bf4:	463a      	mov	r2, r7
    1bf6:	f107 0308 	add.w	r3, r7, #8
    1bfa:	4611      	mov	r1, r2
    1bfc:	4618      	mov	r0, r3
    1bfe:	f7ff feb5 	bl	196c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1c02:	4603      	mov	r3, r0
    1c04:	60fb      	str	r3, [r7, #12]
    channel_.peripheral.registers->MR0 =
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	685b      	ldr	r3, [r3, #4]
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1c0e:	f107 030c 	add.w	r3, r7, #12
    1c12:	4618      	mov	r0, r3
    1c14:	f7ff fed6 	bl	19c4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1c18:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1c1a:	61a3      	str	r3, [r4, #24]
    // Sets match register 0 to reset when TC and Match 0 match each other,
    // meaning that the PWM pulse will cycle continuously.
    channel_.peripheral.registers->MCR =
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	685b      	ldr	r3, [r3, #4]
    1c20:	681b      	ldr	r3, [r3, #0]
    1c22:	681b      	ldr	r3, [r3, #0]
    1c24:	6958      	ldr	r0, [r3, #20]
    channel_.peripheral.registers->MCR =
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	685b      	ldr	r3, [r3, #4]
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1c2e:	4b25      	ldr	r3, [pc, #148]	; (1cc4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    1c30:	781a      	ldrb	r2, [r3, #0]
    1c32:	785b      	ldrb	r3, [r3, #1]
    1c34:	021b      	lsls	r3, r3, #8
    1c36:	431a      	orrs	r2, r3
    1c38:	2300      	movs	r3, #0
    1c3a:	f362 030f 	bfi	r3, r2, #0, #16
    1c3e:	4619      	mov	r1, r3
    1c40:	f000 fdd4 	bl	27ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1c44:	4603      	mov	r3, r0
    channel_.peripheral.registers->MCR =
    1c46:	6163      	str	r3, [r4, #20]
    // Enables PWM TC and PC for counting and enables PWM mode
    EnablePwm();
    1c48:	2101      	movs	r1, #1
    1c4a:	6878      	ldr	r0, [r7, #4]
    1c4c:	f000 f946 	bl	1edc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    // Enables PWM[channel] output
    channel_.peripheral.registers->PCR =
        bit::Set(channel_.peripheral.registers->PCR,
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	685b      	ldr	r3, [r3, #4]
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 OutputControl::kEnableOutput.position + channel_.channel);
    1c5a:	2308      	movs	r3, #8
    1c5c:	4619      	mov	r1, r3
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	685b      	ldr	r3, [r3, #4]
    1c62:	7a1b      	ldrb	r3, [r3, #8]
    1c64:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1c68:	b2db      	uxtb	r3, r3
    1c6a:	440b      	add	r3, r1
        bit::Set(channel_.peripheral.registers->PCR,
    1c6c:	4619      	mov	r1, r3
    channel_.peripheral.registers->PCR =
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	685b      	ldr	r3, [r3, #4]
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->PCR,
    1c76:	4610      	mov	r0, r2
    1c78:	f000 fd38 	bl	26ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1c7c:	4603      	mov	r3, r0
    channel_.peripheral.registers->PCR =
    1c7e:	64e3      	str	r3, [r4, #76]	; 0x4c

    channel_.pin.SetPinFunction(channel_.pin_function_id);
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	685b      	ldr	r3, [r3, #4]
    1c84:	6858      	ldr	r0, [r3, #4]
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	685b      	ldr	r3, [r3, #4]
    1c8a:	685b      	ldr	r3, [r3, #4]
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	681b      	ldr	r3, [r3, #0]
    1c90:	687a      	ldr	r2, [r7, #4]
    1c92:	6852      	ldr	r2, [r2, #4]
    1c94:	7a12      	ldrb	r2, [r2, #8]
    1c96:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1c9a:	b2d2      	uxtb	r2, r2
    1c9c:	4611      	mov	r1, r2
    1c9e:	4798      	blx	r3

    return Status::kSuccess;
    1ca0:	2300      	movs	r3, #0
  }
    1ca2:	4618      	mov	r0, r3
    1ca4:	3714      	adds	r7, #20
    1ca6:	46bd      	mov	sp, r7
    1ca8:	bd90      	pop	{r4, r7, pc}
    1caa:	bf00      	nop
    1cac:	00008d94 	.word	0x00008d94
    1cb0:	00008a58 	.word	0x00008a58
    1cb4:	0000864c 	.word	0x0000864c
    1cb8:	00008380 	.word	0x00008380
    1cbc:	00008a28 	.word	0x00008a28
    1cc0:	00008a2c 	.word	0x00008a2c
    1cc4:	00008a18 	.word	0x00008a18

00001cc8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>:

  void SetDutyCycle(float duty_cycle) const override
    1cc8:	b590      	push	{r4, r7, lr}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	ed87 0a00 	vstr	s0, [r7]
  {
    SJ2_ASSERT_FATAL(0.0f <= duty_cycle && duty_cycle <= 1.0f,
    1cd4:	edd7 7a00 	vldr	s15, [r7]
    1cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ce0:	bfac      	ite	ge
    1ce2:	2301      	movge	r3, #1
    1ce4:	2300      	movlt	r3, #0
    1ce6:	b2db      	uxtb	r3, r3
    1ce8:	f083 0301 	eor.w	r3, r3, #1
    1cec:	b2db      	uxtb	r3, r3
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d110      	bne.n	1d14 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x4c>
    1cf2:	edd7 7a00 	vldr	s15, [r7]
    1cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
    1cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d02:	bf94      	ite	ls
    1d04:	2301      	movls	r3, #1
    1d06:	2300      	movhi	r3, #0
    1d08:	b2db      	uxtb	r3, r3
    1d0a:	f083 0301 	eor.w	r3, r3, #1
    1d0e:	b2db      	uxtb	r3, r3
    1d10:	2b00      	cmp	r3, #0
    1d12:	d00d      	beq.n	1d30 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x68>
    1d14:	23e7      	movs	r3, #231	; 0xe7
    1d16:	4a1c      	ldr	r2, [pc, #112]	; (1d88 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc0>)
    1d18:	491c      	ldr	r1, [pc, #112]	; (1d8c <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc4>)
    1d1a:	481d      	ldr	r0, [pc, #116]	; (1d90 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc8>)
    1d1c:	f003 f9be 	bl	509c <printf>
    1d20:	481c      	ldr	r0, [pc, #112]	; (1d94 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xcc>)
    1d22:	f002 f89f 	bl	3e64 <puts>
    1d26:	2100      	movs	r1, #0
    1d28:	2001      	movs	r0, #1
    1d2a:	f7fe fdcd 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1d2e:	e7fe      	b.n	1d2e <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x66>
                     "duty_cycle of Duty Cycle provided is out of bounds.");
    GetMatchRegisters()[channel_.channel] = CalculateDutyCycle(duty_cycle);
    1d30:	ed97 0a00 	vldr	s0, [r7]
    1d34:	6878      	ldr	r0, [r7, #4]
    1d36:	f000 f94a 	bl	1fce <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>
    1d3a:	4604      	mov	r4, r0
    1d3c:	6878      	ldr	r0, [r7, #4]
    1d3e:	f000 f937 	bl	1fb0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1d42:	4602      	mov	r2, r0
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	685b      	ldr	r3, [r3, #4]
    1d48:	7a1b      	ldrb	r3, [r3, #8]
    1d4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d4e:	b2db      	uxtb	r3, r3
    1d50:	009b      	lsls	r3, r3, #2
    1d52:	4413      	add	r3, r2
    1d54:	601c      	str	r4, [r3, #0]
    channel_.peripheral.registers->LER |= (1 << channel_.channel);
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	685b      	ldr	r3, [r3, #4]
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	681b      	ldr	r3, [r3, #0]
    1d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    1d60:	687b      	ldr	r3, [r7, #4]
    1d62:	685b      	ldr	r3, [r3, #4]
    1d64:	7a1b      	ldrb	r3, [r3, #8]
    1d66:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d6a:	b2db      	uxtb	r3, r3
    1d6c:	4619      	mov	r1, r3
    1d6e:	2301      	movs	r3, #1
    1d70:	408b      	lsls	r3, r1
    1d72:	4619      	mov	r1, r3
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	685b      	ldr	r3, [r3, #4]
    1d78:	681b      	ldr	r3, [r3, #0]
    1d7a:	681b      	ldr	r3, [r3, #0]
    1d7c:	430a      	orrs	r2, r1
    1d7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
    1d80:	bf00      	nop
    1d82:	370c      	adds	r7, #12
    1d84:	46bd      	mov	sp, r7
    1d86:	bd90      	pop	{r4, r7, pc}
    1d88:	00008d58 	.word	0x00008d58
    1d8c:	00008a60 	.word	0x00008a60
    1d90:	00008720 	.word	0x00008720
    1d94:	00008380 	.word	0x00008380

00001d98 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>:

  float GetDutyCycle() const override
    1d98:	b580      	push	{r7, lr}
    1d9a:	ed2d 8b02 	vpush	{d8}
    1d9e:	b082      	sub	sp, #8
    1da0:	af00      	add	r7, sp, #0
    1da2:	6078      	str	r0, [r7, #4]
  {
    return (static_cast<float>(GetMatchRegisters()[channel_.channel]) /
    1da4:	6878      	ldr	r0, [r7, #4]
    1da6:	f000 f903 	bl	1fb0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1daa:	4602      	mov	r2, r0
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	685b      	ldr	r3, [r3, #4]
    1db0:	7a1b      	ldrb	r3, [r3, #8]
    1db2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1db6:	b2db      	uxtb	r3, r3
    1db8:	009b      	lsls	r3, r3, #2
    1dba:	4413      	add	r3, r2
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	ee07 3a90 	vmov	s15, r3
    1dc2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
            static_cast<float>(GetMatchRegisters()[0]));
    1dc6:	6878      	ldr	r0, [r7, #4]
    1dc8:	f000 f8f2 	bl	1fb0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1dcc:	4603      	mov	r3, r0
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	ee07 3a90 	vmov	s15, r3
    1dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1dd8:	ee88 7a27 	vdiv.f32	s14, s16, s15
    1ddc:	eef0 7a47 	vmov.f32	s15, s14
  }
    1de0:	eeb0 0a67 	vmov.f32	s0, s15
    1de4:	3708      	adds	r7, #8
    1de6:	46bd      	mov	sp, r7
    1de8:	ecbd 8b02 	vpop	{d8}
    1dec:	bd80      	pop	{r7, pc}

00001dee <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    1dee:	b580      	push	{r7, lr}
    1df0:	b082      	sub	sp, #8
    1df2:	af00      	add	r7, sp, #0
    1df4:	6078      	str	r0, [r7, #4]
    1df6:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    1df8:	6839      	ldr	r1, [r7, #0]
    1dfa:	6878      	ldr	r0, [r7, #4]
    1dfc:	f7fe fc4a 	bl	694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1e00:	4603      	mov	r3, r0
    1e02:	f083 0301 	eor.w	r3, r3, #1
    1e06:	b2db      	uxtb	r3, r3
		}
    1e08:	4618      	mov	r0, r3
    1e0a:	3708      	adds	r7, #8
    1e0c:	46bd      	mov	sp, r7
    1e0e:	bd80      	pop	{r7, pc}

00001e10 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetFrequency(units::frequency::hertz_t frequency_hz) const override
    1e10:	b590      	push	{r4, r7, lr}
    1e12:	b087      	sub	sp, #28
    1e14:	af00      	add	r7, sp, #0
    1e16:	6078      	str	r0, [r7, #4]
    1e18:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(frequency_hz != 0_Hz, "Pwm Frequency cannot be zero Hz.");
    1e1a:	f04f 0000 	mov.w	r0, #0
    1e1e:	f04f 0100 	mov.w	r1, #0
    1e22:	f7fe fbb9 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    1e26:	4603      	mov	r3, r0
    1e28:	60fb      	str	r3, [r7, #12]
    1e2a:	f107 020c 	add.w	r2, r7, #12
    1e2e:	463b      	mov	r3, r7
    1e30:	4611      	mov	r1, r2
    1e32:	4618      	mov	r0, r3
    1e34:	f7ff ffdb 	bl	1dee <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1e38:	4603      	mov	r3, r0
    1e3a:	f083 0301 	eor.w	r3, r3, #1
    1e3e:	b2db      	uxtb	r3, r3
    1e40:	2b00      	cmp	r3, #0
    1e42:	d00d      	beq.n	1e60 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x50>
    1e44:	23f4      	movs	r3, #244	; 0xf4
    1e46:	4a21      	ldr	r2, [pc, #132]	; (1ecc <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xbc>)
    1e48:	4921      	ldr	r1, [pc, #132]	; (1ed0 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    1e4a:	4822      	ldr	r0, [pc, #136]	; (1ed4 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1e4c:	f003 f926 	bl	509c <printf>
    1e50:	4821      	ldr	r0, [pc, #132]	; (1ed8 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc8>)
    1e52:	f002 f807 	bl	3e64 <puts>
    1e56:	2100      	movs	r1, #0
    1e58:	2001      	movs	r0, #1
    1e5a:	f7fe fd35 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1e5e:	e7fe      	b.n	1e5e <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x4e>
    // Disables PWM mode; this will reset all counters to 0
    // And allow us to update MR0
    float previous_duty_cycle = GetDutyCycle();
    1e60:	6878      	ldr	r0, [r7, #4]
    1e62:	f7ff ff99 	bl	1d98 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    1e66:	ed87 0a05 	vstr	s0, [r7, #20]
    EnablePwm(false);
    1e6a:	2100      	movs	r1, #0
    1e6c:	6878      	ldr	r0, [r7, #4]
    1e6e:	f000 f835 	bl	1edc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	685b      	ldr	r3, [r3, #4]
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	3304      	adds	r3, #4
    1e7e:	4619      	mov	r1, r3
    1e80:	4610      	mov	r0, r2
    1e82:	f7fe fc7e 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1e86:	4603      	mov	r3, r0
    1e88:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1e8a:	463a      	mov	r2, r7
    1e8c:	f107 0308 	add.w	r3, r7, #8
    1e90:	4611      	mov	r1, r2
    1e92:	4618      	mov	r0, r3
    1e94:	f7ff fd6a 	bl	196c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1e98:	4603      	mov	r3, r0
    1e9a:	613b      	str	r3, [r7, #16]
    channel_.peripheral.registers->MR0 =
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	685b      	ldr	r3, [r3, #4]
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1ea4:	f107 0310 	add.w	r3, r7, #16
    1ea8:	4618      	mov	r0, r3
    1eaa:	f7ff fd8b 	bl	19c4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1eae:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1eb0:	61a3      	str	r3, [r4, #24]
    SetDutyCycle(previous_duty_cycle);
    1eb2:	ed97 0a05 	vldr	s0, [r7, #20]
    1eb6:	6878      	ldr	r0, [r7, #4]
    1eb8:	f7ff ff06 	bl	1cc8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    EnablePwm();
    1ebc:	2101      	movs	r1, #1
    1ebe:	6878      	ldr	r0, [r7, #4]
    1ec0:	f000 f80c 	bl	1edc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
  }
    1ec4:	bf00      	nop
    1ec6:	371c      	adds	r7, #28
    1ec8:	46bd      	mov	sp, r7
    1eca:	bd90      	pop	{r4, r7, pc}
    1ecc:	00008d08 	.word	0x00008d08
    1ed0:	00008a68 	.word	0x00008a68
    1ed4:	000087ec 	.word	0x000087ec
    1ed8:	00008380 	.word	0x00008380

00001edc <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>:
    return result;
  }
  /// Helper method for enabling and disabling this PWM channel.
  /// @param enable - default to true, if set to false, will disable this PWM
  ///        channel.
  void EnablePwm(bool enable = true) const
    1edc:	b580      	push	{r7, lr}
    1ede:	b084      	sub	sp, #16
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	460b      	mov	r3, r1
    1ee6:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pwm_timer = &channel_.peripheral.registers->TCR;
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	685b      	ldr	r3, [r3, #4]
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	3304      	adds	r3, #4
    1ef2:	60fb      	str	r3, [r7, #12]
    if (enable)
    1ef4:	78fb      	ldrb	r3, [r7, #3]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d040      	beq.n	1f7c <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xa0>
    {
      // Reset the Timer Counter
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterReset);
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	6818      	ldr	r0, [r3, #0]
    1efe:	4b29      	ldr	r3, [pc, #164]	; (1fa4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    1f00:	781a      	ldrb	r2, [r3, #0]
    1f02:	785b      	ldrb	r3, [r3, #1]
    1f04:	021b      	lsls	r3, r3, #8
    1f06:	431a      	orrs	r2, r3
    1f08:	2300      	movs	r3, #0
    1f0a:	f362 030f 	bfi	r3, r2, #0, #16
    1f0e:	4619      	mov	r1, r3
    1f10:	f000 fc6c 	bl	27ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f14:	4602      	mov	r2, r0
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	601a      	str	r2, [r3, #0]
      // Clear reset and allow timer to count
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kCounterReset);
    1f1a:	68fb      	ldr	r3, [r7, #12]
    1f1c:	6818      	ldr	r0, [r3, #0]
    1f1e:	4b21      	ldr	r3, [pc, #132]	; (1fa4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    1f20:	781a      	ldrb	r2, [r3, #0]
    1f22:	785b      	ldrb	r3, [r3, #1]
    1f24:	021b      	lsls	r3, r3, #8
    1f26:	431a      	orrs	r2, r3
    1f28:	2300      	movs	r3, #0
    1f2a:	f362 030f 	bfi	r3, r2, #0, #16
    1f2e:	4619      	mov	r1, r3
    1f30:	f000 fc7d 	bl	282e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f34:	4602      	mov	r2, r0
    1f36:	68fb      	ldr	r3, [r7, #12]
    1f38:	601a      	str	r2, [r3, #0]
      // Enable PWM output
      *pwm_timer = bit::Set(*pwm_timer, Timer::kPwmEnable);
    1f3a:	68fb      	ldr	r3, [r7, #12]
    1f3c:	6818      	ldr	r0, [r3, #0]
    1f3e:	4b1a      	ldr	r3, [pc, #104]	; (1fa8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    1f40:	781a      	ldrb	r2, [r3, #0]
    1f42:	785b      	ldrb	r3, [r3, #1]
    1f44:	021b      	lsls	r3, r3, #8
    1f46:	431a      	orrs	r2, r3
    1f48:	2300      	movs	r3, #0
    1f4a:	f362 030f 	bfi	r3, r2, #0, #16
    1f4e:	4619      	mov	r1, r3
    1f50:	f000 fc4c 	bl	27ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f54:	4602      	mov	r2, r0
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	601a      	str	r2, [r3, #0]
      // Enable counting
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterEnable);
    1f5a:	68fb      	ldr	r3, [r7, #12]
    1f5c:	6818      	ldr	r0, [r3, #0]
    1f5e:	4b13      	ldr	r3, [pc, #76]	; (1fac <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xd0>)
    1f60:	781a      	ldrb	r2, [r3, #0]
    1f62:	785b      	ldrb	r3, [r3, #1]
    1f64:	021b      	lsls	r3, r3, #8
    1f66:	431a      	orrs	r2, r3
    1f68:	2300      	movs	r3, #0
    1f6a:	f362 030f 	bfi	r3, r2, #0, #16
    1f6e:	4619      	mov	r1, r3
    1f70:	f000 fc3c 	bl	27ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f74:	4602      	mov	r2, r0
    1f76:	68fb      	ldr	r3, [r7, #12]
    1f78:	601a      	str	r2, [r3, #0]
    else
    {
      // Disable PWM output
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    }
  }
    1f7a:	e00f      	b.n	1f9c <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc0>
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    1f7c:	68fb      	ldr	r3, [r7, #12]
    1f7e:	6818      	ldr	r0, [r3, #0]
    1f80:	4b09      	ldr	r3, [pc, #36]	; (1fa8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    1f82:	781a      	ldrb	r2, [r3, #0]
    1f84:	785b      	ldrb	r3, [r3, #1]
    1f86:	021b      	lsls	r3, r3, #8
    1f88:	431a      	orrs	r2, r3
    1f8a:	2300      	movs	r3, #0
    1f8c:	f362 030f 	bfi	r3, r2, #0, #16
    1f90:	4619      	mov	r1, r3
    1f92:	f000 fc4c 	bl	282e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1f96:	4602      	mov	r2, r0
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	601a      	str	r2, [r3, #0]
  }
    1f9c:	bf00      	nop
    1f9e:	3710      	adds	r7, #16
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	00008a20 	.word	0x00008a20
    1fa8:	00008a24 	.word	0x00008a24
    1fac:	00008a1c 	.word	0x00008a1c

00001fb0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>:
  /// Helper method to make getting a pointer to the Match Register 0 more
  /// readable in the code.
  ///
  /// @return a pointer to the match 0 register.
  volatile uint32_t * GetMatchRegisters() const
    1fb0:	b480      	push	{r7}
    1fb2:	b083      	sub	sp, #12
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	6078      	str	r0, [r7, #4]
  {
    return &channel_.peripheral.registers->MR0;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	681b      	ldr	r3, [r3, #0]
    1fc0:	3318      	adds	r3, #24
  }
    1fc2:	4618      	mov	r0, r3
    1fc4:	370c      	adds	r7, #12
    1fc6:	46bd      	mov	sp, r7
    1fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fcc:	4770      	bx	lr

00001fce <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>:
  ///
  /// @param duty_cycle_percent - value from 0.0f to 1.0f indicating the duty
  ///        cycle precent.
  /// @return the nearest approximate match register value to achieve the
  ///         supplied duty cycle.
  uint32_t CalculateDutyCycle(float duty_cycle_percent) const
    1fce:	b580      	push	{r7, lr}
    1fd0:	b084      	sub	sp, #16
    1fd2:	af00      	add	r7, sp, #0
    1fd4:	6078      	str	r0, [r7, #4]
    1fd6:	ed87 0a00 	vstr	s0, [r7]
  {
    float pwm_period = static_cast<float>(GetMatchRegisters()[0]);
    1fda:	6878      	ldr	r0, [r7, #4]
    1fdc:	f7ff ffe8 	bl	1fb0 <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1fe0:	4603      	mov	r3, r0
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	ee07 3a90 	vmov	s15, r3
    1fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1fec:	edc7 7a03 	vstr	s15, [r7, #12]
    return static_cast<uint32_t>(duty_cycle_percent * pwm_period);
    1ff0:	ed97 7a00 	vldr	s14, [r7]
    1ff4:	edd7 7a03 	vldr	s15, [r7, #12]
    1ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
    1ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2000:	ee17 3a90 	vmov	r3, s15
  }
    2004:	4618      	mov	r0, r3
    2006:	3710      	adds	r7, #16
    2008:	46bd      	mov	sp, r7
    200a:	bd80      	pop	{r7, pc}

0000200c <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
        min_angle_(kDefaultMinAngle),
        max_angle_(kDefaultMaxAngle)
  {
  }

  virtual void Initialize(
    200c:	b580      	push	{r7, lr}
    200e:	b082      	sub	sp, #8
    2010:	af00      	add	r7, sp, #0
    2012:	6078      	str	r0, [r7, #4]
    2014:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.Initialize(frequency);
    2016:	687b      	ldr	r3, [r7, #4]
    2018:	685a      	ldr	r2, [r3, #4]
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	685b      	ldr	r3, [r3, #4]
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	6839      	ldr	r1, [r7, #0]
    2024:	4610      	mov	r0, r2
    2026:	4798      	blx	r3
    SetFrequency(frequency);
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	3304      	adds	r3, #4
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	6839      	ldr	r1, [r7, #0]
    2032:	6878      	ldr	r0, [r7, #4]
    2034:	4798      	blx	r3
  }
    2036:	bf00      	nop
    2038:	3708      	adds	r7, #8
    203a:	46bd      	mov	sp, r7
    203c:	bd80      	pop	{r7, pc}

0000203e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    203e:	b580      	push	{r7, lr}
    2040:	b086      	sub	sp, #24
    2042:	af00      	add	r7, sp, #0
    2044:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2046:	6878      	ldr	r0, [r7, #4]
    2048:	f000 fc00 	bl	284c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    204c:	eef0 7a40 	vmov.f32	s15, s0
	}
    2050:	eeb0 0a67 	vmov.f32	s0, s15
    2054:	3718      	adds	r7, #24
    2056:	46bd      	mov	sp, r7
    2058:	bd80      	pop	{r7, pc}

0000205a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    205a:	b580      	push	{r7, lr}
    205c:	ed2d 8b02 	vpush	{d8}
    2060:	b084      	sub	sp, #16
    2062:	af00      	add	r7, sp, #0
    2064:	6078      	str	r0, [r7, #4]
    2066:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	4618      	mov	r0, r3
    206c:	f7fe fe7e 	bl	d6c <units::linear_scale<float>::operator()() const>
    2070:	eeb0 8a40 	vmov.f32	s16, s0
    2074:	683b      	ldr	r3, [r7, #0]
    2076:	4618      	mov	r0, r3
    2078:	f7fe fe78 	bl	d6c <units::linear_scale<float>::operator()() const>
    207c:	eef0 7a40 	vmov.f32	s15, s0
    2080:	edc7 7a03 	vstr	s15, [r7, #12]
    2084:	f107 030c 	add.w	r3, r7, #12
    2088:	4618      	mov	r0, r3
    208a:	f7ff ffd8 	bl	203e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    208e:	eeb0 7a40 	vmov.f32	s14, s0
    2092:	eec8 7a07 	vdiv.f32	s15, s16, s14
    2096:	f107 0308 	add.w	r3, r7, #8
    209a:	eeb0 0a67 	vmov.f32	s0, s15
    209e:	4618      	mov	r0, r3
    20a0:	f7fe fe9f 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    20a4:	68bb      	ldr	r3, [r7, #8]
	}
    20a6:	4618      	mov	r0, r3
    20a8:	3710      	adds	r7, #16
    20aa:	46bd      	mov	sp, r7
    20ac:	ecbd 8b02 	vpop	{d8}
    20b0:	bd80      	pop	{r7, pc}

000020b2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    20b2:	b490      	push	{r4, r7}
    20b4:	b082      	sub	sp, #8
    20b6:	af00      	add	r7, sp, #0
    20b8:	6078      	str	r0, [r7, #4]
    20ba:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    20bc:	683b      	ldr	r3, [r7, #0]
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	f04f 0400 	mov.w	r4, #0
    20c4:	687a      	ldr	r2, [r7, #4]
    20c6:	e9c2 3400 	strd	r3, r4, [r2]
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	4618      	mov	r0, r3
    20ce:	3708      	adds	r7, #8
    20d0:	46bd      	mov	sp, r7
    20d2:	bc90      	pop	{r4, r7}
    20d4:	4770      	bx	lr

000020d6 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void SetFrequency(
    20d6:	b590      	push	{r4, r7, lr}
    20d8:	b089      	sub	sp, #36	; 0x24
    20da:	af00      	add	r7, sp, #0
    20dc:	6078      	str	r0, [r7, #4]
    20de:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.SetFrequency(frequency);
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	685a      	ldr	r2, [r3, #4]
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	685b      	ldr	r3, [r3, #4]
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	330c      	adds	r3, #12
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	6839      	ldr	r1, [r7, #0]
    20f0:	4610      	mov	r0, r2
    20f2:	4798      	blx	r3
    waveform_period_ =
        std::chrono::microseconds((1_MHz / frequency).to<uint32_t>());
    20f4:	f04f 0001 	mov.w	r0, #1
    20f8:	f04f 0100 	mov.w	r1, #0
    20fc:	f7fe fa62 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
    2100:	4603      	mov	r3, r0
    2102:	61fb      	str	r3, [r7, #28]
    2104:	463a      	mov	r2, r7
    2106:	f107 031c 	add.w	r3, r7, #28
    210a:	4611      	mov	r1, r2
    210c:	4618      	mov	r0, r3
    210e:	f7ff ffa4 	bl	205a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    2112:	4603      	mov	r3, r0
    2114:	61bb      	str	r3, [r7, #24]
    2116:	f107 0318 	add.w	r3, r7, #24
    211a:	4618      	mov	r0, r3
    211c:	f7ff fc52 	bl	19c4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    2120:	4603      	mov	r3, r0
    2122:	617b      	str	r3, [r7, #20]
    2124:	f107 0214 	add.w	r2, r7, #20
    2128:	f107 0308 	add.w	r3, r7, #8
    212c:	4611      	mov	r1, r2
    212e:	4618      	mov	r0, r3
    2130:	f7ff ffbf 	bl	20b2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    waveform_period_ =
    2134:	687a      	ldr	r2, [r7, #4]
    2136:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    213a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  }
    213e:	bf00      	nop
    2140:	3724      	adds	r7, #36	; 0x24
    2142:	46bd      	mov	sp, r7
    2144:	bd90      	pop	{r4, r7, pc}

00002146 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  // Sets the minimum and maximum pulse width lengths that the class will
  // use to clamp its pulse width output when using SetAngle.
  virtual void SetPulseBounds(std::chrono::microseconds lower,
    2146:	b490      	push	{r4, r7}
    2148:	b084      	sub	sp, #16
    214a:	af00      	add	r7, sp, #0
    214c:	60f8      	str	r0, [r7, #12]
    214e:	e9c7 2300 	strd	r2, r3, [r7]
                              std::chrono::microseconds upper)
  {
    pulse_lower_bound_ = lower;
    2152:	68fa      	ldr	r2, [r7, #12]
    2154:	e9d7 3400 	ldrd	r3, r4, [r7]
    2158:	e9c2 3404 	strd	r3, r4, [r2, #16]
    pulse_upper_bound_ = upper;
    215c:	68fa      	ldr	r2, [r7, #12]
    215e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2162:	e9c2 3406 	strd	r3, r4, [r2, #24]
  }
    2166:	bf00      	nop
    2168:	3710      	adds	r7, #16
    216a:	46bd      	mov	sp, r7
    216c:	bc90      	pop	{r4, r7}
    216e:	4770      	bx	lr

00002170 <sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Sets your angle bounds that maps angles to microseconds when
  // using SetAngle
  virtual void SetAngleBounds(units::angle::degree_t min_angle,
    2170:	b480      	push	{r7}
    2172:	b085      	sub	sp, #20
    2174:	af00      	add	r7, sp, #0
    2176:	60f8      	str	r0, [r7, #12]
    2178:	60b9      	str	r1, [r7, #8]
    217a:	607a      	str	r2, [r7, #4]
                              units::angle::degree_t max_angle)
  {
    min_angle_ = min_angle;
    217c:	68fb      	ldr	r3, [r7, #12]
    217e:	68ba      	ldr	r2, [r7, #8]
    2180:	621a      	str	r2, [r3, #32]
    max_angle_ = max_angle;
    2182:	68fb      	ldr	r3, [r7, #12]
    2184:	687a      	ldr	r2, [r7, #4]
    2186:	625a      	str	r2, [r3, #36]	; 0x24
  }
    2188:	bf00      	nop
    218a:	3714      	adds	r7, #20
    218c:	46bd      	mov	sp, r7
    218e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2192:	4770      	bx	lr

00002194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    2194:	b490      	push	{r4, r7}
    2196:	b082      	sub	sp, #8
    2198:	af00      	add	r7, sp, #0
    219a:	6078      	str	r0, [r7, #4]
	{ return __r; }
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	e9d3 3400 	ldrd	r3, r4, [r3]
    21a2:	4618      	mov	r0, r3
    21a4:	4621      	mov	r1, r4
    21a6:	3708      	adds	r7, #8
    21a8:	46bd      	mov	sp, r7
    21aa:	bc90      	pop	{r4, r7}
    21ac:	4770      	bx	lr

000021ae <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  virtual void SetPulseWidthInMicroseconds(
    21ae:	b5b0      	push	{r4, r5, r7, lr}
    21b0:	ed2d 8b02 	vpush	{d8}
    21b4:	b084      	sub	sp, #16
    21b6:	af00      	add	r7, sp, #0
    21b8:	60f8      	str	r0, [r7, #12]
    21ba:	e9c7 2300 	strd	r2, r3, [r7]
      std::chrono::microseconds pulse_width)
  {
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    21be:	68fb      	ldr	r3, [r7, #12]
    21c0:	685d      	ldr	r5, [r3, #4]
    21c2:	68fb      	ldr	r3, [r7, #12]
    21c4:	685b      	ldr	r3, [r3, #4]
                            static_cast<float>(waveform_period_.count()));
    21c6:	681b      	ldr	r3, [r3, #0]
    21c8:	3304      	adds	r3, #4
    21ca:	681c      	ldr	r4, [r3, #0]
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    21cc:	463b      	mov	r3, r7
    21ce:	4618      	mov	r0, r3
    21d0:	f7ff ffe0 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    21d4:	4602      	mov	r2, r0
    21d6:	460b      	mov	r3, r1
    21d8:	4610      	mov	r0, r2
    21da:	4619      	mov	r1, r3
    21dc:	f004 fd5a 	bl	6c94 <__aeabi_l2f>
    21e0:	ee08 0a10 	vmov	s16, r0
                            static_cast<float>(waveform_period_.count()));
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	3308      	adds	r3, #8
    21e8:	4618      	mov	r0, r3
    21ea:	f7ff ffd3 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    21ee:	4602      	mov	r2, r0
    21f0:	460b      	mov	r3, r1
    21f2:	4610      	mov	r0, r2
    21f4:	4619      	mov	r1, r3
    21f6:	f004 fd4d 	bl	6c94 <__aeabi_l2f>
    21fa:	ee07 0a10 	vmov	s14, r0
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    21fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
    2202:	eeb0 0a67 	vmov.f32	s0, s15
    2206:	4628      	mov	r0, r5
    2208:	47a0      	blx	r4
  }
    220a:	bf00      	nop
    220c:	3710      	adds	r7, #16
    220e:	46bd      	mov	sp, r7
    2210:	ecbd 8b02 	vpop	{d8}
    2214:	bdb0      	pop	{r4, r5, r7, pc}

00002216 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>:
		inline constexpr Ty to() const noexcept
    2216:	b580      	push	{r7, lr}
    2218:	b082      	sub	sp, #8
    221a:	af00      	add	r7, sp, #0
    221c:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    221e:	6878      	ldr	r0, [r7, #4]
    2220:	f000 f807 	bl	2232 <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    2224:	eef0 7a40 	vmov.f32	s15, s0
		}
    2228:	eeb0 0a67 	vmov.f32	s0, s15
    222c:	3708      	adds	r7, #8
    222e:	46bd      	mov	sp, r7
    2230:	bd80      	pop	{r7, pc}

00002232 <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    2232:	b580      	push	{r7, lr}
    2234:	b082      	sub	sp, #8
    2236:	af00      	add	r7, sp, #0
    2238:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	4618      	mov	r0, r3
    223e:	f7fe fd95 	bl	d6c <units::linear_scale<float>::operator()() const>
    2242:	eef0 7a40 	vmov.f32	s15, s0
		}
    2246:	eeb0 0a67 	vmov.f32	s0, s15
    224a:	3708      	adds	r7, #8
    224c:	46bd      	mov	sp, r7
    224e:	bd80      	pop	{r7, pc}

00002250 <sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Should only be used after pulse bounds and angle bounds have been set.
  virtual void SetAngle(units::angle::degree_t angle)
    2250:	b5b0      	push	{r4, r5, r7, lr}
    2252:	ed2d 8b04 	vpush	{d8-d9}
    2256:	b086      	sub	sp, #24
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
    225c:	6039      	str	r1, [r7, #0]
  {
    float pulse_width = Map(angle.to<float>(),
    225e:	463b      	mov	r3, r7
    2260:	4618      	mov	r0, r3
    2262:	f7ff ffd8 	bl	2216 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2266:	eeb0 8a40 	vmov.f32	s16, s0
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	3320      	adds	r3, #32
    226e:	4618      	mov	r0, r3
    2270:	f7ff ffd1 	bl	2216 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2274:	eef0 8a40 	vmov.f32	s17, s0
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	3324      	adds	r3, #36	; 0x24
    227c:	4618      	mov	r0, r3
    227e:	f7ff ffca 	bl	2216 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2282:	eeb0 9a40 	vmov.f32	s18, s0
                            min_angle_.to<float>(),
                            max_angle_.to<float>(),
                            static_cast<float>(pulse_lower_bound_.count()),
    2286:	687b      	ldr	r3, [r7, #4]
    2288:	3310      	adds	r3, #16
    228a:	4618      	mov	r0, r3
    228c:	f7ff ff82 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2290:	4603      	mov	r3, r0
    2292:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    2294:	4618      	mov	r0, r3
    2296:	4621      	mov	r1, r4
    2298:	f004 fcfc 	bl	6c94 <__aeabi_l2f>
    229c:	4605      	mov	r5, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	3318      	adds	r3, #24
    22a2:	4618      	mov	r0, r3
    22a4:	f7ff ff76 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    22a8:	4603      	mov	r3, r0
    22aa:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    22ac:	4618      	mov	r0, r3
    22ae:	4621      	mov	r1, r4
    22b0:	f004 fcf0 	bl	6c94 <__aeabi_l2f>
    22b4:	4603      	mov	r3, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    22b6:	ee02 3a10 	vmov	s4, r3
    22ba:	ee01 5a90 	vmov	s3, r5
    22be:	eeb0 1a49 	vmov.f32	s2, s18
    22c2:	eef0 0a68 	vmov.f32	s1, s17
    22c6:	eeb0 0a48 	vmov.f32	s0, s16
    22ca:	f000 fad9 	bl	2880 <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    22ce:	ed87 0a05 	vstr	s0, [r7, #20]
    SetPulseWidthInMicroseconds(
        std::chrono::microseconds(static_cast<uint32_t>(pulse_width)));
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	3310      	adds	r3, #16
    22d8:	681c      	ldr	r4, [r3, #0]
    22da:	edd7 7a05 	vldr	s15, [r7, #20]
    22de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    22e2:	ee17 3a90 	vmov	r3, s15
    22e6:	613b      	str	r3, [r7, #16]
    SetPulseWidthInMicroseconds(
    22e8:	f107 0210 	add.w	r2, r7, #16
    22ec:	f107 0308 	add.w	r3, r7, #8
    22f0:	4611      	mov	r1, r2
    22f2:	4618      	mov	r0, r3
    22f4:	f7ff fedd 	bl	20b2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    22f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    22fc:	6878      	ldr	r0, [r7, #4]
    22fe:	47a0      	blx	r4
  }
    2300:	bf00      	nop
    2302:	3718      	adds	r7, #24
    2304:	46bd      	mov	sp, r7
    2306:	ecbd 8b04 	vpop	{d8-d9}
    230a:	bdb0      	pop	{r4, r5, r7, pc}

0000230c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    230c:	b490      	push	{r4, r7}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
    2312:	6078      	str	r0, [r7, #4]
    2314:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    2316:	683b      	ldr	r3, [r7, #0]
    2318:	681b      	ldr	r3, [r3, #0]
    231a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    231e:	687a      	ldr	r2, [r7, #4]
    2320:	e9c2 3400 	strd	r3, r4, [r2]
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	4618      	mov	r0, r3
    2328:	3708      	adds	r7, #8
    232a:	46bd      	mov	sp, r7
    232c:	bc90      	pop	{r4, r7}
    232e:	4770      	bx	lr

00002330 <main>:

sjsu::Servo linear_actuator1(p2_0);
sjsu::Servo linear_actuator2(p2_1);

int main()
{
    2330:	b590      	push	{r4, r7, lr}
    2332:	b085      	sub	sp, #20
    2334:	af02      	add	r7, sp, #8
  uart2.Initialize(38400);
    2336:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    233a:	482c      	ldr	r0, [pc, #176]	; (23ec <main+0xbc>)
    233c:	f7ff f992 	bl	1664 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    2340:	2335      	movs	r3, #53	; 0x35
    2342:	4a2b      	ldr	r2, [pc, #172]	; (23f0 <main+0xc0>)
    2344:	492b      	ldr	r1, [pc, #172]	; (23f4 <main+0xc4>)
    2346:	482c      	ldr	r0, [pc, #176]	; (23f8 <main+0xc8>)
    2348:	f002 fea8 	bl	509c <printf>

  linear_actuator1.Initialize();
    234c:	4b2b      	ldr	r3, [pc, #172]	; (23fc <main+0xcc>)
    234e:	6819      	ldr	r1, [r3, #0]
    2350:	482b      	ldr	r0, [pc, #172]	; (2400 <main+0xd0>)
    2352:	f7ff fe5b 	bl	200c <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator1.SetFrequency(motor_controller_freq);
    2356:	4b2b      	ldr	r3, [pc, #172]	; (2404 <main+0xd4>)
    2358:	6819      	ldr	r1, [r3, #0]
    235a:	4829      	ldr	r0, [pc, #164]	; (2400 <main+0xd0>)
    235c:	f7ff febb 	bl	20d6 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator1.SetPulseBounds(motor_controller_min_pulse, 
    2360:	4a29      	ldr	r2, [pc, #164]	; (2408 <main+0xd8>)
    2362:	4b2a      	ldr	r3, [pc, #168]	; (240c <main+0xdc>)
    2364:	e9d3 3400 	ldrd	r3, r4, [r3]
    2368:	e9cd 3400 	strd	r3, r4, [sp]
    236c:	e9d2 2300 	ldrd	r2, r3, [r2]
    2370:	4823      	ldr	r0, [pc, #140]	; (2400 <main+0xd0>)
    2372:	f7ff fee8 	bl	2146 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
                                 motor_controller_max_pulse);

  linear_actuator2.Initialize();
    2376:	4b21      	ldr	r3, [pc, #132]	; (23fc <main+0xcc>)
    2378:	6819      	ldr	r1, [r3, #0]
    237a:	4825      	ldr	r0, [pc, #148]	; (2410 <main+0xe0>)
    237c:	f7ff fe46 	bl	200c <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator2.SetFrequency(motor_controller_freq);
    2380:	4b20      	ldr	r3, [pc, #128]	; (2404 <main+0xd4>)
    2382:	6819      	ldr	r1, [r3, #0]
    2384:	4822      	ldr	r0, [pc, #136]	; (2410 <main+0xe0>)
    2386:	f7ff fea6 	bl	20d6 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator2.SetPulseBounds(motor_controller_min_pulse, 
    238a:	4a1f      	ldr	r2, [pc, #124]	; (2408 <main+0xd8>)
    238c:	4b1f      	ldr	r3, [pc, #124]	; (240c <main+0xdc>)
    238e:	e9d3 3400 	ldrd	r3, r4, [r3]
    2392:	e9cd 3400 	strd	r3, r4, [sp]
    2396:	e9d2 2300 	ldrd	r2, r3, [r2]
    239a:	481d      	ldr	r0, [pc, #116]	; (2410 <main+0xe0>)
    239c:	f7ff fed3 	bl	2146 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
                                 motor_controller_max_pulse);
  LOG_INFO("Motor controller initialized");
    23a0:	2340      	movs	r3, #64	; 0x40
    23a2:	4a13      	ldr	r2, [pc, #76]	; (23f0 <main+0xc0>)
    23a4:	491b      	ldr	r1, [pc, #108]	; (2414 <main+0xe4>)
    23a6:	481c      	ldr	r0, [pc, #112]	; (2418 <main+0xe8>)
    23a8:	f002 fe78 	bl	509c <printf>

  bool prev_sign = false;
    23ac:	2300      	movs	r3, #0
    23ae:	71fb      	strb	r3, [r7, #7]

  xTaskCreate(xUartTask, "uart_task", 1024, NULL, tskIDLE_PRIORITY + 2, &xUartTaskHandle);
    23b0:	4b1a      	ldr	r3, [pc, #104]	; (241c <main+0xec>)
    23b2:	9301      	str	r3, [sp, #4]
    23b4:	2302      	movs	r3, #2
    23b6:	9300      	str	r3, [sp, #0]
    23b8:	2300      	movs	r3, #0
    23ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23be:	4918      	ldr	r1, [pc, #96]	; (2420 <main+0xf0>)
    23c0:	4818      	ldr	r0, [pc, #96]	; (2424 <main+0xf4>)
    23c2:	f000 fefb 	bl	31bc <xTaskCreate>
  xTaskCreate(xLinearActuator, "linear_actuator_task", 1024, NULL, tskIDLE_PRIORITY + 1, &xLinearActuatorHandle);
    23c6:	4b18      	ldr	r3, [pc, #96]	; (2428 <main+0xf8>)
    23c8:	9301      	str	r3, [sp, #4]
    23ca:	2301      	movs	r3, #1
    23cc:	9300      	str	r3, [sp, #0]
    23ce:	2300      	movs	r3, #0
    23d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23d4:	4915      	ldr	r1, [pc, #84]	; (242c <main+0xfc>)
    23d6:	4816      	ldr	r0, [pc, #88]	; (2430 <main+0x100>)
    23d8:	f000 fef0 	bl	31bc <xTaskCreate>

  vTaskStartScheduler();
    23dc:	f001 f840 	bl	3460 <vTaskStartScheduler>
}
    23e0:	2300      	movs	r3, #0
    23e2:	4618      	mov	r0, r3
    23e4:	370c      	adds	r7, #12
    23e6:	46bd      	mov	sp, r7
    23e8:	bd90      	pop	{r4, r7, pc}
    23ea:	bf00      	nop
    23ec:	100002d8 	.word	0x100002d8
    23f0:	00008b64 	.word	0x00008b64
    23f4:	00008a88 	.word	0x00008a88
    23f8:	00008890 	.word	0x00008890
    23fc:	00008a70 	.word	0x00008a70
    2400:	10000060 	.word	0x10000060
    2404:	00008a74 	.word	0x00008a74
    2408:	00008a78 	.word	0x00008a78
    240c:	00008a80 	.word	0x00008a80
    2410:	10000088 	.word	0x10000088
    2414:	00008a94 	.word	0x00008a94
    2418:	000088dc 	.word	0x000088dc
    241c:	100002c4 	.word	0x100002c4
    2420:	00008934 	.word	0x00008934
    2424:	00002471 	.word	0x00002471
    2428:	100002c8 	.word	0x100002c8
    242c:	00008940 	.word	0x00008940
    2430:	000024e9 	.word	0x000024e9

00002434 <std::chrono::duration_values<long long>::max()>:
	max()
    2434:	b598      	push	{r3, r4, r7, lr}
    2436:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    2438:	f7fd ff96 	bl	368 <std::numeric_limits<long long>::max()>
    243c:	4603      	mov	r3, r0
    243e:	460c      	mov	r4, r1
    2440:	4618      	mov	r0, r3
    2442:	4621      	mov	r1, r4
    2444:	bd98      	pop	{r3, r4, r7, pc}

00002446 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    2446:	b590      	push	{r4, r7, lr}
    2448:	b085      	sub	sp, #20
    244a:	af00      	add	r7, sp, #0
    244c:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    244e:	f7ff fff1 	bl	2434 <std::chrono::duration_values<long long>::max()>
    2452:	4603      	mov	r3, r0
    2454:	460c      	mov	r4, r1
    2456:	e9c7 3402 	strd	r3, r4, [r7, #8]
    245a:	f107 0308 	add.w	r3, r7, #8
    245e:	4619      	mov	r1, r3
    2460:	6878      	ldr	r0, [r7, #4]
    2462:	f7fe fa83 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2466:	6878      	ldr	r0, [r7, #4]
    2468:	3714      	adds	r7, #20
    246a:	46bd      	mov	sp, r7
    246c:	bd90      	pop	{r4, r7, pc}
    246e:	Address 0x000000000000246e is out of bounds.


00002470 <xUartTask(void*)>:

//Task to send and recive data over UART
void xUartTask(void* p)
{
    2470:	b580      	push	{r7, lr}
    2472:	b086      	sub	sp, #24
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
    while(1)
    {
      // LA_position = adc2.Read();
      // Receive a float (Glove data) over UART
      for(size_t j = 0 ; j<2; j++)
    2478:	2300      	movs	r3, #0
    247a:	617b      	str	r3, [r7, #20]
    247c:	697b      	ldr	r3, [r7, #20]
    247e:	2b01      	cmp	r3, #1
    2480:	d826      	bhi.n	24d0 <xUartTask(void*)+0x60>
      {
        for (size_t i = 0; i < 4; i++)
    2482:	2300      	movs	r3, #0
    2484:	613b      	str	r3, [r7, #16]
    2486:	693b      	ldr	r3, [r7, #16]
    2488:	2b03      	cmp	r3, #3
    248a:	d81d      	bhi.n	24c8 <xUartTask(void*)+0x58>
        {
          receive = uart2.Read();
    248c:	f107 0308 	add.w	r3, r7, #8
    2490:	4618      	mov	r0, r3
    2492:	f7ff ffd8 	bl	2446 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    2496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    249a:	4810      	ldr	r0, [pc, #64]	; (24dc <xUartTask(void*)+0x6c>)
    249c:	f7fe fe7e 	bl	119c <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    24a0:	4603      	mov	r3, r0
    24a2:	461a      	mov	r2, r3
    24a4:	4b0e      	ldr	r3, [pc, #56]	; (24e0 <xUartTask(void*)+0x70>)
    24a6:	701a      	strb	r2, [r3, #0]
          rec[j].ui = (rec[j].ui << 8) | receive;
    24a8:	4a0e      	ldr	r2, [pc, #56]	; (24e4 <xUartTask(void*)+0x74>)
    24aa:	697b      	ldr	r3, [r7, #20]
    24ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24b0:	021b      	lsls	r3, r3, #8
    24b2:	4a0b      	ldr	r2, [pc, #44]	; (24e0 <xUartTask(void*)+0x70>)
    24b4:	7812      	ldrb	r2, [r2, #0]
    24b6:	431a      	orrs	r2, r3
    24b8:	490a      	ldr	r1, [pc, #40]	; (24e4 <xUartTask(void*)+0x74>)
    24ba:	697b      	ldr	r3, [r7, #20]
    24bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (size_t i = 0; i < 4; i++)
    24c0:	693b      	ldr	r3, [r7, #16]
    24c2:	3301      	adds	r3, #1
    24c4:	613b      	str	r3, [r7, #16]
    24c6:	e7de      	b.n	2486 <xUartTask(void*)+0x16>
      for(size_t j = 0 ; j<2; j++)
    24c8:	697b      	ldr	r3, [r7, #20]
    24ca:	3301      	adds	r3, #1
    24cc:	617b      	str	r3, [r7, #20]
    24ce:	e7d5      	b.n	247c <xUartTask(void*)+0xc>
        }
        //LOG_INFO("Read value %f over UART", rec.f);
      }
      // Delay 100 ms
      vTaskDelay(500);
    24d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    24d4:	f000 ffa0 	bl	3418 <vTaskDelay>
    }
    24d8:	e7ce      	b.n	2478 <xUartTask(void*)+0x8>
    24da:	bf00      	nop
    24dc:	100002d8 	.word	0x100002d8
    24e0:	100002d4 	.word	0x100002d4
    24e4:	100002cc 	.word	0x100002cc

000024e8 <xLinearActuator(void*)>:
}

//Task to control linear actuators
void xLinearActuator(void* p)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	b088      	sub	sp, #32
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
    while (1)
    {
      // Run the recieved data through the PID algorithm
      // Map the output from the PID controller to proper units for the LA 
      int converted_output[2] = {(sjsu::Map(rec[0].f, 0.0f, 3.3f, 1000.0f, 2000.0f)) , (sjsu::Map(rec[1].f, 0.0f, 3.3f, 1000.0f, 2000.0f))};
    24f0:	4b25      	ldr	r3, [pc, #148]	; (2588 <xLinearActuator(void*)+0xa0>)
    24f2:	edd3 7a00 	vldr	s15, [r3]
    24f6:	ed9f 2a25 	vldr	s4, [pc, #148]	; 258c <xLinearActuator(void*)+0xa4>
    24fa:	eddf 1a25 	vldr	s3, [pc, #148]	; 2590 <xLinearActuator(void*)+0xa8>
    24fe:	ed9f 1a25 	vldr	s2, [pc, #148]	; 2594 <xLinearActuator(void*)+0xac>
    2502:	eddf 0a25 	vldr	s1, [pc, #148]	; 2598 <xLinearActuator(void*)+0xb0>
    2506:	eeb0 0a67 	vmov.f32	s0, s15
    250a:	f000 f9b9 	bl	2880 <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    250e:	eef0 7a40 	vmov.f32	s15, s0
    2512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2516:	ee17 3a90 	vmov	r3, s15
    251a:	60bb      	str	r3, [r7, #8]
    251c:	4b1a      	ldr	r3, [pc, #104]	; (2588 <xLinearActuator(void*)+0xa0>)
    251e:	edd3 7a01 	vldr	s15, [r3, #4]
    2522:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 258c <xLinearActuator(void*)+0xa4>
    2526:	eddf 1a1a 	vldr	s3, [pc, #104]	; 2590 <xLinearActuator(void*)+0xa8>
    252a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 2594 <xLinearActuator(void*)+0xac>
    252e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 2598 <xLinearActuator(void*)+0xb0>
    2532:	eeb0 0a67 	vmov.f32	s0, s15
    2536:	f000 f9a3 	bl	2880 <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    253a:	eef0 7a40 	vmov.f32	s15, s0
    253e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2542:	ee17 3a90 	vmov	r3, s15
    2546:	60fb      	str	r3, [r7, #12]
    
    //  LOG_INFO("%f",converted_output);
    
      linear_actuator1.SetPulseWidthInMicroseconds(static_cast<std::chrono::microseconds>(converted_output[0]));
    2548:	f107 0208 	add.w	r2, r7, #8
    254c:	f107 0310 	add.w	r3, r7, #16
    2550:	4611      	mov	r1, r2
    2552:	4618      	mov	r0, r3
    2554:	f7ff feda 	bl	230c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2558:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    255c:	480f      	ldr	r0, [pc, #60]	; (259c <xLinearActuator(void*)+0xb4>)
    255e:	f7ff fe26 	bl	21ae <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>

      linear_actuator2.SetPulseWidthInMicroseconds(static_cast<std::chrono::microseconds>(converted_output[1]));
    2562:	f107 0308 	add.w	r3, r7, #8
    2566:	1d1a      	adds	r2, r3, #4
    2568:	f107 0318 	add.w	r3, r7, #24
    256c:	4611      	mov	r1, r2
    256e:	4618      	mov	r0, r3
    2570:	f7ff fecc 	bl	230c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    2578:	4809      	ldr	r0, [pc, #36]	; (25a0 <xLinearActuator(void*)+0xb8>)
    257a:	f7ff fe18 	bl	21ae <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
      // Delay 100 ms
      vTaskDelay(100);
    257e:	2064      	movs	r0, #100	; 0x64
    2580:	f000 ff4a 	bl	3418 <vTaskDelay>
    }
    2584:	e7b4      	b.n	24f0 <xLinearActuator(void*)+0x8>
    2586:	bf00      	nop
    2588:	100002cc 	.word	0x100002cc
    258c:	44fa0000 	.word	0x44fa0000
    2590:	447a0000 	.word	0x447a0000
    2594:	40533333 	.word	0x40533333
    2598:	00000000 	.word	0x00000000
    259c:	10000060 	.word	0x10000060
    25a0:	10000088 	.word	0x10000088

000025a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    25a4:	b580      	push	{r7, lr}
    25a6:	b084      	sub	sp, #16
    25a8:	af00      	add	r7, sp, #0
    25aa:	60f8      	str	r0, [r7, #12]
    25ac:	460b      	mov	r3, r1
    25ae:	80ba      	strh	r2, [r7, #4]
    25b0:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    25b2:	793b      	ldrb	r3, [r7, #4]
    25b4:	461a      	mov	r2, r3
    25b6:	797b      	ldrb	r3, [r7, #5]
    25b8:	7af9      	ldrb	r1, [r7, #11]
    25ba:	68f8      	ldr	r0, [r7, #12]
    25bc:	f000 f9a1 	bl	2902 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    25c0:	4603      	mov	r3, r0
}
    25c2:	4618      	mov	r0, r3
    25c4:	3710      	adds	r7, #16
    25c6:	46bd      	mov	sp, r7
    25c8:	bd80      	pop	{r7, pc}

000025ca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    25ca:	b580      	push	{r7, lr}
    25cc:	b084      	sub	sp, #16
    25ce:	af00      	add	r7, sp, #0
    25d0:	6078      	str	r0, [r7, #4]
    25d2:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	4618      	mov	r0, r3
    25d8:	f7fe fbc8 	bl	d6c <units::linear_scale<float>::operator()() const>
    25dc:	eef0 6a40 	vmov.f32	s13, s0
    25e0:	683b      	ldr	r3, [r7, #0]
    25e2:	ee07 3a90 	vmov	s15, r3
    25e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    25ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    25ee:	f107 030c 	add.w	r3, r7, #12
    25f2:	eeb0 0a47 	vmov.f32	s0, s14
    25f6:	4618      	mov	r0, r3
    25f8:	f7fe f83b 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    25fc:	68fb      	ldr	r3, [r7, #12]
	}
    25fe:	4618      	mov	r0, r3
    2600:	3710      	adds	r7, #16
    2602:	46bd      	mov	sp, r7
    2604:	bd80      	pop	{r7, pc}

00002606 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    2606:	b590      	push	{r4, r7, lr}
    2608:	b087      	sub	sp, #28
    260a:	af00      	add	r7, sp, #0
    260c:	60f8      	str	r0, [r7, #12]
    260e:	60b9      	str	r1, [r7, #8]
    2610:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    2612:	68bb      	ldr	r3, [r7, #8]
    2614:	e9d3 3400 	ldrd	r3, r4, [r3]
    2618:	1c59      	adds	r1, r3, #1
    261a:	f144 0200 	adc.w	r2, r4, #0
    261e:	68b8      	ldr	r0, [r7, #8]
    2620:	e9c0 1200 	strd	r1, r2, [r0]
    2624:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2628:	f107 0310 	add.w	r3, r7, #16
    262c:	4619      	mov	r1, r3
    262e:	68f8      	ldr	r0, [r7, #12]
    2630:	f7fe f99c 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2634:	68f8      	ldr	r0, [r7, #12]
    2636:	371c      	adds	r7, #28
    2638:	46bd      	mov	sp, r7
    263a:	bd90      	pop	{r4, r7, pc}

0000263c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    // comparisons
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
    263c:	b5f0      	push	{r4, r5, r6, r7, lr}
    263e:	b087      	sub	sp, #28
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    2644:	6039      	str	r1, [r7, #0]
		 const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() == __ct(__rhs).count();
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	e9d3 3400 	ldrd	r3, r4, [r3]
    264c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2650:	f107 0308 	add.w	r3, r7, #8
    2654:	4618      	mov	r0, r3
    2656:	f7ff fd9d 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    265a:	4605      	mov	r5, r0
    265c:	460e      	mov	r6, r1
    265e:	683b      	ldr	r3, [r7, #0]
    2660:	e9d3 3400 	ldrd	r3, r4, [r3]
    2664:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2668:	f107 0310 	add.w	r3, r7, #16
    266c:	4618      	mov	r0, r3
    266e:	f7ff fd91 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2672:	4603      	mov	r3, r0
    2674:	460c      	mov	r4, r1
    2676:	42a6      	cmp	r6, r4
    2678:	bf06      	itte	eq
    267a:	429d      	cmpeq	r5, r3
    267c:	2301      	moveq	r3, #1
    267e:	2300      	movne	r3, #0
    2680:	b2db      	uxtb	r3, r3
      }
    2682:	4618      	mov	r0, r3
    2684:	371c      	adds	r7, #28
    2686:	46bd      	mov	sp, r7
    2688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000268a <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    268a:	b580      	push	{r7, lr}
    268c:	ed2d 8b02 	vpush	{d8}
    2690:	b082      	sub	sp, #8
    2692:	af00      	add	r7, sp, #0
    2694:	6078      	str	r0, [r7, #4]
    2696:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	ed93 8a00 	vldr	s16, [r3]
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	4618      	mov	r0, r3
    26a2:	f7fd ffc6 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    26a6:	eef0 7a40 	vmov.f32	s15, s0
    26aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
    26ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26b2:	bfcc      	ite	gt
    26b4:	2301      	movgt	r3, #1
    26b6:	2300      	movle	r3, #0
    26b8:	b2db      	uxtb	r3, r3
		}
    26ba:	4618      	mov	r0, r3
    26bc:	3708      	adds	r7, #8
    26be:	46bd      	mov	sp, r7
    26c0:	ecbd 8b02 	vpop	{d8}
    26c4:	bd80      	pop	{r7, pc}

000026c6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    26c6:	b580      	push	{r7, lr}
    26c8:	b082      	sub	sp, #8
    26ca:	af00      	add	r7, sp, #0
    26cc:	6078      	str	r0, [r7, #4]
    26ce:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    26d0:	683b      	ldr	r3, [r7, #0]
    26d2:	4618      	mov	r0, r3
    26d4:	f7fe f96c 	bl	9b0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    26d8:	eef0 7a40 	vmov.f32	s15, s0
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    26e2:	687b      	ldr	r3, [r7, #4]
		}
    26e4:	4618      	mov	r0, r3
    26e6:	3708      	adds	r7, #8
    26e8:	46bd      	mov	sp, r7
    26ea:	bd80      	pop	{r7, pc}

000026ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    26ec:	b480      	push	{r7}
    26ee:	b083      	sub	sp, #12
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
    26f4:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    26f6:	2201      	movs	r2, #1
    26f8:	683b      	ldr	r3, [r7, #0]
    26fa:	fa02 f303 	lsl.w	r3, r2, r3
    26fe:	461a      	mov	r2, r3
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	4313      	orrs	r3, r2
}
    2704:	4618      	mov	r0, r3
    2706:	370c      	adds	r7, #12
    2708:	46bd      	mov	sp, r7
    270a:	f85d 7b04 	ldr.w	r7, [sp], #4
    270e:	4770      	bx	lr

00002710 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    2710:	b480      	push	{r7}
    2712:	b083      	sub	sp, #12
    2714:	af00      	add	r7, sp, #0
    2716:	6078      	str	r0, [r7, #4]
    2718:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    271a:	2201      	movs	r2, #1
    271c:	683b      	ldr	r3, [r7, #0]
    271e:	fa02 f303 	lsl.w	r3, r2, r3
    2722:	43db      	mvns	r3, r3
    2724:	461a      	mov	r2, r3
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	4013      	ands	r3, r2
}
    272a:	4618      	mov	r0, r3
    272c:	370c      	adds	r7, #12
    272e:	46bd      	mov	sp, r7
    2730:	f85d 7b04 	ldr.w	r7, [sp], #4
    2734:	4770      	bx	lr

00002736 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2736:	b580      	push	{r7, lr}
    2738:	b084      	sub	sp, #16
    273a:	af00      	add	r7, sp, #0
    273c:	60f8      	str	r0, [r7, #12]
    273e:	60b9      	str	r1, [r7, #8]
    2740:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2742:	793b      	ldrb	r3, [r7, #4]
    2744:	461a      	mov	r2, r3
    2746:	797b      	ldrb	r3, [r7, #5]
    2748:	68b9      	ldr	r1, [r7, #8]
    274a:	68f8      	ldr	r0, [r7, #12]
    274c:	f000 f95b 	bl	2a06 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    2750:	4603      	mov	r3, r0
}
    2752:	4618      	mov	r0, r3
    2754:	3710      	adds	r7, #16
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}

0000275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    275a:	b580      	push	{r7, lr}
    275c:	b084      	sub	sp, #16
    275e:	af00      	add	r7, sp, #0
    2760:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	4618      	mov	r0, r3
    2766:	f7fe fb01 	bl	d6c <units::linear_scale<float>::operator()() const>
    276a:	eef0 7a40 	vmov.f32	s15, s0
    276e:	edc7 7a03 	vstr	s15, [r7, #12]
    2772:	f107 030c 	add.w	r3, r7, #12
    2776:	4618      	mov	r0, r3
    2778:	f000 f971 	bl	2a5e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    277c:	eef0 7a40 	vmov.f32	s15, s0
    2780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2784:	ee17 3a90 	vmov	r3, s15
		}
    2788:	4618      	mov	r0, r3
    278a:	3710      	adds	r7, #16
    278c:	46bd      	mov	sp, r7
    278e:	bd80      	pop	{r7, pc}

00002790 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2790:	b480      	push	{r7}
    2792:	b083      	sub	sp, #12
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    279a:	2201      	movs	r2, #1
    279c:	683b      	ldr	r3, [r7, #0]
    279e:	fa02 f303 	lsl.w	r3, r2, r3
    27a2:	461a      	mov	r2, r3
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	4013      	ands	r3, r2
    27a8:	2b00      	cmp	r3, #0
    27aa:	bf14      	ite	ne
    27ac:	2301      	movne	r3, #1
    27ae:	2300      	moveq	r3, #0
    27b0:	b2db      	uxtb	r3, r3
}
    27b2:	4618      	mov	r0, r3
    27b4:	370c      	adds	r7, #12
    27b6:	46bd      	mov	sp, r7
    27b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27bc:	4770      	bx	lr

000027be <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    27be:	b480      	push	{r7}
    27c0:	b083      	sub	sp, #12
    27c2:	af00      	add	r7, sp, #0
    27c4:	4603      	mov	r3, r0
    27c6:	6039      	str	r1, [r7, #0]
    27c8:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    27ca:	79fa      	ldrb	r2, [r7, #7]
    27cc:	683b      	ldr	r3, [r7, #0]
    27ce:	fa42 f303 	asr.w	r3, r2, r3
    27d2:	f003 0301 	and.w	r3, r3, #1
    27d6:	2b00      	cmp	r3, #0
    27d8:	bf14      	ite	ne
    27da:	2301      	movne	r3, #1
    27dc:	2300      	moveq	r3, #0
    27de:	b2db      	uxtb	r3, r3
}
    27e0:	4618      	mov	r0, r3
    27e2:	370c      	adds	r7, #12
    27e4:	46bd      	mov	sp, r7
    27e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ea:	4770      	bx	lr

000027ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
/// @returns a value that is the target value with the bit set to a 1 at the bit
/// position within the bitmask. For exmaple if your bitmask has field position
/// set to 5, then this function will return the target value with the 5th bits
/// set to a 1.
template <typename T>
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    27ec:	b580      	push	{r7, lr}
    27ee:	b082      	sub	sp, #8
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
    27f4:	8039      	strh	r1, [r7, #0]
{
  return Set(target, bitmask.position);
    27f6:	783b      	ldrb	r3, [r7, #0]
    27f8:	4619      	mov	r1, r3
    27fa:	6878      	ldr	r0, [r7, #4]
    27fc:	f7ff ff76 	bl	26ec <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2800:	4603      	mov	r3, r0
}
    2802:	4618      	mov	r0, r3
    2804:	3708      	adds	r7, #8
    2806:	46bd      	mov	sp, r7
    2808:	bd80      	pop	{r7, pc}

0000280a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    280a:	b580      	push	{r7, lr}
    280c:	b084      	sub	sp, #16
    280e:	af00      	add	r7, sp, #0
    2810:	60f8      	str	r0, [r7, #12]
    2812:	60b9      	str	r1, [r7, #8]
    2814:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2816:	793b      	ldrb	r3, [r7, #4]
    2818:	461a      	mov	r2, r3
    281a:	797b      	ldrb	r3, [r7, #5]
    281c:	68b9      	ldr	r1, [r7, #8]
    281e:	68f8      	ldr	r0, [r7, #12]
    2820:	f000 f92b 	bl	2a7a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    2824:	4603      	mov	r3, r0
}
    2826:	4618      	mov	r0, r3
    2828:	3710      	adds	r7, #16
    282a:	46bd      	mov	sp, r7
    282c:	bd80      	pop	{r7, pc}

0000282e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
/// Operates the same way as the Set(T target, Mask bitmask) function except it
/// clears the bit.
template <typename T>
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    282e:	b580      	push	{r7, lr}
    2830:	b082      	sub	sp, #8
    2832:	af00      	add	r7, sp, #0
    2834:	6078      	str	r0, [r7, #4]
    2836:	8039      	strh	r1, [r7, #0]
{
  return Clear(target, bitmask.position);
    2838:	783b      	ldrb	r3, [r7, #0]
    283a:	4619      	mov	r1, r3
    283c:	6878      	ldr	r0, [r7, #4]
    283e:	f7ff ff67 	bl	2710 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2842:	4603      	mov	r3, r0
}
    2844:	4618      	mov	r0, r3
    2846:	3708      	adds	r7, #8
    2848:	46bd      	mov	sp, r7
    284a:	bd80      	pop	{r7, pc}

0000284c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    284c:	b480      	push	{r7}
    284e:	b085      	sub	sp, #20
    2850:	af00      	add	r7, sp, #0
    2852:	60f8      	str	r0, [r7, #12]
    2854:	7239      	strb	r1, [r7, #8]
    2856:	713a      	strb	r2, [r7, #4]
    2858:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    285a:	68fb      	ldr	r3, [r7, #12]
    285c:	edd3 7a00 	vldr	s15, [r3]
    2860:	ed9f 7a06 	vldr	s14, [pc, #24]	; 287c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    2864:	eec7 6a87 	vdiv.f32	s13, s15, s14
    2868:	eef0 7a66 	vmov.f32	s15, s13
		}
    286c:	eeb0 0a67 	vmov.f32	s0, s15
    2870:	3714      	adds	r7, #20
    2872:	46bd      	mov	sp, r7
    2874:	f85d 7b04 	ldr.w	r7, [sp], #4
    2878:	4770      	bx	lr
    287a:	bf00      	nop
    287c:	49742400 	.word	0x49742400

00002880 <float sjsu::Map<float, float, float>(float, float, float, float, float)>:
/// @param current_minimum current minimum value that the value can reach
/// @param current_maximum current maximum value that the value can reach
/// @param new_minimum the new minimum value to scale and shift the old value to
/// @param new_maximum the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    2880:	b480      	push	{r7}
    2882:	b08f      	sub	sp, #60	; 0x3c
    2884:	af00      	add	r7, sp, #0
    2886:	ed87 0a05 	vstr	s0, [r7, #20]
    288a:	edc7 0a04 	vstr	s1, [r7, #16]
    288e:	ed87 1a03 	vstr	s2, [r7, #12]
    2892:	edc7 1a02 	vstr	s3, [r7, #8]
    2896:	ed87 2a01 	vstr	s4, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    289a:	697b      	ldr	r3, [r7, #20]
    289c:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    289e:	693b      	ldr	r3, [r7, #16]
    28a0:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    28a2:	68fb      	ldr	r3, [r7, #12]
    28a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    28a6:	68bb      	ldr	r3, [r7, #8]
    28a8:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    28ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    28b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    28b6:	ee77 6a67 	vsub.f32	s13, s14, s15
    28ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    28be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    28c2:	ee37 7a67 	vsub.f32	s14, s14, s15
    28c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    28ca:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    28ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    28d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    28d6:	ee37 7a67 	vsub.f32	s14, s14, s15
    28da:	edd7 7a08 	vldr	s15, [r7, #32]
    28de:	ee67 7a27 	vmul.f32	s15, s14, s15
    28e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    28e6:	ee77 7a27 	vadd.f32	s15, s14, s15
    28ea:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    28ee:	69fb      	ldr	r3, [r7, #28]
    28f0:	ee07 3a90 	vmov	s15, r3
};
    28f4:	eeb0 0a67 	vmov.f32	s0, s15
    28f8:	373c      	adds	r7, #60	; 0x3c
    28fa:	46bd      	mov	sp, r7
    28fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2900:	4770      	bx	lr

00002902 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2902:	b480      	push	{r7}
    2904:	b089      	sub	sp, #36	; 0x24
    2906:	af00      	add	r7, sp, #0
    2908:	60f8      	str	r0, [r7, #12]
    290a:	607a      	str	r2, [r7, #4]
    290c:	603b      	str	r3, [r7, #0]
    290e:	460b      	mov	r3, r1
    2910:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2916:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2918:	2320      	movs	r3, #32
    291a:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    291c:	683b      	ldr	r3, [r7, #0]
    291e:	f1c3 0320 	rsb	r3, r3, #32
    2922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2926:	fa22 f303 	lsr.w	r3, r2, r3
    292a:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    292c:	697a      	ldr	r2, [r7, #20]
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	fa02 f303 	lsl.w	r3, r2, r3
    2934:	43db      	mvns	r3, r3
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4013      	ands	r3, r2
    293a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    293c:	7afa      	ldrb	r2, [r7, #11]
    293e:	697b      	ldr	r3, [r7, #20]
    2940:	401a      	ands	r2, r3
    2942:	687b      	ldr	r3, [r7, #4]
    2944:	fa02 f303 	lsl.w	r3, r2, r3
    2948:	68fa      	ldr	r2, [r7, #12]
    294a:	4313      	orrs	r3, r2
    294c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    294e:	68fb      	ldr	r3, [r7, #12]
}
    2950:	4618      	mov	r0, r3
    2952:	3724      	adds	r7, #36	; 0x24
    2954:	46bd      	mov	sp, r7
    2956:	f85d 7b04 	ldr.w	r7, [sp], #4
    295a:	4770      	bx	lr

0000295c <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    295c:	b5f0      	push	{r4, r5, r6, r7, lr}
    295e:	b08b      	sub	sp, #44	; 0x2c
    2960:	af00      	add	r7, sp, #0
    2962:	60f8      	str	r0, [r7, #12]
    2964:	60b9      	str	r1, [r7, #8]
    2966:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    2968:	68bb      	ldr	r3, [r7, #8]
    296a:	e9d3 3400 	ldrd	r3, r4, [r3]
    296e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    2972:	f107 0318 	add.w	r3, r7, #24
    2976:	4618      	mov	r0, r3
    2978:	f7ff fc0c 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    297c:	4605      	mov	r5, r0
    297e:	460e      	mov	r6, r1
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	e9d3 3400 	ldrd	r3, r4, [r3]
    2986:	e9c7 3408 	strd	r3, r4, [r7, #32]
    298a:	f107 0320 	add.w	r3, r7, #32
    298e:	4618      	mov	r0, r3
    2990:	f7ff fc00 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2994:	460a      	mov	r2, r1
    2996:	4601      	mov	r1, r0
    2998:	194b      	adds	r3, r1, r5
    299a:	eb42 0406 	adc.w	r4, r2, r6
    299e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    29a2:	f107 0310 	add.w	r3, r7, #16
    29a6:	4619      	mov	r1, r3
    29a8:	68f8      	ldr	r0, [r7, #12]
    29aa:	f7fd ffdf 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    29ae:	68f8      	ldr	r0, [r7, #12]
    29b0:	372c      	adds	r7, #44	; 0x2c
    29b2:	46bd      	mov	sp, r7
    29b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000029b6 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
    29b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b8:	b087      	sub	sp, #28
    29ba:	af00      	add	r7, sp, #0
    29bc:	6078      	str	r0, [r7, #4]
    29be:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	e9d3 3400 	ldrd	r3, r4, [r3]
    29c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    29ca:	f107 0308 	add.w	r3, r7, #8
    29ce:	4618      	mov	r0, r3
    29d0:	f7ff fbe0 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    29d4:	4605      	mov	r5, r0
    29d6:	460e      	mov	r6, r1
    29d8:	683b      	ldr	r3, [r7, #0]
    29da:	e9d3 3400 	ldrd	r3, r4, [r3]
    29de:	e9c7 3404 	strd	r3, r4, [r7, #16]
    29e2:	f107 0310 	add.w	r3, r7, #16
    29e6:	4618      	mov	r0, r3
    29e8:	f7ff fbd4 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    29ec:	4603      	mov	r3, r0
    29ee:	460c      	mov	r4, r1
    29f0:	429d      	cmp	r5, r3
    29f2:	eb76 0304 	sbcs.w	r3, r6, r4
    29f6:	bfb4      	ite	lt
    29f8:	2301      	movlt	r3, #1
    29fa:	2300      	movge	r3, #0
    29fc:	b2db      	uxtb	r3, r3
      }
    29fe:	4618      	mov	r0, r3
    2a00:	371c      	adds	r7, #28
    2a02:	46bd      	mov	sp, r7
    2a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a06 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2a06:	b480      	push	{r7}
    2a08:	b089      	sub	sp, #36	; 0x24
    2a0a:	af00      	add	r7, sp, #0
    2a0c:	60f8      	str	r0, [r7, #12]
    2a0e:	60b9      	str	r1, [r7, #8]
    2a10:	607a      	str	r2, [r7, #4]
    2a12:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a18:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2a1a:	2320      	movs	r3, #32
    2a1c:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2a1e:	683b      	ldr	r3, [r7, #0]
    2a20:	f1c3 0320 	rsb	r3, r3, #32
    2a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a28:	fa22 f303 	lsr.w	r3, r2, r3
    2a2c:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2a2e:	697a      	ldr	r2, [r7, #20]
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	fa02 f303 	lsl.w	r3, r2, r3
    2a36:	43db      	mvns	r3, r3
    2a38:	68fa      	ldr	r2, [r7, #12]
    2a3a:	4013      	ands	r3, r2
    2a3c:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2a3e:	68ba      	ldr	r2, [r7, #8]
    2a40:	697b      	ldr	r3, [r7, #20]
    2a42:	401a      	ands	r2, r3
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	fa02 f303 	lsl.w	r3, r2, r3
    2a4a:	68fa      	ldr	r2, [r7, #12]
    2a4c:	4313      	orrs	r3, r2
    2a4e:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2a50:	68fb      	ldr	r3, [r7, #12]
}
    2a52:	4618      	mov	r0, r3
    2a54:	3724      	adds	r7, #36	; 0x24
    2a56:	46bd      	mov	sp, r7
    2a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a5c:	4770      	bx	lr

00002a5e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2a5e:	b580      	push	{r7, lr}
    2a60:	b086      	sub	sp, #24
    2a62:	af00      	add	r7, sp, #0
    2a64:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2a66:	6878      	ldr	r0, [r7, #4]
    2a68:	f000 f833 	bl	2ad2 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2a6c:	eef0 7a40 	vmov.f32	s15, s0
	}
    2a70:	eeb0 0a67 	vmov.f32	s0, s15
    2a74:	3718      	adds	r7, #24
    2a76:	46bd      	mov	sp, r7
    2a78:	bd80      	pop	{r7, pc}

00002a7a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2a7a:	b480      	push	{r7}
    2a7c:	b089      	sub	sp, #36	; 0x24
    2a7e:	af00      	add	r7, sp, #0
    2a80:	60f8      	str	r0, [r7, #12]
    2a82:	60b9      	str	r1, [r7, #8]
    2a84:	607a      	str	r2, [r7, #4]
    2a86:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a8c:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2a8e:	2320      	movs	r3, #32
    2a90:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2a92:	683b      	ldr	r3, [r7, #0]
    2a94:	f1c3 0320 	rsb	r3, r3, #32
    2a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a9c:	fa22 f303 	lsr.w	r3, r2, r3
    2aa0:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2aa2:	697a      	ldr	r2, [r7, #20]
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	fa02 f303 	lsl.w	r3, r2, r3
    2aaa:	43db      	mvns	r3, r3
    2aac:	68fa      	ldr	r2, [r7, #12]
    2aae:	4013      	ands	r3, r2
    2ab0:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2ab2:	68ba      	ldr	r2, [r7, #8]
    2ab4:	697b      	ldr	r3, [r7, #20]
    2ab6:	401a      	ands	r2, r3
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	fa02 f303 	lsl.w	r3, r2, r3
    2abe:	68fa      	ldr	r2, [r7, #12]
    2ac0:	4313      	orrs	r3, r2
    2ac2:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2ac4:	68fb      	ldr	r3, [r7, #12]
}
    2ac6:	4618      	mov	r0, r3
    2ac8:	3724      	adds	r7, #36	; 0x24
    2aca:	46bd      	mov	sp, r7
    2acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ad0:	4770      	bx	lr

00002ad2 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2ad2:	b480      	push	{r7}
    2ad4:	b085      	sub	sp, #20
    2ad6:	af00      	add	r7, sp, #0
    2ad8:	60f8      	str	r0, [r7, #12]
    2ada:	7239      	strb	r1, [r7, #8]
    2adc:	713a      	strb	r2, [r7, #4]
    2ade:	703b      	strb	r3, [r7, #0]
			return value;
    2ae0:	68fb      	ldr	r3, [r7, #12]
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	ee07 3a90 	vmov	s15, r3
		}
    2ae8:	eeb0 0a67 	vmov.f32	s0, s15
    2aec:	3714      	adds	r7, #20
    2aee:	46bd      	mov	sp, r7
    2af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2af4:	4770      	bx	lr
    2af6:	Address 0x0000000000002af6 is out of bounds.


00002af8 <__static_initialization_and_destruction_0(int, int)>:
}
    2af8:	b580      	push	{r7, lr}
    2afa:	b082      	sub	sp, #8
    2afc:	af00      	add	r7, sp, #0
    2afe:	6078      	str	r0, [r7, #4]
    2b00:	6039      	str	r1, [r7, #0]
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	2b01      	cmp	r3, #1
    2b06:	f040 80dc 	bne.w	2cc2 <__static_initialization_and_destruction_0(int, int)+0x1ca>
    2b0a:	683b      	ldr	r3, [r7, #0]
    2b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2b10:	4293      	cmp	r3, r2
    2b12:	f040 80d6 	bne.w	2cc2 <__static_initialization_and_destruction_0(int, int)+0x1ca>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    2b16:	4b6d      	ldr	r3, [pc, #436]	; (2ccc <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	f003 0301 	and.w	r3, r3, #1
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d105      	bne.n	2b2e <__static_initialization_and_destruction_0(int, int)+0x36>
    2b22:	4b6a      	ldr	r3, [pc, #424]	; (2ccc <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2b24:	2201      	movs	r2, #1
    2b26:	601a      	str	r2, [r3, #0]
    2b28:	4a69      	ldr	r2, [pc, #420]	; (2cd0 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    2b2a:	4b6a      	ldr	r3, [pc, #424]	; (2cd4 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    2b2c:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    2b2e:	4b6a      	ldr	r3, [pc, #424]	; (2cd8 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2b30:	681b      	ldr	r3, [r3, #0]
    2b32:	f003 0301 	and.w	r3, r3, #1
    2b36:	2b00      	cmp	r3, #0
    2b38:	d105      	bne.n	2b46 <__static_initialization_and_destruction_0(int, int)+0x4e>
    2b3a:	4b67      	ldr	r3, [pc, #412]	; (2cd8 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2b3c:	2201      	movs	r2, #1
    2b3e:	601a      	str	r2, [r3, #0]
    2b40:	4a66      	ldr	r2, [pc, #408]	; (2cdc <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    2b42:	4b67      	ldr	r3, [pc, #412]	; (2ce0 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    2b44:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    2b46:	4b67      	ldr	r3, [pc, #412]	; (2ce4 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2b48:	681b      	ldr	r3, [r3, #0]
    2b4a:	f003 0301 	and.w	r3, r3, #1
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d105      	bne.n	2b5e <__static_initialization_and_destruction_0(int, int)+0x66>
    2b52:	4b64      	ldr	r3, [pc, #400]	; (2ce4 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2b54:	2201      	movs	r2, #1
    2b56:	601a      	str	r2, [r3, #0]
    };
    2b58:	4a63      	ldr	r2, [pc, #396]	; (2ce8 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    2b5a:	4b64      	ldr	r3, [pc, #400]	; (2cec <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2b5c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    2b5e:	4b64      	ldr	r3, [pc, #400]	; (2cf0 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	f003 0301 	and.w	r3, r3, #1
    2b66:	2b00      	cmp	r3, #0
    2b68:	d105      	bne.n	2b76 <__static_initialization_and_destruction_0(int, int)+0x7e>
    2b6a:	4b61      	ldr	r3, [pc, #388]	; (2cf0 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    2b6c:	2201      	movs	r2, #1
    2b6e:	601a      	str	r2, [r3, #0]
    };
    2b70:	4a60      	ldr	r2, [pc, #384]	; (2cf4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2b72:	4b61      	ldr	r3, [pc, #388]	; (2cf8 <__static_initialization_and_destruction_0(int, int)+0x200>)
    2b74:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    2b76:	4b61      	ldr	r3, [pc, #388]	; (2cfc <__static_initialization_and_destruction_0(int, int)+0x204>)
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	f003 0301 	and.w	r3, r3, #1
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d105      	bne.n	2b8e <__static_initialization_and_destruction_0(int, int)+0x96>
    2b82:	4b5e      	ldr	r3, [pc, #376]	; (2cfc <__static_initialization_and_destruction_0(int, int)+0x204>)
    2b84:	2201      	movs	r2, #1
    2b86:	601a      	str	r2, [r3, #0]
    };
    2b88:	4a5d      	ldr	r2, [pc, #372]	; (2d00 <__static_initialization_and_destruction_0(int, int)+0x208>)
    2b8a:	4b5e      	ldr	r3, [pc, #376]	; (2d04 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    2b8c:	601a      	str	r2, [r3, #0]
  static constexpr units::frequency::hertz_t kClockFrequency = 1_MHz;
  /// A pointer holding the address to the LPC40xx ADC peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    2b8e:	4b5e      	ldr	r3, [pc, #376]	; (2d08 <__static_initialization_and_destruction_0(int, int)+0x210>)
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	f003 0301 	and.w	r3, r3, #1
    2b96:	2b00      	cmp	r3, #0
    2b98:	d105      	bne.n	2ba6 <__static_initialization_and_destruction_0(int, int)+0xae>
    2b9a:	4b5b      	ldr	r3, [pc, #364]	; (2d08 <__static_initialization_and_destruction_0(int, int)+0x210>)
    2b9c:	2201      	movs	r2, #1
    2b9e:	601a      	str	r2, [r3, #0]
    2ba0:	4a5a      	ldr	r2, [pc, #360]	; (2d0c <__static_initialization_and_destruction_0(int, int)+0x214>)
    2ba2:	4b5b      	ldr	r3, [pc, #364]	; (2d10 <__static_initialization_and_destruction_0(int, int)+0x218>)
    2ba4:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    2ba6:	4b5b      	ldr	r3, [pc, #364]	; (2d14 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	f003 0301 	and.w	r3, r3, #1
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d106      	bne.n	2bc0 <__static_initialization_and_destruction_0(int, int)+0xc8>
    2bb2:	4b58      	ldr	r3, [pc, #352]	; (2d14 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2bb4:	2201      	movs	r2, #1
    2bb6:	601a      	str	r2, [r3, #0]
    2bb8:	4b57      	ldr	r3, [pc, #348]	; (2d18 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2bba:	4618      	mov	r0, r3
    2bbc:	f7fe ff40 	bl	1a40 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    2bc0:	4b56      	ldr	r3, [pc, #344]	; (2d1c <__static_initialization_and_destruction_0(int, int)+0x224>)
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	f003 0301 	and.w	r3, r3, #1
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d114      	bne.n	2bf6 <__static_initialization_and_destruction_0(int, int)+0xfe>
    2bcc:	4b53      	ldr	r3, [pc, #332]	; (2d1c <__static_initialization_and_destruction_0(int, int)+0x224>)
    2bce:	2201      	movs	r2, #1
    2bd0:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    2bd2:	4a53      	ldr	r2, [pc, #332]	; (2d20 <__static_initialization_and_destruction_0(int, int)+0x228>)
    2bd4:	4b53      	ldr	r3, [pc, #332]	; (2d24 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2bd6:	601a      	str	r2, [r3, #0]
    2bd8:	4a53      	ldr	r2, [pc, #332]	; (2d28 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2bda:	4b52      	ldr	r3, [pc, #328]	; (2d24 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2bdc:	605a      	str	r2, [r3, #4]
    2bde:	4a53      	ldr	r2, [pc, #332]	; (2d2c <__static_initialization_and_destruction_0(int, int)+0x234>)
    2be0:	4b50      	ldr	r3, [pc, #320]	; (2d24 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2be2:	609a      	str	r2, [r3, #8]
    2be4:	4a52      	ldr	r2, [pc, #328]	; (2d30 <__static_initialization_and_destruction_0(int, int)+0x238>)
    2be6:	4b4f      	ldr	r3, [pc, #316]	; (2d24 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2be8:	60da      	str	r2, [r3, #12]
    2bea:	4a52      	ldr	r2, [pc, #328]	; (2d34 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    2bec:	4b4d      	ldr	r3, [pc, #308]	; (2d24 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2bee:	611a      	str	r2, [r3, #16]
    2bf0:	4a51      	ldr	r2, [pc, #324]	; (2d38 <__static_initialization_and_destruction_0(int, int)+0x240>)
    2bf2:	4b4c      	ldr	r3, [pc, #304]	; (2d24 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2bf4:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    2bf6:	4b51      	ldr	r3, [pc, #324]	; (2d3c <__static_initialization_and_destruction_0(int, int)+0x244>)
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	f003 0301 	and.w	r3, r3, #1
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d122      	bne.n	2c48 <__static_initialization_and_destruction_0(int, int)+0x150>
    2c02:	4b4e      	ldr	r3, [pc, #312]	; (2d3c <__static_initialization_and_destruction_0(int, int)+0x244>)
    2c04:	2201      	movs	r2, #1
    2c06:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c08:	4b4d      	ldr	r3, [pc, #308]	; (2d40 <__static_initialization_and_destruction_0(int, int)+0x248>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    2c0a:	4a4e      	ldr	r2, [pc, #312]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c0c:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c0e:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    2c10:	4a4c      	ldr	r2, [pc, #304]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c12:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c14:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    2c16:	4a4b      	ldr	r2, [pc, #300]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c18:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c1a:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    2c1c:	4a49      	ldr	r2, [pc, #292]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c1e:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c20:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    2c22:	4a48      	ldr	r2, [pc, #288]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c24:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c26:	611a      	str	r2, [r3, #16]
    2c28:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    2c2a:	4a46      	ldr	r2, [pc, #280]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c2c:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c2e:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    2c30:	4a44      	ldr	r2, [pc, #272]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c32:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c34:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    2c36:	4a43      	ldr	r2, [pc, #268]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c38:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c3a:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    2c3c:	4a41      	ldr	r2, [pc, #260]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c3e:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2c40:	60da      	str	r2, [r3, #12]
    2c42:	4a40      	ldr	r2, [pc, #256]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c44:	3234      	adds	r2, #52	; 0x34
    2c46:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    2c48:	4b3f      	ldr	r3, [pc, #252]	; (2d48 <__static_initialization_and_destruction_0(int, int)+0x250>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	f003 0301 	and.w	r3, r3, #1
    2c50:	2b00      	cmp	r3, #0
    2c52:	d106      	bne.n	2c62 <__static_initialization_and_destruction_0(int, int)+0x16a>
    2c54:	4b3c      	ldr	r3, [pc, #240]	; (2d48 <__static_initialization_and_destruction_0(int, int)+0x250>)
    2c56:	2201      	movs	r2, #1
    2c58:	601a      	str	r2, [r3, #0]
    2c5a:	4b3a      	ldr	r3, [pc, #232]	; (2d44 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c5c:	461a      	mov	r2, r3
    2c5e:	4b3b      	ldr	r3, [pc, #236]	; (2d4c <__static_initialization_and_destruction_0(int, int)+0x254>)
    2c60:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm0Peripheral = {
    2c62:	4b3b      	ldr	r3, [pc, #236]	; (2d50 <__static_initialization_and_destruction_0(int, int)+0x258>)
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	f003 0301 	and.w	r3, r3, #1
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d105      	bne.n	2c7a <__static_initialization_and_destruction_0(int, int)+0x182>
    2c6e:	4b38      	ldr	r3, [pc, #224]	; (2d50 <__static_initialization_and_destruction_0(int, int)+0x258>)
    2c70:	2201      	movs	r2, #1
    2c72:	601a      	str	r2, [r3, #0]
    };
    2c74:	4a37      	ldr	r2, [pc, #220]	; (2d54 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    2c76:	4b38      	ldr	r3, [pc, #224]	; (2d58 <__static_initialization_and_destruction_0(int, int)+0x260>)
    2c78:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm1Peripheral = {
    2c7a:	4b38      	ldr	r3, [pc, #224]	; (2d5c <__static_initialization_and_destruction_0(int, int)+0x264>)
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	f003 0301 	and.w	r3, r3, #1
    2c82:	2b00      	cmp	r3, #0
    2c84:	d105      	bne.n	2c92 <__static_initialization_and_destruction_0(int, int)+0x19a>
    2c86:	4b35      	ldr	r3, [pc, #212]	; (2d5c <__static_initialization_and_destruction_0(int, int)+0x264>)
    2c88:	2201      	movs	r2, #1
    2c8a:	601a      	str	r2, [r3, #0]
    };
    2c8c:	4a34      	ldr	r2, [pc, #208]	; (2d60 <__static_initialization_and_destruction_0(int, int)+0x268>)
    2c8e:	4b35      	ldr	r3, [pc, #212]	; (2d64 <__static_initialization_and_destruction_0(int, int)+0x26c>)
    2c90:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    2c92:	f7fe fa79 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2c96:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    2c98:	461a      	mov	r2, r3
    2c9a:	4914      	ldr	r1, [pc, #80]	; (2cec <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2c9c:	4832      	ldr	r0, [pc, #200]	; (2d68 <__static_initialization_and_destruction_0(int, int)+0x270>)
    2c9e:	f7fe fcc7 	bl	1630 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    2ca2:	f7fe fa71 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2ca6:	4603      	mov	r3, r0
sjsu::lpc40xx::Pwm p2_0(sjsu::lpc40xx::Pwm::Channel::kPwm0);
    2ca8:	461a      	mov	r2, r3
    2caa:	4930      	ldr	r1, [pc, #192]	; (2d6c <__static_initialization_and_destruction_0(int, int)+0x274>)
    2cac:	4830      	ldr	r0, [pc, #192]	; (2d70 <__static_initialization_and_destruction_0(int, int)+0x278>)
    2cae:	f7fe ff11 	bl	1ad4 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
    2cb2:	f7fe fa69 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    2cb6:	4603      	mov	r3, r0
sjsu::lpc40xx::Pwm p2_1(sjsu::lpc40xx::Pwm::Channel::kPwm1);
    2cb8:	461a      	mov	r2, r3
    2cba:	492e      	ldr	r1, [pc, #184]	; (2d74 <__static_initialization_and_destruction_0(int, int)+0x27c>)
    2cbc:	482e      	ldr	r0, [pc, #184]	; (2d78 <__static_initialization_and_destruction_0(int, int)+0x280>)
    2cbe:	f7fe ff09 	bl	1ad4 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
}
    2cc2:	bf00      	nop
    2cc4:	3708      	adds	r7, #8
    2cc6:	46bd      	mov	sp, r7
    2cc8:	bd80      	pop	{r7, pc}
    2cca:	bf00      	nop
    2ccc:	100002fc 	.word	0x100002fc
    2cd0:	4002c000 	.word	0x4002c000
    2cd4:	1000016c 	.word	0x1000016c
    2cd8:	10000300 	.word	0x10000300
    2cdc:	400fc000 	.word	0x400fc000
    2ce0:	10000178 	.word	0x10000178
    2ce4:	10000304 	.word	0x10000304
    2ce8:	40098000 	.word	0x40098000
    2cec:	1000000c 	.word	0x1000000c
    2cf0:	10000308 	.word	0x10000308
    2cf4:	4009c000 	.word	0x4009c000
    2cf8:	10000020 	.word	0x10000020
    2cfc:	1000030c 	.word	0x1000030c
    2d00:	400a4000 	.word	0x400a4000
    2d04:	10000034 	.word	0x10000034
    2d08:	10000310 	.word	0x10000310
    2d0c:	40034000 	.word	0x40034000
    2d10:	1000017c 	.word	0x1000017c
    2d14:	10000314 	.word	0x10000314
    2d18:	10000180 	.word	0x10000180
    2d1c:	10000318 	.word	0x10000318
    2d20:	20098000 	.word	0x20098000
    2d24:	10000280 	.word	0x10000280
    2d28:	20098020 	.word	0x20098020
    2d2c:	20098040 	.word	0x20098040
    2d30:	20098060 	.word	0x20098060
    2d34:	20098080 	.word	0x20098080
    2d38:	200980a0 	.word	0x200980a0
    2d3c:	1000031c 	.word	0x1000031c
    2d40:	10000298 	.word	0x10000298
    2d44:	40028080 	.word	0x40028080
    2d48:	10000320 	.word	0x10000320
    2d4c:	100002c0 	.word	0x100002c0
    2d50:	10000324 	.word	0x10000324
    2d54:	40014000 	.word	0x40014000
    2d58:	1000004c 	.word	0x1000004c
    2d5c:	10000328 	.word	0x10000328
    2d60:	40018000 	.word	0x40018000
    2d64:	10000054 	.word	0x10000054
    2d68:	100002d8 	.word	0x100002d8
    2d6c:	00008a40 	.word	0x00008a40
    2d70:	100002e4 	.word	0x100002e4
    2d74:	00008a4c 	.word	0x00008a4c
    2d78:	100002f0 	.word	0x100002f0

00002d7c <_GLOBAL__sub_I_xUartTaskHandle>:
    2d7c:	b580      	push	{r7, lr}
    2d7e:	af00      	add	r7, sp, #0
    2d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2d84:	2001      	movs	r0, #1
    2d86:	f7ff feb7 	bl	2af8 <__static_initialization_and_destruction_0(int, int)>
    2d8a:	bd80      	pop	{r7, pc}

00002d8c <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    2d8c:	b480      	push	{r7}
    2d8e:	b087      	sub	sp, #28
    2d90:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2d92:	2300      	movs	r3, #0
    2d94:	617b      	str	r3, [r7, #20]
    2d96:	697a      	ldr	r2, [r7, #20]
    2d98:	4613      	mov	r3, r2
    2d9a:	005b      	lsls	r3, r3, #1
    2d9c:	4413      	add	r3, r2
    2d9e:	009b      	lsls	r3, r3, #2
    2da0:	4a1f      	ldr	r2, [pc, #124]	; (2e20 <sjsu::InitializeDataSection()+0x94>)
    2da2:	4413      	add	r3, r2
    2da4:	4a1f      	ldr	r2, [pc, #124]	; (2e24 <sjsu::InitializeDataSection()+0x98>)
    2da6:	4293      	cmp	r3, r2
    2da8:	d233      	bcs.n	2e12 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    2daa:	491d      	ldr	r1, [pc, #116]	; (2e20 <sjsu::InitializeDataSection()+0x94>)
    2dac:	697a      	ldr	r2, [r7, #20]
    2dae:	4613      	mov	r3, r2
    2db0:	005b      	lsls	r3, r3, #1
    2db2:	4413      	add	r3, r2
    2db4:	009b      	lsls	r3, r3, #2
    2db6:	440b      	add	r3, r1
    2db8:	681b      	ldr	r3, [r3, #0]
    2dba:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    2dbc:	4918      	ldr	r1, [pc, #96]	; (2e20 <sjsu::InitializeDataSection()+0x94>)
    2dbe:	697a      	ldr	r2, [r7, #20]
    2dc0:	4613      	mov	r3, r2
    2dc2:	005b      	lsls	r3, r3, #1
    2dc4:	4413      	add	r3, r2
    2dc6:	009b      	lsls	r3, r3, #2
    2dc8:	440b      	add	r3, r1
    2dca:	685b      	ldr	r3, [r3, #4]
    2dcc:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    2dce:	4914      	ldr	r1, [pc, #80]	; (2e20 <sjsu::InitializeDataSection()+0x94>)
    2dd0:	697a      	ldr	r2, [r7, #20]
    2dd2:	4613      	mov	r3, r2
    2dd4:	005b      	lsls	r3, r3, #1
    2dd6:	4413      	add	r3, r2
    2dd8:	009b      	lsls	r3, r3, #2
    2dda:	440b      	add	r3, r1
    2ddc:	3308      	adds	r3, #8
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    2de2:	2300      	movs	r3, #0
    2de4:	613b      	str	r3, [r7, #16]
    2de6:	693a      	ldr	r2, [r7, #16]
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	429a      	cmp	r2, r3
    2dec:	d20d      	bcs.n	2e0a <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    2dee:	693b      	ldr	r3, [r7, #16]
    2df0:	009b      	lsls	r3, r3, #2
    2df2:	68fa      	ldr	r2, [r7, #12]
    2df4:	441a      	add	r2, r3
    2df6:	693b      	ldr	r3, [r7, #16]
    2df8:	009b      	lsls	r3, r3, #2
    2dfa:	68b9      	ldr	r1, [r7, #8]
    2dfc:	440b      	add	r3, r1
    2dfe:	6812      	ldr	r2, [r2, #0]
    2e00:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2e02:	693b      	ldr	r3, [r7, #16]
    2e04:	3301      	adds	r3, #1
    2e06:	613b      	str	r3, [r7, #16]
    2e08:	e7ed      	b.n	2de6 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2e0a:	697b      	ldr	r3, [r7, #20]
    2e0c:	3301      	adds	r3, #1
    2e0e:	617b      	str	r3, [r7, #20]
    2e10:	e7c1      	b.n	2d96 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    2e12:	bf00      	nop
    2e14:	371c      	adds	r7, #28
    2e16:	46bd      	mov	sp, r7
    2e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e1c:	4770      	bx	lr
    2e1e:	bf00      	nop
    2e20:	000000e4 	.word	0x000000e4
    2e24:	000000fc 	.word	0x000000fc

00002e28 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    2e28:	b480      	push	{r7}
    2e2a:	b085      	sub	sp, #20
    2e2c:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2e2e:	2300      	movs	r3, #0
    2e30:	60fb      	str	r3, [r7, #12]
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	00db      	lsls	r3, r3, #3
    2e36:	4a15      	ldr	r2, [pc, #84]	; (2e8c <sjsu::InitializeBssSection()+0x64>)
    2e38:	4413      	add	r3, r2
    2e3a:	4a15      	ldr	r2, [pc, #84]	; (2e90 <sjsu::InitializeBssSection()+0x68>)
    2e3c:	4293      	cmp	r3, r2
    2e3e:	d21e      	bcs.n	2e7e <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    2e40:	4a12      	ldr	r2, [pc, #72]	; (2e8c <sjsu::InitializeBssSection()+0x64>)
    2e42:	68fb      	ldr	r3, [r7, #12]
    2e44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2e48:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    2e4a:	4a10      	ldr	r2, [pc, #64]	; (2e8c <sjsu::InitializeBssSection()+0x64>)
    2e4c:	68fb      	ldr	r3, [r7, #12]
    2e4e:	00db      	lsls	r3, r3, #3
    2e50:	4413      	add	r3, r2
    2e52:	685b      	ldr	r3, [r3, #4]
    2e54:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    2e56:	2300      	movs	r3, #0
    2e58:	60bb      	str	r3, [r7, #8]
    2e5a:	68ba      	ldr	r2, [r7, #8]
    2e5c:	683b      	ldr	r3, [r7, #0]
    2e5e:	429a      	cmp	r2, r3
    2e60:	d209      	bcs.n	2e76 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    2e62:	68bb      	ldr	r3, [r7, #8]
    2e64:	009b      	lsls	r3, r3, #2
    2e66:	687a      	ldr	r2, [r7, #4]
    2e68:	4413      	add	r3, r2
    2e6a:	2200      	movs	r2, #0
    2e6c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2e6e:	68bb      	ldr	r3, [r7, #8]
    2e70:	3301      	adds	r3, #1
    2e72:	60bb      	str	r3, [r7, #8]
    2e74:	e7f1      	b.n	2e5a <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	3301      	adds	r3, #1
    2e7a:	60fb      	str	r3, [r7, #12]
    2e7c:	e7d9      	b.n	2e32 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    2e7e:	bf00      	nop
    2e80:	3714      	adds	r7, #20
    2e82:	46bd      	mov	sp, r7
    2e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e88:	4770      	bx	lr
    2e8a:	bf00      	nop
    2e8c:	000000fc 	.word	0x000000fc
    2e90:	0000010c 	.word	0x0000010c

00002e94 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    2e94:	b580      	push	{r7, lr}
    2e96:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    2e98:	f7ff ff78 	bl	2d8c <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    2e9c:	f7ff ffc4 	bl	2e28 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    2ea0:	f005 f844 	bl	7f2c <__libc_init_array>
}
    2ea4:	bf00      	nop
    2ea6:	bd80      	pop	{r7, pc}

00002ea8 <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    2ea8:	b580      	push	{r7, lr}
    2eaa:	b08c      	sub	sp, #48	; 0x30
    2eac:	af02      	add	r7, sp, #8
    2eae:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	685b      	ldr	r3, [r3, #4]
    2eba:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	689b      	ldr	r3, [r3, #8]
    2ec0:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	68db      	ldr	r3, [r3, #12]
    2ec6:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    2ec8:	687b      	ldr	r3, [r7, #4]
    2eca:	691b      	ldr	r3, [r3, #16]
    2ecc:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	695b      	ldr	r3, [r3, #20]
    2ed2:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	699b      	ldr	r3, [r3, #24]
    2ed8:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	69db      	ldr	r3, [r3, #28]
    2ede:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    2ee0:	480d      	ldr	r0, [pc, #52]	; (2f18 <GetRegistersFromStack+0x70>)
    2ee2:	f002 f8db 	bl	509c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    2ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2ee8:	6a3a      	ldr	r2, [r7, #32]
    2eea:	69f8      	ldr	r0, [r7, #28]
    2eec:	69bb      	ldr	r3, [r7, #24]
    2eee:	9300      	str	r3, [sp, #0]
    2ef0:	4603      	mov	r3, r0
    2ef2:	480a      	ldr	r0, [pc, #40]	; (2f1c <GetRegistersFromStack+0x74>)
    2ef4:	f002 f8d2 	bl	509c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    2ef8:	6979      	ldr	r1, [r7, #20]
    2efa:	693a      	ldr	r2, [r7, #16]
    2efc:	68f8      	ldr	r0, [r7, #12]
    2efe:	68bb      	ldr	r3, [r7, #8]
    2f00:	9300      	str	r3, [sp, #0]
    2f02:	4603      	mov	r3, r0
    2f04:	4806      	ldr	r0, [pc, #24]	; (2f20 <GetRegistersFromStack+0x78>)
    2f06:	f002 f8c9 	bl	509c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	4619      	mov	r1, r3
    2f0e:	2001      	movs	r0, #1
    2f10:	f7fd fcda 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    2f14:	e7fe      	b.n	2f14 <GetRegistersFromStack+0x6c>
    2f16:	bf00      	nop
    2f18:	00008f74 	.word	0x00008f74
    2f1c:	00008fa0 	.word	0x00008fa0
    2f20:	00008fd4 	.word	0x00008fd4

00002f24 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    2f24:	b480      	push	{r7}
    2f26:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    2f28:	f01e 0f04 	tst.w	lr, #4
    2f2c:	bf0c      	ite	eq
    2f2e:	f3ef 8008 	mrseq	r0, MSP
    2f32:	f3ef 8009 	mrsne	r0, PSP
    2f36:	6981      	ldr	r1, [r0, #24]
    2f38:	4a00      	ldr	r2, [pc, #0]	; (2f3c <handler2_address_const>)
    2f3a:	4710      	bx	r2

00002f3c <handler2_address_const>:
    2f3c:	00002ea9 	.word	0x00002ea9
    }
  }
    2f40:	bf00      	nop
    2f42:	46bd      	mov	sp, r7
    2f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f48:	4770      	bx	lr
    2f4a:	Address 0x0000000000002f4a is out of bounds.


00002f4c <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    2f4c:	b580      	push	{r7, lr}
    2f4e:	b084      	sub	sp, #16
    2f50:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    2f52:	4b10      	ldr	r3, [pc, #64]	; (2f94 <ArmResetHandler+0x48>)
    2f54:	60fb      	str	r3, [r7, #12]
    2f56:	68fb      	ldr	r3, [r7, #12]
    2f58:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    2f5a:	683b      	ldr	r3, [r7, #0]
    2f5c:	f383 8809 	msr	PSP, r3
    2f60:	68fb      	ldr	r3, [r7, #12]
    2f62:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    2f6a:	f7ff ff93 	bl	2e94 <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    2f6e:	f002 fc3f 	bl	57f0 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    2f72:	f7ff f9dd 	bl	2330 <main>
    2f76:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    2f78:	68bb      	ldr	r3, [r7, #8]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	db04      	blt.n	2f88 <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    2f7e:	68b9      	ldr	r1, [r7, #8]
    2f80:	4805      	ldr	r0, [pc, #20]	; (2f98 <ArmResetHandler+0x4c>)
    2f82:	f002 f88b 	bl	509c <printf>
    2f86:	e003      	b.n	2f90 <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    2f88:	68b9      	ldr	r1, [r7, #8]
    2f8a:	4804      	ldr	r0, [pc, #16]	; (2f9c <ArmResetHandler+0x50>)
    2f8c:	f002 f886 	bl	509c <printf>
    2f90:	e7fe      	b.n	2f90 <ArmResetHandler+0x44>
    2f92:	bf00      	nop
    2f94:	10010000 	.word	0x10010000
    2f98:	0000900c 	.word	0x0000900c
    2f9c:	00009040 	.word	0x00009040

00002fa0 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b082      	sub	sp, #8
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
    2fa8:	6039      	str	r1, [r7, #0]
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	2b01      	cmp	r3, #1
    2fae:	d111      	bne.n	2fd4 <__static_initialization_and_destruction_0(int, int)+0x34>
    2fb0:	683b      	ldr	r3, [r7, #0]
    2fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2fb6:	4293      	cmp	r3, r2
    2fb8:	d10c      	bne.n	2fd4 <__static_initialization_and_destruction_0(int, int)+0x34>
    2fba:	4b08      	ldr	r3, [pc, #32]	; (2fdc <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2fbc:	681b      	ldr	r3, [r3, #0]
    2fbe:	f003 0301 	and.w	r3, r3, #1
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d106      	bne.n	2fd4 <__static_initialization_and_destruction_0(int, int)+0x34>
    2fc6:	4b05      	ldr	r3, [pc, #20]	; (2fdc <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2fc8:	2201      	movs	r2, #1
    2fca:	601a      	str	r2, [r3, #0]
    2fcc:	4b04      	ldr	r3, [pc, #16]	; (2fe0 <__static_initialization_and_destruction_0(int, int)+0x40>)
    2fce:	4618      	mov	r0, r3
    2fd0:	f7fe fd36 	bl	1a40 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    2fd4:	bf00      	nop
    2fd6:	3708      	adds	r7, #8
    2fd8:	46bd      	mov	sp, r7
    2fda:	bd80      	pop	{r7, pc}
    2fdc:	10000314 	.word	0x10000314
    2fe0:	10000180 	.word	0x10000180

00002fe4 <_GLOBAL__sub_I_GetRegistersFromStack>:
    2fe4:	b580      	push	{r7, lr}
    2fe6:	af00      	add	r7, sp, #0
    2fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2fec:	2001      	movs	r0, #1
    2fee:	f7ff ffd7 	bl	2fa0 <__static_initialization_and_destruction_0(int, int)>
    2ff2:	bd80      	pop	{r7, pc}

00002ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2ff4:	b480      	push	{r7}
    2ff6:	b083      	sub	sp, #12
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	f103 0208 	add.w	r2, r3, #8
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    300c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	f103 0208 	add.w	r2, r3, #8
    3014:	687b      	ldr	r3, [r7, #4]
    3016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	f103 0208 	add.w	r2, r3, #8
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	2200      	movs	r2, #0
    3026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3028:	bf00      	nop
    302a:	370c      	adds	r7, #12
    302c:	46bd      	mov	sp, r7
    302e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3032:	4770      	bx	lr

00003034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    3034:	b480      	push	{r7}
    3036:	b083      	sub	sp, #12
    3038:	af00      	add	r7, sp, #0
    303a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	2200      	movs	r2, #0
    3040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3042:	bf00      	nop
    3044:	370c      	adds	r7, #12
    3046:	46bd      	mov	sp, r7
    3048:	f85d 7b04 	ldr.w	r7, [sp], #4
    304c:	4770      	bx	lr

0000304e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    304e:	b480      	push	{r7}
    3050:	b085      	sub	sp, #20
    3052:	af00      	add	r7, sp, #0
    3054:	6078      	str	r0, [r7, #4]
    3056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	685b      	ldr	r3, [r3, #4]
    305c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    305e:	683b      	ldr	r3, [r7, #0]
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	689a      	ldr	r2, [r3, #8]
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	689b      	ldr	r3, [r3, #8]
    3070:	683a      	ldr	r2, [r7, #0]
    3072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3074:	68fb      	ldr	r3, [r7, #12]
    3076:	683a      	ldr	r2, [r7, #0]
    3078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    307a:	683b      	ldr	r3, [r7, #0]
    307c:	687a      	ldr	r2, [r7, #4]
    307e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	1c5a      	adds	r2, r3, #1
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	601a      	str	r2, [r3, #0]
}
    308a:	bf00      	nop
    308c:	3714      	adds	r7, #20
    308e:	46bd      	mov	sp, r7
    3090:	f85d 7b04 	ldr.w	r7, [sp], #4
    3094:	4770      	bx	lr

00003096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3096:	b480      	push	{r7}
    3098:	b085      	sub	sp, #20
    309a:	af00      	add	r7, sp, #0
    309c:	6078      	str	r0, [r7, #4]
    309e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    30a0:	683b      	ldr	r3, [r7, #0]
    30a2:	681b      	ldr	r3, [r3, #0]
    30a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    30a6:	68bb      	ldr	r3, [r7, #8]
    30a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    30ac:	d103      	bne.n	30b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	691b      	ldr	r3, [r3, #16]
    30b2:	60fb      	str	r3, [r7, #12]
    30b4:	e00c      	b.n	30d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	3308      	adds	r3, #8
    30ba:	60fb      	str	r3, [r7, #12]
    30bc:	e002      	b.n	30c4 <vListInsert+0x2e>
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	685b      	ldr	r3, [r3, #4]
    30c2:	60fb      	str	r3, [r7, #12]
    30c4:	68fb      	ldr	r3, [r7, #12]
    30c6:	685b      	ldr	r3, [r3, #4]
    30c8:	681b      	ldr	r3, [r3, #0]
    30ca:	68ba      	ldr	r2, [r7, #8]
    30cc:	429a      	cmp	r2, r3
    30ce:	d2f6      	bcs.n	30be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	685a      	ldr	r2, [r3, #4]
    30d4:	683b      	ldr	r3, [r7, #0]
    30d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    30d8:	683b      	ldr	r3, [r7, #0]
    30da:	685b      	ldr	r3, [r3, #4]
    30dc:	683a      	ldr	r2, [r7, #0]
    30de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    30e0:	683b      	ldr	r3, [r7, #0]
    30e2:	68fa      	ldr	r2, [r7, #12]
    30e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    30e6:	68fb      	ldr	r3, [r7, #12]
    30e8:	683a      	ldr	r2, [r7, #0]
    30ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    30ec:	683b      	ldr	r3, [r7, #0]
    30ee:	687a      	ldr	r2, [r7, #4]
    30f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	681b      	ldr	r3, [r3, #0]
    30f6:	1c5a      	adds	r2, r3, #1
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	601a      	str	r2, [r3, #0]
}
    30fc:	bf00      	nop
    30fe:	3714      	adds	r7, #20
    3100:	46bd      	mov	sp, r7
    3102:	f85d 7b04 	ldr.w	r7, [sp], #4
    3106:	4770      	bx	lr

00003108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    3108:	b480      	push	{r7}
    310a:	b085      	sub	sp, #20
    310c:	af00      	add	r7, sp, #0
    310e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	691b      	ldr	r3, [r3, #16]
    3114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	685b      	ldr	r3, [r3, #4]
    311a:	687a      	ldr	r2, [r7, #4]
    311c:	6892      	ldr	r2, [r2, #8]
    311e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	689b      	ldr	r3, [r3, #8]
    3124:	687a      	ldr	r2, [r7, #4]
    3126:	6852      	ldr	r2, [r2, #4]
    3128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	685b      	ldr	r3, [r3, #4]
    312e:	687a      	ldr	r2, [r7, #4]
    3130:	429a      	cmp	r2, r3
    3132:	d103      	bne.n	313c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	689a      	ldr	r2, [r3, #8]
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	2200      	movs	r2, #0
    3140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	681b      	ldr	r3, [r3, #0]
    3146:	1e5a      	subs	r2, r3, #1
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    314c:	68fb      	ldr	r3, [r7, #12]
    314e:	681b      	ldr	r3, [r3, #0]
}
    3150:	4618      	mov	r0, r3
    3152:	3714      	adds	r7, #20
    3154:	46bd      	mov	sp, r7
    3156:	f85d 7b04 	ldr.w	r7, [sp], #4
    315a:	4770      	bx	lr

0000315c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    315c:	b580      	push	{r7, lr}
    315e:	b08a      	sub	sp, #40	; 0x28
    3160:	af04      	add	r7, sp, #16
    3162:	60f8      	str	r0, [r7, #12]
    3164:	60b9      	str	r1, [r7, #8]
    3166:	607a      	str	r2, [r7, #4]
    3168:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    316c:	2b00      	cmp	r3, #0
    316e:	d01e      	beq.n	31ae <xTaskCreateStatic+0x52>
    3170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3172:	2b00      	cmp	r3, #0
    3174:	d01b      	beq.n	31ae <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    3176:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3178:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    317a:	697b      	ldr	r3, [r7, #20]
    317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    317e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    3180:	697b      	ldr	r3, [r7, #20]
    3182:	2202      	movs	r2, #2
    3184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    3188:	2300      	movs	r3, #0
    318a:	9303      	str	r3, [sp, #12]
    318c:	697b      	ldr	r3, [r7, #20]
    318e:	9302      	str	r3, [sp, #8]
    3190:	f107 0310 	add.w	r3, r7, #16
    3194:	9301      	str	r3, [sp, #4]
    3196:	6a3b      	ldr	r3, [r7, #32]
    3198:	9300      	str	r3, [sp, #0]
    319a:	683b      	ldr	r3, [r7, #0]
    319c:	687a      	ldr	r2, [r7, #4]
    319e:	68b9      	ldr	r1, [r7, #8]
    31a0:	68f8      	ldr	r0, [r7, #12]
    31a2:	f000 f850 	bl	3246 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    31a6:	6978      	ldr	r0, [r7, #20]
    31a8:	f000 f8c8 	bl	333c <prvAddNewTaskToReadyList>
    31ac:	e001      	b.n	31b2 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
    31ae:	2300      	movs	r3, #0
    31b0:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
    31b2:	693b      	ldr	r3, [r7, #16]
	}
    31b4:	4618      	mov	r0, r3
    31b6:	3718      	adds	r7, #24
    31b8:	46bd      	mov	sp, r7
    31ba:	bd80      	pop	{r7, pc}

000031bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    31bc:	b580      	push	{r7, lr}
    31be:	b08c      	sub	sp, #48	; 0x30
    31c0:	af04      	add	r7, sp, #16
    31c2:	60f8      	str	r0, [r7, #12]
    31c4:	60b9      	str	r1, [r7, #8]
    31c6:	603b      	str	r3, [r7, #0]
    31c8:	4613      	mov	r3, r2
    31ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    31cc:	88fb      	ldrh	r3, [r7, #6]
    31ce:	009b      	lsls	r3, r3, #2
    31d0:	4618      	mov	r0, r3
    31d2:	f000 fde5 	bl	3da0 <pvPortMalloc>
    31d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    31d8:	697b      	ldr	r3, [r7, #20]
    31da:	2b00      	cmp	r3, #0
    31dc:	d00e      	beq.n	31fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    31de:	2060      	movs	r0, #96	; 0x60
    31e0:	f000 fdde 	bl	3da0 <pvPortMalloc>
    31e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    31e6:	69fb      	ldr	r3, [r7, #28]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d003      	beq.n	31f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    31ec:	69fb      	ldr	r3, [r7, #28]
    31ee:	697a      	ldr	r2, [r7, #20]
    31f0:	631a      	str	r2, [r3, #48]	; 0x30
    31f2:	e005      	b.n	3200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    31f4:	6978      	ldr	r0, [r7, #20]
    31f6:	f000 fde5 	bl	3dc4 <vPortFree>
    31fa:	e001      	b.n	3200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    31fc:	2300      	movs	r3, #0
    31fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3200:	69fb      	ldr	r3, [r7, #28]
    3202:	2b00      	cmp	r3, #0
    3204:	d017      	beq.n	3236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    3206:	69fb      	ldr	r3, [r7, #28]
    3208:	2200      	movs	r2, #0
    320a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    320e:	88fa      	ldrh	r2, [r7, #6]
    3210:	2300      	movs	r3, #0
    3212:	9303      	str	r3, [sp, #12]
    3214:	69fb      	ldr	r3, [r7, #28]
    3216:	9302      	str	r3, [sp, #8]
    3218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    321a:	9301      	str	r3, [sp, #4]
    321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    321e:	9300      	str	r3, [sp, #0]
    3220:	683b      	ldr	r3, [r7, #0]
    3222:	68b9      	ldr	r1, [r7, #8]
    3224:	68f8      	ldr	r0, [r7, #12]
    3226:	f000 f80e 	bl	3246 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    322a:	69f8      	ldr	r0, [r7, #28]
    322c:	f000 f886 	bl	333c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    3230:	2301      	movs	r3, #1
    3232:	61bb      	str	r3, [r7, #24]
    3234:	e002      	b.n	323c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    323a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    323c:	69bb      	ldr	r3, [r7, #24]
	}
    323e:	4618      	mov	r0, r3
    3240:	3720      	adds	r7, #32
    3242:	46bd      	mov	sp, r7
    3244:	bd80      	pop	{r7, pc}

00003246 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    3246:	b580      	push	{r7, lr}
    3248:	b086      	sub	sp, #24
    324a:	af00      	add	r7, sp, #0
    324c:	60f8      	str	r0, [r7, #12]
    324e:	60b9      	str	r1, [r7, #8]
    3250:	607a      	str	r2, [r7, #4]
    3252:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    3254:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3256:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	009b      	lsls	r3, r3, #2
    325c:	461a      	mov	r2, r3
    325e:	21a5      	movs	r1, #165	; 0xa5
    3260:	f004 fea3 	bl	7faa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3264:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    326e:	3b01      	subs	r3, #1
    3270:	009b      	lsls	r3, r3, #2
    3272:	4413      	add	r3, r2
    3274:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3276:	693b      	ldr	r3, [r7, #16]
    3278:	f023 0307 	bic.w	r3, r3, #7
    327c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    327e:	2300      	movs	r3, #0
    3280:	617b      	str	r3, [r7, #20]
    3282:	e012      	b.n	32aa <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3284:	68ba      	ldr	r2, [r7, #8]
    3286:	697b      	ldr	r3, [r7, #20]
    3288:	4413      	add	r3, r2
    328a:	7819      	ldrb	r1, [r3, #0]
    328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    328e:	697b      	ldr	r3, [r7, #20]
    3290:	4413      	add	r3, r2
    3292:	3334      	adds	r3, #52	; 0x34
    3294:	460a      	mov	r2, r1
    3296:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3298:	68ba      	ldr	r2, [r7, #8]
    329a:	697b      	ldr	r3, [r7, #20]
    329c:	4413      	add	r3, r2
    329e:	781b      	ldrb	r3, [r3, #0]
    32a0:	2b00      	cmp	r3, #0
    32a2:	d006      	beq.n	32b2 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    32a4:	697b      	ldr	r3, [r7, #20]
    32a6:	3301      	adds	r3, #1
    32a8:	617b      	str	r3, [r7, #20]
    32aa:	697b      	ldr	r3, [r7, #20]
    32ac:	2b0f      	cmp	r3, #15
    32ae:	d9e9      	bls.n	3284 <prvInitialiseNewTask+0x3e>
    32b0:	e000      	b.n	32b4 <prvInitialiseNewTask+0x6e>
		{
			break;
    32b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    32b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32b6:	2200      	movs	r2, #0
    32b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    32bc:	6a3b      	ldr	r3, [r7, #32]
    32be:	2b04      	cmp	r3, #4
    32c0:	d901      	bls.n	32c6 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    32c2:	2304      	movs	r3, #4
    32c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    32c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32c8:	6a3a      	ldr	r2, [r7, #32]
    32ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    32cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32ce:	6a3a      	ldr	r2, [r7, #32]
    32d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    32d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32d4:	2200      	movs	r2, #0
    32d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    32d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32da:	3304      	adds	r3, #4
    32dc:	4618      	mov	r0, r3
    32de:	f7ff fea9 	bl	3034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    32e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32e4:	3318      	adds	r3, #24
    32e6:	4618      	mov	r0, r3
    32e8:	f7ff fea4 	bl	3034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    32ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    32f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    32f2:	6a3b      	ldr	r3, [r7, #32]
    32f4:	f1c3 0205 	rsb	r2, r3, #5
    32f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    32fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3300:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    3302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3304:	2200      	movs	r2, #0
    3306:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    3308:	6abb      	ldr	r3, [r7, #40]	; 0x28
    330a:	2200      	movs	r2, #0
    330c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3310:	2200      	movs	r2, #0
    3312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3316:	683a      	ldr	r2, [r7, #0]
    3318:	68f9      	ldr	r1, [r7, #12]
    331a:	6938      	ldr	r0, [r7, #16]
    331c:	f002 fb6c 	bl	59f8 <pxPortInitialiseStack>
    3320:	4602      	mov	r2, r0
    3322:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3324:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    3326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3328:	2b00      	cmp	r3, #0
    332a:	d002      	beq.n	3332 <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    332e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3332:	bf00      	nop
    3334:	3718      	adds	r7, #24
    3336:	46bd      	mov	sp, r7
    3338:	bd80      	pop	{r7, pc}
    333a:	Address 0x000000000000333a is out of bounds.


0000333c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    333c:	b580      	push	{r7, lr}
    333e:	b082      	sub	sp, #8
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3344:	f002 fbf6 	bl	5b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    3348:	4b2c      	ldr	r3, [pc, #176]	; (33fc <prvAddNewTaskToReadyList+0xc0>)
    334a:	681b      	ldr	r3, [r3, #0]
    334c:	3301      	adds	r3, #1
    334e:	4a2b      	ldr	r2, [pc, #172]	; (33fc <prvAddNewTaskToReadyList+0xc0>)
    3350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    3352:	4b2b      	ldr	r3, [pc, #172]	; (3400 <prvAddNewTaskToReadyList+0xc4>)
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	2b00      	cmp	r3, #0
    3358:	d109      	bne.n	336e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    335a:	4a29      	ldr	r2, [pc, #164]	; (3400 <prvAddNewTaskToReadyList+0xc4>)
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3360:	4b26      	ldr	r3, [pc, #152]	; (33fc <prvAddNewTaskToReadyList+0xc0>)
    3362:	681b      	ldr	r3, [r3, #0]
    3364:	2b01      	cmp	r3, #1
    3366:	d110      	bne.n	338a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    3368:	f000 fb82 	bl	3a70 <prvInitialiseTaskLists>
    336c:	e00d      	b.n	338a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    336e:	4b25      	ldr	r3, [pc, #148]	; (3404 <prvAddNewTaskToReadyList+0xc8>)
    3370:	681b      	ldr	r3, [r3, #0]
    3372:	2b00      	cmp	r3, #0
    3374:	d109      	bne.n	338a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3376:	4b22      	ldr	r3, [pc, #136]	; (3400 <prvAddNewTaskToReadyList+0xc4>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3380:	429a      	cmp	r2, r3
    3382:	d802      	bhi.n	338a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    3384:	4a1e      	ldr	r2, [pc, #120]	; (3400 <prvAddNewTaskToReadyList+0xc4>)
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    338a:	4b1f      	ldr	r3, [pc, #124]	; (3408 <prvAddNewTaskToReadyList+0xcc>)
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	3301      	adds	r3, #1
    3390:	4a1d      	ldr	r2, [pc, #116]	; (3408 <prvAddNewTaskToReadyList+0xcc>)
    3392:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    3394:	4b1c      	ldr	r3, [pc, #112]	; (3408 <prvAddNewTaskToReadyList+0xcc>)
    3396:	681a      	ldr	r2, [r3, #0]
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33a0:	2201      	movs	r2, #1
    33a2:	409a      	lsls	r2, r3
    33a4:	4b19      	ldr	r3, [pc, #100]	; (340c <prvAddNewTaskToReadyList+0xd0>)
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	4313      	orrs	r3, r2
    33aa:	4a18      	ldr	r2, [pc, #96]	; (340c <prvAddNewTaskToReadyList+0xd0>)
    33ac:	6013      	str	r3, [r2, #0]
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33b2:	4613      	mov	r3, r2
    33b4:	009b      	lsls	r3, r3, #2
    33b6:	4413      	add	r3, r2
    33b8:	009b      	lsls	r3, r3, #2
    33ba:	4a15      	ldr	r2, [pc, #84]	; (3410 <prvAddNewTaskToReadyList+0xd4>)
    33bc:	441a      	add	r2, r3
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	3304      	adds	r3, #4
    33c2:	4619      	mov	r1, r3
    33c4:	4610      	mov	r0, r2
    33c6:	f7ff fe42 	bl	304e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    33ca:	f002 fbcd 	bl	5b68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    33ce:	4b0d      	ldr	r3, [pc, #52]	; (3404 <prvAddNewTaskToReadyList+0xc8>)
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d00e      	beq.n	33f4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    33d6:	4b0a      	ldr	r3, [pc, #40]	; (3400 <prvAddNewTaskToReadyList+0xc4>)
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33e0:	429a      	cmp	r2, r3
    33e2:	d207      	bcs.n	33f4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
    33e4:	4b0b      	ldr	r3, [pc, #44]	; (3414 <prvAddNewTaskToReadyList+0xd8>)
    33e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    33ea:	601a      	str	r2, [r3, #0]
    33ec:	f3bf 8f4f 	dsb	sy
    33f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    33f4:	bf00      	nop
    33f6:	3708      	adds	r7, #8
    33f8:	46bd      	mov	sp, r7
    33fa:	bd80      	pop	{r7, pc}
    33fc:	10000404 	.word	0x10000404
    3400:	1000032c 	.word	0x1000032c
    3404:	10000410 	.word	0x10000410
    3408:	10000420 	.word	0x10000420
    340c:	1000040c 	.word	0x1000040c
    3410:	10000330 	.word	0x10000330
    3414:	e000ed04 	.word	0xe000ed04

00003418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3418:	b580      	push	{r7, lr}
    341a:	b084      	sub	sp, #16
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    3420:	2300      	movs	r3, #0
    3422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	2b00      	cmp	r3, #0
    3428:	d008      	beq.n	343c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    342a:	f000 f86f 	bl	350c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    342e:	2100      	movs	r1, #0
    3430:	6878      	ldr	r0, [r7, #4]
    3432:	f000 fc4f 	bl	3cd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3436:	f000 f877 	bl	3528 <xTaskResumeAll>
    343a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    343c:	68fb      	ldr	r3, [r7, #12]
    343e:	2b00      	cmp	r3, #0
    3440:	d107      	bne.n	3452 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    3442:	4b06      	ldr	r3, [pc, #24]	; (345c <vTaskDelay+0x44>)
    3444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3448:	601a      	str	r2, [r3, #0]
    344a:	f3bf 8f4f 	dsb	sy
    344e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3452:	bf00      	nop
    3454:	3710      	adds	r7, #16
    3456:	46bd      	mov	sp, r7
    3458:	bd80      	pop	{r7, pc}
    345a:	bf00      	nop
    345c:	e000ed04 	.word	0xe000ed04

00003460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3460:	b580      	push	{r7, lr}
    3462:	b08a      	sub	sp, #40	; 0x28
    3464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    3466:	2300      	movs	r3, #0
    3468:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    346a:	2300      	movs	r3, #0
    346c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    346e:	1d3a      	adds	r2, r7, #4
    3470:	f107 0108 	add.w	r1, r7, #8
    3474:	f107 030c 	add.w	r3, r7, #12
    3478:	4618      	mov	r0, r3
    347a:	f002 fbfb 	bl	5c74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    347e:	6879      	ldr	r1, [r7, #4]
    3480:	68bb      	ldr	r3, [r7, #8]
    3482:	68fa      	ldr	r2, [r7, #12]
    3484:	9202      	str	r2, [sp, #8]
    3486:	9301      	str	r3, [sp, #4]
    3488:	2300      	movs	r3, #0
    348a:	9300      	str	r3, [sp, #0]
    348c:	2300      	movs	r3, #0
    348e:	460a      	mov	r2, r1
    3490:	4918      	ldr	r1, [pc, #96]	; (34f4 <vTaskStartScheduler+0x94>)
    3492:	4819      	ldr	r0, [pc, #100]	; (34f8 <vTaskStartScheduler+0x98>)
    3494:	f7ff fe62 	bl	315c <xTaskCreateStatic>
    3498:	4602      	mov	r2, r0
    349a:	4b18      	ldr	r3, [pc, #96]	; (34fc <vTaskStartScheduler+0x9c>)
    349c:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    349e:	4b17      	ldr	r3, [pc, #92]	; (34fc <vTaskStartScheduler+0x9c>)
    34a0:	681b      	ldr	r3, [r3, #0]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d002      	beq.n	34ac <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
    34a6:	2301      	movs	r3, #1
    34a8:	617b      	str	r3, [r7, #20]
    34aa:	e001      	b.n	34b0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    34ac:	2300      	movs	r3, #0
    34ae:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    34b0:	697b      	ldr	r3, [r7, #20]
    34b2:	2b01      	cmp	r3, #1
    34b4:	d102      	bne.n	34bc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
    34b6:	f002 fc1d 	bl	5cf4 <xTimerCreateTimerTask>
    34ba:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    34bc:	697b      	ldr	r3, [r7, #20]
    34be:	2b01      	cmp	r3, #1
    34c0:	d114      	bne.n	34ec <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    34c2:	f04f 0328 	mov.w	r3, #40	; 0x28
    34c6:	f383 8811 	msr	BASEPRI, r3
    34ca:	f3bf 8f6f 	isb	sy
    34ce:	f3bf 8f4f 	dsb	sy
    34d2:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    34d4:	4b0a      	ldr	r3, [pc, #40]	; (3500 <vTaskStartScheduler+0xa0>)
    34d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    34dc:	4b09      	ldr	r3, [pc, #36]	; (3504 <vTaskStartScheduler+0xa4>)
    34de:	2201      	movs	r2, #1
    34e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    34e2:	4b09      	ldr	r3, [pc, #36]	; (3508 <vTaskStartScheduler+0xa8>)
    34e4:	2200      	movs	r2, #0
    34e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    34e8:	f002 fafa 	bl	5ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    34ec:	bf00      	nop
    34ee:	3718      	adds	r7, #24
    34f0:	46bd      	mov	sp, r7
    34f2:	bd80      	pop	{r7, pc}
    34f4:	00009074 	.word	0x00009074
    34f8:	00003a61 	.word	0x00003a61
    34fc:	10000428 	.word	0x10000428
    3500:	10000424 	.word	0x10000424
    3504:	10000410 	.word	0x10000410
    3508:	10000408 	.word	0x10000408

0000350c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    350c:	b480      	push	{r7}
    350e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3510:	4b04      	ldr	r3, [pc, #16]	; (3524 <vTaskSuspendAll+0x18>)
    3512:	681b      	ldr	r3, [r3, #0]
    3514:	3301      	adds	r3, #1
    3516:	4a03      	ldr	r2, [pc, #12]	; (3524 <vTaskSuspendAll+0x18>)
    3518:	6013      	str	r3, [r2, #0]
}
    351a:	bf00      	nop
    351c:	46bd      	mov	sp, r7
    351e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3522:	4770      	bx	lr
    3524:	1000042c 	.word	0x1000042c

00003528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3528:	b580      	push	{r7, lr}
    352a:	b084      	sub	sp, #16
    352c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    352e:	2300      	movs	r3, #0
    3530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    3532:	2300      	movs	r3, #0
    3534:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3536:	f002 fafd 	bl	5b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    353a:	4b39      	ldr	r3, [pc, #228]	; (3620 <xTaskResumeAll+0xf8>)
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	3b01      	subs	r3, #1
    3540:	4a37      	ldr	r2, [pc, #220]	; (3620 <xTaskResumeAll+0xf8>)
    3542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3544:	4b36      	ldr	r3, [pc, #216]	; (3620 <xTaskResumeAll+0xf8>)
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	2b00      	cmp	r3, #0
    354a:	d161      	bne.n	3610 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    354c:	4b35      	ldr	r3, [pc, #212]	; (3624 <xTaskResumeAll+0xfc>)
    354e:	681b      	ldr	r3, [r3, #0]
    3550:	2b00      	cmp	r3, #0
    3552:	d05d      	beq.n	3610 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3554:	e02e      	b.n	35b4 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3556:	4b34      	ldr	r3, [pc, #208]	; (3628 <xTaskResumeAll+0x100>)
    3558:	68db      	ldr	r3, [r3, #12]
    355a:	68db      	ldr	r3, [r3, #12]
    355c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    355e:	68fb      	ldr	r3, [r7, #12]
    3560:	3318      	adds	r3, #24
    3562:	4618      	mov	r0, r3
    3564:	f7ff fdd0 	bl	3108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3568:	68fb      	ldr	r3, [r7, #12]
    356a:	3304      	adds	r3, #4
    356c:	4618      	mov	r0, r3
    356e:	f7ff fdcb 	bl	3108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3572:	68fb      	ldr	r3, [r7, #12]
    3574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3576:	2201      	movs	r2, #1
    3578:	409a      	lsls	r2, r3
    357a:	4b2c      	ldr	r3, [pc, #176]	; (362c <xTaskResumeAll+0x104>)
    357c:	681b      	ldr	r3, [r3, #0]
    357e:	4313      	orrs	r3, r2
    3580:	4a2a      	ldr	r2, [pc, #168]	; (362c <xTaskResumeAll+0x104>)
    3582:	6013      	str	r3, [r2, #0]
    3584:	68fb      	ldr	r3, [r7, #12]
    3586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3588:	4613      	mov	r3, r2
    358a:	009b      	lsls	r3, r3, #2
    358c:	4413      	add	r3, r2
    358e:	009b      	lsls	r3, r3, #2
    3590:	4a27      	ldr	r2, [pc, #156]	; (3630 <xTaskResumeAll+0x108>)
    3592:	441a      	add	r2, r3
    3594:	68fb      	ldr	r3, [r7, #12]
    3596:	3304      	adds	r3, #4
    3598:	4619      	mov	r1, r3
    359a:	4610      	mov	r0, r2
    359c:	f7ff fd57 	bl	304e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    35a0:	68fb      	ldr	r3, [r7, #12]
    35a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35a4:	4b23      	ldr	r3, [pc, #140]	; (3634 <xTaskResumeAll+0x10c>)
    35a6:	681b      	ldr	r3, [r3, #0]
    35a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    35aa:	429a      	cmp	r2, r3
    35ac:	d302      	bcc.n	35b4 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    35ae:	4b22      	ldr	r3, [pc, #136]	; (3638 <xTaskResumeAll+0x110>)
    35b0:	2201      	movs	r2, #1
    35b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    35b4:	4b1c      	ldr	r3, [pc, #112]	; (3628 <xTaskResumeAll+0x100>)
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d1cc      	bne.n	3556 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    35bc:	68fb      	ldr	r3, [r7, #12]
    35be:	2b00      	cmp	r3, #0
    35c0:	d001      	beq.n	35c6 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    35c2:	f000 fadf 	bl	3b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    35c6:	4b1d      	ldr	r3, [pc, #116]	; (363c <xTaskResumeAll+0x114>)
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	2b00      	cmp	r3, #0
    35d0:	d010      	beq.n	35f4 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    35d2:	f000 f847 	bl	3664 <xTaskIncrementTick>
    35d6:	4603      	mov	r3, r0
    35d8:	2b00      	cmp	r3, #0
    35da:	d002      	beq.n	35e2 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    35dc:	4b16      	ldr	r3, [pc, #88]	; (3638 <xTaskResumeAll+0x110>)
    35de:	2201      	movs	r2, #1
    35e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	3b01      	subs	r3, #1
    35e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d1f1      	bne.n	35d2 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    35ee:	4b13      	ldr	r3, [pc, #76]	; (363c <xTaskResumeAll+0x114>)
    35f0:	2200      	movs	r2, #0
    35f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    35f4:	4b10      	ldr	r3, [pc, #64]	; (3638 <xTaskResumeAll+0x110>)
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d009      	beq.n	3610 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    35fc:	2301      	movs	r3, #1
    35fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3600:	4b0f      	ldr	r3, [pc, #60]	; (3640 <xTaskResumeAll+0x118>)
    3602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3606:	601a      	str	r2, [r3, #0]
    3608:	f3bf 8f4f 	dsb	sy
    360c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3610:	f002 faaa 	bl	5b68 <vPortExitCritical>

	return xAlreadyYielded;
    3614:	68bb      	ldr	r3, [r7, #8]
}
    3616:	4618      	mov	r0, r3
    3618:	3710      	adds	r7, #16
    361a:	46bd      	mov	sp, r7
    361c:	bd80      	pop	{r7, pc}
    361e:	bf00      	nop
    3620:	1000042c 	.word	0x1000042c
    3624:	10000404 	.word	0x10000404
    3628:	100003c4 	.word	0x100003c4
    362c:	1000040c 	.word	0x1000040c
    3630:	10000330 	.word	0x10000330
    3634:	1000032c 	.word	0x1000032c
    3638:	10000418 	.word	0x10000418
    363c:	10000414 	.word	0x10000414
    3640:	e000ed04 	.word	0xe000ed04

00003644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3644:	b480      	push	{r7}
    3646:	b083      	sub	sp, #12
    3648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    364a:	4b05      	ldr	r3, [pc, #20]	; (3660 <xTaskGetTickCount+0x1c>)
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    3650:	687b      	ldr	r3, [r7, #4]
}
    3652:	4618      	mov	r0, r3
    3654:	370c      	adds	r7, #12
    3656:	46bd      	mov	sp, r7
    3658:	f85d 7b04 	ldr.w	r7, [sp], #4
    365c:	4770      	bx	lr
    365e:	bf00      	nop
    3660:	10000408 	.word	0x10000408

00003664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3664:	b580      	push	{r7, lr}
    3666:	b086      	sub	sp, #24
    3668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    366a:	2300      	movs	r3, #0
    366c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    366e:	4b48      	ldr	r3, [pc, #288]	; (3790 <xTaskIncrementTick+0x12c>)
    3670:	681b      	ldr	r3, [r3, #0]
    3672:	2b00      	cmp	r3, #0
    3674:	d17c      	bne.n	3770 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3676:	4b47      	ldr	r3, [pc, #284]	; (3794 <xTaskIncrementTick+0x130>)
    3678:	681b      	ldr	r3, [r3, #0]
    367a:	3301      	adds	r3, #1
    367c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    367e:	4a45      	ldr	r2, [pc, #276]	; (3794 <xTaskIncrementTick+0x130>)
    3680:	693b      	ldr	r3, [r7, #16]
    3682:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3684:	693b      	ldr	r3, [r7, #16]
    3686:	2b00      	cmp	r3, #0
    3688:	d110      	bne.n	36ac <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
    368a:	4b43      	ldr	r3, [pc, #268]	; (3798 <xTaskIncrementTick+0x134>)
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	60fb      	str	r3, [r7, #12]
    3690:	4b42      	ldr	r3, [pc, #264]	; (379c <xTaskIncrementTick+0x138>)
    3692:	681b      	ldr	r3, [r3, #0]
    3694:	4a40      	ldr	r2, [pc, #256]	; (3798 <xTaskIncrementTick+0x134>)
    3696:	6013      	str	r3, [r2, #0]
    3698:	4a40      	ldr	r2, [pc, #256]	; (379c <xTaskIncrementTick+0x138>)
    369a:	68fb      	ldr	r3, [r7, #12]
    369c:	6013      	str	r3, [r2, #0]
    369e:	4b40      	ldr	r3, [pc, #256]	; (37a0 <xTaskIncrementTick+0x13c>)
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	3301      	adds	r3, #1
    36a4:	4a3e      	ldr	r2, [pc, #248]	; (37a0 <xTaskIncrementTick+0x13c>)
    36a6:	6013      	str	r3, [r2, #0]
    36a8:	f000 fa6c 	bl	3b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    36ac:	4b3d      	ldr	r3, [pc, #244]	; (37a4 <xTaskIncrementTick+0x140>)
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	693a      	ldr	r2, [r7, #16]
    36b2:	429a      	cmp	r2, r3
    36b4:	d34d      	bcc.n	3752 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    36b6:	4b38      	ldr	r3, [pc, #224]	; (3798 <xTaskIncrementTick+0x134>)
    36b8:	681b      	ldr	r3, [r3, #0]
    36ba:	681b      	ldr	r3, [r3, #0]
    36bc:	2b00      	cmp	r3, #0
    36be:	d101      	bne.n	36c4 <xTaskIncrementTick+0x60>
    36c0:	2301      	movs	r3, #1
    36c2:	e000      	b.n	36c6 <xTaskIncrementTick+0x62>
    36c4:	2300      	movs	r3, #0
    36c6:	2b00      	cmp	r3, #0
    36c8:	d004      	beq.n	36d4 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    36ca:	4b36      	ldr	r3, [pc, #216]	; (37a4 <xTaskIncrementTick+0x140>)
    36cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    36d0:	601a      	str	r2, [r3, #0]
					break;
    36d2:	e03e      	b.n	3752 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    36d4:	4b30      	ldr	r3, [pc, #192]	; (3798 <xTaskIncrementTick+0x134>)
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	68db      	ldr	r3, [r3, #12]
    36da:	68db      	ldr	r3, [r3, #12]
    36dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    36de:	68bb      	ldr	r3, [r7, #8]
    36e0:	685b      	ldr	r3, [r3, #4]
    36e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    36e4:	693a      	ldr	r2, [r7, #16]
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	429a      	cmp	r2, r3
    36ea:	d203      	bcs.n	36f4 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    36ec:	4a2d      	ldr	r2, [pc, #180]	; (37a4 <xTaskIncrementTick+0x140>)
    36ee:	687b      	ldr	r3, [r7, #4]
    36f0:	6013      	str	r3, [r2, #0]
						break;
    36f2:	e02e      	b.n	3752 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    36f4:	68bb      	ldr	r3, [r7, #8]
    36f6:	3304      	adds	r3, #4
    36f8:	4618      	mov	r0, r3
    36fa:	f7ff fd05 	bl	3108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    36fe:	68bb      	ldr	r3, [r7, #8]
    3700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3702:	2b00      	cmp	r3, #0
    3704:	d004      	beq.n	3710 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3706:	68bb      	ldr	r3, [r7, #8]
    3708:	3318      	adds	r3, #24
    370a:	4618      	mov	r0, r3
    370c:	f7ff fcfc 	bl	3108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    3710:	68bb      	ldr	r3, [r7, #8]
    3712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3714:	2201      	movs	r2, #1
    3716:	409a      	lsls	r2, r3
    3718:	4b23      	ldr	r3, [pc, #140]	; (37a8 <xTaskIncrementTick+0x144>)
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	4313      	orrs	r3, r2
    371e:	4a22      	ldr	r2, [pc, #136]	; (37a8 <xTaskIncrementTick+0x144>)
    3720:	6013      	str	r3, [r2, #0]
    3722:	68bb      	ldr	r3, [r7, #8]
    3724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3726:	4613      	mov	r3, r2
    3728:	009b      	lsls	r3, r3, #2
    372a:	4413      	add	r3, r2
    372c:	009b      	lsls	r3, r3, #2
    372e:	4a1f      	ldr	r2, [pc, #124]	; (37ac <xTaskIncrementTick+0x148>)
    3730:	441a      	add	r2, r3
    3732:	68bb      	ldr	r3, [r7, #8]
    3734:	3304      	adds	r3, #4
    3736:	4619      	mov	r1, r3
    3738:	4610      	mov	r0, r2
    373a:	f7ff fc88 	bl	304e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    373e:	68bb      	ldr	r3, [r7, #8]
    3740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3742:	4b1b      	ldr	r3, [pc, #108]	; (37b0 <xTaskIncrementTick+0x14c>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3748:	429a      	cmp	r2, r3
    374a:	d3b4      	bcc.n	36b6 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
    374c:	2301      	movs	r3, #1
    374e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3750:	e7b1      	b.n	36b6 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3752:	4b17      	ldr	r3, [pc, #92]	; (37b0 <xTaskIncrementTick+0x14c>)
    3754:	681b      	ldr	r3, [r3, #0]
    3756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3758:	4914      	ldr	r1, [pc, #80]	; (37ac <xTaskIncrementTick+0x148>)
    375a:	4613      	mov	r3, r2
    375c:	009b      	lsls	r3, r3, #2
    375e:	4413      	add	r3, r2
    3760:	009b      	lsls	r3, r3, #2
    3762:	440b      	add	r3, r1
    3764:	681b      	ldr	r3, [r3, #0]
    3766:	2b01      	cmp	r3, #1
    3768:	d907      	bls.n	377a <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
    376a:	2301      	movs	r3, #1
    376c:	617b      	str	r3, [r7, #20]
    376e:	e004      	b.n	377a <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3770:	4b10      	ldr	r3, [pc, #64]	; (37b4 <xTaskIncrementTick+0x150>)
    3772:	681b      	ldr	r3, [r3, #0]
    3774:	3301      	adds	r3, #1
    3776:	4a0f      	ldr	r2, [pc, #60]	; (37b4 <xTaskIncrementTick+0x150>)
    3778:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    377a:	4b0f      	ldr	r3, [pc, #60]	; (37b8 <xTaskIncrementTick+0x154>)
    377c:	681b      	ldr	r3, [r3, #0]
    377e:	2b00      	cmp	r3, #0
    3780:	d001      	beq.n	3786 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
    3782:	2301      	movs	r3, #1
    3784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    3786:	697b      	ldr	r3, [r7, #20]
}
    3788:	4618      	mov	r0, r3
    378a:	3718      	adds	r7, #24
    378c:	46bd      	mov	sp, r7
    378e:	bd80      	pop	{r7, pc}
    3790:	1000042c 	.word	0x1000042c
    3794:	10000408 	.word	0x10000408
    3798:	100003bc 	.word	0x100003bc
    379c:	100003c0 	.word	0x100003c0
    37a0:	1000041c 	.word	0x1000041c
    37a4:	10000424 	.word	0x10000424
    37a8:	1000040c 	.word	0x1000040c
    37ac:	10000330 	.word	0x10000330
    37b0:	1000032c 	.word	0x1000032c
    37b4:	10000414 	.word	0x10000414
    37b8:	10000418 	.word	0x10000418

000037bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    37bc:	b580      	push	{r7, lr}
    37be:	b084      	sub	sp, #16
    37c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    37c2:	4b28      	ldr	r3, [pc, #160]	; (3864 <vTaskSwitchContext+0xa8>)
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d003      	beq.n	37d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    37ca:	4b27      	ldr	r3, [pc, #156]	; (3868 <vTaskSwitchContext+0xac>)
    37cc:	2201      	movs	r2, #1
    37ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    37d0:	e043      	b.n	385a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    37d2:	4b25      	ldr	r3, [pc, #148]	; (3868 <vTaskSwitchContext+0xac>)
    37d4:	2200      	movs	r2, #0
    37d6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    37d8:	f001 ffd0 	bl	577c <ThreadRuntimeCounter>
    37dc:	4602      	mov	r2, r0
    37de:	4b23      	ldr	r3, [pc, #140]	; (386c <vTaskSwitchContext+0xb0>)
    37e0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    37e2:	4b22      	ldr	r3, [pc, #136]	; (386c <vTaskSwitchContext+0xb0>)
    37e4:	681a      	ldr	r2, [r3, #0]
    37e6:	4b22      	ldr	r3, [pc, #136]	; (3870 <vTaskSwitchContext+0xb4>)
    37e8:	681b      	ldr	r3, [r3, #0]
    37ea:	429a      	cmp	r2, r3
    37ec:	d909      	bls.n	3802 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    37ee:	4b21      	ldr	r3, [pc, #132]	; (3874 <vTaskSwitchContext+0xb8>)
    37f0:	681b      	ldr	r3, [r3, #0]
    37f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
    37f4:	4a1d      	ldr	r2, [pc, #116]	; (386c <vTaskSwitchContext+0xb0>)
    37f6:	6810      	ldr	r0, [r2, #0]
    37f8:	4a1d      	ldr	r2, [pc, #116]	; (3870 <vTaskSwitchContext+0xb4>)
    37fa:	6812      	ldr	r2, [r2, #0]
    37fc:	1a82      	subs	r2, r0, r2
    37fe:	440a      	add	r2, r1
    3800:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    3802:	4b1a      	ldr	r3, [pc, #104]	; (386c <vTaskSwitchContext+0xb0>)
    3804:	681b      	ldr	r3, [r3, #0]
    3806:	4a1a      	ldr	r2, [pc, #104]	; (3870 <vTaskSwitchContext+0xb4>)
    3808:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    380a:	4b1b      	ldr	r3, [pc, #108]	; (3878 <vTaskSwitchContext+0xbc>)
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	fab3 f383 	clz	r3, r3
    3816:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    3818:	78fb      	ldrb	r3, [r7, #3]
    381a:	f1c3 031f 	rsb	r3, r3, #31
    381e:	60fb      	str	r3, [r7, #12]
    3820:	68fa      	ldr	r2, [r7, #12]
    3822:	4613      	mov	r3, r2
    3824:	009b      	lsls	r3, r3, #2
    3826:	4413      	add	r3, r2
    3828:	009b      	lsls	r3, r3, #2
    382a:	4a14      	ldr	r2, [pc, #80]	; (387c <vTaskSwitchContext+0xc0>)
    382c:	4413      	add	r3, r2
    382e:	60bb      	str	r3, [r7, #8]
    3830:	68bb      	ldr	r3, [r7, #8]
    3832:	685b      	ldr	r3, [r3, #4]
    3834:	685a      	ldr	r2, [r3, #4]
    3836:	68bb      	ldr	r3, [r7, #8]
    3838:	605a      	str	r2, [r3, #4]
    383a:	68bb      	ldr	r3, [r7, #8]
    383c:	685a      	ldr	r2, [r3, #4]
    383e:	68bb      	ldr	r3, [r7, #8]
    3840:	3308      	adds	r3, #8
    3842:	429a      	cmp	r2, r3
    3844:	d104      	bne.n	3850 <vTaskSwitchContext+0x94>
    3846:	68bb      	ldr	r3, [r7, #8]
    3848:	685b      	ldr	r3, [r3, #4]
    384a:	685a      	ldr	r2, [r3, #4]
    384c:	68bb      	ldr	r3, [r7, #8]
    384e:	605a      	str	r2, [r3, #4]
    3850:	68bb      	ldr	r3, [r7, #8]
    3852:	685b      	ldr	r3, [r3, #4]
    3854:	68db      	ldr	r3, [r3, #12]
    3856:	4a07      	ldr	r2, [pc, #28]	; (3874 <vTaskSwitchContext+0xb8>)
    3858:	6013      	str	r3, [r2, #0]
}
    385a:	bf00      	nop
    385c:	3710      	adds	r7, #16
    385e:	46bd      	mov	sp, r7
    3860:	bd80      	pop	{r7, pc}
    3862:	bf00      	nop
    3864:	1000042c 	.word	0x1000042c
    3868:	10000418 	.word	0x10000418
    386c:	10000434 	.word	0x10000434
    3870:	10000430 	.word	0x10000430
    3874:	1000032c 	.word	0x1000032c
    3878:	1000040c 	.word	0x1000040c
    387c:	10000330 	.word	0x10000330

00003880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3880:	b580      	push	{r7, lr}
    3882:	b082      	sub	sp, #8
    3884:	af00      	add	r7, sp, #0
    3886:	6078      	str	r0, [r7, #4]
    3888:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    388a:	4b07      	ldr	r3, [pc, #28]	; (38a8 <vTaskPlaceOnEventList+0x28>)
    388c:	681b      	ldr	r3, [r3, #0]
    388e:	3318      	adds	r3, #24
    3890:	4619      	mov	r1, r3
    3892:	6878      	ldr	r0, [r7, #4]
    3894:	f7ff fbff 	bl	3096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3898:	2101      	movs	r1, #1
    389a:	6838      	ldr	r0, [r7, #0]
    389c:	f000 fa1a 	bl	3cd4 <prvAddCurrentTaskToDelayedList>
}
    38a0:	bf00      	nop
    38a2:	3708      	adds	r7, #8
    38a4:	46bd      	mov	sp, r7
    38a6:	bd80      	pop	{r7, pc}
    38a8:	1000032c 	.word	0x1000032c

000038ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    38ac:	b580      	push	{r7, lr}
    38ae:	b084      	sub	sp, #16
    38b0:	af00      	add	r7, sp, #0
    38b2:	60f8      	str	r0, [r7, #12]
    38b4:	60b9      	str	r1, [r7, #8]
    38b6:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    38b8:	4b0a      	ldr	r3, [pc, #40]	; (38e4 <vTaskPlaceOnEventListRestricted+0x38>)
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	3318      	adds	r3, #24
    38be:	4619      	mov	r1, r3
    38c0:	68f8      	ldr	r0, [r7, #12]
    38c2:	f7ff fbc4 	bl	304e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	2b00      	cmp	r3, #0
    38ca:	d002      	beq.n	38d2 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
    38cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    38d2:	6879      	ldr	r1, [r7, #4]
    38d4:	68b8      	ldr	r0, [r7, #8]
    38d6:	f000 f9fd 	bl	3cd4 <prvAddCurrentTaskToDelayedList>
	}
    38da:	bf00      	nop
    38dc:	3710      	adds	r7, #16
    38de:	46bd      	mov	sp, r7
    38e0:	bd80      	pop	{r7, pc}
    38e2:	bf00      	nop
    38e4:	1000032c 	.word	0x1000032c

000038e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    38e8:	b580      	push	{r7, lr}
    38ea:	b084      	sub	sp, #16
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    38f0:	687b      	ldr	r3, [r7, #4]
    38f2:	68db      	ldr	r3, [r3, #12]
    38f4:	68db      	ldr	r3, [r3, #12]
    38f6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    38f8:	68bb      	ldr	r3, [r7, #8]
    38fa:	3318      	adds	r3, #24
    38fc:	4618      	mov	r0, r3
    38fe:	f7ff fc03 	bl	3108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3902:	4b1d      	ldr	r3, [pc, #116]	; (3978 <xTaskRemoveFromEventList+0x90>)
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	2b00      	cmp	r3, #0
    3908:	d11c      	bne.n	3944 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    390a:	68bb      	ldr	r3, [r7, #8]
    390c:	3304      	adds	r3, #4
    390e:	4618      	mov	r0, r3
    3910:	f7ff fbfa 	bl	3108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3914:	68bb      	ldr	r3, [r7, #8]
    3916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3918:	2201      	movs	r2, #1
    391a:	409a      	lsls	r2, r3
    391c:	4b17      	ldr	r3, [pc, #92]	; (397c <xTaskRemoveFromEventList+0x94>)
    391e:	681b      	ldr	r3, [r3, #0]
    3920:	4313      	orrs	r3, r2
    3922:	4a16      	ldr	r2, [pc, #88]	; (397c <xTaskRemoveFromEventList+0x94>)
    3924:	6013      	str	r3, [r2, #0]
    3926:	68bb      	ldr	r3, [r7, #8]
    3928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    392a:	4613      	mov	r3, r2
    392c:	009b      	lsls	r3, r3, #2
    392e:	4413      	add	r3, r2
    3930:	009b      	lsls	r3, r3, #2
    3932:	4a13      	ldr	r2, [pc, #76]	; (3980 <xTaskRemoveFromEventList+0x98>)
    3934:	441a      	add	r2, r3
    3936:	68bb      	ldr	r3, [r7, #8]
    3938:	3304      	adds	r3, #4
    393a:	4619      	mov	r1, r3
    393c:	4610      	mov	r0, r2
    393e:	f7ff fb86 	bl	304e <vListInsertEnd>
    3942:	e005      	b.n	3950 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3944:	68bb      	ldr	r3, [r7, #8]
    3946:	3318      	adds	r3, #24
    3948:	4619      	mov	r1, r3
    394a:	480e      	ldr	r0, [pc, #56]	; (3984 <xTaskRemoveFromEventList+0x9c>)
    394c:	f7ff fb7f 	bl	304e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3950:	68bb      	ldr	r3, [r7, #8]
    3952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3954:	4b0c      	ldr	r3, [pc, #48]	; (3988 <xTaskRemoveFromEventList+0xa0>)
    3956:	681b      	ldr	r3, [r3, #0]
    3958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    395a:	429a      	cmp	r2, r3
    395c:	d905      	bls.n	396a <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    395e:	2301      	movs	r3, #1
    3960:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3962:	4b0a      	ldr	r3, [pc, #40]	; (398c <xTaskRemoveFromEventList+0xa4>)
    3964:	2201      	movs	r2, #1
    3966:	601a      	str	r2, [r3, #0]
    3968:	e001      	b.n	396e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    396a:	2300      	movs	r3, #0
    396c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    396e:	68fb      	ldr	r3, [r7, #12]
}
    3970:	4618      	mov	r0, r3
    3972:	3710      	adds	r7, #16
    3974:	46bd      	mov	sp, r7
    3976:	bd80      	pop	{r7, pc}
    3978:	1000042c 	.word	0x1000042c
    397c:	1000040c 	.word	0x1000040c
    3980:	10000330 	.word	0x10000330
    3984:	100003c4 	.word	0x100003c4
    3988:	1000032c 	.word	0x1000032c
    398c:	10000418 	.word	0x10000418

00003990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3990:	b480      	push	{r7}
    3992:	b083      	sub	sp, #12
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3998:	4b06      	ldr	r3, [pc, #24]	; (39b4 <vTaskInternalSetTimeOutState+0x24>)
    399a:	681a      	ldr	r2, [r3, #0]
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    39a0:	4b05      	ldr	r3, [pc, #20]	; (39b8 <vTaskInternalSetTimeOutState+0x28>)
    39a2:	681a      	ldr	r2, [r3, #0]
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	605a      	str	r2, [r3, #4]
}
    39a8:	bf00      	nop
    39aa:	370c      	adds	r7, #12
    39ac:	46bd      	mov	sp, r7
    39ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    39b2:	4770      	bx	lr
    39b4:	1000041c 	.word	0x1000041c
    39b8:	10000408 	.word	0x10000408

000039bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    39bc:	b580      	push	{r7, lr}
    39be:	b086      	sub	sp, #24
    39c0:	af00      	add	r7, sp, #0
    39c2:	6078      	str	r0, [r7, #4]
    39c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    39c6:	f002 f8b5 	bl	5b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    39ca:	4b1d      	ldr	r3, [pc, #116]	; (3a40 <xTaskCheckForTimeOut+0x84>)
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    39d0:	687b      	ldr	r3, [r7, #4]
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	693a      	ldr	r2, [r7, #16]
    39d6:	1ad3      	subs	r3, r2, r3
    39d8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    39e2:	d102      	bne.n	39ea <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    39e4:	2300      	movs	r3, #0
    39e6:	617b      	str	r3, [r7, #20]
    39e8:	e023      	b.n	3a32 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	681a      	ldr	r2, [r3, #0]
    39ee:	4b15      	ldr	r3, [pc, #84]	; (3a44 <xTaskCheckForTimeOut+0x88>)
    39f0:	681b      	ldr	r3, [r3, #0]
    39f2:	429a      	cmp	r2, r3
    39f4:	d007      	beq.n	3a06 <xTaskCheckForTimeOut+0x4a>
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	685b      	ldr	r3, [r3, #4]
    39fa:	693a      	ldr	r2, [r7, #16]
    39fc:	429a      	cmp	r2, r3
    39fe:	d302      	bcc.n	3a06 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    3a00:	2301      	movs	r3, #1
    3a02:	617b      	str	r3, [r7, #20]
    3a04:	e015      	b.n	3a32 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3a06:	683b      	ldr	r3, [r7, #0]
    3a08:	681b      	ldr	r3, [r3, #0]
    3a0a:	68fa      	ldr	r2, [r7, #12]
    3a0c:	429a      	cmp	r2, r3
    3a0e:	d20b      	bcs.n	3a28 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	681a      	ldr	r2, [r3, #0]
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	1ad2      	subs	r2, r2, r3
    3a18:	683b      	ldr	r3, [r7, #0]
    3a1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    3a1c:	6878      	ldr	r0, [r7, #4]
    3a1e:	f7ff ffb7 	bl	3990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    3a22:	2300      	movs	r3, #0
    3a24:	617b      	str	r3, [r7, #20]
    3a26:	e004      	b.n	3a32 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    3a28:	683b      	ldr	r3, [r7, #0]
    3a2a:	2200      	movs	r2, #0
    3a2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    3a2e:	2301      	movs	r3, #1
    3a30:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    3a32:	f002 f899 	bl	5b68 <vPortExitCritical>

	return xReturn;
    3a36:	697b      	ldr	r3, [r7, #20]
}
    3a38:	4618      	mov	r0, r3
    3a3a:	3718      	adds	r7, #24
    3a3c:	46bd      	mov	sp, r7
    3a3e:	bd80      	pop	{r7, pc}
    3a40:	10000408 	.word	0x10000408
    3a44:	1000041c 	.word	0x1000041c

00003a48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3a48:	b480      	push	{r7}
    3a4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    3a4c:	4b03      	ldr	r3, [pc, #12]	; (3a5c <vTaskMissedYield+0x14>)
    3a4e:	2201      	movs	r2, #1
    3a50:	601a      	str	r2, [r3, #0]
}
    3a52:	bf00      	nop
    3a54:	46bd      	mov	sp, r7
    3a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a5a:	4770      	bx	lr
    3a5c:	10000418 	.word	0x10000418

00003a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3a60:	b580      	push	{r7, lr}
    3a62:	b082      	sub	sp, #8
    3a64:	af00      	add	r7, sp, #0
    3a66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3a68:	f000 f842 	bl	3af0 <prvCheckTasksWaitingTermination>
    3a6c:	e7fc      	b.n	3a68 <prvIdleTask+0x8>
    3a6e:	Address 0x0000000000003a6e is out of bounds.


00003a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b082      	sub	sp, #8
    3a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a76:	2300      	movs	r3, #0
    3a78:	607b      	str	r3, [r7, #4]
    3a7a:	e00c      	b.n	3a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a7c:	687a      	ldr	r2, [r7, #4]
    3a7e:	4613      	mov	r3, r2
    3a80:	009b      	lsls	r3, r3, #2
    3a82:	4413      	add	r3, r2
    3a84:	009b      	lsls	r3, r3, #2
    3a86:	4a12      	ldr	r2, [pc, #72]	; (3ad0 <prvInitialiseTaskLists+0x60>)
    3a88:	4413      	add	r3, r2
    3a8a:	4618      	mov	r0, r3
    3a8c:	f7ff fab2 	bl	2ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	3301      	adds	r3, #1
    3a94:	607b      	str	r3, [r7, #4]
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	2b04      	cmp	r3, #4
    3a9a:	d9ef      	bls.n	3a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    3a9c:	480d      	ldr	r0, [pc, #52]	; (3ad4 <prvInitialiseTaskLists+0x64>)
    3a9e:	f7ff faa9 	bl	2ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3aa2:	480d      	ldr	r0, [pc, #52]	; (3ad8 <prvInitialiseTaskLists+0x68>)
    3aa4:	f7ff faa6 	bl	2ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3aa8:	480c      	ldr	r0, [pc, #48]	; (3adc <prvInitialiseTaskLists+0x6c>)
    3aaa:	f7ff faa3 	bl	2ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3aae:	480c      	ldr	r0, [pc, #48]	; (3ae0 <prvInitialiseTaskLists+0x70>)
    3ab0:	f7ff faa0 	bl	2ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3ab4:	480b      	ldr	r0, [pc, #44]	; (3ae4 <prvInitialiseTaskLists+0x74>)
    3ab6:	f7ff fa9d 	bl	2ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3aba:	4b0b      	ldr	r3, [pc, #44]	; (3ae8 <prvInitialiseTaskLists+0x78>)
    3abc:	4a05      	ldr	r2, [pc, #20]	; (3ad4 <prvInitialiseTaskLists+0x64>)
    3abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ac0:	4b0a      	ldr	r3, [pc, #40]	; (3aec <prvInitialiseTaskLists+0x7c>)
    3ac2:	4a05      	ldr	r2, [pc, #20]	; (3ad8 <prvInitialiseTaskLists+0x68>)
    3ac4:	601a      	str	r2, [r3, #0]
}
    3ac6:	bf00      	nop
    3ac8:	3708      	adds	r7, #8
    3aca:	46bd      	mov	sp, r7
    3acc:	bd80      	pop	{r7, pc}
    3ace:	bf00      	nop
    3ad0:	10000330 	.word	0x10000330
    3ad4:	10000394 	.word	0x10000394
    3ad8:	100003a8 	.word	0x100003a8
    3adc:	100003c4 	.word	0x100003c4
    3ae0:	100003d8 	.word	0x100003d8
    3ae4:	100003f0 	.word	0x100003f0
    3ae8:	100003bc 	.word	0x100003bc
    3aec:	100003c0 	.word	0x100003c0

00003af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3af0:	b580      	push	{r7, lr}
    3af2:	b082      	sub	sp, #8
    3af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3af6:	e019      	b.n	3b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    3af8:	f002 f81c 	bl	5b34 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3afc:	4b0f      	ldr	r3, [pc, #60]	; (3b3c <prvCheckTasksWaitingTermination+0x4c>)
    3afe:	68db      	ldr	r3, [r3, #12]
    3b00:	68db      	ldr	r3, [r3, #12]
    3b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	3304      	adds	r3, #4
    3b08:	4618      	mov	r0, r3
    3b0a:	f7ff fafd 	bl	3108 <uxListRemove>
				--uxCurrentNumberOfTasks;
    3b0e:	4b0c      	ldr	r3, [pc, #48]	; (3b40 <prvCheckTasksWaitingTermination+0x50>)
    3b10:	681b      	ldr	r3, [r3, #0]
    3b12:	3b01      	subs	r3, #1
    3b14:	4a0a      	ldr	r2, [pc, #40]	; (3b40 <prvCheckTasksWaitingTermination+0x50>)
    3b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    3b18:	4b0a      	ldr	r3, [pc, #40]	; (3b44 <prvCheckTasksWaitingTermination+0x54>)
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	3b01      	subs	r3, #1
    3b1e:	4a09      	ldr	r2, [pc, #36]	; (3b44 <prvCheckTasksWaitingTermination+0x54>)
    3b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    3b22:	f002 f821 	bl	5b68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    3b26:	6878      	ldr	r0, [r7, #4]
    3b28:	f000 f80e 	bl	3b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3b2c:	4b05      	ldr	r3, [pc, #20]	; (3b44 <prvCheckTasksWaitingTermination+0x54>)
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	2b00      	cmp	r3, #0
    3b32:	d1e1      	bne.n	3af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    3b34:	bf00      	nop
    3b36:	3708      	adds	r7, #8
    3b38:	46bd      	mov	sp, r7
    3b3a:	bd80      	pop	{r7, pc}
    3b3c:	100003d8 	.word	0x100003d8
    3b40:	10000404 	.word	0x10000404
    3b44:	100003ec 	.word	0x100003ec

00003b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3b48:	b580      	push	{r7, lr}
    3b4a:	b082      	sub	sp, #8
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    3b50:	687b      	ldr	r3, [r7, #4]
    3b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    3b56:	2b00      	cmp	r3, #0
    3b58:	d108      	bne.n	3b6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    3b5a:	687b      	ldr	r3, [r7, #4]
    3b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3b5e:	4618      	mov	r0, r3
    3b60:	f000 f930 	bl	3dc4 <vPortFree>
				vPortFree( pxTCB );
    3b64:	6878      	ldr	r0, [r7, #4]
    3b66:	f000 f92d 	bl	3dc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    3b6a:	e007      	b.n	3b7c <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    3b72:	2b01      	cmp	r3, #1
    3b74:	d102      	bne.n	3b7c <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
    3b76:	6878      	ldr	r0, [r7, #4]
    3b78:	f000 f924 	bl	3dc4 <vPortFree>
	}
    3b7c:	bf00      	nop
    3b7e:	3708      	adds	r7, #8
    3b80:	46bd      	mov	sp, r7
    3b82:	bd80      	pop	{r7, pc}

00003b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3b84:	b480      	push	{r7}
    3b86:	b083      	sub	sp, #12
    3b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3b8a:	4b0f      	ldr	r3, [pc, #60]	; (3bc8 <prvResetNextTaskUnblockTime+0x44>)
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d101      	bne.n	3b98 <prvResetNextTaskUnblockTime+0x14>
    3b94:	2301      	movs	r3, #1
    3b96:	e000      	b.n	3b9a <prvResetNextTaskUnblockTime+0x16>
    3b98:	2300      	movs	r3, #0
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d004      	beq.n	3ba8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3b9e:	4b0b      	ldr	r3, [pc, #44]	; (3bcc <prvResetNextTaskUnblockTime+0x48>)
    3ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3ba4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    3ba6:	e008      	b.n	3bba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3ba8:	4b07      	ldr	r3, [pc, #28]	; (3bc8 <prvResetNextTaskUnblockTime+0x44>)
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	68db      	ldr	r3, [r3, #12]
    3bae:	68db      	ldr	r3, [r3, #12]
    3bb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	685b      	ldr	r3, [r3, #4]
    3bb6:	4a05      	ldr	r2, [pc, #20]	; (3bcc <prvResetNextTaskUnblockTime+0x48>)
    3bb8:	6013      	str	r3, [r2, #0]
}
    3bba:	bf00      	nop
    3bbc:	370c      	adds	r7, #12
    3bbe:	46bd      	mov	sp, r7
    3bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc4:	4770      	bx	lr
    3bc6:	bf00      	nop
    3bc8:	100003bc 	.word	0x100003bc
    3bcc:	10000424 	.word	0x10000424

00003bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3bd0:	b480      	push	{r7}
    3bd2:	b083      	sub	sp, #12
    3bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3bd6:	4b0b      	ldr	r3, [pc, #44]	; (3c04 <xTaskGetSchedulerState+0x34>)
    3bd8:	681b      	ldr	r3, [r3, #0]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d102      	bne.n	3be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3bde:	2301      	movs	r3, #1
    3be0:	607b      	str	r3, [r7, #4]
    3be2:	e008      	b.n	3bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3be4:	4b08      	ldr	r3, [pc, #32]	; (3c08 <xTaskGetSchedulerState+0x38>)
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d102      	bne.n	3bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3bec:	2302      	movs	r3, #2
    3bee:	607b      	str	r3, [r7, #4]
    3bf0:	e001      	b.n	3bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3bf2:	2300      	movs	r3, #0
    3bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    3bf6:	687b      	ldr	r3, [r7, #4]
	}
    3bf8:	4618      	mov	r0, r3
    3bfa:	370c      	adds	r7, #12
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr
    3c04:	10000410 	.word	0x10000410
    3c08:	1000042c 	.word	0x1000042c

00003c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b084      	sub	sp, #16
    3c10:	af00      	add	r7, sp, #0
    3c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    3c18:	2300      	movs	r3, #0
    3c1a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d04f      	beq.n	3cc2 <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    3c22:	68bb      	ldr	r3, [r7, #8]
    3c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3c26:	1e5a      	subs	r2, r3, #1
    3c28:	68bb      	ldr	r3, [r7, #8]
    3c2a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3c2c:	68bb      	ldr	r3, [r7, #8]
    3c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c30:	68bb      	ldr	r3, [r7, #8]
    3c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3c34:	429a      	cmp	r2, r3
    3c36:	d044      	beq.n	3cc2 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3c38:	68bb      	ldr	r3, [r7, #8]
    3c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d140      	bne.n	3cc2 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3c40:	68bb      	ldr	r3, [r7, #8]
    3c42:	3304      	adds	r3, #4
    3c44:	4618      	mov	r0, r3
    3c46:	f7ff fa5f 	bl	3108 <uxListRemove>
    3c4a:	4603      	mov	r3, r0
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d115      	bne.n	3c7c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    3c50:	68bb      	ldr	r3, [r7, #8]
    3c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c54:	491d      	ldr	r1, [pc, #116]	; (3ccc <xTaskPriorityDisinherit+0xc0>)
    3c56:	4613      	mov	r3, r2
    3c58:	009b      	lsls	r3, r3, #2
    3c5a:	4413      	add	r3, r2
    3c5c:	009b      	lsls	r3, r3, #2
    3c5e:	440b      	add	r3, r1
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d10a      	bne.n	3c7c <xTaskPriorityDisinherit+0x70>
    3c66:	68bb      	ldr	r3, [r7, #8]
    3c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c6a:	2201      	movs	r2, #1
    3c6c:	fa02 f303 	lsl.w	r3, r2, r3
    3c70:	43da      	mvns	r2, r3
    3c72:	4b17      	ldr	r3, [pc, #92]	; (3cd0 <xTaskPriorityDisinherit+0xc4>)
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	4013      	ands	r3, r2
    3c78:	4a15      	ldr	r2, [pc, #84]	; (3cd0 <xTaskPriorityDisinherit+0xc4>)
    3c7a:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    3c7c:	68bb      	ldr	r3, [r7, #8]
    3c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3c80:	68bb      	ldr	r3, [r7, #8]
    3c82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c84:	68bb      	ldr	r3, [r7, #8]
    3c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c88:	f1c3 0205 	rsb	r2, r3, #5
    3c8c:	68bb      	ldr	r3, [r7, #8]
    3c8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    3c90:	68bb      	ldr	r3, [r7, #8]
    3c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c94:	2201      	movs	r2, #1
    3c96:	409a      	lsls	r2, r3
    3c98:	4b0d      	ldr	r3, [pc, #52]	; (3cd0 <xTaskPriorityDisinherit+0xc4>)
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	4313      	orrs	r3, r2
    3c9e:	4a0c      	ldr	r2, [pc, #48]	; (3cd0 <xTaskPriorityDisinherit+0xc4>)
    3ca0:	6013      	str	r3, [r2, #0]
    3ca2:	68bb      	ldr	r3, [r7, #8]
    3ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ca6:	4613      	mov	r3, r2
    3ca8:	009b      	lsls	r3, r3, #2
    3caa:	4413      	add	r3, r2
    3cac:	009b      	lsls	r3, r3, #2
    3cae:	4a07      	ldr	r2, [pc, #28]	; (3ccc <xTaskPriorityDisinherit+0xc0>)
    3cb0:	441a      	add	r2, r3
    3cb2:	68bb      	ldr	r3, [r7, #8]
    3cb4:	3304      	adds	r3, #4
    3cb6:	4619      	mov	r1, r3
    3cb8:	4610      	mov	r0, r2
    3cba:	f7ff f9c8 	bl	304e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    3cbe:	2301      	movs	r3, #1
    3cc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    3cc2:	68fb      	ldr	r3, [r7, #12]
	}
    3cc4:	4618      	mov	r0, r3
    3cc6:	3710      	adds	r7, #16
    3cc8:	46bd      	mov	sp, r7
    3cca:	bd80      	pop	{r7, pc}
    3ccc:	10000330 	.word	0x10000330
    3cd0:	1000040c 	.word	0x1000040c

00003cd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b084      	sub	sp, #16
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
    3cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3cde:	4b29      	ldr	r3, [pc, #164]	; (3d84 <prvAddCurrentTaskToDelayedList+0xb0>)
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3ce4:	4b28      	ldr	r3, [pc, #160]	; (3d88 <prvAddCurrentTaskToDelayedList+0xb4>)
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	3304      	adds	r3, #4
    3cea:	4618      	mov	r0, r3
    3cec:	f7ff fa0c 	bl	3108 <uxListRemove>
    3cf0:	4603      	mov	r3, r0
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	d10b      	bne.n	3d0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    3cf6:	4b24      	ldr	r3, [pc, #144]	; (3d88 <prvAddCurrentTaskToDelayedList+0xb4>)
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cfc:	2201      	movs	r2, #1
    3cfe:	fa02 f303 	lsl.w	r3, r2, r3
    3d02:	43da      	mvns	r2, r3
    3d04:	4b21      	ldr	r3, [pc, #132]	; (3d8c <prvAddCurrentTaskToDelayedList+0xb8>)
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	4013      	ands	r3, r2
    3d0a:	4a20      	ldr	r2, [pc, #128]	; (3d8c <prvAddCurrentTaskToDelayedList+0xb8>)
    3d0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3d14:	d10a      	bne.n	3d2c <prvAddCurrentTaskToDelayedList+0x58>
    3d16:	683b      	ldr	r3, [r7, #0]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d007      	beq.n	3d2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3d1c:	4b1a      	ldr	r3, [pc, #104]	; (3d88 <prvAddCurrentTaskToDelayedList+0xb4>)
    3d1e:	681b      	ldr	r3, [r3, #0]
    3d20:	3304      	adds	r3, #4
    3d22:	4619      	mov	r1, r3
    3d24:	481a      	ldr	r0, [pc, #104]	; (3d90 <prvAddCurrentTaskToDelayedList+0xbc>)
    3d26:	f7ff f992 	bl	304e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3d2a:	e026      	b.n	3d7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    3d2c:	68fa      	ldr	r2, [r7, #12]
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	4413      	add	r3, r2
    3d32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3d34:	4b14      	ldr	r3, [pc, #80]	; (3d88 <prvAddCurrentTaskToDelayedList+0xb4>)
    3d36:	681b      	ldr	r3, [r3, #0]
    3d38:	68ba      	ldr	r2, [r7, #8]
    3d3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    3d3c:	68ba      	ldr	r2, [r7, #8]
    3d3e:	68fb      	ldr	r3, [r7, #12]
    3d40:	429a      	cmp	r2, r3
    3d42:	d209      	bcs.n	3d58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3d44:	4b13      	ldr	r3, [pc, #76]	; (3d94 <prvAddCurrentTaskToDelayedList+0xc0>)
    3d46:	681a      	ldr	r2, [r3, #0]
    3d48:	4b0f      	ldr	r3, [pc, #60]	; (3d88 <prvAddCurrentTaskToDelayedList+0xb4>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	3304      	adds	r3, #4
    3d4e:	4619      	mov	r1, r3
    3d50:	4610      	mov	r0, r2
    3d52:	f7ff f9a0 	bl	3096 <vListInsert>
}
    3d56:	e010      	b.n	3d7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3d58:	4b0f      	ldr	r3, [pc, #60]	; (3d98 <prvAddCurrentTaskToDelayedList+0xc4>)
    3d5a:	681a      	ldr	r2, [r3, #0]
    3d5c:	4b0a      	ldr	r3, [pc, #40]	; (3d88 <prvAddCurrentTaskToDelayedList+0xb4>)
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	3304      	adds	r3, #4
    3d62:	4619      	mov	r1, r3
    3d64:	4610      	mov	r0, r2
    3d66:	f7ff f996 	bl	3096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    3d6a:	4b0c      	ldr	r3, [pc, #48]	; (3d9c <prvAddCurrentTaskToDelayedList+0xc8>)
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	68ba      	ldr	r2, [r7, #8]
    3d70:	429a      	cmp	r2, r3
    3d72:	d202      	bcs.n	3d7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    3d74:	4a09      	ldr	r2, [pc, #36]	; (3d9c <prvAddCurrentTaskToDelayedList+0xc8>)
    3d76:	68bb      	ldr	r3, [r7, #8]
    3d78:	6013      	str	r3, [r2, #0]
}
    3d7a:	bf00      	nop
    3d7c:	3710      	adds	r7, #16
    3d7e:	46bd      	mov	sp, r7
    3d80:	bd80      	pop	{r7, pc}
    3d82:	bf00      	nop
    3d84:	10000408 	.word	0x10000408
    3d88:	1000032c 	.word	0x1000032c
    3d8c:	1000040c 	.word	0x1000040c
    3d90:	100003f0 	.word	0x100003f0
    3d94:	100003c0 	.word	0x100003c0
    3d98:	100003bc 	.word	0x100003bc
    3d9c:	10000424 	.word	0x10000424

00003da0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b084      	sub	sp, #16
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    3da8:	f7ff fbb0 	bl	350c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    3dac:	6878      	ldr	r0, [r7, #4]
    3dae:	f004 f8e1 	bl	7f74 <malloc>
    3db2:	4603      	mov	r3, r0
    3db4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3db6:	f7ff fbb7 	bl	3528 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    3dba:	68fb      	ldr	r3, [r7, #12]
}
    3dbc:	4618      	mov	r0, r3
    3dbe:	3710      	adds	r7, #16
    3dc0:	46bd      	mov	sp, r7
    3dc2:	bd80      	pop	{r7, pc}

00003dc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3dc4:	b580      	push	{r7, lr}
    3dc6:	b082      	sub	sp, #8
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
	if( pv )
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d006      	beq.n	3de0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
    3dd2:	f7ff fb9b 	bl	350c <vTaskSuspendAll>
		{
			free( pv );
    3dd6:	6878      	ldr	r0, [r7, #4]
    3dd8:	f004 f8d4 	bl	7f84 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    3ddc:	f7ff fba4 	bl	3528 <xTaskResumeAll>
	}
}
    3de0:	bf00      	nop
    3de2:	3708      	adds	r7, #8
    3de4:	46bd      	mov	sp, r7
    3de6:	bd80      	pop	{r7, pc}

00003de8 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    3de8:	b480      	push	{r7}
    3dea:	b083      	sub	sp, #12
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    3df0:	bf00      	nop
    while (1)
    3df2:	e7fd      	b.n	3df0 <_exit+0x8>

00003df4 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    3df4:	b480      	push	{r7}
    3df6:	af00      	add	r7, sp, #0
    return 1;
    3df8:	2301      	movs	r3, #1
  }
    3dfa:	4618      	mov	r0, r3
    3dfc:	46bd      	mov	sp, r7
    3dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e02:	4770      	bx	lr

00003e04 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    3e04:	b480      	push	{r7}
    3e06:	b083      	sub	sp, #12
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
    3e0c:	6039      	str	r1, [r7, #0]
    return -1;
    3e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    3e12:	4618      	mov	r0, r3
    3e14:	370c      	adds	r7, #12
    3e16:	46bd      	mov	sp, r7
    3e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1c:	4770      	bx	lr
    3e1e:	Address 0x0000000000003e1e is out of bounds.


00003e20 <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    3e20:	b480      	push	{r7}
    3e22:	b085      	sub	sp, #20
    3e24:	af00      	add	r7, sp, #0
    3e26:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    3e28:	4b0c      	ldr	r3, [pc, #48]	; (3e5c <_sbrk+0x3c>)
    3e2a:	681b      	ldr	r3, [r3, #0]
    3e2c:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    3e2e:	4b0b      	ldr	r3, [pc, #44]	; (3e5c <_sbrk+0x3c>)
    3e30:	681a      	ldr	r2, [r3, #0]
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	4413      	add	r3, r2
    3e36:	4a0a      	ldr	r2, [pc, #40]	; (3e60 <_sbrk+0x40>)
    3e38:	4293      	cmp	r3, r2
    3e3a:	d901      	bls.n	3e40 <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    3e3c:	2300      	movs	r3, #0
    3e3e:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    3e40:	4b06      	ldr	r3, [pc, #24]	; (3e5c <_sbrk+0x3c>)
    3e42:	681a      	ldr	r2, [r3, #0]
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	4413      	add	r3, r2
    3e48:	4a04      	ldr	r2, [pc, #16]	; (3e5c <_sbrk+0x3c>)
    3e4a:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    3e4c:	68fb      	ldr	r3, [r7, #12]
  }
    3e4e:	4618      	mov	r0, r3
    3e50:	3714      	adds	r7, #20
    3e52:	46bd      	mov	sp, r7
    3e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e58:	4770      	bx	lr
    3e5a:	bf00      	nop
    3e5c:	100000b8 	.word	0x100000b8
    3e60:	20008000 	.word	0x20008000

00003e64 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    3e64:	b580      	push	{r7, lr}
    3e66:	b084      	sub	sp, #16
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    3e6c:	6878      	ldr	r0, [r7, #4]
    3e6e:	f004 f9a1 	bl	81b4 <strlen>
    3e72:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    3e74:	2300      	movs	r3, #0
    3e76:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    3e78:	4b0b      	ldr	r3, [pc, #44]	; (3ea8 <puts+0x44>)
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	68f9      	ldr	r1, [r7, #12]
    3e7e:	6878      	ldr	r0, [r7, #4]
    3e80:	4798      	blx	r3
    3e82:	4602      	mov	r2, r0
    3e84:	68bb      	ldr	r3, [r7, #8]
    3e86:	4413      	add	r3, r2
    3e88:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    3e8a:	4b07      	ldr	r3, [pc, #28]	; (3ea8 <puts+0x44>)
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	2101      	movs	r1, #1
    3e90:	4806      	ldr	r0, [pc, #24]	; (3eac <puts+0x48>)
    3e92:	4798      	blx	r3
    3e94:	4602      	mov	r2, r0
    3e96:	68bb      	ldr	r3, [r7, #8]
    3e98:	4413      	add	r3, r2
    3e9a:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    3e9c:	68bb      	ldr	r3, [r7, #8]
  }
    3e9e:	4618      	mov	r0, r3
    3ea0:	3710      	adds	r7, #16
    3ea2:	46bd      	mov	sp, r7
    3ea4:	bd80      	pop	{r7, pc}
    3ea6:	bf00      	nop
    3ea8:	100000b0 	.word	0x100000b0
    3eac:	000090a4 	.word	0x000090a4

00003eb0 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    3eb0:	b480      	push	{r7}
    3eb2:	b085      	sub	sp, #20
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	60b9      	str	r1, [r7, #8]
    3eb8:	607a      	str	r2, [r7, #4]
    3eba:	603b      	str	r3, [r7, #0]
    3ebc:	4603      	mov	r3, r0
    3ebe:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3ec0:	bf00      	nop
    3ec2:	3714      	adds	r7, #20
    3ec4:	46bd      	mov	sp, r7
    3ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eca:	4770      	bx	lr

00003ecc <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    3ecc:	b580      	push	{r7, lr}
    3ece:	b084      	sub	sp, #16
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	60b9      	str	r1, [r7, #8]
    3ed4:	607a      	str	r2, [r7, #4]
    3ed6:	603b      	str	r3, [r7, #0]
    3ed8:	4603      	mov	r3, r0
    3eda:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    3edc:	7bfb      	ldrb	r3, [r7, #15]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d003      	beq.n	3eea <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    3ee2:	7bfb      	ldrb	r3, [r7, #15]
    3ee4:	4618      	mov	r0, r3
    3ee6:	f002 fd8d 	bl	6a04 <_putchar>
  }
}
    3eea:	bf00      	nop
    3eec:	3710      	adds	r7, #16
    3eee:	46bd      	mov	sp, r7
    3ef0:	bd80      	pop	{r7, pc}

00003ef2 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    3ef2:	b480      	push	{r7}
    3ef4:	b085      	sub	sp, #20
    3ef6:	af00      	add	r7, sp, #0
    3ef8:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	60fb      	str	r3, [r7, #12]
    3efe:	68fb      	ldr	r3, [r7, #12]
    3f00:	781b      	ldrb	r3, [r3, #0]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d003      	beq.n	3f0e <_strlen(char const*)+0x1c>
    3f06:	68fb      	ldr	r3, [r7, #12]
    3f08:	3301      	adds	r3, #1
    3f0a:	60fb      	str	r3, [r7, #12]
    3f0c:	e7f7      	b.n	3efe <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    3f0e:	68fa      	ldr	r2, [r7, #12]
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	1ad3      	subs	r3, r2, r3
}
    3f14:	4618      	mov	r0, r3
    3f16:	3714      	adds	r7, #20
    3f18:	46bd      	mov	sp, r7
    3f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1e:	4770      	bx	lr

00003f20 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	4603      	mov	r3, r0
    3f28:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    3f2a:	79fb      	ldrb	r3, [r7, #7]
    3f2c:	2b2f      	cmp	r3, #47	; 0x2f
    3f2e:	d904      	bls.n	3f3a <_is_digit(char)+0x1a>
    3f30:	79fb      	ldrb	r3, [r7, #7]
    3f32:	2b39      	cmp	r3, #57	; 0x39
    3f34:	d801      	bhi.n	3f3a <_is_digit(char)+0x1a>
    3f36:	2301      	movs	r3, #1
    3f38:	e000      	b.n	3f3c <_is_digit(char)+0x1c>
    3f3a:	2300      	movs	r3, #0
}
    3f3c:	4618      	mov	r0, r3
    3f3e:	370c      	adds	r7, #12
    3f40:	46bd      	mov	sp, r7
    3f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f46:	4770      	bx	lr

00003f48 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b084      	sub	sp, #16
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    3f50:	2300      	movs	r3, #0
    3f52:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	4618      	mov	r0, r3
    3f5c:	f7ff ffe0 	bl	3f20 <_is_digit(char)>
    3f60:	4603      	mov	r3, r0
    3f62:	2b00      	cmp	r3, #0
    3f64:	d00f      	beq.n	3f86 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3f66:	68fa      	ldr	r2, [r7, #12]
    3f68:	4613      	mov	r3, r2
    3f6a:	009b      	lsls	r3, r3, #2
    3f6c:	4413      	add	r3, r2
    3f6e:	005b      	lsls	r3, r3, #1
    3f70:	4618      	mov	r0, r3
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	1c59      	adds	r1, r3, #1
    3f78:	687a      	ldr	r2, [r7, #4]
    3f7a:	6011      	str	r1, [r2, #0]
    3f7c:	781b      	ldrb	r3, [r3, #0]
    3f7e:	4403      	add	r3, r0
    3f80:	3b30      	subs	r3, #48	; 0x30
    3f82:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    3f84:	e7e6      	b.n	3f54 <_atoi(char const**)+0xc>
  }
  return i;
    3f86:	68fb      	ldr	r3, [r7, #12]
}
    3f88:	4618      	mov	r0, r3
    3f8a:	3710      	adds	r7, #16
    3f8c:	46bd      	mov	sp, r7
    3f8e:	bd80      	pop	{r7, pc}

00003f90 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3f90:	b590      	push	{r4, r7, lr}
    3f92:	b089      	sub	sp, #36	; 0x24
    3f94:	af00      	add	r7, sp, #0
    3f96:	60f8      	str	r0, [r7, #12]
    3f98:	60b9      	str	r1, [r7, #8]
    3f9a:	607a      	str	r2, [r7, #4]
    3f9c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3fa4:	f003 0302 	and.w	r3, r3, #2
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d10e      	bne.n	3fca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3fb0:	429a      	cmp	r2, r3
    3fb2:	d20a      	bcs.n	3fca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fb6:	2b1f      	cmp	r3, #31
    3fb8:	d807      	bhi.n	3fca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    3fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fbc:	1c5a      	adds	r2, r3, #1
    3fbe:	637a      	str	r2, [r7, #52]	; 0x34
    3fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3fc2:	4413      	add	r3, r2
    3fc4:	2230      	movs	r2, #48	; 0x30
    3fc6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3fc8:	e7eb      	b.n	3fa2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3fcc:	f003 0302 	and.w	r3, r3, #2
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d113      	bne.n	3ffc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3fd6:	f003 0301 	and.w	r3, r3, #1
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d00e      	beq.n	3ffc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3fe2:	429a      	cmp	r2, r3
    3fe4:	d20a      	bcs.n	3ffc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fe8:	2b1f      	cmp	r3, #31
    3fea:	d807      	bhi.n	3ffc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fee:	1c5a      	adds	r2, r3, #1
    3ff0:	637a      	str	r2, [r7, #52]	; 0x34
    3ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ff4:	4413      	add	r3, r2
    3ff6:	2230      	movs	r2, #48	; 0x30
    3ff8:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3ffa:	e7e6      	b.n	3fca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3ffe:	f003 0310 	and.w	r3, r3, #16
    4002:	2b00      	cmp	r3, #0
    4004:	d058      	beq.n	40b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    4006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    400c:	2b00      	cmp	r3, #0
    400e:	d116      	bne.n	403e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    4010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4012:	2b00      	cmp	r3, #0
    4014:	d013      	beq.n	403e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    4016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    401a:	429a      	cmp	r2, r3
    401c:	d003      	beq.n	4026 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    401e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4022:	429a      	cmp	r2, r3
    4024:	d10b      	bne.n	403e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    4026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4028:	3b01      	subs	r3, #1
    402a:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    402e:	2b00      	cmp	r3, #0
    4030:	d005      	beq.n	403e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    4032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4034:	2b10      	cmp	r3, #16
    4036:	d102      	bne.n	403e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    4038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    403a:	3b01      	subs	r3, #1
    403c:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    403e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4040:	2b10      	cmp	r3, #16
    4042:	d10f      	bne.n	4064 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    4044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4046:	f003 0320 	and.w	r3, r3, #32
    404a:	2b00      	cmp	r3, #0
    404c:	d10a      	bne.n	4064 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4050:	2b1f      	cmp	r3, #31
    4052:	d807      	bhi.n	4064 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    4054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4056:	1c5a      	adds	r2, r3, #1
    4058:	637a      	str	r2, [r7, #52]	; 0x34
    405a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    405c:	4413      	add	r3, r2
    405e:	2278      	movs	r2, #120	; 0x78
    4060:	701a      	strb	r2, [r3, #0]
    4062:	e01f      	b.n	40a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4066:	2b10      	cmp	r3, #16
    4068:	d10f      	bne.n	408a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    406c:	f003 0320 	and.w	r3, r3, #32
    4070:	2b00      	cmp	r3, #0
    4072:	d00a      	beq.n	408a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    4074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4076:	2b1f      	cmp	r3, #31
    4078:	d807      	bhi.n	408a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    407c:	1c5a      	adds	r2, r3, #1
    407e:	637a      	str	r2, [r7, #52]	; 0x34
    4080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4082:	4413      	add	r3, r2
    4084:	2258      	movs	r2, #88	; 0x58
    4086:	701a      	strb	r2, [r3, #0]
    4088:	e00c      	b.n	40a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    408c:	2b02      	cmp	r3, #2
    408e:	d109      	bne.n	40a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    4090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4092:	2b1f      	cmp	r3, #31
    4094:	d806      	bhi.n	40a4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    4096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4098:	1c5a      	adds	r2, r3, #1
    409a:	637a      	str	r2, [r7, #52]	; 0x34
    409c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    409e:	4413      	add	r3, r2
    40a0:	2262      	movs	r2, #98	; 0x62
    40a2:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    40a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40a6:	2b1f      	cmp	r3, #31
    40a8:	d806      	bhi.n	40b8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    40aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ac:	1c5a      	adds	r2, r3, #1
    40ae:	637a      	str	r2, [r7, #52]	; 0x34
    40b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    40b2:	4413      	add	r3, r2
    40b4:	2230      	movs	r2, #48	; 0x30
    40b6:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    40b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ba:	2b00      	cmp	r3, #0
    40bc:	d014      	beq.n	40e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    40be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    40c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40c2:	429a      	cmp	r2, r3
    40c4:	d110      	bne.n	40e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    40c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    40ca:	2b00      	cmp	r3, #0
    40cc:	d109      	bne.n	40e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    40ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40d0:	f003 0304 	and.w	r3, r3, #4
    40d4:	2b00      	cmp	r3, #0
    40d6:	d104      	bne.n	40e2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    40d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40da:	f003 0308 	and.w	r3, r3, #8
    40de:	2b00      	cmp	r3, #0
    40e0:	d002      	beq.n	40e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    40e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40e4:	3b01      	subs	r3, #1
    40e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    40e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ea:	2b1f      	cmp	r3, #31
    40ec:	d824      	bhi.n	4138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    40ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    40f2:	2b00      	cmp	r3, #0
    40f4:	d007      	beq.n	4106 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    40f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40f8:	1c5a      	adds	r2, r3, #1
    40fa:	637a      	str	r2, [r7, #52]	; 0x34
    40fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    40fe:	4413      	add	r3, r2
    4100:	222d      	movs	r2, #45	; 0x2d
    4102:	701a      	strb	r2, [r3, #0]
    4104:	e018      	b.n	4138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    4106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4108:	f003 0304 	and.w	r3, r3, #4
    410c:	2b00      	cmp	r3, #0
    410e:	d007      	beq.n	4120 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    4110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4112:	1c5a      	adds	r2, r3, #1
    4114:	637a      	str	r2, [r7, #52]	; 0x34
    4116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4118:	4413      	add	r3, r2
    411a:	222b      	movs	r2, #43	; 0x2b
    411c:	701a      	strb	r2, [r3, #0]
    411e:	e00b      	b.n	4138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    4120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4122:	f003 0308 	and.w	r3, r3, #8
    4126:	2b00      	cmp	r3, #0
    4128:	d006      	beq.n	4138 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    412c:	1c5a      	adds	r2, r3, #1
    412e:	637a      	str	r2, [r7, #52]	; 0x34
    4130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4132:	4413      	add	r3, r2
    4134:	2220      	movs	r2, #32
    4136:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    413a:	f003 0302 	and.w	r3, r3, #2
    413e:	2b00      	cmp	r3, #0
    4140:	d116      	bne.n	4170 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    4142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4144:	f003 0301 	and.w	r3, r3, #1
    4148:	2b00      	cmp	r3, #0
    414a:	d111      	bne.n	4170 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    414e:	61fb      	str	r3, [r7, #28]
    4150:	69fa      	ldr	r2, [r7, #28]
    4152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4154:	429a      	cmp	r2, r3
    4156:	d20b      	bcs.n	4170 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    4158:	687a      	ldr	r2, [r7, #4]
    415a:	1c53      	adds	r3, r2, #1
    415c:	607b      	str	r3, [r7, #4]
    415e:	68fc      	ldr	r4, [r7, #12]
    4160:	683b      	ldr	r3, [r7, #0]
    4162:	68b9      	ldr	r1, [r7, #8]
    4164:	2020      	movs	r0, #32
    4166:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4168:	69fb      	ldr	r3, [r7, #28]
    416a:	3301      	adds	r3, #1
    416c:	61fb      	str	r3, [r7, #28]
    416e:	e7ef      	b.n	4150 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    4170:	2300      	movs	r3, #0
    4172:	61bb      	str	r3, [r7, #24]
    4174:	69ba      	ldr	r2, [r7, #24]
    4176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4178:	429a      	cmp	r2, r3
    417a:	d211      	bcs.n	41a0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    417c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    417e:	69bb      	ldr	r3, [r7, #24]
    4180:	1ad3      	subs	r3, r2, r3
    4182:	3b01      	subs	r3, #1
    4184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4186:	4413      	add	r3, r2
    4188:	7818      	ldrb	r0, [r3, #0]
    418a:	687a      	ldr	r2, [r7, #4]
    418c:	1c53      	adds	r3, r2, #1
    418e:	607b      	str	r3, [r7, #4]
    4190:	68fc      	ldr	r4, [r7, #12]
    4192:	683b      	ldr	r3, [r7, #0]
    4194:	68b9      	ldr	r1, [r7, #8]
    4196:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    4198:	69bb      	ldr	r3, [r7, #24]
    419a:	3301      	adds	r3, #1
    419c:	61bb      	str	r3, [r7, #24]
    419e:	e7e9      	b.n	4174 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    41a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41a2:	f003 0302 	and.w	r3, r3, #2
    41a6:	2b00      	cmp	r3, #0
    41a8:	d00e      	beq.n	41c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    41aa:	687a      	ldr	r2, [r7, #4]
    41ac:	697b      	ldr	r3, [r7, #20]
    41ae:	1ad3      	subs	r3, r2, r3
    41b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    41b2:	429a      	cmp	r2, r3
    41b4:	d908      	bls.n	41c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    41b6:	687a      	ldr	r2, [r7, #4]
    41b8:	1c53      	adds	r3, r2, #1
    41ba:	607b      	str	r3, [r7, #4]
    41bc:	68fc      	ldr	r4, [r7, #12]
    41be:	683b      	ldr	r3, [r7, #0]
    41c0:	68b9      	ldr	r1, [r7, #8]
    41c2:	2020      	movs	r0, #32
    41c4:	47a0      	blx	r4
    while (idx - start_idx < width) {
    41c6:	e7f0      	b.n	41aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    41c8:	687b      	ldr	r3, [r7, #4]
}
    41ca:	4618      	mov	r0, r3
    41cc:	3724      	adds	r7, #36	; 0x24
    41ce:	46bd      	mov	sp, r7
    41d0:	bd90      	pop	{r4, r7, pc}

000041d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    41d2:	b580      	push	{r7, lr}
    41d4:	b096      	sub	sp, #88	; 0x58
    41d6:	af08      	add	r7, sp, #32
    41d8:	60f8      	str	r0, [r7, #12]
    41da:	60b9      	str	r1, [r7, #8]
    41dc:	607a      	str	r2, [r7, #4]
    41de:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    41e0:	2300      	movs	r3, #0
    41e2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    41e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41e6:	2b00      	cmp	r3, #0
    41e8:	d103      	bne.n	41f2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    41ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    41ec:	f023 0310 	bic.w	r3, r3, #16
    41f0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    41f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    41f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    41f8:	2b00      	cmp	r3, #0
    41fa:	d002      	beq.n	4202 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    41fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41fe:	2b00      	cmp	r3, #0
    4200:	d034      	beq.n	426c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    4202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4204:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4206:	fbb3 f2f2 	udiv	r2, r3, r2
    420a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    420c:	fb01 f202 	mul.w	r2, r1, r2
    4210:	1a9b      	subs	r3, r3, r2
    4212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    4216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    421a:	2b09      	cmp	r3, #9
    421c:	d804      	bhi.n	4228 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    421e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    4222:	3330      	adds	r3, #48	; 0x30
    4224:	b2da      	uxtb	r2, r3
    4226:	e00d      	b.n	4244 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    4228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    422a:	f003 0320 	and.w	r3, r3, #32
    422e:	2b00      	cmp	r3, #0
    4230:	d001      	beq.n	4236 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    4232:	2241      	movs	r2, #65	; 0x41
    4234:	e000      	b.n	4238 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    4236:	2261      	movs	r2, #97	; 0x61
    4238:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    423c:	4413      	add	r3, r2
    423e:	b2db      	uxtb	r3, r3
    4240:	3b0a      	subs	r3, #10
    4242:	b2da      	uxtb	r2, r3
    4244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4246:	1c59      	adds	r1, r3, #1
    4248:	6379      	str	r1, [r7, #52]	; 0x34
    424a:	f107 0138 	add.w	r1, r7, #56	; 0x38
    424e:	440b      	add	r3, r1
    4250:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    4254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4258:	fbb2 f3f3 	udiv	r3, r2, r3
    425c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    425e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4260:	2b00      	cmp	r3, #0
    4262:	d003      	beq.n	426c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    4264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4266:	2b1f      	cmp	r3, #31
    4268:	d800      	bhi.n	426c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    426a:	e7ca      	b.n	4202 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    426c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    426e:	9306      	str	r3, [sp, #24]
    4270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4272:	9305      	str	r3, [sp, #20]
    4274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4276:	9304      	str	r3, [sp, #16]
    4278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    427a:	9303      	str	r3, [sp, #12]
    427c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    4280:	9302      	str	r3, [sp, #8]
    4282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4284:	9301      	str	r3, [sp, #4]
    4286:	f107 0310 	add.w	r3, r7, #16
    428a:	9300      	str	r3, [sp, #0]
    428c:	683b      	ldr	r3, [r7, #0]
    428e:	687a      	ldr	r2, [r7, #4]
    4290:	68b9      	ldr	r1, [r7, #8]
    4292:	68f8      	ldr	r0, [r7, #12]
    4294:	f7ff fe7c 	bl	3f90 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    4298:	4603      	mov	r3, r0
}
    429a:	4618      	mov	r0, r3
    429c:	3738      	adds	r7, #56	; 0x38
    429e:	46bd      	mov	sp, r7
    42a0:	bd80      	pop	{r7, pc}

000042a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    42a2:	b590      	push	{r4, r7, lr}
    42a4:	b097      	sub	sp, #92	; 0x5c
    42a6:	af08      	add	r7, sp, #32
    42a8:	60f8      	str	r0, [r7, #12]
    42aa:	60b9      	str	r1, [r7, #8]
    42ac:	607a      	str	r2, [r7, #4]
    42ae:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    42b0:	2300      	movs	r3, #0
    42b2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    42b4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    42b8:	4323      	orrs	r3, r4
    42ba:	d103      	bne.n	42c4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    42bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    42be:	f023 0310 	bic.w	r3, r3, #16
    42c2:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    42c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    42c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    42ca:	2b00      	cmp	r3, #0
    42cc:	d003      	beq.n	42d6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    42ce:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    42d2:	4323      	orrs	r3, r4
    42d4:	d03a      	beq.n	434c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    42d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    42da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    42de:	f002 fd17 	bl	6d10 <__aeabi_uldivmod>
    42e2:	461c      	mov	r4, r3
    42e4:	4613      	mov	r3, r2
    42e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    42ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    42ee:	2b09      	cmp	r3, #9
    42f0:	d804      	bhi.n	42fc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    42f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    42f6:	3330      	adds	r3, #48	; 0x30
    42f8:	b2da      	uxtb	r2, r3
    42fa:	e00d      	b.n	4318 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    42fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    42fe:	f003 0320 	and.w	r3, r3, #32
    4302:	2b00      	cmp	r3, #0
    4304:	d001      	beq.n	430a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    4306:	2241      	movs	r2, #65	; 0x41
    4308:	e000      	b.n	430c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    430a:	2261      	movs	r2, #97	; 0x61
    430c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    4310:	4413      	add	r3, r2
    4312:	b2db      	uxtb	r3, r3
    4314:	3b0a      	subs	r3, #10
    4316:	b2da      	uxtb	r2, r3
    4318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    431a:	1c59      	adds	r1, r3, #1
    431c:	6379      	str	r1, [r7, #52]	; 0x34
    431e:	f107 0138 	add.w	r1, r7, #56	; 0x38
    4322:	440b      	add	r3, r1
    4324:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    4328:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    432c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    4330:	f002 fcee 	bl	6d10 <__aeabi_uldivmod>
    4334:	4603      	mov	r3, r0
    4336:	460c      	mov	r4, r1
    4338:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    433c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    4340:	4323      	orrs	r3, r4
    4342:	d003      	beq.n	434c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    4344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4346:	2b1f      	cmp	r3, #31
    4348:	d800      	bhi.n	434c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    434a:	e7c4      	b.n	42d6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    434c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    434e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    4350:	9206      	str	r2, [sp, #24]
    4352:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    4354:	9205      	str	r2, [sp, #20]
    4356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4358:	9204      	str	r2, [sp, #16]
    435a:	9303      	str	r3, [sp, #12]
    435c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    4360:	9302      	str	r3, [sp, #8]
    4362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4364:	9301      	str	r3, [sp, #4]
    4366:	f107 0310 	add.w	r3, r7, #16
    436a:	9300      	str	r3, [sp, #0]
    436c:	683b      	ldr	r3, [r7, #0]
    436e:	687a      	ldr	r2, [r7, #4]
    4370:	68b9      	ldr	r1, [r7, #8]
    4372:	68f8      	ldr	r0, [r7, #12]
    4374:	f7ff fe0c 	bl	3f90 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    4378:	4603      	mov	r3, r0
}
    437a:	4618      	mov	r0, r3
    437c:	373c      	adds	r7, #60	; 0x3c
    437e:	46bd      	mov	sp, r7
    4380:	bd90      	pop	{r4, r7, pc}
    4382:	Address 0x0000000000004382 is out of bounds.


00004384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    4384:	b590      	push	{r4, r7, lr}
    4386:	b09b      	sub	sp, #108	; 0x6c
    4388:	af00      	add	r7, sp, #0
    438a:	6178      	str	r0, [r7, #20]
    438c:	6139      	str	r1, [r7, #16]
    438e:	60fa      	str	r2, [r7, #12]
    4390:	60bb      	str	r3, [r7, #8]
    4392:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    4396:	68fb      	ldr	r3, [r7, #12]
    4398:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    439a:	e9d7 0100 	ldrd	r0, r1, [r7]
    439e:	f002 fb59 	bl	6a54 <__aeabi_d2f>
    43a2:	4603      	mov	r3, r0
    43a4:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    43a6:	2300      	movs	r3, #0
    43a8:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    43aa:	f04f 0300 	mov.w	r3, #0
    43ae:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    43b0:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    43b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    43b6:	2300      	movs	r3, #0
    43b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    43bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    43c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    43c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43c8:	d50a      	bpl.n	43e0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    43ca:	2301      	movs	r3, #1
    43cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    43d0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 4680 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    43d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    43d8:	ee77 7a67 	vsub.f32	s15, s14, s15
    43dc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    43e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    43e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    43e8:	2b00      	cmp	r3, #0
    43ea:	d101      	bne.n	43f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    43ec:	2306      	movs	r3, #6
    43ee:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    43f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    43f2:	2b1f      	cmp	r3, #31
    43f4:	d80f      	bhi.n	4416 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    43f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    43f8:	2b09      	cmp	r3, #9
    43fa:	d90c      	bls.n	4416 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    43fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    43fe:	1c5a      	adds	r2, r3, #1
    4400:	663a      	str	r2, [r7, #96]	; 0x60
    4402:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4406:	4413      	add	r3, r2
    4408:	2230      	movs	r2, #48	; 0x30
    440a:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    440e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4410:	3b01      	subs	r3, #1
    4412:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    4414:	e7ec      	b.n	43f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    4416:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    441a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    441e:	ee17 3a90 	vmov	r3, s15
    4422:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    4424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4426:	ee07 3a90 	vmov	s15, r3
    442a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    442e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    4432:	ee37 7a67 	vsub.f32	s14, s14, s15
    4436:	4a93      	ldr	r2, [pc, #588]	; (4684 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    4438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    443a:	009b      	lsls	r3, r3, #2
    443c:	4413      	add	r3, r2
    443e:	edd3 7a00 	vldr	s15, [r3]
    4442:	ee67 7a27 	vmul.f32	s15, s14, s15
    4446:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    444a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4452:	ee17 3a90 	vmov	r3, s15
    4456:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    4458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    445a:	ee07 3a90 	vmov	s15, r3
    445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4462:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    4466:	ee77 7a67 	vsub.f32	s15, s14, s15
    446a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    446e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4472:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4476:	eef4 7ac7 	vcmpe.f32	s15, s14
    447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    447e:	dd18      	ble.n	44b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    4480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4482:	3301      	adds	r3, #1
    4484:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    4486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4488:	ee07 3a90 	vmov	s15, r3
    448c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    4490:	4a7c      	ldr	r2, [pc, #496]	; (4684 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    4492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4494:	009b      	lsls	r3, r3, #2
    4496:	4413      	add	r3, r2
    4498:	edd3 7a00 	vldr	s15, [r3]
    449c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    44a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44a4:	db19      	blt.n	44da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    44a6:	2300      	movs	r3, #0
    44a8:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    44aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    44ac:	3301      	adds	r3, #1
    44ae:	65bb      	str	r3, [r7, #88]	; 0x58
    44b0:	e013      	b.n	44da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    44b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    44b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    44ba:	eef4 7a47 	vcmp.f32	s15, s14
    44be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44c2:	d10a      	bne.n	44da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    44c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    44c6:	2b00      	cmp	r3, #0
    44c8:	d004      	beq.n	44d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    44ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    44cc:	f003 0301 	and.w	r3, r3, #1
    44d0:	2b00      	cmp	r3, #0
    44d2:	d002      	beq.n	44da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    44d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    44d6:	3301      	adds	r3, #1
    44d8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    44da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    44de:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 4688 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    44e2:	eef4 7ac7 	vcmpe.f32	s15, s14
    44e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44ea:	dd01      	ble.n	44f0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    44ec:	2300      	movs	r3, #0
    44ee:	e166      	b.n	47be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    44f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    44f2:	2b00      	cmp	r3, #0
    44f4:	d129      	bne.n	454a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    44f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    44f8:	ee07 3a90 	vmov	s15, r3
    44fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4500:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    4504:	ee77 7a67 	vsub.f32	s15, s14, s15
    4508:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    450c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4510:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4514:	eef4 7ac7 	vcmpe.f32	s15, s14
    4518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    451c:	dd03      	ble.n	4526 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    451e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4520:	3301      	adds	r3, #1
    4522:	65bb      	str	r3, [r7, #88]	; 0x58
    4524:	e062      	b.n	45ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    4526:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    452a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    452e:	eef4 7a47 	vcmp.f32	s15, s14
    4532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4536:	d159      	bne.n	45ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    4538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    453a:	f003 0301 	and.w	r3, r3, #1
    453e:	2b00      	cmp	r3, #0
    4540:	d054      	beq.n	45ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    4542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4544:	3301      	adds	r3, #1
    4546:	65bb      	str	r3, [r7, #88]	; 0x58
    4548:	e050      	b.n	45ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    454a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    454c:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    454e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4550:	2b1f      	cmp	r3, #31
    4552:	d828      	bhi.n	45a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    4554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4556:	3b01      	subs	r3, #1
    4558:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    455a:	6d79      	ldr	r1, [r7, #84]	; 0x54
    455c:	4b4b      	ldr	r3, [pc, #300]	; (468c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    455e:	fba3 2301 	umull	r2, r3, r3, r1
    4562:	08da      	lsrs	r2, r3, #3
    4564:	4613      	mov	r3, r2
    4566:	009b      	lsls	r3, r3, #2
    4568:	4413      	add	r3, r2
    456a:	005b      	lsls	r3, r3, #1
    456c:	1aca      	subs	r2, r1, r3
    456e:	b2d3      	uxtb	r3, r2
    4570:	3330      	adds	r3, #48	; 0x30
    4572:	b2d9      	uxtb	r1, r3
    4574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4576:	1c5a      	adds	r2, r3, #1
    4578:	663a      	str	r2, [r7, #96]	; 0x60
    457a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    457e:	4413      	add	r3, r2
    4580:	460a      	mov	r2, r1
    4582:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    4586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4588:	4a40      	ldr	r2, [pc, #256]	; (468c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    458a:	fba2 2303 	umull	r2, r3, r2, r3
    458e:	08db      	lsrs	r3, r3, #3
    4590:	657b      	str	r3, [r7, #84]	; 0x54
    4592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4594:	2b00      	cmp	r3, #0
    4596:	bf0c      	ite	eq
    4598:	2301      	moveq	r3, #1
    459a:	2300      	movne	r3, #0
    459c:	b2db      	uxtb	r3, r3
    459e:	2b00      	cmp	r3, #0
    45a0:	d100      	bne.n	45a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    45a2:	e7d4      	b.n	454e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    45a4:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    45a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    45a8:	2b1f      	cmp	r3, #31
    45aa:	d806      	bhi.n	45ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    45ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45ae:	1e5a      	subs	r2, r3, #1
    45b0:	653a      	str	r2, [r7, #80]	; 0x50
    45b2:	2b00      	cmp	r3, #0
    45b4:	d001      	beq.n	45ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    45b6:	2301      	movs	r3, #1
    45b8:	e000      	b.n	45bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    45ba:	2300      	movs	r3, #0
    45bc:	2b00      	cmp	r3, #0
    45be:	d009      	beq.n	45d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    45c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    45c2:	1c5a      	adds	r2, r3, #1
    45c4:	663a      	str	r2, [r7, #96]	; 0x60
    45c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    45ca:	4413      	add	r3, r2
    45cc:	2230      	movs	r2, #48	; 0x30
    45ce:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    45d2:	e7e8      	b.n	45a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    45d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    45d6:	2b1f      	cmp	r3, #31
    45d8:	d808      	bhi.n	45ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    45da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    45dc:	1c5a      	adds	r2, r3, #1
    45de:	663a      	str	r2, [r7, #96]	; 0x60
    45e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
    45e4:	4413      	add	r3, r2
    45e6:	222e      	movs	r2, #46	; 0x2e
    45e8:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    45ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    45ee:	2b1f      	cmp	r3, #31
    45f0:	d829      	bhi.n	4646 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    45f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    45f4:	4b26      	ldr	r3, [pc, #152]	; (4690 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    45f6:	fb83 1302 	smull	r1, r3, r3, r2
    45fa:	1099      	asrs	r1, r3, #2
    45fc:	17d3      	asrs	r3, r2, #31
    45fe:	1ac9      	subs	r1, r1, r3
    4600:	460b      	mov	r3, r1
    4602:	009b      	lsls	r3, r3, #2
    4604:	440b      	add	r3, r1
    4606:	005b      	lsls	r3, r3, #1
    4608:	1ad1      	subs	r1, r2, r3
    460a:	b2cb      	uxtb	r3, r1
    460c:	3330      	adds	r3, #48	; 0x30
    460e:	b2d9      	uxtb	r1, r3
    4610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4612:	1c5a      	adds	r2, r3, #1
    4614:	663a      	str	r2, [r7, #96]	; 0x60
    4616:	f107 0268 	add.w	r2, r7, #104	; 0x68
    461a:	4413      	add	r3, r2
    461c:	460a      	mov	r2, r1
    461e:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    4622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4624:	4a1a      	ldr	r2, [pc, #104]	; (4690 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    4626:	fb82 1203 	smull	r1, r2, r2, r3
    462a:	1092      	asrs	r2, r2, #2
    462c:	17db      	asrs	r3, r3, #31
    462e:	1ad3      	subs	r3, r2, r3
    4630:	65bb      	str	r3, [r7, #88]	; 0x58
    4632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4634:	2b00      	cmp	r3, #0
    4636:	bf0c      	ite	eq
    4638:	2301      	moveq	r3, #1
    463a:	2300      	movne	r3, #0
    463c:	b2db      	uxtb	r3, r3
    463e:	2b00      	cmp	r3, #0
    4640:	d100      	bne.n	4644 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4642:	e7d3      	b.n	45ec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    4644:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    464a:	f003 0302 	and.w	r3, r3, #2
    464e:	2b00      	cmp	r3, #0
    4650:	d120      	bne.n	4694 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4652:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4656:	f003 0301 	and.w	r3, r3, #1
    465a:	2b00      	cmp	r3, #0
    465c:	d01a      	beq.n	4694 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    465e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4662:	429a      	cmp	r2, r3
    4664:	d216      	bcs.n	4694 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4668:	2b1f      	cmp	r3, #31
    466a:	d813      	bhi.n	4694 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    466c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    466e:	1c5a      	adds	r2, r3, #1
    4670:	663a      	str	r2, [r7, #96]	; 0x60
    4672:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4676:	4413      	add	r3, r2
    4678:	2230      	movs	r2, #48	; 0x30
    467a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    467e:	e7e2      	b.n	4646 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    4680:	00000000 	.word	0x00000000
    4684:	000090a8 	.word	0x000090a8
    4688:	4f000000 	.word	0x4f000000
    468c:	cccccccd 	.word	0xcccccccd
    4690:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    4694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4698:	429a      	cmp	r2, r3
    469a:	d112      	bne.n	46c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    469c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    46a0:	2b00      	cmp	r3, #0
    46a2:	d10b      	bne.n	46bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    46a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    46a8:	f003 0304 	and.w	r3, r3, #4
    46ac:	2b00      	cmp	r3, #0
    46ae:	d105      	bne.n	46bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    46b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    46b4:	f003 0308 	and.w	r3, r3, #8
    46b8:	2b00      	cmp	r3, #0
    46ba:	d002      	beq.n	46c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    46bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    46be:	3b01      	subs	r3, #1
    46c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    46c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    46c4:	2b1f      	cmp	r3, #31
    46c6:	d82c      	bhi.n	4722 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    46c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    46cc:	2b00      	cmp	r3, #0
    46ce:	d009      	beq.n	46e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    46d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    46d2:	1c5a      	adds	r2, r3, #1
    46d4:	663a      	str	r2, [r7, #96]	; 0x60
    46d6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    46da:	4413      	add	r3, r2
    46dc:	222d      	movs	r2, #45	; 0x2d
    46de:	f803 2c50 	strb.w	r2, [r3, #-80]
    46e2:	e01e      	b.n	4722 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    46e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    46e8:	f003 0304 	and.w	r3, r3, #4
    46ec:	2b00      	cmp	r3, #0
    46ee:	d009      	beq.n	4704 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    46f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    46f2:	1c5a      	adds	r2, r3, #1
    46f4:	663a      	str	r2, [r7, #96]	; 0x60
    46f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    46fa:	4413      	add	r3, r2
    46fc:	222b      	movs	r2, #43	; 0x2b
    46fe:	f803 2c50 	strb.w	r2, [r3, #-80]
    4702:	e00e      	b.n	4722 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    4704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4708:	f003 0308 	and.w	r3, r3, #8
    470c:	2b00      	cmp	r3, #0
    470e:	d008      	beq.n	4722 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    4710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4712:	1c5a      	adds	r2, r3, #1
    4714:	663a      	str	r2, [r7, #96]	; 0x60
    4716:	f107 0268 	add.w	r2, r7, #104	; 0x68
    471a:	4413      	add	r3, r2
    471c:	2220      	movs	r2, #32
    471e:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4726:	f003 0302 	and.w	r3, r3, #2
    472a:	2b00      	cmp	r3, #0
    472c:	d117      	bne.n	475e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    472e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4732:	f003 0301 	and.w	r3, r3, #1
    4736:	2b00      	cmp	r3, #0
    4738:	d111      	bne.n	475e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    473a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    473c:	64fb      	str	r3, [r7, #76]	; 0x4c
    473e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4742:	429a      	cmp	r2, r3
    4744:	d20b      	bcs.n	475e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    4746:	68fa      	ldr	r2, [r7, #12]
    4748:	1c53      	adds	r3, r2, #1
    474a:	60fb      	str	r3, [r7, #12]
    474c:	697c      	ldr	r4, [r7, #20]
    474e:	68bb      	ldr	r3, [r7, #8]
    4750:	6939      	ldr	r1, [r7, #16]
    4752:	2020      	movs	r0, #32
    4754:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4758:	3301      	adds	r3, #1
    475a:	64fb      	str	r3, [r7, #76]	; 0x4c
    475c:	e7ef      	b.n	473e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    475e:	2300      	movs	r3, #0
    4760:	64bb      	str	r3, [r7, #72]	; 0x48
    4762:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4766:	429a      	cmp	r2, r3
    4768:	d213      	bcs.n	4792 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    476a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    476c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    476e:	1ad3      	subs	r3, r2, r3
    4770:	3b01      	subs	r3, #1
    4772:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4776:	4413      	add	r3, r2
    4778:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    477c:	68fa      	ldr	r2, [r7, #12]
    477e:	1c53      	adds	r3, r2, #1
    4780:	60fb      	str	r3, [r7, #12]
    4782:	697c      	ldr	r4, [r7, #20]
    4784:	68bb      	ldr	r3, [r7, #8]
    4786:	6939      	ldr	r1, [r7, #16]
    4788:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    478c:	3301      	adds	r3, #1
    478e:	64bb      	str	r3, [r7, #72]	; 0x48
    4790:	e7e7      	b.n	4762 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    4792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4796:	f003 0302 	and.w	r3, r3, #2
    479a:	2b00      	cmp	r3, #0
    479c:	d00e      	beq.n	47bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    479e:	68fa      	ldr	r2, [r7, #12]
    47a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47a2:	1ad3      	subs	r3, r2, r3
    47a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    47a6:	429a      	cmp	r2, r3
    47a8:	d908      	bls.n	47bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    47aa:	68fa      	ldr	r2, [r7, #12]
    47ac:	1c53      	adds	r3, r2, #1
    47ae:	60fb      	str	r3, [r7, #12]
    47b0:	697c      	ldr	r4, [r7, #20]
    47b2:	68bb      	ldr	r3, [r7, #8]
    47b4:	6939      	ldr	r1, [r7, #16]
    47b6:	2020      	movs	r0, #32
    47b8:	47a0      	blx	r4
    while (idx - start_idx < width) {
    47ba:	e7f0      	b.n	479e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    47bc:	68fb      	ldr	r3, [r7, #12]
}
    47be:	4618      	mov	r0, r3
    47c0:	376c      	adds	r7, #108	; 0x6c
    47c2:	46bd      	mov	sp, r7
    47c4:	bd90      	pop	{r4, r7, pc}
    47c6:	bf00      	nop

000047c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    47c8:	b5b0      	push	{r4, r5, r7, lr}
    47ca:	b0a0      	sub	sp, #128	; 0x80
    47cc:	af0a      	add	r7, sp, #40	; 0x28
    47ce:	60f8      	str	r0, [r7, #12]
    47d0:	60b9      	str	r1, [r7, #8]
    47d2:	607a      	str	r2, [r7, #4]
    47d4:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    47d6:	2300      	movs	r3, #0
    47d8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    47da:	68bb      	ldr	r3, [r7, #8]
    47dc:	2b00      	cmp	r3, #0
    47de:	d101      	bne.n	47e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    47e0:	4ba2      	ldr	r3, [pc, #648]	; (4a6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    47e2:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    47e4:	683b      	ldr	r3, [r7, #0]
    47e6:	781b      	ldrb	r3, [r3, #0]
    47e8:	2b00      	cmp	r3, #0
    47ea:	f000 8445 	beq.w	5078 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    47ee:	683b      	ldr	r3, [r7, #0]
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	2b25      	cmp	r3, #37	; 0x25
    47f4:	d00d      	beq.n	4812 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    47f6:	683b      	ldr	r3, [r7, #0]
    47f8:	7818      	ldrb	r0, [r3, #0]
    47fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    47fc:	1c53      	adds	r3, r2, #1
    47fe:	647b      	str	r3, [r7, #68]	; 0x44
    4800:	68fc      	ldr	r4, [r7, #12]
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	68b9      	ldr	r1, [r7, #8]
    4806:	47a0      	blx	r4
      format++;
    4808:	683b      	ldr	r3, [r7, #0]
    480a:	3301      	adds	r3, #1
    480c:	603b      	str	r3, [r7, #0]
      continue;
    480e:	f000 bc31 	b.w	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    4812:	683b      	ldr	r3, [r7, #0]
    4814:	3301      	adds	r3, #1
    4816:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    4818:	2300      	movs	r3, #0
    481a:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    481c:	683b      	ldr	r3, [r7, #0]
    481e:	781b      	ldrb	r3, [r3, #0]
    4820:	3b20      	subs	r3, #32
    4822:	2b10      	cmp	r3, #16
    4824:	d856      	bhi.n	48d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    4826:	a201      	add	r2, pc, #4	; (adr r2, 482c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    4828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    482c:	000048ad 	.word	0x000048ad
    4830:	000048d5 	.word	0x000048d5
    4834:	000048d5 	.word	0x000048d5
    4838:	000048c1 	.word	0x000048c1
    483c:	000048d5 	.word	0x000048d5
    4840:	000048d5 	.word	0x000048d5
    4844:	000048d5 	.word	0x000048d5
    4848:	000048d5 	.word	0x000048d5
    484c:	000048d5 	.word	0x000048d5
    4850:	000048d5 	.word	0x000048d5
    4854:	000048d5 	.word	0x000048d5
    4858:	00004899 	.word	0x00004899
    485c:	000048d5 	.word	0x000048d5
    4860:	00004885 	.word	0x00004885
    4864:	000048d5 	.word	0x000048d5
    4868:	000048d5 	.word	0x000048d5
    486c:	00004871 	.word	0x00004871
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    4870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4872:	f043 0301 	orr.w	r3, r3, #1
    4876:	657b      	str	r3, [r7, #84]	; 0x54
    4878:	683b      	ldr	r3, [r7, #0]
    487a:	3301      	adds	r3, #1
    487c:	603b      	str	r3, [r7, #0]
    487e:	2301      	movs	r3, #1
    4880:	64bb      	str	r3, [r7, #72]	; 0x48
    4882:	e02a      	b.n	48da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    4884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4886:	f043 0302 	orr.w	r3, r3, #2
    488a:	657b      	str	r3, [r7, #84]	; 0x54
    488c:	683b      	ldr	r3, [r7, #0]
    488e:	3301      	adds	r3, #1
    4890:	603b      	str	r3, [r7, #0]
    4892:	2301      	movs	r3, #1
    4894:	64bb      	str	r3, [r7, #72]	; 0x48
    4896:	e020      	b.n	48da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    4898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    489a:	f043 0304 	orr.w	r3, r3, #4
    489e:	657b      	str	r3, [r7, #84]	; 0x54
    48a0:	683b      	ldr	r3, [r7, #0]
    48a2:	3301      	adds	r3, #1
    48a4:	603b      	str	r3, [r7, #0]
    48a6:	2301      	movs	r3, #1
    48a8:	64bb      	str	r3, [r7, #72]	; 0x48
    48aa:	e016      	b.n	48da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    48ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48ae:	f043 0308 	orr.w	r3, r3, #8
    48b2:	657b      	str	r3, [r7, #84]	; 0x54
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	3301      	adds	r3, #1
    48b8:	603b      	str	r3, [r7, #0]
    48ba:	2301      	movs	r3, #1
    48bc:	64bb      	str	r3, [r7, #72]	; 0x48
    48be:	e00c      	b.n	48da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    48c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48c2:	f043 0310 	orr.w	r3, r3, #16
    48c6:	657b      	str	r3, [r7, #84]	; 0x54
    48c8:	683b      	ldr	r3, [r7, #0]
    48ca:	3301      	adds	r3, #1
    48cc:	603b      	str	r3, [r7, #0]
    48ce:	2301      	movs	r3, #1
    48d0:	64bb      	str	r3, [r7, #72]	; 0x48
    48d2:	e002      	b.n	48da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    48d4:	2300      	movs	r3, #0
    48d6:	64bb      	str	r3, [r7, #72]	; 0x48
    48d8:	bf00      	nop
      }
    } while (n);
    48da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    48dc:	2b00      	cmp	r3, #0
    48de:	d000      	beq.n	48e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    48e0:	e79c      	b.n	481c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    48e2:	2300      	movs	r3, #0
    48e4:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    48e6:	683b      	ldr	r3, [r7, #0]
    48e8:	781b      	ldrb	r3, [r3, #0]
    48ea:	4618      	mov	r0, r3
    48ec:	f7ff fb18 	bl	3f20 <_is_digit(char)>
    48f0:	4603      	mov	r3, r0
    48f2:	2b00      	cmp	r3, #0
    48f4:	d005      	beq.n	4902 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    48f6:	463b      	mov	r3, r7
    48f8:	4618      	mov	r0, r3
    48fa:	f7ff fb25 	bl	3f48 <_atoi(char const**)>
    48fe:	6538      	str	r0, [r7, #80]	; 0x50
    4900:	e018      	b.n	4934 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    4902:	683b      	ldr	r3, [r7, #0]
    4904:	781b      	ldrb	r3, [r3, #0]
    4906:	2b2a      	cmp	r3, #42	; 0x2a
    4908:	d114      	bne.n	4934 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    490a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    490c:	1d1a      	adds	r2, r3, #4
    490e:	66ba      	str	r2, [r7, #104]	; 0x68
    4910:	681b      	ldr	r3, [r3, #0]
    4912:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    4914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4916:	2b00      	cmp	r3, #0
    4918:	da07      	bge.n	492a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    491a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    491c:	f043 0302 	orr.w	r3, r3, #2
    4920:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    4922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4924:	425b      	negs	r3, r3
    4926:	653b      	str	r3, [r7, #80]	; 0x50
    4928:	e001      	b.n	492e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    492c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    492e:	683b      	ldr	r3, [r7, #0]
    4930:	3301      	adds	r3, #1
    4932:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    4934:	2300      	movs	r3, #0
    4936:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    4938:	683b      	ldr	r3, [r7, #0]
    493a:	781b      	ldrb	r3, [r3, #0]
    493c:	2b2e      	cmp	r3, #46	; 0x2e
    493e:	d124      	bne.n	498a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    4940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4946:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    4948:	683b      	ldr	r3, [r7, #0]
    494a:	3301      	adds	r3, #1
    494c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    494e:	683b      	ldr	r3, [r7, #0]
    4950:	781b      	ldrb	r3, [r3, #0]
    4952:	4618      	mov	r0, r3
    4954:	f7ff fae4 	bl	3f20 <_is_digit(char)>
    4958:	4603      	mov	r3, r0
    495a:	2b00      	cmp	r3, #0
    495c:	d005      	beq.n	496a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    495e:	463b      	mov	r3, r7
    4960:	4618      	mov	r0, r3
    4962:	f7ff faf1 	bl	3f48 <_atoi(char const**)>
    4966:	64f8      	str	r0, [r7, #76]	; 0x4c
    4968:	e00f      	b.n	498a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    496a:	683b      	ldr	r3, [r7, #0]
    496c:	781b      	ldrb	r3, [r3, #0]
    496e:	2b2a      	cmp	r3, #42	; 0x2a
    4970:	d10b      	bne.n	498a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    4972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4974:	1d1a      	adds	r2, r3, #4
    4976:	66ba      	str	r2, [r7, #104]	; 0x68
    4978:	681b      	ldr	r3, [r3, #0]
    497a:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    497e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4982:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    4984:	683b      	ldr	r3, [r7, #0]
    4986:	3301      	adds	r3, #1
    4988:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    498a:	683b      	ldr	r3, [r7, #0]
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	3b68      	subs	r3, #104	; 0x68
    4990:	2b12      	cmp	r3, #18
    4992:	d867      	bhi.n	4a64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    4994:	a201      	add	r2, pc, #4	; (adr r2, 499c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    4996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    499a:	bf00      	nop
    499c:	00004a0f 	.word	0x00004a0f
    49a0:	00004a65 	.word	0x00004a65
    49a4:	00004a45 	.word	0x00004a45
    49a8:	00004a65 	.word	0x00004a65
    49ac:	000049e9 	.word	0x000049e9
    49b0:	00004a65 	.word	0x00004a65
    49b4:	00004a65 	.word	0x00004a65
    49b8:	00004a65 	.word	0x00004a65
    49bc:	00004a65 	.word	0x00004a65
    49c0:	00004a65 	.word	0x00004a65
    49c4:	00004a65 	.word	0x00004a65
    49c8:	00004a65 	.word	0x00004a65
    49cc:	00004a35 	.word	0x00004a35
    49d0:	00004a65 	.word	0x00004a65
    49d4:	00004a65 	.word	0x00004a65
    49d8:	00004a65 	.word	0x00004a65
    49dc:	00004a65 	.word	0x00004a65
    49e0:	00004a65 	.word	0x00004a65
    49e4:	00004a55 	.word	0x00004a55
      case 'l' :
        flags |= FLAGS_LONG;
    49e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    49ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    49ee:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    49f0:	683b      	ldr	r3, [r7, #0]
    49f2:	3301      	adds	r3, #1
    49f4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    49f6:	683b      	ldr	r3, [r7, #0]
    49f8:	781b      	ldrb	r3, [r3, #0]
    49fa:	2b6c      	cmp	r3, #108	; 0x6c
    49fc:	d134      	bne.n	4a68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    49fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4a04:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4a06:	683b      	ldr	r3, [r7, #0]
    4a08:	3301      	adds	r3, #1
    4a0a:	603b      	str	r3, [r7, #0]
        }
        break;
    4a0c:	e02c      	b.n	4a68 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    4a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4a14:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4a16:	683b      	ldr	r3, [r7, #0]
    4a18:	3301      	adds	r3, #1
    4a1a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    4a1c:	683b      	ldr	r3, [r7, #0]
    4a1e:	781b      	ldrb	r3, [r3, #0]
    4a20:	2b68      	cmp	r3, #104	; 0x68
    4a22:	d125      	bne.n	4a70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    4a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4a2a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4a2c:	683b      	ldr	r3, [r7, #0]
    4a2e:	3301      	adds	r3, #1
    4a30:	603b      	str	r3, [r7, #0]
        }
        break;
    4a32:	e01d      	b.n	4a70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4a3a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4a3c:	683b      	ldr	r3, [r7, #0]
    4a3e:	3301      	adds	r3, #1
    4a40:	603b      	str	r3, [r7, #0]
        break;
    4a42:	e016      	b.n	4a72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4a4a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4a4c:	683b      	ldr	r3, [r7, #0]
    4a4e:	3301      	adds	r3, #1
    4a50:	603b      	str	r3, [r7, #0]
        break;
    4a52:	e00e      	b.n	4a72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4a5a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4a5c:	683b      	ldr	r3, [r7, #0]
    4a5e:	3301      	adds	r3, #1
    4a60:	603b      	str	r3, [r7, #0]
        break;
    4a62:	e006      	b.n	4a72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    4a64:	bf00      	nop
    4a66:	e004      	b.n	4a72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    4a68:	bf00      	nop
    4a6a:	e002      	b.n	4a72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    4a6c:	00003eb1 	.word	0x00003eb1
        break;
    4a70:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    4a72:	683b      	ldr	r3, [r7, #0]
    4a74:	781b      	ldrb	r3, [r3, #0]
    4a76:	3b25      	subs	r3, #37	; 0x25
    4a78:	2b53      	cmp	r3, #83	; 0x53
    4a7a:	f200 82ee 	bhi.w	505a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    4a7e:	a201      	add	r2, pc, #4	; (adr r2, 4a84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    4a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a84:	00005043 	.word	0x00005043
    4a88:	0000505b 	.word	0x0000505b
    4a8c:	0000505b 	.word	0x0000505b
    4a90:	0000505b 	.word	0x0000505b
    4a94:	0000505b 	.word	0x0000505b
    4a98:	0000505b 	.word	0x0000505b
    4a9c:	0000505b 	.word	0x0000505b
    4aa0:	0000505b 	.word	0x0000505b
    4aa4:	0000505b 	.word	0x0000505b
    4aa8:	0000505b 	.word	0x0000505b
    4aac:	0000505b 	.word	0x0000505b
    4ab0:	0000505b 	.word	0x0000505b
    4ab4:	0000505b 	.word	0x0000505b
    4ab8:	0000505b 	.word	0x0000505b
    4abc:	0000505b 	.word	0x0000505b
    4ac0:	0000505b 	.word	0x0000505b
    4ac4:	0000505b 	.word	0x0000505b
    4ac8:	0000505b 	.word	0x0000505b
    4acc:	0000505b 	.word	0x0000505b
    4ad0:	0000505b 	.word	0x0000505b
    4ad4:	0000505b 	.word	0x0000505b
    4ad8:	0000505b 	.word	0x0000505b
    4adc:	0000505b 	.word	0x0000505b
    4ae0:	0000505b 	.word	0x0000505b
    4ae4:	0000505b 	.word	0x0000505b
    4ae8:	0000505b 	.word	0x0000505b
    4aec:	0000505b 	.word	0x0000505b
    4af0:	0000505b 	.word	0x0000505b
    4af4:	0000505b 	.word	0x0000505b
    4af8:	0000505b 	.word	0x0000505b
    4afc:	0000505b 	.word	0x0000505b
    4b00:	0000505b 	.word	0x0000505b
    4b04:	0000505b 	.word	0x0000505b
    4b08:	00004e61 	.word	0x00004e61
    4b0c:	0000505b 	.word	0x0000505b
    4b10:	0000505b 	.word	0x0000505b
    4b14:	0000505b 	.word	0x0000505b
    4b18:	0000505b 	.word	0x0000505b
    4b1c:	0000505b 	.word	0x0000505b
    4b20:	0000505b 	.word	0x0000505b
    4b24:	0000505b 	.word	0x0000505b
    4b28:	0000505b 	.word	0x0000505b
    4b2c:	0000505b 	.word	0x0000505b
    4b30:	0000505b 	.word	0x0000505b
    4b34:	0000505b 	.word	0x0000505b
    4b38:	0000505b 	.word	0x0000505b
    4b3c:	0000505b 	.word	0x0000505b
    4b40:	0000505b 	.word	0x0000505b
    4b44:	0000505b 	.word	0x0000505b
    4b48:	0000505b 	.word	0x0000505b
    4b4c:	0000505b 	.word	0x0000505b
    4b50:	00004bd5 	.word	0x00004bd5
    4b54:	0000505b 	.word	0x0000505b
    4b58:	0000505b 	.word	0x0000505b
    4b5c:	0000505b 	.word	0x0000505b
    4b60:	0000505b 	.word	0x0000505b
    4b64:	0000505b 	.word	0x0000505b
    4b68:	0000505b 	.word	0x0000505b
    4b6c:	0000505b 	.word	0x0000505b
    4b70:	0000505b 	.word	0x0000505b
    4b74:	0000505b 	.word	0x0000505b
    4b78:	00004bd5 	.word	0x00004bd5
    4b7c:	00004e9d 	.word	0x00004e9d
    4b80:	00004bd5 	.word	0x00004bd5
    4b84:	0000505b 	.word	0x0000505b
    4b88:	00004e61 	.word	0x00004e61
    4b8c:	0000505b 	.word	0x0000505b
    4b90:	0000505b 	.word	0x0000505b
    4b94:	00004bd5 	.word	0x00004bd5
    4b98:	0000505b 	.word	0x0000505b
    4b9c:	0000505b 	.word	0x0000505b
    4ba0:	0000505b 	.word	0x0000505b
    4ba4:	0000505b 	.word	0x0000505b
    4ba8:	0000505b 	.word	0x0000505b
    4bac:	00004bd5 	.word	0x00004bd5
    4bb0:	00004ffb 	.word	0x00004ffb
    4bb4:	0000505b 	.word	0x0000505b
    4bb8:	0000505b 	.word	0x0000505b
    4bbc:	00004f25 	.word	0x00004f25
    4bc0:	0000505b 	.word	0x0000505b
    4bc4:	00004bd5 	.word	0x00004bd5
    4bc8:	0000505b 	.word	0x0000505b
    4bcc:	0000505b 	.word	0x0000505b
    4bd0:	00004bd5 	.word	0x00004bd5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    4bd4:	683b      	ldr	r3, [r7, #0]
    4bd6:	781b      	ldrb	r3, [r3, #0]
    4bd8:	2b78      	cmp	r3, #120	; 0x78
    4bda:	d003      	beq.n	4be4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    4bdc:	683b      	ldr	r3, [r7, #0]
    4bde:	781b      	ldrb	r3, [r3, #0]
    4be0:	2b58      	cmp	r3, #88	; 0x58
    4be2:	d102      	bne.n	4bea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    4be4:	2310      	movs	r3, #16
    4be6:	643b      	str	r3, [r7, #64]	; 0x40
    4be8:	e013      	b.n	4c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    4bea:	683b      	ldr	r3, [r7, #0]
    4bec:	781b      	ldrb	r3, [r3, #0]
    4bee:	2b6f      	cmp	r3, #111	; 0x6f
    4bf0:	d102      	bne.n	4bf8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    4bf2:	2308      	movs	r3, #8
    4bf4:	643b      	str	r3, [r7, #64]	; 0x40
    4bf6:	e00c      	b.n	4c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	2b62      	cmp	r3, #98	; 0x62
    4bfe:	d102      	bne.n	4c06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    4c00:	2302      	movs	r3, #2
    4c02:	643b      	str	r3, [r7, #64]	; 0x40
    4c04:	e005      	b.n	4c12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    4c06:	230a      	movs	r3, #10
    4c08:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    4c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c0c:	f023 0310 	bic.w	r3, r3, #16
    4c10:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    4c12:	683b      	ldr	r3, [r7, #0]
    4c14:	781b      	ldrb	r3, [r3, #0]
    4c16:	2b58      	cmp	r3, #88	; 0x58
    4c18:	d103      	bne.n	4c22 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    4c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c1c:	f043 0320 	orr.w	r3, r3, #32
    4c20:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    4c22:	683b      	ldr	r3, [r7, #0]
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	2b69      	cmp	r3, #105	; 0x69
    4c28:	d007      	beq.n	4c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    4c2a:	683b      	ldr	r3, [r7, #0]
    4c2c:	781b      	ldrb	r3, [r3, #0]
    4c2e:	2b64      	cmp	r3, #100	; 0x64
    4c30:	d003      	beq.n	4c3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    4c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c34:	f023 030c 	bic.w	r3, r3, #12
    4c38:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    4c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4c40:	2b00      	cmp	r3, #0
    4c42:	d003      	beq.n	4c4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    4c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c46:	f023 0301 	bic.w	r3, r3, #1
    4c4a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    4c4c:	683b      	ldr	r3, [r7, #0]
    4c4e:	781b      	ldrb	r3, [r3, #0]
    4c50:	2b69      	cmp	r3, #105	; 0x69
    4c52:	d004      	beq.n	4c5e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    4c54:	683b      	ldr	r3, [r7, #0]
    4c56:	781b      	ldrb	r3, [r3, #0]
    4c58:	2b64      	cmp	r3, #100	; 0x64
    4c5a:	f040 808d 	bne.w	4d78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    4c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4c64:	2b00      	cmp	r3, #0
    4c66:	d02e      	beq.n	4cc6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    4c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4c6a:	3307      	adds	r3, #7
    4c6c:	f023 0307 	bic.w	r3, r3, #7
    4c70:	f103 0208 	add.w	r2, r3, #8
    4c74:	66ba      	str	r2, [r7, #104]	; 0x68
    4c76:	e9d3 3400 	ldrd	r3, r4, [r3]
    4c7a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4c7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    4c82:	2b00      	cmp	r3, #0
    4c84:	f174 0200 	sbcs.w	r2, r4, #0
    4c88:	da02      	bge.n	4c90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    4c8a:	425b      	negs	r3, r3
    4c8c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    4c90:	4619      	mov	r1, r3
    4c92:	4622      	mov	r2, r4
    4c94:	697b      	ldr	r3, [r7, #20]
    4c96:	0fdb      	lsrs	r3, r3, #31
    4c98:	b2d8      	uxtb	r0, r3
    4c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4c9c:	f04f 0400 	mov.w	r4, #0
    4ca0:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    4ca2:	9508      	str	r5, [sp, #32]
    4ca4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    4ca6:	9507      	str	r5, [sp, #28]
    4ca8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    4caa:	9506      	str	r5, [sp, #24]
    4cac:	e9cd 3404 	strd	r3, r4, [sp, #16]
    4cb0:	9002      	str	r0, [sp, #8]
    4cb2:	e9cd 1200 	strd	r1, r2, [sp]
    4cb6:	687b      	ldr	r3, [r7, #4]
    4cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4cba:	68b9      	ldr	r1, [r7, #8]
    4cbc:	68f8      	ldr	r0, [r7, #12]
    4cbe:	f7ff faf0 	bl	42a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4cc2:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    4cc4:	e0c8      	b.n	4e58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    4cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d01e      	beq.n	4d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    4cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4cd2:	1d1a      	adds	r2, r3, #4
    4cd4:	66ba      	str	r2, [r7, #104]	; 0x68
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4cda:	69fb      	ldr	r3, [r7, #28]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	bfb8      	it	lt
    4ce0:	425b      	neglt	r3, r3
    4ce2:	4619      	mov	r1, r3
    4ce4:	69fb      	ldr	r3, [r7, #28]
    4ce6:	0fdb      	lsrs	r3, r3, #31
    4ce8:	b2db      	uxtb	r3, r3
    4cea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4cec:	9205      	str	r2, [sp, #20]
    4cee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4cf0:	9204      	str	r2, [sp, #16]
    4cf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4cf4:	9203      	str	r2, [sp, #12]
    4cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4cf8:	9202      	str	r2, [sp, #8]
    4cfa:	9301      	str	r3, [sp, #4]
    4cfc:	9100      	str	r1, [sp, #0]
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4d02:	68b9      	ldr	r1, [r7, #8]
    4d04:	68f8      	ldr	r0, [r7, #12]
    4d06:	f7ff fa64 	bl	41d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4d0a:	6478      	str	r0, [r7, #68]	; 0x44
          }
    4d0c:	e0a4      	b.n	4e58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    4d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4d14:	2b00      	cmp	r3, #0
    4d16:	d005      	beq.n	4d24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    4d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4d1a:	1d1a      	adds	r2, r3, #4
    4d1c:	66ba      	str	r2, [r7, #104]	; 0x68
    4d1e:	681b      	ldr	r3, [r3, #0]
    4d20:	b2db      	uxtb	r3, r3
    4d22:	e00e      	b.n	4d42 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    4d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d005      	beq.n	4d3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    4d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4d30:	1d1a      	adds	r2, r3, #4
    4d32:	66ba      	str	r2, [r7, #104]	; 0x68
    4d34:	681b      	ldr	r3, [r3, #0]
    4d36:	b21b      	sxth	r3, r3
    4d38:	e003      	b.n	4d42 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    4d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4d3c:	1d1a      	adds	r2, r3, #4
    4d3e:	66ba      	str	r2, [r7, #104]	; 0x68
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4d44:	6a3b      	ldr	r3, [r7, #32]
    4d46:	2b00      	cmp	r3, #0
    4d48:	bfb8      	it	lt
    4d4a:	425b      	neglt	r3, r3
    4d4c:	4619      	mov	r1, r3
    4d4e:	6a3b      	ldr	r3, [r7, #32]
    4d50:	0fdb      	lsrs	r3, r3, #31
    4d52:	b2db      	uxtb	r3, r3
    4d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4d56:	9205      	str	r2, [sp, #20]
    4d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4d5a:	9204      	str	r2, [sp, #16]
    4d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4d5e:	9203      	str	r2, [sp, #12]
    4d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4d62:	9202      	str	r2, [sp, #8]
    4d64:	9301      	str	r3, [sp, #4]
    4d66:	9100      	str	r1, [sp, #0]
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4d6c:	68b9      	ldr	r1, [r7, #8]
    4d6e:	68f8      	ldr	r0, [r7, #12]
    4d70:	f7ff fa2f 	bl	41d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4d74:	6478      	str	r0, [r7, #68]	; 0x44
          }
    4d76:	e06f      	b.n	4e58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    4d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d020      	beq.n	4dc4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    4d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4d84:	3307      	adds	r3, #7
    4d86:	f023 0307 	bic.w	r3, r3, #7
    4d8a:	f103 0208 	add.w	r2, r3, #8
    4d8e:	66ba      	str	r2, [r7, #104]	; 0x68
    4d90:	e9d3 3400 	ldrd	r3, r4, [r3]
    4d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4d96:	4611      	mov	r1, r2
    4d98:	f04f 0200 	mov.w	r2, #0
    4d9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    4d9e:	9008      	str	r0, [sp, #32]
    4da0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4da2:	9007      	str	r0, [sp, #28]
    4da4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    4da6:	9006      	str	r0, [sp, #24]
    4da8:	e9cd 1204 	strd	r1, r2, [sp, #16]
    4dac:	2200      	movs	r2, #0
    4dae:	9202      	str	r2, [sp, #8]
    4db0:	e9cd 3400 	strd	r3, r4, [sp]
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4db8:	68b9      	ldr	r1, [r7, #8]
    4dba:	68f8      	ldr	r0, [r7, #12]
    4dbc:	f7ff fa71 	bl	42a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4dc0:	6478      	str	r0, [r7, #68]	; 0x44
    4dc2:	e049      	b.n	4e58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    4dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d016      	beq.n	4dfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    4dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4dd0:	1d1a      	adds	r2, r3, #4
    4dd2:	66ba      	str	r2, [r7, #104]	; 0x68
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4dd8:	9205      	str	r2, [sp, #20]
    4dda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4ddc:	9204      	str	r2, [sp, #16]
    4dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4de0:	9203      	str	r2, [sp, #12]
    4de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4de4:	9202      	str	r2, [sp, #8]
    4de6:	2200      	movs	r2, #0
    4de8:	9201      	str	r2, [sp, #4]
    4dea:	9300      	str	r3, [sp, #0]
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4df0:	68b9      	ldr	r1, [r7, #8]
    4df2:	68f8      	ldr	r0, [r7, #12]
    4df4:	f7ff f9ed 	bl	41d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4df8:	6478      	str	r0, [r7, #68]	; 0x44
    4dfa:	e02d      	b.n	4e58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    4dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4e02:	2b00      	cmp	r3, #0
    4e04:	d005      	beq.n	4e12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    4e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4e08:	1d1a      	adds	r2, r3, #4
    4e0a:	66ba      	str	r2, [r7, #104]	; 0x68
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	b2db      	uxtb	r3, r3
    4e10:	e00e      	b.n	4e30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    4e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d005      	beq.n	4e28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    4e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4e1e:	1d1a      	adds	r2, r3, #4
    4e20:	66ba      	str	r2, [r7, #104]	; 0x68
    4e22:	681b      	ldr	r3, [r3, #0]
    4e24:	b29b      	uxth	r3, r3
    4e26:	e003      	b.n	4e30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    4e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4e2a:	1d1a      	adds	r2, r3, #4
    4e2c:	66ba      	str	r2, [r7, #104]	; 0x68
    4e2e:	681b      	ldr	r3, [r3, #0]
    4e30:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e34:	9305      	str	r3, [sp, #20]
    4e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4e38:	9304      	str	r3, [sp, #16]
    4e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4e3c:	9303      	str	r3, [sp, #12]
    4e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4e40:	9302      	str	r3, [sp, #8]
    4e42:	2300      	movs	r3, #0
    4e44:	9301      	str	r3, [sp, #4]
    4e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e48:	9300      	str	r3, [sp, #0]
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4e4e:	68b9      	ldr	r1, [r7, #8]
    4e50:	68f8      	ldr	r0, [r7, #12]
    4e52:	f7ff f9be 	bl	41d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4e56:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    4e58:	683b      	ldr	r3, [r7, #0]
    4e5a:	3301      	adds	r3, #1
    4e5c:	603b      	str	r3, [r7, #0]
        break;
    4e5e:	e109      	b.n	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    4e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4e62:	3307      	adds	r3, #7
    4e64:	f023 0307 	bic.w	r3, r3, #7
    4e68:	f103 0208 	add.w	r2, r3, #8
    4e6c:	66ba      	str	r2, [r7, #104]	; 0x68
    4e6e:	ed93 7b00 	vldr	d7, [r3]
    4e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e74:	9302      	str	r3, [sp, #8]
    4e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4e78:	9301      	str	r3, [sp, #4]
    4e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4e7c:	9300      	str	r3, [sp, #0]
    4e7e:	eeb0 0a47 	vmov.f32	s0, s14
    4e82:	eef0 0a67 	vmov.f32	s1, s15
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4e8a:	68b9      	ldr	r1, [r7, #8]
    4e8c:	68f8      	ldr	r0, [r7, #12]
    4e8e:	f7ff fa79 	bl	4384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    4e92:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    4e94:	683b      	ldr	r3, [r7, #0]
    4e96:	3301      	adds	r3, #1
    4e98:	603b      	str	r3, [r7, #0]
        break;
    4e9a:	e0eb      	b.n	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    4e9c:	2301      	movs	r3, #1
    4e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    4ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4ea2:	f003 0302 	and.w	r3, r3, #2
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d113      	bne.n	4ed2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    4eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4eac:	1c5a      	adds	r2, r3, #1
    4eae:	63fa      	str	r2, [r7, #60]	; 0x3c
    4eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4eb2:	429a      	cmp	r2, r3
    4eb4:	bf8c      	ite	hi
    4eb6:	2301      	movhi	r3, #1
    4eb8:	2300      	movls	r3, #0
    4eba:	b2db      	uxtb	r3, r3
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	d008      	beq.n	4ed2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    4ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4ec2:	1c53      	adds	r3, r2, #1
    4ec4:	647b      	str	r3, [r7, #68]	; 0x44
    4ec6:	68fc      	ldr	r4, [r7, #12]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	68b9      	ldr	r1, [r7, #8]
    4ecc:	2020      	movs	r0, #32
    4ece:	47a0      	blx	r4
          while (l++ < width) {
    4ed0:	e7eb      	b.n	4eaa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4ed4:	1d1a      	adds	r2, r3, #4
    4ed6:	66ba      	str	r2, [r7, #104]	; 0x68
    4ed8:	681b      	ldr	r3, [r3, #0]
    4eda:	b2d8      	uxtb	r0, r3
    4edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4ede:	1c53      	adds	r3, r2, #1
    4ee0:	647b      	str	r3, [r7, #68]	; 0x44
    4ee2:	68fc      	ldr	r4, [r7, #12]
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	68b9      	ldr	r1, [r7, #8]
    4ee8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    4eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4eec:	f003 0302 	and.w	r3, r3, #2
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d013      	beq.n	4f1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    4ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4ef6:	1c5a      	adds	r2, r3, #1
    4ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
    4efa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4efc:	429a      	cmp	r2, r3
    4efe:	bf8c      	ite	hi
    4f00:	2301      	movhi	r3, #1
    4f02:	2300      	movls	r3, #0
    4f04:	b2db      	uxtb	r3, r3
    4f06:	2b00      	cmp	r3, #0
    4f08:	d008      	beq.n	4f1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    4f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4f0c:	1c53      	adds	r3, r2, #1
    4f0e:	647b      	str	r3, [r7, #68]	; 0x44
    4f10:	68fc      	ldr	r4, [r7, #12]
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	68b9      	ldr	r1, [r7, #8]
    4f16:	2020      	movs	r0, #32
    4f18:	47a0      	blx	r4
          while (l++ < width) {
    4f1a:	e7eb      	b.n	4ef4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    4f1c:	683b      	ldr	r3, [r7, #0]
    4f1e:	3301      	adds	r3, #1
    4f20:	603b      	str	r3, [r7, #0]
        break;
    4f22:	e0a7      	b.n	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    4f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4f26:	1d1a      	adds	r2, r3, #4
    4f28:	66ba      	str	r2, [r7, #104]	; 0x68
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    4f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4f30:	f7fe ffdf 	bl	3ef2 <_strlen(char const*)>
    4f34:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    4f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d007      	beq.n	4f50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    4f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f44:	429a      	cmp	r2, r3
    4f46:	d201      	bcs.n	4f4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    4f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f4a:	e000      	b.n	4f4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    4f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    4f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4f52:	f003 0302 	and.w	r3, r3, #2
    4f56:	2b00      	cmp	r3, #0
    4f58:	d113      	bne.n	4f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    4f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f5c:	1c5a      	adds	r2, r3, #1
    4f5e:	637a      	str	r2, [r7, #52]	; 0x34
    4f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4f62:	429a      	cmp	r2, r3
    4f64:	bf8c      	ite	hi
    4f66:	2301      	movhi	r3, #1
    4f68:	2300      	movls	r3, #0
    4f6a:	b2db      	uxtb	r3, r3
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d008      	beq.n	4f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    4f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4f72:	1c53      	adds	r3, r2, #1
    4f74:	647b      	str	r3, [r7, #68]	; 0x44
    4f76:	68fc      	ldr	r4, [r7, #12]
    4f78:	687b      	ldr	r3, [r7, #4]
    4f7a:	68b9      	ldr	r1, [r7, #8]
    4f7c:	2020      	movs	r0, #32
    4f7e:	47a0      	blx	r4
          while (l++ < width) {
    4f80:	e7eb      	b.n	4f5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4f84:	781b      	ldrb	r3, [r3, #0]
    4f86:	2b00      	cmp	r3, #0
    4f88:	d00b      	beq.n	4fa2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    4f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4f90:	2b00      	cmp	r3, #0
    4f92:	d004      	beq.n	4f9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    4f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f96:	1e5a      	subs	r2, r3, #1
    4f98:	64fa      	str	r2, [r7, #76]	; 0x4c
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d001      	beq.n	4fa2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    4f9e:	2301      	movs	r3, #1
    4fa0:	e000      	b.n	4fa4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    4fa2:	2300      	movs	r3, #0
    4fa4:	2b00      	cmp	r3, #0
    4fa6:	d00b      	beq.n	4fc0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    4fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4faa:	1c5a      	adds	r2, r3, #1
    4fac:	63ba      	str	r2, [r7, #56]	; 0x38
    4fae:	7818      	ldrb	r0, [r3, #0]
    4fb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4fb2:	1c53      	adds	r3, r2, #1
    4fb4:	647b      	str	r3, [r7, #68]	; 0x44
    4fb6:	68fc      	ldr	r4, [r7, #12]
    4fb8:	687b      	ldr	r3, [r7, #4]
    4fba:	68b9      	ldr	r1, [r7, #8]
    4fbc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4fbe:	e7e0      	b.n	4f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    4fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4fc2:	f003 0302 	and.w	r3, r3, #2
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d013      	beq.n	4ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    4fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4fcc:	1c5a      	adds	r2, r3, #1
    4fce:	637a      	str	r2, [r7, #52]	; 0x34
    4fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4fd2:	429a      	cmp	r2, r3
    4fd4:	bf8c      	ite	hi
    4fd6:	2301      	movhi	r3, #1
    4fd8:	2300      	movls	r3, #0
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d008      	beq.n	4ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    4fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4fe2:	1c53      	adds	r3, r2, #1
    4fe4:	647b      	str	r3, [r7, #68]	; 0x44
    4fe6:	68fc      	ldr	r4, [r7, #12]
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	68b9      	ldr	r1, [r7, #8]
    4fec:	2020      	movs	r0, #32
    4fee:	47a0      	blx	r4
          while (l++ < width) {
    4ff0:	e7eb      	b.n	4fca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    4ff2:	683b      	ldr	r3, [r7, #0]
    4ff4:	3301      	adds	r3, #1
    4ff6:	603b      	str	r3, [r7, #0]
        break;
    4ff8:	e03c      	b.n	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4ffa:	2308      	movs	r3, #8
    4ffc:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5000:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    5004:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    5006:	2300      	movs	r3, #0
    5008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    500c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    500e:	1d1a      	adds	r2, r3, #4
    5010:	66ba      	str	r2, [r7, #104]	; 0x68
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	461a      	mov	r2, r3
    5016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5018:	9305      	str	r3, [sp, #20]
    501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    501c:	9304      	str	r3, [sp, #16]
    501e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5020:	9303      	str	r3, [sp, #12]
    5022:	2310      	movs	r3, #16
    5024:	9302      	str	r3, [sp, #8]
    5026:	2300      	movs	r3, #0
    5028:	9301      	str	r3, [sp, #4]
    502a:	9200      	str	r2, [sp, #0]
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5030:	68b9      	ldr	r1, [r7, #8]
    5032:	68f8      	ldr	r0, [r7, #12]
    5034:	f7ff f8cd 	bl	41d2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5038:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    503a:	683b      	ldr	r3, [r7, #0]
    503c:	3301      	adds	r3, #1
    503e:	603b      	str	r3, [r7, #0]
        break;
    5040:	e018      	b.n	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    5042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5044:	1c53      	adds	r3, r2, #1
    5046:	647b      	str	r3, [r7, #68]	; 0x44
    5048:	68fc      	ldr	r4, [r7, #12]
    504a:	687b      	ldr	r3, [r7, #4]
    504c:	68b9      	ldr	r1, [r7, #8]
    504e:	2025      	movs	r0, #37	; 0x25
    5050:	47a0      	blx	r4
        format++;
    5052:	683b      	ldr	r3, [r7, #0]
    5054:	3301      	adds	r3, #1
    5056:	603b      	str	r3, [r7, #0]
        break;
    5058:	e00c      	b.n	5074 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    505a:	683b      	ldr	r3, [r7, #0]
    505c:	7818      	ldrb	r0, [r3, #0]
    505e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5060:	1c53      	adds	r3, r2, #1
    5062:	647b      	str	r3, [r7, #68]	; 0x44
    5064:	68fc      	ldr	r4, [r7, #12]
    5066:	687b      	ldr	r3, [r7, #4]
    5068:	68b9      	ldr	r1, [r7, #8]
    506a:	47a0      	blx	r4
        format++;
    506c:	683b      	ldr	r3, [r7, #0]
    506e:	3301      	adds	r3, #1
    5070:	603b      	str	r3, [r7, #0]
        break;
    5072:	bf00      	nop
  while (*format)
    5074:	f7ff bbb6 	b.w	47e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    5078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	429a      	cmp	r2, r3
    507e:	d302      	bcc.n	5086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	1e5a      	subs	r2, r3, #1
    5084:	e000      	b.n	5088 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    5086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5088:	68fc      	ldr	r4, [r7, #12]
    508a:	687b      	ldr	r3, [r7, #4]
    508c:	68b9      	ldr	r1, [r7, #8]
    508e:	2000      	movs	r0, #0
    5090:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    5092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    5094:	4618      	mov	r0, r3
    5096:	3758      	adds	r7, #88	; 0x58
    5098:	46bd      	mov	sp, r7
    509a:	bdb0      	pop	{r4, r5, r7, pc}

0000509c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    509c:	b40f      	push	{r0, r1, r2, r3}
    509e:	b580      	push	{r7, lr}
    50a0:	b086      	sub	sp, #24
    50a2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    50a4:	f107 031c 	add.w	r3, r7, #28
    50a8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    50aa:	1d39      	adds	r1, r7, #4
    50ac:	68bb      	ldr	r3, [r7, #8]
    50ae:	9300      	str	r3, [sp, #0]
    50b0:	69bb      	ldr	r3, [r7, #24]
    50b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50b6:	4806      	ldr	r0, [pc, #24]	; (50d0 <printf+0x34>)
    50b8:	f7ff fb86 	bl	47c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    50bc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    50be:	68fb      	ldr	r3, [r7, #12]
}
    50c0:	4618      	mov	r0, r3
    50c2:	3710      	adds	r7, #16
    50c4:	46bd      	mov	sp, r7
    50c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    50ca:	b004      	add	sp, #16
    50cc:	4770      	bx	lr
    50ce:	bf00      	nop
    50d0:	00003ecd 	.word	0x00003ecd

000050d4 <NVIC_EnableIRQ>:
{
    50d4:	b480      	push	{r7}
    50d6:	b083      	sub	sp, #12
    50d8:	af00      	add	r7, sp, #0
    50da:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	f003 021f 	and.w	r2, r3, #31
    50e2:	4907      	ldr	r1, [pc, #28]	; (5100 <NVIC_EnableIRQ+0x2c>)
    50e4:	687b      	ldr	r3, [r7, #4]
    50e6:	095b      	lsrs	r3, r3, #5
    50e8:	2001      	movs	r0, #1
    50ea:	fa00 f202 	lsl.w	r2, r0, r2
    50ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    50f2:	bf00      	nop
    50f4:	370c      	adds	r7, #12
    50f6:	46bd      	mov	sp, r7
    50f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    50fc:	4770      	bx	lr
    50fe:	bf00      	nop
    5100:	e000e100 	.word	0xe000e100

00005104 <NVIC_DisableIRQ>:
{
    5104:	b480      	push	{r7}
    5106:	b083      	sub	sp, #12
    5108:	af00      	add	r7, sp, #0
    510a:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	f003 021f 	and.w	r2, r3, #31
    5112:	4907      	ldr	r1, [pc, #28]	; (5130 <NVIC_DisableIRQ+0x2c>)
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	095b      	lsrs	r3, r3, #5
    5118:	2001      	movs	r0, #1
    511a:	fa00 f202 	lsl.w	r2, r0, r2
    511e:	3320      	adds	r3, #32
    5120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5124:	bf00      	nop
    5126:	370c      	adds	r7, #12
    5128:	46bd      	mov	sp, r7
    512a:	f85d 7b04 	ldr.w	r7, [sp], #4
    512e:	4770      	bx	lr
    5130:	e000e100 	.word	0xe000e100

00005134 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    5134:	b480      	push	{r7}
    5136:	b083      	sub	sp, #12
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
    513c:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    513e:	687b      	ldr	r3, [r7, #4]
    5140:	2b00      	cmp	r3, #0
    5142:	da0b      	bge.n	515c <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5144:	683b      	ldr	r3, [r7, #0]
    5146:	b2da      	uxtb	r2, r3
    5148:	490d      	ldr	r1, [pc, #52]	; (5180 <NVIC_SetPriority+0x4c>)
    514a:	687b      	ldr	r3, [r7, #4]
    514c:	f003 030f 	and.w	r3, r3, #15
    5150:	3b04      	subs	r3, #4
    5152:	0152      	lsls	r2, r2, #5
    5154:	b2d2      	uxtb	r2, r2
    5156:	440b      	add	r3, r1
    5158:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    515a:	e00a      	b.n	5172 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    515c:	683b      	ldr	r3, [r7, #0]
    515e:	b2db      	uxtb	r3, r3
    5160:	4a08      	ldr	r2, [pc, #32]	; (5184 <NVIC_SetPriority+0x50>)
    5162:	6879      	ldr	r1, [r7, #4]
    5164:	4608      	mov	r0, r1
    5166:	015b      	lsls	r3, r3, #5
    5168:	b2d9      	uxtb	r1, r3
    516a:	1813      	adds	r3, r2, r0
    516c:	460a      	mov	r2, r1
    516e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    5172:	bf00      	nop
    5174:	370c      	adds	r7, #12
    5176:	46bd      	mov	sp, r7
    5178:	f85d 7b04 	ldr.w	r7, [sp], #4
    517c:	4770      	bx	lr
    517e:	bf00      	nop
    5180:	e000ed00 	.word	0xe000ed00
    5184:	e000e100 	.word	0xe000e100

00005188 <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    5188:	b480      	push	{r7}
    518a:	b083      	sub	sp, #12
    518c:	af00      	add	r7, sp, #0
    518e:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    5190:	4b0c      	ldr	r3, [pc, #48]	; (51c4 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    5192:	681b      	ldr	r3, [r3, #0]
    5194:	68da      	ldr	r2, [r3, #12]
    5196:	4b0b      	ldr	r3, [pc, #44]	; (51c4 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    519e:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    51a0:	4b09      	ldr	r3, [pc, #36]	; (51c8 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	2200      	movs	r2, #0
    51a6:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    51a8:	4b07      	ldr	r3, [pc, #28]	; (51c8 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	681a      	ldr	r2, [r3, #0]
    51ae:	4b06      	ldr	r3, [pc, #24]	; (51c8 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	f042 0201 	orr.w	r2, r2, #1
    51b6:	601a      	str	r2, [r3, #0]
  }
    51b8:	bf00      	nop
    51ba:	370c      	adds	r7, #12
    51bc:	46bd      	mov	sp, r7
    51be:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c2:	4770      	bx	lr
    51c4:	100000c0 	.word	0x100000c0
    51c8:	100000bc 	.word	0x100000bc

000051cc <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    51cc:	b480      	push	{r7}
    51ce:	b083      	sub	sp, #12
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    51d4:	4b04      	ldr	r3, [pc, #16]	; (51e8 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    51d6:	681b      	ldr	r3, [r3, #0]
    51d8:	685b      	ldr	r3, [r3, #4]
  }
    51da:	4618      	mov	r0, r3
    51dc:	370c      	adds	r7, #12
    51de:	46bd      	mov	sp, r7
    51e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e4:	4770      	bx	lr
    51e6:	bf00      	nop
    51e8:	100000bc 	.word	0x100000bc

000051ec <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    51ec:	b480      	push	{r7}
    51ee:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    51f0:	f8df 001c 	ldr.w	r0, [pc, #28]	; 5210 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    51f4:	6801      	ldr	r1, [r0, #0]
    51f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    51fa:	6001      	str	r1, [r0, #0]
    51fc:	f3bf 8f4f 	dsb	sy
    5200:	f3bf 8f6f 	isb	sy
  }
}
    5204:	bf00      	nop
    5206:	46bd      	mov	sp, r7
    5208:	f85d 7b04 	ldr.w	r7, [sp], #4
    520c:	4770      	bx	lr
    520e:	0000      	.short	0x0000
    5210:	e000ed88 	.word	0xe000ed88

00005214 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5214:	b580      	push	{r7, lr}
    5216:	b086      	sub	sp, #24
    5218:	af00      	add	r7, sp, #0
    521a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    521c:	6878      	ldr	r0, [r7, #4]
    521e:	f000 f807 	bl	5230 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    5222:	eef0 7a40 	vmov.f32	s15, s0
	}
    5226:	eeb0 0a67 	vmov.f32	s0, s15
    522a:	3718      	adds	r7, #24
    522c:	46bd      	mov	sp, r7
    522e:	bd80      	pop	{r7, pc}

00005230 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    5230:	b480      	push	{r7}
    5232:	b085      	sub	sp, #20
    5234:	af00      	add	r7, sp, #0
    5236:	60f8      	str	r0, [r7, #12]
    5238:	7239      	strb	r1, [r7, #8]
    523a:	713a      	strb	r2, [r7, #4]
    523c:	703b      	strb	r3, [r7, #0]
			return value;
    523e:	68fb      	ldr	r3, [r7, #12]
    5240:	681b      	ldr	r3, [r3, #0]
    5242:	ee07 3a90 	vmov	s15, r3
		}
    5246:	eeb0 0a67 	vmov.f32	s0, s15
    524a:	3714      	adds	r7, #20
    524c:	46bd      	mov	sp, r7
    524e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5252:	4770      	bx	lr

00005254 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    5254:	b580      	push	{r7, lr}
    5256:	ed2d 8b02 	vpush	{d8}
    525a:	b082      	sub	sp, #8
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
    5260:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	ed93 8a00 	vldr	s16, [r3]
    5268:	683b      	ldr	r3, [r7, #0]
    526a:	4618      	mov	r0, r3
    526c:	f7ff ffd2 	bl	5214 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5270:	eef0 7a40 	vmov.f32	s15, s0
    5274:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    527c:	bf94      	ite	ls
    527e:	2301      	movls	r3, #1
    5280:	2300      	movhi	r3, #0
    5282:	b2db      	uxtb	r3, r3
		}
    5284:	4618      	mov	r0, r3
    5286:	3708      	adds	r7, #8
    5288:	46bd      	mov	sp, r7
    528a:	ecbd 8b02 	vpop	{d8}
    528e:	bd80      	pop	{r7, pc}

00005290 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    5290:	b480      	push	{r7}
    5292:	b083      	sub	sp, #12
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    5298:	4a04      	ldr	r2, [pc, #16]	; (52ac <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	6013      	str	r3, [r2, #0]
}
    529e:	bf00      	nop
    52a0:	370c      	adds	r7, #12
    52a2:	46bd      	mov	sp, r7
    52a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a8:	4770      	bx	lr
    52aa:	bf00      	nop
    52ac:	10000000 	.word	0x10000000

000052b0 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    52b0:	b480      	push	{r7}
    52b2:	b083      	sub	sp, #12
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	3310      	adds	r3, #16
  }
    52bc:	4618      	mov	r0, r3
    52be:	370c      	adds	r7, #12
    52c0:	46bd      	mov	sp, r7
    52c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c6:	4770      	bx	lr

000052c8 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    52c8:	b580      	push	{r7, lr}
    52ca:	b082      	sub	sp, #8
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    52d0:	6878      	ldr	r0, [r7, #4]
    52d2:	f7ff ffed 	bl	52b0 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    52d6:	4603      	mov	r3, r0
    52d8:	009b      	lsls	r3, r3, #2
    52da:	4a03      	ldr	r2, [pc, #12]	; (52e8 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    52dc:	4413      	add	r3, r2
  }
    52de:	4618      	mov	r0, r3
    52e0:	3708      	adds	r7, #8
    52e2:	46bd      	mov	sp, r7
    52e4:	bd80      	pop	{r7, pc}
    52e6:	bf00      	nop
    52e8:	10000180 	.word	0x10000180

000052ec <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    52ec:	b580      	push	{r7, lr}
    52ee:	b082      	sub	sp, #8
    52f0:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    52f2:	4b09      	ldr	r3, [pc, #36]	; (5318 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    52f4:	681b      	ldr	r3, [r3, #0]
    52f6:	685b      	ldr	r3, [r3, #4]
    52f8:	b2db      	uxtb	r3, r3
    52fa:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    52fc:	4a07      	ldr	r2, [pc, #28]	; (531c <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    52fe:	687b      	ldr	r3, [r7, #4]
    5300:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    5302:	4a07      	ldr	r2, [pc, #28]	; (5320 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    530a:	603b      	str	r3, [r7, #0]
    isr();
    530c:	683b      	ldr	r3, [r7, #0]
    530e:	4798      	blx	r3
  }
    5310:	bf00      	nop
    5312:	3708      	adds	r7, #8
    5314:	46bd      	mov	sp, r7
    5316:	bd80      	pop	{r7, pc}
    5318:	100000c4 	.word	0x100000c4
    531c:	10000048 	.word	0x10000048
    5320:	10000180 	.word	0x10000180

00005324 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    5324:	b084      	sub	sp, #16
    5326:	b590      	push	{r4, r7, lr}
    5328:	b085      	sub	sp, #20
    532a:	af00      	add	r7, sp, #0
    532c:	6078      	str	r0, [r7, #4]
    532e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    5332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    5336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5338:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    533a:	6abc      	ldr	r4, [r7, #40]	; 0x28
    533c:	68f8      	ldr	r0, [r7, #12]
    533e:	f7ff ffc3 	bl	52c8 <sjsu::cortex::InterruptController::GetVector(int)>
    5342:	4603      	mov	r3, r0
    5344:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    5346:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    534a:	2b00      	cmp	r3, #0
    534c:	d005      	beq.n	535a <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	2b00      	cmp	r3, #0
    5352:	db02      	blt.n	535a <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    5354:	68f8      	ldr	r0, [r7, #12]
    5356:	f7ff febd 	bl	50d4 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    535c:	2b00      	cmp	r3, #0
    535e:	db04      	blt.n	536a <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    5360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5362:	4619      	mov	r1, r3
    5364:	68f8      	ldr	r0, [r7, #12]
    5366:	f7ff fee5 	bl	5134 <NVIC_SetPriority>
    }
  }
    536a:	bf00      	nop
    536c:	3714      	adds	r7, #20
    536e:	46bd      	mov	sp, r7
    5370:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    5374:	b004      	add	sp, #16
    5376:	4770      	bx	lr

00005378 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    5378:	b580      	push	{r7, lr}
    537a:	b082      	sub	sp, #8
    537c:	af00      	add	r7, sp, #0
    537e:	6078      	str	r0, [r7, #4]
    5380:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    5382:	6838      	ldr	r0, [r7, #0]
    5384:	f7ff febe 	bl	5104 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    5388:	6838      	ldr	r0, [r7, #0]
    538a:	f7ff ff9d 	bl	52c8 <sjsu::cortex::InterruptController::GetVector(int)>
    538e:	4602      	mov	r2, r0
    5390:	4b02      	ldr	r3, [pc, #8]	; (539c <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    5392:	6013      	str	r3, [r2, #0]
  }
    5394:	bf00      	nop
    5396:	3708      	adds	r7, #8
    5398:	46bd      	mov	sp, r7
    539a:	bd80      	pop	{r7, pc}
    539c:	000019ed 	.word	0x000019ed

000053a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    53a0:	b580      	push	{r7, lr}
    53a2:	b082      	sub	sp, #8
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    53a8:	687b      	ldr	r3, [r7, #4]
    53aa:	4618      	mov	r0, r3
    53ac:	f000 f804 	bl	53b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    53b0:	6878      	ldr	r0, [r7, #4]
    53b2:	3708      	adds	r7, #8
    53b4:	46bd      	mov	sp, r7
    53b6:	bd80      	pop	{r7, pc}

000053b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    53b8:	b580      	push	{r7, lr}
    53ba:	b082      	sub	sp, #8
    53bc:	af00      	add	r7, sp, #0
    53be:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    53c0:	4903      	ldr	r1, [pc, #12]	; (53d0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    53c2:	6878      	ldr	r0, [r7, #4]
    53c4:	f000 f806 	bl	53d4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    53c8:	6878      	ldr	r0, [r7, #4]
    53ca:	3708      	adds	r7, #8
    53cc:	46bd      	mov	sp, r7
    53ce:	bd80      	pop	{r7, pc}
    53d0:	00009648 	.word	0x00009648

000053d4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    53d4:	b490      	push	{r4, r7}
    53d6:	b082      	sub	sp, #8
    53d8:	af00      	add	r7, sp, #0
    53da:	6078      	str	r0, [r7, #4]
    53dc:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    53de:	683b      	ldr	r3, [r7, #0]
    53e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    53e4:	687a      	ldr	r2, [r7, #4]
    53e6:	e9c2 3400 	strd	r3, r4, [r2]
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	4618      	mov	r0, r3
    53ee:	3708      	adds	r7, #8
    53f0:	46bd      	mov	sp, r7
    53f2:	bc90      	pop	{r4, r7}
    53f4:	4770      	bx	lr

000053f6 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    53f6:	b580      	push	{r7, lr}
    53f8:	b082      	sub	sp, #8
    53fa:	af00      	add	r7, sp, #0
    53fc:	6078      	str	r0, [r7, #4]
    53fe:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	6839      	ldr	r1, [r7, #0]
    5404:	4618      	mov	r0, r3
    5406:	f000 f811 	bl	542c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    540a:	6878      	ldr	r0, [r7, #4]
    540c:	3708      	adds	r7, #8
    540e:	46bd      	mov	sp, r7
    5410:	bd80      	pop	{r7, pc}

00005412 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    5412:	b490      	push	{r4, r7}
    5414:	b082      	sub	sp, #8
    5416:	af00      	add	r7, sp, #0
    5418:	6078      	str	r0, [r7, #4]
	{ return __r; }
    541a:	687b      	ldr	r3, [r7, #4]
    541c:	e9d3 3400 	ldrd	r3, r4, [r3]
    5420:	4618      	mov	r0, r3
    5422:	4621      	mov	r1, r4
    5424:	3708      	adds	r7, #8
    5426:	46bd      	mov	sp, r7
    5428:	bc90      	pop	{r4, r7}
    542a:	4770      	bx	lr

0000542c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    542c:	b5f0      	push	{r4, r5, r6, r7, lr}
    542e:	b085      	sub	sp, #20
    5430:	af00      	add	r7, sp, #0
    5432:	6078      	str	r0, [r7, #4]
    5434:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    5436:	6838      	ldr	r0, [r7, #0]
    5438:	f7ff ffeb 	bl	5412 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    543c:	4605      	mov	r5, r0
    543e:	460e      	mov	r6, r1
    5440:	462b      	mov	r3, r5
    5442:	4634      	mov	r4, r6
    5444:	f04f 0100 	mov.w	r1, #0
    5448:	f04f 0200 	mov.w	r2, #0
    544c:	0162      	lsls	r2, r4, #5
    544e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    5452:	0159      	lsls	r1, r3, #5
    5454:	460b      	mov	r3, r1
    5456:	4614      	mov	r4, r2
    5458:	1b5b      	subs	r3, r3, r5
    545a:	eb64 0406 	sbc.w	r4, r4, r6
    545e:	f04f 0100 	mov.w	r1, #0
    5462:	f04f 0200 	mov.w	r2, #0
    5466:	00a2      	lsls	r2, r4, #2
    5468:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    546c:	0099      	lsls	r1, r3, #2
    546e:	460b      	mov	r3, r1
    5470:	4614      	mov	r4, r2
    5472:	195b      	adds	r3, r3, r5
    5474:	eb44 0406 	adc.w	r4, r4, r6
    5478:	f04f 0100 	mov.w	r1, #0
    547c:	f04f 0200 	mov.w	r2, #0
    5480:	00e2      	lsls	r2, r4, #3
    5482:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    5486:	00d9      	lsls	r1, r3, #3
    5488:	460b      	mov	r3, r1
    548a:	4614      	mov	r4, r2
    548c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    5490:	f107 0308 	add.w	r3, r7, #8
    5494:	4619      	mov	r1, r3
    5496:	6878      	ldr	r0, [r7, #4]
    5498:	f7fb fa68 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    549c:	6878      	ldr	r0, [r7, #4]
    549e:	3714      	adds	r7, #20
    54a0:	46bd      	mov	sp, r7
    54a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000054a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    54a4:	b590      	push	{r4, r7, lr}
    54a6:	b085      	sub	sp, #20
    54a8:	af00      	add	r7, sp, #0
    54aa:	6078      	str	r0, [r7, #4]
    54ac:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    54ae:	f107 0308 	add.w	r3, r7, #8
    54b2:	6839      	ldr	r1, [r7, #0]
    54b4:	4618      	mov	r0, r3
    54b6:	f7ff ff9e 	bl	53f6 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    54ba:	f107 0308 	add.w	r3, r7, #8
    54be:	4618      	mov	r0, r3
    54c0:	f7fc fe68 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    54c4:	4603      	mov	r3, r0
    54c6:	460c      	mov	r4, r1
    54c8:	687a      	ldr	r2, [r7, #4]
    54ca:	e9c2 3400 	strd	r3, r4, [r2]
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	4618      	mov	r0, r3
    54d2:	3714      	adds	r7, #20
    54d4:	46bd      	mov	sp, r7
    54d6:	bd90      	pop	{r4, r7, pc}

000054d8 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    54d8:	b580      	push	{r7, lr}
    54da:	b084      	sub	sp, #16
    54dc:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    54de:	f107 0308 	add.w	r3, r7, #8
    54e2:	4618      	mov	r0, r3
    54e4:	f7ff ff5c 	bl	53a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    54e8:	f107 0208 	add.w	r2, r7, #8
    54ec:	463b      	mov	r3, r7
    54ee:	4611      	mov	r1, r2
    54f0:	4618      	mov	r0, r3
    54f2:	f7ff ffd7 	bl	54a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    54f6:	463b      	mov	r3, r7
    54f8:	4619      	mov	r1, r3
    54fa:	4807      	ldr	r0, [pc, #28]	; (5518 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    54fc:	f000 f9d4 	bl	58a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    5500:	4b06      	ldr	r3, [pc, #24]	; (551c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	2b00      	cmp	r3, #0
    5506:	d002      	beq.n	550e <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    5508:	4b04      	ldr	r3, [pc, #16]	; (551c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	4798      	blx	r3
    }
  }
    550e:	bf00      	nop
    5510:	3710      	adds	r7, #16
    5512:	46bd      	mov	sp, r7
    5514:	bd80      	pop	{r7, pc}
    5516:	bf00      	nop
    5518:	10000440 	.word	0x10000440
    551c:	10000438 	.word	0x10000438

00005520 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    5520:	b490      	push	{r4, r7}
    5522:	b082      	sub	sp, #8
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
  {
    return counter;
    5528:	687a      	ldr	r2, [r7, #4]
    552a:	4b05      	ldr	r3, [pc, #20]	; (5540 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    552c:	e9d3 3400 	ldrd	r3, r4, [r3]
    5530:	e9c2 3400 	strd	r3, r4, [r2]
  }
    5534:	6878      	ldr	r0, [r7, #4]
    5536:	3708      	adds	r7, #8
    5538:	46bd      	mov	sp, r7
    553a:	bc90      	pop	{r4, r7}
    553c:	4770      	bx	lr
    553e:	bf00      	nop
    5540:	10000440 	.word	0x10000440

00005544 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    5544:	b480      	push	{r7}
    5546:	b083      	sub	sp, #12
    5548:	af00      	add	r7, sp, #0
    554a:	6078      	str	r0, [r7, #4]
    554c:	bf00      	nop
    554e:	370c      	adds	r7, #12
    5550:	46bd      	mov	sp, r7
    5552:	f85d 7b04 	ldr.w	r7, [sp], #4
    5556:	4770      	bx	lr

00005558 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    5558:	b480      	push	{r7}
    555a:	b083      	sub	sp, #12
    555c:	af00      	add	r7, sp, #0
    555e:	6078      	str	r0, [r7, #4]
    5560:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    5562:	4a04      	ldr	r2, [pc, #16]	; (5574 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    5564:	683b      	ldr	r3, [r7, #0]
    5566:	6013      	str	r3, [r2, #0]
  }
    5568:	bf00      	nop
    556a:	370c      	adds	r7, #12
    556c:	46bd      	mov	sp, r7
    556e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5572:	4770      	bx	lr
    5574:	10000438 	.word	0x10000438

00005578 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    5578:	b5f0      	push	{r4, r5, r6, r7, lr}
    557a:	b08b      	sub	sp, #44	; 0x2c
    557c:	af02      	add	r7, sp, #8
    557e:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    5580:	2304      	movs	r3, #4
    5582:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    5584:	4b1f      	ldr	r3, [pc, #124]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	685b      	ldr	r3, [r3, #4]
    558a:	2b00      	cmp	r3, #0
    558c:	bf14      	ite	ne
    558e:	2301      	movne	r3, #1
    5590:	2300      	moveq	r3, #0
    5592:	b2db      	uxtb	r3, r3
    5594:	2b00      	cmp	r3, #0
    5596:	d030      	beq.n	55fa <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    5598:	4b1a      	ldr	r3, [pc, #104]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    559a:	681b      	ldr	r3, [r3, #0]
    559c:	2200      	movs	r2, #0
    559e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    55a0:	4b18      	ldr	r3, [pc, #96]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	681a      	ldr	r2, [r3, #0]
    55a6:	4b17      	ldr	r3, [pc, #92]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	f042 0202 	orr.w	r2, r2, #2
    55ae:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    55b0:	4b14      	ldr	r3, [pc, #80]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	681a      	ldr	r2, [r3, #0]
    55b6:	4b13      	ldr	r3, [pc, #76]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    55b8:	681b      	ldr	r3, [r3, #0]
    55ba:	f042 0201 	orr.w	r2, r2, #1
    55be:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    55c0:	4b10      	ldr	r3, [pc, #64]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	681a      	ldr	r2, [r3, #0]
    55c6:	4b0f      	ldr	r3, [pc, #60]	; (5604 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	f042 0204 	orr.w	r2, r2, #4
    55ce:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	689e      	ldr	r6, [r3, #8]
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    55dc:	4b0a      	ldr	r3, [pc, #40]	; (5608 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    55de:	f107 040c 	add.w	r4, r7, #12
    55e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    55e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    55e8:	69bb      	ldr	r3, [r7, #24]
    55ea:	9300      	str	r3, [sp, #0]
    55ec:	f107 030c 	add.w	r3, r7, #12
    55f0:	cb0e      	ldmia	r3, {r1, r2, r3}
    55f2:	4630      	mov	r0, r6
    55f4:	47a8      	blx	r5
      status = Status::kSuccess;
    55f6:	2300      	movs	r3, #0
    55f8:	61fb      	str	r3, [r7, #28]
    }

    return status;
    55fa:	69fb      	ldr	r3, [r7, #28]
  }
    55fc:	4618      	mov	r0, r3
    55fe:	3724      	adds	r7, #36	; 0x24
    5600:	46bd      	mov	sp, r7
    5602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5604:	100000c8 	.word	0x100000c8
    5608:	00009258 	.word	0x00009258

0000560c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    560c:	b580      	push	{r7, lr}
    560e:	b084      	sub	sp, #16
    5610:	af00      	add	r7, sp, #0
    5612:	6078      	str	r0, [r7, #4]
    5614:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	4618      	mov	r0, r3
    561a:	f7fb fba7 	bl	d6c <units::linear_scale<float>::operator()() const>
    561e:	eeb0 7a40 	vmov.f32	s14, s0
    5622:	683b      	ldr	r3, [r7, #0]
    5624:	ee07 3a90 	vmov	s15, r3
    5628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    562c:	ee77 7a67 	vsub.f32	s15, s14, s15
    5630:	f107 030c 	add.w	r3, r7, #12
    5634:	eeb0 0a67 	vmov.f32	s0, s15
    5638:	4618      	mov	r0, r3
    563a:	f7fb fbd2 	bl	de2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    563e:	68fb      	ldr	r3, [r7, #12]
	}
    5640:	4618      	mov	r0, r3
    5642:	3710      	adds	r7, #16
    5644:	46bd      	mov	sp, r7
    5646:	bd80      	pop	{r7, pc}

00005648 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    5648:	b580      	push	{r7, lr}
    564a:	b082      	sub	sp, #8
    564c:	af00      	add	r7, sp, #0
    564e:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    5650:	6878      	ldr	r0, [r7, #4]
    5652:	f7fd f882 	bl	275a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5656:	4603      	mov	r3, r0
	}
    5658:	4618      	mov	r0, r3
    565a:	3708      	adds	r7, #8
    565c:	46bd      	mov	sp, r7
    565e:	bd80      	pop	{r7, pc}

00005660 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    5660:	b590      	push	{r4, r7, lr}
    5662:	b089      	sub	sp, #36	; 0x24
    5664:	af00      	add	r7, sp, #0
    5666:	6078      	str	r0, [r7, #4]
    5668:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    566a:	f04f 0001 	mov.w	r0, #1
    566e:	f04f 0100 	mov.w	r1, #0
    5672:	f7fa ff91 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    5676:	4603      	mov	r3, r0
    5678:	60fb      	str	r3, [r7, #12]
    567a:	f107 020c 	add.w	r2, r7, #12
    567e:	463b      	mov	r3, r7
    5680:	4611      	mov	r1, r2
    5682:	4618      	mov	r0, r3
    5684:	f7ff fde6 	bl	5254 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    5688:	4603      	mov	r3, r0
    568a:	2b00      	cmp	r3, #0
    568c:	d002      	beq.n	5694 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    568e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5692:	e041      	b.n	5718 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	685a      	ldr	r2, [r3, #4]
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	685b      	ldr	r3, [r3, #4]
    569c:	681b      	ldr	r3, [r3, #0]
    569e:	330c      	adds	r3, #12
    56a0:	681b      	ldr	r3, [r3, #0]
    56a2:	4610      	mov	r0, r2
    56a4:	4798      	blx	r3
    56a6:	4603      	mov	r3, r0
    56a8:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    56aa:	463a      	mov	r2, r7
    56ac:	f107 0308 	add.w	r3, r7, #8
    56b0:	4611      	mov	r1, r2
    56b2:	4618      	mov	r0, r3
    56b4:	f7fc f95a 	bl	196c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    56b8:	4603      	mov	r3, r0
    56ba:	617b      	str	r3, [r7, #20]
    56bc:	f107 0314 	add.w	r3, r7, #20
    56c0:	2101      	movs	r1, #1
    56c2:	4618      	mov	r0, r3
    56c4:	f7ff ffa2 	bl	560c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    56c8:	4603      	mov	r3, r0
    56ca:	613b      	str	r3, [r7, #16]
    56cc:	f107 0310 	add.w	r3, r7, #16
    56d0:	4618      	mov	r0, r3
    56d2:	f7ff ffb9 	bl	5648 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    56d6:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    56d8:	f107 0308 	add.w	r3, r7, #8
    56dc:	4618      	mov	r0, r3
    56de:	f7fb fe83 	bl	13e8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    56e2:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    56e4:	463b      	mov	r3, r7
    56e6:	4618      	mov	r0, r3
    56e8:	f7fb fe7e 	bl	13e8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    56ec:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    56ee:	fbb4 f2f3 	udiv	r2, r4, r3
    56f2:	fb03 f302 	mul.w	r3, r3, r2
    56f6:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    56f8:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    56fa:	69fb      	ldr	r3, [r7, #28]
    56fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    5700:	d305      	bcc.n	570e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    5702:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5706:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    5708:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    570c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    570e:	4b04      	ldr	r3, [pc, #16]	; (5720 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	69fa      	ldr	r2, [r7, #28]
    5714:	605a      	str	r2, [r3, #4]
    return remainder;
    5716:	69bb      	ldr	r3, [r7, #24]
  }
    5718:	4618      	mov	r0, r3
    571a:	3724      	adds	r7, #36	; 0x24
    571c:	46bd      	mov	sp, r7
    571e:	bd90      	pop	{r4, r7, pc}
    5720:	100000c8 	.word	0x100000c8

00005724 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5724:	b580      	push	{r7, lr}
    5726:	b082      	sub	sp, #8
    5728:	af00      	add	r7, sp, #0
    572a:	6078      	str	r0, [r7, #4]
    572c:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    572e:	683a      	ldr	r2, [r7, #0]
    5730:	6879      	ldr	r1, [r7, #4]
    5732:	4804      	ldr	r0, [pc, #16]	; (5744 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    5734:	f7fc f83c 	bl	17b0 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    5738:	683b      	ldr	r3, [r7, #0]
}
    573a:	4618      	mov	r0, r3
    573c:	3708      	adds	r7, #8
    573e:	46bd      	mov	sp, r7
    5740:	bd80      	pop	{r7, pc}
    5742:	bf00      	nop
    5744:	1000044c 	.word	0x1000044c

00005748 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5748:	b590      	push	{r4, r7, lr}
    574a:	b087      	sub	sp, #28
    574c:	af02      	add	r7, sp, #8
    574e:	6078      	str	r0, [r7, #4]
    5750:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5752:	f107 0308 	add.w	r3, r7, #8
    5756:	4618      	mov	r0, r3
    5758:	f7fc fe75 	bl	2446 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    575c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    5760:	e9cd 3400 	strd	r3, r4, [sp]
    5764:	683a      	ldr	r2, [r7, #0]
    5766:	6879      	ldr	r1, [r7, #4]
    5768:	4803      	ldr	r0, [pc, #12]	; (5778 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    576a:	f7fc f873 	bl	1854 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    576e:	683b      	ldr	r3, [r7, #0]
}
    5770:	4618      	mov	r0, r3
    5772:	3714      	adds	r7, #20
    5774:	46bd      	mov	sp, r7
    5776:	bd90      	pop	{r4, r7, pc}
    5778:	1000044c 	.word	0x1000044c

0000577c <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    577c:	b580      	push	{r7, lr}
    577e:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5780:	4802      	ldr	r0, [pc, #8]	; (578c <ThreadRuntimeCounter+0x10>)
    5782:	f7ff fd23 	bl	51cc <sjsu::cortex::DwtCounter::GetCount()>
    5786:	4603      	mov	r3, r0
}
    5788:	4618      	mov	r0, r3
    578a:	bd80      	pop	{r7, pc}
    578c:	10000448 	.word	0x10000448

00005790 <vPortSetupTimerInterrupt>:
  // definitions.
  extern void ArmHardFaultHandler(void);
  extern void ArmResetHandler(void);

  void vPortSetupTimerInterrupt(void)  // NOLINT
  {
    5790:	b590      	push	{r4, r7, lr}
    5792:	b08b      	sub	sp, #44	; 0x2c
    5794:	af02      	add	r7, sp, #8
    interrupt_controller.Register({
    5796:	4b11      	ldr	r3, [pc, #68]	; (57dc <vPortSetupTimerInterrupt+0x4c>)
    5798:	463c      	mov	r4, r7
    579a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    579c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    57a0:	68fb      	ldr	r3, [r7, #12]
    57a2:	9300      	str	r3, [sp, #0]
    57a4:	463b      	mov	r3, r7
    57a6:	cb0e      	ldmia	r3, {r1, r2, r3}
    57a8:	480d      	ldr	r0, [pc, #52]	; (57e0 <vPortSetupTimerInterrupt+0x50>)
    57aa:	f7ff fdbb 	bl	5324 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
        .interrupt_request_number  = sjsu::cortex::SVCall_IRQn,
        .interrupt_service_routine = vPortSVCHandler,
    });
    interrupt_controller.Register({
    57ae:	4b0d      	ldr	r3, [pc, #52]	; (57e4 <vPortSetupTimerInterrupt+0x54>)
    57b0:	f107 0410 	add.w	r4, r7, #16
    57b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    57b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    57ba:	69fb      	ldr	r3, [r7, #28]
    57bc:	9300      	str	r3, [sp, #0]
    57be:	f107 0310 	add.w	r3, r7, #16
    57c2:	cb0e      	ldmia	r3, {r1, r2, r3}
    57c4:	4806      	ldr	r0, [pc, #24]	; (57e0 <vPortSetupTimerInterrupt+0x50>)
    57c6:	f7ff fdad 	bl	5324 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
    });
    // Set the SystemTick frequency to the RTOS tick frequency
    // It is critical that this happens before you set the system_clock,
    // since The system_timer keeps the time that the system_clock uses to
    // delay itself.
    system_timer.SetInterrupt(xPortSysTickHandler);
    57ca:	4907      	ldr	r1, [pc, #28]	; (57e8 <vPortSetupTimerInterrupt+0x58>)
    57cc:	4807      	ldr	r0, [pc, #28]	; (57ec <vPortSetupTimerInterrupt+0x5c>)
    57ce:	f7ff fec3 	bl	5558 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>
  }
    57d2:	bf00      	nop
    57d4:	3724      	adds	r7, #36	; 0x24
    57d6:	46bd      	mov	sp, r7
    57d8:	bd90      	pop	{r4, r7, pc}
    57da:	bf00      	nop
    57dc:	00009554 	.word	0x00009554
    57e0:	100000dc 	.word	0x100000dc
    57e4:	00009564 	.word	0x00009564
    57e8:	00005c09 	.word	0x00005c09
    57ec:	100000d0 	.word	0x100000d0

000057f0 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    57f0:	b580      	push	{r7, lr}
    57f2:	b082      	sub	sp, #8
    57f4:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    57f6:	f7ff fcf9 	bl	51ec <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    57fa:	4b1e      	ldr	r3, [pc, #120]	; (5874 <sjsu::InitializePlatform()+0x84>)
    57fc:	6819      	ldr	r1, [r3, #0]
    57fe:	481e      	ldr	r0, [pc, #120]	; (5878 <sjsu::InitializePlatform()+0x88>)
    5800:	f7fb f8fc 	bl	9fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5804:	23ff      	movs	r3, #255	; 0xff
    5806:	703b      	strb	r3, [r7, #0]
    5808:	463b      	mov	r3, r7
    580a:	2201      	movs	r2, #1
    580c:	4619      	mov	r1, r3
    580e:	481a      	ldr	r0, [pc, #104]	; (5878 <sjsu::InitializePlatform()+0x88>)
    5810:	f7fb f942 	bl	a98 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5814:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5818:	4818      	ldr	r0, [pc, #96]	; (587c <sjsu::InitializePlatform()+0x8c>)
    581a:	f7fb ff23 	bl	1664 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    581e:	4818      	ldr	r0, [pc, #96]	; (5880 <sjsu::InitializePlatform()+0x90>)
    5820:	f001 f8d0 	bl	69c4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5824:	4817      	ldr	r0, [pc, #92]	; (5884 <sjsu::InitializePlatform()+0x94>)
    5826:	f001 f8dd 	bl	69e4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    582a:	4b17      	ldr	r3, [pc, #92]	; (5888 <sjsu::InitializePlatform()+0x98>)
    582c:	6819      	ldr	r1, [r3, #0]
    582e:	4817      	ldr	r0, [pc, #92]	; (588c <sjsu::InitializePlatform()+0x9c>)
    5830:	f7ff ff16 	bl	5660 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    5834:	4815      	ldr	r0, [pc, #84]	; (588c <sjsu::InitializePlatform()+0x9c>)
    5836:	f7ff fe9f 	bl	5578 <sjsu::cortex::SystemTimer::StartTimer() const>
    583a:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    583c:	687b      	ldr	r3, [r7, #4]
    583e:	2b00      	cmp	r3, #0
    5840:	d00d      	beq.n	585e <sjsu::InitializePlatform()+0x6e>
    5842:	23d6      	movs	r3, #214	; 0xd6
    5844:	4a12      	ldr	r2, [pc, #72]	; (5890 <sjsu::InitializePlatform()+0xa0>)
    5846:	4913      	ldr	r1, [pc, #76]	; (5894 <sjsu::InitializePlatform()+0xa4>)
    5848:	4813      	ldr	r0, [pc, #76]	; (5898 <sjsu::InitializePlatform()+0xa8>)
    584a:	f7ff fc27 	bl	509c <printf>
    584e:	4813      	ldr	r0, [pc, #76]	; (589c <sjsu::InitializePlatform()+0xac>)
    5850:	f7fe fb08 	bl	3e64 <puts>
    5854:	2100      	movs	r1, #0
    5856:	2001      	movs	r0, #1
    5858:	f7fb f836 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    585c:	e7fe      	b.n	585c <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    585e:	4810      	ldr	r0, [pc, #64]	; (58a0 <sjsu::InitializePlatform()+0xb0>)
    5860:	f7ff fc92 	bl	5188 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    5864:	480f      	ldr	r0, [pc, #60]	; (58a4 <sjsu::InitializePlatform()+0xb4>)
    5866:	f7ff fd13 	bl	5290 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    586a:	bf00      	nop
    586c:	3708      	adds	r7, #8
    586e:	46bd      	mov	sp, r7
    5870:	bd80      	pop	{r7, pc}
    5872:	bf00      	nop
    5874:	00009650 	.word	0x00009650
    5878:	100000cc 	.word	0x100000cc
    587c:	1000044c 	.word	0x1000044c
    5880:	00005725 	.word	0x00005725
    5884:	00005749 	.word	0x00005749
    5888:	00009654 	.word	0x00009654
    588c:	100000d0 	.word	0x100000d0
    5890:	000096b4 	.word	0x000096b4
    5894:	00009680 	.word	0x00009680
    5898:	00009574 	.word	0x00009574
    589c:	00009308 	.word	0x00009308
    58a0:	10000448 	.word	0x10000448
    58a4:	00005521 	.word	0x00005521

000058a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    58a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58aa:	b083      	sub	sp, #12
    58ac:	af00      	add	r7, sp, #0
    58ae:	6078      	str	r0, [r7, #4]
    58b0:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    58b2:	6838      	ldr	r0, [r7, #0]
    58b4:	f7fc fc6e 	bl	2194 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    58b8:	460a      	mov	r2, r1
    58ba:	4601      	mov	r1, r0
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	e9d3 5600 	ldrd	r5, r6, [r3]
    58c2:	186b      	adds	r3, r5, r1
    58c4:	eb46 0402 	adc.w	r4, r6, r2
    58c8:	687a      	ldr	r2, [r7, #4]
    58ca:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    58ce:	687b      	ldr	r3, [r7, #4]
	}
    58d0:	4618      	mov	r0, r3
    58d2:	370c      	adds	r7, #12
    58d4:	46bd      	mov	sp, r7
    58d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000058d8 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    58d8:	b580      	push	{r7, lr}
    58da:	b082      	sub	sp, #8
    58dc:	af00      	add	r7, sp, #0
    58de:	6078      	str	r0, [r7, #4]
    58e0:	6039      	str	r1, [r7, #0]
    58e2:	687b      	ldr	r3, [r7, #4]
    58e4:	2b01      	cmp	r3, #1
    58e6:	d155      	bne.n	5994 <__static_initialization_and_destruction_0(int, int)+0xbc>
    58e8:	683b      	ldr	r3, [r7, #0]
    58ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    58ee:	4293      	cmp	r3, r2
    58f0:	d150      	bne.n	5994 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    58f2:	4b2a      	ldr	r3, [pc, #168]	; (599c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    58f4:	681b      	ldr	r3, [r3, #0]
    58f6:	f003 0301 	and.w	r3, r3, #1
    58fa:	2b00      	cmp	r3, #0
    58fc:	d106      	bne.n	590c <__static_initialization_and_destruction_0(int, int)+0x34>
    58fe:	4b27      	ldr	r3, [pc, #156]	; (599c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    5900:	2201      	movs	r2, #1
    5902:	601a      	str	r2, [r3, #0]
    5904:	4b26      	ldr	r3, [pc, #152]	; (59a0 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    5906:	4618      	mov	r0, r3
    5908:	f7fc f89a 	bl	1a40 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    590c:	4b25      	ldr	r3, [pc, #148]	; (59a4 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	f003 0301 	and.w	r3, r3, #1
    5914:	2b00      	cmp	r3, #0
    5916:	d105      	bne.n	5924 <__static_initialization_and_destruction_0(int, int)+0x4c>
    5918:	4b22      	ldr	r3, [pc, #136]	; (59a4 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    591a:	2201      	movs	r2, #1
    591c:	601a      	str	r2, [r3, #0]
    591e:	4a22      	ldr	r2, [pc, #136]	; (59a8 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    5920:	4b22      	ldr	r3, [pc, #136]	; (59ac <__static_initialization_and_destruction_0(int, int)+0xd4>)
    5922:	601a      	str	r2, [r3, #0]
    5924:	4b22      	ldr	r3, [pc, #136]	; (59b0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5926:	681b      	ldr	r3, [r3, #0]
    5928:	f003 0301 	and.w	r3, r3, #1
    592c:	2b00      	cmp	r3, #0
    592e:	d105      	bne.n	593c <__static_initialization_and_destruction_0(int, int)+0x64>
    5930:	4b1f      	ldr	r3, [pc, #124]	; (59b0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5932:	2201      	movs	r2, #1
    5934:	601a      	str	r2, [r3, #0]
    5936:	4a1f      	ldr	r2, [pc, #124]	; (59b4 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    5938:	4b1f      	ldr	r3, [pc, #124]	; (59b8 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    593a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    593c:	4b1f      	ldr	r3, [pc, #124]	; (59bc <__static_initialization_and_destruction_0(int, int)+0xe4>)
    593e:	681b      	ldr	r3, [r3, #0]
    5940:	f003 0301 	and.w	r3, r3, #1
    5944:	2b00      	cmp	r3, #0
    5946:	d105      	bne.n	5954 <__static_initialization_and_destruction_0(int, int)+0x7c>
    5948:	4b1c      	ldr	r3, [pc, #112]	; (59bc <__static_initialization_and_destruction_0(int, int)+0xe4>)
    594a:	2201      	movs	r2, #1
    594c:	601a      	str	r2, [r3, #0]
    };
    594e:	4a1c      	ldr	r2, [pc, #112]	; (59c0 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    5950:	4b1c      	ldr	r3, [pc, #112]	; (59c4 <__static_initialization_and_destruction_0(int, int)+0xec>)
    5952:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    5954:	4b1c      	ldr	r3, [pc, #112]	; (59c8 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	f003 0301 	and.w	r3, r3, #1
    595c:	2b00      	cmp	r3, #0
    595e:	d105      	bne.n	596c <__static_initialization_and_destruction_0(int, int)+0x94>
    5960:	4b19      	ldr	r3, [pc, #100]	; (59c8 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    5962:	2201      	movs	r2, #1
    5964:	601a      	str	r2, [r3, #0]
    };
    5966:	4a19      	ldr	r2, [pc, #100]	; (59cc <__static_initialization_and_destruction_0(int, int)+0xf4>)
    5968:	4b19      	ldr	r3, [pc, #100]	; (59d0 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    596a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    596c:	4b19      	ldr	r3, [pc, #100]	; (59d4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	f003 0301 	and.w	r3, r3, #1
    5974:	2b00      	cmp	r3, #0
    5976:	d105      	bne.n	5984 <__static_initialization_and_destruction_0(int, int)+0xac>
    5978:	4b16      	ldr	r3, [pc, #88]	; (59d4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    597a:	2201      	movs	r2, #1
    597c:	601a      	str	r2, [r3, #0]
    };
    597e:	4a16      	ldr	r2, [pc, #88]	; (59d8 <__static_initialization_and_destruction_0(int, int)+0x100>)
    5980:	4b16      	ldr	r3, [pc, #88]	; (59dc <__static_initialization_and_destruction_0(int, int)+0x104>)
    5982:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    5984:	f7fb fc00 	bl	1188 <sjsu::lpc40xx::DefaultSystemController()>
    5988:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    598a:	461a      	mov	r2, r3
    598c:	4914      	ldr	r1, [pc, #80]	; (59e0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    598e:	4815      	ldr	r0, [pc, #84]	; (59e4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5990:	f7fb fe4e 	bl	1630 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    5994:	bf00      	nop
    5996:	3708      	adds	r7, #8
    5998:	46bd      	mov	sp, r7
    599a:	bd80      	pop	{r7, pc}
    599c:	10000314 	.word	0x10000314
    59a0:	10000180 	.word	0x10000180
    59a4:	10000300 	.word	0x10000300
    59a8:	400fc000 	.word	0x400fc000
    59ac:	10000178 	.word	0x10000178
    59b0:	100002fc 	.word	0x100002fc
    59b4:	4002c000 	.word	0x4002c000
    59b8:	1000016c 	.word	0x1000016c
    59bc:	10000304 	.word	0x10000304
    59c0:	40098000 	.word	0x40098000
    59c4:	1000000c 	.word	0x1000000c
    59c8:	10000308 	.word	0x10000308
    59cc:	4009c000 	.word	0x4009c000
    59d0:	10000020 	.word	0x10000020
    59d4:	1000030c 	.word	0x1000030c
    59d8:	400a4000 	.word	0x400a4000
    59dc:	10000034 	.word	0x10000034
    59e0:	0000966c 	.word	0x0000966c
    59e4:	1000044c 	.word	0x1000044c

000059e8 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    59e8:	b580      	push	{r7, lr}
    59ea:	af00      	add	r7, sp, #0
    59ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    59f0:	2001      	movs	r0, #1
    59f2:	f7ff ff71 	bl	58d8 <__static_initialization_and_destruction_0(int, int)>
    59f6:	bd80      	pop	{r7, pc}

000059f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    59f8:	b480      	push	{r7}
    59fa:	b085      	sub	sp, #20
    59fc:	af00      	add	r7, sp, #0
    59fe:	60f8      	str	r0, [r7, #12]
    5a00:	60b9      	str	r1, [r7, #8]
    5a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	3b04      	subs	r3, #4
    5a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5a0a:	68fb      	ldr	r3, [r7, #12]
    5a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a12:	68fb      	ldr	r3, [r7, #12]
    5a14:	3b04      	subs	r3, #4
    5a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    5a18:	68bb      	ldr	r3, [r7, #8]
    5a1a:	f023 0201 	bic.w	r2, r3, #1
    5a1e:	68fb      	ldr	r3, [r7, #12]
    5a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a22:	68fb      	ldr	r3, [r7, #12]
    5a24:	3b04      	subs	r3, #4
    5a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    5a28:	4a0c      	ldr	r2, [pc, #48]	; (5a5c <pxPortInitialiseStack+0x64>)
    5a2a:	68fb      	ldr	r3, [r7, #12]
    5a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5a2e:	68fb      	ldr	r3, [r7, #12]
    5a30:	3b14      	subs	r3, #20
    5a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    5a34:	687a      	ldr	r2, [r7, #4]
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    5a3a:	68fb      	ldr	r3, [r7, #12]
    5a3c:	3b04      	subs	r3, #4
    5a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	f06f 0202 	mvn.w	r2, #2
    5a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5a48:	68fb      	ldr	r3, [r7, #12]
    5a4a:	3b20      	subs	r3, #32
    5a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5a4e:	68fb      	ldr	r3, [r7, #12]
}
    5a50:	4618      	mov	r0, r3
    5a52:	3714      	adds	r7, #20
    5a54:	46bd      	mov	sp, r7
    5a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5a:	4770      	bx	lr
    5a5c:	00005a61 	.word	0x00005a61

00005a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    5a60:	b480      	push	{r7}
    5a62:	b083      	sub	sp, #12
    5a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    5a66:	2300      	movs	r3, #0
    5a68:	603b      	str	r3, [r7, #0]
	__asm volatile
    5a6a:	f04f 0328 	mov.w	r3, #40	; 0x28
    5a6e:	f383 8811 	msr	BASEPRI, r3
    5a72:	f3bf 8f6f 	isb	sy
    5a76:	f3bf 8f4f 	dsb	sy
    5a7a:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    5a7c:	bf00      	nop
    5a7e:	683b      	ldr	r3, [r7, #0]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d0fc      	beq.n	5a7e <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    5a84:	bf00      	nop
    5a86:	370c      	adds	r7, #12
    5a88:	46bd      	mov	sp, r7
    5a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8e:	4770      	bx	lr

00005a90 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5a90:	4b07      	ldr	r3, [pc, #28]	; (5ab0 <pxCurrentTCBConst2>)
    5a92:	6819      	ldr	r1, [r3, #0]
    5a94:	6808      	ldr	r0, [r1, #0]
    5a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a9a:	f380 8809 	msr	PSP, r0
    5a9e:	f3bf 8f6f 	isb	sy
    5aa2:	f04f 0000 	mov.w	r0, #0
    5aa6:	f380 8811 	msr	BASEPRI, r0
    5aaa:	4770      	bx	lr
    5aac:	f3af 8000 	nop.w

00005ab0 <pxCurrentTCBConst2>:
    5ab0:	1000032c 	.word	0x1000032c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    5ab4:	bf00      	nop
    5ab6:	bf00      	nop

00005ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    5ab8:	4808      	ldr	r0, [pc, #32]	; (5adc <prvPortStartFirstTask+0x24>)
    5aba:	6800      	ldr	r0, [r0, #0]
    5abc:	6800      	ldr	r0, [r0, #0]
    5abe:	f380 8808 	msr	MSP, r0
    5ac2:	f04f 0000 	mov.w	r0, #0
    5ac6:	f380 8814 	msr	CONTROL, r0
    5aca:	b662      	cpsie	i
    5acc:	b661      	cpsie	f
    5ace:	f3bf 8f4f 	dsb	sy
    5ad2:	f3bf 8f6f 	isb	sy
    5ad6:	df00      	svc	0
    5ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    5ada:	bf00      	nop
    5adc:	e000ed08 	.word	0xe000ed08

00005ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    5ae4:	4b10      	ldr	r3, [pc, #64]	; (5b28 <xPortStartScheduler+0x48>)
    5ae6:	681b      	ldr	r3, [r3, #0]
    5ae8:	4a0f      	ldr	r2, [pc, #60]	; (5b28 <xPortStartScheduler+0x48>)
    5aea:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    5aee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    5af0:	4b0d      	ldr	r3, [pc, #52]	; (5b28 <xPortStartScheduler+0x48>)
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	4a0c      	ldr	r2, [pc, #48]	; (5b28 <xPortStartScheduler+0x48>)
    5af6:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    5afa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    5afc:	f7ff fe48 	bl	5790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5b00:	4b0a      	ldr	r3, [pc, #40]	; (5b2c <xPortStartScheduler+0x4c>)
    5b02:	2200      	movs	r2, #0
    5b04:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    5b06:	f000 f89f 	bl	5c48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    5b0a:	4b09      	ldr	r3, [pc, #36]	; (5b30 <xPortStartScheduler+0x50>)
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	4a08      	ldr	r2, [pc, #32]	; (5b30 <xPortStartScheduler+0x50>)
    5b10:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5b14:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5b16:	f7ff ffcf 	bl	5ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    5b1a:	f7fd fe4f 	bl	37bc <vTaskSwitchContext>
	prvTaskExitError();
    5b1e:	f7ff ff9f 	bl	5a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    5b22:	2300      	movs	r3, #0
}
    5b24:	4618      	mov	r0, r3
    5b26:	bd80      	pop	{r7, pc}
    5b28:	e000ed20 	.word	0xe000ed20
    5b2c:	100000e0 	.word	0x100000e0
    5b30:	e000ef34 	.word	0xe000ef34

00005b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5b34:	b480      	push	{r7}
    5b36:	b083      	sub	sp, #12
    5b38:	af00      	add	r7, sp, #0
    5b3a:	f04f 0328 	mov.w	r3, #40	; 0x28
    5b3e:	f383 8811 	msr	BASEPRI, r3
    5b42:	f3bf 8f6f 	isb	sy
    5b46:	f3bf 8f4f 	dsb	sy
    5b4a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    5b4c:	4b05      	ldr	r3, [pc, #20]	; (5b64 <vPortEnterCritical+0x30>)
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	3301      	adds	r3, #1
    5b52:	4a04      	ldr	r2, [pc, #16]	; (5b64 <vPortEnterCritical+0x30>)
    5b54:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    5b56:	bf00      	nop
    5b58:	370c      	adds	r7, #12
    5b5a:	46bd      	mov	sp, r7
    5b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b60:	4770      	bx	lr
    5b62:	bf00      	nop
    5b64:	100000e0 	.word	0x100000e0

00005b68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5b68:	b480      	push	{r7}
    5b6a:	b083      	sub	sp, #12
    5b6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    5b6e:	4b0a      	ldr	r3, [pc, #40]	; (5b98 <vPortExitCritical+0x30>)
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	3b01      	subs	r3, #1
    5b74:	4a08      	ldr	r2, [pc, #32]	; (5b98 <vPortExitCritical+0x30>)
    5b76:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    5b78:	4b07      	ldr	r3, [pc, #28]	; (5b98 <vPortExitCritical+0x30>)
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d104      	bne.n	5b8a <vPortExitCritical+0x22>
    5b80:	2300      	movs	r3, #0
    5b82:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    5b8a:	bf00      	nop
    5b8c:	370c      	adds	r7, #12
    5b8e:	46bd      	mov	sp, r7
    5b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b94:	4770      	bx	lr
    5b96:	bf00      	nop
    5b98:	100000e0 	.word	0x100000e0
    5b9c:	ffffffff 	.word	0xffffffff

00005ba0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5ba0:	f3ef 8009 	mrs	r0, PSP
    5ba4:	f3bf 8f6f 	isb	sy
    5ba8:	4b15      	ldr	r3, [pc, #84]	; (5c00 <pxCurrentTCBConst>)
    5baa:	681a      	ldr	r2, [r3, #0]
    5bac:	f01e 0f10 	tst.w	lr, #16
    5bb0:	bf08      	it	eq
    5bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    5bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bba:	6010      	str	r0, [r2, #0]
    5bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
    5bc0:	f04f 0028 	mov.w	r0, #40	; 0x28
    5bc4:	f380 8811 	msr	BASEPRI, r0
    5bc8:	f3bf 8f4f 	dsb	sy
    5bcc:	f3bf 8f6f 	isb	sy
    5bd0:	f7fd fdf4 	bl	37bc <vTaskSwitchContext>
    5bd4:	f04f 0000 	mov.w	r0, #0
    5bd8:	f380 8811 	msr	BASEPRI, r0
    5bdc:	bc09      	pop	{r0, r3}
    5bde:	6819      	ldr	r1, [r3, #0]
    5be0:	6808      	ldr	r0, [r1, #0]
    5be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5be6:	f01e 0f10 	tst.w	lr, #16
    5bea:	bf08      	it	eq
    5bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    5bf0:	f380 8809 	msr	PSP, r0
    5bf4:	f3bf 8f6f 	isb	sy
    5bf8:	4770      	bx	lr
    5bfa:	bf00      	nop
    5bfc:	f3af 8000 	nop.w

00005c00 <pxCurrentTCBConst>:
    5c00:	1000032c 	.word	0x1000032c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    5c04:	bf00      	nop
    5c06:	bf00      	nop

00005c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	b082      	sub	sp, #8
    5c0c:	af00      	add	r7, sp, #0
	__asm volatile
    5c0e:	f04f 0328 	mov.w	r3, #40	; 0x28
    5c12:	f383 8811 	msr	BASEPRI, r3
    5c16:	f3bf 8f6f 	isb	sy
    5c1a:	f3bf 8f4f 	dsb	sy
    5c1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    5c20:	f7fd fd20 	bl	3664 <xTaskIncrementTick>
    5c24:	4603      	mov	r3, r0
    5c26:	2b00      	cmp	r3, #0
    5c28:	d003      	beq.n	5c32 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    5c2a:	4b06      	ldr	r3, [pc, #24]	; (5c44 <xPortSysTickHandler+0x3c>)
    5c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c30:	601a      	str	r2, [r3, #0]
    5c32:	2300      	movs	r3, #0
    5c34:	603b      	str	r3, [r7, #0]
	__asm volatile
    5c36:	683b      	ldr	r3, [r7, #0]
    5c38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    5c3c:	bf00      	nop
    5c3e:	3708      	adds	r7, #8
    5c40:	46bd      	mov	sp, r7
    5c42:	bd80      	pop	{r7, pc}
    5c44:	e000ed04 	.word	0xe000ed04

00005c48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    5c48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 5c58 <vPortEnableVFP+0x10>
    5c4c:	6801      	ldr	r1, [r0, #0]
    5c4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5c52:	6001      	str	r1, [r0, #0]
    5c54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    5c56:	bf00      	nop
    5c58:	e000ed88 	.word	0xe000ed88

00005c5c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    5c5c:	b480      	push	{r7}
    5c5e:	b083      	sub	sp, #12
    5c60:	af00      	add	r7, sp, #0
    5c62:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    5c64:	2350      	movs	r3, #80	; 0x50
    5c66:	4618      	mov	r0, r3
    5c68:	370c      	adds	r7, #12
    5c6a:	46bd      	mov	sp, r7
    5c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c70:	4770      	bx	lr
    5c72:	Address 0x0000000000005c72 is out of bounds.


00005c74 <vApplicationGetIdleTaskMemory>:
static StackType_t idle_task_stack[configMINIMAL_STACK_SIZE];
extern "C" void vApplicationGetIdleTaskMemory(  // NOLINT
    StaticTask_t ** ppx_idle_task_tcb_buffer,
    StackType_t ** ppx_idle_task_stack_buffer,
    uint32_t * pul_idle_task_stack_size)
{
    5c74:	b580      	push	{r7, lr}
    5c76:	b084      	sub	sp, #16
    5c78:	af00      	add	r7, sp, #0
    5c7a:	60f8      	str	r0, [r7, #12]
    5c7c:	60b9      	str	r1, [r7, #8]
    5c7e:	607a      	str	r2, [r7, #4]
  *ppx_idle_task_tcb_buffer   = &idle_task_tcb;
    5c80:	68fb      	ldr	r3, [r7, #12]
    5c82:	4a07      	ldr	r2, [pc, #28]	; (5ca0 <vApplicationGetIdleTaskMemory+0x2c>)
    5c84:	601a      	str	r2, [r3, #0]
  *ppx_idle_task_stack_buffer = idle_task_stack;
    5c86:	68bb      	ldr	r3, [r7, #8]
    5c88:	4a06      	ldr	r2, [pc, #24]	; (5ca4 <vApplicationGetIdleTaskMemory+0x30>)
    5c8a:	601a      	str	r2, [r3, #0]
  *pul_idle_task_stack_size   = std::size(idle_task_stack);
    5c8c:	4805      	ldr	r0, [pc, #20]	; (5ca4 <vApplicationGetIdleTaskMemory+0x30>)
    5c8e:	f7ff ffe5 	bl	5c5c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>
    5c92:	4602      	mov	r2, r0
    5c94:	687b      	ldr	r3, [r7, #4]
    5c96:	601a      	str	r2, [r3, #0]
}
    5c98:	bf00      	nop
    5c9a:	3710      	adds	r7, #16
    5c9c:	46bd      	mov	sp, r7
    5c9e:	bd80      	pop	{r7, pc}
    5ca0:	10000458 	.word	0x10000458
    5ca4:	100004b8 	.word	0x100004b8

00005ca8 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    5ca8:	b480      	push	{r7}
    5caa:	b083      	sub	sp, #12
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    5cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
    5cb4:	4618      	mov	r0, r3
    5cb6:	370c      	adds	r7, #12
    5cb8:	46bd      	mov	sp, r7
    5cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cbe:	4770      	bx	lr

00005cc0 <vApplicationGetTimerTaskMemory>:
static StackType_t timer_task_stack[configTIMER_TASK_STACK_DEPTH];
extern "C" void vApplicationGetTimerTaskMemory( // NOLINT
    StaticTask_t ** ppx_timer_task_tcb_buffer,
    StackType_t ** ppx_timer_task_stack_buffer,
    uint32_t * pul_timer_task_stack_size)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b084      	sub	sp, #16
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	60f8      	str	r0, [r7, #12]
    5cc8:	60b9      	str	r1, [r7, #8]
    5cca:	607a      	str	r2, [r7, #4]
    *ppx_timer_task_tcb_buffer = &timer_task_tcb;
    5ccc:	68fb      	ldr	r3, [r7, #12]
    5cce:	4a07      	ldr	r2, [pc, #28]	; (5cec <vApplicationGetTimerTaskMemory+0x2c>)
    5cd0:	601a      	str	r2, [r3, #0]
    *ppx_timer_task_stack_buffer = timer_task_stack;
    5cd2:	68bb      	ldr	r3, [r7, #8]
    5cd4:	4a06      	ldr	r2, [pc, #24]	; (5cf0 <vApplicationGetTimerTaskMemory+0x30>)
    5cd6:	601a      	str	r2, [r3, #0]
    *pul_timer_task_stack_size = std::size(timer_task_stack);
    5cd8:	4805      	ldr	r0, [pc, #20]	; (5cf0 <vApplicationGetTimerTaskMemory+0x30>)
    5cda:	f7ff ffe5 	bl	5ca8 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>
    5cde:	4602      	mov	r2, r0
    5ce0:	687b      	ldr	r3, [r7, #4]
    5ce2:	601a      	str	r2, [r3, #0]
}
    5ce4:	bf00      	nop
    5ce6:	3710      	adds	r7, #16
    5ce8:	46bd      	mov	sp, r7
    5cea:	bd80      	pop	{r7, pc}
    5cec:	100005f8 	.word	0x100005f8
    5cf0:	10000658 	.word	0x10000658

00005cf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b088      	sub	sp, #32
    5cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    5cfa:	2300      	movs	r3, #0
    5cfc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    5cfe:	f000 fa5b 	bl	61b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    5d02:	4b15      	ldr	r3, [pc, #84]	; (5d58 <xTimerCreateTimerTask+0x64>)
    5d04:	681b      	ldr	r3, [r3, #0]
    5d06:	2b00      	cmp	r3, #0
    5d08:	d020      	beq.n	5d4c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    5d0a:	2300      	movs	r3, #0
    5d0c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    5d0e:	2300      	movs	r3, #0
    5d10:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    5d12:	463a      	mov	r2, r7
    5d14:	1d39      	adds	r1, r7, #4
    5d16:	f107 0308 	add.w	r3, r7, #8
    5d1a:	4618      	mov	r0, r3
    5d1c:	f7ff ffd0 	bl	5cc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    5d20:	6839      	ldr	r1, [r7, #0]
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	68ba      	ldr	r2, [r7, #8]
    5d26:	9202      	str	r2, [sp, #8]
    5d28:	9301      	str	r3, [sp, #4]
    5d2a:	2304      	movs	r3, #4
    5d2c:	9300      	str	r3, [sp, #0]
    5d2e:	2300      	movs	r3, #0
    5d30:	460a      	mov	r2, r1
    5d32:	490a      	ldr	r1, [pc, #40]	; (5d5c <xTimerCreateTimerTask+0x68>)
    5d34:	480a      	ldr	r0, [pc, #40]	; (5d60 <xTimerCreateTimerTask+0x6c>)
    5d36:	f7fd fa11 	bl	315c <xTaskCreateStatic>
    5d3a:	4602      	mov	r2, r0
    5d3c:	4b09      	ldr	r3, [pc, #36]	; (5d64 <xTimerCreateTimerTask+0x70>)
    5d3e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    5d40:	4b08      	ldr	r3, [pc, #32]	; (5d64 <xTimerCreateTimerTask+0x70>)
    5d42:	681b      	ldr	r3, [r3, #0]
    5d44:	2b00      	cmp	r3, #0
    5d46:	d001      	beq.n	5d4c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
    5d48:	2301      	movs	r3, #1
    5d4a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    5d4c:	68fb      	ldr	r3, [r7, #12]
}
    5d4e:	4618      	mov	r0, r3
    5d50:	3710      	adds	r7, #16
    5d52:	46bd      	mov	sp, r7
    5d54:	bd80      	pop	{r7, pc}
    5d56:	bf00      	nop
    5d58:	10000e88 	.word	0x10000e88
    5d5c:	000096d4 	.word	0x000096d4
    5d60:	00005e4d 	.word	0x00005e4d
    5d64:	10000e8c 	.word	0x10000e8c

00005d68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    5d68:	b580      	push	{r7, lr}
    5d6a:	b088      	sub	sp, #32
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	60f8      	str	r0, [r7, #12]
    5d70:	60b9      	str	r1, [r7, #8]
    5d72:	607a      	str	r2, [r7, #4]
    5d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    5d76:	2300      	movs	r3, #0
    5d78:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    5d7a:	4b1a      	ldr	r3, [pc, #104]	; (5de4 <xTimerGenericCommand+0x7c>)
    5d7c:	681b      	ldr	r3, [r3, #0]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d02a      	beq.n	5dd8 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    5d82:	68bb      	ldr	r3, [r7, #8]
    5d84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5d86:	687b      	ldr	r3, [r7, #4]
    5d88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    5d8a:	68fb      	ldr	r3, [r7, #12]
    5d8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    5d8e:	68bb      	ldr	r3, [r7, #8]
    5d90:	2b05      	cmp	r3, #5
    5d92:	dc18      	bgt.n	5dc6 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    5d94:	f7fd ff1c 	bl	3bd0 <xTaskGetSchedulerState>
    5d98:	4603      	mov	r3, r0
    5d9a:	2b02      	cmp	r3, #2
    5d9c:	d109      	bne.n	5db2 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    5d9e:	4b11      	ldr	r3, [pc, #68]	; (5de4 <xTimerGenericCommand+0x7c>)
    5da0:	6818      	ldr	r0, [r3, #0]
    5da2:	f107 0110 	add.w	r1, r7, #16
    5da6:	2300      	movs	r3, #0
    5da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5daa:	f000 fae1 	bl	6370 <xQueueGenericSend>
    5dae:	61f8      	str	r0, [r7, #28]
    5db0:	e012      	b.n	5dd8 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    5db2:	4b0c      	ldr	r3, [pc, #48]	; (5de4 <xTimerGenericCommand+0x7c>)
    5db4:	6818      	ldr	r0, [r3, #0]
    5db6:	f107 0110 	add.w	r1, r7, #16
    5dba:	2300      	movs	r3, #0
    5dbc:	2200      	movs	r2, #0
    5dbe:	f000 fad7 	bl	6370 <xQueueGenericSend>
    5dc2:	61f8      	str	r0, [r7, #28]
    5dc4:	e008      	b.n	5dd8 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    5dc6:	4b07      	ldr	r3, [pc, #28]	; (5de4 <xTimerGenericCommand+0x7c>)
    5dc8:	6818      	ldr	r0, [r3, #0]
    5dca:	f107 0110 	add.w	r1, r7, #16
    5dce:	2300      	movs	r3, #0
    5dd0:	683a      	ldr	r2, [r7, #0]
    5dd2:	f000 fb77 	bl	64c4 <xQueueGenericSendFromISR>
    5dd6:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    5dd8:	69fb      	ldr	r3, [r7, #28]
}
    5dda:	4618      	mov	r0, r3
    5ddc:	3720      	adds	r7, #32
    5dde:	46bd      	mov	sp, r7
    5de0:	bd80      	pop	{r7, pc}
    5de2:	bf00      	nop
    5de4:	10000e88 	.word	0x10000e88

00005de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b086      	sub	sp, #24
    5dec:	af02      	add	r7, sp, #8
    5dee:	6078      	str	r0, [r7, #4]
    5df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    5df2:	4b15      	ldr	r3, [pc, #84]	; (5e48 <prvProcessExpiredTimer+0x60>)
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	68db      	ldr	r3, [r3, #12]
    5df8:	68db      	ldr	r3, [r3, #12]
    5dfa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5dfc:	68fb      	ldr	r3, [r7, #12]
    5dfe:	3304      	adds	r3, #4
    5e00:	4618      	mov	r0, r3
    5e02:	f7fd f981 	bl	3108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	69db      	ldr	r3, [r3, #28]
    5e0a:	2b01      	cmp	r3, #1
    5e0c:	d114      	bne.n	5e38 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5e0e:	68fb      	ldr	r3, [r7, #12]
    5e10:	699a      	ldr	r2, [r3, #24]
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	18d1      	adds	r1, r2, r3
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	683a      	ldr	r2, [r7, #0]
    5e1a:	68f8      	ldr	r0, [r7, #12]
    5e1c:	f000 f8ba 	bl	5f94 <prvInsertTimerInActiveList>
    5e20:	4603      	mov	r3, r0
    5e22:	2b00      	cmp	r3, #0
    5e24:	d008      	beq.n	5e38 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5e26:	2300      	movs	r3, #0
    5e28:	9300      	str	r3, [sp, #0]
    5e2a:	2300      	movs	r3, #0
    5e2c:	687a      	ldr	r2, [r7, #4]
    5e2e:	2100      	movs	r1, #0
    5e30:	68f8      	ldr	r0, [r7, #12]
    5e32:	f7ff ff99 	bl	5d68 <xTimerGenericCommand>
    5e36:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5e38:	68fb      	ldr	r3, [r7, #12]
    5e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e3c:	68f8      	ldr	r0, [r7, #12]
    5e3e:	4798      	blx	r3
}
    5e40:	bf00      	nop
    5e42:	3710      	adds	r7, #16
    5e44:	46bd      	mov	sp, r7
    5e46:	bd80      	pop	{r7, pc}
    5e48:	10000e80 	.word	0x10000e80

00005e4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    5e4c:	b580      	push	{r7, lr}
    5e4e:	b084      	sub	sp, #16
    5e50:	af00      	add	r7, sp, #0
    5e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    5e54:	f107 0308 	add.w	r3, r7, #8
    5e58:	4618      	mov	r0, r3
    5e5a:	f000 f857 	bl	5f0c <prvGetNextExpireTime>
    5e5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    5e60:	68bb      	ldr	r3, [r7, #8]
    5e62:	4619      	mov	r1, r3
    5e64:	68f8      	ldr	r0, [r7, #12]
    5e66:	f000 f803 	bl	5e70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    5e6a:	f000 f8d5 	bl	6018 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    5e6e:	e7f1      	b.n	5e54 <prvTimerTask+0x8>

00005e70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    5e70:	b580      	push	{r7, lr}
    5e72:	b084      	sub	sp, #16
    5e74:	af00      	add	r7, sp, #0
    5e76:	6078      	str	r0, [r7, #4]
    5e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    5e7a:	f7fd fb47 	bl	350c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5e7e:	f107 0308 	add.w	r3, r7, #8
    5e82:	4618      	mov	r0, r3
    5e84:	f000 f866 	bl	5f54 <prvSampleTimeNow>
    5e88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    5e8a:	68bb      	ldr	r3, [r7, #8]
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d130      	bne.n	5ef2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5e90:	683b      	ldr	r3, [r7, #0]
    5e92:	2b00      	cmp	r3, #0
    5e94:	d10a      	bne.n	5eac <prvProcessTimerOrBlockTask+0x3c>
    5e96:	687a      	ldr	r2, [r7, #4]
    5e98:	68fb      	ldr	r3, [r7, #12]
    5e9a:	429a      	cmp	r2, r3
    5e9c:	d806      	bhi.n	5eac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    5e9e:	f7fd fb43 	bl	3528 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5ea2:	68f9      	ldr	r1, [r7, #12]
    5ea4:	6878      	ldr	r0, [r7, #4]
    5ea6:	f7ff ff9f 	bl	5de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    5eaa:	e024      	b.n	5ef6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    5eac:	683b      	ldr	r3, [r7, #0]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d008      	beq.n	5ec4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5eb2:	4b13      	ldr	r3, [pc, #76]	; (5f00 <prvProcessTimerOrBlockTask+0x90>)
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	2b00      	cmp	r3, #0
    5eba:	bf0c      	ite	eq
    5ebc:	2301      	moveq	r3, #1
    5ebe:	2300      	movne	r3, #0
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5ec4:	4b0f      	ldr	r3, [pc, #60]	; (5f04 <prvProcessTimerOrBlockTask+0x94>)
    5ec6:	6818      	ldr	r0, [r3, #0]
    5ec8:	687a      	ldr	r2, [r7, #4]
    5eca:	68fb      	ldr	r3, [r7, #12]
    5ecc:	1ad3      	subs	r3, r2, r3
    5ece:	683a      	ldr	r2, [r7, #0]
    5ed0:	4619      	mov	r1, r3
    5ed2:	f000 fd2b 	bl	692c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    5ed6:	f7fd fb27 	bl	3528 <xTaskResumeAll>
    5eda:	4603      	mov	r3, r0
    5edc:	2b00      	cmp	r3, #0
    5ede:	d10a      	bne.n	5ef6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    5ee0:	4b09      	ldr	r3, [pc, #36]	; (5f08 <prvProcessTimerOrBlockTask+0x98>)
    5ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5ee6:	601a      	str	r2, [r3, #0]
    5ee8:	f3bf 8f4f 	dsb	sy
    5eec:	f3bf 8f6f 	isb	sy
}
    5ef0:	e001      	b.n	5ef6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    5ef2:	f7fd fb19 	bl	3528 <xTaskResumeAll>
}
    5ef6:	bf00      	nop
    5ef8:	3710      	adds	r7, #16
    5efa:	46bd      	mov	sp, r7
    5efc:	bd80      	pop	{r7, pc}
    5efe:	bf00      	nop
    5f00:	10000e84 	.word	0x10000e84
    5f04:	10000e88 	.word	0x10000e88
    5f08:	e000ed04 	.word	0xe000ed04

00005f0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    5f0c:	b480      	push	{r7}
    5f0e:	b085      	sub	sp, #20
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5f14:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <prvGetNextExpireTime+0x44>)
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	bf0c      	ite	eq
    5f1e:	2301      	moveq	r3, #1
    5f20:	2300      	movne	r3, #0
    5f22:	b2db      	uxtb	r3, r3
    5f24:	461a      	mov	r2, r3
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    5f2a:	687b      	ldr	r3, [r7, #4]
    5f2c:	681b      	ldr	r3, [r3, #0]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d105      	bne.n	5f3e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5f32:	4b07      	ldr	r3, [pc, #28]	; (5f50 <prvGetNextExpireTime+0x44>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	68db      	ldr	r3, [r3, #12]
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	60fb      	str	r3, [r7, #12]
    5f3c:	e001      	b.n	5f42 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    5f3e:	2300      	movs	r3, #0
    5f40:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    5f42:	68fb      	ldr	r3, [r7, #12]
}
    5f44:	4618      	mov	r0, r3
    5f46:	3714      	adds	r7, #20
    5f48:	46bd      	mov	sp, r7
    5f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f4e:	4770      	bx	lr
    5f50:	10000e80 	.word	0x10000e80

00005f54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    5f54:	b580      	push	{r7, lr}
    5f56:	b084      	sub	sp, #16
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    5f5c:	f7fd fb72 	bl	3644 <xTaskGetTickCount>
    5f60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    5f62:	4b0b      	ldr	r3, [pc, #44]	; (5f90 <prvSampleTimeNow+0x3c>)
    5f64:	681b      	ldr	r3, [r3, #0]
    5f66:	68fa      	ldr	r2, [r7, #12]
    5f68:	429a      	cmp	r2, r3
    5f6a:	d205      	bcs.n	5f78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    5f6c:	f000 f8d0 	bl	6110 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	2201      	movs	r2, #1
    5f74:	601a      	str	r2, [r3, #0]
    5f76:	e002      	b.n	5f7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	2200      	movs	r2, #0
    5f7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    5f7e:	4a04      	ldr	r2, [pc, #16]	; (5f90 <prvSampleTimeNow+0x3c>)
    5f80:	68fb      	ldr	r3, [r7, #12]
    5f82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    5f84:	68fb      	ldr	r3, [r7, #12]
}
    5f86:	4618      	mov	r0, r3
    5f88:	3710      	adds	r7, #16
    5f8a:	46bd      	mov	sp, r7
    5f8c:	bd80      	pop	{r7, pc}
    5f8e:	bf00      	nop
    5f90:	10000e90 	.word	0x10000e90

00005f94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b086      	sub	sp, #24
    5f98:	af00      	add	r7, sp, #0
    5f9a:	60f8      	str	r0, [r7, #12]
    5f9c:	60b9      	str	r1, [r7, #8]
    5f9e:	607a      	str	r2, [r7, #4]
    5fa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    5fa2:	2300      	movs	r3, #0
    5fa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5fa6:	68fb      	ldr	r3, [r7, #12]
    5fa8:	68ba      	ldr	r2, [r7, #8]
    5faa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5fac:	68fb      	ldr	r3, [r7, #12]
    5fae:	68fa      	ldr	r2, [r7, #12]
    5fb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    5fb2:	68ba      	ldr	r2, [r7, #8]
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	429a      	cmp	r2, r3
    5fb8:	d812      	bhi.n	5fe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5fba:	687a      	ldr	r2, [r7, #4]
    5fbc:	683b      	ldr	r3, [r7, #0]
    5fbe:	1ad2      	subs	r2, r2, r3
    5fc0:	68fb      	ldr	r3, [r7, #12]
    5fc2:	699b      	ldr	r3, [r3, #24]
    5fc4:	429a      	cmp	r2, r3
    5fc6:	d302      	bcc.n	5fce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5fc8:	2301      	movs	r3, #1
    5fca:	617b      	str	r3, [r7, #20]
    5fcc:	e01b      	b.n	6006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5fce:	4b10      	ldr	r3, [pc, #64]	; (6010 <prvInsertTimerInActiveList+0x7c>)
    5fd0:	681a      	ldr	r2, [r3, #0]
    5fd2:	68fb      	ldr	r3, [r7, #12]
    5fd4:	3304      	adds	r3, #4
    5fd6:	4619      	mov	r1, r3
    5fd8:	4610      	mov	r0, r2
    5fda:	f7fd f85c 	bl	3096 <vListInsert>
    5fde:	e012      	b.n	6006 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5fe0:	687a      	ldr	r2, [r7, #4]
    5fe2:	683b      	ldr	r3, [r7, #0]
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d206      	bcs.n	5ff6 <prvInsertTimerInActiveList+0x62>
    5fe8:	68ba      	ldr	r2, [r7, #8]
    5fea:	683b      	ldr	r3, [r7, #0]
    5fec:	429a      	cmp	r2, r3
    5fee:	d302      	bcc.n	5ff6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    5ff0:	2301      	movs	r3, #1
    5ff2:	617b      	str	r3, [r7, #20]
    5ff4:	e007      	b.n	6006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5ff6:	4b07      	ldr	r3, [pc, #28]	; (6014 <prvInsertTimerInActiveList+0x80>)
    5ff8:	681a      	ldr	r2, [r3, #0]
    5ffa:	68fb      	ldr	r3, [r7, #12]
    5ffc:	3304      	adds	r3, #4
    5ffe:	4619      	mov	r1, r3
    6000:	4610      	mov	r0, r2
    6002:	f7fd f848 	bl	3096 <vListInsert>
		}
	}

	return xProcessTimerNow;
    6006:	697b      	ldr	r3, [r7, #20]
}
    6008:	4618      	mov	r0, r3
    600a:	3718      	adds	r7, #24
    600c:	46bd      	mov	sp, r7
    600e:	bd80      	pop	{r7, pc}
    6010:	10000e84 	.word	0x10000e84
    6014:	10000e80 	.word	0x10000e80

00006018 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    6018:	b580      	push	{r7, lr}
    601a:	b08a      	sub	sp, #40	; 0x28
    601c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    601e:	e065      	b.n	60ec <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    6020:	68bb      	ldr	r3, [r7, #8]
    6022:	2b00      	cmp	r3, #0
    6024:	db61      	blt.n	60ea <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6026:	693b      	ldr	r3, [r7, #16]
    6028:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    602a:	69fb      	ldr	r3, [r7, #28]
    602c:	695b      	ldr	r3, [r3, #20]
    602e:	2b00      	cmp	r3, #0
    6030:	d004      	beq.n	603c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6032:	69fb      	ldr	r3, [r7, #28]
    6034:	3304      	adds	r3, #4
    6036:	4618      	mov	r0, r3
    6038:	f7fd f866 	bl	3108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    603c:	1d3b      	adds	r3, r7, #4
    603e:	4618      	mov	r0, r3
    6040:	f7ff ff88 	bl	5f54 <prvSampleTimeNow>
    6044:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
    6046:	68bb      	ldr	r3, [r7, #8]
    6048:	2b09      	cmp	r3, #9
    604a:	d84f      	bhi.n	60ec <prvProcessReceivedCommands+0xd4>
    604c:	a201      	add	r2, pc, #4	; (adr r2, 6054 <prvProcessReceivedCommands+0x3c>)
    604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6052:	bf00      	nop
    6054:	0000607d 	.word	0x0000607d
    6058:	0000607d 	.word	0x0000607d
    605c:	0000607d 	.word	0x0000607d
    6060:	000060ed 	.word	0x000060ed
    6064:	000060bf 	.word	0x000060bf
    6068:	000060d9 	.word	0x000060d9
    606c:	0000607d 	.word	0x0000607d
    6070:	0000607d 	.word	0x0000607d
    6074:	000060ed 	.word	0x000060ed
    6078:	000060bf 	.word	0x000060bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    607c:	68fa      	ldr	r2, [r7, #12]
    607e:	69fb      	ldr	r3, [r7, #28]
    6080:	699b      	ldr	r3, [r3, #24]
    6082:	18d1      	adds	r1, r2, r3
    6084:	68fb      	ldr	r3, [r7, #12]
    6086:	69ba      	ldr	r2, [r7, #24]
    6088:	69f8      	ldr	r0, [r7, #28]
    608a:	f7ff ff83 	bl	5f94 <prvInsertTimerInActiveList>
    608e:	4603      	mov	r3, r0
    6090:	2b00      	cmp	r3, #0
    6092:	d02b      	beq.n	60ec <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6094:	69fb      	ldr	r3, [r7, #28]
    6096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6098:	69f8      	ldr	r0, [r7, #28]
    609a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    609c:	69fb      	ldr	r3, [r7, #28]
    609e:	69db      	ldr	r3, [r3, #28]
    60a0:	2b01      	cmp	r3, #1
    60a2:	d123      	bne.n	60ec <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    60a4:	68fa      	ldr	r2, [r7, #12]
    60a6:	69fb      	ldr	r3, [r7, #28]
    60a8:	699b      	ldr	r3, [r3, #24]
    60aa:	441a      	add	r2, r3
    60ac:	2300      	movs	r3, #0
    60ae:	9300      	str	r3, [sp, #0]
    60b0:	2300      	movs	r3, #0
    60b2:	2100      	movs	r1, #0
    60b4:	69f8      	ldr	r0, [r7, #28]
    60b6:	f7ff fe57 	bl	5d68 <xTimerGenericCommand>
    60ba:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    60bc:	e016      	b.n	60ec <prvProcessReceivedCommands+0xd4>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    60be:	68fa      	ldr	r2, [r7, #12]
    60c0:	69fb      	ldr	r3, [r7, #28]
    60c2:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    60c4:	69fb      	ldr	r3, [r7, #28]
    60c6:	699a      	ldr	r2, [r3, #24]
    60c8:	69bb      	ldr	r3, [r7, #24]
    60ca:	18d1      	adds	r1, r2, r3
    60cc:	69bb      	ldr	r3, [r7, #24]
    60ce:	69ba      	ldr	r2, [r7, #24]
    60d0:	69f8      	ldr	r0, [r7, #28]
    60d2:	f7ff ff5f 	bl	5f94 <prvInsertTimerInActiveList>
					break;
    60d6:	e009      	b.n	60ec <prvProcessReceivedCommands+0xd4>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    60d8:	69fb      	ldr	r3, [r7, #28]
    60da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    60de:	2b00      	cmp	r3, #0
    60e0:	d104      	bne.n	60ec <prvProcessReceivedCommands+0xd4>
						{
							vPortFree( pxTimer );
    60e2:	69f8      	ldr	r0, [r7, #28]
    60e4:	f7fd fe6e 	bl	3dc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    60e8:	e000      	b.n	60ec <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    60ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    60ec:	4b07      	ldr	r3, [pc, #28]	; (610c <prvProcessReceivedCommands+0xf4>)
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	f107 0108 	add.w	r1, r7, #8
    60f4:	2200      	movs	r2, #0
    60f6:	4618      	mov	r0, r3
    60f8:	f000 fa3e 	bl	6578 <xQueueReceive>
    60fc:	4603      	mov	r3, r0
    60fe:	2b00      	cmp	r3, #0
    6100:	d18e      	bne.n	6020 <prvProcessReceivedCommands+0x8>
	}
}
    6102:	bf00      	nop
    6104:	3720      	adds	r7, #32
    6106:	46bd      	mov	sp, r7
    6108:	bd80      	pop	{r7, pc}
    610a:	bf00      	nop
    610c:	10000e88 	.word	0x10000e88

00006110 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    6110:	b580      	push	{r7, lr}
    6112:	b088      	sub	sp, #32
    6114:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6116:	e037      	b.n	6188 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6118:	4b25      	ldr	r3, [pc, #148]	; (61b0 <prvSwitchTimerLists+0xa0>)
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	68db      	ldr	r3, [r3, #12]
    611e:	681b      	ldr	r3, [r3, #0]
    6120:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    6122:	4b23      	ldr	r3, [pc, #140]	; (61b0 <prvSwitchTimerLists+0xa0>)
    6124:	681b      	ldr	r3, [r3, #0]
    6126:	68db      	ldr	r3, [r3, #12]
    6128:	68db      	ldr	r3, [r3, #12]
    612a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    612c:	68fb      	ldr	r3, [r7, #12]
    612e:	3304      	adds	r3, #4
    6130:	4618      	mov	r0, r3
    6132:	f7fc ffe9 	bl	3108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6136:	68fb      	ldr	r3, [r7, #12]
    6138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    613a:	68f8      	ldr	r0, [r7, #12]
    613c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    613e:	68fb      	ldr	r3, [r7, #12]
    6140:	69db      	ldr	r3, [r3, #28]
    6142:	2b01      	cmp	r3, #1
    6144:	d120      	bne.n	6188 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    6146:	68fb      	ldr	r3, [r7, #12]
    6148:	699b      	ldr	r3, [r3, #24]
    614a:	693a      	ldr	r2, [r7, #16]
    614c:	4413      	add	r3, r2
    614e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    6150:	68ba      	ldr	r2, [r7, #8]
    6152:	693b      	ldr	r3, [r7, #16]
    6154:	429a      	cmp	r2, r3
    6156:	d90e      	bls.n	6176 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6158:	68fb      	ldr	r3, [r7, #12]
    615a:	68ba      	ldr	r2, [r7, #8]
    615c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    615e:	68fb      	ldr	r3, [r7, #12]
    6160:	68fa      	ldr	r2, [r7, #12]
    6162:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6164:	4b12      	ldr	r3, [pc, #72]	; (61b0 <prvSwitchTimerLists+0xa0>)
    6166:	681a      	ldr	r2, [r3, #0]
    6168:	68fb      	ldr	r3, [r7, #12]
    616a:	3304      	adds	r3, #4
    616c:	4619      	mov	r1, r3
    616e:	4610      	mov	r0, r2
    6170:	f7fc ff91 	bl	3096 <vListInsert>
    6174:	e008      	b.n	6188 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6176:	2300      	movs	r3, #0
    6178:	9300      	str	r3, [sp, #0]
    617a:	2300      	movs	r3, #0
    617c:	693a      	ldr	r2, [r7, #16]
    617e:	2100      	movs	r1, #0
    6180:	68f8      	ldr	r0, [r7, #12]
    6182:	f7ff fdf1 	bl	5d68 <xTimerGenericCommand>
    6186:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6188:	4b09      	ldr	r3, [pc, #36]	; (61b0 <prvSwitchTimerLists+0xa0>)
    618a:	681b      	ldr	r3, [r3, #0]
    618c:	681b      	ldr	r3, [r3, #0]
    618e:	2b00      	cmp	r3, #0
    6190:	d1c2      	bne.n	6118 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    6192:	4b07      	ldr	r3, [pc, #28]	; (61b0 <prvSwitchTimerLists+0xa0>)
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    6198:	4b06      	ldr	r3, [pc, #24]	; (61b4 <prvSwitchTimerLists+0xa4>)
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	4a04      	ldr	r2, [pc, #16]	; (61b0 <prvSwitchTimerLists+0xa0>)
    619e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    61a0:	4a04      	ldr	r2, [pc, #16]	; (61b4 <prvSwitchTimerLists+0xa4>)
    61a2:	697b      	ldr	r3, [r7, #20]
    61a4:	6013      	str	r3, [r2, #0]
}
    61a6:	bf00      	nop
    61a8:	3718      	adds	r7, #24
    61aa:	46bd      	mov	sp, r7
    61ac:	bd80      	pop	{r7, pc}
    61ae:	bf00      	nop
    61b0:	10000e80 	.word	0x10000e80
    61b4:	10000e84 	.word	0x10000e84

000061b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b082      	sub	sp, #8
    61bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    61be:	f7ff fcb9 	bl	5b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    61c2:	4b15      	ldr	r3, [pc, #84]	; (6218 <prvCheckForValidListAndQueue+0x60>)
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d120      	bne.n	620c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    61ca:	4814      	ldr	r0, [pc, #80]	; (621c <prvCheckForValidListAndQueue+0x64>)
    61cc:	f7fc ff12 	bl	2ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    61d0:	4813      	ldr	r0, [pc, #76]	; (6220 <prvCheckForValidListAndQueue+0x68>)
    61d2:	f7fc ff0f 	bl	2ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    61d6:	4b13      	ldr	r3, [pc, #76]	; (6224 <prvCheckForValidListAndQueue+0x6c>)
    61d8:	4a10      	ldr	r2, [pc, #64]	; (621c <prvCheckForValidListAndQueue+0x64>)
    61da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    61dc:	4b12      	ldr	r3, [pc, #72]	; (6228 <prvCheckForValidListAndQueue+0x70>)
    61de:	4a10      	ldr	r2, [pc, #64]	; (6220 <prvCheckForValidListAndQueue+0x68>)
    61e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    61e2:	2300      	movs	r3, #0
    61e4:	9300      	str	r3, [sp, #0]
    61e6:	4b11      	ldr	r3, [pc, #68]	; (622c <prvCheckForValidListAndQueue+0x74>)
    61e8:	4a11      	ldr	r2, [pc, #68]	; (6230 <prvCheckForValidListAndQueue+0x78>)
    61ea:	210c      	movs	r1, #12
    61ec:	200a      	movs	r0, #10
    61ee:	f000 f87d 	bl	62ec <xQueueGenericCreateStatic>
    61f2:	4602      	mov	r2, r0
    61f4:	4b08      	ldr	r3, [pc, #32]	; (6218 <prvCheckForValidListAndQueue+0x60>)
    61f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    61f8:	4b07      	ldr	r3, [pc, #28]	; (6218 <prvCheckForValidListAndQueue+0x60>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	2b00      	cmp	r3, #0
    61fe:	d005      	beq.n	620c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    6200:	4b05      	ldr	r3, [pc, #20]	; (6218 <prvCheckForValidListAndQueue+0x60>)
    6202:	681b      	ldr	r3, [r3, #0]
    6204:	490b      	ldr	r1, [pc, #44]	; (6234 <prvCheckForValidListAndQueue+0x7c>)
    6206:	4618      	mov	r0, r3
    6208:	f000 fb68 	bl	68dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    620c:	f7ff fcac 	bl	5b68 <vPortExitCritical>
}
    6210:	bf00      	nop
    6212:	46bd      	mov	sp, r7
    6214:	bd80      	pop	{r7, pc}
    6216:	bf00      	nop
    6218:	10000e88 	.word	0x10000e88
    621c:	10000e58 	.word	0x10000e58
    6220:	10000e6c 	.word	0x10000e6c
    6224:	10000e80 	.word	0x10000e80
    6228:	10000e84 	.word	0x10000e84
    622c:	10000f0c 	.word	0x10000f0c
    6230:	10000e94 	.word	0x10000e94
    6234:	000096dc 	.word	0x000096dc

00006238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    6238:	b580      	push	{r7, lr}
    623a:	b084      	sub	sp, #16
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    6246:	f7ff fc75 	bl	5b34 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    624a:	68fb      	ldr	r3, [r7, #12]
    624c:	681a      	ldr	r2, [r3, #0]
    624e:	68fb      	ldr	r3, [r7, #12]
    6250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6252:	68f9      	ldr	r1, [r7, #12]
    6254:	6c09      	ldr	r1, [r1, #64]	; 0x40
    6256:	fb01 f303 	mul.w	r3, r1, r3
    625a:	441a      	add	r2, r3
    625c:	68fb      	ldr	r3, [r7, #12]
    625e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    6260:	68fb      	ldr	r3, [r7, #12]
    6262:	2200      	movs	r2, #0
    6264:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    6266:	68fb      	ldr	r3, [r7, #12]
    6268:	681a      	ldr	r2, [r3, #0]
    626a:	68fb      	ldr	r3, [r7, #12]
    626c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    626e:	68fb      	ldr	r3, [r7, #12]
    6270:	681a      	ldr	r2, [r3, #0]
    6272:	68fb      	ldr	r3, [r7, #12]
    6274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6276:	3b01      	subs	r3, #1
    6278:	68f9      	ldr	r1, [r7, #12]
    627a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    627c:	fb01 f303 	mul.w	r3, r1, r3
    6280:	441a      	add	r2, r3
    6282:	68fb      	ldr	r3, [r7, #12]
    6284:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    6286:	68fb      	ldr	r3, [r7, #12]
    6288:	22ff      	movs	r2, #255	; 0xff
    628a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	22ff      	movs	r2, #255	; 0xff
    6292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    6296:	683b      	ldr	r3, [r7, #0]
    6298:	2b00      	cmp	r3, #0
    629a:	d114      	bne.n	62c6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    629c:	68fb      	ldr	r3, [r7, #12]
    629e:	691b      	ldr	r3, [r3, #16]
    62a0:	2b00      	cmp	r3, #0
    62a2:	d01a      	beq.n	62da <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    62a4:	68fb      	ldr	r3, [r7, #12]
    62a6:	3310      	adds	r3, #16
    62a8:	4618      	mov	r0, r3
    62aa:	f7fd fb1d 	bl	38e8 <xTaskRemoveFromEventList>
    62ae:	4603      	mov	r3, r0
    62b0:	2b00      	cmp	r3, #0
    62b2:	d012      	beq.n	62da <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    62b4:	4b0c      	ldr	r3, [pc, #48]	; (62e8 <xQueueGenericReset+0xb0>)
    62b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    62ba:	601a      	str	r2, [r3, #0]
    62bc:	f3bf 8f4f 	dsb	sy
    62c0:	f3bf 8f6f 	isb	sy
    62c4:	e009      	b.n	62da <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    62c6:	68fb      	ldr	r3, [r7, #12]
    62c8:	3310      	adds	r3, #16
    62ca:	4618      	mov	r0, r3
    62cc:	f7fc fe92 	bl	2ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    62d0:	68fb      	ldr	r3, [r7, #12]
    62d2:	3324      	adds	r3, #36	; 0x24
    62d4:	4618      	mov	r0, r3
    62d6:	f7fc fe8d 	bl	2ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    62da:	f7ff fc45 	bl	5b68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    62de:	2301      	movs	r3, #1
}
    62e0:	4618      	mov	r0, r3
    62e2:	3710      	adds	r7, #16
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}
    62e8:	e000ed04 	.word	0xe000ed04

000062ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    62ec:	b580      	push	{r7, lr}
    62ee:	b088      	sub	sp, #32
    62f0:	af02      	add	r7, sp, #8
    62f2:	60f8      	str	r0, [r7, #12]
    62f4:	60b9      	str	r1, [r7, #8]
    62f6:	607a      	str	r2, [r7, #4]
    62f8:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    62fa:	683b      	ldr	r3, [r7, #0]
    62fc:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
    62fe:	697b      	ldr	r3, [r7, #20]
    6300:	2b00      	cmp	r3, #0
    6302:	d00d      	beq.n	6320 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    6304:	697b      	ldr	r3, [r7, #20]
    6306:	2201      	movs	r2, #1
    6308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    630c:	f897 2020 	ldrb.w	r2, [r7, #32]
    6310:	697b      	ldr	r3, [r7, #20]
    6312:	9300      	str	r3, [sp, #0]
    6314:	4613      	mov	r3, r2
    6316:	687a      	ldr	r2, [r7, #4]
    6318:	68b9      	ldr	r1, [r7, #8]
    631a:	68f8      	ldr	r0, [r7, #12]
    631c:	f000 f805 	bl	632a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    6320:	697b      	ldr	r3, [r7, #20]
	}
    6322:	4618      	mov	r0, r3
    6324:	3718      	adds	r7, #24
    6326:	46bd      	mov	sp, r7
    6328:	bd80      	pop	{r7, pc}

0000632a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    632a:	b580      	push	{r7, lr}
    632c:	b084      	sub	sp, #16
    632e:	af00      	add	r7, sp, #0
    6330:	60f8      	str	r0, [r7, #12]
    6332:	60b9      	str	r1, [r7, #8]
    6334:	607a      	str	r2, [r7, #4]
    6336:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    6338:	68bb      	ldr	r3, [r7, #8]
    633a:	2b00      	cmp	r3, #0
    633c:	d103      	bne.n	6346 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    633e:	69bb      	ldr	r3, [r7, #24]
    6340:	69ba      	ldr	r2, [r7, #24]
    6342:	601a      	str	r2, [r3, #0]
    6344:	e002      	b.n	634c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    6346:	69bb      	ldr	r3, [r7, #24]
    6348:	687a      	ldr	r2, [r7, #4]
    634a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    634c:	69bb      	ldr	r3, [r7, #24]
    634e:	68fa      	ldr	r2, [r7, #12]
    6350:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    6352:	69bb      	ldr	r3, [r7, #24]
    6354:	68ba      	ldr	r2, [r7, #8]
    6356:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    6358:	2101      	movs	r1, #1
    635a:	69b8      	ldr	r0, [r7, #24]
    635c:	f7ff ff6c 	bl	6238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    6360:	69bb      	ldr	r3, [r7, #24]
    6362:	78fa      	ldrb	r2, [r7, #3]
    6364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    6368:	bf00      	nop
    636a:	3710      	adds	r7, #16
    636c:	46bd      	mov	sp, r7
    636e:	bd80      	pop	{r7, pc}

00006370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    6370:	b580      	push	{r7, lr}
    6372:	b08a      	sub	sp, #40	; 0x28
    6374:	af00      	add	r7, sp, #0
    6376:	60f8      	str	r0, [r7, #12]
    6378:	60b9      	str	r1, [r7, #8]
    637a:	607a      	str	r2, [r7, #4]
    637c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    637e:	2300      	movs	r3, #0
    6380:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6382:	68fb      	ldr	r3, [r7, #12]
    6384:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6386:	f7ff fbd5 	bl	5b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    638a:	6a3b      	ldr	r3, [r7, #32]
    638c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    638e:	6a3b      	ldr	r3, [r7, #32]
    6390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6392:	429a      	cmp	r2, r3
    6394:	d302      	bcc.n	639c <xQueueGenericSend+0x2c>
    6396:	683b      	ldr	r3, [r7, #0]
    6398:	2b02      	cmp	r3, #2
    639a:	d129      	bne.n	63f0 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    639c:	683a      	ldr	r2, [r7, #0]
    639e:	68b9      	ldr	r1, [r7, #8]
    63a0:	6a38      	ldr	r0, [r7, #32]
    63a2:	f000 f98b 	bl	66bc <prvCopyDataToQueue>
    63a6:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    63a8:	6a3b      	ldr	r3, [r7, #32]
    63aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    63ac:	2b00      	cmp	r3, #0
    63ae:	d010      	beq.n	63d2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    63b0:	6a3b      	ldr	r3, [r7, #32]
    63b2:	3324      	adds	r3, #36	; 0x24
    63b4:	4618      	mov	r0, r3
    63b6:	f7fd fa97 	bl	38e8 <xTaskRemoveFromEventList>
    63ba:	4603      	mov	r3, r0
    63bc:	2b00      	cmp	r3, #0
    63be:	d013      	beq.n	63e8 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    63c0:	4b3f      	ldr	r3, [pc, #252]	; (64c0 <xQueueGenericSend+0x150>)
    63c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    63c6:	601a      	str	r2, [r3, #0]
    63c8:	f3bf 8f4f 	dsb	sy
    63cc:	f3bf 8f6f 	isb	sy
    63d0:	e00a      	b.n	63e8 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    63d2:	69fb      	ldr	r3, [r7, #28]
    63d4:	2b00      	cmp	r3, #0
    63d6:	d007      	beq.n	63e8 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    63d8:	4b39      	ldr	r3, [pc, #228]	; (64c0 <xQueueGenericSend+0x150>)
    63da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    63de:	601a      	str	r2, [r3, #0]
    63e0:	f3bf 8f4f 	dsb	sy
    63e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    63e8:	f7ff fbbe 	bl	5b68 <vPortExitCritical>
				return pdPASS;
    63ec:	2301      	movs	r3, #1
    63ee:	e063      	b.n	64b8 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	2b00      	cmp	r3, #0
    63f4:	d103      	bne.n	63fe <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    63f6:	f7ff fbb7 	bl	5b68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    63fa:	2300      	movs	r3, #0
    63fc:	e05c      	b.n	64b8 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    63fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6400:	2b00      	cmp	r3, #0
    6402:	d106      	bne.n	6412 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6404:	f107 0314 	add.w	r3, r7, #20
    6408:	4618      	mov	r0, r3
    640a:	f7fd fac1 	bl	3990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    640e:	2301      	movs	r3, #1
    6410:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6412:	f7ff fba9 	bl	5b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6416:	f7fd f879 	bl	350c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    641a:	f7ff fb8b 	bl	5b34 <vPortEnterCritical>
    641e:	6a3b      	ldr	r3, [r7, #32]
    6420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6424:	b25b      	sxtb	r3, r3
    6426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    642a:	d103      	bne.n	6434 <xQueueGenericSend+0xc4>
    642c:	6a3b      	ldr	r3, [r7, #32]
    642e:	2200      	movs	r2, #0
    6430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6434:	6a3b      	ldr	r3, [r7, #32]
    6436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    643a:	b25b      	sxtb	r3, r3
    643c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6440:	d103      	bne.n	644a <xQueueGenericSend+0xda>
    6442:	6a3b      	ldr	r3, [r7, #32]
    6444:	2200      	movs	r2, #0
    6446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    644a:	f7ff fb8d 	bl	5b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    644e:	1d3a      	adds	r2, r7, #4
    6450:	f107 0314 	add.w	r3, r7, #20
    6454:	4611      	mov	r1, r2
    6456:	4618      	mov	r0, r3
    6458:	f7fd fab0 	bl	39bc <xTaskCheckForTimeOut>
    645c:	4603      	mov	r3, r0
    645e:	2b00      	cmp	r3, #0
    6460:	d124      	bne.n	64ac <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6462:	6a38      	ldr	r0, [r7, #32]
    6464:	f000 fa22 	bl	68ac <prvIsQueueFull>
    6468:	4603      	mov	r3, r0
    646a:	2b00      	cmp	r3, #0
    646c:	d018      	beq.n	64a0 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    646e:	6a3b      	ldr	r3, [r7, #32]
    6470:	3310      	adds	r3, #16
    6472:	687a      	ldr	r2, [r7, #4]
    6474:	4611      	mov	r1, r2
    6476:	4618      	mov	r0, r3
    6478:	f7fd fa02 	bl	3880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    647c:	6a38      	ldr	r0, [r7, #32]
    647e:	f000 f9ad 	bl	67dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    6482:	f7fd f851 	bl	3528 <xTaskResumeAll>
    6486:	4603      	mov	r3, r0
    6488:	2b00      	cmp	r3, #0
    648a:	f47f af7c 	bne.w	6386 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    648e:	4b0c      	ldr	r3, [pc, #48]	; (64c0 <xQueueGenericSend+0x150>)
    6490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6494:	601a      	str	r2, [r3, #0]
    6496:	f3bf 8f4f 	dsb	sy
    649a:	f3bf 8f6f 	isb	sy
    649e:	e772      	b.n	6386 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    64a0:	6a38      	ldr	r0, [r7, #32]
    64a2:	f000 f99b 	bl	67dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    64a6:	f7fd f83f 	bl	3528 <xTaskResumeAll>
    64aa:	e76c      	b.n	6386 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    64ac:	6a38      	ldr	r0, [r7, #32]
    64ae:	f000 f995 	bl	67dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    64b2:	f7fd f839 	bl	3528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    64b6:	2300      	movs	r3, #0
		}
	}
}
    64b8:	4618      	mov	r0, r3
    64ba:	3728      	adds	r7, #40	; 0x28
    64bc:	46bd      	mov	sp, r7
    64be:	bd80      	pop	{r7, pc}
    64c0:	e000ed04 	.word	0xe000ed04

000064c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    64c4:	b580      	push	{r7, lr}
    64c6:	b08c      	sub	sp, #48	; 0x30
    64c8:	af00      	add	r7, sp, #0
    64ca:	60f8      	str	r0, [r7, #12]
    64cc:	60b9      	str	r1, [r7, #8]
    64ce:	607a      	str	r2, [r7, #4]
    64d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    64d2:	68fb      	ldr	r3, [r7, #12]
    64d4:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
    64d6:	f3ef 8211 	mrs	r2, BASEPRI
    64da:	f04f 0328 	mov.w	r3, #40	; 0x28
    64de:	f383 8811 	msr	BASEPRI, r3
    64e2:	f3bf 8f6f 	isb	sy
    64e6:	f3bf 8f4f 	dsb	sy
    64ea:	61fa      	str	r2, [r7, #28]
    64ec:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    64ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    64f0:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    64f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    64f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    64fa:	429a      	cmp	r2, r3
    64fc:	d302      	bcc.n	6504 <xQueueGenericSendFromISR+0x40>
    64fe:	683b      	ldr	r3, [r7, #0]
    6500:	2b02      	cmp	r3, #2
    6502:	d12c      	bne.n	655e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    6504:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    650a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    650e:	683a      	ldr	r2, [r7, #0]
    6510:	68b9      	ldr	r1, [r7, #8]
    6512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6514:	f000 f8d2 	bl	66bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    6518:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    651c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6520:	d112      	bne.n	6548 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6526:	2b00      	cmp	r3, #0
    6528:	d016      	beq.n	6558 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    652c:	3324      	adds	r3, #36	; 0x24
    652e:	4618      	mov	r0, r3
    6530:	f7fd f9da 	bl	38e8 <xTaskRemoveFromEventList>
    6534:	4603      	mov	r3, r0
    6536:	2b00      	cmp	r3, #0
    6538:	d00e      	beq.n	6558 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	2b00      	cmp	r3, #0
    653e:	d00b      	beq.n	6558 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    6540:	687b      	ldr	r3, [r7, #4]
    6542:	2201      	movs	r2, #1
    6544:	601a      	str	r2, [r3, #0]
    6546:	e007      	b.n	6558 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    6548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    654c:	3301      	adds	r3, #1
    654e:	b2db      	uxtb	r3, r3
    6550:	b25a      	sxtb	r2, r3
    6552:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    6558:	2301      	movs	r3, #1
    655a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    655c:	e001      	b.n	6562 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    655e:	2300      	movs	r3, #0
    6560:	62fb      	str	r3, [r7, #44]	; 0x2c
    6562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6564:	617b      	str	r3, [r7, #20]
	__asm volatile
    6566:	697b      	ldr	r3, [r7, #20]
    6568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    656e:	4618      	mov	r0, r3
    6570:	3730      	adds	r7, #48	; 0x30
    6572:	46bd      	mov	sp, r7
    6574:	bd80      	pop	{r7, pc}
    6576:	Address 0x0000000000006576 is out of bounds.


00006578 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    6578:	b580      	push	{r7, lr}
    657a:	b08a      	sub	sp, #40	; 0x28
    657c:	af00      	add	r7, sp, #0
    657e:	60f8      	str	r0, [r7, #12]
    6580:	60b9      	str	r1, [r7, #8]
    6582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    6584:	2300      	movs	r3, #0
    6586:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6588:	68fb      	ldr	r3, [r7, #12]
    658a:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    658c:	f7ff fad2 	bl	5b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6590:	6a3b      	ldr	r3, [r7, #32]
    6592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6594:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6596:	69fb      	ldr	r3, [r7, #28]
    6598:	2b00      	cmp	r3, #0
    659a:	d01f      	beq.n	65dc <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    659c:	68b9      	ldr	r1, [r7, #8]
    659e:	6a38      	ldr	r0, [r7, #32]
    65a0:	f000 f8f6 	bl	6790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    65a4:	69fb      	ldr	r3, [r7, #28]
    65a6:	1e5a      	subs	r2, r3, #1
    65a8:	6a3b      	ldr	r3, [r7, #32]
    65aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    65ac:	6a3b      	ldr	r3, [r7, #32]
    65ae:	691b      	ldr	r3, [r3, #16]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d00f      	beq.n	65d4 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    65b4:	6a3b      	ldr	r3, [r7, #32]
    65b6:	3310      	adds	r3, #16
    65b8:	4618      	mov	r0, r3
    65ba:	f7fd f995 	bl	38e8 <xTaskRemoveFromEventList>
    65be:	4603      	mov	r3, r0
    65c0:	2b00      	cmp	r3, #0
    65c2:	d007      	beq.n	65d4 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    65c4:	4b3c      	ldr	r3, [pc, #240]	; (66b8 <xQueueReceive+0x140>)
    65c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    65ca:	601a      	str	r2, [r3, #0]
    65cc:	f3bf 8f4f 	dsb	sy
    65d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    65d4:	f7ff fac8 	bl	5b68 <vPortExitCritical>
				return pdPASS;
    65d8:	2301      	movs	r3, #1
    65da:	e069      	b.n	66b0 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    65dc:	687b      	ldr	r3, [r7, #4]
    65de:	2b00      	cmp	r3, #0
    65e0:	d103      	bne.n	65ea <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    65e2:	f7ff fac1 	bl	5b68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    65e6:	2300      	movs	r3, #0
    65e8:	e062      	b.n	66b0 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    65ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65ec:	2b00      	cmp	r3, #0
    65ee:	d106      	bne.n	65fe <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    65f0:	f107 0314 	add.w	r3, r7, #20
    65f4:	4618      	mov	r0, r3
    65f6:	f7fd f9cb 	bl	3990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    65fa:	2301      	movs	r3, #1
    65fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    65fe:	f7ff fab3 	bl	5b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6602:	f7fc ff83 	bl	350c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6606:	f7ff fa95 	bl	5b34 <vPortEnterCritical>
    660a:	6a3b      	ldr	r3, [r7, #32]
    660c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6610:	b25b      	sxtb	r3, r3
    6612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6616:	d103      	bne.n	6620 <xQueueReceive+0xa8>
    6618:	6a3b      	ldr	r3, [r7, #32]
    661a:	2200      	movs	r2, #0
    661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6620:	6a3b      	ldr	r3, [r7, #32]
    6622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    6626:	b25b      	sxtb	r3, r3
    6628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    662c:	d103      	bne.n	6636 <xQueueReceive+0xbe>
    662e:	6a3b      	ldr	r3, [r7, #32]
    6630:	2200      	movs	r2, #0
    6632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    6636:	f7ff fa97 	bl	5b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    663a:	1d3a      	adds	r2, r7, #4
    663c:	f107 0314 	add.w	r3, r7, #20
    6640:	4611      	mov	r1, r2
    6642:	4618      	mov	r0, r3
    6644:	f7fd f9ba 	bl	39bc <xTaskCheckForTimeOut>
    6648:	4603      	mov	r3, r0
    664a:	2b00      	cmp	r3, #0
    664c:	d123      	bne.n	6696 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    664e:	6a38      	ldr	r0, [r7, #32]
    6650:	f000 f916 	bl	6880 <prvIsQueueEmpty>
    6654:	4603      	mov	r3, r0
    6656:	2b00      	cmp	r3, #0
    6658:	d017      	beq.n	668a <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    665a:	6a3b      	ldr	r3, [r7, #32]
    665c:	3324      	adds	r3, #36	; 0x24
    665e:	687a      	ldr	r2, [r7, #4]
    6660:	4611      	mov	r1, r2
    6662:	4618      	mov	r0, r3
    6664:	f7fd f90c 	bl	3880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    6668:	6a38      	ldr	r0, [r7, #32]
    666a:	f000 f8b7 	bl	67dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    666e:	f7fc ff5b 	bl	3528 <xTaskResumeAll>
    6672:	4603      	mov	r3, r0
    6674:	2b00      	cmp	r3, #0
    6676:	d189      	bne.n	658c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    6678:	4b0f      	ldr	r3, [pc, #60]	; (66b8 <xQueueReceive+0x140>)
    667a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    667e:	601a      	str	r2, [r3, #0]
    6680:	f3bf 8f4f 	dsb	sy
    6684:	f3bf 8f6f 	isb	sy
    6688:	e780      	b.n	658c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    668a:	6a38      	ldr	r0, [r7, #32]
    668c:	f000 f8a6 	bl	67dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6690:	f7fc ff4a 	bl	3528 <xTaskResumeAll>
    6694:	e77a      	b.n	658c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    6696:	6a38      	ldr	r0, [r7, #32]
    6698:	f000 f8a0 	bl	67dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    669c:	f7fc ff44 	bl	3528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    66a0:	6a38      	ldr	r0, [r7, #32]
    66a2:	f000 f8ed 	bl	6880 <prvIsQueueEmpty>
    66a6:	4603      	mov	r3, r0
    66a8:	2b00      	cmp	r3, #0
    66aa:	f43f af6f 	beq.w	658c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    66ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    66b0:	4618      	mov	r0, r3
    66b2:	3728      	adds	r7, #40	; 0x28
    66b4:	46bd      	mov	sp, r7
    66b6:	bd80      	pop	{r7, pc}
    66b8:	e000ed04 	.word	0xe000ed04

000066bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    66bc:	b580      	push	{r7, lr}
    66be:	b086      	sub	sp, #24
    66c0:	af00      	add	r7, sp, #0
    66c2:	60f8      	str	r0, [r7, #12]
    66c4:	60b9      	str	r1, [r7, #8]
    66c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    66c8:	2300      	movs	r3, #0
    66ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    66cc:	68fb      	ldr	r3, [r7, #12]
    66ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    66d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    66d2:	68fb      	ldr	r3, [r7, #12]
    66d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66d6:	2b00      	cmp	r3, #0
    66d8:	d10d      	bne.n	66f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    66da:	68fb      	ldr	r3, [r7, #12]
    66dc:	681b      	ldr	r3, [r3, #0]
    66de:	2b00      	cmp	r3, #0
    66e0:	d14d      	bne.n	677e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    66e2:	68fb      	ldr	r3, [r7, #12]
    66e4:	685b      	ldr	r3, [r3, #4]
    66e6:	4618      	mov	r0, r3
    66e8:	f7fd fa90 	bl	3c0c <xTaskPriorityDisinherit>
    66ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    66ee:	68fb      	ldr	r3, [r7, #12]
    66f0:	2200      	movs	r2, #0
    66f2:	605a      	str	r2, [r3, #4]
    66f4:	e043      	b.n	677e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    66f6:	687b      	ldr	r3, [r7, #4]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d119      	bne.n	6730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    66fc:	68fb      	ldr	r3, [r7, #12]
    66fe:	6898      	ldr	r0, [r3, #8]
    6700:	68fb      	ldr	r3, [r7, #12]
    6702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6704:	461a      	mov	r2, r3
    6706:	68b9      	ldr	r1, [r7, #8]
    6708:	f001 fc44 	bl	7f94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    670c:	68fb      	ldr	r3, [r7, #12]
    670e:	689a      	ldr	r2, [r3, #8]
    6710:	68fb      	ldr	r3, [r7, #12]
    6712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6714:	441a      	add	r2, r3
    6716:	68fb      	ldr	r3, [r7, #12]
    6718:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    671a:	68fb      	ldr	r3, [r7, #12]
    671c:	689a      	ldr	r2, [r3, #8]
    671e:	68fb      	ldr	r3, [r7, #12]
    6720:	685b      	ldr	r3, [r3, #4]
    6722:	429a      	cmp	r2, r3
    6724:	d32b      	bcc.n	677e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    6726:	68fb      	ldr	r3, [r7, #12]
    6728:	681a      	ldr	r2, [r3, #0]
    672a:	68fb      	ldr	r3, [r7, #12]
    672c:	609a      	str	r2, [r3, #8]
    672e:	e026      	b.n	677e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6730:	68fb      	ldr	r3, [r7, #12]
    6732:	68d8      	ldr	r0, [r3, #12]
    6734:	68fb      	ldr	r3, [r7, #12]
    6736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6738:	461a      	mov	r2, r3
    673a:	68b9      	ldr	r1, [r7, #8]
    673c:	f001 fc2a 	bl	7f94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    6740:	68fb      	ldr	r3, [r7, #12]
    6742:	68da      	ldr	r2, [r3, #12]
    6744:	68fb      	ldr	r3, [r7, #12]
    6746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6748:	425b      	negs	r3, r3
    674a:	441a      	add	r2, r3
    674c:	68fb      	ldr	r3, [r7, #12]
    674e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6750:	68fb      	ldr	r3, [r7, #12]
    6752:	68da      	ldr	r2, [r3, #12]
    6754:	68fb      	ldr	r3, [r7, #12]
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	429a      	cmp	r2, r3
    675a:	d207      	bcs.n	676c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    675c:	68fb      	ldr	r3, [r7, #12]
    675e:	685a      	ldr	r2, [r3, #4]
    6760:	68fb      	ldr	r3, [r7, #12]
    6762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6764:	425b      	negs	r3, r3
    6766:	441a      	add	r2, r3
    6768:	68fb      	ldr	r3, [r7, #12]
    676a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	2b02      	cmp	r3, #2
    6770:	d105      	bne.n	677e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6772:	693b      	ldr	r3, [r7, #16]
    6774:	2b00      	cmp	r3, #0
    6776:	d002      	beq.n	677e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    6778:	693b      	ldr	r3, [r7, #16]
    677a:	3b01      	subs	r3, #1
    677c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    677e:	693b      	ldr	r3, [r7, #16]
    6780:	1c5a      	adds	r2, r3, #1
    6782:	68fb      	ldr	r3, [r7, #12]
    6784:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    6786:	697b      	ldr	r3, [r7, #20]
}
    6788:	4618      	mov	r0, r3
    678a:	3718      	adds	r7, #24
    678c:	46bd      	mov	sp, r7
    678e:	bd80      	pop	{r7, pc}

00006790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    6790:	b580      	push	{r7, lr}
    6792:	b082      	sub	sp, #8
    6794:	af00      	add	r7, sp, #0
    6796:	6078      	str	r0, [r7, #4]
    6798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    679e:	2b00      	cmp	r3, #0
    67a0:	d018      	beq.n	67d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	68da      	ldr	r2, [r3, #12]
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    67aa:	441a      	add	r2, r3
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	68da      	ldr	r2, [r3, #12]
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	685b      	ldr	r3, [r3, #4]
    67b8:	429a      	cmp	r2, r3
    67ba:	d303      	bcc.n	67c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    67bc:	687b      	ldr	r3, [r7, #4]
    67be:	681a      	ldr	r2, [r3, #0]
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	68d9      	ldr	r1, [r3, #12]
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    67cc:	461a      	mov	r2, r3
    67ce:	6838      	ldr	r0, [r7, #0]
    67d0:	f001 fbe0 	bl	7f94 <memcpy>
	}
}
    67d4:	bf00      	nop
    67d6:	3708      	adds	r7, #8
    67d8:	46bd      	mov	sp, r7
    67da:	bd80      	pop	{r7, pc}

000067dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    67dc:	b580      	push	{r7, lr}
    67de:	b084      	sub	sp, #16
    67e0:	af00      	add	r7, sp, #0
    67e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    67e4:	f7ff f9a6 	bl	5b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    67ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    67f0:	e011      	b.n	6816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67f6:	2b00      	cmp	r3, #0
    67f8:	d012      	beq.n	6820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	3324      	adds	r3, #36	; 0x24
    67fe:	4618      	mov	r0, r3
    6800:	f7fd f872 	bl	38e8 <xTaskRemoveFromEventList>
    6804:	4603      	mov	r3, r0
    6806:	2b00      	cmp	r3, #0
    6808:	d001      	beq.n	680e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    680a:	f7fd f91d 	bl	3a48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    680e:	7bfb      	ldrb	r3, [r7, #15]
    6810:	3b01      	subs	r3, #1
    6812:	b2db      	uxtb	r3, r3
    6814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6816:	f997 300f 	ldrsb.w	r3, [r7, #15]
    681a:	2b00      	cmp	r3, #0
    681c:	dce9      	bgt.n	67f2 <prvUnlockQueue+0x16>
    681e:	e000      	b.n	6822 <prvUnlockQueue+0x46>
					break;
    6820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	22ff      	movs	r2, #255	; 0xff
    6826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    682a:	f7ff f99d 	bl	5b68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    682e:	f7ff f981 	bl	5b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    683a:	e011      	b.n	6860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	691b      	ldr	r3, [r3, #16]
    6840:	2b00      	cmp	r3, #0
    6842:	d012      	beq.n	686a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6844:	687b      	ldr	r3, [r7, #4]
    6846:	3310      	adds	r3, #16
    6848:	4618      	mov	r0, r3
    684a:	f7fd f84d 	bl	38e8 <xTaskRemoveFromEventList>
    684e:	4603      	mov	r3, r0
    6850:	2b00      	cmp	r3, #0
    6852:	d001      	beq.n	6858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    6854:	f7fd f8f8 	bl	3a48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    6858:	7bbb      	ldrb	r3, [r7, #14]
    685a:	3b01      	subs	r3, #1
    685c:	b2db      	uxtb	r3, r3
    685e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    6860:	f997 300e 	ldrsb.w	r3, [r7, #14]
    6864:	2b00      	cmp	r3, #0
    6866:	dce9      	bgt.n	683c <prvUnlockQueue+0x60>
    6868:	e000      	b.n	686c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    686a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    686c:	687b      	ldr	r3, [r7, #4]
    686e:	22ff      	movs	r2, #255	; 0xff
    6870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    6874:	f7ff f978 	bl	5b68 <vPortExitCritical>
}
    6878:	bf00      	nop
    687a:	3710      	adds	r7, #16
    687c:	46bd      	mov	sp, r7
    687e:	bd80      	pop	{r7, pc}

00006880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    6880:	b580      	push	{r7, lr}
    6882:	b084      	sub	sp, #16
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6888:	f7ff f954 	bl	5b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6890:	2b00      	cmp	r3, #0
    6892:	d102      	bne.n	689a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    6894:	2301      	movs	r3, #1
    6896:	60fb      	str	r3, [r7, #12]
    6898:	e001      	b.n	689e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    689a:	2300      	movs	r3, #0
    689c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    689e:	f7ff f963 	bl	5b68 <vPortExitCritical>

	return xReturn;
    68a2:	68fb      	ldr	r3, [r7, #12]
}
    68a4:	4618      	mov	r0, r3
    68a6:	3710      	adds	r7, #16
    68a8:	46bd      	mov	sp, r7
    68aa:	bd80      	pop	{r7, pc}

000068ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    68ac:	b580      	push	{r7, lr}
    68ae:	b084      	sub	sp, #16
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    68b4:	f7ff f93e 	bl	5b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    68b8:	687b      	ldr	r3, [r7, #4]
    68ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    68c0:	429a      	cmp	r2, r3
    68c2:	d102      	bne.n	68ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    68c4:	2301      	movs	r3, #1
    68c6:	60fb      	str	r3, [r7, #12]
    68c8:	e001      	b.n	68ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    68ca:	2300      	movs	r3, #0
    68cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    68ce:	f7ff f94b 	bl	5b68 <vPortExitCritical>

	return xReturn;
    68d2:	68fb      	ldr	r3, [r7, #12]
}
    68d4:	4618      	mov	r0, r3
    68d6:	3710      	adds	r7, #16
    68d8:	46bd      	mov	sp, r7
    68da:	bd80      	pop	{r7, pc}

000068dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    68dc:	b480      	push	{r7}
    68de:	b085      	sub	sp, #20
    68e0:	af00      	add	r7, sp, #0
    68e2:	6078      	str	r0, [r7, #4]
    68e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    68e6:	2300      	movs	r3, #0
    68e8:	60fb      	str	r3, [r7, #12]
    68ea:	e014      	b.n	6916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    68ec:	4a0e      	ldr	r2, [pc, #56]	; (6928 <vQueueAddToRegistry+0x4c>)
    68ee:	68fb      	ldr	r3, [r7, #12]
    68f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    68f4:	2b00      	cmp	r3, #0
    68f6:	d10b      	bne.n	6910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    68f8:	490b      	ldr	r1, [pc, #44]	; (6928 <vQueueAddToRegistry+0x4c>)
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	683a      	ldr	r2, [r7, #0]
    68fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    6902:	4a09      	ldr	r2, [pc, #36]	; (6928 <vQueueAddToRegistry+0x4c>)
    6904:	68fb      	ldr	r3, [r7, #12]
    6906:	00db      	lsls	r3, r3, #3
    6908:	4413      	add	r3, r2
    690a:	687a      	ldr	r2, [r7, #4]
    690c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    690e:	e005      	b.n	691c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    6910:	68fb      	ldr	r3, [r7, #12]
    6912:	3301      	adds	r3, #1
    6914:	60fb      	str	r3, [r7, #12]
    6916:	68fb      	ldr	r3, [r7, #12]
    6918:	2b09      	cmp	r3, #9
    691a:	d9e7      	bls.n	68ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    691c:	bf00      	nop
    691e:	3714      	adds	r7, #20
    6920:	46bd      	mov	sp, r7
    6922:	f85d 7b04 	ldr.w	r7, [sp], #4
    6926:	4770      	bx	lr
    6928:	10000f64 	.word	0x10000f64

0000692c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    692c:	b580      	push	{r7, lr}
    692e:	b086      	sub	sp, #24
    6930:	af00      	add	r7, sp, #0
    6932:	60f8      	str	r0, [r7, #12]
    6934:	60b9      	str	r1, [r7, #8]
    6936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6938:	68fb      	ldr	r3, [r7, #12]
    693a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    693c:	f7ff f8fa 	bl	5b34 <vPortEnterCritical>
    6940:	697b      	ldr	r3, [r7, #20]
    6942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6946:	b25b      	sxtb	r3, r3
    6948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    694c:	d103      	bne.n	6956 <vQueueWaitForMessageRestricted+0x2a>
    694e:	697b      	ldr	r3, [r7, #20]
    6950:	2200      	movs	r2, #0
    6952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6956:	697b      	ldr	r3, [r7, #20]
    6958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    695c:	b25b      	sxtb	r3, r3
    695e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6962:	d103      	bne.n	696c <vQueueWaitForMessageRestricted+0x40>
    6964:	697b      	ldr	r3, [r7, #20]
    6966:	2200      	movs	r2, #0
    6968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    696c:	f7ff f8fc 	bl	5b68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    6970:	697b      	ldr	r3, [r7, #20]
    6972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6974:	2b00      	cmp	r3, #0
    6976:	d106      	bne.n	6986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    6978:	697b      	ldr	r3, [r7, #20]
    697a:	3324      	adds	r3, #36	; 0x24
    697c:	687a      	ldr	r2, [r7, #4]
    697e:	68b9      	ldr	r1, [r7, #8]
    6980:	4618      	mov	r0, r3
    6982:	f7fc ff93 	bl	38ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    6986:	6978      	ldr	r0, [r7, #20]
    6988:	f7ff ff28 	bl	67dc <prvUnlockQueue>
	}
    698c:	bf00      	nop
    698e:	3718      	adds	r7, #24
    6990:	46bd      	mov	sp, r7
    6992:	bd80      	pop	{r7, pc}

00006994 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6994:	b480      	push	{r7}
    6996:	b083      	sub	sp, #12
    6998:	af00      	add	r7, sp, #0
    699a:	6078      	str	r0, [r7, #4]
    699c:	6039      	str	r1, [r7, #0]
  return 1;
    699e:	2301      	movs	r3, #1
}
    69a0:	4618      	mov	r0, r3
    69a2:	370c      	adds	r7, #12
    69a4:	46bd      	mov	sp, r7
    69a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    69aa:	4770      	bx	lr

000069ac <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    69ac:	b480      	push	{r7}
    69ae:	b083      	sub	sp, #12
    69b0:	af00      	add	r7, sp, #0
    69b2:	6078      	str	r0, [r7, #4]
    69b4:	6039      	str	r1, [r7, #0]
  return 0;
    69b6:	2300      	movs	r3, #0
}
    69b8:	4618      	mov	r0, r3
    69ba:	370c      	adds	r7, #12
    69bc:	46bd      	mov	sp, r7
    69be:	f85d 7b04 	ldr.w	r7, [sp], #4
    69c2:	4770      	bx	lr

000069c4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    69c4:	b480      	push	{r7}
    69c6:	b083      	sub	sp, #12
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    69cc:	4a04      	ldr	r2, [pc, #16]	; (69e0 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    69ce:	687b      	ldr	r3, [r7, #4]
    69d0:	6013      	str	r3, [r2, #0]
}
    69d2:	bf00      	nop
    69d4:	370c      	adds	r7, #12
    69d6:	46bd      	mov	sp, r7
    69d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69dc:	4770      	bx	lr
    69de:	bf00      	nop
    69e0:	100000b0 	.word	0x100000b0

000069e4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    69e4:	b480      	push	{r7}
    69e6:	b083      	sub	sp, #12
    69e8:	af00      	add	r7, sp, #0
    69ea:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    69ec:	4a04      	ldr	r2, [pc, #16]	; (6a00 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	6013      	str	r3, [r2, #0]
}
    69f2:	bf00      	nop
    69f4:	370c      	adds	r7, #12
    69f6:	46bd      	mov	sp, r7
    69f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fc:	4770      	bx	lr
    69fe:	bf00      	nop
    6a00:	100000b4 	.word	0x100000b4

00006a04 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    6a04:	b580      	push	{r7, lr}
    6a06:	b082      	sub	sp, #8
    6a08:	af00      	add	r7, sp, #0
    6a0a:	4603      	mov	r3, r0
    6a0c:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    6a0e:	4b05      	ldr	r3, [pc, #20]	; (6a24 <_putchar+0x20>)
    6a10:	681b      	ldr	r3, [r3, #0]
    6a12:	1dfa      	adds	r2, r7, #7
    6a14:	2101      	movs	r1, #1
    6a16:	4610      	mov	r0, r2
    6a18:	4798      	blx	r3
}
    6a1a:	bf00      	nop
    6a1c:	3708      	adds	r7, #8
    6a1e:	46bd      	mov	sp, r7
    6a20:	bd80      	pop	{r7, pc}
    6a22:	bf00      	nop
    6a24:	100000b0 	.word	0x100000b0

00006a28 <__cxa_pure_virtual>:
    6a28:	b508      	push	{r3, lr}
    6a2a:	f000 f80d 	bl	6a48 <std::terminate()>

00006a2e <__cxxabiv1::__terminate(void (*)())>:
    6a2e:	b508      	push	{r3, lr}
    6a30:	4780      	blx	r0
    6a32:	f001 fa73 	bl	7f1c <abort>
    6a36:	Address 0x0000000000006a36 is out of bounds.


00006a38 <std::get_terminate()>:
    6a38:	4b02      	ldr	r3, [pc, #8]	; (6a44 <std::get_terminate()+0xc>)
    6a3a:	6818      	ldr	r0, [r3, #0]
    6a3c:	f3bf 8f5b 	dmb	ish
    6a40:	4770      	bx	lr
    6a42:	bf00      	nop
    6a44:	100000e4 	.word	0x100000e4

00006a48 <std::terminate()>:
    6a48:	b508      	push	{r3, lr}
    6a4a:	f7ff fff5 	bl	6a38 <std::get_terminate()>
    6a4e:	f7ff ffee 	bl	6a2e <__cxxabiv1::__terminate(void (*)())>
    6a52:	Address 0x0000000000006a52 is out of bounds.


00006a54 <__aeabi_d2f>:
    6a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6a5c:	bf24      	itt	cs
    6a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6a66:	d90d      	bls.n	6a84 <__aeabi_d2f+0x30>
    6a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6a7c:	bf08      	it	eq
    6a7e:	f020 0001 	biceq.w	r0, r0, #1
    6a82:	4770      	bx	lr
    6a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6a88:	d121      	bne.n	6ace <__aeabi_d2f+0x7a>
    6a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6a8e:	bfbc      	itt	lt
    6a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6a94:	4770      	bxlt	lr
    6a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6a9e:	f1c2 0218 	rsb	r2, r2, #24
    6aa2:	f1c2 0c20 	rsb	ip, r2, #32
    6aa6:	fa10 f30c 	lsls.w	r3, r0, ip
    6aaa:	fa20 f002 	lsr.w	r0, r0, r2
    6aae:	bf18      	it	ne
    6ab0:	f040 0001 	orrne.w	r0, r0, #1
    6ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6abc:	fa03 fc0c 	lsl.w	ip, r3, ip
    6ac0:	ea40 000c 	orr.w	r0, r0, ip
    6ac4:	fa23 f302 	lsr.w	r3, r3, r2
    6ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6acc:	e7cc      	b.n	6a68 <__aeabi_d2f+0x14>
    6ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6ad2:	d107      	bne.n	6ae4 <__aeabi_d2f+0x90>
    6ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6ad8:	bf1e      	ittt	ne
    6ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6ae2:	4770      	bxne	lr
    6ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    6ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6af0:	4770      	bx	lr
    6af2:	bf00      	nop

00006af4 <__aeabi_frsub>:
    6af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6af8:	e002      	b.n	6b00 <__addsf3>
    6afa:	bf00      	nop

00006afc <__aeabi_fsub>:
    6afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006b00 <__addsf3>:
    6b00:	0042      	lsls	r2, r0, #1
    6b02:	bf1f      	itttt	ne
    6b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    6b08:	ea92 0f03 	teqne	r2, r3
    6b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6b14:	d06a      	beq.n	6bec <__addsf3+0xec>
    6b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
    6b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6b1e:	bfc1      	itttt	gt
    6b20:	18d2      	addgt	r2, r2, r3
    6b22:	4041      	eorgt	r1, r0
    6b24:	4048      	eorgt	r0, r1
    6b26:	4041      	eorgt	r1, r0
    6b28:	bfb8      	it	lt
    6b2a:	425b      	neglt	r3, r3
    6b2c:	2b19      	cmp	r3, #25
    6b2e:	bf88      	it	hi
    6b30:	4770      	bxhi	lr
    6b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b3e:	bf18      	it	ne
    6b40:	4240      	negne	r0, r0
    6b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6b4e:	bf18      	it	ne
    6b50:	4249      	negne	r1, r1
    6b52:	ea92 0f03 	teq	r2, r3
    6b56:	d03f      	beq.n	6bd8 <__addsf3+0xd8>
    6b58:	f1a2 0201 	sub.w	r2, r2, #1
    6b5c:	fa41 fc03 	asr.w	ip, r1, r3
    6b60:	eb10 000c 	adds.w	r0, r0, ip
    6b64:	f1c3 0320 	rsb	r3, r3, #32
    6b68:	fa01 f103 	lsl.w	r1, r1, r3
    6b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6b70:	d502      	bpl.n	6b78 <__addsf3+0x78>
    6b72:	4249      	negs	r1, r1
    6b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6b7c:	d313      	bcc.n	6ba6 <__addsf3+0xa6>
    6b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6b82:	d306      	bcc.n	6b92 <__addsf3+0x92>
    6b84:	0840      	lsrs	r0, r0, #1
    6b86:	ea4f 0131 	mov.w	r1, r1, rrx
    6b8a:	f102 0201 	add.w	r2, r2, #1
    6b8e:	2afe      	cmp	r2, #254	; 0xfe
    6b90:	d251      	bcs.n	6c36 <__addsf3+0x136>
    6b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6b9a:	bf08      	it	eq
    6b9c:	f020 0001 	biceq.w	r0, r0, #1
    6ba0:	ea40 0003 	orr.w	r0, r0, r3
    6ba4:	4770      	bx	lr
    6ba6:	0049      	lsls	r1, r1, #1
    6ba8:	eb40 0000 	adc.w	r0, r0, r0
    6bac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    6bb0:	f1a2 0201 	sub.w	r2, r2, #1
    6bb4:	d1ed      	bne.n	6b92 <__addsf3+0x92>
    6bb6:	fab0 fc80 	clz	ip, r0
    6bba:	f1ac 0c08 	sub.w	ip, ip, #8
    6bbe:	ebb2 020c 	subs.w	r2, r2, ip
    6bc2:	fa00 f00c 	lsl.w	r0, r0, ip
    6bc6:	bfaa      	itet	ge
    6bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6bcc:	4252      	neglt	r2, r2
    6bce:	4318      	orrge	r0, r3
    6bd0:	bfbc      	itt	lt
    6bd2:	40d0      	lsrlt	r0, r2
    6bd4:	4318      	orrlt	r0, r3
    6bd6:	4770      	bx	lr
    6bd8:	f092 0f00 	teq	r2, #0
    6bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6be0:	bf06      	itte	eq
    6be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6be6:	3201      	addeq	r2, #1
    6be8:	3b01      	subne	r3, #1
    6bea:	e7b5      	b.n	6b58 <__addsf3+0x58>
    6bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6bf4:	bf18      	it	ne
    6bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6bfa:	d021      	beq.n	6c40 <__addsf3+0x140>
    6bfc:	ea92 0f03 	teq	r2, r3
    6c00:	d004      	beq.n	6c0c <__addsf3+0x10c>
    6c02:	f092 0f00 	teq	r2, #0
    6c06:	bf08      	it	eq
    6c08:	4608      	moveq	r0, r1
    6c0a:	4770      	bx	lr
    6c0c:	ea90 0f01 	teq	r0, r1
    6c10:	bf1c      	itt	ne
    6c12:	2000      	movne	r0, #0
    6c14:	4770      	bxne	lr
    6c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6c1a:	d104      	bne.n	6c26 <__addsf3+0x126>
    6c1c:	0040      	lsls	r0, r0, #1
    6c1e:	bf28      	it	cs
    6c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6c24:	4770      	bx	lr
    6c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6c2a:	bf3c      	itt	cc
    6c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6c30:	4770      	bxcc	lr
    6c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6c3e:	4770      	bx	lr
    6c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6c44:	bf16      	itet	ne
    6c46:	4608      	movne	r0, r1
    6c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6c4c:	4601      	movne	r1, r0
    6c4e:	0242      	lsls	r2, r0, #9
    6c50:	bf06      	itte	eq
    6c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6c56:	ea90 0f01 	teqeq	r0, r1
    6c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6c5e:	4770      	bx	lr

00006c60 <__aeabi_ui2f>:
    6c60:	f04f 0300 	mov.w	r3, #0
    6c64:	e004      	b.n	6c70 <__aeabi_i2f+0x8>
    6c66:	bf00      	nop

00006c68 <__aeabi_i2f>:
    6c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6c6c:	bf48      	it	mi
    6c6e:	4240      	negmi	r0, r0
    6c70:	ea5f 0c00 	movs.w	ip, r0
    6c74:	bf08      	it	eq
    6c76:	4770      	bxeq	lr
    6c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6c7c:	4601      	mov	r1, r0
    6c7e:	f04f 0000 	mov.w	r0, #0
    6c82:	e01c      	b.n	6cbe <__aeabi_l2f+0x2a>

00006c84 <__aeabi_ul2f>:
    6c84:	ea50 0201 	orrs.w	r2, r0, r1
    6c88:	bf08      	it	eq
    6c8a:	4770      	bxeq	lr
    6c8c:	f04f 0300 	mov.w	r3, #0
    6c90:	e00a      	b.n	6ca8 <__aeabi_l2f+0x14>
    6c92:	bf00      	nop

00006c94 <__aeabi_l2f>:
    6c94:	ea50 0201 	orrs.w	r2, r0, r1
    6c98:	bf08      	it	eq
    6c9a:	4770      	bxeq	lr
    6c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6ca0:	d502      	bpl.n	6ca8 <__aeabi_l2f+0x14>
    6ca2:	4240      	negs	r0, r0
    6ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6ca8:	ea5f 0c01 	movs.w	ip, r1
    6cac:	bf02      	ittt	eq
    6cae:	4684      	moveq	ip, r0
    6cb0:	4601      	moveq	r1, r0
    6cb2:	2000      	moveq	r0, #0
    6cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6cb8:	bf08      	it	eq
    6cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6cc2:	fabc f28c 	clz	r2, ip
    6cc6:	3a08      	subs	r2, #8
    6cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6ccc:	db10      	blt.n	6cf0 <__aeabi_l2f+0x5c>
    6cce:	fa01 fc02 	lsl.w	ip, r1, r2
    6cd2:	4463      	add	r3, ip
    6cd4:	fa00 fc02 	lsl.w	ip, r0, r2
    6cd8:	f1c2 0220 	rsb	r2, r2, #32
    6cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6ce0:	fa20 f202 	lsr.w	r2, r0, r2
    6ce4:	eb43 0002 	adc.w	r0, r3, r2
    6ce8:	bf08      	it	eq
    6cea:	f020 0001 	biceq.w	r0, r0, #1
    6cee:	4770      	bx	lr
    6cf0:	f102 0220 	add.w	r2, r2, #32
    6cf4:	fa01 fc02 	lsl.w	ip, r1, r2
    6cf8:	f1c2 0220 	rsb	r2, r2, #32
    6cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6d00:	fa21 f202 	lsr.w	r2, r1, r2
    6d04:	eb43 0002 	adc.w	r0, r3, r2
    6d08:	bf08      	it	eq
    6d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6d0e:	4770      	bx	lr

00006d10 <__aeabi_uldivmod>:
    6d10:	b953      	cbnz	r3, 6d28 <__aeabi_uldivmod+0x18>
    6d12:	b94a      	cbnz	r2, 6d28 <__aeabi_uldivmod+0x18>
    6d14:	2900      	cmp	r1, #0
    6d16:	bf08      	it	eq
    6d18:	2800      	cmpeq	r0, #0
    6d1a:	bf1c      	itt	ne
    6d1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6d20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6d24:	f001 b8f8 	b.w	7f18 <__aeabi_idiv0>
    6d28:	f1ad 0c08 	sub.w	ip, sp, #8
    6d2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6d30:	f000 f806 	bl	6d40 <__udivmoddi4>
    6d34:	f8dd e004 	ldr.w	lr, [sp, #4]
    6d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6d3c:	b004      	add	sp, #16
    6d3e:	4770      	bx	lr

00006d40 <__udivmoddi4>:
    6d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d44:	9e08      	ldr	r6, [sp, #32]
    6d46:	4604      	mov	r4, r0
    6d48:	4688      	mov	r8, r1
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d14b      	bne.n	6de6 <__udivmoddi4+0xa6>
    6d4e:	428a      	cmp	r2, r1
    6d50:	4615      	mov	r5, r2
    6d52:	d967      	bls.n	6e24 <__udivmoddi4+0xe4>
    6d54:	fab2 f282 	clz	r2, r2
    6d58:	b14a      	cbz	r2, 6d6e <__udivmoddi4+0x2e>
    6d5a:	f1c2 0720 	rsb	r7, r2, #32
    6d5e:	fa01 f302 	lsl.w	r3, r1, r2
    6d62:	fa20 f707 	lsr.w	r7, r0, r7
    6d66:	4095      	lsls	r5, r2
    6d68:	ea47 0803 	orr.w	r8, r7, r3
    6d6c:	4094      	lsls	r4, r2
    6d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6d72:	0c23      	lsrs	r3, r4, #16
    6d74:	fbb8 f7fe 	udiv	r7, r8, lr
    6d78:	fa1f fc85 	uxth.w	ip, r5
    6d7c:	fb0e 8817 	mls	r8, lr, r7, r8
    6d80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    6d84:	fb07 f10c 	mul.w	r1, r7, ip
    6d88:	4299      	cmp	r1, r3
    6d8a:	d909      	bls.n	6da0 <__udivmoddi4+0x60>
    6d8c:	18eb      	adds	r3, r5, r3
    6d8e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    6d92:	f080 811b 	bcs.w	6fcc <__udivmoddi4+0x28c>
    6d96:	4299      	cmp	r1, r3
    6d98:	f240 8118 	bls.w	6fcc <__udivmoddi4+0x28c>
    6d9c:	3f02      	subs	r7, #2
    6d9e:	442b      	add	r3, r5
    6da0:	1a5b      	subs	r3, r3, r1
    6da2:	b2a4      	uxth	r4, r4
    6da4:	fbb3 f0fe 	udiv	r0, r3, lr
    6da8:	fb0e 3310 	mls	r3, lr, r0, r3
    6dac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6db0:	fb00 fc0c 	mul.w	ip, r0, ip
    6db4:	45a4      	cmp	ip, r4
    6db6:	d909      	bls.n	6dcc <__udivmoddi4+0x8c>
    6db8:	192c      	adds	r4, r5, r4
    6dba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6dbe:	f080 8107 	bcs.w	6fd0 <__udivmoddi4+0x290>
    6dc2:	45a4      	cmp	ip, r4
    6dc4:	f240 8104 	bls.w	6fd0 <__udivmoddi4+0x290>
    6dc8:	3802      	subs	r0, #2
    6dca:	442c      	add	r4, r5
    6dcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    6dd0:	eba4 040c 	sub.w	r4, r4, ip
    6dd4:	2700      	movs	r7, #0
    6dd6:	b11e      	cbz	r6, 6de0 <__udivmoddi4+0xa0>
    6dd8:	40d4      	lsrs	r4, r2
    6dda:	2300      	movs	r3, #0
    6ddc:	e9c6 4300 	strd	r4, r3, [r6]
    6de0:	4639      	mov	r1, r7
    6de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6de6:	428b      	cmp	r3, r1
    6de8:	d909      	bls.n	6dfe <__udivmoddi4+0xbe>
    6dea:	2e00      	cmp	r6, #0
    6dec:	f000 80eb 	beq.w	6fc6 <__udivmoddi4+0x286>
    6df0:	2700      	movs	r7, #0
    6df2:	e9c6 0100 	strd	r0, r1, [r6]
    6df6:	4638      	mov	r0, r7
    6df8:	4639      	mov	r1, r7
    6dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6dfe:	fab3 f783 	clz	r7, r3
    6e02:	2f00      	cmp	r7, #0
    6e04:	d147      	bne.n	6e96 <__udivmoddi4+0x156>
    6e06:	428b      	cmp	r3, r1
    6e08:	d302      	bcc.n	6e10 <__udivmoddi4+0xd0>
    6e0a:	4282      	cmp	r2, r0
    6e0c:	f200 80fa 	bhi.w	7004 <__udivmoddi4+0x2c4>
    6e10:	1a84      	subs	r4, r0, r2
    6e12:	eb61 0303 	sbc.w	r3, r1, r3
    6e16:	2001      	movs	r0, #1
    6e18:	4698      	mov	r8, r3
    6e1a:	2e00      	cmp	r6, #0
    6e1c:	d0e0      	beq.n	6de0 <__udivmoddi4+0xa0>
    6e1e:	e9c6 4800 	strd	r4, r8, [r6]
    6e22:	e7dd      	b.n	6de0 <__udivmoddi4+0xa0>
    6e24:	b902      	cbnz	r2, 6e28 <__udivmoddi4+0xe8>
    6e26:	deff      	udf	#255	; 0xff
    6e28:	fab2 f282 	clz	r2, r2
    6e2c:	2a00      	cmp	r2, #0
    6e2e:	f040 808f 	bne.w	6f50 <__udivmoddi4+0x210>
    6e32:	1b49      	subs	r1, r1, r5
    6e34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6e38:	fa1f f885 	uxth.w	r8, r5
    6e3c:	2701      	movs	r7, #1
    6e3e:	fbb1 fcfe 	udiv	ip, r1, lr
    6e42:	0c23      	lsrs	r3, r4, #16
    6e44:	fb0e 111c 	mls	r1, lr, ip, r1
    6e48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6e4c:	fb08 f10c 	mul.w	r1, r8, ip
    6e50:	4299      	cmp	r1, r3
    6e52:	d907      	bls.n	6e64 <__udivmoddi4+0x124>
    6e54:	18eb      	adds	r3, r5, r3
    6e56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    6e5a:	d202      	bcs.n	6e62 <__udivmoddi4+0x122>
    6e5c:	4299      	cmp	r1, r3
    6e5e:	f200 80cd 	bhi.w	6ffc <__udivmoddi4+0x2bc>
    6e62:	4684      	mov	ip, r0
    6e64:	1a59      	subs	r1, r3, r1
    6e66:	b2a3      	uxth	r3, r4
    6e68:	fbb1 f0fe 	udiv	r0, r1, lr
    6e6c:	fb0e 1410 	mls	r4, lr, r0, r1
    6e70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    6e74:	fb08 f800 	mul.w	r8, r8, r0
    6e78:	45a0      	cmp	r8, r4
    6e7a:	d907      	bls.n	6e8c <__udivmoddi4+0x14c>
    6e7c:	192c      	adds	r4, r5, r4
    6e7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6e82:	d202      	bcs.n	6e8a <__udivmoddi4+0x14a>
    6e84:	45a0      	cmp	r8, r4
    6e86:	f200 80b6 	bhi.w	6ff6 <__udivmoddi4+0x2b6>
    6e8a:	4618      	mov	r0, r3
    6e8c:	eba4 0408 	sub.w	r4, r4, r8
    6e90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6e94:	e79f      	b.n	6dd6 <__udivmoddi4+0x96>
    6e96:	f1c7 0c20 	rsb	ip, r7, #32
    6e9a:	40bb      	lsls	r3, r7
    6e9c:	fa22 fe0c 	lsr.w	lr, r2, ip
    6ea0:	ea4e 0e03 	orr.w	lr, lr, r3
    6ea4:	fa01 f407 	lsl.w	r4, r1, r7
    6ea8:	fa20 f50c 	lsr.w	r5, r0, ip
    6eac:	fa21 f30c 	lsr.w	r3, r1, ip
    6eb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
    6eb4:	4325      	orrs	r5, r4
    6eb6:	fbb3 f9f8 	udiv	r9, r3, r8
    6eba:	0c2c      	lsrs	r4, r5, #16
    6ebc:	fb08 3319 	mls	r3, r8, r9, r3
    6ec0:	fa1f fa8e 	uxth.w	sl, lr
    6ec4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    6ec8:	fb09 f40a 	mul.w	r4, r9, sl
    6ecc:	429c      	cmp	r4, r3
    6ece:	fa02 f207 	lsl.w	r2, r2, r7
    6ed2:	fa00 f107 	lsl.w	r1, r0, r7
    6ed6:	d90b      	bls.n	6ef0 <__udivmoddi4+0x1b0>
    6ed8:	eb1e 0303 	adds.w	r3, lr, r3
    6edc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    6ee0:	f080 8087 	bcs.w	6ff2 <__udivmoddi4+0x2b2>
    6ee4:	429c      	cmp	r4, r3
    6ee6:	f240 8084 	bls.w	6ff2 <__udivmoddi4+0x2b2>
    6eea:	f1a9 0902 	sub.w	r9, r9, #2
    6eee:	4473      	add	r3, lr
    6ef0:	1b1b      	subs	r3, r3, r4
    6ef2:	b2ad      	uxth	r5, r5
    6ef4:	fbb3 f0f8 	udiv	r0, r3, r8
    6ef8:	fb08 3310 	mls	r3, r8, r0, r3
    6efc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    6f00:	fb00 fa0a 	mul.w	sl, r0, sl
    6f04:	45a2      	cmp	sl, r4
    6f06:	d908      	bls.n	6f1a <__udivmoddi4+0x1da>
    6f08:	eb1e 0404 	adds.w	r4, lr, r4
    6f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6f10:	d26b      	bcs.n	6fea <__udivmoddi4+0x2aa>
    6f12:	45a2      	cmp	sl, r4
    6f14:	d969      	bls.n	6fea <__udivmoddi4+0x2aa>
    6f16:	3802      	subs	r0, #2
    6f18:	4474      	add	r4, lr
    6f1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    6f1e:	fba0 8902 	umull	r8, r9, r0, r2
    6f22:	eba4 040a 	sub.w	r4, r4, sl
    6f26:	454c      	cmp	r4, r9
    6f28:	46c2      	mov	sl, r8
    6f2a:	464b      	mov	r3, r9
    6f2c:	d354      	bcc.n	6fd8 <__udivmoddi4+0x298>
    6f2e:	d051      	beq.n	6fd4 <__udivmoddi4+0x294>
    6f30:	2e00      	cmp	r6, #0
    6f32:	d069      	beq.n	7008 <__udivmoddi4+0x2c8>
    6f34:	ebb1 050a 	subs.w	r5, r1, sl
    6f38:	eb64 0403 	sbc.w	r4, r4, r3
    6f3c:	fa04 fc0c 	lsl.w	ip, r4, ip
    6f40:	40fd      	lsrs	r5, r7
    6f42:	40fc      	lsrs	r4, r7
    6f44:	ea4c 0505 	orr.w	r5, ip, r5
    6f48:	e9c6 5400 	strd	r5, r4, [r6]
    6f4c:	2700      	movs	r7, #0
    6f4e:	e747      	b.n	6de0 <__udivmoddi4+0xa0>
    6f50:	f1c2 0320 	rsb	r3, r2, #32
    6f54:	fa20 f703 	lsr.w	r7, r0, r3
    6f58:	4095      	lsls	r5, r2
    6f5a:	fa01 f002 	lsl.w	r0, r1, r2
    6f5e:	fa21 f303 	lsr.w	r3, r1, r3
    6f62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6f66:	4338      	orrs	r0, r7
    6f68:	0c01      	lsrs	r1, r0, #16
    6f6a:	fbb3 f7fe 	udiv	r7, r3, lr
    6f6e:	fa1f f885 	uxth.w	r8, r5
    6f72:	fb0e 3317 	mls	r3, lr, r7, r3
    6f76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6f7a:	fb07 f308 	mul.w	r3, r7, r8
    6f7e:	428b      	cmp	r3, r1
    6f80:	fa04 f402 	lsl.w	r4, r4, r2
    6f84:	d907      	bls.n	6f96 <__udivmoddi4+0x256>
    6f86:	1869      	adds	r1, r5, r1
    6f88:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    6f8c:	d22f      	bcs.n	6fee <__udivmoddi4+0x2ae>
    6f8e:	428b      	cmp	r3, r1
    6f90:	d92d      	bls.n	6fee <__udivmoddi4+0x2ae>
    6f92:	3f02      	subs	r7, #2
    6f94:	4429      	add	r1, r5
    6f96:	1acb      	subs	r3, r1, r3
    6f98:	b281      	uxth	r1, r0
    6f9a:	fbb3 f0fe 	udiv	r0, r3, lr
    6f9e:	fb0e 3310 	mls	r3, lr, r0, r3
    6fa2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6fa6:	fb00 f308 	mul.w	r3, r0, r8
    6faa:	428b      	cmp	r3, r1
    6fac:	d907      	bls.n	6fbe <__udivmoddi4+0x27e>
    6fae:	1869      	adds	r1, r5, r1
    6fb0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6fb4:	d217      	bcs.n	6fe6 <__udivmoddi4+0x2a6>
    6fb6:	428b      	cmp	r3, r1
    6fb8:	d915      	bls.n	6fe6 <__udivmoddi4+0x2a6>
    6fba:	3802      	subs	r0, #2
    6fbc:	4429      	add	r1, r5
    6fbe:	1ac9      	subs	r1, r1, r3
    6fc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    6fc4:	e73b      	b.n	6e3e <__udivmoddi4+0xfe>
    6fc6:	4637      	mov	r7, r6
    6fc8:	4630      	mov	r0, r6
    6fca:	e709      	b.n	6de0 <__udivmoddi4+0xa0>
    6fcc:	4607      	mov	r7, r0
    6fce:	e6e7      	b.n	6da0 <__udivmoddi4+0x60>
    6fd0:	4618      	mov	r0, r3
    6fd2:	e6fb      	b.n	6dcc <__udivmoddi4+0x8c>
    6fd4:	4541      	cmp	r1, r8
    6fd6:	d2ab      	bcs.n	6f30 <__udivmoddi4+0x1f0>
    6fd8:	ebb8 0a02 	subs.w	sl, r8, r2
    6fdc:	eb69 020e 	sbc.w	r2, r9, lr
    6fe0:	3801      	subs	r0, #1
    6fe2:	4613      	mov	r3, r2
    6fe4:	e7a4      	b.n	6f30 <__udivmoddi4+0x1f0>
    6fe6:	4660      	mov	r0, ip
    6fe8:	e7e9      	b.n	6fbe <__udivmoddi4+0x27e>
    6fea:	4618      	mov	r0, r3
    6fec:	e795      	b.n	6f1a <__udivmoddi4+0x1da>
    6fee:	4667      	mov	r7, ip
    6ff0:	e7d1      	b.n	6f96 <__udivmoddi4+0x256>
    6ff2:	4681      	mov	r9, r0
    6ff4:	e77c      	b.n	6ef0 <__udivmoddi4+0x1b0>
    6ff6:	3802      	subs	r0, #2
    6ff8:	442c      	add	r4, r5
    6ffa:	e747      	b.n	6e8c <__udivmoddi4+0x14c>
    6ffc:	f1ac 0c02 	sub.w	ip, ip, #2
    7000:	442b      	add	r3, r5
    7002:	e72f      	b.n	6e64 <__udivmoddi4+0x124>
    7004:	4638      	mov	r0, r7
    7006:	e708      	b.n	6e1a <__udivmoddi4+0xda>
    7008:	4637      	mov	r7, r6
    700a:	e6e9      	b.n	6de0 <__udivmoddi4+0xa0>

0000700c <selfrel_offset31>:
    700c:	6803      	ldr	r3, [r0, #0]
    700e:	005a      	lsls	r2, r3, #1
    7010:	bf4c      	ite	mi
    7012:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    7016:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    701a:	4418      	add	r0, r3
    701c:	4770      	bx	lr
    701e:	bf00      	nop

00007020 <search_EIT_table>:
    7020:	b361      	cbz	r1, 707c <search_EIT_table+0x5c>
    7022:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7026:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    702a:	4690      	mov	r8, r2
    702c:	4606      	mov	r6, r0
    702e:	46d1      	mov	r9, sl
    7030:	2700      	movs	r7, #0
    7032:	eb07 0409 	add.w	r4, r7, r9
    7036:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    703a:	1064      	asrs	r4, r4, #1
    703c:	00e5      	lsls	r5, r4, #3
    703e:	1971      	adds	r1, r6, r5
    7040:	4608      	mov	r0, r1
    7042:	f7ff ffe3 	bl	700c <selfrel_offset31>
    7046:	45a2      	cmp	sl, r4
    7048:	4683      	mov	fp, r0
    704a:	f105 0008 	add.w	r0, r5, #8
    704e:	4430      	add	r0, r6
    7050:	d009      	beq.n	7066 <search_EIT_table+0x46>
    7052:	f7ff ffdb 	bl	700c <selfrel_offset31>
    7056:	45c3      	cmp	fp, r8
    7058:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    705c:	d805      	bhi.n	706a <search_EIT_table+0x4a>
    705e:	4540      	cmp	r0, r8
    7060:	d209      	bcs.n	7076 <search_EIT_table+0x56>
    7062:	1c67      	adds	r7, r4, #1
    7064:	e7e5      	b.n	7032 <search_EIT_table+0x12>
    7066:	45c3      	cmp	fp, r8
    7068:	d905      	bls.n	7076 <search_EIT_table+0x56>
    706a:	42a7      	cmp	r7, r4
    706c:	d002      	beq.n	7074 <search_EIT_table+0x54>
    706e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    7072:	e7de      	b.n	7032 <search_EIT_table+0x12>
    7074:	2100      	movs	r1, #0
    7076:	4608      	mov	r0, r1
    7078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    707c:	4608      	mov	r0, r1
    707e:	4770      	bx	lr

00007080 <__gnu_unwind_get_pr_addr>:
    7080:	2801      	cmp	r0, #1
    7082:	d007      	beq.n	7094 <__gnu_unwind_get_pr_addr+0x14>
    7084:	2802      	cmp	r0, #2
    7086:	d007      	beq.n	7098 <__gnu_unwind_get_pr_addr+0x18>
    7088:	4b04      	ldr	r3, [pc, #16]	; (709c <__gnu_unwind_get_pr_addr+0x1c>)
    708a:	2800      	cmp	r0, #0
    708c:	bf0c      	ite	eq
    708e:	4618      	moveq	r0, r3
    7090:	2000      	movne	r0, #0
    7092:	4770      	bx	lr
    7094:	4802      	ldr	r0, [pc, #8]	; (70a0 <__gnu_unwind_get_pr_addr+0x20>)
    7096:	4770      	bx	lr
    7098:	4802      	ldr	r0, [pc, #8]	; (70a4 <__gnu_unwind_get_pr_addr+0x24>)
    709a:	4770      	bx	lr
    709c:	0000776d 	.word	0x0000776d
    70a0:	00007771 	.word	0x00007771
    70a4:	00007775 	.word	0x00007775

000070a8 <get_eit_entry>:
    70a8:	b530      	push	{r4, r5, lr}
    70aa:	4b25      	ldr	r3, [pc, #148]	; (7140 <get_eit_entry+0x98>)
    70ac:	b083      	sub	sp, #12
    70ae:	4604      	mov	r4, r0
    70b0:	1e8d      	subs	r5, r1, #2
    70b2:	b34b      	cbz	r3, 7108 <get_eit_entry+0x60>
    70b4:	a901      	add	r1, sp, #4
    70b6:	4628      	mov	r0, r5
    70b8:	f3af 8000 	nop.w
    70bc:	b1f0      	cbz	r0, 70fc <get_eit_entry+0x54>
    70be:	9901      	ldr	r1, [sp, #4]
    70c0:	462a      	mov	r2, r5
    70c2:	f7ff ffad 	bl	7020 <search_EIT_table>
    70c6:	4601      	mov	r1, r0
    70c8:	b1c0      	cbz	r0, 70fc <get_eit_entry+0x54>
    70ca:	f7ff ff9f 	bl	700c <selfrel_offset31>
    70ce:	684b      	ldr	r3, [r1, #4]
    70d0:	64a0      	str	r0, [r4, #72]	; 0x48
    70d2:	2b01      	cmp	r3, #1
    70d4:	d02e      	beq.n	7134 <get_eit_entry+0x8c>
    70d6:	2b00      	cmp	r3, #0
    70d8:	f101 0004 	add.w	r0, r1, #4
    70dc:	db26      	blt.n	712c <get_eit_entry+0x84>
    70de:	f7ff ff95 	bl	700c <selfrel_offset31>
    70e2:	2300      	movs	r3, #0
    70e4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    70e8:	6803      	ldr	r3, [r0, #0]
    70ea:	2b00      	cmp	r3, #0
    70ec:	db12      	blt.n	7114 <get_eit_entry+0x6c>
    70ee:	f7ff ff8d 	bl	700c <selfrel_offset31>
    70f2:	2300      	movs	r3, #0
    70f4:	6120      	str	r0, [r4, #16]
    70f6:	4618      	mov	r0, r3
    70f8:	b003      	add	sp, #12
    70fa:	bd30      	pop	{r4, r5, pc}
    70fc:	2300      	movs	r3, #0
    70fe:	6123      	str	r3, [r4, #16]
    7100:	2309      	movs	r3, #9
    7102:	4618      	mov	r0, r3
    7104:	b003      	add	sp, #12
    7106:	bd30      	pop	{r4, r5, pc}
    7108:	490e      	ldr	r1, [pc, #56]	; (7144 <get_eit_entry+0x9c>)
    710a:	480f      	ldr	r0, [pc, #60]	; (7148 <get_eit_entry+0xa0>)
    710c:	1a09      	subs	r1, r1, r0
    710e:	10c9      	asrs	r1, r1, #3
    7110:	9101      	str	r1, [sp, #4]
    7112:	e7d5      	b.n	70c0 <get_eit_entry+0x18>
    7114:	f3c3 6003 	ubfx	r0, r3, #24, #4
    7118:	f7ff ffb2 	bl	7080 <__gnu_unwind_get_pr_addr>
    711c:	2800      	cmp	r0, #0
    711e:	bf14      	ite	ne
    7120:	2300      	movne	r3, #0
    7122:	2309      	moveq	r3, #9
    7124:	6120      	str	r0, [r4, #16]
    7126:	4618      	mov	r0, r3
    7128:	b003      	add	sp, #12
    712a:	bd30      	pop	{r4, r5, pc}
    712c:	2301      	movs	r3, #1
    712e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7132:	e7d9      	b.n	70e8 <get_eit_entry+0x40>
    7134:	2300      	movs	r3, #0
    7136:	6123      	str	r3, [r4, #16]
    7138:	2305      	movs	r3, #5
    713a:	4618      	mov	r0, r3
    713c:	b003      	add	sp, #12
    713e:	bd30      	pop	{r4, r5, pc}
    7140:	00000000 	.word	0x00000000
    7144:	00009814 	.word	0x00009814
    7148:	0000975c 	.word	0x0000975c

0000714c <restore_non_core_regs>:
    714c:	6803      	ldr	r3, [r0, #0]
    714e:	07da      	lsls	r2, r3, #31
    7150:	b510      	push	{r4, lr}
    7152:	4604      	mov	r4, r0
    7154:	d406      	bmi.n	7164 <restore_non_core_regs+0x18>
    7156:	079b      	lsls	r3, r3, #30
    7158:	f100 0048 	add.w	r0, r0, #72	; 0x48
    715c:	d509      	bpl.n	7172 <restore_non_core_regs+0x26>
    715e:	f000 fc5f 	bl	7a20 <__gnu_Unwind_Restore_VFP_D>
    7162:	6823      	ldr	r3, [r4, #0]
    7164:	0759      	lsls	r1, r3, #29
    7166:	d509      	bpl.n	717c <restore_non_core_regs+0x30>
    7168:	071a      	lsls	r2, r3, #28
    716a:	d50e      	bpl.n	718a <restore_non_core_regs+0x3e>
    716c:	06db      	lsls	r3, r3, #27
    716e:	d513      	bpl.n	7198 <restore_non_core_regs+0x4c>
    7170:	bd10      	pop	{r4, pc}
    7172:	f000 fc4d 	bl	7a10 <__gnu_Unwind_Restore_VFP>
    7176:	6823      	ldr	r3, [r4, #0]
    7178:	0759      	lsls	r1, r3, #29
    717a:	d4f5      	bmi.n	7168 <restore_non_core_regs+0x1c>
    717c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    7180:	f000 fc56 	bl	7a30 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7184:	6823      	ldr	r3, [r4, #0]
    7186:	071a      	lsls	r2, r3, #28
    7188:	d4f0      	bmi.n	716c <restore_non_core_regs+0x20>
    718a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    718e:	f000 fc57 	bl	7a40 <__gnu_Unwind_Restore_WMMXD>
    7192:	6823      	ldr	r3, [r4, #0]
    7194:	06db      	lsls	r3, r3, #27
    7196:	d4eb      	bmi.n	7170 <restore_non_core_regs+0x24>
    7198:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    719c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71a0:	f000 bc92 	b.w	7ac8 <__gnu_Unwind_Restore_WMMXC>

000071a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
    71a4:	6803      	ldr	r3, [r0, #0]
    71a6:	b103      	cbz	r3, 71aa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    71a8:	4403      	add	r3, r0
    71aa:	4618      	mov	r0, r3
    71ac:	4770      	bx	lr
    71ae:	bf00      	nop

000071b0 <__gnu_unwind_24bit.isra.1>:
    71b0:	2009      	movs	r0, #9
    71b2:	4770      	bx	lr

000071b4 <_Unwind_DebugHook>:
    71b4:	4770      	bx	lr
    71b6:	bf00      	nop

000071b8 <unwind_phase2>:
    71b8:	b570      	push	{r4, r5, r6, lr}
    71ba:	4604      	mov	r4, r0
    71bc:	460d      	mov	r5, r1
    71be:	e008      	b.n	71d2 <unwind_phase2+0x1a>
    71c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    71c2:	6163      	str	r3, [r4, #20]
    71c4:	462a      	mov	r2, r5
    71c6:	6923      	ldr	r3, [r4, #16]
    71c8:	4621      	mov	r1, r4
    71ca:	2001      	movs	r0, #1
    71cc:	4798      	blx	r3
    71ce:	2808      	cmp	r0, #8
    71d0:	d108      	bne.n	71e4 <unwind_phase2+0x2c>
    71d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    71d4:	4620      	mov	r0, r4
    71d6:	f7ff ff67 	bl	70a8 <get_eit_entry>
    71da:	4606      	mov	r6, r0
    71dc:	2800      	cmp	r0, #0
    71de:	d0ef      	beq.n	71c0 <unwind_phase2+0x8>
    71e0:	f000 fe9c 	bl	7f1c <abort>
    71e4:	2807      	cmp	r0, #7
    71e6:	d1fb      	bne.n	71e0 <unwind_phase2+0x28>
    71e8:	4630      	mov	r0, r6
    71ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
    71ec:	f7ff ffe2 	bl	71b4 <_Unwind_DebugHook>
    71f0:	1d28      	adds	r0, r5, #4
    71f2:	f000 fc01 	bl	79f8 <__restore_core_regs>
    71f6:	bf00      	nop

000071f8 <unwind_phase2_forced>:
    71f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71fc:	1d0c      	adds	r4, r1, #4
    71fe:	4605      	mov	r5, r0
    7200:	4617      	mov	r7, r2
    7202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7204:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    7208:	ae03      	add	r6, sp, #12
    720a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    720c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    720e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7212:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7214:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    7218:	ac02      	add	r4, sp, #8
    721a:	f8d5 800c 	ldr.w	r8, [r5, #12]
    721e:	f8d5 9018 	ldr.w	r9, [r5, #24]
    7222:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    7226:	2300      	movs	r3, #0
    7228:	6023      	str	r3, [r4, #0]
    722a:	e021      	b.n	7270 <unwind_phase2_forced+0x78>
    722c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    722e:	616b      	str	r3, [r5, #20]
    7230:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7234:	4621      	mov	r1, r4
    7236:	a87a      	add	r0, sp, #488	; 0x1e8
    7238:	f000 feac 	bl	7f94 <memcpy>
    723c:	692b      	ldr	r3, [r5, #16]
    723e:	aa7a      	add	r2, sp, #488	; 0x1e8
    7240:	4629      	mov	r1, r5
    7242:	4630      	mov	r0, r6
    7244:	4798      	blx	r3
    7246:	9b88      	ldr	r3, [sp, #544]	; 0x220
    7248:	e9cd 4900 	strd	r4, r9, [sp]
    724c:	4682      	mov	sl, r0
    724e:	6463      	str	r3, [r4, #68]	; 0x44
    7250:	4631      	mov	r1, r6
    7252:	462b      	mov	r3, r5
    7254:	462a      	mov	r2, r5
    7256:	2001      	movs	r0, #1
    7258:	47c0      	blx	r8
    725a:	4607      	mov	r7, r0
    725c:	b9f8      	cbnz	r0, 729e <unwind_phase2_forced+0xa6>
    725e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7262:	a97a      	add	r1, sp, #488	; 0x1e8
    7264:	4620      	mov	r0, r4
    7266:	f000 fe95 	bl	7f94 <memcpy>
    726a:	f1ba 0f08 	cmp.w	sl, #8
    726e:	d11c      	bne.n	72aa <unwind_phase2_forced+0xb2>
    7270:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7272:	4628      	mov	r0, r5
    7274:	f7ff ff18 	bl	70a8 <get_eit_entry>
    7278:	2f00      	cmp	r7, #0
    727a:	bf08      	it	eq
    727c:	2609      	moveq	r6, #9
    727e:	4607      	mov	r7, r0
    7280:	bf18      	it	ne
    7282:	260a      	movne	r6, #10
    7284:	2800      	cmp	r0, #0
    7286:	d0d1      	beq.n	722c <unwind_phase2_forced+0x34>
    7288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    728a:	f046 0110 	orr.w	r1, r6, #16
    728e:	e9cd 4900 	strd	r4, r9, [sp]
    7292:	462a      	mov	r2, r5
    7294:	6463      	str	r3, [r4, #68]	; 0x44
    7296:	2001      	movs	r0, #1
    7298:	462b      	mov	r3, r5
    729a:	47c0      	blx	r8
    729c:	b100      	cbz	r0, 72a0 <unwind_phase2_forced+0xa8>
    729e:	2709      	movs	r7, #9
    72a0:	4638      	mov	r0, r7
    72a2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    72a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72aa:	f1ba 0f07 	cmp.w	sl, #7
    72ae:	d1f6      	bne.n	729e <unwind_phase2_forced+0xa6>
    72b0:	4638      	mov	r0, r7
    72b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    72b4:	f7ff ff7e 	bl	71b4 <_Unwind_DebugHook>
    72b8:	a803      	add	r0, sp, #12
    72ba:	f000 fb9d 	bl	79f8 <__restore_core_regs>
    72be:	bf00      	nop

000072c0 <_Unwind_GetCFA>:
    72c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    72c2:	4770      	bx	lr

000072c4 <__gnu_Unwind_RaiseException>:
    72c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    72c8:	640b      	str	r3, [r1, #64]	; 0x40
    72ca:	1d0d      	adds	r5, r1, #4
    72cc:	460f      	mov	r7, r1
    72ce:	4606      	mov	r6, r0
    72d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72d2:	b0f9      	sub	sp, #484	; 0x1e4
    72d4:	ac01      	add	r4, sp, #4
    72d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    72d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    72dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    72e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    72e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    72e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    72ec:	9500      	str	r5, [sp, #0]
    72ee:	e006      	b.n	72fe <__gnu_Unwind_RaiseException+0x3a>
    72f0:	6933      	ldr	r3, [r6, #16]
    72f2:	466a      	mov	r2, sp
    72f4:	4631      	mov	r1, r6
    72f6:	4798      	blx	r3
    72f8:	2808      	cmp	r0, #8
    72fa:	4604      	mov	r4, r0
    72fc:	d108      	bne.n	7310 <__gnu_Unwind_RaiseException+0x4c>
    72fe:	9910      	ldr	r1, [sp, #64]	; 0x40
    7300:	4630      	mov	r0, r6
    7302:	f7ff fed1 	bl	70a8 <get_eit_entry>
    7306:	2800      	cmp	r0, #0
    7308:	d0f2      	beq.n	72f0 <__gnu_Unwind_RaiseException+0x2c>
    730a:	2009      	movs	r0, #9
    730c:	b079      	add	sp, #484	; 0x1e4
    730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7310:	4668      	mov	r0, sp
    7312:	f7ff ff1b 	bl	714c <restore_non_core_regs>
    7316:	2c06      	cmp	r4, #6
    7318:	d1f7      	bne.n	730a <__gnu_Unwind_RaiseException+0x46>
    731a:	4639      	mov	r1, r7
    731c:	4630      	mov	r0, r6
    731e:	f7ff ff4b 	bl	71b8 <unwind_phase2>
    7322:	bf00      	nop

00007324 <__gnu_Unwind_ForcedUnwind>:
    7324:	b430      	push	{r4, r5}
    7326:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    7328:	60c1      	str	r1, [r0, #12]
    732a:	6182      	str	r2, [r0, #24]
    732c:	4619      	mov	r1, r3
    732e:	641d      	str	r5, [r3, #64]	; 0x40
    7330:	2200      	movs	r2, #0
    7332:	bc30      	pop	{r4, r5}
    7334:	e760      	b.n	71f8 <unwind_phase2_forced>
    7336:	bf00      	nop

00007338 <__gnu_Unwind_Resume>:
    7338:	b570      	push	{r4, r5, r6, lr}
    733a:	68c6      	ldr	r6, [r0, #12]
    733c:	6943      	ldr	r3, [r0, #20]
    733e:	640b      	str	r3, [r1, #64]	; 0x40
    7340:	b9be      	cbnz	r6, 7372 <__gnu_Unwind_Resume+0x3a>
    7342:	6903      	ldr	r3, [r0, #16]
    7344:	460a      	mov	r2, r1
    7346:	4604      	mov	r4, r0
    7348:	460d      	mov	r5, r1
    734a:	4601      	mov	r1, r0
    734c:	2002      	movs	r0, #2
    734e:	4798      	blx	r3
    7350:	2807      	cmp	r0, #7
    7352:	d007      	beq.n	7364 <__gnu_Unwind_Resume+0x2c>
    7354:	2808      	cmp	r0, #8
    7356:	d103      	bne.n	7360 <__gnu_Unwind_Resume+0x28>
    7358:	4629      	mov	r1, r5
    735a:	4620      	mov	r0, r4
    735c:	f7ff ff2c 	bl	71b8 <unwind_phase2>
    7360:	f000 fddc 	bl	7f1c <abort>
    7364:	4630      	mov	r0, r6
    7366:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7368:	f7ff ff24 	bl	71b4 <_Unwind_DebugHook>
    736c:	1d28      	adds	r0, r5, #4
    736e:	f000 fb43 	bl	79f8 <__restore_core_regs>
    7372:	2201      	movs	r2, #1
    7374:	f7ff ff40 	bl	71f8 <unwind_phase2_forced>
    7378:	f000 fdd0 	bl	7f1c <abort>

0000737c <__gnu_Unwind_Resume_or_Rethrow>:
    737c:	68c2      	ldr	r2, [r0, #12]
    737e:	b11a      	cbz	r2, 7388 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    7380:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    7382:	640a      	str	r2, [r1, #64]	; 0x40
    7384:	2200      	movs	r2, #0
    7386:	e737      	b.n	71f8 <unwind_phase2_forced>
    7388:	e79c      	b.n	72c4 <__gnu_Unwind_RaiseException>
    738a:	bf00      	nop

0000738c <_Unwind_Complete>:
    738c:	4770      	bx	lr
    738e:	bf00      	nop

00007390 <_Unwind_DeleteException>:
    7390:	6883      	ldr	r3, [r0, #8]
    7392:	b113      	cbz	r3, 739a <_Unwind_DeleteException+0xa>
    7394:	4601      	mov	r1, r0
    7396:	2001      	movs	r0, #1
    7398:	4718      	bx	r3
    739a:	4770      	bx	lr

0000739c <_Unwind_VRS_Get>:
    739c:	2904      	cmp	r1, #4
    739e:	d807      	bhi.n	73b0 <_Unwind_VRS_Get+0x14>
    73a0:	e8df f001 	tbb	[pc, r1]
    73a4:	08060803 	.word	0x08060803
    73a8:	08          	.byte	0x08
    73a9:	00          	.byte	0x00
    73aa:	b90b      	cbnz	r3, 73b0 <_Unwind_VRS_Get+0x14>
    73ac:	2a0f      	cmp	r2, #15
    73ae:	d903      	bls.n	73b8 <_Unwind_VRS_Get+0x1c>
    73b0:	2002      	movs	r0, #2
    73b2:	4770      	bx	lr
    73b4:	2001      	movs	r0, #1
    73b6:	4770      	bx	lr
    73b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    73bc:	4618      	mov	r0, r3
    73be:	6853      	ldr	r3, [r2, #4]
    73c0:	9a00      	ldr	r2, [sp, #0]
    73c2:	6013      	str	r3, [r2, #0]
    73c4:	4770      	bx	lr
    73c6:	bf00      	nop

000073c8 <_Unwind_GetGR>:
    73c8:	b510      	push	{r4, lr}
    73ca:	b084      	sub	sp, #16
    73cc:	2300      	movs	r3, #0
    73ce:	ac03      	add	r4, sp, #12
    73d0:	460a      	mov	r2, r1
    73d2:	9400      	str	r4, [sp, #0]
    73d4:	4619      	mov	r1, r3
    73d6:	f7ff ffe1 	bl	739c <_Unwind_VRS_Get>
    73da:	9803      	ldr	r0, [sp, #12]
    73dc:	b004      	add	sp, #16
    73de:	bd10      	pop	{r4, pc}

000073e0 <_Unwind_VRS_Set>:
    73e0:	2904      	cmp	r1, #4
    73e2:	d807      	bhi.n	73f4 <_Unwind_VRS_Set+0x14>
    73e4:	e8df f001 	tbb	[pc, r1]
    73e8:	08060803 	.word	0x08060803
    73ec:	08          	.byte	0x08
    73ed:	00          	.byte	0x00
    73ee:	b90b      	cbnz	r3, 73f4 <_Unwind_VRS_Set+0x14>
    73f0:	2a0f      	cmp	r2, #15
    73f2:	d903      	bls.n	73fc <_Unwind_VRS_Set+0x1c>
    73f4:	2002      	movs	r0, #2
    73f6:	4770      	bx	lr
    73f8:	2001      	movs	r0, #1
    73fa:	4770      	bx	lr
    73fc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    7400:	9a00      	ldr	r2, [sp, #0]
    7402:	6812      	ldr	r2, [r2, #0]
    7404:	6042      	str	r2, [r0, #4]
    7406:	4618      	mov	r0, r3
    7408:	4770      	bx	lr
    740a:	bf00      	nop

0000740c <_Unwind_SetGR>:
    740c:	b510      	push	{r4, lr}
    740e:	b084      	sub	sp, #16
    7410:	ac04      	add	r4, sp, #16
    7412:	2300      	movs	r3, #0
    7414:	f844 2d04 	str.w	r2, [r4, #-4]!
    7418:	460a      	mov	r2, r1
    741a:	9400      	str	r4, [sp, #0]
    741c:	4619      	mov	r1, r3
    741e:	f7ff ffdf 	bl	73e0 <_Unwind_VRS_Set>
    7422:	b004      	add	sp, #16
    7424:	bd10      	pop	{r4, pc}
    7426:	bf00      	nop

00007428 <__gnu_Unwind_Backtrace>:
    7428:	b5f0      	push	{r4, r5, r6, r7, lr}
    742a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    742c:	6413      	str	r3, [r2, #64]	; 0x40
    742e:	1d15      	adds	r5, r2, #4
    7430:	4607      	mov	r7, r0
    7432:	460e      	mov	r6, r1
    7434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7436:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    743a:	ac17      	add	r4, sp, #92	; 0x5c
    743c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    743e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7446:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    744a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    744e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7452:	9516      	str	r5, [sp, #88]	; 0x58
    7454:	e010      	b.n	7478 <__gnu_Unwind_Backtrace+0x50>
    7456:	a816      	add	r0, sp, #88	; 0x58
    7458:	f7ff ffd8 	bl	740c <_Unwind_SetGR>
    745c:	4631      	mov	r1, r6
    745e:	a816      	add	r0, sp, #88	; 0x58
    7460:	47b8      	blx	r7
    7462:	aa16      	add	r2, sp, #88	; 0x58
    7464:	4669      	mov	r1, sp
    7466:	b978      	cbnz	r0, 7488 <__gnu_Unwind_Backtrace+0x60>
    7468:	9b04      	ldr	r3, [sp, #16]
    746a:	2008      	movs	r0, #8
    746c:	4798      	blx	r3
    746e:	2805      	cmp	r0, #5
    7470:	4604      	mov	r4, r0
    7472:	d00a      	beq.n	748a <__gnu_Unwind_Backtrace+0x62>
    7474:	2809      	cmp	r0, #9
    7476:	d007      	beq.n	7488 <__gnu_Unwind_Backtrace+0x60>
    7478:	9926      	ldr	r1, [sp, #152]	; 0x98
    747a:	4668      	mov	r0, sp
    747c:	f7ff fe14 	bl	70a8 <get_eit_entry>
    7480:	466a      	mov	r2, sp
    7482:	210c      	movs	r1, #12
    7484:	2800      	cmp	r0, #0
    7486:	d0e6      	beq.n	7456 <__gnu_Unwind_Backtrace+0x2e>
    7488:	2409      	movs	r4, #9
    748a:	a816      	add	r0, sp, #88	; 0x58
    748c:	f7ff fe5e 	bl	714c <restore_non_core_regs>
    7490:	4620      	mov	r0, r4
    7492:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    7496:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007498 <__gnu_unwind_pr_common>:
    7498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    749c:	460d      	mov	r5, r1
    749e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    74a0:	b089      	sub	sp, #36	; 0x24
    74a2:	1d0c      	adds	r4, r1, #4
    74a4:	4616      	mov	r6, r2
    74a6:	f000 0b03 	and.w	fp, r0, #3
    74aa:	680a      	ldr	r2, [r1, #0]
    74ac:	9406      	str	r4, [sp, #24]
    74ae:	461f      	mov	r7, r3
    74b0:	2b00      	cmp	r3, #0
    74b2:	d068      	beq.n	7586 <__gnu_unwind_pr_common+0xee>
    74b4:	0c13      	lsrs	r3, r2, #16
    74b6:	b2d9      	uxtb	r1, r3
    74b8:	0412      	lsls	r2, r2, #16
    74ba:	f88d 301d 	strb.w	r3, [sp, #29]
    74be:	2302      	movs	r3, #2
    74c0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    74c4:	9205      	str	r2, [sp, #20]
    74c6:	f88d 301c 	strb.w	r3, [sp, #28]
    74ca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    74cc:	f1bb 0f02 	cmp.w	fp, #2
    74d0:	bf08      	it	eq
    74d2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    74d4:	f013 0301 	ands.w	r3, r3, #1
    74d8:	d146      	bne.n	7568 <__gnu_unwind_pr_common+0xd0>
    74da:	9301      	str	r3, [sp, #4]
    74dc:	f000 0308 	and.w	r3, r0, #8
    74e0:	9300      	str	r3, [sp, #0]
    74e2:	f8d4 9000 	ldr.w	r9, [r4]
    74e6:	f1b9 0f00 	cmp.w	r9, #0
    74ea:	f000 80f3 	beq.w	76d4 <__gnu_unwind_pr_common+0x23c>
    74ee:	2f02      	cmp	r7, #2
    74f0:	d045      	beq.n	757e <__gnu_unwind_pr_common+0xe6>
    74f2:	f8b4 9000 	ldrh.w	r9, [r4]
    74f6:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    74fa:	3404      	adds	r4, #4
    74fc:	6cab      	ldr	r3, [r5, #72]	; 0x48
    74fe:	f028 0a01 	bic.w	sl, r8, #1
    7502:	210f      	movs	r1, #15
    7504:	4630      	mov	r0, r6
    7506:	449a      	add	sl, r3
    7508:	f7ff ff5e 	bl	73c8 <_Unwind_GetGR>
    750c:	4582      	cmp	sl, r0
    750e:	d834      	bhi.n	757a <__gnu_unwind_pr_common+0xe2>
    7510:	f029 0301 	bic.w	r3, r9, #1
    7514:	4453      	add	r3, sl
    7516:	4283      	cmp	r3, r0
    7518:	bf94      	ite	ls
    751a:	2000      	movls	r0, #0
    751c:	2001      	movhi	r0, #1
    751e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7522:	f008 0802 	and.w	r8, r8, #2
    7526:	f009 0901 	and.w	r9, r9, #1
    752a:	ea48 0809 	orr.w	r8, r8, r9
    752e:	f1b8 0f01 	cmp.w	r8, #1
    7532:	d03a      	beq.n	75aa <__gnu_unwind_pr_common+0x112>
    7534:	d331      	bcc.n	759a <__gnu_unwind_pr_common+0x102>
    7536:	f1b8 0f02 	cmp.w	r8, #2
    753a:	d11a      	bne.n	7572 <__gnu_unwind_pr_common+0xda>
    753c:	6823      	ldr	r3, [r4, #0]
    753e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    7542:	f1bb 0f00 	cmp.w	fp, #0
    7546:	d166      	bne.n	7616 <__gnu_unwind_pr_common+0x17e>
    7548:	b130      	cbz	r0, 7558 <__gnu_unwind_pr_common+0xc0>
    754a:	9a00      	ldr	r2, [sp, #0]
    754c:	2a00      	cmp	r2, #0
    754e:	d06c      	beq.n	762a <__gnu_unwind_pr_common+0x192>
    7550:	f1ba 0f00 	cmp.w	sl, #0
    7554:	f000 8090 	beq.w	7678 <__gnu_unwind_pr_common+0x1e0>
    7558:	2b00      	cmp	r3, #0
    755a:	da00      	bge.n	755e <__gnu_unwind_pr_common+0xc6>
    755c:	3404      	adds	r4, #4
    755e:	f10a 0301 	add.w	r3, sl, #1
    7562:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7566:	e7bc      	b.n	74e2 <__gnu_unwind_pr_common+0x4a>
    7568:	4630      	mov	r0, r6
    756a:	a905      	add	r1, sp, #20
    756c:	f000 fb46 	bl	7bfc <__gnu_unwind_execute>
    7570:	b178      	cbz	r0, 7592 <__gnu_unwind_pr_common+0xfa>
    7572:	2009      	movs	r0, #9
    7574:	b009      	add	sp, #36	; 0x24
    7576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    757a:	2000      	movs	r0, #0
    757c:	e7cf      	b.n	751e <__gnu_unwind_pr_common+0x86>
    757e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    7582:	3408      	adds	r4, #8
    7584:	e7ba      	b.n	74fc <__gnu_unwind_pr_common+0x64>
    7586:	0212      	lsls	r2, r2, #8
    7588:	2303      	movs	r3, #3
    758a:	9205      	str	r2, [sp, #20]
    758c:	f8ad 301c 	strh.w	r3, [sp, #28]
    7590:	e79b      	b.n	74ca <__gnu_unwind_pr_common+0x32>
    7592:	2008      	movs	r0, #8
    7594:	b009      	add	sp, #36	; 0x24
    7596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    759a:	f1bb 0f00 	cmp.w	fp, #0
    759e:	d002      	beq.n	75a6 <__gnu_unwind_pr_common+0x10e>
    75a0:	2800      	cmp	r0, #0
    75a2:	f040 80b4 	bne.w	770e <__gnu_unwind_pr_common+0x276>
    75a6:	3404      	adds	r4, #4
    75a8:	e79b      	b.n	74e2 <__gnu_unwind_pr_common+0x4a>
    75aa:	f1bb 0f00 	cmp.w	fp, #0
    75ae:	d118      	bne.n	75e2 <__gnu_unwind_pr_common+0x14a>
    75b0:	b1a8      	cbz	r0, 75de <__gnu_unwind_pr_common+0x146>
    75b2:	e9d4 2300 	ldrd	r2, r3, [r4]
    75b6:	1c99      	adds	r1, r3, #2
    75b8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    75bc:	d0d9      	beq.n	7572 <__gnu_unwind_pr_common+0xda>
    75be:	f105 0158 	add.w	r1, r5, #88	; 0x58
    75c2:	3301      	adds	r3, #1
    75c4:	9104      	str	r1, [sp, #16]
    75c6:	f000 80b5 	beq.w	7734 <__gnu_unwind_pr_common+0x29c>
    75ca:	1d20      	adds	r0, r4, #4
    75cc:	f7ff fdea 	bl	71a4 <_Unwind_decode_typeinfo_ptr.isra.0>
    75d0:	ab04      	add	r3, sp, #16
    75d2:	4601      	mov	r1, r0
    75d4:	4628      	mov	r0, r5
    75d6:	f3af 8000 	nop.w
    75da:	2800      	cmp	r0, #0
    75dc:	d167      	bne.n	76ae <__gnu_unwind_pr_common+0x216>
    75de:	3408      	adds	r4, #8
    75e0:	e77f      	b.n	74e2 <__gnu_unwind_pr_common+0x4a>
    75e2:	210d      	movs	r1, #13
    75e4:	4630      	mov	r0, r6
    75e6:	f8d5 8020 	ldr.w	r8, [r5, #32]
    75ea:	f7ff feed 	bl	73c8 <_Unwind_GetGR>
    75ee:	4580      	cmp	r8, r0
    75f0:	d1f5      	bne.n	75de <__gnu_unwind_pr_common+0x146>
    75f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    75f4:	429c      	cmp	r4, r3
    75f6:	d1f2      	bne.n	75de <__gnu_unwind_pr_common+0x146>
    75f8:	4620      	mov	r0, r4
    75fa:	f7ff fd07 	bl	700c <selfrel_offset31>
    75fe:	210f      	movs	r1, #15
    7600:	4602      	mov	r2, r0
    7602:	4630      	mov	r0, r6
    7604:	f7ff ff02 	bl	740c <_Unwind_SetGR>
    7608:	4630      	mov	r0, r6
    760a:	462a      	mov	r2, r5
    760c:	2100      	movs	r1, #0
    760e:	f7ff fefd 	bl	740c <_Unwind_SetGR>
    7612:	2007      	movs	r0, #7
    7614:	e7ae      	b.n	7574 <__gnu_unwind_pr_common+0xdc>
    7616:	210d      	movs	r1, #13
    7618:	4630      	mov	r0, r6
    761a:	f8d5 8020 	ldr.w	r8, [r5, #32]
    761e:	f7ff fed3 	bl	73c8 <_Unwind_GetGR>
    7622:	4580      	cmp	r8, r0
    7624:	d032      	beq.n	768c <__gnu_unwind_pr_common+0x1f4>
    7626:	6823      	ldr	r3, [r4, #0]
    7628:	e796      	b.n	7558 <__gnu_unwind_pr_common+0xc0>
    762a:	f1ba 0f00 	cmp.w	sl, #0
    762e:	d023      	beq.n	7678 <__gnu_unwind_pr_common+0x1e0>
    7630:	f105 0358 	add.w	r3, r5, #88	; 0x58
    7634:	f104 0804 	add.w	r8, r4, #4
    7638:	f8cd b008 	str.w	fp, [sp, #8]
    763c:	f8dd 9000 	ldr.w	r9, [sp]
    7640:	9703      	str	r7, [sp, #12]
    7642:	46a3      	mov	fp, r4
    7644:	461c      	mov	r4, r3
    7646:	e002      	b.n	764e <__gnu_unwind_pr_common+0x1b6>
    7648:	4557      	cmp	r7, sl
    764a:	46b9      	mov	r9, r7
    764c:	d040      	beq.n	76d0 <__gnu_unwind_pr_common+0x238>
    764e:	4640      	mov	r0, r8
    7650:	9404      	str	r4, [sp, #16]
    7652:	f7ff fda7 	bl	71a4 <_Unwind_decode_typeinfo_ptr.isra.0>
    7656:	ab04      	add	r3, sp, #16
    7658:	4601      	mov	r1, r0
    765a:	2200      	movs	r2, #0
    765c:	4628      	mov	r0, r5
    765e:	f3af 8000 	nop.w
    7662:	f109 0701 	add.w	r7, r9, #1
    7666:	f108 0804 	add.w	r8, r8, #4
    766a:	2800      	cmp	r0, #0
    766c:	d0ec      	beq.n	7648 <__gnu_unwind_pr_common+0x1b0>
    766e:	45d1      	cmp	r9, sl
    7670:	465c      	mov	r4, fp
    7672:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    7676:	d1d6      	bne.n	7626 <__gnu_unwind_pr_common+0x18e>
    7678:	4630      	mov	r0, r6
    767a:	210d      	movs	r1, #13
    767c:	f7ff fea4 	bl	73c8 <_Unwind_GetGR>
    7680:	9b04      	ldr	r3, [sp, #16]
    7682:	6228      	str	r0, [r5, #32]
    7684:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    7688:	2006      	movs	r0, #6
    768a:	e773      	b.n	7574 <__gnu_unwind_pr_common+0xdc>
    768c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    768e:	429c      	cmp	r4, r3
    7690:	d1c9      	bne.n	7626 <__gnu_unwind_pr_common+0x18e>
    7692:	2204      	movs	r2, #4
    7694:	f04f 0800 	mov.w	r8, #0
    7698:	18a3      	adds	r3, r4, r2
    769a:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    769e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    76a2:	6823      	ldr	r3, [r4, #0]
    76a4:	4543      	cmp	r3, r8
    76a6:	db4d      	blt.n	7744 <__gnu_unwind_pr_common+0x2ac>
    76a8:	2301      	movs	r3, #1
    76aa:	9301      	str	r3, [sp, #4]
    76ac:	e757      	b.n	755e <__gnu_unwind_pr_common+0xc6>
    76ae:	4680      	mov	r8, r0
    76b0:	210d      	movs	r1, #13
    76b2:	4630      	mov	r0, r6
    76b4:	f7ff fe88 	bl	73c8 <_Unwind_GetGR>
    76b8:	f1b8 0f02 	cmp.w	r8, #2
    76bc:	6228      	str	r0, [r5, #32]
    76be:	d13e      	bne.n	773e <__gnu_unwind_pr_common+0x2a6>
    76c0:	462b      	mov	r3, r5
    76c2:	9a04      	ldr	r2, [sp, #16]
    76c4:	f843 2f2c 	str.w	r2, [r3, #44]!
    76c8:	626b      	str	r3, [r5, #36]	; 0x24
    76ca:	62ac      	str	r4, [r5, #40]	; 0x28
    76cc:	2006      	movs	r0, #6
    76ce:	e751      	b.n	7574 <__gnu_unwind_pr_common+0xdc>
    76d0:	465c      	mov	r4, fp
    76d2:	e7d1      	b.n	7678 <__gnu_unwind_pr_common+0x1e0>
    76d4:	a905      	add	r1, sp, #20
    76d6:	4630      	mov	r0, r6
    76d8:	f000 fa90 	bl	7bfc <__gnu_unwind_execute>
    76dc:	2800      	cmp	r0, #0
    76de:	f47f af48 	bne.w	7572 <__gnu_unwind_pr_common+0xda>
    76e2:	9b01      	ldr	r3, [sp, #4]
    76e4:	2b00      	cmp	r3, #0
    76e6:	f43f af54 	beq.w	7592 <__gnu_unwind_pr_common+0xfa>
    76ea:	210f      	movs	r1, #15
    76ec:	4630      	mov	r0, r6
    76ee:	f7ff fe6b 	bl	73c8 <_Unwind_GetGR>
    76f2:	210e      	movs	r1, #14
    76f4:	4602      	mov	r2, r0
    76f6:	4630      	mov	r0, r6
    76f8:	f7ff fe88 	bl	740c <_Unwind_SetGR>
    76fc:	4630      	mov	r0, r6
    76fe:	4a1a      	ldr	r2, [pc, #104]	; (7768 <__gnu_unwind_pr_common+0x2d0>)
    7700:	210f      	movs	r1, #15
    7702:	f7ff fe83 	bl	740c <_Unwind_SetGR>
    7706:	2007      	movs	r0, #7
    7708:	b009      	add	sp, #36	; 0x24
    770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    770e:	4620      	mov	r0, r4
    7710:	f7ff fc7c 	bl	700c <selfrel_offset31>
    7714:	3404      	adds	r4, #4
    7716:	4607      	mov	r7, r0
    7718:	63ac      	str	r4, [r5, #56]	; 0x38
    771a:	4628      	mov	r0, r5
    771c:	f3af 8000 	nop.w
    7720:	2800      	cmp	r0, #0
    7722:	f43f af26 	beq.w	7572 <__gnu_unwind_pr_common+0xda>
    7726:	4630      	mov	r0, r6
    7728:	463a      	mov	r2, r7
    772a:	210f      	movs	r1, #15
    772c:	f7ff fe6e 	bl	740c <_Unwind_SetGR>
    7730:	2007      	movs	r0, #7
    7732:	e71f      	b.n	7574 <__gnu_unwind_pr_common+0xdc>
    7734:	4630      	mov	r0, r6
    7736:	210d      	movs	r1, #13
    7738:	f7ff fe46 	bl	73c8 <_Unwind_GetGR>
    773c:	6228      	str	r0, [r5, #32]
    773e:	9b04      	ldr	r3, [sp, #16]
    7740:	626b      	str	r3, [r5, #36]	; 0x24
    7742:	e7c2      	b.n	76ca <__gnu_unwind_pr_common+0x232>
    7744:	f10a 0001 	add.w	r0, sl, #1
    7748:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    774c:	f7ff fc5e 	bl	700c <selfrel_offset31>
    7750:	210f      	movs	r1, #15
    7752:	4602      	mov	r2, r0
    7754:	4630      	mov	r0, r6
    7756:	f7ff fe59 	bl	740c <_Unwind_SetGR>
    775a:	4630      	mov	r0, r6
    775c:	462a      	mov	r2, r5
    775e:	4641      	mov	r1, r8
    7760:	f7ff fe54 	bl	740c <_Unwind_SetGR>
    7764:	2007      	movs	r0, #7
    7766:	e705      	b.n	7574 <__gnu_unwind_pr_common+0xdc>
    7768:	00000000 	.word	0x00000000

0000776c <__aeabi_unwind_cpp_pr0>:
    776c:	2300      	movs	r3, #0
    776e:	e693      	b.n	7498 <__gnu_unwind_pr_common>

00007770 <__aeabi_unwind_cpp_pr1>:
    7770:	2301      	movs	r3, #1
    7772:	e691      	b.n	7498 <__gnu_unwind_pr_common>

00007774 <__aeabi_unwind_cpp_pr2>:
    7774:	2302      	movs	r3, #2
    7776:	e68f      	b.n	7498 <__gnu_unwind_pr_common>

00007778 <_Unwind_VRS_Pop>:
    7778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    777c:	4605      	mov	r5, r0
    777e:	b0c4      	sub	sp, #272	; 0x110
    7780:	2904      	cmp	r1, #4
    7782:	d806      	bhi.n	7792 <_Unwind_VRS_Pop+0x1a>
    7784:	e8df f001 	tbb	[pc, r1]
    7788:	03052b4d 	.word	0x03052b4d
    778c:	09          	.byte	0x09
    778d:	00          	.byte	0x00
    778e:	2b03      	cmp	r3, #3
    7790:	d05f      	beq.n	7852 <_Unwind_VRS_Pop+0xda>
    7792:	2002      	movs	r0, #2
    7794:	b044      	add	sp, #272	; 0x110
    7796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    779a:	2b00      	cmp	r3, #0
    779c:	d1f9      	bne.n	7792 <_Unwind_VRS_Pop+0x1a>
    779e:	2a10      	cmp	r2, #16
    77a0:	d8f7      	bhi.n	7792 <_Unwind_VRS_Pop+0x1a>
    77a2:	682b      	ldr	r3, [r5, #0]
    77a4:	06dc      	lsls	r4, r3, #27
    77a6:	f100 80f4 	bmi.w	7992 <_Unwind_VRS_Pop+0x21a>
    77aa:	ac22      	add	r4, sp, #136	; 0x88
    77ac:	4620      	mov	r0, r4
    77ae:	9201      	str	r2, [sp, #4]
    77b0:	f000 f994 	bl	7adc <__gnu_Unwind_Save_WMMXC>
    77b4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    77b6:	9a01      	ldr	r2, [sp, #4]
    77b8:	2300      	movs	r3, #0
    77ba:	2601      	movs	r6, #1
    77bc:	fa06 f103 	lsl.w	r1, r6, r3
    77c0:	4211      	tst	r1, r2
    77c2:	d003      	beq.n	77cc <_Unwind_VRS_Pop+0x54>
    77c4:	6801      	ldr	r1, [r0, #0]
    77c6:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    77ca:	3004      	adds	r0, #4
    77cc:	3301      	adds	r3, #1
    77ce:	2b04      	cmp	r3, #4
    77d0:	d1f4      	bne.n	77bc <_Unwind_VRS_Pop+0x44>
    77d2:	63a8      	str	r0, [r5, #56]	; 0x38
    77d4:	4620      	mov	r0, r4
    77d6:	f000 f977 	bl	7ac8 <__gnu_Unwind_Restore_WMMXC>
    77da:	2000      	movs	r0, #0
    77dc:	e7da      	b.n	7794 <_Unwind_VRS_Pop+0x1c>
    77de:	2b01      	cmp	r3, #1
    77e0:	ea4f 4612 	mov.w	r6, r2, lsr #16
    77e4:	b297      	uxth	r7, r2
    77e6:	d052      	beq.n	788e <_Unwind_VRS_Pop+0x116>
    77e8:	2b05      	cmp	r3, #5
    77ea:	d1d2      	bne.n	7792 <_Unwind_VRS_Pop+0x1a>
    77ec:	eb06 0807 	add.w	r8, r6, r7
    77f0:	f1b8 0f20 	cmp.w	r8, #32
    77f4:	d8cd      	bhi.n	7792 <_Unwind_VRS_Pop+0x1a>
    77f6:	2e0f      	cmp	r6, #15
    77f8:	f240 8099 	bls.w	792e <_Unwind_VRS_Pop+0x1b6>
    77fc:	46b8      	mov	r8, r7
    77fe:	2f00      	cmp	r7, #0
    7800:	f040 80db 	bne.w	79ba <_Unwind_VRS_Pop+0x242>
    7804:	6baa      	ldr	r2, [r5, #56]	; 0x38
    7806:	63aa      	str	r2, [r5, #56]	; 0x38
    7808:	2e0f      	cmp	r6, #15
    780a:	f240 80be 	bls.w	798a <_Unwind_VRS_Pop+0x212>
    780e:	f1b8 0f00 	cmp.w	r8, #0
    7812:	d002      	beq.n	781a <_Unwind_VRS_Pop+0xa2>
    7814:	a802      	add	r0, sp, #8
    7816:	f000 f90b 	bl	7a30 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    781a:	2000      	movs	r0, #0
    781c:	b044      	add	sp, #272	; 0x110
    781e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7822:	2b00      	cmp	r3, #0
    7824:	d1b5      	bne.n	7792 <_Unwind_VRS_Pop+0x1a>
    7826:	6bac      	ldr	r4, [r5, #56]	; 0x38
    7828:	b297      	uxth	r7, r2
    782a:	1d28      	adds	r0, r5, #4
    782c:	2601      	movs	r6, #1
    782e:	fa06 f103 	lsl.w	r1, r6, r3
    7832:	4239      	tst	r1, r7
    7834:	f103 0301 	add.w	r3, r3, #1
    7838:	d002      	beq.n	7840 <_Unwind_VRS_Pop+0xc8>
    783a:	6821      	ldr	r1, [r4, #0]
    783c:	6001      	str	r1, [r0, #0]
    783e:	3404      	adds	r4, #4
    7840:	2b10      	cmp	r3, #16
    7842:	f100 0004 	add.w	r0, r0, #4
    7846:	d1f2      	bne.n	782e <_Unwind_VRS_Pop+0xb6>
    7848:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    784c:	d1e5      	bne.n	781a <_Unwind_VRS_Pop+0xa2>
    784e:	63ac      	str	r4, [r5, #56]	; 0x38
    7850:	e7a0      	b.n	7794 <_Unwind_VRS_Pop+0x1c>
    7852:	0c16      	lsrs	r6, r2, #16
    7854:	b297      	uxth	r7, r2
    7856:	19f3      	adds	r3, r6, r7
    7858:	2b10      	cmp	r3, #16
    785a:	d89a      	bhi.n	7792 <_Unwind_VRS_Pop+0x1a>
    785c:	682b      	ldr	r3, [r5, #0]
    785e:	071a      	lsls	r2, r3, #28
    7860:	d45d      	bmi.n	791e <_Unwind_VRS_Pop+0x1a6>
    7862:	ac22      	add	r4, sp, #136	; 0x88
    7864:	4620      	mov	r0, r4
    7866:	f000 f90d 	bl	7a84 <__gnu_Unwind_Save_WMMXD>
    786a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    786e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7870:	b13f      	cbz	r7, 7882 <_Unwind_VRS_Pop+0x10a>
    7872:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    7876:	6818      	ldr	r0, [r3, #0]
    7878:	f841 0b04 	str.w	r0, [r1], #4
    787c:	3304      	adds	r3, #4
    787e:	4293      	cmp	r3, r2
    7880:	d1f9      	bne.n	7876 <_Unwind_VRS_Pop+0xfe>
    7882:	4620      	mov	r0, r4
    7884:	63ab      	str	r3, [r5, #56]	; 0x38
    7886:	f000 f8db 	bl	7a40 <__gnu_Unwind_Restore_WMMXD>
    788a:	2000      	movs	r0, #0
    788c:	e782      	b.n	7794 <_Unwind_VRS_Pop+0x1c>
    788e:	19f2      	adds	r2, r6, r7
    7890:	2a10      	cmp	r2, #16
    7892:	f63f af7e 	bhi.w	7792 <_Unwind_VRS_Pop+0x1a>
    7896:	2e0f      	cmp	r6, #15
    7898:	f63f af7b 	bhi.w	7792 <_Unwind_VRS_Pop+0x1a>
    789c:	682a      	ldr	r2, [r5, #0]
    789e:	07d1      	lsls	r1, r2, #31
    78a0:	d508      	bpl.n	78b4 <_Unwind_VRS_Pop+0x13c>
    78a2:	4628      	mov	r0, r5
    78a4:	f022 0203 	bic.w	r2, r2, #3
    78a8:	f840 2b48 	str.w	r2, [r0], #72
    78ac:	9301      	str	r3, [sp, #4]
    78ae:	f000 f8b3 	bl	7a18 <__gnu_Unwind_Save_VFP>
    78b2:	9b01      	ldr	r3, [sp, #4]
    78b4:	9301      	str	r3, [sp, #4]
    78b6:	ac22      	add	r4, sp, #136	; 0x88
    78b8:	4620      	mov	r0, r4
    78ba:	f000 f8ad 	bl	7a18 <__gnu_Unwind_Save_VFP>
    78be:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    78c0:	9b01      	ldr	r3, [sp, #4]
    78c2:	2f00      	cmp	r7, #0
    78c4:	f000 8095 	beq.w	79f2 <_Unwind_VRS_Pop+0x27a>
    78c8:	007f      	lsls	r7, r7, #1
    78ca:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    78ce:	f04f 0800 	mov.w	r8, #0
    78d2:	3c04      	subs	r4, #4
    78d4:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    78d8:	f851 0b04 	ldr.w	r0, [r1], #4
    78dc:	f844 0f04 	str.w	r0, [r4, #4]!
    78e0:	4291      	cmp	r1, r2
    78e2:	d1f9      	bne.n	78d8 <_Unwind_VRS_Pop+0x160>
    78e4:	f1b8 0f00 	cmp.w	r8, #0
    78e8:	d00f      	beq.n	790a <_Unwind_VRS_Pop+0x192>
    78ea:	ac02      	add	r4, sp, #8
    78ec:	2e10      	cmp	r6, #16
    78ee:	4631      	mov	r1, r6
    78f0:	bf38      	it	cc
    78f2:	2110      	movcc	r1, #16
    78f4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    78f8:	3984      	subs	r1, #132	; 0x84
    78fa:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    78fe:	f852 0b04 	ldr.w	r0, [r2], #4
    7902:	f841 0f04 	str.w	r0, [r1, #4]!
    7906:	4294      	cmp	r4, r2
    7908:	d1f9      	bne.n	78fe <_Unwind_VRS_Pop+0x186>
    790a:	2b01      	cmp	r3, #1
    790c:	f47f af7b 	bne.w	7806 <_Unwind_VRS_Pop+0x8e>
    7910:	ac22      	add	r4, sp, #136	; 0x88
    7912:	3204      	adds	r2, #4
    7914:	63aa      	str	r2, [r5, #56]	; 0x38
    7916:	4620      	mov	r0, r4
    7918:	f000 f87a 	bl	7a10 <__gnu_Unwind_Restore_VFP>
    791c:	e77d      	b.n	781a <_Unwind_VRS_Pop+0xa2>
    791e:	f023 0308 	bic.w	r3, r3, #8
    7922:	602b      	str	r3, [r5, #0]
    7924:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    7928:	f000 f8ac 	bl	7a84 <__gnu_Unwind_Save_WMMXD>
    792c:	e799      	b.n	7862 <_Unwind_VRS_Pop+0xea>
    792e:	f1b8 0f10 	cmp.w	r8, #16
    7932:	682a      	ldr	r2, [r5, #0]
    7934:	d943      	bls.n	79be <_Unwind_VRS_Pop+0x246>
    7936:	07d0      	lsls	r0, r2, #31
    7938:	f1a8 0810 	sub.w	r8, r8, #16
    793c:	d50b      	bpl.n	7956 <_Unwind_VRS_Pop+0x1de>
    793e:	4628      	mov	r0, r5
    7940:	f022 0201 	bic.w	r2, r2, #1
    7944:	f042 0202 	orr.w	r2, r2, #2
    7948:	f840 2b48 	str.w	r2, [r0], #72
    794c:	9301      	str	r3, [sp, #4]
    794e:	f000 f86b 	bl	7a28 <__gnu_Unwind_Save_VFP_D>
    7952:	682a      	ldr	r2, [r5, #0]
    7954:	9b01      	ldr	r3, [sp, #4]
    7956:	0751      	lsls	r1, r2, #29
    7958:	d425      	bmi.n	79a6 <_Unwind_VRS_Pop+0x22e>
    795a:	2e0f      	cmp	r6, #15
    795c:	d804      	bhi.n	7968 <_Unwind_VRS_Pop+0x1f0>
    795e:	a822      	add	r0, sp, #136	; 0x88
    7960:	9301      	str	r3, [sp, #4]
    7962:	f000 f861 	bl	7a28 <__gnu_Unwind_Save_VFP_D>
    7966:	9b01      	ldr	r3, [sp, #4]
    7968:	9301      	str	r3, [sp, #4]
    796a:	ac02      	add	r4, sp, #8
    796c:	4620      	mov	r0, r4
    796e:	f000 f863 	bl	7a38 <__gnu_Unwind_Save_VFP_D_16_to_31>
    7972:	f1c6 0110 	rsb	r1, r6, #16
    7976:	2900      	cmp	r1, #0
    7978:	6baa      	ldr	r2, [r5, #56]	; 0x38
    797a:	9b01      	ldr	r3, [sp, #4]
    797c:	ddb6      	ble.n	78ec <_Unwind_VRS_Pop+0x174>
    797e:	ac22      	add	r4, sp, #136	; 0x88
    7980:	004f      	lsls	r7, r1, #1
    7982:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    7986:	4611      	mov	r1, r2
    7988:	e7a3      	b.n	78d2 <_Unwind_VRS_Pop+0x15a>
    798a:	a822      	add	r0, sp, #136	; 0x88
    798c:	f000 f848 	bl	7a20 <__gnu_Unwind_Restore_VFP_D>
    7990:	e73d      	b.n	780e <_Unwind_VRS_Pop+0x96>
    7992:	f023 0310 	bic.w	r3, r3, #16
    7996:	602b      	str	r3, [r5, #0]
    7998:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    799c:	9201      	str	r2, [sp, #4]
    799e:	f000 f89d 	bl	7adc <__gnu_Unwind_Save_WMMXC>
    79a2:	9a01      	ldr	r2, [sp, #4]
    79a4:	e701      	b.n	77aa <_Unwind_VRS_Pop+0x32>
    79a6:	4628      	mov	r0, r5
    79a8:	f022 0204 	bic.w	r2, r2, #4
    79ac:	f840 2bd0 	str.w	r2, [r0], #208
    79b0:	9301      	str	r3, [sp, #4]
    79b2:	f000 f841 	bl	7a38 <__gnu_Unwind_Save_VFP_D_16_to_31>
    79b6:	9b01      	ldr	r3, [sp, #4]
    79b8:	e7cf      	b.n	795a <_Unwind_VRS_Pop+0x1e2>
    79ba:	682a      	ldr	r2, [r5, #0]
    79bc:	e7cb      	b.n	7956 <_Unwind_VRS_Pop+0x1de>
    79be:	07d0      	lsls	r0, r2, #31
    79c0:	d50a      	bpl.n	79d8 <_Unwind_VRS_Pop+0x260>
    79c2:	4628      	mov	r0, r5
    79c4:	f022 0201 	bic.w	r2, r2, #1
    79c8:	f042 0202 	orr.w	r2, r2, #2
    79cc:	f840 2b48 	str.w	r2, [r0], #72
    79d0:	9301      	str	r3, [sp, #4]
    79d2:	f000 f829 	bl	7a28 <__gnu_Unwind_Save_VFP_D>
    79d6:	9b01      	ldr	r3, [sp, #4]
    79d8:	9301      	str	r3, [sp, #4]
    79da:	ac22      	add	r4, sp, #136	; 0x88
    79dc:	4620      	mov	r0, r4
    79de:	f000 f823 	bl	7a28 <__gnu_Unwind_Save_VFP_D>
    79e2:	46b8      	mov	r8, r7
    79e4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    79e6:	9b01      	ldr	r3, [sp, #4]
    79e8:	2f00      	cmp	r7, #0
    79ea:	f47f af6d 	bne.w	78c8 <_Unwind_VRS_Pop+0x150>
    79ee:	460a      	mov	r2, r1
    79f0:	e709      	b.n	7806 <_Unwind_VRS_Pop+0x8e>
    79f2:	460a      	mov	r2, r1
    79f4:	e78d      	b.n	7912 <_Unwind_VRS_Pop+0x19a>
    79f6:	bf00      	nop

000079f8 <__restore_core_regs>:
    79f8:	f100 0134 	add.w	r1, r0, #52	; 0x34
    79fc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    7a00:	469c      	mov	ip, r3
    7a02:	46a6      	mov	lr, r4
    7a04:	f84c 5d04 	str.w	r5, [ip, #-4]!
    7a08:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    7a0c:	46e5      	mov	sp, ip
    7a0e:	bd00      	pop	{pc}

00007a10 <__gnu_Unwind_Restore_VFP>:
    7a10:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    7a14:	4770      	bx	lr
    7a16:	bf00      	nop

00007a18 <__gnu_Unwind_Save_VFP>:
    7a18:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    7a1c:	4770      	bx	lr
    7a1e:	bf00      	nop

00007a20 <__gnu_Unwind_Restore_VFP_D>:
    7a20:	ec90 0b20 	vldmia	r0, {d0-d15}
    7a24:	4770      	bx	lr
    7a26:	bf00      	nop

00007a28 <__gnu_Unwind_Save_VFP_D>:
    7a28:	ec80 0b20 	vstmia	r0, {d0-d15}
    7a2c:	4770      	bx	lr
    7a2e:	bf00      	nop

00007a30 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    7a30:	ecd0 0b20 	vldmia	r0, {d16-d31}
    7a34:	4770      	bx	lr
    7a36:	bf00      	nop

00007a38 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    7a38:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7a3c:	4770      	bx	lr
    7a3e:	bf00      	nop

00007a40 <__gnu_Unwind_Restore_WMMXD>:
    7a40:	ecf0 0102 	ldfe	f0, [r0], #8
    7a44:	ecf0 1102 	ldfe	f1, [r0], #8
    7a48:	ecf0 2102 	ldfe	f2, [r0], #8
    7a4c:	ecf0 3102 	ldfe	f3, [r0], #8
    7a50:	ecf0 4102 	ldfe	f4, [r0], #8
    7a54:	ecf0 5102 	ldfe	f5, [r0], #8
    7a58:	ecf0 6102 	ldfe	f6, [r0], #8
    7a5c:	ecf0 7102 	ldfe	f7, [r0], #8
    7a60:	ecf0 8102 	ldfp	f0, [r0], #8
    7a64:	ecf0 9102 	ldfp	f1, [r0], #8
    7a68:	ecf0 a102 	ldfp	f2, [r0], #8
    7a6c:	ecf0 b102 	ldfp	f3, [r0], #8
    7a70:	ecf0 c102 	ldfp	f4, [r0], #8
    7a74:	ecf0 d102 	ldfp	f5, [r0], #8
    7a78:	ecf0 e102 	ldfp	f6, [r0], #8
    7a7c:	ecf0 f102 	ldfp	f7, [r0], #8
    7a80:	4770      	bx	lr
    7a82:	bf00      	nop

00007a84 <__gnu_Unwind_Save_WMMXD>:
    7a84:	ece0 0102 	stfe	f0, [r0], #8
    7a88:	ece0 1102 	stfe	f1, [r0], #8
    7a8c:	ece0 2102 	stfe	f2, [r0], #8
    7a90:	ece0 3102 	stfe	f3, [r0], #8
    7a94:	ece0 4102 	stfe	f4, [r0], #8
    7a98:	ece0 5102 	stfe	f5, [r0], #8
    7a9c:	ece0 6102 	stfe	f6, [r0], #8
    7aa0:	ece0 7102 	stfe	f7, [r0], #8
    7aa4:	ece0 8102 	stfp	f0, [r0], #8
    7aa8:	ece0 9102 	stfp	f1, [r0], #8
    7aac:	ece0 a102 	stfp	f2, [r0], #8
    7ab0:	ece0 b102 	stfp	f3, [r0], #8
    7ab4:	ece0 c102 	stfp	f4, [r0], #8
    7ab8:	ece0 d102 	stfp	f5, [r0], #8
    7abc:	ece0 e102 	stfp	f6, [r0], #8
    7ac0:	ece0 f102 	stfp	f7, [r0], #8
    7ac4:	4770      	bx	lr
    7ac6:	bf00      	nop

00007ac8 <__gnu_Unwind_Restore_WMMXC>:
    7ac8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7acc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    7ad0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7ad4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    7ad8:	4770      	bx	lr
    7ada:	bf00      	nop

00007adc <__gnu_Unwind_Save_WMMXC>:
    7adc:	fca0 8101 	stc2	1, cr8, [r0], #4
    7ae0:	fca0 9101 	stc2	1, cr9, [r0], #4
    7ae4:	fca0 a101 	stc2	1, cr10, [r0], #4
    7ae8:	fca0 b101 	stc2	1, cr11, [r0], #4
    7aec:	4770      	bx	lr
    7aee:	bf00      	nop

00007af0 <_Unwind_RaiseException>:
    7af0:	46ec      	mov	ip, sp
    7af2:	b500      	push	{lr}
    7af4:	e92d 5000 	stmdb	sp!, {ip, lr}
    7af8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7afc:	f04f 0300 	mov.w	r3, #0
    7b00:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b04:	a901      	add	r1, sp, #4
    7b06:	f7ff fbdd 	bl	72c4 <__gnu_Unwind_RaiseException>
    7b0a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b0e:	b012      	add	sp, #72	; 0x48
    7b10:	4770      	bx	lr
    7b12:	bf00      	nop

00007b14 <_Unwind_Resume>:
    7b14:	46ec      	mov	ip, sp
    7b16:	b500      	push	{lr}
    7b18:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b20:	f04f 0300 	mov.w	r3, #0
    7b24:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b28:	a901      	add	r1, sp, #4
    7b2a:	f7ff fc05 	bl	7338 <__gnu_Unwind_Resume>
    7b2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b32:	b012      	add	sp, #72	; 0x48
    7b34:	4770      	bx	lr
    7b36:	bf00      	nop

00007b38 <_Unwind_Resume_or_Rethrow>:
    7b38:	46ec      	mov	ip, sp
    7b3a:	b500      	push	{lr}
    7b3c:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b44:	f04f 0300 	mov.w	r3, #0
    7b48:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b4c:	a901      	add	r1, sp, #4
    7b4e:	f7ff fc15 	bl	737c <__gnu_Unwind_Resume_or_Rethrow>
    7b52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b56:	b012      	add	sp, #72	; 0x48
    7b58:	4770      	bx	lr
    7b5a:	bf00      	nop

00007b5c <_Unwind_ForcedUnwind>:
    7b5c:	46ec      	mov	ip, sp
    7b5e:	b500      	push	{lr}
    7b60:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b68:	f04f 0300 	mov.w	r3, #0
    7b6c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b70:	ab01      	add	r3, sp, #4
    7b72:	f7ff fbd7 	bl	7324 <__gnu_Unwind_ForcedUnwind>
    7b76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b7a:	b012      	add	sp, #72	; 0x48
    7b7c:	4770      	bx	lr
    7b7e:	bf00      	nop

00007b80 <_Unwind_Backtrace>:
    7b80:	46ec      	mov	ip, sp
    7b82:	b500      	push	{lr}
    7b84:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b8c:	f04f 0300 	mov.w	r3, #0
    7b90:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b94:	aa01      	add	r2, sp, #4
    7b96:	f7ff fc47 	bl	7428 <__gnu_Unwind_Backtrace>
    7b9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b9e:	b012      	add	sp, #72	; 0x48
    7ba0:	4770      	bx	lr
    7ba2:	bf00      	nop

00007ba4 <next_unwind_byte>:
    7ba4:	7a02      	ldrb	r2, [r0, #8]
    7ba6:	b982      	cbnz	r2, 7bca <next_unwind_byte+0x26>
    7ba8:	7a43      	ldrb	r3, [r0, #9]
    7baa:	b1ab      	cbz	r3, 7bd8 <next_unwind_byte+0x34>
    7bac:	6842      	ldr	r2, [r0, #4]
    7bae:	3b01      	subs	r3, #1
    7bb0:	b410      	push	{r4}
    7bb2:	7243      	strb	r3, [r0, #9]
    7bb4:	6813      	ldr	r3, [r2, #0]
    7bb6:	2103      	movs	r1, #3
    7bb8:	1d14      	adds	r4, r2, #4
    7bba:	7201      	strb	r1, [r0, #8]
    7bbc:	021a      	lsls	r2, r3, #8
    7bbe:	6044      	str	r4, [r0, #4]
    7bc0:	6002      	str	r2, [r0, #0]
    7bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    7bc6:	0e18      	lsrs	r0, r3, #24
    7bc8:	4770      	bx	lr
    7bca:	6803      	ldr	r3, [r0, #0]
    7bcc:	3a01      	subs	r2, #1
    7bce:	7202      	strb	r2, [r0, #8]
    7bd0:	021a      	lsls	r2, r3, #8
    7bd2:	6002      	str	r2, [r0, #0]
    7bd4:	0e18      	lsrs	r0, r3, #24
    7bd6:	4770      	bx	lr
    7bd8:	20b0      	movs	r0, #176	; 0xb0
    7bda:	4770      	bx	lr

00007bdc <_Unwind_GetGR.constprop.0>:
    7bdc:	b500      	push	{lr}
    7bde:	b085      	sub	sp, #20
    7be0:	aa03      	add	r2, sp, #12
    7be2:	2300      	movs	r3, #0
    7be4:	9200      	str	r2, [sp, #0]
    7be6:	4619      	mov	r1, r3
    7be8:	220c      	movs	r2, #12
    7bea:	f7ff fbd7 	bl	739c <_Unwind_VRS_Get>
    7bee:	9803      	ldr	r0, [sp, #12]
    7bf0:	b005      	add	sp, #20
    7bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf6:	bf00      	nop

00007bf8 <unwind_UCB_from_context>:
    7bf8:	e7f0      	b.n	7bdc <_Unwind_GetGR.constprop.0>
    7bfa:	bf00      	nop

00007bfc <__gnu_unwind_execute>:
    7bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c00:	4605      	mov	r5, r0
    7c02:	b085      	sub	sp, #20
    7c04:	460e      	mov	r6, r1
    7c06:	f04f 0800 	mov.w	r8, #0
    7c0a:	4630      	mov	r0, r6
    7c0c:	f7ff ffca 	bl	7ba4 <next_unwind_byte>
    7c10:	28b0      	cmp	r0, #176	; 0xb0
    7c12:	4604      	mov	r4, r0
    7c14:	f000 80b1 	beq.w	7d7a <__gnu_unwind_execute+0x17e>
    7c18:	0607      	lsls	r7, r0, #24
    7c1a:	d520      	bpl.n	7c5e <__gnu_unwind_execute+0x62>
    7c1c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7c20:	2b80      	cmp	r3, #128	; 0x80
    7c22:	d065      	beq.n	7cf0 <__gnu_unwind_execute+0xf4>
    7c24:	2b90      	cmp	r3, #144	; 0x90
    7c26:	d036      	beq.n	7c96 <__gnu_unwind_execute+0x9a>
    7c28:	2ba0      	cmp	r3, #160	; 0xa0
    7c2a:	d078      	beq.n	7d1e <__gnu_unwind_execute+0x122>
    7c2c:	2bb0      	cmp	r3, #176	; 0xb0
    7c2e:	d047      	beq.n	7cc0 <__gnu_unwind_execute+0xc4>
    7c30:	2bc0      	cmp	r3, #192	; 0xc0
    7c32:	f000 808a 	beq.w	7d4a <__gnu_unwind_execute+0x14e>
    7c36:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7c3a:	2bd0      	cmp	r3, #208	; 0xd0
    7c3c:	d10b      	bne.n	7c56 <__gnu_unwind_execute+0x5a>
    7c3e:	f000 0207 	and.w	r2, r0, #7
    7c42:	3201      	adds	r2, #1
    7c44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7c48:	2305      	movs	r3, #5
    7c4a:	2101      	movs	r1, #1
    7c4c:	4628      	mov	r0, r5
    7c4e:	f7ff fd93 	bl	7778 <_Unwind_VRS_Pop>
    7c52:	2800      	cmp	r0, #0
    7c54:	d0d9      	beq.n	7c0a <__gnu_unwind_execute+0xe>
    7c56:	2009      	movs	r0, #9
    7c58:	b005      	add	sp, #20
    7c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7c5e:	f10d 090c 	add.w	r9, sp, #12
    7c62:	2300      	movs	r3, #0
    7c64:	4619      	mov	r1, r3
    7c66:	0087      	lsls	r7, r0, #2
    7c68:	f8cd 9000 	str.w	r9, [sp]
    7c6c:	220d      	movs	r2, #13
    7c6e:	4628      	mov	r0, r5
    7c70:	f7ff fb94 	bl	739c <_Unwind_VRS_Get>
    7c74:	b2ff      	uxtb	r7, r7
    7c76:	9b03      	ldr	r3, [sp, #12]
    7c78:	f8cd 9000 	str.w	r9, [sp]
    7c7c:	3704      	adds	r7, #4
    7c7e:	0660      	lsls	r0, r4, #25
    7c80:	bf4c      	ite	mi
    7c82:	1bdf      	submi	r7, r3, r7
    7c84:	18ff      	addpl	r7, r7, r3
    7c86:	2300      	movs	r3, #0
    7c88:	4619      	mov	r1, r3
    7c8a:	220d      	movs	r2, #13
    7c8c:	4628      	mov	r0, r5
    7c8e:	9703      	str	r7, [sp, #12]
    7c90:	f7ff fba6 	bl	73e0 <_Unwind_VRS_Set>
    7c94:	e7b9      	b.n	7c0a <__gnu_unwind_execute+0xe>
    7c96:	f000 030d 	and.w	r3, r0, #13
    7c9a:	2b0d      	cmp	r3, #13
    7c9c:	d0db      	beq.n	7c56 <__gnu_unwind_execute+0x5a>
    7c9e:	af03      	add	r7, sp, #12
    7ca0:	2300      	movs	r3, #0
    7ca2:	f000 020f 	and.w	r2, r0, #15
    7ca6:	4619      	mov	r1, r3
    7ca8:	9700      	str	r7, [sp, #0]
    7caa:	4628      	mov	r0, r5
    7cac:	f7ff fb76 	bl	739c <_Unwind_VRS_Get>
    7cb0:	2300      	movs	r3, #0
    7cb2:	9700      	str	r7, [sp, #0]
    7cb4:	4619      	mov	r1, r3
    7cb6:	220d      	movs	r2, #13
    7cb8:	4628      	mov	r0, r5
    7cba:	f7ff fb91 	bl	73e0 <_Unwind_VRS_Set>
    7cbe:	e7a4      	b.n	7c0a <__gnu_unwind_execute+0xe>
    7cc0:	28b1      	cmp	r0, #177	; 0xb1
    7cc2:	d05f      	beq.n	7d84 <__gnu_unwind_execute+0x188>
    7cc4:	28b2      	cmp	r0, #178	; 0xb2
    7cc6:	f000 80cc 	beq.w	7e62 <__gnu_unwind_execute+0x266>
    7cca:	28b3      	cmp	r0, #179	; 0xb3
    7ccc:	d07e      	beq.n	7dcc <__gnu_unwind_execute+0x1d0>
    7cce:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7cd2:	2bb4      	cmp	r3, #180	; 0xb4
    7cd4:	d0bf      	beq.n	7c56 <__gnu_unwind_execute+0x5a>
    7cd6:	f000 0207 	and.w	r2, r0, #7
    7cda:	3201      	adds	r2, #1
    7cdc:	2301      	movs	r3, #1
    7cde:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7ce2:	4619      	mov	r1, r3
    7ce4:	4628      	mov	r0, r5
    7ce6:	f7ff fd47 	bl	7778 <_Unwind_VRS_Pop>
    7cea:	2800      	cmp	r0, #0
    7cec:	d08d      	beq.n	7c0a <__gnu_unwind_execute+0xe>
    7cee:	e7b2      	b.n	7c56 <__gnu_unwind_execute+0x5a>
    7cf0:	4630      	mov	r0, r6
    7cf2:	f7ff ff57 	bl	7ba4 <next_unwind_byte>
    7cf6:	0224      	lsls	r4, r4, #8
    7cf8:	4304      	orrs	r4, r0
    7cfa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    7cfe:	d0aa      	beq.n	7c56 <__gnu_unwind_execute+0x5a>
    7d00:	0124      	lsls	r4, r4, #4
    7d02:	2300      	movs	r3, #0
    7d04:	b2a2      	uxth	r2, r4
    7d06:	4619      	mov	r1, r3
    7d08:	4628      	mov	r0, r5
    7d0a:	f7ff fd35 	bl	7778 <_Unwind_VRS_Pop>
    7d0e:	2800      	cmp	r0, #0
    7d10:	d1a1      	bne.n	7c56 <__gnu_unwind_execute+0x5a>
    7d12:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    7d16:	bf18      	it	ne
    7d18:	f04f 0801 	movne.w	r8, #1
    7d1c:	e775      	b.n	7c0a <__gnu_unwind_execute+0xe>
    7d1e:	43c2      	mvns	r2, r0
    7d20:	f002 0307 	and.w	r3, r2, #7
    7d24:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    7d28:	411a      	asrs	r2, r3
    7d2a:	0701      	lsls	r1, r0, #28
    7d2c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7d30:	f04f 0300 	mov.w	r3, #0
    7d34:	bf48      	it	mi
    7d36:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    7d3a:	4619      	mov	r1, r3
    7d3c:	4628      	mov	r0, r5
    7d3e:	f7ff fd1b 	bl	7778 <_Unwind_VRS_Pop>
    7d42:	2800      	cmp	r0, #0
    7d44:	f43f af61 	beq.w	7c0a <__gnu_unwind_execute+0xe>
    7d48:	e785      	b.n	7c56 <__gnu_unwind_execute+0x5a>
    7d4a:	28c6      	cmp	r0, #198	; 0xc6
    7d4c:	d051      	beq.n	7df2 <__gnu_unwind_execute+0x1f6>
    7d4e:	28c7      	cmp	r0, #199	; 0xc7
    7d50:	d05a      	beq.n	7e08 <__gnu_unwind_execute+0x20c>
    7d52:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7d56:	2bc0      	cmp	r3, #192	; 0xc0
    7d58:	d069      	beq.n	7e2e <__gnu_unwind_execute+0x232>
    7d5a:	28c8      	cmp	r0, #200	; 0xc8
    7d5c:	d075      	beq.n	7e4a <__gnu_unwind_execute+0x24e>
    7d5e:	28c9      	cmp	r0, #201	; 0xc9
    7d60:	f47f af79 	bne.w	7c56 <__gnu_unwind_execute+0x5a>
    7d64:	4630      	mov	r0, r6
    7d66:	f7ff ff1d 	bl	7ba4 <next_unwind_byte>
    7d6a:	0302      	lsls	r2, r0, #12
    7d6c:	f000 000f 	and.w	r0, r0, #15
    7d70:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    7d74:	3001      	adds	r0, #1
    7d76:	4302      	orrs	r2, r0
    7d78:	e766      	b.n	7c48 <__gnu_unwind_execute+0x4c>
    7d7a:	f1b8 0f00 	cmp.w	r8, #0
    7d7e:	d014      	beq.n	7daa <__gnu_unwind_execute+0x1ae>
    7d80:	2000      	movs	r0, #0
    7d82:	e769      	b.n	7c58 <__gnu_unwind_execute+0x5c>
    7d84:	4630      	mov	r0, r6
    7d86:	f7ff ff0d 	bl	7ba4 <next_unwind_byte>
    7d8a:	2800      	cmp	r0, #0
    7d8c:	f43f af63 	beq.w	7c56 <__gnu_unwind_execute+0x5a>
    7d90:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7d94:	f47f af5f 	bne.w	7c56 <__gnu_unwind_execute+0x5a>
    7d98:	4602      	mov	r2, r0
    7d9a:	4619      	mov	r1, r3
    7d9c:	4628      	mov	r0, r5
    7d9e:	f7ff fceb 	bl	7778 <_Unwind_VRS_Pop>
    7da2:	2800      	cmp	r0, #0
    7da4:	f43f af31 	beq.w	7c0a <__gnu_unwind_execute+0xe>
    7da8:	e755      	b.n	7c56 <__gnu_unwind_execute+0x5a>
    7daa:	ac03      	add	r4, sp, #12
    7dac:	4643      	mov	r3, r8
    7dae:	220e      	movs	r2, #14
    7db0:	4641      	mov	r1, r8
    7db2:	9400      	str	r4, [sp, #0]
    7db4:	4628      	mov	r0, r5
    7db6:	f7ff faf1 	bl	739c <_Unwind_VRS_Get>
    7dba:	9400      	str	r4, [sp, #0]
    7dbc:	4628      	mov	r0, r5
    7dbe:	4643      	mov	r3, r8
    7dc0:	220f      	movs	r2, #15
    7dc2:	4641      	mov	r1, r8
    7dc4:	f7ff fb0c 	bl	73e0 <_Unwind_VRS_Set>
    7dc8:	4640      	mov	r0, r8
    7dca:	e745      	b.n	7c58 <__gnu_unwind_execute+0x5c>
    7dcc:	4630      	mov	r0, r6
    7dce:	f7ff fee9 	bl	7ba4 <next_unwind_byte>
    7dd2:	0301      	lsls	r1, r0, #12
    7dd4:	f000 000f 	and.w	r0, r0, #15
    7dd8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7ddc:	1c42      	adds	r2, r0, #1
    7dde:	2301      	movs	r3, #1
    7de0:	430a      	orrs	r2, r1
    7de2:	4628      	mov	r0, r5
    7de4:	4619      	mov	r1, r3
    7de6:	f7ff fcc7 	bl	7778 <_Unwind_VRS_Pop>
    7dea:	2800      	cmp	r0, #0
    7dec:	f43f af0d 	beq.w	7c0a <__gnu_unwind_execute+0xe>
    7df0:	e731      	b.n	7c56 <__gnu_unwind_execute+0x5a>
    7df2:	4630      	mov	r0, r6
    7df4:	f7ff fed6 	bl	7ba4 <next_unwind_byte>
    7df8:	0301      	lsls	r1, r0, #12
    7dfa:	f000 000f 	and.w	r0, r0, #15
    7dfe:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7e02:	1c42      	adds	r2, r0, #1
    7e04:	2303      	movs	r3, #3
    7e06:	e7eb      	b.n	7de0 <__gnu_unwind_execute+0x1e4>
    7e08:	4630      	mov	r0, r6
    7e0a:	f7ff fecb 	bl	7ba4 <next_unwind_byte>
    7e0e:	4602      	mov	r2, r0
    7e10:	2800      	cmp	r0, #0
    7e12:	f43f af20 	beq.w	7c56 <__gnu_unwind_execute+0x5a>
    7e16:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7e1a:	f47f af1c 	bne.w	7c56 <__gnu_unwind_execute+0x5a>
    7e1e:	2104      	movs	r1, #4
    7e20:	4628      	mov	r0, r5
    7e22:	f7ff fca9 	bl	7778 <_Unwind_VRS_Pop>
    7e26:	2800      	cmp	r0, #0
    7e28:	f43f aeef 	beq.w	7c0a <__gnu_unwind_execute+0xe>
    7e2c:	e713      	b.n	7c56 <__gnu_unwind_execute+0x5a>
    7e2e:	f000 020f 	and.w	r2, r0, #15
    7e32:	3201      	adds	r2, #1
    7e34:	2303      	movs	r3, #3
    7e36:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    7e3a:	4619      	mov	r1, r3
    7e3c:	4628      	mov	r0, r5
    7e3e:	f7ff fc9b 	bl	7778 <_Unwind_VRS_Pop>
    7e42:	2800      	cmp	r0, #0
    7e44:	f43f aee1 	beq.w	7c0a <__gnu_unwind_execute+0xe>
    7e48:	e705      	b.n	7c56 <__gnu_unwind_execute+0x5a>
    7e4a:	4630      	mov	r0, r6
    7e4c:	f7ff feaa 	bl	7ba4 <next_unwind_byte>
    7e50:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    7e54:	f000 030f 	and.w	r3, r0, #15
    7e58:	3210      	adds	r2, #16
    7e5a:	3301      	adds	r3, #1
    7e5c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    7e60:	e6f2      	b.n	7c48 <__gnu_unwind_execute+0x4c>
    7e62:	2300      	movs	r3, #0
    7e64:	f10d 090c 	add.w	r9, sp, #12
    7e68:	220d      	movs	r2, #13
    7e6a:	4619      	mov	r1, r3
    7e6c:	f8cd 9000 	str.w	r9, [sp]
    7e70:	4628      	mov	r0, r5
    7e72:	f7ff fa93 	bl	739c <_Unwind_VRS_Get>
    7e76:	4630      	mov	r0, r6
    7e78:	f7ff fe94 	bl	7ba4 <next_unwind_byte>
    7e7c:	0602      	lsls	r2, r0, #24
    7e7e:	f04f 0702 	mov.w	r7, #2
    7e82:	d50c      	bpl.n	7e9e <__gnu_unwind_execute+0x2a2>
    7e84:	9b03      	ldr	r3, [sp, #12]
    7e86:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7e8a:	40b8      	lsls	r0, r7
    7e8c:	4403      	add	r3, r0
    7e8e:	4630      	mov	r0, r6
    7e90:	9303      	str	r3, [sp, #12]
    7e92:	f7ff fe87 	bl	7ba4 <next_unwind_byte>
    7e96:	0603      	lsls	r3, r0, #24
    7e98:	f107 0707 	add.w	r7, r7, #7
    7e9c:	d4f2      	bmi.n	7e84 <__gnu_unwind_execute+0x288>
    7e9e:	9b03      	ldr	r3, [sp, #12]
    7ea0:	f8cd 9000 	str.w	r9, [sp]
    7ea4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    7ea8:	f503 7201 	add.w	r2, r3, #516	; 0x204
    7eac:	40bc      	lsls	r4, r7
    7eae:	2300      	movs	r3, #0
    7eb0:	4414      	add	r4, r2
    7eb2:	4619      	mov	r1, r3
    7eb4:	220d      	movs	r2, #13
    7eb6:	4628      	mov	r0, r5
    7eb8:	9403      	str	r4, [sp, #12]
    7eba:	f7ff fa91 	bl	73e0 <_Unwind_VRS_Set>
    7ebe:	e6a4      	b.n	7c0a <__gnu_unwind_execute+0xe>

00007ec0 <__gnu_unwind_frame>:
    7ec0:	b510      	push	{r4, lr}
    7ec2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    7ec4:	b084      	sub	sp, #16
    7ec6:	685a      	ldr	r2, [r3, #4]
    7ec8:	2003      	movs	r0, #3
    7eca:	f88d 000c 	strb.w	r0, [sp, #12]
    7ece:	79dc      	ldrb	r4, [r3, #7]
    7ed0:	f88d 400d 	strb.w	r4, [sp, #13]
    7ed4:	0212      	lsls	r2, r2, #8
    7ed6:	3308      	adds	r3, #8
    7ed8:	4608      	mov	r0, r1
    7eda:	a901      	add	r1, sp, #4
    7edc:	9201      	str	r2, [sp, #4]
    7ede:	9302      	str	r3, [sp, #8]
    7ee0:	f7ff fe8c 	bl	7bfc <__gnu_unwind_execute>
    7ee4:	b004      	add	sp, #16
    7ee6:	bd10      	pop	{r4, pc}

00007ee8 <_Unwind_GetRegionStart>:
    7ee8:	b508      	push	{r3, lr}
    7eea:	f7ff fe85 	bl	7bf8 <unwind_UCB_from_context>
    7eee:	6c80      	ldr	r0, [r0, #72]	; 0x48
    7ef0:	bd08      	pop	{r3, pc}
    7ef2:	bf00      	nop

00007ef4 <_Unwind_GetLanguageSpecificData>:
    7ef4:	b508      	push	{r3, lr}
    7ef6:	f7ff fe7f 	bl	7bf8 <unwind_UCB_from_context>
    7efa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    7efc:	79c3      	ldrb	r3, [r0, #7]
    7efe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7f02:	3008      	adds	r0, #8
    7f04:	bd08      	pop	{r3, pc}
    7f06:	bf00      	nop

00007f08 <_Unwind_GetDataRelBase>:
    7f08:	b508      	push	{r3, lr}
    7f0a:	f000 f807 	bl	7f1c <abort>
    7f0e:	bf00      	nop

00007f10 <_Unwind_GetTextRelBase>:
    7f10:	b508      	push	{r3, lr}
    7f12:	f7ff fff9 	bl	7f08 <_Unwind_GetDataRelBase>
    7f16:	bf00      	nop

00007f18 <__aeabi_idiv0>:
    7f18:	4770      	bx	lr
    7f1a:	bf00      	nop

00007f1c <abort>:
    7f1c:	b508      	push	{r3, lr}
    7f1e:	2006      	movs	r0, #6
    7f20:	f000 f92c 	bl	817c <raise>
    7f24:	2001      	movs	r0, #1
    7f26:	f7fb ff5f 	bl	3de8 <_exit>
    7f2a:	Address 0x0000000000007f2a is out of bounds.


00007f2c <__libc_init_array>:
    7f2c:	b570      	push	{r4, r5, r6, lr}
    7f2e:	4e0d      	ldr	r6, [pc, #52]	; (7f64 <__libc_init_array+0x38>)
    7f30:	4c0d      	ldr	r4, [pc, #52]	; (7f68 <__libc_init_array+0x3c>)
    7f32:	1ba4      	subs	r4, r4, r6
    7f34:	10a4      	asrs	r4, r4, #2
    7f36:	2500      	movs	r5, #0
    7f38:	42a5      	cmp	r5, r4
    7f3a:	d109      	bne.n	7f50 <__libc_init_array+0x24>
    7f3c:	4e0b      	ldr	r6, [pc, #44]	; (7f6c <__libc_init_array+0x40>)
    7f3e:	4c0c      	ldr	r4, [pc, #48]	; (7f70 <__libc_init_array+0x44>)
    7f40:	f7f8 f9de 	bl	300 <_init>
    7f44:	1ba4      	subs	r4, r4, r6
    7f46:	10a4      	asrs	r4, r4, #2
    7f48:	2500      	movs	r5, #0
    7f4a:	42a5      	cmp	r5, r4
    7f4c:	d105      	bne.n	7f5a <__libc_init_array+0x2e>
    7f4e:	bd70      	pop	{r4, r5, r6, pc}
    7f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7f54:	4798      	blx	r3
    7f56:	3501      	adds	r5, #1
    7f58:	e7ee      	b.n	7f38 <__libc_init_array+0xc>
    7f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7f5e:	4798      	blx	r3
    7f60:	3501      	adds	r5, #1
    7f62:	e7f2      	b.n	7f4a <__libc_init_array+0x1e>
    7f64:	0000030c 	.word	0x0000030c
    7f68:	0000030c 	.word	0x0000030c
    7f6c:	0000030c 	.word	0x0000030c
    7f70:	0000031c 	.word	0x0000031c

00007f74 <malloc>:
    7f74:	4b02      	ldr	r3, [pc, #8]	; (7f80 <malloc+0xc>)
    7f76:	4601      	mov	r1, r0
    7f78:	6818      	ldr	r0, [r3, #0]
    7f7a:	f000 b86d 	b.w	8058 <_malloc_r>
    7f7e:	bf00      	nop
    7f80:	100000e8 	.word	0x100000e8

00007f84 <free>:
    7f84:	4b02      	ldr	r3, [pc, #8]	; (7f90 <free+0xc>)
    7f86:	4601      	mov	r1, r0
    7f88:	6818      	ldr	r0, [r3, #0]
    7f8a:	f000 b817 	b.w	7fbc <_free_r>
    7f8e:	bf00      	nop
    7f90:	100000e8 	.word	0x100000e8

00007f94 <memcpy>:
    7f94:	b510      	push	{r4, lr}
    7f96:	1e43      	subs	r3, r0, #1
    7f98:	440a      	add	r2, r1
    7f9a:	4291      	cmp	r1, r2
    7f9c:	d100      	bne.n	7fa0 <memcpy+0xc>
    7f9e:	bd10      	pop	{r4, pc}
    7fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
    7fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
    7fa8:	e7f7      	b.n	7f9a <memcpy+0x6>

00007faa <memset>:
    7faa:	4402      	add	r2, r0
    7fac:	4603      	mov	r3, r0
    7fae:	4293      	cmp	r3, r2
    7fb0:	d100      	bne.n	7fb4 <memset+0xa>
    7fb2:	4770      	bx	lr
    7fb4:	f803 1b01 	strb.w	r1, [r3], #1
    7fb8:	e7f9      	b.n	7fae <memset+0x4>
    7fba:	Address 0x0000000000007fba is out of bounds.


00007fbc <_free_r>:
    7fbc:	b538      	push	{r3, r4, r5, lr}
    7fbe:	4605      	mov	r5, r0
    7fc0:	2900      	cmp	r1, #0
    7fc2:	d045      	beq.n	8050 <_free_r+0x94>
    7fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7fc8:	1f0c      	subs	r4, r1, #4
    7fca:	2b00      	cmp	r3, #0
    7fcc:	bfb8      	it	lt
    7fce:	18e4      	addlt	r4, r4, r3
    7fd0:	f000 f8f8 	bl	81c4 <__malloc_lock>
    7fd4:	4a1f      	ldr	r2, [pc, #124]	; (8054 <_free_r+0x98>)
    7fd6:	6813      	ldr	r3, [r2, #0]
    7fd8:	4610      	mov	r0, r2
    7fda:	b933      	cbnz	r3, 7fea <_free_r+0x2e>
    7fdc:	6063      	str	r3, [r4, #4]
    7fde:	6014      	str	r4, [r2, #0]
    7fe0:	4628      	mov	r0, r5
    7fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7fe6:	f000 b8ee 	b.w	81c6 <__malloc_unlock>
    7fea:	42a3      	cmp	r3, r4
    7fec:	d90c      	bls.n	8008 <_free_r+0x4c>
    7fee:	6821      	ldr	r1, [r4, #0]
    7ff0:	1862      	adds	r2, r4, r1
    7ff2:	4293      	cmp	r3, r2
    7ff4:	bf04      	itt	eq
    7ff6:	681a      	ldreq	r2, [r3, #0]
    7ff8:	685b      	ldreq	r3, [r3, #4]
    7ffa:	6063      	str	r3, [r4, #4]
    7ffc:	bf04      	itt	eq
    7ffe:	1852      	addeq	r2, r2, r1
    8000:	6022      	streq	r2, [r4, #0]
    8002:	6004      	str	r4, [r0, #0]
    8004:	e7ec      	b.n	7fe0 <_free_r+0x24>
    8006:	4613      	mov	r3, r2
    8008:	685a      	ldr	r2, [r3, #4]
    800a:	b10a      	cbz	r2, 8010 <_free_r+0x54>
    800c:	42a2      	cmp	r2, r4
    800e:	d9fa      	bls.n	8006 <_free_r+0x4a>
    8010:	6819      	ldr	r1, [r3, #0]
    8012:	1858      	adds	r0, r3, r1
    8014:	42a0      	cmp	r0, r4
    8016:	d10b      	bne.n	8030 <_free_r+0x74>
    8018:	6820      	ldr	r0, [r4, #0]
    801a:	4401      	add	r1, r0
    801c:	1858      	adds	r0, r3, r1
    801e:	4282      	cmp	r2, r0
    8020:	6019      	str	r1, [r3, #0]
    8022:	d1dd      	bne.n	7fe0 <_free_r+0x24>
    8024:	6810      	ldr	r0, [r2, #0]
    8026:	6852      	ldr	r2, [r2, #4]
    8028:	605a      	str	r2, [r3, #4]
    802a:	4401      	add	r1, r0
    802c:	6019      	str	r1, [r3, #0]
    802e:	e7d7      	b.n	7fe0 <_free_r+0x24>
    8030:	d902      	bls.n	8038 <_free_r+0x7c>
    8032:	230c      	movs	r3, #12
    8034:	602b      	str	r3, [r5, #0]
    8036:	e7d3      	b.n	7fe0 <_free_r+0x24>
    8038:	6820      	ldr	r0, [r4, #0]
    803a:	1821      	adds	r1, r4, r0
    803c:	428a      	cmp	r2, r1
    803e:	bf04      	itt	eq
    8040:	6811      	ldreq	r1, [r2, #0]
    8042:	6852      	ldreq	r2, [r2, #4]
    8044:	6062      	str	r2, [r4, #4]
    8046:	bf04      	itt	eq
    8048:	1809      	addeq	r1, r1, r0
    804a:	6021      	streq	r1, [r4, #0]
    804c:	605c      	str	r4, [r3, #4]
    804e:	e7c7      	b.n	7fe0 <_free_r+0x24>
    8050:	bd38      	pop	{r3, r4, r5, pc}
    8052:	bf00      	nop
    8054:	10000f5c 	.word	0x10000f5c

00008058 <_malloc_r>:
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	1ccd      	adds	r5, r1, #3
    805c:	f025 0503 	bic.w	r5, r5, #3
    8060:	3508      	adds	r5, #8
    8062:	2d0c      	cmp	r5, #12
    8064:	bf38      	it	cc
    8066:	250c      	movcc	r5, #12
    8068:	2d00      	cmp	r5, #0
    806a:	4606      	mov	r6, r0
    806c:	db01      	blt.n	8072 <_malloc_r+0x1a>
    806e:	42a9      	cmp	r1, r5
    8070:	d903      	bls.n	807a <_malloc_r+0x22>
    8072:	230c      	movs	r3, #12
    8074:	6033      	str	r3, [r6, #0]
    8076:	2000      	movs	r0, #0
    8078:	bd70      	pop	{r4, r5, r6, pc}
    807a:	f000 f8a3 	bl	81c4 <__malloc_lock>
    807e:	4a21      	ldr	r2, [pc, #132]	; (8104 <_malloc_r+0xac>)
    8080:	6814      	ldr	r4, [r2, #0]
    8082:	4621      	mov	r1, r4
    8084:	b991      	cbnz	r1, 80ac <_malloc_r+0x54>
    8086:	4c20      	ldr	r4, [pc, #128]	; (8108 <_malloc_r+0xb0>)
    8088:	6823      	ldr	r3, [r4, #0]
    808a:	b91b      	cbnz	r3, 8094 <_malloc_r+0x3c>
    808c:	4630      	mov	r0, r6
    808e:	f000 f83d 	bl	810c <_sbrk_r>
    8092:	6020      	str	r0, [r4, #0]
    8094:	4629      	mov	r1, r5
    8096:	4630      	mov	r0, r6
    8098:	f000 f838 	bl	810c <_sbrk_r>
    809c:	1c43      	adds	r3, r0, #1
    809e:	d124      	bne.n	80ea <_malloc_r+0x92>
    80a0:	230c      	movs	r3, #12
    80a2:	6033      	str	r3, [r6, #0]
    80a4:	4630      	mov	r0, r6
    80a6:	f000 f88e 	bl	81c6 <__malloc_unlock>
    80aa:	e7e4      	b.n	8076 <_malloc_r+0x1e>
    80ac:	680b      	ldr	r3, [r1, #0]
    80ae:	1b5b      	subs	r3, r3, r5
    80b0:	d418      	bmi.n	80e4 <_malloc_r+0x8c>
    80b2:	2b0b      	cmp	r3, #11
    80b4:	d90f      	bls.n	80d6 <_malloc_r+0x7e>
    80b6:	600b      	str	r3, [r1, #0]
    80b8:	50cd      	str	r5, [r1, r3]
    80ba:	18cc      	adds	r4, r1, r3
    80bc:	4630      	mov	r0, r6
    80be:	f000 f882 	bl	81c6 <__malloc_unlock>
    80c2:	f104 000b 	add.w	r0, r4, #11
    80c6:	1d23      	adds	r3, r4, #4
    80c8:	f020 0007 	bic.w	r0, r0, #7
    80cc:	1ac3      	subs	r3, r0, r3
    80ce:	d0d3      	beq.n	8078 <_malloc_r+0x20>
    80d0:	425a      	negs	r2, r3
    80d2:	50e2      	str	r2, [r4, r3]
    80d4:	e7d0      	b.n	8078 <_malloc_r+0x20>
    80d6:	428c      	cmp	r4, r1
    80d8:	684b      	ldr	r3, [r1, #4]
    80da:	bf16      	itet	ne
    80dc:	6063      	strne	r3, [r4, #4]
    80de:	6013      	streq	r3, [r2, #0]
    80e0:	460c      	movne	r4, r1
    80e2:	e7eb      	b.n	80bc <_malloc_r+0x64>
    80e4:	460c      	mov	r4, r1
    80e6:	6849      	ldr	r1, [r1, #4]
    80e8:	e7cc      	b.n	8084 <_malloc_r+0x2c>
    80ea:	1cc4      	adds	r4, r0, #3
    80ec:	f024 0403 	bic.w	r4, r4, #3
    80f0:	42a0      	cmp	r0, r4
    80f2:	d005      	beq.n	8100 <_malloc_r+0xa8>
    80f4:	1a21      	subs	r1, r4, r0
    80f6:	4630      	mov	r0, r6
    80f8:	f000 f808 	bl	810c <_sbrk_r>
    80fc:	3001      	adds	r0, #1
    80fe:	d0cf      	beq.n	80a0 <_malloc_r+0x48>
    8100:	6025      	str	r5, [r4, #0]
    8102:	e7db      	b.n	80bc <_malloc_r+0x64>
    8104:	10000f5c 	.word	0x10000f5c
    8108:	10000f60 	.word	0x10000f60

0000810c <_sbrk_r>:
    810c:	b538      	push	{r3, r4, r5, lr}
    810e:	4c06      	ldr	r4, [pc, #24]	; (8128 <_sbrk_r+0x1c>)
    8110:	2300      	movs	r3, #0
    8112:	4605      	mov	r5, r0
    8114:	4608      	mov	r0, r1
    8116:	6023      	str	r3, [r4, #0]
    8118:	f7fb fe82 	bl	3e20 <_sbrk>
    811c:	1c43      	adds	r3, r0, #1
    811e:	d102      	bne.n	8126 <_sbrk_r+0x1a>
    8120:	6823      	ldr	r3, [r4, #0]
    8122:	b103      	cbz	r3, 8126 <_sbrk_r+0x1a>
    8124:	602b      	str	r3, [r5, #0]
    8126:	bd38      	pop	{r3, r4, r5, pc}
    8128:	10000fb4 	.word	0x10000fb4

0000812c <_raise_r>:
    812c:	291f      	cmp	r1, #31
    812e:	b538      	push	{r3, r4, r5, lr}
    8130:	4604      	mov	r4, r0
    8132:	460d      	mov	r5, r1
    8134:	d904      	bls.n	8140 <_raise_r+0x14>
    8136:	2316      	movs	r3, #22
    8138:	6003      	str	r3, [r0, #0]
    813a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    813e:	bd38      	pop	{r3, r4, r5, pc}
    8140:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8142:	b112      	cbz	r2, 814a <_raise_r+0x1e>
    8144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8148:	b94b      	cbnz	r3, 815e <_raise_r+0x32>
    814a:	4620      	mov	r0, r4
    814c:	f000 f830 	bl	81b0 <_getpid_r>
    8150:	462a      	mov	r2, r5
    8152:	4601      	mov	r1, r0
    8154:	4620      	mov	r0, r4
    8156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    815a:	f000 b817 	b.w	818c <_kill_r>
    815e:	2b01      	cmp	r3, #1
    8160:	d00a      	beq.n	8178 <_raise_r+0x4c>
    8162:	1c59      	adds	r1, r3, #1
    8164:	d103      	bne.n	816e <_raise_r+0x42>
    8166:	2316      	movs	r3, #22
    8168:	6003      	str	r3, [r0, #0]
    816a:	2001      	movs	r0, #1
    816c:	e7e7      	b.n	813e <_raise_r+0x12>
    816e:	2400      	movs	r4, #0
    8170:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    8174:	4628      	mov	r0, r5
    8176:	4798      	blx	r3
    8178:	2000      	movs	r0, #0
    817a:	e7e0      	b.n	813e <_raise_r+0x12>

0000817c <raise>:
    817c:	4b02      	ldr	r3, [pc, #8]	; (8188 <raise+0xc>)
    817e:	4601      	mov	r1, r0
    8180:	6818      	ldr	r0, [r3, #0]
    8182:	f7ff bfd3 	b.w	812c <_raise_r>
    8186:	bf00      	nop
    8188:	100000e8 	.word	0x100000e8

0000818c <_kill_r>:
    818c:	b538      	push	{r3, r4, r5, lr}
    818e:	4c07      	ldr	r4, [pc, #28]	; (81ac <_kill_r+0x20>)
    8190:	2300      	movs	r3, #0
    8192:	4605      	mov	r5, r0
    8194:	4608      	mov	r0, r1
    8196:	4611      	mov	r1, r2
    8198:	6023      	str	r3, [r4, #0]
    819a:	f7fb fe33 	bl	3e04 <_kill>
    819e:	1c43      	adds	r3, r0, #1
    81a0:	d102      	bne.n	81a8 <_kill_r+0x1c>
    81a2:	6823      	ldr	r3, [r4, #0]
    81a4:	b103      	cbz	r3, 81a8 <_kill_r+0x1c>
    81a6:	602b      	str	r3, [r5, #0]
    81a8:	bd38      	pop	{r3, r4, r5, pc}
    81aa:	bf00      	nop
    81ac:	10000fb4 	.word	0x10000fb4

000081b0 <_getpid_r>:
    81b0:	f7fb be20 	b.w	3df4 <_getpid>

000081b4 <strlen>:
    81b4:	4603      	mov	r3, r0
    81b6:	f813 2b01 	ldrb.w	r2, [r3], #1
    81ba:	2a00      	cmp	r2, #0
    81bc:	d1fb      	bne.n	81b6 <strlen+0x2>
    81be:	1a18      	subs	r0, r3, r0
    81c0:	3801      	subs	r0, #1
    81c2:	4770      	bx	lr

000081c4 <__malloc_lock>:
    81c4:	4770      	bx	lr

000081c6 <__malloc_unlock>:
    81c6:	4770      	bx	lr

000081c8 <sjsu::lpc40xx::Pin::kFunction>:
    81c8:	0300 ffff                                   ....

000081cc <sjsu::lpc40xx::Pin::kResistor>:
    81cc:	0203 ffff                                   ....

000081d0 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    81d0:	0107 ffff                                   ....

000081d4 <sjsu::lpc40xx::Pin::kOpenDrain>:
    81d4:	010a ffff 6e69 6176 696c 0064 7061 6c70     ....invalid.appl
    81e4:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    81f4:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    8204:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    8214:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    8224:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    8234:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    8244:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8254:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8264:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    8274:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    8284:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8294:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    82a4:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    82b4:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    82c4:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    82d4:	2067 6163 6c6c 6465 002e 0000 5b1b 3134     g called.....[41
    82e4:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    82f4:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    8304:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    8314:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    8324:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    8334:	6574 3a64 2820 6570 6972 6870 7265 6c61     ted: (peripheral
    8344:	645f 7669 6469 7265 3c20 203d 2934 200a     _divider <= 4). 
    8354:	2020 2020 2020 2020 4420 7669 6469 7265              Divider
    8364:	6d20 7375 6e74 7427 6520 6378 6565 2064      mustn't exceed 
    8374:	3233 5b1b 6d30 5b1b 6d30 000a 500a 6972     32.[0m.[0m...Pri
    8384:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
    8394:	3a65 000a 5b1b 3134 436d 4952 4954 4143     e:...[41mCRITICA
    83a4:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
    83b4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    83c4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    83d4:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    83e4:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    83f4:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    8404:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    8414:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    8424:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    8434:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    8444:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    8454:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    8464:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    8474:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    8484:	6d30 000a 5b1b 3134 436d 4952 4954 4143     0m...[41mCRITICA
    8494:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
    84a4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    84b4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    84c4:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    84d4:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    84e4:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    84f4:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    8504:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    8514:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    8524:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
    8534:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    8544:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    8554:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    8564:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    8574:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    8584:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
    8594:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
    85a4:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
    85b4:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
    85c4:	305b 0a6d 0000 0000 5b1b 3334 206d 4157     [0m......[43m WA
    85d4:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    85e4:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    85f4:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    8604:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    8614:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    8624:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    8634:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    8644:	305b 0a6d 0000 0000 5b1b 3134 436d 4952     [0m......[41mCRI
    8654:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    8664:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8674:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8684:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8694:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    86a4:	2820 2031 3d3c 6320 6168 6e6e 6c65 2e5f      (1 <= channel_.
    86b4:	6863 6e61 656e 206c 2626 6320 6168 6e6e     channel && chann
    86c4:	6c65 2e5f 6863 6e61 656e 206c 3d3c 3620     el_.channel <= 6
    86d4:	0a29 2020 2020 2020 2020 2020 6843 6e61     ).          Chan
    86e4:	656e 206c 756d 7473 6220 2065 6562 7774     nel must be betw
    86f4:	6565 206e 2031 6e61 2064 2036 6e6f 4c20     een 1 and 6 on L
    8704:	4350 3034 7878 7020 616c 6674 726f 736d     PC40xx platforms
    8714:	1b2e 305b 1b6d 305b 0a6d 0000 5b1b 3134     ..[0m.[0m....[41
    8724:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    8734:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    8744:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    8754:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    8764:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    8774:	6574 3a64 2820 2e30 6630 3c20 203d 7564     ted: (0.0f <= du
    8784:	7974 635f 6379 656c 2620 2026 7564 7974     ty_cycle && duty
    8794:	635f 6379 656c 3c20 203d 2e31 6630 0a29     _cycle <= 1.0f).
    87a4:	2020 2020 2020 2020 2020 7564 7974 635f               duty_c
    87b4:	6379 656c 6f20 2066 7544 7974 4320 6379     ycle of Duty Cyc
    87c4:	656c 7020 6f72 6976 6564 2064 7369 6f20     le provided is o
    87d4:	7475 6f20 2066 6f62 6e75 7364 1b2e 305b     ut of bounds..[0
    87e4:	1b6d 305b 0a6d 0000 5b1b 3134 436d 4952     m.[0m....[41mCRI
    87f4:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    8804:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8814:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8824:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8834:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8844:	2820 7266 7165 6575 636e 5f79 7a68 2120      (frequency_hz !
    8854:	203d 5f30 7a48 0a29 2020 2020 2020 2020     = 0_Hz).        
    8864:	2020 7750 206d 7246 7165 6575 636e 2079       Pwm Frequency 
    8874:	6163 6e6e 746f 6220 2065 657a 6f72 4820     cannot be zero H
    8884:	2e7a 5b1b 6d30 5b1b 6d30 000a 5b1b 3234     z..[0m.[0m...[42
    8894:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    88a4:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    88b4:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    88c4:	6175 7472 6920 696e 6974 6c61 7a69 6465     uart initialized
    88d4:	5b1b 6d30 000a 0000 5b1b 3234 206d 2020     .[0m.....[42m   
    88e4:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    88f4:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8904:	256d 3e64 1b20 305b 333b 6d37 6f4d 6f74     m%d> .[0;37mMoto
    8914:	2072 6f63 746e 6f72 6c6c 7265 6920 696e     r controller ini
    8924:	6974 6c61 7a69 6465 5b1b 6d30 000a 0000     tialized.[0m....
    8934:	6175 7472 745f 7361 006b 0000 696c 656e     uart_task...line
    8944:	7261 615f 7463 6175 6f74 5f72 6174 6b73     ar_actuator_task
    8954:	ff00 ffff                                   ....

00008958 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    8958:	0000 4140                                   ..@A

0000895c <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    895c:	0000 4140                                   ..@A

00008960 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    8960:	0100 ffff                                   ....

00008964 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    8964:	0100 ffff                                   ....

00008968 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    8968:	0500 ffff                                   ....

0000896c <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    896c:	0108 ffff                                   ....

00008970 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    8970:	0208 ffff                                   ....

00008974 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    8974:	0208 ffff                                   ....

00008978 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    8978:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    8988:	2e72 7068 0070 ffff                         r.hpp...

00008990 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8990:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    89a0:	2e72 7068 0070 ffff                         r.hpp...

000089a8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    89a8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    89b8:	2e72 7068 0070 ffff                         r.hpp...

000089c0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    89c0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    89d0:	2e72 7068 0070 ffff                         r.hpp...

000089d8 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    89d8:	8b54 0000 0802 0000                         T.......

000089e0 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    89e0:	8b54 0000 0902 0000                         T.......

000089e8 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    89e8:	8b54 0000 1c04 0000                         T.......

000089f0 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    89f0:	8b54 0000 1d04 0000                         T.......

000089f8 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    89f8:	8b54 0000 1d01 0000                         T.......

00008a00 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    8a00:	8b54 0000 0902 0000                         T.......

00008a08 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    8a08:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

00008a18 <sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset>:
    8a18:	0101 ffff                                   ....

00008a1c <sjsu::lpc40xx::Pwm::Timer::kCounterEnable>:
    8a1c:	0100 ffff                                   ....

00008a20 <sjsu::lpc40xx::Pwm::Timer::kCounterReset>:
    8a20:	0101 ffff                                   ....

00008a24 <sjsu::lpc40xx::Pwm::Timer::kPwmEnable>:
    8a24:	0103 ffff                                   ....

00008a28 <sjsu::lpc40xx::Pwm::CountControl::kMode>:
    8a28:	0200 ffff                                   ....

00008a2c <sjsu::lpc40xx::Pwm::CountControl::kCountInput>:
    8a2c:	0202 ffff                                   ....

00008a30 <sjsu::lpc40xx::Pwm::Channel::kPwmPin0>:
    8a30:	8b54 0000 0002 0000                         T.......

00008a38 <sjsu::lpc40xx::Pwm::Channel::kPwmPin1>:
    8a38:	8b54 0000 0102 0000                         T.......

00008a40 <sjsu::lpc40xx::Pwm::Channel::kPwm0>:
    8a40:	0054 1000 8a30 0000 0009 0000               T...0.......

00008a4c <sjsu::lpc40xx::Pwm::Channel::kPwm1>:
    8a4c:	0054 1000 8a38 0000 000a 0000               T...8.......

00008a58 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8a58:	7770 2e6d 7068 0070                         pwm.hpp.

00008a60 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file>:
    8a60:	7770 2e6d 7068 0070                         pwm.hpp.

00008a68 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8a68:	7770 2e6d 7068 0070                         pwm.hpp.

00008a70 <sjsu::Servo::kDefaultFrequency>:
    8a70:	0000 4248                                   ..HB

00008a74 <motor_controller_freq>:
    8a74:	0000 4296                                   ...B

00008a78 <motor_controller_min_pulse>:
    8a78:	03e8 0000 0000 0000                         ........

00008a80 <motor_controller_max_pulse>:
    8a80:	07d0 0000 0000 0000                         ........

00008a88 <main::file>:
    8a88:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008a94 <main::file>:
    8a94:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008aa0 <vtable for sjsu::Servo>:
	...
    8aa8:	200d 0000 20d7 0000 2147 0000 2171 0000     . ... ..G!..q!..
    8ab8:	21af 0000 2251 0000                         .!..Q"..

00008ac0 <vtable for sjsu::lpc40xx::Pwm>:
	...
    8ac8:	1b09 0000 1cc9 0000 1d99 0000 1e11 0000     ................

00008ad8 <vtable for sjsu::Pwm>:
	...
    8ae0:	6a29 0000 6a29 0000 6a29 0000 6a29 0000     )j..)j..)j..)j..

00008af0 <vtable for sjsu::lpc40xx::Uart>:
	...
    8af8:	1665 0000 1725 0000 17b1 0000 1855 0000     e...%.......U...
    8b08:	1925 0000                                   %...

00008b0c <vtable for sjsu::Uart>:
	...
    8b14:	6a29 0000 6a29 0000 6a29 0000 6a29 0000     )j..)j..)j..)j..
    8b24:	6a29 0000                                   )j..

00008b28 <vtable for sjsu::lpc40xx::SystemController>:
	...
    8b30:	09fd 0000 0a99 0000 0af1 0000 0b15 0000     ................
    8b40:	0b31 0000 0b6d 0000 0ba1 0000               1...m.......

00008b4c <vtable for sjsu::lpc40xx::Pin>:
	...
    8b54:	0411 0000 0445 0000 04b5 0000 0479 0000     ....E.......y...

00008b64 <main::__PRETTY_FUNCTION__>:
    8b64:	6e69 2074 616d 6e69 2928 ff00               int main()..

00008b70 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    8b70:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8b80:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    8b90:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    8ba0:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    8bb0:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...

00008bc0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    8bc0:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    8bd0:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    8be0:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    8bf0:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    8c00:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    8c10:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    8c20:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    8c30:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    8c40:	736e 0074                                   nst.

00008c44 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    8c44:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    8c54:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    8c64:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    8c74:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    8c84:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    8c94:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    8ca4:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    8cb4:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00008cc0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    8cc0:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    8cd0:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    8ce0:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    8cf0:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    8d00:	2029 6f63 736e 0074                         ) const.

00008d08 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    8d08:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    8d18:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    8d28:	533a 7465 7246 7165 6575 636e 2879 6e75     :SetFrequency(un
    8d38:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    8d48:	6568 7472 5f7a 2974 6320 6e6f 7473 ff00     hertz_t) const..

00008d58 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__>:
    8d58:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    8d68:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    8d78:	533a 7465 7544 7974 7943 6c63 2865 6c66     :SetDutyCycle(fl
    8d88:	616f 2974 6320 6e6f 7473 ff00               oat) const..

00008d94 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    8d94:	6976 7472 6175 206c 6a73 7573 3a3a 7453     virtual sjsu::St
    8da4:	7461 7375 7320 736a 3a75 6c3a 6370 3034     atus sjsu::lpc40
    8db4:	7878 3a3a 7750 3a6d 493a 696e 6974 6c61     xx::Pwm::Initial
    8dc4:	7a69 2865 6e75 7469 3a73 663a 6572 7571     ize(units::frequ
    8dd4:	6e65 7963 3a3a 6568 7472 5f7a 2974 6320     ency::hertz_t) c
    8de4:	6e6f 7473 ff00 ffff 6e69 6176 696c 0064     onst....invalid.
    8df4:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    8e04:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    8e14:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    8e24:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    8e34:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    8e44:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    8e54:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    8e64:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    8e74:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    8e84:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    8e94:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    8ea4:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    8eb4:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    8ec4:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    8ed4:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    8ee4:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    8ef4:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    8f04:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8f14:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8f24:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    8f34:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    8f44:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    8f54:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    8f64:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    8f74:	5b1b 3134 486d 7261 2064 6146 6c75 2074     .[41mHard Fault 
    8f84:	7845 6563 7470 6f69 206e 634f 7563 7272     Exception Occurr
    8f94:	6465 0a21 5b1b 6d30 0000 0000 3072 203a     ed!..[0m....r0: 
    8fa4:	7830 3025 6c38 2c58 7220 3a31 3020 2578     0x%08lX, r1: 0x%
    8fb4:	3830 586c 202c 3272 203a 7830 3025 6c38     08lX, r2: 0x%08l
    8fc4:	2c58 7220 3a33 3020 2578 3830 586c 000a     X, r3: 0x%08lX..
    8fd4:	3172 3a32 3020 2578 3830 586c 202c 726c     r12: 0x%08lX, lr
    8fe4:	203a 7830 3025 6c38 2c58 7020 3a63 3020     : 0x%08lX, pc: 0
    8ff4:	2578 3830 586c 202c 7370 3a72 3020 2578     x%08lX, psr: 0x%
    9004:	3830 586c 000a 0000 1b0a 315b 333b 6d37     08lX......[1;37m
    9014:	5b1b 3234 506d 6f72 7267 6d61 5220 7465     .[42mProgram Ret
    9024:	7275 656e 2064 7845 7469 4320 646f 3a65     urned Exit Code:
    9034:	2520 646c 1b0a 305b 006d 0000 1b0a 315b      %ld..[0m.....[1
    9044:	333b 6d37 5b1b 3134 506d 6f72 7267 6d61     ;37m.[41mProgram
    9054:	5220 7465 7275 656e 2064 7845 7469 4320      Returned Exit C
    9064:	646f 3a65 2520 646c 1b0a 305b 006d ffff     ode: %ld..[0m...
    9074:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
    9084:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
    9094:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
    90a4:	000a ffff                                   ....

000090a8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    90a8:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    90b8:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    90c8:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    90d8:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    90e8:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    90f8:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    9108:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    9118:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    9128:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    9138:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    9148:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    9158:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    9168:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    9178:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    9188:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    9198:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    91a8:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    91b8:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    91c8:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    91d8:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    91e8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    91f8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    9208:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    9218:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    9228:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    9238:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    9248:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    9258:	ffff ffff 54d9 0000 0001 0000 ffff ffff     .....T..........
    9268:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    9278:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    9288:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    9298:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    92a8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    92b8:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    92c8:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    92d8:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    92e8:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    92f8:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    9308:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    9318:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    9328:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    9338:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    9348:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    9358:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    9368:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    9378:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    9388:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    9398:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    93a8:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    93b8:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    93c8:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    93d8:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    93e8:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    93f8:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    9408:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    9418:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    9428:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    9438:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    9448:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    9458:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    9468:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    9478:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    9488:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    9498:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    94a8:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    94b8:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    94c8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    94d8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    94e8:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    94f8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    9508:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    9518:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    9528:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    9538:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    9548:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    9558:	5a91 0000 0001 0000 ffff ffff fffe ffff     .Z..............
    9568:	5ba1 0000 0001 0000 ffff ffff 5b1b 3134     .[...........[41
    9578:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    9588:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    9598:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    95a8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    95b8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    95c8:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    95d8:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    95e8:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    95f8:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    9608:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    9618:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    9628:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    9638:	2174 5b1b 6d30 5b1b 6d30 000a ffff ffff     t!.[0m.[0m......

00009648 <std::integral_constant<long long, 1ll>::value>:
    9648:	0001 0000 0000 0000                         ........

00009650 <config::kSystemClockRateMhz>:
    9650:	0000 4240                                   ..@B

00009654 <config::kRtosFrequency>:
    9654:	0000 447a                                   ..zD

00009658 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    9658:	96ac 0000                                   ....

0000965c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    965c:	8b54 0000 0200 0000                         T.......

00009664 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    9664:	8b54 0000 0300 0000                         T.......

0000966c <sjsu::lpc40xx::Uart::Port::kUart0>:
    966c:	c000 4000 0003 0000 965c 0000 9664 0000     ...@....\...d...
    967c:	0009 0000                                   ....

00009680 <sjsu::InitializePlatform()::file>:
    9680:	7473 7261 7574 2e70 7063 0070               startup.cpp.

0000968c <vtable for sjsu::cortex::SystemTimer>:
	...
    9694:	5545 0000 5559 0000 5661 0000 5579 0000     EU..YU..aV..yU..

000096a4 <vtable for sjsu::cortex::InterruptController>:
	...
    96ac:	5325 0000 5379 0000                         %S..yS..

000096b4 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    96b4:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    96c4:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    96d4:	6d54 2072 7653 0063 6d54 5172 ff00 ffff     Tmr Svc.TmrQ....

000096e4 <__sf_fake_stderr>:
	...

00009704 <__sf_fake_stdin>:
	...

00009724 <__sf_fake_stdout>:
	...
