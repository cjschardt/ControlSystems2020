
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00003135

Program Header:
0x70000001 off    0x00017d8c vaddr 0x00007d8c paddr 0x00007d8c align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007e44 memsz 0x00007e44 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00007e44 align 2**16
         filesz 0x000000ec memsz 0x000000ec flags rw-
    LOAD off    0x000200f0 vaddr 0x100000f0 paddr 0x100000f0 align 2**16
         filesz 0x00000000 memsz 0x00000244 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00007d74  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000ec  10000000  00007e44  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200ec  2**2  CONTENTS
  3 .bss             00000244  100000f0  100000f0  000200f0  2**3  ALLOC
  4 .ARM.extab       00000018  00007d74  00007d74  00017d74  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  00007d8c  00007d8c  00017d8c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200ec  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200ec  2**2  CONTENTS
  8 .noinit          00000000  10000334  10000334  000200ec  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200ec  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  0002011c  2**0  CONTENTS, READONLY
 11 .debug_info      0006b828  00000000  00000000  0002019a  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00003f2c  00000000  00000000  0008b9c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000d70  00000000  00000000  0008f8ee  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000cf0  00000000  00000000  0009065e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00006583  00000000  00000000  0009134e  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002c6ec  00000000  00000000  000978d1  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     000046a8  00000000  00000000  000c3fc0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f0 l    d  .bss	00000000 .bss
00007d74 l    d  .ARM.extab	00000000 .ARM.extab
00007d8c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000334 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00004548 l     F .text	00000030 NVIC_EnableIRQ
00004578 l     F .text	00000030 NVIC_DisableIRQ
000045a8 l     F .text	00000054 NVIC_SetPriority
00007c90 l     O .text	00000004 config::kSystemClockRateMhz
00007c94 l     O .text	00000004 config::kRtosFrequency
00004688 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000046a4 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
10000074 l     O .data	00000004 (anonymous namespace)::system_controller
10000320 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000324 l     O .bss	0000000c (anonymous namespace)::uart0
10000078 l     O .data	0000000c (anonymous namespace)::system_timer
00004a94 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00004ab8 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00007cc0 l     O .text	0000000c sjsu::InitializePlatform()::file
00007cf4 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00004be8 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
00004cf8 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000f0 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000f4 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003b0 l     F .text	00000030 NVIC_DisableIRQ
00000632 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000064e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000742 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000075e l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00000814 l     F .text	00000026 _Unwind_GetGR
00000ada l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000af8 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000071e0 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00007264 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000072e0 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00001550 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000740c l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
000073b4 l     O .text	00000055 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00007378 l     O .text	0000003b sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__
00007328 l     O .text	0000004f sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000021da l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002a78 l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000070cc l     O .text	00000004 motor_controller_freq
000070d0 l     O .text	00000008 motor_controller_min_pulse
000070d8 l     O .text	00000008 motor_controller_max_pulse
000070e0 l     O .text	00000009 main::file
000070ec l     O .text	00000009 main::file
000070f8 l     O .text	00000009 main::file
00007104 l     O .text	00000009 main::file
000071d4 l     O .text	0000000b main::__PRETTY_FUNCTION__
00002c8a l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002cfe l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002d24 l     F .text	00000240 __static_initialization_and_destruction_0(int, int)
00002f64 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
00003124 l       .text	00000000 handler2_address_const
00003188 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
000031cc l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
10000298 l     O .bss	00000064 pxReadyTasksLists
100002fc l     O .bss	00000004 uxTopReadyPriority
10000300 l     O .bss	00000004 xYieldPending
10000304 l     O .bss	00000004 uxSchedulerSuspended
10000308 l     O .bss	00000004 ulTaskSwitchedInTime
1000030c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00003324 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00003340 l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
00003366 l     F .text	0000002e _strlen(char const*)
00003394 l     F .text	00000028 _is_digit(char)
000033bc l     F .text	00000048 _atoi(char const**)
00003404 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00003646 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00003716 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
000076e8 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000037f8 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00003c3c l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
00004d30 l       .text	00000000 pxCurrentTCBConst2
00004da0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00005798 l     F .text	00000012 selfrel_offset31
000057ac l     F .text	00000060 search_EIT_table
0000580c l     F .text	00000028 __gnu_unwind_get_pr_addr
00005834 l     F .text	000000a4 get_eit_entry
000058d8 l     F .text	00000058 restore_non_core_regs
00005930 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
0000593c l     F .text	00000004 __gnu_unwind_24bit.isra.1
00005940 l     F .text	00000002 _Unwind_DebugHook
00005944 l     F .text	0000003e unwind_phase2
00005984 l     F .text	000000c6 unwind_phase2_forced
00005b54 l     F .text	00000018 _Unwind_GetGR
00005b98 l     F .text	0000001a _Unwind_SetGR
00005c24 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00006330 l     F .text	00000038 next_unwind_byte
00006368 l     F .text	0000001a _Unwind_GetGR.constprop.0
00006384 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
1000008c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
0000083c  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
000062e8 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00005a50 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000070c0  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00004848  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00002a18  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00003010  w    F .text	0000006c sjsu::InitializeBssSection()
000032ac g     F .text	00000010 _getpid
00004e18 g     F .text	00000024 _putchar
00006fd0  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
000025d0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004890  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
0000702c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
000023ce  w    F .text	0000001e units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const
00000598  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00000ac0  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000396  w    F .text	00000018 std::numeric_limits<float>::epsilon()
00001c34  w    F .text	000001c0 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000060  w    O .data	00000004 sjsu::newlib::in
00005184 g     F .text	0000005a .hidden __floatdidf
10000270  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001be0  w    F .text	00000020 sjsu::Pwm::Pwm()
000023ec  w    F .text	000000bc sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00000782  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00006788 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00004510 g     F .text	00000038 printf
00000000 g       *ABS*	00000000 __vectors_start__
00001ec4  w    F .text	00000056 sjsu::lpc40xx::Pwm::GetDutyCycle() const
000028f2  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000027f6  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
000047ec  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
000008c8  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
000061a4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
000062c4 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00007e44 g       .ARM.exidx	00000000 __exidx_end
000067c0  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00004aec g     F .text	00000014 ThreadRuntimeCounter
00005ef8 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
1000006c  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00002520  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
00000c98  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
10000294 g     O .bss	00000004 pxCurrentTCB
0000230c  w    F .text	00000024 sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00006674 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00002138  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
000062c4 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00006fc8  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
10000330 g     O .bss	00000004 errno
00007e44 g       .ARM.exidx	00000000 _etext
00002986  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000004b4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000d90  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
0000630c g     F .text	00000022 .hidden _Unwind_Backtrace
00007c98  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
1000010c  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
0000528c g     F .text	00000160 .hidden __aeabi_fadd
10000318  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00005288 g     F .text	00000164 .hidden __subsf3
00000e5c  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00007054  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00006184 g     F .text	00000018 .hidden __restore_core_regs
000061c4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00002138  w    F .text	00000070 sjsu::Servo::Servo(sjsu::Pwm const&)
0000709c  w    O .text	00000008 sjsu::lpc40xx::Pwm::Channel::kPwmPin0
00006fc4  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00007160  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00004704  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00007094  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kMode
000067c4  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
000021a8  w    F .text	00000032 sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
0000126c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00005a4c g     F .text	00000004 .hidden _Unwind_GetCFA
00006700 g     F .text	00000016 memcpy
00000f94  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004dc0 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00001f3c  w    F .text	000000cc sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005b6c g     F .text	0000002a .hidden _Unwind_VRS_Set
0000510c g     F .text	00000022 .hidden __floatsidf
10000278  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
0000549c g     F .text	00000000 .hidden __aeabi_uldivmod
10000334 g       .noinit	00000000 _noinit
00000e74  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000009b0  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
000032d8 g     F .text	0000004c puts
00001a98  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007090  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kPwmEnable
0000130c  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00002962  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
10000070  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000bc4  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
0000173c  w    F .text	00000020 sjsu::Uart::Uart()
00006726 g     F .text	00000050 _raise_r
000053f4 g     F .text	0000001c .hidden __aeabi_i2f
10010000 g       *ABS*	00000000 __top_RAM
00004d40 g     F .text	00000066 xPortPendSVHandler
00007098  w    O .text	00000002 sjsu::lpc40xx::Pwm::CountControl::kCountInput
10000000 g       *ABS*	00000000 __base_RamLoc64
000005f0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000478  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
000067ac g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00005bb4 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
000027d0  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
000050ec g     F .text	0000001e .hidden __aeabi_ui2d
0000224e  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)
000024a8  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)
10010000 g       *ABS*	00000000 StackTop
00001c00  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
00000f30  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000054cc g     F .text	000002cc .hidden __udivmoddi4
00004e68 g     F .text	00000000 .hidden __aeabi_drsub
000070c8  w    O .text	00000004 sjsu::Servo::kDefaultFrequency
000000fc g       .text	00000000 bss_section_table
000067c8  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000049b8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000009c6  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
000061b4 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
0000175c  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00005f04 g     F .text	0000027e .hidden _Unwind_VRS_Pop
00005f00  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
000048e8  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000268  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
0000630c g     F .text	00000022 .hidden ___Unwind_Backtrace
0000096c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00001980  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00000884  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00005130 g     F .text	00000042 .hidden __extendsfdf2
0000706c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00004e74 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
10000310  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
00007d8c g       .ARM.extab	00000000 __exidx_start
000066b8 g     F .text	00000048 __libc_init_array
00001484  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
0000627c g     F .text	00000022 .hidden ___Unwind_RaiseException
0000152c  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000066a8 g     F .text	0000000e abort
000062a0 g     F .text	00000022 .hidden ___Unwind_Resume
00001514  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000050ec g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
10000264  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00002558  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
000014b0  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00004da8 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
000067cc  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
0000192a  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00004e5c g     F .text	0000000a std::terminate()
00000564  w    F .text	00000034 units::detail::abs(float)
000051e0 g     F .text	0000009e .hidden __aeabi_d2f
000061cc g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00002330  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00005288 g     F .text	00000164 .hidden __aeabi_fsub
00001850  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00002918  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
0000310c g     F .text	00000026 ArmHardFaultHandler
10000274  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000220  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000f0e  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000334 g       .bss	00000000 _ebss
00007148  w    O .text	00000018 vtable for sjsu::Pwm
000018dc  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00007198  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00002a36  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000694  w    F .text	000000ae bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000c40  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
000048b4  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
00000672  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00005420 g     F .text	0000007c .hidden __floatdisf
00007ca4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00003090 g     F .text	0000007c GetRegistersFromStack
0000175c  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00002a5a  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
000070b0  w    O .text	00000008 sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00004e74 g     F .text	00000276 .hidden __aeabi_dadd
000070a4  w    O .text	0000000c sjsu::lpc40xx::Pwm::Channel::kPwm0
00005174 g     F .text	0000006a .hidden __aeabi_ul2d
0000619c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00004b00  w    F .text	000000b8 sjsu::InitializePlatform()
00002008  w    F .text	000000d4 sjsu::lpc40xx::Pwm::EnablePwm(bool) const
00002832  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
00007d14 g     O .text	00000020 __sf_fake_stderr
00004724  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00004e4c g     F .text	00000010 std::get_terminate()
0000173c  w    F .text	00000020 sjsu::Uart::Uart()
000062a0 g     F .text	00000022 .hidden _Unwind_Resume
00001b08  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00005b1c g     F .text	0000000c .hidden _Unwind_DeleteException
00007ce4  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
00005b18 g     F .text	00000002 .hidden _Unwind_Complete
00000d48  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000260  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
00007ccc  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00006fe0  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
10010000 g       *ABS*	00000000 __top_RamLoc64
1000026c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00002be2  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000f0 g       .bss	00000000 _bss
00004e70 g     F .text	0000027a .hidden __aeabi_dsub
00007014  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00007110  w    O .text	00000020 vtable for sjsu::Servo
00005174 g     F .text	0000006a .hidden __floatundidf
00004e3c g     F .text	00000006 __cxa_pure_virtual
00000f6c  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
000053f4 g     F .text	0000001c .hidden __floatsisf
00007044  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000118  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00006388 g     F .text	000002c4 .hidden __gnu_unwind_execute
00001c00  w    F .text	00000034 sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
1000027c  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00000b28  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000061ac g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000003f8  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002b2e  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00002aac  w    F .text	00000082 float sjsu::Map<float, float, float>(float, float, float, float, float)
00000a9e  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
000067d0  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
10000334 g       .noinit	00000000 _end_noinit
10000120  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000c1c  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
000031dc g     F .text	000000c4 vTaskSwitchContext
000012b4  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00006fcc  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00004814  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00007074  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000037e  w    F .text	00000018 std::numeric_limits<float>::min()
00005ac4 g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000238  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
0000482c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
000045fc  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
000023b2  w    F .text	0000001c float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const
10000284  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
0000510c g     F .text	00000022 .hidden __aeabi_i2d
0000704c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
000061bc g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
000049d0  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007130  w    O .text	00000018 vtable for sjsu::lpc40xx::Pwm
10000280  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00005410 g     F .text	0000008c .hidden __floatundisf
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
0000627c g     F .text	00000022 .hidden _Unwind_RaiseException
000066a4  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
0000307c  w    F .text	00000014 sjsu::SystemInitialize()
00001af0  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00001be0  w    F .text	00000020 sjsu::Pwm::Pwm()
000053ec g     F .text	00000024 .hidden __aeabi_ui2f
000012c8  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
00007084  w    O .text	00000002 sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset
000000e4 g       .text	00000000 data_section_table
10000110  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002272  w    F .text	00000070 sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
000020fa  w    F .text	0000003e sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const
10000288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00004dd8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000005c4  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00007d34 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
000070b8  w    O .text	00000008 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file
000011f0  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00001df4  w    F .text	000000d0 sjsu::lpc40xx::Pwm::SetDutyCycle(float) const
00006716 g     F .text	00000010 memset
00002604 g     F .text	000001cc main
00004640  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001b18  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00005420 g     F .text	0000007c .hidden __aeabi_l2f
000024cc  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00004798  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00004660  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
00007cac  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
000071bc  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
000051e0 g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
00004d10 g     F .text	00000026 vPortSVCHandler
00005184 g     F .text	0000005a .hidden __aeabi_l2d
000020dc  w    F .text	0000001e sjsu::lpc40xx::Pwm::GetMatchRegisters() const
00006fd8  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000064  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00005410 g     F .text	0000008c .hidden __aeabi_ul2f
000046c8  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00005ab0 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
0000253c  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000028b6  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00005b08 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
1000005c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00007c88  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
000029ea  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
00006184 g     F .text	00000018 .hidden restore_core_regs
00000c5c  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00006268 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00007064  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
000048c8  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
000024de  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00001f1a  w    F .text	00000022 bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001a74  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00005280 g     F .text	0000016c .hidden __aeabi_frsub
0000669c g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000088 g     O .data	00000004 _impure_ptr
00006fdc  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000e98  w    F .text	0000001e units::linear_scale<float>::operator()() const
00000e20  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004760  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
00002506  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
000004e8  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
000029bc  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
0000234a  w    F .text	00000068 sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
0000497c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
1000028c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00006680 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00006ffc  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00003134 g     F .text	00000054 ArmResetHandler
10000290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00005b28 g     F .text	0000002a .hidden _Unwind_VRS_Get
0000473c  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000084 g     O .data	00000004 __cxxabiv1::__terminate_handler
00006254 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000ccc  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
000009d8  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000d00  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
0000664c g     F .text	00000028 .hidden __gnu_unwind_frame
000062e8 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
000021f6  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
100000ec g       .data	00000000 _edata
00001a50  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00004bb8  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
1000011c  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00001b54  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
00006fe4  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000eb6  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
000053ec g     F .text	00000024 .hidden __floatunsisf
00004e42 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00006210 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000022e2  w    F .text	0000002a sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000032bc g     F .text	0000001a _kill
00002f74  w    F .text	0000009c sjsu::InitializeDataSection()
00002ca6  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00000990  w    F .text	00000020 sjsu::DefaultUptime()
00007d54 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
0000030c g       .text	00000000 __init_array_start
000066a4  w    F .text	00000002 .hidden __aeabi_idiv0
0000293c  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00007088  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterEnable
000032a0 g     F .text	0000000c _exit
0000705c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
00000612  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000013ec  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000a84  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000003e0  w    F .text	00000018 sjsu::Pin::GetPort() const
000067b0 g     F .text	00000010 strlen
10000000  w    O .data	00000004 sjsu::Uptime
00000410  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00005efc  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00002b88  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001128  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004df8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000007d4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00005130 g     F .text	00000042 .hidden __aeabi_f2d
00006694 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00001438  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
00002c32  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000444  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00004e70 g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
00000dd8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00002868  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001b6c  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
00006fd4  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
0000717c  w    O .text	0000001c vtable for sjsu::Uart
0000528c g     F .text	00000160 .hidden __addsf3
0000708c  w    O .text	00000002 sjsu::lpc40xx::Pwm::Timer::kCounterReset
00007c9c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
10000068  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001790  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00006778 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 35 31 00 00 61 47 00 00 0d 31 00 00     ....51..aG...1..
      10:	61 47 00 00 61 47 00 00 61 47 00 00 00 00 00 00     aG..aG..aG......
	...
      2c:	11 4d 00 00 61 47 00 00 00 00 00 00 41 4d 00 00     .M..aG......AM..
      3c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      4c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      5c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      6c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      7c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      8c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      9c:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      ac:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      bc:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      cc:	61 47 00 00 61 47 00 00 61 47 00 00 61 47 00 00     aG..aG..aG..aG..
      dc:	61 47 00 00 61 47 00 00                             aG..aG..

000000e4 <data_section_table>:
      e4:	00007e44 	.word	0x00007e44
      e8:	10000000 	.word	0x10000000
      ec:	000000ec 	.word	0x000000ec
      f0:	00007e44 	.word	0x00007e44
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f0 	.word	0x100000f0
     100:	00000244 	.word	0x00000244
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	00002f65 	.word	0x00002f65
     314:	000031cd 	.word	0x000031cd
     318:	00004cf9 	.word	0x00004cf9

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000f0 	.word	0x100000f0
     344:	00000000 	.word	0x00000000
     348:	00007d8c 	.word	0x00007d8c

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000f4 	.word	0x100000f4
     364:	00007d8c 	.word	0x00007d8c

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <std::numeric_limits<float>::min()>:
    struct numeric_limits<float>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
     37e:	b480      	push	{r7}
     380:	af00      	add	r7, sp, #0
     382:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     386:	ee07 3a90 	vmov	s15, r3
     38a:	eeb0 0a67 	vmov.f32	s0, s15
     38e:	46bd      	mov	sp, r7
     390:	f85d 7b04 	ldr.w	r7, [sp], #4
     394:	4770      	bx	lr

00000396 <std::numeric_limits<float>::epsilon()>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
     396:	b480      	push	{r7}
     398:	af00      	add	r7, sp, #0
     39a:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
     39e:	ee07 3a90 	vmov	s15, r3
     3a2:	eeb0 0a67 	vmov.f32	s0, s15
     3a6:	46bd      	mov	sp, r7
     3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ac:	4770      	bx	lr
     3ae:	Address 0x00000000000003ae is out of bounds.


000003b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	f003 021f 	and.w	r2, r3, #31
     3be:	4907      	ldr	r1, [pc, #28]	; (3dc <NVIC_DisableIRQ+0x2c>)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	095b      	lsrs	r3, r3, #5
     3c4:	2001      	movs	r0, #1
     3c6:	fa00 f202 	lsl.w	r2, r0, r2
     3ca:	3320      	adds	r3, #32
     3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3d0:	bf00      	nop
     3d2:	370c      	adds	r7, #12
     3d4:	46bd      	mov	sp, r7
     3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3da:	4770      	bx	lr
     3dc:	e000e100 	.word	0xe000e100

000003e0 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
  {
    return port_;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	791b      	ldrb	r3, [r3, #4]
  }
     3ec:	4618      	mov	r0, r3
     3ee:	370c      	adds	r7, #12
     3f0:	46bd      	mov	sp, r7
     3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f6:	4770      	bx	lr

000003f8 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     400:	687b      	ldr	r3, [r7, #4]
     402:	795b      	ldrb	r3, [r3, #5]
  }
     404:	4618      	mov	r0, r3
     406:	370c      	adds	r7, #12
     408:	46bd      	mov	sp, r7
     40a:	f85d 7b04 	ldr.w	r7, [sp], #4
     40e:	4770      	bx	lr

00000410 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
     418:	460b      	mov	r3, r1
     41a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     41c:	4b08      	ldr	r3, [pc, #32]	; (440 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     41e:	78f9      	ldrb	r1, [r7, #3]
     420:	781a      	ldrb	r2, [r3, #0]
     422:	785b      	ldrb	r3, [r3, #1]
     424:	021b      	lsls	r3, r3, #8
     426:	431a      	orrs	r2, r3
     428:	2300      	movs	r3, #0
     42a:	f362 030f 	bfi	r3, r2, #0, #16
     42e:	461a      	mov	r2, r3
     430:	6878      	ldr	r0, [r7, #4]
     432:	f000 f859 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     436:	bf00      	nop
     438:	3708      	adds	r7, #8
     43a:	46bd      	mov	sp, r7
     43c:	bd80      	pop	{r7, pc}
     43e:	bf00      	nop
     440:	000067c0 	.word	0x000067c0

00000444 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     452:	78f9      	ldrb	r1, [r7, #3]
     454:	781a      	ldrb	r2, [r3, #0]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	021b      	lsls	r3, r3, #8
     45a:	431a      	orrs	r2, r3
     45c:	2300      	movs	r3, #0
     45e:	f362 030f 	bfi	r3, r2, #0, #16
     462:	461a      	mov	r2, r3
     464:	6878      	ldr	r0, [r7, #4]
     466:	f000 f83f 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     46a:	bf00      	nop
     46c:	3708      	adds	r7, #8
     46e:	46bd      	mov	sp, r7
     470:	bd80      	pop	{r7, pc}
     472:	bf00      	nop
     474:	000067c4 	.word	0x000067c4

00000478 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
     480:	460b      	mov	r3, r1
     482:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     484:	78fb      	ldrb	r3, [r7, #3]
     486:	f083 0301 	eor.w	r3, r3, #1
     48a:	b2db      	uxtb	r3, r3
     48c:	4619      	mov	r1, r3
     48e:	4b08      	ldr	r3, [pc, #32]	; (4b0 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     490:	781a      	ldrb	r2, [r3, #0]
     492:	785b      	ldrb	r3, [r3, #1]
     494:	021b      	lsls	r3, r3, #8
     496:	431a      	orrs	r2, r3
     498:	2300      	movs	r3, #0
     49a:	f362 030f 	bfi	r3, r2, #0, #16
     49e:	461a      	mov	r2, r3
     4a0:	6878      	ldr	r0, [r7, #4]
     4a2:	f000 f821 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4a6:	bf00      	nop
     4a8:	3708      	adds	r7, #8
     4aa:	46bd      	mov	sp, r7
     4ac:	bd80      	pop	{r7, pc}
     4ae:	bf00      	nop
     4b0:	000067c8 	.word	0x000067c8

000004b4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     4b4:	b580      	push	{r7, lr}
     4b6:	b082      	sub	sp, #8
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	460b      	mov	r3, r1
     4be:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     4c0:	78f9      	ldrb	r1, [r7, #3]
     4c2:	4b08      	ldr	r3, [pc, #32]	; (4e4 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	785b      	ldrb	r3, [r3, #1]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	431a      	orrs	r2, r3
     4cc:	2300      	movs	r3, #0
     4ce:	f362 030f 	bfi	r3, r2, #0, #16
     4d2:	461a      	mov	r2, r3
     4d4:	6878      	ldr	r0, [r7, #4]
     4d6:	f000 f807 	bl	4e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4da:	bf00      	nop
     4dc:	3708      	adds	r7, #8
     4de:	46bd      	mov	sp, r7
     4e0:	bd80      	pop	{r7, pc}
     4e2:	bf00      	nop
     4e4:	000067cc 	.word	0x000067cc

000004e8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ea:	b087      	sub	sp, #28
     4ec:	af00      	add	r7, sp, #0
     4ee:	60f8      	str	r0, [r7, #12]
     4f0:	460b      	mov	r3, r1
     4f2:	80ba      	strh	r2, [r7, #4]
     4f4:	72fb      	strb	r3, [r7, #11]
     4f6:	68fb      	ldr	r3, [r7, #12]
     4f8:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     4fa:	4b19      	ldr	r3, [pc, #100]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     4fc:	681c      	ldr	r4, [r3, #0]
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	4618      	mov	r0, r3
     502:	f7ff ff6d 	bl	3e0 <sjsu::Pin::GetPort() const>
     506:	4603      	mov	r3, r0
     508:	461d      	mov	r5, r3
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	4618      	mov	r0, r3
     50e:	f7ff ff73 	bl	3f8 <sjsu::Pin::GetPin() const>
     512:	4603      	mov	r3, r0
     514:	461a      	mov	r2, r3
     516:	016b      	lsls	r3, r5, #5
     518:	4413      	add	r3, r2
     51a:	009b      	lsls	r3, r3, #2
     51c:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     51e:	681b      	ldr	r3, [r3, #0]
     520:	7af9      	ldrb	r1, [r7, #11]
     522:	687a      	ldr	r2, [r7, #4]
     524:	4618      	mov	r0, r3
     526:	f002 f953 	bl	27d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     52a:	4605      	mov	r5, r0
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     530:	4b0b      	ldr	r3, [pc, #44]	; (560 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     532:	681c      	ldr	r4, [r3, #0]
     534:	697b      	ldr	r3, [r7, #20]
     536:	4618      	mov	r0, r3
     538:	f7ff ff52 	bl	3e0 <sjsu::Pin::GetPort() const>
     53c:	4603      	mov	r3, r0
     53e:	461e      	mov	r6, r3
     540:	697b      	ldr	r3, [r7, #20]
     542:	4618      	mov	r0, r3
     544:	f7ff ff58 	bl	3f8 <sjsu::Pin::GetPin() const>
     548:	4603      	mov	r3, r0
     54a:	461a      	mov	r2, r3
     54c:	0173      	lsls	r3, r6, #5
     54e:	4413      	add	r3, r2
     550:	009b      	lsls	r3, r3, #2
     552:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     554:	601d      	str	r5, [r3, #0]
  }
     556:	bf00      	nop
     558:	371c      	adds	r7, #28
     55a:	46bd      	mov	sp, r7
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	bf00      	nop
     560:	1000010c 	.word	0x1000010c

00000564 <units::detail::abs(float)>:
		{
			return y == 0 ? 1.0 : x * pow(x, y - 1);
		}

		constexpr inline UNIT_LIB_DEFAULT_TYPE abs(UNIT_LIB_DEFAULT_TYPE x)
		{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	ed87 0a01 	vstr	s0, [r7, #4]
			return x < 0 ? -x : x;
     56e:	edd7 7a01 	vldr	s15, [r7, #4]
     572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     57a:	d504      	bpl.n	586 <units::detail::abs(float)+0x22>
     57c:	edd7 7a01 	vldr	s15, [r7, #4]
     580:	eef1 7a67 	vneg.f32	s15, s15
     584:	e001      	b.n	58a <units::detail::abs(float)+0x26>
     586:	edd7 7a01 	vldr	s15, [r7, #4]
		}
     58a:	eeb0 0a67 	vmov.f32	s0, s15
     58e:	370c      	adds	r7, #12
     590:	46bd      	mov	sp, r7
     592:	f85d 7b04 	ldr.w	r7, [sp], #4
     596:	4770      	bx	lr

00000598 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     598:	b580      	push	{r7, lr}
     59a:	b084      	sub	sp, #16
     59c:	af00      	add	r7, sp, #0
     59e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
     5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
     5a6:	f004 ff33 	bl	5410 <__aeabi_ul2f>
     5aa:	4602      	mov	r2, r0
     5ac:	f107 030c 	add.w	r3, r7, #12
     5b0:	ee00 2a10 	vmov	s0, r2
     5b4:	4618      	mov	r0, r3
     5b6:	f000 f85c 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	4618      	mov	r0, r3
     5be:	3710      	adds	r7, #16
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}

000005c4 <units::literals::operator"" _MHz(unsigned long long)>:
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     5ce:	e9d7 0100 	ldrd	r0, r1, [r7]
     5d2:	f004 ff1d 	bl	5410 <__aeabi_ul2f>
     5d6:	4602      	mov	r2, r0
     5d8:	f107 030c 	add.w	r3, r7, #12
     5dc:	ee00 2a10 	vmov	s0, r2
     5e0:	4618      	mov	r0, r3
     5e2:	f000 f805 	bl	5f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	4618      	mov	r0, r3
     5ea:	3710      	adds	r7, #16
     5ec:	46bd      	mov	sp, r7
     5ee:	bd80      	pop	{r7, pc}

000005f0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
     5f8:	ed87 0a00 	vstr	s0, [r7]
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	463a      	mov	r2, r7
     600:	4611      	mov	r1, r2
     602:	4618      	mov	r0, r3
     604:	f000 f805 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     608:	687b      	ldr	r3, [r7, #4]
     60a:	4618      	mov	r0, r3
     60c:	3708      	adds	r7, #8
     60e:	46bd      	mov	sp, r7
     610:	bd80      	pop	{r7, pc}

00000612 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     612:	b480      	push	{r7}
     614:	b083      	sub	sp, #12
     616:	af00      	add	r7, sp, #0
     618:	6078      	str	r0, [r7, #4]
     61a:	6039      	str	r1, [r7, #0]
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	681a      	ldr	r2, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	601a      	str	r2, [r3, #0]
     624:	687b      	ldr	r3, [r7, #4]
     626:	4618      	mov	r0, r3
     628:	370c      	adds	r7, #12
     62a:	46bd      	mov	sp, r7
     62c:	f85d 7b04 	ldr.w	r7, [sp], #4
     630:	4770      	bx	lr

00000632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     632:	b580      	push	{r7, lr}
     634:	b086      	sub	sp, #24
     636:	af00      	add	r7, sp, #0
     638:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	f000 f807 	bl	64e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     640:	eef0 7a40 	vmov.f32	s15, s0
	}
     644:	eeb0 0a67 	vmov.f32	s0, s15
     648:	3718      	adds	r7, #24
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}

0000064e <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     64e:	b480      	push	{r7}
     650:	b085      	sub	sp, #20
     652:	af00      	add	r7, sp, #0
     654:	60f8      	str	r0, [r7, #12]
     656:	7239      	strb	r1, [r7, #8]
     658:	713a      	strb	r2, [r7, #4]
     65a:	703b      	strb	r3, [r7, #0]
			return value;
     65c:	68fb      	ldr	r3, [r7, #12]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	ee07 3a90 	vmov	s15, r3
		}
     664:	eeb0 0a67 	vmov.f32	s0, s15
     668:	3714      	adds	r7, #20
     66a:	46bd      	mov	sp, r7
     66c:	f85d 7b04 	ldr.w	r7, [sp], #4
     670:	4770      	bx	lr

00000672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     672:	b580      	push	{r7, lr}
     674:	b082      	sub	sp, #8
     676:	af00      	add	r7, sp, #0
     678:	6078      	str	r0, [r7, #4]
     67a:	ed87 0a00 	vstr	s0, [r7]
     67e:	687b      	ldr	r3, [r7, #4]
     680:	463a      	mov	r2, r7
     682:	4611      	mov	r1, r2
     684:	4618      	mov	r0, r3
     686:	f7ff ffc4 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	4618      	mov	r0, r3
     68e:	3708      	adds	r7, #8
     690:	46bd      	mov	sp, r7
     692:	bd80      	pop	{r7, pc}

00000694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator==(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     694:	b580      	push	{r7, lr}
     696:	ed2d 8b04 	vpush	{d8-d9}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	6039      	str	r1, [r7, #0]
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	ed93 8a00 	vldr	s16, [r3]
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	4618      	mov	r0, r3
     6ac:	f000 f849 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6b0:	eef0 7a40 	vmov.f32	s15, s0
     6b4:	ee78 7a67 	vsub.f32	s15, s16, s15
     6b8:	eeb0 0a67 	vmov.f32	s0, s15
     6bc:	f7ff ff52 	bl	564 <units::detail::abs(float)>
     6c0:	eef0 8a40 	vmov.f32	s17, s0
     6c4:	f7ff fe67 	bl	396 <std::numeric_limits<float>::epsilon()>
     6c8:	eeb0 9a40 	vmov.f32	s18, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	ed93 8a00 	vldr	s16, [r3]
     6d2:	683b      	ldr	r3, [r7, #0]
     6d4:	4618      	mov	r0, r3
     6d6:	f000 f834 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     6da:	eef0 7a40 	vmov.f32	s15, s0
     6de:	ee78 7a27 	vadd.f32	s15, s16, s15
     6e2:	eeb0 0a67 	vmov.f32	s0, s15
     6e6:	f7ff ff3d 	bl	564 <units::detail::abs(float)>
     6ea:	eef0 7a40 	vmov.f32	s15, s0
			return detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::epsilon() *
     6ee:	ee69 7a27 	vmul.f32	s15, s18, s15
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     6f2:	eef4 8ae7 	vcmpe.f32	s17, s15
     6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6fa:	d419      	bmi.n	730 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0x9c>
				detail::abs(nls::m_value - units::convert<UnitsRhs, Units>(rhs.m_value)) < std::numeric_limits<T>::min();
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	ed93 8a00 	vldr	s16, [r3]
     702:	683b      	ldr	r3, [r7, #0]
     704:	4618      	mov	r0, r3
     706:	f000 f81c 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     70a:	eef0 7a40 	vmov.f32	s15, s0
     70e:	ee78 7a67 	vsub.f32	s15, s16, s15
     712:	eeb0 0a67 	vmov.f32	s0, s15
     716:	f7ff ff25 	bl	564 <units::detail::abs(float)>
     71a:	eeb0 8a40 	vmov.f32	s16, s0
     71e:	f7ff fe2e 	bl	37e <std::numeric_limits<float>::min()>
     722:	eef0 7a40 	vmov.f32	s15, s0
				detail::abs(nls::m_value + units::convert<UnitsRhs, Units>(rhs.m_value)) ||
     726:	eeb4 8ae7 	vcmpe.f32	s16, s15
     72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     72e:	d501      	bpl.n	734 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa0>
     730:	2301      	movs	r3, #1
     732:	e000      	b.n	736 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const+0xa2>
     734:	2300      	movs	r3, #0
		}
     736:	4618      	mov	r0, r3
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	ecbd 8b04 	vpop	{d8-d9}
     740:	bd80      	pop	{r7, pc}

00000742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     742:	b580      	push	{r7, lr}
     744:	b086      	sub	sp, #24
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     74a:	6878      	ldr	r0, [r7, #4]
     74c:	f000 f807 	bl	75e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     750:	eef0 7a40 	vmov.f32	s15, s0
	}
     754:	eeb0 0a67 	vmov.f32	s0, s15
     758:	3718      	adds	r7, #24
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}

0000075e <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     75e:	b480      	push	{r7}
     760:	b085      	sub	sp, #20
     762:	af00      	add	r7, sp, #0
     764:	60f8      	str	r0, [r7, #12]
     766:	7239      	strb	r1, [r7, #8]
     768:	713a      	strb	r2, [r7, #4]
     76a:	703b      	strb	r3, [r7, #0]
			return value;
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	ee07 3a90 	vmov	s15, r3
		}
     774:	eeb0 0a67 	vmov.f32	s0, s15
     778:	3714      	adds	r7, #20
     77a:	46bd      	mov	sp, r7
     77c:	f85d 7b04 	ldr.w	r7, [sp], #4
     780:	4770      	bx	lr

00000782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     782:	b580      	push	{r7, lr}
     784:	b086      	sub	sp, #24
     786:	af00      	add	r7, sp, #0
     788:	6078      	str	r0, [r7, #4]
     78a:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	3308      	adds	r3, #8
     792:	681b      	ldr	r3, [r3, #0]
     794:	6839      	ldr	r1, [r7, #0]
     796:	6878      	ldr	r0, [r7, #4]
     798:	4798      	blx	r3
     79a:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     79c:	f04f 0300 	mov.w	r3, #0
     7a0:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7a2:	697b      	ldr	r3, [r7, #20]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d00f      	beq.n	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	330c      	adds	r3, #12
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	4798      	blx	r3
     7b4:	4603      	mov	r3, r0
     7b6:	613b      	str	r3, [r7, #16]
     7b8:	f107 0310 	add.w	r3, r7, #16
     7bc:	6979      	ldr	r1, [r7, #20]
     7be:	4618      	mov	r0, r3
     7c0:	f002 f819 	bl	27f6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     7c4:	4603      	mov	r3, r0
     7c6:	60fb      	str	r3, [r7, #12]
    }
    return result;
     7c8:	68fb      	ldr	r3, [r7, #12]
  }
     7ca:	4618      	mov	r0, r3
     7cc:	3718      	adds	r7, #24
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	Address 0x00000000000007d2 is out of bounds.


000007d4 <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
     7d4:	b480      	push	{r7}
     7d6:	b085      	sub	sp, #20
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     7de:	60fb      	str	r3, [r7, #12]
  switch (target)
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d002      	beq.n	7ec <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     7e6:	2b01      	cmp	r3, #1
     7e8:	d003      	beq.n	7f2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     7ea:	e005      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     7ee:	60fb      	str	r3, [r7, #12]
     7f0:	e002      	b.n	7f8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     7f4:	60fb      	str	r3, [r7, #12]
     7f6:	bf00      	nop
  }
  return result;
     7f8:	68fb      	ldr	r3, [r7, #12]
}
     7fa:	4618      	mov	r0, r3
     7fc:	3714      	adds	r7, #20
     7fe:	46bd      	mov	sp, r7
     800:	f85d 7b04 	ldr.w	r7, [sp], #4
     804:	4770      	bx	lr
     806:	bf00      	nop
     808:	000067d8 	.word	0x000067d8
     80c:	000067e0 	.word	0x000067e0
     810:	000067ec 	.word	0x000067ec

00000814 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     814:	b580      	push	{r7, lr}
     816:	b086      	sub	sp, #24
     818:	af02      	add	r7, sp, #8
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     81e:	683a      	ldr	r2, [r7, #0]
     820:	f107 030c 	add.w	r3, r7, #12
     824:	9300      	str	r3, [sp, #0]
     826:	2300      	movs	r3, #0
     828:	2100      	movs	r1, #0
     82a:	6878      	ldr	r0, [r7, #4]
     82c:	f005 f97c 	bl	5b28 <_Unwind_VRS_Get>
      return val;
     830:	68fb      	ldr	r3, [r7, #12]
    }
     832:	4618      	mov	r0, r3
     834:	3710      	adds	r7, #16
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	Address 0x000000000000083a is out of bounds.


0000083c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     846:	683b      	ldr	r3, [r7, #0]
     848:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     84a:	210f      	movs	r1, #15
     84c:	6878      	ldr	r0, [r7, #4]
     84e:	f7ff ffe1 	bl	814 <_Unwind_GetGR>
     852:	4603      	mov	r3, r0
     854:	f023 0301 	bic.w	r3, r3, #1
     858:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	6819      	ldr	r1, [r3, #0]
     85e:	68bb      	ldr	r3, [r7, #8]
     860:	3b04      	subs	r3, #4
     862:	461a      	mov	r2, r3
     864:	4806      	ldr	r0, [pc, #24]	; (880 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     866:	f003 fe53 	bl	4510 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     86a:	68fb      	ldr	r3, [r7, #12]
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	1c5a      	adds	r2, r3, #1
     870:	68fb      	ldr	r3, [r7, #12]
     872:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     874:	2300      	movs	r3, #0
}
     876:	4618      	mov	r0, r3
     878:	3710      	adds	r7, #16
     87a:	46bd      	mov	sp, r7
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop
     880:	000067f8 	.word	0x000067f8

00000884 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
     88c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     88e:	683b      	ldr	r3, [r7, #0]
     890:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     892:	210f      	movs	r1, #15
     894:	6878      	ldr	r0, [r7, #4]
     896:	f7ff ffbd 	bl	814 <_Unwind_GetGR>
     89a:	4603      	mov	r3, r0
     89c:	f023 0301 	bic.w	r3, r3, #1
     8a0:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	3b04      	subs	r3, #4
     8a6:	4619      	mov	r1, r3
     8a8:	4806      	ldr	r0, [pc, #24]	; (8c4 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     8aa:	f003 fe31 	bl	4510 <printf>
  (*depth)++;
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	1c5a      	adds	r2, r3, #1
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     8b8:	2300      	movs	r3, #0
}
     8ba:	4618      	mov	r0, r3
     8bc:	3710      	adds	r7, #16
     8be:	46bd      	mov	sp, r7
     8c0:	bd80      	pop	{r7, pc}
     8c2:	bf00      	nop
     8c4:	00006808 	.word	0x00006808

000008c8 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b084      	sub	sp, #16
     8cc:	af00      	add	r7, sp, #0
     8ce:	4603      	mov	r3, r0
     8d0:	6039      	str	r1, [r7, #0]
     8d2:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     8d8:	f107 030c 	add.w	r3, r7, #12
     8dc:	4619      	mov	r1, r3
     8de:	481a      	ldr	r0, [pc, #104]	; (948 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     8e0:	f005 fd14 	bl	630c <_Unwind_Backtrace>
    if (final_address)
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d005      	beq.n	8f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	683a      	ldr	r2, [r7, #0]
     8ee:	4619      	mov	r1, r3
     8f0:	4816      	ldr	r0, [pc, #88]	; (94c <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     8f2:	f003 fe0d 	bl	4510 <printf>
    }

    if (show_make_command)
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d020      	beq.n	93e <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     8fc:	4814      	ldr	r0, [pc, #80]	; (950 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     8fe:	f003 fe07 	bl	4510 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     902:	4814      	ldr	r0, [pc, #80]	; (954 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     904:	f003 fe04 	bl	4510 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     908:	2000      	movs	r0, #0
     90a:	f7ff ff63 	bl	7d4 <sjsu::build::Stringify(sjsu::build::Target)>
     90e:	4603      	mov	r3, r0
     910:	4619      	mov	r1, r3
     912:	4811      	ldr	r0, [pc, #68]	; (958 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     914:	f003 fdfc 	bl	4510 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     918:	f107 030c 	add.w	r3, r7, #12
     91c:	4619      	mov	r1, r3
     91e:	480f      	ldr	r0, [pc, #60]	; (95c <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     920:	f005 fcf4 	bl	630c <_Unwind_Backtrace>
      if (final_address)
     924:	683b      	ldr	r3, [r7, #0]
     926:	2b00      	cmp	r3, #0
     928:	d003      	beq.n	932 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     92a:	6839      	ldr	r1, [r7, #0]
     92c:	480c      	ldr	r0, [pc, #48]	; (960 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     92e:	f003 fdef 	bl	4510 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     932:	480c      	ldr	r0, [pc, #48]	; (964 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     934:	f003 fdec 	bl	4510 <printf>
      printf(
     938:	480b      	ldr	r0, [pc, #44]	; (968 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     93a:	f002 fccd 	bl	32d8 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     93e:	bf00      	nop
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	0000083d 	.word	0x0000083d
     94c:	00006810 	.word	0x00006810
     950:	0000681c 	.word	0x0000681c
     954:	00006854 	.word	0x00006854
     958:	00006860 	.word	0x00006860
     95c:	00000885 	.word	0x00000885
     960:	0000687c 	.word	0x0000687c
     964:	00006884 	.word	0x00006884
     968:	0000688c 	.word	0x0000688c

0000096c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     96c:	b490      	push	{r4, r7}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     976:	683b      	ldr	r3, [r7, #0]
     978:	e9d3 3400 	ldrd	r3, r4, [r3]
     97c:	687a      	ldr	r2, [r7, #4]
     97e:	e9c2 3400 	strd	r3, r4, [r2]
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	3708      	adds	r7, #8
     988:	46bd      	mov	sp, r7
     98a:	bc90      	pop	{r4, r7}
     98c:	4770      	bx	lr
     98e:	Address 0x000000000000098e is out of bounds.


00000990 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     990:	b580      	push	{r7, lr}
     992:	b082      	sub	sp, #8
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	4903      	ldr	r1, [pc, #12]	; (9ac <sjsu::DefaultUptime()+0x1c>)
     99e:	4618      	mov	r0, r3
     9a0:	f001 ff47 	bl	2832 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	3708      	adds	r7, #8
     9a8:	46bd      	mov	sp, r7
     9aa:	bd80      	pop	{r7, pc}
     9ac:	10000110 	.word	0x10000110

000009b0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     9b0:	b480      	push	{r7}
     9b2:	b083      	sub	sp, #12
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
     9b8:	2300      	movs	r3, #0
     9ba:	4618      	mov	r0, r3
     9bc:	370c      	adds	r7, #12
     9be:	46bd      	mov	sp, r7
     9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9c4:	4770      	bx	lr

000009c6 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     9c6:	b580      	push	{r7, lr}
     9c8:	af00      	add	r7, sp, #0
     9ca:	2000      	movs	r0, #0
     9cc:	f7ff fff0 	bl	9b0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     9d0:	4603      	mov	r3, r0
     9d2:	4618      	mov	r0, r3
     9d4:	bd80      	pop	{r7, pc}
     9d6:	Address 0x00000000000009d6 is out of bounds.


000009d8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     9d8:	b590      	push	{r4, r7, lr}
     9da:	b093      	sub	sp, #76	; 0x4c
     9dc:	af00      	add	r7, sp, #0
     9de:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     9e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
     9ea:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     9ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
     9f2:	4618      	mov	r0, r3
     9f4:	f001 fd73 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     9f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
     9fc:	f107 0318 	add.w	r3, r7, #24
     a00:	4611      	mov	r1, r2
     a02:	4618      	mov	r0, r3
     a04:	f001 ff30 	bl	2868 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     a08:	4603      	mov	r3, r0
     a0a:	2b00      	cmp	r3, #0
     a0c:	d004      	beq.n	a18 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     a0e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     a12:	e9c7 3404 	strd	r3, r4, [r7, #16]
     a16:	e011      	b.n	a3c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     a18:	4b19      	ldr	r3, [pc, #100]	; (a80 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
     a20:	4610      	mov	r0, r2
     a22:	4798      	blx	r3
     a24:	463b      	mov	r3, r7
     a26:	f107 0218 	add.w	r2, r7, #24
     a2a:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a2e:	4618      	mov	r0, r3
     a30:	f002 f8aa 	bl	2b88 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     a34:	e9d7 3400 	ldrd	r3, r4, [r7]
     a38:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     a3c:	2301      	movs	r3, #1
     a3e:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     a40:	4b0f      	ldr	r3, [pc, #60]	; (a80 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	f107 0228 	add.w	r2, r7, #40	; 0x28
     a48:	4610      	mov	r0, r2
     a4a:	4798      	blx	r3
     a4c:	f107 0210 	add.w	r2, r7, #16
     a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
     a54:	4611      	mov	r1, r2
     a56:	4618      	mov	r0, r3
     a58:	f002 f8c3 	bl	2be2 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     a5c:	4603      	mov	r3, r0
     a5e:	2b00      	cmp	r3, #0
     a60:	d009      	beq.n	a76 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
     a66:	4618      	mov	r0, r3
     a68:	f7ff ffa2 	bl	9b0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     a6c:	4603      	mov	r3, r0
     a6e:	2b00      	cmp	r3, #0
     a70:	d0e6      	beq.n	a40 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     a72:	2300      	movs	r3, #0
     a74:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     a78:	4618      	mov	r0, r3
     a7a:	374c      	adds	r7, #76	; 0x4c
     a7c:	46bd      	mov	sp, r7
     a7e:	bd90      	pop	{r4, r7, pc}
     a80:	10000000 	.word	0x10000000

00000a84 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
     a92:	f7ff ffa1 	bl	9d8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     a96:	bf00      	nop
     a98:	3708      	adds	r7, #8
     a9a:	46bd      	mov	sp, r7
     a9c:	bd80      	pop	{r7, pc}

00000a9e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     a9e:	b490      	push	{r4, r7}
     aa0:	b082      	sub	sp, #8
     aa2:	af00      	add	r7, sp, #0
     aa4:	6078      	str	r0, [r7, #4]
     aa6:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     aa8:	683b      	ldr	r3, [r7, #0]
     aaa:	e9d3 3400 	ldrd	r3, r4, [r3]
     aae:	687a      	ldr	r2, [r7, #4]
     ab0:	e9c2 3400 	strd	r3, r4, [r2]
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	4618      	mov	r0, r3
     ab8:	3708      	adds	r7, #8
     aba:	46bd      	mov	sp, r7
     abc:	bc90      	pop	{r4, r7}
     abe:	4770      	bx	lr

00000ac0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     ac0:	b490      	push	{r4, r7}
     ac2:	b082      	sub	sp, #8
     ac4:	af00      	add	r7, sp, #0
     ac6:	6078      	str	r0, [r7, #4]
	{ return __r; }
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	e9d3 3400 	ldrd	r3, r4, [r3]
     ace:	4618      	mov	r0, r3
     ad0:	4621      	mov	r1, r4
     ad2:	3708      	adds	r7, #8
     ad4:	46bd      	mov	sp, r7
     ad6:	bc90      	pop	{r4, r7}
     ad8:	4770      	bx	lr

00000ada <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     ada:	b580      	push	{r7, lr}
     adc:	b086      	sub	sp, #24
     ade:	af00      	add	r7, sp, #0
     ae0:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     ae2:	6878      	ldr	r0, [r7, #4]
     ae4:	f000 f808 	bl	af8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     ae8:	eef0 7a40 	vmov.f32	s15, s0
	}
     aec:	eeb0 0a67 	vmov.f32	s0, s15
     af0:	3718      	adds	r7, #24
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	Address 0x0000000000000af6 is out of bounds.


00000af8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     af8:	b480      	push	{r7}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	60f8      	str	r0, [r7, #12]
     b00:	7239      	strb	r1, [r7, #8]
     b02:	713a      	strb	r2, [r7, #4]
     b04:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	edd3 7a00 	vldr	s15, [r3]
     b0c:	ed9f 7a05 	vldr	s14, [pc, #20]	; b24 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     b10:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     b14:	eeb0 0a67 	vmov.f32	s0, s15
     b18:	3714      	adds	r7, #20
     b1a:	46bd      	mov	sp, r7
     b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b20:	4770      	bx	lr
     b22:	bf00      	nop
     b24:	49742400 	.word	0x49742400

00000b28 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     b28:	b580      	push	{r7, lr}
     b2a:	b084      	sub	sp, #16
     b2c:	af00      	add	r7, sp, #0
     b2e:	6078      	str	r0, [r7, #4]
     b30:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     b32:	2100      	movs	r1, #0
     b34:	6878      	ldr	r0, [r7, #4]
     b36:	f000 f8e3 	bl	d00 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     b3a:	f04f 000c 	mov.w	r0, #12
     b3e:	f04f 0100 	mov.w	r1, #0
     b42:	f7ff fd3f 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     b46:	4603      	mov	r3, r0
     b48:	60bb      	str	r3, [r7, #8]
     b4a:	f107 0208 	add.w	r2, r7, #8
     b4e:	463b      	mov	r3, r7
     b50:	4611      	mov	r1, r2
     b52:	4618      	mov	r0, r3
     b54:	f001 feaf 	bl	28b6 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     b58:	4603      	mov	r3, r0
     b5a:	2b00      	cmp	r3, #0
     b5c:	d00f      	beq.n	b7e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     b5e:	4b16      	ldr	r3, [pc, #88]	; (bb8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     b60:	683a      	ldr	r2, [r7, #0]
     b62:	6819      	ldr	r1, [r3, #0]
     b64:	6878      	ldr	r0, [r7, #4]
     b66:	f000 fadf 	bl	1128 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     b6a:	2101      	movs	r1, #1
     b6c:	6878      	ldr	r0, [r7, #4]
     b6e:	f000 f8eb 	bl	d48 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     b72:	463b      	mov	r3, r7
     b74:	4619      	mov	r1, r3
     b76:	4811      	ldr	r0, [pc, #68]	; (bbc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     b78:	f001 febb 	bl	28f2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     b7c:	e007      	b.n	b8e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     b7e:	2100      	movs	r1, #0
     b80:	6878      	ldr	r0, [r7, #4]
     b82:	f000 f8e1 	bl	d48 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     b86:	490e      	ldr	r1, [pc, #56]	; (bc0 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     b88:	480c      	ldr	r0, [pc, #48]	; (bbc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     b8a:	f001 feb2 	bl	28f2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     b8e:	2101      	movs	r1, #1
     b90:	6878      	ldr	r0, [r7, #4]
     b92:	f000 fb2d 	bl	11f0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     b96:	23ff      	movs	r3, #255	; 0xff
     b98:	733b      	strb	r3, [r7, #12]
     b9a:	f107 030c 	add.w	r3, r7, #12
     b9e:	2201      	movs	r2, #1
     ba0:	4619      	mov	r1, r3
     ba2:	6878      	ldr	r0, [r7, #4]
     ba4:	f000 f80e 	bl	bc4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     ba8:	2100      	movs	r1, #0
     baa:	6878      	ldr	r0, [r7, #4]
     bac:	f000 fb5e 	bl	126c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     bb0:	bf00      	nop
     bb2:	3710      	adds	r7, #16
     bb4:	46bd      	mov	sp, r7
     bb6:	bd80      	pop	{r7, pc}
     bb8:	00006fc4 	.word	0x00006fc4
     bbc:	10000004 	.word	0x10000004
     bc0:	00006fc8 	.word	0x00006fc8

00000bc4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     bc4:	b580      	push	{r7, lr}
     bc6:	b084      	sub	sp, #16
     bc8:	af00      	add	r7, sp, #0
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	60b9      	str	r1, [r7, #8]
     bce:	4613      	mov	r3, r2
     bd0:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     bd2:	79fb      	ldrb	r3, [r7, #7]
     bd4:	2b04      	cmp	r3, #4
     bd6:	d90d      	bls.n	bf4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     bd8:	23b2      	movs	r3, #178	; 0xb2
     bda:	4a0b      	ldr	r2, [pc, #44]	; (c08 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     bdc:	490b      	ldr	r1, [pc, #44]	; (c0c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     bde:	480c      	ldr	r0, [pc, #48]	; (c10 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     be0:	f003 fc96 	bl	4510 <printf>
     be4:	480b      	ldr	r0, [pc, #44]	; (c14 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     be6:	f002 fb77 	bl	32d8 <puts>
     bea:	2100      	movs	r1, #0
     bec:	2001      	movs	r0, #1
     bee:	f7ff fe6b 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
     bf2:	e7fe      	b.n	bf2 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     bf4:	4b08      	ldr	r3, [pc, #32]	; (c18 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	79fa      	ldrb	r2, [r7, #7]
     bfa:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     bfe:	bf00      	nop
     c00:	3710      	adds	r7, #16
     c02:	46bd      	mov	sp, r7
     c04:	bd80      	pop	{r7, pc}
     c06:	bf00      	nop
     c08:	000071e0 	.word	0x000071e0
     c0c:	00006fe4 	.word	0x00006fe4
     c10:	000068e0 	.word	0x000068e0
     c14:	00006980 	.word	0x00006980
     c18:	10000118 	.word	0x10000118

00000c1c <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     c1c:	b480      	push	{r7}
     c1e:	b083      	sub	sp, #12
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
     c24:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     c26:	4b05      	ldr	r3, [pc, #20]	; (c3c <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     c28:	681b      	ldr	r3, [r3, #0]
     c2a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     c2e:	4618      	mov	r0, r3
     c30:	370c      	adds	r7, #12
     c32:	46bd      	mov	sp, r7
     c34:	f85d 7b04 	ldr.w	r7, [sp], #4
     c38:	4770      	bx	lr
     c3a:	bf00      	nop
     c3c:	10000118 	.word	0x10000118

00000c40 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     c40:	b480      	push	{r7}
     c42:	b083      	sub	sp, #12
     c44:	af00      	add	r7, sp, #0
     c46:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     c4a:	681b      	ldr	r3, [r3, #0]
  }
     c4c:	4618      	mov	r0, r3
     c4e:	370c      	adds	r7, #12
     c50:	46bd      	mov	sp, r7
     c52:	f85d 7b04 	ldr.w	r7, [sp], #4
     c56:	4770      	bx	lr
     c58:	10000004 	.word	0x10000004

00000c5c <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     c5c:	b480      	push	{r7}
     c5e:	b085      	sub	sp, #20
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
     c64:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     c66:	4b0b      	ldr	r3, [pc, #44]	; (c94 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     c6e:	683a      	ldr	r2, [r7, #0]
     c70:	7812      	ldrb	r2, [r2, #0]
     c72:	4611      	mov	r1, r2
     c74:	2201      	movs	r2, #1
     c76:	408a      	lsls	r2, r1
     c78:	4013      	ands	r3, r2
     c7a:	2b00      	cmp	r3, #0
     c7c:	bf14      	ite	ne
     c7e:	2301      	movne	r3, #1
     c80:	2300      	moveq	r3, #0
     c82:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     c84:	7bfb      	ldrb	r3, [r7, #15]
  }
     c86:	4618      	mov	r0, r3
     c88:	3714      	adds	r7, #20
     c8a:	46bd      	mov	sp, r7
     c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	10000118 	.word	0x10000118

00000c98 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     c98:	b590      	push	{r4, r7, lr}
     c9a:	b083      	sub	sp, #12
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
     ca0:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     ca2:	4b09      	ldr	r3, [pc, #36]	; (cc8 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     caa:	683b      	ldr	r3, [r7, #0]
     cac:	781b      	ldrb	r3, [r3, #0]
     cae:	4619      	mov	r1, r3
    system_controller->PCONP =
     cb0:	4b05      	ldr	r3, [pc, #20]	; (cc8 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     cb2:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     cb4:	4610      	mov	r0, r2
     cb6:	f001 fe2f 	bl	2918 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     cba:	4603      	mov	r3, r0
    system_controller->PCONP =
     cbc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     cc0:	bf00      	nop
     cc2:	370c      	adds	r7, #12
     cc4:	46bd      	mov	sp, r7
     cc6:	bd90      	pop	{r4, r7, pc}
     cc8:	10000118 	.word	0x10000118

00000ccc <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     ccc:	b590      	push	{r4, r7, lr}
     cce:	b083      	sub	sp, #12
     cd0:	af00      	add	r7, sp, #0
     cd2:	6078      	str	r0, [r7, #4]
     cd4:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     cd6:	4b09      	ldr	r3, [pc, #36]	; (cfc <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     cde:	683b      	ldr	r3, [r7, #0]
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	4619      	mov	r1, r3
    system_controller->PCONP =
     ce4:	4b05      	ldr	r3, [pc, #20]	; (cfc <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     ce6:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     ce8:	4610      	mov	r0, r2
     cea:	f001 fe27 	bl	293c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     cee:	4603      	mov	r3, r0
    system_controller->PCONP =
     cf0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     cf4:	bf00      	nop
     cf6:	370c      	adds	r7, #12
     cf8:	46bd      	mov	sp, r7
     cfa:	bd90      	pop	{r4, r7, pc}
     cfc:	10000118 	.word	0x10000118

00000d00 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     d00:	b590      	push	{r4, r7, lr}
     d02:	b083      	sub	sp, #12
     d04:	af00      	add	r7, sp, #0
     d06:	6078      	str	r0, [r7, #4]
     d08:	460b      	mov	r3, r1
     d0a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     d0c:	4b0c      	ldr	r3, [pc, #48]	; (d40 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     d14:	8879      	ldrh	r1, [r7, #2]
     d16:	4b0a      	ldr	r3, [pc, #40]	; (d40 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     d18:	681c      	ldr	r4, [r3, #0]
     d1a:	4b0a      	ldr	r3, [pc, #40]	; (d44 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     d1c:	781a      	ldrb	r2, [r3, #0]
     d1e:	785b      	ldrb	r3, [r3, #1]
     d20:	021b      	lsls	r3, r3, #8
     d22:	431a      	orrs	r2, r3
     d24:	2300      	movs	r3, #0
     d26:	f362 030f 	bfi	r3, r2, #0, #16
     d2a:	461a      	mov	r2, r3
     d2c:	f001 fe19 	bl	2962 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     d30:	4603      	mov	r3, r0
     d32:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     d36:	bf00      	nop
     d38:	370c      	adds	r7, #12
     d3a:	46bd      	mov	sp, r7
     d3c:	bd90      	pop	{r4, r7, pc}
     d3e:	bf00      	nop
     d40:	10000118 	.word	0x10000118
     d44:	00006fcc 	.word	0x00006fcc

00000d48 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     d48:	b590      	push	{r4, r7, lr}
     d4a:	b083      	sub	sp, #12
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
     d50:	460b      	mov	r3, r1
     d52:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     d54:	4b0c      	ldr	r3, [pc, #48]	; (d88 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     d5c:	8879      	ldrh	r1, [r7, #2]
     d5e:	4b0a      	ldr	r3, [pc, #40]	; (d88 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     d60:	681c      	ldr	r4, [r3, #0]
     d62:	4b0a      	ldr	r3, [pc, #40]	; (d8c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     d64:	781a      	ldrb	r2, [r3, #0]
     d66:	785b      	ldrb	r3, [r3, #1]
     d68:	021b      	lsls	r3, r3, #8
     d6a:	431a      	orrs	r2, r3
     d6c:	2300      	movs	r3, #0
     d6e:	f362 030f 	bfi	r3, r2, #0, #16
     d72:	461a      	mov	r2, r3
     d74:	f001 fdf5 	bl	2962 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     d78:	4603      	mov	r3, r0
     d7a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     d7e:	bf00      	nop
     d80:	370c      	adds	r7, #12
     d82:	46bd      	mov	sp, r7
     d84:	bd90      	pop	{r4, r7, pc}
     d86:	bf00      	nop
     d88:	10000118 	.word	0x10000118
     d8c:	00006fd8 	.word	0x00006fd8

00000d90 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     d90:	b590      	push	{r4, r7, lr}
     d92:	b083      	sub	sp, #12
     d94:	af00      	add	r7, sp, #0
     d96:	6078      	str	r0, [r7, #4]
     d98:	460b      	mov	r3, r1
     d9a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     da4:	8879      	ldrh	r1, [r7, #2]
     da6:	4b0a      	ldr	r3, [pc, #40]	; (dd0 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     da8:	681c      	ldr	r4, [r3, #0]
     daa:	4b0a      	ldr	r3, [pc, #40]	; (dd4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     dac:	781a      	ldrb	r2, [r3, #0]
     dae:	785b      	ldrb	r3, [r3, #1]
     db0:	021b      	lsls	r3, r3, #8
     db2:	431a      	orrs	r2, r3
     db4:	2300      	movs	r3, #0
     db6:	f362 030f 	bfi	r3, r2, #0, #16
     dba:	461a      	mov	r2, r3
     dbc:	f001 fdd1 	bl	2962 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     dc0:	4603      	mov	r3, r0
     dc2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     dc6:	bf00      	nop
     dc8:	370c      	adds	r7, #12
     dca:	46bd      	mov	sp, r7
     dcc:	bd90      	pop	{r4, r7, pc}
     dce:	bf00      	nop
     dd0:	10000118 	.word	0x10000118
     dd4:	00006fdc 	.word	0x00006fdc

00000dd8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     dd8:	b590      	push	{r4, r7, lr}
     dda:	b083      	sub	sp, #12
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]
     de0:	460b      	mov	r3, r1
     de2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     dec:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     df0:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     df4:	781a      	ldrb	r2, [r3, #0]
     df6:	785b      	ldrb	r3, [r3, #1]
     df8:	021b      	lsls	r3, r3, #8
     dfa:	431a      	orrs	r2, r3
     dfc:	2300      	movs	r3, #0
     dfe:	f362 030f 	bfi	r3, r2, #0, #16
     e02:	461a      	mov	r2, r3
     e04:	f001 fdad 	bl	2962 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     e08:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     e0a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     e0e:	bf00      	nop
     e10:	370c      	adds	r7, #12
     e12:	46bd      	mov	sp, r7
     e14:	bd90      	pop	{r4, r7, pc}
     e16:	bf00      	nop
     e18:	10000118 	.word	0x10000118
     e1c:	00006fe0 	.word	0x00006fe0

00000e20 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     e20:	b580      	push	{r7, lr}
     e22:	ed2d 8b02 	vpush	{d8}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
     e2c:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	ed93 8a00 	vldr	s16, [r3]
     e34:	683b      	ldr	r3, [r7, #0]
     e36:	4618      	mov	r0, r3
     e38:	f7ff fbfb 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     e3c:	eef0 7a40 	vmov.f32	s15, s0
     e40:	eeb4 8ae7 	vcmpe.f32	s16, s15
     e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e48:	bf4c      	ite	mi
     e4a:	2301      	movmi	r3, #1
     e4c:	2300      	movpl	r3, #0
     e4e:	b2db      	uxtb	r3, r3
		}
     e50:	4618      	mov	r0, r3
     e52:	3708      	adds	r7, #8
     e54:	46bd      	mov	sp, r7
     e56:	ecbd 8b02 	vpop	{d8}
     e5a:	bd80      	pop	{r7, pc}

00000e5c <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     e5c:	b580      	push	{r7, lr}
     e5e:	b082      	sub	sp, #8
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     e64:	6878      	ldr	r0, [r7, #4]
     e66:	f000 f805 	bl	e74 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     e6a:	4603      	mov	r3, r0
		}
     e6c:	4618      	mov	r0, r3
     e6e:	3708      	adds	r7, #8
     e70:	46bd      	mov	sp, r7
     e72:	bd80      	pop	{r7, pc}

00000e74 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e74:	b580      	push	{r7, lr}
     e76:	b082      	sub	sp, #8
     e78:	af00      	add	r7, sp, #0
     e7a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	4618      	mov	r0, r3
     e80:	f000 f80a 	bl	e98 <units::linear_scale<float>::operator()() const>
     e84:	eef0 7a40 	vmov.f32	s15, s0
     e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e8c:	ee17 3a90 	vmov	r3, s15
		}
     e90:	4618      	mov	r0, r3
     e92:	3708      	adds	r7, #8
     e94:	46bd      	mov	sp, r7
     e96:	bd80      	pop	{r7, pc}

00000e98 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     e98:	b480      	push	{r7}
     e9a:	b083      	sub	sp, #12
     e9c:	af00      	add	r7, sp, #0
     e9e:	6078      	str	r0, [r7, #4]
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	ee07 3a90 	vmov	s15, r3
     ea8:	eeb0 0a67 	vmov.f32	s0, s15
     eac:	370c      	adds	r7, #12
     eae:	46bd      	mov	sp, r7
     eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     eb4:	4770      	bx	lr

00000eb6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     eb6:	b580      	push	{r7, lr}
     eb8:	ed2d 8b02 	vpush	{d8}
     ebc:	b084      	sub	sp, #16
     ebe:	af00      	add	r7, sp, #0
     ec0:	6078      	str	r0, [r7, #4]
     ec2:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	4618      	mov	r0, r3
     ec8:	f7ff ffe6 	bl	e98 <units::linear_scale<float>::operator()() const>
     ecc:	eeb0 8a40 	vmov.f32	s16, s0
     ed0:	683b      	ldr	r3, [r7, #0]
     ed2:	4618      	mov	r0, r3
     ed4:	f7ff ffe0 	bl	e98 <units::linear_scale<float>::operator()() const>
     ed8:	eef0 7a40 	vmov.f32	s15, s0
     edc:	edc7 7a03 	vstr	s15, [r7, #12]
     ee0:	f107 030c 	add.w	r3, r7, #12
     ee4:	4618      	mov	r0, r3
     ee6:	f7ff fba4 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     eea:	eeb0 7a40 	vmov.f32	s14, s0
     eee:	eec8 7a07 	vdiv.f32	s15, s16, s14
     ef2:	f107 0308 	add.w	r3, r7, #8
     ef6:	eeb0 0a67 	vmov.f32	s0, s15
     efa:	4618      	mov	r0, r3
     efc:	f000 f807 	bl	f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     f00:	68bb      	ldr	r3, [r7, #8]
	}
     f02:	4618      	mov	r0, r3
     f04:	3710      	adds	r7, #16
     f06:	46bd      	mov	sp, r7
     f08:	ecbd 8b02 	vpop	{d8}
     f0c:	bd80      	pop	{r7, pc}

00000f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     f0e:	b580      	push	{r7, lr}
     f10:	b082      	sub	sp, #8
     f12:	af00      	add	r7, sp, #0
     f14:	6078      	str	r0, [r7, #4]
     f16:	ed87 0a00 	vstr	s0, [r7]
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	463a      	mov	r2, r7
     f1e:	4611      	mov	r1, r2
     f20:	4618      	mov	r0, r3
     f22:	f7ff fb76 	bl	612 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	4618      	mov	r0, r3
     f2a:	3708      	adds	r7, #8
     f2c:	46bd      	mov	sp, r7
     f2e:	bd80      	pop	{r7, pc}

00000f30 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     f30:	b580      	push	{r7, lr}
     f32:	b084      	sub	sp, #16
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]
     f38:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	4618      	mov	r0, r3
     f3e:	f7ff ffab 	bl	e98 <units::linear_scale<float>::operator()() const>
     f42:	eeb0 7a40 	vmov.f32	s14, s0
     f46:	683b      	ldr	r3, [r7, #0]
     f48:	ee07 3a90 	vmov	s15, r3
     f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     f50:	ee77 7a27 	vadd.f32	s15, s14, s15
     f54:	f107 030c 	add.w	r3, r7, #12
     f58:	eeb0 0a67 	vmov.f32	s0, s15
     f5c:	4618      	mov	r0, r3
     f5e:	f7ff ffd6 	bl	f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     f62:	68fb      	ldr	r3, [r7, #12]
	}
     f64:	4618      	mov	r0, r3
     f66:	3710      	adds	r7, #16
     f68:	46bd      	mov	sp, r7
     f6a:	bd80      	pop	{r7, pc}

00000f6c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     f6c:	b580      	push	{r7, lr}
     f6e:	b082      	sub	sp, #8
     f70:	af00      	add	r7, sp, #0
     f72:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	4618      	mov	r0, r3
     f78:	f7ff ff8e 	bl	e98 <units::linear_scale<float>::operator()() const>
     f7c:	eef0 7a40 	vmov.f32	s15, s0
     f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     f84:	ee17 3a90 	vmov	r3, s15
     f88:	b29b      	uxth	r3, r3
		}
     f8a:	4618      	mov	r0, r3
     f8c:	3708      	adds	r7, #8
     f8e:	46bd      	mov	sp, r7
     f90:	bd80      	pop	{r7, pc}
     f92:	Address 0x0000000000000f92 is out of bounds.


00000f94 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     f94:	b590      	push	{r4, r7, lr}
     f96:	b08d      	sub	sp, #52	; 0x34
     f98:	af00      	add	r7, sp, #0
     f9a:	60f8      	str	r0, [r7, #12]
     f9c:	60b9      	str	r1, [r7, #8]
     f9e:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     fa0:	f44f 70c0 	mov.w	r0, #384	; 0x180
     fa4:	f04f 0100 	mov.w	r1, #0
     fa8:	f7ff fb0c 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     fac:	4603      	mov	r3, r0
     fae:	613b      	str	r3, [r7, #16]
     fb0:	f107 0210 	add.w	r2, r7, #16
     fb4:	1d3b      	adds	r3, r7, #4
     fb6:	4611      	mov	r1, r2
     fb8:	4618      	mov	r0, r3
     fba:	f7ff ff31 	bl	e20 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     fbe:	4603      	mov	r3, r0
     fc0:	f083 0301 	eor.w	r3, r3, #1
     fc4:	b2db      	uxtb	r3, r3
     fc6:	2b00      	cmp	r3, #0
     fc8:	d114      	bne.n	ff4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     fca:	f04f 000c 	mov.w	r0, #12
     fce:	f04f 0100 	mov.w	r1, #0
     fd2:	f7ff faf7 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
     fd6:	4603      	mov	r3, r0
     fd8:	617b      	str	r3, [r7, #20]
     fda:	f107 0214 	add.w	r2, r7, #20
     fde:	1d3b      	adds	r3, r7, #4
     fe0:	4611      	mov	r1, r2
     fe2:	4618      	mov	r0, r3
     fe4:	f001 fc67 	bl	28b6 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     fe8:	4603      	mov	r3, r0
     fea:	f083 0301 	eor.w	r3, r3, #1
     fee:	b2db      	uxtb	r3, r3
     ff0:	2b00      	cmp	r3, #0
     ff2:	d001      	beq.n	ff8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     ff4:	2301      	movs	r3, #1
     ff6:	e000      	b.n	ffa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     ff8:	2300      	movs	r3, #0
     ffa:	2b00      	cmp	r3, #0
     ffc:	d00d      	beq.n	101a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     ffe:	23f6      	movs	r3, #246	; 0xf6
    1000:	4a43      	ldr	r2, [pc, #268]	; (1110 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    1002:	4944      	ldr	r1, [pc, #272]	; (1114 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    1004:	4844      	ldr	r0, [pc, #272]	; (1118 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    1006:	f003 fa83 	bl	4510 <printf>
    100a:	4844      	ldr	r0, [pc, #272]	; (111c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    100c:	f002 f964 	bl	32d8 <puts>
    1010:	2100      	movs	r1, #0
    1012:	2001      	movs	r0, #1
    1014:	f7ff fc58 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1018:	e7fe      	b.n	1018 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    101a:	2301      	movs	r3, #1
    101c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    1020:	1d3b      	adds	r3, r7, #4
    1022:	4618      	mov	r0, r3
    1024:	f7ff ff1a 	bl	e5c <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1028:	4604      	mov	r4, r0
    102a:	f107 0308 	add.w	r3, r7, #8
    102e:	4618      	mov	r0, r3
    1030:	f7ff ff14 	bl	e5c <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1034:	4603      	mov	r3, r0
    1036:	fbb4 f2f3 	udiv	r2, r4, r3
    103a:	fb03 f302 	mul.w	r3, r3, r2
    103e:	1ae3      	subs	r3, r4, r3
    1040:	2b00      	cmp	r3, #0
    1042:	bf14      	ite	ne
    1044:	2301      	movne	r3, #1
    1046:	2300      	moveq	r3, #0
    1048:	b2db      	uxtb	r3, r3
    104a:	2b00      	cmp	r3, #0
    104c:	d017      	beq.n	107e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    104e:	f107 0208 	add.w	r2, r7, #8
    1052:	1d3b      	adds	r3, r7, #4
    1054:	4611      	mov	r1, r2
    1056:	4618      	mov	r0, r3
    1058:	f7ff ff2d 	bl	eb6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    105c:	4603      	mov	r3, r0
    105e:	61fb      	str	r3, [r7, #28]
    1060:	f107 031c 	add.w	r3, r7, #28
    1064:	2101      	movs	r1, #1
    1066:	4618      	mov	r0, r3
    1068:	f7ff ff62 	bl	f30 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    106c:	4603      	mov	r3, r0
    106e:	61bb      	str	r3, [r7, #24]
      multiplier_value =
    1070:	f107 0318 	add.w	r3, r7, #24
    1074:	4618      	mov	r0, r3
    1076:	f001 fc86 	bl	2986 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    107a:	62b8      	str	r0, [r7, #40]	; 0x28
    107c:	e00e      	b.n	109c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    107e:	f107 0208 	add.w	r2, r7, #8
    1082:	1d3b      	adds	r3, r7, #4
    1084:	4611      	mov	r1, r2
    1086:	4618      	mov	r0, r3
    1088:	f7ff ff15 	bl	eb6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    108c:	4603      	mov	r3, r0
    108e:	623b      	str	r3, [r7, #32]
      multiplier_value =
    1090:	f107 0320 	add.w	r3, r7, #32
    1094:	4618      	mov	r0, r3
    1096:	f001 fc76 	bl	2986 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    109a:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    109c:	2301      	movs	r3, #1
    109e:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    10a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10a4:	2b00      	cmp	r3, #0
    10a6:	d02d      	beq.n	1104 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    10a8:	f107 0308 	add.w	r3, r7, #8
    10ac:	4618      	mov	r0, r3
    10ae:	f7ff ff5d 	bl	f6c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    10b2:	4603      	mov	r3, r0
    10b4:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    10b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10b8:	b29b      	uxth	r3, r3
    10ba:	fb12 f303 	smulbb	r3, r2, r3
    10be:	b29b      	uxth	r3, r3
    10c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    10c2:	fb12 f303 	smulbb	r3, r2, r3
    10c6:	b29b      	uxth	r3, r3
    10c8:	005b      	lsls	r3, r3, #1
    10ca:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    10cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    10ce:	2b9b      	cmp	r3, #155	; 0x9b
    10d0:	d903      	bls.n	10da <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
    10d2:	2300      	movs	r3, #0
    10d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    10d8:	e7e2      	b.n	10a0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    10da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    10dc:	005b      	lsls	r3, r3, #1
    10de:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    10e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    10e2:	2b07      	cmp	r3, #7
    10e4:	d9dc      	bls.n	10a0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
    10e6:	f44f 7389 	mov.w	r3, #274	; 0x112
    10ea:	4a09      	ldr	r2, [pc, #36]	; (1110 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    10ec:	490c      	ldr	r1, [pc, #48]	; (1120 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    10ee:	480d      	ldr	r0, [pc, #52]	; (1124 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    10f0:	f003 fa0e 	bl	4510 <printf>
    10f4:	4809      	ldr	r0, [pc, #36]	; (111c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    10f6:	f002 f8ef 	bl	32d8 <puts>
    10fa:	2100      	movs	r1, #0
    10fc:	2001      	movs	r0, #1
    10fe:	f7ff fbe3 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1102:	e7fe      	b.n	1102 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    1104:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    1106:	4618      	mov	r0, r3
    1108:	3734      	adds	r7, #52	; 0x34
    110a:	46bd      	mov	sp, r7
    110c:	bd90      	pop	{r4, r7, pc}
    110e:	bf00      	nop
    1110:	00007264 	.word	0x00007264
    1114:	00006ffc 	.word	0x00006ffc
    1118:	00006998 	.word	0x00006998
    111c:	00006980 	.word	0x00006980
    1120:	00007014 	.word	0x00007014
    1124:	00006a88 	.word	0x00006a88

00001128 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    1128:	b580      	push	{r7, lr}
    112a:	b086      	sub	sp, #24
    112c:	af00      	add	r7, sp, #0
    112e:	60f8      	str	r0, [r7, #12]
    1130:	60b9      	str	r1, [r7, #8]
    1132:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    1134:	2301      	movs	r3, #1
    1136:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	68b9      	ldr	r1, [r7, #8]
    113c:	68f8      	ldr	r0, [r7, #12]
    113e:	f7ff ff29 	bl	f94 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    1142:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1144:	2100      	movs	r1, #0
    1146:	68f8      	ldr	r0, [r7, #12]
    1148:	f7ff fdda 	bl	d00 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    114c:	2100      	movs	r1, #0
    114e:	68f8      	ldr	r0, [r7, #12]
    1150:	f7ff fdfa 	bl	d48 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1154:	2100      	movs	r1, #0
    1156:	68f8      	ldr	r0, [r7, #12]
    1158:	f7ff fe1a 	bl	d90 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    115c:	2100      	movs	r1, #0
    115e:	68f8      	ldr	r0, [r7, #12]
    1160:	f7ff fe3a 	bl	dd8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1164:	4b21      	ldr	r3, [pc, #132]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    116c:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1170:	693b      	ldr	r3, [r7, #16]
    1172:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1174:	4b1d      	ldr	r3, [pc, #116]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1176:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1178:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    117a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    117e:	4b1b      	ldr	r3, [pc, #108]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1186:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    118a:	8afb      	ldrh	r3, [r7, #22]
    118c:	015b      	lsls	r3, r3, #5
    118e:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1190:	4b16      	ldr	r3, [pc, #88]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1192:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1194:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    1196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    119a:	4b14      	ldr	r3, [pc, #80]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    119c:	681b      	ldr	r3, [r3, #0]
    119e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    11a2:	4b12      	ldr	r3, [pc, #72]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    11a4:	681b      	ldr	r3, [r3, #0]
    11a6:	f042 0201 	orr.w	r2, r2, #1
    11aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    11ae:	4b0f      	ldr	r3, [pc, #60]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	22aa      	movs	r2, #170	; 0xaa
    11b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    11b8:	4b0c      	ldr	r3, [pc, #48]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	2255      	movs	r2, #85	; 0x55
    11be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    11c2:	4b0a      	ldr	r3, [pc, #40]	; (11ec <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    11ca:	210a      	movs	r1, #10
    11cc:	4618      	mov	r0, r3
    11ce:	f001 fbf5 	bl	29bc <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    11d2:	4603      	mov	r3, r0
    11d4:	f083 0301 	eor.w	r3, r3, #1
    11d8:	b2db      	uxtb	r3, r3
    11da:	2b00      	cmp	r3, #0
    11dc:	d001      	beq.n	11e2 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    11de:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    11e0:	e7ef      	b.n	11c2 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    11e2:	bf00      	nop
    11e4:	3718      	adds	r7, #24
    11e6:	46bd      	mov	sp, r7
    11e8:	bd80      	pop	{r7, pc}
    11ea:	bf00      	nop
    11ec:	10000118 	.word	0x10000118

000011f0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    11f0:	b590      	push	{r4, r7, lr}
    11f2:	b083      	sub	sp, #12
    11f4:	af00      	add	r7, sp, #0
    11f6:	6078      	str	r0, [r7, #4]
    11f8:	460b      	mov	r3, r1
    11fa:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    11fc:	78fb      	ldrb	r3, [r7, #3]
    11fe:	2b1f      	cmp	r3, #31
    1200:	d90e      	bls.n	1220 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    1202:	f44f 73a9 	mov.w	r3, #338	; 0x152
    1206:	4a13      	ldr	r2, [pc, #76]	; (1254 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    1208:	4913      	ldr	r1, [pc, #76]	; (1258 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    120a:	4814      	ldr	r0, [pc, #80]	; (125c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    120c:	f003 f980 	bl	4510 <printf>
    1210:	4813      	ldr	r0, [pc, #76]	; (1260 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    1212:	f002 f861 	bl	32d8 <puts>
    1216:	2100      	movs	r1, #0
    1218:	2001      	movs	r0, #1
    121a:	f7ff fb55 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    121e:	e7fe      	b.n	121e <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    1220:	4b10      	ldr	r3, [pc, #64]	; (1264 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    1222:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    1224:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    1228:	4b0e      	ldr	r3, [pc, #56]	; (1264 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    122a:	681c      	ldr	r4, [r3, #0]
    122c:	4b0e      	ldr	r3, [pc, #56]	; (1268 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    122e:	78f9      	ldrb	r1, [r7, #3]
    1230:	781a      	ldrb	r2, [r3, #0]
    1232:	785b      	ldrb	r3, [r3, #1]
    1234:	021b      	lsls	r3, r3, #8
    1236:	431a      	orrs	r2, r3
    1238:	2300      	movs	r3, #0
    123a:	f362 030f 	bfi	r3, r2, #0, #16
    123e:	461a      	mov	r2, r3
    1240:	f001 fac6 	bl	27d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1244:	4603      	mov	r3, r0
    1246:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    124a:	bf00      	nop
    124c:	370c      	adds	r7, #12
    124e:	46bd      	mov	sp, r7
    1250:	bd90      	pop	{r4, r7, pc}
    1252:	bf00      	nop
    1254:	000072e0 	.word	0x000072e0
    1258:	0000702c 	.word	0x0000702c
    125c:	00006b30 	.word	0x00006b30
    1260:	00006980 	.word	0x00006980
    1264:	10000118 	.word	0x10000118
    1268:	00006fd4 	.word	0x00006fd4

0000126c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    126c:	b590      	push	{r4, r7, lr}
    126e:	b083      	sub	sp, #12
    1270:	af00      	add	r7, sp, #0
    1272:	6078      	str	r0, [r7, #4]
    1274:	460b      	mov	r3, r1
    1276:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    1278:	4b0c      	ldr	r3, [pc, #48]	; (12ac <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1280:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1282:	4b0a      	ldr	r3, [pc, #40]	; (12ac <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1284:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    1286:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    1288:	781a      	ldrb	r2, [r3, #0]
    128a:	785b      	ldrb	r3, [r3, #1]
    128c:	021b      	lsls	r3, r3, #8
    128e:	431a      	orrs	r2, r3
    1290:	2300      	movs	r3, #0
    1292:	f362 030f 	bfi	r3, r2, #0, #16
    1296:	461a      	mov	r2, r3
    1298:	f001 fb63 	bl	2962 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    129c:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    129e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    12a2:	bf00      	nop
    12a4:	370c      	adds	r7, #12
    12a6:	46bd      	mov	sp, r7
    12a8:	bd90      	pop	{r4, r7, pc}
    12aa:	bf00      	nop
    12ac:	10000118 	.word	0x10000118
    12b0:	00006fd0 	.word	0x00006fd0

000012b4 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    12b4:	b480      	push	{r7}
    12b6:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    12b8:	4b02      	ldr	r3, [pc, #8]	; (12c4 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    12ba:	4618      	mov	r0, r3
    12bc:	46bd      	mov	sp, r7
    12be:	f85d 7b04 	ldr.w	r7, [sp], #4
    12c2:	4770      	bx	lr
    12c4:	10000008 	.word	0x10000008

000012c8 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  }
  /// Wait to receive just 1 byte
  ///
  /// @param timeout - The maximum amount of time to wait for a byte to be
  ///        transmitted.
  uint8_t Read(std::chrono::microseconds timeout =
    12c8:	b5b0      	push	{r4, r5, r7, lr}
    12ca:	b088      	sub	sp, #32
    12cc:	af02      	add	r7, sp, #8
    12ce:	60f8      	str	r0, [r7, #12]
    12d0:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    12d4:	68fb      	ldr	r3, [r7, #12]
    12d6:	681b      	ldr	r3, [r3, #0]
    12d8:	330c      	adds	r3, #12
    12da:	681d      	ldr	r5, [r3, #0]
    12dc:	f107 0117 	add.w	r1, r7, #23
    12e0:	e9d7 3400 	ldrd	r3, r4, [r7]
    12e4:	e9cd 3400 	strd	r3, r4, [sp]
    12e8:	2201      	movs	r2, #1
    12ea:	68f8      	ldr	r0, [r7, #12]
    12ec:	47a8      	blx	r5
    12ee:	4603      	mov	r3, r0
    12f0:	2b01      	cmp	r3, #1
    12f2:	bf0c      	ite	eq
    12f4:	2301      	moveq	r3, #1
    12f6:	2300      	movne	r3, #0
    12f8:	b2db      	uxtb	r3, r3
    12fa:	2b00      	cmp	r3, #0
    12fc:	d001      	beq.n	1302 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    12fe:	23ff      	movs	r3, #255	; 0xff
    1300:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    1302:	7dfb      	ldrb	r3, [r7, #23]
  }
    1304:	4618      	mov	r0, r3
    1306:	3718      	adds	r7, #24
    1308:	46bd      	mov	sp, r7
    130a:	bdb0      	pop	{r4, r5, r7, pc}

0000130c <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    130c:	b480      	push	{r7}
    130e:	b089      	sub	sp, #36	; 0x24
    1310:	af00      	add	r7, sp, #0
    1312:	6078      	str	r0, [r7, #4]
    1314:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	2200      	movs	r2, #0
    131c:	601a      	str	r2, [r3, #0]
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	2200      	movs	r2, #0
    1322:	605a      	str	r2, [r3, #4]
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	2201      	movs	r2, #1
    1328:	609a      	str	r2, [r3, #8]
  bool finished = false;
    132a:	2300      	movs	r3, #0
    132c:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    132e:	2300      	movs	r3, #0
    1330:	61bb      	str	r3, [r7, #24]
    1332:	69bb      	ldr	r3, [r7, #24]
    1334:	2b0e      	cmp	r3, #14
    1336:	dc4f      	bgt.n	13d8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    1338:	7ffb      	ldrb	r3, [r7, #31]
    133a:	2b00      	cmp	r3, #0
    133c:	d14c      	bne.n	13d8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    133e:	69bb      	ldr	r3, [r7, #24]
    1340:	3301      	adds	r3, #1
    1342:	617b      	str	r3, [r7, #20]
    1344:	697b      	ldr	r3, [r7, #20]
    1346:	2b0e      	cmp	r3, #14
    1348:	dc42      	bgt.n	13d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    134a:	7ffb      	ldrb	r3, [r7, #31]
    134c:	2b00      	cmp	r3, #0
    134e:	d13f      	bne.n	13d0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    1350:	69bb      	ldr	r3, [r7, #24]
    1352:	ee07 3a90 	vmov	s15, r3
    1356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    135a:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    135e:	697b      	ldr	r3, [r7, #20]
    1360:	ee07 3a90 	vmov	s15, r3
    1364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1368:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    136c:	edd7 6a04 	vldr	s13, [r7, #16]
    1370:	ed97 7a03 	vldr	s14, [r7, #12]
    1374:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    137c:	ee77 7a87 	vadd.f32	s15, s15, s14
    1380:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    1384:	edd7 7a02 	vldr	s15, [r7, #8]
    1388:	ed9f 7a17 	vldr	s14, [pc, #92]	; 13e8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    138c:	ee77 7a87 	vadd.f32	s15, s15, s14
    1390:	ed97 7a00 	vldr	s14, [r7]
    1394:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    139c:	d814      	bhi.n	13c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    139e:	edd7 7a02 	vldr	s15, [r7, #8]
    13a2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 13e8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    13a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    13aa:	ed97 7a00 	vldr	s14, [r7]
    13ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
    13b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13b6:	db07      	blt.n	13c8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    13b8:	69ba      	ldr	r2, [r7, #24]
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    13be:	697a      	ldr	r2, [r7, #20]
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	609a      	str	r2, [r3, #8]
        finished          = true;
    13c4:	2301      	movs	r3, #1
    13c6:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    13c8:	697b      	ldr	r3, [r7, #20]
    13ca:	3301      	adds	r3, #1
    13cc:	617b      	str	r3, [r7, #20]
    13ce:	e7b9      	b.n	1344 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    13d0:	69bb      	ldr	r3, [r7, #24]
    13d2:	3301      	adds	r3, #1
    13d4:	61bb      	str	r3, [r7, #24]
    13d6:	e7ac      	b.n	1332 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    13d8:	bf00      	nop
}
    13da:	6878      	ldr	r0, [r7, #4]
    13dc:	3724      	adds	r7, #36	; 0x24
    13de:	46bd      	mov	sp, r7
    13e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13e4:	4770      	bx	lr
    13e6:	bf00      	nop
    13e8:	3d4ccccd 	.word	0x3d4ccccd

000013ec <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    13ec:	b480      	push	{r7}
    13ee:	b087      	sub	sp, #28
    13f0:	af00      	add	r7, sp, #0
    13f2:	ed87 0a03 	vstr	s0, [r7, #12]
    13f6:	edc7 0a02 	vstr	s1, [r7, #8]
    13fa:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	ee07 3a90 	vmov	s15, r3
    1402:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1406:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    140a:	edd7 7a03 	vldr	s15, [r7, #12]
    140e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1412:	ee27 7a87 	vmul.f32	s14, s15, s14
    1416:	edd7 7a02 	vldr	s15, [r7, #8]
    141a:	ee67 7a27 	vmul.f32	s15, s14, s15
    141e:	ed97 7a05 	vldr	s14, [r7, #20]
    1422:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1426:	eef0 7a66 	vmov.f32	s15, s13
}
    142a:	eeb0 0a67 	vmov.f32	s0, s15
    142e:	371c      	adds	r7, #28
    1430:	46bd      	mov	sp, r7
    1432:	f85d 7b04 	ldr.w	r7, [sp], #4
    1436:	4770      	bx	lr

00001438 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    1438:	b480      	push	{r7}
    143a:	b087      	sub	sp, #28
    143c:	af00      	add	r7, sp, #0
    143e:	ed87 0a03 	vstr	s0, [r7, #12]
    1442:	edc7 0a02 	vstr	s1, [r7, #8]
    1446:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	ee07 3a90 	vmov	s15, r3
    144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1452:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    1456:	edd7 7a03 	vldr	s15, [r7, #12]
    145a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    145e:	ee27 7a87 	vmul.f32	s14, s15, s14
    1462:	edd7 7a02 	vldr	s15, [r7, #8]
    1466:	ee67 7a27 	vmul.f32	s15, s14, s15
    146a:	ed97 7a05 	vldr	s14, [r7, #20]
    146e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1472:	eef0 7a66 	vmov.f32	s15, s13
}
    1476:	eeb0 0a67 	vmov.f32	s0, s15
    147a:	371c      	adds	r7, #28
    147c:	46bd      	mov	sp, r7
    147e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1482:	4770      	bx	lr

00001484 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    1484:	b480      	push	{r7}
    1486:	b083      	sub	sp, #12
    1488:	af00      	add	r7, sp, #0
    148a:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    148e:	edd7 7a01 	vldr	s15, [r7, #4]
    1492:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1496:	ee77 7a87 	vadd.f32	s15, s15, s14
    149a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    149e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    14a2:	eeb0 0a67 	vmov.f32	s0, s15
    14a6:	370c      	adds	r7, #12
    14a8:	46bd      	mov	sp, r7
    14aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ae:	4770      	bx	lr

000014b0 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	b086      	sub	sp, #24
    14b4:	af00      	add	r7, sp, #0
    14b6:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    14ba:	2300      	movs	r3, #0
    14bc:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    14be:	ed97 0a01 	vldr	s0, [r7, #4]
    14c2:	f7ff ffdf 	bl	1484 <sjsu::lpc40xx::uart::RoundFloat(float)>
    14c6:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    14ca:	ed97 7a01 	vldr	s14, [r7, #4]
    14ce:	edd7 7a04 	vldr	s15, [r7, #16]
    14d2:	ee77 7a67 	vsub.f32	s15, s14, s15
    14d6:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    14da:	edd7 7a03 	vldr	s15, [r7, #12]
    14de:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 150c <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    14e2:	eef4 7ac7 	vcmpe.f32	s15, s14
    14e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14ea:	db0a      	blt.n	1502 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    14ec:	edd7 7a03 	vldr	s15, [r7, #12]
    14f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1510 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    14f4:	eef4 7ac7 	vcmpe.f32	s15, s14
    14f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14fc:	d801      	bhi.n	1502 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    14fe:	2301      	movs	r3, #1
    1500:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    1502:	7dfb      	ldrb	r3, [r7, #23]
}
    1504:	4618      	mov	r0, r3
    1506:	3718      	adds	r7, #24
    1508:	46bd      	mov	sp, r7
    150a:	bd80      	pop	{r7, pc}
    150c:	bd4ccccd 	.word	0xbd4ccccd
    1510:	3d4ccccd 	.word	0x3d4ccccd

00001514 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    1514:	b580      	push	{r7, lr}
    1516:	b082      	sub	sp, #8
    1518:	af00      	add	r7, sp, #0
    151a:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    151c:	6878      	ldr	r0, [r7, #4]
    151e:	f000 f805 	bl	152c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1522:	4603      	mov	r3, r0
	}
    1524:	4618      	mov	r0, r3
    1526:	3708      	adds	r7, #8
    1528:	46bd      	mov	sp, r7
    152a:	bd80      	pop	{r7, pc}

0000152c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    152c:	b580      	push	{r7, lr}
    152e:	b082      	sub	sp, #8
    1530:	af00      	add	r7, sp, #0
    1532:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	4618      	mov	r0, r3
    1538:	f7ff fcae 	bl	e98 <units::linear_scale<float>::operator()() const>
    153c:	eef0 7a40 	vmov.f32	s15, s0
    1540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1544:	ee17 3a90 	vmov	r3, s15
		}
    1548:	4618      	mov	r0, r3
    154a:	3708      	adds	r7, #8
    154c:	46bd      	mov	sp, r7
    154e:	bd80      	pop	{r7, pc}

00001550 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    1550:	b590      	push	{r4, r7, lr}
    1552:	b091      	sub	sp, #68	; 0x44
    1554:	af00      	add	r7, sp, #0
    1556:	61f8      	str	r0, [r7, #28]
    1558:	61b9      	str	r1, [r7, #24]
    155a:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    155c:	f107 0314 	add.w	r3, r7, #20
    1560:	4618      	mov	r0, r3
    1562:	f7ff ffd7 	bl	1514 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1566:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    1568:	2300      	movs	r3, #0
    156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    156c:	69fb      	ldr	r3, [r7, #28]
    156e:	2200      	movs	r2, #0
    1570:	601a      	str	r2, [r3, #0]
    1572:	69fb      	ldr	r3, [r7, #28]
    1574:	2200      	movs	r2, #0
    1576:	605a      	str	r2, [r3, #4]
    1578:	69fb      	ldr	r3, [r7, #28]
    157a:	2201      	movs	r2, #1
    157c:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    157e:	69bb      	ldr	r3, [r7, #24]
    1580:	ee07 3a90 	vmov	s15, r3
    1584:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1588:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    158c:	f04f 0300 	mov.w	r3, #0
    1590:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    1592:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    1596:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1598:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    159c:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    159e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    15a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15a6:	2b04      	cmp	r3, #4
    15a8:	f000 80be 	beq.w	1728 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    15ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15ae:	2b03      	cmp	r3, #3
    15b0:	f200 80b8 	bhi.w	1724 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    15b4:	a201      	add	r2, pc, #4	; (adr r2, 15bc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    15b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15ba:	bf00      	nop
    15bc:	000015cd 	.word	0x000015cd
    15c0:	00001627 	.word	0x00001627
    15c4:	00001687 	.word	0x00001687
    15c8:	000016f7 	.word	0x000016f7
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    15cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    15ce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    15d2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    15d6:	f7ff ff09 	bl	13ec <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    15da:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    15de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    15e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    15e6:	eef4 7ac7 	vcmpe.f32	s15, s14
    15ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15ee:	d505      	bpl.n	15fc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    15f0:	69fb      	ldr	r3, [r7, #28]
    15f2:	2200      	movs	r2, #0
    15f4:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    15f6:	2304      	movs	r3, #4
    15f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    15fa:	e094      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    15fc:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    1600:	f7ff ff56 	bl	14b0 <sjsu::lpc40xx::uart::IsDecmial(float)>
    1604:	4603      	mov	r3, r0
    1606:	2b00      	cmp	r3, #0
    1608:	d00a      	beq.n	1620 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    160a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    160e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1612:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    1616:	69fb      	ldr	r3, [r7, #28]
    1618:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    161a:	2304      	movs	r3, #4
    161c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    161e:	e082      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    1620:	2301      	movs	r3, #1
    1622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1624:	e07f      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    1626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1628:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    162c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1630:	f7ff fedc 	bl	13ec <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    1634:	eef0 7a40 	vmov.f32	s15, s0
    1638:	eeb0 0a67 	vmov.f32	s0, s15
    163c:	f7ff ff22 	bl	1484 <sjsu::lpc40xx::uart::RoundFloat(float)>
    1640:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    1644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1646:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    164a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    164e:	f7ff fef3 	bl	1438 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    1652:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    1656:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    165a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1734 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    165e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1666:	db0b      	blt.n	1680 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    1668:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    166c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1738 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    1670:	eef4 7ac7 	vcmpe.f32	s15, s14
    1674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1678:	d802      	bhi.n	1680 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    167a:	2303      	movs	r3, #3
    167c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    167e:	e052      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    1680:	2302      	movs	r3, #2
    1682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1684:	e04f      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    1686:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    168a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    168e:	ee77 7a87 	vadd.f32	s15, s15, s14
    1692:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    1696:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    169a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    169e:	eef4 7ac7 	vcmpe.f32	s15, s14
    16a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16a6:	dd02      	ble.n	16ae <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    16a8:	2304      	movs	r3, #4
    16aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    16ac:	e03b      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    16ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    16b2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    16b6:	eef4 7ac7 	vcmpe.f32	s15, s14
    16ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16be:	dd0f      	ble.n	16e0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    16c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    16c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    16c8:	ee77 7a87 	vadd.f32	s15, s15, s14
    16cc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    16d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    16d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    16d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    16dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    16e0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    16e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    16e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    16ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    16f0:	2301      	movs	r3, #1
    16f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    16f4:	e017      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    16f6:	69fc      	ldr	r4, [r7, #28]
    16f8:	463b      	mov	r3, r7
    16fa:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    16fe:	4618      	mov	r0, r3
    1700:	f7ff fe04 	bl	130c <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    1704:	463b      	mov	r3, r7
    1706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    170a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    170e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1716:	ee17 2a90 	vmov	r2, s15
    171a:	69fb      	ldr	r3, [r7, #28]
    171c:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    171e:	2304      	movs	r3, #4
    1720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1722:	e000      	b.n	1726 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    1724:	bf00      	nop
  while (state != States::kDone)
    1726:	e73d      	b.n	15a4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    1728:	bf00      	nop
}
    172a:	69f8      	ldr	r0, [r7, #28]
    172c:	3744      	adds	r7, #68	; 0x44
    172e:	46bd      	mov	sp, r7
    1730:	bd90      	pop	{r4, r7, pc}
    1732:	bf00      	nop
    1734:	3f8ccccd 	.word	0x3f8ccccd
    1738:	3ff33333 	.word	0x3ff33333

0000173c <sjsu::Uart::Uart()>:
class Uart
    173c:	b480      	push	{r7}
    173e:	b083      	sub	sp, #12
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
    1744:	4a04      	ldr	r2, [pc, #16]	; (1758 <sjsu::Uart::Uart()+0x1c>)
    1746:	687b      	ldr	r3, [r7, #4]
    1748:	601a      	str	r2, [r3, #0]
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	4618      	mov	r0, r3
    174e:	370c      	adds	r7, #12
    1750:	46bd      	mov	sp, r7
    1752:	f85d 7b04 	ldr.w	r7, [sp], #4
    1756:	4770      	bx	lr
    1758:	00007184 	.word	0x00007184

0000175c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    175c:	b580      	push	{r7, lr}
    175e:	b084      	sub	sp, #16
    1760:	af00      	add	r7, sp, #0
    1762:	60f8      	str	r0, [r7, #12]
    1764:	60b9      	str	r1, [r7, #8]
    1766:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    1768:	68fb      	ldr	r3, [r7, #12]
    176a:	4618      	mov	r0, r3
    176c:	f7ff ffe6 	bl	173c <sjsu::Uart::Uart()>
    1770:	4a06      	ldr	r2, [pc, #24]	; (178c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    1772:	68fb      	ldr	r3, [r7, #12]
    1774:	601a      	str	r2, [r3, #0]
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	68ba      	ldr	r2, [r7, #8]
    177a:	605a      	str	r2, [r3, #4]
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	687a      	ldr	r2, [r7, #4]
    1780:	609a      	str	r2, [r3, #8]
  {
  }
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	4618      	mov	r0, r3
    1786:	3710      	adds	r7, #16
    1788:	46bd      	mov	sp, r7
    178a:	bd80      	pop	{r7, pc}
    178c:	00007168 	.word	0x00007168

00001790 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1790:	b580      	push	{r7, lr}
    1792:	b084      	sub	sp, #16
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
    1798:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    179a:	2307      	movs	r3, #7
    179c:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	6898      	ldr	r0, [r3, #8]
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	689b      	ldr	r3, [r3, #8]
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	3314      	adds	r3, #20
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	6852      	ldr	r2, [r2, #4]
    17b0:	3204      	adds	r2, #4
    17b2:	4611      	mov	r1, r2
    17b4:	4798      	blx	r3

    SetBaudRate(baud_rate);
    17b6:	6839      	ldr	r1, [r7, #0]
    17b8:	6878      	ldr	r0, [r7, #4]
    17ba:	f000 f849 	bl	1850 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	68d8      	ldr	r0, [r3, #12]
    17c4:	687b      	ldr	r3, [r7, #4]
    17c6:	685b      	ldr	r3, [r3, #4]
    17c8:	68db      	ldr	r3, [r3, #12]
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	687a      	ldr	r2, [r7, #4]
    17d0:	6852      	ldr	r2, [r2, #4]
    17d2:	7c12      	ldrb	r2, [r2, #16]
    17d4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    17d8:	b2d2      	uxtb	r2, r2
    17da:	4611      	mov	r1, r2
    17dc:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	685b      	ldr	r3, [r3, #4]
    17e2:	6898      	ldr	r0, [r3, #8]
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	685b      	ldr	r3, [r3, #4]
    17e8:	689b      	ldr	r3, [r3, #8]
    17ea:	681b      	ldr	r3, [r3, #0]
    17ec:	681b      	ldr	r3, [r3, #0]
    17ee:	687a      	ldr	r2, [r7, #4]
    17f0:	6852      	ldr	r2, [r2, #4]
    17f2:	7c12      	ldrb	r2, [r2, #16]
    17f4:	f3c2 0202 	ubfx	r2, r2, #0, #3
    17f8:	b2d2      	uxtb	r2, r2
    17fa:	4611      	mov	r1, r2
    17fc:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	685b      	ldr	r3, [r3, #4]
    1802:	68da      	ldr	r2, [r3, #12]
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	685b      	ldr	r3, [r3, #4]
    1808:	68db      	ldr	r3, [r3, #12]
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	3304      	adds	r3, #4
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	2102      	movs	r1, #2
    1812:	4610      	mov	r0, r2
    1814:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	685b      	ldr	r3, [r3, #4]
    181a:	689a      	ldr	r2, [r3, #8]
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	685b      	ldr	r3, [r3, #4]
    1820:	689b      	ldr	r3, [r3, #8]
    1822:	681b      	ldr	r3, [r3, #0]
    1824:	3304      	adds	r3, #4
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	2102      	movs	r1, #2
    182a:	4610      	mov	r0, r2
    182c:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	685b      	ldr	r3, [r3, #4]
    1832:	681b      	ldr	r3, [r3, #0]
    1834:	7a1b      	ldrb	r3, [r3, #8]
    1836:	b2da      	uxtb	r2, r3
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	685b      	ldr	r3, [r3, #4]
    183c:	681b      	ldr	r3, [r3, #0]
    183e:	f042 0207 	orr.w	r2, r2, #7
    1842:	b2d2      	uxtb	r2, r2
    1844:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    1846:	2300      	movs	r3, #0
  }
    1848:	4618      	mov	r0, r3
    184a:	3710      	adds	r7, #16
    184c:	46bd      	mov	sp, r7
    184e:	bd80      	pop	{r7, pc}

00001850 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    1850:	b580      	push	{r7, lr}
    1852:	b086      	sub	sp, #24
    1854:	af00      	add	r7, sp, #0
    1856:	6078      	str	r0, [r7, #4]
    1858:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	689a      	ldr	r2, [r3, #8]
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	685b      	ldr	r3, [r3, #4]
    1862:	3304      	adds	r3, #4
    1864:	4619      	mov	r1, r3
    1866:	4610      	mov	r0, r2
    1868:	f7fe ff8b 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    186c:	4602      	mov	r2, r0
    186e:	f107 0308 	add.w	r3, r7, #8
    1872:	6839      	ldr	r1, [r7, #0]
    1874:	4618      	mov	r0, r3
    1876:	f7ff fe6b 	bl	1550 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    187a:	2380      	movs	r3, #128	; 0x80
    187c:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    187e:	68bb      	ldr	r3, [r7, #8]
    1880:	0a1b      	lsrs	r3, r3, #8
    1882:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    1884:	68bb      	ldr	r3, [r7, #8]
    1886:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1888:	693b      	ldr	r3, [r7, #16]
    188a:	b2db      	uxtb	r3, r3
    188c:	011b      	lsls	r3, r3, #4
    188e:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1890:	68fb      	ldr	r3, [r7, #12]
    1892:	b2db      	uxtb	r3, r3
    1894:	f003 030f 	and.w	r3, r3, #15
    1898:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    189a:	4313      	orrs	r3, r2
    189c:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	685b      	ldr	r3, [r3, #4]
    18a2:	681b      	ldr	r3, [r3, #0]
    18a4:	2280      	movs	r2, #128	; 0x80
    18a6:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	685b      	ldr	r3, [r3, #4]
    18ac:	681b      	ldr	r3, [r3, #0]
    18ae:	7dba      	ldrb	r2, [r7, #22]
    18b0:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	685b      	ldr	r3, [r3, #4]
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	7d7a      	ldrb	r2, [r7, #21]
    18ba:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	685b      	ldr	r3, [r3, #4]
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	7d3a      	ldrb	r2, [r7, #20]
    18c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    18c8:	687b      	ldr	r3, [r7, #4]
    18ca:	685b      	ldr	r3, [r3, #4]
    18cc:	681b      	ldr	r3, [r3, #0]
    18ce:	2203      	movs	r2, #3
    18d0:	731a      	strb	r2, [r3, #12]
    return true;
    18d2:	2301      	movs	r3, #1
  }
    18d4:	4618      	mov	r0, r3
    18d6:	3718      	adds	r7, #24
    18d8:	46bd      	mov	sp, r7
    18da:	bd80      	pop	{r7, pc}

000018dc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    18dc:	b580      	push	{r7, lr}
    18de:	b086      	sub	sp, #24
    18e0:	af00      	add	r7, sp, #0
    18e2:	60f8      	str	r0, [r7, #12]
    18e4:	60b9      	str	r1, [r7, #8]
    18e6:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    18e8:	2300      	movs	r3, #0
    18ea:	617b      	str	r3, [r7, #20]
    18ec:	697a      	ldr	r2, [r7, #20]
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	429a      	cmp	r2, r3
    18f2:	d216      	bcs.n	1922 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    18f4:	68ba      	ldr	r2, [r7, #8]
    18f6:	697b      	ldr	r3, [r7, #20]
    18f8:	441a      	add	r2, r3
    18fa:	68fb      	ldr	r3, [r7, #12]
    18fc:	685b      	ldr	r3, [r3, #4]
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	7812      	ldrb	r2, [r2, #0]
    1902:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    1904:	68f8      	ldr	r0, [r7, #12]
    1906:	f000 f8b5 	bl	1a74 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    190a:	4603      	mov	r3, r0
    190c:	f083 0301 	eor.w	r3, r3, #1
    1910:	b2db      	uxtb	r3, r3
    1912:	2b00      	cmp	r3, #0
    1914:	d001      	beq.n	191a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    1916:	bf00      	nop
      while (!TransmissionComplete())
    1918:	e7f4      	b.n	1904 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    191a:	697b      	ldr	r3, [r7, #20]
    191c:	3301      	adds	r3, #1
    191e:	617b      	str	r3, [r7, #20]
    1920:	e7e4      	b.n	18ec <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    1922:	bf00      	nop
    1924:	3718      	adds	r7, #24
    1926:	46bd      	mov	sp, r7
    1928:	bd80      	pop	{r7, pc}

0000192a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    192a:	b590      	push	{r4, r7, lr}
    192c:	b083      	sub	sp, #12
    192e:	af00      	add	r7, sp, #0
    1930:	6078      	str	r0, [r7, #4]
    1932:	687b      	ldr	r3, [r7, #4]
    1934:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    1936:	4618      	mov	r0, r3
    1938:	f000 f88a 	bl	1a50 <sjsu::lpc40xx::Uart::HasData() const>
    193c:	4603      	mov	r3, r0
    193e:	2b00      	cmp	r3, #0
    1940:	d010      	beq.n	1964 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1946:	685b      	ldr	r3, [r3, #4]
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1952:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1958:	6813      	ldr	r3, [r2, #0]
    195a:	1c58      	adds	r0, r3, #1
    195c:	6010      	str	r0, [r2, #0]
    195e:	440b      	add	r3, r1
    1960:	4622      	mov	r2, r4
    1962:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    1968:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    196e:	429a      	cmp	r2, r3
    1970:	d301      	bcc.n	1976 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    1972:	2301      	movs	r3, #1
    1974:	e000      	b.n	1978 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    1976:	2300      	movs	r3, #0
    });
    1978:	4618      	mov	r0, r3
    197a:	370c      	adds	r7, #12
    197c:	46bd      	mov	sp, r7
    197e:	bd90      	pop	{r4, r7, pc}

00001980 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    1980:	b590      	push	{r4, r7, lr}
    1982:	b09d      	sub	sp, #116	; 0x74
    1984:	af00      	add	r7, sp, #0
    1986:	6178      	str	r0, [r7, #20]
    1988:	6139      	str	r1, [r7, #16]
    198a:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    198c:	2300      	movs	r3, #0
    198e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1990:	697b      	ldr	r3, [r7, #20]
    1992:	643b      	str	r3, [r7, #64]	; 0x40
    1994:	f107 0310 	add.w	r3, r7, #16
    1998:	647b      	str	r3, [r7, #68]	; 0x44
    199a:	68fb      	ldr	r3, [r7, #12]
    199c:	64bb      	str	r3, [r7, #72]	; 0x48
    199e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    19a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    19a4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    19a8:	e9c7 3408 	strd	r3, r4, [r7, #32]
    19ac:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    19b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
    19b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    19b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    19ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
    19be:	4618      	mov	r0, r3
    19c0:	f000 fd8d 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    19c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
    19c8:	f107 0320 	add.w	r3, r7, #32
    19cc:	4611      	mov	r1, r2
    19ce:	4618      	mov	r0, r3
    19d0:	f000 ff4a 	bl	2868 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    19d4:	4603      	mov	r3, r0
    19d6:	2b00      	cmp	r3, #0
    19d8:	d004      	beq.n	19e4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    19da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    19de:	e9c7 3406 	strd	r3, r4, [r7, #24]
    19e2:	e011      	b.n	1a08 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    19e4:	4b19      	ldr	r3, [pc, #100]	; (1a4c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
    19ec:	4610      	mov	r0, r2
    19ee:	4798      	blx	r3
    19f0:	463b      	mov	r3, r7
    19f2:	f107 0220 	add.w	r2, r7, #32
    19f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
    19fa:	4618      	mov	r0, r3
    19fc:	f001 f8c4 	bl	2b88 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1a00:	e9d7 3400 	ldrd	r3, r4, [r7]
    1a04:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    1a08:	2301      	movs	r3, #1
    1a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    1a0c:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1a14:	4610      	mov	r0, r2
    1a16:	4798      	blx	r3
    1a18:	f107 0218 	add.w	r2, r7, #24
    1a1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
    1a20:	4611      	mov	r1, r2
    1a22:	4618      	mov	r0, r3
    1a24:	f001 f8dd 	bl	2be2 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1a28:	4603      	mov	r3, r0
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d009      	beq.n	1a42 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    1a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    1a32:	4618      	mov	r0, r3
    1a34:	f7ff ff79 	bl	192a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    1a38:	4603      	mov	r3, r0
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d0e6      	beq.n	1a0c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    1a3e:	2300      	movs	r3, #0
    1a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    1a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    1a44:	4618      	mov	r0, r3
    1a46:	3774      	adds	r7, #116	; 0x74
    1a48:	46bd      	mov	sp, r7
    1a4a:	bd90      	pop	{r4, r7, pc}
    1a4c:	10000000 	.word	0x10000000

00001a50 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    1a50:	b580      	push	{r7, lr}
    1a52:	b082      	sub	sp, #8
    1a54:	af00      	add	r7, sp, #0
    1a56:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	685b      	ldr	r3, [r3, #4]
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	7d1b      	ldrb	r3, [r3, #20]
    1a60:	b2db      	uxtb	r3, r3
    1a62:	2100      	movs	r1, #0
    1a64:	4618      	mov	r0, r3
    1a66:	f000 ffc0 	bl	29ea <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1a6a:	4603      	mov	r3, r0
  }
    1a6c:	4618      	mov	r0, r3
    1a6e:	3708      	adds	r7, #8
    1a70:	46bd      	mov	sp, r7
    1a72:	bd80      	pop	{r7, pc}

00001a74 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	685b      	ldr	r3, [r3, #4]
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	7d1b      	ldrb	r3, [r3, #20]
    1a84:	b2db      	uxtb	r3, r3
    1a86:	2105      	movs	r1, #5
    1a88:	4618      	mov	r0, r3
    1a8a:	f000 ffae 	bl	29ea <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1a8e:	4603      	mov	r3, r0
  }
    1a90:	4618      	mov	r0, r3
    1a92:	3708      	adds	r7, #8
    1a94:	46bd      	mov	sp, r7
    1a96:	bd80      	pop	{r7, pc}

00001a98 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1a98:	b580      	push	{r7, lr}
    1a9a:	ed2d 8b02 	vpush	{d8}
    1a9e:	b084      	sub	sp, #16
    1aa0:	af00      	add	r7, sp, #0
    1aa2:	6078      	str	r0, [r7, #4]
    1aa4:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	4618      	mov	r0, r3
    1aaa:	f7ff f9f5 	bl	e98 <units::linear_scale<float>::operator()() const>
    1aae:	eeb0 8a40 	vmov.f32	s16, s0
    1ab2:	683b      	ldr	r3, [r7, #0]
    1ab4:	4618      	mov	r0, r3
    1ab6:	f7ff f9ef 	bl	e98 <units::linear_scale<float>::operator()() const>
    1aba:	eef0 7a40 	vmov.f32	s15, s0
    1abe:	edc7 7a03 	vstr	s15, [r7, #12]
    1ac2:	f107 030c 	add.w	r3, r7, #12
    1ac6:	4618      	mov	r0, r3
    1ac8:	f7fe fe3b 	bl	742 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1acc:	eeb0 7a40 	vmov.f32	s14, s0
    1ad0:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1ad4:	f107 0308 	add.w	r3, r7, #8
    1ad8:	eeb0 0a67 	vmov.f32	s0, s15
    1adc:	4618      	mov	r0, r3
    1ade:	f7ff fa16 	bl	f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1ae2:	68bb      	ldr	r3, [r7, #8]
	}
    1ae4:	4618      	mov	r0, r3
    1ae6:	3710      	adds	r7, #16
    1ae8:	46bd      	mov	sp, r7
    1aea:	ecbd 8b02 	vpop	{d8}
    1aee:	bd80      	pop	{r7, pc}

00001af0 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    1af0:	b580      	push	{r7, lr}
    1af2:	b082      	sub	sp, #8
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1af8:	6878      	ldr	r0, [r7, #4]
    1afa:	f000 ff44 	bl	2986 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1afe:	4603      	mov	r3, r0
		}
    1b00:	4618      	mov	r0, r3
    1b02:	3708      	adds	r7, #8
    1b04:	46bd      	mov	sp, r7
    1b06:	bd80      	pop	{r7, pc}

00001b08 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1b08:	b480      	push	{r7}
    1b0a:	af00      	add	r7, sp, #0
    1b0c:	bf00      	nop
    1b0e:	46bd      	mov	sp, r7
    1b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b14:	4770      	bx	lr
    1b16:	Address 0x0000000000001b16 is out of bounds.


00001b18 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1b1e:	4b09      	ldr	r3, [pc, #36]	; (1b44 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	9300      	str	r3, [sp, #0]
    1b24:	231d      	movs	r3, #29
    1b26:	4a08      	ldr	r2, [pc, #32]	; (1b48 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1b28:	4908      	ldr	r1, [pc, #32]	; (1b4c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1b2a:	4809      	ldr	r0, [pc, #36]	; (1b50 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1b2c:	f002 fcf0 	bl	4510 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1b30:	4b04      	ldr	r3, [pc, #16]	; (1b44 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	3b10      	subs	r3, #16
    1b36:	4618      	mov	r0, r3
    1b38:	f7fe fc3a 	bl	3b0 <NVIC_DisableIRQ>
  }
    1b3c:	bf00      	nop
    1b3e:	46bd      	mov	sp, r7
    1b40:	bd80      	pop	{r7, pc}
    1b42:	bf00      	nop
    1b44:	10000048 	.word	0x10000048
    1b48:	0000740c 	.word	0x0000740c
    1b4c:	00007074 	.word	0x00007074
    1b50:	00006bcc 	.word	0x00006bcc

00001b54 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1b54:	b480      	push	{r7}
    1b56:	b083      	sub	sp, #12
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1b5c:	2340      	movs	r3, #64	; 0x40
    1b5e:	4618      	mov	r0, r3
    1b60:	370c      	adds	r7, #12
    1b62:	46bd      	mov	sp, r7
    1b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b68:	4770      	bx	lr
    1b6a:	Address 0x0000000000001b6a is out of bounds.


00001b6c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1b6c:	b580      	push	{r7, lr}
    1b6e:	b084      	sub	sp, #16
    1b70:	af00      	add	r7, sp, #0
    1b72:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	4618      	mov	r0, r3
    1b78:	f44f 7380 	mov.w	r3, #256	; 0x100
    1b7c:	461a      	mov	r2, r3
    1b7e:	2100      	movs	r1, #0
    1b80:	f004 fdc9 	bl	6716 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1b84:	2300      	movs	r3, #0
    1b86:	60fb      	str	r3, [r7, #12]
    1b88:	68fb      	ldr	r3, [r7, #12]
    1b8a:	2b0f      	cmp	r3, #15
    1b8c:	d808      	bhi.n	1ba0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	68fa      	ldr	r2, [r7, #12]
    1b92:	4911      	ldr	r1, [pc, #68]	; (1bd8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1b98:	68fb      	ldr	r3, [r7, #12]
    1b9a:	3301      	adds	r3, #1
    1b9c:	60fb      	str	r3, [r7, #12]
    1b9e:	e7f3      	b.n	1b88 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1ba0:	2310      	movs	r3, #16
    1ba2:	60bb      	str	r3, [r7, #8]
    1ba4:	6878      	ldr	r0, [r7, #4]
    1ba6:	f7ff ffd5 	bl	1b54 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1baa:	4602      	mov	r2, r0
    1bac:	68bb      	ldr	r3, [r7, #8]
    1bae:	4293      	cmp	r3, r2
    1bb0:	bf34      	ite	cc
    1bb2:	2301      	movcc	r3, #1
    1bb4:	2300      	movcs	r3, #0
    1bb6:	b2db      	uxtb	r3, r3
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d008      	beq.n	1bce <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	68ba      	ldr	r2, [r7, #8]
    1bc0:	4906      	ldr	r1, [pc, #24]	; (1bdc <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1bc6:	68bb      	ldr	r3, [r7, #8]
    1bc8:	3301      	adds	r3, #1
    1bca:	60bb      	str	r3, [r7, #8]
    1bcc:	e7ea      	b.n	1ba4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1bce:	bf00      	nop
    }
    1bd0:	6878      	ldr	r0, [r7, #4]
    1bd2:	3710      	adds	r7, #16
    1bd4:	46bd      	mov	sp, r7
    1bd6:	bd80      	pop	{r7, pc}
    1bd8:	00001b09 	.word	0x00001b09
    1bdc:	00001b19 	.word	0x00001b19

00001be0 <sjsu::Pwm::Pwm()>:

namespace sjsu
{
/// An abstract interface for hardware that can generate Pulse Width Modulation
/// (PWM) waveforms.
class Pwm
    1be0:	b480      	push	{r7}
    1be2:	b083      	sub	sp, #12
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	4a04      	ldr	r2, [pc, #16]	; (1bfc <sjsu::Pwm::Pwm()+0x1c>)
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	601a      	str	r2, [r3, #0]
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	4618      	mov	r0, r3
    1bf2:	370c      	adds	r7, #12
    1bf4:	46bd      	mov	sp, r7
    1bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bfa:	4770      	bx	lr
    1bfc:	00007150 	.word	0x00007150

00001c00 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>:
  ///        instance of the PWM driver.
  /// @param system_controller - Reference to a system controller object. Used
  ///        to power on the peripheral and get the current peripheral
  ///        frequency. Typically only changed from the default for unit testing
  ///        purposes.
  explicit constexpr Pwm(const Channel_t & channel,
    1c00:	b580      	push	{r7, lr}
    1c02:	b084      	sub	sp, #16
    1c04:	af00      	add	r7, sp, #0
    1c06:	60f8      	str	r0, [r7, #12]
    1c08:	60b9      	str	r1, [r7, #8]
    1c0a:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1c0c:	68fb      	ldr	r3, [r7, #12]
    1c0e:	4618      	mov	r0, r3
    1c10:	f7ff ffe6 	bl	1be0 <sjsu::Pwm::Pwm()>
    1c14:	4a06      	ldr	r2, [pc, #24]	; (1c30 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1c16:	68fb      	ldr	r3, [r7, #12]
    1c18:	601a      	str	r2, [r3, #0]
    1c1a:	68fb      	ldr	r3, [r7, #12]
    1c1c:	68ba      	ldr	r2, [r7, #8]
    1c1e:	605a      	str	r2, [r3, #4]
    1c20:	68fb      	ldr	r3, [r7, #12]
    1c22:	687a      	ldr	r2, [r7, #4]
    1c24:	609a      	str	r2, [r3, #8]
  {
  }
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	4618      	mov	r0, r3
    1c2a:	3710      	adds	r7, #16
    1c2c:	46bd      	mov	sp, r7
    1c2e:	bd80      	pop	{r7, pc}
    1c30:	00007138 	.word	0x00007138

00001c34 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  Status Initialize(units::frequency::hertz_t frequency_hz) const override
    1c34:	b590      	push	{r4, r7, lr}
    1c36:	b085      	sub	sp, #20
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
    1c3c:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(1 <= channel_.channel && channel_.channel <= 6,
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	685b      	ldr	r3, [r3, #4]
    1c42:	7a1b      	ldrb	r3, [r3, #8]
    1c44:	f003 0307 	and.w	r3, r3, #7
    1c48:	b2db      	uxtb	r3, r3
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d007      	beq.n	1c5e <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x2a>
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	685b      	ldr	r3, [r3, #4]
    1c52:	7a1b      	ldrb	r3, [r3, #8]
    1c54:	f003 0307 	and.w	r3, r3, #7
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	2b07      	cmp	r3, #7
    1c5c:	d10d      	bne.n	1c7a <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x46>
    1c5e:	23bb      	movs	r3, #187	; 0xbb
    1c60:	4a5d      	ldr	r2, [pc, #372]	; (1dd8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a4>)
    1c62:	495e      	ldr	r1, [pc, #376]	; (1ddc <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1a8>)
    1c64:	485e      	ldr	r0, [pc, #376]	; (1de0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1ac>)
    1c66:	f002 fc53 	bl	4510 <printf>
    1c6a:	485e      	ldr	r0, [pc, #376]	; (1de4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b0>)
    1c6c:	f001 fb34 	bl	32d8 <puts>
    1c70:	2100      	movs	r1, #0
    1c72:	2001      	movs	r0, #1
    1c74:	f7fe fe28 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1c78:	e7fe      	b.n	1c78 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x44>
                     "Channel must be between 1 and 6 on LPC40xx platforms.");

    system_controller_.PowerUpPeripheral(channel_.peripheral.power_on_id);
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	6898      	ldr	r0, [r3, #8]
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	689b      	ldr	r3, [r3, #8]
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	3314      	adds	r3, #20
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	687a      	ldr	r2, [r7, #4]
    1c8a:	6852      	ldr	r2, [r2, #4]
    1c8c:	6812      	ldr	r2, [r2, #0]
    1c8e:	3204      	adds	r2, #4
    1c90:	4611      	mov	r1, r2
    1c92:	4798      	blx	r3
    // Set prescalar to 1 so the input frequency to the PWM peripheral is equal
    // to the peripheral clock frequency.
    //
    // PR = Prescale register = defines the maximum value for the prescaler
    channel_.peripheral.registers->PR = 0;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	685b      	ldr	r3, [r3, #4]
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	681b      	ldr	r3, [r3, #0]
    1c9c:	2200      	movs	r2, #0
    1c9e:	60da      	str	r2, [r3, #12]
    // PC = Prescale counter. Set to 0 to cause the timer counter to increment
    // after each peripheral clock tick.
    channel_.peripheral.registers->PC = 0;
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	685b      	ldr	r3, [r3, #4]
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	681b      	ldr	r3, [r3, #0]
    1ca8:	2200      	movs	r2, #0
    1caa:	611a      	str	r2, [r3, #16]
    // Mode 0x0 means increment time counter (TC) after the peripheral clock
    // has cycled the amount inside of the prescale.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kMode);
    1cac:	687b      	ldr	r3, [r7, #4]
    1cae:	685b      	ldr	r3, [r3, #4]
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	685b      	ldr	r3, [r3, #4]
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	681c      	ldr	r4, [r3, #0]
    1cbe:	4b4a      	ldr	r3, [pc, #296]	; (1de8 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b4>)
    1cc0:	781a      	ldrb	r2, [r3, #0]
    1cc2:	785b      	ldrb	r3, [r3, #1]
    1cc4:	021b      	lsls	r3, r3, #8
    1cc6:	431a      	orrs	r2, r3
    1cc8:	2300      	movs	r3, #0
    1cca:	f362 030f 	bfi	r3, r2, #0, #16
    1cce:	461a      	mov	r2, r3
    1cd0:	2100      	movs	r1, #0
    1cd2:	f000 feb0 	bl	2a36 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1cd6:	4603      	mov	r3, r0
    1cd8:	6723      	str	r3, [r4, #112]	; 0x70
    // 0x0 for this register says to use the TC for input counts.
    channel_.peripheral.registers->CTCR = bit::Insert(
        channel_.peripheral.registers->CTCR, 0, CountControl::kCountInput);
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	685b      	ldr	r3, [r3, #4]
    1cde:	681b      	ldr	r3, [r3, #0]
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	6f18      	ldr	r0, [r3, #112]	; 0x70
    channel_.peripheral.registers->CTCR = bit::Insert(
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	685b      	ldr	r3, [r3, #4]
    1ce8:	681b      	ldr	r3, [r3, #0]
    1cea:	681c      	ldr	r4, [r3, #0]
    1cec:	4b3f      	ldr	r3, [pc, #252]	; (1dec <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1b8>)
    1cee:	781a      	ldrb	r2, [r3, #0]
    1cf0:	785b      	ldrb	r3, [r3, #1]
    1cf2:	021b      	lsls	r3, r3, #8
    1cf4:	431a      	orrs	r2, r3
    1cf6:	2300      	movs	r3, #0
    1cf8:	f362 030f 	bfi	r3, r2, #0, #16
    1cfc:	461a      	mov	r2, r3
    1cfe:	2100      	movs	r1, #0
    1d00:	f000 fe99 	bl	2a36 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1d04:	4603      	mov	r3, r0
    1d06:	6723      	str	r3, [r4, #112]	; 0x70
    // Match register 0 is used to generate the desired frequency. If the time
    // counter TC is equal to MR0
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	685b      	ldr	r3, [r3, #4]
    1d10:	681b      	ldr	r3, [r3, #0]
    1d12:	3304      	adds	r3, #4
    1d14:	4619      	mov	r1, r3
    1d16:	4610      	mov	r0, r2
    1d18:	f7fe fd33 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1d1c:	4603      	mov	r3, r0
    1d1e:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1d20:	463a      	mov	r2, r7
    1d22:	f107 0308 	add.w	r3, r7, #8
    1d26:	4611      	mov	r1, r2
    1d28:	4618      	mov	r0, r3
    1d2a:	f7ff feb5 	bl	1a98 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1d2e:	4603      	mov	r3, r0
    1d30:	60fb      	str	r3, [r7, #12]
    channel_.peripheral.registers->MR0 =
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	685b      	ldr	r3, [r3, #4]
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1d3a:	f107 030c 	add.w	r3, r7, #12
    1d3e:	4618      	mov	r0, r3
    1d40:	f7ff fed6 	bl	1af0 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1d44:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1d46:	61a3      	str	r3, [r4, #24]
    // Sets match register 0 to reset when TC and Match 0 match each other,
    // meaning that the PWM pulse will cycle continuously.
    channel_.peripheral.registers->MCR =
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	685b      	ldr	r3, [r3, #4]
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	6958      	ldr	r0, [r3, #20]
    channel_.peripheral.registers->MCR =
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	685b      	ldr	r3, [r3, #4]
    1d56:	681b      	ldr	r3, [r3, #0]
    1d58:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->MCR, MatchControl::kPwm0Reset);
    1d5a:	4b25      	ldr	r3, [pc, #148]	; (1df0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x1bc>)
    1d5c:	781a      	ldrb	r2, [r3, #0]
    1d5e:	785b      	ldrb	r3, [r3, #1]
    1d60:	021b      	lsls	r3, r3, #8
    1d62:	431a      	orrs	r2, r3
    1d64:	2300      	movs	r3, #0
    1d66:	f362 030f 	bfi	r3, r2, #0, #16
    1d6a:	4619      	mov	r1, r3
    1d6c:	f000 fe54 	bl	2a18 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1d70:	4603      	mov	r3, r0
    channel_.peripheral.registers->MCR =
    1d72:	6163      	str	r3, [r4, #20]
    // Enables PWM TC and PC for counting and enables PWM mode
    EnablePwm();
    1d74:	2101      	movs	r1, #1
    1d76:	6878      	ldr	r0, [r7, #4]
    1d78:	f000 f946 	bl	2008 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    // Enables PWM[channel] output
    channel_.peripheral.registers->PCR =
        bit::Set(channel_.peripheral.registers->PCR,
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	685b      	ldr	r3, [r3, #4]
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 OutputControl::kEnableOutput.position + channel_.channel);
    1d86:	2308      	movs	r3, #8
    1d88:	4619      	mov	r1, r3
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	685b      	ldr	r3, [r3, #4]
    1d8e:	7a1b      	ldrb	r3, [r3, #8]
    1d90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d94:	b2db      	uxtb	r3, r3
    1d96:	440b      	add	r3, r1
        bit::Set(channel_.peripheral.registers->PCR,
    1d98:	4619      	mov	r1, r3
    channel_.peripheral.registers->PCR =
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	685b      	ldr	r3, [r3, #4]
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	681c      	ldr	r4, [r3, #0]
        bit::Set(channel_.peripheral.registers->PCR,
    1da2:	4610      	mov	r0, r2
    1da4:	f000 fdb8 	bl	2918 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1da8:	4603      	mov	r3, r0
    channel_.peripheral.registers->PCR =
    1daa:	64e3      	str	r3, [r4, #76]	; 0x4c

    channel_.pin.SetPinFunction(channel_.pin_function_id);
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	685b      	ldr	r3, [r3, #4]
    1db0:	6858      	ldr	r0, [r3, #4]
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	685b      	ldr	r3, [r3, #4]
    1db6:	685b      	ldr	r3, [r3, #4]
    1db8:	681b      	ldr	r3, [r3, #0]
    1dba:	681b      	ldr	r3, [r3, #0]
    1dbc:	687a      	ldr	r2, [r7, #4]
    1dbe:	6852      	ldr	r2, [r2, #4]
    1dc0:	7a12      	ldrb	r2, [r2, #8]
    1dc2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1dc6:	b2d2      	uxtb	r2, r2
    1dc8:	4611      	mov	r1, r2
    1dca:	4798      	blx	r3

    return Status::kSuccess;
    1dcc:	2300      	movs	r3, #0
  }
    1dce:	4618      	mov	r0, r3
    1dd0:	3714      	adds	r7, #20
    1dd2:	46bd      	mov	sp, r7
    1dd4:	bd90      	pop	{r4, r7, pc}
    1dd6:	bf00      	nop
    1dd8:	000073b4 	.word	0x000073b4
    1ddc:	000070b0 	.word	0x000070b0
    1de0:	00006c4c 	.word	0x00006c4c
    1de4:	00006980 	.word	0x00006980
    1de8:	00007094 	.word	0x00007094
    1dec:	00007098 	.word	0x00007098
    1df0:	00007084 	.word	0x00007084

00001df4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>:

  void SetDutyCycle(float duty_cycle) const override
    1df4:	b590      	push	{r4, r7, lr}
    1df6:	b083      	sub	sp, #12
    1df8:	af00      	add	r7, sp, #0
    1dfa:	6078      	str	r0, [r7, #4]
    1dfc:	ed87 0a00 	vstr	s0, [r7]
  {
    SJ2_ASSERT_FATAL(0.0f <= duty_cycle && duty_cycle <= 1.0f,
    1e00:	edd7 7a00 	vldr	s15, [r7]
    1e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e0c:	bfac      	ite	ge
    1e0e:	2301      	movge	r3, #1
    1e10:	2300      	movlt	r3, #0
    1e12:	b2db      	uxtb	r3, r3
    1e14:	f083 0301 	eor.w	r3, r3, #1
    1e18:	b2db      	uxtb	r3, r3
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d110      	bne.n	1e40 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x4c>
    1e1e:	edd7 7a00 	vldr	s15, [r7]
    1e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1e26:	eef4 7ac7 	vcmpe.f32	s15, s14
    1e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e2e:	bf94      	ite	ls
    1e30:	2301      	movls	r3, #1
    1e32:	2300      	movhi	r3, #0
    1e34:	b2db      	uxtb	r3, r3
    1e36:	f083 0301 	eor.w	r3, r3, #1
    1e3a:	b2db      	uxtb	r3, r3
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d00d      	beq.n	1e5c <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x68>
    1e40:	23e7      	movs	r3, #231	; 0xe7
    1e42:	4a1c      	ldr	r2, [pc, #112]	; (1eb4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc0>)
    1e44:	491c      	ldr	r1, [pc, #112]	; (1eb8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc4>)
    1e46:	481d      	ldr	r0, [pc, #116]	; (1ebc <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xc8>)
    1e48:	f002 fb62 	bl	4510 <printf>
    1e4c:	481c      	ldr	r0, [pc, #112]	; (1ec0 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0xcc>)
    1e4e:	f001 fa43 	bl	32d8 <puts>
    1e52:	2100      	movs	r1, #0
    1e54:	2001      	movs	r0, #1
    1e56:	f7fe fd37 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1e5a:	e7fe      	b.n	1e5a <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const+0x66>
                     "duty_cycle of Duty Cycle provided is out of bounds.");
    GetMatchRegisters()[channel_.channel] = CalculateDutyCycle(duty_cycle);
    1e5c:	ed97 0a00 	vldr	s0, [r7]
    1e60:	6878      	ldr	r0, [r7, #4]
    1e62:	f000 f94a 	bl	20fa <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>
    1e66:	4604      	mov	r4, r0
    1e68:	6878      	ldr	r0, [r7, #4]
    1e6a:	f000 f937 	bl	20dc <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1e6e:	4602      	mov	r2, r0
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	685b      	ldr	r3, [r3, #4]
    1e74:	7a1b      	ldrb	r3, [r3, #8]
    1e76:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1e7a:	b2db      	uxtb	r3, r3
    1e7c:	009b      	lsls	r3, r3, #2
    1e7e:	4413      	add	r3, r2
    1e80:	601c      	str	r4, [r3, #0]
    channel_.peripheral.registers->LER |= (1 << channel_.channel);
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	685b      	ldr	r3, [r3, #4]
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	685b      	ldr	r3, [r3, #4]
    1e90:	7a1b      	ldrb	r3, [r3, #8]
    1e92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1e96:	b2db      	uxtb	r3, r3
    1e98:	4619      	mov	r1, r3
    1e9a:	2301      	movs	r3, #1
    1e9c:	408b      	lsls	r3, r1
    1e9e:	4619      	mov	r1, r3
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	685b      	ldr	r3, [r3, #4]
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	430a      	orrs	r2, r1
    1eaa:	651a      	str	r2, [r3, #80]	; 0x50
  }
    1eac:	bf00      	nop
    1eae:	370c      	adds	r7, #12
    1eb0:	46bd      	mov	sp, r7
    1eb2:	bd90      	pop	{r4, r7, pc}
    1eb4:	00007378 	.word	0x00007378
    1eb8:	000070b8 	.word	0x000070b8
    1ebc:	00006d20 	.word	0x00006d20
    1ec0:	00006980 	.word	0x00006980

00001ec4 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>:

  float GetDutyCycle() const override
    1ec4:	b580      	push	{r7, lr}
    1ec6:	ed2d 8b02 	vpush	{d8}
    1eca:	b082      	sub	sp, #8
    1ecc:	af00      	add	r7, sp, #0
    1ece:	6078      	str	r0, [r7, #4]
  {
    return (static_cast<float>(GetMatchRegisters()[channel_.channel]) /
    1ed0:	6878      	ldr	r0, [r7, #4]
    1ed2:	f000 f903 	bl	20dc <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1ed6:	4602      	mov	r2, r0
    1ed8:	687b      	ldr	r3, [r7, #4]
    1eda:	685b      	ldr	r3, [r3, #4]
    1edc:	7a1b      	ldrb	r3, [r3, #8]
    1ede:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1ee2:	b2db      	uxtb	r3, r3
    1ee4:	009b      	lsls	r3, r3, #2
    1ee6:	4413      	add	r3, r2
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	ee07 3a90 	vmov	s15, r3
    1eee:	eeb8 8a67 	vcvt.f32.u32	s16, s15
            static_cast<float>(GetMatchRegisters()[0]));
    1ef2:	6878      	ldr	r0, [r7, #4]
    1ef4:	f000 f8f2 	bl	20dc <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    1ef8:	4603      	mov	r3, r0
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	ee07 3a90 	vmov	s15, r3
    1f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f04:	ee88 7a27 	vdiv.f32	s14, s16, s15
    1f08:	eef0 7a47 	vmov.f32	s15, s14
  }
    1f0c:	eeb0 0a67 	vmov.f32	s0, s15
    1f10:	3708      	adds	r7, #8
    1f12:	46bd      	mov	sp, r7
    1f14:	ecbd 8b02 	vpop	{d8}
    1f18:	bd80      	pop	{r7, pc}

00001f1a <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator!=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    1f1a:	b580      	push	{r7, lr}
    1f1c:	b082      	sub	sp, #8
    1f1e:	af00      	add	r7, sp, #0
    1f20:	6078      	str	r0, [r7, #4]
    1f22:	6039      	str	r1, [r7, #0]
			return !(*this == rhs);
    1f24:	6839      	ldr	r1, [r7, #0]
    1f26:	6878      	ldr	r0, [r7, #4]
    1f28:	f7fe fbb4 	bl	694 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator==<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1f2c:	4603      	mov	r3, r0
    1f2e:	f083 0301 	eor.w	r3, r3, #1
    1f32:	b2db      	uxtb	r3, r3
		}
    1f34:	4618      	mov	r0, r3
    1f36:	3708      	adds	r7, #8
    1f38:	46bd      	mov	sp, r7
    1f3a:	bd80      	pop	{r7, pc}

00001f3c <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetFrequency(units::frequency::hertz_t frequency_hz) const override
    1f3c:	b590      	push	{r4, r7, lr}
    1f3e:	b087      	sub	sp, #28
    1f40:	af00      	add	r7, sp, #0
    1f42:	6078      	str	r0, [r7, #4]
    1f44:	6039      	str	r1, [r7, #0]
  {
    SJ2_ASSERT_FATAL(frequency_hz != 0_Hz, "Pwm Frequency cannot be zero Hz.");
    1f46:	f04f 0000 	mov.w	r0, #0
    1f4a:	f04f 0100 	mov.w	r1, #0
    1f4e:	f7fe fb23 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    1f52:	4603      	mov	r3, r0
    1f54:	60fb      	str	r3, [r7, #12]
    1f56:	f107 020c 	add.w	r2, r7, #12
    1f5a:	463b      	mov	r3, r7
    1f5c:	4611      	mov	r1, r2
    1f5e:	4618      	mov	r0, r3
    1f60:	f7ff ffdb 	bl	1f1a <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator!=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    1f64:	4603      	mov	r3, r0
    1f66:	f083 0301 	eor.w	r3, r3, #1
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d00d      	beq.n	1f8c <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x50>
    1f70:	23f4      	movs	r3, #244	; 0xf4
    1f72:	4a21      	ldr	r2, [pc, #132]	; (1ff8 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xbc>)
    1f74:	4921      	ldr	r1, [pc, #132]	; (1ffc <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    1f76:	4822      	ldr	r0, [pc, #136]	; (2000 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1f78:	f002 faca 	bl	4510 <printf>
    1f7c:	4821      	ldr	r0, [pc, #132]	; (2004 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc8>)
    1f7e:	f001 f9ab 	bl	32d8 <puts>
    1f82:	2100      	movs	r1, #0
    1f84:	2001      	movs	r0, #1
    1f86:	f7fe fc9f 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    1f8a:	e7fe      	b.n	1f8a <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x4e>
    // Disables PWM mode; this will reset all counters to 0
    // And allow us to update MR0
    float previous_duty_cycle = GetDutyCycle();
    1f8c:	6878      	ldr	r0, [r7, #4]
    1f8e:	f7ff ff99 	bl	1ec4 <sjsu::lpc40xx::Pwm::GetDutyCycle() const>
    1f92:	ed87 0a05 	vstr	s0, [r7, #20]
    EnablePwm(false);
    1f96:	2100      	movs	r1, #0
    1f98:	6878      	ldr	r0, [r7, #4]
    1f9a:	f000 f835 	bl	2008 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	689a      	ldr	r2, [r3, #8]
            channel_.peripheral.power_on_id);
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	685b      	ldr	r3, [r3, #4]
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	3304      	adds	r3, #4
    1faa:	4619      	mov	r1, r3
    1fac:	4610      	mov	r0, r2
    1fae:	f7fe fbe8 	bl	782 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1fb2:	4603      	mov	r3, r0
    1fb4:	60bb      	str	r3, [r7, #8]
    channel_.peripheral.registers->MR0 =
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1fb6:	463a      	mov	r2, r7
    1fb8:	f107 0308 	add.w	r3, r7, #8
    1fbc:	4611      	mov	r1, r2
    1fbe:	4618      	mov	r0, r3
    1fc0:	f7ff fd6a 	bl	1a98 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1fc4:	4603      	mov	r3, r0
    1fc6:	613b      	str	r3, [r7, #16]
    channel_.peripheral.registers->MR0 =
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	685b      	ldr	r3, [r3, #4]
    1fcc:	681b      	ldr	r3, [r3, #0]
    1fce:	681c      	ldr	r4, [r3, #0]
        (kPeripheralFrequency / frequency_hz).to<uint32_t>();
    1fd0:	f107 0310 	add.w	r3, r7, #16
    1fd4:	4618      	mov	r0, r3
    1fd6:	f7ff fd8b 	bl	1af0 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1fda:	4603      	mov	r3, r0
    channel_.peripheral.registers->MR0 =
    1fdc:	61a3      	str	r3, [r4, #24]
    SetDutyCycle(previous_duty_cycle);
    1fde:	ed97 0a05 	vldr	s0, [r7, #20]
    1fe2:	6878      	ldr	r0, [r7, #4]
    1fe4:	f7ff ff06 	bl	1df4 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const>
    EnablePwm();
    1fe8:	2101      	movs	r1, #1
    1fea:	6878      	ldr	r0, [r7, #4]
    1fec:	f000 f80c 	bl	2008 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>
  }
    1ff0:	bf00      	nop
    1ff2:	371c      	adds	r7, #28
    1ff4:	46bd      	mov	sp, r7
    1ff6:	bd90      	pop	{r4, r7, pc}
    1ff8:	00007328 	.word	0x00007328
    1ffc:	000070c0 	.word	0x000070c0
    2000:	00006dec 	.word	0x00006dec
    2004:	00006980 	.word	0x00006980

00002008 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const>:
    return result;
  }
  /// Helper method for enabling and disabling this PWM channel.
  /// @param enable - default to true, if set to false, will disable this PWM
  ///        channel.
  void EnablePwm(bool enable = true) const
    2008:	b580      	push	{r7, lr}
    200a:	b084      	sub	sp, #16
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
    2010:	460b      	mov	r3, r1
    2012:	70fb      	strb	r3, [r7, #3]
  {
    volatile uint32_t * pwm_timer = &channel_.peripheral.registers->TCR;
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	685b      	ldr	r3, [r3, #4]
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	681b      	ldr	r3, [r3, #0]
    201c:	3304      	adds	r3, #4
    201e:	60fb      	str	r3, [r7, #12]
    if (enable)
    2020:	78fb      	ldrb	r3, [r7, #3]
    2022:	2b00      	cmp	r3, #0
    2024:	d040      	beq.n	20a8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xa0>
    {
      // Reset the Timer Counter
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterReset);
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	6818      	ldr	r0, [r3, #0]
    202a:	4b29      	ldr	r3, [pc, #164]	; (20d0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    202c:	781a      	ldrb	r2, [r3, #0]
    202e:	785b      	ldrb	r3, [r3, #1]
    2030:	021b      	lsls	r3, r3, #8
    2032:	431a      	orrs	r2, r3
    2034:	2300      	movs	r3, #0
    2036:	f362 030f 	bfi	r3, r2, #0, #16
    203a:	4619      	mov	r1, r3
    203c:	f000 fcec 	bl	2a18 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2040:	4602      	mov	r2, r0
    2042:	68fb      	ldr	r3, [r7, #12]
    2044:	601a      	str	r2, [r3, #0]
      // Clear reset and allow timer to count
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kCounterReset);
    2046:	68fb      	ldr	r3, [r7, #12]
    2048:	6818      	ldr	r0, [r3, #0]
    204a:	4b21      	ldr	r3, [pc, #132]	; (20d0 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc8>)
    204c:	781a      	ldrb	r2, [r3, #0]
    204e:	785b      	ldrb	r3, [r3, #1]
    2050:	021b      	lsls	r3, r3, #8
    2052:	431a      	orrs	r2, r3
    2054:	2300      	movs	r3, #0
    2056:	f362 030f 	bfi	r3, r2, #0, #16
    205a:	4619      	mov	r1, r3
    205c:	f000 fcfd 	bl	2a5a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2060:	4602      	mov	r2, r0
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	601a      	str	r2, [r3, #0]
      // Enable PWM output
      *pwm_timer = bit::Set(*pwm_timer, Timer::kPwmEnable);
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	6818      	ldr	r0, [r3, #0]
    206a:	4b1a      	ldr	r3, [pc, #104]	; (20d4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    206c:	781a      	ldrb	r2, [r3, #0]
    206e:	785b      	ldrb	r3, [r3, #1]
    2070:	021b      	lsls	r3, r3, #8
    2072:	431a      	orrs	r2, r3
    2074:	2300      	movs	r3, #0
    2076:	f362 030f 	bfi	r3, r2, #0, #16
    207a:	4619      	mov	r1, r3
    207c:	f000 fccc 	bl	2a18 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    2080:	4602      	mov	r2, r0
    2082:	68fb      	ldr	r3, [r7, #12]
    2084:	601a      	str	r2, [r3, #0]
      // Enable counting
      *pwm_timer = bit::Set(*pwm_timer, Timer::kCounterEnable);
    2086:	68fb      	ldr	r3, [r7, #12]
    2088:	6818      	ldr	r0, [r3, #0]
    208a:	4b13      	ldr	r3, [pc, #76]	; (20d8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xd0>)
    208c:	781a      	ldrb	r2, [r3, #0]
    208e:	785b      	ldrb	r3, [r3, #1]
    2090:	021b      	lsls	r3, r3, #8
    2092:	431a      	orrs	r2, r3
    2094:	2300      	movs	r3, #0
    2096:	f362 030f 	bfi	r3, r2, #0, #16
    209a:	4619      	mov	r1, r3
    209c:	f000 fcbc 	bl	2a18 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    20a0:	4602      	mov	r2, r0
    20a2:	68fb      	ldr	r3, [r7, #12]
    20a4:	601a      	str	r2, [r3, #0]
    else
    {
      // Disable PWM output
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    }
  }
    20a6:	e00f      	b.n	20c8 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xc0>
      *pwm_timer = bit::Clear(*pwm_timer, Timer::kPwmEnable);
    20a8:	68fb      	ldr	r3, [r7, #12]
    20aa:	6818      	ldr	r0, [r3, #0]
    20ac:	4b09      	ldr	r3, [pc, #36]	; (20d4 <sjsu::lpc40xx::Pwm::EnablePwm(bool) const+0xcc>)
    20ae:	781a      	ldrb	r2, [r3, #0]
    20b0:	785b      	ldrb	r3, [r3, #1]
    20b2:	021b      	lsls	r3, r3, #8
    20b4:	431a      	orrs	r2, r3
    20b6:	2300      	movs	r3, #0
    20b8:	f362 030f 	bfi	r3, r2, #0, #16
    20bc:	4619      	mov	r1, r3
    20be:	f000 fccc 	bl	2a5a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    20c2:	4602      	mov	r2, r0
    20c4:	68fb      	ldr	r3, [r7, #12]
    20c6:	601a      	str	r2, [r3, #0]
  }
    20c8:	bf00      	nop
    20ca:	3710      	adds	r7, #16
    20cc:	46bd      	mov	sp, r7
    20ce:	bd80      	pop	{r7, pc}
    20d0:	0000708c 	.word	0x0000708c
    20d4:	00007090 	.word	0x00007090
    20d8:	00007088 	.word	0x00007088

000020dc <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>:
  /// Helper method to make getting a pointer to the Match Register 0 more
  /// readable in the code.
  ///
  /// @return a pointer to the match 0 register.
  volatile uint32_t * GetMatchRegisters() const
    20dc:	b480      	push	{r7}
    20de:	b083      	sub	sp, #12
    20e0:	af00      	add	r7, sp, #0
    20e2:	6078      	str	r0, [r7, #4]
  {
    return &channel_.peripheral.registers->MR0;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	685b      	ldr	r3, [r3, #4]
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	681b      	ldr	r3, [r3, #0]
    20ec:	3318      	adds	r3, #24
  }
    20ee:	4618      	mov	r0, r3
    20f0:	370c      	adds	r7, #12
    20f2:	46bd      	mov	sp, r7
    20f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20f8:	4770      	bx	lr

000020fa <sjsu::lpc40xx::Pwm::CalculateDutyCycle(float) const>:
  ///
  /// @param duty_cycle_percent - value from 0.0f to 1.0f indicating the duty
  ///        cycle precent.
  /// @return the nearest approximate match register value to achieve the
  ///         supplied duty cycle.
  uint32_t CalculateDutyCycle(float duty_cycle_percent) const
    20fa:	b580      	push	{r7, lr}
    20fc:	b084      	sub	sp, #16
    20fe:	af00      	add	r7, sp, #0
    2100:	6078      	str	r0, [r7, #4]
    2102:	ed87 0a00 	vstr	s0, [r7]
  {
    float pwm_period = static_cast<float>(GetMatchRegisters()[0]);
    2106:	6878      	ldr	r0, [r7, #4]
    2108:	f7ff ffe8 	bl	20dc <sjsu::lpc40xx::Pwm::GetMatchRegisters() const>
    210c:	4603      	mov	r3, r0
    210e:	681b      	ldr	r3, [r3, #0]
    2110:	ee07 3a90 	vmov	s15, r3
    2114:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2118:	edc7 7a03 	vstr	s15, [r7, #12]
    return static_cast<uint32_t>(duty_cycle_percent * pwm_period);
    211c:	ed97 7a00 	vldr	s14, [r7]
    2120:	edd7 7a03 	vldr	s15, [r7, #12]
    2124:	ee67 7a27 	vmul.f32	s15, s14, s15
    2128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    212c:	ee17 3a90 	vmov	r3, s15
  }
    2130:	4618      	mov	r0, r3
    2132:	3710      	adds	r7, #16
    2134:	46bd      	mov	sp, r7
    2136:	bd80      	pop	{r7, pc}

00002138 <sjsu::Servo::Servo(sjsu::Pwm const&)>:
  static constexpr units::angle::degree_t kDefaultMinAngle     = 0_deg;
  static constexpr units::angle::degree_t kDefaultMaxAngle     = 90_deg;
  static constexpr std::chrono::microseconds kDefaultMinPulse  = 1000us;
  static constexpr std::chrono::microseconds kDefaultMaxPulse  = 2000us;

  explicit constexpr Servo(const sjsu::Pwm & pwm)
    2138:	b590      	push	{r4, r7, lr}
    213a:	b085      	sub	sp, #20
    213c:	af00      	add	r7, sp, #0
    213e:	6078      	str	r0, [r7, #4]
    2140:	6039      	str	r1, [r7, #0]
      : servo_pwm_(pwm),
        waveform_period_(0),
        pulse_lower_bound_(kDefaultMinPulse),
        pulse_upper_bound_(kDefaultMaxPulse),
        min_angle_(kDefaultMinAngle),
        max_angle_(kDefaultMaxAngle)
    2142:	4a17      	ldr	r2, [pc, #92]	; (21a0 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x68>)
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	601a      	str	r2, [r3, #0]
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	683a      	ldr	r2, [r7, #0]
    214c:	605a      	str	r2, [r3, #4]
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	f103 0208 	add.w	r2, r3, #8
    2154:	2300      	movs	r3, #0
    2156:	60fb      	str	r3, [r7, #12]
    2158:	f107 030c 	add.w	r3, r7, #12
    215c:	4619      	mov	r1, r3
    215e:	4610      	mov	r0, r2
    2160:	f000 f9a2 	bl	24a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2164:	687a      	ldr	r2, [r7, #4]
    2166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    216a:	f04f 0400 	mov.w	r4, #0
    216e:	e9c2 3404 	strd	r3, r4, [r2, #16]
    2172:	687a      	ldr	r2, [r7, #4]
    2174:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2178:	f04f 0400 	mov.w	r4, #0
    217c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	f04f 0200 	mov.w	r2, #0
    2186:	621a      	str	r2, [r3, #32]
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	f04f 0200 	mov.w	r2, #0
    218e:	625a      	str	r2, [r3, #36]	; 0x24
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	4a04      	ldr	r2, [pc, #16]	; (21a4 <sjsu::Servo::Servo(sjsu::Pwm const&)+0x6c>)
    2194:	625a      	str	r2, [r3, #36]	; 0x24
  {
  }
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	4618      	mov	r0, r3
    219a:	3714      	adds	r7, #20
    219c:	46bd      	mov	sp, r7
    219e:	bd90      	pop	{r4, r7, pc}
    21a0:	00007118 	.word	0x00007118
    21a4:	42b40000 	.word	0x42b40000

000021a8 <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void Initialize(
    21a8:	b580      	push	{r7, lr}
    21aa:	b082      	sub	sp, #8
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
    21b0:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.Initialize(frequency);
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	685a      	ldr	r2, [r3, #4]
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	685b      	ldr	r3, [r3, #4]
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	681b      	ldr	r3, [r3, #0]
    21be:	6839      	ldr	r1, [r7, #0]
    21c0:	4610      	mov	r0, r2
    21c2:	4798      	blx	r3
    SetFrequency(frequency);
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	681b      	ldr	r3, [r3, #0]
    21c8:	3304      	adds	r3, #4
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	6839      	ldr	r1, [r7, #0]
    21ce:	6878      	ldr	r0, [r7, #4]
    21d0:	4798      	blx	r3
  }
    21d2:	bf00      	nop
    21d4:	3708      	adds	r7, #8
    21d6:	46bd      	mov	sp, r7
    21d8:	bd80      	pop	{r7, pc}

000021da <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    21da:	b580      	push	{r7, lr}
    21dc:	b086      	sub	sp, #24
    21de:	af00      	add	r7, sp, #0
    21e0:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    21e2:	6878      	ldr	r0, [r7, #4]
    21e4:	f000 fc48 	bl	2a78 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    21e8:	eef0 7a40 	vmov.f32	s15, s0
	}
    21ec:	eeb0 0a67 	vmov.f32	s0, s15
    21f0:	3718      	adds	r7, #24
    21f2:	46bd      	mov	sp, r7
    21f4:	bd80      	pop	{r7, pc}

000021f6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    21f6:	b580      	push	{r7, lr}
    21f8:	ed2d 8b02 	vpush	{d8}
    21fc:	b084      	sub	sp, #16
    21fe:	af00      	add	r7, sp, #0
    2200:	6078      	str	r0, [r7, #4]
    2202:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	4618      	mov	r0, r3
    2208:	f7fe fe46 	bl	e98 <units::linear_scale<float>::operator()() const>
    220c:	eeb0 8a40 	vmov.f32	s16, s0
    2210:	683b      	ldr	r3, [r7, #0]
    2212:	4618      	mov	r0, r3
    2214:	f7fe fe40 	bl	e98 <units::linear_scale<float>::operator()() const>
    2218:	eef0 7a40 	vmov.f32	s15, s0
    221c:	edc7 7a03 	vstr	s15, [r7, #12]
    2220:	f107 030c 	add.w	r3, r7, #12
    2224:	4618      	mov	r0, r3
    2226:	f7ff ffd8 	bl	21da <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    222a:	eeb0 7a40 	vmov.f32	s14, s0
    222e:	eec8 7a07 	vdiv.f32	s15, s16, s14
    2232:	f107 0308 	add.w	r3, r7, #8
    2236:	eeb0 0a67 	vmov.f32	s0, s15
    223a:	4618      	mov	r0, r3
    223c:	f7fe fe67 	bl	f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2240:	68bb      	ldr	r3, [r7, #8]
	}
    2242:	4618      	mov	r0, r3
    2244:	3710      	adds	r7, #16
    2246:	46bd      	mov	sp, r7
    2248:	ecbd 8b02 	vpop	{d8}
    224c:	bd80      	pop	{r7, pc}

0000224e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    224e:	b490      	push	{r4, r7}
    2250:	b082      	sub	sp, #8
    2252:	af00      	add	r7, sp, #0
    2254:	6078      	str	r0, [r7, #4]
    2256:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    2258:	683b      	ldr	r3, [r7, #0]
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	f04f 0400 	mov.w	r4, #0
    2260:	687a      	ldr	r2, [r7, #4]
    2262:	e9c2 3400 	strd	r3, r4, [r2]
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	4618      	mov	r0, r3
    226a:	3708      	adds	r7, #8
    226c:	46bd      	mov	sp, r7
    226e:	bc90      	pop	{r4, r7}
    2270:	4770      	bx	lr

00002272 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  virtual void SetFrequency(
    2272:	b590      	push	{r4, r7, lr}
    2274:	b089      	sub	sp, #36	; 0x24
    2276:	af00      	add	r7, sp, #0
    2278:	6078      	str	r0, [r7, #4]
    227a:	6039      	str	r1, [r7, #0]
      units::frequency::hertz_t frequency = kDefaultFrequency)
  {
    servo_pwm_.SetFrequency(frequency);
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	685a      	ldr	r2, [r3, #4]
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	685b      	ldr	r3, [r3, #4]
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	330c      	adds	r3, #12
    2288:	681b      	ldr	r3, [r3, #0]
    228a:	6839      	ldr	r1, [r7, #0]
    228c:	4610      	mov	r0, r2
    228e:	4798      	blx	r3
    waveform_period_ =
        std::chrono::microseconds((1_MHz / frequency).to<uint32_t>());
    2290:	f04f 0001 	mov.w	r0, #1
    2294:	f04f 0100 	mov.w	r1, #0
    2298:	f7fe f994 	bl	5c4 <units::literals::operator"" _MHz(unsigned long long)>
    229c:	4603      	mov	r3, r0
    229e:	61fb      	str	r3, [r7, #28]
    22a0:	463a      	mov	r2, r7
    22a2:	f107 031c 	add.w	r3, r7, #28
    22a6:	4611      	mov	r1, r2
    22a8:	4618      	mov	r0, r3
    22aa:	f7ff ffa4 	bl	21f6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    22ae:	4603      	mov	r3, r0
    22b0:	61bb      	str	r3, [r7, #24]
    22b2:	f107 0318 	add.w	r3, r7, #24
    22b6:	4618      	mov	r0, r3
    22b8:	f7ff fc1a 	bl	1af0 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    22bc:	4603      	mov	r3, r0
    22be:	617b      	str	r3, [r7, #20]
    22c0:	f107 0214 	add.w	r2, r7, #20
    22c4:	f107 0308 	add.w	r3, r7, #8
    22c8:	4611      	mov	r1, r2
    22ca:	4618      	mov	r0, r3
    22cc:	f7ff ffbf 	bl	224e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    waveform_period_ =
    22d0:	687a      	ldr	r2, [r7, #4]
    22d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    22d6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  }
    22da:	bf00      	nop
    22dc:	3724      	adds	r7, #36	; 0x24
    22de:	46bd      	mov	sp, r7
    22e0:	bd90      	pop	{r4, r7, pc}

000022e2 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  // Sets the minimum and maximum pulse width lengths that the class will
  // use to clamp its pulse width output when using SetAngle.
  virtual void SetPulseBounds(std::chrono::microseconds lower,
    22e2:	b490      	push	{r4, r7}
    22e4:	b084      	sub	sp, #16
    22e6:	af00      	add	r7, sp, #0
    22e8:	60f8      	str	r0, [r7, #12]
    22ea:	e9c7 2300 	strd	r2, r3, [r7]
                              std::chrono::microseconds upper)
  {
    pulse_lower_bound_ = lower;
    22ee:	68fa      	ldr	r2, [r7, #12]
    22f0:	e9d7 3400 	ldrd	r3, r4, [r7]
    22f4:	e9c2 3404 	strd	r3, r4, [r2, #16]
    pulse_upper_bound_ = upper;
    22f8:	68fa      	ldr	r2, [r7, #12]
    22fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    22fe:	e9c2 3406 	strd	r3, r4, [r2, #24]
  }
    2302:	bf00      	nop
    2304:	3710      	adds	r7, #16
    2306:	46bd      	mov	sp, r7
    2308:	bc90      	pop	{r4, r7}
    230a:	4770      	bx	lr

0000230c <sjsu::Servo::SetAngleBounds(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Sets your angle bounds that maps angles to microseconds when
  // using SetAngle
  virtual void SetAngleBounds(units::angle::degree_t min_angle,
    230c:	b480      	push	{r7}
    230e:	b085      	sub	sp, #20
    2310:	af00      	add	r7, sp, #0
    2312:	60f8      	str	r0, [r7, #12]
    2314:	60b9      	str	r1, [r7, #8]
    2316:	607a      	str	r2, [r7, #4]
                              units::angle::degree_t max_angle)
  {
    min_angle_ = min_angle;
    2318:	68fb      	ldr	r3, [r7, #12]
    231a:	68ba      	ldr	r2, [r7, #8]
    231c:	621a      	str	r2, [r3, #32]
    max_angle_ = max_angle;
    231e:	68fb      	ldr	r3, [r7, #12]
    2320:	687a      	ldr	r2, [r7, #4]
    2322:	625a      	str	r2, [r3, #36]	; 0x24
  }
    2324:	bf00      	nop
    2326:	3714      	adds	r7, #20
    2328:	46bd      	mov	sp, r7
    232a:	f85d 7b04 	ldr.w	r7, [sp], #4
    232e:	4770      	bx	lr

00002330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    2330:	b490      	push	{r4, r7}
    2332:	b082      	sub	sp, #8
    2334:	af00      	add	r7, sp, #0
    2336:	6078      	str	r0, [r7, #4]
	{ return __r; }
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	e9d3 3400 	ldrd	r3, r4, [r3]
    233e:	4618      	mov	r0, r3
    2340:	4621      	mov	r1, r4
    2342:	3708      	adds	r7, #8
    2344:	46bd      	mov	sp, r7
    2346:	bc90      	pop	{r4, r7}
    2348:	4770      	bx	lr

0000234a <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

  virtual void SetPulseWidthInMicroseconds(
    234a:	b5b0      	push	{r4, r5, r7, lr}
    234c:	ed2d 8b02 	vpush	{d8}
    2350:	b084      	sub	sp, #16
    2352:	af00      	add	r7, sp, #0
    2354:	60f8      	str	r0, [r7, #12]
    2356:	e9c7 2300 	strd	r2, r3, [r7]
      std::chrono::microseconds pulse_width)
  {
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    235a:	68fb      	ldr	r3, [r7, #12]
    235c:	685d      	ldr	r5, [r3, #4]
    235e:	68fb      	ldr	r3, [r7, #12]
    2360:	685b      	ldr	r3, [r3, #4]
                            static_cast<float>(waveform_period_.count()));
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	3304      	adds	r3, #4
    2366:	681c      	ldr	r4, [r3, #0]
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    2368:	463b      	mov	r3, r7
    236a:	4618      	mov	r0, r3
    236c:	f7ff ffe0 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2370:	4602      	mov	r2, r0
    2372:	460b      	mov	r3, r1
    2374:	4610      	mov	r0, r2
    2376:	4619      	mov	r1, r3
    2378:	f003 f852 	bl	5420 <__aeabi_l2f>
    237c:	ee08 0a10 	vmov	s16, r0
                            static_cast<float>(waveform_period_.count()));
    2380:	68fb      	ldr	r3, [r7, #12]
    2382:	3308      	adds	r3, #8
    2384:	4618      	mov	r0, r3
    2386:	f7ff ffd3 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    238a:	4602      	mov	r2, r0
    238c:	460b      	mov	r3, r1
    238e:	4610      	mov	r0, r2
    2390:	4619      	mov	r1, r3
    2392:	f003 f845 	bl	5420 <__aeabi_l2f>
    2396:	ee07 0a10 	vmov	s14, r0
    servo_pwm_.SetDutyCycle(static_cast<float>(pulse_width.count()) /
    239a:	eec8 7a07 	vdiv.f32	s15, s16, s14
    239e:	eeb0 0a67 	vmov.f32	s0, s15
    23a2:	4628      	mov	r0, r5
    23a4:	47a0      	blx	r4
  }
    23a6:	bf00      	nop
    23a8:	3710      	adds	r7, #16
    23aa:	46bd      	mov	sp, r7
    23ac:	ecbd 8b02 	vpop	{d8}
    23b0:	bdb0      	pop	{r4, r5, r7, pc}

000023b2 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>:
		inline constexpr Ty to() const noexcept
    23b2:	b580      	push	{r7, lr}
    23b4:	b082      	sub	sp, #8
    23b6:	af00      	add	r7, sp, #0
    23b8:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    23ba:	6878      	ldr	r0, [r7, #4]
    23bc:	f000 f807 	bl	23ce <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>
    23c0:	eef0 7a40 	vmov.f32	s15, s0
		}
    23c4:	eeb0 0a67 	vmov.f32	s0, s15
    23c8:	3708      	adds	r7, #8
    23ca:	46bd      	mov	sp, r7
    23cc:	bd80      	pop	{r7, pc}

000023ce <units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator float<float, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    23ce:	b580      	push	{r7, lr}
    23d0:	b082      	sub	sp, #8
    23d2:	af00      	add	r7, sp, #0
    23d4:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	4618      	mov	r0, r3
    23da:	f7fe fd5d 	bl	e98 <units::linear_scale<float>::operator()() const>
    23de:	eef0 7a40 	vmov.f32	s15, s0
		}
    23e2:	eeb0 0a67 	vmov.f32	s0, s15
    23e6:	3708      	adds	r7, #8
    23e8:	46bd      	mov	sp, r7
    23ea:	bd80      	pop	{r7, pc}

000023ec <sjsu::Servo::SetAngle(units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:

  // Should only be used after pulse bounds and angle bounds have been set.
  virtual void SetAngle(units::angle::degree_t angle)
    23ec:	b5b0      	push	{r4, r5, r7, lr}
    23ee:	ed2d 8b04 	vpush	{d8-d9}
    23f2:	b086      	sub	sp, #24
    23f4:	af00      	add	r7, sp, #0
    23f6:	6078      	str	r0, [r7, #4]
    23f8:	6039      	str	r1, [r7, #0]
  {
    float pulse_width = Map(angle.to<float>(),
    23fa:	463b      	mov	r3, r7
    23fc:	4618      	mov	r0, r3
    23fe:	f7ff ffd8 	bl	23b2 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2402:	eeb0 8a40 	vmov.f32	s16, s0
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	3320      	adds	r3, #32
    240a:	4618      	mov	r0, r3
    240c:	f7ff ffd1 	bl	23b2 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    2410:	eef0 8a40 	vmov.f32	s17, s0
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	3324      	adds	r3, #36	; 0x24
    2418:	4618      	mov	r0, r3
    241a:	f7ff ffca 	bl	23b2 <float units::unit_t<units::unit<std::ratio<1ll, 180ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<float, void>() const>
    241e:	eeb0 9a40 	vmov.f32	s18, s0
                            min_angle_.to<float>(),
                            max_angle_.to<float>(),
                            static_cast<float>(pulse_lower_bound_.count()),
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	3310      	adds	r3, #16
    2426:	4618      	mov	r0, r3
    2428:	f7ff ff82 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    242c:	4603      	mov	r3, r0
    242e:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    2430:	4618      	mov	r0, r3
    2432:	4621      	mov	r1, r4
    2434:	f002 fff4 	bl	5420 <__aeabi_l2f>
    2438:	4605      	mov	r5, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	3318      	adds	r3, #24
    243e:	4618      	mov	r0, r3
    2440:	f7ff ff76 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2444:	4603      	mov	r3, r0
    2446:	460c      	mov	r4, r1
    float pulse_width = Map(angle.to<float>(),
    2448:	4618      	mov	r0, r3
    244a:	4621      	mov	r1, r4
    244c:	f002 ffe8 	bl	5420 <__aeabi_l2f>
    2450:	4603      	mov	r3, r0
                            static_cast<float>(pulse_upper_bound_.count()));
    2452:	ee02 3a10 	vmov	s4, r3
    2456:	ee01 5a90 	vmov	s3, r5
    245a:	eeb0 1a49 	vmov.f32	s2, s18
    245e:	eef0 0a68 	vmov.f32	s1, s17
    2462:	eeb0 0a48 	vmov.f32	s0, s16
    2466:	f000 fb21 	bl	2aac <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    246a:	ed87 0a05 	vstr	s0, [r7, #20]
    SetPulseWidthInMicroseconds(
        std::chrono::microseconds(static_cast<uint32_t>(pulse_width)));
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	3310      	adds	r3, #16
    2474:	681c      	ldr	r4, [r3, #0]
    2476:	edd7 7a05 	vldr	s15, [r7, #20]
    247a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    247e:	ee17 3a90 	vmov	r3, s15
    2482:	613b      	str	r3, [r7, #16]
    SetPulseWidthInMicroseconds(
    2484:	f107 0210 	add.w	r2, r7, #16
    2488:	f107 0308 	add.w	r3, r7, #8
    248c:	4611      	mov	r1, r2
    248e:	4618      	mov	r0, r3
    2490:	f7ff fedd 	bl	224e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<unsigned long, void>(unsigned long const&)>
    2494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2498:	6878      	ldr	r0, [r7, #4]
    249a:	47a0      	blx	r4
  }
    249c:	bf00      	nop
    249e:	3718      	adds	r7, #24
    24a0:	46bd      	mov	sp, r7
    24a2:	ecbd 8b04 	vpop	{d8-d9}
    24a6:	bdb0      	pop	{r4, r5, r7, pc}

000024a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    24a8:	b490      	push	{r4, r7}
    24aa:	b082      	sub	sp, #8
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
    24b0:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    24b2:	683b      	ldr	r3, [r7, #0]
    24b4:	681b      	ldr	r3, [r3, #0]
    24b6:	ea4f 74e3 	mov.w	r4, r3, asr #31
    24ba:	687a      	ldr	r2, [r7, #4]
    24bc:	e9c2 3400 	strd	r3, r4, [r2]
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	4618      	mov	r0, r3
    24c4:	3708      	adds	r7, #8
    24c6:	46bd      	mov	sp, r7
    24c8:	bc90      	pop	{r4, r7}
    24ca:	4770      	bx	lr

000024cc <std::chrono::duration_values<long long>::max()>:
	max()
    24cc:	b598      	push	{r3, r4, r7, lr}
    24ce:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    24d0:	f7fd ff4a 	bl	368 <std::numeric_limits<long long>::max()>
    24d4:	4603      	mov	r3, r0
    24d6:	460c      	mov	r4, r1
    24d8:	4618      	mov	r0, r3
    24da:	4621      	mov	r1, r4
    24dc:	bd98      	pop	{r3, r4, r7, pc}

000024de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    24de:	b590      	push	{r4, r7, lr}
    24e0:	b085      	sub	sp, #20
    24e2:	af00      	add	r7, sp, #0
    24e4:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    24e6:	f7ff fff1 	bl	24cc <std::chrono::duration_values<long long>::max()>
    24ea:	4603      	mov	r3, r0
    24ec:	460c      	mov	r4, r1
    24ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
    24f2:	f107 0308 	add.w	r3, r7, #8
    24f6:	4619      	mov	r1, r3
    24f8:	6878      	ldr	r0, [r7, #4]
    24fa:	f7fe fa37 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    24fe:	6878      	ldr	r0, [r7, #4]
    2500:	3714      	adds	r7, #20
    2502:	46bd      	mov	sp, r7
    2504:	bd90      	pop	{r4, r7, pc}

00002506 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    2506:	b580      	push	{r7, lr}
    2508:	b082      	sub	sp, #8
    250a:	af00      	add	r7, sp, #0
    250c:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	4618      	mov	r0, r3
    2512:	f000 f805 	bl	2520 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
    2516:	6878      	ldr	r0, [r7, #4]
    2518:	3708      	adds	r7, #8
    251a:	46bd      	mov	sp, r7
    251c:	bd80      	pop	{r7, pc}
    251e:	Address 0x000000000000251e is out of bounds.


00002520 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    2520:	b580      	push	{r7, lr}
    2522:	b082      	sub	sp, #8
    2524:	af00      	add	r7, sp, #0
    2526:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    2528:	4903      	ldr	r1, [pc, #12]	; (2538 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
    252a:	6878      	ldr	r0, [r7, #4]
    252c:	f7fe fab7 	bl	a9e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    2530:	6878      	ldr	r0, [r7, #4]
    2532:	3708      	adds	r7, #8
    2534:	46bd      	mov	sp, r7
    2536:	bd80      	pop	{r7, pc}
    2538:	000067d0 	.word	0x000067d0

0000253c <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    253c:	b580      	push	{r7, lr}
    253e:	b082      	sub	sp, #8
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
    2544:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	6839      	ldr	r1, [r7, #0]
    254a:	4618      	mov	r0, r3
    254c:	f000 f804 	bl	2558 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    2550:	6878      	ldr	r0, [r7, #4]
    2552:	3708      	adds	r7, #8
    2554:	46bd      	mov	sp, r7
    2556:	bd80      	pop	{r7, pc}

00002558 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    2558:	b5f0      	push	{r4, r5, r6, r7, lr}
    255a:	b085      	sub	sp, #20
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	f7fe faac 	bl	ac0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    2568:	4605      	mov	r5, r0
    256a:	460e      	mov	r6, r1
    256c:	462b      	mov	r3, r5
    256e:	4634      	mov	r4, r6
    2570:	f04f 0100 	mov.w	r1, #0
    2574:	f04f 0200 	mov.w	r2, #0
    2578:	0162      	lsls	r2, r4, #5
    257a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    257e:	0159      	lsls	r1, r3, #5
    2580:	460b      	mov	r3, r1
    2582:	4614      	mov	r4, r2
    2584:	1b5b      	subs	r3, r3, r5
    2586:	eb64 0406 	sbc.w	r4, r4, r6
    258a:	f04f 0100 	mov.w	r1, #0
    258e:	f04f 0200 	mov.w	r2, #0
    2592:	00a2      	lsls	r2, r4, #2
    2594:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2598:	0099      	lsls	r1, r3, #2
    259a:	460b      	mov	r3, r1
    259c:	4614      	mov	r4, r2
    259e:	195b      	adds	r3, r3, r5
    25a0:	eb44 0406 	adc.w	r4, r4, r6
    25a4:	f04f 0100 	mov.w	r1, #0
    25a8:	f04f 0200 	mov.w	r2, #0
    25ac:	00e2      	lsls	r2, r4, #3
    25ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    25b2:	00d9      	lsls	r1, r3, #3
    25b4:	460b      	mov	r3, r1
    25b6:	4614      	mov	r4, r2
    25b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    25bc:	f107 0308 	add.w	r3, r7, #8
    25c0:	4619      	mov	r1, r3
    25c2:	6878      	ldr	r0, [r7, #4]
    25c4:	f7fe f9d2 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    25c8:	6878      	ldr	r0, [r7, #4]
    25ca:	3714      	adds	r7, #20
    25cc:	46bd      	mov	sp, r7
    25ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000025d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    25d0:	b590      	push	{r4, r7, lr}
    25d2:	b085      	sub	sp, #20
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
    25d8:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    25da:	f107 0308 	add.w	r3, r7, #8
    25de:	6839      	ldr	r1, [r7, #0]
    25e0:	4618      	mov	r0, r3
    25e2:	f7ff ffab 	bl	253c <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    25e6:	f107 0308 	add.w	r3, r7, #8
    25ea:	4618      	mov	r0, r3
    25ec:	f7ff fea0 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    25f0:	4603      	mov	r3, r0
    25f2:	460c      	mov	r4, r1
    25f4:	687a      	ldr	r2, [r7, #4]
    25f6:	e9c2 3400 	strd	r3, r4, [r2]
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	4618      	mov	r0, r3
    25fe:	3714      	adds	r7, #20
    2600:	46bd      	mov	sp, r7
    2602:	bd90      	pop	{r4, r7, pc}

00002604 <main>:
// Constants for the Linear Actuator Motor Controllers
constexpr units::frequency::hertz_t motor_controller_freq = 75_Hz;
constexpr std::chrono::microseconds motor_controller_min_pulse = 1000us;
constexpr std::chrono::microseconds motor_controller_max_pulse = 2000us;
int main()
{
    2604:	b590      	push	{r4, r7, lr}
    2606:	b0a3      	sub	sp, #140	; 0x8c
    2608:	af02      	add	r7, sp, #8
                              DefaultSystemController())
    260a:	f7fe fe53 	bl	12b4 <sjsu::lpc40xx::DefaultSystemController()>
    260e:	4603      	mov	r3, r0
  {
    float f;
    uint32_t ui;
  }rec;
  // Declare peripheral objects
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    2610:	461a      	mov	r2, r3
    2612:	f107 0340 	add.w	r3, r7, #64	; 0x40
    2616:	495b      	ldr	r1, [pc, #364]	; (2784 <main+0x180>)
    2618:	4618      	mov	r0, r3
    261a:	f7ff f89f 	bl	175c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    261e:	f7fe fe49 	bl	12b4 <sjsu::lpc40xx::DefaultSystemController()>
    2622:	4603      	mov	r3, r0
  
  sjsu::lpc40xx::Pwm p2_0(sjsu::lpc40xx::Pwm::Channel::kPwm0);
    2624:	461a      	mov	r2, r3
    2626:	f107 0334 	add.w	r3, r7, #52	; 0x34
    262a:	4957      	ldr	r1, [pc, #348]	; (2788 <main+0x184>)
    262c:	4618      	mov	r0, r3
    262e:	f7ff fae7 	bl	1c00 <sjsu::lpc40xx::Pwm::Pwm(sjsu::lpc40xx::Pwm::Channel_t const&, sjsu::SystemController const&)>
  uart2.Initialize(38400);
    2632:	f107 0340 	add.w	r3, r7, #64	; 0x40
    2636:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    263a:	4618      	mov	r0, r3
    263c:	f7ff f8a8 	bl	1790 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    2640:	231c      	movs	r3, #28
    2642:	4a52      	ldr	r2, [pc, #328]	; (278c <main+0x188>)
    2644:	4952      	ldr	r1, [pc, #328]	; (2790 <main+0x18c>)
    2646:	4853      	ldr	r0, [pc, #332]	; (2794 <main+0x190>)
    2648:	f001 ff62 	bl	4510 <printf>
  uint32_t LA_position = 0;
    264c:	2300      	movs	r3, #0
    264e:	67bb      	str	r3, [r7, #120]	; 0x78
  float set_point = 0;
    2650:	f04f 0300 	mov.w	r3, #0
    2654:	677b      	str	r3, [r7, #116]	; 0x74
  sjsu::Servo linear_actuator(p2_0);
    2656:	f107 0234 	add.w	r2, r7, #52	; 0x34
    265a:	f107 0308 	add.w	r3, r7, #8
    265e:	4611      	mov	r1, r2
    2660:	4618      	mov	r0, r3
    2662:	f7ff fd69 	bl	2138 <sjsu::Servo::Servo(sjsu::Pwm const&)>
  linear_actuator.Initialize();
    2666:	4b4c      	ldr	r3, [pc, #304]	; (2798 <main+0x194>)
    2668:	f107 0208 	add.w	r2, r7, #8
    266c:	6819      	ldr	r1, [r3, #0]
    266e:	4610      	mov	r0, r2
    2670:	f7ff fd9a 	bl	21a8 <sjsu::Servo::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator.SetFrequency(motor_controller_freq);
    2674:	4b49      	ldr	r3, [pc, #292]	; (279c <main+0x198>)
    2676:	f107 0208 	add.w	r2, r7, #8
    267a:	6819      	ldr	r1, [r3, #0]
    267c:	4610      	mov	r0, r2
    267e:	f7ff fdf8 	bl	2272 <sjsu::Servo::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>
  linear_actuator.SetPulseBounds(motor_controller_min_pulse, 
    2682:	4a47      	ldr	r2, [pc, #284]	; (27a0 <main+0x19c>)
    2684:	f107 0108 	add.w	r1, r7, #8
    2688:	4b46      	ldr	r3, [pc, #280]	; (27a4 <main+0x1a0>)
    268a:	e9d3 3400 	ldrd	r3, r4, [r3]
    268e:	e9cd 3400 	strd	r3, r4, [sp]
    2692:	e9d2 2300 	ldrd	r2, r3, [r2]
    2696:	4608      	mov	r0, r1
    2698:	f7ff fe23 	bl	22e2 <sjsu::Servo::SetPulseBounds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
                                 motor_controller_max_pulse);
  LOG_INFO("Motor controller initialized");
    269c:	2324      	movs	r3, #36	; 0x24
    269e:	4a3b      	ldr	r2, [pc, #236]	; (278c <main+0x188>)
    26a0:	4941      	ldr	r1, [pc, #260]	; (27a8 <main+0x1a4>)
    26a2:	4842      	ldr	r0, [pc, #264]	; (27ac <main+0x1a8>)
    26a4:	f001 ff34 	bl	4510 <printf>
  bool prev_sign = false;
    26a8:	2300      	movs	r3, #0
    26aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  while (true)
  {
    // LA_position = adc2.Read();

    // Receive a float (Glove data) over UART
    for (size_t i = 0; i < 4; i++)
    26ae:	2300      	movs	r3, #0
    26b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    26b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    26b4:	2b03      	cmp	r3, #3
    26b6:	d818      	bhi.n	26ea <main+0xe6>
    {
      uint8_t receive = uart2.Read();
    26b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    26bc:	4618      	mov	r0, r3
    26be:	f7ff ff0e 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    26c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
    26c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    26ca:	4608      	mov	r0, r1
    26cc:	f7fe fdfc 	bl	12c8 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    26d0:	4603      	mov	r3, r0
    26d2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
      rec.ui = (rec.ui << 8) | receive;
    26d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    26d8:	021a      	lsls	r2, r3, #8
    26da:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
    26de:	4313      	orrs	r3, r2
    26e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (size_t i = 0; i < 4; i++)
    26e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    26e4:	3301      	adds	r3, #1
    26e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    26e8:	e7e3      	b.n	26b2 <main+0xae>
    }
    LOG_INFO("Read value %f over UART", rec.f);
    26ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    26ec:	4618      	mov	r0, r3
    26ee:	f002 fd1f 	bl	5130 <__aeabi_f2d>
    26f2:	4603      	mov	r3, r0
    26f4:	460c      	mov	r4, r1
    26f6:	e9cd 3400 	strd	r3, r4, [sp]
    26fa:	2330      	movs	r3, #48	; 0x30
    26fc:	4a23      	ldr	r2, [pc, #140]	; (278c <main+0x188>)
    26fe:	492c      	ldr	r1, [pc, #176]	; (27b0 <main+0x1ac>)
    2700:	482c      	ldr	r0, [pc, #176]	; (27b4 <main+0x1b0>)
    2702:	f001 ff05 	bl	4510 <printf>
    set_point = rec.f;
    2706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2708:	677b      	str	r3, [r7, #116]	; 0x74
    // Run the recieved data through the PID algorithm
    // Map the output from the PID controller to proper units for the LA 
    int converted_output 
        = (sjsu::Map(rec.f, 0.0f, 3.3f, 1000.0f, 2000.0f));
    270a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
    270e:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 27b8 <main+0x1b4>
    2712:	eddf 1a2a 	vldr	s3, [pc, #168]	; 27bc <main+0x1b8>
    2716:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 27c0 <main+0x1bc>
    271a:	eddf 0a2a 	vldr	s1, [pc, #168]	; 27c4 <main+0x1c0>
    271e:	eeb0 0a67 	vmov.f32	s0, s15
    2722:	f000 f9c3 	bl	2aac <float sjsu::Map<float, float, float>(float, float, float, float, float)>
    2726:	eef0 7a40 	vmov.f32	s15, s0
    272a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    272e:	ee17 3a90 	vmov	r3, s15
    2732:	607b      	str	r3, [r7, #4]
        LOG_INFO("%f",converted_output);
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	9300      	str	r3, [sp, #0]
    2738:	2336      	movs	r3, #54	; 0x36
    273a:	4a14      	ldr	r2, [pc, #80]	; (278c <main+0x188>)
    273c:	4922      	ldr	r1, [pc, #136]	; (27c8 <main+0x1c4>)
    273e:	4823      	ldr	r0, [pc, #140]	; (27cc <main+0x1c8>)
    2740:	f001 fee6 	bl	4510 <printf>
      linear_actuator.SetPulseWidthInMicroseconds(static_cast<std::chrono::microseconds>(converted_output));
    2744:	1d3a      	adds	r2, r7, #4
    2746:	f107 0358 	add.w	r3, r7, #88	; 0x58
    274a:	4611      	mov	r1, r2
    274c:	4618      	mov	r0, r3
    274e:	f7ff feab 	bl	24a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<int, void>(int const&)>
    2752:	f107 0108 	add.w	r1, r7, #8
    2756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    275a:	4608      	mov	r0, r1
    275c:	f7ff fdf5 	bl	234a <sjsu::Servo::SetPulseWidthInMicroseconds(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
    // Delay 100 ms
    sjsu::Delay(100ms);
    2760:	f107 0368 	add.w	r3, r7, #104	; 0x68
    2764:	4618      	mov	r0, r3
    2766:	f7ff fece 	bl	2506 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
    276a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    276e:	f107 0360 	add.w	r3, r7, #96	; 0x60
    2772:	4611      	mov	r1, r2
    2774:	4618      	mov	r0, r3
    2776:	f7ff ff2b 	bl	25d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    277a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
    277e:	f7fe f981 	bl	a84 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
    2782:	e794      	b.n	26ae <main+0xaa>
    2784:	1000000c 	.word	0x1000000c
    2788:	000070a4 	.word	0x000070a4
    278c:	000071d4 	.word	0x000071d4
    2790:	000070e0 	.word	0x000070e0
    2794:	00006e90 	.word	0x00006e90
    2798:	000070c8 	.word	0x000070c8
    279c:	000070cc 	.word	0x000070cc
    27a0:	000070d0 	.word	0x000070d0
    27a4:	000070d8 	.word	0x000070d8
    27a8:	000070ec 	.word	0x000070ec
    27ac:	00006edc 	.word	0x00006edc
    27b0:	000070f8 	.word	0x000070f8
    27b4:	00006f34 	.word	0x00006f34
    27b8:	44fa0000 	.word	0x44fa0000
    27bc:	447a0000 	.word	0x447a0000
    27c0:	40533333 	.word	0x40533333
    27c4:	00000000 	.word	0x00000000
    27c8:	00007104 	.word	0x00007104
    27cc:	00006f88 	.word	0x00006f88

000027d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    27d0:	b580      	push	{r7, lr}
    27d2:	b084      	sub	sp, #16
    27d4:	af00      	add	r7, sp, #0
    27d6:	60f8      	str	r0, [r7, #12]
    27d8:	460b      	mov	r3, r1
    27da:	80ba      	strh	r2, [r7, #4]
    27dc:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    27de:	793b      	ldrb	r3, [r7, #4]
    27e0:	461a      	mov	r2, r3
    27e2:	797b      	ldrb	r3, [r7, #5]
    27e4:	7af9      	ldrb	r1, [r7, #11]
    27e6:	68f8      	ldr	r0, [r7, #12]
    27e8:	f000 f9a1 	bl	2b2e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    27ec:	4603      	mov	r3, r0
}
    27ee:	4618      	mov	r0, r3
    27f0:	3710      	adds	r7, #16
    27f2:	46bd      	mov	sp, r7
    27f4:	bd80      	pop	{r7, pc}

000027f6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    27f6:	b580      	push	{r7, lr}
    27f8:	b084      	sub	sp, #16
    27fa:	af00      	add	r7, sp, #0
    27fc:	6078      	str	r0, [r7, #4]
    27fe:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	4618      	mov	r0, r3
    2804:	f7fe fb48 	bl	e98 <units::linear_scale<float>::operator()() const>
    2808:	eef0 6a40 	vmov.f32	s13, s0
    280c:	683b      	ldr	r3, [r7, #0]
    280e:	ee07 3a90 	vmov	s15, r3
    2812:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    281a:	f107 030c 	add.w	r3, r7, #12
    281e:	eeb0 0a47 	vmov.f32	s0, s14
    2822:	4618      	mov	r0, r3
    2824:	f7fd ff25 	bl	672 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2828:	68fb      	ldr	r3, [r7, #12]
	}
    282a:	4618      	mov	r0, r3
    282c:	3710      	adds	r7, #16
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}

00002832 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    2832:	b590      	push	{r4, r7, lr}
    2834:	b087      	sub	sp, #28
    2836:	af00      	add	r7, sp, #0
    2838:	60f8      	str	r0, [r7, #12]
    283a:	60b9      	str	r1, [r7, #8]
    283c:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    283e:	68bb      	ldr	r3, [r7, #8]
    2840:	e9d3 3400 	ldrd	r3, r4, [r3]
    2844:	1c59      	adds	r1, r3, #1
    2846:	f144 0200 	adc.w	r2, r4, #0
    284a:	68b8      	ldr	r0, [r7, #8]
    284c:	e9c0 1200 	strd	r1, r2, [r0]
    2850:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2854:	f107 0310 	add.w	r3, r7, #16
    2858:	4619      	mov	r1, r3
    285a:	68f8      	ldr	r0, [r7, #12]
    285c:	f7fe f886 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2860:	68f8      	ldr	r0, [r7, #12]
    2862:	371c      	adds	r7, #28
    2864:	46bd      	mov	sp, r7
    2866:	bd90      	pop	{r4, r7, pc}

00002868 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    2868:	b5f0      	push	{r4, r5, r6, r7, lr}
    286a:	b087      	sub	sp, #28
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    2870:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	e9d3 3400 	ldrd	r3, r4, [r3]
    2878:	e9c7 3402 	strd	r3, r4, [r7, #8]
    287c:	f107 0308 	add.w	r3, r7, #8
    2880:	4618      	mov	r0, r3
    2882:	f7ff fd55 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2886:	4605      	mov	r5, r0
    2888:	460e      	mov	r6, r1
    288a:	683b      	ldr	r3, [r7, #0]
    288c:	e9d3 3400 	ldrd	r3, r4, [r3]
    2890:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2894:	f107 0310 	add.w	r3, r7, #16
    2898:	4618      	mov	r0, r3
    289a:	f7ff fd49 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    289e:	4603      	mov	r3, r0
    28a0:	460c      	mov	r4, r1
    28a2:	42a6      	cmp	r6, r4
    28a4:	bf06      	itte	eq
    28a6:	429d      	cmpeq	r5, r3
    28a8:	2301      	moveq	r3, #1
    28aa:	2300      	movne	r3, #0
    28ac:	b2db      	uxtb	r3, r3
      }
    28ae:	4618      	mov	r0, r3
    28b0:	371c      	adds	r7, #28
    28b2:	46bd      	mov	sp, r7
    28b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000028b6 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    28b6:	b580      	push	{r7, lr}
    28b8:	ed2d 8b02 	vpush	{d8}
    28bc:	b082      	sub	sp, #8
    28be:	af00      	add	r7, sp, #0
    28c0:	6078      	str	r0, [r7, #4]
    28c2:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	ed93 8a00 	vldr	s16, [r3]
    28ca:	683b      	ldr	r3, [r7, #0]
    28cc:	4618      	mov	r0, r3
    28ce:	f7fd feb0 	bl	632 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    28d2:	eef0 7a40 	vmov.f32	s15, s0
    28d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
    28da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    28de:	bfcc      	ite	gt
    28e0:	2301      	movgt	r3, #1
    28e2:	2300      	movle	r3, #0
    28e4:	b2db      	uxtb	r3, r3
		}
    28e6:	4618      	mov	r0, r3
    28e8:	3708      	adds	r7, #8
    28ea:	46bd      	mov	sp, r7
    28ec:	ecbd 8b02 	vpop	{d8}
    28f0:	bd80      	pop	{r7, pc}

000028f2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    28f2:	b580      	push	{r7, lr}
    28f4:	b082      	sub	sp, #8
    28f6:	af00      	add	r7, sp, #0
    28f8:	6078      	str	r0, [r7, #4]
    28fa:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    28fc:	683b      	ldr	r3, [r7, #0]
    28fe:	4618      	mov	r0, r3
    2900:	f7fe f8eb 	bl	ada <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2904:	eef0 7a40 	vmov.f32	s15, s0
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    290e:	687b      	ldr	r3, [r7, #4]
		}
    2910:	4618      	mov	r0, r3
    2912:	3708      	adds	r7, #8
    2914:	46bd      	mov	sp, r7
    2916:	bd80      	pop	{r7, pc}

00002918 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    2918:	b480      	push	{r7}
    291a:	b083      	sub	sp, #12
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
    2920:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    2922:	2201      	movs	r2, #1
    2924:	683b      	ldr	r3, [r7, #0]
    2926:	fa02 f303 	lsl.w	r3, r2, r3
    292a:	461a      	mov	r2, r3
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	4313      	orrs	r3, r2
}
    2930:	4618      	mov	r0, r3
    2932:	370c      	adds	r7, #12
    2934:	46bd      	mov	sp, r7
    2936:	f85d 7b04 	ldr.w	r7, [sp], #4
    293a:	4770      	bx	lr

0000293c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    293c:	b480      	push	{r7}
    293e:	b083      	sub	sp, #12
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
    2944:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    2946:	2201      	movs	r2, #1
    2948:	683b      	ldr	r3, [r7, #0]
    294a:	fa02 f303 	lsl.w	r3, r2, r3
    294e:	43db      	mvns	r3, r3
    2950:	461a      	mov	r2, r3
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	4013      	ands	r3, r2
}
    2956:	4618      	mov	r0, r3
    2958:	370c      	adds	r7, #12
    295a:	46bd      	mov	sp, r7
    295c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2960:	4770      	bx	lr

00002962 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2962:	b580      	push	{r7, lr}
    2964:	b084      	sub	sp, #16
    2966:	af00      	add	r7, sp, #0
    2968:	60f8      	str	r0, [r7, #12]
    296a:	60b9      	str	r1, [r7, #8]
    296c:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    296e:	793b      	ldrb	r3, [r7, #4]
    2970:	461a      	mov	r2, r3
    2972:	797b      	ldrb	r3, [r7, #5]
    2974:	68b9      	ldr	r1, [r7, #8]
    2976:	68f8      	ldr	r0, [r7, #12]
    2978:	f000 f95b 	bl	2c32 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    297c:	4603      	mov	r3, r0
}
    297e:	4618      	mov	r0, r3
    2980:	3710      	adds	r7, #16
    2982:	46bd      	mov	sp, r7
    2984:	bd80      	pop	{r7, pc}

00002986 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    2986:	b580      	push	{r7, lr}
    2988:	b084      	sub	sp, #16
    298a:	af00      	add	r7, sp, #0
    298c:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	4618      	mov	r0, r3
    2992:	f7fe fa81 	bl	e98 <units::linear_scale<float>::operator()() const>
    2996:	eef0 7a40 	vmov.f32	s15, s0
    299a:	edc7 7a03 	vstr	s15, [r7, #12]
    299e:	f107 030c 	add.w	r3, r7, #12
    29a2:	4618      	mov	r0, r3
    29a4:	f000 f971 	bl	2c8a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    29a8:	eef0 7a40 	vmov.f32	s15, s0
    29ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    29b0:	ee17 3a90 	vmov	r3, s15
		}
    29b4:	4618      	mov	r0, r3
    29b6:	3710      	adds	r7, #16
    29b8:	46bd      	mov	sp, r7
    29ba:	bd80      	pop	{r7, pc}

000029bc <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    29bc:	b480      	push	{r7}
    29be:	b083      	sub	sp, #12
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
    29c4:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    29c6:	2201      	movs	r2, #1
    29c8:	683b      	ldr	r3, [r7, #0]
    29ca:	fa02 f303 	lsl.w	r3, r2, r3
    29ce:	461a      	mov	r2, r3
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	4013      	ands	r3, r2
    29d4:	2b00      	cmp	r3, #0
    29d6:	bf14      	ite	ne
    29d8:	2301      	movne	r3, #1
    29da:	2300      	moveq	r3, #0
    29dc:	b2db      	uxtb	r3, r3
}
    29de:	4618      	mov	r0, r3
    29e0:	370c      	adds	r7, #12
    29e2:	46bd      	mov	sp, r7
    29e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    29e8:	4770      	bx	lr

000029ea <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    29ea:	b480      	push	{r7}
    29ec:	b083      	sub	sp, #12
    29ee:	af00      	add	r7, sp, #0
    29f0:	4603      	mov	r3, r0
    29f2:	6039      	str	r1, [r7, #0]
    29f4:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    29f6:	79fa      	ldrb	r2, [r7, #7]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	fa42 f303 	asr.w	r3, r2, r3
    29fe:	f003 0301 	and.w	r3, r3, #1
    2a02:	2b00      	cmp	r3, #0
    2a04:	bf14      	ite	ne
    2a06:	2301      	movne	r3, #1
    2a08:	2300      	moveq	r3, #0
    2a0a:	b2db      	uxtb	r3, r3
}
    2a0c:	4618      	mov	r0, r3
    2a0e:	370c      	adds	r7, #12
    2a10:	46bd      	mov	sp, r7
    2a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a16:	4770      	bx	lr

00002a18 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
/// @returns a value that is the target value with the bit set to a 1 at the bit
/// position within the bitmask. For exmaple if your bitmask has field position
/// set to 5, then this function will return the target value with the 5th bits
/// set to a 1.
template <typename T>
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    2a18:	b580      	push	{r7, lr}
    2a1a:	b082      	sub	sp, #8
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	6078      	str	r0, [r7, #4]
    2a20:	8039      	strh	r1, [r7, #0]
{
  return Set(target, bitmask.position);
    2a22:	783b      	ldrb	r3, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	6878      	ldr	r0, [r7, #4]
    2a28:	f7ff ff76 	bl	2918 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2a2c:	4603      	mov	r3, r0
}
    2a2e:	4618      	mov	r0, r3
    2a30:	3708      	adds	r7, #8
    2a32:	46bd      	mov	sp, r7
    2a34:	bd80      	pop	{r7, pc}

00002a36 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2a36:	b580      	push	{r7, lr}
    2a38:	b084      	sub	sp, #16
    2a3a:	af00      	add	r7, sp, #0
    2a3c:	60f8      	str	r0, [r7, #12]
    2a3e:	60b9      	str	r1, [r7, #8]
    2a40:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2a42:	793b      	ldrb	r3, [r7, #4]
    2a44:	461a      	mov	r2, r3
    2a46:	797b      	ldrb	r3, [r7, #5]
    2a48:	68b9      	ldr	r1, [r7, #8]
    2a4a:	68f8      	ldr	r0, [r7, #12]
    2a4c:	f000 f92b 	bl	2ca6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    2a50:	4603      	mov	r3, r0
}
    2a52:	4618      	mov	r0, r3
    2a54:	3710      	adds	r7, #16
    2a56:	46bd      	mov	sp, r7
    2a58:	bd80      	pop	{r7, pc}

00002a5a <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
/// Operates the same way as the Set(T target, Mask bitmask) function except it
/// clears the bit.
template <typename T>
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    2a5a:	b580      	push	{r7, lr}
    2a5c:	b082      	sub	sp, #8
    2a5e:	af00      	add	r7, sp, #0
    2a60:	6078      	str	r0, [r7, #4]
    2a62:	8039      	strh	r1, [r7, #0]
{
  return Clear(target, bitmask.position);
    2a64:	783b      	ldrb	r3, [r7, #0]
    2a66:	4619      	mov	r1, r3
    2a68:	6878      	ldr	r0, [r7, #4]
    2a6a:	f7ff ff67 	bl	293c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2a6e:	4603      	mov	r3, r0
}
    2a70:	4618      	mov	r0, r3
    2a72:	3708      	adds	r7, #8
    2a74:	46bd      	mov	sp, r7
    2a76:	bd80      	pop	{r7, pc}

00002a78 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    2a78:	b480      	push	{r7}
    2a7a:	b085      	sub	sp, #20
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	60f8      	str	r0, [r7, #12]
    2a80:	7239      	strb	r1, [r7, #8]
    2a82:	713a      	strb	r2, [r7, #4]
    2a84:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    2a86:	68fb      	ldr	r3, [r7, #12]
    2a88:	edd3 7a00 	vldr	s15, [r3]
    2a8c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2aa8 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    2a90:	eec7 6a87 	vdiv.f32	s13, s15, s14
    2a94:	eef0 7a66 	vmov.f32	s15, s13
		}
    2a98:	eeb0 0a67 	vmov.f32	s0, s15
    2a9c:	3714      	adds	r7, #20
    2a9e:	46bd      	mov	sp, r7
    2aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aa4:	4770      	bx	lr
    2aa6:	bf00      	nop
    2aa8:	49742400 	.word	0x49742400

00002aac <float sjsu::Map<float, float, float>(float, float, float, float, float)>:
/// @param current_minimum current minimum value that the value can reach
/// @param current_maximum current maximum value that the value can reach
/// @param new_minimum the new minimum value to scale and shift the old value to
/// @param new_maximum the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    2aac:	b480      	push	{r7}
    2aae:	b08f      	sub	sp, #60	; 0x3c
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	ed87 0a05 	vstr	s0, [r7, #20]
    2ab6:	edc7 0a04 	vstr	s1, [r7, #16]
    2aba:	ed87 1a03 	vstr	s2, [r7, #12]
    2abe:	edc7 1a02 	vstr	s3, [r7, #8]
    2ac2:	ed87 2a01 	vstr	s4, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    2ac6:	697b      	ldr	r3, [r7, #20]
    2ac8:	637b      	str	r3, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    2aca:	693b      	ldr	r3, [r7, #16]
    2acc:	633b      	str	r3, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    2ace:	68fb      	ldr	r3, [r7, #12]
    2ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    2ada:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    2ade:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    2ae2:	ee77 6a67 	vsub.f32	s13, s14, s15
    2ae6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    2aea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    2aee:	ee37 7a67 	vsub.f32	s14, s14, s15
    2af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
    2af6:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    2afa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    2afe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    2b02:	ee37 7a67 	vsub.f32	s14, s14, s15
    2b06:	edd7 7a08 	vldr	s15, [r7, #32]
    2b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
    2b0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    2b12:	ee77 7a27 	vadd.f32	s15, s14, s15
    2b16:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    2b1a:	69fb      	ldr	r3, [r7, #28]
    2b1c:	ee07 3a90 	vmov	s15, r3
};
    2b20:	eeb0 0a67 	vmov.f32	s0, s15
    2b24:	373c      	adds	r7, #60	; 0x3c
    2b26:	46bd      	mov	sp, r7
    2b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b2c:	4770      	bx	lr

00002b2e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2b2e:	b480      	push	{r7}
    2b30:	b089      	sub	sp, #36	; 0x24
    2b32:	af00      	add	r7, sp, #0
    2b34:	60f8      	str	r0, [r7, #12]
    2b36:	607a      	str	r2, [r7, #4]
    2b38:	603b      	str	r3, [r7, #0]
    2b3a:	460b      	mov	r3, r1
    2b3c:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b42:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2b44:	2320      	movs	r3, #32
    2b46:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	f1c3 0320 	rsb	r3, r3, #32
    2b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b52:	fa22 f303 	lsr.w	r3, r2, r3
    2b56:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2b58:	697a      	ldr	r2, [r7, #20]
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	fa02 f303 	lsl.w	r3, r2, r3
    2b60:	43db      	mvns	r3, r3
    2b62:	68fa      	ldr	r2, [r7, #12]
    2b64:	4013      	ands	r3, r2
    2b66:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2b68:	7afa      	ldrb	r2, [r7, #11]
    2b6a:	697b      	ldr	r3, [r7, #20]
    2b6c:	401a      	ands	r2, r3
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	fa02 f303 	lsl.w	r3, r2, r3
    2b74:	68fa      	ldr	r2, [r7, #12]
    2b76:	4313      	orrs	r3, r2
    2b78:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2b7a:	68fb      	ldr	r3, [r7, #12]
}
    2b7c:	4618      	mov	r0, r3
    2b7e:	3724      	adds	r7, #36	; 0x24
    2b80:	46bd      	mov	sp, r7
    2b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b86:	4770      	bx	lr

00002b88 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	b08b      	sub	sp, #44	; 0x2c
    2b8c:	af00      	add	r7, sp, #0
    2b8e:	60f8      	str	r0, [r7, #12]
    2b90:	60b9      	str	r1, [r7, #8]
    2b92:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    2b94:	68bb      	ldr	r3, [r7, #8]
    2b96:	e9d3 3400 	ldrd	r3, r4, [r3]
    2b9a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    2b9e:	f107 0318 	add.w	r3, r7, #24
    2ba2:	4618      	mov	r0, r3
    2ba4:	f7ff fbc4 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2ba8:	4605      	mov	r5, r0
    2baa:	460e      	mov	r6, r1
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	e9d3 3400 	ldrd	r3, r4, [r3]
    2bb2:	e9c7 3408 	strd	r3, r4, [r7, #32]
    2bb6:	f107 0320 	add.w	r3, r7, #32
    2bba:	4618      	mov	r0, r3
    2bbc:	f7ff fbb8 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2bc0:	460a      	mov	r2, r1
    2bc2:	4601      	mov	r1, r0
    2bc4:	194b      	adds	r3, r1, r5
    2bc6:	eb42 0406 	adc.w	r4, r2, r6
    2bca:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2bce:	f107 0310 	add.w	r3, r7, #16
    2bd2:	4619      	mov	r1, r3
    2bd4:	68f8      	ldr	r0, [r7, #12]
    2bd6:	f7fd fec9 	bl	96c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    2bda:	68f8      	ldr	r0, [r7, #12]
    2bdc:	372c      	adds	r7, #44	; 0x2c
    2bde:	46bd      	mov	sp, r7
    2be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002be2 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    2be2:	b5f0      	push	{r4, r5, r6, r7, lr}
    2be4:	b087      	sub	sp, #28
    2be6:	af00      	add	r7, sp, #0
    2be8:	6078      	str	r0, [r7, #4]
    2bea:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	e9d3 3400 	ldrd	r3, r4, [r3]
    2bf2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2bf6:	f107 0308 	add.w	r3, r7, #8
    2bfa:	4618      	mov	r0, r3
    2bfc:	f7ff fb98 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2c00:	4605      	mov	r5, r0
    2c02:	460e      	mov	r6, r1
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	e9d3 3400 	ldrd	r3, r4, [r3]
    2c0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2c0e:	f107 0310 	add.w	r3, r7, #16
    2c12:	4618      	mov	r0, r3
    2c14:	f7ff fb8c 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2c18:	4603      	mov	r3, r0
    2c1a:	460c      	mov	r4, r1
    2c1c:	429d      	cmp	r5, r3
    2c1e:	eb76 0304 	sbcs.w	r3, r6, r4
    2c22:	bfb4      	ite	lt
    2c24:	2301      	movlt	r3, #1
    2c26:	2300      	movge	r3, #0
    2c28:	b2db      	uxtb	r3, r3
      }
    2c2a:	4618      	mov	r0, r3
    2c2c:	371c      	adds	r7, #28
    2c2e:	46bd      	mov	sp, r7
    2c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002c32 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2c32:	b480      	push	{r7}
    2c34:	b089      	sub	sp, #36	; 0x24
    2c36:	af00      	add	r7, sp, #0
    2c38:	60f8      	str	r0, [r7, #12]
    2c3a:	60b9      	str	r1, [r7, #8]
    2c3c:	607a      	str	r2, [r7, #4]
    2c3e:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c44:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2c46:	2320      	movs	r3, #32
    2c48:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2c4a:	683b      	ldr	r3, [r7, #0]
    2c4c:	f1c3 0320 	rsb	r3, r3, #32
    2c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c54:	fa22 f303 	lsr.w	r3, r2, r3
    2c58:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2c5a:	697a      	ldr	r2, [r7, #20]
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	fa02 f303 	lsl.w	r3, r2, r3
    2c62:	43db      	mvns	r3, r3
    2c64:	68fa      	ldr	r2, [r7, #12]
    2c66:	4013      	ands	r3, r2
    2c68:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2c6a:	68ba      	ldr	r2, [r7, #8]
    2c6c:	697b      	ldr	r3, [r7, #20]
    2c6e:	401a      	ands	r2, r3
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	fa02 f303 	lsl.w	r3, r2, r3
    2c76:	68fa      	ldr	r2, [r7, #12]
    2c78:	4313      	orrs	r3, r2
    2c7a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2c7c:	68fb      	ldr	r3, [r7, #12]
}
    2c7e:	4618      	mov	r0, r3
    2c80:	3724      	adds	r7, #36	; 0x24
    2c82:	46bd      	mov	sp, r7
    2c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c88:	4770      	bx	lr

00002c8a <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2c8a:	b580      	push	{r7, lr}
    2c8c:	b086      	sub	sp, #24
    2c8e:	af00      	add	r7, sp, #0
    2c90:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2c92:	6878      	ldr	r0, [r7, #4]
    2c94:	f000 f833 	bl	2cfe <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2c98:	eef0 7a40 	vmov.f32	s15, s0
	}
    2c9c:	eeb0 0a67 	vmov.f32	s0, s15
    2ca0:	3718      	adds	r7, #24
    2ca2:	46bd      	mov	sp, r7
    2ca4:	bd80      	pop	{r7, pc}

00002ca6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2ca6:	b480      	push	{r7}
    2ca8:	b089      	sub	sp, #36	; 0x24
    2caa:	af00      	add	r7, sp, #0
    2cac:	60f8      	str	r0, [r7, #12]
    2cae:	60b9      	str	r1, [r7, #8]
    2cb0:	607a      	str	r2, [r7, #4]
    2cb2:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cb8:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2cba:	2320      	movs	r3, #32
    2cbc:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	f1c3 0320 	rsb	r3, r3, #32
    2cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cc8:	fa22 f303 	lsr.w	r3, r2, r3
    2ccc:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2cce:	697a      	ldr	r2, [r7, #20]
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	fa02 f303 	lsl.w	r3, r2, r3
    2cd6:	43db      	mvns	r3, r3
    2cd8:	68fa      	ldr	r2, [r7, #12]
    2cda:	4013      	ands	r3, r2
    2cdc:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2cde:	68ba      	ldr	r2, [r7, #8]
    2ce0:	697b      	ldr	r3, [r7, #20]
    2ce2:	401a      	ands	r2, r3
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	fa02 f303 	lsl.w	r3, r2, r3
    2cea:	68fa      	ldr	r2, [r7, #12]
    2cec:	4313      	orrs	r3, r2
    2cee:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2cf0:	68fb      	ldr	r3, [r7, #12]
}
    2cf2:	4618      	mov	r0, r3
    2cf4:	3724      	adds	r7, #36	; 0x24
    2cf6:	46bd      	mov	sp, r7
    2cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cfc:	4770      	bx	lr

00002cfe <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2cfe:	b480      	push	{r7}
    2d00:	b085      	sub	sp, #20
    2d02:	af00      	add	r7, sp, #0
    2d04:	60f8      	str	r0, [r7, #12]
    2d06:	7239      	strb	r1, [r7, #8]
    2d08:	713a      	strb	r2, [r7, #4]
    2d0a:	703b      	strb	r3, [r7, #0]
			return value;
    2d0c:	68fb      	ldr	r3, [r7, #12]
    2d0e:	681b      	ldr	r3, [r3, #0]
    2d10:	ee07 3a90 	vmov	s15, r3
		}
    2d14:	eeb0 0a67 	vmov.f32	s0, s15
    2d18:	3714      	adds	r7, #20
    2d1a:	46bd      	mov	sp, r7
    2d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d20:	4770      	bx	lr
    2d22:	Address 0x0000000000002d22 is out of bounds.


00002d24 <__static_initialization_and_destruction_0(int, int)>:
  return 0;
}
    2d24:	b580      	push	{r7, lr}
    2d26:	b082      	sub	sp, #8
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	6039      	str	r1, [r7, #0]
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	2b01      	cmp	r3, #1
    2d32:	f040 80c4 	bne.w	2ebe <__static_initialization_and_destruction_0(int, int)+0x19a>
    2d36:	683b      	ldr	r3, [r7, #0]
    2d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d3c:	4293      	cmp	r3, r2
    2d3e:	f040 80be 	bne.w	2ebe <__static_initialization_and_destruction_0(int, int)+0x19a>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    2d42:	4b61      	ldr	r3, [pc, #388]	; (2ec8 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	f003 0301 	and.w	r3, r3, #1
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d105      	bne.n	2d5a <__static_initialization_and_destruction_0(int, int)+0x36>
    2d4e:	4b5e      	ldr	r3, [pc, #376]	; (2ec8 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    2d50:	2201      	movs	r2, #1
    2d52:	601a      	str	r2, [r3, #0]
    2d54:	4a5d      	ldr	r2, [pc, #372]	; (2ecc <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    2d56:	4b5e      	ldr	r3, [pc, #376]	; (2ed0 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    2d58:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    2d5a:	4b5e      	ldr	r3, [pc, #376]	; (2ed4 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    2d5c:	681b      	ldr	r3, [r3, #0]
    2d5e:	f003 0301 	and.w	r3, r3, #1
    2d62:	2b00      	cmp	r3, #0
    2d64:	d105      	bne.n	2d72 <__static_initialization_and_destruction_0(int, int)+0x4e>
    2d66:	4b5b      	ldr	r3, [pc, #364]	; (2ed4 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    2d68:	2201      	movs	r2, #1
    2d6a:	601a      	str	r2, [r3, #0]
    2d6c:	4a5a      	ldr	r2, [pc, #360]	; (2ed8 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    2d6e:	4b5b      	ldr	r3, [pc, #364]	; (2edc <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    2d70:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    2d72:	4b5b      	ldr	r3, [pc, #364]	; (2ee0 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    2d74:	681b      	ldr	r3, [r3, #0]
    2d76:	f003 0301 	and.w	r3, r3, #1
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d105      	bne.n	2d8a <__static_initialization_and_destruction_0(int, int)+0x66>
    2d7e:	4b58      	ldr	r3, [pc, #352]	; (2ee0 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    2d80:	2201      	movs	r2, #1
    2d82:	601a      	str	r2, [r3, #0]
    };
    2d84:	4a57      	ldr	r2, [pc, #348]	; (2ee4 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    2d86:	4b58      	ldr	r3, [pc, #352]	; (2ee8 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    2d88:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    2d8a:	4b58      	ldr	r3, [pc, #352]	; (2eec <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	f003 0301 	and.w	r3, r3, #1
    2d92:	2b00      	cmp	r3, #0
    2d94:	d105      	bne.n	2da2 <__static_initialization_and_destruction_0(int, int)+0x7e>
    2d96:	4b55      	ldr	r3, [pc, #340]	; (2eec <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2d98:	2201      	movs	r2, #1
    2d9a:	601a      	str	r2, [r3, #0]
    };
    2d9c:	4a54      	ldr	r2, [pc, #336]	; (2ef0 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    2d9e:	4b55      	ldr	r3, [pc, #340]	; (2ef4 <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    2da0:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    2da2:	4b55      	ldr	r3, [pc, #340]	; (2ef8 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2da4:	681b      	ldr	r3, [r3, #0]
    2da6:	f003 0301 	and.w	r3, r3, #1
    2daa:	2b00      	cmp	r3, #0
    2dac:	d105      	bne.n	2dba <__static_initialization_and_destruction_0(int, int)+0x96>
    2dae:	4b52      	ldr	r3, [pc, #328]	; (2ef8 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2db0:	2201      	movs	r2, #1
    2db2:	601a      	str	r2, [r3, #0]
    };
    2db4:	4a51      	ldr	r2, [pc, #324]	; (2efc <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    2db6:	4b52      	ldr	r3, [pc, #328]	; (2f00 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    2db8:	601a      	str	r2, [r3, #0]
  static constexpr units::frequency::hertz_t kClockFrequency = 1_MHz;
  /// A pointer holding the address to the LPC40xx ADC peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    2dba:	4b52      	ldr	r3, [pc, #328]	; (2f04 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2dbc:	681b      	ldr	r3, [r3, #0]
    2dbe:	f003 0301 	and.w	r3, r3, #1
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d105      	bne.n	2dd2 <__static_initialization_and_destruction_0(int, int)+0xae>
    2dc6:	4b4f      	ldr	r3, [pc, #316]	; (2f04 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2dc8:	2201      	movs	r2, #1
    2dca:	601a      	str	r2, [r3, #0]
    2dcc:	4a4e      	ldr	r2, [pc, #312]	; (2f08 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    2dce:	4b4f      	ldr	r3, [pc, #316]	; (2f0c <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    2dd0:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    2dd2:	4b4f      	ldr	r3, [pc, #316]	; (2f10 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2dd4:	681b      	ldr	r3, [r3, #0]
    2dd6:	f003 0301 	and.w	r3, r3, #1
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d106      	bne.n	2dec <__static_initialization_and_destruction_0(int, int)+0xc8>
    2dde:	4b4c      	ldr	r3, [pc, #304]	; (2f10 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2de0:	2201      	movs	r2, #1
    2de2:	601a      	str	r2, [r3, #0]
    2de4:	4b4b      	ldr	r3, [pc, #300]	; (2f14 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    2de6:	4618      	mov	r0, r3
    2de8:	f7fe fec0 	bl	1b6c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    2dec:	4b4a      	ldr	r3, [pc, #296]	; (2f18 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	f003 0301 	and.w	r3, r3, #1
    2df4:	2b00      	cmp	r3, #0
    2df6:	d114      	bne.n	2e22 <__static_initialization_and_destruction_0(int, int)+0xfe>
    2df8:	4b47      	ldr	r3, [pc, #284]	; (2f18 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2dfa:	2201      	movs	r2, #1
    2dfc:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    2dfe:	4a47      	ldr	r2, [pc, #284]	; (2f1c <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    2e00:	4b47      	ldr	r3, [pc, #284]	; (2f20 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2e02:	601a      	str	r2, [r3, #0]
    2e04:	4a47      	ldr	r2, [pc, #284]	; (2f24 <__static_initialization_and_destruction_0(int, int)+0x200>)
    2e06:	4b46      	ldr	r3, [pc, #280]	; (2f20 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2e08:	605a      	str	r2, [r3, #4]
    2e0a:	4a47      	ldr	r2, [pc, #284]	; (2f28 <__static_initialization_and_destruction_0(int, int)+0x204>)
    2e0c:	4b44      	ldr	r3, [pc, #272]	; (2f20 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2e0e:	609a      	str	r2, [r3, #8]
    2e10:	4a46      	ldr	r2, [pc, #280]	; (2f2c <__static_initialization_and_destruction_0(int, int)+0x208>)
    2e12:	4b43      	ldr	r3, [pc, #268]	; (2f20 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2e14:	60da      	str	r2, [r3, #12]
    2e16:	4a46      	ldr	r2, [pc, #280]	; (2f30 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    2e18:	4b41      	ldr	r3, [pc, #260]	; (2f20 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2e1a:	611a      	str	r2, [r3, #16]
    2e1c:	4a45      	ldr	r2, [pc, #276]	; (2f34 <__static_initialization_and_destruction_0(int, int)+0x210>)
    2e1e:	4b40      	ldr	r3, [pc, #256]	; (2f20 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2e20:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    2e22:	4b45      	ldr	r3, [pc, #276]	; (2f38 <__static_initialization_and_destruction_0(int, int)+0x214>)
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	f003 0301 	and.w	r3, r3, #1
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d122      	bne.n	2e74 <__static_initialization_and_destruction_0(int, int)+0x150>
    2e2e:	4b42      	ldr	r3, [pc, #264]	; (2f38 <__static_initialization_and_destruction_0(int, int)+0x214>)
    2e30:	2201      	movs	r2, #1
    2e32:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e34:	4b41      	ldr	r3, [pc, #260]	; (2f3c <__static_initialization_and_destruction_0(int, int)+0x218>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    2e36:	4a42      	ldr	r2, [pc, #264]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e38:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e3a:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    2e3c:	4a40      	ldr	r2, [pc, #256]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e3e:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e40:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    2e42:	4a3f      	ldr	r2, [pc, #252]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e44:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e46:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    2e48:	4a3d      	ldr	r2, [pc, #244]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e4a:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e4c:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    2e4e:	4a3c      	ldr	r2, [pc, #240]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e50:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e52:	611a      	str	r2, [r3, #16]
    2e54:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    2e56:	4a3a      	ldr	r2, [pc, #232]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e58:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e5a:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    2e5c:	4a38      	ldr	r2, [pc, #224]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e5e:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e60:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    2e62:	4a37      	ldr	r2, [pc, #220]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e64:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e66:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    2e68:	4a35      	ldr	r2, [pc, #212]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e6a:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2e6c:	60da      	str	r2, [r3, #12]
    2e6e:	4a34      	ldr	r2, [pc, #208]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e70:	3234      	adds	r2, #52	; 0x34
    2e72:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    2e74:	4b33      	ldr	r3, [pc, #204]	; (2f44 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	f003 0301 	and.w	r3, r3, #1
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d106      	bne.n	2e8e <__static_initialization_and_destruction_0(int, int)+0x16a>
    2e80:	4b30      	ldr	r3, [pc, #192]	; (2f44 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2e82:	2201      	movs	r2, #1
    2e84:	601a      	str	r2, [r3, #0]
    2e86:	4b2e      	ldr	r3, [pc, #184]	; (2f40 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e88:	461a      	mov	r2, r3
    2e8a:	4b2f      	ldr	r3, [pc, #188]	; (2f48 <__static_initialization_and_destruction_0(int, int)+0x224>)
    2e8c:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm0Peripheral = {
    2e8e:	4b2f      	ldr	r3, [pc, #188]	; (2f4c <__static_initialization_and_destruction_0(int, int)+0x228>)
    2e90:	681b      	ldr	r3, [r3, #0]
    2e92:	f003 0301 	and.w	r3, r3, #1
    2e96:	2b00      	cmp	r3, #0
    2e98:	d105      	bne.n	2ea6 <__static_initialization_and_destruction_0(int, int)+0x182>
    2e9a:	4b2c      	ldr	r3, [pc, #176]	; (2f4c <__static_initialization_and_destruction_0(int, int)+0x228>)
    2e9c:	2201      	movs	r2, #1
    2e9e:	601a      	str	r2, [r3, #0]
    };
    2ea0:	4a2b      	ldr	r2, [pc, #172]	; (2f50 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2ea2:	4b2c      	ldr	r3, [pc, #176]	; (2f54 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2ea4:	601a      	str	r2, [r3, #0]
    inline static const Peripheral_t kPwm1Peripheral = {
    2ea6:	4b2c      	ldr	r3, [pc, #176]	; (2f58 <__static_initialization_and_destruction_0(int, int)+0x234>)
    2ea8:	681b      	ldr	r3, [r3, #0]
    2eaa:	f003 0301 	and.w	r3, r3, #1
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d105      	bne.n	2ebe <__static_initialization_and_destruction_0(int, int)+0x19a>
    2eb2:	4b29      	ldr	r3, [pc, #164]	; (2f58 <__static_initialization_and_destruction_0(int, int)+0x234>)
    2eb4:	2201      	movs	r2, #1
    2eb6:	601a      	str	r2, [r3, #0]
    };
    2eb8:	4a28      	ldr	r2, [pc, #160]	; (2f5c <__static_initialization_and_destruction_0(int, int)+0x238>)
    2eba:	4b29      	ldr	r3, [pc, #164]	; (2f60 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    2ebc:	601a      	str	r2, [r3, #0]
    2ebe:	bf00      	nop
    2ec0:	3708      	adds	r7, #8
    2ec2:	46bd      	mov	sp, r7
    2ec4:	bd80      	pop	{r7, pc}
    2ec6:	bf00      	nop
    2ec8:	10000264 	.word	0x10000264
    2ecc:	4002c000 	.word	0x4002c000
    2ed0:	1000010c 	.word	0x1000010c
    2ed4:	10000268 	.word	0x10000268
    2ed8:	400fc000 	.word	0x400fc000
    2edc:	10000118 	.word	0x10000118
    2ee0:	1000026c 	.word	0x1000026c
    2ee4:	40098000 	.word	0x40098000
    2ee8:	1000000c 	.word	0x1000000c
    2eec:	10000270 	.word	0x10000270
    2ef0:	4009c000 	.word	0x4009c000
    2ef4:	10000020 	.word	0x10000020
    2ef8:	10000274 	.word	0x10000274
    2efc:	400a4000 	.word	0x400a4000
    2f00:	10000034 	.word	0x10000034
    2f04:	10000278 	.word	0x10000278
    2f08:	40034000 	.word	0x40034000
    2f0c:	1000011c 	.word	0x1000011c
    2f10:	1000027c 	.word	0x1000027c
    2f14:	10000120 	.word	0x10000120
    2f18:	10000280 	.word	0x10000280
    2f1c:	20098000 	.word	0x20098000
    2f20:	10000220 	.word	0x10000220
    2f24:	20098020 	.word	0x20098020
    2f28:	20098040 	.word	0x20098040
    2f2c:	20098060 	.word	0x20098060
    2f30:	20098080 	.word	0x20098080
    2f34:	200980a0 	.word	0x200980a0
    2f38:	10000284 	.word	0x10000284
    2f3c:	10000238 	.word	0x10000238
    2f40:	40028080 	.word	0x40028080
    2f44:	10000288 	.word	0x10000288
    2f48:	10000260 	.word	0x10000260
    2f4c:	1000028c 	.word	0x1000028c
    2f50:	40014000 	.word	0x40014000
    2f54:	1000004c 	.word	0x1000004c
    2f58:	10000290 	.word	0x10000290
    2f5c:	40018000 	.word	0x40018000
    2f60:	10000054 	.word	0x10000054

00002f64 <_GLOBAL__sub_I_main>:
    2f64:	b580      	push	{r7, lr}
    2f66:	af00      	add	r7, sp, #0
    2f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2f6c:	2001      	movs	r0, #1
    2f6e:	f7ff fed9 	bl	2d24 <__static_initialization_and_destruction_0(int, int)>
    2f72:	bd80      	pop	{r7, pc}

00002f74 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    2f74:	b480      	push	{r7}
    2f76:	b087      	sub	sp, #28
    2f78:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2f7a:	2300      	movs	r3, #0
    2f7c:	617b      	str	r3, [r7, #20]
    2f7e:	697a      	ldr	r2, [r7, #20]
    2f80:	4613      	mov	r3, r2
    2f82:	005b      	lsls	r3, r3, #1
    2f84:	4413      	add	r3, r2
    2f86:	009b      	lsls	r3, r3, #2
    2f88:	4a1f      	ldr	r2, [pc, #124]	; (3008 <sjsu::InitializeDataSection()+0x94>)
    2f8a:	4413      	add	r3, r2
    2f8c:	4a1f      	ldr	r2, [pc, #124]	; (300c <sjsu::InitializeDataSection()+0x98>)
    2f8e:	4293      	cmp	r3, r2
    2f90:	d233      	bcs.n	2ffa <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    2f92:	491d      	ldr	r1, [pc, #116]	; (3008 <sjsu::InitializeDataSection()+0x94>)
    2f94:	697a      	ldr	r2, [r7, #20]
    2f96:	4613      	mov	r3, r2
    2f98:	005b      	lsls	r3, r3, #1
    2f9a:	4413      	add	r3, r2
    2f9c:	009b      	lsls	r3, r3, #2
    2f9e:	440b      	add	r3, r1
    2fa0:	681b      	ldr	r3, [r3, #0]
    2fa2:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    2fa4:	4918      	ldr	r1, [pc, #96]	; (3008 <sjsu::InitializeDataSection()+0x94>)
    2fa6:	697a      	ldr	r2, [r7, #20]
    2fa8:	4613      	mov	r3, r2
    2faa:	005b      	lsls	r3, r3, #1
    2fac:	4413      	add	r3, r2
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	440b      	add	r3, r1
    2fb2:	685b      	ldr	r3, [r3, #4]
    2fb4:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    2fb6:	4914      	ldr	r1, [pc, #80]	; (3008 <sjsu::InitializeDataSection()+0x94>)
    2fb8:	697a      	ldr	r2, [r7, #20]
    2fba:	4613      	mov	r3, r2
    2fbc:	005b      	lsls	r3, r3, #1
    2fbe:	4413      	add	r3, r2
    2fc0:	009b      	lsls	r3, r3, #2
    2fc2:	440b      	add	r3, r1
    2fc4:	3308      	adds	r3, #8
    2fc6:	681b      	ldr	r3, [r3, #0]
    2fc8:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    2fca:	2300      	movs	r3, #0
    2fcc:	613b      	str	r3, [r7, #16]
    2fce:	693a      	ldr	r2, [r7, #16]
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	429a      	cmp	r2, r3
    2fd4:	d20d      	bcs.n	2ff2 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    2fd6:	693b      	ldr	r3, [r7, #16]
    2fd8:	009b      	lsls	r3, r3, #2
    2fda:	68fa      	ldr	r2, [r7, #12]
    2fdc:	441a      	add	r2, r3
    2fde:	693b      	ldr	r3, [r7, #16]
    2fe0:	009b      	lsls	r3, r3, #2
    2fe2:	68b9      	ldr	r1, [r7, #8]
    2fe4:	440b      	add	r3, r1
    2fe6:	6812      	ldr	r2, [r2, #0]
    2fe8:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2fea:	693b      	ldr	r3, [r7, #16]
    2fec:	3301      	adds	r3, #1
    2fee:	613b      	str	r3, [r7, #16]
    2ff0:	e7ed      	b.n	2fce <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2ff2:	697b      	ldr	r3, [r7, #20]
    2ff4:	3301      	adds	r3, #1
    2ff6:	617b      	str	r3, [r7, #20]
    2ff8:	e7c1      	b.n	2f7e <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    2ffa:	bf00      	nop
    2ffc:	371c      	adds	r7, #28
    2ffe:	46bd      	mov	sp, r7
    3000:	f85d 7b04 	ldr.w	r7, [sp], #4
    3004:	4770      	bx	lr
    3006:	bf00      	nop
    3008:	000000e4 	.word	0x000000e4
    300c:	000000fc 	.word	0x000000fc

00003010 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    3010:	b480      	push	{r7}
    3012:	b085      	sub	sp, #20
    3014:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    3016:	2300      	movs	r3, #0
    3018:	60fb      	str	r3, [r7, #12]
    301a:	68fb      	ldr	r3, [r7, #12]
    301c:	00db      	lsls	r3, r3, #3
    301e:	4a15      	ldr	r2, [pc, #84]	; (3074 <sjsu::InitializeBssSection()+0x64>)
    3020:	4413      	add	r3, r2
    3022:	4a15      	ldr	r2, [pc, #84]	; (3078 <sjsu::InitializeBssSection()+0x68>)
    3024:	4293      	cmp	r3, r2
    3026:	d21e      	bcs.n	3066 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    3028:	4a12      	ldr	r2, [pc, #72]	; (3074 <sjsu::InitializeBssSection()+0x64>)
    302a:	68fb      	ldr	r3, [r7, #12]
    302c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3030:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    3032:	4a10      	ldr	r2, [pc, #64]	; (3074 <sjsu::InitializeBssSection()+0x64>)
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	00db      	lsls	r3, r3, #3
    3038:	4413      	add	r3, r2
    303a:	685b      	ldr	r3, [r3, #4]
    303c:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    303e:	2300      	movs	r3, #0
    3040:	60bb      	str	r3, [r7, #8]
    3042:	68ba      	ldr	r2, [r7, #8]
    3044:	683b      	ldr	r3, [r7, #0]
    3046:	429a      	cmp	r2, r3
    3048:	d209      	bcs.n	305e <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    304a:	68bb      	ldr	r3, [r7, #8]
    304c:	009b      	lsls	r3, r3, #2
    304e:	687a      	ldr	r2, [r7, #4]
    3050:	4413      	add	r3, r2
    3052:	2200      	movs	r2, #0
    3054:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    3056:	68bb      	ldr	r3, [r7, #8]
    3058:	3301      	adds	r3, #1
    305a:	60bb      	str	r3, [r7, #8]
    305c:	e7f1      	b.n	3042 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    305e:	68fb      	ldr	r3, [r7, #12]
    3060:	3301      	adds	r3, #1
    3062:	60fb      	str	r3, [r7, #12]
    3064:	e7d9      	b.n	301a <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    3066:	bf00      	nop
    3068:	3714      	adds	r7, #20
    306a:	46bd      	mov	sp, r7
    306c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3070:	4770      	bx	lr
    3072:	bf00      	nop
    3074:	000000fc 	.word	0x000000fc
    3078:	0000010c 	.word	0x0000010c

0000307c <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    307c:	b580      	push	{r7, lr}
    307e:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    3080:	f7ff ff78 	bl	2f74 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    3084:	f7ff ffc4 	bl	3010 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    3088:	f003 fb16 	bl	66b8 <__libc_init_array>
}
    308c:	bf00      	nop
    308e:	bd80      	pop	{r7, pc}

00003090 <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    3090:	b580      	push	{r7, lr}
    3092:	b08c      	sub	sp, #48	; 0x30
    3094:	af02      	add	r7, sp, #8
    3096:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	681b      	ldr	r3, [r3, #0]
    309c:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	685b      	ldr	r3, [r3, #4]
    30a2:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	689b      	ldr	r3, [r3, #8]
    30a8:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    30aa:	687b      	ldr	r3, [r7, #4]
    30ac:	68db      	ldr	r3, [r3, #12]
    30ae:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	691b      	ldr	r3, [r3, #16]
    30b4:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	695b      	ldr	r3, [r3, #20]
    30ba:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	699b      	ldr	r3, [r3, #24]
    30c0:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	69db      	ldr	r3, [r3, #28]
    30c6:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    30c8:	480d      	ldr	r0, [pc, #52]	; (3100 <GetRegistersFromStack+0x70>)
    30ca:	f001 fa21 	bl	4510 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    30ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
    30d0:	6a3a      	ldr	r2, [r7, #32]
    30d2:	69f8      	ldr	r0, [r7, #28]
    30d4:	69bb      	ldr	r3, [r7, #24]
    30d6:	9300      	str	r3, [sp, #0]
    30d8:	4603      	mov	r3, r0
    30da:	480a      	ldr	r0, [pc, #40]	; (3104 <GetRegistersFromStack+0x74>)
    30dc:	f001 fa18 	bl	4510 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    30e0:	6979      	ldr	r1, [r7, #20]
    30e2:	693a      	ldr	r2, [r7, #16]
    30e4:	68f8      	ldr	r0, [r7, #12]
    30e6:	68bb      	ldr	r3, [r7, #8]
    30e8:	9300      	str	r3, [sp, #0]
    30ea:	4603      	mov	r3, r0
    30ec:	4806      	ldr	r0, [pc, #24]	; (3108 <GetRegistersFromStack+0x78>)
    30ee:	f001 fa0f 	bl	4510 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    30f2:	68fb      	ldr	r3, [r7, #12]
    30f4:	4619      	mov	r1, r3
    30f6:	2001      	movs	r0, #1
    30f8:	f7fd fbe6 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    30fc:	e7fe      	b.n	30fc <GetRegistersFromStack+0x6c>
    30fe:	bf00      	nop
    3100:	000075e4 	.word	0x000075e4
    3104:	00007610 	.word	0x00007610
    3108:	00007644 	.word	0x00007644

0000310c <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    310c:	b480      	push	{r7}
    310e:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    3110:	f01e 0f04 	tst.w	lr, #4
    3114:	bf0c      	ite	eq
    3116:	f3ef 8008 	mrseq	r0, MSP
    311a:	f3ef 8009 	mrsne	r0, PSP
    311e:	6981      	ldr	r1, [r0, #24]
    3120:	4a00      	ldr	r2, [pc, #0]	; (3124 <handler2_address_const>)
    3122:	4710      	bx	r2

00003124 <handler2_address_const>:
    3124:	00003091 	.word	0x00003091
    }
  }
    3128:	bf00      	nop
    312a:	46bd      	mov	sp, r7
    312c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3130:	4770      	bx	lr
    3132:	Address 0x0000000000003132 is out of bounds.


00003134 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    3134:	b580      	push	{r7, lr}
    3136:	b084      	sub	sp, #16
    3138:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    313a:	4b10      	ldr	r3, [pc, #64]	; (317c <ArmResetHandler+0x48>)
    313c:	60fb      	str	r3, [r7, #12]
    313e:	68fb      	ldr	r3, [r7, #12]
    3140:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    3142:	683b      	ldr	r3, [r7, #0]
    3144:	f383 8809 	msr	PSP, r3
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    3152:	f7ff ff93 	bl	307c <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    3156:	f001 fcd3 	bl	4b00 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    315a:	f7ff fa53 	bl	2604 <main>
    315e:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    3160:	68bb      	ldr	r3, [r7, #8]
    3162:	2b00      	cmp	r3, #0
    3164:	db04      	blt.n	3170 <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    3166:	68b9      	ldr	r1, [r7, #8]
    3168:	4805      	ldr	r0, [pc, #20]	; (3180 <ArmResetHandler+0x4c>)
    316a:	f001 f9d1 	bl	4510 <printf>
    316e:	e003      	b.n	3178 <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    3170:	68b9      	ldr	r1, [r7, #8]
    3172:	4804      	ldr	r0, [pc, #16]	; (3184 <ArmResetHandler+0x50>)
    3174:	f001 f9cc 	bl	4510 <printf>
    3178:	e7fe      	b.n	3178 <ArmResetHandler+0x44>
    317a:	bf00      	nop
    317c:	10010000 	.word	0x10010000
    3180:	0000767c 	.word	0x0000767c
    3184:	000076b0 	.word	0x000076b0

00003188 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    3188:	b580      	push	{r7, lr}
    318a:	b082      	sub	sp, #8
    318c:	af00      	add	r7, sp, #0
    318e:	6078      	str	r0, [r7, #4]
    3190:	6039      	str	r1, [r7, #0]
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	2b01      	cmp	r3, #1
    3196:	d111      	bne.n	31bc <__static_initialization_and_destruction_0(int, int)+0x34>
    3198:	683b      	ldr	r3, [r7, #0]
    319a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    319e:	4293      	cmp	r3, r2
    31a0:	d10c      	bne.n	31bc <__static_initialization_and_destruction_0(int, int)+0x34>
    31a2:	4b08      	ldr	r3, [pc, #32]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    31a4:	681b      	ldr	r3, [r3, #0]
    31a6:	f003 0301 	and.w	r3, r3, #1
    31aa:	2b00      	cmp	r3, #0
    31ac:	d106      	bne.n	31bc <__static_initialization_and_destruction_0(int, int)+0x34>
    31ae:	4b05      	ldr	r3, [pc, #20]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    31b0:	2201      	movs	r2, #1
    31b2:	601a      	str	r2, [r3, #0]
    31b4:	4b04      	ldr	r3, [pc, #16]	; (31c8 <__static_initialization_and_destruction_0(int, int)+0x40>)
    31b6:	4618      	mov	r0, r3
    31b8:	f7fe fcd8 	bl	1b6c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    31bc:	bf00      	nop
    31be:	3708      	adds	r7, #8
    31c0:	46bd      	mov	sp, r7
    31c2:	bd80      	pop	{r7, pc}
    31c4:	1000027c 	.word	0x1000027c
    31c8:	10000120 	.word	0x10000120

000031cc <_GLOBAL__sub_I_GetRegistersFromStack>:
    31cc:	b580      	push	{r7, lr}
    31ce:	af00      	add	r7, sp, #0
    31d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    31d4:	2001      	movs	r0, #1
    31d6:	f7ff ffd7 	bl	3188 <__static_initialization_and_destruction_0(int, int)>
    31da:	bd80      	pop	{r7, pc}

000031dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    31dc:	b580      	push	{r7, lr}
    31de:	b084      	sub	sp, #16
    31e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    31e2:	4b28      	ldr	r3, [pc, #160]	; (3284 <vTaskSwitchContext+0xa8>)
    31e4:	681b      	ldr	r3, [r3, #0]
    31e6:	2b00      	cmp	r3, #0
    31e8:	d003      	beq.n	31f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    31ea:	4b27      	ldr	r3, [pc, #156]	; (3288 <vTaskSwitchContext+0xac>)
    31ec:	2201      	movs	r2, #1
    31ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    31f0:	e043      	b.n	327a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    31f2:	4b25      	ldr	r3, [pc, #148]	; (3288 <vTaskSwitchContext+0xac>)
    31f4:	2200      	movs	r2, #0
    31f6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    31f8:	f001 fc78 	bl	4aec <ThreadRuntimeCounter>
    31fc:	4602      	mov	r2, r0
    31fe:	4b23      	ldr	r3, [pc, #140]	; (328c <vTaskSwitchContext+0xb0>)
    3200:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    3202:	4b22      	ldr	r3, [pc, #136]	; (328c <vTaskSwitchContext+0xb0>)
    3204:	681a      	ldr	r2, [r3, #0]
    3206:	4b22      	ldr	r3, [pc, #136]	; (3290 <vTaskSwitchContext+0xb4>)
    3208:	681b      	ldr	r3, [r3, #0]
    320a:	429a      	cmp	r2, r3
    320c:	d909      	bls.n	3222 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    320e:	4b21      	ldr	r3, [pc, #132]	; (3294 <vTaskSwitchContext+0xb8>)
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	6d59      	ldr	r1, [r3, #84]	; 0x54
    3214:	4a1d      	ldr	r2, [pc, #116]	; (328c <vTaskSwitchContext+0xb0>)
    3216:	6810      	ldr	r0, [r2, #0]
    3218:	4a1d      	ldr	r2, [pc, #116]	; (3290 <vTaskSwitchContext+0xb4>)
    321a:	6812      	ldr	r2, [r2, #0]
    321c:	1a82      	subs	r2, r0, r2
    321e:	440a      	add	r2, r1
    3220:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    3222:	4b1a      	ldr	r3, [pc, #104]	; (328c <vTaskSwitchContext+0xb0>)
    3224:	681b      	ldr	r3, [r3, #0]
    3226:	4a1a      	ldr	r2, [pc, #104]	; (3290 <vTaskSwitchContext+0xb4>)
    3228:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    322a:	4b1b      	ldr	r3, [pc, #108]	; (3298 <vTaskSwitchContext+0xbc>)
    322c:	681b      	ldr	r3, [r3, #0]
    322e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	fab3 f383 	clz	r3, r3
    3236:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    3238:	78fb      	ldrb	r3, [r7, #3]
    323a:	f1c3 031f 	rsb	r3, r3, #31
    323e:	60fb      	str	r3, [r7, #12]
    3240:	68fa      	ldr	r2, [r7, #12]
    3242:	4613      	mov	r3, r2
    3244:	009b      	lsls	r3, r3, #2
    3246:	4413      	add	r3, r2
    3248:	009b      	lsls	r3, r3, #2
    324a:	4a14      	ldr	r2, [pc, #80]	; (329c <vTaskSwitchContext+0xc0>)
    324c:	4413      	add	r3, r2
    324e:	60bb      	str	r3, [r7, #8]
    3250:	68bb      	ldr	r3, [r7, #8]
    3252:	685b      	ldr	r3, [r3, #4]
    3254:	685a      	ldr	r2, [r3, #4]
    3256:	68bb      	ldr	r3, [r7, #8]
    3258:	605a      	str	r2, [r3, #4]
    325a:	68bb      	ldr	r3, [r7, #8]
    325c:	685a      	ldr	r2, [r3, #4]
    325e:	68bb      	ldr	r3, [r7, #8]
    3260:	3308      	adds	r3, #8
    3262:	429a      	cmp	r2, r3
    3264:	d104      	bne.n	3270 <vTaskSwitchContext+0x94>
    3266:	68bb      	ldr	r3, [r7, #8]
    3268:	685b      	ldr	r3, [r3, #4]
    326a:	685a      	ldr	r2, [r3, #4]
    326c:	68bb      	ldr	r3, [r7, #8]
    326e:	605a      	str	r2, [r3, #4]
    3270:	68bb      	ldr	r3, [r7, #8]
    3272:	685b      	ldr	r3, [r3, #4]
    3274:	68db      	ldr	r3, [r3, #12]
    3276:	4a07      	ldr	r2, [pc, #28]	; (3294 <vTaskSwitchContext+0xb8>)
    3278:	6013      	str	r3, [r2, #0]
}
    327a:	bf00      	nop
    327c:	3710      	adds	r7, #16
    327e:	46bd      	mov	sp, r7
    3280:	bd80      	pop	{r7, pc}
    3282:	bf00      	nop
    3284:	10000304 	.word	0x10000304
    3288:	10000300 	.word	0x10000300
    328c:	1000030c 	.word	0x1000030c
    3290:	10000308 	.word	0x10000308
    3294:	10000294 	.word	0x10000294
    3298:	100002fc 	.word	0x100002fc
    329c:	10000298 	.word	0x10000298

000032a0 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    32a0:	b480      	push	{r7}
    32a2:	b083      	sub	sp, #12
    32a4:	af00      	add	r7, sp, #0
    32a6:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    32a8:	bf00      	nop
    while (1)
    32aa:	e7fd      	b.n	32a8 <_exit+0x8>

000032ac <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    32ac:	b480      	push	{r7}
    32ae:	af00      	add	r7, sp, #0
    return 1;
    32b0:	2301      	movs	r3, #1
  }
    32b2:	4618      	mov	r0, r3
    32b4:	46bd      	mov	sp, r7
    32b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    32ba:	4770      	bx	lr

000032bc <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    32bc:	b480      	push	{r7}
    32be:	b083      	sub	sp, #12
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
    32c4:	6039      	str	r1, [r7, #0]
    return -1;
    32c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    32ca:	4618      	mov	r0, r3
    32cc:	370c      	adds	r7, #12
    32ce:	46bd      	mov	sp, r7
    32d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d4:	4770      	bx	lr
    32d6:	Address 0x00000000000032d6 is out of bounds.


000032d8 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    32e0:	6878      	ldr	r0, [r7, #4]
    32e2:	f003 fa65 	bl	67b0 <strlen>
    32e6:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    32e8:	2300      	movs	r3, #0
    32ea:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    32ec:	4b0b      	ldr	r3, [pc, #44]	; (331c <puts+0x44>)
    32ee:	681b      	ldr	r3, [r3, #0]
    32f0:	68f9      	ldr	r1, [r7, #12]
    32f2:	6878      	ldr	r0, [r7, #4]
    32f4:	4798      	blx	r3
    32f6:	4602      	mov	r2, r0
    32f8:	68bb      	ldr	r3, [r7, #8]
    32fa:	4413      	add	r3, r2
    32fc:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    32fe:	4b07      	ldr	r3, [pc, #28]	; (331c <puts+0x44>)
    3300:	681b      	ldr	r3, [r3, #0]
    3302:	2101      	movs	r1, #1
    3304:	4806      	ldr	r0, [pc, #24]	; (3320 <puts+0x48>)
    3306:	4798      	blx	r3
    3308:	4602      	mov	r2, r0
    330a:	68bb      	ldr	r3, [r7, #8]
    330c:	4413      	add	r3, r2
    330e:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    3310:	68bb      	ldr	r3, [r7, #8]
  }
    3312:	4618      	mov	r0, r3
    3314:	3710      	adds	r7, #16
    3316:	46bd      	mov	sp, r7
    3318:	bd80      	pop	{r7, pc}
    331a:	bf00      	nop
    331c:	1000005c 	.word	0x1000005c
    3320:	000076e4 	.word	0x000076e4

00003324 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    3324:	b480      	push	{r7}
    3326:	b085      	sub	sp, #20
    3328:	af00      	add	r7, sp, #0
    332a:	60b9      	str	r1, [r7, #8]
    332c:	607a      	str	r2, [r7, #4]
    332e:	603b      	str	r3, [r7, #0]
    3330:	4603      	mov	r3, r0
    3332:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3334:	bf00      	nop
    3336:	3714      	adds	r7, #20
    3338:	46bd      	mov	sp, r7
    333a:	f85d 7b04 	ldr.w	r7, [sp], #4
    333e:	4770      	bx	lr

00003340 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    3340:	b580      	push	{r7, lr}
    3342:	b084      	sub	sp, #16
    3344:	af00      	add	r7, sp, #0
    3346:	60b9      	str	r1, [r7, #8]
    3348:	607a      	str	r2, [r7, #4]
    334a:	603b      	str	r3, [r7, #0]
    334c:	4603      	mov	r3, r0
    334e:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    3350:	7bfb      	ldrb	r3, [r7, #15]
    3352:	2b00      	cmp	r3, #0
    3354:	d003      	beq.n	335e <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    3356:	7bfb      	ldrb	r3, [r7, #15]
    3358:	4618      	mov	r0, r3
    335a:	f001 fd5d 	bl	4e18 <_putchar>
  }
}
    335e:	bf00      	nop
    3360:	3710      	adds	r7, #16
    3362:	46bd      	mov	sp, r7
    3364:	bd80      	pop	{r7, pc}

00003366 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    3366:	b480      	push	{r7}
    3368:	b085      	sub	sp, #20
    336a:	af00      	add	r7, sp, #0
    336c:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    336e:	687b      	ldr	r3, [r7, #4]
    3370:	60fb      	str	r3, [r7, #12]
    3372:	68fb      	ldr	r3, [r7, #12]
    3374:	781b      	ldrb	r3, [r3, #0]
    3376:	2b00      	cmp	r3, #0
    3378:	d003      	beq.n	3382 <_strlen(char const*)+0x1c>
    337a:	68fb      	ldr	r3, [r7, #12]
    337c:	3301      	adds	r3, #1
    337e:	60fb      	str	r3, [r7, #12]
    3380:	e7f7      	b.n	3372 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    3382:	68fa      	ldr	r2, [r7, #12]
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	1ad3      	subs	r3, r2, r3
}
    3388:	4618      	mov	r0, r3
    338a:	3714      	adds	r7, #20
    338c:	46bd      	mov	sp, r7
    338e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3392:	4770      	bx	lr

00003394 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    3394:	b480      	push	{r7}
    3396:	b083      	sub	sp, #12
    3398:	af00      	add	r7, sp, #0
    339a:	4603      	mov	r3, r0
    339c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    339e:	79fb      	ldrb	r3, [r7, #7]
    33a0:	2b2f      	cmp	r3, #47	; 0x2f
    33a2:	d904      	bls.n	33ae <_is_digit(char)+0x1a>
    33a4:	79fb      	ldrb	r3, [r7, #7]
    33a6:	2b39      	cmp	r3, #57	; 0x39
    33a8:	d801      	bhi.n	33ae <_is_digit(char)+0x1a>
    33aa:	2301      	movs	r3, #1
    33ac:	e000      	b.n	33b0 <_is_digit(char)+0x1c>
    33ae:	2300      	movs	r3, #0
}
    33b0:	4618      	mov	r0, r3
    33b2:	370c      	adds	r7, #12
    33b4:	46bd      	mov	sp, r7
    33b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ba:	4770      	bx	lr

000033bc <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    33bc:	b580      	push	{r7, lr}
    33be:	b084      	sub	sp, #16
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    33c4:	2300      	movs	r3, #0
    33c6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	681b      	ldr	r3, [r3, #0]
    33cc:	781b      	ldrb	r3, [r3, #0]
    33ce:	4618      	mov	r0, r3
    33d0:	f7ff ffe0 	bl	3394 <_is_digit(char)>
    33d4:	4603      	mov	r3, r0
    33d6:	2b00      	cmp	r3, #0
    33d8:	d00f      	beq.n	33fa <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    33da:	68fa      	ldr	r2, [r7, #12]
    33dc:	4613      	mov	r3, r2
    33de:	009b      	lsls	r3, r3, #2
    33e0:	4413      	add	r3, r2
    33e2:	005b      	lsls	r3, r3, #1
    33e4:	4618      	mov	r0, r3
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	681b      	ldr	r3, [r3, #0]
    33ea:	1c59      	adds	r1, r3, #1
    33ec:	687a      	ldr	r2, [r7, #4]
    33ee:	6011      	str	r1, [r2, #0]
    33f0:	781b      	ldrb	r3, [r3, #0]
    33f2:	4403      	add	r3, r0
    33f4:	3b30      	subs	r3, #48	; 0x30
    33f6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    33f8:	e7e6      	b.n	33c8 <_atoi(char const**)+0xc>
  }
  return i;
    33fa:	68fb      	ldr	r3, [r7, #12]
}
    33fc:	4618      	mov	r0, r3
    33fe:	3710      	adds	r7, #16
    3400:	46bd      	mov	sp, r7
    3402:	bd80      	pop	{r7, pc}

00003404 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3404:	b590      	push	{r4, r7, lr}
    3406:	b089      	sub	sp, #36	; 0x24
    3408:	af00      	add	r7, sp, #0
    340a:	60f8      	str	r0, [r7, #12]
    340c:	60b9      	str	r1, [r7, #8]
    340e:	607a      	str	r2, [r7, #4]
    3410:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3418:	f003 0302 	and.w	r3, r3, #2
    341c:	2b00      	cmp	r3, #0
    341e:	d10e      	bne.n	343e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3424:	429a      	cmp	r2, r3
    3426:	d20a      	bcs.n	343e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    342a:	2b1f      	cmp	r3, #31
    342c:	d807      	bhi.n	343e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3430:	1c5a      	adds	r2, r3, #1
    3432:	637a      	str	r2, [r7, #52]	; 0x34
    3434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3436:	4413      	add	r3, r2
    3438:	2230      	movs	r2, #48	; 0x30
    343a:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    343c:	e7eb      	b.n	3416 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3440:	f003 0302 	and.w	r3, r3, #2
    3444:	2b00      	cmp	r3, #0
    3446:	d113      	bne.n	3470 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    344a:	f003 0301 	and.w	r3, r3, #1
    344e:	2b00      	cmp	r3, #0
    3450:	d00e      	beq.n	3470 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3456:	429a      	cmp	r2, r3
    3458:	d20a      	bcs.n	3470 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    345c:	2b1f      	cmp	r3, #31
    345e:	d807      	bhi.n	3470 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3462:	1c5a      	adds	r2, r3, #1
    3464:	637a      	str	r2, [r7, #52]	; 0x34
    3466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3468:	4413      	add	r3, r2
    346a:	2230      	movs	r2, #48	; 0x30
    346c:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    346e:	e7e6      	b.n	343e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3472:	f003 0310 	and.w	r3, r3, #16
    3476:	2b00      	cmp	r3, #0
    3478:	d058      	beq.n	352c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    347a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3480:	2b00      	cmp	r3, #0
    3482:	d116      	bne.n	34b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3486:	2b00      	cmp	r3, #0
    3488:	d013      	beq.n	34b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    348a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    348c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    348e:	429a      	cmp	r2, r3
    3490:	d003      	beq.n	349a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    3492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3496:	429a      	cmp	r2, r3
    3498:	d10b      	bne.n	34b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    349a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    349c:	3b01      	subs	r3, #1
    349e:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    34a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34a2:	2b00      	cmp	r3, #0
    34a4:	d005      	beq.n	34b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    34a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a8:	2b10      	cmp	r3, #16
    34aa:	d102      	bne.n	34b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    34ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34ae:	3b01      	subs	r3, #1
    34b0:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    34b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34b4:	2b10      	cmp	r3, #16
    34b6:	d10f      	bne.n	34d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    34b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    34ba:	f003 0320 	and.w	r3, r3, #32
    34be:	2b00      	cmp	r3, #0
    34c0:	d10a      	bne.n	34d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    34c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34c4:	2b1f      	cmp	r3, #31
    34c6:	d807      	bhi.n	34d8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    34c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34ca:	1c5a      	adds	r2, r3, #1
    34cc:	637a      	str	r2, [r7, #52]	; 0x34
    34ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    34d0:	4413      	add	r3, r2
    34d2:	2278      	movs	r2, #120	; 0x78
    34d4:	701a      	strb	r2, [r3, #0]
    34d6:	e01f      	b.n	3518 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    34d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34da:	2b10      	cmp	r3, #16
    34dc:	d10f      	bne.n	34fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    34de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    34e0:	f003 0320 	and.w	r3, r3, #32
    34e4:	2b00      	cmp	r3, #0
    34e6:	d00a      	beq.n	34fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    34e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34ea:	2b1f      	cmp	r3, #31
    34ec:	d807      	bhi.n	34fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    34ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34f0:	1c5a      	adds	r2, r3, #1
    34f2:	637a      	str	r2, [r7, #52]	; 0x34
    34f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    34f6:	4413      	add	r3, r2
    34f8:	2258      	movs	r2, #88	; 0x58
    34fa:	701a      	strb	r2, [r3, #0]
    34fc:	e00c      	b.n	3518 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    34fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3500:	2b02      	cmp	r3, #2
    3502:	d109      	bne.n	3518 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    3504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3506:	2b1f      	cmp	r3, #31
    3508:	d806      	bhi.n	3518 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    350c:	1c5a      	adds	r2, r3, #1
    350e:	637a      	str	r2, [r7, #52]	; 0x34
    3510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3512:	4413      	add	r3, r2
    3514:	2262      	movs	r2, #98	; 0x62
    3516:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    351a:	2b1f      	cmp	r3, #31
    351c:	d806      	bhi.n	352c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3520:	1c5a      	adds	r2, r3, #1
    3522:	637a      	str	r2, [r7, #52]	; 0x34
    3524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3526:	4413      	add	r3, r2
    3528:	2230      	movs	r2, #48	; 0x30
    352a:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    352e:	2b00      	cmp	r3, #0
    3530:	d014      	beq.n	355c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3536:	429a      	cmp	r2, r3
    3538:	d110      	bne.n	355c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    353a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    353e:	2b00      	cmp	r3, #0
    3540:	d109      	bne.n	3556 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3544:	f003 0304 	and.w	r3, r3, #4
    3548:	2b00      	cmp	r3, #0
    354a:	d104      	bne.n	3556 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    354e:	f003 0308 	and.w	r3, r3, #8
    3552:	2b00      	cmp	r3, #0
    3554:	d002      	beq.n	355c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    3556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3558:	3b01      	subs	r3, #1
    355a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    355e:	2b1f      	cmp	r3, #31
    3560:	d824      	bhi.n	35ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    3562:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3566:	2b00      	cmp	r3, #0
    3568:	d007      	beq.n	357a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    356c:	1c5a      	adds	r2, r3, #1
    356e:	637a      	str	r2, [r7, #52]	; 0x34
    3570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3572:	4413      	add	r3, r2
    3574:	222d      	movs	r2, #45	; 0x2d
    3576:	701a      	strb	r2, [r3, #0]
    3578:	e018      	b.n	35ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    357a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    357c:	f003 0304 	and.w	r3, r3, #4
    3580:	2b00      	cmp	r3, #0
    3582:	d007      	beq.n	3594 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3586:	1c5a      	adds	r2, r3, #1
    3588:	637a      	str	r2, [r7, #52]	; 0x34
    358a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    358c:	4413      	add	r3, r2
    358e:	222b      	movs	r2, #43	; 0x2b
    3590:	701a      	strb	r2, [r3, #0]
    3592:	e00b      	b.n	35ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    3594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3596:	f003 0308 	and.w	r3, r3, #8
    359a:	2b00      	cmp	r3, #0
    359c:	d006      	beq.n	35ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35a0:	1c5a      	adds	r2, r3, #1
    35a2:	637a      	str	r2, [r7, #52]	; 0x34
    35a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35a6:	4413      	add	r3, r2
    35a8:	2220      	movs	r2, #32
    35aa:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    35ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35ae:	f003 0302 	and.w	r3, r3, #2
    35b2:	2b00      	cmp	r3, #0
    35b4:	d116      	bne.n	35e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    35b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35b8:	f003 0301 	and.w	r3, r3, #1
    35bc:	2b00      	cmp	r3, #0
    35be:	d111      	bne.n	35e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    35c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35c2:	61fb      	str	r3, [r7, #28]
    35c4:	69fa      	ldr	r2, [r7, #28]
    35c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    35c8:	429a      	cmp	r2, r3
    35ca:	d20b      	bcs.n	35e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    35cc:	687a      	ldr	r2, [r7, #4]
    35ce:	1c53      	adds	r3, r2, #1
    35d0:	607b      	str	r3, [r7, #4]
    35d2:	68fc      	ldr	r4, [r7, #12]
    35d4:	683b      	ldr	r3, [r7, #0]
    35d6:	68b9      	ldr	r1, [r7, #8]
    35d8:	2020      	movs	r0, #32
    35da:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    35dc:	69fb      	ldr	r3, [r7, #28]
    35de:	3301      	adds	r3, #1
    35e0:	61fb      	str	r3, [r7, #28]
    35e2:	e7ef      	b.n	35c4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    35e4:	2300      	movs	r3, #0
    35e6:	61bb      	str	r3, [r7, #24]
    35e8:	69ba      	ldr	r2, [r7, #24]
    35ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35ec:	429a      	cmp	r2, r3
    35ee:	d211      	bcs.n	3614 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    35f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35f2:	69bb      	ldr	r3, [r7, #24]
    35f4:	1ad3      	subs	r3, r2, r3
    35f6:	3b01      	subs	r3, #1
    35f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35fa:	4413      	add	r3, r2
    35fc:	7818      	ldrb	r0, [r3, #0]
    35fe:	687a      	ldr	r2, [r7, #4]
    3600:	1c53      	adds	r3, r2, #1
    3602:	607b      	str	r3, [r7, #4]
    3604:	68fc      	ldr	r4, [r7, #12]
    3606:	683b      	ldr	r3, [r7, #0]
    3608:	68b9      	ldr	r1, [r7, #8]
    360a:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    360c:	69bb      	ldr	r3, [r7, #24]
    360e:	3301      	adds	r3, #1
    3610:	61bb      	str	r3, [r7, #24]
    3612:	e7e9      	b.n	35e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3616:	f003 0302 	and.w	r3, r3, #2
    361a:	2b00      	cmp	r3, #0
    361c:	d00e      	beq.n	363c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    361e:	687a      	ldr	r2, [r7, #4]
    3620:	697b      	ldr	r3, [r7, #20]
    3622:	1ad3      	subs	r3, r2, r3
    3624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3626:	429a      	cmp	r2, r3
    3628:	d908      	bls.n	363c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    362a:	687a      	ldr	r2, [r7, #4]
    362c:	1c53      	adds	r3, r2, #1
    362e:	607b      	str	r3, [r7, #4]
    3630:	68fc      	ldr	r4, [r7, #12]
    3632:	683b      	ldr	r3, [r7, #0]
    3634:	68b9      	ldr	r1, [r7, #8]
    3636:	2020      	movs	r0, #32
    3638:	47a0      	blx	r4
    while (idx - start_idx < width) {
    363a:	e7f0      	b.n	361e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    363c:	687b      	ldr	r3, [r7, #4]
}
    363e:	4618      	mov	r0, r3
    3640:	3724      	adds	r7, #36	; 0x24
    3642:	46bd      	mov	sp, r7
    3644:	bd90      	pop	{r4, r7, pc}

00003646 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3646:	b580      	push	{r7, lr}
    3648:	b096      	sub	sp, #88	; 0x58
    364a:	af08      	add	r7, sp, #32
    364c:	60f8      	str	r0, [r7, #12]
    364e:	60b9      	str	r1, [r7, #8]
    3650:	607a      	str	r2, [r7, #4]
    3652:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3654:	2300      	movs	r3, #0
    3656:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    365a:	2b00      	cmp	r3, #0
    365c:	d103      	bne.n	3666 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3660:	f023 0310 	bic.w	r3, r3, #16
    3664:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    366c:	2b00      	cmp	r3, #0
    366e:	d002      	beq.n	3676 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    3670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3672:	2b00      	cmp	r3, #0
    3674:	d034      	beq.n	36e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    3676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3678:	6cba      	ldr	r2, [r7, #72]	; 0x48
    367a:	fbb3 f2f2 	udiv	r2, r3, r2
    367e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3680:	fb01 f202 	mul.w	r2, r1, r2
    3684:	1a9b      	subs	r3, r3, r2
    3686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    368a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    368e:	2b09      	cmp	r3, #9
    3690:	d804      	bhi.n	369c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    3692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3696:	3330      	adds	r3, #48	; 0x30
    3698:	b2da      	uxtb	r2, r3
    369a:	e00d      	b.n	36b8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    369e:	f003 0320 	and.w	r3, r3, #32
    36a2:	2b00      	cmp	r3, #0
    36a4:	d001      	beq.n	36aa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    36a6:	2241      	movs	r2, #65	; 0x41
    36a8:	e000      	b.n	36ac <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    36aa:	2261      	movs	r2, #97	; 0x61
    36ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    36b0:	4413      	add	r3, r2
    36b2:	b2db      	uxtb	r3, r3
    36b4:	3b0a      	subs	r3, #10
    36b6:	b2da      	uxtb	r2, r3
    36b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ba:	1c59      	adds	r1, r3, #1
    36bc:	6379      	str	r1, [r7, #52]	; 0x34
    36be:	f107 0138 	add.w	r1, r7, #56	; 0x38
    36c2:	440b      	add	r3, r1
    36c4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    36c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    36ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    36cc:	fbb2 f3f3 	udiv	r3, r2, r3
    36d0:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    36d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    36d4:	2b00      	cmp	r3, #0
    36d6:	d003      	beq.n	36e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    36d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36da:	2b1f      	cmp	r3, #31
    36dc:	d800      	bhi.n	36e0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    36de:	e7ca      	b.n	3676 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    36e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36e2:	9306      	str	r3, [sp, #24]
    36e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    36e6:	9305      	str	r3, [sp, #20]
    36e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    36ea:	9304      	str	r3, [sp, #16]
    36ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    36ee:	9303      	str	r3, [sp, #12]
    36f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    36f4:	9302      	str	r3, [sp, #8]
    36f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36f8:	9301      	str	r3, [sp, #4]
    36fa:	f107 0310 	add.w	r3, r7, #16
    36fe:	9300      	str	r3, [sp, #0]
    3700:	683b      	ldr	r3, [r7, #0]
    3702:	687a      	ldr	r2, [r7, #4]
    3704:	68b9      	ldr	r1, [r7, #8]
    3706:	68f8      	ldr	r0, [r7, #12]
    3708:	f7ff fe7c 	bl	3404 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    370c:	4603      	mov	r3, r0
}
    370e:	4618      	mov	r0, r3
    3710:	3738      	adds	r7, #56	; 0x38
    3712:	46bd      	mov	sp, r7
    3714:	bd80      	pop	{r7, pc}

00003716 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3716:	b590      	push	{r4, r7, lr}
    3718:	b097      	sub	sp, #92	; 0x5c
    371a:	af08      	add	r7, sp, #32
    371c:	60f8      	str	r0, [r7, #12]
    371e:	60b9      	str	r1, [r7, #8]
    3720:	607a      	str	r2, [r7, #4]
    3722:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3724:	2300      	movs	r3, #0
    3726:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3728:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    372c:	4323      	orrs	r3, r4
    372e:	d103      	bne.n	3738 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3732:	f023 0310 	bic.w	r3, r3, #16
    3736:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    373e:	2b00      	cmp	r3, #0
    3740:	d003      	beq.n	374a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    3742:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    3746:	4323      	orrs	r3, r4
    3748:	d03a      	beq.n	37c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    374a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    374e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    3752:	f001 fea3 	bl	549c <__aeabi_uldivmod>
    3756:	461c      	mov	r4, r3
    3758:	4613      	mov	r3, r2
    375a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    375e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3762:	2b09      	cmp	r3, #9
    3764:	d804      	bhi.n	3770 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    3766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    376a:	3330      	adds	r3, #48	; 0x30
    376c:	b2da      	uxtb	r2, r3
    376e:	e00d      	b.n	378c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    3770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3772:	f003 0320 	and.w	r3, r3, #32
    3776:	2b00      	cmp	r3, #0
    3778:	d001      	beq.n	377e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    377a:	2241      	movs	r2, #65	; 0x41
    377c:	e000      	b.n	3780 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    377e:	2261      	movs	r2, #97	; 0x61
    3780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3784:	4413      	add	r3, r2
    3786:	b2db      	uxtb	r3, r3
    3788:	3b0a      	subs	r3, #10
    378a:	b2da      	uxtb	r2, r3
    378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    378e:	1c59      	adds	r1, r3, #1
    3790:	6379      	str	r1, [r7, #52]	; 0x34
    3792:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3796:	440b      	add	r3, r1
    3798:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    379c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    37a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    37a4:	f001 fe7a 	bl	549c <__aeabi_uldivmod>
    37a8:	4603      	mov	r3, r0
    37aa:	460c      	mov	r4, r1
    37ac:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    37b0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    37b4:	4323      	orrs	r3, r4
    37b6:	d003      	beq.n	37c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    37b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37ba:	2b1f      	cmp	r3, #31
    37bc:	d800      	bhi.n	37c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    37be:	e7c4      	b.n	374a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    37c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    37c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    37c4:	9206      	str	r2, [sp, #24]
    37c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    37c8:	9205      	str	r2, [sp, #20]
    37ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    37cc:	9204      	str	r2, [sp, #16]
    37ce:	9303      	str	r3, [sp, #12]
    37d0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    37d4:	9302      	str	r3, [sp, #8]
    37d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37d8:	9301      	str	r3, [sp, #4]
    37da:	f107 0310 	add.w	r3, r7, #16
    37de:	9300      	str	r3, [sp, #0]
    37e0:	683b      	ldr	r3, [r7, #0]
    37e2:	687a      	ldr	r2, [r7, #4]
    37e4:	68b9      	ldr	r1, [r7, #8]
    37e6:	68f8      	ldr	r0, [r7, #12]
    37e8:	f7ff fe0c 	bl	3404 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    37ec:	4603      	mov	r3, r0
}
    37ee:	4618      	mov	r0, r3
    37f0:	373c      	adds	r7, #60	; 0x3c
    37f2:	46bd      	mov	sp, r7
    37f4:	bd90      	pop	{r4, r7, pc}
    37f6:	Address 0x00000000000037f6 is out of bounds.


000037f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    37f8:	b590      	push	{r4, r7, lr}
    37fa:	b09b      	sub	sp, #108	; 0x6c
    37fc:	af00      	add	r7, sp, #0
    37fe:	6178      	str	r0, [r7, #20]
    3800:	6139      	str	r1, [r7, #16]
    3802:	60fa      	str	r2, [r7, #12]
    3804:	60bb      	str	r3, [r7, #8]
    3806:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    380a:	68fb      	ldr	r3, [r7, #12]
    380c:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    380e:	e9d7 0100 	ldrd	r0, r1, [r7]
    3812:	f001 fce5 	bl	51e0 <__aeabi_d2f>
    3816:	4603      	mov	r3, r0
    3818:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    381a:	2300      	movs	r3, #0
    381c:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    381e:	f04f 0300 	mov.w	r3, #0
    3822:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3824:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    3828:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    382a:	2300      	movs	r3, #0
    382c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3830:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    383c:	d50a      	bpl.n	3854 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    383e:	2301      	movs	r3, #1
    3840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3844:	ed9f 7aab 	vldr	s14, [pc, #684]	; 3af4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    3848:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    384c:	ee77 7a67 	vsub.f32	s15, s14, s15
    3850:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    385c:	2b00      	cmp	r3, #0
    385e:	d101      	bne.n	3864 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3860:	2306      	movs	r3, #6
    3862:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3866:	2b1f      	cmp	r3, #31
    3868:	d80f      	bhi.n	388a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    386a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    386c:	2b09      	cmp	r3, #9
    386e:	d90c      	bls.n	388a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3872:	1c5a      	adds	r2, r3, #1
    3874:	663a      	str	r2, [r7, #96]	; 0x60
    3876:	f107 0268 	add.w	r2, r7, #104	; 0x68
    387a:	4413      	add	r3, r2
    387c:	2230      	movs	r2, #48	; 0x30
    387e:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3884:	3b01      	subs	r3, #1
    3886:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3888:	e7ec      	b.n	3864 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    388a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    388e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3892:	ee17 3a90 	vmov	r3, s15
    3896:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    3898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    389a:	ee07 3a90 	vmov	s15, r3
    389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    38a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    38a6:	ee37 7a67 	vsub.f32	s14, s14, s15
    38aa:	4a93      	ldr	r2, [pc, #588]	; (3af8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    38ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    38ae:	009b      	lsls	r3, r3, #2
    38b0:	4413      	add	r3, r2
    38b2:	edd3 7a00 	vldr	s15, [r3]
    38b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    38ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    38be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    38c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    38c6:	ee17 3a90 	vmov	r3, s15
    38ca:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    38cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38ce:	ee07 3a90 	vmov	s15, r3
    38d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    38d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    38da:	ee77 7a67 	vsub.f32	s15, s14, s15
    38de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    38e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    38e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    38ea:	eef4 7ac7 	vcmpe.f32	s15, s14
    38ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38f2:	dd18      	ble.n	3926 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    38f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38f6:	3301      	adds	r3, #1
    38f8:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    38fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38fc:	ee07 3a90 	vmov	s15, r3
    3900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3904:	4a7c      	ldr	r2, [pc, #496]	; (3af8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3908:	009b      	lsls	r3, r3, #2
    390a:	4413      	add	r3, r2
    390c:	edd3 7a00 	vldr	s15, [r3]
    3910:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3918:	db19      	blt.n	394e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    391a:	2300      	movs	r3, #0
    391c:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    391e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3920:	3301      	adds	r3, #1
    3922:	65bb      	str	r3, [r7, #88]	; 0x58
    3924:	e013      	b.n	394e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3926:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    392a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    392e:	eef4 7a47 	vcmp.f32	s15, s14
    3932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3936:	d10a      	bne.n	394e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    3938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    393a:	2b00      	cmp	r3, #0
    393c:	d004      	beq.n	3948 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3940:	f003 0301 	and.w	r3, r3, #1
    3944:	2b00      	cmp	r3, #0
    3946:	d002      	beq.n	394e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    3948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    394a:	3301      	adds	r3, #1
    394c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    394e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3952:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3afc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    3956:	eef4 7ac7 	vcmpe.f32	s15, s14
    395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    395e:	dd01      	ble.n	3964 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3960:	2300      	movs	r3, #0
    3962:	e166      	b.n	3c32 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3966:	2b00      	cmp	r3, #0
    3968:	d129      	bne.n	39be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    396a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    396c:	ee07 3a90 	vmov	s15, r3
    3970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3974:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3978:	ee77 7a67 	vsub.f32	s15, s14, s15
    397c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3980:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3984:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3988:	eef4 7ac7 	vcmpe.f32	s15, s14
    398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3990:	dd03      	ble.n	399a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    3992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3994:	3301      	adds	r3, #1
    3996:	65bb      	str	r3, [r7, #88]	; 0x58
    3998:	e062      	b.n	3a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    399a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    399e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    39a2:	eef4 7a47 	vcmp.f32	s15, s14
    39a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39aa:	d159      	bne.n	3a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    39ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    39ae:	f003 0301 	and.w	r3, r3, #1
    39b2:	2b00      	cmp	r3, #0
    39b4:	d054      	beq.n	3a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    39b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    39b8:	3301      	adds	r3, #1
    39ba:	65bb      	str	r3, [r7, #88]	; 0x58
    39bc:	e050      	b.n	3a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    39be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    39c0:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    39c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    39c4:	2b1f      	cmp	r3, #31
    39c6:	d828      	bhi.n	3a1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    39c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    39ca:	3b01      	subs	r3, #1
    39cc:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    39ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
    39d0:	4b4b      	ldr	r3, [pc, #300]	; (3b00 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    39d2:	fba3 2301 	umull	r2, r3, r3, r1
    39d6:	08da      	lsrs	r2, r3, #3
    39d8:	4613      	mov	r3, r2
    39da:	009b      	lsls	r3, r3, #2
    39dc:	4413      	add	r3, r2
    39de:	005b      	lsls	r3, r3, #1
    39e0:	1aca      	subs	r2, r1, r3
    39e2:	b2d3      	uxtb	r3, r2
    39e4:	3330      	adds	r3, #48	; 0x30
    39e6:	b2d9      	uxtb	r1, r3
    39e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    39ea:	1c5a      	adds	r2, r3, #1
    39ec:	663a      	str	r2, [r7, #96]	; 0x60
    39ee:	f107 0268 	add.w	r2, r7, #104	; 0x68
    39f2:	4413      	add	r3, r2
    39f4:	460a      	mov	r2, r1
    39f6:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    39fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39fc:	4a40      	ldr	r2, [pc, #256]	; (3b00 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    39fe:	fba2 2303 	umull	r2, r3, r2, r3
    3a02:	08db      	lsrs	r3, r3, #3
    3a04:	657b      	str	r3, [r7, #84]	; 0x54
    3a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a08:	2b00      	cmp	r3, #0
    3a0a:	bf0c      	ite	eq
    3a0c:	2301      	moveq	r3, #1
    3a0e:	2300      	movne	r3, #0
    3a10:	b2db      	uxtb	r3, r3
    3a12:	2b00      	cmp	r3, #0
    3a14:	d100      	bne.n	3a18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3a16:	e7d4      	b.n	39c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    3a18:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a1c:	2b1f      	cmp	r3, #31
    3a1e:	d806      	bhi.n	3a2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3a22:	1e5a      	subs	r2, r3, #1
    3a24:	653a      	str	r2, [r7, #80]	; 0x50
    3a26:	2b00      	cmp	r3, #0
    3a28:	d001      	beq.n	3a2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3a2a:	2301      	movs	r3, #1
    3a2c:	e000      	b.n	3a30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3a2e:	2300      	movs	r3, #0
    3a30:	2b00      	cmp	r3, #0
    3a32:	d009      	beq.n	3a48 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    3a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a36:	1c5a      	adds	r2, r3, #1
    3a38:	663a      	str	r2, [r7, #96]	; 0x60
    3a3a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3a3e:	4413      	add	r3, r2
    3a40:	2230      	movs	r2, #48	; 0x30
    3a42:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3a46:	e7e8      	b.n	3a1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a4a:	2b1f      	cmp	r3, #31
    3a4c:	d808      	bhi.n	3a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    3a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a50:	1c5a      	adds	r2, r3, #1
    3a52:	663a      	str	r2, [r7, #96]	; 0x60
    3a54:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3a58:	4413      	add	r3, r2
    3a5a:	222e      	movs	r2, #46	; 0x2e
    3a5c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a62:	2b1f      	cmp	r3, #31
    3a64:	d829      	bhi.n	3aba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    3a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3a68:	4b26      	ldr	r3, [pc, #152]	; (3b04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3a6a:	fb83 1302 	smull	r1, r3, r3, r2
    3a6e:	1099      	asrs	r1, r3, #2
    3a70:	17d3      	asrs	r3, r2, #31
    3a72:	1ac9      	subs	r1, r1, r3
    3a74:	460b      	mov	r3, r1
    3a76:	009b      	lsls	r3, r3, #2
    3a78:	440b      	add	r3, r1
    3a7a:	005b      	lsls	r3, r3, #1
    3a7c:	1ad1      	subs	r1, r2, r3
    3a7e:	b2cb      	uxtb	r3, r1
    3a80:	3330      	adds	r3, #48	; 0x30
    3a82:	b2d9      	uxtb	r1, r3
    3a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a86:	1c5a      	adds	r2, r3, #1
    3a88:	663a      	str	r2, [r7, #96]	; 0x60
    3a8a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3a8e:	4413      	add	r3, r2
    3a90:	460a      	mov	r2, r1
    3a92:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    3a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3a98:	4a1a      	ldr	r2, [pc, #104]	; (3b04 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3a9a:	fb82 1203 	smull	r1, r2, r2, r3
    3a9e:	1092      	asrs	r2, r2, #2
    3aa0:	17db      	asrs	r3, r3, #31
    3aa2:	1ad3      	subs	r3, r2, r3
    3aa4:	65bb      	str	r3, [r7, #88]	; 0x58
    3aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	bf0c      	ite	eq
    3aac:	2301      	moveq	r3, #1
    3aae:	2300      	movne	r3, #0
    3ab0:	b2db      	uxtb	r3, r3
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d100      	bne.n	3ab8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3ab6:	e7d3      	b.n	3a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    3ab8:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3abe:	f003 0302 	and.w	r3, r3, #2
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d120      	bne.n	3b08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3aca:	f003 0301 	and.w	r3, r3, #1
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d01a      	beq.n	3b08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3ad2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3ad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3ad6:	429a      	cmp	r2, r3
    3ad8:	d216      	bcs.n	3b08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3adc:	2b1f      	cmp	r3, #31
    3ade:	d813      	bhi.n	3b08 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    3ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ae2:	1c5a      	adds	r2, r3, #1
    3ae4:	663a      	str	r2, [r7, #96]	; 0x60
    3ae6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3aea:	4413      	add	r3, r2
    3aec:	2230      	movs	r2, #48	; 0x30
    3aee:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3af2:	e7e2      	b.n	3aba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    3af4:	00000000 	.word	0x00000000
    3af8:	000076e8 	.word	0x000076e8
    3afc:	4f000000 	.word	0x4f000000
    3b00:	cccccccd 	.word	0xcccccccd
    3b04:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3b08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3b0c:	429a      	cmp	r2, r3
    3b0e:	d112      	bne.n	3b36 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3b14:	2b00      	cmp	r3, #0
    3b16:	d10b      	bne.n	3b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3b1c:	f003 0304 	and.w	r3, r3, #4
    3b20:	2b00      	cmp	r3, #0
    3b22:	d105      	bne.n	3b30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3b28:	f003 0308 	and.w	r3, r3, #8
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d002      	beq.n	3b36 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    3b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b32:	3b01      	subs	r3, #1
    3b34:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b38:	2b1f      	cmp	r3, #31
    3b3a:	d82c      	bhi.n	3b96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    3b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3b40:	2b00      	cmp	r3, #0
    3b42:	d009      	beq.n	3b58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    3b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b46:	1c5a      	adds	r2, r3, #1
    3b48:	663a      	str	r2, [r7, #96]	; 0x60
    3b4a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3b4e:	4413      	add	r3, r2
    3b50:	222d      	movs	r2, #45	; 0x2d
    3b52:	f803 2c50 	strb.w	r2, [r3, #-80]
    3b56:	e01e      	b.n	3b96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    3b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3b5c:	f003 0304 	and.w	r3, r3, #4
    3b60:	2b00      	cmp	r3, #0
    3b62:	d009      	beq.n	3b78 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b66:	1c5a      	adds	r2, r3, #1
    3b68:	663a      	str	r2, [r7, #96]	; 0x60
    3b6a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3b6e:	4413      	add	r3, r2
    3b70:	222b      	movs	r2, #43	; 0x2b
    3b72:	f803 2c50 	strb.w	r2, [r3, #-80]
    3b76:	e00e      	b.n	3b96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    3b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3b7c:	f003 0308 	and.w	r3, r3, #8
    3b80:	2b00      	cmp	r3, #0
    3b82:	d008      	beq.n	3b96 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    3b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b86:	1c5a      	adds	r2, r3, #1
    3b88:	663a      	str	r2, [r7, #96]	; 0x60
    3b8a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3b8e:	4413      	add	r3, r2
    3b90:	2220      	movs	r2, #32
    3b92:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3b9a:	f003 0302 	and.w	r3, r3, #2
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d117      	bne.n	3bd2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    3ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3ba6:	f003 0301 	and.w	r3, r3, #1
    3baa:	2b00      	cmp	r3, #0
    3bac:	d111      	bne.n	3bd2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    3bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    3bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3bb6:	429a      	cmp	r2, r3
    3bb8:	d20b      	bcs.n	3bd2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    3bba:	68fa      	ldr	r2, [r7, #12]
    3bbc:	1c53      	adds	r3, r2, #1
    3bbe:	60fb      	str	r3, [r7, #12]
    3bc0:	697c      	ldr	r4, [r7, #20]
    3bc2:	68bb      	ldr	r3, [r7, #8]
    3bc4:	6939      	ldr	r1, [r7, #16]
    3bc6:	2020      	movs	r0, #32
    3bc8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    3bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3bcc:	3301      	adds	r3, #1
    3bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    3bd0:	e7ef      	b.n	3bb2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3bd2:	2300      	movs	r3, #0
    3bd4:	64bb      	str	r3, [r7, #72]	; 0x48
    3bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3bda:	429a      	cmp	r2, r3
    3bdc:	d213      	bcs.n	3c06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3bde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3be2:	1ad3      	subs	r3, r2, r3
    3be4:	3b01      	subs	r3, #1
    3be6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3bea:	4413      	add	r3, r2
    3bec:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    3bf0:	68fa      	ldr	r2, [r7, #12]
    3bf2:	1c53      	adds	r3, r2, #1
    3bf4:	60fb      	str	r3, [r7, #12]
    3bf6:	697c      	ldr	r4, [r7, #20]
    3bf8:	68bb      	ldr	r3, [r7, #8]
    3bfa:	6939      	ldr	r1, [r7, #16]
    3bfc:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c00:	3301      	adds	r3, #1
    3c02:	64bb      	str	r3, [r7, #72]	; 0x48
    3c04:	e7e7      	b.n	3bd6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3c0a:	f003 0302 	and.w	r3, r3, #2
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d00e      	beq.n	3c30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    3c12:	68fa      	ldr	r2, [r7, #12]
    3c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c16:	1ad3      	subs	r3, r2, r3
    3c18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    3c1a:	429a      	cmp	r2, r3
    3c1c:	d908      	bls.n	3c30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    3c1e:	68fa      	ldr	r2, [r7, #12]
    3c20:	1c53      	adds	r3, r2, #1
    3c22:	60fb      	str	r3, [r7, #12]
    3c24:	697c      	ldr	r4, [r7, #20]
    3c26:	68bb      	ldr	r3, [r7, #8]
    3c28:	6939      	ldr	r1, [r7, #16]
    3c2a:	2020      	movs	r0, #32
    3c2c:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3c2e:	e7f0      	b.n	3c12 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    3c30:	68fb      	ldr	r3, [r7, #12]
}
    3c32:	4618      	mov	r0, r3
    3c34:	376c      	adds	r7, #108	; 0x6c
    3c36:	46bd      	mov	sp, r7
    3c38:	bd90      	pop	{r4, r7, pc}
    3c3a:	bf00      	nop

00003c3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3c3c:	b5b0      	push	{r4, r5, r7, lr}
    3c3e:	b0a0      	sub	sp, #128	; 0x80
    3c40:	af0a      	add	r7, sp, #40	; 0x28
    3c42:	60f8      	str	r0, [r7, #12]
    3c44:	60b9      	str	r1, [r7, #8]
    3c46:	607a      	str	r2, [r7, #4]
    3c48:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    3c4a:	2300      	movs	r3, #0
    3c4c:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    3c4e:	68bb      	ldr	r3, [r7, #8]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d101      	bne.n	3c58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    3c54:	4ba2      	ldr	r3, [pc, #648]	; (3ee0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    3c56:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    3c58:	683b      	ldr	r3, [r7, #0]
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	f000 8445 	beq.w	44ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    3c62:	683b      	ldr	r3, [r7, #0]
    3c64:	781b      	ldrb	r3, [r3, #0]
    3c66:	2b25      	cmp	r3, #37	; 0x25
    3c68:	d00d      	beq.n	3c86 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    3c6a:	683b      	ldr	r3, [r7, #0]
    3c6c:	7818      	ldrb	r0, [r3, #0]
    3c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3c70:	1c53      	adds	r3, r2, #1
    3c72:	647b      	str	r3, [r7, #68]	; 0x44
    3c74:	68fc      	ldr	r4, [r7, #12]
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	68b9      	ldr	r1, [r7, #8]
    3c7a:	47a0      	blx	r4
      format++;
    3c7c:	683b      	ldr	r3, [r7, #0]
    3c7e:	3301      	adds	r3, #1
    3c80:	603b      	str	r3, [r7, #0]
      continue;
    3c82:	f000 bc31 	b.w	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    3c86:	683b      	ldr	r3, [r7, #0]
    3c88:	3301      	adds	r3, #1
    3c8a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    3c8c:	2300      	movs	r3, #0
    3c8e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    3c90:	683b      	ldr	r3, [r7, #0]
    3c92:	781b      	ldrb	r3, [r3, #0]
    3c94:	3b20      	subs	r3, #32
    3c96:	2b10      	cmp	r3, #16
    3c98:	d856      	bhi.n	3d48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    3c9a:	a201      	add	r2, pc, #4	; (adr r2, 3ca0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    3c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3ca0:	00003d21 	.word	0x00003d21
    3ca4:	00003d49 	.word	0x00003d49
    3ca8:	00003d49 	.word	0x00003d49
    3cac:	00003d35 	.word	0x00003d35
    3cb0:	00003d49 	.word	0x00003d49
    3cb4:	00003d49 	.word	0x00003d49
    3cb8:	00003d49 	.word	0x00003d49
    3cbc:	00003d49 	.word	0x00003d49
    3cc0:	00003d49 	.word	0x00003d49
    3cc4:	00003d49 	.word	0x00003d49
    3cc8:	00003d49 	.word	0x00003d49
    3ccc:	00003d0d 	.word	0x00003d0d
    3cd0:	00003d49 	.word	0x00003d49
    3cd4:	00003cf9 	.word	0x00003cf9
    3cd8:	00003d49 	.word	0x00003d49
    3cdc:	00003d49 	.word	0x00003d49
    3ce0:	00003ce5 	.word	0x00003ce5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ce6:	f043 0301 	orr.w	r3, r3, #1
    3cea:	657b      	str	r3, [r7, #84]	; 0x54
    3cec:	683b      	ldr	r3, [r7, #0]
    3cee:	3301      	adds	r3, #1
    3cf0:	603b      	str	r3, [r7, #0]
    3cf2:	2301      	movs	r3, #1
    3cf4:	64bb      	str	r3, [r7, #72]	; 0x48
    3cf6:	e02a      	b.n	3d4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    3cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cfa:	f043 0302 	orr.w	r3, r3, #2
    3cfe:	657b      	str	r3, [r7, #84]	; 0x54
    3d00:	683b      	ldr	r3, [r7, #0]
    3d02:	3301      	adds	r3, #1
    3d04:	603b      	str	r3, [r7, #0]
    3d06:	2301      	movs	r3, #1
    3d08:	64bb      	str	r3, [r7, #72]	; 0x48
    3d0a:	e020      	b.n	3d4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d0e:	f043 0304 	orr.w	r3, r3, #4
    3d12:	657b      	str	r3, [r7, #84]	; 0x54
    3d14:	683b      	ldr	r3, [r7, #0]
    3d16:	3301      	adds	r3, #1
    3d18:	603b      	str	r3, [r7, #0]
    3d1a:	2301      	movs	r3, #1
    3d1c:	64bb      	str	r3, [r7, #72]	; 0x48
    3d1e:	e016      	b.n	3d4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d22:	f043 0308 	orr.w	r3, r3, #8
    3d26:	657b      	str	r3, [r7, #84]	; 0x54
    3d28:	683b      	ldr	r3, [r7, #0]
    3d2a:	3301      	adds	r3, #1
    3d2c:	603b      	str	r3, [r7, #0]
    3d2e:	2301      	movs	r3, #1
    3d30:	64bb      	str	r3, [r7, #72]	; 0x48
    3d32:	e00c      	b.n	3d4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d36:	f043 0310 	orr.w	r3, r3, #16
    3d3a:	657b      	str	r3, [r7, #84]	; 0x54
    3d3c:	683b      	ldr	r3, [r7, #0]
    3d3e:	3301      	adds	r3, #1
    3d40:	603b      	str	r3, [r7, #0]
    3d42:	2301      	movs	r3, #1
    3d44:	64bb      	str	r3, [r7, #72]	; 0x48
    3d46:	e002      	b.n	3d4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    3d48:	2300      	movs	r3, #0
    3d4a:	64bb      	str	r3, [r7, #72]	; 0x48
    3d4c:	bf00      	nop
      }
    } while (n);
    3d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3d50:	2b00      	cmp	r3, #0
    3d52:	d000      	beq.n	3d56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    3d54:	e79c      	b.n	3c90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    3d56:	2300      	movs	r3, #0
    3d58:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    3d5a:	683b      	ldr	r3, [r7, #0]
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	4618      	mov	r0, r3
    3d60:	f7ff fb18 	bl	3394 <_is_digit(char)>
    3d64:	4603      	mov	r3, r0
    3d66:	2b00      	cmp	r3, #0
    3d68:	d005      	beq.n	3d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    3d6a:	463b      	mov	r3, r7
    3d6c:	4618      	mov	r0, r3
    3d6e:	f7ff fb25 	bl	33bc <_atoi(char const**)>
    3d72:	6538      	str	r0, [r7, #80]	; 0x50
    3d74:	e018      	b.n	3da8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    3d76:	683b      	ldr	r3, [r7, #0]
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	2b2a      	cmp	r3, #42	; 0x2a
    3d7c:	d114      	bne.n	3da8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    3d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d80:	1d1a      	adds	r2, r3, #4
    3d82:	66ba      	str	r2, [r7, #104]	; 0x68
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    3d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	da07      	bge.n	3d9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    3d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d90:	f043 0302 	orr.w	r3, r3, #2
    3d94:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    3d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d98:	425b      	negs	r3, r3
    3d9a:	653b      	str	r3, [r7, #80]	; 0x50
    3d9c:	e001      	b.n	3da2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    3d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3da0:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    3da2:	683b      	ldr	r3, [r7, #0]
    3da4:	3301      	adds	r3, #1
    3da6:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    3da8:	2300      	movs	r3, #0
    3daa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    3dac:	683b      	ldr	r3, [r7, #0]
    3dae:	781b      	ldrb	r3, [r3, #0]
    3db0:	2b2e      	cmp	r3, #46	; 0x2e
    3db2:	d124      	bne.n	3dfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    3db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3dba:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    3dbc:	683b      	ldr	r3, [r7, #0]
    3dbe:	3301      	adds	r3, #1
    3dc0:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    3dc2:	683b      	ldr	r3, [r7, #0]
    3dc4:	781b      	ldrb	r3, [r3, #0]
    3dc6:	4618      	mov	r0, r3
    3dc8:	f7ff fae4 	bl	3394 <_is_digit(char)>
    3dcc:	4603      	mov	r3, r0
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d005      	beq.n	3dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    3dd2:	463b      	mov	r3, r7
    3dd4:	4618      	mov	r0, r3
    3dd6:	f7ff faf1 	bl	33bc <_atoi(char const**)>
    3dda:	64f8      	str	r0, [r7, #76]	; 0x4c
    3ddc:	e00f      	b.n	3dfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    3dde:	683b      	ldr	r3, [r7, #0]
    3de0:	781b      	ldrb	r3, [r3, #0]
    3de2:	2b2a      	cmp	r3, #42	; 0x2a
    3de4:	d10b      	bne.n	3dfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    3de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3de8:	1d1a      	adds	r2, r3, #4
    3dea:	66ba      	str	r2, [r7, #104]	; 0x68
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3df2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3df6:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    3df8:	683b      	ldr	r3, [r7, #0]
    3dfa:	3301      	adds	r3, #1
    3dfc:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    3dfe:	683b      	ldr	r3, [r7, #0]
    3e00:	781b      	ldrb	r3, [r3, #0]
    3e02:	3b68      	subs	r3, #104	; 0x68
    3e04:	2b12      	cmp	r3, #18
    3e06:	d867      	bhi.n	3ed8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    3e08:	a201      	add	r2, pc, #4	; (adr r2, 3e10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    3e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3e0e:	bf00      	nop
    3e10:	00003e83 	.word	0x00003e83
    3e14:	00003ed9 	.word	0x00003ed9
    3e18:	00003eb9 	.word	0x00003eb9
    3e1c:	00003ed9 	.word	0x00003ed9
    3e20:	00003e5d 	.word	0x00003e5d
    3e24:	00003ed9 	.word	0x00003ed9
    3e28:	00003ed9 	.word	0x00003ed9
    3e2c:	00003ed9 	.word	0x00003ed9
    3e30:	00003ed9 	.word	0x00003ed9
    3e34:	00003ed9 	.word	0x00003ed9
    3e38:	00003ed9 	.word	0x00003ed9
    3e3c:	00003ed9 	.word	0x00003ed9
    3e40:	00003ea9 	.word	0x00003ea9
    3e44:	00003ed9 	.word	0x00003ed9
    3e48:	00003ed9 	.word	0x00003ed9
    3e4c:	00003ed9 	.word	0x00003ed9
    3e50:	00003ed9 	.word	0x00003ed9
    3e54:	00003ed9 	.word	0x00003ed9
    3e58:	00003ec9 	.word	0x00003ec9
      case 'l' :
        flags |= FLAGS_LONG;
    3e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3e62:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	3301      	adds	r3, #1
    3e68:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    3e6a:	683b      	ldr	r3, [r7, #0]
    3e6c:	781b      	ldrb	r3, [r3, #0]
    3e6e:	2b6c      	cmp	r3, #108	; 0x6c
    3e70:	d134      	bne.n	3edc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    3e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3e78:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3e7a:	683b      	ldr	r3, [r7, #0]
    3e7c:	3301      	adds	r3, #1
    3e7e:	603b      	str	r3, [r7, #0]
        }
        break;
    3e80:	e02c      	b.n	3edc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    3e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3e88:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3e8a:	683b      	ldr	r3, [r7, #0]
    3e8c:	3301      	adds	r3, #1
    3e8e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    3e90:	683b      	ldr	r3, [r7, #0]
    3e92:	781b      	ldrb	r3, [r3, #0]
    3e94:	2b68      	cmp	r3, #104	; 0x68
    3e96:	d125      	bne.n	3ee4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    3e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e9e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3ea0:	683b      	ldr	r3, [r7, #0]
    3ea2:	3301      	adds	r3, #1
    3ea4:	603b      	str	r3, [r7, #0]
        }
        break;
    3ea6:	e01d      	b.n	3ee4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3eae:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3eb0:	683b      	ldr	r3, [r7, #0]
    3eb2:	3301      	adds	r3, #1
    3eb4:	603b      	str	r3, [r7, #0]
        break;
    3eb6:	e016      	b.n	3ee6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3ebe:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3ec0:	683b      	ldr	r3, [r7, #0]
    3ec2:	3301      	adds	r3, #1
    3ec4:	603b      	str	r3, [r7, #0]
        break;
    3ec6:	e00e      	b.n	3ee6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3ece:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3ed0:	683b      	ldr	r3, [r7, #0]
    3ed2:	3301      	adds	r3, #1
    3ed4:	603b      	str	r3, [r7, #0]
        break;
    3ed6:	e006      	b.n	3ee6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    3ed8:	bf00      	nop
    3eda:	e004      	b.n	3ee6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    3edc:	bf00      	nop
    3ede:	e002      	b.n	3ee6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    3ee0:	00003325 	.word	0x00003325
        break;
    3ee4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    3ee6:	683b      	ldr	r3, [r7, #0]
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	3b25      	subs	r3, #37	; 0x25
    3eec:	2b53      	cmp	r3, #83	; 0x53
    3eee:	f200 82ee 	bhi.w	44ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    3ef2:	a201      	add	r2, pc, #4	; (adr r2, 3ef8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    3ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3ef8:	000044b7 	.word	0x000044b7
    3efc:	000044cf 	.word	0x000044cf
    3f00:	000044cf 	.word	0x000044cf
    3f04:	000044cf 	.word	0x000044cf
    3f08:	000044cf 	.word	0x000044cf
    3f0c:	000044cf 	.word	0x000044cf
    3f10:	000044cf 	.word	0x000044cf
    3f14:	000044cf 	.word	0x000044cf
    3f18:	000044cf 	.word	0x000044cf
    3f1c:	000044cf 	.word	0x000044cf
    3f20:	000044cf 	.word	0x000044cf
    3f24:	000044cf 	.word	0x000044cf
    3f28:	000044cf 	.word	0x000044cf
    3f2c:	000044cf 	.word	0x000044cf
    3f30:	000044cf 	.word	0x000044cf
    3f34:	000044cf 	.word	0x000044cf
    3f38:	000044cf 	.word	0x000044cf
    3f3c:	000044cf 	.word	0x000044cf
    3f40:	000044cf 	.word	0x000044cf
    3f44:	000044cf 	.word	0x000044cf
    3f48:	000044cf 	.word	0x000044cf
    3f4c:	000044cf 	.word	0x000044cf
    3f50:	000044cf 	.word	0x000044cf
    3f54:	000044cf 	.word	0x000044cf
    3f58:	000044cf 	.word	0x000044cf
    3f5c:	000044cf 	.word	0x000044cf
    3f60:	000044cf 	.word	0x000044cf
    3f64:	000044cf 	.word	0x000044cf
    3f68:	000044cf 	.word	0x000044cf
    3f6c:	000044cf 	.word	0x000044cf
    3f70:	000044cf 	.word	0x000044cf
    3f74:	000044cf 	.word	0x000044cf
    3f78:	000044cf 	.word	0x000044cf
    3f7c:	000042d5 	.word	0x000042d5
    3f80:	000044cf 	.word	0x000044cf
    3f84:	000044cf 	.word	0x000044cf
    3f88:	000044cf 	.word	0x000044cf
    3f8c:	000044cf 	.word	0x000044cf
    3f90:	000044cf 	.word	0x000044cf
    3f94:	000044cf 	.word	0x000044cf
    3f98:	000044cf 	.word	0x000044cf
    3f9c:	000044cf 	.word	0x000044cf
    3fa0:	000044cf 	.word	0x000044cf
    3fa4:	000044cf 	.word	0x000044cf
    3fa8:	000044cf 	.word	0x000044cf
    3fac:	000044cf 	.word	0x000044cf
    3fb0:	000044cf 	.word	0x000044cf
    3fb4:	000044cf 	.word	0x000044cf
    3fb8:	000044cf 	.word	0x000044cf
    3fbc:	000044cf 	.word	0x000044cf
    3fc0:	000044cf 	.word	0x000044cf
    3fc4:	00004049 	.word	0x00004049
    3fc8:	000044cf 	.word	0x000044cf
    3fcc:	000044cf 	.word	0x000044cf
    3fd0:	000044cf 	.word	0x000044cf
    3fd4:	000044cf 	.word	0x000044cf
    3fd8:	000044cf 	.word	0x000044cf
    3fdc:	000044cf 	.word	0x000044cf
    3fe0:	000044cf 	.word	0x000044cf
    3fe4:	000044cf 	.word	0x000044cf
    3fe8:	000044cf 	.word	0x000044cf
    3fec:	00004049 	.word	0x00004049
    3ff0:	00004311 	.word	0x00004311
    3ff4:	00004049 	.word	0x00004049
    3ff8:	000044cf 	.word	0x000044cf
    3ffc:	000042d5 	.word	0x000042d5
    4000:	000044cf 	.word	0x000044cf
    4004:	000044cf 	.word	0x000044cf
    4008:	00004049 	.word	0x00004049
    400c:	000044cf 	.word	0x000044cf
    4010:	000044cf 	.word	0x000044cf
    4014:	000044cf 	.word	0x000044cf
    4018:	000044cf 	.word	0x000044cf
    401c:	000044cf 	.word	0x000044cf
    4020:	00004049 	.word	0x00004049
    4024:	0000446f 	.word	0x0000446f
    4028:	000044cf 	.word	0x000044cf
    402c:	000044cf 	.word	0x000044cf
    4030:	00004399 	.word	0x00004399
    4034:	000044cf 	.word	0x000044cf
    4038:	00004049 	.word	0x00004049
    403c:	000044cf 	.word	0x000044cf
    4040:	000044cf 	.word	0x000044cf
    4044:	00004049 	.word	0x00004049
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    4048:	683b      	ldr	r3, [r7, #0]
    404a:	781b      	ldrb	r3, [r3, #0]
    404c:	2b78      	cmp	r3, #120	; 0x78
    404e:	d003      	beq.n	4058 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    4050:	683b      	ldr	r3, [r7, #0]
    4052:	781b      	ldrb	r3, [r3, #0]
    4054:	2b58      	cmp	r3, #88	; 0x58
    4056:	d102      	bne.n	405e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    4058:	2310      	movs	r3, #16
    405a:	643b      	str	r3, [r7, #64]	; 0x40
    405c:	e013      	b.n	4086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    405e:	683b      	ldr	r3, [r7, #0]
    4060:	781b      	ldrb	r3, [r3, #0]
    4062:	2b6f      	cmp	r3, #111	; 0x6f
    4064:	d102      	bne.n	406c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    4066:	2308      	movs	r3, #8
    4068:	643b      	str	r3, [r7, #64]	; 0x40
    406a:	e00c      	b.n	4086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    406c:	683b      	ldr	r3, [r7, #0]
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	2b62      	cmp	r3, #98	; 0x62
    4072:	d102      	bne.n	407a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    4074:	2302      	movs	r3, #2
    4076:	643b      	str	r3, [r7, #64]	; 0x40
    4078:	e005      	b.n	4086 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    407a:	230a      	movs	r3, #10
    407c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4080:	f023 0310 	bic.w	r3, r3, #16
    4084:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    4086:	683b      	ldr	r3, [r7, #0]
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	2b58      	cmp	r3, #88	; 0x58
    408c:	d103      	bne.n	4096 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    408e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4090:	f043 0320 	orr.w	r3, r3, #32
    4094:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    4096:	683b      	ldr	r3, [r7, #0]
    4098:	781b      	ldrb	r3, [r3, #0]
    409a:	2b69      	cmp	r3, #105	; 0x69
    409c:	d007      	beq.n	40ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    409e:	683b      	ldr	r3, [r7, #0]
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	2b64      	cmp	r3, #100	; 0x64
    40a4:	d003      	beq.n	40ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    40a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40a8:	f023 030c 	bic.w	r3, r3, #12
    40ac:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    40ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    40b4:	2b00      	cmp	r3, #0
    40b6:	d003      	beq.n	40c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    40b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40ba:	f023 0301 	bic.w	r3, r3, #1
    40be:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    40c0:	683b      	ldr	r3, [r7, #0]
    40c2:	781b      	ldrb	r3, [r3, #0]
    40c4:	2b69      	cmp	r3, #105	; 0x69
    40c6:	d004      	beq.n	40d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    40c8:	683b      	ldr	r3, [r7, #0]
    40ca:	781b      	ldrb	r3, [r3, #0]
    40cc:	2b64      	cmp	r3, #100	; 0x64
    40ce:	f040 808d 	bne.w	41ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    40d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    40d8:	2b00      	cmp	r3, #0
    40da:	d02e      	beq.n	413a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    40dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    40de:	3307      	adds	r3, #7
    40e0:	f023 0307 	bic.w	r3, r3, #7
    40e4:	f103 0208 	add.w	r2, r3, #8
    40e8:	66ba      	str	r2, [r7, #104]	; 0x68
    40ea:	e9d3 3400 	ldrd	r3, r4, [r3]
    40ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    40f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    40f6:	2b00      	cmp	r3, #0
    40f8:	f174 0200 	sbcs.w	r2, r4, #0
    40fc:	da02      	bge.n	4104 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    40fe:	425b      	negs	r3, r3
    4100:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    4104:	4619      	mov	r1, r3
    4106:	4622      	mov	r2, r4
    4108:	697b      	ldr	r3, [r7, #20]
    410a:	0fdb      	lsrs	r3, r3, #31
    410c:	b2d8      	uxtb	r0, r3
    410e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4110:	f04f 0400 	mov.w	r4, #0
    4114:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    4116:	9508      	str	r5, [sp, #32]
    4118:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    411a:	9507      	str	r5, [sp, #28]
    411c:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    411e:	9506      	str	r5, [sp, #24]
    4120:	e9cd 3404 	strd	r3, r4, [sp, #16]
    4124:	9002      	str	r0, [sp, #8]
    4126:	e9cd 1200 	strd	r1, r2, [sp]
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    412e:	68b9      	ldr	r1, [r7, #8]
    4130:	68f8      	ldr	r0, [r7, #12]
    4132:	f7ff faf0 	bl	3716 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4136:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    4138:	e0c8      	b.n	42cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    413a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4140:	2b00      	cmp	r3, #0
    4142:	d01e      	beq.n	4182 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    4144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4146:	1d1a      	adds	r2, r3, #4
    4148:	66ba      	str	r2, [r7, #104]	; 0x68
    414a:	681b      	ldr	r3, [r3, #0]
    414c:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    414e:	69fb      	ldr	r3, [r7, #28]
    4150:	2b00      	cmp	r3, #0
    4152:	bfb8      	it	lt
    4154:	425b      	neglt	r3, r3
    4156:	4619      	mov	r1, r3
    4158:	69fb      	ldr	r3, [r7, #28]
    415a:	0fdb      	lsrs	r3, r3, #31
    415c:	b2db      	uxtb	r3, r3
    415e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4160:	9205      	str	r2, [sp, #20]
    4162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4164:	9204      	str	r2, [sp, #16]
    4166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4168:	9203      	str	r2, [sp, #12]
    416a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    416c:	9202      	str	r2, [sp, #8]
    416e:	9301      	str	r3, [sp, #4]
    4170:	9100      	str	r1, [sp, #0]
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4176:	68b9      	ldr	r1, [r7, #8]
    4178:	68f8      	ldr	r0, [r7, #12]
    417a:	f7ff fa64 	bl	3646 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    417e:	6478      	str	r0, [r7, #68]	; 0x44
          }
    4180:	e0a4      	b.n	42cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    4182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4184:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4188:	2b00      	cmp	r3, #0
    418a:	d005      	beq.n	4198 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    418c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    418e:	1d1a      	adds	r2, r3, #4
    4190:	66ba      	str	r2, [r7, #104]	; 0x68
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	b2db      	uxtb	r3, r3
    4196:	e00e      	b.n	41b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    4198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    419e:	2b00      	cmp	r3, #0
    41a0:	d005      	beq.n	41ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    41a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    41a4:	1d1a      	adds	r2, r3, #4
    41a6:	66ba      	str	r2, [r7, #104]	; 0x68
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	b21b      	sxth	r3, r3
    41ac:	e003      	b.n	41b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    41ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    41b0:	1d1a      	adds	r2, r3, #4
    41b2:	66ba      	str	r2, [r7, #104]	; 0x68
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    41b8:	6a3b      	ldr	r3, [r7, #32]
    41ba:	2b00      	cmp	r3, #0
    41bc:	bfb8      	it	lt
    41be:	425b      	neglt	r3, r3
    41c0:	4619      	mov	r1, r3
    41c2:	6a3b      	ldr	r3, [r7, #32]
    41c4:	0fdb      	lsrs	r3, r3, #31
    41c6:	b2db      	uxtb	r3, r3
    41c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    41ca:	9205      	str	r2, [sp, #20]
    41cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    41ce:	9204      	str	r2, [sp, #16]
    41d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    41d2:	9203      	str	r2, [sp, #12]
    41d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    41d6:	9202      	str	r2, [sp, #8]
    41d8:	9301      	str	r3, [sp, #4]
    41da:	9100      	str	r1, [sp, #0]
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    41e0:	68b9      	ldr	r1, [r7, #8]
    41e2:	68f8      	ldr	r0, [r7, #12]
    41e4:	f7ff fa2f 	bl	3646 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    41e8:	6478      	str	r0, [r7, #68]	; 0x44
          }
    41ea:	e06f      	b.n	42cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    41ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    41ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
    41f2:	2b00      	cmp	r3, #0
    41f4:	d020      	beq.n	4238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    41f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    41f8:	3307      	adds	r3, #7
    41fa:	f023 0307 	bic.w	r3, r3, #7
    41fe:	f103 0208 	add.w	r2, r3, #8
    4202:	66ba      	str	r2, [r7, #104]	; 0x68
    4204:	e9d3 3400 	ldrd	r3, r4, [r3]
    4208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    420a:	4611      	mov	r1, r2
    420c:	f04f 0200 	mov.w	r2, #0
    4210:	6d78      	ldr	r0, [r7, #84]	; 0x54
    4212:	9008      	str	r0, [sp, #32]
    4214:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4216:	9007      	str	r0, [sp, #28]
    4218:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    421a:	9006      	str	r0, [sp, #24]
    421c:	e9cd 1204 	strd	r1, r2, [sp, #16]
    4220:	2200      	movs	r2, #0
    4222:	9202      	str	r2, [sp, #8]
    4224:	e9cd 3400 	strd	r3, r4, [sp]
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    422c:	68b9      	ldr	r1, [r7, #8]
    422e:	68f8      	ldr	r0, [r7, #12]
    4230:	f7ff fa71 	bl	3716 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4234:	6478      	str	r0, [r7, #68]	; 0x44
    4236:	e049      	b.n	42cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    4238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    423e:	2b00      	cmp	r3, #0
    4240:	d016      	beq.n	4270 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    4242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4244:	1d1a      	adds	r2, r3, #4
    4246:	66ba      	str	r2, [r7, #104]	; 0x68
    4248:	681b      	ldr	r3, [r3, #0]
    424a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    424c:	9205      	str	r2, [sp, #20]
    424e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4250:	9204      	str	r2, [sp, #16]
    4252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4254:	9203      	str	r2, [sp, #12]
    4256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4258:	9202      	str	r2, [sp, #8]
    425a:	2200      	movs	r2, #0
    425c:	9201      	str	r2, [sp, #4]
    425e:	9300      	str	r3, [sp, #0]
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4264:	68b9      	ldr	r1, [r7, #8]
    4266:	68f8      	ldr	r0, [r7, #12]
    4268:	f7ff f9ed 	bl	3646 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    426c:	6478      	str	r0, [r7, #68]	; 0x44
    426e:	e02d      	b.n	42cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    4270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4272:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4276:	2b00      	cmp	r3, #0
    4278:	d005      	beq.n	4286 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    427a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    427c:	1d1a      	adds	r2, r3, #4
    427e:	66ba      	str	r2, [r7, #104]	; 0x68
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	b2db      	uxtb	r3, r3
    4284:	e00e      	b.n	42a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    4286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4288:	f003 0380 	and.w	r3, r3, #128	; 0x80
    428c:	2b00      	cmp	r3, #0
    428e:	d005      	beq.n	429c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    4290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4292:	1d1a      	adds	r2, r3, #4
    4294:	66ba      	str	r2, [r7, #104]	; 0x68
    4296:	681b      	ldr	r3, [r3, #0]
    4298:	b29b      	uxth	r3, r3
    429a:	e003      	b.n	42a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    429c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    429e:	1d1a      	adds	r2, r3, #4
    42a0:	66ba      	str	r2, [r7, #104]	; 0x68
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    42a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42a8:	9305      	str	r3, [sp, #20]
    42aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    42ac:	9304      	str	r3, [sp, #16]
    42ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    42b0:	9303      	str	r3, [sp, #12]
    42b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42b4:	9302      	str	r3, [sp, #8]
    42b6:	2300      	movs	r3, #0
    42b8:	9301      	str	r3, [sp, #4]
    42ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42bc:	9300      	str	r3, [sp, #0]
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    42c2:	68b9      	ldr	r1, [r7, #8]
    42c4:	68f8      	ldr	r0, [r7, #12]
    42c6:	f7ff f9be 	bl	3646 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    42ca:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    42cc:	683b      	ldr	r3, [r7, #0]
    42ce:	3301      	adds	r3, #1
    42d0:	603b      	str	r3, [r7, #0]
        break;
    42d2:	e109      	b.n	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    42d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    42d6:	3307      	adds	r3, #7
    42d8:	f023 0307 	bic.w	r3, r3, #7
    42dc:	f103 0208 	add.w	r2, r3, #8
    42e0:	66ba      	str	r2, [r7, #104]	; 0x68
    42e2:	ed93 7b00 	vldr	d7, [r3]
    42e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42e8:	9302      	str	r3, [sp, #8]
    42ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    42ec:	9301      	str	r3, [sp, #4]
    42ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    42f0:	9300      	str	r3, [sp, #0]
    42f2:	eeb0 0a47 	vmov.f32	s0, s14
    42f6:	eef0 0a67 	vmov.f32	s1, s15
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    42fe:	68b9      	ldr	r1, [r7, #8]
    4300:	68f8      	ldr	r0, [r7, #12]
    4302:	f7ff fa79 	bl	37f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    4306:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    4308:	683b      	ldr	r3, [r7, #0]
    430a:	3301      	adds	r3, #1
    430c:	603b      	str	r3, [r7, #0]
        break;
    430e:	e0eb      	b.n	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    4310:	2301      	movs	r3, #1
    4312:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    4314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4316:	f003 0302 	and.w	r3, r3, #2
    431a:	2b00      	cmp	r3, #0
    431c:	d113      	bne.n	4346 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4320:	1c5a      	adds	r2, r3, #1
    4322:	63fa      	str	r2, [r7, #60]	; 0x3c
    4324:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4326:	429a      	cmp	r2, r3
    4328:	bf8c      	ite	hi
    432a:	2301      	movhi	r3, #1
    432c:	2300      	movls	r3, #0
    432e:	b2db      	uxtb	r3, r3
    4330:	2b00      	cmp	r3, #0
    4332:	d008      	beq.n	4346 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    4334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4336:	1c53      	adds	r3, r2, #1
    4338:	647b      	str	r3, [r7, #68]	; 0x44
    433a:	68fc      	ldr	r4, [r7, #12]
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	68b9      	ldr	r1, [r7, #8]
    4340:	2020      	movs	r0, #32
    4342:	47a0      	blx	r4
          while (l++ < width) {
    4344:	e7eb      	b.n	431e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4348:	1d1a      	adds	r2, r3, #4
    434a:	66ba      	str	r2, [r7, #104]	; 0x68
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	b2d8      	uxtb	r0, r3
    4350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4352:	1c53      	adds	r3, r2, #1
    4354:	647b      	str	r3, [r7, #68]	; 0x44
    4356:	68fc      	ldr	r4, [r7, #12]
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	68b9      	ldr	r1, [r7, #8]
    435c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    435e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4360:	f003 0302 	and.w	r3, r3, #2
    4364:	2b00      	cmp	r3, #0
    4366:	d013      	beq.n	4390 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    4368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    436a:	1c5a      	adds	r2, r3, #1
    436c:	63fa      	str	r2, [r7, #60]	; 0x3c
    436e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4370:	429a      	cmp	r2, r3
    4372:	bf8c      	ite	hi
    4374:	2301      	movhi	r3, #1
    4376:	2300      	movls	r3, #0
    4378:	b2db      	uxtb	r3, r3
    437a:	2b00      	cmp	r3, #0
    437c:	d008      	beq.n	4390 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    437e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4380:	1c53      	adds	r3, r2, #1
    4382:	647b      	str	r3, [r7, #68]	; 0x44
    4384:	68fc      	ldr	r4, [r7, #12]
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	68b9      	ldr	r1, [r7, #8]
    438a:	2020      	movs	r0, #32
    438c:	47a0      	blx	r4
          while (l++ < width) {
    438e:	e7eb      	b.n	4368 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    4390:	683b      	ldr	r3, [r7, #0]
    4392:	3301      	adds	r3, #1
    4394:	603b      	str	r3, [r7, #0]
        break;
    4396:	e0a7      	b.n	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    4398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    439a:	1d1a      	adds	r2, r3, #4
    439c:	66ba      	str	r2, [r7, #104]	; 0x68
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    43a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    43a4:	f7fe ffdf 	bl	3366 <_strlen(char const*)>
    43a8:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    43aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    43ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    43b0:	2b00      	cmp	r3, #0
    43b2:	d007      	beq.n	43c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    43b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    43b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    43b8:	429a      	cmp	r2, r3
    43ba:	d201      	bcs.n	43c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    43bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43be:	e000      	b.n	43c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    43c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    43c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    43c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    43c6:	f003 0302 	and.w	r3, r3, #2
    43ca:	2b00      	cmp	r3, #0
    43cc:	d113      	bne.n	43f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    43ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43d0:	1c5a      	adds	r2, r3, #1
    43d2:	637a      	str	r2, [r7, #52]	; 0x34
    43d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    43d6:	429a      	cmp	r2, r3
    43d8:	bf8c      	ite	hi
    43da:	2301      	movhi	r3, #1
    43dc:	2300      	movls	r3, #0
    43de:	b2db      	uxtb	r3, r3
    43e0:	2b00      	cmp	r3, #0
    43e2:	d008      	beq.n	43f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    43e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    43e6:	1c53      	adds	r3, r2, #1
    43e8:	647b      	str	r3, [r7, #68]	; 0x44
    43ea:	68fc      	ldr	r4, [r7, #12]
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	68b9      	ldr	r1, [r7, #8]
    43f0:	2020      	movs	r0, #32
    43f2:	47a0      	blx	r4
          while (l++ < width) {
    43f4:	e7eb      	b.n	43ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    43f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43f8:	781b      	ldrb	r3, [r3, #0]
    43fa:	2b00      	cmp	r3, #0
    43fc:	d00b      	beq.n	4416 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    43fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4404:	2b00      	cmp	r3, #0
    4406:	d004      	beq.n	4412 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    4408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    440a:	1e5a      	subs	r2, r3, #1
    440c:	64fa      	str	r2, [r7, #76]	; 0x4c
    440e:	2b00      	cmp	r3, #0
    4410:	d001      	beq.n	4416 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    4412:	2301      	movs	r3, #1
    4414:	e000      	b.n	4418 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    4416:	2300      	movs	r3, #0
    4418:	2b00      	cmp	r3, #0
    441a:	d00b      	beq.n	4434 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    441e:	1c5a      	adds	r2, r3, #1
    4420:	63ba      	str	r2, [r7, #56]	; 0x38
    4422:	7818      	ldrb	r0, [r3, #0]
    4424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4426:	1c53      	adds	r3, r2, #1
    4428:	647b      	str	r3, [r7, #68]	; 0x44
    442a:	68fc      	ldr	r4, [r7, #12]
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	68b9      	ldr	r1, [r7, #8]
    4430:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4432:	e7e0      	b.n	43f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    4434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4436:	f003 0302 	and.w	r3, r3, #2
    443a:	2b00      	cmp	r3, #0
    443c:	d013      	beq.n	4466 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4440:	1c5a      	adds	r2, r3, #1
    4442:	637a      	str	r2, [r7, #52]	; 0x34
    4444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4446:	429a      	cmp	r2, r3
    4448:	bf8c      	ite	hi
    444a:	2301      	movhi	r3, #1
    444c:	2300      	movls	r3, #0
    444e:	b2db      	uxtb	r3, r3
    4450:	2b00      	cmp	r3, #0
    4452:	d008      	beq.n	4466 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    4454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4456:	1c53      	adds	r3, r2, #1
    4458:	647b      	str	r3, [r7, #68]	; 0x44
    445a:	68fc      	ldr	r4, [r7, #12]
    445c:	687b      	ldr	r3, [r7, #4]
    445e:	68b9      	ldr	r1, [r7, #8]
    4460:	2020      	movs	r0, #32
    4462:	47a0      	blx	r4
          while (l++ < width) {
    4464:	e7eb      	b.n	443e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	3301      	adds	r3, #1
    446a:	603b      	str	r3, [r7, #0]
        break;
    446c:	e03c      	b.n	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    446e:	2308      	movs	r3, #8
    4470:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4474:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    4478:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    447a:	2300      	movs	r3, #0
    447c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4482:	1d1a      	adds	r2, r3, #4
    4484:	66ba      	str	r2, [r7, #104]	; 0x68
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	461a      	mov	r2, r3
    448a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    448c:	9305      	str	r3, [sp, #20]
    448e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4490:	9304      	str	r3, [sp, #16]
    4492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4494:	9303      	str	r3, [sp, #12]
    4496:	2310      	movs	r3, #16
    4498:	9302      	str	r3, [sp, #8]
    449a:	2300      	movs	r3, #0
    449c:	9301      	str	r3, [sp, #4]
    449e:	9200      	str	r2, [sp, #0]
    44a0:	687b      	ldr	r3, [r7, #4]
    44a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44a4:	68b9      	ldr	r1, [r7, #8]
    44a6:	68f8      	ldr	r0, [r7, #12]
    44a8:	f7ff f8cd 	bl	3646 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    44ac:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    44ae:	683b      	ldr	r3, [r7, #0]
    44b0:	3301      	adds	r3, #1
    44b2:	603b      	str	r3, [r7, #0]
        break;
    44b4:	e018      	b.n	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    44b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44b8:	1c53      	adds	r3, r2, #1
    44ba:	647b      	str	r3, [r7, #68]	; 0x44
    44bc:	68fc      	ldr	r4, [r7, #12]
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	68b9      	ldr	r1, [r7, #8]
    44c2:	2025      	movs	r0, #37	; 0x25
    44c4:	47a0      	blx	r4
        format++;
    44c6:	683b      	ldr	r3, [r7, #0]
    44c8:	3301      	adds	r3, #1
    44ca:	603b      	str	r3, [r7, #0]
        break;
    44cc:	e00c      	b.n	44e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    44ce:	683b      	ldr	r3, [r7, #0]
    44d0:	7818      	ldrb	r0, [r3, #0]
    44d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44d4:	1c53      	adds	r3, r2, #1
    44d6:	647b      	str	r3, [r7, #68]	; 0x44
    44d8:	68fc      	ldr	r4, [r7, #12]
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	68b9      	ldr	r1, [r7, #8]
    44de:	47a0      	blx	r4
        format++;
    44e0:	683b      	ldr	r3, [r7, #0]
    44e2:	3301      	adds	r3, #1
    44e4:	603b      	str	r3, [r7, #0]
        break;
    44e6:	bf00      	nop
  while (*format)
    44e8:	f7ff bbb6 	b.w	3c58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    44ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	429a      	cmp	r2, r3
    44f2:	d302      	bcc.n	44fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	1e5a      	subs	r2, r3, #1
    44f8:	e000      	b.n	44fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    44fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44fc:	68fc      	ldr	r4, [r7, #12]
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	68b9      	ldr	r1, [r7, #8]
    4502:	2000      	movs	r0, #0
    4504:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    4506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    4508:	4618      	mov	r0, r3
    450a:	3758      	adds	r7, #88	; 0x58
    450c:	46bd      	mov	sp, r7
    450e:	bdb0      	pop	{r4, r5, r7, pc}

00004510 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    4510:	b40f      	push	{r0, r1, r2, r3}
    4512:	b580      	push	{r7, lr}
    4514:	b086      	sub	sp, #24
    4516:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    4518:	f107 031c 	add.w	r3, r7, #28
    451c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    451e:	1d39      	adds	r1, r7, #4
    4520:	68bb      	ldr	r3, [r7, #8]
    4522:	9300      	str	r3, [sp, #0]
    4524:	69bb      	ldr	r3, [r7, #24]
    4526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    452a:	4806      	ldr	r0, [pc, #24]	; (4544 <printf+0x34>)
    452c:	f7ff fb86 	bl	3c3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4530:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    4532:	68fb      	ldr	r3, [r7, #12]
}
    4534:	4618      	mov	r0, r3
    4536:	3710      	adds	r7, #16
    4538:	46bd      	mov	sp, r7
    453a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    453e:	b004      	add	sp, #16
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	00003341 	.word	0x00003341

00004548 <NVIC_EnableIRQ>:
{
    4548:	b480      	push	{r7}
    454a:	b083      	sub	sp, #12
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	f003 021f 	and.w	r2, r3, #31
    4556:	4907      	ldr	r1, [pc, #28]	; (4574 <NVIC_EnableIRQ+0x2c>)
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	095b      	lsrs	r3, r3, #5
    455c:	2001      	movs	r0, #1
    455e:	fa00 f202 	lsl.w	r2, r0, r2
    4562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4566:	bf00      	nop
    4568:	370c      	adds	r7, #12
    456a:	46bd      	mov	sp, r7
    456c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4570:	4770      	bx	lr
    4572:	bf00      	nop
    4574:	e000e100 	.word	0xe000e100

00004578 <NVIC_DisableIRQ>:
{
    4578:	b480      	push	{r7}
    457a:	b083      	sub	sp, #12
    457c:	af00      	add	r7, sp, #0
    457e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	f003 021f 	and.w	r2, r3, #31
    4586:	4907      	ldr	r1, [pc, #28]	; (45a4 <NVIC_DisableIRQ+0x2c>)
    4588:	687b      	ldr	r3, [r7, #4]
    458a:	095b      	lsrs	r3, r3, #5
    458c:	2001      	movs	r0, #1
    458e:	fa00 f202 	lsl.w	r2, r0, r2
    4592:	3320      	adds	r3, #32
    4594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4598:	bf00      	nop
    459a:	370c      	adds	r7, #12
    459c:	46bd      	mov	sp, r7
    459e:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a2:	4770      	bx	lr
    45a4:	e000e100 	.word	0xe000e100

000045a8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    45a8:	b480      	push	{r7}
    45aa:	b083      	sub	sp, #12
    45ac:	af00      	add	r7, sp, #0
    45ae:	6078      	str	r0, [r7, #4]
    45b0:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	2b00      	cmp	r3, #0
    45b6:	da0b      	bge.n	45d0 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45b8:	683b      	ldr	r3, [r7, #0]
    45ba:	b2da      	uxtb	r2, r3
    45bc:	490d      	ldr	r1, [pc, #52]	; (45f4 <NVIC_SetPriority+0x4c>)
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	f003 030f 	and.w	r3, r3, #15
    45c4:	3b04      	subs	r3, #4
    45c6:	0152      	lsls	r2, r2, #5
    45c8:	b2d2      	uxtb	r2, r2
    45ca:	440b      	add	r3, r1
    45cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    45ce:	e00a      	b.n	45e6 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45d0:	683b      	ldr	r3, [r7, #0]
    45d2:	b2db      	uxtb	r3, r3
    45d4:	4a08      	ldr	r2, [pc, #32]	; (45f8 <NVIC_SetPriority+0x50>)
    45d6:	6879      	ldr	r1, [r7, #4]
    45d8:	4608      	mov	r0, r1
    45da:	015b      	lsls	r3, r3, #5
    45dc:	b2d9      	uxtb	r1, r3
    45de:	1813      	adds	r3, r2, r0
    45e0:	460a      	mov	r2, r1
    45e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    45e6:	bf00      	nop
    45e8:	370c      	adds	r7, #12
    45ea:	46bd      	mov	sp, r7
    45ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f0:	4770      	bx	lr
    45f2:	bf00      	nop
    45f4:	e000ed00 	.word	0xe000ed00
    45f8:	e000e100 	.word	0xe000e100

000045fc <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    45fc:	b480      	push	{r7}
    45fe:	b083      	sub	sp, #12
    4600:	af00      	add	r7, sp, #0
    4602:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    4604:	4b0c      	ldr	r3, [pc, #48]	; (4638 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	68da      	ldr	r2, [r3, #12]
    460a:	4b0b      	ldr	r3, [pc, #44]	; (4638 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4612:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    4614:	4b09      	ldr	r3, [pc, #36]	; (463c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	2200      	movs	r2, #0
    461a:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    461c:	4b07      	ldr	r3, [pc, #28]	; (463c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    461e:	681b      	ldr	r3, [r3, #0]
    4620:	681a      	ldr	r2, [r3, #0]
    4622:	4b06      	ldr	r3, [pc, #24]	; (463c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	f042 0201 	orr.w	r2, r2, #1
    462a:	601a      	str	r2, [r3, #0]
  }
    462c:	bf00      	nop
    462e:	370c      	adds	r7, #12
    4630:	46bd      	mov	sp, r7
    4632:	f85d 7b04 	ldr.w	r7, [sp], #4
    4636:	4770      	bx	lr
    4638:	10000068 	.word	0x10000068
    463c:	10000064 	.word	0x10000064

00004640 <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    4640:	b480      	push	{r7}
    4642:	b083      	sub	sp, #12
    4644:	af00      	add	r7, sp, #0
    4646:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    4648:	4b04      	ldr	r3, [pc, #16]	; (465c <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	685b      	ldr	r3, [r3, #4]
  }
    464e:	4618      	mov	r0, r3
    4650:	370c      	adds	r7, #12
    4652:	46bd      	mov	sp, r7
    4654:	f85d 7b04 	ldr.w	r7, [sp], #4
    4658:	4770      	bx	lr
    465a:	bf00      	nop
    465c:	10000064 	.word	0x10000064

00004660 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    4660:	b480      	push	{r7}
    4662:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    4664:	f8df 001c 	ldr.w	r0, [pc, #28]	; 4684 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    4668:	6801      	ldr	r1, [r0, #0]
    466a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    466e:	6001      	str	r1, [r0, #0]
    4670:	f3bf 8f4f 	dsb	sy
    4674:	f3bf 8f6f 	isb	sy
  }
}
    4678:	bf00      	nop
    467a:	46bd      	mov	sp, r7
    467c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4680:	4770      	bx	lr
    4682:	0000      	.short	0x0000
    4684:	e000ed88 	.word	0xe000ed88

00004688 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4688:	b580      	push	{r7, lr}
    468a:	b086      	sub	sp, #24
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4690:	6878      	ldr	r0, [r7, #4]
    4692:	f000 f807 	bl	46a4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4696:	eef0 7a40 	vmov.f32	s15, s0
	}
    469a:	eeb0 0a67 	vmov.f32	s0, s15
    469e:	3718      	adds	r7, #24
    46a0:	46bd      	mov	sp, r7
    46a2:	bd80      	pop	{r7, pc}

000046a4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    46a4:	b480      	push	{r7}
    46a6:	b085      	sub	sp, #20
    46a8:	af00      	add	r7, sp, #0
    46aa:	60f8      	str	r0, [r7, #12]
    46ac:	7239      	strb	r1, [r7, #8]
    46ae:	713a      	strb	r2, [r7, #4]
    46b0:	703b      	strb	r3, [r7, #0]
			return value;
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	681b      	ldr	r3, [r3, #0]
    46b6:	ee07 3a90 	vmov	s15, r3
		}
    46ba:	eeb0 0a67 	vmov.f32	s0, s15
    46be:	3714      	adds	r7, #20
    46c0:	46bd      	mov	sp, r7
    46c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c6:	4770      	bx	lr

000046c8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    46c8:	b580      	push	{r7, lr}
    46ca:	ed2d 8b02 	vpush	{d8}
    46ce:	b082      	sub	sp, #8
    46d0:	af00      	add	r7, sp, #0
    46d2:	6078      	str	r0, [r7, #4]
    46d4:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	ed93 8a00 	vldr	s16, [r3]
    46dc:	683b      	ldr	r3, [r7, #0]
    46de:	4618      	mov	r0, r3
    46e0:	f7ff ffd2 	bl	4688 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    46e4:	eef0 7a40 	vmov.f32	s15, s0
    46e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
    46ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46f0:	bf94      	ite	ls
    46f2:	2301      	movls	r3, #1
    46f4:	2300      	movhi	r3, #0
    46f6:	b2db      	uxtb	r3, r3
		}
    46f8:	4618      	mov	r0, r3
    46fa:	3708      	adds	r7, #8
    46fc:	46bd      	mov	sp, r7
    46fe:	ecbd 8b02 	vpop	{d8}
    4702:	bd80      	pop	{r7, pc}

00004704 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    4704:	b480      	push	{r7}
    4706:	b083      	sub	sp, #12
    4708:	af00      	add	r7, sp, #0
    470a:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    470c:	4a04      	ldr	r2, [pc, #16]	; (4720 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    470e:	687b      	ldr	r3, [r7, #4]
    4710:	6013      	str	r3, [r2, #0]
}
    4712:	bf00      	nop
    4714:	370c      	adds	r7, #12
    4716:	46bd      	mov	sp, r7
    4718:	f85d 7b04 	ldr.w	r7, [sp], #4
    471c:	4770      	bx	lr
    471e:	bf00      	nop
    4720:	10000000 	.word	0x10000000

00004724 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    4724:	b480      	push	{r7}
    4726:	b083      	sub	sp, #12
    4728:	af00      	add	r7, sp, #0
    472a:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	3310      	adds	r3, #16
  }
    4730:	4618      	mov	r0, r3
    4732:	370c      	adds	r7, #12
    4734:	46bd      	mov	sp, r7
    4736:	f85d 7b04 	ldr.w	r7, [sp], #4
    473a:	4770      	bx	lr

0000473c <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    473c:	b580      	push	{r7, lr}
    473e:	b082      	sub	sp, #8
    4740:	af00      	add	r7, sp, #0
    4742:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    4744:	6878      	ldr	r0, [r7, #4]
    4746:	f7ff ffed 	bl	4724 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    474a:	4603      	mov	r3, r0
    474c:	009b      	lsls	r3, r3, #2
    474e:	4a03      	ldr	r2, [pc, #12]	; (475c <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    4750:	4413      	add	r3, r2
  }
    4752:	4618      	mov	r0, r3
    4754:	3708      	adds	r7, #8
    4756:	46bd      	mov	sp, r7
    4758:	bd80      	pop	{r7, pc}
    475a:	bf00      	nop
    475c:	10000120 	.word	0x10000120

00004760 <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    4760:	b580      	push	{r7, lr}
    4762:	b082      	sub	sp, #8
    4764:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    4766:	4b09      	ldr	r3, [pc, #36]	; (478c <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    4768:	681b      	ldr	r3, [r3, #0]
    476a:	685b      	ldr	r3, [r3, #4]
    476c:	b2db      	uxtb	r3, r3
    476e:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    4770:	4a07      	ldr	r2, [pc, #28]	; (4790 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    4776:	4a07      	ldr	r2, [pc, #28]	; (4794 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    477e:	603b      	str	r3, [r7, #0]
    isr();
    4780:	683b      	ldr	r3, [r7, #0]
    4782:	4798      	blx	r3
  }
    4784:	bf00      	nop
    4786:	3708      	adds	r7, #8
    4788:	46bd      	mov	sp, r7
    478a:	bd80      	pop	{r7, pc}
    478c:	1000006c 	.word	0x1000006c
    4790:	10000048 	.word	0x10000048
    4794:	10000120 	.word	0x10000120

00004798 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    4798:	b084      	sub	sp, #16
    479a:	b590      	push	{r4, r7, lr}
    479c:	b085      	sub	sp, #20
    479e:	af00      	add	r7, sp, #0
    47a0:	6078      	str	r0, [r7, #4]
    47a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
    47a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    47aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47ac:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    47ae:	6abc      	ldr	r4, [r7, #40]	; 0x28
    47b0:	68f8      	ldr	r0, [r7, #12]
    47b2:	f7ff ffc3 	bl	473c <sjsu::cortex::InterruptController::GetVector(int)>
    47b6:	4603      	mov	r3, r0
    47b8:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    47ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    47be:	2b00      	cmp	r3, #0
    47c0:	d005      	beq.n	47ce <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2b00      	cmp	r3, #0
    47c6:	db02      	blt.n	47ce <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    47c8:	68f8      	ldr	r0, [r7, #12]
    47ca:	f7ff febd 	bl	4548 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    47ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    47d0:	2b00      	cmp	r3, #0
    47d2:	db04      	blt.n	47de <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    47d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    47d6:	4619      	mov	r1, r3
    47d8:	68f8      	ldr	r0, [r7, #12]
    47da:	f7ff fee5 	bl	45a8 <NVIC_SetPriority>
    }
  }
    47de:	bf00      	nop
    47e0:	3714      	adds	r7, #20
    47e2:	46bd      	mov	sp, r7
    47e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    47e8:	b004      	add	sp, #16
    47ea:	4770      	bx	lr

000047ec <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
    47f4:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    47f6:	6838      	ldr	r0, [r7, #0]
    47f8:	f7ff febe 	bl	4578 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    47fc:	6838      	ldr	r0, [r7, #0]
    47fe:	f7ff ff9d 	bl	473c <sjsu::cortex::InterruptController::GetVector(int)>
    4802:	4602      	mov	r2, r0
    4804:	4b02      	ldr	r3, [pc, #8]	; (4810 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    4806:	6013      	str	r3, [r2, #0]
  }
    4808:	bf00      	nop
    480a:	3708      	adds	r7, #8
    480c:	46bd      	mov	sp, r7
    480e:	bd80      	pop	{r7, pc}
    4810:	00001b19 	.word	0x00001b19

00004814 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    4814:	b580      	push	{r7, lr}
    4816:	b082      	sub	sp, #8
    4818:	af00      	add	r7, sp, #0
    481a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	4618      	mov	r0, r3
    4820:	f000 f804 	bl	482c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    4824:	6878      	ldr	r0, [r7, #4]
    4826:	3708      	adds	r7, #8
    4828:	46bd      	mov	sp, r7
    482a:	bd80      	pop	{r7, pc}

0000482c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    482c:	b580      	push	{r7, lr}
    482e:	b082      	sub	sp, #8
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    4834:	4903      	ldr	r1, [pc, #12]	; (4844 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    4836:	6878      	ldr	r0, [r7, #4]
    4838:	f7fc f931 	bl	a9e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    483c:	6878      	ldr	r0, [r7, #4]
    483e:	3708      	adds	r7, #8
    4840:	46bd      	mov	sp, r7
    4842:	bd80      	pop	{r7, pc}
    4844:	00007c88 	.word	0x00007c88

00004848 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    4848:	b580      	push	{r7, lr}
    484a:	b084      	sub	sp, #16
    484c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    484e:	f107 0308 	add.w	r3, r7, #8
    4852:	4618      	mov	r0, r3
    4854:	f7ff ffde 	bl	4814 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    4858:	f107 0208 	add.w	r2, r7, #8
    485c:	463b      	mov	r3, r7
    485e:	4611      	mov	r1, r2
    4860:	4618      	mov	r0, r3
    4862:	f7fd feb5 	bl	25d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    4866:	463b      	mov	r3, r7
    4868:	4619      	mov	r1, r3
    486a:	4807      	ldr	r0, [pc, #28]	; (4888 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    486c:	f000 f9a4 	bl	4bb8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    4870:	4b06      	ldr	r3, [pc, #24]	; (488c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4872:	681b      	ldr	r3, [r3, #0]
    4874:	2b00      	cmp	r3, #0
    4876:	d002      	beq.n	487e <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    4878:	4b04      	ldr	r3, [pc, #16]	; (488c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	4798      	blx	r3
    }
  }
    487e:	bf00      	nop
    4880:	3710      	adds	r7, #16
    4882:	46bd      	mov	sp, r7
    4884:	bd80      	pop	{r7, pc}
    4886:	bf00      	nop
    4888:	10000318 	.word	0x10000318
    488c:	10000310 	.word	0x10000310

00004890 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    4890:	b490      	push	{r4, r7}
    4892:	b082      	sub	sp, #8
    4894:	af00      	add	r7, sp, #0
    4896:	6078      	str	r0, [r7, #4]
  {
    return counter;
    4898:	687a      	ldr	r2, [r7, #4]
    489a:	4b05      	ldr	r3, [pc, #20]	; (48b0 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    489c:	e9d3 3400 	ldrd	r3, r4, [r3]
    48a0:	e9c2 3400 	strd	r3, r4, [r2]
  }
    48a4:	6878      	ldr	r0, [r7, #4]
    48a6:	3708      	adds	r7, #8
    48a8:	46bd      	mov	sp, r7
    48aa:	bc90      	pop	{r4, r7}
    48ac:	4770      	bx	lr
    48ae:	bf00      	nop
    48b0:	10000318 	.word	0x10000318

000048b4 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    48b4:	b480      	push	{r7}
    48b6:	b083      	sub	sp, #12
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
    48bc:	bf00      	nop
    48be:	370c      	adds	r7, #12
    48c0:	46bd      	mov	sp, r7
    48c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c6:	4770      	bx	lr

000048c8 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    48c8:	b480      	push	{r7}
    48ca:	b083      	sub	sp, #12
    48cc:	af00      	add	r7, sp, #0
    48ce:	6078      	str	r0, [r7, #4]
    48d0:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    48d2:	4a04      	ldr	r2, [pc, #16]	; (48e4 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    48d4:	683b      	ldr	r3, [r7, #0]
    48d6:	6013      	str	r3, [r2, #0]
  }
    48d8:	bf00      	nop
    48da:	370c      	adds	r7, #12
    48dc:	46bd      	mov	sp, r7
    48de:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e2:	4770      	bx	lr
    48e4:	10000310 	.word	0x10000310

000048e8 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    48e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ea:	b08b      	sub	sp, #44	; 0x2c
    48ec:	af02      	add	r7, sp, #8
    48ee:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    48f0:	2304      	movs	r3, #4
    48f2:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    48f4:	4b1f      	ldr	r3, [pc, #124]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    48f6:	681b      	ldr	r3, [r3, #0]
    48f8:	685b      	ldr	r3, [r3, #4]
    48fa:	2b00      	cmp	r3, #0
    48fc:	bf14      	ite	ne
    48fe:	2301      	movne	r3, #1
    4900:	2300      	moveq	r3, #0
    4902:	b2db      	uxtb	r3, r3
    4904:	2b00      	cmp	r3, #0
    4906:	d030      	beq.n	496a <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    4908:	4b1a      	ldr	r3, [pc, #104]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	2200      	movs	r2, #0
    490e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    4910:	4b18      	ldr	r3, [pc, #96]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	681a      	ldr	r2, [r3, #0]
    4916:	4b17      	ldr	r3, [pc, #92]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4918:	681b      	ldr	r3, [r3, #0]
    491a:	f042 0202 	orr.w	r2, r2, #2
    491e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    4920:	4b14      	ldr	r3, [pc, #80]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	681a      	ldr	r2, [r3, #0]
    4926:	4b13      	ldr	r3, [pc, #76]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	f042 0201 	orr.w	r2, r2, #1
    492e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    4930:	4b10      	ldr	r3, [pc, #64]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4932:	681b      	ldr	r3, [r3, #0]
    4934:	681a      	ldr	r2, [r3, #0]
    4936:	4b0f      	ldr	r3, [pc, #60]	; (4974 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	f042 0204 	orr.w	r2, r2, #4
    493e:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	689e      	ldr	r6, [r3, #8]
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    4948:	681b      	ldr	r3, [r3, #0]
    494a:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    494c:	4b0a      	ldr	r3, [pc, #40]	; (4978 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    494e:	f107 040c 	add.w	r4, r7, #12
    4952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    4958:	69bb      	ldr	r3, [r7, #24]
    495a:	9300      	str	r3, [sp, #0]
    495c:	f107 030c 	add.w	r3, r7, #12
    4960:	cb0e      	ldmia	r3, {r1, r2, r3}
    4962:	4630      	mov	r0, r6
    4964:	47a8      	blx	r5
      status = Status::kSuccess;
    4966:	2300      	movs	r3, #0
    4968:	61fb      	str	r3, [r7, #28]
    }

    return status;
    496a:	69fb      	ldr	r3, [r7, #28]
  }
    496c:	4618      	mov	r0, r3
    496e:	3724      	adds	r7, #36	; 0x24
    4970:	46bd      	mov	sp, r7
    4972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4974:	10000070 	.word	0x10000070
    4978:	00007898 	.word	0x00007898

0000497c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    497c:	b580      	push	{r7, lr}
    497e:	b084      	sub	sp, #16
    4980:	af00      	add	r7, sp, #0
    4982:	6078      	str	r0, [r7, #4]
    4984:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	4618      	mov	r0, r3
    498a:	f7fc fa85 	bl	e98 <units::linear_scale<float>::operator()() const>
    498e:	eeb0 7a40 	vmov.f32	s14, s0
    4992:	683b      	ldr	r3, [r7, #0]
    4994:	ee07 3a90 	vmov	s15, r3
    4998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    499c:	ee77 7a67 	vsub.f32	s15, s14, s15
    49a0:	f107 030c 	add.w	r3, r7, #12
    49a4:	eeb0 0a67 	vmov.f32	s0, s15
    49a8:	4618      	mov	r0, r3
    49aa:	f7fc fab0 	bl	f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    49ae:	68fb      	ldr	r3, [r7, #12]
	}
    49b0:	4618      	mov	r0, r3
    49b2:	3710      	adds	r7, #16
    49b4:	46bd      	mov	sp, r7
    49b6:	bd80      	pop	{r7, pc}

000049b8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    49b8:	b580      	push	{r7, lr}
    49ba:	b082      	sub	sp, #8
    49bc:	af00      	add	r7, sp, #0
    49be:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    49c0:	6878      	ldr	r0, [r7, #4]
    49c2:	f7fd ffe0 	bl	2986 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    49c6:	4603      	mov	r3, r0
	}
    49c8:	4618      	mov	r0, r3
    49ca:	3708      	adds	r7, #8
    49cc:	46bd      	mov	sp, r7
    49ce:	bd80      	pop	{r7, pc}

000049d0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    49d0:	b590      	push	{r4, r7, lr}
    49d2:	b089      	sub	sp, #36	; 0x24
    49d4:	af00      	add	r7, sp, #0
    49d6:	6078      	str	r0, [r7, #4]
    49d8:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    49da:	f04f 0001 	mov.w	r0, #1
    49de:	f04f 0100 	mov.w	r1, #0
    49e2:	f7fb fdd9 	bl	598 <units::literals::operator"" _Hz(unsigned long long)>
    49e6:	4603      	mov	r3, r0
    49e8:	60fb      	str	r3, [r7, #12]
    49ea:	f107 020c 	add.w	r2, r7, #12
    49ee:	463b      	mov	r3, r7
    49f0:	4611      	mov	r1, r2
    49f2:	4618      	mov	r0, r3
    49f4:	f7ff fe68 	bl	46c8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    49f8:	4603      	mov	r3, r0
    49fa:	2b00      	cmp	r3, #0
    49fc:	d002      	beq.n	4a04 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    49fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a02:	e041      	b.n	4a88 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	685a      	ldr	r2, [r3, #4]
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	685b      	ldr	r3, [r3, #4]
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	330c      	adds	r3, #12
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	4610      	mov	r0, r2
    4a14:	4798      	blx	r3
    4a16:	4603      	mov	r3, r0
    4a18:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    4a1a:	463a      	mov	r2, r7
    4a1c:	f107 0308 	add.w	r3, r7, #8
    4a20:	4611      	mov	r1, r2
    4a22:	4618      	mov	r0, r3
    4a24:	f7fd f838 	bl	1a98 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a28:	4603      	mov	r3, r0
    4a2a:	617b      	str	r3, [r7, #20]
    4a2c:	f107 0314 	add.w	r3, r7, #20
    4a30:	2101      	movs	r1, #1
    4a32:	4618      	mov	r0, r3
    4a34:	f7ff ffa2 	bl	497c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4a38:	4603      	mov	r3, r0
    4a3a:	613b      	str	r3, [r7, #16]
    4a3c:	f107 0310 	add.w	r3, r7, #16
    4a40:	4618      	mov	r0, r3
    4a42:	f7ff ffb9 	bl	49b8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a46:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4a48:	f107 0308 	add.w	r3, r7, #8
    4a4c:	4618      	mov	r0, r3
    4a4e:	f7fc fd61 	bl	1514 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a52:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    4a54:	463b      	mov	r3, r7
    4a56:	4618      	mov	r0, r3
    4a58:	f7fc fd5c 	bl	1514 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a5c:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4a5e:	fbb4 f2f3 	udiv	r2, r4, r3
    4a62:	fb03 f302 	mul.w	r3, r3, r2
    4a66:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    4a68:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    4a6a:	69fb      	ldr	r3, [r7, #28]
    4a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4a70:	d305      	bcc.n	4a7e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    4a72:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4a76:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    4a78:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4a7c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    4a7e:	4b04      	ldr	r3, [pc, #16]	; (4a90 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	69fa      	ldr	r2, [r7, #28]
    4a84:	605a      	str	r2, [r3, #4]
    return remainder;
    4a86:	69bb      	ldr	r3, [r7, #24]
  }
    4a88:	4618      	mov	r0, r3
    4a8a:	3724      	adds	r7, #36	; 0x24
    4a8c:	46bd      	mov	sp, r7
    4a8e:	bd90      	pop	{r4, r7, pc}
    4a90:	10000070 	.word	0x10000070

00004a94 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    4a94:	b580      	push	{r7, lr}
    4a96:	b082      	sub	sp, #8
    4a98:	af00      	add	r7, sp, #0
    4a9a:	6078      	str	r0, [r7, #4]
    4a9c:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    4a9e:	683a      	ldr	r2, [r7, #0]
    4aa0:	6879      	ldr	r1, [r7, #4]
    4aa2:	4804      	ldr	r0, [pc, #16]	; (4ab4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    4aa4:	f7fc ff1a 	bl	18dc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    4aa8:	683b      	ldr	r3, [r7, #0]
}
    4aaa:	4618      	mov	r0, r3
    4aac:	3708      	adds	r7, #8
    4aae:	46bd      	mov	sp, r7
    4ab0:	bd80      	pop	{r7, pc}
    4ab2:	bf00      	nop
    4ab4:	10000324 	.word	0x10000324

00004ab8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    4ab8:	b590      	push	{r4, r7, lr}
    4aba:	b087      	sub	sp, #28
    4abc:	af02      	add	r7, sp, #8
    4abe:	6078      	str	r0, [r7, #4]
    4ac0:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    4ac2:	f107 0308 	add.w	r3, r7, #8
    4ac6:	4618      	mov	r0, r3
    4ac8:	f7fd fd09 	bl	24de <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4acc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    4ad0:	e9cd 3400 	strd	r3, r4, [sp]
    4ad4:	683a      	ldr	r2, [r7, #0]
    4ad6:	6879      	ldr	r1, [r7, #4]
    4ad8:	4803      	ldr	r0, [pc, #12]	; (4ae8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    4ada:	f7fc ff51 	bl	1980 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    4ade:	683b      	ldr	r3, [r7, #0]
}
    4ae0:	4618      	mov	r0, r3
    4ae2:	3714      	adds	r7, #20
    4ae4:	46bd      	mov	sp, r7
    4ae6:	bd90      	pop	{r4, r7, pc}
    4ae8:	10000324 	.word	0x10000324

00004aec <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    4aec:	b580      	push	{r7, lr}
    4aee:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    4af0:	4802      	ldr	r0, [pc, #8]	; (4afc <ThreadRuntimeCounter+0x10>)
    4af2:	f7ff fda5 	bl	4640 <sjsu::cortex::DwtCounter::GetCount()>
    4af6:	4603      	mov	r3, r0
}
    4af8:	4618      	mov	r0, r3
    4afa:	bd80      	pop	{r7, pc}
    4afc:	10000320 	.word	0x10000320

00004b00 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b082      	sub	sp, #8
    4b04:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    4b06:	f7ff fdab 	bl	4660 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    4b0a:	4b1e      	ldr	r3, [pc, #120]	; (4b84 <sjsu::InitializePlatform()+0x84>)
    4b0c:	6819      	ldr	r1, [r3, #0]
    4b0e:	481e      	ldr	r0, [pc, #120]	; (4b88 <sjsu::InitializePlatform()+0x88>)
    4b10:	f7fc f80a 	bl	b28 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    4b14:	23ff      	movs	r3, #255	; 0xff
    4b16:	703b      	strb	r3, [r7, #0]
    4b18:	463b      	mov	r3, r7
    4b1a:	2201      	movs	r2, #1
    4b1c:	4619      	mov	r1, r3
    4b1e:	481a      	ldr	r0, [pc, #104]	; (4b88 <sjsu::InitializePlatform()+0x88>)
    4b20:	f7fc f850 	bl	bc4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    4b24:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    4b28:	4818      	ldr	r0, [pc, #96]	; (4b8c <sjsu::InitializePlatform()+0x8c>)
    4b2a:	f7fc fe31 	bl	1790 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    4b2e:	4818      	ldr	r0, [pc, #96]	; (4b90 <sjsu::InitializePlatform()+0x90>)
    4b30:	f000 f952 	bl	4dd8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    4b34:	4817      	ldr	r0, [pc, #92]	; (4b94 <sjsu::InitializePlatform()+0x94>)
    4b36:	f000 f95f 	bl	4df8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    4b3a:	4b17      	ldr	r3, [pc, #92]	; (4b98 <sjsu::InitializePlatform()+0x98>)
    4b3c:	6819      	ldr	r1, [r3, #0]
    4b3e:	4817      	ldr	r0, [pc, #92]	; (4b9c <sjsu::InitializePlatform()+0x9c>)
    4b40:	f7ff ff46 	bl	49d0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    4b44:	4815      	ldr	r0, [pc, #84]	; (4b9c <sjsu::InitializePlatform()+0x9c>)
    4b46:	f7ff fecf 	bl	48e8 <sjsu::cortex::SystemTimer::StartTimer() const>
    4b4a:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    4b4c:	687b      	ldr	r3, [r7, #4]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d00d      	beq.n	4b6e <sjsu::InitializePlatform()+0x6e>
    4b52:	23d6      	movs	r3, #214	; 0xd6
    4b54:	4a12      	ldr	r2, [pc, #72]	; (4ba0 <sjsu::InitializePlatform()+0xa0>)
    4b56:	4913      	ldr	r1, [pc, #76]	; (4ba4 <sjsu::InitializePlatform()+0xa4>)
    4b58:	4813      	ldr	r0, [pc, #76]	; (4ba8 <sjsu::InitializePlatform()+0xa8>)
    4b5a:	f7ff fcd9 	bl	4510 <printf>
    4b5e:	4813      	ldr	r0, [pc, #76]	; (4bac <sjsu::InitializePlatform()+0xac>)
    4b60:	f7fe fbba 	bl	32d8 <puts>
    4b64:	2100      	movs	r1, #0
    4b66:	2001      	movs	r0, #1
    4b68:	f7fb feae 	bl	8c8 <sjsu::debug::PrintBacktrace(bool, void*)>
    4b6c:	e7fe      	b.n	4b6c <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    4b6e:	4810      	ldr	r0, [pc, #64]	; (4bb0 <sjsu::InitializePlatform()+0xb0>)
    4b70:	f7ff fd44 	bl	45fc <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    4b74:	480f      	ldr	r0, [pc, #60]	; (4bb4 <sjsu::InitializePlatform()+0xb4>)
    4b76:	f7ff fdc5 	bl	4704 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    4b7a:	bf00      	nop
    4b7c:	3708      	adds	r7, #8
    4b7e:	46bd      	mov	sp, r7
    4b80:	bd80      	pop	{r7, pc}
    4b82:	bf00      	nop
    4b84:	00007c90 	.word	0x00007c90
    4b88:	10000074 	.word	0x10000074
    4b8c:	10000324 	.word	0x10000324
    4b90:	00004a95 	.word	0x00004a95
    4b94:	00004ab9 	.word	0x00004ab9
    4b98:	00007c94 	.word	0x00007c94
    4b9c:	10000078 	.word	0x10000078
    4ba0:	00007cf4 	.word	0x00007cf4
    4ba4:	00007cc0 	.word	0x00007cc0
    4ba8:	00007bb4 	.word	0x00007bb4
    4bac:	00007948 	.word	0x00007948
    4bb0:	10000320 	.word	0x10000320
    4bb4:	00004891 	.word	0x00004891

00004bb8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    4bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bba:	b083      	sub	sp, #12
    4bbc:	af00      	add	r7, sp, #0
    4bbe:	6078      	str	r0, [r7, #4]
    4bc0:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4bc2:	6838      	ldr	r0, [r7, #0]
    4bc4:	f7fd fbb4 	bl	2330 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4bc8:	460a      	mov	r2, r1
    4bca:	4601      	mov	r1, r0
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	e9d3 5600 	ldrd	r5, r6, [r3]
    4bd2:	186b      	adds	r3, r5, r1
    4bd4:	eb46 0402 	adc.w	r4, r6, r2
    4bd8:	687a      	ldr	r2, [r7, #4]
    4bda:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    4bde:	687b      	ldr	r3, [r7, #4]
	}
    4be0:	4618      	mov	r0, r3
    4be2:	370c      	adds	r7, #12
    4be4:	46bd      	mov	sp, r7
    4be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004be8 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    4be8:	b580      	push	{r7, lr}
    4bea:	b082      	sub	sp, #8
    4bec:	af00      	add	r7, sp, #0
    4bee:	6078      	str	r0, [r7, #4]
    4bf0:	6039      	str	r1, [r7, #0]
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	2b01      	cmp	r3, #1
    4bf6:	d155      	bne.n	4ca4 <__static_initialization_and_destruction_0(int, int)+0xbc>
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4bfe:	4293      	cmp	r3, r2
    4c00:	d150      	bne.n	4ca4 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    4c02:	4b2a      	ldr	r3, [pc, #168]	; (4cac <__static_initialization_and_destruction_0(int, int)+0xc4>)
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	f003 0301 	and.w	r3, r3, #1
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d106      	bne.n	4c1c <__static_initialization_and_destruction_0(int, int)+0x34>
    4c0e:	4b27      	ldr	r3, [pc, #156]	; (4cac <__static_initialization_and_destruction_0(int, int)+0xc4>)
    4c10:	2201      	movs	r2, #1
    4c12:	601a      	str	r2, [r3, #0]
    4c14:	4b26      	ldr	r3, [pc, #152]	; (4cb0 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    4c16:	4618      	mov	r0, r3
    4c18:	f7fc ffa8 	bl	1b6c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    4c1c:	4b25      	ldr	r3, [pc, #148]	; (4cb4 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	f003 0301 	and.w	r3, r3, #1
    4c24:	2b00      	cmp	r3, #0
    4c26:	d105      	bne.n	4c34 <__static_initialization_and_destruction_0(int, int)+0x4c>
    4c28:	4b22      	ldr	r3, [pc, #136]	; (4cb4 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    4c2a:	2201      	movs	r2, #1
    4c2c:	601a      	str	r2, [r3, #0]
    4c2e:	4a22      	ldr	r2, [pc, #136]	; (4cb8 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    4c30:	4b22      	ldr	r3, [pc, #136]	; (4cbc <__static_initialization_and_destruction_0(int, int)+0xd4>)
    4c32:	601a      	str	r2, [r3, #0]
    4c34:	4b22      	ldr	r3, [pc, #136]	; (4cc0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    4c36:	681b      	ldr	r3, [r3, #0]
    4c38:	f003 0301 	and.w	r3, r3, #1
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d105      	bne.n	4c4c <__static_initialization_and_destruction_0(int, int)+0x64>
    4c40:	4b1f      	ldr	r3, [pc, #124]	; (4cc0 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    4c42:	2201      	movs	r2, #1
    4c44:	601a      	str	r2, [r3, #0]
    4c46:	4a1f      	ldr	r2, [pc, #124]	; (4cc4 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    4c48:	4b1f      	ldr	r3, [pc, #124]	; (4cc8 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    4c4a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    4c4c:	4b1f      	ldr	r3, [pc, #124]	; (4ccc <__static_initialization_and_destruction_0(int, int)+0xe4>)
    4c4e:	681b      	ldr	r3, [r3, #0]
    4c50:	f003 0301 	and.w	r3, r3, #1
    4c54:	2b00      	cmp	r3, #0
    4c56:	d105      	bne.n	4c64 <__static_initialization_and_destruction_0(int, int)+0x7c>
    4c58:	4b1c      	ldr	r3, [pc, #112]	; (4ccc <__static_initialization_and_destruction_0(int, int)+0xe4>)
    4c5a:	2201      	movs	r2, #1
    4c5c:	601a      	str	r2, [r3, #0]
    };
    4c5e:	4a1c      	ldr	r2, [pc, #112]	; (4cd0 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    4c60:	4b1c      	ldr	r3, [pc, #112]	; (4cd4 <__static_initialization_and_destruction_0(int, int)+0xec>)
    4c62:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    4c64:	4b1c      	ldr	r3, [pc, #112]	; (4cd8 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	f003 0301 	and.w	r3, r3, #1
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d105      	bne.n	4c7c <__static_initialization_and_destruction_0(int, int)+0x94>
    4c70:	4b19      	ldr	r3, [pc, #100]	; (4cd8 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    4c72:	2201      	movs	r2, #1
    4c74:	601a      	str	r2, [r3, #0]
    };
    4c76:	4a19      	ldr	r2, [pc, #100]	; (4cdc <__static_initialization_and_destruction_0(int, int)+0xf4>)
    4c78:	4b19      	ldr	r3, [pc, #100]	; (4ce0 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    4c7a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    4c7c:	4b19      	ldr	r3, [pc, #100]	; (4ce4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	f003 0301 	and.w	r3, r3, #1
    4c84:	2b00      	cmp	r3, #0
    4c86:	d105      	bne.n	4c94 <__static_initialization_and_destruction_0(int, int)+0xac>
    4c88:	4b16      	ldr	r3, [pc, #88]	; (4ce4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4c8a:	2201      	movs	r2, #1
    4c8c:	601a      	str	r2, [r3, #0]
    };
    4c8e:	4a16      	ldr	r2, [pc, #88]	; (4ce8 <__static_initialization_and_destruction_0(int, int)+0x100>)
    4c90:	4b16      	ldr	r3, [pc, #88]	; (4cec <__static_initialization_and_destruction_0(int, int)+0x104>)
    4c92:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    4c94:	f7fc fb0e 	bl	12b4 <sjsu::lpc40xx::DefaultSystemController()>
    4c98:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    4c9a:	461a      	mov	r2, r3
    4c9c:	4914      	ldr	r1, [pc, #80]	; (4cf0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    4c9e:	4815      	ldr	r0, [pc, #84]	; (4cf4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    4ca0:	f7fc fd5c 	bl	175c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    4ca4:	bf00      	nop
    4ca6:	3708      	adds	r7, #8
    4ca8:	46bd      	mov	sp, r7
    4caa:	bd80      	pop	{r7, pc}
    4cac:	1000027c 	.word	0x1000027c
    4cb0:	10000120 	.word	0x10000120
    4cb4:	10000268 	.word	0x10000268
    4cb8:	400fc000 	.word	0x400fc000
    4cbc:	10000118 	.word	0x10000118
    4cc0:	10000264 	.word	0x10000264
    4cc4:	4002c000 	.word	0x4002c000
    4cc8:	1000010c 	.word	0x1000010c
    4ccc:	1000026c 	.word	0x1000026c
    4cd0:	40098000 	.word	0x40098000
    4cd4:	1000000c 	.word	0x1000000c
    4cd8:	10000270 	.word	0x10000270
    4cdc:	4009c000 	.word	0x4009c000
    4ce0:	10000020 	.word	0x10000020
    4ce4:	10000274 	.word	0x10000274
    4ce8:	400a4000 	.word	0x400a4000
    4cec:	10000034 	.word	0x10000034
    4cf0:	00007cac 	.word	0x00007cac
    4cf4:	10000324 	.word	0x10000324

00004cf8 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    4cf8:	b580      	push	{r7, lr}
    4cfa:	af00      	add	r7, sp, #0
    4cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4d00:	2001      	movs	r0, #1
    4d02:	f7ff ff71 	bl	4be8 <__static_initialization_and_destruction_0(int, int)>
    4d06:	bd80      	pop	{r7, pc}
    4d08:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    4d0c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004d10 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4d10:	4b07      	ldr	r3, [pc, #28]	; (4d30 <pxCurrentTCBConst2>)
    4d12:	6819      	ldr	r1, [r3, #0]
    4d14:	6808      	ldr	r0, [r1, #0]
    4d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d1a:	f380 8809 	msr	PSP, r0
    4d1e:	f3bf 8f6f 	isb	sy
    4d22:	f04f 0000 	mov.w	r0, #0
    4d26:	f380 8811 	msr	BASEPRI, r0
    4d2a:	4770      	bx	lr
    4d2c:	f3af 8000 	nop.w

00004d30 <pxCurrentTCBConst2>:
    4d30:	10000294 	.word	0x10000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    4d34:	bf00      	nop
    4d36:	bf00      	nop
    4d38:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    4d3c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004d40 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4d40:	f3ef 8009 	mrs	r0, PSP
    4d44:	f3bf 8f6f 	isb	sy
    4d48:	4b15      	ldr	r3, [pc, #84]	; (4da0 <pxCurrentTCBConst>)
    4d4a:	681a      	ldr	r2, [r3, #0]
    4d4c:	f01e 0f10 	tst.w	lr, #16
    4d50:	bf08      	it	eq
    4d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d5a:	6010      	str	r0, [r2, #0]
    4d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4d60:	f04f 0028 	mov.w	r0, #40	; 0x28
    4d64:	f380 8811 	msr	BASEPRI, r0
    4d68:	f3bf 8f4f 	dsb	sy
    4d6c:	f3bf 8f6f 	isb	sy
    4d70:	f7fe fa34 	bl	31dc <vTaskSwitchContext>
    4d74:	f04f 0000 	mov.w	r0, #0
    4d78:	f380 8811 	msr	BASEPRI, r0
    4d7c:	bc09      	pop	{r0, r3}
    4d7e:	6819      	ldr	r1, [r3, #0]
    4d80:	6808      	ldr	r0, [r1, #0]
    4d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d86:	f01e 0f10 	tst.w	lr, #16
    4d8a:	bf08      	it	eq
    4d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4d90:	f380 8809 	msr	PSP, r0
    4d94:	f3bf 8f6f 	isb	sy
    4d98:	4770      	bx	lr
    4d9a:	bf00      	nop
    4d9c:	f3af 8000 	nop.w

00004da0 <pxCurrentTCBConst>:
    4da0:	10000294 	.word	0x10000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    4da4:	bf00      	nop
    4da6:	bf00      	nop

00004da8 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    4da8:	b480      	push	{r7}
    4daa:	b083      	sub	sp, #12
    4dac:	af00      	add	r7, sp, #0
    4dae:	6078      	str	r0, [r7, #4]
    4db0:	6039      	str	r1, [r7, #0]
  return 1;
    4db2:	2301      	movs	r3, #1
}
    4db4:	4618      	mov	r0, r3
    4db6:	370c      	adds	r7, #12
    4db8:	46bd      	mov	sp, r7
    4dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dbe:	4770      	bx	lr

00004dc0 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    4dc0:	b480      	push	{r7}
    4dc2:	b083      	sub	sp, #12
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	6078      	str	r0, [r7, #4]
    4dc8:	6039      	str	r1, [r7, #0]
  return 0;
    4dca:	2300      	movs	r3, #0
}
    4dcc:	4618      	mov	r0, r3
    4dce:	370c      	adds	r7, #12
    4dd0:	46bd      	mov	sp, r7
    4dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd6:	4770      	bx	lr

00004dd8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4dd8:	b480      	push	{r7}
    4dda:	b083      	sub	sp, #12
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    4de0:	4a04      	ldr	r2, [pc, #16]	; (4df4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	6013      	str	r3, [r2, #0]
}
    4de6:	bf00      	nop
    4de8:	370c      	adds	r7, #12
    4dea:	46bd      	mov	sp, r7
    4dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	1000005c 	.word	0x1000005c

00004df8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    4df8:	b480      	push	{r7}
    4dfa:	b083      	sub	sp, #12
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    4e00:	4a04      	ldr	r2, [pc, #16]	; (4e14 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	6013      	str	r3, [r2, #0]
}
    4e06:	bf00      	nop
    4e08:	370c      	adds	r7, #12
    4e0a:	46bd      	mov	sp, r7
    4e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e10:	4770      	bx	lr
    4e12:	bf00      	nop
    4e14:	10000060 	.word	0x10000060

00004e18 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    4e18:	b580      	push	{r7, lr}
    4e1a:	b082      	sub	sp, #8
    4e1c:	af00      	add	r7, sp, #0
    4e1e:	4603      	mov	r3, r0
    4e20:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    4e22:	4b05      	ldr	r3, [pc, #20]	; (4e38 <_putchar+0x20>)
    4e24:	681b      	ldr	r3, [r3, #0]
    4e26:	1dfa      	adds	r2, r7, #7
    4e28:	2101      	movs	r1, #1
    4e2a:	4610      	mov	r0, r2
    4e2c:	4798      	blx	r3
}
    4e2e:	bf00      	nop
    4e30:	3708      	adds	r7, #8
    4e32:	46bd      	mov	sp, r7
    4e34:	bd80      	pop	{r7, pc}
    4e36:	bf00      	nop
    4e38:	1000005c 	.word	0x1000005c

00004e3c <__cxa_pure_virtual>:
    4e3c:	b508      	push	{r3, lr}
    4e3e:	f000 f80d 	bl	4e5c <std::terminate()>

00004e42 <__cxxabiv1::__terminate(void (*)())>:
    4e42:	b508      	push	{r3, lr}
    4e44:	4780      	blx	r0
    4e46:	f001 fc2f 	bl	66a8 <abort>
    4e4a:	Address 0x0000000000004e4a is out of bounds.


00004e4c <std::get_terminate()>:
    4e4c:	4b02      	ldr	r3, [pc, #8]	; (4e58 <std::get_terminate()+0xc>)
    4e4e:	6818      	ldr	r0, [r3, #0]
    4e50:	f3bf 8f5b 	dmb	ish
    4e54:	4770      	bx	lr
    4e56:	bf00      	nop
    4e58:	10000084 	.word	0x10000084

00004e5c <std::terminate()>:
    4e5c:	b508      	push	{r3, lr}
    4e5e:	f7ff fff5 	bl	4e4c <std::get_terminate()>
    4e62:	f7ff ffee 	bl	4e42 <__cxxabiv1::__terminate(void (*)())>
    4e66:	Address 0x0000000000004e66 is out of bounds.


00004e68 <__aeabi_drsub>:
    4e68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4e6c:	e002      	b.n	4e74 <__adddf3>
    4e6e:	bf00      	nop

00004e70 <__aeabi_dsub>:
    4e70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004e74 <__adddf3>:
    4e74:	b530      	push	{r4, r5, lr}
    4e76:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4e7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4e7e:	ea94 0f05 	teq	r4, r5
    4e82:	bf08      	it	eq
    4e84:	ea90 0f02 	teqeq	r0, r2
    4e88:	bf1f      	itttt	ne
    4e8a:	ea54 0c00 	orrsne.w	ip, r4, r0
    4e8e:	ea55 0c02 	orrsne.w	ip, r5, r2
    4e92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4e96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4e9a:	f000 80e2 	beq.w	5062 <__adddf3+0x1ee>
    4e9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4ea2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4ea6:	bfb8      	it	lt
    4ea8:	426d      	neglt	r5, r5
    4eaa:	dd0c      	ble.n	4ec6 <__adddf3+0x52>
    4eac:	442c      	add	r4, r5
    4eae:	ea80 0202 	eor.w	r2, r0, r2
    4eb2:	ea81 0303 	eor.w	r3, r1, r3
    4eb6:	ea82 0000 	eor.w	r0, r2, r0
    4eba:	ea83 0101 	eor.w	r1, r3, r1
    4ebe:	ea80 0202 	eor.w	r2, r0, r2
    4ec2:	ea81 0303 	eor.w	r3, r1, r3
    4ec6:	2d36      	cmp	r5, #54	; 0x36
    4ec8:	bf88      	it	hi
    4eca:	bd30      	pophi	{r4, r5, pc}
    4ecc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4ed0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4ed4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4ed8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4edc:	d002      	beq.n	4ee4 <__adddf3+0x70>
    4ede:	4240      	negs	r0, r0
    4ee0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4ee4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4ee8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4eec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4ef0:	d002      	beq.n	4ef8 <__adddf3+0x84>
    4ef2:	4252      	negs	r2, r2
    4ef4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4ef8:	ea94 0f05 	teq	r4, r5
    4efc:	f000 80a7 	beq.w	504e <__adddf3+0x1da>
    4f00:	f1a4 0401 	sub.w	r4, r4, #1
    4f04:	f1d5 0e20 	rsbs	lr, r5, #32
    4f08:	db0d      	blt.n	4f26 <__adddf3+0xb2>
    4f0a:	fa02 fc0e 	lsl.w	ip, r2, lr
    4f0e:	fa22 f205 	lsr.w	r2, r2, r5
    4f12:	1880      	adds	r0, r0, r2
    4f14:	f141 0100 	adc.w	r1, r1, #0
    4f18:	fa03 f20e 	lsl.w	r2, r3, lr
    4f1c:	1880      	adds	r0, r0, r2
    4f1e:	fa43 f305 	asr.w	r3, r3, r5
    4f22:	4159      	adcs	r1, r3
    4f24:	e00e      	b.n	4f44 <__adddf3+0xd0>
    4f26:	f1a5 0520 	sub.w	r5, r5, #32
    4f2a:	f10e 0e20 	add.w	lr, lr, #32
    4f2e:	2a01      	cmp	r2, #1
    4f30:	fa03 fc0e 	lsl.w	ip, r3, lr
    4f34:	bf28      	it	cs
    4f36:	f04c 0c02 	orrcs.w	ip, ip, #2
    4f3a:	fa43 f305 	asr.w	r3, r3, r5
    4f3e:	18c0      	adds	r0, r0, r3
    4f40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4f44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4f48:	d507      	bpl.n	4f5a <__adddf3+0xe6>
    4f4a:	f04f 0e00 	mov.w	lr, #0
    4f4e:	f1dc 0c00 	rsbs	ip, ip, #0
    4f52:	eb7e 0000 	sbcs.w	r0, lr, r0
    4f56:	eb6e 0101 	sbc.w	r1, lr, r1
    4f5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4f5e:	d31b      	bcc.n	4f98 <__adddf3+0x124>
    4f60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4f64:	d30c      	bcc.n	4f80 <__adddf3+0x10c>
    4f66:	0849      	lsrs	r1, r1, #1
    4f68:	ea5f 0030 	movs.w	r0, r0, rrx
    4f6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4f70:	f104 0401 	add.w	r4, r4, #1
    4f74:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4f78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4f7c:	f080 809a 	bcs.w	50b4 <__adddf3+0x240>
    4f80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4f84:	bf08      	it	eq
    4f86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4f8a:	f150 0000 	adcs.w	r0, r0, #0
    4f8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4f92:	ea41 0105 	orr.w	r1, r1, r5
    4f96:	bd30      	pop	{r4, r5, pc}
    4f98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4f9c:	4140      	adcs	r0, r0
    4f9e:	eb41 0101 	adc.w	r1, r1, r1
    4fa2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4fa6:	f1a4 0401 	sub.w	r4, r4, #1
    4faa:	d1e9      	bne.n	4f80 <__adddf3+0x10c>
    4fac:	f091 0f00 	teq	r1, #0
    4fb0:	bf04      	itt	eq
    4fb2:	4601      	moveq	r1, r0
    4fb4:	2000      	moveq	r0, #0
    4fb6:	fab1 f381 	clz	r3, r1
    4fba:	bf08      	it	eq
    4fbc:	3320      	addeq	r3, #32
    4fbe:	f1a3 030b 	sub.w	r3, r3, #11
    4fc2:	f1b3 0220 	subs.w	r2, r3, #32
    4fc6:	da0c      	bge.n	4fe2 <__adddf3+0x16e>
    4fc8:	320c      	adds	r2, #12
    4fca:	dd08      	ble.n	4fde <__adddf3+0x16a>
    4fcc:	f102 0c14 	add.w	ip, r2, #20
    4fd0:	f1c2 020c 	rsb	r2, r2, #12
    4fd4:	fa01 f00c 	lsl.w	r0, r1, ip
    4fd8:	fa21 f102 	lsr.w	r1, r1, r2
    4fdc:	e00c      	b.n	4ff8 <__adddf3+0x184>
    4fde:	f102 0214 	add.w	r2, r2, #20
    4fe2:	bfd8      	it	le
    4fe4:	f1c2 0c20 	rsble	ip, r2, #32
    4fe8:	fa01 f102 	lsl.w	r1, r1, r2
    4fec:	fa20 fc0c 	lsr.w	ip, r0, ip
    4ff0:	bfdc      	itt	le
    4ff2:	ea41 010c 	orrle.w	r1, r1, ip
    4ff6:	4090      	lslle	r0, r2
    4ff8:	1ae4      	subs	r4, r4, r3
    4ffa:	bfa2      	ittt	ge
    4ffc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    5000:	4329      	orrge	r1, r5
    5002:	bd30      	popge	{r4, r5, pc}
    5004:	ea6f 0404 	mvn.w	r4, r4
    5008:	3c1f      	subs	r4, #31
    500a:	da1c      	bge.n	5046 <__adddf3+0x1d2>
    500c:	340c      	adds	r4, #12
    500e:	dc0e      	bgt.n	502e <__adddf3+0x1ba>
    5010:	f104 0414 	add.w	r4, r4, #20
    5014:	f1c4 0220 	rsb	r2, r4, #32
    5018:	fa20 f004 	lsr.w	r0, r0, r4
    501c:	fa01 f302 	lsl.w	r3, r1, r2
    5020:	ea40 0003 	orr.w	r0, r0, r3
    5024:	fa21 f304 	lsr.w	r3, r1, r4
    5028:	ea45 0103 	orr.w	r1, r5, r3
    502c:	bd30      	pop	{r4, r5, pc}
    502e:	f1c4 040c 	rsb	r4, r4, #12
    5032:	f1c4 0220 	rsb	r2, r4, #32
    5036:	fa20 f002 	lsr.w	r0, r0, r2
    503a:	fa01 f304 	lsl.w	r3, r1, r4
    503e:	ea40 0003 	orr.w	r0, r0, r3
    5042:	4629      	mov	r1, r5
    5044:	bd30      	pop	{r4, r5, pc}
    5046:	fa21 f004 	lsr.w	r0, r1, r4
    504a:	4629      	mov	r1, r5
    504c:	bd30      	pop	{r4, r5, pc}
    504e:	f094 0f00 	teq	r4, #0
    5052:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    5056:	bf06      	itte	eq
    5058:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    505c:	3401      	addeq	r4, #1
    505e:	3d01      	subne	r5, #1
    5060:	e74e      	b.n	4f00 <__adddf3+0x8c>
    5062:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5066:	bf18      	it	ne
    5068:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    506c:	d029      	beq.n	50c2 <__adddf3+0x24e>
    506e:	ea94 0f05 	teq	r4, r5
    5072:	bf08      	it	eq
    5074:	ea90 0f02 	teqeq	r0, r2
    5078:	d005      	beq.n	5086 <__adddf3+0x212>
    507a:	ea54 0c00 	orrs.w	ip, r4, r0
    507e:	bf04      	itt	eq
    5080:	4619      	moveq	r1, r3
    5082:	4610      	moveq	r0, r2
    5084:	bd30      	pop	{r4, r5, pc}
    5086:	ea91 0f03 	teq	r1, r3
    508a:	bf1e      	ittt	ne
    508c:	2100      	movne	r1, #0
    508e:	2000      	movne	r0, #0
    5090:	bd30      	popne	{r4, r5, pc}
    5092:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    5096:	d105      	bne.n	50a4 <__adddf3+0x230>
    5098:	0040      	lsls	r0, r0, #1
    509a:	4149      	adcs	r1, r1
    509c:	bf28      	it	cs
    509e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    50a2:	bd30      	pop	{r4, r5, pc}
    50a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    50a8:	bf3c      	itt	cc
    50aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    50ae:	bd30      	popcc	{r4, r5, pc}
    50b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    50b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    50b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    50bc:	f04f 0000 	mov.w	r0, #0
    50c0:	bd30      	pop	{r4, r5, pc}
    50c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    50c6:	bf1a      	itte	ne
    50c8:	4619      	movne	r1, r3
    50ca:	4610      	movne	r0, r2
    50cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    50d0:	bf1c      	itt	ne
    50d2:	460b      	movne	r3, r1
    50d4:	4602      	movne	r2, r0
    50d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    50da:	bf06      	itte	eq
    50dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    50e0:	ea91 0f03 	teqeq	r1, r3
    50e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    50e8:	bd30      	pop	{r4, r5, pc}
    50ea:	bf00      	nop

000050ec <__aeabi_ui2d>:
    50ec:	f090 0f00 	teq	r0, #0
    50f0:	bf04      	itt	eq
    50f2:	2100      	moveq	r1, #0
    50f4:	4770      	bxeq	lr
    50f6:	b530      	push	{r4, r5, lr}
    50f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    50fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5100:	f04f 0500 	mov.w	r5, #0
    5104:	f04f 0100 	mov.w	r1, #0
    5108:	e750      	b.n	4fac <__adddf3+0x138>
    510a:	bf00      	nop

0000510c <__aeabi_i2d>:
    510c:	f090 0f00 	teq	r0, #0
    5110:	bf04      	itt	eq
    5112:	2100      	moveq	r1, #0
    5114:	4770      	bxeq	lr
    5116:	b530      	push	{r4, r5, lr}
    5118:	f44f 6480 	mov.w	r4, #1024	; 0x400
    511c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5120:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    5124:	bf48      	it	mi
    5126:	4240      	negmi	r0, r0
    5128:	f04f 0100 	mov.w	r1, #0
    512c:	e73e      	b.n	4fac <__adddf3+0x138>
    512e:	bf00      	nop

00005130 <__aeabi_f2d>:
    5130:	0042      	lsls	r2, r0, #1
    5132:	ea4f 01e2 	mov.w	r1, r2, asr #3
    5136:	ea4f 0131 	mov.w	r1, r1, rrx
    513a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    513e:	bf1f      	itttt	ne
    5140:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    5144:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5148:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    514c:	4770      	bxne	lr
    514e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    5152:	bf08      	it	eq
    5154:	4770      	bxeq	lr
    5156:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    515a:	bf04      	itt	eq
    515c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    5160:	4770      	bxeq	lr
    5162:	b530      	push	{r4, r5, lr}
    5164:	f44f 7460 	mov.w	r4, #896	; 0x380
    5168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    516c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5170:	e71c      	b.n	4fac <__adddf3+0x138>
    5172:	bf00      	nop

00005174 <__aeabi_ul2d>:
    5174:	ea50 0201 	orrs.w	r2, r0, r1
    5178:	bf08      	it	eq
    517a:	4770      	bxeq	lr
    517c:	b530      	push	{r4, r5, lr}
    517e:	f04f 0500 	mov.w	r5, #0
    5182:	e00a      	b.n	519a <__aeabi_l2d+0x16>

00005184 <__aeabi_l2d>:
    5184:	ea50 0201 	orrs.w	r2, r0, r1
    5188:	bf08      	it	eq
    518a:	4770      	bxeq	lr
    518c:	b530      	push	{r4, r5, lr}
    518e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    5192:	d502      	bpl.n	519a <__aeabi_l2d+0x16>
    5194:	4240      	negs	r0, r0
    5196:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    519a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    519e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    51a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    51a6:	f43f aed8 	beq.w	4f5a <__adddf3+0xe6>
    51aa:	f04f 0203 	mov.w	r2, #3
    51ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    51b2:	bf18      	it	ne
    51b4:	3203      	addne	r2, #3
    51b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    51ba:	bf18      	it	ne
    51bc:	3203      	addne	r2, #3
    51be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    51c2:	f1c2 0320 	rsb	r3, r2, #32
    51c6:	fa00 fc03 	lsl.w	ip, r0, r3
    51ca:	fa20 f002 	lsr.w	r0, r0, r2
    51ce:	fa01 fe03 	lsl.w	lr, r1, r3
    51d2:	ea40 000e 	orr.w	r0, r0, lr
    51d6:	fa21 f102 	lsr.w	r1, r1, r2
    51da:	4414      	add	r4, r2
    51dc:	e6bd      	b.n	4f5a <__adddf3+0xe6>
    51de:	bf00      	nop

000051e0 <__aeabi_d2f>:
    51e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    51e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    51e8:	bf24      	itt	cs
    51ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    51ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    51f2:	d90d      	bls.n	5210 <__aeabi_d2f+0x30>
    51f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    51f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    51fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    5200:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    5204:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    5208:	bf08      	it	eq
    520a:	f020 0001 	biceq.w	r0, r0, #1
    520e:	4770      	bx	lr
    5210:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    5214:	d121      	bne.n	525a <__aeabi_d2f+0x7a>
    5216:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    521a:	bfbc      	itt	lt
    521c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    5220:	4770      	bxlt	lr
    5222:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5226:	ea4f 5252 	mov.w	r2, r2, lsr #21
    522a:	f1c2 0218 	rsb	r2, r2, #24
    522e:	f1c2 0c20 	rsb	ip, r2, #32
    5232:	fa10 f30c 	lsls.w	r3, r0, ip
    5236:	fa20 f002 	lsr.w	r0, r0, r2
    523a:	bf18      	it	ne
    523c:	f040 0001 	orrne.w	r0, r0, #1
    5240:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    5244:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    5248:	fa03 fc0c 	lsl.w	ip, r3, ip
    524c:	ea40 000c 	orr.w	r0, r0, ip
    5250:	fa23 f302 	lsr.w	r3, r3, r2
    5254:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5258:	e7cc      	b.n	51f4 <__aeabi_d2f+0x14>
    525a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    525e:	d107      	bne.n	5270 <__aeabi_d2f+0x90>
    5260:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    5264:	bf1e      	ittt	ne
    5266:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    526a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    526e:	4770      	bxne	lr
    5270:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    5274:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5278:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    527c:	4770      	bx	lr
    527e:	bf00      	nop

00005280 <__aeabi_frsub>:
    5280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    5284:	e002      	b.n	528c <__addsf3>
    5286:	bf00      	nop

00005288 <__aeabi_fsub>:
    5288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000528c <__addsf3>:
    528c:	0042      	lsls	r2, r0, #1
    528e:	bf1f      	itttt	ne
    5290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    5294:	ea92 0f03 	teqne	r2, r3
    5298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    529c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    52a0:	d06a      	beq.n	5378 <__addsf3+0xec>
    52a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    52a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    52aa:	bfc1      	itttt	gt
    52ac:	18d2      	addgt	r2, r2, r3
    52ae:	4041      	eorgt	r1, r0
    52b0:	4048      	eorgt	r0, r1
    52b2:	4041      	eorgt	r1, r0
    52b4:	bfb8      	it	lt
    52b6:	425b      	neglt	r3, r3
    52b8:	2b19      	cmp	r3, #25
    52ba:	bf88      	it	hi
    52bc:	4770      	bxhi	lr
    52be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    52c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    52c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    52ca:	bf18      	it	ne
    52cc:	4240      	negne	r0, r0
    52ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    52d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    52d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    52da:	bf18      	it	ne
    52dc:	4249      	negne	r1, r1
    52de:	ea92 0f03 	teq	r2, r3
    52e2:	d03f      	beq.n	5364 <__addsf3+0xd8>
    52e4:	f1a2 0201 	sub.w	r2, r2, #1
    52e8:	fa41 fc03 	asr.w	ip, r1, r3
    52ec:	eb10 000c 	adds.w	r0, r0, ip
    52f0:	f1c3 0320 	rsb	r3, r3, #32
    52f4:	fa01 f103 	lsl.w	r1, r1, r3
    52f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    52fc:	d502      	bpl.n	5304 <__addsf3+0x78>
    52fe:	4249      	negs	r1, r1
    5300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    5304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5308:	d313      	bcc.n	5332 <__addsf3+0xa6>
    530a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    530e:	d306      	bcc.n	531e <__addsf3+0x92>
    5310:	0840      	lsrs	r0, r0, #1
    5312:	ea4f 0131 	mov.w	r1, r1, rrx
    5316:	f102 0201 	add.w	r2, r2, #1
    531a:	2afe      	cmp	r2, #254	; 0xfe
    531c:	d251      	bcs.n	53c2 <__addsf3+0x136>
    531e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    5322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    5326:	bf08      	it	eq
    5328:	f020 0001 	biceq.w	r0, r0, #1
    532c:	ea40 0003 	orr.w	r0, r0, r3
    5330:	4770      	bx	lr
    5332:	0049      	lsls	r1, r1, #1
    5334:	eb40 0000 	adc.w	r0, r0, r0
    5338:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    533c:	f1a2 0201 	sub.w	r2, r2, #1
    5340:	d1ed      	bne.n	531e <__addsf3+0x92>
    5342:	fab0 fc80 	clz	ip, r0
    5346:	f1ac 0c08 	sub.w	ip, ip, #8
    534a:	ebb2 020c 	subs.w	r2, r2, ip
    534e:	fa00 f00c 	lsl.w	r0, r0, ip
    5352:	bfaa      	itet	ge
    5354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    5358:	4252      	neglt	r2, r2
    535a:	4318      	orrge	r0, r3
    535c:	bfbc      	itt	lt
    535e:	40d0      	lsrlt	r0, r2
    5360:	4318      	orrlt	r0, r3
    5362:	4770      	bx	lr
    5364:	f092 0f00 	teq	r2, #0
    5368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    536c:	bf06      	itte	eq
    536e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    5372:	3201      	addeq	r2, #1
    5374:	3b01      	subne	r3, #1
    5376:	e7b5      	b.n	52e4 <__addsf3+0x58>
    5378:	ea4f 0341 	mov.w	r3, r1, lsl #1
    537c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5380:	bf18      	it	ne
    5382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    5386:	d021      	beq.n	53cc <__addsf3+0x140>
    5388:	ea92 0f03 	teq	r2, r3
    538c:	d004      	beq.n	5398 <__addsf3+0x10c>
    538e:	f092 0f00 	teq	r2, #0
    5392:	bf08      	it	eq
    5394:	4608      	moveq	r0, r1
    5396:	4770      	bx	lr
    5398:	ea90 0f01 	teq	r0, r1
    539c:	bf1c      	itt	ne
    539e:	2000      	movne	r0, #0
    53a0:	4770      	bxne	lr
    53a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    53a6:	d104      	bne.n	53b2 <__addsf3+0x126>
    53a8:	0040      	lsls	r0, r0, #1
    53aa:	bf28      	it	cs
    53ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    53b0:	4770      	bx	lr
    53b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    53b6:	bf3c      	itt	cc
    53b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    53bc:	4770      	bxcc	lr
    53be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    53c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    53c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    53ca:	4770      	bx	lr
    53cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
    53d0:	bf16      	itet	ne
    53d2:	4608      	movne	r0, r1
    53d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    53d8:	4601      	movne	r1, r0
    53da:	0242      	lsls	r2, r0, #9
    53dc:	bf06      	itte	eq
    53de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    53e2:	ea90 0f01 	teqeq	r0, r1
    53e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    53ea:	4770      	bx	lr

000053ec <__aeabi_ui2f>:
    53ec:	f04f 0300 	mov.w	r3, #0
    53f0:	e004      	b.n	53fc <__aeabi_i2f+0x8>
    53f2:	bf00      	nop

000053f4 <__aeabi_i2f>:
    53f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    53f8:	bf48      	it	mi
    53fa:	4240      	negmi	r0, r0
    53fc:	ea5f 0c00 	movs.w	ip, r0
    5400:	bf08      	it	eq
    5402:	4770      	bxeq	lr
    5404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    5408:	4601      	mov	r1, r0
    540a:	f04f 0000 	mov.w	r0, #0
    540e:	e01c      	b.n	544a <__aeabi_l2f+0x2a>

00005410 <__aeabi_ul2f>:
    5410:	ea50 0201 	orrs.w	r2, r0, r1
    5414:	bf08      	it	eq
    5416:	4770      	bxeq	lr
    5418:	f04f 0300 	mov.w	r3, #0
    541c:	e00a      	b.n	5434 <__aeabi_l2f+0x14>
    541e:	bf00      	nop

00005420 <__aeabi_l2f>:
    5420:	ea50 0201 	orrs.w	r2, r0, r1
    5424:	bf08      	it	eq
    5426:	4770      	bxeq	lr
    5428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    542c:	d502      	bpl.n	5434 <__aeabi_l2f+0x14>
    542e:	4240      	negs	r0, r0
    5430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5434:	ea5f 0c01 	movs.w	ip, r1
    5438:	bf02      	ittt	eq
    543a:	4684      	moveq	ip, r0
    543c:	4601      	moveq	r1, r0
    543e:	2000      	moveq	r0, #0
    5440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    5444:	bf08      	it	eq
    5446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    544a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    544e:	fabc f28c 	clz	r2, ip
    5452:	3a08      	subs	r2, #8
    5454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    5458:	db10      	blt.n	547c <__aeabi_l2f+0x5c>
    545a:	fa01 fc02 	lsl.w	ip, r1, r2
    545e:	4463      	add	r3, ip
    5460:	fa00 fc02 	lsl.w	ip, r0, r2
    5464:	f1c2 0220 	rsb	r2, r2, #32
    5468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    546c:	fa20 f202 	lsr.w	r2, r0, r2
    5470:	eb43 0002 	adc.w	r0, r3, r2
    5474:	bf08      	it	eq
    5476:	f020 0001 	biceq.w	r0, r0, #1
    547a:	4770      	bx	lr
    547c:	f102 0220 	add.w	r2, r2, #32
    5480:	fa01 fc02 	lsl.w	ip, r1, r2
    5484:	f1c2 0220 	rsb	r2, r2, #32
    5488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    548c:	fa21 f202 	lsr.w	r2, r1, r2
    5490:	eb43 0002 	adc.w	r0, r3, r2
    5494:	bf08      	it	eq
    5496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    549a:	4770      	bx	lr

0000549c <__aeabi_uldivmod>:
    549c:	b953      	cbnz	r3, 54b4 <__aeabi_uldivmod+0x18>
    549e:	b94a      	cbnz	r2, 54b4 <__aeabi_uldivmod+0x18>
    54a0:	2900      	cmp	r1, #0
    54a2:	bf08      	it	eq
    54a4:	2800      	cmpeq	r0, #0
    54a6:	bf1c      	itt	ne
    54a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    54ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    54b0:	f001 b8f8 	b.w	66a4 <__aeabi_idiv0>
    54b4:	f1ad 0c08 	sub.w	ip, sp, #8
    54b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    54bc:	f000 f806 	bl	54cc <__udivmoddi4>
    54c0:	f8dd e004 	ldr.w	lr, [sp, #4]
    54c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    54c8:	b004      	add	sp, #16
    54ca:	4770      	bx	lr

000054cc <__udivmoddi4>:
    54cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54d0:	9e08      	ldr	r6, [sp, #32]
    54d2:	4604      	mov	r4, r0
    54d4:	4688      	mov	r8, r1
    54d6:	2b00      	cmp	r3, #0
    54d8:	d14b      	bne.n	5572 <__udivmoddi4+0xa6>
    54da:	428a      	cmp	r2, r1
    54dc:	4615      	mov	r5, r2
    54de:	d967      	bls.n	55b0 <__udivmoddi4+0xe4>
    54e0:	fab2 f282 	clz	r2, r2
    54e4:	b14a      	cbz	r2, 54fa <__udivmoddi4+0x2e>
    54e6:	f1c2 0720 	rsb	r7, r2, #32
    54ea:	fa01 f302 	lsl.w	r3, r1, r2
    54ee:	fa20 f707 	lsr.w	r7, r0, r7
    54f2:	4095      	lsls	r5, r2
    54f4:	ea47 0803 	orr.w	r8, r7, r3
    54f8:	4094      	lsls	r4, r2
    54fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    54fe:	0c23      	lsrs	r3, r4, #16
    5500:	fbb8 f7fe 	udiv	r7, r8, lr
    5504:	fa1f fc85 	uxth.w	ip, r5
    5508:	fb0e 8817 	mls	r8, lr, r7, r8
    550c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    5510:	fb07 f10c 	mul.w	r1, r7, ip
    5514:	4299      	cmp	r1, r3
    5516:	d909      	bls.n	552c <__udivmoddi4+0x60>
    5518:	18eb      	adds	r3, r5, r3
    551a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    551e:	f080 811b 	bcs.w	5758 <__udivmoddi4+0x28c>
    5522:	4299      	cmp	r1, r3
    5524:	f240 8118 	bls.w	5758 <__udivmoddi4+0x28c>
    5528:	3f02      	subs	r7, #2
    552a:	442b      	add	r3, r5
    552c:	1a5b      	subs	r3, r3, r1
    552e:	b2a4      	uxth	r4, r4
    5530:	fbb3 f0fe 	udiv	r0, r3, lr
    5534:	fb0e 3310 	mls	r3, lr, r0, r3
    5538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    553c:	fb00 fc0c 	mul.w	ip, r0, ip
    5540:	45a4      	cmp	ip, r4
    5542:	d909      	bls.n	5558 <__udivmoddi4+0x8c>
    5544:	192c      	adds	r4, r5, r4
    5546:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    554a:	f080 8107 	bcs.w	575c <__udivmoddi4+0x290>
    554e:	45a4      	cmp	ip, r4
    5550:	f240 8104 	bls.w	575c <__udivmoddi4+0x290>
    5554:	3802      	subs	r0, #2
    5556:	442c      	add	r4, r5
    5558:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    555c:	eba4 040c 	sub.w	r4, r4, ip
    5560:	2700      	movs	r7, #0
    5562:	b11e      	cbz	r6, 556c <__udivmoddi4+0xa0>
    5564:	40d4      	lsrs	r4, r2
    5566:	2300      	movs	r3, #0
    5568:	e9c6 4300 	strd	r4, r3, [r6]
    556c:	4639      	mov	r1, r7
    556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5572:	428b      	cmp	r3, r1
    5574:	d909      	bls.n	558a <__udivmoddi4+0xbe>
    5576:	2e00      	cmp	r6, #0
    5578:	f000 80eb 	beq.w	5752 <__udivmoddi4+0x286>
    557c:	2700      	movs	r7, #0
    557e:	e9c6 0100 	strd	r0, r1, [r6]
    5582:	4638      	mov	r0, r7
    5584:	4639      	mov	r1, r7
    5586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    558a:	fab3 f783 	clz	r7, r3
    558e:	2f00      	cmp	r7, #0
    5590:	d147      	bne.n	5622 <__udivmoddi4+0x156>
    5592:	428b      	cmp	r3, r1
    5594:	d302      	bcc.n	559c <__udivmoddi4+0xd0>
    5596:	4282      	cmp	r2, r0
    5598:	f200 80fa 	bhi.w	5790 <__udivmoddi4+0x2c4>
    559c:	1a84      	subs	r4, r0, r2
    559e:	eb61 0303 	sbc.w	r3, r1, r3
    55a2:	2001      	movs	r0, #1
    55a4:	4698      	mov	r8, r3
    55a6:	2e00      	cmp	r6, #0
    55a8:	d0e0      	beq.n	556c <__udivmoddi4+0xa0>
    55aa:	e9c6 4800 	strd	r4, r8, [r6]
    55ae:	e7dd      	b.n	556c <__udivmoddi4+0xa0>
    55b0:	b902      	cbnz	r2, 55b4 <__udivmoddi4+0xe8>
    55b2:	deff      	udf	#255	; 0xff
    55b4:	fab2 f282 	clz	r2, r2
    55b8:	2a00      	cmp	r2, #0
    55ba:	f040 808f 	bne.w	56dc <__udivmoddi4+0x210>
    55be:	1b49      	subs	r1, r1, r5
    55c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    55c4:	fa1f f885 	uxth.w	r8, r5
    55c8:	2701      	movs	r7, #1
    55ca:	fbb1 fcfe 	udiv	ip, r1, lr
    55ce:	0c23      	lsrs	r3, r4, #16
    55d0:	fb0e 111c 	mls	r1, lr, ip, r1
    55d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    55d8:	fb08 f10c 	mul.w	r1, r8, ip
    55dc:	4299      	cmp	r1, r3
    55de:	d907      	bls.n	55f0 <__udivmoddi4+0x124>
    55e0:	18eb      	adds	r3, r5, r3
    55e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    55e6:	d202      	bcs.n	55ee <__udivmoddi4+0x122>
    55e8:	4299      	cmp	r1, r3
    55ea:	f200 80cd 	bhi.w	5788 <__udivmoddi4+0x2bc>
    55ee:	4684      	mov	ip, r0
    55f0:	1a59      	subs	r1, r3, r1
    55f2:	b2a3      	uxth	r3, r4
    55f4:	fbb1 f0fe 	udiv	r0, r1, lr
    55f8:	fb0e 1410 	mls	r4, lr, r0, r1
    55fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    5600:	fb08 f800 	mul.w	r8, r8, r0
    5604:	45a0      	cmp	r8, r4
    5606:	d907      	bls.n	5618 <__udivmoddi4+0x14c>
    5608:	192c      	adds	r4, r5, r4
    560a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    560e:	d202      	bcs.n	5616 <__udivmoddi4+0x14a>
    5610:	45a0      	cmp	r8, r4
    5612:	f200 80b6 	bhi.w	5782 <__udivmoddi4+0x2b6>
    5616:	4618      	mov	r0, r3
    5618:	eba4 0408 	sub.w	r4, r4, r8
    561c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    5620:	e79f      	b.n	5562 <__udivmoddi4+0x96>
    5622:	f1c7 0c20 	rsb	ip, r7, #32
    5626:	40bb      	lsls	r3, r7
    5628:	fa22 fe0c 	lsr.w	lr, r2, ip
    562c:	ea4e 0e03 	orr.w	lr, lr, r3
    5630:	fa01 f407 	lsl.w	r4, r1, r7
    5634:	fa20 f50c 	lsr.w	r5, r0, ip
    5638:	fa21 f30c 	lsr.w	r3, r1, ip
    563c:	ea4f 481e 	mov.w	r8, lr, lsr #16
    5640:	4325      	orrs	r5, r4
    5642:	fbb3 f9f8 	udiv	r9, r3, r8
    5646:	0c2c      	lsrs	r4, r5, #16
    5648:	fb08 3319 	mls	r3, r8, r9, r3
    564c:	fa1f fa8e 	uxth.w	sl, lr
    5650:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    5654:	fb09 f40a 	mul.w	r4, r9, sl
    5658:	429c      	cmp	r4, r3
    565a:	fa02 f207 	lsl.w	r2, r2, r7
    565e:	fa00 f107 	lsl.w	r1, r0, r7
    5662:	d90b      	bls.n	567c <__udivmoddi4+0x1b0>
    5664:	eb1e 0303 	adds.w	r3, lr, r3
    5668:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    566c:	f080 8087 	bcs.w	577e <__udivmoddi4+0x2b2>
    5670:	429c      	cmp	r4, r3
    5672:	f240 8084 	bls.w	577e <__udivmoddi4+0x2b2>
    5676:	f1a9 0902 	sub.w	r9, r9, #2
    567a:	4473      	add	r3, lr
    567c:	1b1b      	subs	r3, r3, r4
    567e:	b2ad      	uxth	r5, r5
    5680:	fbb3 f0f8 	udiv	r0, r3, r8
    5684:	fb08 3310 	mls	r3, r8, r0, r3
    5688:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    568c:	fb00 fa0a 	mul.w	sl, r0, sl
    5690:	45a2      	cmp	sl, r4
    5692:	d908      	bls.n	56a6 <__udivmoddi4+0x1da>
    5694:	eb1e 0404 	adds.w	r4, lr, r4
    5698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    569c:	d26b      	bcs.n	5776 <__udivmoddi4+0x2aa>
    569e:	45a2      	cmp	sl, r4
    56a0:	d969      	bls.n	5776 <__udivmoddi4+0x2aa>
    56a2:	3802      	subs	r0, #2
    56a4:	4474      	add	r4, lr
    56a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    56aa:	fba0 8902 	umull	r8, r9, r0, r2
    56ae:	eba4 040a 	sub.w	r4, r4, sl
    56b2:	454c      	cmp	r4, r9
    56b4:	46c2      	mov	sl, r8
    56b6:	464b      	mov	r3, r9
    56b8:	d354      	bcc.n	5764 <__udivmoddi4+0x298>
    56ba:	d051      	beq.n	5760 <__udivmoddi4+0x294>
    56bc:	2e00      	cmp	r6, #0
    56be:	d069      	beq.n	5794 <__udivmoddi4+0x2c8>
    56c0:	ebb1 050a 	subs.w	r5, r1, sl
    56c4:	eb64 0403 	sbc.w	r4, r4, r3
    56c8:	fa04 fc0c 	lsl.w	ip, r4, ip
    56cc:	40fd      	lsrs	r5, r7
    56ce:	40fc      	lsrs	r4, r7
    56d0:	ea4c 0505 	orr.w	r5, ip, r5
    56d4:	e9c6 5400 	strd	r5, r4, [r6]
    56d8:	2700      	movs	r7, #0
    56da:	e747      	b.n	556c <__udivmoddi4+0xa0>
    56dc:	f1c2 0320 	rsb	r3, r2, #32
    56e0:	fa20 f703 	lsr.w	r7, r0, r3
    56e4:	4095      	lsls	r5, r2
    56e6:	fa01 f002 	lsl.w	r0, r1, r2
    56ea:	fa21 f303 	lsr.w	r3, r1, r3
    56ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    56f2:	4338      	orrs	r0, r7
    56f4:	0c01      	lsrs	r1, r0, #16
    56f6:	fbb3 f7fe 	udiv	r7, r3, lr
    56fa:	fa1f f885 	uxth.w	r8, r5
    56fe:	fb0e 3317 	mls	r3, lr, r7, r3
    5702:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    5706:	fb07 f308 	mul.w	r3, r7, r8
    570a:	428b      	cmp	r3, r1
    570c:	fa04 f402 	lsl.w	r4, r4, r2
    5710:	d907      	bls.n	5722 <__udivmoddi4+0x256>
    5712:	1869      	adds	r1, r5, r1
    5714:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    5718:	d22f      	bcs.n	577a <__udivmoddi4+0x2ae>
    571a:	428b      	cmp	r3, r1
    571c:	d92d      	bls.n	577a <__udivmoddi4+0x2ae>
    571e:	3f02      	subs	r7, #2
    5720:	4429      	add	r1, r5
    5722:	1acb      	subs	r3, r1, r3
    5724:	b281      	uxth	r1, r0
    5726:	fbb3 f0fe 	udiv	r0, r3, lr
    572a:	fb0e 3310 	mls	r3, lr, r0, r3
    572e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    5732:	fb00 f308 	mul.w	r3, r0, r8
    5736:	428b      	cmp	r3, r1
    5738:	d907      	bls.n	574a <__udivmoddi4+0x27e>
    573a:	1869      	adds	r1, r5, r1
    573c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    5740:	d217      	bcs.n	5772 <__udivmoddi4+0x2a6>
    5742:	428b      	cmp	r3, r1
    5744:	d915      	bls.n	5772 <__udivmoddi4+0x2a6>
    5746:	3802      	subs	r0, #2
    5748:	4429      	add	r1, r5
    574a:	1ac9      	subs	r1, r1, r3
    574c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    5750:	e73b      	b.n	55ca <__udivmoddi4+0xfe>
    5752:	4637      	mov	r7, r6
    5754:	4630      	mov	r0, r6
    5756:	e709      	b.n	556c <__udivmoddi4+0xa0>
    5758:	4607      	mov	r7, r0
    575a:	e6e7      	b.n	552c <__udivmoddi4+0x60>
    575c:	4618      	mov	r0, r3
    575e:	e6fb      	b.n	5558 <__udivmoddi4+0x8c>
    5760:	4541      	cmp	r1, r8
    5762:	d2ab      	bcs.n	56bc <__udivmoddi4+0x1f0>
    5764:	ebb8 0a02 	subs.w	sl, r8, r2
    5768:	eb69 020e 	sbc.w	r2, r9, lr
    576c:	3801      	subs	r0, #1
    576e:	4613      	mov	r3, r2
    5770:	e7a4      	b.n	56bc <__udivmoddi4+0x1f0>
    5772:	4660      	mov	r0, ip
    5774:	e7e9      	b.n	574a <__udivmoddi4+0x27e>
    5776:	4618      	mov	r0, r3
    5778:	e795      	b.n	56a6 <__udivmoddi4+0x1da>
    577a:	4667      	mov	r7, ip
    577c:	e7d1      	b.n	5722 <__udivmoddi4+0x256>
    577e:	4681      	mov	r9, r0
    5780:	e77c      	b.n	567c <__udivmoddi4+0x1b0>
    5782:	3802      	subs	r0, #2
    5784:	442c      	add	r4, r5
    5786:	e747      	b.n	5618 <__udivmoddi4+0x14c>
    5788:	f1ac 0c02 	sub.w	ip, ip, #2
    578c:	442b      	add	r3, r5
    578e:	e72f      	b.n	55f0 <__udivmoddi4+0x124>
    5790:	4638      	mov	r0, r7
    5792:	e708      	b.n	55a6 <__udivmoddi4+0xda>
    5794:	4637      	mov	r7, r6
    5796:	e6e9      	b.n	556c <__udivmoddi4+0xa0>

00005798 <selfrel_offset31>:
    5798:	6803      	ldr	r3, [r0, #0]
    579a:	005a      	lsls	r2, r3, #1
    579c:	bf4c      	ite	mi
    579e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    57a2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    57a6:	4418      	add	r0, r3
    57a8:	4770      	bx	lr
    57aa:	bf00      	nop

000057ac <search_EIT_table>:
    57ac:	b361      	cbz	r1, 5808 <search_EIT_table+0x5c>
    57ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57b2:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    57b6:	4690      	mov	r8, r2
    57b8:	4606      	mov	r6, r0
    57ba:	46d1      	mov	r9, sl
    57bc:	2700      	movs	r7, #0
    57be:	eb07 0409 	add.w	r4, r7, r9
    57c2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    57c6:	1064      	asrs	r4, r4, #1
    57c8:	00e5      	lsls	r5, r4, #3
    57ca:	1971      	adds	r1, r6, r5
    57cc:	4608      	mov	r0, r1
    57ce:	f7ff ffe3 	bl	5798 <selfrel_offset31>
    57d2:	45a2      	cmp	sl, r4
    57d4:	4683      	mov	fp, r0
    57d6:	f105 0008 	add.w	r0, r5, #8
    57da:	4430      	add	r0, r6
    57dc:	d009      	beq.n	57f2 <search_EIT_table+0x46>
    57de:	f7ff ffdb 	bl	5798 <selfrel_offset31>
    57e2:	45c3      	cmp	fp, r8
    57e4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    57e8:	d805      	bhi.n	57f6 <search_EIT_table+0x4a>
    57ea:	4540      	cmp	r0, r8
    57ec:	d209      	bcs.n	5802 <search_EIT_table+0x56>
    57ee:	1c67      	adds	r7, r4, #1
    57f0:	e7e5      	b.n	57be <search_EIT_table+0x12>
    57f2:	45c3      	cmp	fp, r8
    57f4:	d905      	bls.n	5802 <search_EIT_table+0x56>
    57f6:	42a7      	cmp	r7, r4
    57f8:	d002      	beq.n	5800 <search_EIT_table+0x54>
    57fa:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    57fe:	e7de      	b.n	57be <search_EIT_table+0x12>
    5800:	2100      	movs	r1, #0
    5802:	4608      	mov	r0, r1
    5804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5808:	4608      	mov	r0, r1
    580a:	4770      	bx	lr

0000580c <__gnu_unwind_get_pr_addr>:
    580c:	2801      	cmp	r0, #1
    580e:	d007      	beq.n	5820 <__gnu_unwind_get_pr_addr+0x14>
    5810:	2802      	cmp	r0, #2
    5812:	d007      	beq.n	5824 <__gnu_unwind_get_pr_addr+0x18>
    5814:	4b04      	ldr	r3, [pc, #16]	; (5828 <__gnu_unwind_get_pr_addr+0x1c>)
    5816:	2800      	cmp	r0, #0
    5818:	bf0c      	ite	eq
    581a:	4618      	moveq	r0, r3
    581c:	2000      	movne	r0, #0
    581e:	4770      	bx	lr
    5820:	4802      	ldr	r0, [pc, #8]	; (582c <__gnu_unwind_get_pr_addr+0x20>)
    5822:	4770      	bx	lr
    5824:	4802      	ldr	r0, [pc, #8]	; (5830 <__gnu_unwind_get_pr_addr+0x24>)
    5826:	4770      	bx	lr
    5828:	00005ef9 	.word	0x00005ef9
    582c:	00005efd 	.word	0x00005efd
    5830:	00005f01 	.word	0x00005f01

00005834 <get_eit_entry>:
    5834:	b530      	push	{r4, r5, lr}
    5836:	4b25      	ldr	r3, [pc, #148]	; (58cc <get_eit_entry+0x98>)
    5838:	b083      	sub	sp, #12
    583a:	4604      	mov	r4, r0
    583c:	1e8d      	subs	r5, r1, #2
    583e:	b34b      	cbz	r3, 5894 <get_eit_entry+0x60>
    5840:	a901      	add	r1, sp, #4
    5842:	4628      	mov	r0, r5
    5844:	f3af 8000 	nop.w
    5848:	b1f0      	cbz	r0, 5888 <get_eit_entry+0x54>
    584a:	9901      	ldr	r1, [sp, #4]
    584c:	462a      	mov	r2, r5
    584e:	f7ff ffad 	bl	57ac <search_EIT_table>
    5852:	4601      	mov	r1, r0
    5854:	b1c0      	cbz	r0, 5888 <get_eit_entry+0x54>
    5856:	f7ff ff9f 	bl	5798 <selfrel_offset31>
    585a:	684b      	ldr	r3, [r1, #4]
    585c:	64a0      	str	r0, [r4, #72]	; 0x48
    585e:	2b01      	cmp	r3, #1
    5860:	d02e      	beq.n	58c0 <get_eit_entry+0x8c>
    5862:	2b00      	cmp	r3, #0
    5864:	f101 0004 	add.w	r0, r1, #4
    5868:	db26      	blt.n	58b8 <get_eit_entry+0x84>
    586a:	f7ff ff95 	bl	5798 <selfrel_offset31>
    586e:	2300      	movs	r3, #0
    5870:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5874:	6803      	ldr	r3, [r0, #0]
    5876:	2b00      	cmp	r3, #0
    5878:	db12      	blt.n	58a0 <get_eit_entry+0x6c>
    587a:	f7ff ff8d 	bl	5798 <selfrel_offset31>
    587e:	2300      	movs	r3, #0
    5880:	6120      	str	r0, [r4, #16]
    5882:	4618      	mov	r0, r3
    5884:	b003      	add	sp, #12
    5886:	bd30      	pop	{r4, r5, pc}
    5888:	2300      	movs	r3, #0
    588a:	6123      	str	r3, [r4, #16]
    588c:	2309      	movs	r3, #9
    588e:	4618      	mov	r0, r3
    5890:	b003      	add	sp, #12
    5892:	bd30      	pop	{r4, r5, pc}
    5894:	490e      	ldr	r1, [pc, #56]	; (58d0 <get_eit_entry+0x9c>)
    5896:	480f      	ldr	r0, [pc, #60]	; (58d4 <get_eit_entry+0xa0>)
    5898:	1a09      	subs	r1, r1, r0
    589a:	10c9      	asrs	r1, r1, #3
    589c:	9101      	str	r1, [sp, #4]
    589e:	e7d5      	b.n	584c <get_eit_entry+0x18>
    58a0:	f3c3 6003 	ubfx	r0, r3, #24, #4
    58a4:	f7ff ffb2 	bl	580c <__gnu_unwind_get_pr_addr>
    58a8:	2800      	cmp	r0, #0
    58aa:	bf14      	ite	ne
    58ac:	2300      	movne	r3, #0
    58ae:	2309      	moveq	r3, #9
    58b0:	6120      	str	r0, [r4, #16]
    58b2:	4618      	mov	r0, r3
    58b4:	b003      	add	sp, #12
    58b6:	bd30      	pop	{r4, r5, pc}
    58b8:	2301      	movs	r3, #1
    58ba:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    58be:	e7d9      	b.n	5874 <get_eit_entry+0x40>
    58c0:	2300      	movs	r3, #0
    58c2:	6123      	str	r3, [r4, #16]
    58c4:	2305      	movs	r3, #5
    58c6:	4618      	mov	r0, r3
    58c8:	b003      	add	sp, #12
    58ca:	bd30      	pop	{r4, r5, pc}
    58cc:	00000000 	.word	0x00000000
    58d0:	00007e44 	.word	0x00007e44
    58d4:	00007d8c 	.word	0x00007d8c

000058d8 <restore_non_core_regs>:
    58d8:	6803      	ldr	r3, [r0, #0]
    58da:	07da      	lsls	r2, r3, #31
    58dc:	b510      	push	{r4, lr}
    58de:	4604      	mov	r4, r0
    58e0:	d406      	bmi.n	58f0 <restore_non_core_regs+0x18>
    58e2:	079b      	lsls	r3, r3, #30
    58e4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    58e8:	d509      	bpl.n	58fe <restore_non_core_regs+0x26>
    58ea:	f000 fc5f 	bl	61ac <__gnu_Unwind_Restore_VFP_D>
    58ee:	6823      	ldr	r3, [r4, #0]
    58f0:	0759      	lsls	r1, r3, #29
    58f2:	d509      	bpl.n	5908 <restore_non_core_regs+0x30>
    58f4:	071a      	lsls	r2, r3, #28
    58f6:	d50e      	bpl.n	5916 <restore_non_core_regs+0x3e>
    58f8:	06db      	lsls	r3, r3, #27
    58fa:	d513      	bpl.n	5924 <restore_non_core_regs+0x4c>
    58fc:	bd10      	pop	{r4, pc}
    58fe:	f000 fc4d 	bl	619c <__gnu_Unwind_Restore_VFP>
    5902:	6823      	ldr	r3, [r4, #0]
    5904:	0759      	lsls	r1, r3, #29
    5906:	d4f5      	bmi.n	58f4 <restore_non_core_regs+0x1c>
    5908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    590c:	f000 fc56 	bl	61bc <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5910:	6823      	ldr	r3, [r4, #0]
    5912:	071a      	lsls	r2, r3, #28
    5914:	d4f0      	bmi.n	58f8 <restore_non_core_regs+0x20>
    5916:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    591a:	f000 fc57 	bl	61cc <__gnu_Unwind_Restore_WMMXD>
    591e:	6823      	ldr	r3, [r4, #0]
    5920:	06db      	lsls	r3, r3, #27
    5922:	d4eb      	bmi.n	58fc <restore_non_core_regs+0x24>
    5924:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    5928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    592c:	f000 bc92 	b.w	6254 <__gnu_Unwind_Restore_WMMXC>

00005930 <_Unwind_decode_typeinfo_ptr.isra.0>:
    5930:	6803      	ldr	r3, [r0, #0]
    5932:	b103      	cbz	r3, 5936 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    5934:	4403      	add	r3, r0
    5936:	4618      	mov	r0, r3
    5938:	4770      	bx	lr
    593a:	bf00      	nop

0000593c <__gnu_unwind_24bit.isra.1>:
    593c:	2009      	movs	r0, #9
    593e:	4770      	bx	lr

00005940 <_Unwind_DebugHook>:
    5940:	4770      	bx	lr
    5942:	bf00      	nop

00005944 <unwind_phase2>:
    5944:	b570      	push	{r4, r5, r6, lr}
    5946:	4604      	mov	r4, r0
    5948:	460d      	mov	r5, r1
    594a:	e008      	b.n	595e <unwind_phase2+0x1a>
    594c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    594e:	6163      	str	r3, [r4, #20]
    5950:	462a      	mov	r2, r5
    5952:	6923      	ldr	r3, [r4, #16]
    5954:	4621      	mov	r1, r4
    5956:	2001      	movs	r0, #1
    5958:	4798      	blx	r3
    595a:	2808      	cmp	r0, #8
    595c:	d108      	bne.n	5970 <unwind_phase2+0x2c>
    595e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5960:	4620      	mov	r0, r4
    5962:	f7ff ff67 	bl	5834 <get_eit_entry>
    5966:	4606      	mov	r6, r0
    5968:	2800      	cmp	r0, #0
    596a:	d0ef      	beq.n	594c <unwind_phase2+0x8>
    596c:	f000 fe9c 	bl	66a8 <abort>
    5970:	2807      	cmp	r0, #7
    5972:	d1fb      	bne.n	596c <unwind_phase2+0x28>
    5974:	4630      	mov	r0, r6
    5976:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5978:	f7ff ffe2 	bl	5940 <_Unwind_DebugHook>
    597c:	1d28      	adds	r0, r5, #4
    597e:	f000 fc01 	bl	6184 <__restore_core_regs>
    5982:	bf00      	nop

00005984 <unwind_phase2_forced>:
    5984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5988:	1d0c      	adds	r4, r1, #4
    598a:	4605      	mov	r5, r0
    598c:	4617      	mov	r7, r2
    598e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5990:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    5994:	ae03      	add	r6, sp, #12
    5996:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    599a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    599c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    599e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    59a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    59a4:	ac02      	add	r4, sp, #8
    59a6:	f8d5 800c 	ldr.w	r8, [r5, #12]
    59aa:	f8d5 9018 	ldr.w	r9, [r5, #24]
    59ae:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    59b2:	2300      	movs	r3, #0
    59b4:	6023      	str	r3, [r4, #0]
    59b6:	e021      	b.n	59fc <unwind_phase2_forced+0x78>
    59b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    59ba:	616b      	str	r3, [r5, #20]
    59bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    59c0:	4621      	mov	r1, r4
    59c2:	a87a      	add	r0, sp, #488	; 0x1e8
    59c4:	f000 fe9c 	bl	6700 <memcpy>
    59c8:	692b      	ldr	r3, [r5, #16]
    59ca:	aa7a      	add	r2, sp, #488	; 0x1e8
    59cc:	4629      	mov	r1, r5
    59ce:	4630      	mov	r0, r6
    59d0:	4798      	blx	r3
    59d2:	9b88      	ldr	r3, [sp, #544]	; 0x220
    59d4:	e9cd 4900 	strd	r4, r9, [sp]
    59d8:	4682      	mov	sl, r0
    59da:	6463      	str	r3, [r4, #68]	; 0x44
    59dc:	4631      	mov	r1, r6
    59de:	462b      	mov	r3, r5
    59e0:	462a      	mov	r2, r5
    59e2:	2001      	movs	r0, #1
    59e4:	47c0      	blx	r8
    59e6:	4607      	mov	r7, r0
    59e8:	b9f8      	cbnz	r0, 5a2a <unwind_phase2_forced+0xa6>
    59ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    59ee:	a97a      	add	r1, sp, #488	; 0x1e8
    59f0:	4620      	mov	r0, r4
    59f2:	f000 fe85 	bl	6700 <memcpy>
    59f6:	f1ba 0f08 	cmp.w	sl, #8
    59fa:	d11c      	bne.n	5a36 <unwind_phase2_forced+0xb2>
    59fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    59fe:	4628      	mov	r0, r5
    5a00:	f7ff ff18 	bl	5834 <get_eit_entry>
    5a04:	2f00      	cmp	r7, #0
    5a06:	bf08      	it	eq
    5a08:	2609      	moveq	r6, #9
    5a0a:	4607      	mov	r7, r0
    5a0c:	bf18      	it	ne
    5a0e:	260a      	movne	r6, #10
    5a10:	2800      	cmp	r0, #0
    5a12:	d0d1      	beq.n	59b8 <unwind_phase2_forced+0x34>
    5a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5a16:	f046 0110 	orr.w	r1, r6, #16
    5a1a:	e9cd 4900 	strd	r4, r9, [sp]
    5a1e:	462a      	mov	r2, r5
    5a20:	6463      	str	r3, [r4, #68]	; 0x44
    5a22:	2001      	movs	r0, #1
    5a24:	462b      	mov	r3, r5
    5a26:	47c0      	blx	r8
    5a28:	b100      	cbz	r0, 5a2c <unwind_phase2_forced+0xa8>
    5a2a:	2709      	movs	r7, #9
    5a2c:	4638      	mov	r0, r7
    5a2e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    5a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a36:	f1ba 0f07 	cmp.w	sl, #7
    5a3a:	d1f6      	bne.n	5a2a <unwind_phase2_forced+0xa6>
    5a3c:	4638      	mov	r0, r7
    5a3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5a40:	f7ff ff7e 	bl	5940 <_Unwind_DebugHook>
    5a44:	a803      	add	r0, sp, #12
    5a46:	f000 fb9d 	bl	6184 <__restore_core_regs>
    5a4a:	bf00      	nop

00005a4c <_Unwind_GetCFA>:
    5a4c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    5a4e:	4770      	bx	lr

00005a50 <__gnu_Unwind_RaiseException>:
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a52:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5a54:	640b      	str	r3, [r1, #64]	; 0x40
    5a56:	1d0d      	adds	r5, r1, #4
    5a58:	460f      	mov	r7, r1
    5a5a:	4606      	mov	r6, r0
    5a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5a5e:	b0f9      	sub	sp, #484	; 0x1e4
    5a60:	ac01      	add	r4, sp, #4
    5a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5a6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5a70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5a78:	9500      	str	r5, [sp, #0]
    5a7a:	e006      	b.n	5a8a <__gnu_Unwind_RaiseException+0x3a>
    5a7c:	6933      	ldr	r3, [r6, #16]
    5a7e:	466a      	mov	r2, sp
    5a80:	4631      	mov	r1, r6
    5a82:	4798      	blx	r3
    5a84:	2808      	cmp	r0, #8
    5a86:	4604      	mov	r4, r0
    5a88:	d108      	bne.n	5a9c <__gnu_Unwind_RaiseException+0x4c>
    5a8a:	9910      	ldr	r1, [sp, #64]	; 0x40
    5a8c:	4630      	mov	r0, r6
    5a8e:	f7ff fed1 	bl	5834 <get_eit_entry>
    5a92:	2800      	cmp	r0, #0
    5a94:	d0f2      	beq.n	5a7c <__gnu_Unwind_RaiseException+0x2c>
    5a96:	2009      	movs	r0, #9
    5a98:	b079      	add	sp, #484	; 0x1e4
    5a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a9c:	4668      	mov	r0, sp
    5a9e:	f7ff ff1b 	bl	58d8 <restore_non_core_regs>
    5aa2:	2c06      	cmp	r4, #6
    5aa4:	d1f7      	bne.n	5a96 <__gnu_Unwind_RaiseException+0x46>
    5aa6:	4639      	mov	r1, r7
    5aa8:	4630      	mov	r0, r6
    5aaa:	f7ff ff4b 	bl	5944 <unwind_phase2>
    5aae:	bf00      	nop

00005ab0 <__gnu_Unwind_ForcedUnwind>:
    5ab0:	b430      	push	{r4, r5}
    5ab2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5ab4:	60c1      	str	r1, [r0, #12]
    5ab6:	6182      	str	r2, [r0, #24]
    5ab8:	4619      	mov	r1, r3
    5aba:	641d      	str	r5, [r3, #64]	; 0x40
    5abc:	2200      	movs	r2, #0
    5abe:	bc30      	pop	{r4, r5}
    5ac0:	e760      	b.n	5984 <unwind_phase2_forced>
    5ac2:	bf00      	nop

00005ac4 <__gnu_Unwind_Resume>:
    5ac4:	b570      	push	{r4, r5, r6, lr}
    5ac6:	68c6      	ldr	r6, [r0, #12]
    5ac8:	6943      	ldr	r3, [r0, #20]
    5aca:	640b      	str	r3, [r1, #64]	; 0x40
    5acc:	b9be      	cbnz	r6, 5afe <__gnu_Unwind_Resume+0x3a>
    5ace:	6903      	ldr	r3, [r0, #16]
    5ad0:	460a      	mov	r2, r1
    5ad2:	4604      	mov	r4, r0
    5ad4:	460d      	mov	r5, r1
    5ad6:	4601      	mov	r1, r0
    5ad8:	2002      	movs	r0, #2
    5ada:	4798      	blx	r3
    5adc:	2807      	cmp	r0, #7
    5ade:	d007      	beq.n	5af0 <__gnu_Unwind_Resume+0x2c>
    5ae0:	2808      	cmp	r0, #8
    5ae2:	d103      	bne.n	5aec <__gnu_Unwind_Resume+0x28>
    5ae4:	4629      	mov	r1, r5
    5ae6:	4620      	mov	r0, r4
    5ae8:	f7ff ff2c 	bl	5944 <unwind_phase2>
    5aec:	f000 fddc 	bl	66a8 <abort>
    5af0:	4630      	mov	r0, r6
    5af2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5af4:	f7ff ff24 	bl	5940 <_Unwind_DebugHook>
    5af8:	1d28      	adds	r0, r5, #4
    5afa:	f000 fb43 	bl	6184 <__restore_core_regs>
    5afe:	2201      	movs	r2, #1
    5b00:	f7ff ff40 	bl	5984 <unwind_phase2_forced>
    5b04:	f000 fdd0 	bl	66a8 <abort>

00005b08 <__gnu_Unwind_Resume_or_Rethrow>:
    5b08:	68c2      	ldr	r2, [r0, #12]
    5b0a:	b11a      	cbz	r2, 5b14 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    5b0c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    5b0e:	640a      	str	r2, [r1, #64]	; 0x40
    5b10:	2200      	movs	r2, #0
    5b12:	e737      	b.n	5984 <unwind_phase2_forced>
    5b14:	e79c      	b.n	5a50 <__gnu_Unwind_RaiseException>
    5b16:	bf00      	nop

00005b18 <_Unwind_Complete>:
    5b18:	4770      	bx	lr
    5b1a:	bf00      	nop

00005b1c <_Unwind_DeleteException>:
    5b1c:	6883      	ldr	r3, [r0, #8]
    5b1e:	b113      	cbz	r3, 5b26 <_Unwind_DeleteException+0xa>
    5b20:	4601      	mov	r1, r0
    5b22:	2001      	movs	r0, #1
    5b24:	4718      	bx	r3
    5b26:	4770      	bx	lr

00005b28 <_Unwind_VRS_Get>:
    5b28:	2904      	cmp	r1, #4
    5b2a:	d807      	bhi.n	5b3c <_Unwind_VRS_Get+0x14>
    5b2c:	e8df f001 	tbb	[pc, r1]
    5b30:	08060803 	.word	0x08060803
    5b34:	08          	.byte	0x08
    5b35:	00          	.byte	0x00
    5b36:	b90b      	cbnz	r3, 5b3c <_Unwind_VRS_Get+0x14>
    5b38:	2a0f      	cmp	r2, #15
    5b3a:	d903      	bls.n	5b44 <_Unwind_VRS_Get+0x1c>
    5b3c:	2002      	movs	r0, #2
    5b3e:	4770      	bx	lr
    5b40:	2001      	movs	r0, #1
    5b42:	4770      	bx	lr
    5b44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5b48:	4618      	mov	r0, r3
    5b4a:	6853      	ldr	r3, [r2, #4]
    5b4c:	9a00      	ldr	r2, [sp, #0]
    5b4e:	6013      	str	r3, [r2, #0]
    5b50:	4770      	bx	lr
    5b52:	bf00      	nop

00005b54 <_Unwind_GetGR>:
    5b54:	b510      	push	{r4, lr}
    5b56:	b084      	sub	sp, #16
    5b58:	2300      	movs	r3, #0
    5b5a:	ac03      	add	r4, sp, #12
    5b5c:	460a      	mov	r2, r1
    5b5e:	9400      	str	r4, [sp, #0]
    5b60:	4619      	mov	r1, r3
    5b62:	f7ff ffe1 	bl	5b28 <_Unwind_VRS_Get>
    5b66:	9803      	ldr	r0, [sp, #12]
    5b68:	b004      	add	sp, #16
    5b6a:	bd10      	pop	{r4, pc}

00005b6c <_Unwind_VRS_Set>:
    5b6c:	2904      	cmp	r1, #4
    5b6e:	d807      	bhi.n	5b80 <_Unwind_VRS_Set+0x14>
    5b70:	e8df f001 	tbb	[pc, r1]
    5b74:	08060803 	.word	0x08060803
    5b78:	08          	.byte	0x08
    5b79:	00          	.byte	0x00
    5b7a:	b90b      	cbnz	r3, 5b80 <_Unwind_VRS_Set+0x14>
    5b7c:	2a0f      	cmp	r2, #15
    5b7e:	d903      	bls.n	5b88 <_Unwind_VRS_Set+0x1c>
    5b80:	2002      	movs	r0, #2
    5b82:	4770      	bx	lr
    5b84:	2001      	movs	r0, #1
    5b86:	4770      	bx	lr
    5b88:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    5b8c:	9a00      	ldr	r2, [sp, #0]
    5b8e:	6812      	ldr	r2, [r2, #0]
    5b90:	6042      	str	r2, [r0, #4]
    5b92:	4618      	mov	r0, r3
    5b94:	4770      	bx	lr
    5b96:	bf00      	nop

00005b98 <_Unwind_SetGR>:
    5b98:	b510      	push	{r4, lr}
    5b9a:	b084      	sub	sp, #16
    5b9c:	ac04      	add	r4, sp, #16
    5b9e:	2300      	movs	r3, #0
    5ba0:	f844 2d04 	str.w	r2, [r4, #-4]!
    5ba4:	460a      	mov	r2, r1
    5ba6:	9400      	str	r4, [sp, #0]
    5ba8:	4619      	mov	r1, r3
    5baa:	f7ff ffdf 	bl	5b6c <_Unwind_VRS_Set>
    5bae:	b004      	add	sp, #16
    5bb0:	bd10      	pop	{r4, pc}
    5bb2:	bf00      	nop

00005bb4 <__gnu_Unwind_Backtrace>:
    5bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bb6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    5bb8:	6413      	str	r3, [r2, #64]	; 0x40
    5bba:	1d15      	adds	r5, r2, #4
    5bbc:	4607      	mov	r7, r0
    5bbe:	460e      	mov	r6, r1
    5bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5bc2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    5bc6:	ac17      	add	r4, sp, #92	; 0x5c
    5bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5bd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5bd6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5bde:	9516      	str	r5, [sp, #88]	; 0x58
    5be0:	e010      	b.n	5c04 <__gnu_Unwind_Backtrace+0x50>
    5be2:	a816      	add	r0, sp, #88	; 0x58
    5be4:	f7ff ffd8 	bl	5b98 <_Unwind_SetGR>
    5be8:	4631      	mov	r1, r6
    5bea:	a816      	add	r0, sp, #88	; 0x58
    5bec:	47b8      	blx	r7
    5bee:	aa16      	add	r2, sp, #88	; 0x58
    5bf0:	4669      	mov	r1, sp
    5bf2:	b978      	cbnz	r0, 5c14 <__gnu_Unwind_Backtrace+0x60>
    5bf4:	9b04      	ldr	r3, [sp, #16]
    5bf6:	2008      	movs	r0, #8
    5bf8:	4798      	blx	r3
    5bfa:	2805      	cmp	r0, #5
    5bfc:	4604      	mov	r4, r0
    5bfe:	d00a      	beq.n	5c16 <__gnu_Unwind_Backtrace+0x62>
    5c00:	2809      	cmp	r0, #9
    5c02:	d007      	beq.n	5c14 <__gnu_Unwind_Backtrace+0x60>
    5c04:	9926      	ldr	r1, [sp, #152]	; 0x98
    5c06:	4668      	mov	r0, sp
    5c08:	f7ff fe14 	bl	5834 <get_eit_entry>
    5c0c:	466a      	mov	r2, sp
    5c0e:	210c      	movs	r1, #12
    5c10:	2800      	cmp	r0, #0
    5c12:	d0e6      	beq.n	5be2 <__gnu_Unwind_Backtrace+0x2e>
    5c14:	2409      	movs	r4, #9
    5c16:	a816      	add	r0, sp, #88	; 0x58
    5c18:	f7ff fe5e 	bl	58d8 <restore_non_core_regs>
    5c1c:	4620      	mov	r0, r4
    5c1e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    5c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c24 <__gnu_unwind_pr_common>:
    5c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c28:	460d      	mov	r5, r1
    5c2a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    5c2c:	b089      	sub	sp, #36	; 0x24
    5c2e:	1d0c      	adds	r4, r1, #4
    5c30:	4616      	mov	r6, r2
    5c32:	f000 0b03 	and.w	fp, r0, #3
    5c36:	680a      	ldr	r2, [r1, #0]
    5c38:	9406      	str	r4, [sp, #24]
    5c3a:	461f      	mov	r7, r3
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d068      	beq.n	5d12 <__gnu_unwind_pr_common+0xee>
    5c40:	0c13      	lsrs	r3, r2, #16
    5c42:	b2d9      	uxtb	r1, r3
    5c44:	0412      	lsls	r2, r2, #16
    5c46:	f88d 301d 	strb.w	r3, [sp, #29]
    5c4a:	2302      	movs	r3, #2
    5c4c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    5c50:	9205      	str	r2, [sp, #20]
    5c52:	f88d 301c 	strb.w	r3, [sp, #28]
    5c56:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    5c58:	f1bb 0f02 	cmp.w	fp, #2
    5c5c:	bf08      	it	eq
    5c5e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    5c60:	f013 0301 	ands.w	r3, r3, #1
    5c64:	d146      	bne.n	5cf4 <__gnu_unwind_pr_common+0xd0>
    5c66:	9301      	str	r3, [sp, #4]
    5c68:	f000 0308 	and.w	r3, r0, #8
    5c6c:	9300      	str	r3, [sp, #0]
    5c6e:	f8d4 9000 	ldr.w	r9, [r4]
    5c72:	f1b9 0f00 	cmp.w	r9, #0
    5c76:	f000 80f3 	beq.w	5e60 <__gnu_unwind_pr_common+0x23c>
    5c7a:	2f02      	cmp	r7, #2
    5c7c:	d045      	beq.n	5d0a <__gnu_unwind_pr_common+0xe6>
    5c7e:	f8b4 9000 	ldrh.w	r9, [r4]
    5c82:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    5c86:	3404      	adds	r4, #4
    5c88:	6cab      	ldr	r3, [r5, #72]	; 0x48
    5c8a:	f028 0a01 	bic.w	sl, r8, #1
    5c8e:	210f      	movs	r1, #15
    5c90:	4630      	mov	r0, r6
    5c92:	449a      	add	sl, r3
    5c94:	f7ff ff5e 	bl	5b54 <_Unwind_GetGR>
    5c98:	4582      	cmp	sl, r0
    5c9a:	d834      	bhi.n	5d06 <__gnu_unwind_pr_common+0xe2>
    5c9c:	f029 0301 	bic.w	r3, r9, #1
    5ca0:	4453      	add	r3, sl
    5ca2:	4283      	cmp	r3, r0
    5ca4:	bf94      	ite	ls
    5ca6:	2000      	movls	r0, #0
    5ca8:	2001      	movhi	r0, #1
    5caa:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5cae:	f008 0802 	and.w	r8, r8, #2
    5cb2:	f009 0901 	and.w	r9, r9, #1
    5cb6:	ea48 0809 	orr.w	r8, r8, r9
    5cba:	f1b8 0f01 	cmp.w	r8, #1
    5cbe:	d03a      	beq.n	5d36 <__gnu_unwind_pr_common+0x112>
    5cc0:	d331      	bcc.n	5d26 <__gnu_unwind_pr_common+0x102>
    5cc2:	f1b8 0f02 	cmp.w	r8, #2
    5cc6:	d11a      	bne.n	5cfe <__gnu_unwind_pr_common+0xda>
    5cc8:	6823      	ldr	r3, [r4, #0]
    5cca:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    5cce:	f1bb 0f00 	cmp.w	fp, #0
    5cd2:	d166      	bne.n	5da2 <__gnu_unwind_pr_common+0x17e>
    5cd4:	b130      	cbz	r0, 5ce4 <__gnu_unwind_pr_common+0xc0>
    5cd6:	9a00      	ldr	r2, [sp, #0]
    5cd8:	2a00      	cmp	r2, #0
    5cda:	d06c      	beq.n	5db6 <__gnu_unwind_pr_common+0x192>
    5cdc:	f1ba 0f00 	cmp.w	sl, #0
    5ce0:	f000 8090 	beq.w	5e04 <__gnu_unwind_pr_common+0x1e0>
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	da00      	bge.n	5cea <__gnu_unwind_pr_common+0xc6>
    5ce8:	3404      	adds	r4, #4
    5cea:	f10a 0301 	add.w	r3, sl, #1
    5cee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5cf2:	e7bc      	b.n	5c6e <__gnu_unwind_pr_common+0x4a>
    5cf4:	4630      	mov	r0, r6
    5cf6:	a905      	add	r1, sp, #20
    5cf8:	f000 fb46 	bl	6388 <__gnu_unwind_execute>
    5cfc:	b178      	cbz	r0, 5d1e <__gnu_unwind_pr_common+0xfa>
    5cfe:	2009      	movs	r0, #9
    5d00:	b009      	add	sp, #36	; 0x24
    5d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d06:	2000      	movs	r0, #0
    5d08:	e7cf      	b.n	5caa <__gnu_unwind_pr_common+0x86>
    5d0a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    5d0e:	3408      	adds	r4, #8
    5d10:	e7ba      	b.n	5c88 <__gnu_unwind_pr_common+0x64>
    5d12:	0212      	lsls	r2, r2, #8
    5d14:	2303      	movs	r3, #3
    5d16:	9205      	str	r2, [sp, #20]
    5d18:	f8ad 301c 	strh.w	r3, [sp, #28]
    5d1c:	e79b      	b.n	5c56 <__gnu_unwind_pr_common+0x32>
    5d1e:	2008      	movs	r0, #8
    5d20:	b009      	add	sp, #36	; 0x24
    5d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d26:	f1bb 0f00 	cmp.w	fp, #0
    5d2a:	d002      	beq.n	5d32 <__gnu_unwind_pr_common+0x10e>
    5d2c:	2800      	cmp	r0, #0
    5d2e:	f040 80b4 	bne.w	5e9a <__gnu_unwind_pr_common+0x276>
    5d32:	3404      	adds	r4, #4
    5d34:	e79b      	b.n	5c6e <__gnu_unwind_pr_common+0x4a>
    5d36:	f1bb 0f00 	cmp.w	fp, #0
    5d3a:	d118      	bne.n	5d6e <__gnu_unwind_pr_common+0x14a>
    5d3c:	b1a8      	cbz	r0, 5d6a <__gnu_unwind_pr_common+0x146>
    5d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
    5d42:	1c99      	adds	r1, r3, #2
    5d44:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    5d48:	d0d9      	beq.n	5cfe <__gnu_unwind_pr_common+0xda>
    5d4a:	f105 0158 	add.w	r1, r5, #88	; 0x58
    5d4e:	3301      	adds	r3, #1
    5d50:	9104      	str	r1, [sp, #16]
    5d52:	f000 80b5 	beq.w	5ec0 <__gnu_unwind_pr_common+0x29c>
    5d56:	1d20      	adds	r0, r4, #4
    5d58:	f7ff fdea 	bl	5930 <_Unwind_decode_typeinfo_ptr.isra.0>
    5d5c:	ab04      	add	r3, sp, #16
    5d5e:	4601      	mov	r1, r0
    5d60:	4628      	mov	r0, r5
    5d62:	f3af 8000 	nop.w
    5d66:	2800      	cmp	r0, #0
    5d68:	d167      	bne.n	5e3a <__gnu_unwind_pr_common+0x216>
    5d6a:	3408      	adds	r4, #8
    5d6c:	e77f      	b.n	5c6e <__gnu_unwind_pr_common+0x4a>
    5d6e:	210d      	movs	r1, #13
    5d70:	4630      	mov	r0, r6
    5d72:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5d76:	f7ff feed 	bl	5b54 <_Unwind_GetGR>
    5d7a:	4580      	cmp	r8, r0
    5d7c:	d1f5      	bne.n	5d6a <__gnu_unwind_pr_common+0x146>
    5d7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d80:	429c      	cmp	r4, r3
    5d82:	d1f2      	bne.n	5d6a <__gnu_unwind_pr_common+0x146>
    5d84:	4620      	mov	r0, r4
    5d86:	f7ff fd07 	bl	5798 <selfrel_offset31>
    5d8a:	210f      	movs	r1, #15
    5d8c:	4602      	mov	r2, r0
    5d8e:	4630      	mov	r0, r6
    5d90:	f7ff ff02 	bl	5b98 <_Unwind_SetGR>
    5d94:	4630      	mov	r0, r6
    5d96:	462a      	mov	r2, r5
    5d98:	2100      	movs	r1, #0
    5d9a:	f7ff fefd 	bl	5b98 <_Unwind_SetGR>
    5d9e:	2007      	movs	r0, #7
    5da0:	e7ae      	b.n	5d00 <__gnu_unwind_pr_common+0xdc>
    5da2:	210d      	movs	r1, #13
    5da4:	4630      	mov	r0, r6
    5da6:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5daa:	f7ff fed3 	bl	5b54 <_Unwind_GetGR>
    5dae:	4580      	cmp	r8, r0
    5db0:	d032      	beq.n	5e18 <__gnu_unwind_pr_common+0x1f4>
    5db2:	6823      	ldr	r3, [r4, #0]
    5db4:	e796      	b.n	5ce4 <__gnu_unwind_pr_common+0xc0>
    5db6:	f1ba 0f00 	cmp.w	sl, #0
    5dba:	d023      	beq.n	5e04 <__gnu_unwind_pr_common+0x1e0>
    5dbc:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5dc0:	f104 0804 	add.w	r8, r4, #4
    5dc4:	f8cd b008 	str.w	fp, [sp, #8]
    5dc8:	f8dd 9000 	ldr.w	r9, [sp]
    5dcc:	9703      	str	r7, [sp, #12]
    5dce:	46a3      	mov	fp, r4
    5dd0:	461c      	mov	r4, r3
    5dd2:	e002      	b.n	5dda <__gnu_unwind_pr_common+0x1b6>
    5dd4:	4557      	cmp	r7, sl
    5dd6:	46b9      	mov	r9, r7
    5dd8:	d040      	beq.n	5e5c <__gnu_unwind_pr_common+0x238>
    5dda:	4640      	mov	r0, r8
    5ddc:	9404      	str	r4, [sp, #16]
    5dde:	f7ff fda7 	bl	5930 <_Unwind_decode_typeinfo_ptr.isra.0>
    5de2:	ab04      	add	r3, sp, #16
    5de4:	4601      	mov	r1, r0
    5de6:	2200      	movs	r2, #0
    5de8:	4628      	mov	r0, r5
    5dea:	f3af 8000 	nop.w
    5dee:	f109 0701 	add.w	r7, r9, #1
    5df2:	f108 0804 	add.w	r8, r8, #4
    5df6:	2800      	cmp	r0, #0
    5df8:	d0ec      	beq.n	5dd4 <__gnu_unwind_pr_common+0x1b0>
    5dfa:	45d1      	cmp	r9, sl
    5dfc:	465c      	mov	r4, fp
    5dfe:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    5e02:	d1d6      	bne.n	5db2 <__gnu_unwind_pr_common+0x18e>
    5e04:	4630      	mov	r0, r6
    5e06:	210d      	movs	r1, #13
    5e08:	f7ff fea4 	bl	5b54 <_Unwind_GetGR>
    5e0c:	9b04      	ldr	r3, [sp, #16]
    5e0e:	6228      	str	r0, [r5, #32]
    5e10:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    5e14:	2006      	movs	r0, #6
    5e16:	e773      	b.n	5d00 <__gnu_unwind_pr_common+0xdc>
    5e18:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e1a:	429c      	cmp	r4, r3
    5e1c:	d1c9      	bne.n	5db2 <__gnu_unwind_pr_common+0x18e>
    5e1e:	2204      	movs	r2, #4
    5e20:	f04f 0800 	mov.w	r8, #0
    5e24:	18a3      	adds	r3, r4, r2
    5e26:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    5e2a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    5e2e:	6823      	ldr	r3, [r4, #0]
    5e30:	4543      	cmp	r3, r8
    5e32:	db4d      	blt.n	5ed0 <__gnu_unwind_pr_common+0x2ac>
    5e34:	2301      	movs	r3, #1
    5e36:	9301      	str	r3, [sp, #4]
    5e38:	e757      	b.n	5cea <__gnu_unwind_pr_common+0xc6>
    5e3a:	4680      	mov	r8, r0
    5e3c:	210d      	movs	r1, #13
    5e3e:	4630      	mov	r0, r6
    5e40:	f7ff fe88 	bl	5b54 <_Unwind_GetGR>
    5e44:	f1b8 0f02 	cmp.w	r8, #2
    5e48:	6228      	str	r0, [r5, #32]
    5e4a:	d13e      	bne.n	5eca <__gnu_unwind_pr_common+0x2a6>
    5e4c:	462b      	mov	r3, r5
    5e4e:	9a04      	ldr	r2, [sp, #16]
    5e50:	f843 2f2c 	str.w	r2, [r3, #44]!
    5e54:	626b      	str	r3, [r5, #36]	; 0x24
    5e56:	62ac      	str	r4, [r5, #40]	; 0x28
    5e58:	2006      	movs	r0, #6
    5e5a:	e751      	b.n	5d00 <__gnu_unwind_pr_common+0xdc>
    5e5c:	465c      	mov	r4, fp
    5e5e:	e7d1      	b.n	5e04 <__gnu_unwind_pr_common+0x1e0>
    5e60:	a905      	add	r1, sp, #20
    5e62:	4630      	mov	r0, r6
    5e64:	f000 fa90 	bl	6388 <__gnu_unwind_execute>
    5e68:	2800      	cmp	r0, #0
    5e6a:	f47f af48 	bne.w	5cfe <__gnu_unwind_pr_common+0xda>
    5e6e:	9b01      	ldr	r3, [sp, #4]
    5e70:	2b00      	cmp	r3, #0
    5e72:	f43f af54 	beq.w	5d1e <__gnu_unwind_pr_common+0xfa>
    5e76:	210f      	movs	r1, #15
    5e78:	4630      	mov	r0, r6
    5e7a:	f7ff fe6b 	bl	5b54 <_Unwind_GetGR>
    5e7e:	210e      	movs	r1, #14
    5e80:	4602      	mov	r2, r0
    5e82:	4630      	mov	r0, r6
    5e84:	f7ff fe88 	bl	5b98 <_Unwind_SetGR>
    5e88:	4630      	mov	r0, r6
    5e8a:	4a1a      	ldr	r2, [pc, #104]	; (5ef4 <__gnu_unwind_pr_common+0x2d0>)
    5e8c:	210f      	movs	r1, #15
    5e8e:	f7ff fe83 	bl	5b98 <_Unwind_SetGR>
    5e92:	2007      	movs	r0, #7
    5e94:	b009      	add	sp, #36	; 0x24
    5e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e9a:	4620      	mov	r0, r4
    5e9c:	f7ff fc7c 	bl	5798 <selfrel_offset31>
    5ea0:	3404      	adds	r4, #4
    5ea2:	4607      	mov	r7, r0
    5ea4:	63ac      	str	r4, [r5, #56]	; 0x38
    5ea6:	4628      	mov	r0, r5
    5ea8:	f3af 8000 	nop.w
    5eac:	2800      	cmp	r0, #0
    5eae:	f43f af26 	beq.w	5cfe <__gnu_unwind_pr_common+0xda>
    5eb2:	4630      	mov	r0, r6
    5eb4:	463a      	mov	r2, r7
    5eb6:	210f      	movs	r1, #15
    5eb8:	f7ff fe6e 	bl	5b98 <_Unwind_SetGR>
    5ebc:	2007      	movs	r0, #7
    5ebe:	e71f      	b.n	5d00 <__gnu_unwind_pr_common+0xdc>
    5ec0:	4630      	mov	r0, r6
    5ec2:	210d      	movs	r1, #13
    5ec4:	f7ff fe46 	bl	5b54 <_Unwind_GetGR>
    5ec8:	6228      	str	r0, [r5, #32]
    5eca:	9b04      	ldr	r3, [sp, #16]
    5ecc:	626b      	str	r3, [r5, #36]	; 0x24
    5ece:	e7c2      	b.n	5e56 <__gnu_unwind_pr_common+0x232>
    5ed0:	f10a 0001 	add.w	r0, sl, #1
    5ed4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5ed8:	f7ff fc5e 	bl	5798 <selfrel_offset31>
    5edc:	210f      	movs	r1, #15
    5ede:	4602      	mov	r2, r0
    5ee0:	4630      	mov	r0, r6
    5ee2:	f7ff fe59 	bl	5b98 <_Unwind_SetGR>
    5ee6:	4630      	mov	r0, r6
    5ee8:	462a      	mov	r2, r5
    5eea:	4641      	mov	r1, r8
    5eec:	f7ff fe54 	bl	5b98 <_Unwind_SetGR>
    5ef0:	2007      	movs	r0, #7
    5ef2:	e705      	b.n	5d00 <__gnu_unwind_pr_common+0xdc>
    5ef4:	00000000 	.word	0x00000000

00005ef8 <__aeabi_unwind_cpp_pr0>:
    5ef8:	2300      	movs	r3, #0
    5efa:	e693      	b.n	5c24 <__gnu_unwind_pr_common>

00005efc <__aeabi_unwind_cpp_pr1>:
    5efc:	2301      	movs	r3, #1
    5efe:	e691      	b.n	5c24 <__gnu_unwind_pr_common>

00005f00 <__aeabi_unwind_cpp_pr2>:
    5f00:	2302      	movs	r3, #2
    5f02:	e68f      	b.n	5c24 <__gnu_unwind_pr_common>

00005f04 <_Unwind_VRS_Pop>:
    5f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f08:	4605      	mov	r5, r0
    5f0a:	b0c4      	sub	sp, #272	; 0x110
    5f0c:	2904      	cmp	r1, #4
    5f0e:	d806      	bhi.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5f10:	e8df f001 	tbb	[pc, r1]
    5f14:	03052b4d 	.word	0x03052b4d
    5f18:	09          	.byte	0x09
    5f19:	00          	.byte	0x00
    5f1a:	2b03      	cmp	r3, #3
    5f1c:	d05f      	beq.n	5fde <_Unwind_VRS_Pop+0xda>
    5f1e:	2002      	movs	r0, #2
    5f20:	b044      	add	sp, #272	; 0x110
    5f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f26:	2b00      	cmp	r3, #0
    5f28:	d1f9      	bne.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5f2a:	2a10      	cmp	r2, #16
    5f2c:	d8f7      	bhi.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5f2e:	682b      	ldr	r3, [r5, #0]
    5f30:	06dc      	lsls	r4, r3, #27
    5f32:	f100 80f4 	bmi.w	611e <_Unwind_VRS_Pop+0x21a>
    5f36:	ac22      	add	r4, sp, #136	; 0x88
    5f38:	4620      	mov	r0, r4
    5f3a:	9201      	str	r2, [sp, #4]
    5f3c:	f000 f994 	bl	6268 <__gnu_Unwind_Save_WMMXC>
    5f40:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5f42:	9a01      	ldr	r2, [sp, #4]
    5f44:	2300      	movs	r3, #0
    5f46:	2601      	movs	r6, #1
    5f48:	fa06 f103 	lsl.w	r1, r6, r3
    5f4c:	4211      	tst	r1, r2
    5f4e:	d003      	beq.n	5f58 <_Unwind_VRS_Pop+0x54>
    5f50:	6801      	ldr	r1, [r0, #0]
    5f52:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    5f56:	3004      	adds	r0, #4
    5f58:	3301      	adds	r3, #1
    5f5a:	2b04      	cmp	r3, #4
    5f5c:	d1f4      	bne.n	5f48 <_Unwind_VRS_Pop+0x44>
    5f5e:	63a8      	str	r0, [r5, #56]	; 0x38
    5f60:	4620      	mov	r0, r4
    5f62:	f000 f977 	bl	6254 <__gnu_Unwind_Restore_WMMXC>
    5f66:	2000      	movs	r0, #0
    5f68:	e7da      	b.n	5f20 <_Unwind_VRS_Pop+0x1c>
    5f6a:	2b01      	cmp	r3, #1
    5f6c:	ea4f 4612 	mov.w	r6, r2, lsr #16
    5f70:	b297      	uxth	r7, r2
    5f72:	d052      	beq.n	601a <_Unwind_VRS_Pop+0x116>
    5f74:	2b05      	cmp	r3, #5
    5f76:	d1d2      	bne.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5f78:	eb06 0807 	add.w	r8, r6, r7
    5f7c:	f1b8 0f20 	cmp.w	r8, #32
    5f80:	d8cd      	bhi.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5f82:	2e0f      	cmp	r6, #15
    5f84:	f240 8099 	bls.w	60ba <_Unwind_VRS_Pop+0x1b6>
    5f88:	46b8      	mov	r8, r7
    5f8a:	2f00      	cmp	r7, #0
    5f8c:	f040 80db 	bne.w	6146 <_Unwind_VRS_Pop+0x242>
    5f90:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5f92:	63aa      	str	r2, [r5, #56]	; 0x38
    5f94:	2e0f      	cmp	r6, #15
    5f96:	f240 80be 	bls.w	6116 <_Unwind_VRS_Pop+0x212>
    5f9a:	f1b8 0f00 	cmp.w	r8, #0
    5f9e:	d002      	beq.n	5fa6 <_Unwind_VRS_Pop+0xa2>
    5fa0:	a802      	add	r0, sp, #8
    5fa2:	f000 f90b 	bl	61bc <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5fa6:	2000      	movs	r0, #0
    5fa8:	b044      	add	sp, #272	; 0x110
    5faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d1b5      	bne.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5fb2:	6bac      	ldr	r4, [r5, #56]	; 0x38
    5fb4:	b297      	uxth	r7, r2
    5fb6:	1d28      	adds	r0, r5, #4
    5fb8:	2601      	movs	r6, #1
    5fba:	fa06 f103 	lsl.w	r1, r6, r3
    5fbe:	4239      	tst	r1, r7
    5fc0:	f103 0301 	add.w	r3, r3, #1
    5fc4:	d002      	beq.n	5fcc <_Unwind_VRS_Pop+0xc8>
    5fc6:	6821      	ldr	r1, [r4, #0]
    5fc8:	6001      	str	r1, [r0, #0]
    5fca:	3404      	adds	r4, #4
    5fcc:	2b10      	cmp	r3, #16
    5fce:	f100 0004 	add.w	r0, r0, #4
    5fd2:	d1f2      	bne.n	5fba <_Unwind_VRS_Pop+0xb6>
    5fd4:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5fd8:	d1e5      	bne.n	5fa6 <_Unwind_VRS_Pop+0xa2>
    5fda:	63ac      	str	r4, [r5, #56]	; 0x38
    5fdc:	e7a0      	b.n	5f20 <_Unwind_VRS_Pop+0x1c>
    5fde:	0c16      	lsrs	r6, r2, #16
    5fe0:	b297      	uxth	r7, r2
    5fe2:	19f3      	adds	r3, r6, r7
    5fe4:	2b10      	cmp	r3, #16
    5fe6:	d89a      	bhi.n	5f1e <_Unwind_VRS_Pop+0x1a>
    5fe8:	682b      	ldr	r3, [r5, #0]
    5fea:	071a      	lsls	r2, r3, #28
    5fec:	d45d      	bmi.n	60aa <_Unwind_VRS_Pop+0x1a6>
    5fee:	ac22      	add	r4, sp, #136	; 0x88
    5ff0:	4620      	mov	r0, r4
    5ff2:	f000 f90d 	bl	6210 <__gnu_Unwind_Save_WMMXD>
    5ff6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    5ffa:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5ffc:	b13f      	cbz	r7, 600e <_Unwind_VRS_Pop+0x10a>
    5ffe:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    6002:	6818      	ldr	r0, [r3, #0]
    6004:	f841 0b04 	str.w	r0, [r1], #4
    6008:	3304      	adds	r3, #4
    600a:	4293      	cmp	r3, r2
    600c:	d1f9      	bne.n	6002 <_Unwind_VRS_Pop+0xfe>
    600e:	4620      	mov	r0, r4
    6010:	63ab      	str	r3, [r5, #56]	; 0x38
    6012:	f000 f8db 	bl	61cc <__gnu_Unwind_Restore_WMMXD>
    6016:	2000      	movs	r0, #0
    6018:	e782      	b.n	5f20 <_Unwind_VRS_Pop+0x1c>
    601a:	19f2      	adds	r2, r6, r7
    601c:	2a10      	cmp	r2, #16
    601e:	f63f af7e 	bhi.w	5f1e <_Unwind_VRS_Pop+0x1a>
    6022:	2e0f      	cmp	r6, #15
    6024:	f63f af7b 	bhi.w	5f1e <_Unwind_VRS_Pop+0x1a>
    6028:	682a      	ldr	r2, [r5, #0]
    602a:	07d1      	lsls	r1, r2, #31
    602c:	d508      	bpl.n	6040 <_Unwind_VRS_Pop+0x13c>
    602e:	4628      	mov	r0, r5
    6030:	f022 0203 	bic.w	r2, r2, #3
    6034:	f840 2b48 	str.w	r2, [r0], #72
    6038:	9301      	str	r3, [sp, #4]
    603a:	f000 f8b3 	bl	61a4 <__gnu_Unwind_Save_VFP>
    603e:	9b01      	ldr	r3, [sp, #4]
    6040:	9301      	str	r3, [sp, #4]
    6042:	ac22      	add	r4, sp, #136	; 0x88
    6044:	4620      	mov	r0, r4
    6046:	f000 f8ad 	bl	61a4 <__gnu_Unwind_Save_VFP>
    604a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    604c:	9b01      	ldr	r3, [sp, #4]
    604e:	2f00      	cmp	r7, #0
    6050:	f000 8095 	beq.w	617e <_Unwind_VRS_Pop+0x27a>
    6054:	007f      	lsls	r7, r7, #1
    6056:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    605a:	f04f 0800 	mov.w	r8, #0
    605e:	3c04      	subs	r4, #4
    6060:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    6064:	f851 0b04 	ldr.w	r0, [r1], #4
    6068:	f844 0f04 	str.w	r0, [r4, #4]!
    606c:	4291      	cmp	r1, r2
    606e:	d1f9      	bne.n	6064 <_Unwind_VRS_Pop+0x160>
    6070:	f1b8 0f00 	cmp.w	r8, #0
    6074:	d00f      	beq.n	6096 <_Unwind_VRS_Pop+0x192>
    6076:	ac02      	add	r4, sp, #8
    6078:	2e10      	cmp	r6, #16
    607a:	4631      	mov	r1, r6
    607c:	bf38      	it	cc
    607e:	2110      	movcc	r1, #16
    6080:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    6084:	3984      	subs	r1, #132	; 0x84
    6086:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    608a:	f852 0b04 	ldr.w	r0, [r2], #4
    608e:	f841 0f04 	str.w	r0, [r1, #4]!
    6092:	4294      	cmp	r4, r2
    6094:	d1f9      	bne.n	608a <_Unwind_VRS_Pop+0x186>
    6096:	2b01      	cmp	r3, #1
    6098:	f47f af7b 	bne.w	5f92 <_Unwind_VRS_Pop+0x8e>
    609c:	ac22      	add	r4, sp, #136	; 0x88
    609e:	3204      	adds	r2, #4
    60a0:	63aa      	str	r2, [r5, #56]	; 0x38
    60a2:	4620      	mov	r0, r4
    60a4:	f000 f87a 	bl	619c <__gnu_Unwind_Restore_VFP>
    60a8:	e77d      	b.n	5fa6 <_Unwind_VRS_Pop+0xa2>
    60aa:	f023 0308 	bic.w	r3, r3, #8
    60ae:	602b      	str	r3, [r5, #0]
    60b0:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    60b4:	f000 f8ac 	bl	6210 <__gnu_Unwind_Save_WMMXD>
    60b8:	e799      	b.n	5fee <_Unwind_VRS_Pop+0xea>
    60ba:	f1b8 0f10 	cmp.w	r8, #16
    60be:	682a      	ldr	r2, [r5, #0]
    60c0:	d943      	bls.n	614a <_Unwind_VRS_Pop+0x246>
    60c2:	07d0      	lsls	r0, r2, #31
    60c4:	f1a8 0810 	sub.w	r8, r8, #16
    60c8:	d50b      	bpl.n	60e2 <_Unwind_VRS_Pop+0x1de>
    60ca:	4628      	mov	r0, r5
    60cc:	f022 0201 	bic.w	r2, r2, #1
    60d0:	f042 0202 	orr.w	r2, r2, #2
    60d4:	f840 2b48 	str.w	r2, [r0], #72
    60d8:	9301      	str	r3, [sp, #4]
    60da:	f000 f86b 	bl	61b4 <__gnu_Unwind_Save_VFP_D>
    60de:	682a      	ldr	r2, [r5, #0]
    60e0:	9b01      	ldr	r3, [sp, #4]
    60e2:	0751      	lsls	r1, r2, #29
    60e4:	d425      	bmi.n	6132 <_Unwind_VRS_Pop+0x22e>
    60e6:	2e0f      	cmp	r6, #15
    60e8:	d804      	bhi.n	60f4 <_Unwind_VRS_Pop+0x1f0>
    60ea:	a822      	add	r0, sp, #136	; 0x88
    60ec:	9301      	str	r3, [sp, #4]
    60ee:	f000 f861 	bl	61b4 <__gnu_Unwind_Save_VFP_D>
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	9301      	str	r3, [sp, #4]
    60f6:	ac02      	add	r4, sp, #8
    60f8:	4620      	mov	r0, r4
    60fa:	f000 f863 	bl	61c4 <__gnu_Unwind_Save_VFP_D_16_to_31>
    60fe:	f1c6 0110 	rsb	r1, r6, #16
    6102:	2900      	cmp	r1, #0
    6104:	6baa      	ldr	r2, [r5, #56]	; 0x38
    6106:	9b01      	ldr	r3, [sp, #4]
    6108:	ddb6      	ble.n	6078 <_Unwind_VRS_Pop+0x174>
    610a:	ac22      	add	r4, sp, #136	; 0x88
    610c:	004f      	lsls	r7, r1, #1
    610e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    6112:	4611      	mov	r1, r2
    6114:	e7a3      	b.n	605e <_Unwind_VRS_Pop+0x15a>
    6116:	a822      	add	r0, sp, #136	; 0x88
    6118:	f000 f848 	bl	61ac <__gnu_Unwind_Restore_VFP_D>
    611c:	e73d      	b.n	5f9a <_Unwind_VRS_Pop+0x96>
    611e:	f023 0310 	bic.w	r3, r3, #16
    6122:	602b      	str	r3, [r5, #0]
    6124:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    6128:	9201      	str	r2, [sp, #4]
    612a:	f000 f89d 	bl	6268 <__gnu_Unwind_Save_WMMXC>
    612e:	9a01      	ldr	r2, [sp, #4]
    6130:	e701      	b.n	5f36 <_Unwind_VRS_Pop+0x32>
    6132:	4628      	mov	r0, r5
    6134:	f022 0204 	bic.w	r2, r2, #4
    6138:	f840 2bd0 	str.w	r2, [r0], #208
    613c:	9301      	str	r3, [sp, #4]
    613e:	f000 f841 	bl	61c4 <__gnu_Unwind_Save_VFP_D_16_to_31>
    6142:	9b01      	ldr	r3, [sp, #4]
    6144:	e7cf      	b.n	60e6 <_Unwind_VRS_Pop+0x1e2>
    6146:	682a      	ldr	r2, [r5, #0]
    6148:	e7cb      	b.n	60e2 <_Unwind_VRS_Pop+0x1de>
    614a:	07d0      	lsls	r0, r2, #31
    614c:	d50a      	bpl.n	6164 <_Unwind_VRS_Pop+0x260>
    614e:	4628      	mov	r0, r5
    6150:	f022 0201 	bic.w	r2, r2, #1
    6154:	f042 0202 	orr.w	r2, r2, #2
    6158:	f840 2b48 	str.w	r2, [r0], #72
    615c:	9301      	str	r3, [sp, #4]
    615e:	f000 f829 	bl	61b4 <__gnu_Unwind_Save_VFP_D>
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	9301      	str	r3, [sp, #4]
    6166:	ac22      	add	r4, sp, #136	; 0x88
    6168:	4620      	mov	r0, r4
    616a:	f000 f823 	bl	61b4 <__gnu_Unwind_Save_VFP_D>
    616e:	46b8      	mov	r8, r7
    6170:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    6172:	9b01      	ldr	r3, [sp, #4]
    6174:	2f00      	cmp	r7, #0
    6176:	f47f af6d 	bne.w	6054 <_Unwind_VRS_Pop+0x150>
    617a:	460a      	mov	r2, r1
    617c:	e709      	b.n	5f92 <_Unwind_VRS_Pop+0x8e>
    617e:	460a      	mov	r2, r1
    6180:	e78d      	b.n	609e <_Unwind_VRS_Pop+0x19a>
    6182:	bf00      	nop

00006184 <__restore_core_regs>:
    6184:	f100 0134 	add.w	r1, r0, #52	; 0x34
    6188:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    618c:	469c      	mov	ip, r3
    618e:	46a6      	mov	lr, r4
    6190:	f84c 5d04 	str.w	r5, [ip, #-4]!
    6194:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    6198:	46e5      	mov	sp, ip
    619a:	bd00      	pop	{pc}

0000619c <__gnu_Unwind_Restore_VFP>:
    619c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    61a0:	4770      	bx	lr
    61a2:	bf00      	nop

000061a4 <__gnu_Unwind_Save_VFP>:
    61a4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    61a8:	4770      	bx	lr
    61aa:	bf00      	nop

000061ac <__gnu_Unwind_Restore_VFP_D>:
    61ac:	ec90 0b20 	vldmia	r0, {d0-d15}
    61b0:	4770      	bx	lr
    61b2:	bf00      	nop

000061b4 <__gnu_Unwind_Save_VFP_D>:
    61b4:	ec80 0b20 	vstmia	r0, {d0-d15}
    61b8:	4770      	bx	lr
    61ba:	bf00      	nop

000061bc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    61bc:	ecd0 0b20 	vldmia	r0, {d16-d31}
    61c0:	4770      	bx	lr
    61c2:	bf00      	nop

000061c4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    61c4:	ecc0 0b20 	vstmia	r0, {d16-d31}
    61c8:	4770      	bx	lr
    61ca:	bf00      	nop

000061cc <__gnu_Unwind_Restore_WMMXD>:
    61cc:	ecf0 0102 	ldfe	f0, [r0], #8
    61d0:	ecf0 1102 	ldfe	f1, [r0], #8
    61d4:	ecf0 2102 	ldfe	f2, [r0], #8
    61d8:	ecf0 3102 	ldfe	f3, [r0], #8
    61dc:	ecf0 4102 	ldfe	f4, [r0], #8
    61e0:	ecf0 5102 	ldfe	f5, [r0], #8
    61e4:	ecf0 6102 	ldfe	f6, [r0], #8
    61e8:	ecf0 7102 	ldfe	f7, [r0], #8
    61ec:	ecf0 8102 	ldfp	f0, [r0], #8
    61f0:	ecf0 9102 	ldfp	f1, [r0], #8
    61f4:	ecf0 a102 	ldfp	f2, [r0], #8
    61f8:	ecf0 b102 	ldfp	f3, [r0], #8
    61fc:	ecf0 c102 	ldfp	f4, [r0], #8
    6200:	ecf0 d102 	ldfp	f5, [r0], #8
    6204:	ecf0 e102 	ldfp	f6, [r0], #8
    6208:	ecf0 f102 	ldfp	f7, [r0], #8
    620c:	4770      	bx	lr
    620e:	bf00      	nop

00006210 <__gnu_Unwind_Save_WMMXD>:
    6210:	ece0 0102 	stfe	f0, [r0], #8
    6214:	ece0 1102 	stfe	f1, [r0], #8
    6218:	ece0 2102 	stfe	f2, [r0], #8
    621c:	ece0 3102 	stfe	f3, [r0], #8
    6220:	ece0 4102 	stfe	f4, [r0], #8
    6224:	ece0 5102 	stfe	f5, [r0], #8
    6228:	ece0 6102 	stfe	f6, [r0], #8
    622c:	ece0 7102 	stfe	f7, [r0], #8
    6230:	ece0 8102 	stfp	f0, [r0], #8
    6234:	ece0 9102 	stfp	f1, [r0], #8
    6238:	ece0 a102 	stfp	f2, [r0], #8
    623c:	ece0 b102 	stfp	f3, [r0], #8
    6240:	ece0 c102 	stfp	f4, [r0], #8
    6244:	ece0 d102 	stfp	f5, [r0], #8
    6248:	ece0 e102 	stfp	f6, [r0], #8
    624c:	ece0 f102 	stfp	f7, [r0], #8
    6250:	4770      	bx	lr
    6252:	bf00      	nop

00006254 <__gnu_Unwind_Restore_WMMXC>:
    6254:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    6258:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    625c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    6260:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    6264:	4770      	bx	lr
    6266:	bf00      	nop

00006268 <__gnu_Unwind_Save_WMMXC>:
    6268:	fca0 8101 	stc2	1, cr8, [r0], #4
    626c:	fca0 9101 	stc2	1, cr9, [r0], #4
    6270:	fca0 a101 	stc2	1, cr10, [r0], #4
    6274:	fca0 b101 	stc2	1, cr11, [r0], #4
    6278:	4770      	bx	lr
    627a:	bf00      	nop

0000627c <_Unwind_RaiseException>:
    627c:	46ec      	mov	ip, sp
    627e:	b500      	push	{lr}
    6280:	e92d 5000 	stmdb	sp!, {ip, lr}
    6284:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    6288:	f04f 0300 	mov.w	r3, #0
    628c:	e92d 000c 	stmdb	sp!, {r2, r3}
    6290:	a901      	add	r1, sp, #4
    6292:	f7ff fbdd 	bl	5a50 <__gnu_Unwind_RaiseException>
    6296:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    629a:	b012      	add	sp, #72	; 0x48
    629c:	4770      	bx	lr
    629e:	bf00      	nop

000062a0 <_Unwind_Resume>:
    62a0:	46ec      	mov	ip, sp
    62a2:	b500      	push	{lr}
    62a4:	e92d 5000 	stmdb	sp!, {ip, lr}
    62a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    62ac:	f04f 0300 	mov.w	r3, #0
    62b0:	e92d 000c 	stmdb	sp!, {r2, r3}
    62b4:	a901      	add	r1, sp, #4
    62b6:	f7ff fc05 	bl	5ac4 <__gnu_Unwind_Resume>
    62ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    62be:	b012      	add	sp, #72	; 0x48
    62c0:	4770      	bx	lr
    62c2:	bf00      	nop

000062c4 <_Unwind_Resume_or_Rethrow>:
    62c4:	46ec      	mov	ip, sp
    62c6:	b500      	push	{lr}
    62c8:	e92d 5000 	stmdb	sp!, {ip, lr}
    62cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    62d0:	f04f 0300 	mov.w	r3, #0
    62d4:	e92d 000c 	stmdb	sp!, {r2, r3}
    62d8:	a901      	add	r1, sp, #4
    62da:	f7ff fc15 	bl	5b08 <__gnu_Unwind_Resume_or_Rethrow>
    62de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    62e2:	b012      	add	sp, #72	; 0x48
    62e4:	4770      	bx	lr
    62e6:	bf00      	nop

000062e8 <_Unwind_ForcedUnwind>:
    62e8:	46ec      	mov	ip, sp
    62ea:	b500      	push	{lr}
    62ec:	e92d 5000 	stmdb	sp!, {ip, lr}
    62f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    62f4:	f04f 0300 	mov.w	r3, #0
    62f8:	e92d 000c 	stmdb	sp!, {r2, r3}
    62fc:	ab01      	add	r3, sp, #4
    62fe:	f7ff fbd7 	bl	5ab0 <__gnu_Unwind_ForcedUnwind>
    6302:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    6306:	b012      	add	sp, #72	; 0x48
    6308:	4770      	bx	lr
    630a:	bf00      	nop

0000630c <_Unwind_Backtrace>:
    630c:	46ec      	mov	ip, sp
    630e:	b500      	push	{lr}
    6310:	e92d 5000 	stmdb	sp!, {ip, lr}
    6314:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    6318:	f04f 0300 	mov.w	r3, #0
    631c:	e92d 000c 	stmdb	sp!, {r2, r3}
    6320:	aa01      	add	r2, sp, #4
    6322:	f7ff fc47 	bl	5bb4 <__gnu_Unwind_Backtrace>
    6326:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    632a:	b012      	add	sp, #72	; 0x48
    632c:	4770      	bx	lr
    632e:	bf00      	nop

00006330 <next_unwind_byte>:
    6330:	7a02      	ldrb	r2, [r0, #8]
    6332:	b982      	cbnz	r2, 6356 <next_unwind_byte+0x26>
    6334:	7a43      	ldrb	r3, [r0, #9]
    6336:	b1ab      	cbz	r3, 6364 <next_unwind_byte+0x34>
    6338:	6842      	ldr	r2, [r0, #4]
    633a:	3b01      	subs	r3, #1
    633c:	b410      	push	{r4}
    633e:	7243      	strb	r3, [r0, #9]
    6340:	6813      	ldr	r3, [r2, #0]
    6342:	2103      	movs	r1, #3
    6344:	1d14      	adds	r4, r2, #4
    6346:	7201      	strb	r1, [r0, #8]
    6348:	021a      	lsls	r2, r3, #8
    634a:	6044      	str	r4, [r0, #4]
    634c:	6002      	str	r2, [r0, #0]
    634e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6352:	0e18      	lsrs	r0, r3, #24
    6354:	4770      	bx	lr
    6356:	6803      	ldr	r3, [r0, #0]
    6358:	3a01      	subs	r2, #1
    635a:	7202      	strb	r2, [r0, #8]
    635c:	021a      	lsls	r2, r3, #8
    635e:	6002      	str	r2, [r0, #0]
    6360:	0e18      	lsrs	r0, r3, #24
    6362:	4770      	bx	lr
    6364:	20b0      	movs	r0, #176	; 0xb0
    6366:	4770      	bx	lr

00006368 <_Unwind_GetGR.constprop.0>:
    6368:	b500      	push	{lr}
    636a:	b085      	sub	sp, #20
    636c:	aa03      	add	r2, sp, #12
    636e:	2300      	movs	r3, #0
    6370:	9200      	str	r2, [sp, #0]
    6372:	4619      	mov	r1, r3
    6374:	220c      	movs	r2, #12
    6376:	f7ff fbd7 	bl	5b28 <_Unwind_VRS_Get>
    637a:	9803      	ldr	r0, [sp, #12]
    637c:	b005      	add	sp, #20
    637e:	f85d fb04 	ldr.w	pc, [sp], #4
    6382:	bf00      	nop

00006384 <unwind_UCB_from_context>:
    6384:	e7f0      	b.n	6368 <_Unwind_GetGR.constprop.0>
    6386:	bf00      	nop

00006388 <__gnu_unwind_execute>:
    6388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    638c:	4605      	mov	r5, r0
    638e:	b085      	sub	sp, #20
    6390:	460e      	mov	r6, r1
    6392:	f04f 0800 	mov.w	r8, #0
    6396:	4630      	mov	r0, r6
    6398:	f7ff ffca 	bl	6330 <next_unwind_byte>
    639c:	28b0      	cmp	r0, #176	; 0xb0
    639e:	4604      	mov	r4, r0
    63a0:	f000 80b1 	beq.w	6506 <__gnu_unwind_execute+0x17e>
    63a4:	0607      	lsls	r7, r0, #24
    63a6:	d520      	bpl.n	63ea <__gnu_unwind_execute+0x62>
    63a8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    63ac:	2b80      	cmp	r3, #128	; 0x80
    63ae:	d065      	beq.n	647c <__gnu_unwind_execute+0xf4>
    63b0:	2b90      	cmp	r3, #144	; 0x90
    63b2:	d036      	beq.n	6422 <__gnu_unwind_execute+0x9a>
    63b4:	2ba0      	cmp	r3, #160	; 0xa0
    63b6:	d078      	beq.n	64aa <__gnu_unwind_execute+0x122>
    63b8:	2bb0      	cmp	r3, #176	; 0xb0
    63ba:	d047      	beq.n	644c <__gnu_unwind_execute+0xc4>
    63bc:	2bc0      	cmp	r3, #192	; 0xc0
    63be:	f000 808a 	beq.w	64d6 <__gnu_unwind_execute+0x14e>
    63c2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    63c6:	2bd0      	cmp	r3, #208	; 0xd0
    63c8:	d10b      	bne.n	63e2 <__gnu_unwind_execute+0x5a>
    63ca:	f000 0207 	and.w	r2, r0, #7
    63ce:	3201      	adds	r2, #1
    63d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    63d4:	2305      	movs	r3, #5
    63d6:	2101      	movs	r1, #1
    63d8:	4628      	mov	r0, r5
    63da:	f7ff fd93 	bl	5f04 <_Unwind_VRS_Pop>
    63de:	2800      	cmp	r0, #0
    63e0:	d0d9      	beq.n	6396 <__gnu_unwind_execute+0xe>
    63e2:	2009      	movs	r0, #9
    63e4:	b005      	add	sp, #20
    63e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    63ea:	f10d 090c 	add.w	r9, sp, #12
    63ee:	2300      	movs	r3, #0
    63f0:	4619      	mov	r1, r3
    63f2:	0087      	lsls	r7, r0, #2
    63f4:	f8cd 9000 	str.w	r9, [sp]
    63f8:	220d      	movs	r2, #13
    63fa:	4628      	mov	r0, r5
    63fc:	f7ff fb94 	bl	5b28 <_Unwind_VRS_Get>
    6400:	b2ff      	uxtb	r7, r7
    6402:	9b03      	ldr	r3, [sp, #12]
    6404:	f8cd 9000 	str.w	r9, [sp]
    6408:	3704      	adds	r7, #4
    640a:	0660      	lsls	r0, r4, #25
    640c:	bf4c      	ite	mi
    640e:	1bdf      	submi	r7, r3, r7
    6410:	18ff      	addpl	r7, r7, r3
    6412:	2300      	movs	r3, #0
    6414:	4619      	mov	r1, r3
    6416:	220d      	movs	r2, #13
    6418:	4628      	mov	r0, r5
    641a:	9703      	str	r7, [sp, #12]
    641c:	f7ff fba6 	bl	5b6c <_Unwind_VRS_Set>
    6420:	e7b9      	b.n	6396 <__gnu_unwind_execute+0xe>
    6422:	f000 030d 	and.w	r3, r0, #13
    6426:	2b0d      	cmp	r3, #13
    6428:	d0db      	beq.n	63e2 <__gnu_unwind_execute+0x5a>
    642a:	af03      	add	r7, sp, #12
    642c:	2300      	movs	r3, #0
    642e:	f000 020f 	and.w	r2, r0, #15
    6432:	4619      	mov	r1, r3
    6434:	9700      	str	r7, [sp, #0]
    6436:	4628      	mov	r0, r5
    6438:	f7ff fb76 	bl	5b28 <_Unwind_VRS_Get>
    643c:	2300      	movs	r3, #0
    643e:	9700      	str	r7, [sp, #0]
    6440:	4619      	mov	r1, r3
    6442:	220d      	movs	r2, #13
    6444:	4628      	mov	r0, r5
    6446:	f7ff fb91 	bl	5b6c <_Unwind_VRS_Set>
    644a:	e7a4      	b.n	6396 <__gnu_unwind_execute+0xe>
    644c:	28b1      	cmp	r0, #177	; 0xb1
    644e:	d05f      	beq.n	6510 <__gnu_unwind_execute+0x188>
    6450:	28b2      	cmp	r0, #178	; 0xb2
    6452:	f000 80cc 	beq.w	65ee <__gnu_unwind_execute+0x266>
    6456:	28b3      	cmp	r0, #179	; 0xb3
    6458:	d07e      	beq.n	6558 <__gnu_unwind_execute+0x1d0>
    645a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    645e:	2bb4      	cmp	r3, #180	; 0xb4
    6460:	d0bf      	beq.n	63e2 <__gnu_unwind_execute+0x5a>
    6462:	f000 0207 	and.w	r2, r0, #7
    6466:	3201      	adds	r2, #1
    6468:	2301      	movs	r3, #1
    646a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    646e:	4619      	mov	r1, r3
    6470:	4628      	mov	r0, r5
    6472:	f7ff fd47 	bl	5f04 <_Unwind_VRS_Pop>
    6476:	2800      	cmp	r0, #0
    6478:	d08d      	beq.n	6396 <__gnu_unwind_execute+0xe>
    647a:	e7b2      	b.n	63e2 <__gnu_unwind_execute+0x5a>
    647c:	4630      	mov	r0, r6
    647e:	f7ff ff57 	bl	6330 <next_unwind_byte>
    6482:	0224      	lsls	r4, r4, #8
    6484:	4304      	orrs	r4, r0
    6486:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    648a:	d0aa      	beq.n	63e2 <__gnu_unwind_execute+0x5a>
    648c:	0124      	lsls	r4, r4, #4
    648e:	2300      	movs	r3, #0
    6490:	b2a2      	uxth	r2, r4
    6492:	4619      	mov	r1, r3
    6494:	4628      	mov	r0, r5
    6496:	f7ff fd35 	bl	5f04 <_Unwind_VRS_Pop>
    649a:	2800      	cmp	r0, #0
    649c:	d1a1      	bne.n	63e2 <__gnu_unwind_execute+0x5a>
    649e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    64a2:	bf18      	it	ne
    64a4:	f04f 0801 	movne.w	r8, #1
    64a8:	e775      	b.n	6396 <__gnu_unwind_execute+0xe>
    64aa:	43c2      	mvns	r2, r0
    64ac:	f002 0307 	and.w	r3, r2, #7
    64b0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    64b4:	411a      	asrs	r2, r3
    64b6:	0701      	lsls	r1, r0, #28
    64b8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    64bc:	f04f 0300 	mov.w	r3, #0
    64c0:	bf48      	it	mi
    64c2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    64c6:	4619      	mov	r1, r3
    64c8:	4628      	mov	r0, r5
    64ca:	f7ff fd1b 	bl	5f04 <_Unwind_VRS_Pop>
    64ce:	2800      	cmp	r0, #0
    64d0:	f43f af61 	beq.w	6396 <__gnu_unwind_execute+0xe>
    64d4:	e785      	b.n	63e2 <__gnu_unwind_execute+0x5a>
    64d6:	28c6      	cmp	r0, #198	; 0xc6
    64d8:	d051      	beq.n	657e <__gnu_unwind_execute+0x1f6>
    64da:	28c7      	cmp	r0, #199	; 0xc7
    64dc:	d05a      	beq.n	6594 <__gnu_unwind_execute+0x20c>
    64de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    64e2:	2bc0      	cmp	r3, #192	; 0xc0
    64e4:	d069      	beq.n	65ba <__gnu_unwind_execute+0x232>
    64e6:	28c8      	cmp	r0, #200	; 0xc8
    64e8:	d075      	beq.n	65d6 <__gnu_unwind_execute+0x24e>
    64ea:	28c9      	cmp	r0, #201	; 0xc9
    64ec:	f47f af79 	bne.w	63e2 <__gnu_unwind_execute+0x5a>
    64f0:	4630      	mov	r0, r6
    64f2:	f7ff ff1d 	bl	6330 <next_unwind_byte>
    64f6:	0302      	lsls	r2, r0, #12
    64f8:	f000 000f 	and.w	r0, r0, #15
    64fc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    6500:	3001      	adds	r0, #1
    6502:	4302      	orrs	r2, r0
    6504:	e766      	b.n	63d4 <__gnu_unwind_execute+0x4c>
    6506:	f1b8 0f00 	cmp.w	r8, #0
    650a:	d014      	beq.n	6536 <__gnu_unwind_execute+0x1ae>
    650c:	2000      	movs	r0, #0
    650e:	e769      	b.n	63e4 <__gnu_unwind_execute+0x5c>
    6510:	4630      	mov	r0, r6
    6512:	f7ff ff0d 	bl	6330 <next_unwind_byte>
    6516:	2800      	cmp	r0, #0
    6518:	f43f af63 	beq.w	63e2 <__gnu_unwind_execute+0x5a>
    651c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    6520:	f47f af5f 	bne.w	63e2 <__gnu_unwind_execute+0x5a>
    6524:	4602      	mov	r2, r0
    6526:	4619      	mov	r1, r3
    6528:	4628      	mov	r0, r5
    652a:	f7ff fceb 	bl	5f04 <_Unwind_VRS_Pop>
    652e:	2800      	cmp	r0, #0
    6530:	f43f af31 	beq.w	6396 <__gnu_unwind_execute+0xe>
    6534:	e755      	b.n	63e2 <__gnu_unwind_execute+0x5a>
    6536:	ac03      	add	r4, sp, #12
    6538:	4643      	mov	r3, r8
    653a:	220e      	movs	r2, #14
    653c:	4641      	mov	r1, r8
    653e:	9400      	str	r4, [sp, #0]
    6540:	4628      	mov	r0, r5
    6542:	f7ff faf1 	bl	5b28 <_Unwind_VRS_Get>
    6546:	9400      	str	r4, [sp, #0]
    6548:	4628      	mov	r0, r5
    654a:	4643      	mov	r3, r8
    654c:	220f      	movs	r2, #15
    654e:	4641      	mov	r1, r8
    6550:	f7ff fb0c 	bl	5b6c <_Unwind_VRS_Set>
    6554:	4640      	mov	r0, r8
    6556:	e745      	b.n	63e4 <__gnu_unwind_execute+0x5c>
    6558:	4630      	mov	r0, r6
    655a:	f7ff fee9 	bl	6330 <next_unwind_byte>
    655e:	0301      	lsls	r1, r0, #12
    6560:	f000 000f 	and.w	r0, r0, #15
    6564:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    6568:	1c42      	adds	r2, r0, #1
    656a:	2301      	movs	r3, #1
    656c:	430a      	orrs	r2, r1
    656e:	4628      	mov	r0, r5
    6570:	4619      	mov	r1, r3
    6572:	f7ff fcc7 	bl	5f04 <_Unwind_VRS_Pop>
    6576:	2800      	cmp	r0, #0
    6578:	f43f af0d 	beq.w	6396 <__gnu_unwind_execute+0xe>
    657c:	e731      	b.n	63e2 <__gnu_unwind_execute+0x5a>
    657e:	4630      	mov	r0, r6
    6580:	f7ff fed6 	bl	6330 <next_unwind_byte>
    6584:	0301      	lsls	r1, r0, #12
    6586:	f000 000f 	and.w	r0, r0, #15
    658a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    658e:	1c42      	adds	r2, r0, #1
    6590:	2303      	movs	r3, #3
    6592:	e7eb      	b.n	656c <__gnu_unwind_execute+0x1e4>
    6594:	4630      	mov	r0, r6
    6596:	f7ff fecb 	bl	6330 <next_unwind_byte>
    659a:	4602      	mov	r2, r0
    659c:	2800      	cmp	r0, #0
    659e:	f43f af20 	beq.w	63e2 <__gnu_unwind_execute+0x5a>
    65a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    65a6:	f47f af1c 	bne.w	63e2 <__gnu_unwind_execute+0x5a>
    65aa:	2104      	movs	r1, #4
    65ac:	4628      	mov	r0, r5
    65ae:	f7ff fca9 	bl	5f04 <_Unwind_VRS_Pop>
    65b2:	2800      	cmp	r0, #0
    65b4:	f43f aeef 	beq.w	6396 <__gnu_unwind_execute+0xe>
    65b8:	e713      	b.n	63e2 <__gnu_unwind_execute+0x5a>
    65ba:	f000 020f 	and.w	r2, r0, #15
    65be:	3201      	adds	r2, #1
    65c0:	2303      	movs	r3, #3
    65c2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    65c6:	4619      	mov	r1, r3
    65c8:	4628      	mov	r0, r5
    65ca:	f7ff fc9b 	bl	5f04 <_Unwind_VRS_Pop>
    65ce:	2800      	cmp	r0, #0
    65d0:	f43f aee1 	beq.w	6396 <__gnu_unwind_execute+0xe>
    65d4:	e705      	b.n	63e2 <__gnu_unwind_execute+0x5a>
    65d6:	4630      	mov	r0, r6
    65d8:	f7ff feaa 	bl	6330 <next_unwind_byte>
    65dc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    65e0:	f000 030f 	and.w	r3, r0, #15
    65e4:	3210      	adds	r2, #16
    65e6:	3301      	adds	r3, #1
    65e8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    65ec:	e6f2      	b.n	63d4 <__gnu_unwind_execute+0x4c>
    65ee:	2300      	movs	r3, #0
    65f0:	f10d 090c 	add.w	r9, sp, #12
    65f4:	220d      	movs	r2, #13
    65f6:	4619      	mov	r1, r3
    65f8:	f8cd 9000 	str.w	r9, [sp]
    65fc:	4628      	mov	r0, r5
    65fe:	f7ff fa93 	bl	5b28 <_Unwind_VRS_Get>
    6602:	4630      	mov	r0, r6
    6604:	f7ff fe94 	bl	6330 <next_unwind_byte>
    6608:	0602      	lsls	r2, r0, #24
    660a:	f04f 0702 	mov.w	r7, #2
    660e:	d50c      	bpl.n	662a <__gnu_unwind_execute+0x2a2>
    6610:	9b03      	ldr	r3, [sp, #12]
    6612:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    6616:	40b8      	lsls	r0, r7
    6618:	4403      	add	r3, r0
    661a:	4630      	mov	r0, r6
    661c:	9303      	str	r3, [sp, #12]
    661e:	f7ff fe87 	bl	6330 <next_unwind_byte>
    6622:	0603      	lsls	r3, r0, #24
    6624:	f107 0707 	add.w	r7, r7, #7
    6628:	d4f2      	bmi.n	6610 <__gnu_unwind_execute+0x288>
    662a:	9b03      	ldr	r3, [sp, #12]
    662c:	f8cd 9000 	str.w	r9, [sp]
    6630:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    6634:	f503 7201 	add.w	r2, r3, #516	; 0x204
    6638:	40bc      	lsls	r4, r7
    663a:	2300      	movs	r3, #0
    663c:	4414      	add	r4, r2
    663e:	4619      	mov	r1, r3
    6640:	220d      	movs	r2, #13
    6642:	4628      	mov	r0, r5
    6644:	9403      	str	r4, [sp, #12]
    6646:	f7ff fa91 	bl	5b6c <_Unwind_VRS_Set>
    664a:	e6a4      	b.n	6396 <__gnu_unwind_execute+0xe>

0000664c <__gnu_unwind_frame>:
    664c:	b510      	push	{r4, lr}
    664e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    6650:	b084      	sub	sp, #16
    6652:	685a      	ldr	r2, [r3, #4]
    6654:	2003      	movs	r0, #3
    6656:	f88d 000c 	strb.w	r0, [sp, #12]
    665a:	79dc      	ldrb	r4, [r3, #7]
    665c:	f88d 400d 	strb.w	r4, [sp, #13]
    6660:	0212      	lsls	r2, r2, #8
    6662:	3308      	adds	r3, #8
    6664:	4608      	mov	r0, r1
    6666:	a901      	add	r1, sp, #4
    6668:	9201      	str	r2, [sp, #4]
    666a:	9302      	str	r3, [sp, #8]
    666c:	f7ff fe8c 	bl	6388 <__gnu_unwind_execute>
    6670:	b004      	add	sp, #16
    6672:	bd10      	pop	{r4, pc}

00006674 <_Unwind_GetRegionStart>:
    6674:	b508      	push	{r3, lr}
    6676:	f7ff fe85 	bl	6384 <unwind_UCB_from_context>
    667a:	6c80      	ldr	r0, [r0, #72]	; 0x48
    667c:	bd08      	pop	{r3, pc}
    667e:	bf00      	nop

00006680 <_Unwind_GetLanguageSpecificData>:
    6680:	b508      	push	{r3, lr}
    6682:	f7ff fe7f 	bl	6384 <unwind_UCB_from_context>
    6686:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    6688:	79c3      	ldrb	r3, [r0, #7]
    668a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    668e:	3008      	adds	r0, #8
    6690:	bd08      	pop	{r3, pc}
    6692:	bf00      	nop

00006694 <_Unwind_GetDataRelBase>:
    6694:	b508      	push	{r3, lr}
    6696:	f000 f807 	bl	66a8 <abort>
    669a:	bf00      	nop

0000669c <_Unwind_GetTextRelBase>:
    669c:	b508      	push	{r3, lr}
    669e:	f7ff fff9 	bl	6694 <_Unwind_GetDataRelBase>
    66a2:	bf00      	nop

000066a4 <__aeabi_idiv0>:
    66a4:	4770      	bx	lr
    66a6:	bf00      	nop

000066a8 <abort>:
    66a8:	b508      	push	{r3, lr}
    66aa:	2006      	movs	r0, #6
    66ac:	f000 f864 	bl	6778 <raise>
    66b0:	2001      	movs	r0, #1
    66b2:	f7fc fdf5 	bl	32a0 <_exit>
    66b6:	Address 0x00000000000066b6 is out of bounds.


000066b8 <__libc_init_array>:
    66b8:	b570      	push	{r4, r5, r6, lr}
    66ba:	4e0d      	ldr	r6, [pc, #52]	; (66f0 <__libc_init_array+0x38>)
    66bc:	4c0d      	ldr	r4, [pc, #52]	; (66f4 <__libc_init_array+0x3c>)
    66be:	1ba4      	subs	r4, r4, r6
    66c0:	10a4      	asrs	r4, r4, #2
    66c2:	2500      	movs	r5, #0
    66c4:	42a5      	cmp	r5, r4
    66c6:	d109      	bne.n	66dc <__libc_init_array+0x24>
    66c8:	4e0b      	ldr	r6, [pc, #44]	; (66f8 <__libc_init_array+0x40>)
    66ca:	4c0c      	ldr	r4, [pc, #48]	; (66fc <__libc_init_array+0x44>)
    66cc:	f7f9 fe18 	bl	300 <_init>
    66d0:	1ba4      	subs	r4, r4, r6
    66d2:	10a4      	asrs	r4, r4, #2
    66d4:	2500      	movs	r5, #0
    66d6:	42a5      	cmp	r5, r4
    66d8:	d105      	bne.n	66e6 <__libc_init_array+0x2e>
    66da:	bd70      	pop	{r4, r5, r6, pc}
    66dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    66e0:	4798      	blx	r3
    66e2:	3501      	adds	r5, #1
    66e4:	e7ee      	b.n	66c4 <__libc_init_array+0xc>
    66e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    66ea:	4798      	blx	r3
    66ec:	3501      	adds	r5, #1
    66ee:	e7f2      	b.n	66d6 <__libc_init_array+0x1e>
    66f0:	0000030c 	.word	0x0000030c
    66f4:	0000030c 	.word	0x0000030c
    66f8:	0000030c 	.word	0x0000030c
    66fc:	0000031c 	.word	0x0000031c

00006700 <memcpy>:
    6700:	b510      	push	{r4, lr}
    6702:	1e43      	subs	r3, r0, #1
    6704:	440a      	add	r2, r1
    6706:	4291      	cmp	r1, r2
    6708:	d100      	bne.n	670c <memcpy+0xc>
    670a:	bd10      	pop	{r4, pc}
    670c:	f811 4b01 	ldrb.w	r4, [r1], #1
    6710:	f803 4f01 	strb.w	r4, [r3, #1]!
    6714:	e7f7      	b.n	6706 <memcpy+0x6>

00006716 <memset>:
    6716:	4402      	add	r2, r0
    6718:	4603      	mov	r3, r0
    671a:	4293      	cmp	r3, r2
    671c:	d100      	bne.n	6720 <memset+0xa>
    671e:	4770      	bx	lr
    6720:	f803 1b01 	strb.w	r1, [r3], #1
    6724:	e7f9      	b.n	671a <memset+0x4>

00006726 <_raise_r>:
    6726:	291f      	cmp	r1, #31
    6728:	b538      	push	{r3, r4, r5, lr}
    672a:	4604      	mov	r4, r0
    672c:	460d      	mov	r5, r1
    672e:	d904      	bls.n	673a <_raise_r+0x14>
    6730:	2316      	movs	r3, #22
    6732:	6003      	str	r3, [r0, #0]
    6734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6738:	bd38      	pop	{r3, r4, r5, pc}
    673a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    673c:	b112      	cbz	r2, 6744 <_raise_r+0x1e>
    673e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6742:	b94b      	cbnz	r3, 6758 <_raise_r+0x32>
    6744:	4620      	mov	r0, r4
    6746:	f000 f831 	bl	67ac <_getpid_r>
    674a:	462a      	mov	r2, r5
    674c:	4601      	mov	r1, r0
    674e:	4620      	mov	r0, r4
    6750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6754:	f000 b818 	b.w	6788 <_kill_r>
    6758:	2b01      	cmp	r3, #1
    675a:	d00a      	beq.n	6772 <_raise_r+0x4c>
    675c:	1c59      	adds	r1, r3, #1
    675e:	d103      	bne.n	6768 <_raise_r+0x42>
    6760:	2316      	movs	r3, #22
    6762:	6003      	str	r3, [r0, #0]
    6764:	2001      	movs	r0, #1
    6766:	e7e7      	b.n	6738 <_raise_r+0x12>
    6768:	2400      	movs	r4, #0
    676a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    676e:	4628      	mov	r0, r5
    6770:	4798      	blx	r3
    6772:	2000      	movs	r0, #0
    6774:	e7e0      	b.n	6738 <_raise_r+0x12>
    6776:	Address 0x0000000000006776 is out of bounds.


00006778 <raise>:
    6778:	4b02      	ldr	r3, [pc, #8]	; (6784 <raise+0xc>)
    677a:	4601      	mov	r1, r0
    677c:	6818      	ldr	r0, [r3, #0]
    677e:	f7ff bfd2 	b.w	6726 <_raise_r>
    6782:	bf00      	nop
    6784:	10000088 	.word	0x10000088

00006788 <_kill_r>:
    6788:	b538      	push	{r3, r4, r5, lr}
    678a:	4c07      	ldr	r4, [pc, #28]	; (67a8 <_kill_r+0x20>)
    678c:	2300      	movs	r3, #0
    678e:	4605      	mov	r5, r0
    6790:	4608      	mov	r0, r1
    6792:	4611      	mov	r1, r2
    6794:	6023      	str	r3, [r4, #0]
    6796:	f7fc fd91 	bl	32bc <_kill>
    679a:	1c43      	adds	r3, r0, #1
    679c:	d102      	bne.n	67a4 <_kill_r+0x1c>
    679e:	6823      	ldr	r3, [r4, #0]
    67a0:	b103      	cbz	r3, 67a4 <_kill_r+0x1c>
    67a2:	602b      	str	r3, [r5, #0]
    67a4:	bd38      	pop	{r3, r4, r5, pc}
    67a6:	bf00      	nop
    67a8:	10000330 	.word	0x10000330

000067ac <_getpid_r>:
    67ac:	f7fc bd7e 	b.w	32ac <_getpid>

000067b0 <strlen>:
    67b0:	4603      	mov	r3, r0
    67b2:	f813 2b01 	ldrb.w	r2, [r3], #1
    67b6:	2a00      	cmp	r2, #0
    67b8:	d1fb      	bne.n	67b2 <strlen+0x2>
    67ba:	1a18      	subs	r0, r3, r0
    67bc:	3801      	subs	r0, #1
    67be:	4770      	bx	lr

000067c0 <sjsu::lpc40xx::Pin::kFunction>:
    67c0:	0300 ffff                                   ....

000067c4 <sjsu::lpc40xx::Pin::kResistor>:
    67c4:	0203 ffff                                   ....

000067c8 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    67c8:	0107 ffff                                   ....

000067cc <sjsu::lpc40xx::Pin::kOpenDrain>:
    67cc:	010a ffff                                   ....

000067d0 <std::integral_constant<long long, 100ll>::value>:
    67d0:	0064 0000 0000 0000 6e69 6176 696c 0064     d.......invalid.
    67e0:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    67f0:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    6800:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    6810:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    6820:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    6830:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    6840:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    6850:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    6860:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6870:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6880:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6890:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    68a0:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    68b0:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    68c0:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    68d0:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    68e0:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    68f0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6900:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6910:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6920:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6930:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    6940:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    6950:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    6960:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    6970:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    6980:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    6990:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    69a0:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    69b0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    69c0:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    69d0:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    69e0:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    69f0:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    6a00:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    6a10:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    6a20:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    6a30:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    6a40:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    6a50:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    6a60:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    6a70:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    6a80:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    6a90:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6aa0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6ab0:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6ac0:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6ad0:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6ae0:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    6af0:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    6b00:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    6b10:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    6b20:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    6b30:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6b40:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6b50:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6b60:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6b70:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6b80:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    6b90:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    6ba0:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    6bb0:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    6bc0:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3334     [0m.[0m......[43
    6bd0:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
    6be0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6bf0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6c00:	6f4e 6920 746e 7265 7572 7470 7320 7265     No interrupt ser
    6c10:	6976 6563 7220 756f 6974 656e 6620 756f     vice routine fou
    6c20:	646e 6620 726f 7420 6568 7620 6365 6f74     nd for the vecto
    6c30:	2072 6425 2021 6944 6173 6c62 6e69 2067     r %d! Disabling 
    6c40:	5349 1b52 305b 0a6d 0000 0000 5b1b 3134     ISR.[0m......[41
    6c50:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    6c60:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6c70:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6c80:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    6c90:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    6ca0:	6574 3a64 2820 2031 3d3c 6320 6168 6e6e     ted: (1 <= chann
    6cb0:	6c65 2e5f 6863 6e61 656e 206c 2626 6320     el_.channel && c
    6cc0:	6168 6e6e 6c65 2e5f 6863 6e61 656e 206c     hannel_.channel 
    6cd0:	3d3c 3620 0a29 2020 2020 2020 2020 2020     <= 6).          
    6ce0:	6843 6e61 656e 206c 756d 7473 6220 2065     Channel must be 
    6cf0:	6562 7774 6565 206e 2031 6e61 2064 2036     between 1 and 6 
    6d00:	6e6f 4c20 4350 3034 7878 7020 616c 6674     on LPC40xx platf
    6d10:	726f 736d 1b2e 305b 1b6d 305b 0a6d 0000     orms..[0m.[0m...
    6d20:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6d30:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6d40:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6d50:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6d60:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6d70:	5420 7365 6574 3a64 2820 2e30 6630 3c20      Tested: (0.0f <
    6d80:	203d 7564 7974 635f 6379 656c 2620 2026     = duty_cycle && 
    6d90:	7564 7974 635f 6379 656c 3c20 203d 2e31     duty_cycle <= 1.
    6da0:	6630 0a29 2020 2020 2020 2020 2020 7564     0f).          du
    6db0:	7974 635f 6379 656c 6f20 2066 7544 7974     ty_cycle of Duty
    6dc0:	4320 6379 656c 7020 6f72 6976 6564 2064      Cycle provided 
    6dd0:	7369 6f20 7475 6f20 2066 6f62 6e75 7364     is out of bounds
    6de0:	1b2e 305b 1b6d 305b 0a6d 0000 5b1b 3134     ..[0m.[0m....[41
    6df0:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    6e00:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6e10:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6e20:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    6e30:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    6e40:	6574 3a64 2820 7266 7165 6575 636e 5f79     ted: (frequency_
    6e50:	7a68 2120 203d 5f30 7a48 0a29 2020 2020     hz != 0_Hz).    
    6e60:	2020 2020 2020 7750 206d 7246 7165 6575           Pwm Freque
    6e70:	636e 2079 6163 6e6e 746f 6220 2065 657a     ncy cannot be ze
    6e80:	6f72 4820 2e7a 5b1b 6d30 5b1b 6d30 000a     ro Hz..[0m.[0m..
    6e90:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    6ea0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6eb0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6ec0:	333b 6d37 6175 7472 6920 696e 6974 6c61     ;37muart initial
    6ed0:	7a69 6465 5b1b 6d30 000a 0000 5b1b 3234     ized.[0m.....[42
    6ee0:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    6ef0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6f00:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6f10:	6f4d 6f74 2072 6f63 746e 6f72 6c6c 7265     Motor controller
    6f20:	6920 696e 6974 6c61 7a69 6465 5b1b 6d30      initialized.[0m
    6f30:	000a 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    6f40:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    6f50:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6f60:	1b20 305b 333b 6d37 6552 6461 7620 6c61      .[0;37mRead val
    6f70:	6575 2520 2066 766f 7265 5520 5241 1b54     ue %f over UART.
    6f80:	305b 0a6d 0000 0000 5b1b 3234 206d 2020     [0m......[42m   
    6f90:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    6fa0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6fb0:	256d 3e64 1b20 305b 333b 6d37 6625 5b1b     m%d> .[0;37m%f.[
    6fc0:	6d30 000a                                   0m..

00006fc4 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    6fc4:	0000 4140                                   ..@A

00006fc8 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    6fc8:	0000 4140                                   ..@A

00006fcc <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    6fcc:	0100 ffff                                   ....

00006fd0 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    6fd0:	0100 ffff                                   ....

00006fd4 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    6fd4:	0500 ffff                                   ....

00006fd8 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    6fd8:	0108 ffff                                   ....

00006fdc <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    6fdc:	0208 ffff                                   ....

00006fe0 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    6fe0:	0208 ffff                                   ....

00006fe4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    6fe4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    6ff4:	2e72 7068 0070 ffff                         r.hpp...

00006ffc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    6ffc:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    700c:	2e72 7068 0070 ffff                         r.hpp...

00007014 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7014:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7024:	2e72 7068 0070 ffff                         r.hpp...

0000702c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    702c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    703c:	2e72 7068 0070 ffff                         r.hpp...

00007044 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    7044:	71c4 0000 0802 0000                         .q......

0000704c <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    704c:	71c4 0000 0902 0000                         .q......

00007054 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    7054:	71c4 0000 1c04 0000                         .q......

0000705c <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    705c:	71c4 0000 1d04 0000                         .q......

00007064 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    7064:	71c4 0000 1d01 0000                         .q......

0000706c <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    706c:	71c4 0000 0902 0000                         .q......

00007074 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    7074:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

00007084 <sjsu::lpc40xx::Pwm::MatchControl::kPwm0Reset>:
    7084:	0101 ffff                                   ....

00007088 <sjsu::lpc40xx::Pwm::Timer::kCounterEnable>:
    7088:	0100 ffff                                   ....

0000708c <sjsu::lpc40xx::Pwm::Timer::kCounterReset>:
    708c:	0101 ffff                                   ....

00007090 <sjsu::lpc40xx::Pwm::Timer::kPwmEnable>:
    7090:	0103 ffff                                   ....

00007094 <sjsu::lpc40xx::Pwm::CountControl::kMode>:
    7094:	0200 ffff                                   ....

00007098 <sjsu::lpc40xx::Pwm::CountControl::kCountInput>:
    7098:	0202 ffff                                   ....

0000709c <sjsu::lpc40xx::Pwm::Channel::kPwmPin0>:
    709c:	71c4 0000 0002 0000                         .q......

000070a4 <sjsu::lpc40xx::Pwm::Channel::kPwm0>:
    70a4:	0054 1000 709c 0000 0009 0000               T....p......

000070b0 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    70b0:	7770 2e6d 7068 0070                         pwm.hpp.

000070b8 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::file>:
    70b8:	7770 2e6d 7068 0070                         pwm.hpp.

000070c0 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    70c0:	7770 2e6d 7068 0070                         pwm.hpp.

000070c8 <sjsu::Servo::kDefaultFrequency>:
    70c8:	0000 4248                                   ..HB

000070cc <motor_controller_freq>:
    70cc:	0000 4296                                   ...B

000070d0 <motor_controller_min_pulse>:
    70d0:	03e8 0000 0000 0000                         ........

000070d8 <motor_controller_max_pulse>:
    70d8:	07d0 0000 0000 0000                         ........

000070e0 <main::file>:
    70e0:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000070ec <main::file>:
    70ec:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000070f8 <main::file>:
    70f8:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00007104 <main::file>:
    7104:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00007110 <vtable for sjsu::Servo>:
	...
    7118:	21a9 0000 2273 0000 22e3 0000 230d 0000     .!..s"..."...#..
    7128:	234b 0000 23ed 0000                         K#...#..

00007130 <vtable for sjsu::lpc40xx::Pwm>:
	...
    7138:	1c35 0000 1df5 0000 1ec5 0000 1f3d 0000     5...........=...

00007148 <vtable for sjsu::Pwm>:
	...
    7150:	4e3d 0000 4e3d 0000 4e3d 0000 4e3d 0000     =N..=N..=N..=N..

00007160 <vtable for sjsu::lpc40xx::Uart>:
	...
    7168:	1791 0000 1851 0000 18dd 0000 1981 0000     ....Q...........
    7178:	1a51 0000                                   Q...

0000717c <vtable for sjsu::Uart>:
	...
    7184:	4e3d 0000 4e3d 0000 4e3d 0000 4e3d 0000     =N..=N..=N..=N..
    7194:	4e3d 0000                                   =N..

00007198 <vtable for sjsu::lpc40xx::SystemController>:
	...
    71a0:	0b29 0000 0bc5 0000 0c1d 0000 0c41 0000     )...........A...
    71b0:	0c5d 0000 0c99 0000 0ccd 0000               ]...........

000071bc <vtable for sjsu::lpc40xx::Pin>:
	...
    71c4:	0411 0000 0445 0000 04b5 0000 0479 0000     ....E.......y...

000071d4 <main::__PRETTY_FUNCTION__>:
    71d4:	6e69 2074 616d 6e69 2928 ff00               int main()..

000071e0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    71e0:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    71f0:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    7200:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    7210:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    7220:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    7230:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    7240:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    7250:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    7260:	736e 0074                                   nst.

00007264 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7264:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    7274:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    7284:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    7294:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    72a4:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    72b4:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    72c4:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    72d4:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

000072e0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    72e0:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    72f0:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    7300:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    7310:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    7320:	2029 6f63 736e 0074                         ) const.

00007328 <sjsu::lpc40xx::Pwm::SetFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7328:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7338:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    7348:	533a 7465 7246 7165 6575 636e 2879 6e75     :SetFrequency(un
    7358:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    7368:	6568 7472 5f7a 2974 6320 6e6f 7473 ff00     hertz_t) const..

00007378 <sjsu::lpc40xx::Pwm::SetDutyCycle(float) const::__PRETTY_FUNCTION__>:
    7378:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7388:	3a75 6c3a 6370 3034 7878 3a3a 7750 3a6d     u::lpc40xx::Pwm:
    7398:	533a 7465 7544 7974 7943 6c63 2865 6c66     :SetDutyCycle(fl
    73a8:	616f 2974 6320 6e6f 7473 ff00               oat) const..

000073b4 <sjsu::lpc40xx::Pwm::Initialize(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    73b4:	6976 7472 6175 206c 6a73 7573 3a3a 7453     virtual sjsu::St
    73c4:	7461 7375 7320 736a 3a75 6c3a 6370 3034     atus sjsu::lpc40
    73d4:	7878 3a3a 7750 3a6d 493a 696e 6974 6c61     xx::Pwm::Initial
    73e4:	7a69 2865 6e75 7469 3a73 663a 6572 7571     ize(units::frequ
    73f4:	6e65 7963 3a3a 6568 7472 5f7a 2974 6320     ency::hertz_t) c
    7404:	6e6f 7473 ff00 ffff                         onst....

0000740c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    740c:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    741c:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    742c:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    743c:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    744c:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    745c:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    746c:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    747c:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    748c:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    749c:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    74ac:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    74bc:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    74cc:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    74dc:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    74ec:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    74fc:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    750c:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    751c:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    752c:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    753c:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    754c:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    755c:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    756c:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    757c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    758c:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    759c:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    75ac:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    75bc:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    75cc:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    75dc:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    75ec:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    75fc:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    760c:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    761c:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    762c:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    763c:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    764c:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    765c:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    766c:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    767c:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    768c:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    769c:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    76ac:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    76bc:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    76cc:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    76dc:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

000076e8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    76e8:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    76f8:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    7708:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    7718:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    7728:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    7738:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    7748:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    7758:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    7768:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    7778:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    7788:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    7798:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    77a8:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    77b8:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    77c8:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    77d8:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    77e8:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    77f8:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    7808:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    7818:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    7828:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7838:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7848:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    7858:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    7868:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    7878:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    7888:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    7898:	ffff ffff 4849 0000 0001 0000 ffff ffff     ....IH..........
    78a8:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    78b8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    78c8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    78d8:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    78e8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    78f8:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    7908:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    7918:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    7928:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    7938:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    7948:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    7958:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    7968:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    7978:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7988:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    7998:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    79a8:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    79b8:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    79c8:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    79d8:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    79e8:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    79f8:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    7a08:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    7a18:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    7a28:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    7a38:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    7a48:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    7a58:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    7a68:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7a78:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    7a88:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    7a98:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    7aa8:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    7ab8:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    7ac8:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    7ad8:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    7ae8:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    7af8:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    7b08:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7b18:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7b28:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    7b38:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    7b48:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    7b58:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    7b68:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    7b78:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    7b88:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    7b98:	4d11 0000 0001 0000 ffff ffff fffe ffff     .M..............
    7ba8:	4d41 0000 0001 0000 ffff ffff 5b1b 3134     AM...........[41
    7bb8:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    7bc8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7bd8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7be8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    7bf8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    7c08:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    7c18:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    7c28:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    7c38:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    7c48:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    7c58:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    7c68:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    7c78:	2174 5b1b 6d30 5b1b 6d30 000a ffff ffff     t!.[0m.[0m......

00007c88 <std::integral_constant<long long, 1ll>::value>:
    7c88:	0001 0000 0000 0000                         ........

00007c90 <config::kSystemClockRateMhz>:
    7c90:	0000 4240                                   ..@B

00007c94 <config::kRtosFrequency>:
    7c94:	0000 447a                                   ..zD

00007c98 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    7c98:	7cec 0000                                   .|..

00007c9c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    7c9c:	71c4 0000 0200 0000                         .q......

00007ca4 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    7ca4:	71c4 0000 0300 0000                         .q......

00007cac <sjsu::lpc40xx::Uart::Port::kUart0>:
    7cac:	c000 4000 0003 0000 7c9c 0000 7ca4 0000     ...@.....|...|..
    7cbc:	0009 0000                                   ....

00007cc0 <sjsu::InitializePlatform()::file>:
    7cc0:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00007ccc <vtable for sjsu::cortex::SystemTimer>:
	...
    7cd4:	48b5 0000 48c9 0000 49d1 0000 48e9 0000     .H...H...I...H..

00007ce4 <vtable for sjsu::cortex::InterruptController>:
	...
    7cec:	4799 0000 47ed 0000                         .G...G..

00007cf4 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    7cf4:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    7d04:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

00007d14 <__sf_fake_stderr>:
	...

00007d34 <__sf_fake_stdin>:
	...

00007d54 <__sf_fake_stdout>:
	...
