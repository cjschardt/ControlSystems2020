
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000032c5

Program Header:
0x70000001 off    0x00019ec4 vaddr 0x00009ec4 paddr 0x00009ec4 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009f7c memsz 0x00009f7c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009f7c align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x000200f8 vaddr 0x100000f8 paddr 0x100000f8 align 2**16
         filesz 0x00000000 memsz 0x00000f40 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00009eac  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000f8  10000000  00009f7c  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200f8  2**2  CONTENTS
  3 .bss             00000f40  100000f8  100000f8  000200f8  2**3  ALLOC
  4 .ARM.extab       00000018  00009eac  00009eac  00019eac  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  00009ec4  00009ec4  00019ec4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200f8  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200f8  2**2  CONTENTS
  8 .noinit          00000000  10001038  10001038  000200f8  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200f8  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020128  2**0  CONTENTS, READONLY
 11 .debug_info      0007d382  00000000  00000000  000201a6  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00005290  00000000  00000000  0009d528  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00001078  00000000  00000000  000a27b8  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000f98  00000000  00000000  000a3830  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      000085c8  00000000  00000000  000a47c8  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002cd6d  00000000  00000000  000acd90  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     0000531c  00000000  00000000  000d9b00  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f8 l    d  .bss	00000000 .bss
00009eac l    d  .ARM.extab	00000000 .ARM.extab
00009ec4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001038 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00009dc8 l     O .text	00000004 config::kSystemClockRateMhz
00009dcc l     O .text	00000004 config::kRtosFrequency
00005698 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000056b4 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
10000078 l     O .data	00000004 (anonymous namespace)::system_controller
100004c8 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100004cc l     O .bss	0000000c (anonymous namespace)::uart0
1000007c l     O .data	0000000c (anonymous namespace)::system_timer
10000088 l     O .data	00000004 (anonymous namespace)::interrupt_controller
00005af0 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005b14 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00009df8 l     O .text	0000000c sjsu::InitializePlatform()::file
00009e1c l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00005ca4 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
00005db4 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/nathan/Videos/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/nathan/Videos/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000f8 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000fc l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003ec l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000408 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000044e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000046a l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000048e l     F .text	00000026 _Unwind_GetGR
00000668 l     F .text	00000030 NVIC_EnableIRQ
00000698 l     F .text	00000030 NVIC_DisableIRQ
000006c8 l     F .text	00000054 NVIC_SetPriority
000008f0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000090c l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00009318 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
0000939c l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00009418 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00001388 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00009498 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
000094e8 l     O .text	00000031 sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__
0000951c l     O .text	00000043 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__
000091a4 l     O .text	0000000f vUartTask(void*)::file
000091b4 l     O .text	0000000f vUartTask(void*)::file
000091c4 l     O .text	0000000f vUartTask(void*)::file
00009300 l     O .text	00000016 vUartTask(void*)::__PRETTY_FUNCTION__
000091d4 l     O .text	0000000f vPotentiometerTask(void*)::file
00009460 l     O .text	0000001f vPotentiometerTask(void*)::__PRETTY_FUNCTION__
000091e4 l     O .text	0000000f vBrakeTask(void*)::file
00009480 l     O .text	00000017 vBrakeTask(void*)::__PRETTY_FUNCTION__
00002de0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002e90 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002eb4 l     F .text	00000240 __static_initialization_and_destruction_0(int, int)
000030f4 l     F .text	00000010 _GLOBAL__sub_I_xUartTaskHandle
00000000 l    df *ABS*	00000000 exceptions.cpp
000032b4 l       .text	00000000 handler2_address_const
00003334 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00003378 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
100003b0 l     O .bss	00000064 pxReadyTasksLists
10000414 l     O .bss	00000014 xDelayedTaskList1
10000428 l     O .bss	00000014 xDelayedTaskList2
1000043c l     O .bss	00000004 pxDelayedTaskList
10000440 l     O .bss	00000004 pxOverflowDelayedTaskList
10000444 l     O .bss	00000014 xPendingReadyList
10000458 l     O .bss	00000014 xTasksWaitingTermination
1000046c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10000470 l     O .bss	00000014 xSuspendedTaskList
10000484 l     O .bss	00000004 uxCurrentNumberOfTasks
10000488 l     O .bss	00000004 xTickCount
1000048c l     O .bss	00000004 uxTopReadyPriority
10000490 l     O .bss	00000004 xSchedulerRunning
10000494 l     O .bss	00000004 uxPendedTicks
10000498 l     O .bss	00000004 xYieldPending
1000049c l     O .bss	00000004 xNumOfOverflows
100004a0 l     O .bss	00000004 uxTaskNumber
100004a4 l     O .bss	00000004 xNextTaskUnblockTime
100004a8 l     O .bss	00000004 xIdleTaskHandle
100004ac l     O .bss	00000004 uxSchedulerSuspended
100004b0 l     O .bss	00000004 ulTaskSwitchedInTime
100004b4 l     O .bss	00000004 ulTotalRunTime
000035da l     F .text	000000f4 prvInitialiseNewTask
000036d0 l     F .text	000000dc prvAddNewTaskToReadyList
00003e04 l     F .text	00000080 prvInitialiseTaskLists
00003edc l     F .text	0000003c prvDeleteTCB
00003f18 l     F .text	0000004c prvResetNextTaskUnblockTime
00004068 l     F .text	000000cc prvAddCurrentTaskToDelayedList
00003df4 l     F .text	0000000e prvIdleTask
00003e84 l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
000042e0 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
000042fc l     F .text	0000002e _strlen(char const*)
0000432a l     F .text	00000028 _is_digit(char)
00004352 l     F .text	00000048 _atoi(char const**)
0000439a l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000045dc l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000046ac l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0000981c l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
0000478c l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00004bd0 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00005514 l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
100004b8 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
1000008c l     O .data	00000004 uxCriticalNesting
00005e2c l     F .text	00000030 prvTaskExitError
00005e80 l       .text	00000000 pxCurrentTCBConst2
00005e88 l     F .text	00000024 prvPortStartFirstTask
00006018 l     F .text	00000010 vPortEnableVFP
00005fd0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_common.cpp
100004d8 l     O .bss	00000060 idle_task_tcb
10000538 l     O .bss	00000140 idle_task_stack
10000678 l     O .bss	00000060 timer_task_tcb
100006d8 l     O .bss	00000800 timer_task_stack
00000000 l    df *ABS*	00000000 timers.c
10000ed8 l     O .bss	00000014 xActiveTimerList1
10000eec l     O .bss	00000014 xActiveTimerList2
10000f00 l     O .bss	00000004 pxCurrentTimerList
10000f04 l     O .bss	00000004 pxOverflowTimerList
10000f08 l     O .bss	00000004 xTimerQueue
10000f0c l     O .bss	00000004 xTimerTaskHandle
00006588 l     F .text	00000080 prvCheckForValidListAndQueue
0000621c l     F .text	00000024 prvTimerTask
000061b8 l     F .text	00000064 prvProcessExpiredTimer
00006364 l     F .text	00000084 prvInsertTimerInActiveList
000062dc l     F .text	00000048 prvGetNextExpireTime
00006240 l     F .text	0000009c prvProcessTimerOrBlockTask
000063e8 l     F .text	000000f8 prvProcessReceivedCommands
00006324 l     F .text	00000040 prvSampleTimeNow
000064e0 l     F .text	000000a8 prvSwitchTimerLists
10000f10 l     O .bss	00000004 xLastTime.6731
10000f8c l     O .bss	00000050 xStaticTimerQueue.6776
10000f14 l     O .bss	00000078 ucStaticTimerQueueStorage.6777
00000000 l    df *ABS*	00000000 queue.c
000066fa l     F .text	00000046 prvInitialiseNewQueue
00006a8c l     F .text	000000d4 prvCopyDataToQueue
00006c7c l     F .text	00000030 prvIsQueueFull
00006bac l     F .text	000000a4 prvUnlockQueue
00006b60 l     F .text	0000004c prvCopyDataFromQueue
00006c50 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00007730 l     F .text	00000012 selfrel_offset31
00007744 l     F .text	00000060 search_EIT_table
000077a4 l     F .text	00000028 __gnu_unwind_get_pr_addr
000077cc l     F .text	000000a4 get_eit_entry
00007870 l     F .text	00000058 restore_non_core_regs
000078c8 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000078d4 l     F .text	00000004 __gnu_unwind_24bit.isra.1
000078d8 l     F .text	00000002 _Unwind_DebugHook
000078dc l     F .text	0000003e unwind_phase2
0000791c l     F .text	000000c6 unwind_phase2_forced
00007aec l     F .text	00000018 _Unwind_GetGR
00007b30 l     F .text	0000001a _Unwind_SetGR
00007bbc l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
000082c8 l     F .text	00000038 next_unwind_byte
00008300 l     F .text	0000001a _Unwind_GetGR.constprop.0
0000831c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000004f4  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00008280 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000079e8 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000058a4  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00002b86  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
000031a0  w    F .text	0000006c sjsu::InitializeBssSection()
0000417c g     F .text	00000010 _getpid
00009084  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00005870  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000058ec  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
000090e0  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
0000566c  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
0000916c  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel5
000057de  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
10000060  w    O .data	00000004 sjsu::newlib::in
00005f38 g     F .text	00000034 vPortExitCritical
0000711c g     F .text	0000005a .hidden __floatdidf
10000388  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00001f30  w    F .text	00000044 sjsu::lpc40xx::Gpio::Toggle() const
000008a0  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00009260  w    O .text	00000014 vtable for sjsu::Adc
000088b0 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
000054a4 g     F .text	00000044 printf
00006cfc g     F .text	00000068 vQueueWaitForMessageRestricted
00000000 g       *ABS*	00000000 __vectors_start__
000088ea g     F .text	00000002 __malloc_unlock
00002a42  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000276c g     F .text	00000134 vBrakeTask(void*)
00001c54  w    F .text	0000001e sjsu::Gpio::SetHigh() const
000029ca  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001ae0  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
00001e14  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
000026f4  w    F .text	0000002c sjsu::lpc40xx::Pin::Pin(sjsu::lpc40xx::Pin const&)
00000580  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
0000813c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
0000825c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00006894 g     F .text	000000b2 xQueueGenericSendFromISR
00009f7c g       .ARM.exidx	00000000 __exidx_end
00009064  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00005b48 g     F .text	00000014 ThreadRuntimeCounter
00007e90 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000070  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00002504  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
00009164  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel4
00000aac  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
100003ac g     O .bss	00000004 pxCurrentTCB
0000860c g     F .text	0000000a .hidden _Unwind_GetRegionStart
0000825c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
0000216c  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeRising() const
0000907c  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00009128  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10010000 g       *ABS*	00000000 __top_SRAM
10001034 g     O .bss	00000004 errno
00009f7c g       .ARM.exidx	00000000 _etext
00002ad6  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000007f0  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000ba4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
000082a4 g     F .text	00000022 .hidden _Unwind_Backtrace
00009dd0  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
10000120  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00007224 g     F .text	00000160 .hidden __aeabi_fadd
100004c0  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00007220 g     F .text	00000164 .hidden __subsf3
00009130  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000c70  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00009108  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00003d24 g     F .text	0000002c vTaskInternalSetTimeOutState
0000811c g     F .text	00000018 .hidden __restore_core_regs
0000815c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00009074  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00009274  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00005714  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00009068  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00005eb0 g     F .text	00000054 xPortStartScheduler
00001080  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000079e4 g     F .text	00000004 .hidden _Unwind_GetCFA
000086b8 g     F .text	00000016 memcpy
00003c14 g     F .text	0000002c vTaskPlaceOnEventList
00000da8  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006d7c g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00007b04 g     F .text	0000002a .hidden _Unwind_VRS_Set
000070a4 g     F .text	00000022 .hidden __floatsidf
00005b5c g     F .text	00000060 vPortSetupTimerInterrupt
10000390  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00005fd8 g     F .text	00000040 xPortSysTickHandler
00007434 g     F .text	00000000 .hidden __aeabi_uldivmod
10001038 g       .noinit	00000000 _noinit
00000c88  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000421c g     F .text	00000048 puts
00004158 g     F .text	00000024 vPortFree
00001954  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00001144  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00002ab2  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
0000914c  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4
10000074  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
000009d8  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
00001574  w    F .text	00000020 sjsu::Uart::Uart()
00008698 g     F .text	00000010 malloc
00009144  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
00008850 g     F .text	00000050 _raise_r
0000738c g     F .text	0000001c .hidden __aeabi_i2f
00001900  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
000018d0  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
00005f70 g     F .text	00000066 xPortPendSVHandler
00001c72  w    F .text	0000001e sjsu::Gpio::SetLow() const
000026f4  w    F .text	0000002c sjsu::lpc40xx::Pin::Pin(sjsu::lpc40xx::Pin const&)
000033e2 g     F .text	00000048 vListInsertEnd
000003aa  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
000007b4  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
000088d4 g     F .text	00000004 _getpid_r
00007b4c g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
000029a4  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00007084 g     F .text	0000001e .hidden __aeabi_ui2d
10010000 g       *ABS*	00000000 StackTop
00000d44  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00007464 g     F .text	000002cc .hidden __udivmoddi4
00006e00 g     F .text	00000000 .hidden __aeabi_drsub
00008830 g     F .text	00000020 _sbrk_r
000000fc g       .text	00000000 bss_section_table
0000906c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00005a14  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000814c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00001594  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000033c8 g     F .text	0000001a vListInitialiseItem
00007e9c g     F .text	0000027e .hidden _Unwind_VRS_Pop
00006948 g     F .text	00000144 xQueueReceive
00007e98  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000fe4 g     O .bss	00000050 xQueueRegistry
00005944  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000380  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
000082a4 g     F .text	00000022 .hidden ___Unwind_Backtrace
00000624  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
000017b8  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
0000053c  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
000070c8 g     F .text	00000042 .hidden __extendsfdf2
00009120  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00006090 g     F .text	00000034 vApplicationGetTimerTaskMemory
00009228  w    O .text	00000024 vtable for sjsu::Gpio
00006e0c g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100004bc  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
00009ec4 g       .ARM.extab	00000000 __exidx_start
00001c90  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
00008650 g     F .text	00000048 __libc_init_array
000012bc  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00008214 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
00001364  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00006078  w    F .text	00000018 unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])
00001b90  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
00008640 g     F .text	0000000e abort
00008238 g     F .text	00000022 .hidden ___Unwind_Resume
0000134c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00007084 g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
000041a8 g     F .text	00000044 _sbrk
00004134 g     F .text	00000024 pvPortMalloc
00009198  w    O .text	00000009 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file
1000037c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000057f8  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
000012e8  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00080000 g       *ABS*	00000000 __top_FLASH
00003388 g     F .text	00000040 vListInitialise
00006d64 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00002090  w    F .text	00000018 auto sjsu::Value<sjsu::Gpio::Edge>(sjsu::Gpio::Edge)
000021c8  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeFalling() const
00009070  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00002dfc  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00001762  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00006df4 g     F .text	0000000a std::terminate()
00007178 g     F .text	0000009e .hidden __aeabi_d2f
00008164 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00009078  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
000039d8 g     F .text	00000020 xTaskGetTickCount
00006740 g     F .text	00000154 xQueueGenericSend
000022dc  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00007220 g     F .text	00000164 .hidden __aeabi_fsub
00001688  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00002a68  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
000024e0  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
0000329c g     F .text	00000026 ArmHardFaultHandler
1000038c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
00002142  w    F .text	00000028 sjsu::lpc40xx::Gpio::DetachInterrupt() const
1000022c  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000d22  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10001038 g       .bss	00000000 _ebss
00001714  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
000092ac  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00002bc6  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000a54  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00003fa0 g     F .text	000000c8 xTaskPriorityDisinherit
00005910  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
0000042c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
000073b8 g     F .text	0000007c .hidden __floatdisf
00009ddc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00003220 g     F .text	0000007c GetRegistersFromStack
00009134  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
00001594  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
10000370 g     O .bss	00000004 xUartTaskHandle
00003c7c g     F .text	000000a8 xTaskRemoveFromEventList
00006e0c g     F .text	00000276 .hidden __aeabi_dadd
00001900  w    F .text	00000020 sjsu::Adc::Adc()
0000710c g     F .text	0000006a .hidden __aeabi_ul2d
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00008134 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00005bbc  w    F .text	000000b8 sjsu::InitializePlatform()
00002920  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
00009e4c g     O .text	00000020 __sf_fake_stderr
00001d84  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00006de4 g     F .text	00000010 std::get_terminate()
10001038 g       .bss	00000000 end
000026c0  w    F .text	00000034 sjsu::Pin::Pin(sjsu::Pin const&)
10000374 g     O .bss	00000004 xPotentiometerTaskHandle
00001574  w    F .text	00000020 sjsu::Uart::Uart()
00008238 g     F .text	00000022 .hidden _Unwind_Resume
00001cac  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00007ab4 g     F .text	0000000c .hidden _Unwind_DeleteException
00009218  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
10000244  w    O .bss	00000100 sjsu::lpc40xx::Gpio::interrupthandlers
00007ab0 g     F .text	00000002 .hidden _Unwind_Complete
00000b5c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
1000036c  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
00004270 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
00009e04  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00009094  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00003d50 g     F .text	0000008c xTaskCheckForTimeOut
000086e0 g     F .text	0000009c _free_r
000054f6 g     F .text	0000001c trace_write
10000384  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00002cde  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000f8 g       .bss	00000000 _bss
00006e08 g     F .text	0000027a .hidden __aeabi_dsub
000090c8  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001b30  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
000054e8 g     F .text	0000000e trace_initialize
000038a0 g     F .text	0000001c vTaskSuspendAll
00009138  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
0000710c g     F .text	0000006a .hidden __floatundidf
00006dd4 g     F .text	00000006 __cxa_pure_virtual
00000d80  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00002020  w    F .text	0000003c sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const
0000738c g     F .text	0000001c .hidden __floatsisf
000090f8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000124  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00008320 g     F .text	000002c4 .hidden __gnu_unwind_execute
0000349c g     F .text	00000054 uxListRemove
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
0000269c  w    F .text	00000024 sjsu::Gpio::Gpio(sjsu::Gpio const&)
10000394  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
0000093c  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00008144 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000734  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002d2e  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000057a0  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
000092e8  w    O .text	00000018 vtable for sjsu::Pin
000034f0 g     F .text	00000060 xTaskCreateStatic
10001038 g       .noinit	00000000 _end_noinit
1000012c  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000a30  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00003b50 g     F .text	000000c4 vTaskSwitchContext
000010c8  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00009080  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
0000576c  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00009178  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00002504  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
000066bc g     F .text	0000003e xQueueGenericCreateStatic
00007a5c g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000344  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
00003c40 g     F .text	0000003c vTaskPlaceOnEventListRestricted
00005784  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
000055e0  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
1000039c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
000070a4 g     F .text	00000022 .hidden __aeabi_i2d
0000912c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
00009100  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00008154 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00005a2c  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006044 g     F .text	00000034 vApplicationGetIdleTaskMemory
10000398  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
000073a8 g     F .text	0000008c .hidden __floatundisf
00006138 g     F .text	00000080 xTimerGenericCommand
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00008214 g     F .text	00000022 .hidden _Unwind_RaiseException
0000863c  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
0000320c  w    F .text	00000014 sjsu::SystemInitialize()
000019ac  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00007384 g     F .text	00000024 .hidden __aeabi_ui2f
00001100  w    F .text	00000044 sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
000000e4 g       .text	00000000 data_section_table
10000118  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
000088e8 g     F .text	00000002 __malloc_lock
00002224  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeRising() const
100003a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00006d94 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
0000037e  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00009e6c g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00001004  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
20000000 g       *ABS*	00000000 __base_SRAM_AHB
000086ce g     F .text	00000010 memset
000028a0 g     F .text	00000080 main
00005624  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001cbc  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00009140  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
000073b8 g     F .text	0000007c .hidden __aeabi_l2f
000022f6  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
0000342a g     F .text	00000072 vListInsert
000026c0  w    F .text	00000034 sjsu::Pin::Pin(sjsu::Pin const&)
00001dc0  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00005644  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
00009de4  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
000060c4 g     F .text	00000074 xTimerCreateTimerTask
000092d0  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00007178 g     F .text	0000009e .hidden __truncdfsf2
00002bea  w    F .text	0000009a float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)
0000031c g       .text	00000000 __init_array_end
00005e60 g     F .text	00000026 vPortSVCHandler
0000877c g     F .text	000000b4 _malloc_r
00002540 g     F .text	0000015c vPotentiometerTask(void*)
00000000 g       *ABS*	00000000 __base_FLASH
0000711c g     F .text	0000005a .hidden __aeabi_l2d
0000908c  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000068  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
000073a8 g     F .text	0000008c .hidden __aeabi_ul2f
000056d8  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000010dc  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
00001fcc  w    F .text	00000054 sjsu::lpc40xx::Gpio::ValidPortCheck() const
00007a48 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000057c2  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00002a06  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00007aa0 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
1000005c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00009dc0  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00002b3a  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
0000811c g     F .text	00000018 .hidden restore_core_regs
00000a70  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00008200 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
000038bc g     F .text	0000011c xTaskResumeAll
00009118  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
000037f4 g     F .text	000000ac vTaskStartScheduler
00001f74  w    F .text	00000040 sjsu::lpc40xx::Gpio::Read() const
00005924  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00002308  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
000018ac  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00007218 g     F .text	0000016c .hidden __aeabi_frsub
00008634 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000094 g     O .data	00000004 _impure_ptr
00009090  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000cac  w    F .text	0000001e units::linear_scale<float>::operator()() const
0000913c  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000c34  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00005734  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
00000824  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
0000924c  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
00003ddc g     F .text	00000018 vTaskMissedYield
00002b0c  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000059d8  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
100003a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00002330 g     F .text	0000016c vUartTask(void*)
00008618 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000090b0  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00006cac g     F .text	00000050 vQueueAddToRegistry
00002720  w    F .text	0000004c sjsu::lpc40xx::Gpio::Gpio(sjsu::lpc40xx::Gpio const&)
00002114  w    F .text	0000002e sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
00001920  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
00001ebc  w    F .text	00000074 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
000032c4 g     F .text	00000070 ArmResetHandler
000039f8 g     F .text	00000158 xTaskIncrementTick
00002b68  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
00001920  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
100003a8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00007ac0 g     F .text	0000002a .hidden _Unwind_VRS_Get
00001d9c  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000090 g     O .data	00000004 __cxxabiv1::__terminate_handler
000081ec g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000ae0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00006608 g     F .text	000000b4 xQueueGenericReset
00000b14  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
000041ec g     F .text	00000030 _write
000085e4 g     F .text	00000028 .hidden __gnu_unwind_frame
10000378 g     O .bss	00000004 xBrakeTaskHandle
00001b48  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00008280 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000f8 g       .data	00000000 _edata
00001888  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00001e3c  w    F .text	00000080 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
000091f4  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
00002280  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeFalling() const
000019c4  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00005c74  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000128  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00003550 g     F .text	0000008a xTaskCreate
00001cf8  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
00009098  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
0000269c  w    F .text	00000024 sjsu::Gpio::Gpio(sjsu::Gpio const&)
00000cca  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000020a8  w    F .text	0000006c sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const
10000000 g       *ABS*	00000000 __base_RAM
00007384 g     F .text	00000024 .hidden __floatunsisf
00006dda g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
000081a8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
0000602c  w    F .text	00000016 unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])
0000418c g     F .text	0000001a _kill
00003104  w    F .text	0000009c sjsu::InitializeDataSection()
00002e38  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
000037ac g     F .text	00000048 vTaskDelay
00000648  w    F .text	00000020 sjsu::DefaultUptime()
00009e8c g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
00009174  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
00003f64 g     F .text	0000003c xTaskGetSchedulerState
000024e0  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
0000030c g       .text	00000000 __init_array_start
0000863c  w    F .text	00000002 .hidden __aeabi_idiv0
0000915c  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
00002a8c  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00004264 g     F .text	0000000c _exit
00009110  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
000003cc  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
0000249c g     F .text	00000044 my_round(float)
00001224  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00001fb4  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
0000071c  w    F .text	00000018 sjsu::Pin::GetPort() const
000088d8 g     F .text	00000010 strlen
00005dc4 g     F .text	00000068 pxPortInitialiseStack
0000074c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000000  w    O .data	00000004 sjsu::Uptime
00007e94  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00002c84  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000fe0 g     O .bss	00000004 __malloc_sbrk_start
00000f3c  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006db4 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00009188  w    O .text	00000004 sjsu::lpc40xx::Gpio::kInterruptController
000004b4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00009154  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5
000070c8 g     F .text	00000042 .hidden __aeabi_f2d
00005f04 g     F .text	00000034 vPortEnterCritical
0000862c g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00001270  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000fdc g     O .bss	00000004 __malloc_free_list
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
00002d88  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000780  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00006e08 g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
10000064  w    O .data	00000004 heap_position
00000bec  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00002956  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
0000918c  w    O .text	00000009 sjsu::lpc40xx::Gpio::ValidPortCheck() const::file
00001d10  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
00009088  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
0000205c  w    F .text	00000034 sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const
00009290  w    O .text	0000001c vtable for sjsu::Uart
00007224 g     F .text	00000160 .hidden __addsf3
00002ba4  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
00009dd4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
1000006c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
000015c8  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
000088a0 g     F .text	00000010 raise
00002720  w    F .text	0000004c sjsu::lpc40xx::Gpio::Gpio(sjsu::lpc40xx::Gpio const&)
000086a8 g     F .text	00000010 free



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 c5 32 00 00 35 57 00 00 9d 32 00 00     .....2..5W...2..
      10:	35 57 00 00 35 57 00 00 35 57 00 00 00 00 00 00     5W..5W..5W......
	...
      2c:	61 5e 00 00 35 57 00 00 00 00 00 00 71 5f 00 00     a^..5W......q_..
      3c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      4c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      5c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      6c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      7c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      8c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      9c:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      ac:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      bc:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      cc:	35 57 00 00 35 57 00 00 35 57 00 00 35 57 00 00     5W..5W..5W..5W..
      dc:	35 57 00 00 35 57 00 00                             5W..5W..

000000e4 <data_section_table>:
      e4:	00009f7c 	.word	0x00009f7c
      e8:	10000000 	.word	0x10000000
      ec:	000000f8 	.word	0x000000f8
      f0:	00009f7c 	.word	0x00009f7c
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f8 	.word	0x100000f8
     100:	00000f40 	.word	0x00000f40
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	000030f5 	.word	0x000030f5
     314:	00003379 	.word	0x00003379
     318:	00005db5 	.word	0x00005db5

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000f8 	.word	0x100000f8
     344:	00000000 	.word	0x00000000
     348:	00009ec4 	.word	0x00009ec4

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000fc 	.word	0x100000fc
     364:	00009ec4 	.word	0x00009ec4

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     37e:	b580      	push	{r7, lr}
     380:	b084      	sub	sp, #16
     382:	af00      	add	r7, sp, #0
     384:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the system clock speed for the LPC4078 in MHz
#if !defined(SJ2_SYSTEM_CLOCK_RATE_MHZ)
#define SJ2_SYSTEM_CLOCK_RATE_MHZ 48_MHz
#endif  // !defined(SJ2_SYSTEM_CLOCK_RATE)
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     388:	e9d7 0100 	ldrd	r0, r1, [r7]
     38c:	f007 f80c 	bl	73a8 <__aeabi_ul2f>
     390:	4602      	mov	r2, r0
     392:	f107 030c 	add.w	r3, r7, #12
     396:	ee00 2a10 	vmov	s0, r2
     39a:	4618      	mov	r0, r3
     39c:	f000 f805 	bl	3aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	4618      	mov	r0, r3
     3a4:	3710      	adds	r7, #16
     3a6:	46bd      	mov	sp, r7
     3a8:	bd80      	pop	{r7, pc}

000003aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     3aa:	b580      	push	{r7, lr}
     3ac:	b082      	sub	sp, #8
     3ae:	af00      	add	r7, sp, #0
     3b0:	6078      	str	r0, [r7, #4]
     3b2:	ed87 0a00 	vstr	s0, [r7]
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	463a      	mov	r2, r7
     3ba:	4611      	mov	r1, r2
     3bc:	4618      	mov	r0, r3
     3be:	f000 f805 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	4618      	mov	r0, r3
     3c6:	3708      	adds	r7, #8
     3c8:	46bd      	mov	sp, r7
     3ca:	bd80      	pop	{r7, pc}

000003cc <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     3cc:	b480      	push	{r7}
     3ce:	b083      	sub	sp, #12
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	683b      	ldr	r3, [r7, #0]
     3d8:	681a      	ldr	r2, [r3, #0]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	601a      	str	r2, [r3, #0]
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	4618      	mov	r0, r3
     3e2:	370c      	adds	r7, #12
     3e4:	46bd      	mov	sp, r7
     3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ea:	4770      	bx	lr

000003ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     3ec:	b580      	push	{r7, lr}
     3ee:	b086      	sub	sp, #24
     3f0:	af00      	add	r7, sp, #0
     3f2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     3f4:	6878      	ldr	r0, [r7, #4]
     3f6:	f000 f807 	bl	408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     3fa:	eef0 7a40 	vmov.f32	s15, s0
	}
     3fe:	eeb0 0a67 	vmov.f32	s0, s15
     402:	3718      	adds	r7, #24
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}

00000408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	7239      	strb	r1, [r7, #8]
     412:	713a      	strb	r2, [r7, #4]
     414:	703b      	strb	r3, [r7, #0]
			return value;
     416:	68fb      	ldr	r3, [r7, #12]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	ee07 3a90 	vmov	s15, r3
		}
     41e:	eeb0 0a67 	vmov.f32	s0, s15
     422:	3714      	adds	r7, #20
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     42c:	b580      	push	{r7, lr}
     42e:	b082      	sub	sp, #8
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	ed87 0a00 	vstr	s0, [r7]
     438:	687b      	ldr	r3, [r7, #4]
     43a:	463a      	mov	r2, r7
     43c:	4611      	mov	r1, r2
     43e:	4618      	mov	r0, r3
     440:	f7ff ffc4 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     444:	687b      	ldr	r3, [r7, #4]
     446:	4618      	mov	r0, r3
     448:	3708      	adds	r7, #8
     44a:	46bd      	mov	sp, r7
     44c:	bd80      	pop	{r7, pc}

0000044e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     44e:	b580      	push	{r7, lr}
     450:	b086      	sub	sp, #24
     452:	af00      	add	r7, sp, #0
     454:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     456:	6878      	ldr	r0, [r7, #4]
     458:	f000 f807 	bl	46a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     45c:	eef0 7a40 	vmov.f32	s15, s0
	}
     460:	eeb0 0a67 	vmov.f32	s0, s15
     464:	3718      	adds	r7, #24
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}

0000046a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     46a:	b480      	push	{r7}
     46c:	b085      	sub	sp, #20
     46e:	af00      	add	r7, sp, #0
     470:	60f8      	str	r0, [r7, #12]
     472:	7239      	strb	r1, [r7, #8]
     474:	713a      	strb	r2, [r7, #4]
     476:	703b      	strb	r3, [r7, #0]
			return value;
     478:	68fb      	ldr	r3, [r7, #12]
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	ee07 3a90 	vmov	s15, r3
		}
     480:	eeb0 0a67 	vmov.f32	s0, s15
     484:	3714      	adds	r7, #20
     486:	46bd      	mov	sp, r7
     488:	f85d 7b04 	ldr.w	r7, [sp], #4
     48c:	4770      	bx	lr

0000048e <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     48e:	b580      	push	{r7, lr}
     490:	b086      	sub	sp, #24
     492:	af02      	add	r7, sp, #8
     494:	6078      	str	r0, [r7, #4]
     496:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     498:	683a      	ldr	r2, [r7, #0]
     49a:	f107 030c 	add.w	r3, r7, #12
     49e:	9300      	str	r3, [sp, #0]
     4a0:	2300      	movs	r3, #0
     4a2:	2100      	movs	r1, #0
     4a4:	6878      	ldr	r0, [r7, #4]
     4a6:	f007 fb0b 	bl	7ac0 <_Unwind_VRS_Get>
      return val;
     4aa:	68fb      	ldr	r3, [r7, #12]
    }
     4ac:	4618      	mov	r0, r3
     4ae:	3710      	adds	r7, #16
     4b0:	46bd      	mov	sp, r7
     4b2:	bd80      	pop	{r7, pc}

000004b4 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     4b4:	b480      	push	{r7}
     4b6:	b085      	sub	sp, #20
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     4be:	60fb      	str	r3, [r7, #12]
  switch (target)
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d002      	beq.n	4cc <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     4c6:	2b01      	cmp	r3, #1
     4c8:	d003      	beq.n	4d2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     4ca:	e005      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     4cc:	4b07      	ldr	r3, [pc, #28]	; (4ec <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     4ce:	60fb      	str	r3, [r7, #12]
     4d0:	e002      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     4d4:	60fb      	str	r3, [r7, #12]
     4d6:	bf00      	nop
  }
  return result;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	4618      	mov	r0, r3
     4dc:	3714      	adds	r7, #20
     4de:	46bd      	mov	sp, r7
     4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	000088ec 	.word	0x000088ec
     4ec:	000088f4 	.word	0x000088f4
     4f0:	00008900 	.word	0x00008900

000004f4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     502:	210f      	movs	r1, #15
     504:	6878      	ldr	r0, [r7, #4]
     506:	f7ff ffc2 	bl	48e <_Unwind_GetGR>
     50a:	4603      	mov	r3, r0
     50c:	f023 0301 	bic.w	r3, r3, #1
     510:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     512:	68fb      	ldr	r3, [r7, #12]
     514:	6819      	ldr	r1, [r3, #0]
     516:	68bb      	ldr	r3, [r7, #8]
     518:	3b04      	subs	r3, #4
     51a:	461a      	mov	r2, r3
     51c:	4806      	ldr	r0, [pc, #24]	; (538 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     51e:	f004 ffc1 	bl	54a4 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     522:	68fb      	ldr	r3, [r7, #12]
     524:	681b      	ldr	r3, [r3, #0]
     526:	1c5a      	adds	r2, r3, #1
     528:	68fb      	ldr	r3, [r7, #12]
     52a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     52c:	2300      	movs	r3, #0
}
     52e:	4618      	mov	r0, r3
     530:	3710      	adds	r7, #16
     532:	46bd      	mov	sp, r7
     534:	bd80      	pop	{r7, pc}
     536:	bf00      	nop
     538:	0000890c 	.word	0x0000890c

0000053c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     53c:	b580      	push	{r7, lr}
     53e:	b084      	sub	sp, #16
     540:	af00      	add	r7, sp, #0
     542:	6078      	str	r0, [r7, #4]
     544:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     546:	683b      	ldr	r3, [r7, #0]
     548:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     54a:	210f      	movs	r1, #15
     54c:	6878      	ldr	r0, [r7, #4]
     54e:	f7ff ff9e 	bl	48e <_Unwind_GetGR>
     552:	4603      	mov	r3, r0
     554:	f023 0301 	bic.w	r3, r3, #1
     558:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	3b04      	subs	r3, #4
     55e:	4619      	mov	r1, r3
     560:	4806      	ldr	r0, [pc, #24]	; (57c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     562:	f004 ff9f 	bl	54a4 <printf>
  (*depth)++;
     566:	68fb      	ldr	r3, [r7, #12]
     568:	681b      	ldr	r3, [r3, #0]
     56a:	1c5a      	adds	r2, r3, #1
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     570:	2300      	movs	r3, #0
}
     572:	4618      	mov	r0, r3
     574:	3710      	adds	r7, #16
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop
     57c:	0000891c 	.word	0x0000891c

00000580 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     580:	b580      	push	{r7, lr}
     582:	b084      	sub	sp, #16
     584:	af00      	add	r7, sp, #0
     586:	4603      	mov	r3, r0
     588:	6039      	str	r1, [r7, #0]
     58a:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     58c:	2300      	movs	r3, #0
     58e:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     590:	f107 030c 	add.w	r3, r7, #12
     594:	4619      	mov	r1, r3
     596:	481a      	ldr	r0, [pc, #104]	; (600 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     598:	f007 fe84 	bl	82a4 <_Unwind_Backtrace>
    if (final_address)
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	683a      	ldr	r2, [r7, #0]
     5a6:	4619      	mov	r1, r3
     5a8:	4816      	ldr	r0, [pc, #88]	; (604 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     5aa:	f004 ff7b 	bl	54a4 <printf>
    }

    if (show_make_command)
     5ae:	79fb      	ldrb	r3, [r7, #7]
     5b0:	2b00      	cmp	r3, #0
     5b2:	d020      	beq.n	5f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     5b4:	4814      	ldr	r0, [pc, #80]	; (608 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     5b6:	f004 ff75 	bl	54a4 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     5ba:	4814      	ldr	r0, [pc, #80]	; (60c <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     5bc:	f004 ff72 	bl	54a4 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     5c0:	2000      	movs	r0, #0
     5c2:	f7ff ff77 	bl	4b4 <sjsu::build::Stringify(sjsu::build::Target)>
     5c6:	4603      	mov	r3, r0
     5c8:	4619      	mov	r1, r3
     5ca:	4811      	ldr	r0, [pc, #68]	; (610 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     5cc:	f004 ff6a 	bl	54a4 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     5d0:	f107 030c 	add.w	r3, r7, #12
     5d4:	4619      	mov	r1, r3
     5d6:	480f      	ldr	r0, [pc, #60]	; (614 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     5d8:	f007 fe64 	bl	82a4 <_Unwind_Backtrace>
      if (final_address)
     5dc:	683b      	ldr	r3, [r7, #0]
     5de:	2b00      	cmp	r3, #0
     5e0:	d003      	beq.n	5ea <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     5e2:	6839      	ldr	r1, [r7, #0]
     5e4:	480c      	ldr	r0, [pc, #48]	; (618 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     5e6:	f004 ff5d 	bl	54a4 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     5ea:	480c      	ldr	r0, [pc, #48]	; (61c <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     5ec:	f004 ff5a 	bl	54a4 <printf>
      printf(
     5f0:	480b      	ldr	r0, [pc, #44]	; (620 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     5f2:	f003 fe13 	bl	421c <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     5f6:	bf00      	nop
     5f8:	3710      	adds	r7, #16
     5fa:	46bd      	mov	sp, r7
     5fc:	bd80      	pop	{r7, pc}
     5fe:	bf00      	nop
     600:	000004f5 	.word	0x000004f5
     604:	00008924 	.word	0x00008924
     608:	00008930 	.word	0x00008930
     60c:	00008968 	.word	0x00008968
     610:	00008974 	.word	0x00008974
     614:	0000053d 	.word	0x0000053d
     618:	00008990 	.word	0x00008990
     61c:	00008998 	.word	0x00008998
     620:	000089a0 	.word	0x000089a0

00000624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     624:	b490      	push	{r4, r7}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     62e:	683b      	ldr	r3, [r7, #0]
     630:	e9d3 3400 	ldrd	r3, r4, [r3]
     634:	687a      	ldr	r2, [r7, #4]
     636:	e9c2 3400 	strd	r3, r4, [r2]
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bc90      	pop	{r4, r7}
     644:	4770      	bx	lr
     646:	Address 0x0000000000000646 is out of bounds.


00000648 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	4903      	ldr	r1, [pc, #12]	; (664 <sjsu::DefaultUptime()+0x1c>)
     656:	4618      	mov	r0, r3
     658:	f002 f962 	bl	2920 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     65c:	6878      	ldr	r0, [r7, #4]
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	10000118 	.word	0x10000118

00000668 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     668:	b480      	push	{r7}
     66a:	b083      	sub	sp, #12
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     670:	687b      	ldr	r3, [r7, #4]
     672:	f003 021f 	and.w	r2, r3, #31
     676:	4907      	ldr	r1, [pc, #28]	; (694 <NVIC_EnableIRQ+0x2c>)
     678:	687b      	ldr	r3, [r7, #4]
     67a:	095b      	lsrs	r3, r3, #5
     67c:	2001      	movs	r0, #1
     67e:	fa00 f202 	lsl.w	r2, r0, r2
     682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     686:	bf00      	nop
     688:	370c      	adds	r7, #12
     68a:	46bd      	mov	sp, r7
     68c:	f85d 7b04 	ldr.w	r7, [sp], #4
     690:	4770      	bx	lr
     692:	bf00      	nop
     694:	e000e100 	.word	0xe000e100

00000698 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	f003 021f 	and.w	r2, r3, #31
     6a6:	4907      	ldr	r1, [pc, #28]	; (6c4 <NVIC_DisableIRQ+0x2c>)
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	095b      	lsrs	r3, r3, #5
     6ac:	2001      	movs	r0, #1
     6ae:	fa00 f202 	lsl.w	r2, r0, r2
     6b2:	3320      	adds	r3, #32
     6b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     6b8:	bf00      	nop
     6ba:	370c      	adds	r7, #12
     6bc:	46bd      	mov	sp, r7
     6be:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c2:	4770      	bx	lr
     6c4:	e000e100 	.word	0xe000e100

000006c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     6c8:	b480      	push	{r7}
     6ca:	b083      	sub	sp, #12
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
     6d0:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	2b00      	cmp	r3, #0
     6d6:	da0b      	bge.n	6f0 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     6d8:	683b      	ldr	r3, [r7, #0]
     6da:	b2da      	uxtb	r2, r3
     6dc:	490d      	ldr	r1, [pc, #52]	; (714 <NVIC_SetPriority+0x4c>)
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	f003 030f 	and.w	r3, r3, #15
     6e4:	3b04      	subs	r3, #4
     6e6:	0152      	lsls	r2, r2, #5
     6e8:	b2d2      	uxtb	r2, r2
     6ea:	440b      	add	r3, r1
     6ec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     6ee:	e00a      	b.n	706 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     6f0:	683b      	ldr	r3, [r7, #0]
     6f2:	b2db      	uxtb	r3, r3
     6f4:	4a08      	ldr	r2, [pc, #32]	; (718 <NVIC_SetPriority+0x50>)
     6f6:	6879      	ldr	r1, [r7, #4]
     6f8:	4608      	mov	r0, r1
     6fa:	015b      	lsls	r3, r3, #5
     6fc:	b2d9      	uxtb	r1, r3
     6fe:	1813      	adds	r3, r2, r0
     700:	460a      	mov	r2, r1
     702:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     706:	bf00      	nop
     708:	370c      	adds	r7, #12
     70a:	46bd      	mov	sp, r7
     70c:	f85d 7b04 	ldr.w	r7, [sp], #4
     710:	4770      	bx	lr
     712:	bf00      	nop
     714:	e000ed00 	.word	0xe000ed00
     718:	e000e100 	.word	0xe000e100

0000071c <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     71c:	b480      	push	{r7}
     71e:	b083      	sub	sp, #12
     720:	af00      	add	r7, sp, #0
     722:	6078      	str	r0, [r7, #4]
  {
    return port_;
     724:	687b      	ldr	r3, [r7, #4]
     726:	791b      	ldrb	r3, [r3, #4]
  }
     728:	4618      	mov	r0, r3
     72a:	370c      	adds	r7, #12
     72c:	46bd      	mov	sp, r7
     72e:	f85d 7b04 	ldr.w	r7, [sp], #4
     732:	4770      	bx	lr

00000734 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     734:	b480      	push	{r7}
     736:	b083      	sub	sp, #12
     738:	af00      	add	r7, sp, #0
     73a:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	795b      	ldrb	r3, [r3, #5]
  }
     740:	4618      	mov	r0, r3
     742:	370c      	adds	r7, #12
     744:	46bd      	mov	sp, r7
     746:	f85d 7b04 	ldr.w	r7, [sp], #4
     74a:	4770      	bx	lr

0000074c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
     754:	460b      	mov	r3, r1
     756:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     758:	4b08      	ldr	r3, [pc, #32]	; (77c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     75a:	78f9      	ldrb	r1, [r7, #3]
     75c:	781a      	ldrb	r2, [r3, #0]
     75e:	785b      	ldrb	r3, [r3, #1]
     760:	021b      	lsls	r3, r3, #8
     762:	431a      	orrs	r2, r3
     764:	2300      	movs	r3, #0
     766:	f362 030f 	bfi	r3, r2, #0, #16
     76a:	461a      	mov	r2, r3
     76c:	6878      	ldr	r0, [r7, #4]
     76e:	f000 f859 	bl	824 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     772:	bf00      	nop
     774:	3708      	adds	r7, #8
     776:	46bd      	mov	sp, r7
     778:	bd80      	pop	{r7, pc}
     77a:	bf00      	nop
     77c:	00009064 	.word	0x00009064

00000780 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     780:	b580      	push	{r7, lr}
     782:	b082      	sub	sp, #8
     784:	af00      	add	r7, sp, #0
     786:	6078      	str	r0, [r7, #4]
     788:	460b      	mov	r3, r1
     78a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     78c:	4b08      	ldr	r3, [pc, #32]	; (7b0 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     78e:	78f9      	ldrb	r1, [r7, #3]
     790:	781a      	ldrb	r2, [r3, #0]
     792:	785b      	ldrb	r3, [r3, #1]
     794:	021b      	lsls	r3, r3, #8
     796:	431a      	orrs	r2, r3
     798:	2300      	movs	r3, #0
     79a:	f362 030f 	bfi	r3, r2, #0, #16
     79e:	461a      	mov	r2, r3
     7a0:	6878      	ldr	r0, [r7, #4]
     7a2:	f000 f83f 	bl	824 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     7a6:	bf00      	nop
     7a8:	3708      	adds	r7, #8
     7aa:	46bd      	mov	sp, r7
     7ac:	bd80      	pop	{r7, pc}
     7ae:	bf00      	nop
     7b0:	00009068 	.word	0x00009068

000007b4 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     7b4:	b580      	push	{r7, lr}
     7b6:	b082      	sub	sp, #8
     7b8:	af00      	add	r7, sp, #0
     7ba:	6078      	str	r0, [r7, #4]
     7bc:	460b      	mov	r3, r1
     7be:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     7c0:	78fb      	ldrb	r3, [r7, #3]
     7c2:	f083 0301 	eor.w	r3, r3, #1
     7c6:	b2db      	uxtb	r3, r3
     7c8:	4619      	mov	r1, r3
     7ca:	4b08      	ldr	r3, [pc, #32]	; (7ec <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     7cc:	781a      	ldrb	r2, [r3, #0]
     7ce:	785b      	ldrb	r3, [r3, #1]
     7d0:	021b      	lsls	r3, r3, #8
     7d2:	431a      	orrs	r2, r3
     7d4:	2300      	movs	r3, #0
     7d6:	f362 030f 	bfi	r3, r2, #0, #16
     7da:	461a      	mov	r2, r3
     7dc:	6878      	ldr	r0, [r7, #4]
     7de:	f000 f821 	bl	824 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     7e2:	bf00      	nop
     7e4:	3708      	adds	r7, #8
     7e6:	46bd      	mov	sp, r7
     7e8:	bd80      	pop	{r7, pc}
     7ea:	bf00      	nop
     7ec:	0000906c 	.word	0x0000906c

000007f0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     7f0:	b580      	push	{r7, lr}
     7f2:	b082      	sub	sp, #8
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
     7f8:	460b      	mov	r3, r1
     7fa:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     7fc:	78f9      	ldrb	r1, [r7, #3]
     7fe:	4b08      	ldr	r3, [pc, #32]	; (820 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     800:	781a      	ldrb	r2, [r3, #0]
     802:	785b      	ldrb	r3, [r3, #1]
     804:	021b      	lsls	r3, r3, #8
     806:	431a      	orrs	r2, r3
     808:	2300      	movs	r3, #0
     80a:	f362 030f 	bfi	r3, r2, #0, #16
     80e:	461a      	mov	r2, r3
     810:	6878      	ldr	r0, [r7, #4]
     812:	f000 f807 	bl	824 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     816:	bf00      	nop
     818:	3708      	adds	r7, #8
     81a:	46bd      	mov	sp, r7
     81c:	bd80      	pop	{r7, pc}
     81e:	bf00      	nop
     820:	00009070 	.word	0x00009070

00000824 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	b087      	sub	sp, #28
     828:	af00      	add	r7, sp, #0
     82a:	60f8      	str	r0, [r7, #12]
     82c:	460b      	mov	r3, r1
     82e:	80ba      	strh	r2, [r7, #4]
     830:	72fb      	strb	r3, [r7, #11]
     832:	68fb      	ldr	r3, [r7, #12]
     834:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     836:	4b19      	ldr	r3, [pc, #100]	; (89c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     838:	681c      	ldr	r4, [r3, #0]
     83a:	693b      	ldr	r3, [r7, #16]
     83c:	4618      	mov	r0, r3
     83e:	f7ff ff6d 	bl	71c <sjsu::Pin::GetPort() const>
     842:	4603      	mov	r3, r0
     844:	461d      	mov	r5, r3
     846:	693b      	ldr	r3, [r7, #16]
     848:	4618      	mov	r0, r3
     84a:	f7ff ff73 	bl	734 <sjsu::Pin::GetPin() const>
     84e:	4603      	mov	r3, r0
     850:	461a      	mov	r2, r3
     852:	016b      	lsls	r3, r5, #5
     854:	4413      	add	r3, r2
     856:	009b      	lsls	r3, r3, #2
     858:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     85a:	681b      	ldr	r3, [r3, #0]
     85c:	7af9      	ldrb	r1, [r7, #11]
     85e:	687a      	ldr	r2, [r7, #4]
     860:	4618      	mov	r0, r3
     862:	f002 f89f 	bl	29a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     866:	4605      	mov	r5, r0
     868:	68fb      	ldr	r3, [r7, #12]
     86a:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     86c:	4b0b      	ldr	r3, [pc, #44]	; (89c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     86e:	681c      	ldr	r4, [r3, #0]
     870:	697b      	ldr	r3, [r7, #20]
     872:	4618      	mov	r0, r3
     874:	f7ff ff52 	bl	71c <sjsu::Pin::GetPort() const>
     878:	4603      	mov	r3, r0
     87a:	461e      	mov	r6, r3
     87c:	697b      	ldr	r3, [r7, #20]
     87e:	4618      	mov	r0, r3
     880:	f7ff ff58 	bl	734 <sjsu::Pin::GetPin() const>
     884:	4603      	mov	r3, r0
     886:	461a      	mov	r2, r3
     888:	0173      	lsls	r3, r6, #5
     88a:	4413      	add	r3, r2
     88c:	009b      	lsls	r3, r3, #2
     88e:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     890:	601d      	str	r5, [r3, #0]
  }
     892:	bf00      	nop
     894:	371c      	adds	r7, #28
     896:	46bd      	mov	sp, r7
     898:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89a:	bf00      	nop
     89c:	10000120 	.word	0x10000120

000008a0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     8a0:	b580      	push	{r7, lr}
     8a2:	b086      	sub	sp, #24
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
     8a8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	681b      	ldr	r3, [r3, #0]
     8ae:	3308      	adds	r3, #8
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	6839      	ldr	r1, [r7, #0]
     8b4:	6878      	ldr	r0, [r7, #4]
     8b6:	4798      	blx	r3
     8b8:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     8ba:	f04f 0300 	mov.w	r3, #0
     8be:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     8c0:	697b      	ldr	r3, [r7, #20]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d00f      	beq.n	8e6 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	681b      	ldr	r3, [r3, #0]
     8ca:	330c      	adds	r3, #12
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	6878      	ldr	r0, [r7, #4]
     8d0:	4798      	blx	r3
     8d2:	4603      	mov	r3, r0
     8d4:	613b      	str	r3, [r7, #16]
     8d6:	f107 0310 	add.w	r3, r7, #16
     8da:	6979      	ldr	r1, [r7, #20]
     8dc:	4618      	mov	r0, r3
     8de:	f002 f874 	bl	29ca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     8e2:	4603      	mov	r3, r0
     8e4:	60fb      	str	r3, [r7, #12]
    }
    return result;
     8e6:	68fb      	ldr	r3, [r7, #12]
  }
     8e8:	4618      	mov	r0, r3
     8ea:	3718      	adds	r7, #24
     8ec:	46bd      	mov	sp, r7
     8ee:	bd80      	pop	{r7, pc}

000008f0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     8f0:	b580      	push	{r7, lr}
     8f2:	b086      	sub	sp, #24
     8f4:	af00      	add	r7, sp, #0
     8f6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     8f8:	6878      	ldr	r0, [r7, #4]
     8fa:	f000 f807 	bl	90c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     8fe:	eef0 7a40 	vmov.f32	s15, s0
	}
     902:	eeb0 0a67 	vmov.f32	s0, s15
     906:	3718      	adds	r7, #24
     908:	46bd      	mov	sp, r7
     90a:	bd80      	pop	{r7, pc}

0000090c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     90c:	b480      	push	{r7}
     90e:	b085      	sub	sp, #20
     910:	af00      	add	r7, sp, #0
     912:	60f8      	str	r0, [r7, #12]
     914:	7239      	strb	r1, [r7, #8]
     916:	713a      	strb	r2, [r7, #4]
     918:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     91a:	68fb      	ldr	r3, [r7, #12]
     91c:	edd3 7a00 	vldr	s15, [r3]
     920:	ed9f 7a05 	vldr	s14, [pc, #20]	; 938 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     924:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     928:	eeb0 0a67 	vmov.f32	s0, s15
     92c:	3714      	adds	r7, #20
     92e:	46bd      	mov	sp, r7
     930:	f85d 7b04 	ldr.w	r7, [sp], #4
     934:	4770      	bx	lr
     936:	bf00      	nop
     938:	49742400 	.word	0x49742400

0000093c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     93c:	b580      	push	{r7, lr}
     93e:	b084      	sub	sp, #16
     940:	af00      	add	r7, sp, #0
     942:	6078      	str	r0, [r7, #4]
     944:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     946:	2100      	movs	r1, #0
     948:	6878      	ldr	r0, [r7, #4]
     94a:	f000 f8e3 	bl	b14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     94e:	f04f 000c 	mov.w	r0, #12
     952:	f04f 0100 	mov.w	r1, #0
     956:	f7ff fd12 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     95a:	4603      	mov	r3, r0
     95c:	60bb      	str	r3, [r7, #8]
     95e:	f107 0208 	add.w	r2, r7, #8
     962:	463b      	mov	r3, r7
     964:	4611      	mov	r1, r2
     966:	4618      	mov	r0, r3
     968:	f002 f84d 	bl	2a06 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     96c:	4603      	mov	r3, r0
     96e:	2b00      	cmp	r3, #0
     970:	d00f      	beq.n	992 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     972:	4b16      	ldr	r3, [pc, #88]	; (9cc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     974:	683a      	ldr	r2, [r7, #0]
     976:	6819      	ldr	r1, [r3, #0]
     978:	6878      	ldr	r0, [r7, #4]
     97a:	f000 fadf 	bl	f3c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     97e:	2101      	movs	r1, #1
     980:	6878      	ldr	r0, [r7, #4]
     982:	f000 f8eb 	bl	b5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     986:	463b      	mov	r3, r7
     988:	4619      	mov	r1, r3
     98a:	4811      	ldr	r0, [pc, #68]	; (9d0 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     98c:	f002 f859 	bl	2a42 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     990:	e007      	b.n	9a2 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     992:	2100      	movs	r1, #0
     994:	6878      	ldr	r0, [r7, #4]
     996:	f000 f8e1 	bl	b5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     99a:	490e      	ldr	r1, [pc, #56]	; (9d4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     99c:	480c      	ldr	r0, [pc, #48]	; (9d0 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     99e:	f002 f850 	bl	2a42 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     9a2:	2101      	movs	r1, #1
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	f000 fb2d 	bl	1004 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     9aa:	23ff      	movs	r3, #255	; 0xff
     9ac:	733b      	strb	r3, [r7, #12]
     9ae:	f107 030c 	add.w	r3, r7, #12
     9b2:	2201      	movs	r2, #1
     9b4:	4619      	mov	r1, r3
     9b6:	6878      	ldr	r0, [r7, #4]
     9b8:	f000 f80e 	bl	9d8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     9bc:	2100      	movs	r1, #0
     9be:	6878      	ldr	r0, [r7, #4]
     9c0:	f000 fb5e 	bl	1080 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     9c4:	bf00      	nop
     9c6:	3710      	adds	r7, #16
     9c8:	46bd      	mov	sp, r7
     9ca:	bd80      	pop	{r7, pc}
     9cc:	00009074 	.word	0x00009074
     9d0:	10000004 	.word	0x10000004
     9d4:	0000907c 	.word	0x0000907c

000009d8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     9d8:	b580      	push	{r7, lr}
     9da:	b084      	sub	sp, #16
     9dc:	af00      	add	r7, sp, #0
     9de:	60f8      	str	r0, [r7, #12]
     9e0:	60b9      	str	r1, [r7, #8]
     9e2:	4613      	mov	r3, r2
     9e4:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     9e6:	79fb      	ldrb	r3, [r7, #7]
     9e8:	2b04      	cmp	r3, #4
     9ea:	d90d      	bls.n	a08 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     9ec:	23b2      	movs	r3, #178	; 0xb2
     9ee:	4a0b      	ldr	r2, [pc, #44]	; (a1c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     9f0:	490b      	ldr	r1, [pc, #44]	; (a20 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     9f2:	480c      	ldr	r0, [pc, #48]	; (a24 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     9f4:	f004 fd56 	bl	54a4 <printf>
     9f8:	480b      	ldr	r0, [pc, #44]	; (a28 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     9fa:	f003 fc0f 	bl	421c <puts>
     9fe:	2100      	movs	r1, #0
     a00:	2001      	movs	r0, #1
     a02:	f7ff fdbd 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     a06:	e7fe      	b.n	a06 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     a08:	4b08      	ldr	r3, [pc, #32]	; (a2c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	79fa      	ldrb	r2, [r7, #7]
     a0e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     a12:	bf00      	nop
     a14:	3710      	adds	r7, #16
     a16:	46bd      	mov	sp, r7
     a18:	bd80      	pop	{r7, pc}
     a1a:	bf00      	nop
     a1c:	00009318 	.word	0x00009318
     a20:	00009098 	.word	0x00009098
     a24:	000089f4 	.word	0x000089f4
     a28:	00008a94 	.word	0x00008a94
     a2c:	10000124 	.word	0x10000124

00000a30 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     a30:	b480      	push	{r7}
     a32:	b083      	sub	sp, #12
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
     a38:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     a42:	4618      	mov	r0, r3
     a44:	370c      	adds	r7, #12
     a46:	46bd      	mov	sp, r7
     a48:	f85d 7b04 	ldr.w	r7, [sp], #4
     a4c:	4770      	bx	lr
     a4e:	bf00      	nop
     a50:	10000124 	.word	0x10000124

00000a54 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     a54:	b480      	push	{r7}
     a56:	b083      	sub	sp, #12
     a58:	af00      	add	r7, sp, #0
     a5a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     a5e:	681b      	ldr	r3, [r3, #0]
  }
     a60:	4618      	mov	r0, r3
     a62:	370c      	adds	r7, #12
     a64:	46bd      	mov	sp, r7
     a66:	f85d 7b04 	ldr.w	r7, [sp], #4
     a6a:	4770      	bx	lr
     a6c:	10000004 	.word	0x10000004

00000a70 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     a70:	b480      	push	{r7}
     a72:	b085      	sub	sp, #20
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
     a78:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     a7a:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     a82:	683a      	ldr	r2, [r7, #0]
     a84:	7812      	ldrb	r2, [r2, #0]
     a86:	4611      	mov	r1, r2
     a88:	2201      	movs	r2, #1
     a8a:	408a      	lsls	r2, r1
     a8c:	4013      	ands	r3, r2
     a8e:	2b00      	cmp	r3, #0
     a90:	bf14      	ite	ne
     a92:	2301      	movne	r3, #1
     a94:	2300      	moveq	r3, #0
     a96:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     a98:	7bfb      	ldrb	r3, [r7, #15]
  }
     a9a:	4618      	mov	r0, r3
     a9c:	3714      	adds	r7, #20
     a9e:	46bd      	mov	sp, r7
     aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa4:	4770      	bx	lr
     aa6:	bf00      	nop
     aa8:	10000124 	.word	0x10000124

00000aac <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     aac:	b590      	push	{r4, r7, lr}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     ab6:	4b09      	ldr	r3, [pc, #36]	; (adc <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     abe:	683b      	ldr	r3, [r7, #0]
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	4619      	mov	r1, r3
    system_controller->PCONP =
     ac4:	4b05      	ldr	r3, [pc, #20]	; (adc <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     ac6:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     ac8:	4610      	mov	r0, r2
     aca:	f001 ffcd 	bl	2a68 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     ace:	4603      	mov	r3, r0
    system_controller->PCONP =
     ad0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     ad4:	bf00      	nop
     ad6:	370c      	adds	r7, #12
     ad8:	46bd      	mov	sp, r7
     ada:	bd90      	pop	{r4, r7, pc}
     adc:	10000124 	.word	0x10000124

00000ae0 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     ae0:	b590      	push	{r4, r7, lr}
     ae2:	b083      	sub	sp, #12
     ae4:	af00      	add	r7, sp, #0
     ae6:	6078      	str	r0, [r7, #4]
     ae8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     aea:	4b09      	ldr	r3, [pc, #36]	; (b10 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     af2:	683b      	ldr	r3, [r7, #0]
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	4619      	mov	r1, r3
    system_controller->PCONP =
     af8:	4b05      	ldr	r3, [pc, #20]	; (b10 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     afa:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     afc:	4610      	mov	r0, r2
     afe:	f001 ffc5 	bl	2a8c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     b02:	4603      	mov	r3, r0
    system_controller->PCONP =
     b04:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     b08:	bf00      	nop
     b0a:	370c      	adds	r7, #12
     b0c:	46bd      	mov	sp, r7
     b0e:	bd90      	pop	{r4, r7, pc}
     b10:	10000124 	.word	0x10000124

00000b14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     b14:	b590      	push	{r4, r7, lr}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
     b1c:	460b      	mov	r3, r1
     b1e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     b20:	4b0c      	ldr	r3, [pc, #48]	; (b54 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     b28:	8879      	ldrh	r1, [r7, #2]
     b2a:	4b0a      	ldr	r3, [pc, #40]	; (b54 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     b2c:	681c      	ldr	r4, [r3, #0]
     b2e:	4b0a      	ldr	r3, [pc, #40]	; (b58 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     b30:	781a      	ldrb	r2, [r3, #0]
     b32:	785b      	ldrb	r3, [r3, #1]
     b34:	021b      	lsls	r3, r3, #8
     b36:	431a      	orrs	r2, r3
     b38:	2300      	movs	r3, #0
     b3a:	f362 030f 	bfi	r3, r2, #0, #16
     b3e:	461a      	mov	r2, r3
     b40:	f001 ffb7 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     b44:	4603      	mov	r3, r0
     b46:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     b4a:	bf00      	nop
     b4c:	370c      	adds	r7, #12
     b4e:	46bd      	mov	sp, r7
     b50:	bd90      	pop	{r4, r7, pc}
     b52:	bf00      	nop
     b54:	10000124 	.word	0x10000124
     b58:	00009080 	.word	0x00009080

00000b5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     b5c:	b590      	push	{r4, r7, lr}
     b5e:	b083      	sub	sp, #12
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
     b64:	460b      	mov	r3, r1
     b66:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     b68:	4b0c      	ldr	r3, [pc, #48]	; (b9c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     b70:	8879      	ldrh	r1, [r7, #2]
     b72:	4b0a      	ldr	r3, [pc, #40]	; (b9c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     b74:	681c      	ldr	r4, [r3, #0]
     b76:	4b0a      	ldr	r3, [pc, #40]	; (ba0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     b78:	781a      	ldrb	r2, [r3, #0]
     b7a:	785b      	ldrb	r3, [r3, #1]
     b7c:	021b      	lsls	r3, r3, #8
     b7e:	431a      	orrs	r2, r3
     b80:	2300      	movs	r3, #0
     b82:	f362 030f 	bfi	r3, r2, #0, #16
     b86:	461a      	mov	r2, r3
     b88:	f001 ff93 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     b8c:	4603      	mov	r3, r0
     b8e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     b92:	bf00      	nop
     b94:	370c      	adds	r7, #12
     b96:	46bd      	mov	sp, r7
     b98:	bd90      	pop	{r4, r7, pc}
     b9a:	bf00      	nop
     b9c:	10000124 	.word	0x10000124
     ba0:	0000908c 	.word	0x0000908c

00000ba4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     ba4:	b590      	push	{r4, r7, lr}
     ba6:	b083      	sub	sp, #12
     ba8:	af00      	add	r7, sp, #0
     baa:	6078      	str	r0, [r7, #4]
     bac:	460b      	mov	r3, r1
     bae:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     bb0:	4b0c      	ldr	r3, [pc, #48]	; (be4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     bb8:	8879      	ldrh	r1, [r7, #2]
     bba:	4b0a      	ldr	r3, [pc, #40]	; (be4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     bbc:	681c      	ldr	r4, [r3, #0]
     bbe:	4b0a      	ldr	r3, [pc, #40]	; (be8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     bc0:	781a      	ldrb	r2, [r3, #0]
     bc2:	785b      	ldrb	r3, [r3, #1]
     bc4:	021b      	lsls	r3, r3, #8
     bc6:	431a      	orrs	r2, r3
     bc8:	2300      	movs	r3, #0
     bca:	f362 030f 	bfi	r3, r2, #0, #16
     bce:	461a      	mov	r2, r3
     bd0:	f001 ff6f 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     bd4:	4603      	mov	r3, r0
     bd6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     bda:	bf00      	nop
     bdc:	370c      	adds	r7, #12
     bde:	46bd      	mov	sp, r7
     be0:	bd90      	pop	{r4, r7, pc}
     be2:	bf00      	nop
     be4:	10000124 	.word	0x10000124
     be8:	00009090 	.word	0x00009090

00000bec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     bec:	b590      	push	{r4, r7, lr}
     bee:	b083      	sub	sp, #12
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
     bf4:	460b      	mov	r3, r1
     bf6:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     bf8:	4b0c      	ldr	r3, [pc, #48]	; (c2c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     c00:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     c02:	4b0a      	ldr	r3, [pc, #40]	; (c2c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     c04:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     c06:	4b0a      	ldr	r3, [pc, #40]	; (c30 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     c08:	781a      	ldrb	r2, [r3, #0]
     c0a:	785b      	ldrb	r3, [r3, #1]
     c0c:	021b      	lsls	r3, r3, #8
     c0e:	431a      	orrs	r2, r3
     c10:	2300      	movs	r3, #0
     c12:	f362 030f 	bfi	r3, r2, #0, #16
     c16:	461a      	mov	r2, r3
     c18:	f001 ff4b 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c1c:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     c1e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     c22:	bf00      	nop
     c24:	370c      	adds	r7, #12
     c26:	46bd      	mov	sp, r7
     c28:	bd90      	pop	{r4, r7, pc}
     c2a:	bf00      	nop
     c2c:	10000124 	.word	0x10000124
     c30:	00009094 	.word	0x00009094

00000c34 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     c34:	b580      	push	{r7, lr}
     c36:	ed2d 8b02 	vpush	{d8}
     c3a:	b082      	sub	sp, #8
     c3c:	af00      	add	r7, sp, #0
     c3e:	6078      	str	r0, [r7, #4]
     c40:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	ed93 8a00 	vldr	s16, [r3]
     c48:	683b      	ldr	r3, [r7, #0]
     c4a:	4618      	mov	r0, r3
     c4c:	f7ff fbce 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     c50:	eef0 7a40 	vmov.f32	s15, s0
     c54:	eeb4 8ae7 	vcmpe.f32	s16, s15
     c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c5c:	bf4c      	ite	mi
     c5e:	2301      	movmi	r3, #1
     c60:	2300      	movpl	r3, #0
     c62:	b2db      	uxtb	r3, r3
		}
     c64:	4618      	mov	r0, r3
     c66:	3708      	adds	r7, #8
     c68:	46bd      	mov	sp, r7
     c6a:	ecbd 8b02 	vpop	{d8}
     c6e:	bd80      	pop	{r7, pc}

00000c70 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     c70:	b580      	push	{r7, lr}
     c72:	b082      	sub	sp, #8
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     c78:	6878      	ldr	r0, [r7, #4]
     c7a:	f000 f805 	bl	c88 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     c7e:	4603      	mov	r3, r0
		}
     c80:	4618      	mov	r0, r3
     c82:	3708      	adds	r7, #8
     c84:	46bd      	mov	sp, r7
     c86:	bd80      	pop	{r7, pc}

00000c88 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
     c8e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	4618      	mov	r0, r3
     c94:	f000 f80a 	bl	cac <units::linear_scale<float>::operator()() const>
     c98:	eef0 7a40 	vmov.f32	s15, s0
     c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     ca0:	ee17 3a90 	vmov	r3, s15
		}
     ca4:	4618      	mov	r0, r3
     ca6:	3708      	adds	r7, #8
     ca8:	46bd      	mov	sp, r7
     caa:	bd80      	pop	{r7, pc}

00000cac <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     cac:	b480      	push	{r7}
     cae:	b083      	sub	sp, #12
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	ee07 3a90 	vmov	s15, r3
     cbc:	eeb0 0a67 	vmov.f32	s0, s15
     cc0:	370c      	adds	r7, #12
     cc2:	46bd      	mov	sp, r7
     cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cc8:	4770      	bx	lr

00000cca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     cca:	b580      	push	{r7, lr}
     ccc:	ed2d 8b02 	vpush	{d8}
     cd0:	b084      	sub	sp, #16
     cd2:	af00      	add	r7, sp, #0
     cd4:	6078      	str	r0, [r7, #4]
     cd6:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	4618      	mov	r0, r3
     cdc:	f7ff ffe6 	bl	cac <units::linear_scale<float>::operator()() const>
     ce0:	eeb0 8a40 	vmov.f32	s16, s0
     ce4:	683b      	ldr	r3, [r7, #0]
     ce6:	4618      	mov	r0, r3
     ce8:	f7ff ffe0 	bl	cac <units::linear_scale<float>::operator()() const>
     cec:	eef0 7a40 	vmov.f32	s15, s0
     cf0:	edc7 7a03 	vstr	s15, [r7, #12]
     cf4:	f107 030c 	add.w	r3, r7, #12
     cf8:	4618      	mov	r0, r3
     cfa:	f7ff fb77 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     cfe:	eeb0 7a40 	vmov.f32	s14, s0
     d02:	eec8 7a07 	vdiv.f32	s15, s16, s14
     d06:	f107 0308 	add.w	r3, r7, #8
     d0a:	eeb0 0a67 	vmov.f32	s0, s15
     d0e:	4618      	mov	r0, r3
     d10:	f000 f807 	bl	d22 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     d14:	68bb      	ldr	r3, [r7, #8]
	}
     d16:	4618      	mov	r0, r3
     d18:	3710      	adds	r7, #16
     d1a:	46bd      	mov	sp, r7
     d1c:	ecbd 8b02 	vpop	{d8}
     d20:	bd80      	pop	{r7, pc}

00000d22 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     d22:	b580      	push	{r7, lr}
     d24:	b082      	sub	sp, #8
     d26:	af00      	add	r7, sp, #0
     d28:	6078      	str	r0, [r7, #4]
     d2a:	ed87 0a00 	vstr	s0, [r7]
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	463a      	mov	r2, r7
     d32:	4611      	mov	r1, r2
     d34:	4618      	mov	r0, r3
     d36:	f7ff fb49 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	4618      	mov	r0, r3
     d3e:	3708      	adds	r7, #8
     d40:	46bd      	mov	sp, r7
     d42:	bd80      	pop	{r7, pc}

00000d44 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     d44:	b580      	push	{r7, lr}
     d46:	b084      	sub	sp, #16
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
     d4c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	4618      	mov	r0, r3
     d52:	f7ff ffab 	bl	cac <units::linear_scale<float>::operator()() const>
     d56:	eeb0 7a40 	vmov.f32	s14, s0
     d5a:	683b      	ldr	r3, [r7, #0]
     d5c:	ee07 3a90 	vmov	s15, r3
     d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     d64:	ee77 7a27 	vadd.f32	s15, s14, s15
     d68:	f107 030c 	add.w	r3, r7, #12
     d6c:	eeb0 0a67 	vmov.f32	s0, s15
     d70:	4618      	mov	r0, r3
     d72:	f7ff ffd6 	bl	d22 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     d76:	68fb      	ldr	r3, [r7, #12]
	}
     d78:	4618      	mov	r0, r3
     d7a:	3710      	adds	r7, #16
     d7c:	46bd      	mov	sp, r7
     d7e:	bd80      	pop	{r7, pc}

00000d80 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     d80:	b580      	push	{r7, lr}
     d82:	b082      	sub	sp, #8
     d84:	af00      	add	r7, sp, #0
     d86:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	4618      	mov	r0, r3
     d8c:	f7ff ff8e 	bl	cac <units::linear_scale<float>::operator()() const>
     d90:	eef0 7a40 	vmov.f32	s15, s0
     d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d98:	ee17 3a90 	vmov	r3, s15
     d9c:	b29b      	uxth	r3, r3
		}
     d9e:	4618      	mov	r0, r3
     da0:	3708      	adds	r7, #8
     da2:	46bd      	mov	sp, r7
     da4:	bd80      	pop	{r7, pc}
     da6:	Address 0x0000000000000da6 is out of bounds.


00000da8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     da8:	b590      	push	{r4, r7, lr}
     daa:	b08d      	sub	sp, #52	; 0x34
     dac:	af00      	add	r7, sp, #0
     dae:	60f8      	str	r0, [r7, #12]
     db0:	60b9      	str	r1, [r7, #8]
     db2:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     db4:	f44f 70c0 	mov.w	r0, #384	; 0x180
     db8:	f04f 0100 	mov.w	r1, #0
     dbc:	f7ff fadf 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     dc0:	4603      	mov	r3, r0
     dc2:	613b      	str	r3, [r7, #16]
     dc4:	f107 0210 	add.w	r2, r7, #16
     dc8:	1d3b      	adds	r3, r7, #4
     dca:	4611      	mov	r1, r2
     dcc:	4618      	mov	r0, r3
     dce:	f7ff ff31 	bl	c34 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     dd2:	4603      	mov	r3, r0
     dd4:	f083 0301 	eor.w	r3, r3, #1
     dd8:	b2db      	uxtb	r3, r3
     dda:	2b00      	cmp	r3, #0
     ddc:	d114      	bne.n	e08 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     dde:	f04f 000c 	mov.w	r0, #12
     de2:	f04f 0100 	mov.w	r1, #0
     de6:	f7ff faca 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     dea:	4603      	mov	r3, r0
     dec:	617b      	str	r3, [r7, #20]
     dee:	f107 0214 	add.w	r2, r7, #20
     df2:	1d3b      	adds	r3, r7, #4
     df4:	4611      	mov	r1, r2
     df6:	4618      	mov	r0, r3
     df8:	f001 fe05 	bl	2a06 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     dfc:	4603      	mov	r3, r0
     dfe:	f083 0301 	eor.w	r3, r3, #1
     e02:	b2db      	uxtb	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	d001      	beq.n	e0c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     e08:	2301      	movs	r3, #1
     e0a:	e000      	b.n	e0e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     e0c:	2300      	movs	r3, #0
     e0e:	2b00      	cmp	r3, #0
     e10:	d00d      	beq.n	e2e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     e12:	23f6      	movs	r3, #246	; 0xf6
     e14:	4a43      	ldr	r2, [pc, #268]	; (f24 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     e16:	4944      	ldr	r1, [pc, #272]	; (f28 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     e18:	4844      	ldr	r0, [pc, #272]	; (f2c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     e1a:	f004 fb43 	bl	54a4 <printf>
     e1e:	4844      	ldr	r0, [pc, #272]	; (f30 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     e20:	f003 f9fc 	bl	421c <puts>
     e24:	2100      	movs	r1, #0
     e26:	2001      	movs	r0, #1
     e28:	f7ff fbaa 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     e2c:	e7fe      	b.n	e2c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     e2e:	2301      	movs	r3, #1
     e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     e34:	1d3b      	adds	r3, r7, #4
     e36:	4618      	mov	r0, r3
     e38:	f7ff ff1a 	bl	c70 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     e3c:	4604      	mov	r4, r0
     e3e:	f107 0308 	add.w	r3, r7, #8
     e42:	4618      	mov	r0, r3
     e44:	f7ff ff14 	bl	c70 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     e48:	4603      	mov	r3, r0
     e4a:	fbb4 f2f3 	udiv	r2, r4, r3
     e4e:	fb03 f302 	mul.w	r3, r3, r2
     e52:	1ae3      	subs	r3, r4, r3
     e54:	2b00      	cmp	r3, #0
     e56:	bf14      	ite	ne
     e58:	2301      	movne	r3, #1
     e5a:	2300      	moveq	r3, #0
     e5c:	b2db      	uxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	d017      	beq.n	e92 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     e62:	f107 0208 	add.w	r2, r7, #8
     e66:	1d3b      	adds	r3, r7, #4
     e68:	4611      	mov	r1, r2
     e6a:	4618      	mov	r0, r3
     e6c:	f7ff ff2d 	bl	cca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     e70:	4603      	mov	r3, r0
     e72:	61fb      	str	r3, [r7, #28]
     e74:	f107 031c 	add.w	r3, r7, #28
     e78:	2101      	movs	r1, #1
     e7a:	4618      	mov	r0, r3
     e7c:	f7ff ff62 	bl	d44 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     e80:	4603      	mov	r3, r0
     e82:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     e84:	f107 0318 	add.w	r3, r7, #24
     e88:	4618      	mov	r0, r3
     e8a:	f001 fe24 	bl	2ad6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     e8e:	62b8      	str	r0, [r7, #40]	; 0x28
     e90:	e00e      	b.n	eb0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     e92:	f107 0208 	add.w	r2, r7, #8
     e96:	1d3b      	adds	r3, r7, #4
     e98:	4611      	mov	r1, r2
     e9a:	4618      	mov	r0, r3
     e9c:	f7ff ff15 	bl	cca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     ea0:	4603      	mov	r3, r0
     ea2:	623b      	str	r3, [r7, #32]
      multiplier_value =
     ea4:	f107 0320 	add.w	r3, r7, #32
     ea8:	4618      	mov	r0, r3
     eaa:	f001 fe14 	bl	2ad6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     eae:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     eb0:	2301      	movs	r3, #1
     eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     eb8:	2b00      	cmp	r3, #0
     eba:	d02d      	beq.n	f18 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     ebc:	f107 0308 	add.w	r3, r7, #8
     ec0:	4618      	mov	r0, r3
     ec2:	f7ff ff5d 	bl	d80 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     ec6:	4603      	mov	r3, r0
     ec8:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ecc:	b29b      	uxth	r3, r3
     ece:	fb12 f303 	smulbb	r3, r2, r3
     ed2:	b29b      	uxth	r3, r3
     ed4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     ed6:	fb12 f303 	smulbb	r3, r2, r3
     eda:	b29b      	uxth	r3, r3
     edc:	005b      	lsls	r3, r3, #1
     ede:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     ee2:	2b9b      	cmp	r3, #155	; 0x9b
     ee4:	d903      	bls.n	eee <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     ee6:	2300      	movs	r3, #0
     ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     eec:	e7e2      	b.n	eb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     eee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     ef0:	005b      	lsls	r3, r3, #1
     ef2:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     ef4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     ef6:	2b07      	cmp	r3, #7
     ef8:	d9dc      	bls.n	eb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     efa:	f44f 7389 	mov.w	r3, #274	; 0x112
     efe:	4a09      	ldr	r2, [pc, #36]	; (f24 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     f00:	490c      	ldr	r1, [pc, #48]	; (f34 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     f02:	480d      	ldr	r0, [pc, #52]	; (f38 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     f04:	f004 face 	bl	54a4 <printf>
     f08:	4809      	ldr	r0, [pc, #36]	; (f30 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     f0a:	f003 f987 	bl	421c <puts>
     f0e:	2100      	movs	r1, #0
     f10:	2001      	movs	r0, #1
     f12:	f7ff fb35 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     f16:	e7fe      	b.n	f16 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     f1a:	4618      	mov	r0, r3
     f1c:	3734      	adds	r7, #52	; 0x34
     f1e:	46bd      	mov	sp, r7
     f20:	bd90      	pop	{r4, r7, pc}
     f22:	bf00      	nop
     f24:	0000939c 	.word	0x0000939c
     f28:	000090b0 	.word	0x000090b0
     f2c:	00008aac 	.word	0x00008aac
     f30:	00008a94 	.word	0x00008a94
     f34:	000090c8 	.word	0x000090c8
     f38:	00008b9c 	.word	0x00008b9c

00000f3c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     f3c:	b580      	push	{r7, lr}
     f3e:	b086      	sub	sp, #24
     f40:	af00      	add	r7, sp, #0
     f42:	60f8      	str	r0, [r7, #12]
     f44:	60b9      	str	r1, [r7, #8]
     f46:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
     f48:	2301      	movs	r3, #1
     f4a:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
     f4c:	687a      	ldr	r2, [r7, #4]
     f4e:	68b9      	ldr	r1, [r7, #8]
     f50:	68f8      	ldr	r0, [r7, #12]
     f52:	f7ff ff29 	bl	da8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
     f56:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
     f58:	2100      	movs	r1, #0
     f5a:	68f8      	ldr	r0, [r7, #12]
     f5c:	f7ff fdda 	bl	b14 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
     f60:	2100      	movs	r1, #0
     f62:	68f8      	ldr	r0, [r7, #12]
     f64:	f7ff fdfa 	bl	b5c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
     f68:	2100      	movs	r1, #0
     f6a:	68f8      	ldr	r0, [r7, #12]
     f6c:	f7ff fe1a 	bl	ba4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
     f70:	2100      	movs	r1, #0
     f72:	68f8      	ldr	r0, [r7, #12]
     f74:	f7ff fe3a 	bl	bec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
     f78:	4b21      	ldr	r3, [pc, #132]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f7a:	681b      	ldr	r3, [r3, #0]
     f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
     f80:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
     f84:	693b      	ldr	r3, [r7, #16]
     f86:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
     f88:	4b1d      	ldr	r3, [pc, #116]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f8a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
     f8c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
     f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
     f92:	4b1b      	ldr	r3, [pc, #108]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
     f9a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
     f9e:	8afb      	ldrh	r3, [r7, #22]
     fa0:	015b      	lsls	r3, r3, #5
     fa2:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
     fa4:	4b16      	ldr	r3, [pc, #88]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     fa6:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
     fa8:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
     faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
     fae:	4b14      	ldr	r3, [pc, #80]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     fb6:	4b12      	ldr	r3, [pc, #72]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	f042 0201 	orr.w	r2, r2, #1
     fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
     fc2:	4b0f      	ldr	r3, [pc, #60]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	22aa      	movs	r2, #170	; 0xaa
     fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
     fcc:	4b0c      	ldr	r3, [pc, #48]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	2255      	movs	r2, #85	; 0x55
     fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
     fd6:	4b0a      	ldr	r3, [pc, #40]	; (1000 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     fde:	210a      	movs	r1, #10
     fe0:	4618      	mov	r0, r3
     fe2:	f001 fd93 	bl	2b0c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     fe6:	4603      	mov	r3, r0
     fe8:	f083 0301 	eor.w	r3, r3, #1
     fec:	b2db      	uxtb	r3, r3
     fee:	2b00      	cmp	r3, #0
     ff0:	d001      	beq.n	ff6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
     ff2:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
     ff4:	e7ef      	b.n	fd6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
     ff6:	bf00      	nop
     ff8:	3718      	adds	r7, #24
     ffa:	46bd      	mov	sp, r7
     ffc:	bd80      	pop	{r7, pc}
     ffe:	bf00      	nop
    1000:	10000124 	.word	0x10000124

00001004 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    1004:	b590      	push	{r4, r7, lr}
    1006:	b083      	sub	sp, #12
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
    100c:	460b      	mov	r3, r1
    100e:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    1010:	78fb      	ldrb	r3, [r7, #3]
    1012:	2b1f      	cmp	r3, #31
    1014:	d90e      	bls.n	1034 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    1016:	f44f 73a9 	mov.w	r3, #338	; 0x152
    101a:	4a13      	ldr	r2, [pc, #76]	; (1068 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    101c:	4913      	ldr	r1, [pc, #76]	; (106c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    101e:	4814      	ldr	r0, [pc, #80]	; (1070 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    1020:	f004 fa40 	bl	54a4 <printf>
    1024:	4813      	ldr	r0, [pc, #76]	; (1074 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    1026:	f003 f8f9 	bl	421c <puts>
    102a:	2100      	movs	r1, #0
    102c:	2001      	movs	r0, #1
    102e:	f7ff faa7 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    1032:	e7fe      	b.n	1032 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    1034:	4b10      	ldr	r3, [pc, #64]	; (1078 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    1036:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    1038:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    103c:	4b0e      	ldr	r3, [pc, #56]	; (1078 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    103e:	681c      	ldr	r4, [r3, #0]
    1040:	4b0e      	ldr	r3, [pc, #56]	; (107c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    1042:	78f9      	ldrb	r1, [r7, #3]
    1044:	781a      	ldrb	r2, [r3, #0]
    1046:	785b      	ldrb	r3, [r3, #1]
    1048:	021b      	lsls	r3, r3, #8
    104a:	431a      	orrs	r2, r3
    104c:	2300      	movs	r3, #0
    104e:	f362 030f 	bfi	r3, r2, #0, #16
    1052:	461a      	mov	r2, r3
    1054:	f001 fca6 	bl	29a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1058:	4603      	mov	r3, r0
    105a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    105e:	bf00      	nop
    1060:	370c      	adds	r7, #12
    1062:	46bd      	mov	sp, r7
    1064:	bd90      	pop	{r4, r7, pc}
    1066:	bf00      	nop
    1068:	00009418 	.word	0x00009418
    106c:	000090e0 	.word	0x000090e0
    1070:	00008c44 	.word	0x00008c44
    1074:	00008a94 	.word	0x00008a94
    1078:	10000124 	.word	0x10000124
    107c:	00009088 	.word	0x00009088

00001080 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1080:	b590      	push	{r4, r7, lr}
    1082:	b083      	sub	sp, #12
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
    1088:	460b      	mov	r3, r1
    108a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1094:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1098:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    109a:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    109c:	781a      	ldrb	r2, [r3, #0]
    109e:	785b      	ldrb	r3, [r3, #1]
    10a0:	021b      	lsls	r3, r3, #8
    10a2:	431a      	orrs	r2, r3
    10a4:	2300      	movs	r3, #0
    10a6:	f362 030f 	bfi	r3, r2, #0, #16
    10aa:	461a      	mov	r2, r3
    10ac:	f001 fd01 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    10b0:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    10b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    10b6:	bf00      	nop
    10b8:	370c      	adds	r7, #12
    10ba:	46bd      	mov	sp, r7
    10bc:	bd90      	pop	{r4, r7, pc}
    10be:	bf00      	nop
    10c0:	10000124 	.word	0x10000124
    10c4:	00009084 	.word	0x00009084

000010c8 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    10c8:	b480      	push	{r7}
    10ca:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    10cc:	4b02      	ldr	r3, [pc, #8]	; (10d8 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    10ce:	4618      	mov	r0, r3
    10d0:	46bd      	mov	sp, r7
    10d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    10d6:	4770      	bx	lr
    10d8:	10000008 	.word	0x10000008

000010dc <sjsu::Uart::Write(unsigned char) const>:
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  /// @param byte - Write a single byte to the UART port.
  void Write(uint8_t byte) const
    10dc:	b580      	push	{r7, lr}
    10de:	b082      	sub	sp, #8
    10e0:	af00      	add	r7, sp, #0
    10e2:	6078      	str	r0, [r7, #4]
    10e4:	460b      	mov	r3, r1
    10e6:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	3308      	adds	r3, #8
    10ee:	681b      	ldr	r3, [r3, #0]
    10f0:	1cf9      	adds	r1, r7, #3
    10f2:	2201      	movs	r2, #1
    10f4:	6878      	ldr	r0, [r7, #4]
    10f6:	4798      	blx	r3
  }
    10f8:	bf00      	nop
    10fa:	3708      	adds	r7, #8
    10fc:	46bd      	mov	sp, r7
    10fe:	bd80      	pop	{r7, pc}

00001100 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  }
  /// Wait to receive just 1 byte
  ///
  /// @param timeout - The maximum amount of time to wait for a byte to be
  ///        transmitted.
  uint8_t Read(std::chrono::microseconds timeout =
    1100:	b5b0      	push	{r4, r5, r7, lr}
    1102:	b088      	sub	sp, #32
    1104:	af02      	add	r7, sp, #8
    1106:	60f8      	str	r0, [r7, #12]
    1108:	e9c7 2300 	strd	r2, r3, [r7]
                   std::chrono::microseconds::max()) const
  {
    uint8_t byte;
    if (Read(&byte, 1, timeout) == Status::kTimedOut)
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	330c      	adds	r3, #12
    1112:	681d      	ldr	r5, [r3, #0]
    1114:	f107 0117 	add.w	r1, r7, #23
    1118:	e9d7 3400 	ldrd	r3, r4, [r7]
    111c:	e9cd 3400 	strd	r3, r4, [sp]
    1120:	2201      	movs	r2, #1
    1122:	68f8      	ldr	r0, [r7, #12]
    1124:	47a8      	blx	r5
    1126:	4603      	mov	r3, r0
    1128:	2b01      	cmp	r3, #1
    112a:	bf0c      	ite	eq
    112c:	2301      	moveq	r3, #1
    112e:	2300      	movne	r3, #0
    1130:	b2db      	uxtb	r3, r3
    1132:	2b00      	cmp	r3, #0
    1134:	d001      	beq.n	113a <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x3a>
    {
      byte = 0xFF;
    1136:	23ff      	movs	r3, #255	; 0xff
    1138:	75fb      	strb	r3, [r7, #23]
    }
    return byte;
    113a:	7dfb      	ldrb	r3, [r7, #23]
  }
    113c:	4618      	mov	r0, r3
    113e:	3718      	adds	r7, #24
    1140:	46bd      	mov	sp, r7
    1142:	bdb0      	pop	{r4, r5, r7, pc}

00001144 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    1144:	b480      	push	{r7}
    1146:	b089      	sub	sp, #36	; 0x24
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
    114c:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	2200      	movs	r2, #0
    1154:	601a      	str	r2, [r3, #0]
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	2200      	movs	r2, #0
    115a:	605a      	str	r2, [r3, #4]
    115c:	687b      	ldr	r3, [r7, #4]
    115e:	2201      	movs	r2, #1
    1160:	609a      	str	r2, [r3, #8]
  bool finished = false;
    1162:	2300      	movs	r3, #0
    1164:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    1166:	2300      	movs	r3, #0
    1168:	61bb      	str	r3, [r7, #24]
    116a:	69bb      	ldr	r3, [r7, #24]
    116c:	2b0e      	cmp	r3, #14
    116e:	dc4f      	bgt.n	1210 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    1170:	7ffb      	ldrb	r3, [r7, #31]
    1172:	2b00      	cmp	r3, #0
    1174:	d14c      	bne.n	1210 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1176:	69bb      	ldr	r3, [r7, #24]
    1178:	3301      	adds	r3, #1
    117a:	617b      	str	r3, [r7, #20]
    117c:	697b      	ldr	r3, [r7, #20]
    117e:	2b0e      	cmp	r3, #14
    1180:	dc42      	bgt.n	1208 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    1182:	7ffb      	ldrb	r3, [r7, #31]
    1184:	2b00      	cmp	r3, #0
    1186:	d13f      	bne.n	1208 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    1188:	69bb      	ldr	r3, [r7, #24]
    118a:	ee07 3a90 	vmov	s15, r3
    118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1192:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    1196:	697b      	ldr	r3, [r7, #20]
    1198:	ee07 3a90 	vmov	s15, r3
    119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    11a0:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    11a4:	edd7 6a04 	vldr	s13, [r7, #16]
    11a8:	ed97 7a03 	vldr	s14, [r7, #12]
    11ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
    11b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    11b4:	ee77 7a87 	vadd.f32	s15, s15, s14
    11b8:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    11bc:	edd7 7a02 	vldr	s15, [r7, #8]
    11c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1220 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    11c4:	ee77 7a87 	vadd.f32	s15, s15, s14
    11c8:	ed97 7a00 	vldr	s14, [r7]
    11cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    11d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11d4:	d814      	bhi.n	1200 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    11d6:	edd7 7a02 	vldr	s15, [r7, #8]
    11da:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1220 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    11de:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    11e2:	ed97 7a00 	vldr	s14, [r7]
    11e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    11ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11ee:	db07      	blt.n	1200 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    11f0:	69ba      	ldr	r2, [r7, #24]
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    11f6:	697a      	ldr	r2, [r7, #20]
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	609a      	str	r2, [r3, #8]
        finished          = true;
    11fc:	2301      	movs	r3, #1
    11fe:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1200:	697b      	ldr	r3, [r7, #20]
    1202:	3301      	adds	r3, #1
    1204:	617b      	str	r3, [r7, #20]
    1206:	e7b9      	b.n	117c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    1208:	69bb      	ldr	r3, [r7, #24]
    120a:	3301      	adds	r3, #1
    120c:	61bb      	str	r3, [r7, #24]
    120e:	e7ac      	b.n	116a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    1210:	bf00      	nop
}
    1212:	6878      	ldr	r0, [r7, #4]
    1214:	3724      	adds	r7, #36	; 0x24
    1216:	46bd      	mov	sp, r7
    1218:	f85d 7b04 	ldr.w	r7, [sp], #4
    121c:	4770      	bx	lr
    121e:	bf00      	nop
    1220:	3d4ccccd 	.word	0x3d4ccccd

00001224 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    1224:	b480      	push	{r7}
    1226:	b087      	sub	sp, #28
    1228:	af00      	add	r7, sp, #0
    122a:	ed87 0a03 	vstr	s0, [r7, #12]
    122e:	edc7 0a02 	vstr	s1, [r7, #8]
    1232:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	ee07 3a90 	vmov	s15, r3
    123a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    123e:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    1242:	edd7 7a03 	vldr	s15, [r7, #12]
    1246:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    124a:	ee27 7a87 	vmul.f32	s14, s15, s14
    124e:	edd7 7a02 	vldr	s15, [r7, #8]
    1252:	ee67 7a27 	vmul.f32	s15, s14, s15
    1256:	ed97 7a05 	vldr	s14, [r7, #20]
    125a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    125e:	eef0 7a66 	vmov.f32	s15, s13
}
    1262:	eeb0 0a67 	vmov.f32	s0, s15
    1266:	371c      	adds	r7, #28
    1268:	46bd      	mov	sp, r7
    126a:	f85d 7b04 	ldr.w	r7, [sp], #4
    126e:	4770      	bx	lr

00001270 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    1270:	b480      	push	{r7}
    1272:	b087      	sub	sp, #28
    1274:	af00      	add	r7, sp, #0
    1276:	ed87 0a03 	vstr	s0, [r7, #12]
    127a:	edc7 0a02 	vstr	s1, [r7, #8]
    127e:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	ee07 3a90 	vmov	s15, r3
    1286:	eef8 7a67 	vcvt.f32.u32	s15, s15
    128a:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    128e:	edd7 7a03 	vldr	s15, [r7, #12]
    1292:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1296:	ee27 7a87 	vmul.f32	s14, s15, s14
    129a:	edd7 7a02 	vldr	s15, [r7, #8]
    129e:	ee67 7a27 	vmul.f32	s15, s14, s15
    12a2:	ed97 7a05 	vldr	s14, [r7, #20]
    12a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    12aa:	eef0 7a66 	vmov.f32	s15, s13
}
    12ae:	eeb0 0a67 	vmov.f32	s0, s15
    12b2:	371c      	adds	r7, #28
    12b4:	46bd      	mov	sp, r7
    12b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ba:	4770      	bx	lr

000012bc <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    12bc:	b480      	push	{r7}
    12be:	b083      	sub	sp, #12
    12c0:	af00      	add	r7, sp, #0
    12c2:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    12c6:	edd7 7a01 	vldr	s15, [r7, #4]
    12ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    12ce:	ee77 7a87 	vadd.f32	s15, s15, s14
    12d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    12da:	eeb0 0a67 	vmov.f32	s0, s15
    12de:	370c      	adds	r7, #12
    12e0:	46bd      	mov	sp, r7
    12e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    12e6:	4770      	bx	lr

000012e8 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	b086      	sub	sp, #24
    12ec:	af00      	add	r7, sp, #0
    12ee:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    12f2:	2300      	movs	r3, #0
    12f4:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    12f6:	ed97 0a01 	vldr	s0, [r7, #4]
    12fa:	f7ff ffdf 	bl	12bc <sjsu::lpc40xx::uart::RoundFloat(float)>
    12fe:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    1302:	ed97 7a01 	vldr	s14, [r7, #4]
    1306:	edd7 7a04 	vldr	s15, [r7, #16]
    130a:	ee77 7a67 	vsub.f32	s15, s14, s15
    130e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    1312:	edd7 7a03 	vldr	s15, [r7, #12]
    1316:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1344 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    131a:	eef4 7ac7 	vcmpe.f32	s15, s14
    131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1322:	db0a      	blt.n	133a <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    1324:	edd7 7a03 	vldr	s15, [r7, #12]
    1328:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1348 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    132c:	eef4 7ac7 	vcmpe.f32	s15, s14
    1330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1334:	d801      	bhi.n	133a <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    1336:	2301      	movs	r3, #1
    1338:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    133a:	7dfb      	ldrb	r3, [r7, #23]
}
    133c:	4618      	mov	r0, r3
    133e:	3718      	adds	r7, #24
    1340:	46bd      	mov	sp, r7
    1342:	bd80      	pop	{r7, pc}
    1344:	bd4ccccd 	.word	0xbd4ccccd
    1348:	3d4ccccd 	.word	0x3d4ccccd

0000134c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    134c:	b580      	push	{r7, lr}
    134e:	b082      	sub	sp, #8
    1350:	af00      	add	r7, sp, #0
    1352:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    1354:	6878      	ldr	r0, [r7, #4]
    1356:	f000 f805 	bl	1364 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    135a:	4603      	mov	r3, r0
	}
    135c:	4618      	mov	r0, r3
    135e:	3708      	adds	r7, #8
    1360:	46bd      	mov	sp, r7
    1362:	bd80      	pop	{r7, pc}

00001364 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    1364:	b580      	push	{r7, lr}
    1366:	b082      	sub	sp, #8
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	4618      	mov	r0, r3
    1370:	f7ff fc9c 	bl	cac <units::linear_scale<float>::operator()() const>
    1374:	eef0 7a40 	vmov.f32	s15, s0
    1378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    137c:	ee17 3a90 	vmov	r3, s15
		}
    1380:	4618      	mov	r0, r3
    1382:	3708      	adds	r7, #8
    1384:	46bd      	mov	sp, r7
    1386:	bd80      	pop	{r7, pc}

00001388 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    1388:	b590      	push	{r4, r7, lr}
    138a:	b091      	sub	sp, #68	; 0x44
    138c:	af00      	add	r7, sp, #0
    138e:	61f8      	str	r0, [r7, #28]
    1390:	61b9      	str	r1, [r7, #24]
    1392:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    1394:	f107 0314 	add.w	r3, r7, #20
    1398:	4618      	mov	r0, r3
    139a:	f7ff ffd7 	bl	134c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    139e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    13a0:	2300      	movs	r3, #0
    13a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    13a4:	69fb      	ldr	r3, [r7, #28]
    13a6:	2200      	movs	r2, #0
    13a8:	601a      	str	r2, [r3, #0]
    13aa:	69fb      	ldr	r3, [r7, #28]
    13ac:	2200      	movs	r2, #0
    13ae:	605a      	str	r2, [r3, #4]
    13b0:	69fb      	ldr	r3, [r7, #28]
    13b2:	2201      	movs	r2, #1
    13b4:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    13b6:	69bb      	ldr	r3, [r7, #24]
    13b8:	ee07 3a90 	vmov	s15, r3
    13bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    13c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    13c4:	f04f 0300 	mov.w	r3, #0
    13c8:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    13ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    13ce:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    13d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    13d4:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    13d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    13da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    13dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13de:	2b04      	cmp	r3, #4
    13e0:	f000 80be 	beq.w	1560 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    13e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13e6:	2b03      	cmp	r3, #3
    13e8:	f200 80b8 	bhi.w	155c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    13ec:	a201      	add	r2, pc, #4	; (adr r2, 13f4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    13ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13f2:	bf00      	nop
    13f4:	00001405 	.word	0x00001405
    13f8:	0000145f 	.word	0x0000145f
    13fc:	000014bf 	.word	0x000014bf
    1400:	0000152f 	.word	0x0000152f
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    1404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1406:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    140a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    140e:	f7ff ff09 	bl	1224 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    1412:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    1416:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    141a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    141e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1426:	d505      	bpl.n	1434 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    1428:	69fb      	ldr	r3, [r7, #28]
    142a:	2200      	movs	r2, #0
    142c:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    142e:	2304      	movs	r3, #4
    1430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    1432:	e094      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    1434:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    1438:	f7ff ff56 	bl	12e8 <sjsu::lpc40xx::uart::IsDecmial(float)>
    143c:	4603      	mov	r3, r0
    143e:	2b00      	cmp	r3, #0
    1440:	d00a      	beq.n	1458 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    1442:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    144a:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    144e:	69fb      	ldr	r3, [r7, #28]
    1450:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    1452:	2304      	movs	r3, #4
    1454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1456:	e082      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    1458:	2301      	movs	r3, #1
    145a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    145c:	e07f      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    145e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1460:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    1464:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1468:	f7ff fedc 	bl	1224 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    146c:	eef0 7a40 	vmov.f32	s15, s0
    1470:	eeb0 0a67 	vmov.f32	s0, s15
    1474:	f7ff ff22 	bl	12bc <sjsu::lpc40xx::uart::RoundFloat(float)>
    1478:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    147c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    147e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    1482:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1486:	f7ff fef3 	bl	1270 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    148a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    148e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1492:	ed9f 7a36 	vldr	s14, [pc, #216]	; 156c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    1496:	eef4 7ac7 	vcmpe.f32	s15, s14
    149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    149e:	db0b      	blt.n	14b8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    14a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    14a4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1570 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    14a8:	eef4 7ac7 	vcmpe.f32	s15, s14
    14ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14b0:	d802      	bhi.n	14b8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    14b2:	2303      	movs	r3, #3
    14b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    14b6:	e052      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    14b8:	2302      	movs	r3, #2
    14ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    14bc:	e04f      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    14be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    14c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    14c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    14ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    14ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    14d2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    14d6:	eef4 7ac7 	vcmpe.f32	s15, s14
    14da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14de:	dd02      	ble.n	14e6 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    14e0:	2304      	movs	r3, #4
    14e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    14e4:	e03b      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    14e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    14ea:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    14ee:	eef4 7ac7 	vcmpe.f32	s15, s14
    14f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14f6:	dd0f      	ble.n	1518 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    14f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    14fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1500:	ee77 7a87 	vadd.f32	s15, s15, s14
    1504:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    1508:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    150c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1510:	ee77 7a87 	vadd.f32	s15, s15, s14
    1514:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    1518:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    151c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    1520:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1524:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    1528:	2301      	movs	r3, #1
    152a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    152c:	e017      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    152e:	69fc      	ldr	r4, [r7, #28]
    1530:	463b      	mov	r3, r7
    1532:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    1536:	4618      	mov	r0, r3
    1538:	f7ff fe04 	bl	1144 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    153c:	463b      	mov	r3, r7
    153e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    1546:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    154a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    154e:	ee17 2a90 	vmov	r2, s15
    1552:	69fb      	ldr	r3, [r7, #28]
    1554:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    1556:	2304      	movs	r3, #4
    1558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    155a:	e000      	b.n	155e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    155c:	bf00      	nop
  while (state != States::kDone)
    155e:	e73d      	b.n	13dc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    1560:	bf00      	nop
}
    1562:	69f8      	ldr	r0, [r7, #28]
    1564:	3744      	adds	r7, #68	; 0x44
    1566:	46bd      	mov	sp, r7
    1568:	bd90      	pop	{r4, r7, pc}
    156a:	bf00      	nop
    156c:	3f8ccccd 	.word	0x3f8ccccd
    1570:	3ff33333 	.word	0x3ff33333

00001574 <sjsu::Uart::Uart()>:
class Uart
    1574:	b480      	push	{r7}
    1576:	b083      	sub	sp, #12
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    157c:	4a04      	ldr	r2, [pc, #16]	; (1590 <sjsu::Uart::Uart()+0x1c>)
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	601a      	str	r2, [r3, #0]
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	4618      	mov	r0, r3
    1586:	370c      	adds	r7, #12
    1588:	46bd      	mov	sp, r7
    158a:	f85d 7b04 	ldr.w	r7, [sp], #4
    158e:	4770      	bx	lr
    1590:	00009298 	.word	0x00009298

00001594 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    1594:	b580      	push	{r7, lr}
    1596:	b084      	sub	sp, #16
    1598:	af00      	add	r7, sp, #0
    159a:	60f8      	str	r0, [r7, #12]
    159c:	60b9      	str	r1, [r7, #8]
    159e:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	4618      	mov	r0, r3
    15a4:	f7ff ffe6 	bl	1574 <sjsu::Uart::Uart()>
    15a8:	4a06      	ldr	r2, [pc, #24]	; (15c4 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	601a      	str	r2, [r3, #0]
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	68ba      	ldr	r2, [r7, #8]
    15b2:	605a      	str	r2, [r3, #4]
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	687a      	ldr	r2, [r7, #4]
    15b8:	609a      	str	r2, [r3, #8]
  {
  }
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	4618      	mov	r0, r3
    15be:	3710      	adds	r7, #16
    15c0:	46bd      	mov	sp, r7
    15c2:	bd80      	pop	{r7, pc}
    15c4:	0000927c 	.word	0x0000927c

000015c8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    15c8:	b580      	push	{r7, lr}
    15ca:	b084      	sub	sp, #16
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    15d2:	2307      	movs	r3, #7
    15d4:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	6898      	ldr	r0, [r3, #8]
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	689b      	ldr	r3, [r3, #8]
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	3314      	adds	r3, #20
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	687a      	ldr	r2, [r7, #4]
    15e6:	6852      	ldr	r2, [r2, #4]
    15e8:	3204      	adds	r2, #4
    15ea:	4611      	mov	r1, r2
    15ec:	4798      	blx	r3

    SetBaudRate(baud_rate);
    15ee:	6839      	ldr	r1, [r7, #0]
    15f0:	6878      	ldr	r0, [r7, #4]
    15f2:	f000 f849 	bl	1688 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	685b      	ldr	r3, [r3, #4]
    15fa:	68d8      	ldr	r0, [r3, #12]
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	685b      	ldr	r3, [r3, #4]
    1600:	68db      	ldr	r3, [r3, #12]
    1602:	681b      	ldr	r3, [r3, #0]
    1604:	681b      	ldr	r3, [r3, #0]
    1606:	687a      	ldr	r2, [r7, #4]
    1608:	6852      	ldr	r2, [r2, #4]
    160a:	7c12      	ldrb	r2, [r2, #16]
    160c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1610:	b2d2      	uxtb	r2, r2
    1612:	4611      	mov	r1, r2
    1614:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	685b      	ldr	r3, [r3, #4]
    161a:	6898      	ldr	r0, [r3, #8]
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	685b      	ldr	r3, [r3, #4]
    1620:	689b      	ldr	r3, [r3, #8]
    1622:	681b      	ldr	r3, [r3, #0]
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	687a      	ldr	r2, [r7, #4]
    1628:	6852      	ldr	r2, [r2, #4]
    162a:	7c12      	ldrb	r2, [r2, #16]
    162c:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1630:	b2d2      	uxtb	r2, r2
    1632:	4611      	mov	r1, r2
    1634:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	685b      	ldr	r3, [r3, #4]
    163a:	68da      	ldr	r2, [r3, #12]
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	685b      	ldr	r3, [r3, #4]
    1640:	68db      	ldr	r3, [r3, #12]
    1642:	681b      	ldr	r3, [r3, #0]
    1644:	3304      	adds	r3, #4
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	2102      	movs	r1, #2
    164a:	4610      	mov	r0, r2
    164c:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	685b      	ldr	r3, [r3, #4]
    1652:	689a      	ldr	r2, [r3, #8]
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	685b      	ldr	r3, [r3, #4]
    1658:	689b      	ldr	r3, [r3, #8]
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	3304      	adds	r3, #4
    165e:	681b      	ldr	r3, [r3, #0]
    1660:	2102      	movs	r1, #2
    1662:	4610      	mov	r0, r2
    1664:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	685b      	ldr	r3, [r3, #4]
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	7a1b      	ldrb	r3, [r3, #8]
    166e:	b2da      	uxtb	r2, r3
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	685b      	ldr	r3, [r3, #4]
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	f042 0207 	orr.w	r2, r2, #7
    167a:	b2d2      	uxtb	r2, r2
    167c:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    167e:	2300      	movs	r3, #0
  }
    1680:	4618      	mov	r0, r3
    1682:	3710      	adds	r7, #16
    1684:	46bd      	mov	sp, r7
    1686:	bd80      	pop	{r7, pc}

00001688 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    1688:	b580      	push	{r7, lr}
    168a:	b086      	sub	sp, #24
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	689a      	ldr	r2, [r3, #8]
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	3304      	adds	r3, #4
    169c:	4619      	mov	r1, r3
    169e:	4610      	mov	r0, r2
    16a0:	f7ff f8fe 	bl	8a0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    16a4:	4602      	mov	r2, r0
    16a6:	f107 0308 	add.w	r3, r7, #8
    16aa:	6839      	ldr	r1, [r7, #0]
    16ac:	4618      	mov	r0, r3
    16ae:	f7ff fe6b 	bl	1388 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    16b2:	2380      	movs	r3, #128	; 0x80
    16b4:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    16b6:	68bb      	ldr	r3, [r7, #8]
    16b8:	0a1b      	lsrs	r3, r3, #8
    16ba:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    16bc:	68bb      	ldr	r3, [r7, #8]
    16be:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    16c0:	693b      	ldr	r3, [r7, #16]
    16c2:	b2db      	uxtb	r3, r3
    16c4:	011b      	lsls	r3, r3, #4
    16c6:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    16c8:	68fb      	ldr	r3, [r7, #12]
    16ca:	b2db      	uxtb	r3, r3
    16cc:	f003 030f 	and.w	r3, r3, #15
    16d0:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    16d2:	4313      	orrs	r3, r2
    16d4:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	685b      	ldr	r3, [r3, #4]
    16da:	681b      	ldr	r3, [r3, #0]
    16dc:	2280      	movs	r2, #128	; 0x80
    16de:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	685b      	ldr	r3, [r3, #4]
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	7dba      	ldrb	r2, [r7, #22]
    16e8:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	685b      	ldr	r3, [r3, #4]
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	7d7a      	ldrb	r2, [r7, #21]
    16f2:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	685b      	ldr	r3, [r3, #4]
    16f8:	681b      	ldr	r3, [r3, #0]
    16fa:	7d3a      	ldrb	r2, [r7, #20]
    16fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	685b      	ldr	r3, [r3, #4]
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	2203      	movs	r2, #3
    1708:	731a      	strb	r2, [r3, #12]
    return true;
    170a:	2301      	movs	r3, #1
  }
    170c:	4618      	mov	r0, r3
    170e:	3718      	adds	r7, #24
    1710:	46bd      	mov	sp, r7
    1712:	bd80      	pop	{r7, pc}

00001714 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    1714:	b580      	push	{r7, lr}
    1716:	b086      	sub	sp, #24
    1718:	af00      	add	r7, sp, #0
    171a:	60f8      	str	r0, [r7, #12]
    171c:	60b9      	str	r1, [r7, #8]
    171e:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    1720:	2300      	movs	r3, #0
    1722:	617b      	str	r3, [r7, #20]
    1724:	697a      	ldr	r2, [r7, #20]
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	429a      	cmp	r2, r3
    172a:	d216      	bcs.n	175a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    172c:	68ba      	ldr	r2, [r7, #8]
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	441a      	add	r2, r3
    1732:	68fb      	ldr	r3, [r7, #12]
    1734:	685b      	ldr	r3, [r3, #4]
    1736:	681b      	ldr	r3, [r3, #0]
    1738:	7812      	ldrb	r2, [r2, #0]
    173a:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    173c:	68f8      	ldr	r0, [r7, #12]
    173e:	f000 f8b5 	bl	18ac <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    1742:	4603      	mov	r3, r0
    1744:	f083 0301 	eor.w	r3, r3, #1
    1748:	b2db      	uxtb	r3, r3
    174a:	2b00      	cmp	r3, #0
    174c:	d001      	beq.n	1752 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    174e:	bf00      	nop
      while (!TransmissionComplete())
    1750:	e7f4      	b.n	173c <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    1752:	697b      	ldr	r3, [r7, #20]
    1754:	3301      	adds	r3, #1
    1756:	617b      	str	r3, [r7, #20]
    1758:	e7e4      	b.n	1724 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    175a:	bf00      	nop
    175c:	3718      	adds	r7, #24
    175e:	46bd      	mov	sp, r7
    1760:	bd80      	pop	{r7, pc}

00001762 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1762:	b590      	push	{r4, r7, lr}
    1764:	b083      	sub	sp, #12
    1766:	af00      	add	r7, sp, #0
    1768:	6078      	str	r0, [r7, #4]
    176a:	687b      	ldr	r3, [r7, #4]
    176c:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    176e:	4618      	mov	r0, r3
    1770:	f000 f88a 	bl	1888 <sjsu::lpc40xx::Uart::HasData() const>
    1774:	4603      	mov	r3, r0
    1776:	2b00      	cmp	r3, #0
    1778:	d010      	beq.n	179c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    177e:	685b      	ldr	r3, [r3, #4]
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    178a:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1790:	6813      	ldr	r3, [r2, #0]
    1792:	1c58      	adds	r0, r3, #1
    1794:	6010      	str	r0, [r2, #0]
    1796:	440b      	add	r3, r1
    1798:	4622      	mov	r2, r4
    179a:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    17a0:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    17a6:	429a      	cmp	r2, r3
    17a8:	d301      	bcc.n	17ae <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    17aa:	2301      	movs	r3, #1
    17ac:	e000      	b.n	17b0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    17ae:	2300      	movs	r3, #0
    });
    17b0:	4618      	mov	r0, r3
    17b2:	370c      	adds	r7, #12
    17b4:	46bd      	mov	sp, r7
    17b6:	bd90      	pop	{r4, r7, pc}

000017b8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    17b8:	b590      	push	{r4, r7, lr}
    17ba:	b09d      	sub	sp, #116	; 0x74
    17bc:	af00      	add	r7, sp, #0
    17be:	6178      	str	r0, [r7, #20]
    17c0:	6139      	str	r1, [r7, #16]
    17c2:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    17c4:	2300      	movs	r3, #0
    17c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17c8:	697b      	ldr	r3, [r7, #20]
    17ca:	643b      	str	r3, [r7, #64]	; 0x40
    17cc:	f107 0310 	add.w	r3, r7, #16
    17d0:	647b      	str	r3, [r7, #68]	; 0x44
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	64bb      	str	r3, [r7, #72]	; 0x48
    17d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    17da:	64fb      	str	r3, [r7, #76]	; 0x4c
    17dc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    17e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    17e4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    17e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    17ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    17ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    17f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
    17f6:	4618      	mov	r0, r3
    17f8:	f000 fd86 	bl	2308 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    17fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1800:	f107 0320 	add.w	r3, r7, #32
    1804:	4611      	mov	r1, r2
    1806:	4618      	mov	r0, r3
    1808:	f001 f8a5 	bl	2956 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    180c:	4603      	mov	r3, r0
    180e:	2b00      	cmp	r3, #0
    1810:	d004      	beq.n	181c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    1812:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    1816:	e9c7 3406 	strd	r3, r4, [r7, #24]
    181a:	e011      	b.n	1840 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    181c:	4b19      	ldr	r3, [pc, #100]	; (1884 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	f107 0258 	add.w	r2, r7, #88	; 0x58
    1824:	4610      	mov	r0, r2
    1826:	4798      	blx	r3
    1828:	463b      	mov	r3, r7
    182a:	f107 0220 	add.w	r2, r7, #32
    182e:	f107 0158 	add.w	r1, r7, #88	; 0x58
    1832:	4618      	mov	r0, r3
    1834:	f001 fa26 	bl	2c84 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1838:	e9d7 3400 	ldrd	r3, r4, [r7]
    183c:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    1840:	2301      	movs	r3, #1
    1842:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    1844:	4b0f      	ldr	r3, [pc, #60]	; (1884 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1846:	681b      	ldr	r3, [r3, #0]
    1848:	f107 0250 	add.w	r2, r7, #80	; 0x50
    184c:	4610      	mov	r0, r2
    184e:	4798      	blx	r3
    1850:	f107 0218 	add.w	r2, r7, #24
    1854:	f107 0350 	add.w	r3, r7, #80	; 0x50
    1858:	4611      	mov	r1, r2
    185a:	4618      	mov	r0, r3
    185c:	f001 fa3f 	bl	2cde <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1860:	4603      	mov	r3, r0
    1862:	2b00      	cmp	r3, #0
    1864:	d009      	beq.n	187a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    1866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    186a:	4618      	mov	r0, r3
    186c:	f7ff ff79 	bl	1762 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    1870:	4603      	mov	r3, r0
    1872:	2b00      	cmp	r3, #0
    1874:	d0e6      	beq.n	1844 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    1876:	2300      	movs	r3, #0
    1878:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    187a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    187c:	4618      	mov	r0, r3
    187e:	3774      	adds	r7, #116	; 0x74
    1880:	46bd      	mov	sp, r7
    1882:	bd90      	pop	{r4, r7, pc}
    1884:	10000000 	.word	0x10000000

00001888 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    1888:	b580      	push	{r7, lr}
    188a:	b082      	sub	sp, #8
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    1890:	687b      	ldr	r3, [r7, #4]
    1892:	685b      	ldr	r3, [r3, #4]
    1894:	681b      	ldr	r3, [r3, #0]
    1896:	7d1b      	ldrb	r3, [r3, #20]
    1898:	b2db      	uxtb	r3, r3
    189a:	2100      	movs	r1, #0
    189c:	4618      	mov	r0, r3
    189e:	f001 f94c 	bl	2b3a <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    18a2:	4603      	mov	r3, r0
  }
    18a4:	4618      	mov	r0, r3
    18a6:	3708      	adds	r7, #8
    18a8:	46bd      	mov	sp, r7
    18aa:	bd80      	pop	{r7, pc}

000018ac <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	685b      	ldr	r3, [r3, #4]
    18b8:	681b      	ldr	r3, [r3, #0]
    18ba:	7d1b      	ldrb	r3, [r3, #20]
    18bc:	b2db      	uxtb	r3, r3
    18be:	2105      	movs	r1, #5
    18c0:	4618      	mov	r0, r3
    18c2:	f001 f93a 	bl	2b3a <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    18c6:	4603      	mov	r3, r0
  }
    18c8:	4618      	mov	r0, r3
    18ca:	3708      	adds	r7, #8
    18cc:	46bd      	mov	sp, r7
    18ce:	bd80      	pop	{r7, pc}

000018d0 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
  }
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    18d0:	b580      	push	{r7, lr}
    18d2:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    18d4:	4b08      	ldr	r3, [pc, #32]	; (18f8 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	6818      	ldr	r0, [r3, #0]
    18da:	4b08      	ldr	r3, [pc, #32]	; (18fc <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    18dc:	781a      	ldrb	r2, [r3, #0]
    18de:	785b      	ldrb	r3, [r3, #1]
    18e0:	021b      	lsls	r3, r3, #8
    18e2:	431a      	orrs	r2, r3
    18e4:	2300      	movs	r3, #0
    18e6:	f362 030f 	bfi	r3, r2, #0, #16
    18ea:	4619      	mov	r1, r3
    18ec:	f001 f93c 	bl	2b68 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    18f0:	4603      	mov	r3, r0
  }
    18f2:	4618      	mov	r0, r3
    18f4:	bd80      	pop	{r7, pc}
    18f6:	bf00      	nop
    18f8:	10000128 	.word	0x10000128
    18fc:	00009130 	.word	0x00009130

00001900 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    1900:	b480      	push	{r7}
    1902:	b083      	sub	sp, #12
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
    1908:	4a04      	ldr	r2, [pc, #16]	; (191c <sjsu::Adc::Adc()+0x1c>)
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	601a      	str	r2, [r3, #0]
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	4618      	mov	r0, r3
    1912:	370c      	adds	r7, #12
    1914:	46bd      	mov	sp, r7
    1916:	f85d 7b04 	ldr.w	r7, [sp], #4
    191a:	4770      	bx	lr
    191c:	00009268 	.word	0x00009268

00001920 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    1920:	b580      	push	{r7, lr}
    1922:	b084      	sub	sp, #16
    1924:	af00      	add	r7, sp, #0
    1926:	60f8      	str	r0, [r7, #12]
    1928:	60b9      	str	r1, [r7, #8]
    192a:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	4618      	mov	r0, r3
    1930:	f7ff ffe6 	bl	1900 <sjsu::Adc::Adc()>
    1934:	4a06      	ldr	r2, [pc, #24]	; (1950 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	601a      	str	r2, [r3, #0]
    193a:	68fb      	ldr	r3, [r7, #12]
    193c:	68ba      	ldr	r2, [r7, #8]
    193e:	605a      	str	r2, [r3, #4]
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	687a      	ldr	r2, [r7, #4]
    1944:	609a      	str	r2, [r3, #8]
  {
  }
    1946:	68fb      	ldr	r3, [r7, #12]
    1948:	4618      	mov	r0, r3
    194a:	3710      	adds	r7, #16
    194c:	46bd      	mov	sp, r7
    194e:	bd80      	pop	{r7, pc}
    1950:	00009254 	.word	0x00009254

00001954 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1954:	b580      	push	{r7, lr}
    1956:	ed2d 8b02 	vpush	{d8}
    195a:	b084      	sub	sp, #16
    195c:	af00      	add	r7, sp, #0
    195e:	6078      	str	r0, [r7, #4]
    1960:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	4618      	mov	r0, r3
    1966:	f7ff f9a1 	bl	cac <units::linear_scale<float>::operator()() const>
    196a:	eeb0 8a40 	vmov.f32	s16, s0
    196e:	683b      	ldr	r3, [r7, #0]
    1970:	4618      	mov	r0, r3
    1972:	f7ff f99b 	bl	cac <units::linear_scale<float>::operator()() const>
    1976:	eef0 7a40 	vmov.f32	s15, s0
    197a:	edc7 7a03 	vstr	s15, [r7, #12]
    197e:	f107 030c 	add.w	r3, r7, #12
    1982:	4618      	mov	r0, r3
    1984:	f7fe fd63 	bl	44e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1988:	eeb0 7a40 	vmov.f32	s14, s0
    198c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1990:	f107 0308 	add.w	r3, r7, #8
    1994:	eeb0 0a67 	vmov.f32	s0, s15
    1998:	4618      	mov	r0, r3
    199a:	f7ff f9c2 	bl	d22 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    199e:	68bb      	ldr	r3, [r7, #8]
	}
    19a0:	4618      	mov	r0, r3
    19a2:	3710      	adds	r7, #16
    19a4:	46bd      	mov	sp, r7
    19a6:	ecbd 8b02 	vpop	{d8}
    19aa:	bd80      	pop	{r7, pc}

000019ac <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    19b4:	6878      	ldr	r0, [r7, #4]
    19b6:	f001 f88e 	bl	2ad6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    19ba:	4603      	mov	r3, r0
		}
    19bc:	4618      	mov	r0, r3
    19be:	3708      	adds	r7, #8
    19c0:	46bd      	mov	sp, r7
    19c2:	bd80      	pop	{r7, pc}

000019c4 <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    19c4:	b580      	push	{r7, lr}
    19c6:	b086      	sub	sp, #24
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	689a      	ldr	r2, [r3, #8]
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    19d4:	681b      	ldr	r3, [r3, #0]
    19d6:	3314      	adds	r3, #20
    19d8:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    19da:	493c      	ldr	r1, [pc, #240]	; (1acc <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    19dc:	4610      	mov	r0, r2
    19de:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	685b      	ldr	r3, [r3, #4]
    19e4:	6818      	ldr	r0, [r3, #0]
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	685b      	ldr	r3, [r3, #4]
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	687a      	ldr	r2, [r7, #4]
    19f2:	6852      	ldr	r2, [r2, #4]
    19f4:	7912      	ldrb	r2, [r2, #4]
    19f6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    19fa:	b2d2      	uxtb	r2, r2
    19fc:	4611      	mov	r1, r2
    19fe:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	685b      	ldr	r3, [r3, #4]
    1a04:	681a      	ldr	r2, [r3, #0]
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	685b      	ldr	r3, [r3, #4]
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	681b      	ldr	r3, [r3, #0]
    1a0e:	3304      	adds	r3, #4
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	2100      	movs	r1, #0
    1a14:	4610      	mov	r0, r2
    1a16:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	685b      	ldr	r3, [r3, #4]
    1a1c:	681a      	ldr	r2, [r3, #0]
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	685b      	ldr	r3, [r3, #4]
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	330c      	adds	r3, #12
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	2101      	movs	r1, #1
    1a2c:	4610      	mov	r0, r2
    1a2e:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1a34:	4925      	ldr	r1, [pc, #148]	; (1acc <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1a36:	4618      	mov	r0, r3
    1a38:	f7fe ff32 	bl	8a0 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1a3c:	4603      	mov	r3, r0
    1a3e:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1a40:	f107 0308 	add.w	r3, r7, #8
    1a44:	4922      	ldr	r1, [pc, #136]	; (1ad0 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    1a46:	4618      	mov	r0, r3
    1a48:	f7ff ff84 	bl	1954 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1a4c:	4603      	mov	r3, r0
    1a4e:	60fb      	str	r3, [r7, #12]
    1a50:	f107 030c 	add.w	r3, r7, #12
    1a54:	4618      	mov	r0, r3
    1a56:	f7ff ffa9 	bl	19ac <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1a5a:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1a5c:	4b1d      	ldr	r3, [pc, #116]	; (1ad4 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    1a64:	4b1c      	ldr	r3, [pc, #112]	; (1ad8 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    1a66:	781a      	ldrb	r2, [r3, #0]
    1a68:	785b      	ldrb	r3, [r3, #1]
    1a6a:	021b      	lsls	r3, r3, #8
    1a6c:	431a      	orrs	r2, r3
    1a6e:	2300      	movs	r3, #0
    1a70:	f362 030f 	bfi	r3, r2, #0, #16
    1a74:	4619      	mov	r1, r3
    1a76:	6978      	ldr	r0, [r7, #20]
    1a78:	f001 f885 	bl	2b86 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1a7c:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    1a7e:	4b17      	ldr	r3, [pc, #92]	; (1adc <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    1a80:	781a      	ldrb	r2, [r3, #0]
    1a82:	785b      	ldrb	r3, [r3, #1]
    1a84:	021b      	lsls	r3, r3, #8
    1a86:	431a      	orrs	r2, r3
    1a88:	2300      	movs	r3, #0
    1a8a:	f362 030f 	bfi	r3, r2, #0, #16
    1a8e:	461a      	mov	r2, r3
    1a90:	6939      	ldr	r1, [r7, #16]
    1a92:	6978      	ldr	r0, [r7, #20]
    1a94:	f001 f80d 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1a98:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    1a9a:	f7ff ff19 	bl	18d0 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1a9e:	4603      	mov	r3, r0
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d00a      	beq.n	1aba <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	685b      	ldr	r3, [r3, #4]
    1aa8:	791b      	ldrb	r3, [r3, #4]
    1aaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	4619      	mov	r1, r3
    1ab2:	6978      	ldr	r0, [r7, #20]
    1ab4:	f000 ffd8 	bl	2a68 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1ab8:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    1aba:	4b06      	ldr	r3, [pc, #24]	; (1ad4 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1abc:	681b      	ldr	r3, [r3, #0]
    1abe:	697a      	ldr	r2, [r7, #20]
    1ac0:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    1ac2:	2300      	movs	r3, #0
  }
    1ac4:	4618      	mov	r0, r3
    1ac6:	3718      	adds	r7, #24
    1ac8:	46bd      	mov	sp, r7
    1aca:	bd80      	pop	{r7, pc}
    1acc:	00009078 	.word	0x00009078
    1ad0:	00009174 	.word	0x00009174
    1ad4:	10000128 	.word	0x10000128
    1ad8:	00009134 	.word	0x00009134
    1adc:	0000912c 	.word	0x0000912c

00001ae0 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b084      	sub	sp, #16
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1ae8:	6878      	ldr	r0, [r7, #4]
    1aea:	f000 f851 	bl	1b90 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1aee:	4b0e      	ldr	r3, [pc, #56]	; (1b28 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	687a      	ldr	r2, [r7, #4]
    1af4:	6852      	ldr	r2, [r2, #4]
    1af6:	7912      	ldrb	r2, [r2, #4]
    1af8:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1afc:	b2d2      	uxtb	r2, r2
    1afe:	3204      	adds	r2, #4
    1b00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1b04:	4b09      	ldr	r3, [pc, #36]	; (1b2c <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1b06:	781a      	ldrb	r2, [r3, #0]
    1b08:	785b      	ldrb	r3, [r3, #1]
    1b0a:	021b      	lsls	r3, r3, #8
    1b0c:	431a      	orrs	r2, r3
    1b0e:	2300      	movs	r3, #0
    1b10:	f362 030f 	bfi	r3, r2, #0, #16
    1b14:	4619      	mov	r1, r3
    1b16:	f001 f845 	bl	2ba4 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1b1a:	60f8      	str	r0, [r7, #12]
    return result;
    1b1c:	68fb      	ldr	r3, [r7, #12]
  }
    1b1e:	4618      	mov	r0, r3
    1b20:	3710      	adds	r7, #16
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	bf00      	nop
    1b28:	10000128 	.word	0x10000128
    1b2c:	0000913c 	.word	0x0000913c

00001b30 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1b30:	b480      	push	{r7}
    1b32:	b083      	sub	sp, #12
    1b34:	af00      	add	r7, sp, #0
    1b36:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1b38:	230c      	movs	r3, #12
  }
    1b3a:	4618      	mov	r0, r3
    1b3c:	370c      	adds	r7, #12
    1b3e:	46bd      	mov	sp, r7
    1b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b44:	4770      	bx	lr
    1b46:	Address 0x0000000000001b46 is out of bounds.


00001b48 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1b48:	b580      	push	{r7, lr}
    1b4a:	b082      	sub	sp, #8
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1b50:	4b0d      	ldr	r3, [pc, #52]	; (1b88 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	687a      	ldr	r2, [r7, #4]
    1b56:	6852      	ldr	r2, [r2, #4]
    1b58:	7912      	ldrb	r2, [r2, #4]
    1b5a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1b5e:	b2d2      	uxtb	r2, r2
    1b60:	3204      	adds	r2, #4
    1b62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1b66:	4b09      	ldr	r3, [pc, #36]	; (1b8c <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1b68:	781a      	ldrb	r2, [r3, #0]
    1b6a:	785b      	ldrb	r3, [r3, #1]
    1b6c:	021b      	lsls	r3, r3, #8
    1b6e:	431a      	orrs	r2, r3
    1b70:	2300      	movs	r3, #0
    1b72:	f362 030f 	bfi	r3, r2, #0, #16
    1b76:	4619      	mov	r1, r3
    1b78:	f000 fff6 	bl	2b68 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1b7c:	4603      	mov	r3, r0
  }
    1b7e:	4618      	mov	r0, r3
    1b80:	3708      	adds	r7, #8
    1b82:	46bd      	mov	sp, r7
    1b84:	bd80      	pop	{r7, pc}
    1b86:	bf00      	nop
    1b88:	10000128 	.word	0x10000128
    1b8c:	00009140 	.word	0x00009140

00001b90 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1b90:	b590      	push	{r4, r7, lr}
    1b92:	b085      	sub	sp, #20
    1b94:	af00      	add	r7, sp, #0
    1b96:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1b98:	f7ff fe9a 	bl	18d0 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1b9c:	4603      	mov	r3, r0
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d013      	beq.n	1bca <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1ba2:	4b29      	ldr	r3, [pc, #164]	; (1c48 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	6818      	ldr	r0, [r3, #0]
    1ba8:	4b27      	ldr	r3, [pc, #156]	; (1c48 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1baa:	681c      	ldr	r4, [r3, #0]
    1bac:	4b27      	ldr	r3, [pc, #156]	; (1c4c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1bae:	781a      	ldrb	r2, [r3, #0]
    1bb0:	785b      	ldrb	r3, [r3, #1]
    1bb2:	021b      	lsls	r3, r3, #8
    1bb4:	431a      	orrs	r2, r3
    1bb6:	2300      	movs	r3, #0
    1bb8:	f362 030f 	bfi	r3, r2, #0, #16
    1bbc:	461a      	mov	r2, r3
    1bbe:	2100      	movs	r1, #0
    1bc0:	f001 f801 	bl	2bc6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1bc4:	4603      	mov	r3, r0
    1bc6:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1bc8:	e03a      	b.n	1c40 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	685b      	ldr	r3, [r3, #4]
    1bce:	791b      	ldrb	r3, [r3, #4]
    1bd0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1bd4:	b2db      	uxtb	r3, r3
    1bd6:	461a      	mov	r2, r3
    1bd8:	2301      	movs	r3, #1
    1bda:	4093      	lsls	r3, r2
    1bdc:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1bde:	4b1a      	ldr	r3, [pc, #104]	; (1c48 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1be0:	681b      	ldr	r3, [r3, #0]
    1be2:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1be4:	4b18      	ldr	r3, [pc, #96]	; (1c48 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1be6:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1be8:	4b19      	ldr	r3, [pc, #100]	; (1c50 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1bea:	781a      	ldrb	r2, [r3, #0]
    1bec:	785b      	ldrb	r3, [r3, #1]
    1bee:	021b      	lsls	r3, r3, #8
    1bf0:	431a      	orrs	r2, r3
    1bf2:	2300      	movs	r3, #0
    1bf4:	f362 030f 	bfi	r3, r2, #0, #16
    1bf8:	461a      	mov	r2, r3
    1bfa:	68f9      	ldr	r1, [r7, #12]
    1bfc:	f000 ff59 	bl	2ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1c00:	4603      	mov	r3, r0
      adc_base->CR =
    1c02:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1c04:	4b10      	ldr	r3, [pc, #64]	; (1c48 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	6818      	ldr	r0, [r3, #0]
    1c0a:	4b0f      	ldr	r3, [pc, #60]	; (1c48 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c0c:	681c      	ldr	r4, [r3, #0]
    1c0e:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1c10:	781a      	ldrb	r2, [r3, #0]
    1c12:	785b      	ldrb	r3, [r3, #1]
    1c14:	021b      	lsls	r3, r3, #8
    1c16:	431a      	orrs	r2, r3
    1c18:	2300      	movs	r3, #0
    1c1a:	f362 030f 	bfi	r3, r2, #0, #16
    1c1e:	461a      	mov	r2, r3
    1c20:	2101      	movs	r1, #1
    1c22:	f000 ffd0 	bl	2bc6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1c26:	4603      	mov	r3, r0
    1c28:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1c2a:	6878      	ldr	r0, [r7, #4]
    1c2c:	f7ff ff8c 	bl	1b48 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1c30:	4603      	mov	r3, r0
    1c32:	f083 0301 	eor.w	r3, r3, #1
    1c36:	b2db      	uxtb	r3, r3
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d001      	beq.n	1c40 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1c3c:	bf00      	nop
      while (!HasConversionFinished())
    1c3e:	e7f4      	b.n	1c2a <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1c40:	bf00      	nop
    1c42:	3714      	adds	r7, #20
    1c44:	46bd      	mov	sp, r7
    1c46:	bd90      	pop	{r4, r7, pc}
    1c48:	10000128 	.word	0x10000128
    1c4c:	00009138 	.word	0x00009138
    1c50:	00009128 	.word	0x00009128

00001c54 <sjsu::Gpio::SetHigh() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Set pin to HIGH voltage
  void SetHigh() const
    1c54:	b580      	push	{r7, lr}
    1c56:	b082      	sub	sp, #8
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
  {
    Set(State::kHigh);
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	3304      	adds	r3, #4
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	2101      	movs	r1, #1
    1c66:	6878      	ldr	r0, [r7, #4]
    1c68:	4798      	blx	r3
  }
    1c6a:	bf00      	nop
    1c6c:	3708      	adds	r7, #8
    1c6e:	46bd      	mov	sp, r7
    1c70:	bd80      	pop	{r7, pc}

00001c72 <sjsu::Gpio::SetLow() const>:
  /// Set pin to LOW voltage
  void SetLow() const
    1c72:	b580      	push	{r7, lr}
    1c74:	b082      	sub	sp, #8
    1c76:	af00      	add	r7, sp, #0
    1c78:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	681b      	ldr	r3, [r3, #0]
    1c7e:	3304      	adds	r3, #4
    1c80:	681b      	ldr	r3, [r3, #0]
    1c82:	2100      	movs	r1, #0
    1c84:	6878      	ldr	r0, [r7, #4]
    1c86:	4798      	blx	r3
  }
    1c88:	bf00      	nop
    1c8a:	3708      	adds	r7, #8
    1c8c:	46bd      	mov	sp, r7
    1c8e:	bd80      	pop	{r7, pc}

00001c90 <sjsu::Gpio::SetAsOutput() const>:
  void SetAsInput() const
  {
    SetDirection(Direction::kInput);
  }
  /// Set pin direction as output
  void SetAsOutput() const
    1c90:	b580      	push	{r7, lr}
    1c92:	b082      	sub	sp, #8
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	681b      	ldr	r3, [r3, #0]
    1c9c:	681b      	ldr	r3, [r3, #0]
    1c9e:	2101      	movs	r1, #1
    1ca0:	6878      	ldr	r0, [r7, #4]
    1ca2:	4798      	blx	r3
  }
    1ca4:	bf00      	nop
    1ca6:	3708      	adds	r7, #8
    1ca8:	46bd      	mov	sp, r7
    1caa:	bd80      	pop	{r7, pc}

00001cac <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1cac:	b480      	push	{r7}
    1cae:	af00      	add	r7, sp, #0
    1cb0:	bf00      	nop
    1cb2:	46bd      	mov	sp, r7
    1cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb8:	4770      	bx	lr
    1cba:	Address 0x0000000000001cba is out of bounds.


00001cbc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1cbc:	b580      	push	{r7, lr}
    1cbe:	b082      	sub	sp, #8
    1cc0:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1cc2:	4b09      	ldr	r3, [pc, #36]	; (1ce8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	9300      	str	r3, [sp, #0]
    1cc8:	231d      	movs	r3, #29
    1cca:	4a08      	ldr	r2, [pc, #32]	; (1cec <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1ccc:	4908      	ldr	r1, [pc, #32]	; (1cf0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1cce:	4809      	ldr	r0, [pc, #36]	; (1cf4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1cd0:	f003 fbe8 	bl	54a4 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1cd6:	681b      	ldr	r3, [r3, #0]
    1cd8:	3b10      	subs	r3, #16
    1cda:	4618      	mov	r0, r3
    1cdc:	f7fe fcdc 	bl	698 <NVIC_DisableIRQ>
  }
    1ce0:	bf00      	nop
    1ce2:	46bd      	mov	sp, r7
    1ce4:	bd80      	pop	{r7, pc}
    1ce6:	bf00      	nop
    1ce8:	10000048 	.word	0x10000048
    1cec:	00009498 	.word	0x00009498
    1cf0:	00009178 	.word	0x00009178
    1cf4:	00008ce0 	.word	0x00008ce0

00001cf8 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1cf8:	b480      	push	{r7}
    1cfa:	b083      	sub	sp, #12
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1d00:	2340      	movs	r3, #64	; 0x40
    1d02:	4618      	mov	r0, r3
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	Address 0x0000000000001d0e is out of bounds.


00001d10 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1d10:	b580      	push	{r7, lr}
    1d12:	b084      	sub	sp, #16
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	4618      	mov	r0, r3
    1d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d20:	461a      	mov	r2, r3
    1d22:	2100      	movs	r1, #0
    1d24:	f006 fcd3 	bl	86ce <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d28:	2300      	movs	r3, #0
    1d2a:	60fb      	str	r3, [r7, #12]
    1d2c:	68fb      	ldr	r3, [r7, #12]
    1d2e:	2b0f      	cmp	r3, #15
    1d30:	d808      	bhi.n	1d44 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	68fa      	ldr	r2, [r7, #12]
    1d36:	4911      	ldr	r1, [pc, #68]	; (1d7c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	3301      	adds	r3, #1
    1d40:	60fb      	str	r3, [r7, #12]
    1d42:	e7f3      	b.n	1d2c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1d44:	2310      	movs	r3, #16
    1d46:	60bb      	str	r3, [r7, #8]
    1d48:	6878      	ldr	r0, [r7, #4]
    1d4a:	f7ff ffd5 	bl	1cf8 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1d4e:	4602      	mov	r2, r0
    1d50:	68bb      	ldr	r3, [r7, #8]
    1d52:	4293      	cmp	r3, r2
    1d54:	bf34      	ite	cc
    1d56:	2301      	movcc	r3, #1
    1d58:	2300      	movcs	r3, #0
    1d5a:	b2db      	uxtb	r3, r3
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d008      	beq.n	1d72 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1d60:	687b      	ldr	r3, [r7, #4]
    1d62:	68ba      	ldr	r2, [r7, #8]
    1d64:	4906      	ldr	r1, [pc, #24]	; (1d80 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1d6a:	68bb      	ldr	r3, [r7, #8]
    1d6c:	3301      	adds	r3, #1
    1d6e:	60bb      	str	r3, [r7, #8]
    1d70:	e7ea      	b.n	1d48 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1d72:	bf00      	nop
    }
    1d74:	6878      	ldr	r0, [r7, #4]
    1d76:	3710      	adds	r7, #16
    1d78:	46bd      	mov	sp, r7
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	00001cad 	.word	0x00001cad
    1d80:	00001cbd 	.word	0x00001cbd

00001d84 <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
    1d84:	b480      	push	{r7}
    1d86:	b083      	sub	sp, #12
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	3310      	adds	r3, #16
  }
    1d90:	4618      	mov	r0, r3
    1d92:	370c      	adds	r7, #12
    1d94:	46bd      	mov	sp, r7
    1d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d9a:	4770      	bx	lr

00001d9c <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    1d9c:	b580      	push	{r7, lr}
    1d9e:	b082      	sub	sp, #8
    1da0:	af00      	add	r7, sp, #0
    1da2:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    1da4:	6878      	ldr	r0, [r7, #4]
    1da6:	f7ff ffed 	bl	1d84 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    1daa:	4603      	mov	r3, r0
    1dac:	009b      	lsls	r3, r3, #2
    1dae:	4a03      	ldr	r2, [pc, #12]	; (1dbc <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    1db0:	4413      	add	r3, r2
  }
    1db2:	4618      	mov	r0, r3
    1db4:	3708      	adds	r7, #8
    1db6:	46bd      	mov	sp, r7
    1db8:	bd80      	pop	{r7, pc}
    1dba:	bf00      	nop
    1dbc:	1000012c 	.word	0x1000012c

00001dc0 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
    1dc0:	b084      	sub	sp, #16
    1dc2:	b590      	push	{r4, r7, lr}
    1dc4:	b085      	sub	sp, #20
    1dc6:	af00      	add	r7, sp, #0
    1dc8:	6078      	str	r0, [r7, #4]
    1dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
    1dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    1dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1dd4:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    1dd6:	6abc      	ldr	r4, [r7, #40]	; 0x28
    1dd8:	68f8      	ldr	r0, [r7, #12]
    1dda:	f7ff ffdf 	bl	1d9c <sjsu::cortex::InterruptController::GetVector(int)>
    1dde:	4603      	mov	r3, r0
    1de0:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    1de2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1de6:	2b00      	cmp	r3, #0
    1de8:	d005      	beq.n	1df6 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	2b00      	cmp	r3, #0
    1dee:	db02      	blt.n	1df6 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    1df0:	68f8      	ldr	r0, [r7, #12]
    1df2:	f7fe fc39 	bl	668 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    1df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1df8:	2b00      	cmp	r3, #0
    1dfa:	db04      	blt.n	1e06 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    1dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1dfe:	4619      	mov	r1, r3
    1e00:	68f8      	ldr	r0, [r7, #12]
    1e02:	f7fe fc61 	bl	6c8 <NVIC_SetPriority>
    }
  }
    1e06:	bf00      	nop
    1e08:	3714      	adds	r7, #20
    1e0a:	46bd      	mov	sp, r7
    1e0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    1e10:	b004      	add	sp, #16
    1e12:	4770      	bx	lr

00001e14 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    1e14:	b580      	push	{r7, lr}
    1e16:	b082      	sub	sp, #8
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    1e1e:	6838      	ldr	r0, [r7, #0]
    1e20:	f7fe fc3a 	bl	698 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    1e24:	6838      	ldr	r0, [r7, #0]
    1e26:	f7ff ffb9 	bl	1d9c <sjsu::cortex::InterruptController::GetVector(int)>
    1e2a:	4602      	mov	r2, r0
    1e2c:	4b02      	ldr	r3, [pc, #8]	; (1e38 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    1e2e:	6013      	str	r3, [r2, #0]
  }
    1e30:	bf00      	nop
    1e32:	3708      	adds	r7, #8
    1e34:	46bd      	mov	sp, r7
    1e36:	bd80      	pop	{r7, pc}
    1e38:	00001cbd 	.word	0x00001cbd

00001e3c <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
        pin_(port_number, pin_number),
        interrupt_controller_(interrupt_controller)
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
  }
  void SetDirection(Direction direction) const override
    1e3c:	b590      	push	{r4, r7, lr}
    1e3e:	b085      	sub	sp, #20
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
    1e44:	460b      	mov	r3, r1
    1e46:	70fb      	strb	r3, [r7, #3]
  {
    pin_.SetPinFunction(kGpioFunction);
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	3308      	adds	r3, #8
    1e4c:	2100      	movs	r1, #0
    1e4e:	4618      	mov	r0, r3
    1e50:	f7fe fc7c 	bl	74c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>
    volatile uint32_t * dir_register = &gpio_port[pin_.GetPort()]->DIR;
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	3308      	adds	r3, #8
    1e58:	4618      	mov	r0, r3
    1e5a:	f7fe fc5f 	bl	71c <sjsu::Pin::GetPort() const>
    1e5e:	4603      	mov	r3, r0
    1e60:	461a      	mov	r2, r3
    1e62:	4b15      	ldr	r3, [pc, #84]	; (1eb8 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x7c>)
    1e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1e68:	60fb      	str	r3, [r7, #12]

    if (direction == Direction::kInput)
    1e6a:	78fb      	ldrb	r3, [r7, #3]
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d10f      	bne.n	1e90 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x54>
    {
      *dir_register = bit::Clear(*dir_register, pin_.GetPin());
    1e70:	68fb      	ldr	r3, [r7, #12]
    1e72:	681c      	ldr	r4, [r3, #0]
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	3308      	adds	r3, #8
    1e78:	4618      	mov	r0, r3
    1e7a:	f7fe fc5b 	bl	734 <sjsu::Pin::GetPin() const>
    1e7e:	4603      	mov	r3, r0
    1e80:	4619      	mov	r1, r3
    1e82:	4620      	mov	r0, r4
    1e84:	f000 fe02 	bl	2a8c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    1e88:	4602      	mov	r2, r0
    1e8a:	68fb      	ldr	r3, [r7, #12]
    1e8c:	601a      	str	r2, [r3, #0]
    }
    else
    {
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
    }
  }
    1e8e:	e00e      	b.n	1eae <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x72>
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	681c      	ldr	r4, [r3, #0]
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	3308      	adds	r3, #8
    1e98:	4618      	mov	r0, r3
    1e9a:	f7fe fc4b 	bl	734 <sjsu::Pin::GetPin() const>
    1e9e:	4603      	mov	r3, r0
    1ea0:	4619      	mov	r1, r3
    1ea2:	4620      	mov	r0, r4
    1ea4:	f000 fde0 	bl	2a68 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1ea8:	4602      	mov	r2, r0
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	601a      	str	r2, [r3, #0]
  }
    1eae:	bf00      	nop
    1eb0:	3714      	adds	r7, #20
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd90      	pop	{r4, r7, pc}
    1eb6:	bf00      	nop
    1eb8:	1000022c 	.word	0x1000022c

00001ebc <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  void Set(State output = kHigh) const override
    1ebc:	b590      	push	{r4, r7, lr}
    1ebe:	b083      	sub	sp, #12
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	6078      	str	r0, [r7, #4]
    1ec4:	460b      	mov	r3, r1
    1ec6:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
    1ec8:	78fb      	ldrb	r3, [r7, #3]
    1eca:	2b01      	cmp	r3, #1
    1ecc:	d115      	bne.n	1efa <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x3e>
    {
      gpio_port[pin_.GetPort()]->SET = (1 << pin_.GetPin());
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	3308      	adds	r3, #8
    1ed2:	4618      	mov	r0, r3
    1ed4:	f7fe fc2e 	bl	734 <sjsu::Pin::GetPin() const>
    1ed8:	4603      	mov	r3, r0
    1eda:	461a      	mov	r2, r3
    1edc:	2301      	movs	r3, #1
    1ede:	4093      	lsls	r3, r2
    1ee0:	461c      	mov	r4, r3
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	3308      	adds	r3, #8
    1ee6:	4618      	mov	r0, r3
    1ee8:	f7fe fc18 	bl	71c <sjsu::Pin::GetPort() const>
    1eec:	4603      	mov	r3, r0
    1eee:	461a      	mov	r2, r3
    1ef0:	4b0e      	ldr	r3, [pc, #56]	; (1f2c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
    1ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1ef6:	619c      	str	r4, [r3, #24]
    }
    else
    {
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
    }
  }
    1ef8:	e014      	b.n	1f24 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x68>
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	3308      	adds	r3, #8
    1efe:	4618      	mov	r0, r3
    1f00:	f7fe fc18 	bl	734 <sjsu::Pin::GetPin() const>
    1f04:	4603      	mov	r3, r0
    1f06:	461a      	mov	r2, r3
    1f08:	2301      	movs	r3, #1
    1f0a:	4093      	lsls	r3, r2
    1f0c:	461c      	mov	r4, r3
    1f0e:	687b      	ldr	r3, [r7, #4]
    1f10:	3308      	adds	r3, #8
    1f12:	4618      	mov	r0, r3
    1f14:	f7fe fc02 	bl	71c <sjsu::Pin::GetPort() const>
    1f18:	4603      	mov	r3, r0
    1f1a:	461a      	mov	r2, r3
    1f1c:	4b03      	ldr	r3, [pc, #12]	; (1f2c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
    1f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1f22:	61dc      	str	r4, [r3, #28]
  }
    1f24:	bf00      	nop
    1f26:	370c      	adds	r7, #12
    1f28:	46bd      	mov	sp, r7
    1f2a:	bd90      	pop	{r4, r7, pc}
    1f2c:	1000022c 	.word	0x1000022c

00001f30 <sjsu::lpc40xx::Gpio::Toggle() const>:
  void Toggle() const override
    1f30:	b590      	push	{r4, r7, lr}
    1f32:	b083      	sub	sp, #12
    1f34:	af00      	add	r7, sp, #0
    1f36:	6078      	str	r0, [r7, #4]
  {
    gpio_port[pin_.GetPort()]->PIN ^= (1 << pin_.GetPin());
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	3308      	adds	r3, #8
    1f3c:	4618      	mov	r0, r3
    1f3e:	f7fe fbf9 	bl	734 <sjsu::Pin::GetPin() const>
    1f42:	4603      	mov	r3, r0
    1f44:	461a      	mov	r2, r3
    1f46:	2301      	movs	r3, #1
    1f48:	fa03 f402 	lsl.w	r4, r3, r2
    1f4c:	687b      	ldr	r3, [r7, #4]
    1f4e:	3308      	adds	r3, #8
    1f50:	4618      	mov	r0, r3
    1f52:	f7fe fbe3 	bl	71c <sjsu::Pin::GetPort() const>
    1f56:	4603      	mov	r3, r0
    1f58:	461a      	mov	r2, r3
    1f5a:	4b05      	ldr	r3, [pc, #20]	; (1f70 <sjsu::lpc40xx::Gpio::Toggle() const+0x40>)
    1f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1f60:	695a      	ldr	r2, [r3, #20]
    1f62:	4621      	mov	r1, r4
    1f64:	404a      	eors	r2, r1
    1f66:	615a      	str	r2, [r3, #20]
  }
    1f68:	bf00      	nop
    1f6a:	370c      	adds	r7, #12
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bd90      	pop	{r4, r7, pc}
    1f70:	1000022c 	.word	0x1000022c

00001f74 <sjsu::lpc40xx::Gpio::Read() const>:
  bool Read() const override
    1f74:	b590      	push	{r4, r7, lr}
    1f76:	b083      	sub	sp, #12
    1f78:	af00      	add	r7, sp, #0
    1f7a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port[pin_.GetPort()]->PIN, pin_.GetPin());
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	3308      	adds	r3, #8
    1f80:	4618      	mov	r0, r3
    1f82:	f7fe fbcb 	bl	71c <sjsu::Pin::GetPort() const>
    1f86:	4603      	mov	r3, r0
    1f88:	461a      	mov	r2, r3
    1f8a:	4b09      	ldr	r3, [pc, #36]	; (1fb0 <sjsu::lpc40xx::Gpio::Read() const+0x3c>)
    1f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1f90:	695c      	ldr	r4, [r3, #20]
    1f92:	687b      	ldr	r3, [r7, #4]
    1f94:	3308      	adds	r3, #8
    1f96:	4618      	mov	r0, r3
    1f98:	f7fe fbcc 	bl	734 <sjsu::Pin::GetPin() const>
    1f9c:	4603      	mov	r3, r0
    1f9e:	4619      	mov	r1, r3
    1fa0:	4620      	mov	r0, r4
    1fa2:	f000 fdb3 	bl	2b0c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    1fa6:	4603      	mov	r3, r0
  }
    1fa8:	4618      	mov	r0, r3
    1faa:	370c      	adds	r7, #12
    1fac:	46bd      	mov	sp, r7
    1fae:	bd90      	pop	{r4, r7, pc}
    1fb0:	1000022c 	.word	0x1000022c

00001fb4 <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
    1fb4:	b480      	push	{r7}
    1fb6:	b083      	sub	sp, #12
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	3308      	adds	r3, #8
  }
    1fc0:	4618      	mov	r0, r3
    1fc2:	370c      	adds	r7, #12
    1fc4:	46bd      	mov	sp, r7
    1fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fca:	4770      	bx	lr

00001fcc <sjsu::lpc40xx::Gpio::ValidPortCheck() const>:

  /// Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck() const
    1fcc:	b580      	push	{r7, lr}
    1fce:	b086      	sub	sp, #24
    1fd0:	af02      	add	r7, sp, #8
    1fd2:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = (interupt_port_ <= 1);
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	791b      	ldrb	r3, [r3, #4]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	bf94      	ite	ls
    1fdc:	2301      	movls	r3, #1
    1fde:	2300      	movhi	r3, #0
    1fe0:	b2db      	uxtb	r3, r3
    1fe2:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(is_valid,
    1fe4:	7bfb      	ldrb	r3, [r7, #15]
    1fe6:	f083 0301 	eor.w	r3, r3, #1
    1fea:	b2db      	uxtb	r3, r3
    1fec:	2b00      	cmp	r3, #0
    1fee:	d00c      	beq.n	200a <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x3e>
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	3308      	adds	r3, #8
    1ff4:	4618      	mov	r0, r3
    1ff6:	f7fe fb91 	bl	71c <sjsu::Pin::GetPort() const>
    1ffa:	4603      	mov	r3, r0
    1ffc:	9300      	str	r3, [sp, #0]
    1ffe:	237f      	movs	r3, #127	; 0x7f
    2000:	4a04      	ldr	r2, [pc, #16]	; (2014 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x48>)
    2002:	4905      	ldr	r1, [pc, #20]	; (2018 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x4c>)
    2004:	4805      	ldr	r0, [pc, #20]	; (201c <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x50>)
    2006:	f003 fa4d 	bl	54a4 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_.GetPort());
    return is_valid;
    200a:	7bfb      	ldrb	r3, [r7, #15]
  }
    200c:	4618      	mov	r0, r3
    200e:	3710      	adds	r7, #16
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}
    2014:	000094e8 	.word	0x000094e8
    2018:	0000918c 	.word	0x0000918c
    201c:	00008d60 	.word	0x00008d60

00002020 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>:

  /// Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) const
    2020:	b5b0      	push	{r4, r5, r7, lr}
    2022:	b082      	sub	sp, #8
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
    2028:	6039      	str	r1, [r7, #0]
  {
    ValidPortCheck();
    202a:	6878      	ldr	r0, [r7, #4]
    202c:	f7ff ffce 	bl	1fcc <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    interrupthandlers[interupt_port_][pin_.GetPin()] = function;
    2030:	683c      	ldr	r4, [r7, #0]
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	461d      	mov	r5, r3
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	3308      	adds	r3, #8
    203c:	4618      	mov	r0, r3
    203e:	f7fe fb79 	bl	734 <sjsu::Pin::GetPin() const>
    2042:	4603      	mov	r3, r0
    2044:	4619      	mov	r1, r3
    2046:	4a04      	ldr	r2, [pc, #16]	; (2058 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const+0x38>)
    2048:	016b      	lsls	r3, r5, #5
    204a:	440b      	add	r3, r1
    204c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  }
    2050:	bf00      	nop
    2052:	3708      	adds	r7, #8
    2054:	46bd      	mov	sp, r7
    2056:	bdb0      	pop	{r4, r5, r7, pc}
    2058:	10000244 	.word	0x10000244

0000205c <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>:

  /// Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() const
    205c:	b590      	push	{r4, r7, lr}
    205e:	b083      	sub	sp, #12
    2060:	af00      	add	r7, sp, #0
    2062:	6078      	str	r0, [r7, #4]
  {
    interrupthandlers[interupt_port_][pin_.GetPin()] = nullptr;
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	791b      	ldrb	r3, [r3, #4]
    2068:	461c      	mov	r4, r3
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	3308      	adds	r3, #8
    206e:	4618      	mov	r0, r3
    2070:	f7fe fb60 	bl	734 <sjsu::Pin::GetPin() const>
    2074:	4603      	mov	r3, r0
    2076:	4619      	mov	r1, r3
    2078:	4a04      	ldr	r2, [pc, #16]	; (208c <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const+0x30>)
    207a:	0163      	lsls	r3, r4, #5
    207c:	440b      	add	r3, r1
    207e:	2100      	movs	r1, #0
    2080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
    2084:	bf00      	nop
    2086:	370c      	adds	r7, #12
    2088:	46bd      	mov	sp, r7
    208a:	bd90      	pop	{r4, r7, pc}
    208c:	10000244 	.word	0x10000244

00002090 <auto sjsu::Value<sjsu::Gpio::Edge>(sjsu::Gpio::Edge)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
    2090:	b480      	push	{r7}
    2092:	b083      	sub	sp, #12
    2094:	af00      	add	r7, sp, #0
    2096:	4603      	mov	r3, r0
    2098:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
    209a:	79fb      	ldrb	r3, [r7, #7]
}
    209c:	4618      	mov	r0, r3
    209e:	370c      	adds	r7, #12
    20a0:	46bd      	mov	sp, r7
    20a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    20a6:	4770      	bx	lr

000020a8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>:

  /// Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) const
    20a8:	b580      	push	{r7, lr}
    20aa:	b084      	sub	sp, #16
    20ac:	af02      	add	r7, sp, #8
    20ae:	6078      	str	r0, [r7, #4]
    20b0:	460b      	mov	r3, r1
    20b2:	70fb      	strb	r3, [r7, #3]
  {
    ValidPortCheck();
    20b4:	6878      	ldr	r0, [r7, #4]
    20b6:	f7ff ff89 	bl	1fcc <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    switch (edge)
    20ba:	78fb      	ldrb	r3, [r7, #3]
    20bc:	2b01      	cmp	r3, #1
    20be:	d008      	beq.n	20d2 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x2a>
    20c0:	2b01      	cmp	r3, #1
    20c2:	d302      	bcc.n	20ca <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x22>
    20c4:	2b02      	cmp	r3, #2
    20c6:	d008      	beq.n	20da <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x32>
    20c8:	e00e      	b.n	20e8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x40>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
    20ca:	6878      	ldr	r0, [r7, #4]
    20cc:	f000 f84e 	bl	216c <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        break;
    20d0:	e016      	b.n	2100 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
    20d2:	6878      	ldr	r0, [r7, #4]
    20d4:	f000 f878 	bl	21c8 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
    20d8:	e012      	b.n	2100 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
    20da:	6878      	ldr	r0, [r7, #4]
    20dc:	f000 f846 	bl	216c <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        SetEdgeFalling();
    20e0:	6878      	ldr	r0, [r7, #4]
    20e2:	f000 f871 	bl	21c8 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
    20e6:	e00b      	b.n	2100 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      default:
      {
        LOG_WARNING(
    20e8:	78fb      	ldrb	r3, [r7, #3]
    20ea:	4618      	mov	r0, r3
    20ec:	f7ff ffd0 	bl	2090 <auto sjsu::Value<sjsu::Gpio::Edge>(sjsu::Gpio::Edge)>
    20f0:	4603      	mov	r3, r0
    20f2:	9300      	str	r3, [sp, #0]
    20f4:	23ab      	movs	r3, #171	; 0xab
    20f6:	4a04      	ldr	r2, [pc, #16]	; (2108 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x60>)
    20f8:	4904      	ldr	r1, [pc, #16]	; (210c <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x64>)
    20fa:	4805      	ldr	r0, [pc, #20]	; (2110 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x68>)
    20fc:	f003 f9d2 	bl	54a4 <printf>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            Value(edge));
      }
    }
  }
    2100:	bf00      	nop
    2102:	3708      	adds	r7, #8
    2104:	46bd      	mov	sp, r7
    2106:	bd80      	pop	{r7, pc}
    2108:	0000951c 	.word	0x0000951c
    210c:	00009198 	.word	0x00009198
    2110:	00008df0 	.word	0x00008df0

00002114 <sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:
    }
  }

  /// Assign the developer's ISR and sets the selected edge that the gpio
  /// interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) const override
    2114:	b580      	push	{r7, lr}
    2116:	b084      	sub	sp, #16
    2118:	af00      	add	r7, sp, #0
    211a:	60f8      	str	r0, [r7, #12]
    211c:	60b9      	str	r1, [r7, #8]
    211e:	4613      	mov	r3, r2
    2120:	71fb      	strb	r3, [r7, #7]
  {
    ValidPortCheck();
    2122:	68f8      	ldr	r0, [r7, #12]
    2124:	f7ff ff52 	bl	1fcc <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    SetInterruptRoutine(function);
    2128:	68b9      	ldr	r1, [r7, #8]
    212a:	68f8      	ldr	r0, [r7, #12]
    212c:	f7ff ff78 	bl	2020 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>
    SetInterruptEdge(edge);
    2130:	79fb      	ldrb	r3, [r7, #7]
    2132:	4619      	mov	r1, r3
    2134:	68f8      	ldr	r0, [r7, #12]
    2136:	f7ff ffb7 	bl	20a8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>
  }
    213a:	bf00      	nop
    213c:	3710      	adds	r7, #16
    213e:	46bd      	mov	sp, r7
    2140:	bd80      	pop	{r7, pc}

00002142 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  /// Removes the developer's ISR and clears the selected edge of the gpio
  /// interrupt from being triggered.
  void DetachInterrupt() const override
    2142:	b580      	push	{r7, lr}
    2144:	b082      	sub	sp, #8
    2146:	af00      	add	r7, sp, #0
    2148:	6078      	str	r0, [r7, #4]
  {
    ValidPortCheck();
    214a:	6878      	ldr	r0, [r7, #4]
    214c:	f7ff ff3e 	bl	1fcc <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    ClearInterruptRoutine();
    2150:	6878      	ldr	r0, [r7, #4]
    2152:	f7ff ff83 	bl	205c <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>
    ClearEdgeRising();
    2156:	6878      	ldr	r0, [r7, #4]
    2158:	f000 f864 	bl	2224 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>
    ClearEdgeFalling();
    215c:	6878      	ldr	r0, [r7, #4]
    215e:	f000 f88f 	bl	2280 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>
  }
    2162:	bf00      	nop
    2164:	3708      	adds	r7, #8
    2166:	46bd      	mov	sp, r7
    2168:	bd80      	pop	{r7, pc}
    216a:	Address 0x000000000000216a is out of bounds.


0000216c <sjsu::lpc40xx::Gpio::SetEdgeRising() const>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  /// Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising() const
    216c:	b590      	push	{r4, r7, lr}
    216e:	b083      	sub	sp, #12
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_.GetPin());
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	3308      	adds	r3, #8
    2178:	4618      	mov	r0, r3
    217a:	f7fe fadb 	bl	734 <sjsu::Pin::GetPin() const>
    217e:	4603      	mov	r3, r0
    2180:	461a      	mov	r2, r3
    2182:	2301      	movs	r3, #1
    2184:	fa03 f002 	lsl.w	r0, r3, r2
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	791b      	ldrb	r3, [r3, #4]
    218c:	4619      	mov	r1, r3
    218e:	4a0d      	ldr	r2, [pc, #52]	; (21c4 <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
    2190:	460b      	mov	r3, r1
    2192:	009b      	lsls	r3, r3, #2
    2194:	440b      	add	r3, r1
    2196:	009b      	lsls	r3, r3, #2
    2198:	4413      	add	r3, r2
    219a:	330c      	adds	r3, #12
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	681a      	ldr	r2, [r3, #0]
    21a0:	4604      	mov	r4, r0
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	791b      	ldrb	r3, [r3, #4]
    21a6:	4618      	mov	r0, r3
    21a8:	4906      	ldr	r1, [pc, #24]	; (21c4 <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
    21aa:	4603      	mov	r3, r0
    21ac:	009b      	lsls	r3, r3, #2
    21ae:	4403      	add	r3, r0
    21b0:	009b      	lsls	r3, r3, #2
    21b2:	440b      	add	r3, r1
    21b4:	330c      	adds	r3, #12
    21b6:	681b      	ldr	r3, [r3, #0]
    21b8:	4322      	orrs	r2, r4
    21ba:	601a      	str	r2, [r3, #0]
  }
    21bc:	bf00      	nop
    21be:	370c      	adds	r7, #12
    21c0:	46bd      	mov	sp, r7
    21c2:	bd90      	pop	{r4, r7, pc}
    21c4:	10000344 	.word	0x10000344

000021c8 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>:

  /// Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling() const
    21c8:	b590      	push	{r4, r7, lr}
    21ca:	b083      	sub	sp, #12
    21cc:	af00      	add	r7, sp, #0
    21ce:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_.GetPin());
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	3308      	adds	r3, #8
    21d4:	4618      	mov	r0, r3
    21d6:	f7fe faad 	bl	734 <sjsu::Pin::GetPin() const>
    21da:	4603      	mov	r3, r0
    21dc:	461a      	mov	r2, r3
    21de:	2301      	movs	r3, #1
    21e0:	fa03 f002 	lsl.w	r0, r3, r2
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	791b      	ldrb	r3, [r3, #4]
    21e8:	4619      	mov	r1, r3
    21ea:	4a0d      	ldr	r2, [pc, #52]	; (2220 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
    21ec:	460b      	mov	r3, r1
    21ee:	009b      	lsls	r3, r3, #2
    21f0:	440b      	add	r3, r1
    21f2:	009b      	lsls	r3, r3, #2
    21f4:	4413      	add	r3, r2
    21f6:	3310      	adds	r3, #16
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	681a      	ldr	r2, [r3, #0]
    21fc:	4604      	mov	r4, r0
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	791b      	ldrb	r3, [r3, #4]
    2202:	4618      	mov	r0, r3
    2204:	4906      	ldr	r1, [pc, #24]	; (2220 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
    2206:	4603      	mov	r3, r0
    2208:	009b      	lsls	r3, r3, #2
    220a:	4403      	add	r3, r0
    220c:	009b      	lsls	r3, r3, #2
    220e:	440b      	add	r3, r1
    2210:	3310      	adds	r3, #16
    2212:	681b      	ldr	r3, [r3, #0]
    2214:	4322      	orrs	r2, r4
    2216:	601a      	str	r2, [r3, #0]
  }
    2218:	bf00      	nop
    221a:	370c      	adds	r7, #12
    221c:	46bd      	mov	sp, r7
    221e:	bd90      	pop	{r4, r7, pc}
    2220:	10000344 	.word	0x10000344

00002224 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>:

  /// Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising() const
    2224:	b590      	push	{r4, r7, lr}
    2226:	b083      	sub	sp, #12
    2228:	af00      	add	r7, sp, #0
    222a:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_.GetPin());
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	3308      	adds	r3, #8
    2230:	4618      	mov	r0, r3
    2232:	f7fe fa7f 	bl	734 <sjsu::Pin::GetPin() const>
    2236:	4603      	mov	r3, r0
    2238:	461a      	mov	r2, r3
    223a:	2301      	movs	r3, #1
    223c:	4093      	lsls	r3, r2
    223e:	43d8      	mvns	r0, r3
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	791b      	ldrb	r3, [r3, #4]
    2244:	4619      	mov	r1, r3
    2246:	4a0d      	ldr	r2, [pc, #52]	; (227c <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
    2248:	460b      	mov	r3, r1
    224a:	009b      	lsls	r3, r3, #2
    224c:	440b      	add	r3, r1
    224e:	009b      	lsls	r3, r3, #2
    2250:	4413      	add	r3, r2
    2252:	330c      	adds	r3, #12
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	681a      	ldr	r2, [r3, #0]
    2258:	4604      	mov	r4, r0
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	791b      	ldrb	r3, [r3, #4]
    225e:	4618      	mov	r0, r3
    2260:	4906      	ldr	r1, [pc, #24]	; (227c <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
    2262:	4603      	mov	r3, r0
    2264:	009b      	lsls	r3, r3, #2
    2266:	4403      	add	r3, r0
    2268:	009b      	lsls	r3, r3, #2
    226a:	440b      	add	r3, r1
    226c:	330c      	adds	r3, #12
    226e:	681b      	ldr	r3, [r3, #0]
    2270:	4022      	ands	r2, r4
    2272:	601a      	str	r2, [r3, #0]
  }
    2274:	bf00      	nop
    2276:	370c      	adds	r7, #12
    2278:	46bd      	mov	sp, r7
    227a:	bd90      	pop	{r4, r7, pc}
    227c:	10000344 	.word	0x10000344

00002280 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>:

  /// Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling() const
    2280:	b590      	push	{r4, r7, lr}
    2282:	b083      	sub	sp, #12
    2284:	af00      	add	r7, sp, #0
    2286:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_.GetPin());
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	3308      	adds	r3, #8
    228c:	4618      	mov	r0, r3
    228e:	f7fe fa51 	bl	734 <sjsu::Pin::GetPin() const>
    2292:	4603      	mov	r3, r0
    2294:	461a      	mov	r2, r3
    2296:	2301      	movs	r3, #1
    2298:	4093      	lsls	r3, r2
    229a:	43d8      	mvns	r0, r3
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	791b      	ldrb	r3, [r3, #4]
    22a0:	4619      	mov	r1, r3
    22a2:	4a0d      	ldr	r2, [pc, #52]	; (22d8 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
    22a4:	460b      	mov	r3, r1
    22a6:	009b      	lsls	r3, r3, #2
    22a8:	440b      	add	r3, r1
    22aa:	009b      	lsls	r3, r3, #2
    22ac:	4413      	add	r3, r2
    22ae:	3310      	adds	r3, #16
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	681a      	ldr	r2, [r3, #0]
    22b4:	4604      	mov	r4, r0
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	791b      	ldrb	r3, [r3, #4]
    22ba:	4618      	mov	r0, r3
    22bc:	4906      	ldr	r1, [pc, #24]	; (22d8 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
    22be:	4603      	mov	r3, r0
    22c0:	009b      	lsls	r3, r3, #2
    22c2:	4403      	add	r3, r0
    22c4:	009b      	lsls	r3, r3, #2
    22c6:	440b      	add	r3, r1
    22c8:	3310      	adds	r3, #16
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	4022      	ands	r2, r4
    22ce:	601a      	str	r2, [r3, #0]
  }
    22d0:	bf00      	nop
    22d2:	370c      	adds	r7, #12
    22d4:	46bd      	mov	sp, r7
    22d6:	bd90      	pop	{r4, r7, pc}
    22d8:	10000344 	.word	0x10000344

000022dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    22dc:	b490      	push	{r4, r7}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
	{ return __r; }
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	e9d3 3400 	ldrd	r3, r4, [r3]
    22ea:	4618      	mov	r0, r3
    22ec:	4621      	mov	r1, r4
    22ee:	3708      	adds	r7, #8
    22f0:	46bd      	mov	sp, r7
    22f2:	bc90      	pop	{r4, r7}
    22f4:	4770      	bx	lr

000022f6 <std::chrono::duration_values<long long>::max()>:
	max()
    22f6:	b598      	push	{r3, r4, r7, lr}
    22f8:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    22fa:	f7fe f835 	bl	368 <std::numeric_limits<long long>::max()>
    22fe:	4603      	mov	r3, r0
    2300:	460c      	mov	r4, r1
    2302:	4618      	mov	r0, r3
    2304:	4621      	mov	r1, r4
    2306:	bd98      	pop	{r3, r4, r7, pc}

00002308 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    2308:	b590      	push	{r4, r7, lr}
    230a:	b085      	sub	sp, #20
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    2310:	f7ff fff1 	bl	22f6 <std::chrono::duration_values<long long>::max()>
    2314:	4603      	mov	r3, r0
    2316:	460c      	mov	r4, r1
    2318:	e9c7 3402 	strd	r3, r4, [r7, #8]
    231c:	f107 0308 	add.w	r3, r7, #8
    2320:	4619      	mov	r1, r3
    2322:	6878      	ldr	r0, [r7, #4]
    2324:	f7fe f97e 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2328:	6878      	ldr	r0, [r7, #4]
    232a:	3714      	adds	r7, #20
    232c:	46bd      	mov	sp, r7
    232e:	bd90      	pop	{r4, r7, pc}

00002330 <vUartTask(void*)>:

#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"

void vUartTask(void *pvParameters)
{
    2330:	b590      	push	{r4, r7, lr}
    2332:	b093      	sub	sp, #76	; 0x4c
    2334:	af04      	add	r7, sp, #16
    2336:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t receive = 0;
    233c:	2300      	movs	r3, #0
    233e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                              DefaultSystemController())
    2342:	f7fe fec1 	bl	10c8 <sjsu::lpc40xx::DefaultSystemController()>
    2346:	4603      	mov	r3, r0
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    2348:	461a      	mov	r2, r3
    234a:	f107 030c 	add.w	r3, r7, #12
    234e:	494b      	ldr	r1, [pc, #300]	; (247c <vUartTask(void*)+0x14c>)
    2350:	4618      	mov	r0, r3
    2352:	f7ff f91f 	bl	1594 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
  uart2.Initialize(38400);
    2356:	f107 030c 	add.w	r3, r7, #12
    235a:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    235e:	4618      	mov	r0, r3
    2360:	f7ff f932 	bl	15c8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    2364:	2319      	movs	r3, #25
    2366:	4a46      	ldr	r2, [pc, #280]	; (2480 <vUartTask(void*)+0x150>)
    2368:	4946      	ldr	r1, [pc, #280]	; (2484 <vUartTask(void*)+0x154>)
    236a:	4847      	ldr	r0, [pc, #284]	; (2488 <vUartTask(void*)+0x158>)
    236c:	f003 f89a 	bl	54a4 <printf>
  while(1)
  {
    // Send a float (Glove data) over UART
    for(int i = 0; i < NUM_FINGERS; i++)
    2370:	2300      	movs	r3, #0
    2372:	637b      	str	r3, [r7, #52]	; 0x34
    2374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2376:	2b02      	cmp	r3, #2
    2378:	dc7b      	bgt.n	2472 <vUartTask(void*)+0x142>
    {
      for(size_t j = 24; j > 0; j -= 8)
    237a:	2318      	movs	r3, #24
    237c:	633b      	str	r3, [r7, #48]	; 0x30
    237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2380:	2b00      	cmp	r3, #0
    2382:	d016      	beq.n	23b2 <vUartTask(void*)+0x82>
      {
        uint8_t sendval = shared_mem->sen[i].ui >> j; 
    2384:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2388:	3302      	adds	r3, #2
    238a:	009b      	lsls	r3, r3, #2
    238c:	4413      	add	r3, r2
    238e:	685a      	ldr	r2, [r3, #4]
    2390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2392:	fa22 f303 	lsr.w	r3, r2, r3
    2396:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uart2.Write(sendval);
    239a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    239e:	f107 030c 	add.w	r3, r7, #12
    23a2:	4611      	mov	r1, r2
    23a4:	4618      	mov	r0, r3
    23a6:	f7fe fe99 	bl	10dc <sjsu::Uart::Write(unsigned char) const>
      for(size_t j = 24; j > 0; j -= 8)
    23aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23ac:	3b08      	subs	r3, #8
    23ae:	633b      	str	r3, [r7, #48]	; 0x30
    23b0:	e7e5      	b.n	237e <vUartTask(void*)+0x4e>
      }
      uart2.Write((uint8_t) shared_mem->sen[i].ui);
    23b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    23b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23b6:	3302      	adds	r3, #2
    23b8:	009b      	lsls	r3, r3, #2
    23ba:	4413      	add	r3, r2
    23bc:	685b      	ldr	r3, [r3, #4]
    23be:	b2da      	uxtb	r2, r3
    23c0:	f107 030c 	add.w	r3, r7, #12
    23c4:	4611      	mov	r1, r2
    23c6:	4618      	mov	r0, r3
    23c8:	f7fe fe88 	bl	10dc <sjsu::Uart::Write(unsigned char) const>
      LOG_INFO("Sent value %f over UART %i", shared_mem->sen[i].f, i);
    23cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    23ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23d0:	3302      	adds	r3, #2
    23d2:	009b      	lsls	r3, r3, #2
    23d4:	4413      	add	r3, r2
    23d6:	3304      	adds	r3, #4
    23d8:	681b      	ldr	r3, [r3, #0]
    23da:	4618      	mov	r0, r3
    23dc:	f004 fe74 	bl	70c8 <__aeabi_f2d>
    23e0:	4603      	mov	r3, r0
    23e2:	460c      	mov	r4, r1
    23e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23e6:	9202      	str	r2, [sp, #8]
    23e8:	e9cd 3400 	strd	r3, r4, [sp]
    23ec:	2325      	movs	r3, #37	; 0x25
    23ee:	4a24      	ldr	r2, [pc, #144]	; (2480 <vUartTask(void*)+0x150>)
    23f0:	4926      	ldr	r1, [pc, #152]	; (248c <vUartTask(void*)+0x15c>)
    23f2:	4827      	ldr	r0, [pc, #156]	; (2490 <vUartTask(void*)+0x160>)
    23f4:	f003 f856 	bl	54a4 <printf>
      for(size_t j = 0; j < 4; j++)
    23f8:	2300      	movs	r3, #0
    23fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    23fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    23fe:	2b03      	cmp	r3, #3
    2400:	d81f      	bhi.n	2442 <vUartTask(void*)+0x112>
      {
        receive = uart2.Read();
    2402:	f107 0318 	add.w	r3, r7, #24
    2406:	4618      	mov	r0, r3
    2408:	f7ff ff7e 	bl	2308 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    240c:	f107 010c 	add.w	r1, r7, #12
    2410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    2414:	4608      	mov	r0, r1
    2416:	f7fe fe73 	bl	1100 <sjsu::Uart::Read(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
    241a:	4603      	mov	r3, r0
    241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        shared_mem->rec[i].ui = (shared_mem->rec[i].ui << 8) | receive;
    2420:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2428:	021a      	lsls	r2, r3, #8
    242a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    242e:	ea42 0103 	orr.w	r1, r2, r3
    2432:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for(size_t j = 0; j < 4; j++)
    243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    243c:	3301      	adds	r3, #1
    243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2440:	e7dc      	b.n	23fc <vUartTask(void*)+0xcc>
      }
      LOG_INFO("Recieved value %f over UART %i", shared_mem->rec[i].f, i);
    2442:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2446:	009b      	lsls	r3, r3, #2
    2448:	4413      	add	r3, r2
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	4618      	mov	r0, r3
    244e:	f004 fe3b 	bl	70c8 <__aeabi_f2d>
    2452:	4603      	mov	r3, r0
    2454:	460c      	mov	r4, r1
    2456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2458:	9202      	str	r2, [sp, #8]
    245a:	e9cd 3400 	strd	r3, r4, [sp]
    245e:	232b      	movs	r3, #43	; 0x2b
    2460:	4a07      	ldr	r2, [pc, #28]	; (2480 <vUartTask(void*)+0x150>)
    2462:	490c      	ldr	r1, [pc, #48]	; (2494 <vUartTask(void*)+0x164>)
    2464:	480c      	ldr	r0, [pc, #48]	; (2498 <vUartTask(void*)+0x168>)
    2466:	f003 f81d 	bl	54a4 <printf>
    for(int i = 0; i < NUM_FINGERS; i++)
    246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    246c:	3301      	adds	r3, #1
    246e:	637b      	str	r3, [r7, #52]	; 0x34
    2470:	e780      	b.n	2374 <vUartTask(void*)+0x44>
    }
    vTaskDelay(100);
    2472:	2064      	movs	r0, #100	; 0x64
    2474:	f001 f99a 	bl	37ac <vTaskDelay>
  }
    2478:	e77a      	b.n	2370 <vUartTask(void*)+0x40>
    247a:	bf00      	nop
    247c:	1000000c 	.word	0x1000000c
    2480:	00009300 	.word	0x00009300
    2484:	000091a4 	.word	0x000091a4
    2488:	00008e90 	.word	0x00008e90
    248c:	000091b4 	.word	0x000091b4
    2490:	00008edc 	.word	0x00008edc
    2494:	000091c4 	.word	0x000091c4
    2498:	00008f30 	.word	0x00008f30

0000249c <my_round(float)>:
}

float my_round(float var)
{
    249c:	b480      	push	{r7}
    249e:	b085      	sub	sp, #20
    24a0:	af00      	add	r7, sp, #0
    24a2:	ed87 0a01 	vstr	s0, [r7, #4]
  float value = (int)(var * 1000);
    24a6:	edd7 7a01 	vldr	s15, [r7, #4]
    24aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24dc <my_round(float)+0x40>
    24ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    24b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    24b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    24ba:	edc7 7a03 	vstr	s15, [r7, #12]
  return (value / 1000);
    24be:	edd7 7a03 	vldr	s15, [r7, #12]
    24c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24dc <my_round(float)+0x40>
    24c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    24ca:	eef0 7a66 	vmov.f32	s15, s13
}
    24ce:	eeb0 0a67 	vmov.f32	s0, s15
    24d2:	3714      	adds	r7, #20
    24d4:	46bd      	mov	sp, r7
    24d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    24da:	4770      	bx	lr
    24dc:	447a0000 	.word	0x447a0000

000024e0 <sjsu::Adc::Adc(sjsu::Adc const&)>:
    24e0:	b480      	push	{r7}
    24e2:	b083      	sub	sp, #12
    24e4:	af00      	add	r7, sp, #0
    24e6:	6078      	str	r0, [r7, #4]
    24e8:	6039      	str	r1, [r7, #0]
    24ea:	4a05      	ldr	r2, [pc, #20]	; (2500 <sjsu::Adc::Adc(sjsu::Adc const&)+0x20>)
    24ec:	687b      	ldr	r3, [r7, #4]
    24ee:	601a      	str	r2, [r3, #0]
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	4618      	mov	r0, r3
    24f4:	370c      	adds	r7, #12
    24f6:	46bd      	mov	sp, r7
    24f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    24fc:	4770      	bx	lr
    24fe:	bf00      	nop
    2500:	00009268 	.word	0x00009268

00002504 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>:
class Adc final : public sjsu::Adc
    2504:	b580      	push	{r7, lr}
    2506:	b082      	sub	sp, #8
    2508:	af00      	add	r7, sp, #0
    250a:	6078      	str	r0, [r7, #4]
    250c:	6039      	str	r1, [r7, #0]
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	683a      	ldr	r2, [r7, #0]
    2512:	4611      	mov	r1, r2
    2514:	4618      	mov	r0, r3
    2516:	f7ff ffe3 	bl	24e0 <sjsu::Adc::Adc(sjsu::Adc const&)>
    251a:	4a08      	ldr	r2, [pc, #32]	; (253c <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)+0x38>)
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	601a      	str	r2, [r3, #0]
    2520:	683b      	ldr	r3, [r7, #0]
    2522:	685a      	ldr	r2, [r3, #4]
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	605a      	str	r2, [r3, #4]
    2528:	683b      	ldr	r3, [r7, #0]
    252a:	689a      	ldr	r2, [r3, #8]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	609a      	str	r2, [r3, #8]
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	4618      	mov	r0, r3
    2534:	3708      	adds	r7, #8
    2536:	46bd      	mov	sp, r7
    2538:	bd80      	pop	{r7, pc}
    253a:	bf00      	nop
    253c:	00009254 	.word	0x00009254

00002540 <vPotentiometerTask(void*)>:

void vPotentiometerTask(void *pvParameters)
{
    2540:	b580      	push	{r7, lr}
    2542:	b098      	sub	sp, #96	; 0x60
    2544:	af00      	add	r7, sp, #0
    2546:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	657b      	str	r3, [r7, #84]	; 0x54
                             DefaultSystemController())
    254c:	f7fe fdbc 	bl	10c8 <sjsu::lpc40xx::DefaultSystemController()>
    2550:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    2552:	461a      	mov	r2, r3
    2554:	f107 0344 	add.w	r3, r7, #68	; 0x44
    2558:	4948      	ldr	r1, [pc, #288]	; (267c <vPotentiometerTask(void*)+0x13c>)
    255a:	4618      	mov	r0, r3
    255c:	f7ff f9e0 	bl	1920 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2560:	f7fe fdb2 	bl	10c8 <sjsu::lpc40xx::DefaultSystemController()>
    2564:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc4(sjsu::lpc40xx::Adc::Channel::kChannel4);
    2566:	461a      	mov	r2, r3
    2568:	f107 0338 	add.w	r3, r7, #56	; 0x38
    256c:	4944      	ldr	r1, [pc, #272]	; (2680 <vPotentiometerTask(void*)+0x140>)
    256e:	4618      	mov	r0, r3
    2570:	f7ff f9d6 	bl	1920 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    2574:	f7fe fda8 	bl	10c8 <sjsu::lpc40xx::DefaultSystemController()>
    2578:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc5(sjsu::lpc40xx::Adc::Channel::kChannel5);
    257a:	461a      	mov	r2, r3
    257c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    2580:	4940      	ldr	r1, [pc, #256]	; (2684 <vPotentiometerTask(void*)+0x144>)
    2582:	4618      	mov	r0, r3
    2584:	f7ff f9cc 	bl	1920 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
  sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc4, adc5};
    2588:	f107 0244 	add.w	r2, r7, #68	; 0x44
    258c:	f107 0308 	add.w	r3, r7, #8
    2590:	4611      	mov	r1, r2
    2592:	4618      	mov	r0, r3
    2594:	f7ff ffb6 	bl	2504 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    2598:	f107 0238 	add.w	r2, r7, #56	; 0x38
    259c:	f107 0308 	add.w	r3, r7, #8
    25a0:	330c      	adds	r3, #12
    25a2:	4611      	mov	r1, r2
    25a4:	4618      	mov	r0, r3
    25a6:	f7ff ffad 	bl	2504 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    25aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    25ae:	f107 0308 	add.w	r3, r7, #8
    25b2:	3318      	adds	r3, #24
    25b4:	4611      	mov	r1, r2
    25b6:	4618      	mov	r0, r3
    25b8:	f7ff ffa4 	bl	2504 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
  for(int i = 0; i < NUM_FINGERS; i++)
    25bc:	2300      	movs	r3, #0
    25be:	65fb      	str	r3, [r7, #92]	; 0x5c
    25c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    25c2:	2b02      	cmp	r3, #2
    25c4:	dc0e      	bgt.n	25e4 <vPotentiometerTask(void*)+0xa4>
  {
    adc_arr[i].Initialize();
    25c6:	f107 0108 	add.w	r1, r7, #8
    25ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    25cc:	4613      	mov	r3, r2
    25ce:	005b      	lsls	r3, r3, #1
    25d0:	4413      	add	r3, r2
    25d2:	009b      	lsls	r3, r3, #2
    25d4:	440b      	add	r3, r1
    25d6:	4618      	mov	r0, r3
    25d8:	f7ff f9f4 	bl	19c4 <sjsu::lpc40xx::Adc::Initialize() const>
  for(int i = 0; i < NUM_FINGERS; i++)
    25dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    25de:	3301      	adds	r3, #1
    25e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    25e2:	e7ed      	b.n	25c0 <vPotentiometerTask(void*)+0x80>
  }
  LOG_INFO("adc channels initialized");
    25e4:	2342      	movs	r3, #66	; 0x42
    25e6:	4a28      	ldr	r2, [pc, #160]	; (2688 <vPotentiometerTask(void*)+0x148>)
    25e8:	4928      	ldr	r1, [pc, #160]	; (268c <vPotentiometerTask(void*)+0x14c>)
    25ea:	4829      	ldr	r0, [pc, #164]	; (2690 <vPotentiometerTask(void*)+0x150>)
    25ec:	f002 ff5a 	bl	54a4 <printf>
  uint32_t glove_position = 0;
    25f0:	2300      	movs	r3, #0
    25f2:	653b      	str	r3, [r7, #80]	; 0x50
  
  while(1)
  {
    for(int i = 0; i < NUM_FINGERS; i++)
    25f4:	2300      	movs	r3, #0
    25f6:	65bb      	str	r3, [r7, #88]	; 0x58
    25f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    25fa:	2b02      	cmp	r3, #2
    25fc:	dc39      	bgt.n	2672 <vPotentiometerTask(void*)+0x132>
    {
      glove_position = adc_arr[i].Read();
    25fe:	f107 0108 	add.w	r1, r7, #8
    2602:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2604:	4613      	mov	r3, r2
    2606:	005b      	lsls	r3, r3, #1
    2608:	4413      	add	r3, r2
    260a:	009b      	lsls	r3, r3, #2
    260c:	440b      	add	r3, r1
    260e:	4618      	mov	r0, r3
    2610:	f7ff fa66 	bl	1ae0 <sjsu::lpc40xx::Adc::Read() const>
    2614:	6538      	str	r0, [r7, #80]	; 0x50
      
      //LOG_INFO("ROUNDED: %f", my_round(rounded));
      shared_mem->sen[i].f = sjsu::Map(glove_position, 0, 4095, 0.0f, 3.3f);
    2616:	eddf 0a1f 	vldr	s1, [pc, #124]	; 2694 <vPotentiometerTask(void*)+0x154>
    261a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 2698 <vPotentiometerTask(void*)+0x158>
    261e:	f640 72ff 	movw	r2, #4095	; 0xfff
    2622:	2100      	movs	r1, #0
    2624:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2626:	f000 fae0 	bl	2bea <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>
    262a:	eef0 7a40 	vmov.f32	s15, s0
    262e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2632:	3302      	adds	r3, #2
    2634:	009b      	lsls	r3, r3, #2
    2636:	4413      	add	r3, r2
    2638:	3304      	adds	r3, #4
    263a:	edc3 7a00 	vstr	s15, [r3]
      shared_mem->sen[i].f = my_round(shared_mem->sen[i].f);
    263e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2642:	3302      	adds	r3, #2
    2644:	009b      	lsls	r3, r3, #2
    2646:	4413      	add	r3, r2
    2648:	3304      	adds	r3, #4
    264a:	edd3 7a00 	vldr	s15, [r3]
    264e:	eeb0 0a67 	vmov.f32	s0, s15
    2652:	f7ff ff23 	bl	249c <my_round(float)>
    2656:	eef0 7a40 	vmov.f32	s15, s0
    265a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    265c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    265e:	3302      	adds	r3, #2
    2660:	009b      	lsls	r3, r3, #2
    2662:	4413      	add	r3, r2
    2664:	3304      	adds	r3, #4
    2666:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < NUM_FINGERS; i++)
    266a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    266c:	3301      	adds	r3, #1
    266e:	65bb      	str	r3, [r7, #88]	; 0x58
    2670:	e7c2      	b.n	25f8 <vPotentiometerTask(void*)+0xb8>
    }
    vTaskDelay(100);
    2672:	2064      	movs	r0, #100	; 0x64
    2674:	f001 f89a 	bl	37ac <vTaskDelay>
  }
    2678:	e7bc      	b.n	25f4 <vPotentiometerTask(void*)+0xb4>
    267a:	bf00      	nop
    267c:	0000915c 	.word	0x0000915c
    2680:	00009164 	.word	0x00009164
    2684:	0000916c 	.word	0x0000916c
    2688:	00009460 	.word	0x00009460
    268c:	000091d4 	.word	0x000091d4
    2690:	00008f88 	.word	0x00008f88
    2694:	40533333 	.word	0x40533333
    2698:	00000000 	.word	0x00000000

0000269c <sjsu::Gpio::Gpio(sjsu::Gpio const&)>:
class Gpio
    269c:	b480      	push	{r7}
    269e:	b083      	sub	sp, #12
    26a0:	af00      	add	r7, sp, #0
    26a2:	6078      	str	r0, [r7, #4]
    26a4:	6039      	str	r1, [r7, #0]
    26a6:	4a05      	ldr	r2, [pc, #20]	; (26bc <sjsu::Gpio::Gpio(sjsu::Gpio const&)+0x20>)
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	601a      	str	r2, [r3, #0]
    26ac:	687b      	ldr	r3, [r7, #4]
    26ae:	4618      	mov	r0, r3
    26b0:	370c      	adds	r7, #12
    26b2:	46bd      	mov	sp, r7
    26b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop
    26bc:	00009230 	.word	0x00009230

000026c0 <sjsu::Pin::Pin(sjsu::Pin const&)>:
class Pin
    26c0:	b480      	push	{r7}
    26c2:	b083      	sub	sp, #12
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
    26c8:	6039      	str	r1, [r7, #0]
    26ca:	4a09      	ldr	r2, [pc, #36]	; (26f0 <sjsu::Pin::Pin(sjsu::Pin const&)+0x30>)
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	601a      	str	r2, [r3, #0]
    26d0:	683b      	ldr	r3, [r7, #0]
    26d2:	791a      	ldrb	r2, [r3, #4]
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	711a      	strb	r2, [r3, #4]
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	795a      	ldrb	r2, [r3, #5]
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	715a      	strb	r2, [r3, #5]
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	4618      	mov	r0, r3
    26e4:	370c      	adds	r7, #12
    26e6:	46bd      	mov	sp, r7
    26e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ec:	4770      	bx	lr
    26ee:	bf00      	nop
    26f0:	000092f0 	.word	0x000092f0

000026f4 <sjsu::lpc40xx::Pin::Pin(sjsu::lpc40xx::Pin const&)>:
class Pin final : public sjsu::Pin
    26f4:	b580      	push	{r7, lr}
    26f6:	b082      	sub	sp, #8
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
    26fc:	6039      	str	r1, [r7, #0]
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	683a      	ldr	r2, [r7, #0]
    2702:	4611      	mov	r1, r2
    2704:	4618      	mov	r0, r3
    2706:	f7ff ffdb 	bl	26c0 <sjsu::Pin::Pin(sjsu::Pin const&)>
    270a:	4a04      	ldr	r2, [pc, #16]	; (271c <sjsu::lpc40xx::Pin::Pin(sjsu::lpc40xx::Pin const&)+0x28>)
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	601a      	str	r2, [r3, #0]
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	4618      	mov	r0, r3
    2714:	3708      	adds	r7, #8
    2716:	46bd      	mov	sp, r7
    2718:	bd80      	pop	{r7, pc}
    271a:	bf00      	nop
    271c:	000092d8 	.word	0x000092d8

00002720 <sjsu::lpc40xx::Gpio::Gpio(sjsu::lpc40xx::Gpio const&)>:
class Gpio final : public sjsu::Gpio
    2720:	b580      	push	{r7, lr}
    2722:	b082      	sub	sp, #8
    2724:	af00      	add	r7, sp, #0
    2726:	6078      	str	r0, [r7, #4]
    2728:	6039      	str	r1, [r7, #0]
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	683a      	ldr	r2, [r7, #0]
    272e:	4611      	mov	r1, r2
    2730:	4618      	mov	r0, r3
    2732:	f7ff ffb3 	bl	269c <sjsu::Gpio::Gpio(sjsu::Gpio const&)>
    2736:	4a0c      	ldr	r2, [pc, #48]	; (2768 <sjsu::lpc40xx::Gpio::Gpio(sjsu::lpc40xx::Gpio const&)+0x48>)
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	601a      	str	r2, [r3, #0]
    273c:	683b      	ldr	r3, [r7, #0]
    273e:	791a      	ldrb	r2, [r3, #4]
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	711a      	strb	r2, [r3, #4]
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	f103 0208 	add.w	r2, r3, #8
    274a:	683b      	ldr	r3, [r7, #0]
    274c:	3308      	adds	r3, #8
    274e:	4619      	mov	r1, r3
    2750:	4610      	mov	r0, r2
    2752:	f7ff ffcf 	bl	26f4 <sjsu::lpc40xx::Pin::Pin(sjsu::lpc40xx::Pin const&)>
    2756:	683b      	ldr	r3, [r7, #0]
    2758:	691a      	ldr	r2, [r3, #16]
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	611a      	str	r2, [r3, #16]
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	4618      	mov	r0, r3
    2762:	3708      	adds	r7, #8
    2764:	46bd      	mov	sp, r7
    2766:	bd80      	pop	{r7, pc}
    2768:	000091fc 	.word	0x000091fc

0000276c <vBrakeTask(void*)>:
}

void vBrakeTask(void * pvParameters)
{
    276c:	b580      	push	{r7, lr}
    276e:	b09c      	sub	sp, #112	; 0x70
    2770:	af02      	add	r7, sp, #8
    2772:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	65fb      	str	r3, [r7, #92]	; 0x5c
  sjsu::lpc40xx::Gpio brake0(1, 19);
    2778:	4b43      	ldr	r3, [pc, #268]	; (2888 <vBrakeTask(void*)+0x11c>)
    277a:	64bb      	str	r3, [r7, #72]	; 0x48
    277c:	2300      	movs	r3, #0
    277e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    2782:	4b42      	ldr	r3, [pc, #264]	; (288c <vBrakeTask(void*)+0x120>)
    2784:	653b      	str	r3, [r7, #80]	; 0x50
    2786:	2301      	movs	r3, #1
    2788:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    278c:	2313      	movs	r3, #19
    278e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    2792:	4b3f      	ldr	r3, [pc, #252]	; (2890 <vBrakeTask(void*)+0x124>)
    2794:	65bb      	str	r3, [r7, #88]	; 0x58
  sjsu::lpc40xx::Gpio brake1(2, 3);
    2796:	4b3c      	ldr	r3, [pc, #240]	; (2888 <vBrakeTask(void*)+0x11c>)
    2798:	637b      	str	r3, [r7, #52]	; 0x34
    279a:	2301      	movs	r3, #1
    279c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    27a0:	4b3a      	ldr	r3, [pc, #232]	; (288c <vBrakeTask(void*)+0x120>)
    27a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    27a4:	2302      	movs	r3, #2
    27a6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    27aa:	2303      	movs	r3, #3
    27ac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    27b0:	4b37      	ldr	r3, [pc, #220]	; (2890 <vBrakeTask(void*)+0x124>)
    27b2:	647b      	str	r3, [r7, #68]	; 0x44
  sjsu::lpc40xx::Gpio brake_arr[2] = {brake0, brake1};
    27b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
    27b8:	f107 030c 	add.w	r3, r7, #12
    27bc:	4611      	mov	r1, r2
    27be:	4618      	mov	r0, r3
    27c0:	f7ff ffae 	bl	2720 <sjsu::lpc40xx::Gpio::Gpio(sjsu::lpc40xx::Gpio const&)>
    27c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
    27c8:	f107 030c 	add.w	r3, r7, #12
    27cc:	3314      	adds	r3, #20
    27ce:	4611      	mov	r1, r2
    27d0:	4618      	mov	r0, r3
    27d2:	f7ff ffa5 	bl	2720 <sjsu::lpc40xx::Gpio::Gpio(sjsu::lpc40xx::Gpio const&)>
  for(int i = 0; i < NUM_FINGERS; i++)
    27d6:	2300      	movs	r3, #0
    27d8:	667b      	str	r3, [r7, #100]	; 0x64
    27da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    27dc:	2b02      	cmp	r3, #2
    27de:	dc21      	bgt.n	2824 <vBrakeTask(void*)+0xb8>
  {
    brake_arr[i].SetAsOutput();
    27e0:	f107 010c 	add.w	r1, r7, #12
    27e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    27e6:	4613      	mov	r3, r2
    27e8:	009b      	lsls	r3, r3, #2
    27ea:	4413      	add	r3, r2
    27ec:	009b      	lsls	r3, r3, #2
    27ee:	440b      	add	r3, r1
    27f0:	4618      	mov	r0, r3
    27f2:	f7ff fa4d 	bl	1c90 <sjsu::Gpio::SetAsOutput() const>
    brake_arr[i].SetLow();
    27f6:	f107 010c 	add.w	r1, r7, #12
    27fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    27fc:	4613      	mov	r3, r2
    27fe:	009b      	lsls	r3, r3, #2
    2800:	4413      	add	r3, r2
    2802:	009b      	lsls	r3, r3, #2
    2804:	440b      	add	r3, r1
    2806:	4618      	mov	r0, r3
    2808:	f7ff fa33 	bl	1c72 <sjsu::Gpio::SetLow() const>
    LOG_INFO("configured brake%d pin as output", i);
    280c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    280e:	9300      	str	r3, [sp, #0]
    2810:	235d      	movs	r3, #93	; 0x5d
    2812:	4a20      	ldr	r2, [pc, #128]	; (2894 <vBrakeTask(void*)+0x128>)
    2814:	4920      	ldr	r1, [pc, #128]	; (2898 <vBrakeTask(void*)+0x12c>)
    2816:	4821      	ldr	r0, [pc, #132]	; (289c <vBrakeTask(void*)+0x130>)
    2818:	f002 fe44 	bl	54a4 <printf>
  for(int i = 0; i < NUM_FINGERS; i++)
    281c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    281e:	3301      	adds	r3, #1
    2820:	667b      	str	r3, [r7, #100]	; 0x64
    2822:	e7da      	b.n	27da <vBrakeTask(void*)+0x6e>
  }
  while(1)
  {
    for(int i = 0; i < NUM_FINGERS; i++)
    2824:	2300      	movs	r3, #0
    2826:	663b      	str	r3, [r7, #96]	; 0x60
    2828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    282a:	2b02      	cmp	r3, #2
    282c:	dc27      	bgt.n	287e <vBrakeTask(void*)+0x112>
    {
      if(shared_mem->rec[i].f >= BRAKE_THRESHOLD)
    282e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    2830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2832:	009b      	lsls	r3, r3, #2
    2834:	4413      	add	r3, r2
    2836:	edd3 7a00 	vldr	s15, [r3]
    283a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    283e:	eef4 7ac7 	vcmpe.f32	s15, s14
    2842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2846:	db0b      	blt.n	2860 <vBrakeTask(void*)+0xf4>
      {
        brake_arr[i].SetHigh();
    2848:	f107 010c 	add.w	r1, r7, #12
    284c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    284e:	4613      	mov	r3, r2
    2850:	009b      	lsls	r3, r3, #2
    2852:	4413      	add	r3, r2
    2854:	009b      	lsls	r3, r3, #2
    2856:	440b      	add	r3, r1
    2858:	4618      	mov	r0, r3
    285a:	f7ff f9fb 	bl	1c54 <sjsu::Gpio::SetHigh() const>
    285e:	e00a      	b.n	2876 <vBrakeTask(void*)+0x10a>
      }
      else
      {
        brake_arr[i].SetLow();
    2860:	f107 010c 	add.w	r1, r7, #12
    2864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2866:	4613      	mov	r3, r2
    2868:	009b      	lsls	r3, r3, #2
    286a:	4413      	add	r3, r2
    286c:	009b      	lsls	r3, r3, #2
    286e:	440b      	add	r3, r1
    2870:	4618      	mov	r0, r3
    2872:	f7ff f9fe 	bl	1c72 <sjsu::Gpio::SetLow() const>
    for(int i = 0; i < NUM_FINGERS; i++)
    2876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2878:	3301      	adds	r3, #1
    287a:	663b      	str	r3, [r7, #96]	; 0x60
    287c:	e7d4      	b.n	2828 <vBrakeTask(void*)+0xbc>
      }
    }
    vTaskDelay(100);
    287e:	2064      	movs	r0, #100	; 0x64
    2880:	f000 ff94 	bl	37ac <vTaskDelay>
  }
    2884:	e7ce      	b.n	2824 <vBrakeTask(void*)+0xb8>
    2886:	bf00      	nop
    2888:	000091fc 	.word	0x000091fc
    288c:	000092d8 	.word	0x000092d8
    2890:	00009188 	.word	0x00009188
    2894:	00009480 	.word	0x00009480
    2898:	000091e4 	.word	0x000091e4
    289c:	00008fdc 	.word	0x00008fdc

000028a0 <main>:

#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"

int main()
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b088      	sub	sp, #32
    28a4:	af02      	add	r7, sp, #8
  paramsStruct pvParameters;

  xTaskCreate(vUartTask, "uart_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 2, &xUartTaskHandle);
    28a6:	463a      	mov	r2, r7
    28a8:	4b14      	ldr	r3, [pc, #80]	; (28fc <main+0x5c>)
    28aa:	9301      	str	r3, [sp, #4]
    28ac:	2302      	movs	r3, #2
    28ae:	9300      	str	r3, [sp, #0]
    28b0:	4613      	mov	r3, r2
    28b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    28b6:	4912      	ldr	r1, [pc, #72]	; (2900 <main+0x60>)
    28b8:	4812      	ldr	r0, [pc, #72]	; (2904 <main+0x64>)
    28ba:	f000 fe49 	bl	3550 <xTaskCreate>
  xTaskCreate(vPotentiometerTask, "potentiometer_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 1, &xPotentiometerTaskHandle);
    28be:	463a      	mov	r2, r7
    28c0:	4b11      	ldr	r3, [pc, #68]	; (2908 <main+0x68>)
    28c2:	9301      	str	r3, [sp, #4]
    28c4:	2301      	movs	r3, #1
    28c6:	9300      	str	r3, [sp, #0]
    28c8:	4613      	mov	r3, r2
    28ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    28ce:	490f      	ldr	r1, [pc, #60]	; (290c <main+0x6c>)
    28d0:	480f      	ldr	r0, [pc, #60]	; (2910 <main+0x70>)
    28d2:	f000 fe3d 	bl	3550 <xTaskCreate>
  xTaskCreate(vBrakeTask, "brake_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 1, &xBrakeTaskHandle);
    28d6:	463a      	mov	r2, r7
    28d8:	4b0e      	ldr	r3, [pc, #56]	; (2914 <main+0x74>)
    28da:	9301      	str	r3, [sp, #4]
    28dc:	2301      	movs	r3, #1
    28de:	9300      	str	r3, [sp, #0]
    28e0:	4613      	mov	r3, r2
    28e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    28e6:	490c      	ldr	r1, [pc, #48]	; (2918 <main+0x78>)
    28e8:	480c      	ldr	r0, [pc, #48]	; (291c <main+0x7c>)
    28ea:	f000 fe31 	bl	3550 <xTaskCreate>

  vTaskStartScheduler();
    28ee:	f000 ff81 	bl	37f4 <vTaskStartScheduler>
}
    28f2:	2300      	movs	r3, #0
    28f4:	4618      	mov	r0, r3
    28f6:	3718      	adds	r7, #24
    28f8:	46bd      	mov	sp, r7
    28fa:	bd80      	pop	{r7, pc}
    28fc:	10000370 	.word	0x10000370
    2900:	00009038 	.word	0x00009038
    2904:	00002331 	.word	0x00002331
    2908:	10000374 	.word	0x10000374
    290c:	00009044 	.word	0x00009044
    2910:	00002541 	.word	0x00002541
    2914:	10000378 	.word	0x10000378
    2918:	00009058 	.word	0x00009058
    291c:	0000276d 	.word	0x0000276d

00002920 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    2920:	b590      	push	{r4, r7, lr}
    2922:	b087      	sub	sp, #28
    2924:	af00      	add	r7, sp, #0
    2926:	60f8      	str	r0, [r7, #12]
    2928:	60b9      	str	r1, [r7, #8]
    292a:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    292c:	68bb      	ldr	r3, [r7, #8]
    292e:	e9d3 3400 	ldrd	r3, r4, [r3]
    2932:	1c59      	adds	r1, r3, #1
    2934:	f144 0200 	adc.w	r2, r4, #0
    2938:	68b8      	ldr	r0, [r7, #8]
    293a:	e9c0 1200 	strd	r1, r2, [r0]
    293e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2942:	f107 0310 	add.w	r3, r7, #16
    2946:	4619      	mov	r1, r3
    2948:	68f8      	ldr	r0, [r7, #12]
    294a:	f7fd fe6b 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    294e:	68f8      	ldr	r0, [r7, #12]
    2950:	371c      	adds	r7, #28
    2952:	46bd      	mov	sp, r7
    2954:	bd90      	pop	{r4, r7, pc}

00002956 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    // comparisons
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
    2956:	b5f0      	push	{r4, r5, r6, r7, lr}
    2958:	b087      	sub	sp, #28
    295a:	af00      	add	r7, sp, #0
    295c:	6078      	str	r0, [r7, #4]
    295e:	6039      	str	r1, [r7, #0]
		 const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() == __ct(__rhs).count();
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	e9d3 3400 	ldrd	r3, r4, [r3]
    2966:	e9c7 3402 	strd	r3, r4, [r7, #8]
    296a:	f107 0308 	add.w	r3, r7, #8
    296e:	4618      	mov	r0, r3
    2970:	f7ff fcb4 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2974:	4605      	mov	r5, r0
    2976:	460e      	mov	r6, r1
    2978:	683b      	ldr	r3, [r7, #0]
    297a:	e9d3 3400 	ldrd	r3, r4, [r3]
    297e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2982:	f107 0310 	add.w	r3, r7, #16
    2986:	4618      	mov	r0, r3
    2988:	f7ff fca8 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    298c:	4603      	mov	r3, r0
    298e:	460c      	mov	r4, r1
    2990:	42a6      	cmp	r6, r4
    2992:	bf06      	itte	eq
    2994:	429d      	cmpeq	r5, r3
    2996:	2301      	moveq	r3, #1
    2998:	2300      	movne	r3, #0
    299a:	b2db      	uxtb	r3, r3
      }
    299c:	4618      	mov	r0, r3
    299e:	371c      	adds	r7, #28
    29a0:	46bd      	mov	sp, r7
    29a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000029a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    29a4:	b580      	push	{r7, lr}
    29a6:	b084      	sub	sp, #16
    29a8:	af00      	add	r7, sp, #0
    29aa:	60f8      	str	r0, [r7, #12]
    29ac:	460b      	mov	r3, r1
    29ae:	80ba      	strh	r2, [r7, #4]
    29b0:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    29b2:	793b      	ldrb	r3, [r7, #4]
    29b4:	461a      	mov	r2, r3
    29b6:	797b      	ldrb	r3, [r7, #5]
    29b8:	7af9      	ldrb	r1, [r7, #11]
    29ba:	68f8      	ldr	r0, [r7, #12]
    29bc:	f000 f9b7 	bl	2d2e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    29c0:	4603      	mov	r3, r0
}
    29c2:	4618      	mov	r0, r3
    29c4:	3710      	adds	r7, #16
    29c6:	46bd      	mov	sp, r7
    29c8:	bd80      	pop	{r7, pc}

000029ca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    29ca:	b580      	push	{r7, lr}
    29cc:	b084      	sub	sp, #16
    29ce:	af00      	add	r7, sp, #0
    29d0:	6078      	str	r0, [r7, #4]
    29d2:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	4618      	mov	r0, r3
    29d8:	f7fe f968 	bl	cac <units::linear_scale<float>::operator()() const>
    29dc:	eef0 6a40 	vmov.f32	s13, s0
    29e0:	683b      	ldr	r3, [r7, #0]
    29e2:	ee07 3a90 	vmov	s15, r3
    29e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    29ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    29ee:	f107 030c 	add.w	r3, r7, #12
    29f2:	eeb0 0a47 	vmov.f32	s0, s14
    29f6:	4618      	mov	r0, r3
    29f8:	f7fd fd18 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    29fc:	68fb      	ldr	r3, [r7, #12]
	}
    29fe:	4618      	mov	r0, r3
    2a00:	3710      	adds	r7, #16
    2a02:	46bd      	mov	sp, r7
    2a04:	bd80      	pop	{r7, pc}

00002a06 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2a06:	b580      	push	{r7, lr}
    2a08:	ed2d 8b02 	vpush	{d8}
    2a0c:	b082      	sub	sp, #8
    2a0e:	af00      	add	r7, sp, #0
    2a10:	6078      	str	r0, [r7, #4]
    2a12:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	ed93 8a00 	vldr	s16, [r3]
    2a1a:	683b      	ldr	r3, [r7, #0]
    2a1c:	4618      	mov	r0, r3
    2a1e:	f7fd fce5 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2a22:	eef0 7a40 	vmov.f32	s15, s0
    2a26:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a2e:	bfcc      	ite	gt
    2a30:	2301      	movgt	r3, #1
    2a32:	2300      	movle	r3, #0
    2a34:	b2db      	uxtb	r3, r3
		}
    2a36:	4618      	mov	r0, r3
    2a38:	3708      	adds	r7, #8
    2a3a:	46bd      	mov	sp, r7
    2a3c:	ecbd 8b02 	vpop	{d8}
    2a40:	bd80      	pop	{r7, pc}

00002a42 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    2a42:	b580      	push	{r7, lr}
    2a44:	b082      	sub	sp, #8
    2a46:	af00      	add	r7, sp, #0
    2a48:	6078      	str	r0, [r7, #4]
    2a4a:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    2a4c:	683b      	ldr	r3, [r7, #0]
    2a4e:	4618      	mov	r0, r3
    2a50:	f7fd ff4e 	bl	8f0 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2a54:	eef0 7a40 	vmov.f32	s15, s0
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    2a5e:	687b      	ldr	r3, [r7, #4]
		}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    2a68:	b480      	push	{r7}
    2a6a:	b083      	sub	sp, #12
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	6078      	str	r0, [r7, #4]
    2a70:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    2a72:	2201      	movs	r2, #1
    2a74:	683b      	ldr	r3, [r7, #0]
    2a76:	fa02 f303 	lsl.w	r3, r2, r3
    2a7a:	461a      	mov	r2, r3
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	4313      	orrs	r3, r2
}
    2a80:	4618      	mov	r0, r3
    2a82:	370c      	adds	r7, #12
    2a84:	46bd      	mov	sp, r7
    2a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a8a:	4770      	bx	lr

00002a8c <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    2a8c:	b480      	push	{r7}
    2a8e:	b083      	sub	sp, #12
    2a90:	af00      	add	r7, sp, #0
    2a92:	6078      	str	r0, [r7, #4]
    2a94:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    2a96:	2201      	movs	r2, #1
    2a98:	683b      	ldr	r3, [r7, #0]
    2a9a:	fa02 f303 	lsl.w	r3, r2, r3
    2a9e:	43db      	mvns	r3, r3
    2aa0:	461a      	mov	r2, r3
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	4013      	ands	r3, r2
}
    2aa6:	4618      	mov	r0, r3
    2aa8:	370c      	adds	r7, #12
    2aaa:	46bd      	mov	sp, r7
    2aac:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab0:	4770      	bx	lr

00002ab2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2ab2:	b580      	push	{r7, lr}
    2ab4:	b084      	sub	sp, #16
    2ab6:	af00      	add	r7, sp, #0
    2ab8:	60f8      	str	r0, [r7, #12]
    2aba:	60b9      	str	r1, [r7, #8]
    2abc:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2abe:	793b      	ldrb	r3, [r7, #4]
    2ac0:	461a      	mov	r2, r3
    2ac2:	797b      	ldrb	r3, [r7, #5]
    2ac4:	68b9      	ldr	r1, [r7, #8]
    2ac6:	68f8      	ldr	r0, [r7, #12]
    2ac8:	f000 f95e 	bl	2d88 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    2acc:	4603      	mov	r3, r0
}
    2ace:	4618      	mov	r0, r3
    2ad0:	3710      	adds	r7, #16
    2ad2:	46bd      	mov	sp, r7
    2ad4:	bd80      	pop	{r7, pc}

00002ad6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    2ad6:	b580      	push	{r7, lr}
    2ad8:	b084      	sub	sp, #16
    2ada:	af00      	add	r7, sp, #0
    2adc:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	4618      	mov	r0, r3
    2ae2:	f7fe f8e3 	bl	cac <units::linear_scale<float>::operator()() const>
    2ae6:	eef0 7a40 	vmov.f32	s15, s0
    2aea:	edc7 7a03 	vstr	s15, [r7, #12]
    2aee:	f107 030c 	add.w	r3, r7, #12
    2af2:	4618      	mov	r0, r3
    2af4:	f000 f974 	bl	2de0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2af8:	eef0 7a40 	vmov.f32	s15, s0
    2afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2b00:	ee17 3a90 	vmov	r3, s15
		}
    2b04:	4618      	mov	r0, r3
    2b06:	3710      	adds	r7, #16
    2b08:	46bd      	mov	sp, r7
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2b0c:	b480      	push	{r7}
    2b0e:	b083      	sub	sp, #12
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    2b16:	2201      	movs	r2, #1
    2b18:	683b      	ldr	r3, [r7, #0]
    2b1a:	fa02 f303 	lsl.w	r3, r2, r3
    2b1e:	461a      	mov	r2, r3
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	4013      	ands	r3, r2
    2b24:	2b00      	cmp	r3, #0
    2b26:	bf14      	ite	ne
    2b28:	2301      	movne	r3, #1
    2b2a:	2300      	moveq	r3, #0
    2b2c:	b2db      	uxtb	r3, r3
}
    2b2e:	4618      	mov	r0, r3
    2b30:	370c      	adds	r7, #12
    2b32:	46bd      	mov	sp, r7
    2b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b38:	4770      	bx	lr

00002b3a <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2b3a:	b480      	push	{r7}
    2b3c:	b083      	sub	sp, #12
    2b3e:	af00      	add	r7, sp, #0
    2b40:	4603      	mov	r3, r0
    2b42:	6039      	str	r1, [r7, #0]
    2b44:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    2b46:	79fa      	ldrb	r2, [r7, #7]
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	fa42 f303 	asr.w	r3, r2, r3
    2b4e:	f003 0301 	and.w	r3, r3, #1
    2b52:	2b00      	cmp	r3, #0
    2b54:	bf14      	ite	ne
    2b56:	2301      	movne	r3, #1
    2b58:	2300      	moveq	r3, #0
    2b5a:	b2db      	uxtb	r3, r3
}
    2b5c:	4618      	mov	r0, r3
    2b5e:	370c      	adds	r7, #12
    2b60:	46bd      	mov	sp, r7
    2b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b66:	4770      	bx	lr

00002b68 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    2b68:	b580      	push	{r7, lr}
    2b6a:	b082      	sub	sp, #8
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	6078      	str	r0, [r7, #4]
    2b70:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    2b72:	783b      	ldrb	r3, [r7, #0]
    2b74:	4619      	mov	r1, r3
    2b76:	6878      	ldr	r0, [r7, #4]
    2b78:	f7ff ffc8 	bl	2b0c <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    2b7c:	4603      	mov	r3, r0
}
    2b7e:	4618      	mov	r0, r3
    2b80:	3708      	adds	r7, #8
    2b82:	46bd      	mov	sp, r7
    2b84:	bd80      	pop	{r7, pc}

00002b86 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    2b86:	b580      	push	{r7, lr}
    2b88:	b082      	sub	sp, #8
    2b8a:	af00      	add	r7, sp, #0
    2b8c:	6078      	str	r0, [r7, #4]
    2b8e:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    2b90:	783b      	ldrb	r3, [r7, #0]
    2b92:	4619      	mov	r1, r3
    2b94:	6878      	ldr	r0, [r7, #4]
    2b96:	f7ff ff67 	bl	2a68 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2b9a:	4603      	mov	r3, r0
}
    2b9c:	4618      	mov	r0, r3
    2b9e:	3708      	adds	r7, #8
    2ba0:	46bd      	mov	sp, r7
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b082      	sub	sp, #8
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
    2bac:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    2bae:	783b      	ldrb	r3, [r7, #0]
    2bb0:	4619      	mov	r1, r3
    2bb2:	787b      	ldrb	r3, [r7, #1]
    2bb4:	461a      	mov	r2, r3
    2bb6:	6878      	ldr	r0, [r7, #4]
    2bb8:	f000 f920 	bl	2dfc <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    2bbc:	4603      	mov	r3, r0
}
    2bbe:	4618      	mov	r0, r3
    2bc0:	3708      	adds	r7, #8
    2bc2:	46bd      	mov	sp, r7
    2bc4:	bd80      	pop	{r7, pc}

00002bc6 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2bc6:	b580      	push	{r7, lr}
    2bc8:	b084      	sub	sp, #16
    2bca:	af00      	add	r7, sp, #0
    2bcc:	60f8      	str	r0, [r7, #12]
    2bce:	60b9      	str	r1, [r7, #8]
    2bd0:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2bd2:	793b      	ldrb	r3, [r7, #4]
    2bd4:	461a      	mov	r2, r3
    2bd6:	797b      	ldrb	r3, [r7, #5]
    2bd8:	68b9      	ldr	r1, [r7, #8]
    2bda:	68f8      	ldr	r0, [r7, #12]
    2bdc:	f000 f92c 	bl	2e38 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    2be0:	4603      	mov	r3, r0
}
    2be2:	4618      	mov	r0, r3
    2be4:	3710      	adds	r7, #16
    2be6:	46bd      	mov	sp, r7
    2be8:	bd80      	pop	{r7, pc}

00002bea <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>:
/// @param min - current minimum value that the value can reach
/// @param max - current maximum value that the value can reach
/// @param new_min - the new minimum value to scale and shift the old value to
/// @param new_max - the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    2bea:	b480      	push	{r7}
    2bec:	b08f      	sub	sp, #60	; 0x3c
    2bee:	af00      	add	r7, sp, #0
    2bf0:	6178      	str	r0, [r7, #20]
    2bf2:	6139      	str	r1, [r7, #16]
    2bf4:	60fa      	str	r2, [r7, #12]
    2bf6:	ed87 0a02 	vstr	s0, [r7, #8]
    2bfa:	edc7 0a01 	vstr	s1, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    2bfe:	697b      	ldr	r3, [r7, #20]
    2c00:	ee07 3a90 	vmov	s15, r3
    2c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    2c0c:	693b      	ldr	r3, [r7, #16]
    2c0e:	ee07 3a90 	vmov	s15, r3
    2c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    2c1a:	68fb      	ldr	r3, [r7, #12]
    2c1c:	ee07 3a90 	vmov	s15, r3
    2c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    2c28:	68bb      	ldr	r3, [r7, #8]
    2c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    2c30:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    2c34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    2c38:	ee77 6a67 	vsub.f32	s13, s14, s15
    2c3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    2c40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    2c44:	ee37 7a67 	vsub.f32	s14, s14, s15
    2c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
    2c4c:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    2c50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    2c54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    2c58:	ee37 7a67 	vsub.f32	s14, s14, s15
    2c5c:	edd7 7a08 	vldr	s15, [r7, #32]
    2c60:	ee67 7a27 	vmul.f32	s15, s14, s15
    2c64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    2c68:	ee77 7a27 	vadd.f32	s15, s14, s15
    2c6c:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    2c70:	69fb      	ldr	r3, [r7, #28]
    2c72:	ee07 3a90 	vmov	s15, r3
};
    2c76:	eeb0 0a67 	vmov.f32	s0, s15
    2c7a:	373c      	adds	r7, #60	; 0x3c
    2c7c:	46bd      	mov	sp, r7
    2c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c82:	4770      	bx	lr

00002c84 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    2c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c86:	b08b      	sub	sp, #44	; 0x2c
    2c88:	af00      	add	r7, sp, #0
    2c8a:	60f8      	str	r0, [r7, #12]
    2c8c:	60b9      	str	r1, [r7, #8]
    2c8e:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    2c90:	68bb      	ldr	r3, [r7, #8]
    2c92:	e9d3 3400 	ldrd	r3, r4, [r3]
    2c96:	e9c7 3406 	strd	r3, r4, [r7, #24]
    2c9a:	f107 0318 	add.w	r3, r7, #24
    2c9e:	4618      	mov	r0, r3
    2ca0:	f7ff fb1c 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2ca4:	4605      	mov	r5, r0
    2ca6:	460e      	mov	r6, r1
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	e9d3 3400 	ldrd	r3, r4, [r3]
    2cae:	e9c7 3408 	strd	r3, r4, [r7, #32]
    2cb2:	f107 0320 	add.w	r3, r7, #32
    2cb6:	4618      	mov	r0, r3
    2cb8:	f7ff fb10 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2cbc:	460a      	mov	r2, r1
    2cbe:	4601      	mov	r1, r0
    2cc0:	194b      	adds	r3, r1, r5
    2cc2:	eb42 0406 	adc.w	r4, r2, r6
    2cc6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2cca:	f107 0310 	add.w	r3, r7, #16
    2cce:	4619      	mov	r1, r3
    2cd0:	68f8      	ldr	r0, [r7, #12]
    2cd2:	f7fd fca7 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    2cd6:	68f8      	ldr	r0, [r7, #12]
    2cd8:	372c      	adds	r7, #44	; 0x2c
    2cda:	46bd      	mov	sp, r7
    2cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002cde <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
    2cde:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce0:	b087      	sub	sp, #28
    2ce2:	af00      	add	r7, sp, #0
    2ce4:	6078      	str	r0, [r7, #4]
    2ce6:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	e9d3 3400 	ldrd	r3, r4, [r3]
    2cee:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2cf2:	f107 0308 	add.w	r3, r7, #8
    2cf6:	4618      	mov	r0, r3
    2cf8:	f7ff faf0 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2cfc:	4605      	mov	r5, r0
    2cfe:	460e      	mov	r6, r1
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	e9d3 3400 	ldrd	r3, r4, [r3]
    2d06:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2d0a:	f107 0310 	add.w	r3, r7, #16
    2d0e:	4618      	mov	r0, r3
    2d10:	f7ff fae4 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2d14:	4603      	mov	r3, r0
    2d16:	460c      	mov	r4, r1
    2d18:	429d      	cmp	r5, r3
    2d1a:	eb76 0304 	sbcs.w	r3, r6, r4
    2d1e:	bfb4      	ite	lt
    2d20:	2301      	movlt	r3, #1
    2d22:	2300      	movge	r3, #0
    2d24:	b2db      	uxtb	r3, r3
      }
    2d26:	4618      	mov	r0, r3
    2d28:	371c      	adds	r7, #28
    2d2a:	46bd      	mov	sp, r7
    2d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d2e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2d2e:	b480      	push	{r7}
    2d30:	b089      	sub	sp, #36	; 0x24
    2d32:	af00      	add	r7, sp, #0
    2d34:	60f8      	str	r0, [r7, #12]
    2d36:	607a      	str	r2, [r7, #4]
    2d38:	603b      	str	r3, [r7, #0]
    2d3a:	460b      	mov	r3, r1
    2d3c:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d42:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2d44:	2320      	movs	r3, #32
    2d46:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2d48:	683b      	ldr	r3, [r7, #0]
    2d4a:	f1c3 0320 	rsb	r3, r3, #32
    2d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d52:	fa22 f303 	lsr.w	r3, r2, r3
    2d56:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2d58:	697a      	ldr	r2, [r7, #20]
    2d5a:	687b      	ldr	r3, [r7, #4]
    2d5c:	fa02 f303 	lsl.w	r3, r2, r3
    2d60:	43db      	mvns	r3, r3
    2d62:	68fa      	ldr	r2, [r7, #12]
    2d64:	4013      	ands	r3, r2
    2d66:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2d68:	7afa      	ldrb	r2, [r7, #11]
    2d6a:	697b      	ldr	r3, [r7, #20]
    2d6c:	401a      	ands	r2, r3
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	fa02 f303 	lsl.w	r3, r2, r3
    2d74:	68fa      	ldr	r2, [r7, #12]
    2d76:	4313      	orrs	r3, r2
    2d78:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2d7a:	68fb      	ldr	r3, [r7, #12]
}
    2d7c:	4618      	mov	r0, r3
    2d7e:	3724      	adds	r7, #36	; 0x24
    2d80:	46bd      	mov	sp, r7
    2d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d86:	4770      	bx	lr

00002d88 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2d88:	b480      	push	{r7}
    2d8a:	b089      	sub	sp, #36	; 0x24
    2d8c:	af00      	add	r7, sp, #0
    2d8e:	60f8      	str	r0, [r7, #12]
    2d90:	60b9      	str	r1, [r7, #8]
    2d92:	607a      	str	r2, [r7, #4]
    2d94:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d9a:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2d9c:	2320      	movs	r3, #32
    2d9e:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2da0:	683b      	ldr	r3, [r7, #0]
    2da2:	f1c3 0320 	rsb	r3, r3, #32
    2da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2daa:	fa22 f303 	lsr.w	r3, r2, r3
    2dae:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2db0:	697a      	ldr	r2, [r7, #20]
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	fa02 f303 	lsl.w	r3, r2, r3
    2db8:	43db      	mvns	r3, r3
    2dba:	68fa      	ldr	r2, [r7, #12]
    2dbc:	4013      	ands	r3, r2
    2dbe:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2dc0:	68ba      	ldr	r2, [r7, #8]
    2dc2:	697b      	ldr	r3, [r7, #20]
    2dc4:	401a      	ands	r2, r3
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	fa02 f303 	lsl.w	r3, r2, r3
    2dcc:	68fa      	ldr	r2, [r7, #12]
    2dce:	4313      	orrs	r3, r2
    2dd0:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2dd2:	68fb      	ldr	r3, [r7, #12]
}
    2dd4:	4618      	mov	r0, r3
    2dd6:	3724      	adds	r7, #36	; 0x24
    2dd8:	46bd      	mov	sp, r7
    2dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dde:	4770      	bx	lr

00002de0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2de0:	b580      	push	{r7, lr}
    2de2:	b086      	sub	sp, #24
    2de4:	af00      	add	r7, sp, #0
    2de6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2de8:	6878      	ldr	r0, [r7, #4]
    2dea:	f000 f851 	bl	2e90 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2dee:	eef0 7a40 	vmov.f32	s15, s0
	}
    2df2:	eeb0 0a67 	vmov.f32	s0, s15
    2df6:	3718      	adds	r7, #24
    2df8:	46bd      	mov	sp, r7
    2dfa:	bd80      	pop	{r7, pc}

00002dfc <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    2dfc:	b480      	push	{r7}
    2dfe:	b089      	sub	sp, #36	; 0x24
    2e00:	af00      	add	r7, sp, #0
    2e02:	60f8      	str	r0, [r7, #12]
    2e04:	60b9      	str	r1, [r7, #8]
    2e06:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e0c:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2e0e:	2320      	movs	r3, #32
    2e10:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	f1c3 0320 	rsb	r3, r3, #32
    2e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e1c:	fa22 f303 	lsr.w	r3, r2, r3
    2e20:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    2e22:	68fa      	ldr	r2, [r7, #12]
    2e24:	68bb      	ldr	r3, [r7, #8]
    2e26:	40da      	lsrs	r2, r3
    2e28:	697b      	ldr	r3, [r7, #20]
    2e2a:	4013      	ands	r3, r2
}
    2e2c:	4618      	mov	r0, r3
    2e2e:	3724      	adds	r7, #36	; 0x24
    2e30:	46bd      	mov	sp, r7
    2e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e36:	4770      	bx	lr

00002e38 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2e38:	b480      	push	{r7}
    2e3a:	b089      	sub	sp, #36	; 0x24
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	60f8      	str	r0, [r7, #12]
    2e40:	60b9      	str	r1, [r7, #8]
    2e42:	607a      	str	r2, [r7, #4]
    2e44:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e4a:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2e4c:	2320      	movs	r3, #32
    2e4e:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2e50:	683b      	ldr	r3, [r7, #0]
    2e52:	f1c3 0320 	rsb	r3, r3, #32
    2e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e5a:	fa22 f303 	lsr.w	r3, r2, r3
    2e5e:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2e60:	697a      	ldr	r2, [r7, #20]
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	fa02 f303 	lsl.w	r3, r2, r3
    2e68:	43db      	mvns	r3, r3
    2e6a:	68fa      	ldr	r2, [r7, #12]
    2e6c:	4013      	ands	r3, r2
    2e6e:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2e70:	68ba      	ldr	r2, [r7, #8]
    2e72:	697b      	ldr	r3, [r7, #20]
    2e74:	401a      	ands	r2, r3
    2e76:	687b      	ldr	r3, [r7, #4]
    2e78:	fa02 f303 	lsl.w	r3, r2, r3
    2e7c:	68fa      	ldr	r2, [r7, #12]
    2e7e:	4313      	orrs	r3, r2
    2e80:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2e82:	68fb      	ldr	r3, [r7, #12]
}
    2e84:	4618      	mov	r0, r3
    2e86:	3724      	adds	r7, #36	; 0x24
    2e88:	46bd      	mov	sp, r7
    2e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e8e:	4770      	bx	lr

00002e90 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2e90:	b480      	push	{r7}
    2e92:	b085      	sub	sp, #20
    2e94:	af00      	add	r7, sp, #0
    2e96:	60f8      	str	r0, [r7, #12]
    2e98:	7239      	strb	r1, [r7, #8]
    2e9a:	713a      	strb	r2, [r7, #4]
    2e9c:	703b      	strb	r3, [r7, #0]
			return value;
    2e9e:	68fb      	ldr	r3, [r7, #12]
    2ea0:	681b      	ldr	r3, [r3, #0]
    2ea2:	ee07 3a90 	vmov	s15, r3
		}
    2ea6:	eeb0 0a67 	vmov.f32	s0, s15
    2eaa:	3714      	adds	r7, #20
    2eac:	46bd      	mov	sp, r7
    2eae:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eb2:	4770      	bx	lr

00002eb4 <__static_initialization_and_destruction_0(int, int)>:
    2eb4:	b580      	push	{r7, lr}
    2eb6:	b082      	sub	sp, #8
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	f040 80c4 	bne.w	304e <__static_initialization_and_destruction_0(int, int)+0x19a>
    2ec6:	683b      	ldr	r3, [r7, #0]
    2ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2ecc:	4293      	cmp	r3, r2
    2ece:	f040 80be 	bne.w	304e <__static_initialization_and_destruction_0(int, int)+0x19a>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    2ed2:	4b61      	ldr	r3, [pc, #388]	; (3058 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    2ed4:	681b      	ldr	r3, [r3, #0]
    2ed6:	f003 0301 	and.w	r3, r3, #1
    2eda:	2b00      	cmp	r3, #0
    2edc:	d105      	bne.n	2eea <__static_initialization_and_destruction_0(int, int)+0x36>
    2ede:	4b5e      	ldr	r3, [pc, #376]	; (3058 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    2ee0:	2201      	movs	r2, #1
    2ee2:	601a      	str	r2, [r3, #0]
    2ee4:	4a5d      	ldr	r2, [pc, #372]	; (305c <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    2ee6:	4b5e      	ldr	r3, [pc, #376]	; (3060 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    2ee8:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    2eea:	4b5e      	ldr	r3, [pc, #376]	; (3064 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    2eec:	681b      	ldr	r3, [r3, #0]
    2eee:	f003 0301 	and.w	r3, r3, #1
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d105      	bne.n	2f02 <__static_initialization_and_destruction_0(int, int)+0x4e>
    2ef6:	4b5b      	ldr	r3, [pc, #364]	; (3064 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    2ef8:	2201      	movs	r2, #1
    2efa:	601a      	str	r2, [r3, #0]
    2efc:	4a5a      	ldr	r2, [pc, #360]	; (3068 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    2efe:	4b5b      	ldr	r3, [pc, #364]	; (306c <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    2f00:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    2f02:	4b5b      	ldr	r3, [pc, #364]	; (3070 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	f003 0301 	and.w	r3, r3, #1
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d105      	bne.n	2f1a <__static_initialization_and_destruction_0(int, int)+0x66>
    2f0e:	4b58      	ldr	r3, [pc, #352]	; (3070 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    2f10:	2201      	movs	r2, #1
    2f12:	601a      	str	r2, [r3, #0]
    };
    2f14:	4a57      	ldr	r2, [pc, #348]	; (3074 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    2f16:	4b58      	ldr	r3, [pc, #352]	; (3078 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    2f18:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    2f1a:	4b58      	ldr	r3, [pc, #352]	; (307c <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2f1c:	681b      	ldr	r3, [r3, #0]
    2f1e:	f003 0301 	and.w	r3, r3, #1
    2f22:	2b00      	cmp	r3, #0
    2f24:	d105      	bne.n	2f32 <__static_initialization_and_destruction_0(int, int)+0x7e>
    2f26:	4b55      	ldr	r3, [pc, #340]	; (307c <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2f28:	2201      	movs	r2, #1
    2f2a:	601a      	str	r2, [r3, #0]
    };
    2f2c:	4a54      	ldr	r2, [pc, #336]	; (3080 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    2f2e:	4b55      	ldr	r3, [pc, #340]	; (3084 <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    2f30:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    2f32:	4b55      	ldr	r3, [pc, #340]	; (3088 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2f34:	681b      	ldr	r3, [r3, #0]
    2f36:	f003 0301 	and.w	r3, r3, #1
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d105      	bne.n	2f4a <__static_initialization_and_destruction_0(int, int)+0x96>
    2f3e:	4b52      	ldr	r3, [pc, #328]	; (3088 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2f40:	2201      	movs	r2, #1
    2f42:	601a      	str	r2, [r3, #0]
    };
    2f44:	4a51      	ldr	r2, [pc, #324]	; (308c <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    2f46:	4b52      	ldr	r3, [pc, #328]	; (3090 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    2f48:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    2f4a:	4b52      	ldr	r3, [pc, #328]	; (3094 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2f4c:	681b      	ldr	r3, [r3, #0]
    2f4e:	f003 0301 	and.w	r3, r3, #1
    2f52:	2b00      	cmp	r3, #0
    2f54:	d105      	bne.n	2f62 <__static_initialization_and_destruction_0(int, int)+0xae>
    2f56:	4b4f      	ldr	r3, [pc, #316]	; (3094 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2f58:	2201      	movs	r2, #1
    2f5a:	601a      	str	r2, [r3, #0]
    2f5c:	4a4e      	ldr	r2, [pc, #312]	; (3098 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    2f5e:	4b4f      	ldr	r3, [pc, #316]	; (309c <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    2f60:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    2f62:	4b4f      	ldr	r3, [pc, #316]	; (30a0 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	f003 0301 	and.w	r3, r3, #1
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d106      	bne.n	2f7c <__static_initialization_and_destruction_0(int, int)+0xc8>
    2f6e:	4b4c      	ldr	r3, [pc, #304]	; (30a0 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2f70:	2201      	movs	r2, #1
    2f72:	601a      	str	r2, [r3, #0]
    2f74:	4b4b      	ldr	r3, [pc, #300]	; (30a4 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    2f76:	4618      	mov	r0, r3
    2f78:	f7fe feca 	bl	1d10 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    2f7c:	4b4a      	ldr	r3, [pc, #296]	; (30a8 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	f003 0301 	and.w	r3, r3, #1
    2f84:	2b00      	cmp	r3, #0
    2f86:	d114      	bne.n	2fb2 <__static_initialization_and_destruction_0(int, int)+0xfe>
    2f88:	4b47      	ldr	r3, [pc, #284]	; (30a8 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2f8a:	2201      	movs	r2, #1
    2f8c:	601a      	str	r2, [r3, #0]
  };
    2f8e:	4a47      	ldr	r2, [pc, #284]	; (30ac <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    2f90:	4b47      	ldr	r3, [pc, #284]	; (30b0 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2f92:	601a      	str	r2, [r3, #0]
    2f94:	4a47      	ldr	r2, [pc, #284]	; (30b4 <__static_initialization_and_destruction_0(int, int)+0x200>)
    2f96:	4b46      	ldr	r3, [pc, #280]	; (30b0 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2f98:	605a      	str	r2, [r3, #4]
    2f9a:	4a47      	ldr	r2, [pc, #284]	; (30b8 <__static_initialization_and_destruction_0(int, int)+0x204>)
    2f9c:	4b44      	ldr	r3, [pc, #272]	; (30b0 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2f9e:	609a      	str	r2, [r3, #8]
    2fa0:	4a46      	ldr	r2, [pc, #280]	; (30bc <__static_initialization_and_destruction_0(int, int)+0x208>)
    2fa2:	4b43      	ldr	r3, [pc, #268]	; (30b0 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2fa4:	60da      	str	r2, [r3, #12]
    2fa6:	4a46      	ldr	r2, [pc, #280]	; (30c0 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    2fa8:	4b41      	ldr	r3, [pc, #260]	; (30b0 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2faa:	611a      	str	r2, [r3, #16]
    2fac:	4a45      	ldr	r2, [pc, #276]	; (30c4 <__static_initialization_and_destruction_0(int, int)+0x210>)
    2fae:	4b40      	ldr	r3, [pc, #256]	; (30b0 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2fb0:	615a      	str	r2, [r3, #20]
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    2fb2:	4b45      	ldr	r3, [pc, #276]	; (30c8 <__static_initialization_and_destruction_0(int, int)+0x214>)
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	f003 0301 	and.w	r3, r3, #1
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d122      	bne.n	3004 <__static_initialization_and_destruction_0(int, int)+0x150>
    2fbe:	4b42      	ldr	r3, [pc, #264]	; (30c8 <__static_initialization_and_destruction_0(int, int)+0x214>)
    2fc0:	2201      	movs	r2, #1
    2fc2:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fc4:	4b41      	ldr	r3, [pc, #260]	; (30cc <__static_initialization_and_destruction_0(int, int)+0x218>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    2fc6:	4a42      	ldr	r2, [pc, #264]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fc8:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fca:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    2fcc:	4a40      	ldr	r2, [pc, #256]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fce:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fd0:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    2fd2:	4a3f      	ldr	r2, [pc, #252]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fd4:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fd6:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    2fd8:	4a3d      	ldr	r2, [pc, #244]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fda:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fdc:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    2fde:	4a3c      	ldr	r2, [pc, #240]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fe0:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fe2:	611a      	str	r2, [r3, #16]
    2fe4:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    2fe6:	4a3a      	ldr	r2, [pc, #232]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fe8:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2fea:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    2fec:	4a38      	ldr	r2, [pc, #224]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fee:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2ff0:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    2ff2:	4a37      	ldr	r2, [pc, #220]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2ff4:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2ff6:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    2ff8:	4a35      	ldr	r2, [pc, #212]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2ffa:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2ffc:	60da      	str	r2, [r3, #12]
    2ffe:	4a34      	ldr	r2, [pc, #208]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3000:	3234      	adds	r2, #52	; 0x34
    3002:	611a      	str	r2, [r3, #16]
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    3004:	4b33      	ldr	r3, [pc, #204]	; (30d4 <__static_initialization_and_destruction_0(int, int)+0x220>)
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	f003 0301 	and.w	r3, r3, #1
    300c:	2b00      	cmp	r3, #0
    300e:	d106      	bne.n	301e <__static_initialization_and_destruction_0(int, int)+0x16a>
    3010:	4b30      	ldr	r3, [pc, #192]	; (30d4 <__static_initialization_and_destruction_0(int, int)+0x220>)
    3012:	2201      	movs	r2, #1
    3014:	601a      	str	r2, [r3, #0]
    3016:	4b2e      	ldr	r3, [pc, #184]	; (30d0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3018:	461a      	mov	r2, r3
    301a:	4b2f      	ldr	r3, [pc, #188]	; (30d8 <__static_initialization_and_destruction_0(int, int)+0x224>)
    301c:	601a      	str	r2, [r3, #0]
    inline static const sjsu::lpc40xx::Pin kPwmPin5 =
        sjsu::lpc40xx::Pin::CreatePin<2, 5>();

   public:
    /// Definition of the PWM 0 peripheral.
    inline static const Peripheral_t kPwm0Peripheral = {
    301e:	4b2f      	ldr	r3, [pc, #188]	; (30dc <__static_initialization_and_destruction_0(int, int)+0x228>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	f003 0301 	and.w	r3, r3, #1
    3026:	2b00      	cmp	r3, #0
    3028:	d105      	bne.n	3036 <__static_initialization_and_destruction_0(int, int)+0x182>
    302a:	4b2c      	ldr	r3, [pc, #176]	; (30dc <__static_initialization_and_destruction_0(int, int)+0x228>)
    302c:	2201      	movs	r2, #1
    302e:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM0,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    3030:	4a2b      	ldr	r2, [pc, #172]	; (30e0 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    3032:	4b2c      	ldr	r3, [pc, #176]	; (30e4 <__static_initialization_and_destruction_0(int, int)+0x230>)
    3034:	601a      	str	r2, [r3, #0]
    /// Definition of the PWM 1 peripheral.
    inline static const Peripheral_t kPwm1Peripheral = {
    3036:	4b2c      	ldr	r3, [pc, #176]	; (30e8 <__static_initialization_and_destruction_0(int, int)+0x234>)
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	f003 0301 	and.w	r3, r3, #1
    303e:	2b00      	cmp	r3, #0
    3040:	d105      	bne.n	304e <__static_initialization_and_destruction_0(int, int)+0x19a>
    3042:	4b29      	ldr	r3, [pc, #164]	; (30e8 <__static_initialization_and_destruction_0(int, int)+0x234>)
    3044:	2201      	movs	r2, #1
    3046:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM1,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    3048:	4a28      	ldr	r2, [pc, #160]	; (30ec <__static_initialization_and_destruction_0(int, int)+0x238>)
    304a:	4b29      	ldr	r3, [pc, #164]	; (30f0 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    304c:	601a      	str	r2, [r3, #0]
    304e:	bf00      	nop
    3050:	3708      	adds	r7, #8
    3052:	46bd      	mov	sp, r7
    3054:	bd80      	pop	{r7, pc}
    3056:	bf00      	nop
    3058:	1000037c 	.word	0x1000037c
    305c:	4002c000 	.word	0x4002c000
    3060:	10000120 	.word	0x10000120
    3064:	10000380 	.word	0x10000380
    3068:	400fc000 	.word	0x400fc000
    306c:	10000124 	.word	0x10000124
    3070:	10000384 	.word	0x10000384
    3074:	40098000 	.word	0x40098000
    3078:	1000000c 	.word	0x1000000c
    307c:	10000388 	.word	0x10000388
    3080:	4009c000 	.word	0x4009c000
    3084:	10000020 	.word	0x10000020
    3088:	1000038c 	.word	0x1000038c
    308c:	400a4000 	.word	0x400a4000
    3090:	10000034 	.word	0x10000034
    3094:	10000390 	.word	0x10000390
    3098:	40034000 	.word	0x40034000
    309c:	10000128 	.word	0x10000128
    30a0:	10000394 	.word	0x10000394
    30a4:	1000012c 	.word	0x1000012c
    30a8:	10000398 	.word	0x10000398
    30ac:	20098000 	.word	0x20098000
    30b0:	1000022c 	.word	0x1000022c
    30b4:	20098020 	.word	0x20098020
    30b8:	20098040 	.word	0x20098040
    30bc:	20098060 	.word	0x20098060
    30c0:	20098080 	.word	0x20098080
    30c4:	200980a0 	.word	0x200980a0
    30c8:	1000039c 	.word	0x1000039c
    30cc:	10000344 	.word	0x10000344
    30d0:	40028080 	.word	0x40028080
    30d4:	100003a0 	.word	0x100003a0
    30d8:	1000036c 	.word	0x1000036c
    30dc:	100003a4 	.word	0x100003a4
    30e0:	40014000 	.word	0x40014000
    30e4:	1000004c 	.word	0x1000004c
    30e8:	100003a8 	.word	0x100003a8
    30ec:	40018000 	.word	0x40018000
    30f0:	10000054 	.word	0x10000054

000030f4 <_GLOBAL__sub_I_xUartTaskHandle>:
    30f4:	b580      	push	{r7, lr}
    30f6:	af00      	add	r7, sp, #0
    30f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    30fc:	2001      	movs	r0, #1
    30fe:	f7ff fed9 	bl	2eb4 <__static_initialization_and_destruction_0(int, int)>
    3102:	bd80      	pop	{r7, pc}

00003104 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    3104:	b480      	push	{r7}
    3106:	b087      	sub	sp, #28
    3108:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    310a:	2300      	movs	r3, #0
    310c:	617b      	str	r3, [r7, #20]
    310e:	697a      	ldr	r2, [r7, #20]
    3110:	4613      	mov	r3, r2
    3112:	005b      	lsls	r3, r3, #1
    3114:	4413      	add	r3, r2
    3116:	009b      	lsls	r3, r3, #2
    3118:	4a1f      	ldr	r2, [pc, #124]	; (3198 <sjsu::InitializeDataSection()+0x94>)
    311a:	4413      	add	r3, r2
    311c:	4a1f      	ldr	r2, [pc, #124]	; (319c <sjsu::InitializeDataSection()+0x98>)
    311e:	4293      	cmp	r3, r2
    3120:	d233      	bcs.n	318a <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    3122:	491d      	ldr	r1, [pc, #116]	; (3198 <sjsu::InitializeDataSection()+0x94>)
    3124:	697a      	ldr	r2, [r7, #20]
    3126:	4613      	mov	r3, r2
    3128:	005b      	lsls	r3, r3, #1
    312a:	4413      	add	r3, r2
    312c:	009b      	lsls	r3, r3, #2
    312e:	440b      	add	r3, r1
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    3134:	4918      	ldr	r1, [pc, #96]	; (3198 <sjsu::InitializeDataSection()+0x94>)
    3136:	697a      	ldr	r2, [r7, #20]
    3138:	4613      	mov	r3, r2
    313a:	005b      	lsls	r3, r3, #1
    313c:	4413      	add	r3, r2
    313e:	009b      	lsls	r3, r3, #2
    3140:	440b      	add	r3, r1
    3142:	685b      	ldr	r3, [r3, #4]
    3144:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    3146:	4914      	ldr	r1, [pc, #80]	; (3198 <sjsu::InitializeDataSection()+0x94>)
    3148:	697a      	ldr	r2, [r7, #20]
    314a:	4613      	mov	r3, r2
    314c:	005b      	lsls	r3, r3, #1
    314e:	4413      	add	r3, r2
    3150:	009b      	lsls	r3, r3, #2
    3152:	440b      	add	r3, r1
    3154:	3308      	adds	r3, #8
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    315a:	2300      	movs	r3, #0
    315c:	613b      	str	r3, [r7, #16]
    315e:	693a      	ldr	r2, [r7, #16]
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	429a      	cmp	r2, r3
    3164:	d20d      	bcs.n	3182 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    3166:	693b      	ldr	r3, [r7, #16]
    3168:	009b      	lsls	r3, r3, #2
    316a:	68fa      	ldr	r2, [r7, #12]
    316c:	441a      	add	r2, r3
    316e:	693b      	ldr	r3, [r7, #16]
    3170:	009b      	lsls	r3, r3, #2
    3172:	68b9      	ldr	r1, [r7, #8]
    3174:	440b      	add	r3, r1
    3176:	6812      	ldr	r2, [r2, #0]
    3178:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    317a:	693b      	ldr	r3, [r7, #16]
    317c:	3301      	adds	r3, #1
    317e:	613b      	str	r3, [r7, #16]
    3180:	e7ed      	b.n	315e <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    3182:	697b      	ldr	r3, [r7, #20]
    3184:	3301      	adds	r3, #1
    3186:	617b      	str	r3, [r7, #20]
    3188:	e7c1      	b.n	310e <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    318a:	bf00      	nop
    318c:	371c      	adds	r7, #28
    318e:	46bd      	mov	sp, r7
    3190:	f85d 7b04 	ldr.w	r7, [sp], #4
    3194:	4770      	bx	lr
    3196:	bf00      	nop
    3198:	000000e4 	.word	0x000000e4
    319c:	000000fc 	.word	0x000000fc

000031a0 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    31a0:	b480      	push	{r7}
    31a2:	b085      	sub	sp, #20
    31a4:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    31a6:	2300      	movs	r3, #0
    31a8:	60fb      	str	r3, [r7, #12]
    31aa:	68fb      	ldr	r3, [r7, #12]
    31ac:	00db      	lsls	r3, r3, #3
    31ae:	4a15      	ldr	r2, [pc, #84]	; (3204 <sjsu::InitializeBssSection()+0x64>)
    31b0:	4413      	add	r3, r2
    31b2:	4a15      	ldr	r2, [pc, #84]	; (3208 <sjsu::InitializeBssSection()+0x68>)
    31b4:	4293      	cmp	r3, r2
    31b6:	d21e      	bcs.n	31f6 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    31b8:	4a12      	ldr	r2, [pc, #72]	; (3204 <sjsu::InitializeBssSection()+0x64>)
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    31c0:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    31c2:	4a10      	ldr	r2, [pc, #64]	; (3204 <sjsu::InitializeBssSection()+0x64>)
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	00db      	lsls	r3, r3, #3
    31c8:	4413      	add	r3, r2
    31ca:	685b      	ldr	r3, [r3, #4]
    31cc:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    31ce:	2300      	movs	r3, #0
    31d0:	60bb      	str	r3, [r7, #8]
    31d2:	68ba      	ldr	r2, [r7, #8]
    31d4:	683b      	ldr	r3, [r7, #0]
    31d6:	429a      	cmp	r2, r3
    31d8:	d209      	bcs.n	31ee <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    31da:	68bb      	ldr	r3, [r7, #8]
    31dc:	009b      	lsls	r3, r3, #2
    31de:	687a      	ldr	r2, [r7, #4]
    31e0:	4413      	add	r3, r2
    31e2:	2200      	movs	r2, #0
    31e4:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    31e6:	68bb      	ldr	r3, [r7, #8]
    31e8:	3301      	adds	r3, #1
    31ea:	60bb      	str	r3, [r7, #8]
    31ec:	e7f1      	b.n	31d2 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	3301      	adds	r3, #1
    31f2:	60fb      	str	r3, [r7, #12]
    31f4:	e7d9      	b.n	31aa <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    31f6:	bf00      	nop
    31f8:	3714      	adds	r7, #20
    31fa:	46bd      	mov	sp, r7
    31fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3200:	4770      	bx	lr
    3202:	bf00      	nop
    3204:	000000fc 	.word	0x000000fc
    3208:	0000010c 	.word	0x0000010c

0000320c <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    320c:	b580      	push	{r7, lr}
    320e:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    3210:	f7ff ff78 	bl	3104 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    3214:	f7ff ffc4 	bl	31a0 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    3218:	f005 fa1a 	bl	8650 <__libc_init_array>
}
    321c:	bf00      	nop
    321e:	bd80      	pop	{r7, pc}

00003220 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    3220:	b580      	push	{r7, lr}
    3222:	b08c      	sub	sp, #48	; 0x30
    3224:	af02      	add	r7, sp, #8
    3226:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	681b      	ldr	r3, [r3, #0]
    322c:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	689b      	ldr	r3, [r3, #8]
    3238:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	68db      	ldr	r3, [r3, #12]
    323e:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	691b      	ldr	r3, [r3, #16]
    3244:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	695b      	ldr	r3, [r3, #20]
    324a:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	699b      	ldr	r3, [r3, #24]
    3250:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	69db      	ldr	r3, [r3, #28]
    3256:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    3258:	480d      	ldr	r0, [pc, #52]	; (3290 <GetRegistersFromStack+0x70>)
    325a:	f002 f923 	bl	54a4 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    325e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3260:	6a3a      	ldr	r2, [r7, #32]
    3262:	69f8      	ldr	r0, [r7, #28]
    3264:	69bb      	ldr	r3, [r7, #24]
    3266:	9300      	str	r3, [sp, #0]
    3268:	4603      	mov	r3, r0
    326a:	480a      	ldr	r0, [pc, #40]	; (3294 <GetRegistersFromStack+0x74>)
    326c:	f002 f91a 	bl	54a4 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    3270:	6979      	ldr	r1, [r7, #20]
    3272:	693a      	ldr	r2, [r7, #16]
    3274:	68f8      	ldr	r0, [r7, #12]
    3276:	68bb      	ldr	r3, [r7, #8]
    3278:	9300      	str	r3, [sp, #0]
    327a:	4603      	mov	r3, r0
    327c:	4806      	ldr	r0, [pc, #24]	; (3298 <GetRegistersFromStack+0x78>)
    327e:	f002 f911 	bl	54a4 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    3282:	68fb      	ldr	r3, [r7, #12]
    3284:	4619      	mov	r1, r3
    3286:	2001      	movs	r0, #1
    3288:	f7fd f97a 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    328c:	e7fe      	b.n	328c <GetRegistersFromStack+0x6c>
    328e:	bf00      	nop
    3290:	000096e8 	.word	0x000096e8
    3294:	00009714 	.word	0x00009714
    3298:	00009748 	.word	0x00009748

0000329c <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    329c:	b480      	push	{r7}
    329e:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    32a0:	f01e 0f04 	tst.w	lr, #4
    32a4:	bf0c      	ite	eq
    32a6:	f3ef 8008 	mrseq	r0, MSP
    32aa:	f3ef 8009 	mrsne	r0, PSP
    32ae:	6981      	ldr	r1, [r0, #24]
    32b0:	4a00      	ldr	r2, [pc, #0]	; (32b4 <handler2_address_const>)
    32b2:	4710      	bx	r2

000032b4 <handler2_address_const>:
    32b4:	00003221 	.word	0x00003221
    }
  }
    32b8:	bf00      	nop
    32ba:	46bd      	mov	sp, r7
    32bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32c0:	4770      	bx	lr
    32c2:	Address 0x00000000000032c2 is out of bounds.


000032c4 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    32ca:	4b16      	ldr	r3, [pc, #88]	; (3324 <ArmResetHandler+0x60>)
    32cc:	60fb      	str	r3, [r7, #12]
    32ce:	68fb      	ldr	r3, [r7, #12]
    32d0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    32d2:	683b      	ldr	r3, [r7, #0]
    32d4:	f383 8809 	msr	PSP, r3
    32d8:	68fb      	ldr	r3, [r7, #12]
    32da:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    32e2:	f7ff ff93 	bl	320c <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    32e6:	4b10      	ldr	r3, [pc, #64]	; (3328 <ArmResetHandler+0x64>)
    32e8:	681b      	ldr	r3, [r3, #0]
    32ea:	f003 0301 	and.w	r3, r3, #1
    32ee:	2b00      	cmp	r3, #0
    32f0:	bf14      	ite	ne
    32f2:	2301      	movne	r3, #1
    32f4:	2300      	moveq	r3, #0
    32f6:	b2db      	uxtb	r3, r3
    32f8:	2b00      	cmp	r3, #0
    32fa:	d001      	beq.n	3300 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    32fc:	f002 f8f4 	bl	54e8 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    3300:	f002 fc5c 	bl	5bbc <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    3304:	f7ff facc 	bl	28a0 <main>
    3308:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    330a:	68bb      	ldr	r3, [r7, #8]
    330c:	2b00      	cmp	r3, #0
    330e:	db04      	blt.n	331a <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    3310:	68b9      	ldr	r1, [r7, #8]
    3312:	4806      	ldr	r0, [pc, #24]	; (332c <ArmResetHandler+0x68>)
    3314:	f002 f8c6 	bl	54a4 <printf>
    3318:	e003      	b.n	3322 <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    331a:	68b9      	ldr	r1, [r7, #8]
    331c:	4804      	ldr	r0, [pc, #16]	; (3330 <ArmResetHandler+0x6c>)
    331e:	f002 f8c1 	bl	54a4 <printf>
    3322:	e7fe      	b.n	3322 <ArmResetHandler+0x5e>
    3324:	10010000 	.word	0x10010000
    3328:	e000edf0 	.word	0xe000edf0
    332c:	00009780 	.word	0x00009780
    3330:	000097b4 	.word	0x000097b4

00003334 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    3334:	b580      	push	{r7, lr}
    3336:	b082      	sub	sp, #8
    3338:	af00      	add	r7, sp, #0
    333a:	6078      	str	r0, [r7, #4]
    333c:	6039      	str	r1, [r7, #0]
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	2b01      	cmp	r3, #1
    3342:	d111      	bne.n	3368 <__static_initialization_and_destruction_0(int, int)+0x34>
    3344:	683b      	ldr	r3, [r7, #0]
    3346:	f64f 72ff 	movw	r2, #65535	; 0xffff
    334a:	4293      	cmp	r3, r2
    334c:	d10c      	bne.n	3368 <__static_initialization_and_destruction_0(int, int)+0x34>
    334e:	4b08      	ldr	r3, [pc, #32]	; (3370 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    3350:	681b      	ldr	r3, [r3, #0]
    3352:	f003 0301 	and.w	r3, r3, #1
    3356:	2b00      	cmp	r3, #0
    3358:	d106      	bne.n	3368 <__static_initialization_and_destruction_0(int, int)+0x34>
    335a:	4b05      	ldr	r3, [pc, #20]	; (3370 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    335c:	2201      	movs	r2, #1
    335e:	601a      	str	r2, [r3, #0]
    3360:	4b04      	ldr	r3, [pc, #16]	; (3374 <__static_initialization_and_destruction_0(int, int)+0x40>)
    3362:	4618      	mov	r0, r3
    3364:	f7fe fcd4 	bl	1d10 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    3368:	bf00      	nop
    336a:	3708      	adds	r7, #8
    336c:	46bd      	mov	sp, r7
    336e:	bd80      	pop	{r7, pc}
    3370:	10000394 	.word	0x10000394
    3374:	1000012c 	.word	0x1000012c

00003378 <_GLOBAL__sub_I_GetRegistersFromStack>:
    3378:	b580      	push	{r7, lr}
    337a:	af00      	add	r7, sp, #0
    337c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3380:	2001      	movs	r0, #1
    3382:	f7ff ffd7 	bl	3334 <__static_initialization_and_destruction_0(int, int)>
    3386:	bd80      	pop	{r7, pc}

00003388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3388:	b480      	push	{r7}
    338a:	b083      	sub	sp, #12
    338c:	af00      	add	r7, sp, #0
    338e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	f103 0208 	add.w	r2, r3, #8
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	f103 0208 	add.w	r2, r3, #8
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	f103 0208 	add.w	r2, r3, #8
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	2200      	movs	r2, #0
    33ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    33bc:	bf00      	nop
    33be:	370c      	adds	r7, #12
    33c0:	46bd      	mov	sp, r7
    33c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33c6:	4770      	bx	lr

000033c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    33c8:	b480      	push	{r7}
    33ca:	b083      	sub	sp, #12
    33cc:	af00      	add	r7, sp, #0
    33ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	2200      	movs	r2, #0
    33d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    33d6:	bf00      	nop
    33d8:	370c      	adds	r7, #12
    33da:	46bd      	mov	sp, r7
    33dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    33e0:	4770      	bx	lr

000033e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    33e2:	b480      	push	{r7}
    33e4:	b085      	sub	sp, #20
    33e6:	af00      	add	r7, sp, #0
    33e8:	6078      	str	r0, [r7, #4]
    33ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	685b      	ldr	r3, [r3, #4]
    33f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    33f2:	683b      	ldr	r3, [r7, #0]
    33f4:	68fa      	ldr	r2, [r7, #12]
    33f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    33f8:	68fb      	ldr	r3, [r7, #12]
    33fa:	689a      	ldr	r2, [r3, #8]
    33fc:	683b      	ldr	r3, [r7, #0]
    33fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3400:	68fb      	ldr	r3, [r7, #12]
    3402:	689b      	ldr	r3, [r3, #8]
    3404:	683a      	ldr	r2, [r7, #0]
    3406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	683a      	ldr	r2, [r7, #0]
    340c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    340e:	683b      	ldr	r3, [r7, #0]
    3410:	687a      	ldr	r2, [r7, #4]
    3412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	1c5a      	adds	r2, r3, #1
    341a:	687b      	ldr	r3, [r7, #4]
    341c:	601a      	str	r2, [r3, #0]
}
    341e:	bf00      	nop
    3420:	3714      	adds	r7, #20
    3422:	46bd      	mov	sp, r7
    3424:	f85d 7b04 	ldr.w	r7, [sp], #4
    3428:	4770      	bx	lr

0000342a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    342a:	b480      	push	{r7}
    342c:	b085      	sub	sp, #20
    342e:	af00      	add	r7, sp, #0
    3430:	6078      	str	r0, [r7, #4]
    3432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3434:	683b      	ldr	r3, [r7, #0]
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    343a:	68bb      	ldr	r3, [r7, #8]
    343c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3440:	d103      	bne.n	344a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3442:	687b      	ldr	r3, [r7, #4]
    3444:	691b      	ldr	r3, [r3, #16]
    3446:	60fb      	str	r3, [r7, #12]
    3448:	e00c      	b.n	3464 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    344a:	687b      	ldr	r3, [r7, #4]
    344c:	3308      	adds	r3, #8
    344e:	60fb      	str	r3, [r7, #12]
    3450:	e002      	b.n	3458 <vListInsert+0x2e>
    3452:	68fb      	ldr	r3, [r7, #12]
    3454:	685b      	ldr	r3, [r3, #4]
    3456:	60fb      	str	r3, [r7, #12]
    3458:	68fb      	ldr	r3, [r7, #12]
    345a:	685b      	ldr	r3, [r3, #4]
    345c:	681b      	ldr	r3, [r3, #0]
    345e:	68ba      	ldr	r2, [r7, #8]
    3460:	429a      	cmp	r2, r3
    3462:	d2f6      	bcs.n	3452 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	685a      	ldr	r2, [r3, #4]
    3468:	683b      	ldr	r3, [r7, #0]
    346a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    346c:	683b      	ldr	r3, [r7, #0]
    346e:	685b      	ldr	r3, [r3, #4]
    3470:	683a      	ldr	r2, [r7, #0]
    3472:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3474:	683b      	ldr	r3, [r7, #0]
    3476:	68fa      	ldr	r2, [r7, #12]
    3478:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    347a:	68fb      	ldr	r3, [r7, #12]
    347c:	683a      	ldr	r2, [r7, #0]
    347e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3480:	683b      	ldr	r3, [r7, #0]
    3482:	687a      	ldr	r2, [r7, #4]
    3484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	1c5a      	adds	r2, r3, #1
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	601a      	str	r2, [r3, #0]
}
    3490:	bf00      	nop
    3492:	3714      	adds	r7, #20
    3494:	46bd      	mov	sp, r7
    3496:	f85d 7b04 	ldr.w	r7, [sp], #4
    349a:	4770      	bx	lr

0000349c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    349c:	b480      	push	{r7}
    349e:	b085      	sub	sp, #20
    34a0:	af00      	add	r7, sp, #0
    34a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	691b      	ldr	r3, [r3, #16]
    34a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	685b      	ldr	r3, [r3, #4]
    34ae:	687a      	ldr	r2, [r7, #4]
    34b0:	6892      	ldr	r2, [r2, #8]
    34b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	689b      	ldr	r3, [r3, #8]
    34b8:	687a      	ldr	r2, [r7, #4]
    34ba:	6852      	ldr	r2, [r2, #4]
    34bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    34be:	68fb      	ldr	r3, [r7, #12]
    34c0:	685b      	ldr	r3, [r3, #4]
    34c2:	687a      	ldr	r2, [r7, #4]
    34c4:	429a      	cmp	r2, r3
    34c6:	d103      	bne.n	34d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	689a      	ldr	r2, [r3, #8]
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	2200      	movs	r2, #0
    34d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    34d6:	68fb      	ldr	r3, [r7, #12]
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	1e5a      	subs	r2, r3, #1
    34dc:	68fb      	ldr	r3, [r7, #12]
    34de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    34e0:	68fb      	ldr	r3, [r7, #12]
    34e2:	681b      	ldr	r3, [r3, #0]
}
    34e4:	4618      	mov	r0, r3
    34e6:	3714      	adds	r7, #20
    34e8:	46bd      	mov	sp, r7
    34ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    34ee:	4770      	bx	lr

000034f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    34f0:	b580      	push	{r7, lr}
    34f2:	b08a      	sub	sp, #40	; 0x28
    34f4:	af04      	add	r7, sp, #16
    34f6:	60f8      	str	r0, [r7, #12]
    34f8:	60b9      	str	r1, [r7, #8]
    34fa:	607a      	str	r2, [r7, #4]
    34fc:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    34fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3500:	2b00      	cmp	r3, #0
    3502:	d01e      	beq.n	3542 <xTaskCreateStatic+0x52>
    3504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3506:	2b00      	cmp	r3, #0
    3508:	d01b      	beq.n	3542 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    350c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    350e:	697b      	ldr	r3, [r7, #20]
    3510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3512:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    3514:	697b      	ldr	r3, [r7, #20]
    3516:	2202      	movs	r2, #2
    3518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    351c:	2300      	movs	r3, #0
    351e:	9303      	str	r3, [sp, #12]
    3520:	697b      	ldr	r3, [r7, #20]
    3522:	9302      	str	r3, [sp, #8]
    3524:	f107 0310 	add.w	r3, r7, #16
    3528:	9301      	str	r3, [sp, #4]
    352a:	6a3b      	ldr	r3, [r7, #32]
    352c:	9300      	str	r3, [sp, #0]
    352e:	683b      	ldr	r3, [r7, #0]
    3530:	687a      	ldr	r2, [r7, #4]
    3532:	68b9      	ldr	r1, [r7, #8]
    3534:	68f8      	ldr	r0, [r7, #12]
    3536:	f000 f850 	bl	35da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    353a:	6978      	ldr	r0, [r7, #20]
    353c:	f000 f8c8 	bl	36d0 <prvAddNewTaskToReadyList>
    3540:	e001      	b.n	3546 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
    3542:	2300      	movs	r3, #0
    3544:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
    3546:	693b      	ldr	r3, [r7, #16]
	}
    3548:	4618      	mov	r0, r3
    354a:	3718      	adds	r7, #24
    354c:	46bd      	mov	sp, r7
    354e:	bd80      	pop	{r7, pc}

00003550 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    3550:	b580      	push	{r7, lr}
    3552:	b08c      	sub	sp, #48	; 0x30
    3554:	af04      	add	r7, sp, #16
    3556:	60f8      	str	r0, [r7, #12]
    3558:	60b9      	str	r1, [r7, #8]
    355a:	603b      	str	r3, [r7, #0]
    355c:	4613      	mov	r3, r2
    355e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3560:	88fb      	ldrh	r3, [r7, #6]
    3562:	009b      	lsls	r3, r3, #2
    3564:	4618      	mov	r0, r3
    3566:	f000 fde5 	bl	4134 <pvPortMalloc>
    356a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    356c:	697b      	ldr	r3, [r7, #20]
    356e:	2b00      	cmp	r3, #0
    3570:	d00e      	beq.n	3590 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3572:	2060      	movs	r0, #96	; 0x60
    3574:	f000 fdde 	bl	4134 <pvPortMalloc>
    3578:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    357a:	69fb      	ldr	r3, [r7, #28]
    357c:	2b00      	cmp	r3, #0
    357e:	d003      	beq.n	3588 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3580:	69fb      	ldr	r3, [r7, #28]
    3582:	697a      	ldr	r2, [r7, #20]
    3584:	631a      	str	r2, [r3, #48]	; 0x30
    3586:	e005      	b.n	3594 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3588:	6978      	ldr	r0, [r7, #20]
    358a:	f000 fde5 	bl	4158 <vPortFree>
    358e:	e001      	b.n	3594 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    3590:	2300      	movs	r3, #0
    3592:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3594:	69fb      	ldr	r3, [r7, #28]
    3596:	2b00      	cmp	r3, #0
    3598:	d017      	beq.n	35ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    359a:	69fb      	ldr	r3, [r7, #28]
    359c:	2200      	movs	r2, #0
    359e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    35a2:	88fa      	ldrh	r2, [r7, #6]
    35a4:	2300      	movs	r3, #0
    35a6:	9303      	str	r3, [sp, #12]
    35a8:	69fb      	ldr	r3, [r7, #28]
    35aa:	9302      	str	r3, [sp, #8]
    35ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35ae:	9301      	str	r3, [sp, #4]
    35b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35b2:	9300      	str	r3, [sp, #0]
    35b4:	683b      	ldr	r3, [r7, #0]
    35b6:	68b9      	ldr	r1, [r7, #8]
    35b8:	68f8      	ldr	r0, [r7, #12]
    35ba:	f000 f80e 	bl	35da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    35be:	69f8      	ldr	r0, [r7, #28]
    35c0:	f000 f886 	bl	36d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    35c4:	2301      	movs	r3, #1
    35c6:	61bb      	str	r3, [r7, #24]
    35c8:	e002      	b.n	35d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    35ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    35ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    35d0:	69bb      	ldr	r3, [r7, #24]
	}
    35d2:	4618      	mov	r0, r3
    35d4:	3720      	adds	r7, #32
    35d6:	46bd      	mov	sp, r7
    35d8:	bd80      	pop	{r7, pc}

000035da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    35da:	b580      	push	{r7, lr}
    35dc:	b086      	sub	sp, #24
    35de:	af00      	add	r7, sp, #0
    35e0:	60f8      	str	r0, [r7, #12]
    35e2:	60b9      	str	r1, [r7, #8]
    35e4:	607a      	str	r2, [r7, #4]
    35e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    35e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	009b      	lsls	r3, r3, #2
    35f0:	461a      	mov	r2, r3
    35f2:	21a5      	movs	r1, #165	; 0xa5
    35f4:	f005 f86b 	bl	86ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    35f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3602:	3b01      	subs	r3, #1
    3604:	009b      	lsls	r3, r3, #2
    3606:	4413      	add	r3, r2
    3608:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    360a:	693b      	ldr	r3, [r7, #16]
    360c:	f023 0307 	bic.w	r3, r3, #7
    3610:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3612:	2300      	movs	r3, #0
    3614:	617b      	str	r3, [r7, #20]
    3616:	e012      	b.n	363e <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3618:	68ba      	ldr	r2, [r7, #8]
    361a:	697b      	ldr	r3, [r7, #20]
    361c:	4413      	add	r3, r2
    361e:	7819      	ldrb	r1, [r3, #0]
    3620:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3622:	697b      	ldr	r3, [r7, #20]
    3624:	4413      	add	r3, r2
    3626:	3334      	adds	r3, #52	; 0x34
    3628:	460a      	mov	r2, r1
    362a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    362c:	68ba      	ldr	r2, [r7, #8]
    362e:	697b      	ldr	r3, [r7, #20]
    3630:	4413      	add	r3, r2
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	2b00      	cmp	r3, #0
    3636:	d006      	beq.n	3646 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3638:	697b      	ldr	r3, [r7, #20]
    363a:	3301      	adds	r3, #1
    363c:	617b      	str	r3, [r7, #20]
    363e:	697b      	ldr	r3, [r7, #20]
    3640:	2b0f      	cmp	r3, #15
    3642:	d9e9      	bls.n	3618 <prvInitialiseNewTask+0x3e>
    3644:	e000      	b.n	3648 <prvInitialiseNewTask+0x6e>
		{
			break;
    3646:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3648:	6abb      	ldr	r3, [r7, #40]	; 0x28
    364a:	2200      	movs	r2, #0
    364c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3650:	6a3b      	ldr	r3, [r7, #32]
    3652:	2b04      	cmp	r3, #4
    3654:	d901      	bls.n	365a <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3656:	2304      	movs	r3, #4
    3658:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    365c:	6a3a      	ldr	r2, [r7, #32]
    365e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    3660:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3662:	6a3a      	ldr	r2, [r7, #32]
    3664:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    3666:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3668:	2200      	movs	r2, #0
    366a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    366e:	3304      	adds	r3, #4
    3670:	4618      	mov	r0, r3
    3672:	f7ff fea9 	bl	33c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3678:	3318      	adds	r3, #24
    367a:	4618      	mov	r0, r3
    367c:	f7ff fea4 	bl	33c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    3680:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3682:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3684:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3686:	6a3b      	ldr	r3, [r7, #32]
    3688:	f1c3 0205 	rsb	r2, r3, #5
    368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    368e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    3690:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3692:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3694:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    3696:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3698:	2200      	movs	r2, #0
    369a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    369e:	2200      	movs	r2, #0
    36a0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    36a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36a4:	2200      	movs	r2, #0
    36a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    36aa:	683a      	ldr	r2, [r7, #0]
    36ac:	68f9      	ldr	r1, [r7, #12]
    36ae:	6938      	ldr	r0, [r7, #16]
    36b0:	f002 fb88 	bl	5dc4 <pxPortInitialiseStack>
    36b4:	4602      	mov	r2, r0
    36b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36b8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    36ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36bc:	2b00      	cmp	r3, #0
    36be:	d002      	beq.n	36c6 <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    36c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    36c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    36c6:	bf00      	nop
    36c8:	3718      	adds	r7, #24
    36ca:	46bd      	mov	sp, r7
    36cc:	bd80      	pop	{r7, pc}
    36ce:	Address 0x00000000000036ce is out of bounds.


000036d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    36d0:	b580      	push	{r7, lr}
    36d2:	b082      	sub	sp, #8
    36d4:	af00      	add	r7, sp, #0
    36d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    36d8:	f002 fc14 	bl	5f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    36dc:	4b2c      	ldr	r3, [pc, #176]	; (3790 <prvAddNewTaskToReadyList+0xc0>)
    36de:	681b      	ldr	r3, [r3, #0]
    36e0:	3301      	adds	r3, #1
    36e2:	4a2b      	ldr	r2, [pc, #172]	; (3790 <prvAddNewTaskToReadyList+0xc0>)
    36e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    36e6:	4b2b      	ldr	r3, [pc, #172]	; (3794 <prvAddNewTaskToReadyList+0xc4>)
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d109      	bne.n	3702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    36ee:	4a29      	ldr	r2, [pc, #164]	; (3794 <prvAddNewTaskToReadyList+0xc4>)
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    36f4:	4b26      	ldr	r3, [pc, #152]	; (3790 <prvAddNewTaskToReadyList+0xc0>)
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	2b01      	cmp	r3, #1
    36fa:	d110      	bne.n	371e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    36fc:	f000 fb82 	bl	3e04 <prvInitialiseTaskLists>
    3700:	e00d      	b.n	371e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3702:	4b25      	ldr	r3, [pc, #148]	; (3798 <prvAddNewTaskToReadyList+0xc8>)
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	2b00      	cmp	r3, #0
    3708:	d109      	bne.n	371e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    370a:	4b22      	ldr	r3, [pc, #136]	; (3794 <prvAddNewTaskToReadyList+0xc4>)
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3714:	429a      	cmp	r2, r3
    3716:	d802      	bhi.n	371e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    3718:	4a1e      	ldr	r2, [pc, #120]	; (3794 <prvAddNewTaskToReadyList+0xc4>)
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    371e:	4b1f      	ldr	r3, [pc, #124]	; (379c <prvAddNewTaskToReadyList+0xcc>)
    3720:	681b      	ldr	r3, [r3, #0]
    3722:	3301      	adds	r3, #1
    3724:	4a1d      	ldr	r2, [pc, #116]	; (379c <prvAddNewTaskToReadyList+0xcc>)
    3726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    3728:	4b1c      	ldr	r3, [pc, #112]	; (379c <prvAddNewTaskToReadyList+0xcc>)
    372a:	681a      	ldr	r2, [r3, #0]
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3734:	2201      	movs	r2, #1
    3736:	409a      	lsls	r2, r3
    3738:	4b19      	ldr	r3, [pc, #100]	; (37a0 <prvAddNewTaskToReadyList+0xd0>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	4313      	orrs	r3, r2
    373e:	4a18      	ldr	r2, [pc, #96]	; (37a0 <prvAddNewTaskToReadyList+0xd0>)
    3740:	6013      	str	r3, [r2, #0]
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3746:	4613      	mov	r3, r2
    3748:	009b      	lsls	r3, r3, #2
    374a:	4413      	add	r3, r2
    374c:	009b      	lsls	r3, r3, #2
    374e:	4a15      	ldr	r2, [pc, #84]	; (37a4 <prvAddNewTaskToReadyList+0xd4>)
    3750:	441a      	add	r2, r3
    3752:	687b      	ldr	r3, [r7, #4]
    3754:	3304      	adds	r3, #4
    3756:	4619      	mov	r1, r3
    3758:	4610      	mov	r0, r2
    375a:	f7ff fe42 	bl	33e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    375e:	f002 fbeb 	bl	5f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    3762:	4b0d      	ldr	r3, [pc, #52]	; (3798 <prvAddNewTaskToReadyList+0xc8>)
    3764:	681b      	ldr	r3, [r3, #0]
    3766:	2b00      	cmp	r3, #0
    3768:	d00e      	beq.n	3788 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    376a:	4b0a      	ldr	r3, [pc, #40]	; (3794 <prvAddNewTaskToReadyList+0xc4>)
    376c:	681b      	ldr	r3, [r3, #0]
    376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3774:	429a      	cmp	r2, r3
    3776:	d207      	bcs.n	3788 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
    3778:	4b0b      	ldr	r3, [pc, #44]	; (37a8 <prvAddNewTaskToReadyList+0xd8>)
    377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    377e:	601a      	str	r2, [r3, #0]
    3780:	f3bf 8f4f 	dsb	sy
    3784:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3788:	bf00      	nop
    378a:	3708      	adds	r7, #8
    378c:	46bd      	mov	sp, r7
    378e:	bd80      	pop	{r7, pc}
    3790:	10000484 	.word	0x10000484
    3794:	100003ac 	.word	0x100003ac
    3798:	10000490 	.word	0x10000490
    379c:	100004a0 	.word	0x100004a0
    37a0:	1000048c 	.word	0x1000048c
    37a4:	100003b0 	.word	0x100003b0
    37a8:	e000ed04 	.word	0xe000ed04

000037ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    37ac:	b580      	push	{r7, lr}
    37ae:	b084      	sub	sp, #16
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    37b4:	2300      	movs	r3, #0
    37b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d008      	beq.n	37d0 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    37be:	f000 f86f 	bl	38a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    37c2:	2100      	movs	r1, #0
    37c4:	6878      	ldr	r0, [r7, #4]
    37c6:	f000 fc4f 	bl	4068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    37ca:	f000 f877 	bl	38bc <xTaskResumeAll>
    37ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    37d0:	68fb      	ldr	r3, [r7, #12]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d107      	bne.n	37e6 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    37d6:	4b06      	ldr	r3, [pc, #24]	; (37f0 <vTaskDelay+0x44>)
    37d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    37dc:	601a      	str	r2, [r3, #0]
    37de:	f3bf 8f4f 	dsb	sy
    37e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    37e6:	bf00      	nop
    37e8:	3710      	adds	r7, #16
    37ea:	46bd      	mov	sp, r7
    37ec:	bd80      	pop	{r7, pc}
    37ee:	bf00      	nop
    37f0:	e000ed04 	.word	0xe000ed04

000037f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b08a      	sub	sp, #40	; 0x28
    37f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    37fa:	2300      	movs	r3, #0
    37fc:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    37fe:	2300      	movs	r3, #0
    3800:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    3802:	1d3a      	adds	r2, r7, #4
    3804:	f107 0108 	add.w	r1, r7, #8
    3808:	f107 030c 	add.w	r3, r7, #12
    380c:	4618      	mov	r0, r3
    380e:	f002 fc19 	bl	6044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    3812:	6879      	ldr	r1, [r7, #4]
    3814:	68bb      	ldr	r3, [r7, #8]
    3816:	68fa      	ldr	r2, [r7, #12]
    3818:	9202      	str	r2, [sp, #8]
    381a:	9301      	str	r3, [sp, #4]
    381c:	2300      	movs	r3, #0
    381e:	9300      	str	r3, [sp, #0]
    3820:	2300      	movs	r3, #0
    3822:	460a      	mov	r2, r1
    3824:	4918      	ldr	r1, [pc, #96]	; (3888 <vTaskStartScheduler+0x94>)
    3826:	4819      	ldr	r0, [pc, #100]	; (388c <vTaskStartScheduler+0x98>)
    3828:	f7ff fe62 	bl	34f0 <xTaskCreateStatic>
    382c:	4602      	mov	r2, r0
    382e:	4b18      	ldr	r3, [pc, #96]	; (3890 <vTaskStartScheduler+0x9c>)
    3830:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    3832:	4b17      	ldr	r3, [pc, #92]	; (3890 <vTaskStartScheduler+0x9c>)
    3834:	681b      	ldr	r3, [r3, #0]
    3836:	2b00      	cmp	r3, #0
    3838:	d002      	beq.n	3840 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
    383a:	2301      	movs	r3, #1
    383c:	617b      	str	r3, [r7, #20]
    383e:	e001      	b.n	3844 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    3840:	2300      	movs	r3, #0
    3842:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    3844:	697b      	ldr	r3, [r7, #20]
    3846:	2b01      	cmp	r3, #1
    3848:	d102      	bne.n	3850 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
    384a:	f002 fc3b 	bl	60c4 <xTimerCreateTimerTask>
    384e:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3850:	697b      	ldr	r3, [r7, #20]
    3852:	2b01      	cmp	r3, #1
    3854:	d114      	bne.n	3880 <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    3856:	f04f 0328 	mov.w	r3, #40	; 0x28
    385a:	f383 8811 	msr	BASEPRI, r3
    385e:	f3bf 8f6f 	isb	sy
    3862:	f3bf 8f4f 	dsb	sy
    3866:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3868:	4b0a      	ldr	r3, [pc, #40]	; (3894 <vTaskStartScheduler+0xa0>)
    386a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    386e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    3870:	4b09      	ldr	r3, [pc, #36]	; (3898 <vTaskStartScheduler+0xa4>)
    3872:	2201      	movs	r2, #1
    3874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    3876:	4b09      	ldr	r3, [pc, #36]	; (389c <vTaskStartScheduler+0xa8>)
    3878:	2200      	movs	r2, #0
    387a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    387c:	f002 fb18 	bl	5eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3880:	bf00      	nop
    3882:	3718      	adds	r7, #24
    3884:	46bd      	mov	sp, r7
    3886:	bd80      	pop	{r7, pc}
    3888:	000097e8 	.word	0x000097e8
    388c:	00003df5 	.word	0x00003df5
    3890:	100004a8 	.word	0x100004a8
    3894:	100004a4 	.word	0x100004a4
    3898:	10000490 	.word	0x10000490
    389c:	10000488 	.word	0x10000488

000038a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    38a0:	b480      	push	{r7}
    38a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    38a4:	4b04      	ldr	r3, [pc, #16]	; (38b8 <vTaskSuspendAll+0x18>)
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	3301      	adds	r3, #1
    38aa:	4a03      	ldr	r2, [pc, #12]	; (38b8 <vTaskSuspendAll+0x18>)
    38ac:	6013      	str	r3, [r2, #0]
}
    38ae:	bf00      	nop
    38b0:	46bd      	mov	sp, r7
    38b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b6:	4770      	bx	lr
    38b8:	100004ac 	.word	0x100004ac

000038bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    38bc:	b580      	push	{r7, lr}
    38be:	b084      	sub	sp, #16
    38c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    38c2:	2300      	movs	r3, #0
    38c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    38c6:	2300      	movs	r3, #0
    38c8:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    38ca:	f002 fb1b 	bl	5f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    38ce:	4b39      	ldr	r3, [pc, #228]	; (39b4 <xTaskResumeAll+0xf8>)
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	3b01      	subs	r3, #1
    38d4:	4a37      	ldr	r2, [pc, #220]	; (39b4 <xTaskResumeAll+0xf8>)
    38d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    38d8:	4b36      	ldr	r3, [pc, #216]	; (39b4 <xTaskResumeAll+0xf8>)
    38da:	681b      	ldr	r3, [r3, #0]
    38dc:	2b00      	cmp	r3, #0
    38de:	d161      	bne.n	39a4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    38e0:	4b35      	ldr	r3, [pc, #212]	; (39b8 <xTaskResumeAll+0xfc>)
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	2b00      	cmp	r3, #0
    38e6:	d05d      	beq.n	39a4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    38e8:	e02e      	b.n	3948 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    38ea:	4b34      	ldr	r3, [pc, #208]	; (39bc <xTaskResumeAll+0x100>)
    38ec:	68db      	ldr	r3, [r3, #12]
    38ee:	68db      	ldr	r3, [r3, #12]
    38f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	3318      	adds	r3, #24
    38f6:	4618      	mov	r0, r3
    38f8:	f7ff fdd0 	bl	349c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    38fc:	68fb      	ldr	r3, [r7, #12]
    38fe:	3304      	adds	r3, #4
    3900:	4618      	mov	r0, r3
    3902:	f7ff fdcb 	bl	349c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3906:	68fb      	ldr	r3, [r7, #12]
    3908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    390a:	2201      	movs	r2, #1
    390c:	409a      	lsls	r2, r3
    390e:	4b2c      	ldr	r3, [pc, #176]	; (39c0 <xTaskResumeAll+0x104>)
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	4313      	orrs	r3, r2
    3914:	4a2a      	ldr	r2, [pc, #168]	; (39c0 <xTaskResumeAll+0x104>)
    3916:	6013      	str	r3, [r2, #0]
    3918:	68fb      	ldr	r3, [r7, #12]
    391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    391c:	4613      	mov	r3, r2
    391e:	009b      	lsls	r3, r3, #2
    3920:	4413      	add	r3, r2
    3922:	009b      	lsls	r3, r3, #2
    3924:	4a27      	ldr	r2, [pc, #156]	; (39c4 <xTaskResumeAll+0x108>)
    3926:	441a      	add	r2, r3
    3928:	68fb      	ldr	r3, [r7, #12]
    392a:	3304      	adds	r3, #4
    392c:	4619      	mov	r1, r3
    392e:	4610      	mov	r0, r2
    3930:	f7ff fd57 	bl	33e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3934:	68fb      	ldr	r3, [r7, #12]
    3936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3938:	4b23      	ldr	r3, [pc, #140]	; (39c8 <xTaskResumeAll+0x10c>)
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    393e:	429a      	cmp	r2, r3
    3940:	d302      	bcc.n	3948 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    3942:	4b22      	ldr	r3, [pc, #136]	; (39cc <xTaskResumeAll+0x110>)
    3944:	2201      	movs	r2, #1
    3946:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3948:	4b1c      	ldr	r3, [pc, #112]	; (39bc <xTaskResumeAll+0x100>)
    394a:	681b      	ldr	r3, [r3, #0]
    394c:	2b00      	cmp	r3, #0
    394e:	d1cc      	bne.n	38ea <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    3950:	68fb      	ldr	r3, [r7, #12]
    3952:	2b00      	cmp	r3, #0
    3954:	d001      	beq.n	395a <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    3956:	f000 fadf 	bl	3f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    395a:	4b1d      	ldr	r3, [pc, #116]	; (39d0 <xTaskResumeAll+0x114>)
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    3960:	687b      	ldr	r3, [r7, #4]
    3962:	2b00      	cmp	r3, #0
    3964:	d010      	beq.n	3988 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    3966:	f000 f847 	bl	39f8 <xTaskIncrementTick>
    396a:	4603      	mov	r3, r0
    396c:	2b00      	cmp	r3, #0
    396e:	d002      	beq.n	3976 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    3970:	4b16      	ldr	r3, [pc, #88]	; (39cc <xTaskResumeAll+0x110>)
    3972:	2201      	movs	r2, #1
    3974:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	3b01      	subs	r3, #1
    397a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	2b00      	cmp	r3, #0
    3980:	d1f1      	bne.n	3966 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    3982:	4b13      	ldr	r3, [pc, #76]	; (39d0 <xTaskResumeAll+0x114>)
    3984:	2200      	movs	r2, #0
    3986:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    3988:	4b10      	ldr	r3, [pc, #64]	; (39cc <xTaskResumeAll+0x110>)
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	2b00      	cmp	r3, #0
    398e:	d009      	beq.n	39a4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3990:	2301      	movs	r3, #1
    3992:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3994:	4b0f      	ldr	r3, [pc, #60]	; (39d4 <xTaskResumeAll+0x118>)
    3996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    399a:	601a      	str	r2, [r3, #0]
    399c:	f3bf 8f4f 	dsb	sy
    39a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    39a4:	f002 fac8 	bl	5f38 <vPortExitCritical>

	return xAlreadyYielded;
    39a8:	68bb      	ldr	r3, [r7, #8]
}
    39aa:	4618      	mov	r0, r3
    39ac:	3710      	adds	r7, #16
    39ae:	46bd      	mov	sp, r7
    39b0:	bd80      	pop	{r7, pc}
    39b2:	bf00      	nop
    39b4:	100004ac 	.word	0x100004ac
    39b8:	10000484 	.word	0x10000484
    39bc:	10000444 	.word	0x10000444
    39c0:	1000048c 	.word	0x1000048c
    39c4:	100003b0 	.word	0x100003b0
    39c8:	100003ac 	.word	0x100003ac
    39cc:	10000498 	.word	0x10000498
    39d0:	10000494 	.word	0x10000494
    39d4:	e000ed04 	.word	0xe000ed04

000039d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    39d8:	b480      	push	{r7}
    39da:	b083      	sub	sp, #12
    39dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    39de:	4b05      	ldr	r3, [pc, #20]	; (39f4 <xTaskGetTickCount+0x1c>)
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    39e4:	687b      	ldr	r3, [r7, #4]
}
    39e6:	4618      	mov	r0, r3
    39e8:	370c      	adds	r7, #12
    39ea:	46bd      	mov	sp, r7
    39ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f0:	4770      	bx	lr
    39f2:	bf00      	nop
    39f4:	10000488 	.word	0x10000488

000039f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b086      	sub	sp, #24
    39fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    39fe:	2300      	movs	r3, #0
    3a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3a02:	4b48      	ldr	r3, [pc, #288]	; (3b24 <xTaskIncrementTick+0x12c>)
    3a04:	681b      	ldr	r3, [r3, #0]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d17c      	bne.n	3b04 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3a0a:	4b47      	ldr	r3, [pc, #284]	; (3b28 <xTaskIncrementTick+0x130>)
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	3301      	adds	r3, #1
    3a10:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    3a12:	4a45      	ldr	r2, [pc, #276]	; (3b28 <xTaskIncrementTick+0x130>)
    3a14:	693b      	ldr	r3, [r7, #16]
    3a16:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3a18:	693b      	ldr	r3, [r7, #16]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d110      	bne.n	3a40 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
    3a1e:	4b43      	ldr	r3, [pc, #268]	; (3b2c <xTaskIncrementTick+0x134>)
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	60fb      	str	r3, [r7, #12]
    3a24:	4b42      	ldr	r3, [pc, #264]	; (3b30 <xTaskIncrementTick+0x138>)
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	4a40      	ldr	r2, [pc, #256]	; (3b2c <xTaskIncrementTick+0x134>)
    3a2a:	6013      	str	r3, [r2, #0]
    3a2c:	4a40      	ldr	r2, [pc, #256]	; (3b30 <xTaskIncrementTick+0x138>)
    3a2e:	68fb      	ldr	r3, [r7, #12]
    3a30:	6013      	str	r3, [r2, #0]
    3a32:	4b40      	ldr	r3, [pc, #256]	; (3b34 <xTaskIncrementTick+0x13c>)
    3a34:	681b      	ldr	r3, [r3, #0]
    3a36:	3301      	adds	r3, #1
    3a38:	4a3e      	ldr	r2, [pc, #248]	; (3b34 <xTaskIncrementTick+0x13c>)
    3a3a:	6013      	str	r3, [r2, #0]
    3a3c:	f000 fa6c 	bl	3f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    3a40:	4b3d      	ldr	r3, [pc, #244]	; (3b38 <xTaskIncrementTick+0x140>)
    3a42:	681b      	ldr	r3, [r3, #0]
    3a44:	693a      	ldr	r2, [r7, #16]
    3a46:	429a      	cmp	r2, r3
    3a48:	d34d      	bcc.n	3ae6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3a4a:	4b38      	ldr	r3, [pc, #224]	; (3b2c <xTaskIncrementTick+0x134>)
    3a4c:	681b      	ldr	r3, [r3, #0]
    3a4e:	681b      	ldr	r3, [r3, #0]
    3a50:	2b00      	cmp	r3, #0
    3a52:	d101      	bne.n	3a58 <xTaskIncrementTick+0x60>
    3a54:	2301      	movs	r3, #1
    3a56:	e000      	b.n	3a5a <xTaskIncrementTick+0x62>
    3a58:	2300      	movs	r3, #0
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d004      	beq.n	3a68 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a5e:	4b36      	ldr	r3, [pc, #216]	; (3b38 <xTaskIncrementTick+0x140>)
    3a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a64:	601a      	str	r2, [r3, #0]
					break;
    3a66:	e03e      	b.n	3ae6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3a68:	4b30      	ldr	r3, [pc, #192]	; (3b2c <xTaskIncrementTick+0x134>)
    3a6a:	681b      	ldr	r3, [r3, #0]
    3a6c:	68db      	ldr	r3, [r3, #12]
    3a6e:	68db      	ldr	r3, [r3, #12]
    3a70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3a72:	68bb      	ldr	r3, [r7, #8]
    3a74:	685b      	ldr	r3, [r3, #4]
    3a76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    3a78:	693a      	ldr	r2, [r7, #16]
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	429a      	cmp	r2, r3
    3a7e:	d203      	bcs.n	3a88 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    3a80:	4a2d      	ldr	r2, [pc, #180]	; (3b38 <xTaskIncrementTick+0x140>)
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	6013      	str	r3, [r2, #0]
						break;
    3a86:	e02e      	b.n	3ae6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3a88:	68bb      	ldr	r3, [r7, #8]
    3a8a:	3304      	adds	r3, #4
    3a8c:	4618      	mov	r0, r3
    3a8e:	f7ff fd05 	bl	349c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3a92:	68bb      	ldr	r3, [r7, #8]
    3a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a96:	2b00      	cmp	r3, #0
    3a98:	d004      	beq.n	3aa4 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3a9a:	68bb      	ldr	r3, [r7, #8]
    3a9c:	3318      	adds	r3, #24
    3a9e:	4618      	mov	r0, r3
    3aa0:	f7ff fcfc 	bl	349c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    3aa4:	68bb      	ldr	r3, [r7, #8]
    3aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3aa8:	2201      	movs	r2, #1
    3aaa:	409a      	lsls	r2, r3
    3aac:	4b23      	ldr	r3, [pc, #140]	; (3b3c <xTaskIncrementTick+0x144>)
    3aae:	681b      	ldr	r3, [r3, #0]
    3ab0:	4313      	orrs	r3, r2
    3ab2:	4a22      	ldr	r2, [pc, #136]	; (3b3c <xTaskIncrementTick+0x144>)
    3ab4:	6013      	str	r3, [r2, #0]
    3ab6:	68bb      	ldr	r3, [r7, #8]
    3ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3aba:	4613      	mov	r3, r2
    3abc:	009b      	lsls	r3, r3, #2
    3abe:	4413      	add	r3, r2
    3ac0:	009b      	lsls	r3, r3, #2
    3ac2:	4a1f      	ldr	r2, [pc, #124]	; (3b40 <xTaskIncrementTick+0x148>)
    3ac4:	441a      	add	r2, r3
    3ac6:	68bb      	ldr	r3, [r7, #8]
    3ac8:	3304      	adds	r3, #4
    3aca:	4619      	mov	r1, r3
    3acc:	4610      	mov	r0, r2
    3ace:	f7ff fc88 	bl	33e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ad2:	68bb      	ldr	r3, [r7, #8]
    3ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ad6:	4b1b      	ldr	r3, [pc, #108]	; (3b44 <xTaskIncrementTick+0x14c>)
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3adc:	429a      	cmp	r2, r3
    3ade:	d3b4      	bcc.n	3a4a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
    3ae0:	2301      	movs	r3, #1
    3ae2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3ae4:	e7b1      	b.n	3a4a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3ae6:	4b17      	ldr	r3, [pc, #92]	; (3b44 <xTaskIncrementTick+0x14c>)
    3ae8:	681b      	ldr	r3, [r3, #0]
    3aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3aec:	4914      	ldr	r1, [pc, #80]	; (3b40 <xTaskIncrementTick+0x148>)
    3aee:	4613      	mov	r3, r2
    3af0:	009b      	lsls	r3, r3, #2
    3af2:	4413      	add	r3, r2
    3af4:	009b      	lsls	r3, r3, #2
    3af6:	440b      	add	r3, r1
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2b01      	cmp	r3, #1
    3afc:	d907      	bls.n	3b0e <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
    3afe:	2301      	movs	r3, #1
    3b00:	617b      	str	r3, [r7, #20]
    3b02:	e004      	b.n	3b0e <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3b04:	4b10      	ldr	r3, [pc, #64]	; (3b48 <xTaskIncrementTick+0x150>)
    3b06:	681b      	ldr	r3, [r3, #0]
    3b08:	3301      	adds	r3, #1
    3b0a:	4a0f      	ldr	r2, [pc, #60]	; (3b48 <xTaskIncrementTick+0x150>)
    3b0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3b0e:	4b0f      	ldr	r3, [pc, #60]	; (3b4c <xTaskIncrementTick+0x154>)
    3b10:	681b      	ldr	r3, [r3, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d001      	beq.n	3b1a <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
    3b16:	2301      	movs	r3, #1
    3b18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    3b1a:	697b      	ldr	r3, [r7, #20]
}
    3b1c:	4618      	mov	r0, r3
    3b1e:	3718      	adds	r7, #24
    3b20:	46bd      	mov	sp, r7
    3b22:	bd80      	pop	{r7, pc}
    3b24:	100004ac 	.word	0x100004ac
    3b28:	10000488 	.word	0x10000488
    3b2c:	1000043c 	.word	0x1000043c
    3b30:	10000440 	.word	0x10000440
    3b34:	1000049c 	.word	0x1000049c
    3b38:	100004a4 	.word	0x100004a4
    3b3c:	1000048c 	.word	0x1000048c
    3b40:	100003b0 	.word	0x100003b0
    3b44:	100003ac 	.word	0x100003ac
    3b48:	10000494 	.word	0x10000494
    3b4c:	10000498 	.word	0x10000498

00003b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3b50:	b580      	push	{r7, lr}
    3b52:	b084      	sub	sp, #16
    3b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3b56:	4b28      	ldr	r3, [pc, #160]	; (3bf8 <vTaskSwitchContext+0xa8>)
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d003      	beq.n	3b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3b5e:	4b27      	ldr	r3, [pc, #156]	; (3bfc <vTaskSwitchContext+0xac>)
    3b60:	2201      	movs	r2, #1
    3b62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3b64:	e043      	b.n	3bee <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    3b66:	4b25      	ldr	r3, [pc, #148]	; (3bfc <vTaskSwitchContext+0xac>)
    3b68:	2200      	movs	r2, #0
    3b6a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    3b6c:	f001 ffec 	bl	5b48 <ThreadRuntimeCounter>
    3b70:	4602      	mov	r2, r0
    3b72:	4b23      	ldr	r3, [pc, #140]	; (3c00 <vTaskSwitchContext+0xb0>)
    3b74:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    3b76:	4b22      	ldr	r3, [pc, #136]	; (3c00 <vTaskSwitchContext+0xb0>)
    3b78:	681a      	ldr	r2, [r3, #0]
    3b7a:	4b22      	ldr	r3, [pc, #136]	; (3c04 <vTaskSwitchContext+0xb4>)
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	429a      	cmp	r2, r3
    3b80:	d909      	bls.n	3b96 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    3b82:	4b21      	ldr	r3, [pc, #132]	; (3c08 <vTaskSwitchContext+0xb8>)
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	6d59      	ldr	r1, [r3, #84]	; 0x54
    3b88:	4a1d      	ldr	r2, [pc, #116]	; (3c00 <vTaskSwitchContext+0xb0>)
    3b8a:	6810      	ldr	r0, [r2, #0]
    3b8c:	4a1d      	ldr	r2, [pc, #116]	; (3c04 <vTaskSwitchContext+0xb4>)
    3b8e:	6812      	ldr	r2, [r2, #0]
    3b90:	1a82      	subs	r2, r0, r2
    3b92:	440a      	add	r2, r1
    3b94:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    3b96:	4b1a      	ldr	r3, [pc, #104]	; (3c00 <vTaskSwitchContext+0xb0>)
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	4a1a      	ldr	r2, [pc, #104]	; (3c04 <vTaskSwitchContext+0xb4>)
    3b9c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3b9e:	4b1b      	ldr	r3, [pc, #108]	; (3c0c <vTaskSwitchContext+0xbc>)
    3ba0:	681b      	ldr	r3, [r3, #0]
    3ba2:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	fab3 f383 	clz	r3, r3
    3baa:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    3bac:	78fb      	ldrb	r3, [r7, #3]
    3bae:	f1c3 031f 	rsb	r3, r3, #31
    3bb2:	60fb      	str	r3, [r7, #12]
    3bb4:	68fa      	ldr	r2, [r7, #12]
    3bb6:	4613      	mov	r3, r2
    3bb8:	009b      	lsls	r3, r3, #2
    3bba:	4413      	add	r3, r2
    3bbc:	009b      	lsls	r3, r3, #2
    3bbe:	4a14      	ldr	r2, [pc, #80]	; (3c10 <vTaskSwitchContext+0xc0>)
    3bc0:	4413      	add	r3, r2
    3bc2:	60bb      	str	r3, [r7, #8]
    3bc4:	68bb      	ldr	r3, [r7, #8]
    3bc6:	685b      	ldr	r3, [r3, #4]
    3bc8:	685a      	ldr	r2, [r3, #4]
    3bca:	68bb      	ldr	r3, [r7, #8]
    3bcc:	605a      	str	r2, [r3, #4]
    3bce:	68bb      	ldr	r3, [r7, #8]
    3bd0:	685a      	ldr	r2, [r3, #4]
    3bd2:	68bb      	ldr	r3, [r7, #8]
    3bd4:	3308      	adds	r3, #8
    3bd6:	429a      	cmp	r2, r3
    3bd8:	d104      	bne.n	3be4 <vTaskSwitchContext+0x94>
    3bda:	68bb      	ldr	r3, [r7, #8]
    3bdc:	685b      	ldr	r3, [r3, #4]
    3bde:	685a      	ldr	r2, [r3, #4]
    3be0:	68bb      	ldr	r3, [r7, #8]
    3be2:	605a      	str	r2, [r3, #4]
    3be4:	68bb      	ldr	r3, [r7, #8]
    3be6:	685b      	ldr	r3, [r3, #4]
    3be8:	68db      	ldr	r3, [r3, #12]
    3bea:	4a07      	ldr	r2, [pc, #28]	; (3c08 <vTaskSwitchContext+0xb8>)
    3bec:	6013      	str	r3, [r2, #0]
}
    3bee:	bf00      	nop
    3bf0:	3710      	adds	r7, #16
    3bf2:	46bd      	mov	sp, r7
    3bf4:	bd80      	pop	{r7, pc}
    3bf6:	bf00      	nop
    3bf8:	100004ac 	.word	0x100004ac
    3bfc:	10000498 	.word	0x10000498
    3c00:	100004b4 	.word	0x100004b4
    3c04:	100004b0 	.word	0x100004b0
    3c08:	100003ac 	.word	0x100003ac
    3c0c:	1000048c 	.word	0x1000048c
    3c10:	100003b0 	.word	0x100003b0

00003c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3c14:	b580      	push	{r7, lr}
    3c16:	b082      	sub	sp, #8
    3c18:	af00      	add	r7, sp, #0
    3c1a:	6078      	str	r0, [r7, #4]
    3c1c:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3c1e:	4b07      	ldr	r3, [pc, #28]	; (3c3c <vTaskPlaceOnEventList+0x28>)
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	3318      	adds	r3, #24
    3c24:	4619      	mov	r1, r3
    3c26:	6878      	ldr	r0, [r7, #4]
    3c28:	f7ff fbff 	bl	342a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3c2c:	2101      	movs	r1, #1
    3c2e:	6838      	ldr	r0, [r7, #0]
    3c30:	f000 fa1a 	bl	4068 <prvAddCurrentTaskToDelayedList>
}
    3c34:	bf00      	nop
    3c36:	3708      	adds	r7, #8
    3c38:	46bd      	mov	sp, r7
    3c3a:	bd80      	pop	{r7, pc}
    3c3c:	100003ac 	.word	0x100003ac

00003c40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    3c40:	b580      	push	{r7, lr}
    3c42:	b084      	sub	sp, #16
    3c44:	af00      	add	r7, sp, #0
    3c46:	60f8      	str	r0, [r7, #12]
    3c48:	60b9      	str	r1, [r7, #8]
    3c4a:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3c4c:	4b0a      	ldr	r3, [pc, #40]	; (3c78 <vTaskPlaceOnEventListRestricted+0x38>)
    3c4e:	681b      	ldr	r3, [r3, #0]
    3c50:	3318      	adds	r3, #24
    3c52:	4619      	mov	r1, r3
    3c54:	68f8      	ldr	r0, [r7, #12]
    3c56:	f7ff fbc4 	bl	33e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d002      	beq.n	3c66 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
    3c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3c66:	6879      	ldr	r1, [r7, #4]
    3c68:	68b8      	ldr	r0, [r7, #8]
    3c6a:	f000 f9fd 	bl	4068 <prvAddCurrentTaskToDelayedList>
	}
    3c6e:	bf00      	nop
    3c70:	3710      	adds	r7, #16
    3c72:	46bd      	mov	sp, r7
    3c74:	bd80      	pop	{r7, pc}
    3c76:	bf00      	nop
    3c78:	100003ac 	.word	0x100003ac

00003c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b084      	sub	sp, #16
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	68db      	ldr	r3, [r3, #12]
    3c88:	68db      	ldr	r3, [r3, #12]
    3c8a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3c8c:	68bb      	ldr	r3, [r7, #8]
    3c8e:	3318      	adds	r3, #24
    3c90:	4618      	mov	r0, r3
    3c92:	f7ff fc03 	bl	349c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3c96:	4b1d      	ldr	r3, [pc, #116]	; (3d0c <xTaskRemoveFromEventList+0x90>)
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d11c      	bne.n	3cd8 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3c9e:	68bb      	ldr	r3, [r7, #8]
    3ca0:	3304      	adds	r3, #4
    3ca2:	4618      	mov	r0, r3
    3ca4:	f7ff fbfa 	bl	349c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3ca8:	68bb      	ldr	r3, [r7, #8]
    3caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cac:	2201      	movs	r2, #1
    3cae:	409a      	lsls	r2, r3
    3cb0:	4b17      	ldr	r3, [pc, #92]	; (3d10 <xTaskRemoveFromEventList+0x94>)
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	4313      	orrs	r3, r2
    3cb6:	4a16      	ldr	r2, [pc, #88]	; (3d10 <xTaskRemoveFromEventList+0x94>)
    3cb8:	6013      	str	r3, [r2, #0]
    3cba:	68bb      	ldr	r3, [r7, #8]
    3cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cbe:	4613      	mov	r3, r2
    3cc0:	009b      	lsls	r3, r3, #2
    3cc2:	4413      	add	r3, r2
    3cc4:	009b      	lsls	r3, r3, #2
    3cc6:	4a13      	ldr	r2, [pc, #76]	; (3d14 <xTaskRemoveFromEventList+0x98>)
    3cc8:	441a      	add	r2, r3
    3cca:	68bb      	ldr	r3, [r7, #8]
    3ccc:	3304      	adds	r3, #4
    3cce:	4619      	mov	r1, r3
    3cd0:	4610      	mov	r0, r2
    3cd2:	f7ff fb86 	bl	33e2 <vListInsertEnd>
    3cd6:	e005      	b.n	3ce4 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3cd8:	68bb      	ldr	r3, [r7, #8]
    3cda:	3318      	adds	r3, #24
    3cdc:	4619      	mov	r1, r3
    3cde:	480e      	ldr	r0, [pc, #56]	; (3d18 <xTaskRemoveFromEventList+0x9c>)
    3ce0:	f7ff fb7f 	bl	33e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ce8:	4b0c      	ldr	r3, [pc, #48]	; (3d1c <xTaskRemoveFromEventList+0xa0>)
    3cea:	681b      	ldr	r3, [r3, #0]
    3cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cee:	429a      	cmp	r2, r3
    3cf0:	d905      	bls.n	3cfe <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3cf2:	2301      	movs	r3, #1
    3cf4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3cf6:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <xTaskRemoveFromEventList+0xa4>)
    3cf8:	2201      	movs	r2, #1
    3cfa:	601a      	str	r2, [r3, #0]
    3cfc:	e001      	b.n	3d02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    3cfe:	2300      	movs	r3, #0
    3d00:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    3d02:	68fb      	ldr	r3, [r7, #12]
}
    3d04:	4618      	mov	r0, r3
    3d06:	3710      	adds	r7, #16
    3d08:	46bd      	mov	sp, r7
    3d0a:	bd80      	pop	{r7, pc}
    3d0c:	100004ac 	.word	0x100004ac
    3d10:	1000048c 	.word	0x1000048c
    3d14:	100003b0 	.word	0x100003b0
    3d18:	10000444 	.word	0x10000444
    3d1c:	100003ac 	.word	0x100003ac
    3d20:	10000498 	.word	0x10000498

00003d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3d2c:	4b06      	ldr	r3, [pc, #24]	; (3d48 <vTaskInternalSetTimeOutState+0x24>)
    3d2e:	681a      	ldr	r2, [r3, #0]
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3d34:	4b05      	ldr	r3, [pc, #20]	; (3d4c <vTaskInternalSetTimeOutState+0x28>)
    3d36:	681a      	ldr	r2, [r3, #0]
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	605a      	str	r2, [r3, #4]
}
    3d3c:	bf00      	nop
    3d3e:	370c      	adds	r7, #12
    3d40:	46bd      	mov	sp, r7
    3d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d46:	4770      	bx	lr
    3d48:	1000049c 	.word	0x1000049c
    3d4c:	10000488 	.word	0x10000488

00003d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3d50:	b580      	push	{r7, lr}
    3d52:	b086      	sub	sp, #24
    3d54:	af00      	add	r7, sp, #0
    3d56:	6078      	str	r0, [r7, #4]
    3d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3d5a:	f002 f8d3 	bl	5f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3d5e:	4b1d      	ldr	r3, [pc, #116]	; (3dd4 <xTaskCheckForTimeOut+0x84>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	685b      	ldr	r3, [r3, #4]
    3d68:	693a      	ldr	r2, [r7, #16]
    3d6a:	1ad3      	subs	r3, r2, r3
    3d6c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	681b      	ldr	r3, [r3, #0]
    3d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3d76:	d102      	bne.n	3d7e <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    3d78:	2300      	movs	r3, #0
    3d7a:	617b      	str	r3, [r7, #20]
    3d7c:	e023      	b.n	3dc6 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	681a      	ldr	r2, [r3, #0]
    3d82:	4b15      	ldr	r3, [pc, #84]	; (3dd8 <xTaskCheckForTimeOut+0x88>)
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	429a      	cmp	r2, r3
    3d88:	d007      	beq.n	3d9a <xTaskCheckForTimeOut+0x4a>
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	685b      	ldr	r3, [r3, #4]
    3d8e:	693a      	ldr	r2, [r7, #16]
    3d90:	429a      	cmp	r2, r3
    3d92:	d302      	bcc.n	3d9a <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    3d94:	2301      	movs	r3, #1
    3d96:	617b      	str	r3, [r7, #20]
    3d98:	e015      	b.n	3dc6 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	681b      	ldr	r3, [r3, #0]
    3d9e:	68fa      	ldr	r2, [r7, #12]
    3da0:	429a      	cmp	r2, r3
    3da2:	d20b      	bcs.n	3dbc <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    3da4:	683b      	ldr	r3, [r7, #0]
    3da6:	681a      	ldr	r2, [r3, #0]
    3da8:	68fb      	ldr	r3, [r7, #12]
    3daa:	1ad2      	subs	r2, r2, r3
    3dac:	683b      	ldr	r3, [r7, #0]
    3dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    3db0:	6878      	ldr	r0, [r7, #4]
    3db2:	f7ff ffb7 	bl	3d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    3db6:	2300      	movs	r3, #0
    3db8:	617b      	str	r3, [r7, #20]
    3dba:	e004      	b.n	3dc6 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    3dbc:	683b      	ldr	r3, [r7, #0]
    3dbe:	2200      	movs	r2, #0
    3dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    3dc2:	2301      	movs	r3, #1
    3dc4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    3dc6:	f002 f8b7 	bl	5f38 <vPortExitCritical>

	return xReturn;
    3dca:	697b      	ldr	r3, [r7, #20]
}
    3dcc:	4618      	mov	r0, r3
    3dce:	3718      	adds	r7, #24
    3dd0:	46bd      	mov	sp, r7
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	10000488 	.word	0x10000488
    3dd8:	1000049c 	.word	0x1000049c

00003ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3ddc:	b480      	push	{r7}
    3dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    3de0:	4b03      	ldr	r3, [pc, #12]	; (3df0 <vTaskMissedYield+0x14>)
    3de2:	2201      	movs	r2, #1
    3de4:	601a      	str	r2, [r3, #0]
}
    3de6:	bf00      	nop
    3de8:	46bd      	mov	sp, r7
    3dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dee:	4770      	bx	lr
    3df0:	10000498 	.word	0x10000498

00003df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b082      	sub	sp, #8
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3dfc:	f000 f842 	bl	3e84 <prvCheckTasksWaitingTermination>
    3e00:	e7fc      	b.n	3dfc <prvIdleTask+0x8>
    3e02:	Address 0x0000000000003e02 is out of bounds.


00003e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b082      	sub	sp, #8
    3e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3e0a:	2300      	movs	r3, #0
    3e0c:	607b      	str	r3, [r7, #4]
    3e0e:	e00c      	b.n	3e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3e10:	687a      	ldr	r2, [r7, #4]
    3e12:	4613      	mov	r3, r2
    3e14:	009b      	lsls	r3, r3, #2
    3e16:	4413      	add	r3, r2
    3e18:	009b      	lsls	r3, r3, #2
    3e1a:	4a12      	ldr	r2, [pc, #72]	; (3e64 <prvInitialiseTaskLists+0x60>)
    3e1c:	4413      	add	r3, r2
    3e1e:	4618      	mov	r0, r3
    3e20:	f7ff fab2 	bl	3388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	3301      	adds	r3, #1
    3e28:	607b      	str	r3, [r7, #4]
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	2b04      	cmp	r3, #4
    3e2e:	d9ef      	bls.n	3e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    3e30:	480d      	ldr	r0, [pc, #52]	; (3e68 <prvInitialiseTaskLists+0x64>)
    3e32:	f7ff faa9 	bl	3388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3e36:	480d      	ldr	r0, [pc, #52]	; (3e6c <prvInitialiseTaskLists+0x68>)
    3e38:	f7ff faa6 	bl	3388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3e3c:	480c      	ldr	r0, [pc, #48]	; (3e70 <prvInitialiseTaskLists+0x6c>)
    3e3e:	f7ff faa3 	bl	3388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3e42:	480c      	ldr	r0, [pc, #48]	; (3e74 <prvInitialiseTaskLists+0x70>)
    3e44:	f7ff faa0 	bl	3388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3e48:	480b      	ldr	r0, [pc, #44]	; (3e78 <prvInitialiseTaskLists+0x74>)
    3e4a:	f7ff fa9d 	bl	3388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3e4e:	4b0b      	ldr	r3, [pc, #44]	; (3e7c <prvInitialiseTaskLists+0x78>)
    3e50:	4a05      	ldr	r2, [pc, #20]	; (3e68 <prvInitialiseTaskLists+0x64>)
    3e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3e54:	4b0a      	ldr	r3, [pc, #40]	; (3e80 <prvInitialiseTaskLists+0x7c>)
    3e56:	4a05      	ldr	r2, [pc, #20]	; (3e6c <prvInitialiseTaskLists+0x68>)
    3e58:	601a      	str	r2, [r3, #0]
}
    3e5a:	bf00      	nop
    3e5c:	3708      	adds	r7, #8
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	bf00      	nop
    3e64:	100003b0 	.word	0x100003b0
    3e68:	10000414 	.word	0x10000414
    3e6c:	10000428 	.word	0x10000428
    3e70:	10000444 	.word	0x10000444
    3e74:	10000458 	.word	0x10000458
    3e78:	10000470 	.word	0x10000470
    3e7c:	1000043c 	.word	0x1000043c
    3e80:	10000440 	.word	0x10000440

00003e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3e84:	b580      	push	{r7, lr}
    3e86:	b082      	sub	sp, #8
    3e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3e8a:	e019      	b.n	3ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    3e8c:	f002 f83a 	bl	5f04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3e90:	4b0f      	ldr	r3, [pc, #60]	; (3ed0 <prvCheckTasksWaitingTermination+0x4c>)
    3e92:	68db      	ldr	r3, [r3, #12]
    3e94:	68db      	ldr	r3, [r3, #12]
    3e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	3304      	adds	r3, #4
    3e9c:	4618      	mov	r0, r3
    3e9e:	f7ff fafd 	bl	349c <uxListRemove>
				--uxCurrentNumberOfTasks;
    3ea2:	4b0c      	ldr	r3, [pc, #48]	; (3ed4 <prvCheckTasksWaitingTermination+0x50>)
    3ea4:	681b      	ldr	r3, [r3, #0]
    3ea6:	3b01      	subs	r3, #1
    3ea8:	4a0a      	ldr	r2, [pc, #40]	; (3ed4 <prvCheckTasksWaitingTermination+0x50>)
    3eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    3eac:	4b0a      	ldr	r3, [pc, #40]	; (3ed8 <prvCheckTasksWaitingTermination+0x54>)
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	3b01      	subs	r3, #1
    3eb2:	4a09      	ldr	r2, [pc, #36]	; (3ed8 <prvCheckTasksWaitingTermination+0x54>)
    3eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    3eb6:	f002 f83f 	bl	5f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    3eba:	6878      	ldr	r0, [r7, #4]
    3ebc:	f000 f80e 	bl	3edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3ec0:	4b05      	ldr	r3, [pc, #20]	; (3ed8 <prvCheckTasksWaitingTermination+0x54>)
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d1e1      	bne.n	3e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    3ec8:	bf00      	nop
    3eca:	3708      	adds	r7, #8
    3ecc:	46bd      	mov	sp, r7
    3ece:	bd80      	pop	{r7, pc}
    3ed0:	10000458 	.word	0x10000458
    3ed4:	10000484 	.word	0x10000484
    3ed8:	1000046c 	.word	0x1000046c

00003edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    3eea:	2b00      	cmp	r3, #0
    3eec:	d108      	bne.n	3f00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3ef2:	4618      	mov	r0, r3
    3ef4:	f000 f930 	bl	4158 <vPortFree>
				vPortFree( pxTCB );
    3ef8:	6878      	ldr	r0, [r7, #4]
    3efa:	f000 f92d 	bl	4158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    3efe:	e007      	b.n	3f10 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    3f06:	2b01      	cmp	r3, #1
    3f08:	d102      	bne.n	3f10 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
    3f0a:	6878      	ldr	r0, [r7, #4]
    3f0c:	f000 f924 	bl	4158 <vPortFree>
	}
    3f10:	bf00      	nop
    3f12:	3708      	adds	r7, #8
    3f14:	46bd      	mov	sp, r7
    3f16:	bd80      	pop	{r7, pc}

00003f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3f18:	b480      	push	{r7}
    3f1a:	b083      	sub	sp, #12
    3f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3f1e:	4b0f      	ldr	r3, [pc, #60]	; (3f5c <prvResetNextTaskUnblockTime+0x44>)
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	681b      	ldr	r3, [r3, #0]
    3f24:	2b00      	cmp	r3, #0
    3f26:	d101      	bne.n	3f2c <prvResetNextTaskUnblockTime+0x14>
    3f28:	2301      	movs	r3, #1
    3f2a:	e000      	b.n	3f2e <prvResetNextTaskUnblockTime+0x16>
    3f2c:	2300      	movs	r3, #0
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d004      	beq.n	3f3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3f32:	4b0b      	ldr	r3, [pc, #44]	; (3f60 <prvResetNextTaskUnblockTime+0x48>)
    3f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    3f3a:	e008      	b.n	3f4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3f3c:	4b07      	ldr	r3, [pc, #28]	; (3f5c <prvResetNextTaskUnblockTime+0x44>)
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	68db      	ldr	r3, [r3, #12]
    3f42:	68db      	ldr	r3, [r3, #12]
    3f44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	685b      	ldr	r3, [r3, #4]
    3f4a:	4a05      	ldr	r2, [pc, #20]	; (3f60 <prvResetNextTaskUnblockTime+0x48>)
    3f4c:	6013      	str	r3, [r2, #0]
}
    3f4e:	bf00      	nop
    3f50:	370c      	adds	r7, #12
    3f52:	46bd      	mov	sp, r7
    3f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	1000043c 	.word	0x1000043c
    3f60:	100004a4 	.word	0x100004a4

00003f64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3f64:	b480      	push	{r7}
    3f66:	b083      	sub	sp, #12
    3f68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3f6a:	4b0b      	ldr	r3, [pc, #44]	; (3f98 <xTaskGetSchedulerState+0x34>)
    3f6c:	681b      	ldr	r3, [r3, #0]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d102      	bne.n	3f78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3f72:	2301      	movs	r3, #1
    3f74:	607b      	str	r3, [r7, #4]
    3f76:	e008      	b.n	3f8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3f78:	4b08      	ldr	r3, [pc, #32]	; (3f9c <xTaskGetSchedulerState+0x38>)
    3f7a:	681b      	ldr	r3, [r3, #0]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d102      	bne.n	3f86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3f80:	2302      	movs	r3, #2
    3f82:	607b      	str	r3, [r7, #4]
    3f84:	e001      	b.n	3f8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3f86:	2300      	movs	r3, #0
    3f88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    3f8a:	687b      	ldr	r3, [r7, #4]
	}
    3f8c:	4618      	mov	r0, r3
    3f8e:	370c      	adds	r7, #12
    3f90:	46bd      	mov	sp, r7
    3f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f96:	4770      	bx	lr
    3f98:	10000490 	.word	0x10000490
    3f9c:	100004ac 	.word	0x100004ac

00003fa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b084      	sub	sp, #16
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    3fac:	2300      	movs	r3, #0
    3fae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d04f      	beq.n	4056 <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    3fb6:	68bb      	ldr	r3, [r7, #8]
    3fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3fba:	1e5a      	subs	r2, r3, #1
    3fbc:	68bb      	ldr	r3, [r7, #8]
    3fbe:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3fc0:	68bb      	ldr	r3, [r7, #8]
    3fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fc4:	68bb      	ldr	r3, [r7, #8]
    3fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3fc8:	429a      	cmp	r2, r3
    3fca:	d044      	beq.n	4056 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3fcc:	68bb      	ldr	r3, [r7, #8]
    3fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d140      	bne.n	4056 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3fd4:	68bb      	ldr	r3, [r7, #8]
    3fd6:	3304      	adds	r3, #4
    3fd8:	4618      	mov	r0, r3
    3fda:	f7ff fa5f 	bl	349c <uxListRemove>
    3fde:	4603      	mov	r3, r0
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d115      	bne.n	4010 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    3fe4:	68bb      	ldr	r3, [r7, #8]
    3fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3fe8:	491d      	ldr	r1, [pc, #116]	; (4060 <xTaskPriorityDisinherit+0xc0>)
    3fea:	4613      	mov	r3, r2
    3fec:	009b      	lsls	r3, r3, #2
    3fee:	4413      	add	r3, r2
    3ff0:	009b      	lsls	r3, r3, #2
    3ff2:	440b      	add	r3, r1
    3ff4:	681b      	ldr	r3, [r3, #0]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d10a      	bne.n	4010 <xTaskPriorityDisinherit+0x70>
    3ffa:	68bb      	ldr	r3, [r7, #8]
    3ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ffe:	2201      	movs	r2, #1
    4000:	fa02 f303 	lsl.w	r3, r2, r3
    4004:	43da      	mvns	r2, r3
    4006:	4b17      	ldr	r3, [pc, #92]	; (4064 <xTaskPriorityDisinherit+0xc4>)
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	4013      	ands	r3, r2
    400c:	4a15      	ldr	r2, [pc, #84]	; (4064 <xTaskPriorityDisinherit+0xc4>)
    400e:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4010:	68bb      	ldr	r3, [r7, #8]
    4012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4014:	68bb      	ldr	r3, [r7, #8]
    4016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4018:	68bb      	ldr	r3, [r7, #8]
    401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    401c:	f1c3 0205 	rsb	r2, r3, #5
    4020:	68bb      	ldr	r3, [r7, #8]
    4022:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    4024:	68bb      	ldr	r3, [r7, #8]
    4026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4028:	2201      	movs	r2, #1
    402a:	409a      	lsls	r2, r3
    402c:	4b0d      	ldr	r3, [pc, #52]	; (4064 <xTaskPriorityDisinherit+0xc4>)
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	4313      	orrs	r3, r2
    4032:	4a0c      	ldr	r2, [pc, #48]	; (4064 <xTaskPriorityDisinherit+0xc4>)
    4034:	6013      	str	r3, [r2, #0]
    4036:	68bb      	ldr	r3, [r7, #8]
    4038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    403a:	4613      	mov	r3, r2
    403c:	009b      	lsls	r3, r3, #2
    403e:	4413      	add	r3, r2
    4040:	009b      	lsls	r3, r3, #2
    4042:	4a07      	ldr	r2, [pc, #28]	; (4060 <xTaskPriorityDisinherit+0xc0>)
    4044:	441a      	add	r2, r3
    4046:	68bb      	ldr	r3, [r7, #8]
    4048:	3304      	adds	r3, #4
    404a:	4619      	mov	r1, r3
    404c:	4610      	mov	r0, r2
    404e:	f7ff f9c8 	bl	33e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4052:	2301      	movs	r3, #1
    4054:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4056:	68fb      	ldr	r3, [r7, #12]
	}
    4058:	4618      	mov	r0, r3
    405a:	3710      	adds	r7, #16
    405c:	46bd      	mov	sp, r7
    405e:	bd80      	pop	{r7, pc}
    4060:	100003b0 	.word	0x100003b0
    4064:	1000048c 	.word	0x1000048c

00004068 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4068:	b580      	push	{r7, lr}
    406a:	b084      	sub	sp, #16
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
    4070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    4072:	4b29      	ldr	r3, [pc, #164]	; (4118 <prvAddCurrentTaskToDelayedList+0xb0>)
    4074:	681b      	ldr	r3, [r3, #0]
    4076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4078:	4b28      	ldr	r3, [pc, #160]	; (411c <prvAddCurrentTaskToDelayedList+0xb4>)
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	3304      	adds	r3, #4
    407e:	4618      	mov	r0, r3
    4080:	f7ff fa0c 	bl	349c <uxListRemove>
    4084:	4603      	mov	r3, r0
    4086:	2b00      	cmp	r3, #0
    4088:	d10b      	bne.n	40a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    408a:	4b24      	ldr	r3, [pc, #144]	; (411c <prvAddCurrentTaskToDelayedList+0xb4>)
    408c:	681b      	ldr	r3, [r3, #0]
    408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4090:	2201      	movs	r2, #1
    4092:	fa02 f303 	lsl.w	r3, r2, r3
    4096:	43da      	mvns	r2, r3
    4098:	4b21      	ldr	r3, [pc, #132]	; (4120 <prvAddCurrentTaskToDelayedList+0xb8>)
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	4013      	ands	r3, r2
    409e:	4a20      	ldr	r2, [pc, #128]	; (4120 <prvAddCurrentTaskToDelayedList+0xb8>)
    40a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    40a8:	d10a      	bne.n	40c0 <prvAddCurrentTaskToDelayedList+0x58>
    40aa:	683b      	ldr	r3, [r7, #0]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d007      	beq.n	40c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    40b0:	4b1a      	ldr	r3, [pc, #104]	; (411c <prvAddCurrentTaskToDelayedList+0xb4>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	3304      	adds	r3, #4
    40b6:	4619      	mov	r1, r3
    40b8:	481a      	ldr	r0, [pc, #104]	; (4124 <prvAddCurrentTaskToDelayedList+0xbc>)
    40ba:	f7ff f992 	bl	33e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    40be:	e026      	b.n	410e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    40c0:	68fa      	ldr	r2, [r7, #12]
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	4413      	add	r3, r2
    40c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    40c8:	4b14      	ldr	r3, [pc, #80]	; (411c <prvAddCurrentTaskToDelayedList+0xb4>)
    40ca:	681b      	ldr	r3, [r3, #0]
    40cc:	68ba      	ldr	r2, [r7, #8]
    40ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    40d0:	68ba      	ldr	r2, [r7, #8]
    40d2:	68fb      	ldr	r3, [r7, #12]
    40d4:	429a      	cmp	r2, r3
    40d6:	d209      	bcs.n	40ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    40d8:	4b13      	ldr	r3, [pc, #76]	; (4128 <prvAddCurrentTaskToDelayedList+0xc0>)
    40da:	681a      	ldr	r2, [r3, #0]
    40dc:	4b0f      	ldr	r3, [pc, #60]	; (411c <prvAddCurrentTaskToDelayedList+0xb4>)
    40de:	681b      	ldr	r3, [r3, #0]
    40e0:	3304      	adds	r3, #4
    40e2:	4619      	mov	r1, r3
    40e4:	4610      	mov	r0, r2
    40e6:	f7ff f9a0 	bl	342a <vListInsert>
}
    40ea:	e010      	b.n	410e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    40ec:	4b0f      	ldr	r3, [pc, #60]	; (412c <prvAddCurrentTaskToDelayedList+0xc4>)
    40ee:	681a      	ldr	r2, [r3, #0]
    40f0:	4b0a      	ldr	r3, [pc, #40]	; (411c <prvAddCurrentTaskToDelayedList+0xb4>)
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	3304      	adds	r3, #4
    40f6:	4619      	mov	r1, r3
    40f8:	4610      	mov	r0, r2
    40fa:	f7ff f996 	bl	342a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    40fe:	4b0c      	ldr	r3, [pc, #48]	; (4130 <prvAddCurrentTaskToDelayedList+0xc8>)
    4100:	681b      	ldr	r3, [r3, #0]
    4102:	68ba      	ldr	r2, [r7, #8]
    4104:	429a      	cmp	r2, r3
    4106:	d202      	bcs.n	410e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    4108:	4a09      	ldr	r2, [pc, #36]	; (4130 <prvAddCurrentTaskToDelayedList+0xc8>)
    410a:	68bb      	ldr	r3, [r7, #8]
    410c:	6013      	str	r3, [r2, #0]
}
    410e:	bf00      	nop
    4110:	3710      	adds	r7, #16
    4112:	46bd      	mov	sp, r7
    4114:	bd80      	pop	{r7, pc}
    4116:	bf00      	nop
    4118:	10000488 	.word	0x10000488
    411c:	100003ac 	.word	0x100003ac
    4120:	1000048c 	.word	0x1000048c
    4124:	10000470 	.word	0x10000470
    4128:	10000440 	.word	0x10000440
    412c:	1000043c 	.word	0x1000043c
    4130:	100004a4 	.word	0x100004a4

00004134 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4134:	b580      	push	{r7, lr}
    4136:	b084      	sub	sp, #16
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    413c:	f7ff fbb0 	bl	38a0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    4140:	6878      	ldr	r0, [r7, #4]
    4142:	f004 faa9 	bl	8698 <malloc>
    4146:	4603      	mov	r3, r0
    4148:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    414a:	f7ff fbb7 	bl	38bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    414e:	68fb      	ldr	r3, [r7, #12]
}
    4150:	4618      	mov	r0, r3
    4152:	3710      	adds	r7, #16
    4154:	46bd      	mov	sp, r7
    4156:	bd80      	pop	{r7, pc}

00004158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4158:	b580      	push	{r7, lr}
    415a:	b082      	sub	sp, #8
    415c:	af00      	add	r7, sp, #0
    415e:	6078      	str	r0, [r7, #4]
	if( pv )
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	2b00      	cmp	r3, #0
    4164:	d006      	beq.n	4174 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
    4166:	f7ff fb9b 	bl	38a0 <vTaskSuspendAll>
		{
			free( pv );
    416a:	6878      	ldr	r0, [r7, #4]
    416c:	f004 fa9c 	bl	86a8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    4170:	f7ff fba4 	bl	38bc <xTaskResumeAll>
	}
}
    4174:	bf00      	nop
    4176:	3708      	adds	r7, #8
    4178:	46bd      	mov	sp, r7
    417a:	bd80      	pop	{r7, pc}

0000417c <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    417c:	b480      	push	{r7}
    417e:	af00      	add	r7, sp, #0
    return 1;
    4180:	2301      	movs	r3, #1
  }
    4182:	4618      	mov	r0, r3
    4184:	46bd      	mov	sp, r7
    4186:	f85d 7b04 	ldr.w	r7, [sp], #4
    418a:	4770      	bx	lr

0000418c <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    418c:	b480      	push	{r7}
    418e:	b083      	sub	sp, #12
    4190:	af00      	add	r7, sp, #0
    4192:	6078      	str	r0, [r7, #4]
    4194:	6039      	str	r1, [r7, #0]
    return -1;
    4196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    419a:	4618      	mov	r0, r3
    419c:	370c      	adds	r7, #12
    419e:	46bd      	mov	sp, r7
    41a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41a4:	4770      	bx	lr
    41a6:	Address 0x00000000000041a6 is out of bounds.


000041a8 <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    41a8:	b480      	push	{r7}
    41aa:	b085      	sub	sp, #20
    41ac:	af00      	add	r7, sp, #0
    41ae:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    41b0:	4b0c      	ldr	r3, [pc, #48]	; (41e4 <_sbrk+0x3c>)
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    41b6:	4b0b      	ldr	r3, [pc, #44]	; (41e4 <_sbrk+0x3c>)
    41b8:	681a      	ldr	r2, [r3, #0]
    41ba:	687b      	ldr	r3, [r7, #4]
    41bc:	4413      	add	r3, r2
    41be:	4a0a      	ldr	r2, [pc, #40]	; (41e8 <_sbrk+0x40>)
    41c0:	4293      	cmp	r3, r2
    41c2:	d901      	bls.n	41c8 <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    41c4:	2300      	movs	r3, #0
    41c6:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    41c8:	4b06      	ldr	r3, [pc, #24]	; (41e4 <_sbrk+0x3c>)
    41ca:	681a      	ldr	r2, [r3, #0]
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	4413      	add	r3, r2
    41d0:	4a04      	ldr	r2, [pc, #16]	; (41e4 <_sbrk+0x3c>)
    41d2:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    41d4:	68fb      	ldr	r3, [r7, #12]
  }
    41d6:	4618      	mov	r0, r3
    41d8:	3714      	adds	r7, #20
    41da:	46bd      	mov	sp, r7
    41dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e0:	4770      	bx	lr
    41e2:	bf00      	nop
    41e4:	10000064 	.word	0x10000064
    41e8:	20008000 	.word	0x20008000

000041ec <_write>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    41ec:	b580      	push	{r7, lr}
    41ee:	b084      	sub	sp, #16
    41f0:	af00      	add	r7, sp, #0
    41f2:	60f8      	str	r0, [r7, #12]
    41f4:	60b9      	str	r1, [r7, #8]
    41f6:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	4619      	mov	r1, r3
    41fc:	68b8      	ldr	r0, [r7, #8]
    41fe:	f001 f97a 	bl	54f6 <trace_write>
    return sjsu::newlib::out(ptr, length);
    4202:	4b05      	ldr	r3, [pc, #20]	; (4218 <_write+0x2c>)
    4204:	681b      	ldr	r3, [r3, #0]
    4206:	687a      	ldr	r2, [r7, #4]
    4208:	4611      	mov	r1, r2
    420a:	68b8      	ldr	r0, [r7, #8]
    420c:	4798      	blx	r3
    420e:	4603      	mov	r3, r0
  }
    4210:	4618      	mov	r0, r3
    4212:	3710      	adds	r7, #16
    4214:	46bd      	mov	sp, r7
    4216:	bd80      	pop	{r7, pc}
    4218:	1000005c 	.word	0x1000005c

0000421c <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    421c:	b580      	push	{r7, lr}
    421e:	b084      	sub	sp, #16
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    4224:	6878      	ldr	r0, [r7, #4]
    4226:	f004 fb57 	bl	88d8 <strlen>
    422a:	4603      	mov	r3, r0
    422c:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    422e:	2300      	movs	r3, #0
    4230:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    4232:	68fa      	ldr	r2, [r7, #12]
    4234:	6879      	ldr	r1, [r7, #4]
    4236:	2000      	movs	r0, #0
    4238:	f7ff ffd8 	bl	41ec <_write>
    423c:	4602      	mov	r2, r0
    423e:	68bb      	ldr	r3, [r7, #8]
    4240:	4413      	add	r3, r2
    4242:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    4244:	2201      	movs	r2, #1
    4246:	4906      	ldr	r1, [pc, #24]	; (4260 <puts+0x44>)
    4248:	2000      	movs	r0, #0
    424a:	f7ff ffcf 	bl	41ec <_write>
    424e:	4602      	mov	r2, r0
    4250:	68bb      	ldr	r3, [r7, #8]
    4252:	4413      	add	r3, r2
    4254:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    4256:	68bb      	ldr	r3, [r7, #8]
  }
    4258:	4618      	mov	r0, r3
    425a:	3710      	adds	r7, #16
    425c:	46bd      	mov	sp, r7
    425e:	bd80      	pop	{r7, pc}
    4260:	00009818 	.word	0x00009818

00004264 <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    4264:	b480      	push	{r7}
    4266:	b083      	sub	sp, #12
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    426c:	bf00      	nop
    while (1)
    426e:	e7fd      	b.n	426c <_exit+0x8>

00004270 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    4270:	b580      	push	{r7, lr}
    4272:	b088      	sub	sp, #32
    4274:	af00      	add	r7, sp, #0
    4276:	60b9      	str	r1, [r7, #8]
    4278:	607a      	str	r2, [r7, #4]
    427a:	603b      	str	r3, [r7, #0]
    427c:	4603      	mov	r3, r0
    427e:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    4280:	23fe      	movs	r3, #254	; 0xfe
    4282:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    4284:	697a      	ldr	r2, [r7, #20]
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	fbb3 f1f2 	udiv	r1, r3, r2
    428c:	fb02 f201 	mul.w	r2, r2, r1
    4290:	1a9b      	subs	r3, r3, r2
    4292:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    4294:	68ba      	ldr	r2, [r7, #8]
    4296:	69fb      	ldr	r3, [r7, #28]
    4298:	4413      	add	r3, r2
    429a:	7bfa      	ldrb	r2, [r7, #15]
    429c:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    429e:	7bfb      	ldrb	r3, [r7, #15]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d106      	bne.n	42b2 <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    42a4:	69fb      	ldr	r3, [r7, #28]
    42a6:	461a      	mov	r2, r3
    42a8:	68b9      	ldr	r1, [r7, #8]
    42aa:	2001      	movs	r0, #1
    42ac:	f7ff ff9e 	bl	41ec <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    42b0:	e012      	b.n	42d8 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    42b2:	69fb      	ldr	r3, [r7, #28]
    42b4:	1c5a      	adds	r2, r3, #1
    42b6:	697b      	ldr	r3, [r7, #20]
    42b8:	429a      	cmp	r2, r3
    42ba:	d10d      	bne.n	42d8 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    42bc:	697b      	ldr	r3, [r7, #20]
    42be:	3301      	adds	r3, #1
    42c0:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    42c2:	68ba      	ldr	r2, [r7, #8]
    42c4:	69bb      	ldr	r3, [r7, #24]
    42c6:	4413      	add	r3, r2
    42c8:	2200      	movs	r2, #0
    42ca:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    42cc:	69bb      	ldr	r3, [r7, #24]
    42ce:	461a      	mov	r2, r3
    42d0:	68b9      	ldr	r1, [r7, #8]
    42d2:	2001      	movs	r0, #1
    42d4:	f7ff ff8a 	bl	41ec <_write>
}
    42d8:	bf00      	nop
    42da:	3720      	adds	r7, #32
    42dc:	46bd      	mov	sp, r7
    42de:	bd80      	pop	{r7, pc}

000042e0 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    42e0:	b480      	push	{r7}
    42e2:	b085      	sub	sp, #20
    42e4:	af00      	add	r7, sp, #0
    42e6:	60b9      	str	r1, [r7, #8]
    42e8:	607a      	str	r2, [r7, #4]
    42ea:	603b      	str	r3, [r7, #0]
    42ec:	4603      	mov	r3, r0
    42ee:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    42f0:	bf00      	nop
    42f2:	3714      	adds	r7, #20
    42f4:	46bd      	mov	sp, r7
    42f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42fa:	4770      	bx	lr

000042fc <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    42fc:	b480      	push	{r7}
    42fe:	b085      	sub	sp, #20
    4300:	af00      	add	r7, sp, #0
    4302:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	60fb      	str	r3, [r7, #12]
    4308:	68fb      	ldr	r3, [r7, #12]
    430a:	781b      	ldrb	r3, [r3, #0]
    430c:	2b00      	cmp	r3, #0
    430e:	d003      	beq.n	4318 <_strlen(char const*)+0x1c>
    4310:	68fb      	ldr	r3, [r7, #12]
    4312:	3301      	adds	r3, #1
    4314:	60fb      	str	r3, [r7, #12]
    4316:	e7f7      	b.n	4308 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    4318:	68fa      	ldr	r2, [r7, #12]
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	1ad3      	subs	r3, r2, r3
}
    431e:	4618      	mov	r0, r3
    4320:	3714      	adds	r7, #20
    4322:	46bd      	mov	sp, r7
    4324:	f85d 7b04 	ldr.w	r7, [sp], #4
    4328:	4770      	bx	lr

0000432a <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    432a:	b480      	push	{r7}
    432c:	b083      	sub	sp, #12
    432e:	af00      	add	r7, sp, #0
    4330:	4603      	mov	r3, r0
    4332:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    4334:	79fb      	ldrb	r3, [r7, #7]
    4336:	2b2f      	cmp	r3, #47	; 0x2f
    4338:	d904      	bls.n	4344 <_is_digit(char)+0x1a>
    433a:	79fb      	ldrb	r3, [r7, #7]
    433c:	2b39      	cmp	r3, #57	; 0x39
    433e:	d801      	bhi.n	4344 <_is_digit(char)+0x1a>
    4340:	2301      	movs	r3, #1
    4342:	e000      	b.n	4346 <_is_digit(char)+0x1c>
    4344:	2300      	movs	r3, #0
}
    4346:	4618      	mov	r0, r3
    4348:	370c      	adds	r7, #12
    434a:	46bd      	mov	sp, r7
    434c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4350:	4770      	bx	lr

00004352 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    4352:	b580      	push	{r7, lr}
    4354:	b084      	sub	sp, #16
    4356:	af00      	add	r7, sp, #0
    4358:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    435a:	2300      	movs	r3, #0
    435c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	781b      	ldrb	r3, [r3, #0]
    4364:	4618      	mov	r0, r3
    4366:	f7ff ffe0 	bl	432a <_is_digit(char)>
    436a:	4603      	mov	r3, r0
    436c:	2b00      	cmp	r3, #0
    436e:	d00f      	beq.n	4390 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    4370:	68fa      	ldr	r2, [r7, #12]
    4372:	4613      	mov	r3, r2
    4374:	009b      	lsls	r3, r3, #2
    4376:	4413      	add	r3, r2
    4378:	005b      	lsls	r3, r3, #1
    437a:	4618      	mov	r0, r3
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	1c59      	adds	r1, r3, #1
    4382:	687a      	ldr	r2, [r7, #4]
    4384:	6011      	str	r1, [r2, #0]
    4386:	781b      	ldrb	r3, [r3, #0]
    4388:	4403      	add	r3, r0
    438a:	3b30      	subs	r3, #48	; 0x30
    438c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    438e:	e7e6      	b.n	435e <_atoi(char const**)+0xc>
  }
  return i;
    4390:	68fb      	ldr	r3, [r7, #12]
}
    4392:	4618      	mov	r0, r3
    4394:	3710      	adds	r7, #16
    4396:	46bd      	mov	sp, r7
    4398:	bd80      	pop	{r7, pc}

0000439a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    439a:	b590      	push	{r4, r7, lr}
    439c:	b089      	sub	sp, #36	; 0x24
    439e:	af00      	add	r7, sp, #0
    43a0:	60f8      	str	r0, [r7, #12]
    43a2:	60b9      	str	r1, [r7, #8]
    43a4:	607a      	str	r2, [r7, #4]
    43a6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    43ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    43ae:	f003 0302 	and.w	r3, r3, #2
    43b2:	2b00      	cmp	r3, #0
    43b4:	d10e      	bne.n	43d4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    43b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    43b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43ba:	429a      	cmp	r2, r3
    43bc:	d20a      	bcs.n	43d4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    43be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43c0:	2b1f      	cmp	r3, #31
    43c2:	d807      	bhi.n	43d4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    43c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43c6:	1c5a      	adds	r2, r3, #1
    43c8:	637a      	str	r2, [r7, #52]	; 0x34
    43ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    43cc:	4413      	add	r3, r2
    43ce:	2230      	movs	r2, #48	; 0x30
    43d0:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    43d2:	e7eb      	b.n	43ac <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    43d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    43d6:	f003 0302 	and.w	r3, r3, #2
    43da:	2b00      	cmp	r3, #0
    43dc:	d113      	bne.n	4406 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    43de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    43e0:	f003 0301 	and.w	r3, r3, #1
    43e4:	2b00      	cmp	r3, #0
    43e6:	d00e      	beq.n	4406 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    43e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    43ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    43ec:	429a      	cmp	r2, r3
    43ee:	d20a      	bcs.n	4406 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    43f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43f2:	2b1f      	cmp	r3, #31
    43f4:	d807      	bhi.n	4406 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    43f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43f8:	1c5a      	adds	r2, r3, #1
    43fa:	637a      	str	r2, [r7, #52]	; 0x34
    43fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    43fe:	4413      	add	r3, r2
    4400:	2230      	movs	r2, #48	; 0x30
    4402:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4404:	e7e6      	b.n	43d4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    4406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4408:	f003 0310 	and.w	r3, r3, #16
    440c:	2b00      	cmp	r3, #0
    440e:	d058      	beq.n	44c2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    4410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4416:	2b00      	cmp	r3, #0
    4418:	d116      	bne.n	4448 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    441c:	2b00      	cmp	r3, #0
    441e:	d013      	beq.n	4448 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    4420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4424:	429a      	cmp	r2, r3
    4426:	d003      	beq.n	4430 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    4428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    442a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    442c:	429a      	cmp	r2, r3
    442e:	d10b      	bne.n	4448 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    4430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4432:	3b01      	subs	r3, #1
    4434:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    4436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4438:	2b00      	cmp	r3, #0
    443a:	d005      	beq.n	4448 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    443e:	2b10      	cmp	r3, #16
    4440:	d102      	bne.n	4448 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    4442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4444:	3b01      	subs	r3, #1
    4446:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    444a:	2b10      	cmp	r3, #16
    444c:	d10f      	bne.n	446e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    444e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4450:	f003 0320 	and.w	r3, r3, #32
    4454:	2b00      	cmp	r3, #0
    4456:	d10a      	bne.n	446e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    4458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    445a:	2b1f      	cmp	r3, #31
    445c:	d807      	bhi.n	446e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4460:	1c5a      	adds	r2, r3, #1
    4462:	637a      	str	r2, [r7, #52]	; 0x34
    4464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4466:	4413      	add	r3, r2
    4468:	2278      	movs	r2, #120	; 0x78
    446a:	701a      	strb	r2, [r3, #0]
    446c:	e01f      	b.n	44ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4470:	2b10      	cmp	r3, #16
    4472:	d10f      	bne.n	4494 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    4474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4476:	f003 0320 	and.w	r3, r3, #32
    447a:	2b00      	cmp	r3, #0
    447c:	d00a      	beq.n	4494 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4480:	2b1f      	cmp	r3, #31
    4482:	d807      	bhi.n	4494 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    4484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4486:	1c5a      	adds	r2, r3, #1
    4488:	637a      	str	r2, [r7, #52]	; 0x34
    448a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    448c:	4413      	add	r3, r2
    448e:	2258      	movs	r2, #88	; 0x58
    4490:	701a      	strb	r2, [r3, #0]
    4492:	e00c      	b.n	44ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    4494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4496:	2b02      	cmp	r3, #2
    4498:	d109      	bne.n	44ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    449c:	2b1f      	cmp	r3, #31
    449e:	d806      	bhi.n	44ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    44a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44a2:	1c5a      	adds	r2, r3, #1
    44a4:	637a      	str	r2, [r7, #52]	; 0x34
    44a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    44a8:	4413      	add	r3, r2
    44aa:	2262      	movs	r2, #98	; 0x62
    44ac:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    44ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44b0:	2b1f      	cmp	r3, #31
    44b2:	d806      	bhi.n	44c2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    44b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44b6:	1c5a      	adds	r2, r3, #1
    44b8:	637a      	str	r2, [r7, #52]	; 0x34
    44ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    44bc:	4413      	add	r3, r2
    44be:	2230      	movs	r2, #48	; 0x30
    44c0:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    44c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44c4:	2b00      	cmp	r3, #0
    44c6:	d014      	beq.n	44f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    44c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    44ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    44cc:	429a      	cmp	r2, r3
    44ce:	d110      	bne.n	44f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    44d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    44d4:	2b00      	cmp	r3, #0
    44d6:	d109      	bne.n	44ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    44d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    44da:	f003 0304 	and.w	r3, r3, #4
    44de:	2b00      	cmp	r3, #0
    44e0:	d104      	bne.n	44ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    44e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    44e4:	f003 0308 	and.w	r3, r3, #8
    44e8:	2b00      	cmp	r3, #0
    44ea:	d002      	beq.n	44f2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    44ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44ee:	3b01      	subs	r3, #1
    44f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    44f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44f4:	2b1f      	cmp	r3, #31
    44f6:	d824      	bhi.n	4542 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    44f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    44fc:	2b00      	cmp	r3, #0
    44fe:	d007      	beq.n	4510 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    4500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4502:	1c5a      	adds	r2, r3, #1
    4504:	637a      	str	r2, [r7, #52]	; 0x34
    4506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4508:	4413      	add	r3, r2
    450a:	222d      	movs	r2, #45	; 0x2d
    450c:	701a      	strb	r2, [r3, #0]
    450e:	e018      	b.n	4542 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    4510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4512:	f003 0304 	and.w	r3, r3, #4
    4516:	2b00      	cmp	r3, #0
    4518:	d007      	beq.n	452a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    451c:	1c5a      	adds	r2, r3, #1
    451e:	637a      	str	r2, [r7, #52]	; 0x34
    4520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4522:	4413      	add	r3, r2
    4524:	222b      	movs	r2, #43	; 0x2b
    4526:	701a      	strb	r2, [r3, #0]
    4528:	e00b      	b.n	4542 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    452a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    452c:	f003 0308 	and.w	r3, r3, #8
    4530:	2b00      	cmp	r3, #0
    4532:	d006      	beq.n	4542 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    4534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4536:	1c5a      	adds	r2, r3, #1
    4538:	637a      	str	r2, [r7, #52]	; 0x34
    453a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    453c:	4413      	add	r3, r2
    453e:	2220      	movs	r2, #32
    4540:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4544:	f003 0302 	and.w	r3, r3, #2
    4548:	2b00      	cmp	r3, #0
    454a:	d116      	bne.n	457a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    454c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    454e:	f003 0301 	and.w	r3, r3, #1
    4552:	2b00      	cmp	r3, #0
    4554:	d111      	bne.n	457a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    4556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4558:	61fb      	str	r3, [r7, #28]
    455a:	69fa      	ldr	r2, [r7, #28]
    455c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    455e:	429a      	cmp	r2, r3
    4560:	d20b      	bcs.n	457a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    4562:	687a      	ldr	r2, [r7, #4]
    4564:	1c53      	adds	r3, r2, #1
    4566:	607b      	str	r3, [r7, #4]
    4568:	68fc      	ldr	r4, [r7, #12]
    456a:	683b      	ldr	r3, [r7, #0]
    456c:	68b9      	ldr	r1, [r7, #8]
    456e:	2020      	movs	r0, #32
    4570:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4572:	69fb      	ldr	r3, [r7, #28]
    4574:	3301      	adds	r3, #1
    4576:	61fb      	str	r3, [r7, #28]
    4578:	e7ef      	b.n	455a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    457a:	2300      	movs	r3, #0
    457c:	61bb      	str	r3, [r7, #24]
    457e:	69ba      	ldr	r2, [r7, #24]
    4580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4582:	429a      	cmp	r2, r3
    4584:	d211      	bcs.n	45aa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    4586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4588:	69bb      	ldr	r3, [r7, #24]
    458a:	1ad3      	subs	r3, r2, r3
    458c:	3b01      	subs	r3, #1
    458e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4590:	4413      	add	r3, r2
    4592:	7818      	ldrb	r0, [r3, #0]
    4594:	687a      	ldr	r2, [r7, #4]
    4596:	1c53      	adds	r3, r2, #1
    4598:	607b      	str	r3, [r7, #4]
    459a:	68fc      	ldr	r4, [r7, #12]
    459c:	683b      	ldr	r3, [r7, #0]
    459e:	68b9      	ldr	r1, [r7, #8]
    45a0:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    45a2:	69bb      	ldr	r3, [r7, #24]
    45a4:	3301      	adds	r3, #1
    45a6:	61bb      	str	r3, [r7, #24]
    45a8:	e7e9      	b.n	457e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    45aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    45ac:	f003 0302 	and.w	r3, r3, #2
    45b0:	2b00      	cmp	r3, #0
    45b2:	d00e      	beq.n	45d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    45b4:	687a      	ldr	r2, [r7, #4]
    45b6:	697b      	ldr	r3, [r7, #20]
    45b8:	1ad3      	subs	r3, r2, r3
    45ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    45bc:	429a      	cmp	r2, r3
    45be:	d908      	bls.n	45d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    45c0:	687a      	ldr	r2, [r7, #4]
    45c2:	1c53      	adds	r3, r2, #1
    45c4:	607b      	str	r3, [r7, #4]
    45c6:	68fc      	ldr	r4, [r7, #12]
    45c8:	683b      	ldr	r3, [r7, #0]
    45ca:	68b9      	ldr	r1, [r7, #8]
    45cc:	2020      	movs	r0, #32
    45ce:	47a0      	blx	r4
    while (idx - start_idx < width) {
    45d0:	e7f0      	b.n	45b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    45d2:	687b      	ldr	r3, [r7, #4]
}
    45d4:	4618      	mov	r0, r3
    45d6:	3724      	adds	r7, #36	; 0x24
    45d8:	46bd      	mov	sp, r7
    45da:	bd90      	pop	{r4, r7, pc}

000045dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    45dc:	b580      	push	{r7, lr}
    45de:	b096      	sub	sp, #88	; 0x58
    45e0:	af08      	add	r7, sp, #32
    45e2:	60f8      	str	r0, [r7, #12]
    45e4:	60b9      	str	r1, [r7, #8]
    45e6:	607a      	str	r2, [r7, #4]
    45e8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    45ea:	2300      	movs	r3, #0
    45ec:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    45ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    45f0:	2b00      	cmp	r3, #0
    45f2:	d103      	bne.n	45fc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    45f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    45f6:	f023 0310 	bic.w	r3, r3, #16
    45fa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    45fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    45fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4602:	2b00      	cmp	r3, #0
    4604:	d002      	beq.n	460c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    4606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4608:	2b00      	cmp	r3, #0
    460a:	d034      	beq.n	4676 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    460c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    460e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4610:	fbb3 f2f2 	udiv	r2, r3, r2
    4614:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    4616:	fb01 f202 	mul.w	r2, r1, r2
    461a:	1a9b      	subs	r3, r3, r2
    461c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    4620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    4624:	2b09      	cmp	r3, #9
    4626:	d804      	bhi.n	4632 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    4628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    462c:	3330      	adds	r3, #48	; 0x30
    462e:	b2da      	uxtb	r2, r3
    4630:	e00d      	b.n	464e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    4632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4634:	f003 0320 	and.w	r3, r3, #32
    4638:	2b00      	cmp	r3, #0
    463a:	d001      	beq.n	4640 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    463c:	2241      	movs	r2, #65	; 0x41
    463e:	e000      	b.n	4642 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    4640:	2261      	movs	r2, #97	; 0x61
    4642:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    4646:	4413      	add	r3, r2
    4648:	b2db      	uxtb	r3, r3
    464a:	3b0a      	subs	r3, #10
    464c:	b2da      	uxtb	r2, r3
    464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4650:	1c59      	adds	r1, r3, #1
    4652:	6379      	str	r1, [r7, #52]	; 0x34
    4654:	f107 0138 	add.w	r1, r7, #56	; 0x38
    4658:	440b      	add	r3, r1
    465a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    465e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4662:	fbb2 f3f3 	udiv	r3, r2, r3
    4666:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    4668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    466a:	2b00      	cmp	r3, #0
    466c:	d003      	beq.n	4676 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4670:	2b1f      	cmp	r3, #31
    4672:	d800      	bhi.n	4676 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    4674:	e7ca      	b.n	460c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    4676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4678:	9306      	str	r3, [sp, #24]
    467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    467c:	9305      	str	r3, [sp, #20]
    467e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4680:	9304      	str	r3, [sp, #16]
    4682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4684:	9303      	str	r3, [sp, #12]
    4686:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    468a:	9302      	str	r3, [sp, #8]
    468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    468e:	9301      	str	r3, [sp, #4]
    4690:	f107 0310 	add.w	r3, r7, #16
    4694:	9300      	str	r3, [sp, #0]
    4696:	683b      	ldr	r3, [r7, #0]
    4698:	687a      	ldr	r2, [r7, #4]
    469a:	68b9      	ldr	r1, [r7, #8]
    469c:	68f8      	ldr	r0, [r7, #12]
    469e:	f7ff fe7c 	bl	439a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    46a2:	4603      	mov	r3, r0
}
    46a4:	4618      	mov	r0, r3
    46a6:	3738      	adds	r7, #56	; 0x38
    46a8:	46bd      	mov	sp, r7
    46aa:	bd80      	pop	{r7, pc}

000046ac <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    46ac:	b590      	push	{r4, r7, lr}
    46ae:	b097      	sub	sp, #92	; 0x5c
    46b0:	af08      	add	r7, sp, #32
    46b2:	60f8      	str	r0, [r7, #12]
    46b4:	60b9      	str	r1, [r7, #8]
    46b6:	607a      	str	r2, [r7, #4]
    46b8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    46ba:	2300      	movs	r3, #0
    46bc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    46be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    46c2:	4323      	orrs	r3, r4
    46c4:	d103      	bne.n	46ce <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    46c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    46c8:	f023 0310 	bic.w	r3, r3, #16
    46cc:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    46ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    46d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    46d4:	2b00      	cmp	r3, #0
    46d6:	d003      	beq.n	46e0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    46d8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    46dc:	4323      	orrs	r3, r4
    46de:	d03a      	beq.n	4756 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    46e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    46e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    46e8:	f002 fea4 	bl	7434 <__aeabi_uldivmod>
    46ec:	461c      	mov	r4, r3
    46ee:	4613      	mov	r3, r2
    46f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    46f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    46f8:	2b09      	cmp	r3, #9
    46fa:	d804      	bhi.n	4706 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    46fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    4700:	3330      	adds	r3, #48	; 0x30
    4702:	b2da      	uxtb	r2, r3
    4704:	e00d      	b.n	4722 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    4706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4708:	f003 0320 	and.w	r3, r3, #32
    470c:	2b00      	cmp	r3, #0
    470e:	d001      	beq.n	4714 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    4710:	2241      	movs	r2, #65	; 0x41
    4712:	e000      	b.n	4716 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    4714:	2261      	movs	r2, #97	; 0x61
    4716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    471a:	4413      	add	r3, r2
    471c:	b2db      	uxtb	r3, r3
    471e:	3b0a      	subs	r3, #10
    4720:	b2da      	uxtb	r2, r3
    4722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4724:	1c59      	adds	r1, r3, #1
    4726:	6379      	str	r1, [r7, #52]	; 0x34
    4728:	f107 0138 	add.w	r1, r7, #56	; 0x38
    472c:	440b      	add	r3, r1
    472e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    4732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    4736:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    473a:	f002 fe7b 	bl	7434 <__aeabi_uldivmod>
    473e:	4603      	mov	r3, r0
    4740:	460c      	mov	r4, r1
    4742:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    4746:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    474a:	4323      	orrs	r3, r4
    474c:	d003      	beq.n	4756 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4750:	2b1f      	cmp	r3, #31
    4752:	d800      	bhi.n	4756 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    4754:	e7c4      	b.n	46e0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    4756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4758:	6eba      	ldr	r2, [r7, #104]	; 0x68
    475a:	9206      	str	r2, [sp, #24]
    475c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    475e:	9205      	str	r2, [sp, #20]
    4760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4762:	9204      	str	r2, [sp, #16]
    4764:	9303      	str	r3, [sp, #12]
    4766:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    476a:	9302      	str	r3, [sp, #8]
    476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    476e:	9301      	str	r3, [sp, #4]
    4770:	f107 0310 	add.w	r3, r7, #16
    4774:	9300      	str	r3, [sp, #0]
    4776:	683b      	ldr	r3, [r7, #0]
    4778:	687a      	ldr	r2, [r7, #4]
    477a:	68b9      	ldr	r1, [r7, #8]
    477c:	68f8      	ldr	r0, [r7, #12]
    477e:	f7ff fe0c 	bl	439a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    4782:	4603      	mov	r3, r0
}
    4784:	4618      	mov	r0, r3
    4786:	373c      	adds	r7, #60	; 0x3c
    4788:	46bd      	mov	sp, r7
    478a:	bd90      	pop	{r4, r7, pc}

0000478c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    478c:	b590      	push	{r4, r7, lr}
    478e:	b09b      	sub	sp, #108	; 0x6c
    4790:	af00      	add	r7, sp, #0
    4792:	6178      	str	r0, [r7, #20]
    4794:	6139      	str	r1, [r7, #16]
    4796:	60fa      	str	r2, [r7, #12]
    4798:	60bb      	str	r3, [r7, #8]
    479a:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    47a2:	e9d7 0100 	ldrd	r0, r1, [r7]
    47a6:	f002 fce7 	bl	7178 <__aeabi_d2f>
    47aa:	4603      	mov	r3, r0
    47ac:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    47ae:	2300      	movs	r3, #0
    47b0:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    47b2:	f04f 0300 	mov.w	r3, #0
    47b6:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    47b8:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    47bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    47be:	2300      	movs	r3, #0
    47c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    47c4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    47c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    47cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47d0:	d50a      	bpl.n	47e8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    47d2:	2301      	movs	r3, #1
    47d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    47d8:	ed9f 7aab 	vldr	s14, [pc, #684]	; 4a88 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    47dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    47e0:	ee77 7a67 	vsub.f32	s15, s14, s15
    47e4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    47e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    47ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    47f0:	2b00      	cmp	r3, #0
    47f2:	d101      	bne.n	47f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    47f4:	2306      	movs	r3, #6
    47f6:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    47f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    47fa:	2b1f      	cmp	r3, #31
    47fc:	d80f      	bhi.n	481e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    47fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4800:	2b09      	cmp	r3, #9
    4802:	d90c      	bls.n	481e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    4804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4806:	1c5a      	adds	r2, r3, #1
    4808:	663a      	str	r2, [r7, #96]	; 0x60
    480a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    480e:	4413      	add	r3, r2
    4810:	2230      	movs	r2, #48	; 0x30
    4812:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    4816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4818:	3b01      	subs	r3, #1
    481a:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    481c:	e7ec      	b.n	47f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    481e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    4822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4826:	ee17 3a90 	vmov	r3, s15
    482a:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    482c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    482e:	ee07 3a90 	vmov	s15, r3
    4832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4836:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    483a:	ee37 7a67 	vsub.f32	s14, s14, s15
    483e:	4a93      	ldr	r2, [pc, #588]	; (4a8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    4840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4842:	009b      	lsls	r3, r3, #2
    4844:	4413      	add	r3, r2
    4846:	edd3 7a00 	vldr	s15, [r3]
    484a:	ee67 7a27 	vmul.f32	s15, s14, s15
    484e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    4852:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    4856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    485a:	ee17 3a90 	vmov	r3, s15
    485e:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    4860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4862:	ee07 3a90 	vmov	s15, r3
    4866:	eef8 7a67 	vcvt.f32.u32	s15, s15
    486a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    486e:	ee77 7a67 	vsub.f32	s15, s14, s15
    4872:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    4876:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    487a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    487e:	eef4 7ac7 	vcmpe.f32	s15, s14
    4882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4886:	dd18      	ble.n	48ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    4888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    488a:	3301      	adds	r3, #1
    488c:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4890:	ee07 3a90 	vmov	s15, r3
    4894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    4898:	4a7c      	ldr	r2, [pc, #496]	; (4a8c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    489a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    489c:	009b      	lsls	r3, r3, #2
    489e:	4413      	add	r3, r2
    48a0:	edd3 7a00 	vldr	s15, [r3]
    48a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    48a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48ac:	db19      	blt.n	48e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    48ae:	2300      	movs	r3, #0
    48b0:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    48b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    48b4:	3301      	adds	r3, #1
    48b6:	65bb      	str	r3, [r7, #88]	; 0x58
    48b8:	e013      	b.n	48e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    48ba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    48be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    48c2:	eef4 7a47 	vcmp.f32	s15, s14
    48c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48ca:	d10a      	bne.n	48e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    48cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48ce:	2b00      	cmp	r3, #0
    48d0:	d004      	beq.n	48dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    48d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48d4:	f003 0301 	and.w	r3, r3, #1
    48d8:	2b00      	cmp	r3, #0
    48da:	d002      	beq.n	48e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    48dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48de:	3301      	adds	r3, #1
    48e0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    48e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    48e6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 4a90 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    48ea:	eef4 7ac7 	vcmpe.f32	s15, s14
    48ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48f2:	dd01      	ble.n	48f8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    48f4:	2300      	movs	r3, #0
    48f6:	e166      	b.n	4bc6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    48f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    48fa:	2b00      	cmp	r3, #0
    48fc:	d129      	bne.n	4952 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    48fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4900:	ee07 3a90 	vmov	s15, r3
    4904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4908:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    490c:	ee77 7a67 	vsub.f32	s15, s14, s15
    4910:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    4914:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4918:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    491c:	eef4 7ac7 	vcmpe.f32	s15, s14
    4920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4924:	dd03      	ble.n	492e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    4926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4928:	3301      	adds	r3, #1
    492a:	65bb      	str	r3, [r7, #88]	; 0x58
    492c:	e062      	b.n	49f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    492e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    4932:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4936:	eef4 7a47 	vcmp.f32	s15, s14
    493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    493e:	d159      	bne.n	49f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    4940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4942:	f003 0301 	and.w	r3, r3, #1
    4946:	2b00      	cmp	r3, #0
    4948:	d054      	beq.n	49f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    494a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    494c:	3301      	adds	r3, #1
    494e:	65bb      	str	r3, [r7, #88]	; 0x58
    4950:	e050      	b.n	49f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    4952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4954:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4958:	2b1f      	cmp	r3, #31
    495a:	d828      	bhi.n	49ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    495c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    495e:	3b01      	subs	r3, #1
    4960:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    4962:	6d79      	ldr	r1, [r7, #84]	; 0x54
    4964:	4b4b      	ldr	r3, [pc, #300]	; (4a94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    4966:	fba3 2301 	umull	r2, r3, r3, r1
    496a:	08da      	lsrs	r2, r3, #3
    496c:	4613      	mov	r3, r2
    496e:	009b      	lsls	r3, r3, #2
    4970:	4413      	add	r3, r2
    4972:	005b      	lsls	r3, r3, #1
    4974:	1aca      	subs	r2, r1, r3
    4976:	b2d3      	uxtb	r3, r2
    4978:	3330      	adds	r3, #48	; 0x30
    497a:	b2d9      	uxtb	r1, r3
    497c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    497e:	1c5a      	adds	r2, r3, #1
    4980:	663a      	str	r2, [r7, #96]	; 0x60
    4982:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4986:	4413      	add	r3, r2
    4988:	460a      	mov	r2, r1
    498a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4990:	4a40      	ldr	r2, [pc, #256]	; (4a94 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    4992:	fba2 2303 	umull	r2, r3, r2, r3
    4996:	08db      	lsrs	r3, r3, #3
    4998:	657b      	str	r3, [r7, #84]	; 0x54
    499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    499c:	2b00      	cmp	r3, #0
    499e:	bf0c      	ite	eq
    49a0:	2301      	moveq	r3, #1
    49a2:	2300      	movne	r3, #0
    49a4:	b2db      	uxtb	r3, r3
    49a6:	2b00      	cmp	r3, #0
    49a8:	d100      	bne.n	49ac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    49aa:	e7d4      	b.n	4956 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    49ac:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    49ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    49b0:	2b1f      	cmp	r3, #31
    49b2:	d806      	bhi.n	49c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    49b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    49b6:	1e5a      	subs	r2, r3, #1
    49b8:	653a      	str	r2, [r7, #80]	; 0x50
    49ba:	2b00      	cmp	r3, #0
    49bc:	d001      	beq.n	49c2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    49be:	2301      	movs	r3, #1
    49c0:	e000      	b.n	49c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    49c2:	2300      	movs	r3, #0
    49c4:	2b00      	cmp	r3, #0
    49c6:	d009      	beq.n	49dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    49c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    49ca:	1c5a      	adds	r2, r3, #1
    49cc:	663a      	str	r2, [r7, #96]	; 0x60
    49ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
    49d2:	4413      	add	r3, r2
    49d4:	2230      	movs	r2, #48	; 0x30
    49d6:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    49da:	e7e8      	b.n	49ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    49dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    49de:	2b1f      	cmp	r3, #31
    49e0:	d808      	bhi.n	49f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    49e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    49e4:	1c5a      	adds	r2, r3, #1
    49e6:	663a      	str	r2, [r7, #96]	; 0x60
    49e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
    49ec:	4413      	add	r3, r2
    49ee:	222e      	movs	r2, #46	; 0x2e
    49f0:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    49f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    49f6:	2b1f      	cmp	r3, #31
    49f8:	d829      	bhi.n	4a4e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    49fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
    49fc:	4b26      	ldr	r3, [pc, #152]	; (4a98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    49fe:	fb83 1302 	smull	r1, r3, r3, r2
    4a02:	1099      	asrs	r1, r3, #2
    4a04:	17d3      	asrs	r3, r2, #31
    4a06:	1ac9      	subs	r1, r1, r3
    4a08:	460b      	mov	r3, r1
    4a0a:	009b      	lsls	r3, r3, #2
    4a0c:	440b      	add	r3, r1
    4a0e:	005b      	lsls	r3, r3, #1
    4a10:	1ad1      	subs	r1, r2, r3
    4a12:	b2cb      	uxtb	r3, r1
    4a14:	3330      	adds	r3, #48	; 0x30
    4a16:	b2d9      	uxtb	r1, r3
    4a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4a1a:	1c5a      	adds	r2, r3, #1
    4a1c:	663a      	str	r2, [r7, #96]	; 0x60
    4a1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4a22:	4413      	add	r3, r2
    4a24:	460a      	mov	r2, r1
    4a26:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    4a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a2c:	4a1a      	ldr	r2, [pc, #104]	; (4a98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    4a2e:	fb82 1203 	smull	r1, r2, r2, r3
    4a32:	1092      	asrs	r2, r2, #2
    4a34:	17db      	asrs	r3, r3, #31
    4a36:	1ad3      	subs	r3, r2, r3
    4a38:	65bb      	str	r3, [r7, #88]	; 0x58
    4a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	bf0c      	ite	eq
    4a40:	2301      	moveq	r3, #1
    4a42:	2300      	movne	r3, #0
    4a44:	b2db      	uxtb	r3, r3
    4a46:	2b00      	cmp	r3, #0
    4a48:	d100      	bne.n	4a4c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4a4a:	e7d3      	b.n	49f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    4a4c:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4a4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4a52:	f003 0302 	and.w	r3, r3, #2
    4a56:	2b00      	cmp	r3, #0
    4a58:	d120      	bne.n	4a9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4a5e:	f003 0301 	and.w	r3, r3, #1
    4a62:	2b00      	cmp	r3, #0
    4a64:	d01a      	beq.n	4a9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4a66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a6a:	429a      	cmp	r2, r3
    4a6c:	d216      	bcs.n	4a9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4a70:	2b1f      	cmp	r3, #31
    4a72:	d813      	bhi.n	4a9c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    4a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4a76:	1c5a      	adds	r2, r3, #1
    4a78:	663a      	str	r2, [r7, #96]	; 0x60
    4a7a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4a7e:	4413      	add	r3, r2
    4a80:	2230      	movs	r2, #48	; 0x30
    4a82:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4a86:	e7e2      	b.n	4a4e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    4a88:	00000000 	.word	0x00000000
    4a8c:	0000981c 	.word	0x0000981c
    4a90:	4f000000 	.word	0x4f000000
    4a94:	cccccccd 	.word	0xcccccccd
    4a98:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    4a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4aa0:	429a      	cmp	r2, r3
    4aa2:	d112      	bne.n	4aca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    4aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d10b      	bne.n	4ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    4aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4ab0:	f003 0304 	and.w	r3, r3, #4
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d105      	bne.n	4ac4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    4ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4abc:	f003 0308 	and.w	r3, r3, #8
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d002      	beq.n	4aca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    4ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4ac6:	3b01      	subs	r3, #1
    4ac8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4acc:	2b1f      	cmp	r3, #31
    4ace:	d82c      	bhi.n	4b2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    4ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	d009      	beq.n	4aec <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    4ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4ada:	1c5a      	adds	r2, r3, #1
    4adc:	663a      	str	r2, [r7, #96]	; 0x60
    4ade:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4ae2:	4413      	add	r3, r2
    4ae4:	222d      	movs	r2, #45	; 0x2d
    4ae6:	f803 2c50 	strb.w	r2, [r3, #-80]
    4aea:	e01e      	b.n	4b2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    4aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4af0:	f003 0304 	and.w	r3, r3, #4
    4af4:	2b00      	cmp	r3, #0
    4af6:	d009      	beq.n	4b0c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    4af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4afa:	1c5a      	adds	r2, r3, #1
    4afc:	663a      	str	r2, [r7, #96]	; 0x60
    4afe:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4b02:	4413      	add	r3, r2
    4b04:	222b      	movs	r2, #43	; 0x2b
    4b06:	f803 2c50 	strb.w	r2, [r3, #-80]
    4b0a:	e00e      	b.n	4b2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    4b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4b10:	f003 0308 	and.w	r3, r3, #8
    4b14:	2b00      	cmp	r3, #0
    4b16:	d008      	beq.n	4b2a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    4b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b1a:	1c5a      	adds	r2, r3, #1
    4b1c:	663a      	str	r2, [r7, #96]	; 0x60
    4b1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4b22:	4413      	add	r3, r2
    4b24:	2220      	movs	r2, #32
    4b26:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4b2e:	f003 0302 	and.w	r3, r3, #2
    4b32:	2b00      	cmp	r3, #0
    4b34:	d117      	bne.n	4b66 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    4b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4b3a:	f003 0301 	and.w	r3, r3, #1
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d111      	bne.n	4b66 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    4b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    4b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d20b      	bcs.n	4b66 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    4b4e:	68fa      	ldr	r2, [r7, #12]
    4b50:	1c53      	adds	r3, r2, #1
    4b52:	60fb      	str	r3, [r7, #12]
    4b54:	697c      	ldr	r4, [r7, #20]
    4b56:	68bb      	ldr	r3, [r7, #8]
    4b58:	6939      	ldr	r1, [r7, #16]
    4b5a:	2020      	movs	r0, #32
    4b5c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4b60:	3301      	adds	r3, #1
    4b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    4b64:	e7ef      	b.n	4b46 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    4b66:	2300      	movs	r3, #0
    4b68:	64bb      	str	r3, [r7, #72]	; 0x48
    4b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    4b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b6e:	429a      	cmp	r2, r3
    4b70:	d213      	bcs.n	4b9a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    4b72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4b76:	1ad3      	subs	r3, r2, r3
    4b78:	3b01      	subs	r3, #1
    4b7a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4b7e:	4413      	add	r3, r2
    4b80:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    4b84:	68fa      	ldr	r2, [r7, #12]
    4b86:	1c53      	adds	r3, r2, #1
    4b88:	60fb      	str	r3, [r7, #12]
    4b8a:	697c      	ldr	r4, [r7, #20]
    4b8c:	68bb      	ldr	r3, [r7, #8]
    4b8e:	6939      	ldr	r1, [r7, #16]
    4b90:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    4b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4b94:	3301      	adds	r3, #1
    4b96:	64bb      	str	r3, [r7, #72]	; 0x48
    4b98:	e7e7      	b.n	4b6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    4b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4b9e:	f003 0302 	and.w	r3, r3, #2
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d00e      	beq.n	4bc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    4ba6:	68fa      	ldr	r2, [r7, #12]
    4ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4baa:	1ad3      	subs	r3, r2, r3
    4bac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    4bae:	429a      	cmp	r2, r3
    4bb0:	d908      	bls.n	4bc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    4bb2:	68fa      	ldr	r2, [r7, #12]
    4bb4:	1c53      	adds	r3, r2, #1
    4bb6:	60fb      	str	r3, [r7, #12]
    4bb8:	697c      	ldr	r4, [r7, #20]
    4bba:	68bb      	ldr	r3, [r7, #8]
    4bbc:	6939      	ldr	r1, [r7, #16]
    4bbe:	2020      	movs	r0, #32
    4bc0:	47a0      	blx	r4
    while (idx - start_idx < width) {
    4bc2:	e7f0      	b.n	4ba6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    4bc4:	68fb      	ldr	r3, [r7, #12]
}
    4bc6:	4618      	mov	r0, r3
    4bc8:	376c      	adds	r7, #108	; 0x6c
    4bca:	46bd      	mov	sp, r7
    4bcc:	bd90      	pop	{r4, r7, pc}
    4bce:	bf00      	nop

00004bd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    4bd0:	b5b0      	push	{r4, r5, r7, lr}
    4bd2:	b0a0      	sub	sp, #128	; 0x80
    4bd4:	af0a      	add	r7, sp, #40	; 0x28
    4bd6:	60f8      	str	r0, [r7, #12]
    4bd8:	60b9      	str	r1, [r7, #8]
    4bda:	607a      	str	r2, [r7, #4]
    4bdc:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    4bde:	2300      	movs	r3, #0
    4be0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    4be2:	68bb      	ldr	r3, [r7, #8]
    4be4:	2b00      	cmp	r3, #0
    4be6:	d101      	bne.n	4bec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    4be8:	4ba2      	ldr	r3, [pc, #648]	; (4e74 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    4bea:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    4bec:	683b      	ldr	r3, [r7, #0]
    4bee:	781b      	ldrb	r3, [r3, #0]
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	f000 8445 	beq.w	5480 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    4bf6:	683b      	ldr	r3, [r7, #0]
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	2b25      	cmp	r3, #37	; 0x25
    4bfc:	d00d      	beq.n	4c1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    4bfe:	683b      	ldr	r3, [r7, #0]
    4c00:	7818      	ldrb	r0, [r3, #0]
    4c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4c04:	1c53      	adds	r3, r2, #1
    4c06:	647b      	str	r3, [r7, #68]	; 0x44
    4c08:	68fc      	ldr	r4, [r7, #12]
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	68b9      	ldr	r1, [r7, #8]
    4c0e:	47a0      	blx	r4
      format++;
    4c10:	683b      	ldr	r3, [r7, #0]
    4c12:	3301      	adds	r3, #1
    4c14:	603b      	str	r3, [r7, #0]
      continue;
    4c16:	f000 bc31 	b.w	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    4c1a:	683b      	ldr	r3, [r7, #0]
    4c1c:	3301      	adds	r3, #1
    4c1e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    4c20:	2300      	movs	r3, #0
    4c22:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    4c24:	683b      	ldr	r3, [r7, #0]
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	3b20      	subs	r3, #32
    4c2a:	2b10      	cmp	r3, #16
    4c2c:	d856      	bhi.n	4cdc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    4c2e:	a201      	add	r2, pc, #4	; (adr r2, 4c34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    4c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4c34:	00004cb5 	.word	0x00004cb5
    4c38:	00004cdd 	.word	0x00004cdd
    4c3c:	00004cdd 	.word	0x00004cdd
    4c40:	00004cc9 	.word	0x00004cc9
    4c44:	00004cdd 	.word	0x00004cdd
    4c48:	00004cdd 	.word	0x00004cdd
    4c4c:	00004cdd 	.word	0x00004cdd
    4c50:	00004cdd 	.word	0x00004cdd
    4c54:	00004cdd 	.word	0x00004cdd
    4c58:	00004cdd 	.word	0x00004cdd
    4c5c:	00004cdd 	.word	0x00004cdd
    4c60:	00004ca1 	.word	0x00004ca1
    4c64:	00004cdd 	.word	0x00004cdd
    4c68:	00004c8d 	.word	0x00004c8d
    4c6c:	00004cdd 	.word	0x00004cdd
    4c70:	00004cdd 	.word	0x00004cdd
    4c74:	00004c79 	.word	0x00004c79
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    4c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c7a:	f043 0301 	orr.w	r3, r3, #1
    4c7e:	657b      	str	r3, [r7, #84]	; 0x54
    4c80:	683b      	ldr	r3, [r7, #0]
    4c82:	3301      	adds	r3, #1
    4c84:	603b      	str	r3, [r7, #0]
    4c86:	2301      	movs	r3, #1
    4c88:	64bb      	str	r3, [r7, #72]	; 0x48
    4c8a:	e02a      	b.n	4ce2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    4c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4c8e:	f043 0302 	orr.w	r3, r3, #2
    4c92:	657b      	str	r3, [r7, #84]	; 0x54
    4c94:	683b      	ldr	r3, [r7, #0]
    4c96:	3301      	adds	r3, #1
    4c98:	603b      	str	r3, [r7, #0]
    4c9a:	2301      	movs	r3, #1
    4c9c:	64bb      	str	r3, [r7, #72]	; 0x48
    4c9e:	e020      	b.n	4ce2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    4ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4ca2:	f043 0304 	orr.w	r3, r3, #4
    4ca6:	657b      	str	r3, [r7, #84]	; 0x54
    4ca8:	683b      	ldr	r3, [r7, #0]
    4caa:	3301      	adds	r3, #1
    4cac:	603b      	str	r3, [r7, #0]
    4cae:	2301      	movs	r3, #1
    4cb0:	64bb      	str	r3, [r7, #72]	; 0x48
    4cb2:	e016      	b.n	4ce2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    4cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4cb6:	f043 0308 	orr.w	r3, r3, #8
    4cba:	657b      	str	r3, [r7, #84]	; 0x54
    4cbc:	683b      	ldr	r3, [r7, #0]
    4cbe:	3301      	adds	r3, #1
    4cc0:	603b      	str	r3, [r7, #0]
    4cc2:	2301      	movs	r3, #1
    4cc4:	64bb      	str	r3, [r7, #72]	; 0x48
    4cc6:	e00c      	b.n	4ce2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    4cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4cca:	f043 0310 	orr.w	r3, r3, #16
    4cce:	657b      	str	r3, [r7, #84]	; 0x54
    4cd0:	683b      	ldr	r3, [r7, #0]
    4cd2:	3301      	adds	r3, #1
    4cd4:	603b      	str	r3, [r7, #0]
    4cd6:	2301      	movs	r3, #1
    4cd8:	64bb      	str	r3, [r7, #72]	; 0x48
    4cda:	e002      	b.n	4ce2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    4cdc:	2300      	movs	r3, #0
    4cde:	64bb      	str	r3, [r7, #72]	; 0x48
    4ce0:	bf00      	nop
      }
    } while (n);
    4ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	d000      	beq.n	4cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    4ce8:	e79c      	b.n	4c24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    4cea:	2300      	movs	r3, #0
    4cec:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    4cee:	683b      	ldr	r3, [r7, #0]
    4cf0:	781b      	ldrb	r3, [r3, #0]
    4cf2:	4618      	mov	r0, r3
    4cf4:	f7ff fb19 	bl	432a <_is_digit(char)>
    4cf8:	4603      	mov	r3, r0
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d005      	beq.n	4d0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    4cfe:	463b      	mov	r3, r7
    4d00:	4618      	mov	r0, r3
    4d02:	f7ff fb26 	bl	4352 <_atoi(char const**)>
    4d06:	6538      	str	r0, [r7, #80]	; 0x50
    4d08:	e018      	b.n	4d3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    4d0a:	683b      	ldr	r3, [r7, #0]
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	2b2a      	cmp	r3, #42	; 0x2a
    4d10:	d114      	bne.n	4d3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    4d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4d14:	1d1a      	adds	r2, r3, #4
    4d16:	66ba      	str	r2, [r7, #104]	; 0x68
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    4d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4d1e:	2b00      	cmp	r3, #0
    4d20:	da07      	bge.n	4d32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    4d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4d24:	f043 0302 	orr.w	r3, r3, #2
    4d28:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    4d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4d2c:	425b      	negs	r3, r3
    4d2e:	653b      	str	r3, [r7, #80]	; 0x50
    4d30:	e001      	b.n	4d36 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    4d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4d34:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    4d36:	683b      	ldr	r3, [r7, #0]
    4d38:	3301      	adds	r3, #1
    4d3a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    4d3c:	2300      	movs	r3, #0
    4d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    4d40:	683b      	ldr	r3, [r7, #0]
    4d42:	781b      	ldrb	r3, [r3, #0]
    4d44:	2b2e      	cmp	r3, #46	; 0x2e
    4d46:	d124      	bne.n	4d92 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    4d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4d4e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	3301      	adds	r3, #1
    4d54:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    4d56:	683b      	ldr	r3, [r7, #0]
    4d58:	781b      	ldrb	r3, [r3, #0]
    4d5a:	4618      	mov	r0, r3
    4d5c:	f7ff fae5 	bl	432a <_is_digit(char)>
    4d60:	4603      	mov	r3, r0
    4d62:	2b00      	cmp	r3, #0
    4d64:	d005      	beq.n	4d72 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    4d66:	463b      	mov	r3, r7
    4d68:	4618      	mov	r0, r3
    4d6a:	f7ff faf2 	bl	4352 <_atoi(char const**)>
    4d6e:	64f8      	str	r0, [r7, #76]	; 0x4c
    4d70:	e00f      	b.n	4d92 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    4d72:	683b      	ldr	r3, [r7, #0]
    4d74:	781b      	ldrb	r3, [r3, #0]
    4d76:	2b2a      	cmp	r3, #42	; 0x2a
    4d78:	d10b      	bne.n	4d92 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    4d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4d7c:	1d1a      	adds	r2, r3, #4
    4d7e:	66ba      	str	r2, [r7, #104]	; 0x68
    4d80:	681b      	ldr	r3, [r3, #0]
    4d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    4d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    4d8c:	683b      	ldr	r3, [r7, #0]
    4d8e:	3301      	adds	r3, #1
    4d90:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    4d92:	683b      	ldr	r3, [r7, #0]
    4d94:	781b      	ldrb	r3, [r3, #0]
    4d96:	3b68      	subs	r3, #104	; 0x68
    4d98:	2b12      	cmp	r3, #18
    4d9a:	d867      	bhi.n	4e6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    4d9c:	a201      	add	r2, pc, #4	; (adr r2, 4da4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    4d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4da2:	bf00      	nop
    4da4:	00004e17 	.word	0x00004e17
    4da8:	00004e6d 	.word	0x00004e6d
    4dac:	00004e4d 	.word	0x00004e4d
    4db0:	00004e6d 	.word	0x00004e6d
    4db4:	00004df1 	.word	0x00004df1
    4db8:	00004e6d 	.word	0x00004e6d
    4dbc:	00004e6d 	.word	0x00004e6d
    4dc0:	00004e6d 	.word	0x00004e6d
    4dc4:	00004e6d 	.word	0x00004e6d
    4dc8:	00004e6d 	.word	0x00004e6d
    4dcc:	00004e6d 	.word	0x00004e6d
    4dd0:	00004e6d 	.word	0x00004e6d
    4dd4:	00004e3d 	.word	0x00004e3d
    4dd8:	00004e6d 	.word	0x00004e6d
    4ddc:	00004e6d 	.word	0x00004e6d
    4de0:	00004e6d 	.word	0x00004e6d
    4de4:	00004e6d 	.word	0x00004e6d
    4de8:	00004e6d 	.word	0x00004e6d
    4dec:	00004e5d 	.word	0x00004e5d
      case 'l' :
        flags |= FLAGS_LONG;
    4df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4df6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4df8:	683b      	ldr	r3, [r7, #0]
    4dfa:	3301      	adds	r3, #1
    4dfc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    4dfe:	683b      	ldr	r3, [r7, #0]
    4e00:	781b      	ldrb	r3, [r3, #0]
    4e02:	2b6c      	cmp	r3, #108	; 0x6c
    4e04:	d134      	bne.n	4e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    4e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4e0c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4e0e:	683b      	ldr	r3, [r7, #0]
    4e10:	3301      	adds	r3, #1
    4e12:	603b      	str	r3, [r7, #0]
        }
        break;
    4e14:	e02c      	b.n	4e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    4e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4e1c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4e1e:	683b      	ldr	r3, [r7, #0]
    4e20:	3301      	adds	r3, #1
    4e22:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    4e24:	683b      	ldr	r3, [r7, #0]
    4e26:	781b      	ldrb	r3, [r3, #0]
    4e28:	2b68      	cmp	r3, #104	; 0x68
    4e2a:	d125      	bne.n	4e78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    4e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e32:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4e34:	683b      	ldr	r3, [r7, #0]
    4e36:	3301      	adds	r3, #1
    4e38:	603b      	str	r3, [r7, #0]
        }
        break;
    4e3a:	e01d      	b.n	4e78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4e42:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4e44:	683b      	ldr	r3, [r7, #0]
    4e46:	3301      	adds	r3, #1
    4e48:	603b      	str	r3, [r7, #0]
        break;
    4e4a:	e016      	b.n	4e7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4e52:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4e54:	683b      	ldr	r3, [r7, #0]
    4e56:	3301      	adds	r3, #1
    4e58:	603b      	str	r3, [r7, #0]
        break;
    4e5a:	e00e      	b.n	4e7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4e62:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4e64:	683b      	ldr	r3, [r7, #0]
    4e66:	3301      	adds	r3, #1
    4e68:	603b      	str	r3, [r7, #0]
        break;
    4e6a:	e006      	b.n	4e7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    4e6c:	bf00      	nop
    4e6e:	e004      	b.n	4e7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    4e70:	bf00      	nop
    4e72:	e002      	b.n	4e7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    4e74:	000042e1 	.word	0x000042e1
        break;
    4e78:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    4e7a:	683b      	ldr	r3, [r7, #0]
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	3b25      	subs	r3, #37	; 0x25
    4e80:	2b53      	cmp	r3, #83	; 0x53
    4e82:	f200 82ee 	bhi.w	5462 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    4e86:	a201      	add	r2, pc, #4	; (adr r2, 4e8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    4e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e8c:	0000544b 	.word	0x0000544b
    4e90:	00005463 	.word	0x00005463
    4e94:	00005463 	.word	0x00005463
    4e98:	00005463 	.word	0x00005463
    4e9c:	00005463 	.word	0x00005463
    4ea0:	00005463 	.word	0x00005463
    4ea4:	00005463 	.word	0x00005463
    4ea8:	00005463 	.word	0x00005463
    4eac:	00005463 	.word	0x00005463
    4eb0:	00005463 	.word	0x00005463
    4eb4:	00005463 	.word	0x00005463
    4eb8:	00005463 	.word	0x00005463
    4ebc:	00005463 	.word	0x00005463
    4ec0:	00005463 	.word	0x00005463
    4ec4:	00005463 	.word	0x00005463
    4ec8:	00005463 	.word	0x00005463
    4ecc:	00005463 	.word	0x00005463
    4ed0:	00005463 	.word	0x00005463
    4ed4:	00005463 	.word	0x00005463
    4ed8:	00005463 	.word	0x00005463
    4edc:	00005463 	.word	0x00005463
    4ee0:	00005463 	.word	0x00005463
    4ee4:	00005463 	.word	0x00005463
    4ee8:	00005463 	.word	0x00005463
    4eec:	00005463 	.word	0x00005463
    4ef0:	00005463 	.word	0x00005463
    4ef4:	00005463 	.word	0x00005463
    4ef8:	00005463 	.word	0x00005463
    4efc:	00005463 	.word	0x00005463
    4f00:	00005463 	.word	0x00005463
    4f04:	00005463 	.word	0x00005463
    4f08:	00005463 	.word	0x00005463
    4f0c:	00005463 	.word	0x00005463
    4f10:	00005269 	.word	0x00005269
    4f14:	00005463 	.word	0x00005463
    4f18:	00005463 	.word	0x00005463
    4f1c:	00005463 	.word	0x00005463
    4f20:	00005463 	.word	0x00005463
    4f24:	00005463 	.word	0x00005463
    4f28:	00005463 	.word	0x00005463
    4f2c:	00005463 	.word	0x00005463
    4f30:	00005463 	.word	0x00005463
    4f34:	00005463 	.word	0x00005463
    4f38:	00005463 	.word	0x00005463
    4f3c:	00005463 	.word	0x00005463
    4f40:	00005463 	.word	0x00005463
    4f44:	00005463 	.word	0x00005463
    4f48:	00005463 	.word	0x00005463
    4f4c:	00005463 	.word	0x00005463
    4f50:	00005463 	.word	0x00005463
    4f54:	00005463 	.word	0x00005463
    4f58:	00004fdd 	.word	0x00004fdd
    4f5c:	00005463 	.word	0x00005463
    4f60:	00005463 	.word	0x00005463
    4f64:	00005463 	.word	0x00005463
    4f68:	00005463 	.word	0x00005463
    4f6c:	00005463 	.word	0x00005463
    4f70:	00005463 	.word	0x00005463
    4f74:	00005463 	.word	0x00005463
    4f78:	00005463 	.word	0x00005463
    4f7c:	00005463 	.word	0x00005463
    4f80:	00004fdd 	.word	0x00004fdd
    4f84:	000052a5 	.word	0x000052a5
    4f88:	00004fdd 	.word	0x00004fdd
    4f8c:	00005463 	.word	0x00005463
    4f90:	00005269 	.word	0x00005269
    4f94:	00005463 	.word	0x00005463
    4f98:	00005463 	.word	0x00005463
    4f9c:	00004fdd 	.word	0x00004fdd
    4fa0:	00005463 	.word	0x00005463
    4fa4:	00005463 	.word	0x00005463
    4fa8:	00005463 	.word	0x00005463
    4fac:	00005463 	.word	0x00005463
    4fb0:	00005463 	.word	0x00005463
    4fb4:	00004fdd 	.word	0x00004fdd
    4fb8:	00005403 	.word	0x00005403
    4fbc:	00005463 	.word	0x00005463
    4fc0:	00005463 	.word	0x00005463
    4fc4:	0000532d 	.word	0x0000532d
    4fc8:	00005463 	.word	0x00005463
    4fcc:	00004fdd 	.word	0x00004fdd
    4fd0:	00005463 	.word	0x00005463
    4fd4:	00005463 	.word	0x00005463
    4fd8:	00004fdd 	.word	0x00004fdd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    4fdc:	683b      	ldr	r3, [r7, #0]
    4fde:	781b      	ldrb	r3, [r3, #0]
    4fe0:	2b78      	cmp	r3, #120	; 0x78
    4fe2:	d003      	beq.n	4fec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    4fe4:	683b      	ldr	r3, [r7, #0]
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	2b58      	cmp	r3, #88	; 0x58
    4fea:	d102      	bne.n	4ff2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    4fec:	2310      	movs	r3, #16
    4fee:	643b      	str	r3, [r7, #64]	; 0x40
    4ff0:	e013      	b.n	501a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    4ff2:	683b      	ldr	r3, [r7, #0]
    4ff4:	781b      	ldrb	r3, [r3, #0]
    4ff6:	2b6f      	cmp	r3, #111	; 0x6f
    4ff8:	d102      	bne.n	5000 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    4ffa:	2308      	movs	r3, #8
    4ffc:	643b      	str	r3, [r7, #64]	; 0x40
    4ffe:	e00c      	b.n	501a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    5000:	683b      	ldr	r3, [r7, #0]
    5002:	781b      	ldrb	r3, [r3, #0]
    5004:	2b62      	cmp	r3, #98	; 0x62
    5006:	d102      	bne.n	500e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    5008:	2302      	movs	r3, #2
    500a:	643b      	str	r3, [r7, #64]	; 0x40
    500c:	e005      	b.n	501a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    500e:	230a      	movs	r3, #10
    5010:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    5012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5014:	f023 0310 	bic.w	r3, r3, #16
    5018:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    501a:	683b      	ldr	r3, [r7, #0]
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	2b58      	cmp	r3, #88	; 0x58
    5020:	d103      	bne.n	502a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    5022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5024:	f043 0320 	orr.w	r3, r3, #32
    5028:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    502a:	683b      	ldr	r3, [r7, #0]
    502c:	781b      	ldrb	r3, [r3, #0]
    502e:	2b69      	cmp	r3, #105	; 0x69
    5030:	d007      	beq.n	5042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    5032:	683b      	ldr	r3, [r7, #0]
    5034:	781b      	ldrb	r3, [r3, #0]
    5036:	2b64      	cmp	r3, #100	; 0x64
    5038:	d003      	beq.n	5042 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    503a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    503c:	f023 030c 	bic.w	r3, r3, #12
    5040:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    5042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5048:	2b00      	cmp	r3, #0
    504a:	d003      	beq.n	5054 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    504c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    504e:	f023 0301 	bic.w	r3, r3, #1
    5052:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    5054:	683b      	ldr	r3, [r7, #0]
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	2b69      	cmp	r3, #105	; 0x69
    505a:	d004      	beq.n	5066 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    505c:	683b      	ldr	r3, [r7, #0]
    505e:	781b      	ldrb	r3, [r3, #0]
    5060:	2b64      	cmp	r3, #100	; 0x64
    5062:	f040 808d 	bne.w	5180 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    5066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5068:	f403 7300 	and.w	r3, r3, #512	; 0x200
    506c:	2b00      	cmp	r3, #0
    506e:	d02e      	beq.n	50ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    5070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5072:	3307      	adds	r3, #7
    5074:	f023 0307 	bic.w	r3, r3, #7
    5078:	f103 0208 	add.w	r2, r3, #8
    507c:	66ba      	str	r2, [r7, #104]	; 0x68
    507e:	e9d3 3400 	ldrd	r3, r4, [r3]
    5082:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    5086:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    508a:	2b00      	cmp	r3, #0
    508c:	f174 0200 	sbcs.w	r2, r4, #0
    5090:	da02      	bge.n	5098 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    5092:	425b      	negs	r3, r3
    5094:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    5098:	4619      	mov	r1, r3
    509a:	4622      	mov	r2, r4
    509c:	697b      	ldr	r3, [r7, #20]
    509e:	0fdb      	lsrs	r3, r3, #31
    50a0:	b2d8      	uxtb	r0, r3
    50a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50a4:	f04f 0400 	mov.w	r4, #0
    50a8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    50aa:	9508      	str	r5, [sp, #32]
    50ac:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    50ae:	9507      	str	r5, [sp, #28]
    50b0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    50b2:	9506      	str	r5, [sp, #24]
    50b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    50b8:	9002      	str	r0, [sp, #8]
    50ba:	e9cd 1200 	strd	r1, r2, [sp]
    50be:	687b      	ldr	r3, [r7, #4]
    50c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    50c2:	68b9      	ldr	r1, [r7, #8]
    50c4:	68f8      	ldr	r0, [r7, #12]
    50c6:	f7ff faf1 	bl	46ac <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    50ca:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    50cc:	e0c8      	b.n	5260 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    50ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    50d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    50d4:	2b00      	cmp	r3, #0
    50d6:	d01e      	beq.n	5116 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    50d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    50da:	1d1a      	adds	r2, r3, #4
    50dc:	66ba      	str	r2, [r7, #104]	; 0x68
    50de:	681b      	ldr	r3, [r3, #0]
    50e0:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    50e2:	69fb      	ldr	r3, [r7, #28]
    50e4:	2b00      	cmp	r3, #0
    50e6:	bfb8      	it	lt
    50e8:	425b      	neglt	r3, r3
    50ea:	4619      	mov	r1, r3
    50ec:	69fb      	ldr	r3, [r7, #28]
    50ee:	0fdb      	lsrs	r3, r3, #31
    50f0:	b2db      	uxtb	r3, r3
    50f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    50f4:	9205      	str	r2, [sp, #20]
    50f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    50f8:	9204      	str	r2, [sp, #16]
    50fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    50fc:	9203      	str	r2, [sp, #12]
    50fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5100:	9202      	str	r2, [sp, #8]
    5102:	9301      	str	r3, [sp, #4]
    5104:	9100      	str	r1, [sp, #0]
    5106:	687b      	ldr	r3, [r7, #4]
    5108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    510a:	68b9      	ldr	r1, [r7, #8]
    510c:	68f8      	ldr	r0, [r7, #12]
    510e:	f7ff fa65 	bl	45dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5112:	6478      	str	r0, [r7, #68]	; 0x44
          }
    5114:	e0a4      	b.n	5260 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    5116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5118:	f003 0340 	and.w	r3, r3, #64	; 0x40
    511c:	2b00      	cmp	r3, #0
    511e:	d005      	beq.n	512c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    5120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5122:	1d1a      	adds	r2, r3, #4
    5124:	66ba      	str	r2, [r7, #104]	; 0x68
    5126:	681b      	ldr	r3, [r3, #0]
    5128:	b2db      	uxtb	r3, r3
    512a:	e00e      	b.n	514a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    512c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5132:	2b00      	cmp	r3, #0
    5134:	d005      	beq.n	5142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    5136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5138:	1d1a      	adds	r2, r3, #4
    513a:	66ba      	str	r2, [r7, #104]	; 0x68
    513c:	681b      	ldr	r3, [r3, #0]
    513e:	b21b      	sxth	r3, r3
    5140:	e003      	b.n	514a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    5142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5144:	1d1a      	adds	r2, r3, #4
    5146:	66ba      	str	r2, [r7, #104]	; 0x68
    5148:	681b      	ldr	r3, [r3, #0]
    514a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    514c:	6a3b      	ldr	r3, [r7, #32]
    514e:	2b00      	cmp	r3, #0
    5150:	bfb8      	it	lt
    5152:	425b      	neglt	r3, r3
    5154:	4619      	mov	r1, r3
    5156:	6a3b      	ldr	r3, [r7, #32]
    5158:	0fdb      	lsrs	r3, r3, #31
    515a:	b2db      	uxtb	r3, r3
    515c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    515e:	9205      	str	r2, [sp, #20]
    5160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5162:	9204      	str	r2, [sp, #16]
    5164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5166:	9203      	str	r2, [sp, #12]
    5168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    516a:	9202      	str	r2, [sp, #8]
    516c:	9301      	str	r3, [sp, #4]
    516e:	9100      	str	r1, [sp, #0]
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5174:	68b9      	ldr	r1, [r7, #8]
    5176:	68f8      	ldr	r0, [r7, #12]
    5178:	f7ff fa30 	bl	45dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    517c:	6478      	str	r0, [r7, #68]	; 0x44
          }
    517e:	e06f      	b.n	5260 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    5180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5182:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5186:	2b00      	cmp	r3, #0
    5188:	d020      	beq.n	51cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    518a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    518c:	3307      	adds	r3, #7
    518e:	f023 0307 	bic.w	r3, r3, #7
    5192:	f103 0208 	add.w	r2, r3, #8
    5196:	66ba      	str	r2, [r7, #104]	; 0x68
    5198:	e9d3 3400 	ldrd	r3, r4, [r3]
    519c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    519e:	4611      	mov	r1, r2
    51a0:	f04f 0200 	mov.w	r2, #0
    51a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
    51a6:	9008      	str	r0, [sp, #32]
    51a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
    51aa:	9007      	str	r0, [sp, #28]
    51ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    51ae:	9006      	str	r0, [sp, #24]
    51b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
    51b4:	2200      	movs	r2, #0
    51b6:	9202      	str	r2, [sp, #8]
    51b8:	e9cd 3400 	strd	r3, r4, [sp]
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    51c0:	68b9      	ldr	r1, [r7, #8]
    51c2:	68f8      	ldr	r0, [r7, #12]
    51c4:	f7ff fa72 	bl	46ac <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    51c8:	6478      	str	r0, [r7, #68]	; 0x44
    51ca:	e049      	b.n	5260 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    51cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    51ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
    51d2:	2b00      	cmp	r3, #0
    51d4:	d016      	beq.n	5204 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    51d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    51d8:	1d1a      	adds	r2, r3, #4
    51da:	66ba      	str	r2, [r7, #104]	; 0x68
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    51e0:	9205      	str	r2, [sp, #20]
    51e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    51e4:	9204      	str	r2, [sp, #16]
    51e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    51e8:	9203      	str	r2, [sp, #12]
    51ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    51ec:	9202      	str	r2, [sp, #8]
    51ee:	2200      	movs	r2, #0
    51f0:	9201      	str	r2, [sp, #4]
    51f2:	9300      	str	r3, [sp, #0]
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    51f8:	68b9      	ldr	r1, [r7, #8]
    51fa:	68f8      	ldr	r0, [r7, #12]
    51fc:	f7ff f9ee 	bl	45dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5200:	6478      	str	r0, [r7, #68]	; 0x44
    5202:	e02d      	b.n	5260 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    5204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5206:	f003 0340 	and.w	r3, r3, #64	; 0x40
    520a:	2b00      	cmp	r3, #0
    520c:	d005      	beq.n	521a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    520e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5210:	1d1a      	adds	r2, r3, #4
    5212:	66ba      	str	r2, [r7, #104]	; 0x68
    5214:	681b      	ldr	r3, [r3, #0]
    5216:	b2db      	uxtb	r3, r3
    5218:	e00e      	b.n	5238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    521a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5220:	2b00      	cmp	r3, #0
    5222:	d005      	beq.n	5230 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    5224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5226:	1d1a      	adds	r2, r3, #4
    5228:	66ba      	str	r2, [r7, #104]	; 0x68
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	b29b      	uxth	r3, r3
    522e:	e003      	b.n	5238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    5230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5232:	1d1a      	adds	r2, r3, #4
    5234:	66ba      	str	r2, [r7, #104]	; 0x68
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    523a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    523c:	9305      	str	r3, [sp, #20]
    523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5240:	9304      	str	r3, [sp, #16]
    5242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5244:	9303      	str	r3, [sp, #12]
    5246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5248:	9302      	str	r3, [sp, #8]
    524a:	2300      	movs	r3, #0
    524c:	9301      	str	r3, [sp, #4]
    524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5250:	9300      	str	r3, [sp, #0]
    5252:	687b      	ldr	r3, [r7, #4]
    5254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5256:	68b9      	ldr	r1, [r7, #8]
    5258:	68f8      	ldr	r0, [r7, #12]
    525a:	f7ff f9bf 	bl	45dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    525e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    5260:	683b      	ldr	r3, [r7, #0]
    5262:	3301      	adds	r3, #1
    5264:	603b      	str	r3, [r7, #0]
        break;
    5266:	e109      	b.n	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    5268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    526a:	3307      	adds	r3, #7
    526c:	f023 0307 	bic.w	r3, r3, #7
    5270:	f103 0208 	add.w	r2, r3, #8
    5274:	66ba      	str	r2, [r7, #104]	; 0x68
    5276:	ed93 7b00 	vldr	d7, [r3]
    527a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    527c:	9302      	str	r3, [sp, #8]
    527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5280:	9301      	str	r3, [sp, #4]
    5282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5284:	9300      	str	r3, [sp, #0]
    5286:	eeb0 0a47 	vmov.f32	s0, s14
    528a:	eef0 0a67 	vmov.f32	s1, s15
    528e:	687b      	ldr	r3, [r7, #4]
    5290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5292:	68b9      	ldr	r1, [r7, #8]
    5294:	68f8      	ldr	r0, [r7, #12]
    5296:	f7ff fa79 	bl	478c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    529a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    529c:	683b      	ldr	r3, [r7, #0]
    529e:	3301      	adds	r3, #1
    52a0:	603b      	str	r3, [r7, #0]
        break;
    52a2:	e0eb      	b.n	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    52a4:	2301      	movs	r3, #1
    52a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    52a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    52aa:	f003 0302 	and.w	r3, r3, #2
    52ae:	2b00      	cmp	r3, #0
    52b0:	d113      	bne.n	52da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    52b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    52b4:	1c5a      	adds	r2, r3, #1
    52b6:	63fa      	str	r2, [r7, #60]	; 0x3c
    52b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    52ba:	429a      	cmp	r2, r3
    52bc:	bf8c      	ite	hi
    52be:	2301      	movhi	r3, #1
    52c0:	2300      	movls	r3, #0
    52c2:	b2db      	uxtb	r3, r3
    52c4:	2b00      	cmp	r3, #0
    52c6:	d008      	beq.n	52da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    52c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    52ca:	1c53      	adds	r3, r2, #1
    52cc:	647b      	str	r3, [r7, #68]	; 0x44
    52ce:	68fc      	ldr	r4, [r7, #12]
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	68b9      	ldr	r1, [r7, #8]
    52d4:	2020      	movs	r0, #32
    52d6:	47a0      	blx	r4
          while (l++ < width) {
    52d8:	e7eb      	b.n	52b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    52da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    52dc:	1d1a      	adds	r2, r3, #4
    52de:	66ba      	str	r2, [r7, #104]	; 0x68
    52e0:	681b      	ldr	r3, [r3, #0]
    52e2:	b2d8      	uxtb	r0, r3
    52e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    52e6:	1c53      	adds	r3, r2, #1
    52e8:	647b      	str	r3, [r7, #68]	; 0x44
    52ea:	68fc      	ldr	r4, [r7, #12]
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	68b9      	ldr	r1, [r7, #8]
    52f0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    52f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    52f4:	f003 0302 	and.w	r3, r3, #2
    52f8:	2b00      	cmp	r3, #0
    52fa:	d013      	beq.n	5324 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    52fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    52fe:	1c5a      	adds	r2, r3, #1
    5300:	63fa      	str	r2, [r7, #60]	; 0x3c
    5302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5304:	429a      	cmp	r2, r3
    5306:	bf8c      	ite	hi
    5308:	2301      	movhi	r3, #1
    530a:	2300      	movls	r3, #0
    530c:	b2db      	uxtb	r3, r3
    530e:	2b00      	cmp	r3, #0
    5310:	d008      	beq.n	5324 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    5312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5314:	1c53      	adds	r3, r2, #1
    5316:	647b      	str	r3, [r7, #68]	; 0x44
    5318:	68fc      	ldr	r4, [r7, #12]
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	68b9      	ldr	r1, [r7, #8]
    531e:	2020      	movs	r0, #32
    5320:	47a0      	blx	r4
          while (l++ < width) {
    5322:	e7eb      	b.n	52fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    5324:	683b      	ldr	r3, [r7, #0]
    5326:	3301      	adds	r3, #1
    5328:	603b      	str	r3, [r7, #0]
        break;
    532a:	e0a7      	b.n	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    532c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    532e:	1d1a      	adds	r2, r3, #4
    5330:	66ba      	str	r2, [r7, #104]	; 0x68
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    5336:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    5338:	f7fe ffe0 	bl	42fc <_strlen(char const*)>
    533c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    533e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5344:	2b00      	cmp	r3, #0
    5346:	d007      	beq.n	5358 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    5348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    534c:	429a      	cmp	r2, r3
    534e:	d201      	bcs.n	5354 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    5350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5352:	e000      	b.n	5356 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    5354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5356:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    5358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    535a:	f003 0302 	and.w	r3, r3, #2
    535e:	2b00      	cmp	r3, #0
    5360:	d113      	bne.n	538a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    5362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5364:	1c5a      	adds	r2, r3, #1
    5366:	637a      	str	r2, [r7, #52]	; 0x34
    5368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    536a:	429a      	cmp	r2, r3
    536c:	bf8c      	ite	hi
    536e:	2301      	movhi	r3, #1
    5370:	2300      	movls	r3, #0
    5372:	b2db      	uxtb	r3, r3
    5374:	2b00      	cmp	r3, #0
    5376:	d008      	beq.n	538a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    5378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    537a:	1c53      	adds	r3, r2, #1
    537c:	647b      	str	r3, [r7, #68]	; 0x44
    537e:	68fc      	ldr	r4, [r7, #12]
    5380:	687b      	ldr	r3, [r7, #4]
    5382:	68b9      	ldr	r1, [r7, #8]
    5384:	2020      	movs	r0, #32
    5386:	47a0      	blx	r4
          while (l++ < width) {
    5388:	e7eb      	b.n	5362 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	2b00      	cmp	r3, #0
    5390:	d00b      	beq.n	53aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    5392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5398:	2b00      	cmp	r3, #0
    539a:	d004      	beq.n	53a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    539e:	1e5a      	subs	r2, r3, #1
    53a0:	64fa      	str	r2, [r7, #76]	; 0x4c
    53a2:	2b00      	cmp	r3, #0
    53a4:	d001      	beq.n	53aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    53a6:	2301      	movs	r3, #1
    53a8:	e000      	b.n	53ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    53aa:	2300      	movs	r3, #0
    53ac:	2b00      	cmp	r3, #0
    53ae:	d00b      	beq.n	53c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    53b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    53b2:	1c5a      	adds	r2, r3, #1
    53b4:	63ba      	str	r2, [r7, #56]	; 0x38
    53b6:	7818      	ldrb	r0, [r3, #0]
    53b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    53ba:	1c53      	adds	r3, r2, #1
    53bc:	647b      	str	r3, [r7, #68]	; 0x44
    53be:	68fc      	ldr	r4, [r7, #12]
    53c0:	687b      	ldr	r3, [r7, #4]
    53c2:	68b9      	ldr	r1, [r7, #8]
    53c4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    53c6:	e7e0      	b.n	538a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    53c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    53ca:	f003 0302 	and.w	r3, r3, #2
    53ce:	2b00      	cmp	r3, #0
    53d0:	d013      	beq.n	53fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    53d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53d4:	1c5a      	adds	r2, r3, #1
    53d6:	637a      	str	r2, [r7, #52]	; 0x34
    53d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    53da:	429a      	cmp	r2, r3
    53dc:	bf8c      	ite	hi
    53de:	2301      	movhi	r3, #1
    53e0:	2300      	movls	r3, #0
    53e2:	b2db      	uxtb	r3, r3
    53e4:	2b00      	cmp	r3, #0
    53e6:	d008      	beq.n	53fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    53e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    53ea:	1c53      	adds	r3, r2, #1
    53ec:	647b      	str	r3, [r7, #68]	; 0x44
    53ee:	68fc      	ldr	r4, [r7, #12]
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	68b9      	ldr	r1, [r7, #8]
    53f4:	2020      	movs	r0, #32
    53f6:	47a0      	blx	r4
          while (l++ < width) {
    53f8:	e7eb      	b.n	53d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    53fa:	683b      	ldr	r3, [r7, #0]
    53fc:	3301      	adds	r3, #1
    53fe:	603b      	str	r3, [r7, #0]
        break;
    5400:	e03c      	b.n	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    5402:	2308      	movs	r3, #8
    5404:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    5406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5408:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    540c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    540e:	2300      	movs	r3, #0
    5410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    5414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5416:	1d1a      	adds	r2, r3, #4
    5418:	66ba      	str	r2, [r7, #104]	; 0x68
    541a:	681b      	ldr	r3, [r3, #0]
    541c:	461a      	mov	r2, r3
    541e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5420:	9305      	str	r3, [sp, #20]
    5422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5424:	9304      	str	r3, [sp, #16]
    5426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5428:	9303      	str	r3, [sp, #12]
    542a:	2310      	movs	r3, #16
    542c:	9302      	str	r3, [sp, #8]
    542e:	2300      	movs	r3, #0
    5430:	9301      	str	r3, [sp, #4]
    5432:	9200      	str	r2, [sp, #0]
    5434:	687b      	ldr	r3, [r7, #4]
    5436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5438:	68b9      	ldr	r1, [r7, #8]
    543a:	68f8      	ldr	r0, [r7, #12]
    543c:	f7ff f8ce 	bl	45dc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    5440:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    5442:	683b      	ldr	r3, [r7, #0]
    5444:	3301      	adds	r3, #1
    5446:	603b      	str	r3, [r7, #0]
        break;
    5448:	e018      	b.n	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    544a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    544c:	1c53      	adds	r3, r2, #1
    544e:	647b      	str	r3, [r7, #68]	; 0x44
    5450:	68fc      	ldr	r4, [r7, #12]
    5452:	687b      	ldr	r3, [r7, #4]
    5454:	68b9      	ldr	r1, [r7, #8]
    5456:	2025      	movs	r0, #37	; 0x25
    5458:	47a0      	blx	r4
        format++;
    545a:	683b      	ldr	r3, [r7, #0]
    545c:	3301      	adds	r3, #1
    545e:	603b      	str	r3, [r7, #0]
        break;
    5460:	e00c      	b.n	547c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    5462:	683b      	ldr	r3, [r7, #0]
    5464:	7818      	ldrb	r0, [r3, #0]
    5466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5468:	1c53      	adds	r3, r2, #1
    546a:	647b      	str	r3, [r7, #68]	; 0x44
    546c:	68fc      	ldr	r4, [r7, #12]
    546e:	687b      	ldr	r3, [r7, #4]
    5470:	68b9      	ldr	r1, [r7, #8]
    5472:	47a0      	blx	r4
        format++;
    5474:	683b      	ldr	r3, [r7, #0]
    5476:	3301      	adds	r3, #1
    5478:	603b      	str	r3, [r7, #0]
        break;
    547a:	bf00      	nop
  while (*format)
    547c:	f7ff bbb6 	b.w	4bec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    5480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	429a      	cmp	r2, r3
    5486:	d302      	bcc.n	548e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	1e5a      	subs	r2, r3, #1
    548c:	e000      	b.n	5490 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    548e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5490:	68fc      	ldr	r4, [r7, #12]
    5492:	687b      	ldr	r3, [r7, #4]
    5494:	68b9      	ldr	r1, [r7, #8]
    5496:	2000      	movs	r0, #0
    5498:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    549a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    549c:	4618      	mov	r0, r3
    549e:	3758      	adds	r7, #88	; 0x58
    54a0:	46bd      	mov	sp, r7
    54a2:	bdb0      	pop	{r4, r5, r7, pc}

000054a4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    54a4:	b40f      	push	{r0, r1, r2, r3}
    54a6:	b580      	push	{r7, lr}
    54a8:	b0c4      	sub	sp, #272	; 0x110
    54aa:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    54ac:	f507 738a 	add.w	r3, r7, #276	; 0x114
    54b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    54b4:	4639      	mov	r1, r7
    54b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    54ba:	9300      	str	r3, [sp, #0]
    54bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    54c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    54c4:	4807      	ldr	r0, [pc, #28]	; (54e4 <printf+0x40>)
    54c6:	f7ff fb83 	bl	4bd0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    54ca:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    54ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    54d2:	4618      	mov	r0, r3
    54d4:	f507 7784 	add.w	r7, r7, #264	; 0x108
    54d8:	46bd      	mov	sp, r7
    54da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    54de:	b004      	add	sp, #16
    54e0:	4770      	bx	lr
    54e2:	bf00      	nop
    54e4:	00004271 	.word	0x00004271

000054e8 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    54e8:	b480      	push	{r7}
    54ea:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    54ec:	bf00      	nop
    54ee:	46bd      	mov	sp, r7
    54f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f4:	4770      	bx	lr

000054f6 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    54f6:	b580      	push	{r7, lr}
    54f8:	b082      	sub	sp, #8
    54fa:	af00      	add	r7, sp, #0
    54fc:	6078      	str	r0, [r7, #4]
    54fe:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    5500:	6839      	ldr	r1, [r7, #0]
    5502:	6878      	ldr	r0, [r7, #4]
    5504:	f000 f806 	bl	5514 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    5508:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    550a:	4618      	mov	r0, r3
    550c:	3708      	adds	r7, #8
    550e:	46bd      	mov	sp, r7
    5510:	bd80      	pop	{r7, pc}
    5512:	Address 0x0000000000005512 is out of bounds.


00005514 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    5514:	b5b0      	push	{r4, r5, r7, lr}
    5516:	b08c      	sub	sp, #48	; 0x30
    5518:	af00      	add	r7, sp, #0
    551a:	6078      	str	r0, [r7, #4]
    551c:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    551e:	4b2d      	ldr	r3, [pc, #180]	; (55d4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	f003 0301 	and.w	r3, r3, #1
    5526:	2b00      	cmp	r3, #0
    5528:	bf0c      	ite	eq
    552a:	2301      	moveq	r3, #1
    552c:	2300      	movne	r3, #0
    552e:	b2db      	uxtb	r3, r3
    5530:	2b00      	cmp	r3, #0
    5532:	d001      	beq.n	5538 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    5534:	683b      	ldr	r3, [r7, #0]
    5536:	e049      	b.n	55cc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    5538:	4b27      	ldr	r3, [pc, #156]	; (55d8 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    553a:	681b      	ldr	r3, [r3, #0]
    553c:	2b00      	cmp	r3, #0
    553e:	d11d      	bne.n	557c <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    5540:	4b26      	ldr	r3, [pc, #152]	; (55dc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    5542:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    5544:	2304      	movs	r3, #4
    5546:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    5548:	2303      	movs	r3, #3
    554a:	613b      	str	r3, [r7, #16]
    554c:	2301      	movs	r3, #1
    554e:	62bb      	str	r3, [r7, #40]	; 0x28
    5550:	f107 0308 	add.w	r3, r7, #8
    5554:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    5556:	6abc      	ldr	r4, [r7, #40]	; 0x28
    5558:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    555a:	4620      	mov	r0, r4
    555c:	4629      	mov	r1, r5
    555e:	beab      	bkpt	0x00ab
    5560:	4604      	mov	r4, r0
    5562:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    5564:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    5566:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    5568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    556a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    556e:	d102      	bne.n	5576 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    5570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5574:	e02a      	b.n	55cc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    5576:	4a18      	ldr	r2, [pc, #96]	; (55d8 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    5578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    557a:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    557c:	4b16      	ldr	r3, [pc, #88]	; (55d8 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    557e:	681b      	ldr	r3, [r3, #0]
    5580:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    5586:	683b      	ldr	r3, [r7, #0]
    5588:	613b      	str	r3, [r7, #16]
    558a:	2305      	movs	r3, #5
    558c:	61fb      	str	r3, [r7, #28]
    558e:	f107 0308 	add.w	r3, r7, #8
    5592:	61bb      	str	r3, [r7, #24]
  );
    5594:	69fc      	ldr	r4, [r7, #28]
    5596:	69bd      	ldr	r5, [r7, #24]
    5598:	4620      	mov	r0, r4
    559a:	4629      	mov	r1, r5
    559c:	beab      	bkpt	0x00ab
    559e:	4604      	mov	r4, r0
    55a0:	617c      	str	r4, [r7, #20]
  return value;
    55a2:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    55a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    55a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    55a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    55ac:	d102      	bne.n	55b4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    55ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55b2:	e00b      	b.n	55cc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    55b4:	683b      	ldr	r3, [r7, #0]
    55b6:	461a      	mov	r2, r3
    55b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    55ba:	4293      	cmp	r3, r2
    55bc:	d102      	bne.n	55c4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    55be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55c2:	e003      	b.n	55cc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    55c4:	683b      	ldr	r3, [r7, #0]
    55c6:	461a      	mov	r2, r3
    55c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    55ca:	1ad3      	subs	r3, r2, r3
}
    55cc:	4618      	mov	r0, r3
    55ce:	3730      	adds	r7, #48	; 0x30
    55d0:	46bd      	mov	sp, r7
    55d2:	bdb0      	pop	{r4, r5, r7, pc}
    55d4:	e000edf0 	.word	0xe000edf0
    55d8:	100004b8 	.word	0x100004b8
    55dc:	00009844 	.word	0x00009844

000055e0 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    55e8:	4b0c      	ldr	r3, [pc, #48]	; (561c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    55ea:	681b      	ldr	r3, [r3, #0]
    55ec:	68da      	ldr	r2, [r3, #12]
    55ee:	4b0b      	ldr	r3, [pc, #44]	; (561c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    55f0:	681b      	ldr	r3, [r3, #0]
    55f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    55f6:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    55f8:	4b09      	ldr	r3, [pc, #36]	; (5620 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    55fa:	681b      	ldr	r3, [r3, #0]
    55fc:	2200      	movs	r2, #0
    55fe:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    5600:	4b07      	ldr	r3, [pc, #28]	; (5620 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	681a      	ldr	r2, [r3, #0]
    5606:	4b06      	ldr	r3, [pc, #24]	; (5620 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	f042 0201 	orr.w	r2, r2, #1
    560e:	601a      	str	r2, [r3, #0]
  }
    5610:	bf00      	nop
    5612:	370c      	adds	r7, #12
    5614:	46bd      	mov	sp, r7
    5616:	f85d 7b04 	ldr.w	r7, [sp], #4
    561a:	4770      	bx	lr
    561c:	1000006c 	.word	0x1000006c
    5620:	10000068 	.word	0x10000068

00005624 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    5624:	b480      	push	{r7}
    5626:	b083      	sub	sp, #12
    5628:	af00      	add	r7, sp, #0
    562a:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    562c:	4b04      	ldr	r3, [pc, #16]	; (5640 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	685b      	ldr	r3, [r3, #4]
  }
    5632:	4618      	mov	r0, r3
    5634:	370c      	adds	r7, #12
    5636:	46bd      	mov	sp, r7
    5638:	f85d 7b04 	ldr.w	r7, [sp], #4
    563c:	4770      	bx	lr
    563e:	bf00      	nop
    5640:	10000068 	.word	0x10000068

00005644 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    5644:	b480      	push	{r7}
    5646:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    5648:	f8df 001c 	ldr.w	r0, [pc, #28]	; 5668 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    564c:	6801      	ldr	r1, [r0, #0]
    564e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5652:	6001      	str	r1, [r0, #0]
    5654:	f3bf 8f4f 	dsb	sy
    5658:	f3bf 8f6f 	isb	sy
  }
}
    565c:	bf00      	nop
    565e:	46bd      	mov	sp, r7
    5660:	f85d 7b04 	ldr.w	r7, [sp], #4
    5664:	4770      	bx	lr
    5666:	0000      	.short	0x0000
    5668:	e000ed88 	.word	0xe000ed88

0000566c <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    566c:	b580      	push	{r7, lr}
    566e:	b084      	sub	sp, #16
    5670:	af00      	add	r7, sp, #0
    5672:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    5676:	e9d7 0100 	ldrd	r0, r1, [r7]
    567a:	f001 fe95 	bl	73a8 <__aeabi_ul2f>
    567e:	4602      	mov	r2, r0
    5680:	f107 030c 	add.w	r3, r7, #12
    5684:	ee00 2a10 	vmov	s0, r2
    5688:	4618      	mov	r0, r3
    568a:	f7fa fecf 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	4618      	mov	r0, r3
    5692:	3710      	adds	r7, #16
    5694:	46bd      	mov	sp, r7
    5696:	bd80      	pop	{r7, pc}

00005698 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5698:	b580      	push	{r7, lr}
    569a:	b086      	sub	sp, #24
    569c:	af00      	add	r7, sp, #0
    569e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    56a0:	6878      	ldr	r0, [r7, #4]
    56a2:	f000 f807 	bl	56b4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    56a6:	eef0 7a40 	vmov.f32	s15, s0
	}
    56aa:	eeb0 0a67 	vmov.f32	s0, s15
    56ae:	3718      	adds	r7, #24
    56b0:	46bd      	mov	sp, r7
    56b2:	bd80      	pop	{r7, pc}

000056b4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    56b4:	b480      	push	{r7}
    56b6:	b085      	sub	sp, #20
    56b8:	af00      	add	r7, sp, #0
    56ba:	60f8      	str	r0, [r7, #12]
    56bc:	7239      	strb	r1, [r7, #8]
    56be:	713a      	strb	r2, [r7, #4]
    56c0:	703b      	strb	r3, [r7, #0]
			return value;
    56c2:	68fb      	ldr	r3, [r7, #12]
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	ee07 3a90 	vmov	s15, r3
		}
    56ca:	eeb0 0a67 	vmov.f32	s0, s15
    56ce:	3714      	adds	r7, #20
    56d0:	46bd      	mov	sp, r7
    56d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d6:	4770      	bx	lr

000056d8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    56d8:	b580      	push	{r7, lr}
    56da:	ed2d 8b02 	vpush	{d8}
    56de:	b082      	sub	sp, #8
    56e0:	af00      	add	r7, sp, #0
    56e2:	6078      	str	r0, [r7, #4]
    56e4:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    56e6:	687b      	ldr	r3, [r7, #4]
    56e8:	ed93 8a00 	vldr	s16, [r3]
    56ec:	683b      	ldr	r3, [r7, #0]
    56ee:	4618      	mov	r0, r3
    56f0:	f7ff ffd2 	bl	5698 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    56f4:	eef0 7a40 	vmov.f32	s15, s0
    56f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
    56fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5700:	bf94      	ite	ls
    5702:	2301      	movls	r3, #1
    5704:	2300      	movhi	r3, #0
    5706:	b2db      	uxtb	r3, r3
		}
    5708:	4618      	mov	r0, r3
    570a:	3708      	adds	r7, #8
    570c:	46bd      	mov	sp, r7
    570e:	ecbd 8b02 	vpop	{d8}
    5712:	bd80      	pop	{r7, pc}

00005714 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    5714:	b480      	push	{r7}
    5716:	b083      	sub	sp, #12
    5718:	af00      	add	r7, sp, #0
    571a:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    571c:	4a04      	ldr	r2, [pc, #16]	; (5730 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    571e:	687b      	ldr	r3, [r7, #4]
    5720:	6013      	str	r3, [r2, #0]
}
    5722:	bf00      	nop
    5724:	370c      	adds	r7, #12
    5726:	46bd      	mov	sp, r7
    5728:	f85d 7b04 	ldr.w	r7, [sp], #4
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	10000000 	.word	0x10000000

00005734 <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    5734:	b580      	push	{r7, lr}
    5736:	b082      	sub	sp, #8
    5738:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    573a:	4b09      	ldr	r3, [pc, #36]	; (5760 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	685b      	ldr	r3, [r3, #4]
    5740:	b2db      	uxtb	r3, r3
    5742:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    5744:	4a07      	ldr	r2, [pc, #28]	; (5764 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    574a:	4a07      	ldr	r2, [pc, #28]	; (5768 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    574c:	687b      	ldr	r3, [r7, #4]
    574e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5752:	603b      	str	r3, [r7, #0]
    isr();
    5754:	683b      	ldr	r3, [r7, #0]
    5756:	4798      	blx	r3
  }
    5758:	bf00      	nop
    575a:	3708      	adds	r7, #8
    575c:	46bd      	mov	sp, r7
    575e:	bd80      	pop	{r7, pc}
    5760:	10000070 	.word	0x10000070
    5764:	10000048 	.word	0x10000048
    5768:	1000012c 	.word	0x1000012c

0000576c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    576c:	b580      	push	{r7, lr}
    576e:	b082      	sub	sp, #8
    5770:	af00      	add	r7, sp, #0
    5772:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    5774:	687b      	ldr	r3, [r7, #4]
    5776:	4618      	mov	r0, r3
    5778:	f000 f804 	bl	5784 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    577c:	6878      	ldr	r0, [r7, #4]
    577e:	3708      	adds	r7, #8
    5780:	46bd      	mov	sp, r7
    5782:	bd80      	pop	{r7, pc}

00005784 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    5784:	b580      	push	{r7, lr}
    5786:	b082      	sub	sp, #8
    5788:	af00      	add	r7, sp, #0
    578a:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    578c:	4903      	ldr	r1, [pc, #12]	; (579c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    578e:	6878      	ldr	r0, [r7, #4]
    5790:	f000 f806 	bl	57a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    5794:	6878      	ldr	r0, [r7, #4]
    5796:	3708      	adds	r7, #8
    5798:	46bd      	mov	sp, r7
    579a:	bd80      	pop	{r7, pc}
    579c:	00009dc0 	.word	0x00009dc0

000057a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    57a0:	b490      	push	{r4, r7}
    57a2:	b082      	sub	sp, #8
    57a4:	af00      	add	r7, sp, #0
    57a6:	6078      	str	r0, [r7, #4]
    57a8:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    57aa:	683b      	ldr	r3, [r7, #0]
    57ac:	e9d3 3400 	ldrd	r3, r4, [r3]
    57b0:	687a      	ldr	r2, [r7, #4]
    57b2:	e9c2 3400 	strd	r3, r4, [r2]
    57b6:	687b      	ldr	r3, [r7, #4]
    57b8:	4618      	mov	r0, r3
    57ba:	3708      	adds	r7, #8
    57bc:	46bd      	mov	sp, r7
    57be:	bc90      	pop	{r4, r7}
    57c0:	4770      	bx	lr

000057c2 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    57c2:	b580      	push	{r7, lr}
    57c4:	b082      	sub	sp, #8
    57c6:	af00      	add	r7, sp, #0
    57c8:	6078      	str	r0, [r7, #4]
    57ca:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	6839      	ldr	r1, [r7, #0]
    57d0:	4618      	mov	r0, r3
    57d2:	f000 f811 	bl	57f8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    57d6:	6878      	ldr	r0, [r7, #4]
    57d8:	3708      	adds	r7, #8
    57da:	46bd      	mov	sp, r7
    57dc:	bd80      	pop	{r7, pc}

000057de <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    57de:	b490      	push	{r4, r7}
    57e0:	b082      	sub	sp, #8
    57e2:	af00      	add	r7, sp, #0
    57e4:	6078      	str	r0, [r7, #4]
	{ return __r; }
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	e9d3 3400 	ldrd	r3, r4, [r3]
    57ec:	4618      	mov	r0, r3
    57ee:	4621      	mov	r1, r4
    57f0:	3708      	adds	r7, #8
    57f2:	46bd      	mov	sp, r7
    57f4:	bc90      	pop	{r4, r7}
    57f6:	4770      	bx	lr

000057f8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    57f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57fa:	b085      	sub	sp, #20
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
    5800:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    5802:	6838      	ldr	r0, [r7, #0]
    5804:	f7ff ffeb 	bl	57de <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    5808:	4605      	mov	r5, r0
    580a:	460e      	mov	r6, r1
    580c:	462b      	mov	r3, r5
    580e:	4634      	mov	r4, r6
    5810:	f04f 0100 	mov.w	r1, #0
    5814:	f04f 0200 	mov.w	r2, #0
    5818:	0162      	lsls	r2, r4, #5
    581a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    581e:	0159      	lsls	r1, r3, #5
    5820:	460b      	mov	r3, r1
    5822:	4614      	mov	r4, r2
    5824:	1b5b      	subs	r3, r3, r5
    5826:	eb64 0406 	sbc.w	r4, r4, r6
    582a:	f04f 0100 	mov.w	r1, #0
    582e:	f04f 0200 	mov.w	r2, #0
    5832:	00a2      	lsls	r2, r4, #2
    5834:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    5838:	0099      	lsls	r1, r3, #2
    583a:	460b      	mov	r3, r1
    583c:	4614      	mov	r4, r2
    583e:	195b      	adds	r3, r3, r5
    5840:	eb44 0406 	adc.w	r4, r4, r6
    5844:	f04f 0100 	mov.w	r1, #0
    5848:	f04f 0200 	mov.w	r2, #0
    584c:	00e2      	lsls	r2, r4, #3
    584e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    5852:	00d9      	lsls	r1, r3, #3
    5854:	460b      	mov	r3, r1
    5856:	4614      	mov	r4, r2
    5858:	e9c7 3402 	strd	r3, r4, [r7, #8]
    585c:	f107 0308 	add.w	r3, r7, #8
    5860:	4619      	mov	r1, r3
    5862:	6878      	ldr	r0, [r7, #4]
    5864:	f7fa fede 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    5868:	6878      	ldr	r0, [r7, #4]
    586a:	3714      	adds	r7, #20
    586c:	46bd      	mov	sp, r7
    586e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005870 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    5870:	b590      	push	{r4, r7, lr}
    5872:	b085      	sub	sp, #20
    5874:	af00      	add	r7, sp, #0
    5876:	6078      	str	r0, [r7, #4]
    5878:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    587a:	f107 0308 	add.w	r3, r7, #8
    587e:	6839      	ldr	r1, [r7, #0]
    5880:	4618      	mov	r0, r3
    5882:	f7ff ff9e 	bl	57c2 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    5886:	f107 0308 	add.w	r3, r7, #8
    588a:	4618      	mov	r0, r3
    588c:	f7fc fd26 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    5890:	4603      	mov	r3, r0
    5892:	460c      	mov	r4, r1
    5894:	687a      	ldr	r2, [r7, #4]
    5896:	e9c2 3400 	strd	r3, r4, [r2]
    589a:	687b      	ldr	r3, [r7, #4]
    589c:	4618      	mov	r0, r3
    589e:	3714      	adds	r7, #20
    58a0:	46bd      	mov	sp, r7
    58a2:	bd90      	pop	{r4, r7, pc}

000058a4 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    58a4:	b580      	push	{r7, lr}
    58a6:	b084      	sub	sp, #16
    58a8:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    58aa:	f107 0308 	add.w	r3, r7, #8
    58ae:	4618      	mov	r0, r3
    58b0:	f7ff ff5c 	bl	576c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    58b4:	f107 0208 	add.w	r2, r7, #8
    58b8:	463b      	mov	r3, r7
    58ba:	4611      	mov	r1, r2
    58bc:	4618      	mov	r0, r3
    58be:	f7ff ffd7 	bl	5870 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    58c2:	463b      	mov	r3, r7
    58c4:	4619      	mov	r1, r3
    58c6:	4807      	ldr	r0, [pc, #28]	; (58e4 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    58c8:	f000 f9d4 	bl	5c74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    58cc:	4b06      	ldr	r3, [pc, #24]	; (58e8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	2b00      	cmp	r3, #0
    58d2:	d002      	beq.n	58da <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    58d4:	4b04      	ldr	r3, [pc, #16]	; (58e8 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    58d6:	681b      	ldr	r3, [r3, #0]
    58d8:	4798      	blx	r3
    }
  }
    58da:	bf00      	nop
    58dc:	3710      	adds	r7, #16
    58de:	46bd      	mov	sp, r7
    58e0:	bd80      	pop	{r7, pc}
    58e2:	bf00      	nop
    58e4:	100004c0 	.word	0x100004c0
    58e8:	100004bc 	.word	0x100004bc

000058ec <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    58ec:	b490      	push	{r4, r7}
    58ee:	b082      	sub	sp, #8
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
  {
    return counter;
    58f4:	687a      	ldr	r2, [r7, #4]
    58f6:	4b05      	ldr	r3, [pc, #20]	; (590c <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    58f8:	e9d3 3400 	ldrd	r3, r4, [r3]
    58fc:	e9c2 3400 	strd	r3, r4, [r2]
  }
    5900:	6878      	ldr	r0, [r7, #4]
    5902:	3708      	adds	r7, #8
    5904:	46bd      	mov	sp, r7
    5906:	bc90      	pop	{r4, r7}
    5908:	4770      	bx	lr
    590a:	bf00      	nop
    590c:	100004c0 	.word	0x100004c0

00005910 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    5910:	b480      	push	{r7}
    5912:	b083      	sub	sp, #12
    5914:	af00      	add	r7, sp, #0
    5916:	6078      	str	r0, [r7, #4]
    5918:	bf00      	nop
    591a:	370c      	adds	r7, #12
    591c:	46bd      	mov	sp, r7
    591e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5922:	4770      	bx	lr

00005924 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    5924:	b480      	push	{r7}
    5926:	b083      	sub	sp, #12
    5928:	af00      	add	r7, sp, #0
    592a:	6078      	str	r0, [r7, #4]
    592c:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    592e:	4a04      	ldr	r2, [pc, #16]	; (5940 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	6013      	str	r3, [r2, #0]
  }
    5934:	bf00      	nop
    5936:	370c      	adds	r7, #12
    5938:	46bd      	mov	sp, r7
    593a:	f85d 7b04 	ldr.w	r7, [sp], #4
    593e:	4770      	bx	lr
    5940:	100004bc 	.word	0x100004bc

00005944 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    5944:	b5f0      	push	{r4, r5, r6, r7, lr}
    5946:	b08b      	sub	sp, #44	; 0x2c
    5948:	af02      	add	r7, sp, #8
    594a:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    594c:	2304      	movs	r3, #4
    594e:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    5950:	4b1f      	ldr	r3, [pc, #124]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5952:	681b      	ldr	r3, [r3, #0]
    5954:	685b      	ldr	r3, [r3, #4]
    5956:	2b00      	cmp	r3, #0
    5958:	bf14      	ite	ne
    595a:	2301      	movne	r3, #1
    595c:	2300      	moveq	r3, #0
    595e:	b2db      	uxtb	r3, r3
    5960:	2b00      	cmp	r3, #0
    5962:	d030      	beq.n	59c6 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    5964:	4b1a      	ldr	r3, [pc, #104]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	2200      	movs	r2, #0
    596a:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    596c:	4b18      	ldr	r3, [pc, #96]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	681a      	ldr	r2, [r3, #0]
    5972:	4b17      	ldr	r3, [pc, #92]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5974:	681b      	ldr	r3, [r3, #0]
    5976:	f042 0202 	orr.w	r2, r2, #2
    597a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    597c:	4b14      	ldr	r3, [pc, #80]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    597e:	681b      	ldr	r3, [r3, #0]
    5980:	681a      	ldr	r2, [r3, #0]
    5982:	4b13      	ldr	r3, [pc, #76]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	f042 0201 	orr.w	r2, r2, #1
    598a:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    598c:	4b10      	ldr	r3, [pc, #64]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	681a      	ldr	r2, [r3, #0]
    5992:	4b0f      	ldr	r3, [pc, #60]	; (59d0 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	f042 0204 	orr.w	r2, r2, #4
    599a:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    599c:	687b      	ldr	r3, [r7, #4]
    599e:	689e      	ldr	r6, [r3, #8]
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    59a8:	4b0a      	ldr	r3, [pc, #40]	; (59d4 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    59aa:	f107 040c 	add.w	r4, r7, #12
    59ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    59b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    59b4:	69bb      	ldr	r3, [r7, #24]
    59b6:	9300      	str	r3, [sp, #0]
    59b8:	f107 030c 	add.w	r3, r7, #12
    59bc:	cb0e      	ldmia	r3, {r1, r2, r3}
    59be:	4630      	mov	r0, r6
    59c0:	47a8      	blx	r5
      status = Status::kSuccess;
    59c2:	2300      	movs	r3, #0
    59c4:	61fb      	str	r3, [r7, #28]
    }

    return status;
    59c6:	69fb      	ldr	r3, [r7, #28]
  }
    59c8:	4618      	mov	r0, r3
    59ca:	3724      	adds	r7, #36	; 0x24
    59cc:	46bd      	mov	sp, r7
    59ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59d0:	10000074 	.word	0x10000074
    59d4:	000099d0 	.word	0x000099d0

000059d8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    59d8:	b580      	push	{r7, lr}
    59da:	b084      	sub	sp, #16
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
    59e0:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	4618      	mov	r0, r3
    59e6:	f7fb f961 	bl	cac <units::linear_scale<float>::operator()() const>
    59ea:	eeb0 7a40 	vmov.f32	s14, s0
    59ee:	683b      	ldr	r3, [r7, #0]
    59f0:	ee07 3a90 	vmov	s15, r3
    59f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    59f8:	ee77 7a67 	vsub.f32	s15, s14, s15
    59fc:	f107 030c 	add.w	r3, r7, #12
    5a00:	eeb0 0a67 	vmov.f32	s0, s15
    5a04:	4618      	mov	r0, r3
    5a06:	f7fb f98c 	bl	d22 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5a0a:	68fb      	ldr	r3, [r7, #12]
	}
    5a0c:	4618      	mov	r0, r3
    5a0e:	3710      	adds	r7, #16
    5a10:	46bd      	mov	sp, r7
    5a12:	bd80      	pop	{r7, pc}

00005a14 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    5a14:	b580      	push	{r7, lr}
    5a16:	b082      	sub	sp, #8
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    5a1c:	6878      	ldr	r0, [r7, #4]
    5a1e:	f7fd f85a 	bl	2ad6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5a22:	4603      	mov	r3, r0
	}
    5a24:	4618      	mov	r0, r3
    5a26:	3708      	adds	r7, #8
    5a28:	46bd      	mov	sp, r7
    5a2a:	bd80      	pop	{r7, pc}

00005a2c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    5a2c:	b590      	push	{r4, r7, lr}
    5a2e:	b089      	sub	sp, #36	; 0x24
    5a30:	af00      	add	r7, sp, #0
    5a32:	6078      	str	r0, [r7, #4]
    5a34:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    5a36:	f04f 0001 	mov.w	r0, #1
    5a3a:	f04f 0100 	mov.w	r1, #0
    5a3e:	f7ff fe15 	bl	566c <units::literals::operator"" _Hz(unsigned long long)>
    5a42:	4603      	mov	r3, r0
    5a44:	60fb      	str	r3, [r7, #12]
    5a46:	f107 020c 	add.w	r2, r7, #12
    5a4a:	463b      	mov	r3, r7
    5a4c:	4611      	mov	r1, r2
    5a4e:	4618      	mov	r0, r3
    5a50:	f7ff fe42 	bl	56d8 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    5a54:	4603      	mov	r3, r0
    5a56:	2b00      	cmp	r3, #0
    5a58:	d002      	beq.n	5a60 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    5a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a5e:	e041      	b.n	5ae4 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	685a      	ldr	r2, [r3, #4]
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	685b      	ldr	r3, [r3, #4]
    5a68:	681b      	ldr	r3, [r3, #0]
    5a6a:	330c      	adds	r3, #12
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	4610      	mov	r0, r2
    5a70:	4798      	blx	r3
    5a72:	4603      	mov	r3, r0
    5a74:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    5a76:	463a      	mov	r2, r7
    5a78:	f107 0308 	add.w	r3, r7, #8
    5a7c:	4611      	mov	r1, r2
    5a7e:	4618      	mov	r0, r3
    5a80:	f7fb ff68 	bl	1954 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5a84:	4603      	mov	r3, r0
    5a86:	617b      	str	r3, [r7, #20]
    5a88:	f107 0314 	add.w	r3, r7, #20
    5a8c:	2101      	movs	r1, #1
    5a8e:	4618      	mov	r0, r3
    5a90:	f7ff ffa2 	bl	59d8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    5a94:	4603      	mov	r3, r0
    5a96:	613b      	str	r3, [r7, #16]
    5a98:	f107 0310 	add.w	r3, r7, #16
    5a9c:	4618      	mov	r0, r3
    5a9e:	f7ff ffb9 	bl	5a14 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5aa2:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    5aa4:	f107 0308 	add.w	r3, r7, #8
    5aa8:	4618      	mov	r0, r3
    5aaa:	f7fb fc4f 	bl	134c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5aae:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    5ab0:	463b      	mov	r3, r7
    5ab2:	4618      	mov	r0, r3
    5ab4:	f7fb fc4a 	bl	134c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5ab8:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    5aba:	fbb4 f2f3 	udiv	r2, r4, r3
    5abe:	fb03 f302 	mul.w	r3, r3, r2
    5ac2:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    5ac4:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    5ac6:	69fb      	ldr	r3, [r7, #28]
    5ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    5acc:	d305      	bcc.n	5ada <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    5ace:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5ad2:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    5ad4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5ad8:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    5ada:	4b04      	ldr	r3, [pc, #16]	; (5aec <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	69fa      	ldr	r2, [r7, #28]
    5ae0:	605a      	str	r2, [r3, #4]
    return remainder;
    5ae2:	69bb      	ldr	r3, [r7, #24]
  }
    5ae4:	4618      	mov	r0, r3
    5ae6:	3724      	adds	r7, #36	; 0x24
    5ae8:	46bd      	mov	sp, r7
    5aea:	bd90      	pop	{r4, r7, pc}
    5aec:	10000074 	.word	0x10000074

00005af0 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5af0:	b580      	push	{r7, lr}
    5af2:	b082      	sub	sp, #8
    5af4:	af00      	add	r7, sp, #0
    5af6:	6078      	str	r0, [r7, #4]
    5af8:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    5afa:	683a      	ldr	r2, [r7, #0]
    5afc:	6879      	ldr	r1, [r7, #4]
    5afe:	4804      	ldr	r0, [pc, #16]	; (5b10 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    5b00:	f7fb fe08 	bl	1714 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    5b04:	683b      	ldr	r3, [r7, #0]
}
    5b06:	4618      	mov	r0, r3
    5b08:	3708      	adds	r7, #8
    5b0a:	46bd      	mov	sp, r7
    5b0c:	bd80      	pop	{r7, pc}
    5b0e:	bf00      	nop
    5b10:	100004cc 	.word	0x100004cc

00005b14 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5b14:	b590      	push	{r4, r7, lr}
    5b16:	b087      	sub	sp, #28
    5b18:	af02      	add	r7, sp, #8
    5b1a:	6078      	str	r0, [r7, #4]
    5b1c:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5b1e:	f107 0308 	add.w	r3, r7, #8
    5b22:	4618      	mov	r0, r3
    5b24:	f7fc fbf0 	bl	2308 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    5b28:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    5b2c:	e9cd 3400 	strd	r3, r4, [sp]
    5b30:	683a      	ldr	r2, [r7, #0]
    5b32:	6879      	ldr	r1, [r7, #4]
    5b34:	4803      	ldr	r0, [pc, #12]	; (5b44 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    5b36:	f7fb fe3f 	bl	17b8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    5b3a:	683b      	ldr	r3, [r7, #0]
}
    5b3c:	4618      	mov	r0, r3
    5b3e:	3714      	adds	r7, #20
    5b40:	46bd      	mov	sp, r7
    5b42:	bd90      	pop	{r4, r7, pc}
    5b44:	100004cc 	.word	0x100004cc

00005b48 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5b4c:	4802      	ldr	r0, [pc, #8]	; (5b58 <ThreadRuntimeCounter+0x10>)
    5b4e:	f7ff fd69 	bl	5624 <sjsu::cortex::DwtCounter::GetCount()>
    5b52:	4603      	mov	r3, r0
}
    5b54:	4618      	mov	r0, r3
    5b56:	bd80      	pop	{r7, pc}
    5b58:	100004c8 	.word	0x100004c8

00005b5c <vPortSetupTimerInterrupt>:
  // definitions.
  extern void ArmHardFaultHandler(void);
  extern void ArmResetHandler(void);

  void vPortSetupTimerInterrupt(void)  // NOLINT
  {
    5b5c:	b590      	push	{r4, r7, lr}
    5b5e:	b08b      	sub	sp, #44	; 0x2c
    5b60:	af02      	add	r7, sp, #8
    interrupt_controller.Register({
    5b62:	4b11      	ldr	r3, [pc, #68]	; (5ba8 <vPortSetupTimerInterrupt+0x4c>)
    5b64:	463c      	mov	r4, r7
    5b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5b6c:	68fb      	ldr	r3, [r7, #12]
    5b6e:	9300      	str	r3, [sp, #0]
    5b70:	463b      	mov	r3, r7
    5b72:	cb0e      	ldmia	r3, {r1, r2, r3}
    5b74:	480d      	ldr	r0, [pc, #52]	; (5bac <vPortSetupTimerInterrupt+0x50>)
    5b76:	f7fc f923 	bl	1dc0 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
        .interrupt_request_number  = sjsu::cortex::SVCall_IRQn,
        .interrupt_service_routine = vPortSVCHandler,
    });
    interrupt_controller.Register({
    5b7a:	4b0d      	ldr	r3, [pc, #52]	; (5bb0 <vPortSetupTimerInterrupt+0x54>)
    5b7c:	f107 0410 	add.w	r4, r7, #16
    5b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5b86:	69fb      	ldr	r3, [r7, #28]
    5b88:	9300      	str	r3, [sp, #0]
    5b8a:	f107 0310 	add.w	r3, r7, #16
    5b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
    5b90:	4806      	ldr	r0, [pc, #24]	; (5bac <vPortSetupTimerInterrupt+0x50>)
    5b92:	f7fc f915 	bl	1dc0 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
    });
    // Set the SystemTick frequency to the RTOS tick frequency
    // It is critical that this happens before you set the system_clock,
    // since The system_timer keeps the time that the system_clock uses to
    // delay itself.
    system_timer.SetInterrupt(xPortSysTickHandler);
    5b96:	4907      	ldr	r1, [pc, #28]	; (5bb4 <vPortSetupTimerInterrupt+0x58>)
    5b98:	4807      	ldr	r0, [pc, #28]	; (5bb8 <vPortSetupTimerInterrupt+0x5c>)
    5b9a:	f7ff fec3 	bl	5924 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>
  }
    5b9e:	bf00      	nop
    5ba0:	3724      	adds	r7, #36	; 0x24
    5ba2:	46bd      	mov	sp, r7
    5ba4:	bd90      	pop	{r4, r7, pc}
    5ba6:	bf00      	nop
    5ba8:	00009ccc 	.word	0x00009ccc
    5bac:	10000088 	.word	0x10000088
    5bb0:	00009cdc 	.word	0x00009cdc
    5bb4:	00005fd9 	.word	0x00005fd9
    5bb8:	1000007c 	.word	0x1000007c

00005bbc <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b082      	sub	sp, #8
    5bc0:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5bc2:	f7ff fd3f 	bl	5644 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    5bc6:	4b1e      	ldr	r3, [pc, #120]	; (5c40 <sjsu::InitializePlatform()+0x84>)
    5bc8:	6819      	ldr	r1, [r3, #0]
    5bca:	481e      	ldr	r0, [pc, #120]	; (5c44 <sjsu::InitializePlatform()+0x88>)
    5bcc:	f7fa feb6 	bl	93c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5bd0:	23ff      	movs	r3, #255	; 0xff
    5bd2:	703b      	strb	r3, [r7, #0]
    5bd4:	463b      	mov	r3, r7
    5bd6:	2201      	movs	r2, #1
    5bd8:	4619      	mov	r1, r3
    5bda:	481a      	ldr	r0, [pc, #104]	; (5c44 <sjsu::InitializePlatform()+0x88>)
    5bdc:	f7fa fefc 	bl	9d8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5be0:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5be4:	4818      	ldr	r0, [pc, #96]	; (5c48 <sjsu::InitializePlatform()+0x8c>)
    5be6:	f7fb fcef 	bl	15c8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    5bea:	4818      	ldr	r0, [pc, #96]	; (5c4c <sjsu::InitializePlatform()+0x90>)
    5bec:	f001 f8d2 	bl	6d94 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5bf0:	4817      	ldr	r0, [pc, #92]	; (5c50 <sjsu::InitializePlatform()+0x94>)
    5bf2:	f001 f8df 	bl	6db4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    5bf6:	4b17      	ldr	r3, [pc, #92]	; (5c54 <sjsu::InitializePlatform()+0x98>)
    5bf8:	6819      	ldr	r1, [r3, #0]
    5bfa:	4817      	ldr	r0, [pc, #92]	; (5c58 <sjsu::InitializePlatform()+0x9c>)
    5bfc:	f7ff ff16 	bl	5a2c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    5c00:	4815      	ldr	r0, [pc, #84]	; (5c58 <sjsu::InitializePlatform()+0x9c>)
    5c02:	f7ff fe9f 	bl	5944 <sjsu::cortex::SystemTimer::StartTimer() const>
    5c06:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d00d      	beq.n	5c2a <sjsu::InitializePlatform()+0x6e>
    5c0e:	23d6      	movs	r3, #214	; 0xd6
    5c10:	4a12      	ldr	r2, [pc, #72]	; (5c5c <sjsu::InitializePlatform()+0xa0>)
    5c12:	4913      	ldr	r1, [pc, #76]	; (5c60 <sjsu::InitializePlatform()+0xa4>)
    5c14:	4813      	ldr	r0, [pc, #76]	; (5c64 <sjsu::InitializePlatform()+0xa8>)
    5c16:	f7ff fc45 	bl	54a4 <printf>
    5c1a:	4813      	ldr	r0, [pc, #76]	; (5c68 <sjsu::InitializePlatform()+0xac>)
    5c1c:	f7fe fafe 	bl	421c <puts>
    5c20:	2100      	movs	r1, #0
    5c22:	2001      	movs	r0, #1
    5c24:	f7fa fcac 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    5c28:	e7fe      	b.n	5c28 <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    5c2a:	4810      	ldr	r0, [pc, #64]	; (5c6c <sjsu::InitializePlatform()+0xb0>)
    5c2c:	f7ff fcd8 	bl	55e0 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    5c30:	480f      	ldr	r0, [pc, #60]	; (5c70 <sjsu::InitializePlatform()+0xb4>)
    5c32:	f7ff fd6f 	bl	5714 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    5c36:	bf00      	nop
    5c38:	3708      	adds	r7, #8
    5c3a:	46bd      	mov	sp, r7
    5c3c:	bd80      	pop	{r7, pc}
    5c3e:	bf00      	nop
    5c40:	00009dc8 	.word	0x00009dc8
    5c44:	10000078 	.word	0x10000078
    5c48:	100004cc 	.word	0x100004cc
    5c4c:	00005af1 	.word	0x00005af1
    5c50:	00005b15 	.word	0x00005b15
    5c54:	00009dcc 	.word	0x00009dcc
    5c58:	1000007c 	.word	0x1000007c
    5c5c:	00009e1c 	.word	0x00009e1c
    5c60:	00009df8 	.word	0x00009df8
    5c64:	00009cec 	.word	0x00009cec
    5c68:	00009a80 	.word	0x00009a80
    5c6c:	100004c8 	.word	0x100004c8
    5c70:	000058ed 	.word	0x000058ed

00005c74 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    5c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c76:	b083      	sub	sp, #12
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
    5c7c:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    5c7e:	6838      	ldr	r0, [r7, #0]
    5c80:	f7fc fb2c 	bl	22dc <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    5c84:	460a      	mov	r2, r1
    5c86:	4601      	mov	r1, r0
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	e9d3 5600 	ldrd	r5, r6, [r3]
    5c8e:	186b      	adds	r3, r5, r1
    5c90:	eb46 0402 	adc.w	r4, r6, r2
    5c94:	687a      	ldr	r2, [r7, #4]
    5c96:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    5c9a:	687b      	ldr	r3, [r7, #4]
	}
    5c9c:	4618      	mov	r0, r3
    5c9e:	370c      	adds	r7, #12
    5ca0:	46bd      	mov	sp, r7
    5ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ca4 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    5ca4:	b580      	push	{r7, lr}
    5ca6:	b082      	sub	sp, #8
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	6039      	str	r1, [r7, #0]
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	2b01      	cmp	r3, #1
    5cb2:	d155      	bne.n	5d60 <__static_initialization_and_destruction_0(int, int)+0xbc>
    5cb4:	683b      	ldr	r3, [r7, #0]
    5cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5cba:	4293      	cmp	r3, r2
    5cbc:	d150      	bne.n	5d60 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    5cbe:	4b2a      	ldr	r3, [pc, #168]	; (5d68 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    5cc0:	681b      	ldr	r3, [r3, #0]
    5cc2:	f003 0301 	and.w	r3, r3, #1
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d106      	bne.n	5cd8 <__static_initialization_and_destruction_0(int, int)+0x34>
    5cca:	4b27      	ldr	r3, [pc, #156]	; (5d68 <__static_initialization_and_destruction_0(int, int)+0xc4>)
    5ccc:	2201      	movs	r2, #1
    5cce:	601a      	str	r2, [r3, #0]
    5cd0:	4b26      	ldr	r3, [pc, #152]	; (5d6c <__static_initialization_and_destruction_0(int, int)+0xc8>)
    5cd2:	4618      	mov	r0, r3
    5cd4:	f7fc f81c 	bl	1d10 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    5cd8:	4b25      	ldr	r3, [pc, #148]	; (5d70 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    5cda:	681b      	ldr	r3, [r3, #0]
    5cdc:	f003 0301 	and.w	r3, r3, #1
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d105      	bne.n	5cf0 <__static_initialization_and_destruction_0(int, int)+0x4c>
    5ce4:	4b22      	ldr	r3, [pc, #136]	; (5d70 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    5ce6:	2201      	movs	r2, #1
    5ce8:	601a      	str	r2, [r3, #0]
    5cea:	4a22      	ldr	r2, [pc, #136]	; (5d74 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    5cec:	4b22      	ldr	r3, [pc, #136]	; (5d78 <__static_initialization_and_destruction_0(int, int)+0xd4>)
    5cee:	601a      	str	r2, [r3, #0]
    5cf0:	4b22      	ldr	r3, [pc, #136]	; (5d7c <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5cf2:	681b      	ldr	r3, [r3, #0]
    5cf4:	f003 0301 	and.w	r3, r3, #1
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d105      	bne.n	5d08 <__static_initialization_and_destruction_0(int, int)+0x64>
    5cfc:	4b1f      	ldr	r3, [pc, #124]	; (5d7c <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5cfe:	2201      	movs	r2, #1
    5d00:	601a      	str	r2, [r3, #0]
    5d02:	4a1f      	ldr	r2, [pc, #124]	; (5d80 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    5d04:	4b1f      	ldr	r3, [pc, #124]	; (5d84 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    5d06:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    5d08:	4b1f      	ldr	r3, [pc, #124]	; (5d88 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	f003 0301 	and.w	r3, r3, #1
    5d10:	2b00      	cmp	r3, #0
    5d12:	d105      	bne.n	5d20 <__static_initialization_and_destruction_0(int, int)+0x7c>
    5d14:	4b1c      	ldr	r3, [pc, #112]	; (5d88 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    5d16:	2201      	movs	r2, #1
    5d18:	601a      	str	r2, [r3, #0]
    };
    5d1a:	4a1c      	ldr	r2, [pc, #112]	; (5d8c <__static_initialization_and_destruction_0(int, int)+0xe8>)
    5d1c:	4b1c      	ldr	r3, [pc, #112]	; (5d90 <__static_initialization_and_destruction_0(int, int)+0xec>)
    5d1e:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    5d20:	4b1c      	ldr	r3, [pc, #112]	; (5d94 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	f003 0301 	and.w	r3, r3, #1
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d105      	bne.n	5d38 <__static_initialization_and_destruction_0(int, int)+0x94>
    5d2c:	4b19      	ldr	r3, [pc, #100]	; (5d94 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    5d2e:	2201      	movs	r2, #1
    5d30:	601a      	str	r2, [r3, #0]
    };
    5d32:	4a19      	ldr	r2, [pc, #100]	; (5d98 <__static_initialization_and_destruction_0(int, int)+0xf4>)
    5d34:	4b19      	ldr	r3, [pc, #100]	; (5d9c <__static_initialization_and_destruction_0(int, int)+0xf8>)
    5d36:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    5d38:	4b19      	ldr	r3, [pc, #100]	; (5da0 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    5d3a:	681b      	ldr	r3, [r3, #0]
    5d3c:	f003 0301 	and.w	r3, r3, #1
    5d40:	2b00      	cmp	r3, #0
    5d42:	d105      	bne.n	5d50 <__static_initialization_and_destruction_0(int, int)+0xac>
    5d44:	4b16      	ldr	r3, [pc, #88]	; (5da0 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    5d46:	2201      	movs	r2, #1
    5d48:	601a      	str	r2, [r3, #0]
    };
    5d4a:	4a16      	ldr	r2, [pc, #88]	; (5da4 <__static_initialization_and_destruction_0(int, int)+0x100>)
    5d4c:	4b16      	ldr	r3, [pc, #88]	; (5da8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    5d4e:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    5d50:	f7fb f9ba 	bl	10c8 <sjsu::lpc40xx::DefaultSystemController()>
    5d54:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    5d56:	461a      	mov	r2, r3
    5d58:	4914      	ldr	r1, [pc, #80]	; (5dac <__static_initialization_and_destruction_0(int, int)+0x108>)
    5d5a:	4815      	ldr	r0, [pc, #84]	; (5db0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5d5c:	f7fb fc1a 	bl	1594 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    5d60:	bf00      	nop
    5d62:	3708      	adds	r7, #8
    5d64:	46bd      	mov	sp, r7
    5d66:	bd80      	pop	{r7, pc}
    5d68:	10000394 	.word	0x10000394
    5d6c:	1000012c 	.word	0x1000012c
    5d70:	10000380 	.word	0x10000380
    5d74:	400fc000 	.word	0x400fc000
    5d78:	10000124 	.word	0x10000124
    5d7c:	1000037c 	.word	0x1000037c
    5d80:	4002c000 	.word	0x4002c000
    5d84:	10000120 	.word	0x10000120
    5d88:	10000384 	.word	0x10000384
    5d8c:	40098000 	.word	0x40098000
    5d90:	1000000c 	.word	0x1000000c
    5d94:	10000388 	.word	0x10000388
    5d98:	4009c000 	.word	0x4009c000
    5d9c:	10000020 	.word	0x10000020
    5da0:	1000038c 	.word	0x1000038c
    5da4:	400a4000 	.word	0x400a4000
    5da8:	10000034 	.word	0x10000034
    5dac:	00009de4 	.word	0x00009de4
    5db0:	100004cc 	.word	0x100004cc

00005db4 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    5db4:	b580      	push	{r7, lr}
    5db6:	af00      	add	r7, sp, #0
    5db8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5dbc:	2001      	movs	r0, #1
    5dbe:	f7ff ff71 	bl	5ca4 <__static_initialization_and_destruction_0(int, int)>
    5dc2:	bd80      	pop	{r7, pc}

00005dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    5dc4:	b480      	push	{r7}
    5dc6:	b085      	sub	sp, #20
    5dc8:	af00      	add	r7, sp, #0
    5dca:	60f8      	str	r0, [r7, #12]
    5dcc:	60b9      	str	r1, [r7, #8]
    5dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    5dd0:	68fb      	ldr	r3, [r7, #12]
    5dd2:	3b04      	subs	r3, #4
    5dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	3b04      	subs	r3, #4
    5de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    5de4:	68bb      	ldr	r3, [r7, #8]
    5de6:	f023 0201 	bic.w	r2, r3, #1
    5dea:	68fb      	ldr	r3, [r7, #12]
    5dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5dee:	68fb      	ldr	r3, [r7, #12]
    5df0:	3b04      	subs	r3, #4
    5df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    5df4:	4a0c      	ldr	r2, [pc, #48]	; (5e28 <pxPortInitialiseStack+0x64>)
    5df6:	68fb      	ldr	r3, [r7, #12]
    5df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5dfa:	68fb      	ldr	r3, [r7, #12]
    5dfc:	3b14      	subs	r3, #20
    5dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    5e00:	687a      	ldr	r2, [r7, #4]
    5e02:	68fb      	ldr	r3, [r7, #12]
    5e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	3b04      	subs	r3, #4
    5e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    5e0c:	68fb      	ldr	r3, [r7, #12]
    5e0e:	f06f 0202 	mvn.w	r2, #2
    5e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5e14:	68fb      	ldr	r3, [r7, #12]
    5e16:	3b20      	subs	r3, #32
    5e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5e1a:	68fb      	ldr	r3, [r7, #12]
}
    5e1c:	4618      	mov	r0, r3
    5e1e:	3714      	adds	r7, #20
    5e20:	46bd      	mov	sp, r7
    5e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e26:	4770      	bx	lr
    5e28:	00005e2d 	.word	0x00005e2d

00005e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    5e2c:	b480      	push	{r7}
    5e2e:	b083      	sub	sp, #12
    5e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    5e32:	2300      	movs	r3, #0
    5e34:	603b      	str	r3, [r7, #0]
	__asm volatile
    5e36:	f04f 0328 	mov.w	r3, #40	; 0x28
    5e3a:	f383 8811 	msr	BASEPRI, r3
    5e3e:	f3bf 8f6f 	isb	sy
    5e42:	f3bf 8f4f 	dsb	sy
    5e46:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    5e48:	bf00      	nop
    5e4a:	683b      	ldr	r3, [r7, #0]
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	d0fc      	beq.n	5e4a <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    5e50:	bf00      	nop
    5e52:	370c      	adds	r7, #12
    5e54:	46bd      	mov	sp, r7
    5e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5a:	4770      	bx	lr
    5e5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00005e60 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5e60:	4b07      	ldr	r3, [pc, #28]	; (5e80 <pxCurrentTCBConst2>)
    5e62:	6819      	ldr	r1, [r3, #0]
    5e64:	6808      	ldr	r0, [r1, #0]
    5e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e6a:	f380 8809 	msr	PSP, r0
    5e6e:	f3bf 8f6f 	isb	sy
    5e72:	f04f 0000 	mov.w	r0, #0
    5e76:	f380 8811 	msr	BASEPRI, r0
    5e7a:	4770      	bx	lr
    5e7c:	f3af 8000 	nop.w

00005e80 <pxCurrentTCBConst2>:
    5e80:	100003ac 	.word	0x100003ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    5e84:	bf00      	nop
    5e86:	bf00      	nop

00005e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    5e88:	4808      	ldr	r0, [pc, #32]	; (5eac <prvPortStartFirstTask+0x24>)
    5e8a:	6800      	ldr	r0, [r0, #0]
    5e8c:	6800      	ldr	r0, [r0, #0]
    5e8e:	f380 8808 	msr	MSP, r0
    5e92:	f04f 0000 	mov.w	r0, #0
    5e96:	f380 8814 	msr	CONTROL, r0
    5e9a:	b662      	cpsie	i
    5e9c:	b661      	cpsie	f
    5e9e:	f3bf 8f4f 	dsb	sy
    5ea2:	f3bf 8f6f 	isb	sy
    5ea6:	df00      	svc	0
    5ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    5eaa:	bf00      	nop
    5eac:	e000ed08 	.word	0xe000ed08

00005eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    5eb0:	b580      	push	{r7, lr}
    5eb2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    5eb4:	4b10      	ldr	r3, [pc, #64]	; (5ef8 <xPortStartScheduler+0x48>)
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	4a0f      	ldr	r2, [pc, #60]	; (5ef8 <xPortStartScheduler+0x48>)
    5eba:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    5ebe:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    5ec0:	4b0d      	ldr	r3, [pc, #52]	; (5ef8 <xPortStartScheduler+0x48>)
    5ec2:	681b      	ldr	r3, [r3, #0]
    5ec4:	4a0c      	ldr	r2, [pc, #48]	; (5ef8 <xPortStartScheduler+0x48>)
    5ec6:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    5eca:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    5ecc:	f7ff fe46 	bl	5b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5ed0:	4b0a      	ldr	r3, [pc, #40]	; (5efc <xPortStartScheduler+0x4c>)
    5ed2:	2200      	movs	r2, #0
    5ed4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    5ed6:	f000 f89f 	bl	6018 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    5eda:	4b09      	ldr	r3, [pc, #36]	; (5f00 <xPortStartScheduler+0x50>)
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	4a08      	ldr	r2, [pc, #32]	; (5f00 <xPortStartScheduler+0x50>)
    5ee0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5ee4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5ee6:	f7ff ffcf 	bl	5e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    5eea:	f7fd fe31 	bl	3b50 <vTaskSwitchContext>
	prvTaskExitError();
    5eee:	f7ff ff9d 	bl	5e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
    5ef2:	2300      	movs	r3, #0
}
    5ef4:	4618      	mov	r0, r3
    5ef6:	bd80      	pop	{r7, pc}
    5ef8:	e000ed20 	.word	0xe000ed20
    5efc:	1000008c 	.word	0x1000008c
    5f00:	e000ef34 	.word	0xe000ef34

00005f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5f04:	b480      	push	{r7}
    5f06:	b083      	sub	sp, #12
    5f08:	af00      	add	r7, sp, #0
    5f0a:	f04f 0328 	mov.w	r3, #40	; 0x28
    5f0e:	f383 8811 	msr	BASEPRI, r3
    5f12:	f3bf 8f6f 	isb	sy
    5f16:	f3bf 8f4f 	dsb	sy
    5f1a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    5f1c:	4b05      	ldr	r3, [pc, #20]	; (5f34 <vPortEnterCritical+0x30>)
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	3301      	adds	r3, #1
    5f22:	4a04      	ldr	r2, [pc, #16]	; (5f34 <vPortEnterCritical+0x30>)
    5f24:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    5f26:	bf00      	nop
    5f28:	370c      	adds	r7, #12
    5f2a:	46bd      	mov	sp, r7
    5f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f30:	4770      	bx	lr
    5f32:	bf00      	nop
    5f34:	1000008c 	.word	0x1000008c

00005f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5f38:	b480      	push	{r7}
    5f3a:	b083      	sub	sp, #12
    5f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    5f3e:	4b0a      	ldr	r3, [pc, #40]	; (5f68 <vPortExitCritical+0x30>)
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	3b01      	subs	r3, #1
    5f44:	4a08      	ldr	r2, [pc, #32]	; (5f68 <vPortExitCritical+0x30>)
    5f46:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    5f48:	4b07      	ldr	r3, [pc, #28]	; (5f68 <vPortExitCritical+0x30>)
    5f4a:	681b      	ldr	r3, [r3, #0]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d104      	bne.n	5f5a <vPortExitCritical+0x22>
    5f50:	2300      	movs	r3, #0
    5f52:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    5f5a:	bf00      	nop
    5f5c:	370c      	adds	r7, #12
    5f5e:	46bd      	mov	sp, r7
    5f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f64:	4770      	bx	lr
    5f66:	bf00      	nop
    5f68:	1000008c 	.word	0x1000008c
    5f6c:	ffffffff 	.word	0xffffffff

00005f70 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5f70:	f3ef 8009 	mrs	r0, PSP
    5f74:	f3bf 8f6f 	isb	sy
    5f78:	4b15      	ldr	r3, [pc, #84]	; (5fd0 <pxCurrentTCBConst>)
    5f7a:	681a      	ldr	r2, [r3, #0]
    5f7c:	f01e 0f10 	tst.w	lr, #16
    5f80:	bf08      	it	eq
    5f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    5f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f8a:	6010      	str	r0, [r2, #0]
    5f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
    5f90:	f04f 0028 	mov.w	r0, #40	; 0x28
    5f94:	f380 8811 	msr	BASEPRI, r0
    5f98:	f3bf 8f4f 	dsb	sy
    5f9c:	f3bf 8f6f 	isb	sy
    5fa0:	f7fd fdd6 	bl	3b50 <vTaskSwitchContext>
    5fa4:	f04f 0000 	mov.w	r0, #0
    5fa8:	f380 8811 	msr	BASEPRI, r0
    5fac:	bc09      	pop	{r0, r3}
    5fae:	6819      	ldr	r1, [r3, #0]
    5fb0:	6808      	ldr	r0, [r1, #0]
    5fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fb6:	f01e 0f10 	tst.w	lr, #16
    5fba:	bf08      	it	eq
    5fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    5fc0:	f380 8809 	msr	PSP, r0
    5fc4:	f3bf 8f6f 	isb	sy
    5fc8:	4770      	bx	lr
    5fca:	bf00      	nop
    5fcc:	f3af 8000 	nop.w

00005fd0 <pxCurrentTCBConst>:
    5fd0:	100003ac 	.word	0x100003ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    5fd4:	bf00      	nop
    5fd6:	bf00      	nop

00005fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b082      	sub	sp, #8
    5fdc:	af00      	add	r7, sp, #0
	__asm volatile
    5fde:	f04f 0328 	mov.w	r3, #40	; 0x28
    5fe2:	f383 8811 	msr	BASEPRI, r3
    5fe6:	f3bf 8f6f 	isb	sy
    5fea:	f3bf 8f4f 	dsb	sy
    5fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    5ff0:	f7fd fd02 	bl	39f8 <xTaskIncrementTick>
    5ff4:	4603      	mov	r3, r0
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d003      	beq.n	6002 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    5ffa:	4b06      	ldr	r3, [pc, #24]	; (6014 <xPortSysTickHandler+0x3c>)
    5ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6000:	601a      	str	r2, [r3, #0]
    6002:	2300      	movs	r3, #0
    6004:	603b      	str	r3, [r7, #0]
	__asm volatile
    6006:	683b      	ldr	r3, [r7, #0]
    6008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    600c:	bf00      	nop
    600e:	3708      	adds	r7, #8
    6010:	46bd      	mov	sp, r7
    6012:	bd80      	pop	{r7, pc}
    6014:	e000ed04 	.word	0xe000ed04

00006018 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    6018:	f8df 000c 	ldr.w	r0, [pc, #12]	; 6028 <vPortEnableVFP+0x10>
    601c:	6801      	ldr	r1, [r0, #0]
    601e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6022:	6001      	str	r1, [r0, #0]
    6024:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    6026:	bf00      	nop
    6028:	e000ed88 	.word	0xe000ed88

0000602c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    602c:	b480      	push	{r7}
    602e:	b083      	sub	sp, #12
    6030:	af00      	add	r7, sp, #0
    6032:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    6034:	2350      	movs	r3, #80	; 0x50
    6036:	4618      	mov	r0, r3
    6038:	370c      	adds	r7, #12
    603a:	46bd      	mov	sp, r7
    603c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6040:	4770      	bx	lr
    6042:	Address 0x0000000000006042 is out of bounds.


00006044 <vApplicationGetIdleTaskMemory>:
static StackType_t idle_task_stack[configMINIMAL_STACK_SIZE];
extern "C" void vApplicationGetIdleTaskMemory(  // NOLINT
    StaticTask_t ** ppx_idle_task_tcb_buffer,
    StackType_t ** ppx_idle_task_stack_buffer,
    uint32_t * pul_idle_task_stack_size)
{
    6044:	b580      	push	{r7, lr}
    6046:	b084      	sub	sp, #16
    6048:	af00      	add	r7, sp, #0
    604a:	60f8      	str	r0, [r7, #12]
    604c:	60b9      	str	r1, [r7, #8]
    604e:	607a      	str	r2, [r7, #4]
  *ppx_idle_task_tcb_buffer   = &idle_task_tcb;
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	4a07      	ldr	r2, [pc, #28]	; (6070 <vApplicationGetIdleTaskMemory+0x2c>)
    6054:	601a      	str	r2, [r3, #0]
  *ppx_idle_task_stack_buffer = idle_task_stack;
    6056:	68bb      	ldr	r3, [r7, #8]
    6058:	4a06      	ldr	r2, [pc, #24]	; (6074 <vApplicationGetIdleTaskMemory+0x30>)
    605a:	601a      	str	r2, [r3, #0]
  *pul_idle_task_stack_size   = std::size(idle_task_stack);
    605c:	4805      	ldr	r0, [pc, #20]	; (6074 <vApplicationGetIdleTaskMemory+0x30>)
    605e:	f7ff ffe5 	bl	602c <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>
    6062:	4602      	mov	r2, r0
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	601a      	str	r2, [r3, #0]
}
    6068:	bf00      	nop
    606a:	3710      	adds	r7, #16
    606c:	46bd      	mov	sp, r7
    606e:	bd80      	pop	{r7, pc}
    6070:	100004d8 	.word	0x100004d8
    6074:	10000538 	.word	0x10000538

00006078 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    6078:	b480      	push	{r7}
    607a:	b083      	sub	sp, #12
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    6080:	f44f 7300 	mov.w	r3, #512	; 0x200
    6084:	4618      	mov	r0, r3
    6086:	370c      	adds	r7, #12
    6088:	46bd      	mov	sp, r7
    608a:	f85d 7b04 	ldr.w	r7, [sp], #4
    608e:	4770      	bx	lr

00006090 <vApplicationGetTimerTaskMemory>:
static StackType_t timer_task_stack[configTIMER_TASK_STACK_DEPTH];
extern "C" void vApplicationGetTimerTaskMemory( // NOLINT
    StaticTask_t ** ppx_timer_task_tcb_buffer,
    StackType_t ** ppx_timer_task_stack_buffer,
    uint32_t * pul_timer_task_stack_size)
{
    6090:	b580      	push	{r7, lr}
    6092:	b084      	sub	sp, #16
    6094:	af00      	add	r7, sp, #0
    6096:	60f8      	str	r0, [r7, #12]
    6098:	60b9      	str	r1, [r7, #8]
    609a:	607a      	str	r2, [r7, #4]
    *ppx_timer_task_tcb_buffer = &timer_task_tcb;
    609c:	68fb      	ldr	r3, [r7, #12]
    609e:	4a07      	ldr	r2, [pc, #28]	; (60bc <vApplicationGetTimerTaskMemory+0x2c>)
    60a0:	601a      	str	r2, [r3, #0]
    *ppx_timer_task_stack_buffer = timer_task_stack;
    60a2:	68bb      	ldr	r3, [r7, #8]
    60a4:	4a06      	ldr	r2, [pc, #24]	; (60c0 <vApplicationGetTimerTaskMemory+0x30>)
    60a6:	601a      	str	r2, [r3, #0]
    *pul_timer_task_stack_size = std::size(timer_task_stack);
    60a8:	4805      	ldr	r0, [pc, #20]	; (60c0 <vApplicationGetTimerTaskMemory+0x30>)
    60aa:	f7ff ffe5 	bl	6078 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>
    60ae:	4602      	mov	r2, r0
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	601a      	str	r2, [r3, #0]
}
    60b4:	bf00      	nop
    60b6:	3710      	adds	r7, #16
    60b8:	46bd      	mov	sp, r7
    60ba:	bd80      	pop	{r7, pc}
    60bc:	10000678 	.word	0x10000678
    60c0:	100006d8 	.word	0x100006d8

000060c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    60c4:	b580      	push	{r7, lr}
    60c6:	b088      	sub	sp, #32
    60c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    60ca:	2300      	movs	r3, #0
    60cc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    60ce:	f000 fa5b 	bl	6588 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    60d2:	4b15      	ldr	r3, [pc, #84]	; (6128 <xTimerCreateTimerTask+0x64>)
    60d4:	681b      	ldr	r3, [r3, #0]
    60d6:	2b00      	cmp	r3, #0
    60d8:	d020      	beq.n	611c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    60da:	2300      	movs	r3, #0
    60dc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    60de:	2300      	movs	r3, #0
    60e0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    60e2:	463a      	mov	r2, r7
    60e4:	1d39      	adds	r1, r7, #4
    60e6:	f107 0308 	add.w	r3, r7, #8
    60ea:	4618      	mov	r0, r3
    60ec:	f7ff ffd0 	bl	6090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    60f0:	6839      	ldr	r1, [r7, #0]
    60f2:	687b      	ldr	r3, [r7, #4]
    60f4:	68ba      	ldr	r2, [r7, #8]
    60f6:	9202      	str	r2, [sp, #8]
    60f8:	9301      	str	r3, [sp, #4]
    60fa:	2304      	movs	r3, #4
    60fc:	9300      	str	r3, [sp, #0]
    60fe:	2300      	movs	r3, #0
    6100:	460a      	mov	r2, r1
    6102:	490a      	ldr	r1, [pc, #40]	; (612c <xTimerCreateTimerTask+0x68>)
    6104:	480a      	ldr	r0, [pc, #40]	; (6130 <xTimerCreateTimerTask+0x6c>)
    6106:	f7fd f9f3 	bl	34f0 <xTaskCreateStatic>
    610a:	4602      	mov	r2, r0
    610c:	4b09      	ldr	r3, [pc, #36]	; (6134 <xTimerCreateTimerTask+0x70>)
    610e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    6110:	4b08      	ldr	r3, [pc, #32]	; (6134 <xTimerCreateTimerTask+0x70>)
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	2b00      	cmp	r3, #0
    6116:	d001      	beq.n	611c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
    6118:	2301      	movs	r3, #1
    611a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    611c:	68fb      	ldr	r3, [r7, #12]
}
    611e:	4618      	mov	r0, r3
    6120:	3710      	adds	r7, #16
    6122:	46bd      	mov	sp, r7
    6124:	bd80      	pop	{r7, pc}
    6126:	bf00      	nop
    6128:	10000f08 	.word	0x10000f08
    612c:	00009e3c 	.word	0x00009e3c
    6130:	0000621d 	.word	0x0000621d
    6134:	10000f0c 	.word	0x10000f0c

00006138 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    6138:	b580      	push	{r7, lr}
    613a:	b088      	sub	sp, #32
    613c:	af00      	add	r7, sp, #0
    613e:	60f8      	str	r0, [r7, #12]
    6140:	60b9      	str	r1, [r7, #8]
    6142:	607a      	str	r2, [r7, #4]
    6144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    6146:	2300      	movs	r3, #0
    6148:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    614a:	4b1a      	ldr	r3, [pc, #104]	; (61b4 <xTimerGenericCommand+0x7c>)
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	2b00      	cmp	r3, #0
    6150:	d02a      	beq.n	61a8 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    6152:	68bb      	ldr	r3, [r7, #8]
    6154:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    615a:	68fb      	ldr	r3, [r7, #12]
    615c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    615e:	68bb      	ldr	r3, [r7, #8]
    6160:	2b05      	cmp	r3, #5
    6162:	dc18      	bgt.n	6196 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    6164:	f7fd fefe 	bl	3f64 <xTaskGetSchedulerState>
    6168:	4603      	mov	r3, r0
    616a:	2b02      	cmp	r3, #2
    616c:	d109      	bne.n	6182 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    616e:	4b11      	ldr	r3, [pc, #68]	; (61b4 <xTimerGenericCommand+0x7c>)
    6170:	6818      	ldr	r0, [r3, #0]
    6172:	f107 0110 	add.w	r1, r7, #16
    6176:	2300      	movs	r3, #0
    6178:	6aba      	ldr	r2, [r7, #40]	; 0x28
    617a:	f000 fae1 	bl	6740 <xQueueGenericSend>
    617e:	61f8      	str	r0, [r7, #28]
    6180:	e012      	b.n	61a8 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    6182:	4b0c      	ldr	r3, [pc, #48]	; (61b4 <xTimerGenericCommand+0x7c>)
    6184:	6818      	ldr	r0, [r3, #0]
    6186:	f107 0110 	add.w	r1, r7, #16
    618a:	2300      	movs	r3, #0
    618c:	2200      	movs	r2, #0
    618e:	f000 fad7 	bl	6740 <xQueueGenericSend>
    6192:	61f8      	str	r0, [r7, #28]
    6194:	e008      	b.n	61a8 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    6196:	4b07      	ldr	r3, [pc, #28]	; (61b4 <xTimerGenericCommand+0x7c>)
    6198:	6818      	ldr	r0, [r3, #0]
    619a:	f107 0110 	add.w	r1, r7, #16
    619e:	2300      	movs	r3, #0
    61a0:	683a      	ldr	r2, [r7, #0]
    61a2:	f000 fb77 	bl	6894 <xQueueGenericSendFromISR>
    61a6:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    61a8:	69fb      	ldr	r3, [r7, #28]
}
    61aa:	4618      	mov	r0, r3
    61ac:	3720      	adds	r7, #32
    61ae:	46bd      	mov	sp, r7
    61b0:	bd80      	pop	{r7, pc}
    61b2:	bf00      	nop
    61b4:	10000f08 	.word	0x10000f08

000061b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b086      	sub	sp, #24
    61bc:	af02      	add	r7, sp, #8
    61be:	6078      	str	r0, [r7, #4]
    61c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    61c2:	4b15      	ldr	r3, [pc, #84]	; (6218 <prvProcessExpiredTimer+0x60>)
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	68db      	ldr	r3, [r3, #12]
    61c8:	68db      	ldr	r3, [r3, #12]
    61ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    61cc:	68fb      	ldr	r3, [r7, #12]
    61ce:	3304      	adds	r3, #4
    61d0:	4618      	mov	r0, r3
    61d2:	f7fd f963 	bl	349c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    61d6:	68fb      	ldr	r3, [r7, #12]
    61d8:	69db      	ldr	r3, [r3, #28]
    61da:	2b01      	cmp	r3, #1
    61dc:	d114      	bne.n	6208 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    61de:	68fb      	ldr	r3, [r7, #12]
    61e0:	699a      	ldr	r2, [r3, #24]
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	18d1      	adds	r1, r2, r3
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	683a      	ldr	r2, [r7, #0]
    61ea:	68f8      	ldr	r0, [r7, #12]
    61ec:	f000 f8ba 	bl	6364 <prvInsertTimerInActiveList>
    61f0:	4603      	mov	r3, r0
    61f2:	2b00      	cmp	r3, #0
    61f4:	d008      	beq.n	6208 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    61f6:	2300      	movs	r3, #0
    61f8:	9300      	str	r3, [sp, #0]
    61fa:	2300      	movs	r3, #0
    61fc:	687a      	ldr	r2, [r7, #4]
    61fe:	2100      	movs	r1, #0
    6200:	68f8      	ldr	r0, [r7, #12]
    6202:	f7ff ff99 	bl	6138 <xTimerGenericCommand>
    6206:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    620c:	68f8      	ldr	r0, [r7, #12]
    620e:	4798      	blx	r3
}
    6210:	bf00      	nop
    6212:	3710      	adds	r7, #16
    6214:	46bd      	mov	sp, r7
    6216:	bd80      	pop	{r7, pc}
    6218:	10000f00 	.word	0x10000f00

0000621c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    621c:	b580      	push	{r7, lr}
    621e:	b084      	sub	sp, #16
    6220:	af00      	add	r7, sp, #0
    6222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    6224:	f107 0308 	add.w	r3, r7, #8
    6228:	4618      	mov	r0, r3
    622a:	f000 f857 	bl	62dc <prvGetNextExpireTime>
    622e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    6230:	68bb      	ldr	r3, [r7, #8]
    6232:	4619      	mov	r1, r3
    6234:	68f8      	ldr	r0, [r7, #12]
    6236:	f000 f803 	bl	6240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    623a:	f000 f8d5 	bl	63e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    623e:	e7f1      	b.n	6224 <prvTimerTask+0x8>

00006240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    6240:	b580      	push	{r7, lr}
    6242:	b084      	sub	sp, #16
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
    6248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    624a:	f7fd fb29 	bl	38a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    624e:	f107 0308 	add.w	r3, r7, #8
    6252:	4618      	mov	r0, r3
    6254:	f000 f866 	bl	6324 <prvSampleTimeNow>
    6258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    625a:	68bb      	ldr	r3, [r7, #8]
    625c:	2b00      	cmp	r3, #0
    625e:	d130      	bne.n	62c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    6260:	683b      	ldr	r3, [r7, #0]
    6262:	2b00      	cmp	r3, #0
    6264:	d10a      	bne.n	627c <prvProcessTimerOrBlockTask+0x3c>
    6266:	687a      	ldr	r2, [r7, #4]
    6268:	68fb      	ldr	r3, [r7, #12]
    626a:	429a      	cmp	r2, r3
    626c:	d806      	bhi.n	627c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    626e:	f7fd fb25 	bl	38bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    6272:	68f9      	ldr	r1, [r7, #12]
    6274:	6878      	ldr	r0, [r7, #4]
    6276:	f7ff ff9f 	bl	61b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    627a:	e024      	b.n	62c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    627c:	683b      	ldr	r3, [r7, #0]
    627e:	2b00      	cmp	r3, #0
    6280:	d008      	beq.n	6294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    6282:	4b13      	ldr	r3, [pc, #76]	; (62d0 <prvProcessTimerOrBlockTask+0x90>)
    6284:	681b      	ldr	r3, [r3, #0]
    6286:	681b      	ldr	r3, [r3, #0]
    6288:	2b00      	cmp	r3, #0
    628a:	bf0c      	ite	eq
    628c:	2301      	moveq	r3, #1
    628e:	2300      	movne	r3, #0
    6290:	b2db      	uxtb	r3, r3
    6292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    6294:	4b0f      	ldr	r3, [pc, #60]	; (62d4 <prvProcessTimerOrBlockTask+0x94>)
    6296:	6818      	ldr	r0, [r3, #0]
    6298:	687a      	ldr	r2, [r7, #4]
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	1ad3      	subs	r3, r2, r3
    629e:	683a      	ldr	r2, [r7, #0]
    62a0:	4619      	mov	r1, r3
    62a2:	f000 fd2b 	bl	6cfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    62a6:	f7fd fb09 	bl	38bc <xTaskResumeAll>
    62aa:	4603      	mov	r3, r0
    62ac:	2b00      	cmp	r3, #0
    62ae:	d10a      	bne.n	62c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    62b0:	4b09      	ldr	r3, [pc, #36]	; (62d8 <prvProcessTimerOrBlockTask+0x98>)
    62b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    62b6:	601a      	str	r2, [r3, #0]
    62b8:	f3bf 8f4f 	dsb	sy
    62bc:	f3bf 8f6f 	isb	sy
}
    62c0:	e001      	b.n	62c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    62c2:	f7fd fafb 	bl	38bc <xTaskResumeAll>
}
    62c6:	bf00      	nop
    62c8:	3710      	adds	r7, #16
    62ca:	46bd      	mov	sp, r7
    62cc:	bd80      	pop	{r7, pc}
    62ce:	bf00      	nop
    62d0:	10000f04 	.word	0x10000f04
    62d4:	10000f08 	.word	0x10000f08
    62d8:	e000ed04 	.word	0xe000ed04

000062dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    62dc:	b480      	push	{r7}
    62de:	b085      	sub	sp, #20
    62e0:	af00      	add	r7, sp, #0
    62e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    62e4:	4b0e      	ldr	r3, [pc, #56]	; (6320 <prvGetNextExpireTime+0x44>)
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	681b      	ldr	r3, [r3, #0]
    62ea:	2b00      	cmp	r3, #0
    62ec:	bf0c      	ite	eq
    62ee:	2301      	moveq	r3, #1
    62f0:	2300      	movne	r3, #0
    62f2:	b2db      	uxtb	r3, r3
    62f4:	461a      	mov	r2, r3
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	681b      	ldr	r3, [r3, #0]
    62fe:	2b00      	cmp	r3, #0
    6300:	d105      	bne.n	630e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6302:	4b07      	ldr	r3, [pc, #28]	; (6320 <prvGetNextExpireTime+0x44>)
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	68db      	ldr	r3, [r3, #12]
    6308:	681b      	ldr	r3, [r3, #0]
    630a:	60fb      	str	r3, [r7, #12]
    630c:	e001      	b.n	6312 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    630e:	2300      	movs	r3, #0
    6310:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    6312:	68fb      	ldr	r3, [r7, #12]
}
    6314:	4618      	mov	r0, r3
    6316:	3714      	adds	r7, #20
    6318:	46bd      	mov	sp, r7
    631a:	f85d 7b04 	ldr.w	r7, [sp], #4
    631e:	4770      	bx	lr
    6320:	10000f00 	.word	0x10000f00

00006324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    6324:	b580      	push	{r7, lr}
    6326:	b084      	sub	sp, #16
    6328:	af00      	add	r7, sp, #0
    632a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    632c:	f7fd fb54 	bl	39d8 <xTaskGetTickCount>
    6330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    6332:	4b0b      	ldr	r3, [pc, #44]	; (6360 <prvSampleTimeNow+0x3c>)
    6334:	681b      	ldr	r3, [r3, #0]
    6336:	68fa      	ldr	r2, [r7, #12]
    6338:	429a      	cmp	r2, r3
    633a:	d205      	bcs.n	6348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    633c:	f000 f8d0 	bl	64e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	2201      	movs	r2, #1
    6344:	601a      	str	r2, [r3, #0]
    6346:	e002      	b.n	634e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    6348:	687b      	ldr	r3, [r7, #4]
    634a:	2200      	movs	r2, #0
    634c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    634e:	4a04      	ldr	r2, [pc, #16]	; (6360 <prvSampleTimeNow+0x3c>)
    6350:	68fb      	ldr	r3, [r7, #12]
    6352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    6354:	68fb      	ldr	r3, [r7, #12]
}
    6356:	4618      	mov	r0, r3
    6358:	3710      	adds	r7, #16
    635a:	46bd      	mov	sp, r7
    635c:	bd80      	pop	{r7, pc}
    635e:	bf00      	nop
    6360:	10000f10 	.word	0x10000f10

00006364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    6364:	b580      	push	{r7, lr}
    6366:	b086      	sub	sp, #24
    6368:	af00      	add	r7, sp, #0
    636a:	60f8      	str	r0, [r7, #12]
    636c:	60b9      	str	r1, [r7, #8]
    636e:	607a      	str	r2, [r7, #4]
    6370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    6372:	2300      	movs	r3, #0
    6374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    6376:	68fb      	ldr	r3, [r7, #12]
    6378:	68ba      	ldr	r2, [r7, #8]
    637a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    637c:	68fb      	ldr	r3, [r7, #12]
    637e:	68fa      	ldr	r2, [r7, #12]
    6380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    6382:	68ba      	ldr	r2, [r7, #8]
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	429a      	cmp	r2, r3
    6388:	d812      	bhi.n	63b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    638a:	687a      	ldr	r2, [r7, #4]
    638c:	683b      	ldr	r3, [r7, #0]
    638e:	1ad2      	subs	r2, r2, r3
    6390:	68fb      	ldr	r3, [r7, #12]
    6392:	699b      	ldr	r3, [r3, #24]
    6394:	429a      	cmp	r2, r3
    6396:	d302      	bcc.n	639e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6398:	2301      	movs	r3, #1
    639a:	617b      	str	r3, [r7, #20]
    639c:	e01b      	b.n	63d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    639e:	4b10      	ldr	r3, [pc, #64]	; (63e0 <prvInsertTimerInActiveList+0x7c>)
    63a0:	681a      	ldr	r2, [r3, #0]
    63a2:	68fb      	ldr	r3, [r7, #12]
    63a4:	3304      	adds	r3, #4
    63a6:	4619      	mov	r1, r3
    63a8:	4610      	mov	r0, r2
    63aa:	f7fd f83e 	bl	342a <vListInsert>
    63ae:	e012      	b.n	63d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    63b0:	687a      	ldr	r2, [r7, #4]
    63b2:	683b      	ldr	r3, [r7, #0]
    63b4:	429a      	cmp	r2, r3
    63b6:	d206      	bcs.n	63c6 <prvInsertTimerInActiveList+0x62>
    63b8:	68ba      	ldr	r2, [r7, #8]
    63ba:	683b      	ldr	r3, [r7, #0]
    63bc:	429a      	cmp	r2, r3
    63be:	d302      	bcc.n	63c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    63c0:	2301      	movs	r3, #1
    63c2:	617b      	str	r3, [r7, #20]
    63c4:	e007      	b.n	63d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    63c6:	4b07      	ldr	r3, [pc, #28]	; (63e4 <prvInsertTimerInActiveList+0x80>)
    63c8:	681a      	ldr	r2, [r3, #0]
    63ca:	68fb      	ldr	r3, [r7, #12]
    63cc:	3304      	adds	r3, #4
    63ce:	4619      	mov	r1, r3
    63d0:	4610      	mov	r0, r2
    63d2:	f7fd f82a 	bl	342a <vListInsert>
		}
	}

	return xProcessTimerNow;
    63d6:	697b      	ldr	r3, [r7, #20]
}
    63d8:	4618      	mov	r0, r3
    63da:	3718      	adds	r7, #24
    63dc:	46bd      	mov	sp, r7
    63de:	bd80      	pop	{r7, pc}
    63e0:	10000f04 	.word	0x10000f04
    63e4:	10000f00 	.word	0x10000f00

000063e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b08a      	sub	sp, #40	; 0x28
    63ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    63ee:	e065      	b.n	64bc <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    63f0:	68bb      	ldr	r3, [r7, #8]
    63f2:	2b00      	cmp	r3, #0
    63f4:	db61      	blt.n	64ba <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    63f6:	693b      	ldr	r3, [r7, #16]
    63f8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    63fa:	69fb      	ldr	r3, [r7, #28]
    63fc:	695b      	ldr	r3, [r3, #20]
    63fe:	2b00      	cmp	r3, #0
    6400:	d004      	beq.n	640c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6402:	69fb      	ldr	r3, [r7, #28]
    6404:	3304      	adds	r3, #4
    6406:	4618      	mov	r0, r3
    6408:	f7fd f848 	bl	349c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    640c:	1d3b      	adds	r3, r7, #4
    640e:	4618      	mov	r0, r3
    6410:	f7ff ff88 	bl	6324 <prvSampleTimeNow>
    6414:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
    6416:	68bb      	ldr	r3, [r7, #8]
    6418:	2b09      	cmp	r3, #9
    641a:	d84f      	bhi.n	64bc <prvProcessReceivedCommands+0xd4>
    641c:	a201      	add	r2, pc, #4	; (adr r2, 6424 <prvProcessReceivedCommands+0x3c>)
    641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6422:	bf00      	nop
    6424:	0000644d 	.word	0x0000644d
    6428:	0000644d 	.word	0x0000644d
    642c:	0000644d 	.word	0x0000644d
    6430:	000064bd 	.word	0x000064bd
    6434:	0000648f 	.word	0x0000648f
    6438:	000064a9 	.word	0x000064a9
    643c:	0000644d 	.word	0x0000644d
    6440:	0000644d 	.word	0x0000644d
    6444:	000064bd 	.word	0x000064bd
    6448:	0000648f 	.word	0x0000648f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    644c:	68fa      	ldr	r2, [r7, #12]
    644e:	69fb      	ldr	r3, [r7, #28]
    6450:	699b      	ldr	r3, [r3, #24]
    6452:	18d1      	adds	r1, r2, r3
    6454:	68fb      	ldr	r3, [r7, #12]
    6456:	69ba      	ldr	r2, [r7, #24]
    6458:	69f8      	ldr	r0, [r7, #28]
    645a:	f7ff ff83 	bl	6364 <prvInsertTimerInActiveList>
    645e:	4603      	mov	r3, r0
    6460:	2b00      	cmp	r3, #0
    6462:	d02b      	beq.n	64bc <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6464:	69fb      	ldr	r3, [r7, #28]
    6466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6468:	69f8      	ldr	r0, [r7, #28]
    646a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    646c:	69fb      	ldr	r3, [r7, #28]
    646e:	69db      	ldr	r3, [r3, #28]
    6470:	2b01      	cmp	r3, #1
    6472:	d123      	bne.n	64bc <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    6474:	68fa      	ldr	r2, [r7, #12]
    6476:	69fb      	ldr	r3, [r7, #28]
    6478:	699b      	ldr	r3, [r3, #24]
    647a:	441a      	add	r2, r3
    647c:	2300      	movs	r3, #0
    647e:	9300      	str	r3, [sp, #0]
    6480:	2300      	movs	r3, #0
    6482:	2100      	movs	r1, #0
    6484:	69f8      	ldr	r0, [r7, #28]
    6486:	f7ff fe57 	bl	6138 <xTimerGenericCommand>
    648a:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    648c:	e016      	b.n	64bc <prvProcessReceivedCommands+0xd4>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    648e:	68fa      	ldr	r2, [r7, #12]
    6490:	69fb      	ldr	r3, [r7, #28]
    6492:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    6494:	69fb      	ldr	r3, [r7, #28]
    6496:	699a      	ldr	r2, [r3, #24]
    6498:	69bb      	ldr	r3, [r7, #24]
    649a:	18d1      	adds	r1, r2, r3
    649c:	69bb      	ldr	r3, [r7, #24]
    649e:	69ba      	ldr	r2, [r7, #24]
    64a0:	69f8      	ldr	r0, [r7, #28]
    64a2:	f7ff ff5f 	bl	6364 <prvInsertTimerInActiveList>
					break;
    64a6:	e009      	b.n	64bc <prvProcessReceivedCommands+0xd4>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    64a8:	69fb      	ldr	r3, [r7, #28]
    64aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    64ae:	2b00      	cmp	r3, #0
    64b0:	d104      	bne.n	64bc <prvProcessReceivedCommands+0xd4>
						{
							vPortFree( pxTimer );
    64b2:	69f8      	ldr	r0, [r7, #28]
    64b4:	f7fd fe50 	bl	4158 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    64b8:	e000      	b.n	64bc <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    64ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    64bc:	4b07      	ldr	r3, [pc, #28]	; (64dc <prvProcessReceivedCommands+0xf4>)
    64be:	681b      	ldr	r3, [r3, #0]
    64c0:	f107 0108 	add.w	r1, r7, #8
    64c4:	2200      	movs	r2, #0
    64c6:	4618      	mov	r0, r3
    64c8:	f000 fa3e 	bl	6948 <xQueueReceive>
    64cc:	4603      	mov	r3, r0
    64ce:	2b00      	cmp	r3, #0
    64d0:	d18e      	bne.n	63f0 <prvProcessReceivedCommands+0x8>
	}
}
    64d2:	bf00      	nop
    64d4:	3720      	adds	r7, #32
    64d6:	46bd      	mov	sp, r7
    64d8:	bd80      	pop	{r7, pc}
    64da:	bf00      	nop
    64dc:	10000f08 	.word	0x10000f08

000064e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    64e0:	b580      	push	{r7, lr}
    64e2:	b088      	sub	sp, #32
    64e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    64e6:	e037      	b.n	6558 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    64e8:	4b25      	ldr	r3, [pc, #148]	; (6580 <prvSwitchTimerLists+0xa0>)
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	68db      	ldr	r3, [r3, #12]
    64ee:	681b      	ldr	r3, [r3, #0]
    64f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    64f2:	4b23      	ldr	r3, [pc, #140]	; (6580 <prvSwitchTimerLists+0xa0>)
    64f4:	681b      	ldr	r3, [r3, #0]
    64f6:	68db      	ldr	r3, [r3, #12]
    64f8:	68db      	ldr	r3, [r3, #12]
    64fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    64fc:	68fb      	ldr	r3, [r7, #12]
    64fe:	3304      	adds	r3, #4
    6500:	4618      	mov	r0, r3
    6502:	f7fc ffcb 	bl	349c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6506:	68fb      	ldr	r3, [r7, #12]
    6508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    650a:	68f8      	ldr	r0, [r7, #12]
    650c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    650e:	68fb      	ldr	r3, [r7, #12]
    6510:	69db      	ldr	r3, [r3, #28]
    6512:	2b01      	cmp	r3, #1
    6514:	d120      	bne.n	6558 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    6516:	68fb      	ldr	r3, [r7, #12]
    6518:	699b      	ldr	r3, [r3, #24]
    651a:	693a      	ldr	r2, [r7, #16]
    651c:	4413      	add	r3, r2
    651e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    6520:	68ba      	ldr	r2, [r7, #8]
    6522:	693b      	ldr	r3, [r7, #16]
    6524:	429a      	cmp	r2, r3
    6526:	d90e      	bls.n	6546 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	68ba      	ldr	r2, [r7, #8]
    652c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    652e:	68fb      	ldr	r3, [r7, #12]
    6530:	68fa      	ldr	r2, [r7, #12]
    6532:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6534:	4b12      	ldr	r3, [pc, #72]	; (6580 <prvSwitchTimerLists+0xa0>)
    6536:	681a      	ldr	r2, [r3, #0]
    6538:	68fb      	ldr	r3, [r7, #12]
    653a:	3304      	adds	r3, #4
    653c:	4619      	mov	r1, r3
    653e:	4610      	mov	r0, r2
    6540:	f7fc ff73 	bl	342a <vListInsert>
    6544:	e008      	b.n	6558 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6546:	2300      	movs	r3, #0
    6548:	9300      	str	r3, [sp, #0]
    654a:	2300      	movs	r3, #0
    654c:	693a      	ldr	r2, [r7, #16]
    654e:	2100      	movs	r1, #0
    6550:	68f8      	ldr	r0, [r7, #12]
    6552:	f7ff fdf1 	bl	6138 <xTimerGenericCommand>
    6556:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6558:	4b09      	ldr	r3, [pc, #36]	; (6580 <prvSwitchTimerLists+0xa0>)
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	681b      	ldr	r3, [r3, #0]
    655e:	2b00      	cmp	r3, #0
    6560:	d1c2      	bne.n	64e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    6562:	4b07      	ldr	r3, [pc, #28]	; (6580 <prvSwitchTimerLists+0xa0>)
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    6568:	4b06      	ldr	r3, [pc, #24]	; (6584 <prvSwitchTimerLists+0xa4>)
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	4a04      	ldr	r2, [pc, #16]	; (6580 <prvSwitchTimerLists+0xa0>)
    656e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    6570:	4a04      	ldr	r2, [pc, #16]	; (6584 <prvSwitchTimerLists+0xa4>)
    6572:	697b      	ldr	r3, [r7, #20]
    6574:	6013      	str	r3, [r2, #0]
}
    6576:	bf00      	nop
    6578:	3718      	adds	r7, #24
    657a:	46bd      	mov	sp, r7
    657c:	bd80      	pop	{r7, pc}
    657e:	bf00      	nop
    6580:	10000f00 	.word	0x10000f00
    6584:	10000f04 	.word	0x10000f04

00006588 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    6588:	b580      	push	{r7, lr}
    658a:	b082      	sub	sp, #8
    658c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    658e:	f7ff fcb9 	bl	5f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    6592:	4b15      	ldr	r3, [pc, #84]	; (65e8 <prvCheckForValidListAndQueue+0x60>)
    6594:	681b      	ldr	r3, [r3, #0]
    6596:	2b00      	cmp	r3, #0
    6598:	d120      	bne.n	65dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    659a:	4814      	ldr	r0, [pc, #80]	; (65ec <prvCheckForValidListAndQueue+0x64>)
    659c:	f7fc fef4 	bl	3388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    65a0:	4813      	ldr	r0, [pc, #76]	; (65f0 <prvCheckForValidListAndQueue+0x68>)
    65a2:	f7fc fef1 	bl	3388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    65a6:	4b13      	ldr	r3, [pc, #76]	; (65f4 <prvCheckForValidListAndQueue+0x6c>)
    65a8:	4a10      	ldr	r2, [pc, #64]	; (65ec <prvCheckForValidListAndQueue+0x64>)
    65aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    65ac:	4b12      	ldr	r3, [pc, #72]	; (65f8 <prvCheckForValidListAndQueue+0x70>)
    65ae:	4a10      	ldr	r2, [pc, #64]	; (65f0 <prvCheckForValidListAndQueue+0x68>)
    65b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    65b2:	2300      	movs	r3, #0
    65b4:	9300      	str	r3, [sp, #0]
    65b6:	4b11      	ldr	r3, [pc, #68]	; (65fc <prvCheckForValidListAndQueue+0x74>)
    65b8:	4a11      	ldr	r2, [pc, #68]	; (6600 <prvCheckForValidListAndQueue+0x78>)
    65ba:	210c      	movs	r1, #12
    65bc:	200a      	movs	r0, #10
    65be:	f000 f87d 	bl	66bc <xQueueGenericCreateStatic>
    65c2:	4602      	mov	r2, r0
    65c4:	4b08      	ldr	r3, [pc, #32]	; (65e8 <prvCheckForValidListAndQueue+0x60>)
    65c6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    65c8:	4b07      	ldr	r3, [pc, #28]	; (65e8 <prvCheckForValidListAndQueue+0x60>)
    65ca:	681b      	ldr	r3, [r3, #0]
    65cc:	2b00      	cmp	r3, #0
    65ce:	d005      	beq.n	65dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    65d0:	4b05      	ldr	r3, [pc, #20]	; (65e8 <prvCheckForValidListAndQueue+0x60>)
    65d2:	681b      	ldr	r3, [r3, #0]
    65d4:	490b      	ldr	r1, [pc, #44]	; (6604 <prvCheckForValidListAndQueue+0x7c>)
    65d6:	4618      	mov	r0, r3
    65d8:	f000 fb68 	bl	6cac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    65dc:	f7ff fcac 	bl	5f38 <vPortExitCritical>
}
    65e0:	bf00      	nop
    65e2:	46bd      	mov	sp, r7
    65e4:	bd80      	pop	{r7, pc}
    65e6:	bf00      	nop
    65e8:	10000f08 	.word	0x10000f08
    65ec:	10000ed8 	.word	0x10000ed8
    65f0:	10000eec 	.word	0x10000eec
    65f4:	10000f00 	.word	0x10000f00
    65f8:	10000f04 	.word	0x10000f04
    65fc:	10000f8c 	.word	0x10000f8c
    6600:	10000f14 	.word	0x10000f14
    6604:	00009e44 	.word	0x00009e44

00006608 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    6608:	b580      	push	{r7, lr}
    660a:	b084      	sub	sp, #16
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
    6610:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    6616:	f7ff fc75 	bl	5f04 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    661a:	68fb      	ldr	r3, [r7, #12]
    661c:	681a      	ldr	r2, [r3, #0]
    661e:	68fb      	ldr	r3, [r7, #12]
    6620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6622:	68f9      	ldr	r1, [r7, #12]
    6624:	6c09      	ldr	r1, [r1, #64]	; 0x40
    6626:	fb01 f303 	mul.w	r3, r1, r3
    662a:	441a      	add	r2, r3
    662c:	68fb      	ldr	r3, [r7, #12]
    662e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    6630:	68fb      	ldr	r3, [r7, #12]
    6632:	2200      	movs	r2, #0
    6634:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    6636:	68fb      	ldr	r3, [r7, #12]
    6638:	681a      	ldr	r2, [r3, #0]
    663a:	68fb      	ldr	r3, [r7, #12]
    663c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    663e:	68fb      	ldr	r3, [r7, #12]
    6640:	681a      	ldr	r2, [r3, #0]
    6642:	68fb      	ldr	r3, [r7, #12]
    6644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6646:	3b01      	subs	r3, #1
    6648:	68f9      	ldr	r1, [r7, #12]
    664a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    664c:	fb01 f303 	mul.w	r3, r1, r3
    6650:	441a      	add	r2, r3
    6652:	68fb      	ldr	r3, [r7, #12]
    6654:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    6656:	68fb      	ldr	r3, [r7, #12]
    6658:	22ff      	movs	r2, #255	; 0xff
    665a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    665e:	68fb      	ldr	r3, [r7, #12]
    6660:	22ff      	movs	r2, #255	; 0xff
    6662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    6666:	683b      	ldr	r3, [r7, #0]
    6668:	2b00      	cmp	r3, #0
    666a:	d114      	bne.n	6696 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    666c:	68fb      	ldr	r3, [r7, #12]
    666e:	691b      	ldr	r3, [r3, #16]
    6670:	2b00      	cmp	r3, #0
    6672:	d01a      	beq.n	66aa <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6674:	68fb      	ldr	r3, [r7, #12]
    6676:	3310      	adds	r3, #16
    6678:	4618      	mov	r0, r3
    667a:	f7fd faff 	bl	3c7c <xTaskRemoveFromEventList>
    667e:	4603      	mov	r3, r0
    6680:	2b00      	cmp	r3, #0
    6682:	d012      	beq.n	66aa <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    6684:	4b0c      	ldr	r3, [pc, #48]	; (66b8 <xQueueGenericReset+0xb0>)
    6686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    668a:	601a      	str	r2, [r3, #0]
    668c:	f3bf 8f4f 	dsb	sy
    6690:	f3bf 8f6f 	isb	sy
    6694:	e009      	b.n	66aa <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    6696:	68fb      	ldr	r3, [r7, #12]
    6698:	3310      	adds	r3, #16
    669a:	4618      	mov	r0, r3
    669c:	f7fc fe74 	bl	3388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    66a0:	68fb      	ldr	r3, [r7, #12]
    66a2:	3324      	adds	r3, #36	; 0x24
    66a4:	4618      	mov	r0, r3
    66a6:	f7fc fe6f 	bl	3388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    66aa:	f7ff fc45 	bl	5f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    66ae:	2301      	movs	r3, #1
}
    66b0:	4618      	mov	r0, r3
    66b2:	3710      	adds	r7, #16
    66b4:	46bd      	mov	sp, r7
    66b6:	bd80      	pop	{r7, pc}
    66b8:	e000ed04 	.word	0xe000ed04

000066bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    66bc:	b580      	push	{r7, lr}
    66be:	b088      	sub	sp, #32
    66c0:	af02      	add	r7, sp, #8
    66c2:	60f8      	str	r0, [r7, #12]
    66c4:	60b9      	str	r1, [r7, #8]
    66c6:	607a      	str	r2, [r7, #4]
    66c8:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    66ca:	683b      	ldr	r3, [r7, #0]
    66cc:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
    66ce:	697b      	ldr	r3, [r7, #20]
    66d0:	2b00      	cmp	r3, #0
    66d2:	d00d      	beq.n	66f0 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    66d4:	697b      	ldr	r3, [r7, #20]
    66d6:	2201      	movs	r2, #1
    66d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    66dc:	f897 2020 	ldrb.w	r2, [r7, #32]
    66e0:	697b      	ldr	r3, [r7, #20]
    66e2:	9300      	str	r3, [sp, #0]
    66e4:	4613      	mov	r3, r2
    66e6:	687a      	ldr	r2, [r7, #4]
    66e8:	68b9      	ldr	r1, [r7, #8]
    66ea:	68f8      	ldr	r0, [r7, #12]
    66ec:	f000 f805 	bl	66fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    66f0:	697b      	ldr	r3, [r7, #20]
	}
    66f2:	4618      	mov	r0, r3
    66f4:	3718      	adds	r7, #24
    66f6:	46bd      	mov	sp, r7
    66f8:	bd80      	pop	{r7, pc}

000066fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    66fa:	b580      	push	{r7, lr}
    66fc:	b084      	sub	sp, #16
    66fe:	af00      	add	r7, sp, #0
    6700:	60f8      	str	r0, [r7, #12]
    6702:	60b9      	str	r1, [r7, #8]
    6704:	607a      	str	r2, [r7, #4]
    6706:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    6708:	68bb      	ldr	r3, [r7, #8]
    670a:	2b00      	cmp	r3, #0
    670c:	d103      	bne.n	6716 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    670e:	69bb      	ldr	r3, [r7, #24]
    6710:	69ba      	ldr	r2, [r7, #24]
    6712:	601a      	str	r2, [r3, #0]
    6714:	e002      	b.n	671c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    6716:	69bb      	ldr	r3, [r7, #24]
    6718:	687a      	ldr	r2, [r7, #4]
    671a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    671c:	69bb      	ldr	r3, [r7, #24]
    671e:	68fa      	ldr	r2, [r7, #12]
    6720:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    6722:	69bb      	ldr	r3, [r7, #24]
    6724:	68ba      	ldr	r2, [r7, #8]
    6726:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    6728:	2101      	movs	r1, #1
    672a:	69b8      	ldr	r0, [r7, #24]
    672c:	f7ff ff6c 	bl	6608 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    6730:	69bb      	ldr	r3, [r7, #24]
    6732:	78fa      	ldrb	r2, [r7, #3]
    6734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    6738:	bf00      	nop
    673a:	3710      	adds	r7, #16
    673c:	46bd      	mov	sp, r7
    673e:	bd80      	pop	{r7, pc}

00006740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    6740:	b580      	push	{r7, lr}
    6742:	b08a      	sub	sp, #40	; 0x28
    6744:	af00      	add	r7, sp, #0
    6746:	60f8      	str	r0, [r7, #12]
    6748:	60b9      	str	r1, [r7, #8]
    674a:	607a      	str	r2, [r7, #4]
    674c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    674e:	2300      	movs	r3, #0
    6750:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6752:	68fb      	ldr	r3, [r7, #12]
    6754:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6756:	f7ff fbd5 	bl	5f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    675a:	6a3b      	ldr	r3, [r7, #32]
    675c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    675e:	6a3b      	ldr	r3, [r7, #32]
    6760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6762:	429a      	cmp	r2, r3
    6764:	d302      	bcc.n	676c <xQueueGenericSend+0x2c>
    6766:	683b      	ldr	r3, [r7, #0]
    6768:	2b02      	cmp	r3, #2
    676a:	d129      	bne.n	67c0 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    676c:	683a      	ldr	r2, [r7, #0]
    676e:	68b9      	ldr	r1, [r7, #8]
    6770:	6a38      	ldr	r0, [r7, #32]
    6772:	f000 f98b 	bl	6a8c <prvCopyDataToQueue>
    6776:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6778:	6a3b      	ldr	r3, [r7, #32]
    677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    677c:	2b00      	cmp	r3, #0
    677e:	d010      	beq.n	67a2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6780:	6a3b      	ldr	r3, [r7, #32]
    6782:	3324      	adds	r3, #36	; 0x24
    6784:	4618      	mov	r0, r3
    6786:	f7fd fa79 	bl	3c7c <xTaskRemoveFromEventList>
    678a:	4603      	mov	r3, r0
    678c:	2b00      	cmp	r3, #0
    678e:	d013      	beq.n	67b8 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    6790:	4b3f      	ldr	r3, [pc, #252]	; (6890 <xQueueGenericSend+0x150>)
    6792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6796:	601a      	str	r2, [r3, #0]
    6798:	f3bf 8f4f 	dsb	sy
    679c:	f3bf 8f6f 	isb	sy
    67a0:	e00a      	b.n	67b8 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    67a2:	69fb      	ldr	r3, [r7, #28]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d007      	beq.n	67b8 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    67a8:	4b39      	ldr	r3, [pc, #228]	; (6890 <xQueueGenericSend+0x150>)
    67aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    67ae:	601a      	str	r2, [r3, #0]
    67b0:	f3bf 8f4f 	dsb	sy
    67b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    67b8:	f7ff fbbe 	bl	5f38 <vPortExitCritical>
				return pdPASS;
    67bc:	2301      	movs	r3, #1
    67be:	e063      	b.n	6888 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	2b00      	cmp	r3, #0
    67c4:	d103      	bne.n	67ce <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    67c6:	f7ff fbb7 	bl	5f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    67ca:	2300      	movs	r3, #0
    67cc:	e05c      	b.n	6888 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    67ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67d0:	2b00      	cmp	r3, #0
    67d2:	d106      	bne.n	67e2 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    67d4:	f107 0314 	add.w	r3, r7, #20
    67d8:	4618      	mov	r0, r3
    67da:	f7fd faa3 	bl	3d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    67de:	2301      	movs	r3, #1
    67e0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    67e2:	f7ff fba9 	bl	5f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    67e6:	f7fd f85b 	bl	38a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    67ea:	f7ff fb8b 	bl	5f04 <vPortEnterCritical>
    67ee:	6a3b      	ldr	r3, [r7, #32]
    67f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    67f4:	b25b      	sxtb	r3, r3
    67f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    67fa:	d103      	bne.n	6804 <xQueueGenericSend+0xc4>
    67fc:	6a3b      	ldr	r3, [r7, #32]
    67fe:	2200      	movs	r2, #0
    6800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6804:	6a3b      	ldr	r3, [r7, #32]
    6806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    680a:	b25b      	sxtb	r3, r3
    680c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6810:	d103      	bne.n	681a <xQueueGenericSend+0xda>
    6812:	6a3b      	ldr	r3, [r7, #32]
    6814:	2200      	movs	r2, #0
    6816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    681a:	f7ff fb8d 	bl	5f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    681e:	1d3a      	adds	r2, r7, #4
    6820:	f107 0314 	add.w	r3, r7, #20
    6824:	4611      	mov	r1, r2
    6826:	4618      	mov	r0, r3
    6828:	f7fd fa92 	bl	3d50 <xTaskCheckForTimeOut>
    682c:	4603      	mov	r3, r0
    682e:	2b00      	cmp	r3, #0
    6830:	d124      	bne.n	687c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6832:	6a38      	ldr	r0, [r7, #32]
    6834:	f000 fa22 	bl	6c7c <prvIsQueueFull>
    6838:	4603      	mov	r3, r0
    683a:	2b00      	cmp	r3, #0
    683c:	d018      	beq.n	6870 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    683e:	6a3b      	ldr	r3, [r7, #32]
    6840:	3310      	adds	r3, #16
    6842:	687a      	ldr	r2, [r7, #4]
    6844:	4611      	mov	r1, r2
    6846:	4618      	mov	r0, r3
    6848:	f7fd f9e4 	bl	3c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    684c:	6a38      	ldr	r0, [r7, #32]
    684e:	f000 f9ad 	bl	6bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    6852:	f7fd f833 	bl	38bc <xTaskResumeAll>
    6856:	4603      	mov	r3, r0
    6858:	2b00      	cmp	r3, #0
    685a:	f47f af7c 	bne.w	6756 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    685e:	4b0c      	ldr	r3, [pc, #48]	; (6890 <xQueueGenericSend+0x150>)
    6860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6864:	601a      	str	r2, [r3, #0]
    6866:	f3bf 8f4f 	dsb	sy
    686a:	f3bf 8f6f 	isb	sy
    686e:	e772      	b.n	6756 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6870:	6a38      	ldr	r0, [r7, #32]
    6872:	f000 f99b 	bl	6bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6876:	f7fd f821 	bl	38bc <xTaskResumeAll>
    687a:	e76c      	b.n	6756 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    687c:	6a38      	ldr	r0, [r7, #32]
    687e:	f000 f995 	bl	6bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6882:	f7fd f81b 	bl	38bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    6886:	2300      	movs	r3, #0
		}
	}
}
    6888:	4618      	mov	r0, r3
    688a:	3728      	adds	r7, #40	; 0x28
    688c:	46bd      	mov	sp, r7
    688e:	bd80      	pop	{r7, pc}
    6890:	e000ed04 	.word	0xe000ed04

00006894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    6894:	b580      	push	{r7, lr}
    6896:	b08c      	sub	sp, #48	; 0x30
    6898:	af00      	add	r7, sp, #0
    689a:	60f8      	str	r0, [r7, #12]
    689c:	60b9      	str	r1, [r7, #8]
    689e:	607a      	str	r2, [r7, #4]
    68a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    68a2:	68fb      	ldr	r3, [r7, #12]
    68a4:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
    68a6:	f3ef 8211 	mrs	r2, BASEPRI
    68aa:	f04f 0328 	mov.w	r3, #40	; 0x28
    68ae:	f383 8811 	msr	BASEPRI, r3
    68b2:	f3bf 8f6f 	isb	sy
    68b6:	f3bf 8f4f 	dsb	sy
    68ba:	61fa      	str	r2, [r7, #28]
    68bc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    68be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    68c0:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    68c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    68c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    68c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    68c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    68ca:	429a      	cmp	r2, r3
    68cc:	d302      	bcc.n	68d4 <xQueueGenericSendFromISR+0x40>
    68ce:	683b      	ldr	r3, [r7, #0]
    68d0:	2b02      	cmp	r3, #2
    68d2:	d12c      	bne.n	692e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    68d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    68d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    68da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    68de:	683a      	ldr	r2, [r7, #0]
    68e0:	68b9      	ldr	r1, [r7, #8]
    68e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    68e4:	f000 f8d2 	bl	6a8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    68e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    68ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    68f0:	d112      	bne.n	6918 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    68f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    68f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68f6:	2b00      	cmp	r3, #0
    68f8:	d016      	beq.n	6928 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    68fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    68fc:	3324      	adds	r3, #36	; 0x24
    68fe:	4618      	mov	r0, r3
    6900:	f7fd f9bc 	bl	3c7c <xTaskRemoveFromEventList>
    6904:	4603      	mov	r3, r0
    6906:	2b00      	cmp	r3, #0
    6908:	d00e      	beq.n	6928 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	2b00      	cmp	r3, #0
    690e:	d00b      	beq.n	6928 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	2201      	movs	r2, #1
    6914:	601a      	str	r2, [r3, #0]
    6916:	e007      	b.n	6928 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    6918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    691c:	3301      	adds	r3, #1
    691e:	b2db      	uxtb	r3, r3
    6920:	b25a      	sxtb	r2, r3
    6922:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    6928:	2301      	movs	r3, #1
    692a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    692c:	e001      	b.n	6932 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    692e:	2300      	movs	r3, #0
    6930:	62fb      	str	r3, [r7, #44]	; 0x2c
    6932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6934:	617b      	str	r3, [r7, #20]
	__asm volatile
    6936:	697b      	ldr	r3, [r7, #20]
    6938:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    693e:	4618      	mov	r0, r3
    6940:	3730      	adds	r7, #48	; 0x30
    6942:	46bd      	mov	sp, r7
    6944:	bd80      	pop	{r7, pc}
    6946:	Address 0x0000000000006946 is out of bounds.


00006948 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    6948:	b580      	push	{r7, lr}
    694a:	b08a      	sub	sp, #40	; 0x28
    694c:	af00      	add	r7, sp, #0
    694e:	60f8      	str	r0, [r7, #12]
    6950:	60b9      	str	r1, [r7, #8]
    6952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    6954:	2300      	movs	r3, #0
    6956:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6958:	68fb      	ldr	r3, [r7, #12]
    695a:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    695c:	f7ff fad2 	bl	5f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6960:	6a3b      	ldr	r3, [r7, #32]
    6962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6964:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6966:	69fb      	ldr	r3, [r7, #28]
    6968:	2b00      	cmp	r3, #0
    696a:	d01f      	beq.n	69ac <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    696c:	68b9      	ldr	r1, [r7, #8]
    696e:	6a38      	ldr	r0, [r7, #32]
    6970:	f000 f8f6 	bl	6b60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    6974:	69fb      	ldr	r3, [r7, #28]
    6976:	1e5a      	subs	r2, r3, #1
    6978:	6a3b      	ldr	r3, [r7, #32]
    697a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    697c:	6a3b      	ldr	r3, [r7, #32]
    697e:	691b      	ldr	r3, [r3, #16]
    6980:	2b00      	cmp	r3, #0
    6982:	d00f      	beq.n	69a4 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6984:	6a3b      	ldr	r3, [r7, #32]
    6986:	3310      	adds	r3, #16
    6988:	4618      	mov	r0, r3
    698a:	f7fd f977 	bl	3c7c <xTaskRemoveFromEventList>
    698e:	4603      	mov	r3, r0
    6990:	2b00      	cmp	r3, #0
    6992:	d007      	beq.n	69a4 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    6994:	4b3c      	ldr	r3, [pc, #240]	; (6a88 <xQueueReceive+0x140>)
    6996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    699a:	601a      	str	r2, [r3, #0]
    699c:	f3bf 8f4f 	dsb	sy
    69a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    69a4:	f7ff fac8 	bl	5f38 <vPortExitCritical>
				return pdPASS;
    69a8:	2301      	movs	r3, #1
    69aa:	e069      	b.n	6a80 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    69ac:	687b      	ldr	r3, [r7, #4]
    69ae:	2b00      	cmp	r3, #0
    69b0:	d103      	bne.n	69ba <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    69b2:	f7ff fac1 	bl	5f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    69b6:	2300      	movs	r3, #0
    69b8:	e062      	b.n	6a80 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    69ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    69bc:	2b00      	cmp	r3, #0
    69be:	d106      	bne.n	69ce <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    69c0:	f107 0314 	add.w	r3, r7, #20
    69c4:	4618      	mov	r0, r3
    69c6:	f7fd f9ad 	bl	3d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    69ca:	2301      	movs	r3, #1
    69cc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    69ce:	f7ff fab3 	bl	5f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    69d2:	f7fc ff65 	bl	38a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    69d6:	f7ff fa95 	bl	5f04 <vPortEnterCritical>
    69da:	6a3b      	ldr	r3, [r7, #32]
    69dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    69e0:	b25b      	sxtb	r3, r3
    69e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    69e6:	d103      	bne.n	69f0 <xQueueReceive+0xa8>
    69e8:	6a3b      	ldr	r3, [r7, #32]
    69ea:	2200      	movs	r2, #0
    69ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    69f0:	6a3b      	ldr	r3, [r7, #32]
    69f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    69f6:	b25b      	sxtb	r3, r3
    69f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    69fc:	d103      	bne.n	6a06 <xQueueReceive+0xbe>
    69fe:	6a3b      	ldr	r3, [r7, #32]
    6a00:	2200      	movs	r2, #0
    6a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    6a06:	f7ff fa97 	bl	5f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6a0a:	1d3a      	adds	r2, r7, #4
    6a0c:	f107 0314 	add.w	r3, r7, #20
    6a10:	4611      	mov	r1, r2
    6a12:	4618      	mov	r0, r3
    6a14:	f7fd f99c 	bl	3d50 <xTaskCheckForTimeOut>
    6a18:	4603      	mov	r3, r0
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d123      	bne.n	6a66 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6a1e:	6a38      	ldr	r0, [r7, #32]
    6a20:	f000 f916 	bl	6c50 <prvIsQueueEmpty>
    6a24:	4603      	mov	r3, r0
    6a26:	2b00      	cmp	r3, #0
    6a28:	d017      	beq.n	6a5a <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6a2a:	6a3b      	ldr	r3, [r7, #32]
    6a2c:	3324      	adds	r3, #36	; 0x24
    6a2e:	687a      	ldr	r2, [r7, #4]
    6a30:	4611      	mov	r1, r2
    6a32:	4618      	mov	r0, r3
    6a34:	f7fd f8ee 	bl	3c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    6a38:	6a38      	ldr	r0, [r7, #32]
    6a3a:	f000 f8b7 	bl	6bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    6a3e:	f7fc ff3d 	bl	38bc <xTaskResumeAll>
    6a42:	4603      	mov	r3, r0
    6a44:	2b00      	cmp	r3, #0
    6a46:	d189      	bne.n	695c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    6a48:	4b0f      	ldr	r3, [pc, #60]	; (6a88 <xQueueReceive+0x140>)
    6a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6a4e:	601a      	str	r2, [r3, #0]
    6a50:	f3bf 8f4f 	dsb	sy
    6a54:	f3bf 8f6f 	isb	sy
    6a58:	e780      	b.n	695c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    6a5a:	6a38      	ldr	r0, [r7, #32]
    6a5c:	f000 f8a6 	bl	6bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6a60:	f7fc ff2c 	bl	38bc <xTaskResumeAll>
    6a64:	e77a      	b.n	695c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    6a66:	6a38      	ldr	r0, [r7, #32]
    6a68:	f000 f8a0 	bl	6bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6a6c:	f7fc ff26 	bl	38bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6a70:	6a38      	ldr	r0, [r7, #32]
    6a72:	f000 f8ed 	bl	6c50 <prvIsQueueEmpty>
    6a76:	4603      	mov	r3, r0
    6a78:	2b00      	cmp	r3, #0
    6a7a:	f43f af6f 	beq.w	695c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    6a7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6a80:	4618      	mov	r0, r3
    6a82:	3728      	adds	r7, #40	; 0x28
    6a84:	46bd      	mov	sp, r7
    6a86:	bd80      	pop	{r7, pc}
    6a88:	e000ed04 	.word	0xe000ed04

00006a8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b086      	sub	sp, #24
    6a90:	af00      	add	r7, sp, #0
    6a92:	60f8      	str	r0, [r7, #12]
    6a94:	60b9      	str	r1, [r7, #8]
    6a96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    6a98:	2300      	movs	r3, #0
    6a9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6a9c:	68fb      	ldr	r3, [r7, #12]
    6a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6aa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    6aa2:	68fb      	ldr	r3, [r7, #12]
    6aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d10d      	bne.n	6ac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    6aaa:	68fb      	ldr	r3, [r7, #12]
    6aac:	681b      	ldr	r3, [r3, #0]
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d14d      	bne.n	6b4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    6ab2:	68fb      	ldr	r3, [r7, #12]
    6ab4:	685b      	ldr	r3, [r3, #4]
    6ab6:	4618      	mov	r0, r3
    6ab8:	f7fd fa72 	bl	3fa0 <xTaskPriorityDisinherit>
    6abc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    6abe:	68fb      	ldr	r3, [r7, #12]
    6ac0:	2200      	movs	r2, #0
    6ac2:	605a      	str	r2, [r3, #4]
    6ac4:	e043      	b.n	6b4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d119      	bne.n	6b00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    6acc:	68fb      	ldr	r3, [r7, #12]
    6ace:	6898      	ldr	r0, [r3, #8]
    6ad0:	68fb      	ldr	r3, [r7, #12]
    6ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6ad4:	461a      	mov	r2, r3
    6ad6:	68b9      	ldr	r1, [r7, #8]
    6ad8:	f001 fdee 	bl	86b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    6adc:	68fb      	ldr	r3, [r7, #12]
    6ade:	689a      	ldr	r2, [r3, #8]
    6ae0:	68fb      	ldr	r3, [r7, #12]
    6ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6ae4:	441a      	add	r2, r3
    6ae6:	68fb      	ldr	r3, [r7, #12]
    6ae8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6aea:	68fb      	ldr	r3, [r7, #12]
    6aec:	689a      	ldr	r2, [r3, #8]
    6aee:	68fb      	ldr	r3, [r7, #12]
    6af0:	685b      	ldr	r3, [r3, #4]
    6af2:	429a      	cmp	r2, r3
    6af4:	d32b      	bcc.n	6b4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    6af6:	68fb      	ldr	r3, [r7, #12]
    6af8:	681a      	ldr	r2, [r3, #0]
    6afa:	68fb      	ldr	r3, [r7, #12]
    6afc:	609a      	str	r2, [r3, #8]
    6afe:	e026      	b.n	6b4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	68d8      	ldr	r0, [r3, #12]
    6b04:	68fb      	ldr	r3, [r7, #12]
    6b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b08:	461a      	mov	r2, r3
    6b0a:	68b9      	ldr	r1, [r7, #8]
    6b0c:	f001 fdd4 	bl	86b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    6b10:	68fb      	ldr	r3, [r7, #12]
    6b12:	68da      	ldr	r2, [r3, #12]
    6b14:	68fb      	ldr	r3, [r7, #12]
    6b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b18:	425b      	negs	r3, r3
    6b1a:	441a      	add	r2, r3
    6b1c:	68fb      	ldr	r3, [r7, #12]
    6b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6b20:	68fb      	ldr	r3, [r7, #12]
    6b22:	68da      	ldr	r2, [r3, #12]
    6b24:	68fb      	ldr	r3, [r7, #12]
    6b26:	681b      	ldr	r3, [r3, #0]
    6b28:	429a      	cmp	r2, r3
    6b2a:	d207      	bcs.n	6b3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    6b2c:	68fb      	ldr	r3, [r7, #12]
    6b2e:	685a      	ldr	r2, [r3, #4]
    6b30:	68fb      	ldr	r3, [r7, #12]
    6b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b34:	425b      	negs	r3, r3
    6b36:	441a      	add	r2, r3
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	2b02      	cmp	r3, #2
    6b40:	d105      	bne.n	6b4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6b42:	693b      	ldr	r3, [r7, #16]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d002      	beq.n	6b4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    6b48:	693b      	ldr	r3, [r7, #16]
    6b4a:	3b01      	subs	r3, #1
    6b4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    6b4e:	693b      	ldr	r3, [r7, #16]
    6b50:	1c5a      	adds	r2, r3, #1
    6b52:	68fb      	ldr	r3, [r7, #12]
    6b54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    6b56:	697b      	ldr	r3, [r7, #20]
}
    6b58:	4618      	mov	r0, r3
    6b5a:	3718      	adds	r7, #24
    6b5c:	46bd      	mov	sp, r7
    6b5e:	bd80      	pop	{r7, pc}

00006b60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    6b60:	b580      	push	{r7, lr}
    6b62:	b082      	sub	sp, #8
    6b64:	af00      	add	r7, sp, #0
    6b66:	6078      	str	r0, [r7, #4]
    6b68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d018      	beq.n	6ba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    6b72:	687b      	ldr	r3, [r7, #4]
    6b74:	68da      	ldr	r2, [r3, #12]
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b7a:	441a      	add	r2, r3
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	68da      	ldr	r2, [r3, #12]
    6b84:	687b      	ldr	r3, [r7, #4]
    6b86:	685b      	ldr	r3, [r3, #4]
    6b88:	429a      	cmp	r2, r3
    6b8a:	d303      	bcc.n	6b94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    6b8c:	687b      	ldr	r3, [r7, #4]
    6b8e:	681a      	ldr	r2, [r3, #0]
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	68d9      	ldr	r1, [r3, #12]
    6b98:	687b      	ldr	r3, [r7, #4]
    6b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b9c:	461a      	mov	r2, r3
    6b9e:	6838      	ldr	r0, [r7, #0]
    6ba0:	f001 fd8a 	bl	86b8 <memcpy>
	}
}
    6ba4:	bf00      	nop
    6ba6:	3708      	adds	r7, #8
    6ba8:	46bd      	mov	sp, r7
    6baa:	bd80      	pop	{r7, pc}

00006bac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b084      	sub	sp, #16
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    6bb4:	f7ff f9a6 	bl	5f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    6bbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6bc0:	e011      	b.n	6be6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d012      	beq.n	6bf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	3324      	adds	r3, #36	; 0x24
    6bce:	4618      	mov	r0, r3
    6bd0:	f7fd f854 	bl	3c7c <xTaskRemoveFromEventList>
    6bd4:	4603      	mov	r3, r0
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d001      	beq.n	6bde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    6bda:	f7fd f8ff 	bl	3ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    6bde:	7bfb      	ldrb	r3, [r7, #15]
    6be0:	3b01      	subs	r3, #1
    6be2:	b2db      	uxtb	r3, r3
    6be4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6bea:	2b00      	cmp	r3, #0
    6bec:	dce9      	bgt.n	6bc2 <prvUnlockQueue+0x16>
    6bee:	e000      	b.n	6bf2 <prvUnlockQueue+0x46>
					break;
    6bf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	22ff      	movs	r2, #255	; 0xff
    6bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    6bfa:	f7ff f99d 	bl	5f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    6bfe:	f7ff f981 	bl	5f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    6c02:	687b      	ldr	r3, [r7, #4]
    6c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6c08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    6c0a:	e011      	b.n	6c30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	691b      	ldr	r3, [r3, #16]
    6c10:	2b00      	cmp	r3, #0
    6c12:	d012      	beq.n	6c3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	3310      	adds	r3, #16
    6c18:	4618      	mov	r0, r3
    6c1a:	f7fd f82f 	bl	3c7c <xTaskRemoveFromEventList>
    6c1e:	4603      	mov	r3, r0
    6c20:	2b00      	cmp	r3, #0
    6c22:	d001      	beq.n	6c28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    6c24:	f7fd f8da 	bl	3ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    6c28:	7bbb      	ldrb	r3, [r7, #14]
    6c2a:	3b01      	subs	r3, #1
    6c2c:	b2db      	uxtb	r3, r3
    6c2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    6c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
    6c34:	2b00      	cmp	r3, #0
    6c36:	dce9      	bgt.n	6c0c <prvUnlockQueue+0x60>
    6c38:	e000      	b.n	6c3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    6c3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	22ff      	movs	r2, #255	; 0xff
    6c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    6c44:	f7ff f978 	bl	5f38 <vPortExitCritical>
}
    6c48:	bf00      	nop
    6c4a:	3710      	adds	r7, #16
    6c4c:	46bd      	mov	sp, r7
    6c4e:	bd80      	pop	{r7, pc}

00006c50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    6c50:	b580      	push	{r7, lr}
    6c52:	b084      	sub	sp, #16
    6c54:	af00      	add	r7, sp, #0
    6c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6c58:	f7ff f954 	bl	5f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    6c5c:	687b      	ldr	r3, [r7, #4]
    6c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6c60:	2b00      	cmp	r3, #0
    6c62:	d102      	bne.n	6c6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    6c64:	2301      	movs	r3, #1
    6c66:	60fb      	str	r3, [r7, #12]
    6c68:	e001      	b.n	6c6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    6c6a:	2300      	movs	r3, #0
    6c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    6c6e:	f7ff f963 	bl	5f38 <vPortExitCritical>

	return xReturn;
    6c72:	68fb      	ldr	r3, [r7, #12]
}
    6c74:	4618      	mov	r0, r3
    6c76:	3710      	adds	r7, #16
    6c78:	46bd      	mov	sp, r7
    6c7a:	bd80      	pop	{r7, pc}

00006c7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    6c7c:	b580      	push	{r7, lr}
    6c7e:	b084      	sub	sp, #16
    6c80:	af00      	add	r7, sp, #0
    6c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6c84:	f7ff f93e 	bl	5f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6c90:	429a      	cmp	r2, r3
    6c92:	d102      	bne.n	6c9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    6c94:	2301      	movs	r3, #1
    6c96:	60fb      	str	r3, [r7, #12]
    6c98:	e001      	b.n	6c9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    6c9a:	2300      	movs	r3, #0
    6c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    6c9e:	f7ff f94b 	bl	5f38 <vPortExitCritical>

	return xReturn;
    6ca2:	68fb      	ldr	r3, [r7, #12]
}
    6ca4:	4618      	mov	r0, r3
    6ca6:	3710      	adds	r7, #16
    6ca8:	46bd      	mov	sp, r7
    6caa:	bd80      	pop	{r7, pc}

00006cac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    6cac:	b480      	push	{r7}
    6cae:	b085      	sub	sp, #20
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
    6cb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    6cb6:	2300      	movs	r3, #0
    6cb8:	60fb      	str	r3, [r7, #12]
    6cba:	e014      	b.n	6ce6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    6cbc:	4a0e      	ldr	r2, [pc, #56]	; (6cf8 <vQueueAddToRegistry+0x4c>)
    6cbe:	68fb      	ldr	r3, [r7, #12]
    6cc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	d10b      	bne.n	6ce0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    6cc8:	490b      	ldr	r1, [pc, #44]	; (6cf8 <vQueueAddToRegistry+0x4c>)
    6cca:	68fb      	ldr	r3, [r7, #12]
    6ccc:	683a      	ldr	r2, [r7, #0]
    6cce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    6cd2:	4a09      	ldr	r2, [pc, #36]	; (6cf8 <vQueueAddToRegistry+0x4c>)
    6cd4:	68fb      	ldr	r3, [r7, #12]
    6cd6:	00db      	lsls	r3, r3, #3
    6cd8:	4413      	add	r3, r2
    6cda:	687a      	ldr	r2, [r7, #4]
    6cdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    6cde:	e005      	b.n	6cec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    6ce0:	68fb      	ldr	r3, [r7, #12]
    6ce2:	3301      	adds	r3, #1
    6ce4:	60fb      	str	r3, [r7, #12]
    6ce6:	68fb      	ldr	r3, [r7, #12]
    6ce8:	2b09      	cmp	r3, #9
    6cea:	d9e7      	bls.n	6cbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    6cec:	bf00      	nop
    6cee:	3714      	adds	r7, #20
    6cf0:	46bd      	mov	sp, r7
    6cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cf6:	4770      	bx	lr
    6cf8:	10000fe4 	.word	0x10000fe4

00006cfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b086      	sub	sp, #24
    6d00:	af00      	add	r7, sp, #0
    6d02:	60f8      	str	r0, [r7, #12]
    6d04:	60b9      	str	r1, [r7, #8]
    6d06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6d08:	68fb      	ldr	r3, [r7, #12]
    6d0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    6d0c:	f7ff f8fa 	bl	5f04 <vPortEnterCritical>
    6d10:	697b      	ldr	r3, [r7, #20]
    6d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6d16:	b25b      	sxtb	r3, r3
    6d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6d1c:	d103      	bne.n	6d26 <vQueueWaitForMessageRestricted+0x2a>
    6d1e:	697b      	ldr	r3, [r7, #20]
    6d20:	2200      	movs	r2, #0
    6d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6d26:	697b      	ldr	r3, [r7, #20]
    6d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    6d2c:	b25b      	sxtb	r3, r3
    6d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6d32:	d103      	bne.n	6d3c <vQueueWaitForMessageRestricted+0x40>
    6d34:	697b      	ldr	r3, [r7, #20]
    6d36:	2200      	movs	r2, #0
    6d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    6d3c:	f7ff f8fc 	bl	5f38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    6d40:	697b      	ldr	r3, [r7, #20]
    6d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6d44:	2b00      	cmp	r3, #0
    6d46:	d106      	bne.n	6d56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    6d48:	697b      	ldr	r3, [r7, #20]
    6d4a:	3324      	adds	r3, #36	; 0x24
    6d4c:	687a      	ldr	r2, [r7, #4]
    6d4e:	68b9      	ldr	r1, [r7, #8]
    6d50:	4618      	mov	r0, r3
    6d52:	f7fc ff75 	bl	3c40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    6d56:	6978      	ldr	r0, [r7, #20]
    6d58:	f7ff ff28 	bl	6bac <prvUnlockQueue>
	}
    6d5c:	bf00      	nop
    6d5e:	3718      	adds	r7, #24
    6d60:	46bd      	mov	sp, r7
    6d62:	bd80      	pop	{r7, pc}

00006d64 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6d64:	b480      	push	{r7}
    6d66:	b083      	sub	sp, #12
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
    6d6c:	6039      	str	r1, [r7, #0]
  return 1;
    6d6e:	2301      	movs	r3, #1
}
    6d70:	4618      	mov	r0, r3
    6d72:	370c      	adds	r7, #12
    6d74:	46bd      	mov	sp, r7
    6d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d7a:	4770      	bx	lr

00006d7c <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6d7c:	b480      	push	{r7}
    6d7e:	b083      	sub	sp, #12
    6d80:	af00      	add	r7, sp, #0
    6d82:	6078      	str	r0, [r7, #4]
    6d84:	6039      	str	r1, [r7, #0]
  return 0;
    6d86:	2300      	movs	r3, #0
}
    6d88:	4618      	mov	r0, r3
    6d8a:	370c      	adds	r7, #12
    6d8c:	46bd      	mov	sp, r7
    6d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d92:	4770      	bx	lr

00006d94 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6d94:	b480      	push	{r7}
    6d96:	b083      	sub	sp, #12
    6d98:	af00      	add	r7, sp, #0
    6d9a:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    6d9c:	4a04      	ldr	r2, [pc, #16]	; (6db0 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	6013      	str	r3, [r2, #0]
}
    6da2:	bf00      	nop
    6da4:	370c      	adds	r7, #12
    6da6:	46bd      	mov	sp, r7
    6da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dac:	4770      	bx	lr
    6dae:	bf00      	nop
    6db0:	1000005c 	.word	0x1000005c

00006db4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    6db4:	b480      	push	{r7}
    6db6:	b083      	sub	sp, #12
    6db8:	af00      	add	r7, sp, #0
    6dba:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    6dbc:	4a04      	ldr	r2, [pc, #16]	; (6dd0 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	6013      	str	r3, [r2, #0]
}
    6dc2:	bf00      	nop
    6dc4:	370c      	adds	r7, #12
    6dc6:	46bd      	mov	sp, r7
    6dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dcc:	4770      	bx	lr
    6dce:	bf00      	nop
    6dd0:	10000060 	.word	0x10000060

00006dd4 <__cxa_pure_virtual>:
    6dd4:	b508      	push	{r3, lr}
    6dd6:	f000 f80d 	bl	6df4 <std::terminate()>

00006dda <__cxxabiv1::__terminate(void (*)())>:
    6dda:	b508      	push	{r3, lr}
    6ddc:	4780      	blx	r0
    6dde:	f001 fc2f 	bl	8640 <abort>
    6de2:	Address 0x0000000000006de2 is out of bounds.


00006de4 <std::get_terminate()>:
    6de4:	4b02      	ldr	r3, [pc, #8]	; (6df0 <std::get_terminate()+0xc>)
    6de6:	6818      	ldr	r0, [r3, #0]
    6de8:	f3bf 8f5b 	dmb	ish
    6dec:	4770      	bx	lr
    6dee:	bf00      	nop
    6df0:	10000090 	.word	0x10000090

00006df4 <std::terminate()>:
    6df4:	b508      	push	{r3, lr}
    6df6:	f7ff fff5 	bl	6de4 <std::get_terminate()>
    6dfa:	f7ff ffee 	bl	6dda <__cxxabiv1::__terminate(void (*)())>
    6dfe:	Address 0x0000000000006dfe is out of bounds.


00006e00 <__aeabi_drsub>:
    6e00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    6e04:	e002      	b.n	6e0c <__adddf3>
    6e06:	bf00      	nop

00006e08 <__aeabi_dsub>:
    6e08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00006e0c <__adddf3>:
    6e0c:	b530      	push	{r4, r5, lr}
    6e0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    6e12:	ea4f 0543 	mov.w	r5, r3, lsl #1
    6e16:	ea94 0f05 	teq	r4, r5
    6e1a:	bf08      	it	eq
    6e1c:	ea90 0f02 	teqeq	r0, r2
    6e20:	bf1f      	itttt	ne
    6e22:	ea54 0c00 	orrsne.w	ip, r4, r0
    6e26:	ea55 0c02 	orrsne.w	ip, r5, r2
    6e2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    6e2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6e32:	f000 80e2 	beq.w	6ffa <__adddf3+0x1ee>
    6e36:	ea4f 5454 	mov.w	r4, r4, lsr #21
    6e3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    6e3e:	bfb8      	it	lt
    6e40:	426d      	neglt	r5, r5
    6e42:	dd0c      	ble.n	6e5e <__adddf3+0x52>
    6e44:	442c      	add	r4, r5
    6e46:	ea80 0202 	eor.w	r2, r0, r2
    6e4a:	ea81 0303 	eor.w	r3, r1, r3
    6e4e:	ea82 0000 	eor.w	r0, r2, r0
    6e52:	ea83 0101 	eor.w	r1, r3, r1
    6e56:	ea80 0202 	eor.w	r2, r0, r2
    6e5a:	ea81 0303 	eor.w	r3, r1, r3
    6e5e:	2d36      	cmp	r5, #54	; 0x36
    6e60:	bf88      	it	hi
    6e62:	bd30      	pophi	{r4, r5, pc}
    6e64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6e68:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6e6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6e70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6e74:	d002      	beq.n	6e7c <__adddf3+0x70>
    6e76:	4240      	negs	r0, r0
    6e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6e7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6e80:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6e84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6e88:	d002      	beq.n	6e90 <__adddf3+0x84>
    6e8a:	4252      	negs	r2, r2
    6e8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6e90:	ea94 0f05 	teq	r4, r5
    6e94:	f000 80a7 	beq.w	6fe6 <__adddf3+0x1da>
    6e98:	f1a4 0401 	sub.w	r4, r4, #1
    6e9c:	f1d5 0e20 	rsbs	lr, r5, #32
    6ea0:	db0d      	blt.n	6ebe <__adddf3+0xb2>
    6ea2:	fa02 fc0e 	lsl.w	ip, r2, lr
    6ea6:	fa22 f205 	lsr.w	r2, r2, r5
    6eaa:	1880      	adds	r0, r0, r2
    6eac:	f141 0100 	adc.w	r1, r1, #0
    6eb0:	fa03 f20e 	lsl.w	r2, r3, lr
    6eb4:	1880      	adds	r0, r0, r2
    6eb6:	fa43 f305 	asr.w	r3, r3, r5
    6eba:	4159      	adcs	r1, r3
    6ebc:	e00e      	b.n	6edc <__adddf3+0xd0>
    6ebe:	f1a5 0520 	sub.w	r5, r5, #32
    6ec2:	f10e 0e20 	add.w	lr, lr, #32
    6ec6:	2a01      	cmp	r2, #1
    6ec8:	fa03 fc0e 	lsl.w	ip, r3, lr
    6ecc:	bf28      	it	cs
    6ece:	f04c 0c02 	orrcs.w	ip, ip, #2
    6ed2:	fa43 f305 	asr.w	r3, r3, r5
    6ed6:	18c0      	adds	r0, r0, r3
    6ed8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    6edc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6ee0:	d507      	bpl.n	6ef2 <__adddf3+0xe6>
    6ee2:	f04f 0e00 	mov.w	lr, #0
    6ee6:	f1dc 0c00 	rsbs	ip, ip, #0
    6eea:	eb7e 0000 	sbcs.w	r0, lr, r0
    6eee:	eb6e 0101 	sbc.w	r1, lr, r1
    6ef2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    6ef6:	d31b      	bcc.n	6f30 <__adddf3+0x124>
    6ef8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    6efc:	d30c      	bcc.n	6f18 <__adddf3+0x10c>
    6efe:	0849      	lsrs	r1, r1, #1
    6f00:	ea5f 0030 	movs.w	r0, r0, rrx
    6f04:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6f08:	f104 0401 	add.w	r4, r4, #1
    6f0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    6f10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    6f14:	f080 809a 	bcs.w	704c <__adddf3+0x240>
    6f18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6f1c:	bf08      	it	eq
    6f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6f22:	f150 0000 	adcs.w	r0, r0, #0
    6f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6f2a:	ea41 0105 	orr.w	r1, r1, r5
    6f2e:	bd30      	pop	{r4, r5, pc}
    6f30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    6f34:	4140      	adcs	r0, r0
    6f36:	eb41 0101 	adc.w	r1, r1, r1
    6f3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6f3e:	f1a4 0401 	sub.w	r4, r4, #1
    6f42:	d1e9      	bne.n	6f18 <__adddf3+0x10c>
    6f44:	f091 0f00 	teq	r1, #0
    6f48:	bf04      	itt	eq
    6f4a:	4601      	moveq	r1, r0
    6f4c:	2000      	moveq	r0, #0
    6f4e:	fab1 f381 	clz	r3, r1
    6f52:	bf08      	it	eq
    6f54:	3320      	addeq	r3, #32
    6f56:	f1a3 030b 	sub.w	r3, r3, #11
    6f5a:	f1b3 0220 	subs.w	r2, r3, #32
    6f5e:	da0c      	bge.n	6f7a <__adddf3+0x16e>
    6f60:	320c      	adds	r2, #12
    6f62:	dd08      	ble.n	6f76 <__adddf3+0x16a>
    6f64:	f102 0c14 	add.w	ip, r2, #20
    6f68:	f1c2 020c 	rsb	r2, r2, #12
    6f6c:	fa01 f00c 	lsl.w	r0, r1, ip
    6f70:	fa21 f102 	lsr.w	r1, r1, r2
    6f74:	e00c      	b.n	6f90 <__adddf3+0x184>
    6f76:	f102 0214 	add.w	r2, r2, #20
    6f7a:	bfd8      	it	le
    6f7c:	f1c2 0c20 	rsble	ip, r2, #32
    6f80:	fa01 f102 	lsl.w	r1, r1, r2
    6f84:	fa20 fc0c 	lsr.w	ip, r0, ip
    6f88:	bfdc      	itt	le
    6f8a:	ea41 010c 	orrle.w	r1, r1, ip
    6f8e:	4090      	lslle	r0, r2
    6f90:	1ae4      	subs	r4, r4, r3
    6f92:	bfa2      	ittt	ge
    6f94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6f98:	4329      	orrge	r1, r5
    6f9a:	bd30      	popge	{r4, r5, pc}
    6f9c:	ea6f 0404 	mvn.w	r4, r4
    6fa0:	3c1f      	subs	r4, #31
    6fa2:	da1c      	bge.n	6fde <__adddf3+0x1d2>
    6fa4:	340c      	adds	r4, #12
    6fa6:	dc0e      	bgt.n	6fc6 <__adddf3+0x1ba>
    6fa8:	f104 0414 	add.w	r4, r4, #20
    6fac:	f1c4 0220 	rsb	r2, r4, #32
    6fb0:	fa20 f004 	lsr.w	r0, r0, r4
    6fb4:	fa01 f302 	lsl.w	r3, r1, r2
    6fb8:	ea40 0003 	orr.w	r0, r0, r3
    6fbc:	fa21 f304 	lsr.w	r3, r1, r4
    6fc0:	ea45 0103 	orr.w	r1, r5, r3
    6fc4:	bd30      	pop	{r4, r5, pc}
    6fc6:	f1c4 040c 	rsb	r4, r4, #12
    6fca:	f1c4 0220 	rsb	r2, r4, #32
    6fce:	fa20 f002 	lsr.w	r0, r0, r2
    6fd2:	fa01 f304 	lsl.w	r3, r1, r4
    6fd6:	ea40 0003 	orr.w	r0, r0, r3
    6fda:	4629      	mov	r1, r5
    6fdc:	bd30      	pop	{r4, r5, pc}
    6fde:	fa21 f004 	lsr.w	r0, r1, r4
    6fe2:	4629      	mov	r1, r5
    6fe4:	bd30      	pop	{r4, r5, pc}
    6fe6:	f094 0f00 	teq	r4, #0
    6fea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    6fee:	bf06      	itte	eq
    6ff0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    6ff4:	3401      	addeq	r4, #1
    6ff6:	3d01      	subne	r5, #1
    6ff8:	e74e      	b.n	6e98 <__adddf3+0x8c>
    6ffa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6ffe:	bf18      	it	ne
    7000:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7004:	d029      	beq.n	705a <__adddf3+0x24e>
    7006:	ea94 0f05 	teq	r4, r5
    700a:	bf08      	it	eq
    700c:	ea90 0f02 	teqeq	r0, r2
    7010:	d005      	beq.n	701e <__adddf3+0x212>
    7012:	ea54 0c00 	orrs.w	ip, r4, r0
    7016:	bf04      	itt	eq
    7018:	4619      	moveq	r1, r3
    701a:	4610      	moveq	r0, r2
    701c:	bd30      	pop	{r4, r5, pc}
    701e:	ea91 0f03 	teq	r1, r3
    7022:	bf1e      	ittt	ne
    7024:	2100      	movne	r1, #0
    7026:	2000      	movne	r0, #0
    7028:	bd30      	popne	{r4, r5, pc}
    702a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    702e:	d105      	bne.n	703c <__adddf3+0x230>
    7030:	0040      	lsls	r0, r0, #1
    7032:	4149      	adcs	r1, r1
    7034:	bf28      	it	cs
    7036:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    703a:	bd30      	pop	{r4, r5, pc}
    703c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    7040:	bf3c      	itt	cc
    7042:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    7046:	bd30      	popcc	{r4, r5, pc}
    7048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    704c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    7050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    7054:	f04f 0000 	mov.w	r0, #0
    7058:	bd30      	pop	{r4, r5, pc}
    705a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    705e:	bf1a      	itte	ne
    7060:	4619      	movne	r1, r3
    7062:	4610      	movne	r0, r2
    7064:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    7068:	bf1c      	itt	ne
    706a:	460b      	movne	r3, r1
    706c:	4602      	movne	r2, r0
    706e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    7072:	bf06      	itte	eq
    7074:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    7078:	ea91 0f03 	teqeq	r1, r3
    707c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    7080:	bd30      	pop	{r4, r5, pc}
    7082:	bf00      	nop

00007084 <__aeabi_ui2d>:
    7084:	f090 0f00 	teq	r0, #0
    7088:	bf04      	itt	eq
    708a:	2100      	moveq	r1, #0
    708c:	4770      	bxeq	lr
    708e:	b530      	push	{r4, r5, lr}
    7090:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7094:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7098:	f04f 0500 	mov.w	r5, #0
    709c:	f04f 0100 	mov.w	r1, #0
    70a0:	e750      	b.n	6f44 <__adddf3+0x138>
    70a2:	bf00      	nop

000070a4 <__aeabi_i2d>:
    70a4:	f090 0f00 	teq	r0, #0
    70a8:	bf04      	itt	eq
    70aa:	2100      	moveq	r1, #0
    70ac:	4770      	bxeq	lr
    70ae:	b530      	push	{r4, r5, lr}
    70b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    70b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    70b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    70bc:	bf48      	it	mi
    70be:	4240      	negmi	r0, r0
    70c0:	f04f 0100 	mov.w	r1, #0
    70c4:	e73e      	b.n	6f44 <__adddf3+0x138>
    70c6:	bf00      	nop

000070c8 <__aeabi_f2d>:
    70c8:	0042      	lsls	r2, r0, #1
    70ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    70ce:	ea4f 0131 	mov.w	r1, r1, rrx
    70d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    70d6:	bf1f      	itttt	ne
    70d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    70dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    70e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    70e4:	4770      	bxne	lr
    70e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    70ea:	bf08      	it	eq
    70ec:	4770      	bxeq	lr
    70ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    70f2:	bf04      	itt	eq
    70f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    70f8:	4770      	bxeq	lr
    70fa:	b530      	push	{r4, r5, lr}
    70fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    7100:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7104:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7108:	e71c      	b.n	6f44 <__adddf3+0x138>
    710a:	bf00      	nop

0000710c <__aeabi_ul2d>:
    710c:	ea50 0201 	orrs.w	r2, r0, r1
    7110:	bf08      	it	eq
    7112:	4770      	bxeq	lr
    7114:	b530      	push	{r4, r5, lr}
    7116:	f04f 0500 	mov.w	r5, #0
    711a:	e00a      	b.n	7132 <__aeabi_l2d+0x16>

0000711c <__aeabi_l2d>:
    711c:	ea50 0201 	orrs.w	r2, r0, r1
    7120:	bf08      	it	eq
    7122:	4770      	bxeq	lr
    7124:	b530      	push	{r4, r5, lr}
    7126:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    712a:	d502      	bpl.n	7132 <__aeabi_l2d+0x16>
    712c:	4240      	negs	r0, r0
    712e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7132:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7136:	f104 0432 	add.w	r4, r4, #50	; 0x32
    713a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    713e:	f43f aed8 	beq.w	6ef2 <__adddf3+0xe6>
    7142:	f04f 0203 	mov.w	r2, #3
    7146:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    714a:	bf18      	it	ne
    714c:	3203      	addne	r2, #3
    714e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7152:	bf18      	it	ne
    7154:	3203      	addne	r2, #3
    7156:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    715a:	f1c2 0320 	rsb	r3, r2, #32
    715e:	fa00 fc03 	lsl.w	ip, r0, r3
    7162:	fa20 f002 	lsr.w	r0, r0, r2
    7166:	fa01 fe03 	lsl.w	lr, r1, r3
    716a:	ea40 000e 	orr.w	r0, r0, lr
    716e:	fa21 f102 	lsr.w	r1, r1, r2
    7172:	4414      	add	r4, r2
    7174:	e6bd      	b.n	6ef2 <__adddf3+0xe6>
    7176:	bf00      	nop

00007178 <__aeabi_d2f>:
    7178:	ea4f 0241 	mov.w	r2, r1, lsl #1
    717c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    7180:	bf24      	itt	cs
    7182:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    7186:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    718a:	d90d      	bls.n	71a8 <__aeabi_d2f+0x30>
    718c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    7190:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    7194:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    7198:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    719c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    71a0:	bf08      	it	eq
    71a2:	f020 0001 	biceq.w	r0, r0, #1
    71a6:	4770      	bx	lr
    71a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    71ac:	d121      	bne.n	71f2 <__aeabi_d2f+0x7a>
    71ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    71b2:	bfbc      	itt	lt
    71b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    71b8:	4770      	bxlt	lr
    71ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    71be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    71c2:	f1c2 0218 	rsb	r2, r2, #24
    71c6:	f1c2 0c20 	rsb	ip, r2, #32
    71ca:	fa10 f30c 	lsls.w	r3, r0, ip
    71ce:	fa20 f002 	lsr.w	r0, r0, r2
    71d2:	bf18      	it	ne
    71d4:	f040 0001 	orrne.w	r0, r0, #1
    71d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    71dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    71e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    71e4:	ea40 000c 	orr.w	r0, r0, ip
    71e8:	fa23 f302 	lsr.w	r3, r3, r2
    71ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    71f0:	e7cc      	b.n	718c <__aeabi_d2f+0x14>
    71f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    71f6:	d107      	bne.n	7208 <__aeabi_d2f+0x90>
    71f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    71fc:	bf1e      	ittt	ne
    71fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    7202:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    7206:	4770      	bxne	lr
    7208:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    720c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7214:	4770      	bx	lr
    7216:	bf00      	nop

00007218 <__aeabi_frsub>:
    7218:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    721c:	e002      	b.n	7224 <__addsf3>
    721e:	bf00      	nop

00007220 <__aeabi_fsub>:
    7220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00007224 <__addsf3>:
    7224:	0042      	lsls	r2, r0, #1
    7226:	bf1f      	itttt	ne
    7228:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    722c:	ea92 0f03 	teqne	r2, r3
    7230:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    7234:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7238:	d06a      	beq.n	7310 <__addsf3+0xec>
    723a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    723e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    7242:	bfc1      	itttt	gt
    7244:	18d2      	addgt	r2, r2, r3
    7246:	4041      	eorgt	r1, r0
    7248:	4048      	eorgt	r0, r1
    724a:	4041      	eorgt	r1, r0
    724c:	bfb8      	it	lt
    724e:	425b      	neglt	r3, r3
    7250:	2b19      	cmp	r3, #25
    7252:	bf88      	it	hi
    7254:	4770      	bxhi	lr
    7256:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    725a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    725e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7262:	bf18      	it	ne
    7264:	4240      	negne	r0, r0
    7266:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    726a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    726e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    7272:	bf18      	it	ne
    7274:	4249      	negne	r1, r1
    7276:	ea92 0f03 	teq	r2, r3
    727a:	d03f      	beq.n	72fc <__addsf3+0xd8>
    727c:	f1a2 0201 	sub.w	r2, r2, #1
    7280:	fa41 fc03 	asr.w	ip, r1, r3
    7284:	eb10 000c 	adds.w	r0, r0, ip
    7288:	f1c3 0320 	rsb	r3, r3, #32
    728c:	fa01 f103 	lsl.w	r1, r1, r3
    7290:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7294:	d502      	bpl.n	729c <__addsf3+0x78>
    7296:	4249      	negs	r1, r1
    7298:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    729c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    72a0:	d313      	bcc.n	72ca <__addsf3+0xa6>
    72a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    72a6:	d306      	bcc.n	72b6 <__addsf3+0x92>
    72a8:	0840      	lsrs	r0, r0, #1
    72aa:	ea4f 0131 	mov.w	r1, r1, rrx
    72ae:	f102 0201 	add.w	r2, r2, #1
    72b2:	2afe      	cmp	r2, #254	; 0xfe
    72b4:	d251      	bcs.n	735a <__addsf3+0x136>
    72b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    72ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    72be:	bf08      	it	eq
    72c0:	f020 0001 	biceq.w	r0, r0, #1
    72c4:	ea40 0003 	orr.w	r0, r0, r3
    72c8:	4770      	bx	lr
    72ca:	0049      	lsls	r1, r1, #1
    72cc:	eb40 0000 	adc.w	r0, r0, r0
    72d0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    72d4:	f1a2 0201 	sub.w	r2, r2, #1
    72d8:	d1ed      	bne.n	72b6 <__addsf3+0x92>
    72da:	fab0 fc80 	clz	ip, r0
    72de:	f1ac 0c08 	sub.w	ip, ip, #8
    72e2:	ebb2 020c 	subs.w	r2, r2, ip
    72e6:	fa00 f00c 	lsl.w	r0, r0, ip
    72ea:	bfaa      	itet	ge
    72ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    72f0:	4252      	neglt	r2, r2
    72f2:	4318      	orrge	r0, r3
    72f4:	bfbc      	itt	lt
    72f6:	40d0      	lsrlt	r0, r2
    72f8:	4318      	orrlt	r0, r3
    72fa:	4770      	bx	lr
    72fc:	f092 0f00 	teq	r2, #0
    7300:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    7304:	bf06      	itte	eq
    7306:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    730a:	3201      	addeq	r2, #1
    730c:	3b01      	subne	r3, #1
    730e:	e7b5      	b.n	727c <__addsf3+0x58>
    7310:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7314:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7318:	bf18      	it	ne
    731a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    731e:	d021      	beq.n	7364 <__addsf3+0x140>
    7320:	ea92 0f03 	teq	r2, r3
    7324:	d004      	beq.n	7330 <__addsf3+0x10c>
    7326:	f092 0f00 	teq	r2, #0
    732a:	bf08      	it	eq
    732c:	4608      	moveq	r0, r1
    732e:	4770      	bx	lr
    7330:	ea90 0f01 	teq	r0, r1
    7334:	bf1c      	itt	ne
    7336:	2000      	movne	r0, #0
    7338:	4770      	bxne	lr
    733a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    733e:	d104      	bne.n	734a <__addsf3+0x126>
    7340:	0040      	lsls	r0, r0, #1
    7342:	bf28      	it	cs
    7344:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    7348:	4770      	bx	lr
    734a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    734e:	bf3c      	itt	cc
    7350:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    7354:	4770      	bxcc	lr
    7356:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    735a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    735e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7362:	4770      	bx	lr
    7364:	ea7f 6222 	mvns.w	r2, r2, asr #24
    7368:	bf16      	itet	ne
    736a:	4608      	movne	r0, r1
    736c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    7370:	4601      	movne	r1, r0
    7372:	0242      	lsls	r2, r0, #9
    7374:	bf06      	itte	eq
    7376:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    737a:	ea90 0f01 	teqeq	r0, r1
    737e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    7382:	4770      	bx	lr

00007384 <__aeabi_ui2f>:
    7384:	f04f 0300 	mov.w	r3, #0
    7388:	e004      	b.n	7394 <__aeabi_i2f+0x8>
    738a:	bf00      	nop

0000738c <__aeabi_i2f>:
    738c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    7390:	bf48      	it	mi
    7392:	4240      	negmi	r0, r0
    7394:	ea5f 0c00 	movs.w	ip, r0
    7398:	bf08      	it	eq
    739a:	4770      	bxeq	lr
    739c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    73a0:	4601      	mov	r1, r0
    73a2:	f04f 0000 	mov.w	r0, #0
    73a6:	e01c      	b.n	73e2 <__aeabi_l2f+0x2a>

000073a8 <__aeabi_ul2f>:
    73a8:	ea50 0201 	orrs.w	r2, r0, r1
    73ac:	bf08      	it	eq
    73ae:	4770      	bxeq	lr
    73b0:	f04f 0300 	mov.w	r3, #0
    73b4:	e00a      	b.n	73cc <__aeabi_l2f+0x14>
    73b6:	bf00      	nop

000073b8 <__aeabi_l2f>:
    73b8:	ea50 0201 	orrs.w	r2, r0, r1
    73bc:	bf08      	it	eq
    73be:	4770      	bxeq	lr
    73c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    73c4:	d502      	bpl.n	73cc <__aeabi_l2f+0x14>
    73c6:	4240      	negs	r0, r0
    73c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    73cc:	ea5f 0c01 	movs.w	ip, r1
    73d0:	bf02      	ittt	eq
    73d2:	4684      	moveq	ip, r0
    73d4:	4601      	moveq	r1, r0
    73d6:	2000      	moveq	r0, #0
    73d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    73dc:	bf08      	it	eq
    73de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    73e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    73e6:	fabc f28c 	clz	r2, ip
    73ea:	3a08      	subs	r2, #8
    73ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    73f0:	db10      	blt.n	7414 <__aeabi_l2f+0x5c>
    73f2:	fa01 fc02 	lsl.w	ip, r1, r2
    73f6:	4463      	add	r3, ip
    73f8:	fa00 fc02 	lsl.w	ip, r0, r2
    73fc:	f1c2 0220 	rsb	r2, r2, #32
    7400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7404:	fa20 f202 	lsr.w	r2, r0, r2
    7408:	eb43 0002 	adc.w	r0, r3, r2
    740c:	bf08      	it	eq
    740e:	f020 0001 	biceq.w	r0, r0, #1
    7412:	4770      	bx	lr
    7414:	f102 0220 	add.w	r2, r2, #32
    7418:	fa01 fc02 	lsl.w	ip, r1, r2
    741c:	f1c2 0220 	rsb	r2, r2, #32
    7420:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    7424:	fa21 f202 	lsr.w	r2, r1, r2
    7428:	eb43 0002 	adc.w	r0, r3, r2
    742c:	bf08      	it	eq
    742e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7432:	4770      	bx	lr

00007434 <__aeabi_uldivmod>:
    7434:	b953      	cbnz	r3, 744c <__aeabi_uldivmod+0x18>
    7436:	b94a      	cbnz	r2, 744c <__aeabi_uldivmod+0x18>
    7438:	2900      	cmp	r1, #0
    743a:	bf08      	it	eq
    743c:	2800      	cmpeq	r0, #0
    743e:	bf1c      	itt	ne
    7440:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7444:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7448:	f001 b8f8 	b.w	863c <__aeabi_idiv0>
    744c:	f1ad 0c08 	sub.w	ip, sp, #8
    7450:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    7454:	f000 f806 	bl	7464 <__udivmoddi4>
    7458:	f8dd e004 	ldr.w	lr, [sp, #4]
    745c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7460:	b004      	add	sp, #16
    7462:	4770      	bx	lr

00007464 <__udivmoddi4>:
    7464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7468:	9e08      	ldr	r6, [sp, #32]
    746a:	4604      	mov	r4, r0
    746c:	4688      	mov	r8, r1
    746e:	2b00      	cmp	r3, #0
    7470:	d14b      	bne.n	750a <__udivmoddi4+0xa6>
    7472:	428a      	cmp	r2, r1
    7474:	4615      	mov	r5, r2
    7476:	d967      	bls.n	7548 <__udivmoddi4+0xe4>
    7478:	fab2 f282 	clz	r2, r2
    747c:	b14a      	cbz	r2, 7492 <__udivmoddi4+0x2e>
    747e:	f1c2 0720 	rsb	r7, r2, #32
    7482:	fa01 f302 	lsl.w	r3, r1, r2
    7486:	fa20 f707 	lsr.w	r7, r0, r7
    748a:	4095      	lsls	r5, r2
    748c:	ea47 0803 	orr.w	r8, r7, r3
    7490:	4094      	lsls	r4, r2
    7492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7496:	0c23      	lsrs	r3, r4, #16
    7498:	fbb8 f7fe 	udiv	r7, r8, lr
    749c:	fa1f fc85 	uxth.w	ip, r5
    74a0:	fb0e 8817 	mls	r8, lr, r7, r8
    74a4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    74a8:	fb07 f10c 	mul.w	r1, r7, ip
    74ac:	4299      	cmp	r1, r3
    74ae:	d909      	bls.n	74c4 <__udivmoddi4+0x60>
    74b0:	18eb      	adds	r3, r5, r3
    74b2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    74b6:	f080 811b 	bcs.w	76f0 <__udivmoddi4+0x28c>
    74ba:	4299      	cmp	r1, r3
    74bc:	f240 8118 	bls.w	76f0 <__udivmoddi4+0x28c>
    74c0:	3f02      	subs	r7, #2
    74c2:	442b      	add	r3, r5
    74c4:	1a5b      	subs	r3, r3, r1
    74c6:	b2a4      	uxth	r4, r4
    74c8:	fbb3 f0fe 	udiv	r0, r3, lr
    74cc:	fb0e 3310 	mls	r3, lr, r0, r3
    74d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    74d4:	fb00 fc0c 	mul.w	ip, r0, ip
    74d8:	45a4      	cmp	ip, r4
    74da:	d909      	bls.n	74f0 <__udivmoddi4+0x8c>
    74dc:	192c      	adds	r4, r5, r4
    74de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    74e2:	f080 8107 	bcs.w	76f4 <__udivmoddi4+0x290>
    74e6:	45a4      	cmp	ip, r4
    74e8:	f240 8104 	bls.w	76f4 <__udivmoddi4+0x290>
    74ec:	3802      	subs	r0, #2
    74ee:	442c      	add	r4, r5
    74f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    74f4:	eba4 040c 	sub.w	r4, r4, ip
    74f8:	2700      	movs	r7, #0
    74fa:	b11e      	cbz	r6, 7504 <__udivmoddi4+0xa0>
    74fc:	40d4      	lsrs	r4, r2
    74fe:	2300      	movs	r3, #0
    7500:	e9c6 4300 	strd	r4, r3, [r6]
    7504:	4639      	mov	r1, r7
    7506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    750a:	428b      	cmp	r3, r1
    750c:	d909      	bls.n	7522 <__udivmoddi4+0xbe>
    750e:	2e00      	cmp	r6, #0
    7510:	f000 80eb 	beq.w	76ea <__udivmoddi4+0x286>
    7514:	2700      	movs	r7, #0
    7516:	e9c6 0100 	strd	r0, r1, [r6]
    751a:	4638      	mov	r0, r7
    751c:	4639      	mov	r1, r7
    751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7522:	fab3 f783 	clz	r7, r3
    7526:	2f00      	cmp	r7, #0
    7528:	d147      	bne.n	75ba <__udivmoddi4+0x156>
    752a:	428b      	cmp	r3, r1
    752c:	d302      	bcc.n	7534 <__udivmoddi4+0xd0>
    752e:	4282      	cmp	r2, r0
    7530:	f200 80fa 	bhi.w	7728 <__udivmoddi4+0x2c4>
    7534:	1a84      	subs	r4, r0, r2
    7536:	eb61 0303 	sbc.w	r3, r1, r3
    753a:	2001      	movs	r0, #1
    753c:	4698      	mov	r8, r3
    753e:	2e00      	cmp	r6, #0
    7540:	d0e0      	beq.n	7504 <__udivmoddi4+0xa0>
    7542:	e9c6 4800 	strd	r4, r8, [r6]
    7546:	e7dd      	b.n	7504 <__udivmoddi4+0xa0>
    7548:	b902      	cbnz	r2, 754c <__udivmoddi4+0xe8>
    754a:	deff      	udf	#255	; 0xff
    754c:	fab2 f282 	clz	r2, r2
    7550:	2a00      	cmp	r2, #0
    7552:	f040 808f 	bne.w	7674 <__udivmoddi4+0x210>
    7556:	1b49      	subs	r1, r1, r5
    7558:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    755c:	fa1f f885 	uxth.w	r8, r5
    7560:	2701      	movs	r7, #1
    7562:	fbb1 fcfe 	udiv	ip, r1, lr
    7566:	0c23      	lsrs	r3, r4, #16
    7568:	fb0e 111c 	mls	r1, lr, ip, r1
    756c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7570:	fb08 f10c 	mul.w	r1, r8, ip
    7574:	4299      	cmp	r1, r3
    7576:	d907      	bls.n	7588 <__udivmoddi4+0x124>
    7578:	18eb      	adds	r3, r5, r3
    757a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    757e:	d202      	bcs.n	7586 <__udivmoddi4+0x122>
    7580:	4299      	cmp	r1, r3
    7582:	f200 80cd 	bhi.w	7720 <__udivmoddi4+0x2bc>
    7586:	4684      	mov	ip, r0
    7588:	1a59      	subs	r1, r3, r1
    758a:	b2a3      	uxth	r3, r4
    758c:	fbb1 f0fe 	udiv	r0, r1, lr
    7590:	fb0e 1410 	mls	r4, lr, r0, r1
    7594:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    7598:	fb08 f800 	mul.w	r8, r8, r0
    759c:	45a0      	cmp	r8, r4
    759e:	d907      	bls.n	75b0 <__udivmoddi4+0x14c>
    75a0:	192c      	adds	r4, r5, r4
    75a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    75a6:	d202      	bcs.n	75ae <__udivmoddi4+0x14a>
    75a8:	45a0      	cmp	r8, r4
    75aa:	f200 80b6 	bhi.w	771a <__udivmoddi4+0x2b6>
    75ae:	4618      	mov	r0, r3
    75b0:	eba4 0408 	sub.w	r4, r4, r8
    75b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    75b8:	e79f      	b.n	74fa <__udivmoddi4+0x96>
    75ba:	f1c7 0c20 	rsb	ip, r7, #32
    75be:	40bb      	lsls	r3, r7
    75c0:	fa22 fe0c 	lsr.w	lr, r2, ip
    75c4:	ea4e 0e03 	orr.w	lr, lr, r3
    75c8:	fa01 f407 	lsl.w	r4, r1, r7
    75cc:	fa20 f50c 	lsr.w	r5, r0, ip
    75d0:	fa21 f30c 	lsr.w	r3, r1, ip
    75d4:	ea4f 481e 	mov.w	r8, lr, lsr #16
    75d8:	4325      	orrs	r5, r4
    75da:	fbb3 f9f8 	udiv	r9, r3, r8
    75de:	0c2c      	lsrs	r4, r5, #16
    75e0:	fb08 3319 	mls	r3, r8, r9, r3
    75e4:	fa1f fa8e 	uxth.w	sl, lr
    75e8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    75ec:	fb09 f40a 	mul.w	r4, r9, sl
    75f0:	429c      	cmp	r4, r3
    75f2:	fa02 f207 	lsl.w	r2, r2, r7
    75f6:	fa00 f107 	lsl.w	r1, r0, r7
    75fa:	d90b      	bls.n	7614 <__udivmoddi4+0x1b0>
    75fc:	eb1e 0303 	adds.w	r3, lr, r3
    7600:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    7604:	f080 8087 	bcs.w	7716 <__udivmoddi4+0x2b2>
    7608:	429c      	cmp	r4, r3
    760a:	f240 8084 	bls.w	7716 <__udivmoddi4+0x2b2>
    760e:	f1a9 0902 	sub.w	r9, r9, #2
    7612:	4473      	add	r3, lr
    7614:	1b1b      	subs	r3, r3, r4
    7616:	b2ad      	uxth	r5, r5
    7618:	fbb3 f0f8 	udiv	r0, r3, r8
    761c:	fb08 3310 	mls	r3, r8, r0, r3
    7620:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    7624:	fb00 fa0a 	mul.w	sl, r0, sl
    7628:	45a2      	cmp	sl, r4
    762a:	d908      	bls.n	763e <__udivmoddi4+0x1da>
    762c:	eb1e 0404 	adds.w	r4, lr, r4
    7630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7634:	d26b      	bcs.n	770e <__udivmoddi4+0x2aa>
    7636:	45a2      	cmp	sl, r4
    7638:	d969      	bls.n	770e <__udivmoddi4+0x2aa>
    763a:	3802      	subs	r0, #2
    763c:	4474      	add	r4, lr
    763e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    7642:	fba0 8902 	umull	r8, r9, r0, r2
    7646:	eba4 040a 	sub.w	r4, r4, sl
    764a:	454c      	cmp	r4, r9
    764c:	46c2      	mov	sl, r8
    764e:	464b      	mov	r3, r9
    7650:	d354      	bcc.n	76fc <__udivmoddi4+0x298>
    7652:	d051      	beq.n	76f8 <__udivmoddi4+0x294>
    7654:	2e00      	cmp	r6, #0
    7656:	d069      	beq.n	772c <__udivmoddi4+0x2c8>
    7658:	ebb1 050a 	subs.w	r5, r1, sl
    765c:	eb64 0403 	sbc.w	r4, r4, r3
    7660:	fa04 fc0c 	lsl.w	ip, r4, ip
    7664:	40fd      	lsrs	r5, r7
    7666:	40fc      	lsrs	r4, r7
    7668:	ea4c 0505 	orr.w	r5, ip, r5
    766c:	e9c6 5400 	strd	r5, r4, [r6]
    7670:	2700      	movs	r7, #0
    7672:	e747      	b.n	7504 <__udivmoddi4+0xa0>
    7674:	f1c2 0320 	rsb	r3, r2, #32
    7678:	fa20 f703 	lsr.w	r7, r0, r3
    767c:	4095      	lsls	r5, r2
    767e:	fa01 f002 	lsl.w	r0, r1, r2
    7682:	fa21 f303 	lsr.w	r3, r1, r3
    7686:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    768a:	4338      	orrs	r0, r7
    768c:	0c01      	lsrs	r1, r0, #16
    768e:	fbb3 f7fe 	udiv	r7, r3, lr
    7692:	fa1f f885 	uxth.w	r8, r5
    7696:	fb0e 3317 	mls	r3, lr, r7, r3
    769a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    769e:	fb07 f308 	mul.w	r3, r7, r8
    76a2:	428b      	cmp	r3, r1
    76a4:	fa04 f402 	lsl.w	r4, r4, r2
    76a8:	d907      	bls.n	76ba <__udivmoddi4+0x256>
    76aa:	1869      	adds	r1, r5, r1
    76ac:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    76b0:	d22f      	bcs.n	7712 <__udivmoddi4+0x2ae>
    76b2:	428b      	cmp	r3, r1
    76b4:	d92d      	bls.n	7712 <__udivmoddi4+0x2ae>
    76b6:	3f02      	subs	r7, #2
    76b8:	4429      	add	r1, r5
    76ba:	1acb      	subs	r3, r1, r3
    76bc:	b281      	uxth	r1, r0
    76be:	fbb3 f0fe 	udiv	r0, r3, lr
    76c2:	fb0e 3310 	mls	r3, lr, r0, r3
    76c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    76ca:	fb00 f308 	mul.w	r3, r0, r8
    76ce:	428b      	cmp	r3, r1
    76d0:	d907      	bls.n	76e2 <__udivmoddi4+0x27e>
    76d2:	1869      	adds	r1, r5, r1
    76d4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    76d8:	d217      	bcs.n	770a <__udivmoddi4+0x2a6>
    76da:	428b      	cmp	r3, r1
    76dc:	d915      	bls.n	770a <__udivmoddi4+0x2a6>
    76de:	3802      	subs	r0, #2
    76e0:	4429      	add	r1, r5
    76e2:	1ac9      	subs	r1, r1, r3
    76e4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    76e8:	e73b      	b.n	7562 <__udivmoddi4+0xfe>
    76ea:	4637      	mov	r7, r6
    76ec:	4630      	mov	r0, r6
    76ee:	e709      	b.n	7504 <__udivmoddi4+0xa0>
    76f0:	4607      	mov	r7, r0
    76f2:	e6e7      	b.n	74c4 <__udivmoddi4+0x60>
    76f4:	4618      	mov	r0, r3
    76f6:	e6fb      	b.n	74f0 <__udivmoddi4+0x8c>
    76f8:	4541      	cmp	r1, r8
    76fa:	d2ab      	bcs.n	7654 <__udivmoddi4+0x1f0>
    76fc:	ebb8 0a02 	subs.w	sl, r8, r2
    7700:	eb69 020e 	sbc.w	r2, r9, lr
    7704:	3801      	subs	r0, #1
    7706:	4613      	mov	r3, r2
    7708:	e7a4      	b.n	7654 <__udivmoddi4+0x1f0>
    770a:	4660      	mov	r0, ip
    770c:	e7e9      	b.n	76e2 <__udivmoddi4+0x27e>
    770e:	4618      	mov	r0, r3
    7710:	e795      	b.n	763e <__udivmoddi4+0x1da>
    7712:	4667      	mov	r7, ip
    7714:	e7d1      	b.n	76ba <__udivmoddi4+0x256>
    7716:	4681      	mov	r9, r0
    7718:	e77c      	b.n	7614 <__udivmoddi4+0x1b0>
    771a:	3802      	subs	r0, #2
    771c:	442c      	add	r4, r5
    771e:	e747      	b.n	75b0 <__udivmoddi4+0x14c>
    7720:	f1ac 0c02 	sub.w	ip, ip, #2
    7724:	442b      	add	r3, r5
    7726:	e72f      	b.n	7588 <__udivmoddi4+0x124>
    7728:	4638      	mov	r0, r7
    772a:	e708      	b.n	753e <__udivmoddi4+0xda>
    772c:	4637      	mov	r7, r6
    772e:	e6e9      	b.n	7504 <__udivmoddi4+0xa0>

00007730 <selfrel_offset31>:
    7730:	6803      	ldr	r3, [r0, #0]
    7732:	005a      	lsls	r2, r3, #1
    7734:	bf4c      	ite	mi
    7736:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    773a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    773e:	4418      	add	r0, r3
    7740:	4770      	bx	lr
    7742:	bf00      	nop

00007744 <search_EIT_table>:
    7744:	b361      	cbz	r1, 77a0 <search_EIT_table+0x5c>
    7746:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    774a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    774e:	4690      	mov	r8, r2
    7750:	4606      	mov	r6, r0
    7752:	46d1      	mov	r9, sl
    7754:	2700      	movs	r7, #0
    7756:	eb07 0409 	add.w	r4, r7, r9
    775a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    775e:	1064      	asrs	r4, r4, #1
    7760:	00e5      	lsls	r5, r4, #3
    7762:	1971      	adds	r1, r6, r5
    7764:	4608      	mov	r0, r1
    7766:	f7ff ffe3 	bl	7730 <selfrel_offset31>
    776a:	45a2      	cmp	sl, r4
    776c:	4683      	mov	fp, r0
    776e:	f105 0008 	add.w	r0, r5, #8
    7772:	4430      	add	r0, r6
    7774:	d009      	beq.n	778a <search_EIT_table+0x46>
    7776:	f7ff ffdb 	bl	7730 <selfrel_offset31>
    777a:	45c3      	cmp	fp, r8
    777c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    7780:	d805      	bhi.n	778e <search_EIT_table+0x4a>
    7782:	4540      	cmp	r0, r8
    7784:	d209      	bcs.n	779a <search_EIT_table+0x56>
    7786:	1c67      	adds	r7, r4, #1
    7788:	e7e5      	b.n	7756 <search_EIT_table+0x12>
    778a:	45c3      	cmp	fp, r8
    778c:	d905      	bls.n	779a <search_EIT_table+0x56>
    778e:	42a7      	cmp	r7, r4
    7790:	d002      	beq.n	7798 <search_EIT_table+0x54>
    7792:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    7796:	e7de      	b.n	7756 <search_EIT_table+0x12>
    7798:	2100      	movs	r1, #0
    779a:	4608      	mov	r0, r1
    779c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77a0:	4608      	mov	r0, r1
    77a2:	4770      	bx	lr

000077a4 <__gnu_unwind_get_pr_addr>:
    77a4:	2801      	cmp	r0, #1
    77a6:	d007      	beq.n	77b8 <__gnu_unwind_get_pr_addr+0x14>
    77a8:	2802      	cmp	r0, #2
    77aa:	d007      	beq.n	77bc <__gnu_unwind_get_pr_addr+0x18>
    77ac:	4b04      	ldr	r3, [pc, #16]	; (77c0 <__gnu_unwind_get_pr_addr+0x1c>)
    77ae:	2800      	cmp	r0, #0
    77b0:	bf0c      	ite	eq
    77b2:	4618      	moveq	r0, r3
    77b4:	2000      	movne	r0, #0
    77b6:	4770      	bx	lr
    77b8:	4802      	ldr	r0, [pc, #8]	; (77c4 <__gnu_unwind_get_pr_addr+0x20>)
    77ba:	4770      	bx	lr
    77bc:	4802      	ldr	r0, [pc, #8]	; (77c8 <__gnu_unwind_get_pr_addr+0x24>)
    77be:	4770      	bx	lr
    77c0:	00007e91 	.word	0x00007e91
    77c4:	00007e95 	.word	0x00007e95
    77c8:	00007e99 	.word	0x00007e99

000077cc <get_eit_entry>:
    77cc:	b530      	push	{r4, r5, lr}
    77ce:	4b25      	ldr	r3, [pc, #148]	; (7864 <get_eit_entry+0x98>)
    77d0:	b083      	sub	sp, #12
    77d2:	4604      	mov	r4, r0
    77d4:	1e8d      	subs	r5, r1, #2
    77d6:	b34b      	cbz	r3, 782c <get_eit_entry+0x60>
    77d8:	a901      	add	r1, sp, #4
    77da:	4628      	mov	r0, r5
    77dc:	f3af 8000 	nop.w
    77e0:	b1f0      	cbz	r0, 7820 <get_eit_entry+0x54>
    77e2:	9901      	ldr	r1, [sp, #4]
    77e4:	462a      	mov	r2, r5
    77e6:	f7ff ffad 	bl	7744 <search_EIT_table>
    77ea:	4601      	mov	r1, r0
    77ec:	b1c0      	cbz	r0, 7820 <get_eit_entry+0x54>
    77ee:	f7ff ff9f 	bl	7730 <selfrel_offset31>
    77f2:	684b      	ldr	r3, [r1, #4]
    77f4:	64a0      	str	r0, [r4, #72]	; 0x48
    77f6:	2b01      	cmp	r3, #1
    77f8:	d02e      	beq.n	7858 <get_eit_entry+0x8c>
    77fa:	2b00      	cmp	r3, #0
    77fc:	f101 0004 	add.w	r0, r1, #4
    7800:	db26      	blt.n	7850 <get_eit_entry+0x84>
    7802:	f7ff ff95 	bl	7730 <selfrel_offset31>
    7806:	2300      	movs	r3, #0
    7808:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    780c:	6803      	ldr	r3, [r0, #0]
    780e:	2b00      	cmp	r3, #0
    7810:	db12      	blt.n	7838 <get_eit_entry+0x6c>
    7812:	f7ff ff8d 	bl	7730 <selfrel_offset31>
    7816:	2300      	movs	r3, #0
    7818:	6120      	str	r0, [r4, #16]
    781a:	4618      	mov	r0, r3
    781c:	b003      	add	sp, #12
    781e:	bd30      	pop	{r4, r5, pc}
    7820:	2300      	movs	r3, #0
    7822:	6123      	str	r3, [r4, #16]
    7824:	2309      	movs	r3, #9
    7826:	4618      	mov	r0, r3
    7828:	b003      	add	sp, #12
    782a:	bd30      	pop	{r4, r5, pc}
    782c:	490e      	ldr	r1, [pc, #56]	; (7868 <get_eit_entry+0x9c>)
    782e:	480f      	ldr	r0, [pc, #60]	; (786c <get_eit_entry+0xa0>)
    7830:	1a09      	subs	r1, r1, r0
    7832:	10c9      	asrs	r1, r1, #3
    7834:	9101      	str	r1, [sp, #4]
    7836:	e7d5      	b.n	77e4 <get_eit_entry+0x18>
    7838:	f3c3 6003 	ubfx	r0, r3, #24, #4
    783c:	f7ff ffb2 	bl	77a4 <__gnu_unwind_get_pr_addr>
    7840:	2800      	cmp	r0, #0
    7842:	bf14      	ite	ne
    7844:	2300      	movne	r3, #0
    7846:	2309      	moveq	r3, #9
    7848:	6120      	str	r0, [r4, #16]
    784a:	4618      	mov	r0, r3
    784c:	b003      	add	sp, #12
    784e:	bd30      	pop	{r4, r5, pc}
    7850:	2301      	movs	r3, #1
    7852:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7856:	e7d9      	b.n	780c <get_eit_entry+0x40>
    7858:	2300      	movs	r3, #0
    785a:	6123      	str	r3, [r4, #16]
    785c:	2305      	movs	r3, #5
    785e:	4618      	mov	r0, r3
    7860:	b003      	add	sp, #12
    7862:	bd30      	pop	{r4, r5, pc}
    7864:	00000000 	.word	0x00000000
    7868:	00009f7c 	.word	0x00009f7c
    786c:	00009ec4 	.word	0x00009ec4

00007870 <restore_non_core_regs>:
    7870:	6803      	ldr	r3, [r0, #0]
    7872:	07da      	lsls	r2, r3, #31
    7874:	b510      	push	{r4, lr}
    7876:	4604      	mov	r4, r0
    7878:	d406      	bmi.n	7888 <restore_non_core_regs+0x18>
    787a:	079b      	lsls	r3, r3, #30
    787c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    7880:	d509      	bpl.n	7896 <restore_non_core_regs+0x26>
    7882:	f000 fc5f 	bl	8144 <__gnu_Unwind_Restore_VFP_D>
    7886:	6823      	ldr	r3, [r4, #0]
    7888:	0759      	lsls	r1, r3, #29
    788a:	d509      	bpl.n	78a0 <restore_non_core_regs+0x30>
    788c:	071a      	lsls	r2, r3, #28
    788e:	d50e      	bpl.n	78ae <restore_non_core_regs+0x3e>
    7890:	06db      	lsls	r3, r3, #27
    7892:	d513      	bpl.n	78bc <restore_non_core_regs+0x4c>
    7894:	bd10      	pop	{r4, pc}
    7896:	f000 fc4d 	bl	8134 <__gnu_Unwind_Restore_VFP>
    789a:	6823      	ldr	r3, [r4, #0]
    789c:	0759      	lsls	r1, r3, #29
    789e:	d4f5      	bmi.n	788c <restore_non_core_regs+0x1c>
    78a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    78a4:	f000 fc56 	bl	8154 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    78a8:	6823      	ldr	r3, [r4, #0]
    78aa:	071a      	lsls	r2, r3, #28
    78ac:	d4f0      	bmi.n	7890 <restore_non_core_regs+0x20>
    78ae:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    78b2:	f000 fc57 	bl	8164 <__gnu_Unwind_Restore_WMMXD>
    78b6:	6823      	ldr	r3, [r4, #0]
    78b8:	06db      	lsls	r3, r3, #27
    78ba:	d4eb      	bmi.n	7894 <restore_non_core_regs+0x24>
    78bc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    78c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78c4:	f000 bc92 	b.w	81ec <__gnu_Unwind_Restore_WMMXC>

000078c8 <_Unwind_decode_typeinfo_ptr.isra.0>:
    78c8:	6803      	ldr	r3, [r0, #0]
    78ca:	b103      	cbz	r3, 78ce <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    78cc:	4403      	add	r3, r0
    78ce:	4618      	mov	r0, r3
    78d0:	4770      	bx	lr
    78d2:	bf00      	nop

000078d4 <__gnu_unwind_24bit.isra.1>:
    78d4:	2009      	movs	r0, #9
    78d6:	4770      	bx	lr

000078d8 <_Unwind_DebugHook>:
    78d8:	4770      	bx	lr
    78da:	bf00      	nop

000078dc <unwind_phase2>:
    78dc:	b570      	push	{r4, r5, r6, lr}
    78de:	4604      	mov	r4, r0
    78e0:	460d      	mov	r5, r1
    78e2:	e008      	b.n	78f6 <unwind_phase2+0x1a>
    78e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    78e6:	6163      	str	r3, [r4, #20]
    78e8:	462a      	mov	r2, r5
    78ea:	6923      	ldr	r3, [r4, #16]
    78ec:	4621      	mov	r1, r4
    78ee:	2001      	movs	r0, #1
    78f0:	4798      	blx	r3
    78f2:	2808      	cmp	r0, #8
    78f4:	d108      	bne.n	7908 <unwind_phase2+0x2c>
    78f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    78f8:	4620      	mov	r0, r4
    78fa:	f7ff ff67 	bl	77cc <get_eit_entry>
    78fe:	4606      	mov	r6, r0
    7900:	2800      	cmp	r0, #0
    7902:	d0ef      	beq.n	78e4 <unwind_phase2+0x8>
    7904:	f000 fe9c 	bl	8640 <abort>
    7908:	2807      	cmp	r0, #7
    790a:	d1fb      	bne.n	7904 <unwind_phase2+0x28>
    790c:	4630      	mov	r0, r6
    790e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7910:	f7ff ffe2 	bl	78d8 <_Unwind_DebugHook>
    7914:	1d28      	adds	r0, r5, #4
    7916:	f000 fc01 	bl	811c <__restore_core_regs>
    791a:	bf00      	nop

0000791c <unwind_phase2_forced>:
    791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7920:	1d0c      	adds	r4, r1, #4
    7922:	4605      	mov	r5, r0
    7924:	4617      	mov	r7, r2
    7926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7928:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    792c:	ae03      	add	r6, sp, #12
    792e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7932:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7936:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7938:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    793c:	ac02      	add	r4, sp, #8
    793e:	f8d5 800c 	ldr.w	r8, [r5, #12]
    7942:	f8d5 9018 	ldr.w	r9, [r5, #24]
    7946:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    794a:	2300      	movs	r3, #0
    794c:	6023      	str	r3, [r4, #0]
    794e:	e021      	b.n	7994 <unwind_phase2_forced+0x78>
    7950:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7952:	616b      	str	r3, [r5, #20]
    7954:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7958:	4621      	mov	r1, r4
    795a:	a87a      	add	r0, sp, #488	; 0x1e8
    795c:	f000 feac 	bl	86b8 <memcpy>
    7960:	692b      	ldr	r3, [r5, #16]
    7962:	aa7a      	add	r2, sp, #488	; 0x1e8
    7964:	4629      	mov	r1, r5
    7966:	4630      	mov	r0, r6
    7968:	4798      	blx	r3
    796a:	9b88      	ldr	r3, [sp, #544]	; 0x220
    796c:	e9cd 4900 	strd	r4, r9, [sp]
    7970:	4682      	mov	sl, r0
    7972:	6463      	str	r3, [r4, #68]	; 0x44
    7974:	4631      	mov	r1, r6
    7976:	462b      	mov	r3, r5
    7978:	462a      	mov	r2, r5
    797a:	2001      	movs	r0, #1
    797c:	47c0      	blx	r8
    797e:	4607      	mov	r7, r0
    7980:	b9f8      	cbnz	r0, 79c2 <unwind_phase2_forced+0xa6>
    7982:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7986:	a97a      	add	r1, sp, #488	; 0x1e8
    7988:	4620      	mov	r0, r4
    798a:	f000 fe95 	bl	86b8 <memcpy>
    798e:	f1ba 0f08 	cmp.w	sl, #8
    7992:	d11c      	bne.n	79ce <unwind_phase2_forced+0xb2>
    7994:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7996:	4628      	mov	r0, r5
    7998:	f7ff ff18 	bl	77cc <get_eit_entry>
    799c:	2f00      	cmp	r7, #0
    799e:	bf08      	it	eq
    79a0:	2609      	moveq	r6, #9
    79a2:	4607      	mov	r7, r0
    79a4:	bf18      	it	ne
    79a6:	260a      	movne	r6, #10
    79a8:	2800      	cmp	r0, #0
    79aa:	d0d1      	beq.n	7950 <unwind_phase2_forced+0x34>
    79ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    79ae:	f046 0110 	orr.w	r1, r6, #16
    79b2:	e9cd 4900 	strd	r4, r9, [sp]
    79b6:	462a      	mov	r2, r5
    79b8:	6463      	str	r3, [r4, #68]	; 0x44
    79ba:	2001      	movs	r0, #1
    79bc:	462b      	mov	r3, r5
    79be:	47c0      	blx	r8
    79c0:	b100      	cbz	r0, 79c4 <unwind_phase2_forced+0xa8>
    79c2:	2709      	movs	r7, #9
    79c4:	4638      	mov	r0, r7
    79c6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    79ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79ce:	f1ba 0f07 	cmp.w	sl, #7
    79d2:	d1f6      	bne.n	79c2 <unwind_phase2_forced+0xa6>
    79d4:	4638      	mov	r0, r7
    79d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    79d8:	f7ff ff7e 	bl	78d8 <_Unwind_DebugHook>
    79dc:	a803      	add	r0, sp, #12
    79de:	f000 fb9d 	bl	811c <__restore_core_regs>
    79e2:	bf00      	nop

000079e4 <_Unwind_GetCFA>:
    79e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
    79e6:	4770      	bx	lr

000079e8 <__gnu_Unwind_RaiseException>:
    79e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    79ec:	640b      	str	r3, [r1, #64]	; 0x40
    79ee:	1d0d      	adds	r5, r1, #4
    79f0:	460f      	mov	r7, r1
    79f2:	4606      	mov	r6, r0
    79f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    79f6:	b0f9      	sub	sp, #484	; 0x1e4
    79f8:	ac01      	add	r4, sp, #4
    79fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    79fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    79fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7a04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7a08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7a10:	9500      	str	r5, [sp, #0]
    7a12:	e006      	b.n	7a22 <__gnu_Unwind_RaiseException+0x3a>
    7a14:	6933      	ldr	r3, [r6, #16]
    7a16:	466a      	mov	r2, sp
    7a18:	4631      	mov	r1, r6
    7a1a:	4798      	blx	r3
    7a1c:	2808      	cmp	r0, #8
    7a1e:	4604      	mov	r4, r0
    7a20:	d108      	bne.n	7a34 <__gnu_Unwind_RaiseException+0x4c>
    7a22:	9910      	ldr	r1, [sp, #64]	; 0x40
    7a24:	4630      	mov	r0, r6
    7a26:	f7ff fed1 	bl	77cc <get_eit_entry>
    7a2a:	2800      	cmp	r0, #0
    7a2c:	d0f2      	beq.n	7a14 <__gnu_Unwind_RaiseException+0x2c>
    7a2e:	2009      	movs	r0, #9
    7a30:	b079      	add	sp, #484	; 0x1e4
    7a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a34:	4668      	mov	r0, sp
    7a36:	f7ff ff1b 	bl	7870 <restore_non_core_regs>
    7a3a:	2c06      	cmp	r4, #6
    7a3c:	d1f7      	bne.n	7a2e <__gnu_Unwind_RaiseException+0x46>
    7a3e:	4639      	mov	r1, r7
    7a40:	4630      	mov	r0, r6
    7a42:	f7ff ff4b 	bl	78dc <unwind_phase2>
    7a46:	bf00      	nop

00007a48 <__gnu_Unwind_ForcedUnwind>:
    7a48:	b430      	push	{r4, r5}
    7a4a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    7a4c:	60c1      	str	r1, [r0, #12]
    7a4e:	6182      	str	r2, [r0, #24]
    7a50:	4619      	mov	r1, r3
    7a52:	641d      	str	r5, [r3, #64]	; 0x40
    7a54:	2200      	movs	r2, #0
    7a56:	bc30      	pop	{r4, r5}
    7a58:	e760      	b.n	791c <unwind_phase2_forced>
    7a5a:	bf00      	nop

00007a5c <__gnu_Unwind_Resume>:
    7a5c:	b570      	push	{r4, r5, r6, lr}
    7a5e:	68c6      	ldr	r6, [r0, #12]
    7a60:	6943      	ldr	r3, [r0, #20]
    7a62:	640b      	str	r3, [r1, #64]	; 0x40
    7a64:	b9be      	cbnz	r6, 7a96 <__gnu_Unwind_Resume+0x3a>
    7a66:	6903      	ldr	r3, [r0, #16]
    7a68:	460a      	mov	r2, r1
    7a6a:	4604      	mov	r4, r0
    7a6c:	460d      	mov	r5, r1
    7a6e:	4601      	mov	r1, r0
    7a70:	2002      	movs	r0, #2
    7a72:	4798      	blx	r3
    7a74:	2807      	cmp	r0, #7
    7a76:	d007      	beq.n	7a88 <__gnu_Unwind_Resume+0x2c>
    7a78:	2808      	cmp	r0, #8
    7a7a:	d103      	bne.n	7a84 <__gnu_Unwind_Resume+0x28>
    7a7c:	4629      	mov	r1, r5
    7a7e:	4620      	mov	r0, r4
    7a80:	f7ff ff2c 	bl	78dc <unwind_phase2>
    7a84:	f000 fddc 	bl	8640 <abort>
    7a88:	4630      	mov	r0, r6
    7a8a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7a8c:	f7ff ff24 	bl	78d8 <_Unwind_DebugHook>
    7a90:	1d28      	adds	r0, r5, #4
    7a92:	f000 fb43 	bl	811c <__restore_core_regs>
    7a96:	2201      	movs	r2, #1
    7a98:	f7ff ff40 	bl	791c <unwind_phase2_forced>
    7a9c:	f000 fdd0 	bl	8640 <abort>

00007aa0 <__gnu_Unwind_Resume_or_Rethrow>:
    7aa0:	68c2      	ldr	r2, [r0, #12]
    7aa2:	b11a      	cbz	r2, 7aac <__gnu_Unwind_Resume_or_Rethrow+0xc>
    7aa4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    7aa6:	640a      	str	r2, [r1, #64]	; 0x40
    7aa8:	2200      	movs	r2, #0
    7aaa:	e737      	b.n	791c <unwind_phase2_forced>
    7aac:	e79c      	b.n	79e8 <__gnu_Unwind_RaiseException>
    7aae:	bf00      	nop

00007ab0 <_Unwind_Complete>:
    7ab0:	4770      	bx	lr
    7ab2:	bf00      	nop

00007ab4 <_Unwind_DeleteException>:
    7ab4:	6883      	ldr	r3, [r0, #8]
    7ab6:	b113      	cbz	r3, 7abe <_Unwind_DeleteException+0xa>
    7ab8:	4601      	mov	r1, r0
    7aba:	2001      	movs	r0, #1
    7abc:	4718      	bx	r3
    7abe:	4770      	bx	lr

00007ac0 <_Unwind_VRS_Get>:
    7ac0:	2904      	cmp	r1, #4
    7ac2:	d807      	bhi.n	7ad4 <_Unwind_VRS_Get+0x14>
    7ac4:	e8df f001 	tbb	[pc, r1]
    7ac8:	08060803 	.word	0x08060803
    7acc:	08          	.byte	0x08
    7acd:	00          	.byte	0x00
    7ace:	b90b      	cbnz	r3, 7ad4 <_Unwind_VRS_Get+0x14>
    7ad0:	2a0f      	cmp	r2, #15
    7ad2:	d903      	bls.n	7adc <_Unwind_VRS_Get+0x1c>
    7ad4:	2002      	movs	r0, #2
    7ad6:	4770      	bx	lr
    7ad8:	2001      	movs	r0, #1
    7ada:	4770      	bx	lr
    7adc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    7ae0:	4618      	mov	r0, r3
    7ae2:	6853      	ldr	r3, [r2, #4]
    7ae4:	9a00      	ldr	r2, [sp, #0]
    7ae6:	6013      	str	r3, [r2, #0]
    7ae8:	4770      	bx	lr
    7aea:	bf00      	nop

00007aec <_Unwind_GetGR>:
    7aec:	b510      	push	{r4, lr}
    7aee:	b084      	sub	sp, #16
    7af0:	2300      	movs	r3, #0
    7af2:	ac03      	add	r4, sp, #12
    7af4:	460a      	mov	r2, r1
    7af6:	9400      	str	r4, [sp, #0]
    7af8:	4619      	mov	r1, r3
    7afa:	f7ff ffe1 	bl	7ac0 <_Unwind_VRS_Get>
    7afe:	9803      	ldr	r0, [sp, #12]
    7b00:	b004      	add	sp, #16
    7b02:	bd10      	pop	{r4, pc}

00007b04 <_Unwind_VRS_Set>:
    7b04:	2904      	cmp	r1, #4
    7b06:	d807      	bhi.n	7b18 <_Unwind_VRS_Set+0x14>
    7b08:	e8df f001 	tbb	[pc, r1]
    7b0c:	08060803 	.word	0x08060803
    7b10:	08          	.byte	0x08
    7b11:	00          	.byte	0x00
    7b12:	b90b      	cbnz	r3, 7b18 <_Unwind_VRS_Set+0x14>
    7b14:	2a0f      	cmp	r2, #15
    7b16:	d903      	bls.n	7b20 <_Unwind_VRS_Set+0x1c>
    7b18:	2002      	movs	r0, #2
    7b1a:	4770      	bx	lr
    7b1c:	2001      	movs	r0, #1
    7b1e:	4770      	bx	lr
    7b20:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    7b24:	9a00      	ldr	r2, [sp, #0]
    7b26:	6812      	ldr	r2, [r2, #0]
    7b28:	6042      	str	r2, [r0, #4]
    7b2a:	4618      	mov	r0, r3
    7b2c:	4770      	bx	lr
    7b2e:	bf00      	nop

00007b30 <_Unwind_SetGR>:
    7b30:	b510      	push	{r4, lr}
    7b32:	b084      	sub	sp, #16
    7b34:	ac04      	add	r4, sp, #16
    7b36:	2300      	movs	r3, #0
    7b38:	f844 2d04 	str.w	r2, [r4, #-4]!
    7b3c:	460a      	mov	r2, r1
    7b3e:	9400      	str	r4, [sp, #0]
    7b40:	4619      	mov	r1, r3
    7b42:	f7ff ffdf 	bl	7b04 <_Unwind_VRS_Set>
    7b46:	b004      	add	sp, #16
    7b48:	bd10      	pop	{r4, pc}
    7b4a:	bf00      	nop

00007b4c <__gnu_Unwind_Backtrace>:
    7b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b4e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    7b50:	6413      	str	r3, [r2, #64]	; 0x40
    7b52:	1d15      	adds	r5, r2, #4
    7b54:	4607      	mov	r7, r0
    7b56:	460e      	mov	r6, r1
    7b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7b5a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    7b5e:	ac17      	add	r4, sp, #92	; 0x5c
    7b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7b6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7b6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7b76:	9516      	str	r5, [sp, #88]	; 0x58
    7b78:	e010      	b.n	7b9c <__gnu_Unwind_Backtrace+0x50>
    7b7a:	a816      	add	r0, sp, #88	; 0x58
    7b7c:	f7ff ffd8 	bl	7b30 <_Unwind_SetGR>
    7b80:	4631      	mov	r1, r6
    7b82:	a816      	add	r0, sp, #88	; 0x58
    7b84:	47b8      	blx	r7
    7b86:	aa16      	add	r2, sp, #88	; 0x58
    7b88:	4669      	mov	r1, sp
    7b8a:	b978      	cbnz	r0, 7bac <__gnu_Unwind_Backtrace+0x60>
    7b8c:	9b04      	ldr	r3, [sp, #16]
    7b8e:	2008      	movs	r0, #8
    7b90:	4798      	blx	r3
    7b92:	2805      	cmp	r0, #5
    7b94:	4604      	mov	r4, r0
    7b96:	d00a      	beq.n	7bae <__gnu_Unwind_Backtrace+0x62>
    7b98:	2809      	cmp	r0, #9
    7b9a:	d007      	beq.n	7bac <__gnu_Unwind_Backtrace+0x60>
    7b9c:	9926      	ldr	r1, [sp, #152]	; 0x98
    7b9e:	4668      	mov	r0, sp
    7ba0:	f7ff fe14 	bl	77cc <get_eit_entry>
    7ba4:	466a      	mov	r2, sp
    7ba6:	210c      	movs	r1, #12
    7ba8:	2800      	cmp	r0, #0
    7baa:	d0e6      	beq.n	7b7a <__gnu_Unwind_Backtrace+0x2e>
    7bac:	2409      	movs	r4, #9
    7bae:	a816      	add	r0, sp, #88	; 0x58
    7bb0:	f7ff fe5e 	bl	7870 <restore_non_core_regs>
    7bb4:	4620      	mov	r0, r4
    7bb6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    7bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007bbc <__gnu_unwind_pr_common>:
    7bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bc0:	460d      	mov	r5, r1
    7bc2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    7bc4:	b089      	sub	sp, #36	; 0x24
    7bc6:	1d0c      	adds	r4, r1, #4
    7bc8:	4616      	mov	r6, r2
    7bca:	f000 0b03 	and.w	fp, r0, #3
    7bce:	680a      	ldr	r2, [r1, #0]
    7bd0:	9406      	str	r4, [sp, #24]
    7bd2:	461f      	mov	r7, r3
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	d068      	beq.n	7caa <__gnu_unwind_pr_common+0xee>
    7bd8:	0c13      	lsrs	r3, r2, #16
    7bda:	b2d9      	uxtb	r1, r3
    7bdc:	0412      	lsls	r2, r2, #16
    7bde:	f88d 301d 	strb.w	r3, [sp, #29]
    7be2:	2302      	movs	r3, #2
    7be4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    7be8:	9205      	str	r2, [sp, #20]
    7bea:	f88d 301c 	strb.w	r3, [sp, #28]
    7bee:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7bf0:	f1bb 0f02 	cmp.w	fp, #2
    7bf4:	bf08      	it	eq
    7bf6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    7bf8:	f013 0301 	ands.w	r3, r3, #1
    7bfc:	d146      	bne.n	7c8c <__gnu_unwind_pr_common+0xd0>
    7bfe:	9301      	str	r3, [sp, #4]
    7c00:	f000 0308 	and.w	r3, r0, #8
    7c04:	9300      	str	r3, [sp, #0]
    7c06:	f8d4 9000 	ldr.w	r9, [r4]
    7c0a:	f1b9 0f00 	cmp.w	r9, #0
    7c0e:	f000 80f3 	beq.w	7df8 <__gnu_unwind_pr_common+0x23c>
    7c12:	2f02      	cmp	r7, #2
    7c14:	d045      	beq.n	7ca2 <__gnu_unwind_pr_common+0xe6>
    7c16:	f8b4 9000 	ldrh.w	r9, [r4]
    7c1a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    7c1e:	3404      	adds	r4, #4
    7c20:	6cab      	ldr	r3, [r5, #72]	; 0x48
    7c22:	f028 0a01 	bic.w	sl, r8, #1
    7c26:	210f      	movs	r1, #15
    7c28:	4630      	mov	r0, r6
    7c2a:	449a      	add	sl, r3
    7c2c:	f7ff ff5e 	bl	7aec <_Unwind_GetGR>
    7c30:	4582      	cmp	sl, r0
    7c32:	d834      	bhi.n	7c9e <__gnu_unwind_pr_common+0xe2>
    7c34:	f029 0301 	bic.w	r3, r9, #1
    7c38:	4453      	add	r3, sl
    7c3a:	4283      	cmp	r3, r0
    7c3c:	bf94      	ite	ls
    7c3e:	2000      	movls	r0, #0
    7c40:	2001      	movhi	r0, #1
    7c42:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7c46:	f008 0802 	and.w	r8, r8, #2
    7c4a:	f009 0901 	and.w	r9, r9, #1
    7c4e:	ea48 0809 	orr.w	r8, r8, r9
    7c52:	f1b8 0f01 	cmp.w	r8, #1
    7c56:	d03a      	beq.n	7cce <__gnu_unwind_pr_common+0x112>
    7c58:	d331      	bcc.n	7cbe <__gnu_unwind_pr_common+0x102>
    7c5a:	f1b8 0f02 	cmp.w	r8, #2
    7c5e:	d11a      	bne.n	7c96 <__gnu_unwind_pr_common+0xda>
    7c60:	6823      	ldr	r3, [r4, #0]
    7c62:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    7c66:	f1bb 0f00 	cmp.w	fp, #0
    7c6a:	d166      	bne.n	7d3a <__gnu_unwind_pr_common+0x17e>
    7c6c:	b130      	cbz	r0, 7c7c <__gnu_unwind_pr_common+0xc0>
    7c6e:	9a00      	ldr	r2, [sp, #0]
    7c70:	2a00      	cmp	r2, #0
    7c72:	d06c      	beq.n	7d4e <__gnu_unwind_pr_common+0x192>
    7c74:	f1ba 0f00 	cmp.w	sl, #0
    7c78:	f000 8090 	beq.w	7d9c <__gnu_unwind_pr_common+0x1e0>
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	da00      	bge.n	7c82 <__gnu_unwind_pr_common+0xc6>
    7c80:	3404      	adds	r4, #4
    7c82:	f10a 0301 	add.w	r3, sl, #1
    7c86:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7c8a:	e7bc      	b.n	7c06 <__gnu_unwind_pr_common+0x4a>
    7c8c:	4630      	mov	r0, r6
    7c8e:	a905      	add	r1, sp, #20
    7c90:	f000 fb46 	bl	8320 <__gnu_unwind_execute>
    7c94:	b178      	cbz	r0, 7cb6 <__gnu_unwind_pr_common+0xfa>
    7c96:	2009      	movs	r0, #9
    7c98:	b009      	add	sp, #36	; 0x24
    7c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c9e:	2000      	movs	r0, #0
    7ca0:	e7cf      	b.n	7c42 <__gnu_unwind_pr_common+0x86>
    7ca2:	f8d4 8004 	ldr.w	r8, [r4, #4]
    7ca6:	3408      	adds	r4, #8
    7ca8:	e7ba      	b.n	7c20 <__gnu_unwind_pr_common+0x64>
    7caa:	0212      	lsls	r2, r2, #8
    7cac:	2303      	movs	r3, #3
    7cae:	9205      	str	r2, [sp, #20]
    7cb0:	f8ad 301c 	strh.w	r3, [sp, #28]
    7cb4:	e79b      	b.n	7bee <__gnu_unwind_pr_common+0x32>
    7cb6:	2008      	movs	r0, #8
    7cb8:	b009      	add	sp, #36	; 0x24
    7cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cbe:	f1bb 0f00 	cmp.w	fp, #0
    7cc2:	d002      	beq.n	7cca <__gnu_unwind_pr_common+0x10e>
    7cc4:	2800      	cmp	r0, #0
    7cc6:	f040 80b4 	bne.w	7e32 <__gnu_unwind_pr_common+0x276>
    7cca:	3404      	adds	r4, #4
    7ccc:	e79b      	b.n	7c06 <__gnu_unwind_pr_common+0x4a>
    7cce:	f1bb 0f00 	cmp.w	fp, #0
    7cd2:	d118      	bne.n	7d06 <__gnu_unwind_pr_common+0x14a>
    7cd4:	b1a8      	cbz	r0, 7d02 <__gnu_unwind_pr_common+0x146>
    7cd6:	e9d4 2300 	ldrd	r2, r3, [r4]
    7cda:	1c99      	adds	r1, r3, #2
    7cdc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    7ce0:	d0d9      	beq.n	7c96 <__gnu_unwind_pr_common+0xda>
    7ce2:	f105 0158 	add.w	r1, r5, #88	; 0x58
    7ce6:	3301      	adds	r3, #1
    7ce8:	9104      	str	r1, [sp, #16]
    7cea:	f000 80b5 	beq.w	7e58 <__gnu_unwind_pr_common+0x29c>
    7cee:	1d20      	adds	r0, r4, #4
    7cf0:	f7ff fdea 	bl	78c8 <_Unwind_decode_typeinfo_ptr.isra.0>
    7cf4:	ab04      	add	r3, sp, #16
    7cf6:	4601      	mov	r1, r0
    7cf8:	4628      	mov	r0, r5
    7cfa:	f3af 8000 	nop.w
    7cfe:	2800      	cmp	r0, #0
    7d00:	d167      	bne.n	7dd2 <__gnu_unwind_pr_common+0x216>
    7d02:	3408      	adds	r4, #8
    7d04:	e77f      	b.n	7c06 <__gnu_unwind_pr_common+0x4a>
    7d06:	210d      	movs	r1, #13
    7d08:	4630      	mov	r0, r6
    7d0a:	f8d5 8020 	ldr.w	r8, [r5, #32]
    7d0e:	f7ff feed 	bl	7aec <_Unwind_GetGR>
    7d12:	4580      	cmp	r8, r0
    7d14:	d1f5      	bne.n	7d02 <__gnu_unwind_pr_common+0x146>
    7d16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7d18:	429c      	cmp	r4, r3
    7d1a:	d1f2      	bne.n	7d02 <__gnu_unwind_pr_common+0x146>
    7d1c:	4620      	mov	r0, r4
    7d1e:	f7ff fd07 	bl	7730 <selfrel_offset31>
    7d22:	210f      	movs	r1, #15
    7d24:	4602      	mov	r2, r0
    7d26:	4630      	mov	r0, r6
    7d28:	f7ff ff02 	bl	7b30 <_Unwind_SetGR>
    7d2c:	4630      	mov	r0, r6
    7d2e:	462a      	mov	r2, r5
    7d30:	2100      	movs	r1, #0
    7d32:	f7ff fefd 	bl	7b30 <_Unwind_SetGR>
    7d36:	2007      	movs	r0, #7
    7d38:	e7ae      	b.n	7c98 <__gnu_unwind_pr_common+0xdc>
    7d3a:	210d      	movs	r1, #13
    7d3c:	4630      	mov	r0, r6
    7d3e:	f8d5 8020 	ldr.w	r8, [r5, #32]
    7d42:	f7ff fed3 	bl	7aec <_Unwind_GetGR>
    7d46:	4580      	cmp	r8, r0
    7d48:	d032      	beq.n	7db0 <__gnu_unwind_pr_common+0x1f4>
    7d4a:	6823      	ldr	r3, [r4, #0]
    7d4c:	e796      	b.n	7c7c <__gnu_unwind_pr_common+0xc0>
    7d4e:	f1ba 0f00 	cmp.w	sl, #0
    7d52:	d023      	beq.n	7d9c <__gnu_unwind_pr_common+0x1e0>
    7d54:	f105 0358 	add.w	r3, r5, #88	; 0x58
    7d58:	f104 0804 	add.w	r8, r4, #4
    7d5c:	f8cd b008 	str.w	fp, [sp, #8]
    7d60:	f8dd 9000 	ldr.w	r9, [sp]
    7d64:	9703      	str	r7, [sp, #12]
    7d66:	46a3      	mov	fp, r4
    7d68:	461c      	mov	r4, r3
    7d6a:	e002      	b.n	7d72 <__gnu_unwind_pr_common+0x1b6>
    7d6c:	4557      	cmp	r7, sl
    7d6e:	46b9      	mov	r9, r7
    7d70:	d040      	beq.n	7df4 <__gnu_unwind_pr_common+0x238>
    7d72:	4640      	mov	r0, r8
    7d74:	9404      	str	r4, [sp, #16]
    7d76:	f7ff fda7 	bl	78c8 <_Unwind_decode_typeinfo_ptr.isra.0>
    7d7a:	ab04      	add	r3, sp, #16
    7d7c:	4601      	mov	r1, r0
    7d7e:	2200      	movs	r2, #0
    7d80:	4628      	mov	r0, r5
    7d82:	f3af 8000 	nop.w
    7d86:	f109 0701 	add.w	r7, r9, #1
    7d8a:	f108 0804 	add.w	r8, r8, #4
    7d8e:	2800      	cmp	r0, #0
    7d90:	d0ec      	beq.n	7d6c <__gnu_unwind_pr_common+0x1b0>
    7d92:	45d1      	cmp	r9, sl
    7d94:	465c      	mov	r4, fp
    7d96:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    7d9a:	d1d6      	bne.n	7d4a <__gnu_unwind_pr_common+0x18e>
    7d9c:	4630      	mov	r0, r6
    7d9e:	210d      	movs	r1, #13
    7da0:	f7ff fea4 	bl	7aec <_Unwind_GetGR>
    7da4:	9b04      	ldr	r3, [sp, #16]
    7da6:	6228      	str	r0, [r5, #32]
    7da8:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    7dac:	2006      	movs	r0, #6
    7dae:	e773      	b.n	7c98 <__gnu_unwind_pr_common+0xdc>
    7db0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7db2:	429c      	cmp	r4, r3
    7db4:	d1c9      	bne.n	7d4a <__gnu_unwind_pr_common+0x18e>
    7db6:	2204      	movs	r2, #4
    7db8:	f04f 0800 	mov.w	r8, #0
    7dbc:	18a3      	adds	r3, r4, r2
    7dbe:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    7dc2:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    7dc6:	6823      	ldr	r3, [r4, #0]
    7dc8:	4543      	cmp	r3, r8
    7dca:	db4d      	blt.n	7e68 <__gnu_unwind_pr_common+0x2ac>
    7dcc:	2301      	movs	r3, #1
    7dce:	9301      	str	r3, [sp, #4]
    7dd0:	e757      	b.n	7c82 <__gnu_unwind_pr_common+0xc6>
    7dd2:	4680      	mov	r8, r0
    7dd4:	210d      	movs	r1, #13
    7dd6:	4630      	mov	r0, r6
    7dd8:	f7ff fe88 	bl	7aec <_Unwind_GetGR>
    7ddc:	f1b8 0f02 	cmp.w	r8, #2
    7de0:	6228      	str	r0, [r5, #32]
    7de2:	d13e      	bne.n	7e62 <__gnu_unwind_pr_common+0x2a6>
    7de4:	462b      	mov	r3, r5
    7de6:	9a04      	ldr	r2, [sp, #16]
    7de8:	f843 2f2c 	str.w	r2, [r3, #44]!
    7dec:	626b      	str	r3, [r5, #36]	; 0x24
    7dee:	62ac      	str	r4, [r5, #40]	; 0x28
    7df0:	2006      	movs	r0, #6
    7df2:	e751      	b.n	7c98 <__gnu_unwind_pr_common+0xdc>
    7df4:	465c      	mov	r4, fp
    7df6:	e7d1      	b.n	7d9c <__gnu_unwind_pr_common+0x1e0>
    7df8:	a905      	add	r1, sp, #20
    7dfa:	4630      	mov	r0, r6
    7dfc:	f000 fa90 	bl	8320 <__gnu_unwind_execute>
    7e00:	2800      	cmp	r0, #0
    7e02:	f47f af48 	bne.w	7c96 <__gnu_unwind_pr_common+0xda>
    7e06:	9b01      	ldr	r3, [sp, #4]
    7e08:	2b00      	cmp	r3, #0
    7e0a:	f43f af54 	beq.w	7cb6 <__gnu_unwind_pr_common+0xfa>
    7e0e:	210f      	movs	r1, #15
    7e10:	4630      	mov	r0, r6
    7e12:	f7ff fe6b 	bl	7aec <_Unwind_GetGR>
    7e16:	210e      	movs	r1, #14
    7e18:	4602      	mov	r2, r0
    7e1a:	4630      	mov	r0, r6
    7e1c:	f7ff fe88 	bl	7b30 <_Unwind_SetGR>
    7e20:	4630      	mov	r0, r6
    7e22:	4a1a      	ldr	r2, [pc, #104]	; (7e8c <__gnu_unwind_pr_common+0x2d0>)
    7e24:	210f      	movs	r1, #15
    7e26:	f7ff fe83 	bl	7b30 <_Unwind_SetGR>
    7e2a:	2007      	movs	r0, #7
    7e2c:	b009      	add	sp, #36	; 0x24
    7e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e32:	4620      	mov	r0, r4
    7e34:	f7ff fc7c 	bl	7730 <selfrel_offset31>
    7e38:	3404      	adds	r4, #4
    7e3a:	4607      	mov	r7, r0
    7e3c:	63ac      	str	r4, [r5, #56]	; 0x38
    7e3e:	4628      	mov	r0, r5
    7e40:	f3af 8000 	nop.w
    7e44:	2800      	cmp	r0, #0
    7e46:	f43f af26 	beq.w	7c96 <__gnu_unwind_pr_common+0xda>
    7e4a:	4630      	mov	r0, r6
    7e4c:	463a      	mov	r2, r7
    7e4e:	210f      	movs	r1, #15
    7e50:	f7ff fe6e 	bl	7b30 <_Unwind_SetGR>
    7e54:	2007      	movs	r0, #7
    7e56:	e71f      	b.n	7c98 <__gnu_unwind_pr_common+0xdc>
    7e58:	4630      	mov	r0, r6
    7e5a:	210d      	movs	r1, #13
    7e5c:	f7ff fe46 	bl	7aec <_Unwind_GetGR>
    7e60:	6228      	str	r0, [r5, #32]
    7e62:	9b04      	ldr	r3, [sp, #16]
    7e64:	626b      	str	r3, [r5, #36]	; 0x24
    7e66:	e7c2      	b.n	7dee <__gnu_unwind_pr_common+0x232>
    7e68:	f10a 0001 	add.w	r0, sl, #1
    7e6c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7e70:	f7ff fc5e 	bl	7730 <selfrel_offset31>
    7e74:	210f      	movs	r1, #15
    7e76:	4602      	mov	r2, r0
    7e78:	4630      	mov	r0, r6
    7e7a:	f7ff fe59 	bl	7b30 <_Unwind_SetGR>
    7e7e:	4630      	mov	r0, r6
    7e80:	462a      	mov	r2, r5
    7e82:	4641      	mov	r1, r8
    7e84:	f7ff fe54 	bl	7b30 <_Unwind_SetGR>
    7e88:	2007      	movs	r0, #7
    7e8a:	e705      	b.n	7c98 <__gnu_unwind_pr_common+0xdc>
    7e8c:	00000000 	.word	0x00000000

00007e90 <__aeabi_unwind_cpp_pr0>:
    7e90:	2300      	movs	r3, #0
    7e92:	e693      	b.n	7bbc <__gnu_unwind_pr_common>

00007e94 <__aeabi_unwind_cpp_pr1>:
    7e94:	2301      	movs	r3, #1
    7e96:	e691      	b.n	7bbc <__gnu_unwind_pr_common>

00007e98 <__aeabi_unwind_cpp_pr2>:
    7e98:	2302      	movs	r3, #2
    7e9a:	e68f      	b.n	7bbc <__gnu_unwind_pr_common>

00007e9c <_Unwind_VRS_Pop>:
    7e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ea0:	4605      	mov	r5, r0
    7ea2:	b0c4      	sub	sp, #272	; 0x110
    7ea4:	2904      	cmp	r1, #4
    7ea6:	d806      	bhi.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7ea8:	e8df f001 	tbb	[pc, r1]
    7eac:	03052b4d 	.word	0x03052b4d
    7eb0:	09          	.byte	0x09
    7eb1:	00          	.byte	0x00
    7eb2:	2b03      	cmp	r3, #3
    7eb4:	d05f      	beq.n	7f76 <_Unwind_VRS_Pop+0xda>
    7eb6:	2002      	movs	r0, #2
    7eb8:	b044      	add	sp, #272	; 0x110
    7eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d1f9      	bne.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7ec2:	2a10      	cmp	r2, #16
    7ec4:	d8f7      	bhi.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7ec6:	682b      	ldr	r3, [r5, #0]
    7ec8:	06dc      	lsls	r4, r3, #27
    7eca:	f100 80f4 	bmi.w	80b6 <_Unwind_VRS_Pop+0x21a>
    7ece:	ac22      	add	r4, sp, #136	; 0x88
    7ed0:	4620      	mov	r0, r4
    7ed2:	9201      	str	r2, [sp, #4]
    7ed4:	f000 f994 	bl	8200 <__gnu_Unwind_Save_WMMXC>
    7ed8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    7eda:	9a01      	ldr	r2, [sp, #4]
    7edc:	2300      	movs	r3, #0
    7ede:	2601      	movs	r6, #1
    7ee0:	fa06 f103 	lsl.w	r1, r6, r3
    7ee4:	4211      	tst	r1, r2
    7ee6:	d003      	beq.n	7ef0 <_Unwind_VRS_Pop+0x54>
    7ee8:	6801      	ldr	r1, [r0, #0]
    7eea:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    7eee:	3004      	adds	r0, #4
    7ef0:	3301      	adds	r3, #1
    7ef2:	2b04      	cmp	r3, #4
    7ef4:	d1f4      	bne.n	7ee0 <_Unwind_VRS_Pop+0x44>
    7ef6:	63a8      	str	r0, [r5, #56]	; 0x38
    7ef8:	4620      	mov	r0, r4
    7efa:	f000 f977 	bl	81ec <__gnu_Unwind_Restore_WMMXC>
    7efe:	2000      	movs	r0, #0
    7f00:	e7da      	b.n	7eb8 <_Unwind_VRS_Pop+0x1c>
    7f02:	2b01      	cmp	r3, #1
    7f04:	ea4f 4612 	mov.w	r6, r2, lsr #16
    7f08:	b297      	uxth	r7, r2
    7f0a:	d052      	beq.n	7fb2 <_Unwind_VRS_Pop+0x116>
    7f0c:	2b05      	cmp	r3, #5
    7f0e:	d1d2      	bne.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7f10:	eb06 0807 	add.w	r8, r6, r7
    7f14:	f1b8 0f20 	cmp.w	r8, #32
    7f18:	d8cd      	bhi.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7f1a:	2e0f      	cmp	r6, #15
    7f1c:	f240 8099 	bls.w	8052 <_Unwind_VRS_Pop+0x1b6>
    7f20:	46b8      	mov	r8, r7
    7f22:	2f00      	cmp	r7, #0
    7f24:	f040 80db 	bne.w	80de <_Unwind_VRS_Pop+0x242>
    7f28:	6baa      	ldr	r2, [r5, #56]	; 0x38
    7f2a:	63aa      	str	r2, [r5, #56]	; 0x38
    7f2c:	2e0f      	cmp	r6, #15
    7f2e:	f240 80be 	bls.w	80ae <_Unwind_VRS_Pop+0x212>
    7f32:	f1b8 0f00 	cmp.w	r8, #0
    7f36:	d002      	beq.n	7f3e <_Unwind_VRS_Pop+0xa2>
    7f38:	a802      	add	r0, sp, #8
    7f3a:	f000 f90b 	bl	8154 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7f3e:	2000      	movs	r0, #0
    7f40:	b044      	add	sp, #272	; 0x110
    7f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f46:	2b00      	cmp	r3, #0
    7f48:	d1b5      	bne.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7f4a:	6bac      	ldr	r4, [r5, #56]	; 0x38
    7f4c:	b297      	uxth	r7, r2
    7f4e:	1d28      	adds	r0, r5, #4
    7f50:	2601      	movs	r6, #1
    7f52:	fa06 f103 	lsl.w	r1, r6, r3
    7f56:	4239      	tst	r1, r7
    7f58:	f103 0301 	add.w	r3, r3, #1
    7f5c:	d002      	beq.n	7f64 <_Unwind_VRS_Pop+0xc8>
    7f5e:	6821      	ldr	r1, [r4, #0]
    7f60:	6001      	str	r1, [r0, #0]
    7f62:	3404      	adds	r4, #4
    7f64:	2b10      	cmp	r3, #16
    7f66:	f100 0004 	add.w	r0, r0, #4
    7f6a:	d1f2      	bne.n	7f52 <_Unwind_VRS_Pop+0xb6>
    7f6c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    7f70:	d1e5      	bne.n	7f3e <_Unwind_VRS_Pop+0xa2>
    7f72:	63ac      	str	r4, [r5, #56]	; 0x38
    7f74:	e7a0      	b.n	7eb8 <_Unwind_VRS_Pop+0x1c>
    7f76:	0c16      	lsrs	r6, r2, #16
    7f78:	b297      	uxth	r7, r2
    7f7a:	19f3      	adds	r3, r6, r7
    7f7c:	2b10      	cmp	r3, #16
    7f7e:	d89a      	bhi.n	7eb6 <_Unwind_VRS_Pop+0x1a>
    7f80:	682b      	ldr	r3, [r5, #0]
    7f82:	071a      	lsls	r2, r3, #28
    7f84:	d45d      	bmi.n	8042 <_Unwind_VRS_Pop+0x1a6>
    7f86:	ac22      	add	r4, sp, #136	; 0x88
    7f88:	4620      	mov	r0, r4
    7f8a:	f000 f90d 	bl	81a8 <__gnu_Unwind_Save_WMMXD>
    7f8e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    7f92:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7f94:	b13f      	cbz	r7, 7fa6 <_Unwind_VRS_Pop+0x10a>
    7f96:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    7f9a:	6818      	ldr	r0, [r3, #0]
    7f9c:	f841 0b04 	str.w	r0, [r1], #4
    7fa0:	3304      	adds	r3, #4
    7fa2:	4293      	cmp	r3, r2
    7fa4:	d1f9      	bne.n	7f9a <_Unwind_VRS_Pop+0xfe>
    7fa6:	4620      	mov	r0, r4
    7fa8:	63ab      	str	r3, [r5, #56]	; 0x38
    7faa:	f000 f8db 	bl	8164 <__gnu_Unwind_Restore_WMMXD>
    7fae:	2000      	movs	r0, #0
    7fb0:	e782      	b.n	7eb8 <_Unwind_VRS_Pop+0x1c>
    7fb2:	19f2      	adds	r2, r6, r7
    7fb4:	2a10      	cmp	r2, #16
    7fb6:	f63f af7e 	bhi.w	7eb6 <_Unwind_VRS_Pop+0x1a>
    7fba:	2e0f      	cmp	r6, #15
    7fbc:	f63f af7b 	bhi.w	7eb6 <_Unwind_VRS_Pop+0x1a>
    7fc0:	682a      	ldr	r2, [r5, #0]
    7fc2:	07d1      	lsls	r1, r2, #31
    7fc4:	d508      	bpl.n	7fd8 <_Unwind_VRS_Pop+0x13c>
    7fc6:	4628      	mov	r0, r5
    7fc8:	f022 0203 	bic.w	r2, r2, #3
    7fcc:	f840 2b48 	str.w	r2, [r0], #72
    7fd0:	9301      	str	r3, [sp, #4]
    7fd2:	f000 f8b3 	bl	813c <__gnu_Unwind_Save_VFP>
    7fd6:	9b01      	ldr	r3, [sp, #4]
    7fd8:	9301      	str	r3, [sp, #4]
    7fda:	ac22      	add	r4, sp, #136	; 0x88
    7fdc:	4620      	mov	r0, r4
    7fde:	f000 f8ad 	bl	813c <__gnu_Unwind_Save_VFP>
    7fe2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7fe4:	9b01      	ldr	r3, [sp, #4]
    7fe6:	2f00      	cmp	r7, #0
    7fe8:	f000 8095 	beq.w	8116 <_Unwind_VRS_Pop+0x27a>
    7fec:	007f      	lsls	r7, r7, #1
    7fee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    7ff2:	f04f 0800 	mov.w	r8, #0
    7ff6:	3c04      	subs	r4, #4
    7ff8:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    7ffc:	f851 0b04 	ldr.w	r0, [r1], #4
    8000:	f844 0f04 	str.w	r0, [r4, #4]!
    8004:	4291      	cmp	r1, r2
    8006:	d1f9      	bne.n	7ffc <_Unwind_VRS_Pop+0x160>
    8008:	f1b8 0f00 	cmp.w	r8, #0
    800c:	d00f      	beq.n	802e <_Unwind_VRS_Pop+0x192>
    800e:	ac02      	add	r4, sp, #8
    8010:	2e10      	cmp	r6, #16
    8012:	4631      	mov	r1, r6
    8014:	bf38      	it	cc
    8016:	2110      	movcc	r1, #16
    8018:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    801c:	3984      	subs	r1, #132	; 0x84
    801e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    8022:	f852 0b04 	ldr.w	r0, [r2], #4
    8026:	f841 0f04 	str.w	r0, [r1, #4]!
    802a:	4294      	cmp	r4, r2
    802c:	d1f9      	bne.n	8022 <_Unwind_VRS_Pop+0x186>
    802e:	2b01      	cmp	r3, #1
    8030:	f47f af7b 	bne.w	7f2a <_Unwind_VRS_Pop+0x8e>
    8034:	ac22      	add	r4, sp, #136	; 0x88
    8036:	3204      	adds	r2, #4
    8038:	63aa      	str	r2, [r5, #56]	; 0x38
    803a:	4620      	mov	r0, r4
    803c:	f000 f87a 	bl	8134 <__gnu_Unwind_Restore_VFP>
    8040:	e77d      	b.n	7f3e <_Unwind_VRS_Pop+0xa2>
    8042:	f023 0308 	bic.w	r3, r3, #8
    8046:	602b      	str	r3, [r5, #0]
    8048:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    804c:	f000 f8ac 	bl	81a8 <__gnu_Unwind_Save_WMMXD>
    8050:	e799      	b.n	7f86 <_Unwind_VRS_Pop+0xea>
    8052:	f1b8 0f10 	cmp.w	r8, #16
    8056:	682a      	ldr	r2, [r5, #0]
    8058:	d943      	bls.n	80e2 <_Unwind_VRS_Pop+0x246>
    805a:	07d0      	lsls	r0, r2, #31
    805c:	f1a8 0810 	sub.w	r8, r8, #16
    8060:	d50b      	bpl.n	807a <_Unwind_VRS_Pop+0x1de>
    8062:	4628      	mov	r0, r5
    8064:	f022 0201 	bic.w	r2, r2, #1
    8068:	f042 0202 	orr.w	r2, r2, #2
    806c:	f840 2b48 	str.w	r2, [r0], #72
    8070:	9301      	str	r3, [sp, #4]
    8072:	f000 f86b 	bl	814c <__gnu_Unwind_Save_VFP_D>
    8076:	682a      	ldr	r2, [r5, #0]
    8078:	9b01      	ldr	r3, [sp, #4]
    807a:	0751      	lsls	r1, r2, #29
    807c:	d425      	bmi.n	80ca <_Unwind_VRS_Pop+0x22e>
    807e:	2e0f      	cmp	r6, #15
    8080:	d804      	bhi.n	808c <_Unwind_VRS_Pop+0x1f0>
    8082:	a822      	add	r0, sp, #136	; 0x88
    8084:	9301      	str	r3, [sp, #4]
    8086:	f000 f861 	bl	814c <__gnu_Unwind_Save_VFP_D>
    808a:	9b01      	ldr	r3, [sp, #4]
    808c:	9301      	str	r3, [sp, #4]
    808e:	ac02      	add	r4, sp, #8
    8090:	4620      	mov	r0, r4
    8092:	f000 f863 	bl	815c <__gnu_Unwind_Save_VFP_D_16_to_31>
    8096:	f1c6 0110 	rsb	r1, r6, #16
    809a:	2900      	cmp	r1, #0
    809c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    809e:	9b01      	ldr	r3, [sp, #4]
    80a0:	ddb6      	ble.n	8010 <_Unwind_VRS_Pop+0x174>
    80a2:	ac22      	add	r4, sp, #136	; 0x88
    80a4:	004f      	lsls	r7, r1, #1
    80a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    80aa:	4611      	mov	r1, r2
    80ac:	e7a3      	b.n	7ff6 <_Unwind_VRS_Pop+0x15a>
    80ae:	a822      	add	r0, sp, #136	; 0x88
    80b0:	f000 f848 	bl	8144 <__gnu_Unwind_Restore_VFP_D>
    80b4:	e73d      	b.n	7f32 <_Unwind_VRS_Pop+0x96>
    80b6:	f023 0310 	bic.w	r3, r3, #16
    80ba:	602b      	str	r3, [r5, #0]
    80bc:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    80c0:	9201      	str	r2, [sp, #4]
    80c2:	f000 f89d 	bl	8200 <__gnu_Unwind_Save_WMMXC>
    80c6:	9a01      	ldr	r2, [sp, #4]
    80c8:	e701      	b.n	7ece <_Unwind_VRS_Pop+0x32>
    80ca:	4628      	mov	r0, r5
    80cc:	f022 0204 	bic.w	r2, r2, #4
    80d0:	f840 2bd0 	str.w	r2, [r0], #208
    80d4:	9301      	str	r3, [sp, #4]
    80d6:	f000 f841 	bl	815c <__gnu_Unwind_Save_VFP_D_16_to_31>
    80da:	9b01      	ldr	r3, [sp, #4]
    80dc:	e7cf      	b.n	807e <_Unwind_VRS_Pop+0x1e2>
    80de:	682a      	ldr	r2, [r5, #0]
    80e0:	e7cb      	b.n	807a <_Unwind_VRS_Pop+0x1de>
    80e2:	07d0      	lsls	r0, r2, #31
    80e4:	d50a      	bpl.n	80fc <_Unwind_VRS_Pop+0x260>
    80e6:	4628      	mov	r0, r5
    80e8:	f022 0201 	bic.w	r2, r2, #1
    80ec:	f042 0202 	orr.w	r2, r2, #2
    80f0:	f840 2b48 	str.w	r2, [r0], #72
    80f4:	9301      	str	r3, [sp, #4]
    80f6:	f000 f829 	bl	814c <__gnu_Unwind_Save_VFP_D>
    80fa:	9b01      	ldr	r3, [sp, #4]
    80fc:	9301      	str	r3, [sp, #4]
    80fe:	ac22      	add	r4, sp, #136	; 0x88
    8100:	4620      	mov	r0, r4
    8102:	f000 f823 	bl	814c <__gnu_Unwind_Save_VFP_D>
    8106:	46b8      	mov	r8, r7
    8108:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    810a:	9b01      	ldr	r3, [sp, #4]
    810c:	2f00      	cmp	r7, #0
    810e:	f47f af6d 	bne.w	7fec <_Unwind_VRS_Pop+0x150>
    8112:	460a      	mov	r2, r1
    8114:	e709      	b.n	7f2a <_Unwind_VRS_Pop+0x8e>
    8116:	460a      	mov	r2, r1
    8118:	e78d      	b.n	8036 <_Unwind_VRS_Pop+0x19a>
    811a:	bf00      	nop

0000811c <__restore_core_regs>:
    811c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    8120:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    8124:	469c      	mov	ip, r3
    8126:	46a6      	mov	lr, r4
    8128:	f84c 5d04 	str.w	r5, [ip, #-4]!
    812c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    8130:	46e5      	mov	sp, ip
    8132:	bd00      	pop	{pc}

00008134 <__gnu_Unwind_Restore_VFP>:
    8134:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    8138:	4770      	bx	lr
    813a:	bf00      	nop

0000813c <__gnu_Unwind_Save_VFP>:
    813c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    8140:	4770      	bx	lr
    8142:	bf00      	nop

00008144 <__gnu_Unwind_Restore_VFP_D>:
    8144:	ec90 0b20 	vldmia	r0, {d0-d15}
    8148:	4770      	bx	lr
    814a:	bf00      	nop

0000814c <__gnu_Unwind_Save_VFP_D>:
    814c:	ec80 0b20 	vstmia	r0, {d0-d15}
    8150:	4770      	bx	lr
    8152:	bf00      	nop

00008154 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    8154:	ecd0 0b20 	vldmia	r0, {d16-d31}
    8158:	4770      	bx	lr
    815a:	bf00      	nop

0000815c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    815c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    8160:	4770      	bx	lr
    8162:	bf00      	nop

00008164 <__gnu_Unwind_Restore_WMMXD>:
    8164:	ecf0 0102 	ldfe	f0, [r0], #8
    8168:	ecf0 1102 	ldfe	f1, [r0], #8
    816c:	ecf0 2102 	ldfe	f2, [r0], #8
    8170:	ecf0 3102 	ldfe	f3, [r0], #8
    8174:	ecf0 4102 	ldfe	f4, [r0], #8
    8178:	ecf0 5102 	ldfe	f5, [r0], #8
    817c:	ecf0 6102 	ldfe	f6, [r0], #8
    8180:	ecf0 7102 	ldfe	f7, [r0], #8
    8184:	ecf0 8102 	ldfp	f0, [r0], #8
    8188:	ecf0 9102 	ldfp	f1, [r0], #8
    818c:	ecf0 a102 	ldfp	f2, [r0], #8
    8190:	ecf0 b102 	ldfp	f3, [r0], #8
    8194:	ecf0 c102 	ldfp	f4, [r0], #8
    8198:	ecf0 d102 	ldfp	f5, [r0], #8
    819c:	ecf0 e102 	ldfp	f6, [r0], #8
    81a0:	ecf0 f102 	ldfp	f7, [r0], #8
    81a4:	4770      	bx	lr
    81a6:	bf00      	nop

000081a8 <__gnu_Unwind_Save_WMMXD>:
    81a8:	ece0 0102 	stfe	f0, [r0], #8
    81ac:	ece0 1102 	stfe	f1, [r0], #8
    81b0:	ece0 2102 	stfe	f2, [r0], #8
    81b4:	ece0 3102 	stfe	f3, [r0], #8
    81b8:	ece0 4102 	stfe	f4, [r0], #8
    81bc:	ece0 5102 	stfe	f5, [r0], #8
    81c0:	ece0 6102 	stfe	f6, [r0], #8
    81c4:	ece0 7102 	stfe	f7, [r0], #8
    81c8:	ece0 8102 	stfp	f0, [r0], #8
    81cc:	ece0 9102 	stfp	f1, [r0], #8
    81d0:	ece0 a102 	stfp	f2, [r0], #8
    81d4:	ece0 b102 	stfp	f3, [r0], #8
    81d8:	ece0 c102 	stfp	f4, [r0], #8
    81dc:	ece0 d102 	stfp	f5, [r0], #8
    81e0:	ece0 e102 	stfp	f6, [r0], #8
    81e4:	ece0 f102 	stfp	f7, [r0], #8
    81e8:	4770      	bx	lr
    81ea:	bf00      	nop

000081ec <__gnu_Unwind_Restore_WMMXC>:
    81ec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    81f0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    81f4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    81f8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    81fc:	4770      	bx	lr
    81fe:	bf00      	nop

00008200 <__gnu_Unwind_Save_WMMXC>:
    8200:	fca0 8101 	stc2	1, cr8, [r0], #4
    8204:	fca0 9101 	stc2	1, cr9, [r0], #4
    8208:	fca0 a101 	stc2	1, cr10, [r0], #4
    820c:	fca0 b101 	stc2	1, cr11, [r0], #4
    8210:	4770      	bx	lr
    8212:	bf00      	nop

00008214 <_Unwind_RaiseException>:
    8214:	46ec      	mov	ip, sp
    8216:	b500      	push	{lr}
    8218:	e92d 5000 	stmdb	sp!, {ip, lr}
    821c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8220:	f04f 0300 	mov.w	r3, #0
    8224:	e92d 000c 	stmdb	sp!, {r2, r3}
    8228:	a901      	add	r1, sp, #4
    822a:	f7ff fbdd 	bl	79e8 <__gnu_Unwind_RaiseException>
    822e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8232:	b012      	add	sp, #72	; 0x48
    8234:	4770      	bx	lr
    8236:	bf00      	nop

00008238 <_Unwind_Resume>:
    8238:	46ec      	mov	ip, sp
    823a:	b500      	push	{lr}
    823c:	e92d 5000 	stmdb	sp!, {ip, lr}
    8240:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8244:	f04f 0300 	mov.w	r3, #0
    8248:	e92d 000c 	stmdb	sp!, {r2, r3}
    824c:	a901      	add	r1, sp, #4
    824e:	f7ff fc05 	bl	7a5c <__gnu_Unwind_Resume>
    8252:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    8256:	b012      	add	sp, #72	; 0x48
    8258:	4770      	bx	lr
    825a:	bf00      	nop

0000825c <_Unwind_Resume_or_Rethrow>:
    825c:	46ec      	mov	ip, sp
    825e:	b500      	push	{lr}
    8260:	e92d 5000 	stmdb	sp!, {ip, lr}
    8264:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8268:	f04f 0300 	mov.w	r3, #0
    826c:	e92d 000c 	stmdb	sp!, {r2, r3}
    8270:	a901      	add	r1, sp, #4
    8272:	f7ff fc15 	bl	7aa0 <__gnu_Unwind_Resume_or_Rethrow>
    8276:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    827a:	b012      	add	sp, #72	; 0x48
    827c:	4770      	bx	lr
    827e:	bf00      	nop

00008280 <_Unwind_ForcedUnwind>:
    8280:	46ec      	mov	ip, sp
    8282:	b500      	push	{lr}
    8284:	e92d 5000 	stmdb	sp!, {ip, lr}
    8288:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    828c:	f04f 0300 	mov.w	r3, #0
    8290:	e92d 000c 	stmdb	sp!, {r2, r3}
    8294:	ab01      	add	r3, sp, #4
    8296:	f7ff fbd7 	bl	7a48 <__gnu_Unwind_ForcedUnwind>
    829a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    829e:	b012      	add	sp, #72	; 0x48
    82a0:	4770      	bx	lr
    82a2:	bf00      	nop

000082a4 <_Unwind_Backtrace>:
    82a4:	46ec      	mov	ip, sp
    82a6:	b500      	push	{lr}
    82a8:	e92d 5000 	stmdb	sp!, {ip, lr}
    82ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    82b0:	f04f 0300 	mov.w	r3, #0
    82b4:	e92d 000c 	stmdb	sp!, {r2, r3}
    82b8:	aa01      	add	r2, sp, #4
    82ba:	f7ff fc47 	bl	7b4c <__gnu_Unwind_Backtrace>
    82be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    82c2:	b012      	add	sp, #72	; 0x48
    82c4:	4770      	bx	lr
    82c6:	bf00      	nop

000082c8 <next_unwind_byte>:
    82c8:	7a02      	ldrb	r2, [r0, #8]
    82ca:	b982      	cbnz	r2, 82ee <next_unwind_byte+0x26>
    82cc:	7a43      	ldrb	r3, [r0, #9]
    82ce:	b1ab      	cbz	r3, 82fc <next_unwind_byte+0x34>
    82d0:	6842      	ldr	r2, [r0, #4]
    82d2:	3b01      	subs	r3, #1
    82d4:	b410      	push	{r4}
    82d6:	7243      	strb	r3, [r0, #9]
    82d8:	6813      	ldr	r3, [r2, #0]
    82da:	2103      	movs	r1, #3
    82dc:	1d14      	adds	r4, r2, #4
    82de:	7201      	strb	r1, [r0, #8]
    82e0:	021a      	lsls	r2, r3, #8
    82e2:	6044      	str	r4, [r0, #4]
    82e4:	6002      	str	r2, [r0, #0]
    82e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    82ea:	0e18      	lsrs	r0, r3, #24
    82ec:	4770      	bx	lr
    82ee:	6803      	ldr	r3, [r0, #0]
    82f0:	3a01      	subs	r2, #1
    82f2:	7202      	strb	r2, [r0, #8]
    82f4:	021a      	lsls	r2, r3, #8
    82f6:	6002      	str	r2, [r0, #0]
    82f8:	0e18      	lsrs	r0, r3, #24
    82fa:	4770      	bx	lr
    82fc:	20b0      	movs	r0, #176	; 0xb0
    82fe:	4770      	bx	lr

00008300 <_Unwind_GetGR.constprop.0>:
    8300:	b500      	push	{lr}
    8302:	b085      	sub	sp, #20
    8304:	aa03      	add	r2, sp, #12
    8306:	2300      	movs	r3, #0
    8308:	9200      	str	r2, [sp, #0]
    830a:	4619      	mov	r1, r3
    830c:	220c      	movs	r2, #12
    830e:	f7ff fbd7 	bl	7ac0 <_Unwind_VRS_Get>
    8312:	9803      	ldr	r0, [sp, #12]
    8314:	b005      	add	sp, #20
    8316:	f85d fb04 	ldr.w	pc, [sp], #4
    831a:	bf00      	nop

0000831c <unwind_UCB_from_context>:
    831c:	e7f0      	b.n	8300 <_Unwind_GetGR.constprop.0>
    831e:	bf00      	nop

00008320 <__gnu_unwind_execute>:
    8320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8324:	4605      	mov	r5, r0
    8326:	b085      	sub	sp, #20
    8328:	460e      	mov	r6, r1
    832a:	f04f 0800 	mov.w	r8, #0
    832e:	4630      	mov	r0, r6
    8330:	f7ff ffca 	bl	82c8 <next_unwind_byte>
    8334:	28b0      	cmp	r0, #176	; 0xb0
    8336:	4604      	mov	r4, r0
    8338:	f000 80b1 	beq.w	849e <__gnu_unwind_execute+0x17e>
    833c:	0607      	lsls	r7, r0, #24
    833e:	d520      	bpl.n	8382 <__gnu_unwind_execute+0x62>
    8340:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    8344:	2b80      	cmp	r3, #128	; 0x80
    8346:	d065      	beq.n	8414 <__gnu_unwind_execute+0xf4>
    8348:	2b90      	cmp	r3, #144	; 0x90
    834a:	d036      	beq.n	83ba <__gnu_unwind_execute+0x9a>
    834c:	2ba0      	cmp	r3, #160	; 0xa0
    834e:	d078      	beq.n	8442 <__gnu_unwind_execute+0x122>
    8350:	2bb0      	cmp	r3, #176	; 0xb0
    8352:	d047      	beq.n	83e4 <__gnu_unwind_execute+0xc4>
    8354:	2bc0      	cmp	r3, #192	; 0xc0
    8356:	f000 808a 	beq.w	846e <__gnu_unwind_execute+0x14e>
    835a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    835e:	2bd0      	cmp	r3, #208	; 0xd0
    8360:	d10b      	bne.n	837a <__gnu_unwind_execute+0x5a>
    8362:	f000 0207 	and.w	r2, r0, #7
    8366:	3201      	adds	r2, #1
    8368:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    836c:	2305      	movs	r3, #5
    836e:	2101      	movs	r1, #1
    8370:	4628      	mov	r0, r5
    8372:	f7ff fd93 	bl	7e9c <_Unwind_VRS_Pop>
    8376:	2800      	cmp	r0, #0
    8378:	d0d9      	beq.n	832e <__gnu_unwind_execute+0xe>
    837a:	2009      	movs	r0, #9
    837c:	b005      	add	sp, #20
    837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8382:	f10d 090c 	add.w	r9, sp, #12
    8386:	2300      	movs	r3, #0
    8388:	4619      	mov	r1, r3
    838a:	0087      	lsls	r7, r0, #2
    838c:	f8cd 9000 	str.w	r9, [sp]
    8390:	220d      	movs	r2, #13
    8392:	4628      	mov	r0, r5
    8394:	f7ff fb94 	bl	7ac0 <_Unwind_VRS_Get>
    8398:	b2ff      	uxtb	r7, r7
    839a:	9b03      	ldr	r3, [sp, #12]
    839c:	f8cd 9000 	str.w	r9, [sp]
    83a0:	3704      	adds	r7, #4
    83a2:	0660      	lsls	r0, r4, #25
    83a4:	bf4c      	ite	mi
    83a6:	1bdf      	submi	r7, r3, r7
    83a8:	18ff      	addpl	r7, r7, r3
    83aa:	2300      	movs	r3, #0
    83ac:	4619      	mov	r1, r3
    83ae:	220d      	movs	r2, #13
    83b0:	4628      	mov	r0, r5
    83b2:	9703      	str	r7, [sp, #12]
    83b4:	f7ff fba6 	bl	7b04 <_Unwind_VRS_Set>
    83b8:	e7b9      	b.n	832e <__gnu_unwind_execute+0xe>
    83ba:	f000 030d 	and.w	r3, r0, #13
    83be:	2b0d      	cmp	r3, #13
    83c0:	d0db      	beq.n	837a <__gnu_unwind_execute+0x5a>
    83c2:	af03      	add	r7, sp, #12
    83c4:	2300      	movs	r3, #0
    83c6:	f000 020f 	and.w	r2, r0, #15
    83ca:	4619      	mov	r1, r3
    83cc:	9700      	str	r7, [sp, #0]
    83ce:	4628      	mov	r0, r5
    83d0:	f7ff fb76 	bl	7ac0 <_Unwind_VRS_Get>
    83d4:	2300      	movs	r3, #0
    83d6:	9700      	str	r7, [sp, #0]
    83d8:	4619      	mov	r1, r3
    83da:	220d      	movs	r2, #13
    83dc:	4628      	mov	r0, r5
    83de:	f7ff fb91 	bl	7b04 <_Unwind_VRS_Set>
    83e2:	e7a4      	b.n	832e <__gnu_unwind_execute+0xe>
    83e4:	28b1      	cmp	r0, #177	; 0xb1
    83e6:	d05f      	beq.n	84a8 <__gnu_unwind_execute+0x188>
    83e8:	28b2      	cmp	r0, #178	; 0xb2
    83ea:	f000 80cc 	beq.w	8586 <__gnu_unwind_execute+0x266>
    83ee:	28b3      	cmp	r0, #179	; 0xb3
    83f0:	d07e      	beq.n	84f0 <__gnu_unwind_execute+0x1d0>
    83f2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    83f6:	2bb4      	cmp	r3, #180	; 0xb4
    83f8:	d0bf      	beq.n	837a <__gnu_unwind_execute+0x5a>
    83fa:	f000 0207 	and.w	r2, r0, #7
    83fe:	3201      	adds	r2, #1
    8400:	2301      	movs	r3, #1
    8402:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8406:	4619      	mov	r1, r3
    8408:	4628      	mov	r0, r5
    840a:	f7ff fd47 	bl	7e9c <_Unwind_VRS_Pop>
    840e:	2800      	cmp	r0, #0
    8410:	d08d      	beq.n	832e <__gnu_unwind_execute+0xe>
    8412:	e7b2      	b.n	837a <__gnu_unwind_execute+0x5a>
    8414:	4630      	mov	r0, r6
    8416:	f7ff ff57 	bl	82c8 <next_unwind_byte>
    841a:	0224      	lsls	r4, r4, #8
    841c:	4304      	orrs	r4, r0
    841e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    8422:	d0aa      	beq.n	837a <__gnu_unwind_execute+0x5a>
    8424:	0124      	lsls	r4, r4, #4
    8426:	2300      	movs	r3, #0
    8428:	b2a2      	uxth	r2, r4
    842a:	4619      	mov	r1, r3
    842c:	4628      	mov	r0, r5
    842e:	f7ff fd35 	bl	7e9c <_Unwind_VRS_Pop>
    8432:	2800      	cmp	r0, #0
    8434:	d1a1      	bne.n	837a <__gnu_unwind_execute+0x5a>
    8436:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    843a:	bf18      	it	ne
    843c:	f04f 0801 	movne.w	r8, #1
    8440:	e775      	b.n	832e <__gnu_unwind_execute+0xe>
    8442:	43c2      	mvns	r2, r0
    8444:	f002 0307 	and.w	r3, r2, #7
    8448:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    844c:	411a      	asrs	r2, r3
    844e:	0701      	lsls	r1, r0, #28
    8450:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    8454:	f04f 0300 	mov.w	r3, #0
    8458:	bf48      	it	mi
    845a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    845e:	4619      	mov	r1, r3
    8460:	4628      	mov	r0, r5
    8462:	f7ff fd1b 	bl	7e9c <_Unwind_VRS_Pop>
    8466:	2800      	cmp	r0, #0
    8468:	f43f af61 	beq.w	832e <__gnu_unwind_execute+0xe>
    846c:	e785      	b.n	837a <__gnu_unwind_execute+0x5a>
    846e:	28c6      	cmp	r0, #198	; 0xc6
    8470:	d051      	beq.n	8516 <__gnu_unwind_execute+0x1f6>
    8472:	28c7      	cmp	r0, #199	; 0xc7
    8474:	d05a      	beq.n	852c <__gnu_unwind_execute+0x20c>
    8476:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    847a:	2bc0      	cmp	r3, #192	; 0xc0
    847c:	d069      	beq.n	8552 <__gnu_unwind_execute+0x232>
    847e:	28c8      	cmp	r0, #200	; 0xc8
    8480:	d075      	beq.n	856e <__gnu_unwind_execute+0x24e>
    8482:	28c9      	cmp	r0, #201	; 0xc9
    8484:	f47f af79 	bne.w	837a <__gnu_unwind_execute+0x5a>
    8488:	4630      	mov	r0, r6
    848a:	f7ff ff1d 	bl	82c8 <next_unwind_byte>
    848e:	0302      	lsls	r2, r0, #12
    8490:	f000 000f 	and.w	r0, r0, #15
    8494:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    8498:	3001      	adds	r0, #1
    849a:	4302      	orrs	r2, r0
    849c:	e766      	b.n	836c <__gnu_unwind_execute+0x4c>
    849e:	f1b8 0f00 	cmp.w	r8, #0
    84a2:	d014      	beq.n	84ce <__gnu_unwind_execute+0x1ae>
    84a4:	2000      	movs	r0, #0
    84a6:	e769      	b.n	837c <__gnu_unwind_execute+0x5c>
    84a8:	4630      	mov	r0, r6
    84aa:	f7ff ff0d 	bl	82c8 <next_unwind_byte>
    84ae:	2800      	cmp	r0, #0
    84b0:	f43f af63 	beq.w	837a <__gnu_unwind_execute+0x5a>
    84b4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    84b8:	f47f af5f 	bne.w	837a <__gnu_unwind_execute+0x5a>
    84bc:	4602      	mov	r2, r0
    84be:	4619      	mov	r1, r3
    84c0:	4628      	mov	r0, r5
    84c2:	f7ff fceb 	bl	7e9c <_Unwind_VRS_Pop>
    84c6:	2800      	cmp	r0, #0
    84c8:	f43f af31 	beq.w	832e <__gnu_unwind_execute+0xe>
    84cc:	e755      	b.n	837a <__gnu_unwind_execute+0x5a>
    84ce:	ac03      	add	r4, sp, #12
    84d0:	4643      	mov	r3, r8
    84d2:	220e      	movs	r2, #14
    84d4:	4641      	mov	r1, r8
    84d6:	9400      	str	r4, [sp, #0]
    84d8:	4628      	mov	r0, r5
    84da:	f7ff faf1 	bl	7ac0 <_Unwind_VRS_Get>
    84de:	9400      	str	r4, [sp, #0]
    84e0:	4628      	mov	r0, r5
    84e2:	4643      	mov	r3, r8
    84e4:	220f      	movs	r2, #15
    84e6:	4641      	mov	r1, r8
    84e8:	f7ff fb0c 	bl	7b04 <_Unwind_VRS_Set>
    84ec:	4640      	mov	r0, r8
    84ee:	e745      	b.n	837c <__gnu_unwind_execute+0x5c>
    84f0:	4630      	mov	r0, r6
    84f2:	f7ff fee9 	bl	82c8 <next_unwind_byte>
    84f6:	0301      	lsls	r1, r0, #12
    84f8:	f000 000f 	and.w	r0, r0, #15
    84fc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8500:	1c42      	adds	r2, r0, #1
    8502:	2301      	movs	r3, #1
    8504:	430a      	orrs	r2, r1
    8506:	4628      	mov	r0, r5
    8508:	4619      	mov	r1, r3
    850a:	f7ff fcc7 	bl	7e9c <_Unwind_VRS_Pop>
    850e:	2800      	cmp	r0, #0
    8510:	f43f af0d 	beq.w	832e <__gnu_unwind_execute+0xe>
    8514:	e731      	b.n	837a <__gnu_unwind_execute+0x5a>
    8516:	4630      	mov	r0, r6
    8518:	f7ff fed6 	bl	82c8 <next_unwind_byte>
    851c:	0301      	lsls	r1, r0, #12
    851e:	f000 000f 	and.w	r0, r0, #15
    8522:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    8526:	1c42      	adds	r2, r0, #1
    8528:	2303      	movs	r3, #3
    852a:	e7eb      	b.n	8504 <__gnu_unwind_execute+0x1e4>
    852c:	4630      	mov	r0, r6
    852e:	f7ff fecb 	bl	82c8 <next_unwind_byte>
    8532:	4602      	mov	r2, r0
    8534:	2800      	cmp	r0, #0
    8536:	f43f af20 	beq.w	837a <__gnu_unwind_execute+0x5a>
    853a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    853e:	f47f af1c 	bne.w	837a <__gnu_unwind_execute+0x5a>
    8542:	2104      	movs	r1, #4
    8544:	4628      	mov	r0, r5
    8546:	f7ff fca9 	bl	7e9c <_Unwind_VRS_Pop>
    854a:	2800      	cmp	r0, #0
    854c:	f43f aeef 	beq.w	832e <__gnu_unwind_execute+0xe>
    8550:	e713      	b.n	837a <__gnu_unwind_execute+0x5a>
    8552:	f000 020f 	and.w	r2, r0, #15
    8556:	3201      	adds	r2, #1
    8558:	2303      	movs	r3, #3
    855a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    855e:	4619      	mov	r1, r3
    8560:	4628      	mov	r0, r5
    8562:	f7ff fc9b 	bl	7e9c <_Unwind_VRS_Pop>
    8566:	2800      	cmp	r0, #0
    8568:	f43f aee1 	beq.w	832e <__gnu_unwind_execute+0xe>
    856c:	e705      	b.n	837a <__gnu_unwind_execute+0x5a>
    856e:	4630      	mov	r0, r6
    8570:	f7ff feaa 	bl	82c8 <next_unwind_byte>
    8574:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    8578:	f000 030f 	and.w	r3, r0, #15
    857c:	3210      	adds	r2, #16
    857e:	3301      	adds	r3, #1
    8580:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    8584:	e6f2      	b.n	836c <__gnu_unwind_execute+0x4c>
    8586:	2300      	movs	r3, #0
    8588:	f10d 090c 	add.w	r9, sp, #12
    858c:	220d      	movs	r2, #13
    858e:	4619      	mov	r1, r3
    8590:	f8cd 9000 	str.w	r9, [sp]
    8594:	4628      	mov	r0, r5
    8596:	f7ff fa93 	bl	7ac0 <_Unwind_VRS_Get>
    859a:	4630      	mov	r0, r6
    859c:	f7ff fe94 	bl	82c8 <next_unwind_byte>
    85a0:	0602      	lsls	r2, r0, #24
    85a2:	f04f 0702 	mov.w	r7, #2
    85a6:	d50c      	bpl.n	85c2 <__gnu_unwind_execute+0x2a2>
    85a8:	9b03      	ldr	r3, [sp, #12]
    85aa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    85ae:	40b8      	lsls	r0, r7
    85b0:	4403      	add	r3, r0
    85b2:	4630      	mov	r0, r6
    85b4:	9303      	str	r3, [sp, #12]
    85b6:	f7ff fe87 	bl	82c8 <next_unwind_byte>
    85ba:	0603      	lsls	r3, r0, #24
    85bc:	f107 0707 	add.w	r7, r7, #7
    85c0:	d4f2      	bmi.n	85a8 <__gnu_unwind_execute+0x288>
    85c2:	9b03      	ldr	r3, [sp, #12]
    85c4:	f8cd 9000 	str.w	r9, [sp]
    85c8:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    85cc:	f503 7201 	add.w	r2, r3, #516	; 0x204
    85d0:	40bc      	lsls	r4, r7
    85d2:	2300      	movs	r3, #0
    85d4:	4414      	add	r4, r2
    85d6:	4619      	mov	r1, r3
    85d8:	220d      	movs	r2, #13
    85da:	4628      	mov	r0, r5
    85dc:	9403      	str	r4, [sp, #12]
    85de:	f7ff fa91 	bl	7b04 <_Unwind_VRS_Set>
    85e2:	e6a4      	b.n	832e <__gnu_unwind_execute+0xe>

000085e4 <__gnu_unwind_frame>:
    85e4:	b510      	push	{r4, lr}
    85e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    85e8:	b084      	sub	sp, #16
    85ea:	685a      	ldr	r2, [r3, #4]
    85ec:	2003      	movs	r0, #3
    85ee:	f88d 000c 	strb.w	r0, [sp, #12]
    85f2:	79dc      	ldrb	r4, [r3, #7]
    85f4:	f88d 400d 	strb.w	r4, [sp, #13]
    85f8:	0212      	lsls	r2, r2, #8
    85fa:	3308      	adds	r3, #8
    85fc:	4608      	mov	r0, r1
    85fe:	a901      	add	r1, sp, #4
    8600:	9201      	str	r2, [sp, #4]
    8602:	9302      	str	r3, [sp, #8]
    8604:	f7ff fe8c 	bl	8320 <__gnu_unwind_execute>
    8608:	b004      	add	sp, #16
    860a:	bd10      	pop	{r4, pc}

0000860c <_Unwind_GetRegionStart>:
    860c:	b508      	push	{r3, lr}
    860e:	f7ff fe85 	bl	831c <unwind_UCB_from_context>
    8612:	6c80      	ldr	r0, [r0, #72]	; 0x48
    8614:	bd08      	pop	{r3, pc}
    8616:	bf00      	nop

00008618 <_Unwind_GetLanguageSpecificData>:
    8618:	b508      	push	{r3, lr}
    861a:	f7ff fe7f 	bl	831c <unwind_UCB_from_context>
    861e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    8620:	79c3      	ldrb	r3, [r0, #7]
    8622:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8626:	3008      	adds	r0, #8
    8628:	bd08      	pop	{r3, pc}
    862a:	bf00      	nop

0000862c <_Unwind_GetDataRelBase>:
    862c:	b508      	push	{r3, lr}
    862e:	f000 f807 	bl	8640 <abort>
    8632:	bf00      	nop

00008634 <_Unwind_GetTextRelBase>:
    8634:	b508      	push	{r3, lr}
    8636:	f7ff fff9 	bl	862c <_Unwind_GetDataRelBase>
    863a:	bf00      	nop

0000863c <__aeabi_idiv0>:
    863c:	4770      	bx	lr
    863e:	bf00      	nop

00008640 <abort>:
    8640:	b508      	push	{r3, lr}
    8642:	2006      	movs	r0, #6
    8644:	f000 f92c 	bl	88a0 <raise>
    8648:	2001      	movs	r0, #1
    864a:	f7fb fe0b 	bl	4264 <_exit>
    864e:	Address 0x000000000000864e is out of bounds.


00008650 <__libc_init_array>:
    8650:	b570      	push	{r4, r5, r6, lr}
    8652:	4e0d      	ldr	r6, [pc, #52]	; (8688 <__libc_init_array+0x38>)
    8654:	4c0d      	ldr	r4, [pc, #52]	; (868c <__libc_init_array+0x3c>)
    8656:	1ba4      	subs	r4, r4, r6
    8658:	10a4      	asrs	r4, r4, #2
    865a:	2500      	movs	r5, #0
    865c:	42a5      	cmp	r5, r4
    865e:	d109      	bne.n	8674 <__libc_init_array+0x24>
    8660:	4e0b      	ldr	r6, [pc, #44]	; (8690 <__libc_init_array+0x40>)
    8662:	4c0c      	ldr	r4, [pc, #48]	; (8694 <__libc_init_array+0x44>)
    8664:	f7f7 fe4c 	bl	300 <_init>
    8668:	1ba4      	subs	r4, r4, r6
    866a:	10a4      	asrs	r4, r4, #2
    866c:	2500      	movs	r5, #0
    866e:	42a5      	cmp	r5, r4
    8670:	d105      	bne.n	867e <__libc_init_array+0x2e>
    8672:	bd70      	pop	{r4, r5, r6, pc}
    8674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8678:	4798      	blx	r3
    867a:	3501      	adds	r5, #1
    867c:	e7ee      	b.n	865c <__libc_init_array+0xc>
    867e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8682:	4798      	blx	r3
    8684:	3501      	adds	r5, #1
    8686:	e7f2      	b.n	866e <__libc_init_array+0x1e>
    8688:	0000030c 	.word	0x0000030c
    868c:	0000030c 	.word	0x0000030c
    8690:	0000030c 	.word	0x0000030c
    8694:	0000031c 	.word	0x0000031c

00008698 <malloc>:
    8698:	4b02      	ldr	r3, [pc, #8]	; (86a4 <malloc+0xc>)
    869a:	4601      	mov	r1, r0
    869c:	6818      	ldr	r0, [r3, #0]
    869e:	f000 b86d 	b.w	877c <_malloc_r>
    86a2:	bf00      	nop
    86a4:	10000094 	.word	0x10000094

000086a8 <free>:
    86a8:	4b02      	ldr	r3, [pc, #8]	; (86b4 <free+0xc>)
    86aa:	4601      	mov	r1, r0
    86ac:	6818      	ldr	r0, [r3, #0]
    86ae:	f000 b817 	b.w	86e0 <_free_r>
    86b2:	bf00      	nop
    86b4:	10000094 	.word	0x10000094

000086b8 <memcpy>:
    86b8:	b510      	push	{r4, lr}
    86ba:	1e43      	subs	r3, r0, #1
    86bc:	440a      	add	r2, r1
    86be:	4291      	cmp	r1, r2
    86c0:	d100      	bne.n	86c4 <memcpy+0xc>
    86c2:	bd10      	pop	{r4, pc}
    86c4:	f811 4b01 	ldrb.w	r4, [r1], #1
    86c8:	f803 4f01 	strb.w	r4, [r3, #1]!
    86cc:	e7f7      	b.n	86be <memcpy+0x6>

000086ce <memset>:
    86ce:	4402      	add	r2, r0
    86d0:	4603      	mov	r3, r0
    86d2:	4293      	cmp	r3, r2
    86d4:	d100      	bne.n	86d8 <memset+0xa>
    86d6:	4770      	bx	lr
    86d8:	f803 1b01 	strb.w	r1, [r3], #1
    86dc:	e7f9      	b.n	86d2 <memset+0x4>
    86de:	Address 0x00000000000086de is out of bounds.


000086e0 <_free_r>:
    86e0:	b538      	push	{r3, r4, r5, lr}
    86e2:	4605      	mov	r5, r0
    86e4:	2900      	cmp	r1, #0
    86e6:	d045      	beq.n	8774 <_free_r+0x94>
    86e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    86ec:	1f0c      	subs	r4, r1, #4
    86ee:	2b00      	cmp	r3, #0
    86f0:	bfb8      	it	lt
    86f2:	18e4      	addlt	r4, r4, r3
    86f4:	f000 f8f8 	bl	88e8 <__malloc_lock>
    86f8:	4a1f      	ldr	r2, [pc, #124]	; (8778 <_free_r+0x98>)
    86fa:	6813      	ldr	r3, [r2, #0]
    86fc:	4610      	mov	r0, r2
    86fe:	b933      	cbnz	r3, 870e <_free_r+0x2e>
    8700:	6063      	str	r3, [r4, #4]
    8702:	6014      	str	r4, [r2, #0]
    8704:	4628      	mov	r0, r5
    8706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    870a:	f000 b8ee 	b.w	88ea <__malloc_unlock>
    870e:	42a3      	cmp	r3, r4
    8710:	d90c      	bls.n	872c <_free_r+0x4c>
    8712:	6821      	ldr	r1, [r4, #0]
    8714:	1862      	adds	r2, r4, r1
    8716:	4293      	cmp	r3, r2
    8718:	bf04      	itt	eq
    871a:	681a      	ldreq	r2, [r3, #0]
    871c:	685b      	ldreq	r3, [r3, #4]
    871e:	6063      	str	r3, [r4, #4]
    8720:	bf04      	itt	eq
    8722:	1852      	addeq	r2, r2, r1
    8724:	6022      	streq	r2, [r4, #0]
    8726:	6004      	str	r4, [r0, #0]
    8728:	e7ec      	b.n	8704 <_free_r+0x24>
    872a:	4613      	mov	r3, r2
    872c:	685a      	ldr	r2, [r3, #4]
    872e:	b10a      	cbz	r2, 8734 <_free_r+0x54>
    8730:	42a2      	cmp	r2, r4
    8732:	d9fa      	bls.n	872a <_free_r+0x4a>
    8734:	6819      	ldr	r1, [r3, #0]
    8736:	1858      	adds	r0, r3, r1
    8738:	42a0      	cmp	r0, r4
    873a:	d10b      	bne.n	8754 <_free_r+0x74>
    873c:	6820      	ldr	r0, [r4, #0]
    873e:	4401      	add	r1, r0
    8740:	1858      	adds	r0, r3, r1
    8742:	4282      	cmp	r2, r0
    8744:	6019      	str	r1, [r3, #0]
    8746:	d1dd      	bne.n	8704 <_free_r+0x24>
    8748:	6810      	ldr	r0, [r2, #0]
    874a:	6852      	ldr	r2, [r2, #4]
    874c:	605a      	str	r2, [r3, #4]
    874e:	4401      	add	r1, r0
    8750:	6019      	str	r1, [r3, #0]
    8752:	e7d7      	b.n	8704 <_free_r+0x24>
    8754:	d902      	bls.n	875c <_free_r+0x7c>
    8756:	230c      	movs	r3, #12
    8758:	602b      	str	r3, [r5, #0]
    875a:	e7d3      	b.n	8704 <_free_r+0x24>
    875c:	6820      	ldr	r0, [r4, #0]
    875e:	1821      	adds	r1, r4, r0
    8760:	428a      	cmp	r2, r1
    8762:	bf04      	itt	eq
    8764:	6811      	ldreq	r1, [r2, #0]
    8766:	6852      	ldreq	r2, [r2, #4]
    8768:	6062      	str	r2, [r4, #4]
    876a:	bf04      	itt	eq
    876c:	1809      	addeq	r1, r1, r0
    876e:	6021      	streq	r1, [r4, #0]
    8770:	605c      	str	r4, [r3, #4]
    8772:	e7c7      	b.n	8704 <_free_r+0x24>
    8774:	bd38      	pop	{r3, r4, r5, pc}
    8776:	bf00      	nop
    8778:	10000fdc 	.word	0x10000fdc

0000877c <_malloc_r>:
    877c:	b570      	push	{r4, r5, r6, lr}
    877e:	1ccd      	adds	r5, r1, #3
    8780:	f025 0503 	bic.w	r5, r5, #3
    8784:	3508      	adds	r5, #8
    8786:	2d0c      	cmp	r5, #12
    8788:	bf38      	it	cc
    878a:	250c      	movcc	r5, #12
    878c:	2d00      	cmp	r5, #0
    878e:	4606      	mov	r6, r0
    8790:	db01      	blt.n	8796 <_malloc_r+0x1a>
    8792:	42a9      	cmp	r1, r5
    8794:	d903      	bls.n	879e <_malloc_r+0x22>
    8796:	230c      	movs	r3, #12
    8798:	6033      	str	r3, [r6, #0]
    879a:	2000      	movs	r0, #0
    879c:	bd70      	pop	{r4, r5, r6, pc}
    879e:	f000 f8a3 	bl	88e8 <__malloc_lock>
    87a2:	4a21      	ldr	r2, [pc, #132]	; (8828 <_malloc_r+0xac>)
    87a4:	6814      	ldr	r4, [r2, #0]
    87a6:	4621      	mov	r1, r4
    87a8:	b991      	cbnz	r1, 87d0 <_malloc_r+0x54>
    87aa:	4c20      	ldr	r4, [pc, #128]	; (882c <_malloc_r+0xb0>)
    87ac:	6823      	ldr	r3, [r4, #0]
    87ae:	b91b      	cbnz	r3, 87b8 <_malloc_r+0x3c>
    87b0:	4630      	mov	r0, r6
    87b2:	f000 f83d 	bl	8830 <_sbrk_r>
    87b6:	6020      	str	r0, [r4, #0]
    87b8:	4629      	mov	r1, r5
    87ba:	4630      	mov	r0, r6
    87bc:	f000 f838 	bl	8830 <_sbrk_r>
    87c0:	1c43      	adds	r3, r0, #1
    87c2:	d124      	bne.n	880e <_malloc_r+0x92>
    87c4:	230c      	movs	r3, #12
    87c6:	6033      	str	r3, [r6, #0]
    87c8:	4630      	mov	r0, r6
    87ca:	f000 f88e 	bl	88ea <__malloc_unlock>
    87ce:	e7e4      	b.n	879a <_malloc_r+0x1e>
    87d0:	680b      	ldr	r3, [r1, #0]
    87d2:	1b5b      	subs	r3, r3, r5
    87d4:	d418      	bmi.n	8808 <_malloc_r+0x8c>
    87d6:	2b0b      	cmp	r3, #11
    87d8:	d90f      	bls.n	87fa <_malloc_r+0x7e>
    87da:	600b      	str	r3, [r1, #0]
    87dc:	50cd      	str	r5, [r1, r3]
    87de:	18cc      	adds	r4, r1, r3
    87e0:	4630      	mov	r0, r6
    87e2:	f000 f882 	bl	88ea <__malloc_unlock>
    87e6:	f104 000b 	add.w	r0, r4, #11
    87ea:	1d23      	adds	r3, r4, #4
    87ec:	f020 0007 	bic.w	r0, r0, #7
    87f0:	1ac3      	subs	r3, r0, r3
    87f2:	d0d3      	beq.n	879c <_malloc_r+0x20>
    87f4:	425a      	negs	r2, r3
    87f6:	50e2      	str	r2, [r4, r3]
    87f8:	e7d0      	b.n	879c <_malloc_r+0x20>
    87fa:	428c      	cmp	r4, r1
    87fc:	684b      	ldr	r3, [r1, #4]
    87fe:	bf16      	itet	ne
    8800:	6063      	strne	r3, [r4, #4]
    8802:	6013      	streq	r3, [r2, #0]
    8804:	460c      	movne	r4, r1
    8806:	e7eb      	b.n	87e0 <_malloc_r+0x64>
    8808:	460c      	mov	r4, r1
    880a:	6849      	ldr	r1, [r1, #4]
    880c:	e7cc      	b.n	87a8 <_malloc_r+0x2c>
    880e:	1cc4      	adds	r4, r0, #3
    8810:	f024 0403 	bic.w	r4, r4, #3
    8814:	42a0      	cmp	r0, r4
    8816:	d005      	beq.n	8824 <_malloc_r+0xa8>
    8818:	1a21      	subs	r1, r4, r0
    881a:	4630      	mov	r0, r6
    881c:	f000 f808 	bl	8830 <_sbrk_r>
    8820:	3001      	adds	r0, #1
    8822:	d0cf      	beq.n	87c4 <_malloc_r+0x48>
    8824:	6025      	str	r5, [r4, #0]
    8826:	e7db      	b.n	87e0 <_malloc_r+0x64>
    8828:	10000fdc 	.word	0x10000fdc
    882c:	10000fe0 	.word	0x10000fe0

00008830 <_sbrk_r>:
    8830:	b538      	push	{r3, r4, r5, lr}
    8832:	4c06      	ldr	r4, [pc, #24]	; (884c <_sbrk_r+0x1c>)
    8834:	2300      	movs	r3, #0
    8836:	4605      	mov	r5, r0
    8838:	4608      	mov	r0, r1
    883a:	6023      	str	r3, [r4, #0]
    883c:	f7fb fcb4 	bl	41a8 <_sbrk>
    8840:	1c43      	adds	r3, r0, #1
    8842:	d102      	bne.n	884a <_sbrk_r+0x1a>
    8844:	6823      	ldr	r3, [r4, #0]
    8846:	b103      	cbz	r3, 884a <_sbrk_r+0x1a>
    8848:	602b      	str	r3, [r5, #0]
    884a:	bd38      	pop	{r3, r4, r5, pc}
    884c:	10001034 	.word	0x10001034

00008850 <_raise_r>:
    8850:	291f      	cmp	r1, #31
    8852:	b538      	push	{r3, r4, r5, lr}
    8854:	4604      	mov	r4, r0
    8856:	460d      	mov	r5, r1
    8858:	d904      	bls.n	8864 <_raise_r+0x14>
    885a:	2316      	movs	r3, #22
    885c:	6003      	str	r3, [r0, #0]
    885e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8862:	bd38      	pop	{r3, r4, r5, pc}
    8864:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8866:	b112      	cbz	r2, 886e <_raise_r+0x1e>
    8868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    886c:	b94b      	cbnz	r3, 8882 <_raise_r+0x32>
    886e:	4620      	mov	r0, r4
    8870:	f000 f830 	bl	88d4 <_getpid_r>
    8874:	462a      	mov	r2, r5
    8876:	4601      	mov	r1, r0
    8878:	4620      	mov	r0, r4
    887a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    887e:	f000 b817 	b.w	88b0 <_kill_r>
    8882:	2b01      	cmp	r3, #1
    8884:	d00a      	beq.n	889c <_raise_r+0x4c>
    8886:	1c59      	adds	r1, r3, #1
    8888:	d103      	bne.n	8892 <_raise_r+0x42>
    888a:	2316      	movs	r3, #22
    888c:	6003      	str	r3, [r0, #0]
    888e:	2001      	movs	r0, #1
    8890:	e7e7      	b.n	8862 <_raise_r+0x12>
    8892:	2400      	movs	r4, #0
    8894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    8898:	4628      	mov	r0, r5
    889a:	4798      	blx	r3
    889c:	2000      	movs	r0, #0
    889e:	e7e0      	b.n	8862 <_raise_r+0x12>

000088a0 <raise>:
    88a0:	4b02      	ldr	r3, [pc, #8]	; (88ac <raise+0xc>)
    88a2:	4601      	mov	r1, r0
    88a4:	6818      	ldr	r0, [r3, #0]
    88a6:	f7ff bfd3 	b.w	8850 <_raise_r>
    88aa:	bf00      	nop
    88ac:	10000094 	.word	0x10000094

000088b0 <_kill_r>:
    88b0:	b538      	push	{r3, r4, r5, lr}
    88b2:	4c07      	ldr	r4, [pc, #28]	; (88d0 <_kill_r+0x20>)
    88b4:	2300      	movs	r3, #0
    88b6:	4605      	mov	r5, r0
    88b8:	4608      	mov	r0, r1
    88ba:	4611      	mov	r1, r2
    88bc:	6023      	str	r3, [r4, #0]
    88be:	f7fb fc65 	bl	418c <_kill>
    88c2:	1c43      	adds	r3, r0, #1
    88c4:	d102      	bne.n	88cc <_kill_r+0x1c>
    88c6:	6823      	ldr	r3, [r4, #0]
    88c8:	b103      	cbz	r3, 88cc <_kill_r+0x1c>
    88ca:	602b      	str	r3, [r5, #0]
    88cc:	bd38      	pop	{r3, r4, r5, pc}
    88ce:	bf00      	nop
    88d0:	10001034 	.word	0x10001034

000088d4 <_getpid_r>:
    88d4:	f7fb bc52 	b.w	417c <_getpid>

000088d8 <strlen>:
    88d8:	4603      	mov	r3, r0
    88da:	f813 2b01 	ldrb.w	r2, [r3], #1
    88de:	2a00      	cmp	r2, #0
    88e0:	d1fb      	bne.n	88da <strlen+0x2>
    88e2:	1a18      	subs	r0, r3, r0
    88e4:	3801      	subs	r0, #1
    88e6:	4770      	bx	lr

000088e8 <__malloc_lock>:
    88e8:	4770      	bx	lr

000088ea <__malloc_unlock>:
    88ea:	4770      	bx	lr
    88ec:	61766e69 	.word	0x61766e69
    88f0:	0064696c 	.word	0x0064696c
    88f4:	6c707061 	.word	0x6c707061
    88f8:	74616369 	.word	0x74616369
    88fc:	006e6f69 	.word	0x006e6f69
    8900:	74736f68 	.word	0x74736f68
    8904:	73657420 	.word	0x73657420
    8908:	00000074 	.word	0x00000074
    890c:	64252020 	.word	0x64252020
    8910:	78302029 	.word	0x78302029
    8914:	58383025 	.word	0x58383025
    8918:	0000000a 	.word	0x0000000a
    891c:	25783020 	.word	0x25783020
    8920:	00583830 	.word	0x00583830
    8924:	64252020 	.word	0x64252020
    8928:	78302029 	.word	0x78302029
    892c:	000a7025 	.word	0x000a7025
    8930:	6e75520a 	.word	0x6e75520a
    8934:	6874203a 	.word	0x6874203a
    8938:	6f662065 	.word	0x6f662065
    893c:	776f6c6c 	.word	0x776f6c6c
    8940:	20676e69 	.word	0x20676e69
    8944:	6d6d6f63 	.word	0x6d6d6f63
    8948:	20646e61 	.word	0x20646e61
    894c:	79206e69 	.word	0x79206e69
    8950:	2072756f 	.word	0x2072756f
    8954:	6a6f7270 	.word	0x6a6f7270
    8958:	20746365 	.word	0x20746365
    895c:	65726964 	.word	0x65726964
    8960:	726f7463 	.word	0x726f7463
    8964:	00000079 	.word	0x00000079
    8968:	20200a0a 	.word	0x20200a0a
    896c:	3b315b1b 	.word	0x3b315b1b
    8970:	006d3733 	.word	0x006d3733
    8974:	656b616d 	.word	0x656b616d
    8978:	61747320 	.word	0x61747320
    897c:	72746b63 	.word	0x72746b63
    8980:	2d656361 	.word	0x2d656361
    8984:	54207325 	.word	0x54207325
    8988:	45434152 	.word	0x45434152
    898c:	00223d53 	.word	0x00223d53
    8990:	25783020 	.word	0x25783020
    8994:	00000070 	.word	0x00000070
    8998:	1b0a0a22 	.word	0x1b0a0a22
    899c:	006d305b 	.word	0x006d305b
    89a0:	73696854 	.word	0x73696854
    89a4:	6c697720 	.word	0x6c697720
    89a8:	6572206c 	.word	0x6572206c
    89ac:	74726f70 	.word	0x74726f70
    89b0:	65687420 	.word	0x65687420
    89b4:	6c696620 	.word	0x6c696620
    89b8:	6e612065 	.word	0x6e612065
    89bc:	696c2064 	.word	0x696c2064
    89c0:	6e20656e 	.word	0x6e20656e
    89c4:	65626d75 	.word	0x65626d75
    89c8:	68742072 	.word	0x68742072
    89cc:	6c207461 	.word	0x6c207461
    89d0:	74206465 	.word	0x74206465
    89d4:	6874206f 	.word	0x6874206f
    89d8:	66207369 	.word	0x66207369
    89dc:	74636e75 	.word	0x74636e75
    89e0:	206e6f69 	.word	0x206e6f69
    89e4:	6e696562 	.word	0x6e696562
    89e8:	61632067 	.word	0x61632067
    89ec:	64656c6c 	.word	0x64656c6c
    89f0:	0000002e 	.word	0x0000002e
    89f4:	35345b1b 	.word	0x35345b1b
    89f8:	2020206d 	.word	0x2020206d
    89fc:	4f525245 	.word	0x4f525245
    8a00:	305b1b52 	.word	0x305b1b52
    8a04:	6d34393b 	.word	0x6d34393b
    8a08:	3a73253a 	.word	0x3a73253a
    8a0c:	3b305b1b 	.word	0x3b305b1b
    8a10:	256d3239 	.word	0x256d3239
    8a14:	5b1b3a73 	.word	0x5b1b3a73
    8a18:	33393b30 	.word	0x33393b30
    8a1c:	3e64256d 	.word	0x3e64256d
    8a20:	305b1b20 	.word	0x305b1b20
    8a24:	6d37333b 	.word	0x6d37333b
    8a28:	65737341 	.word	0x65737341
    8a2c:	6f697472 	.word	0x6f697472
    8a30:	6146206e 	.word	0x6146206e
    8a34:	72756c69 	.word	0x72756c69
    8a38:	43202c65 	.word	0x43202c65
    8a3c:	69646e6f 	.word	0x69646e6f
    8a40:	6e6f6974 	.word	0x6e6f6974
    8a44:	73655420 	.word	0x73655420
    8a48:	3a646574 	.word	0x3a646574
    8a4c:	65702820 	.word	0x65702820
    8a50:	68706972 	.word	0x68706972
    8a54:	6c617265 	.word	0x6c617265
    8a58:	7669645f 	.word	0x7669645f
    8a5c:	72656469 	.word	0x72656469
    8a60:	203d3c20 	.word	0x203d3c20
    8a64:	200a2934 	.word	0x200a2934
    8a68:	20202020 	.word	0x20202020
    8a6c:	20202020 	.word	0x20202020
    8a70:	76694420 	.word	0x76694420
    8a74:	72656469 	.word	0x72656469
    8a78:	73756d20 	.word	0x73756d20
    8a7c:	74276e74 	.word	0x74276e74
    8a80:	63786520 	.word	0x63786520
    8a84:	20646565 	.word	0x20646565
    8a88:	5b1b3233 	.word	0x5b1b3233
    8a8c:	5b1b6d30 	.word	0x5b1b6d30
    8a90:	000a6d30 	.word	0x000a6d30
    8a94:	6972500a 	.word	0x6972500a
    8a98:	6e69746e 	.word	0x6e69746e
    8a9c:	74532067 	.word	0x74532067
    8aa0:	206b6361 	.word	0x206b6361
    8aa4:	63617254 	.word	0x63617254
    8aa8:	000a3a65 	.word	0x000a3a65
    8aac:	35345b1b 	.word	0x35345b1b
    8ab0:	2020206d 	.word	0x2020206d
    8ab4:	4f525245 	.word	0x4f525245
    8ab8:	305b1b52 	.word	0x305b1b52
    8abc:	6d34393b 	.word	0x6d34393b
    8ac0:	3a73253a 	.word	0x3a73253a
    8ac4:	3b305b1b 	.word	0x3b305b1b
    8ac8:	256d3239 	.word	0x256d3239
    8acc:	5b1b3a73 	.word	0x5b1b3a73
    8ad0:	33393b30 	.word	0x33393b30
    8ad4:	3e64256d 	.word	0x3e64256d
    8ad8:	305b1b20 	.word	0x305b1b20
    8adc:	6d37333b 	.word	0x6d37333b
    8ae0:	65737341 	.word	0x65737341
    8ae4:	6f697472 	.word	0x6f697472
    8ae8:	6146206e 	.word	0x6146206e
    8aec:	72756c69 	.word	0x72756c69
    8af0:	43202c65 	.word	0x43202c65
    8af4:	69646e6f 	.word	0x69646e6f
    8af8:	6e6f6974 	.word	0x6e6f6974
    8afc:	73655420 	.word	0x73655420
    8b00:	3a646574 	.word	0x3a646574
    8b04:	65642820 	.word	0x65642820
    8b08:	65726973 	.word	0x65726973
    8b0c:	72665f64 	.word	0x72665f64
    8b10:	65757165 	.word	0x65757165
    8b14:	2079636e 	.word	0x2079636e
    8b18:	3833203c 	.word	0x3833203c
    8b1c:	484d5f34 	.word	0x484d5f34
    8b20:	2626207a 	.word	0x2626207a
    8b24:	73656420 	.word	0x73656420
    8b28:	64657269 	.word	0x64657269
    8b2c:	6572665f 	.word	0x6572665f
    8b30:	6e657571 	.word	0x6e657571
    8b34:	3e207963 	.word	0x3e207963
    8b38:	5f323120 	.word	0x5f323120
    8b3c:	297a484d 	.word	0x297a484d
    8b40:	2020200a 	.word	0x2020200a
    8b44:	20202020 	.word	0x20202020
    8b48:	46202020 	.word	0x46202020
    8b4c:	75716572 	.word	0x75716572
    8b50:	79636e65 	.word	0x79636e65
    8b54:	73756d20 	.word	0x73756d20
    8b58:	65622074 	.word	0x65622074
    8b5c:	776f6c20 	.word	0x776f6c20
    8b60:	74207265 	.word	0x74207265
    8b64:	206e6168 	.word	0x206e6168
    8b68:	20343833 	.word	0x20343833
    8b6c:	617a484d 	.word	0x617a484d
    8b70:	6720646e 	.word	0x6720646e
    8b74:	74616572 	.word	0x74616572
    8b78:	74207265 	.word	0x74207265
    8b7c:	206e6168 	.word	0x206e6168
    8b80:	6520726f 	.word	0x6520726f
    8b84:	6c617571 	.word	0x6c617571
    8b88:	206f7420 	.word	0x206f7420
    8b8c:	4d203231 	.word	0x4d203231
    8b90:	5b1b7a48 	.word	0x5b1b7a48
    8b94:	5b1b6d30 	.word	0x5b1b6d30
    8b98:	000a6d30 	.word	0x000a6d30
    8b9c:	35345b1b 	.word	0x35345b1b
    8ba0:	2020206d 	.word	0x2020206d
    8ba4:	4f525245 	.word	0x4f525245
    8ba8:	305b1b52 	.word	0x305b1b52
    8bac:	6d34393b 	.word	0x6d34393b
    8bb0:	3a73253a 	.word	0x3a73253a
    8bb4:	3b305b1b 	.word	0x3b305b1b
    8bb8:	256d3239 	.word	0x256d3239
    8bbc:	5b1b3a73 	.word	0x5b1b3a73
    8bc0:	33393b30 	.word	0x33393b30
    8bc4:	3e64256d 	.word	0x3e64256d
    8bc8:	305b1b20 	.word	0x305b1b20
    8bcc:	6d37333b 	.word	0x6d37333b
    8bd0:	65737341 	.word	0x65737341
    8bd4:	6f697472 	.word	0x6f697472
    8bd8:	6146206e 	.word	0x6146206e
    8bdc:	72756c69 	.word	0x72756c69
    8be0:	43202c65 	.word	0x43202c65
    8be4:	69646e6f 	.word	0x69646e6f
    8be8:	6e6f6974 	.word	0x6e6f6974
    8bec:	73655420 	.word	0x73655420
    8bf0:	3a646574 	.word	0x3a646574
    8bf4:	69642820 	.word	0x69642820
    8bf8:	65646976 	.word	0x65646976
    8bfc:	61765f72 	.word	0x61765f72
    8c00:	2065756c 	.word	0x2065756c
    8c04:	2938203c 	.word	0x2938203c
    8c08:	2020200a 	.word	0x2020200a
    8c0c:	20202020 	.word	0x20202020
    8c10:	50202020 	.word	0x50202020
    8c14:	64204c4c 	.word	0x64204c4c
    8c18:	64697669 	.word	0x64697669
    8c1c:	76207265 	.word	0x76207265
    8c20:	65756c61 	.word	0x65756c61
    8c24:	6e657720 	.word	0x6e657720
    8c28:	756f2074 	.word	0x756f2074
    8c2c:	666f2074 	.word	0x666f2074
    8c30:	756f6220 	.word	0x756f6220
    8c34:	1b73646e 	.word	0x1b73646e
    8c38:	1b6d305b 	.word	0x1b6d305b
    8c3c:	0a6d305b 	.word	0x0a6d305b
    8c40:	00000000 	.word	0x00000000
    8c44:	35345b1b 	.word	0x35345b1b
    8c48:	2020206d 	.word	0x2020206d
    8c4c:	4f525245 	.word	0x4f525245
    8c50:	305b1b52 	.word	0x305b1b52
    8c54:	6d34393b 	.word	0x6d34393b
    8c58:	3a73253a 	.word	0x3a73253a
    8c5c:	3b305b1b 	.word	0x3b305b1b
    8c60:	256d3239 	.word	0x256d3239
    8c64:	5b1b3a73 	.word	0x5b1b3a73
    8c68:	33393b30 	.word	0x33393b30
    8c6c:	3e64256d 	.word	0x3e64256d
    8c70:	305b1b20 	.word	0x305b1b20
    8c74:	6d37333b 	.word	0x6d37333b
    8c78:	65737341 	.word	0x65737341
    8c7c:	6f697472 	.word	0x6f697472
    8c80:	6146206e 	.word	0x6146206e
    8c84:	72756c69 	.word	0x72756c69
    8c88:	43202c65 	.word	0x43202c65
    8c8c:	69646e6f 	.word	0x69646e6f
    8c90:	6e6f6974 	.word	0x6e6f6974
    8c94:	73655420 	.word	0x73655420
    8c98:	3a646574 	.word	0x3a646574
    8c9c:	70632820 	.word	0x70632820
    8ca0:	69645f75 	.word	0x69645f75
    8ca4:	65646976 	.word	0x65646976
    8ca8:	203c2072 	.word	0x203c2072
    8cac:	0a293233 	.word	0x0a293233
    8cb0:	20202020 	.word	0x20202020
    8cb4:	20202020 	.word	0x20202020
    8cb8:	69442020 	.word	0x69442020
    8cbc:	65646976 	.word	0x65646976
    8cc0:	756d2072 	.word	0x756d2072
    8cc4:	276e7473 	.word	0x276e7473
    8cc8:	78652074 	.word	0x78652074
    8ccc:	64656563 	.word	0x64656563
    8cd0:	1b323320 	.word	0x1b323320
    8cd4:	1b6d305b 	.word	0x1b6d305b
    8cd8:	0a6d305b 	.word	0x0a6d305b
    8cdc:	00000000 	.word	0x00000000
    8ce0:	33345b1b 	.word	0x33345b1b
    8ce4:	4157206d 	.word	0x4157206d
    8ce8:	4e494e52 	.word	0x4e494e52
    8cec:	305b1b47 	.word	0x305b1b47
    8cf0:	6d34393b 	.word	0x6d34393b
    8cf4:	3a73253a 	.word	0x3a73253a
    8cf8:	3b305b1b 	.word	0x3b305b1b
    8cfc:	256d3239 	.word	0x256d3239
    8d00:	5b1b3a73 	.word	0x5b1b3a73
    8d04:	33393b30 	.word	0x33393b30
    8d08:	3e64256d 	.word	0x3e64256d
    8d0c:	305b1b20 	.word	0x305b1b20
    8d10:	6d37333b 	.word	0x6d37333b
    8d14:	69206f4e 	.word	0x69206f4e
    8d18:	7265746e 	.word	0x7265746e
    8d1c:	74707572 	.word	0x74707572
    8d20:	72657320 	.word	0x72657320
    8d24:	65636976 	.word	0x65636976
    8d28:	756f7220 	.word	0x756f7220
    8d2c:	656e6974 	.word	0x656e6974
    8d30:	756f6620 	.word	0x756f6620
    8d34:	6620646e 	.word	0x6620646e
    8d38:	7420726f 	.word	0x7420726f
    8d3c:	76206568 	.word	0x76206568
    8d40:	6f746365 	.word	0x6f746365
    8d44:	64252072 	.word	0x64252072
    8d48:	69442021 	.word	0x69442021
    8d4c:	6c626173 	.word	0x6c626173
    8d50:	20676e69 	.word	0x20676e69
    8d54:	1b525349 	.word	0x1b525349
    8d58:	0a6d305b 	.word	0x0a6d305b
    8d5c:	00000000 	.word	0x00000000
    8d60:	33345b1b 	.word	0x33345b1b
    8d64:	4157206d 	.word	0x4157206d
    8d68:	4e494e52 	.word	0x4e494e52
    8d6c:	305b1b47 	.word	0x305b1b47
    8d70:	6d34393b 	.word	0x6d34393b
    8d74:	3a73253a 	.word	0x3a73253a
    8d78:	3b305b1b 	.word	0x3b305b1b
    8d7c:	256d3239 	.word	0x256d3239
    8d80:	5b1b3a73 	.word	0x5b1b3a73
    8d84:	33393b30 	.word	0x33393b30
    8d88:	3e64256d 	.word	0x3e64256d
    8d8c:	305b1b20 	.word	0x305b1b20
    8d90:	6d37333b 	.word	0x6d37333b
    8d94:	74726f50 	.word	0x74726f50
    8d98:	20642520 	.word	0x20642520
    8d9c:	6e6e6163 	.word	0x6e6e6163
    8da0:	6220746f 	.word	0x6220746f
    8da4:	73752065 	.word	0x73752065
    8da8:	66206465 	.word	0x66206465
    8dac:	4520726f 	.word	0x4520726f
    8db0:	72657478 	.word	0x72657478
    8db4:	206c616e 	.word	0x206c616e
    8db8:	65746e49 	.word	0x65746e49
    8dbc:	70757272 	.word	0x70757272
    8dc0:	202e7374 	.word	0x202e7374
    8dc4:	6465654e 	.word	0x6465654e
    8dc8:	206f7420 	.word	0x206f7420
    8dcc:	20657375 	.word	0x20657375
    8dd0:	4f495047 	.word	0x4f495047
    8dd4:	206e6f20 	.word	0x206e6f20
    8dd8:	74726f50 	.word	0x74726f50
    8ddc:	6f203020 	.word	0x6f203020
    8de0:	2e322072 	.word	0x2e322072
    8de4:	6d305b1b 	.word	0x6d305b1b
    8de8:	6d305b1b 	.word	0x6d305b1b
    8dec:	0000000a 	.word	0x0000000a
    8df0:	33345b1b 	.word	0x33345b1b
    8df4:	4157206d 	.word	0x4157206d
    8df8:	4e494e52 	.word	0x4e494e52
    8dfc:	305b1b47 	.word	0x305b1b47
    8e00:	6d34393b 	.word	0x6d34393b
    8e04:	3a73253a 	.word	0x3a73253a
    8e08:	3b305b1b 	.word	0x3b305b1b
    8e0c:	256d3239 	.word	0x256d3239
    8e10:	5b1b3a73 	.word	0x5b1b3a73
    8e14:	33393b30 	.word	0x33393b30
    8e18:	3e64256d 	.word	0x3e64256d
    8e1c:	305b1b20 	.word	0x305b1b20
    8e20:	6d37333b 	.word	0x6d37333b
    8e24:	65676445 	.word	0x65676445
    8e28:	20642520 	.word	0x20642520
    8e2c:	6e6e6163 	.word	0x6e6e6163
    8e30:	6220746f 	.word	0x6220746f
    8e34:	73752065 	.word	0x73752065
    8e38:	66206465 	.word	0x66206465
    8e3c:	4520726f 	.word	0x4520726f
    8e40:	72657478 	.word	0x72657478
    8e44:	206c616e 	.word	0x206c616e
    8e48:	65746e49 	.word	0x65746e49
    8e4c:	70757272 	.word	0x70757272
    8e50:	4e2e7374 	.word	0x4e2e7374
    8e54:	20646565 	.word	0x20646565
    8e58:	75206f74 	.word	0x75206f74
    8e5c:	61206573 	.word	0x61206573
    8e60:	73697220 	.word	0x73697220
    8e64:	2c676e69 	.word	0x2c676e69
    8e68:	6c616620 	.word	0x6c616620
    8e6c:	676e696c 	.word	0x676e696c
    8e70:	726f202c 	.word	0x726f202c
    8e74:	746f6220 	.word	0x746f6220
    8e78:	6f632068 	.word	0x6f632068
    8e7c:	6769666e 	.word	0x6769666e
    8e80:	74617275 	.word	0x74617275
    8e84:	2e6e6f69 	.word	0x2e6e6f69
    8e88:	6d305b1b 	.word	0x6d305b1b
    8e8c:	0000000a 	.word	0x0000000a
    8e90:	32345b1b 	.word	0x32345b1b
    8e94:	2020206d 	.word	0x2020206d
    8e98:	464e4920 	.word	0x464e4920
    8e9c:	305b1b4f 	.word	0x305b1b4f
    8ea0:	6d34393b 	.word	0x6d34393b
    8ea4:	3a73253a 	.word	0x3a73253a
    8ea8:	3b305b1b 	.word	0x3b305b1b
    8eac:	256d3239 	.word	0x256d3239
    8eb0:	5b1b3a73 	.word	0x5b1b3a73
    8eb4:	33393b30 	.word	0x33393b30
    8eb8:	3e64256d 	.word	0x3e64256d
    8ebc:	305b1b20 	.word	0x305b1b20
    8ec0:	6d37333b 	.word	0x6d37333b
    8ec4:	74726175 	.word	0x74726175
    8ec8:	696e6920 	.word	0x696e6920
    8ecc:	6c616974 	.word	0x6c616974
    8ed0:	64657a69 	.word	0x64657a69
    8ed4:	6d305b1b 	.word	0x6d305b1b
    8ed8:	0000000a 	.word	0x0000000a
    8edc:	32345b1b 	.word	0x32345b1b
    8ee0:	2020206d 	.word	0x2020206d
    8ee4:	464e4920 	.word	0x464e4920
    8ee8:	305b1b4f 	.word	0x305b1b4f
    8eec:	6d34393b 	.word	0x6d34393b
    8ef0:	3a73253a 	.word	0x3a73253a
    8ef4:	3b305b1b 	.word	0x3b305b1b
    8ef8:	256d3239 	.word	0x256d3239
    8efc:	5b1b3a73 	.word	0x5b1b3a73
    8f00:	33393b30 	.word	0x33393b30
    8f04:	3e64256d 	.word	0x3e64256d
    8f08:	305b1b20 	.word	0x305b1b20
    8f0c:	6d37333b 	.word	0x6d37333b
    8f10:	746e6553 	.word	0x746e6553
    8f14:	6c617620 	.word	0x6c617620
    8f18:	25206575 	.word	0x25206575
    8f1c:	766f2066 	.word	0x766f2066
    8f20:	55207265 	.word	0x55207265
    8f24:	20545241 	.word	0x20545241
    8f28:	5b1b6925 	.word	0x5b1b6925
    8f2c:	000a6d30 	.word	0x000a6d30
    8f30:	32345b1b 	.word	0x32345b1b
    8f34:	2020206d 	.word	0x2020206d
    8f38:	464e4920 	.word	0x464e4920
    8f3c:	305b1b4f 	.word	0x305b1b4f
    8f40:	6d34393b 	.word	0x6d34393b
    8f44:	3a73253a 	.word	0x3a73253a
    8f48:	3b305b1b 	.word	0x3b305b1b
    8f4c:	256d3239 	.word	0x256d3239
    8f50:	5b1b3a73 	.word	0x5b1b3a73
    8f54:	33393b30 	.word	0x33393b30
    8f58:	3e64256d 	.word	0x3e64256d
    8f5c:	305b1b20 	.word	0x305b1b20
    8f60:	6d37333b 	.word	0x6d37333b
    8f64:	69636552 	.word	0x69636552
    8f68:	64657665 	.word	0x64657665
    8f6c:	6c617620 	.word	0x6c617620
    8f70:	25206575 	.word	0x25206575
    8f74:	766f2066 	.word	0x766f2066
    8f78:	55207265 	.word	0x55207265
    8f7c:	20545241 	.word	0x20545241
    8f80:	5b1b6925 	.word	0x5b1b6925
    8f84:	000a6d30 	.word	0x000a6d30
    8f88:	32345b1b 	.word	0x32345b1b
    8f8c:	2020206d 	.word	0x2020206d
    8f90:	464e4920 	.word	0x464e4920
    8f94:	305b1b4f 	.word	0x305b1b4f
    8f98:	6d34393b 	.word	0x6d34393b
    8f9c:	3a73253a 	.word	0x3a73253a
    8fa0:	3b305b1b 	.word	0x3b305b1b
    8fa4:	256d3239 	.word	0x256d3239
    8fa8:	5b1b3a73 	.word	0x5b1b3a73
    8fac:	33393b30 	.word	0x33393b30
    8fb0:	3e64256d 	.word	0x3e64256d
    8fb4:	305b1b20 	.word	0x305b1b20
    8fb8:	6d37333b 	.word	0x6d37333b
    8fbc:	20636461 	.word	0x20636461
    8fc0:	6e616863 	.word	0x6e616863
    8fc4:	736c656e 	.word	0x736c656e
    8fc8:	696e6920 	.word	0x696e6920
    8fcc:	6c616974 	.word	0x6c616974
    8fd0:	64657a69 	.word	0x64657a69
    8fd4:	6d305b1b 	.word	0x6d305b1b
    8fd8:	0000000a 	.word	0x0000000a
    8fdc:	32345b1b 	.word	0x32345b1b
    8fe0:	2020206d 	.word	0x2020206d
    8fe4:	464e4920 	.word	0x464e4920
    8fe8:	305b1b4f 	.word	0x305b1b4f
    8fec:	6d34393b 	.word	0x6d34393b
    8ff0:	3a73253a 	.word	0x3a73253a
    8ff4:	3b305b1b 	.word	0x3b305b1b
    8ff8:	256d3239 	.word	0x256d3239
    8ffc:	5b1b3a73 	.word	0x5b1b3a73
    9000:	33393b30 	.word	0x33393b30
    9004:	3e64256d 	.word	0x3e64256d
    9008:	305b1b20 	.word	0x305b1b20
    900c:	6d37333b 	.word	0x6d37333b
    9010:	666e6f63 	.word	0x666e6f63
    9014:	72756769 	.word	0x72756769
    9018:	62206465 	.word	0x62206465
    901c:	656b6172 	.word	0x656b6172
    9020:	70206425 	.word	0x70206425
    9024:	61206e69 	.word	0x61206e69
    9028:	756f2073 	.word	0x756f2073
    902c:	74757074 	.word	0x74757074
    9030:	6d305b1b 	.word	0x6d305b1b
    9034:	0000000a 	.word	0x0000000a
    9038:	74726175 	.word	0x74726175
    903c:	7361745f 	.word	0x7361745f
    9040:	0000006b 	.word	0x0000006b
    9044:	65746f70 	.word	0x65746f70
    9048:	6f69746e 	.word	0x6f69746e
    904c:	6574656d 	.word	0x6574656d
    9050:	61745f72 	.word	0x61745f72
    9054:	00006b73 	.word	0x00006b73
    9058:	6b617262 	.word	0x6b617262
    905c:	61745f65 	.word	0x61745f65
    9060:	ff006b73 	.word	0xff006b73

00009064 <sjsu::lpc40xx::Pin::kFunction>:
    9064:	ffff0300                                ....

00009068 <sjsu::lpc40xx::Pin::kResistor>:
    9068:	ffff0203                                ....

0000906c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    906c:	ffff0107                                ....

00009070 <sjsu::lpc40xx::Pin::kOpenDrain>:
    9070:	ffff010a                                ....

00009074 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    9074:	41400000                                ..@A

00009078 <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    9078:	ffffff0c                                ....

0000907c <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    907c:	41400000                                ..@A

00009080 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    9080:	ffff0100                                ....

00009084 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    9084:	ffff0100                                ....

00009088 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    9088:	ffff0500                                ....

0000908c <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    908c:	ffff0108                                ....

00009090 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    9090:	ffff0208                                ....

00009094 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    9094:	ffff0208                                ....

00009098 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    9098:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    90a8:	70682e72 ffff0070                       r.hpp...

000090b0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    90b0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    90c0:	70682e72 ffff0070                       r.hpp...

000090c8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    90c8:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    90d8:	70682e72 ffff0070                       r.hpp...

000090e0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    90e0:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    90f0:	70682e72 ffff0070                       r.hpp...

000090f8 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    90f8:	000092d8 00000802                       ........

00009100 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    9100:	000092d8 00000902                       ........

00009108 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    9108:	000092d8 00001c04                       ........

00009110 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    9110:	000092d8 00001d04                       ........

00009118 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    9118:	000092d8 00001d01                       ........

00009120 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    9120:	000092d8 00000902                       ........

00009128 <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    9128:	ffff0800                                ....

0000912c <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    912c:	ffff0808                                ....

00009130 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    9130:	ffff0110                                ....

00009134 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    9134:	ffff0115                                ....

00009138 <sjsu::lpc40xx::Adc::Control::kStartCode>:
    9138:	ffff0318                                ....

0000913c <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    913c:	ffff0c04                                ....

00009140 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    9140:	ffff011f                                ....

00009144 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    9144:	000092d8 00001900                       ........

0000914c <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4>:
    914c:	000092d8 00001e01                       ........

00009154 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel5>:
    9154:	000092d8 00001f01                       ........

0000915c <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    915c:	00009144 0000000a                       D.......

00009164 <sjsu::lpc40xx::Adc::Channel::kChannel4>:
    9164:	0000914c 0000001c                       L.......

0000916c <sjsu::lpc40xx::Adc::Channel::kChannel5>:
    916c:	00009154 0000001d                       T.......

00009174 <sjsu::lpc40xx::Adc::kClockFrequency>:
    9174:	49742400                                .$tI

00009178 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    9178:	65746e69 70757272 70682e74 ffff0070     interrupt.hpp...

00009188 <sjsu::lpc40xx::Gpio::kInterruptController>:
    9188:	00009220                                 ...

0000918c <sjsu::lpc40xx::Gpio::ValidPortCheck() const::file>:
    918c:	6f697067 7070682e ffffff00              gpio.hpp....

00009198 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file>:
    9198:	6f697067 7070682e ffffff00              gpio.hpp....

000091a4 <vUartTask(void*)::file>:
    91a4:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

000091b4 <vUartTask(void*)::file>:
    91b4:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

000091c4 <vUartTask(void*)::file>:
    91c4:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

000091d4 <vPotentiometerTask(void*)::file>:
    91d4:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

000091e4 <vBrakeTask(void*)::file>:
    91e4:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

000091f4 <vtable for sjsu::lpc40xx::Gpio>:
	...
    91fc:	00001e3d 00001ebd 00001f31 00001f75     =.......1...u...
    920c:	00001fb5 00002115 00002143              .....!..C!..

00009218 <vtable for sjsu::cortex::InterruptController>:
	...
    9220:	00001dc1 00001e15                       ........

00009228 <vtable for sjsu::Gpio>:
	...
    9230:	00006dd5 00006dd5 00006dd5 00006dd5     .m...m...m...m..
    9240:	00006dd5 00006dd5 00006dd5              .m...m...m..

0000924c <vtable for sjsu::lpc40xx::Adc>:
	...
    9254:	000019c5 00001ae1 00001b31              ........1...

00009260 <vtable for sjsu::Adc>:
	...
    9268:	00006dd5 00006dd5 00006dd5              .m...m...m..

00009274 <vtable for sjsu::lpc40xx::Uart>:
	...
    927c:	000015c9 00001689 00001715 000017b9     ................
    928c:	00001889                                ....

00009290 <vtable for sjsu::Uart>:
	...
    9298:	00006dd5 00006dd5 00006dd5 00006dd5     .m...m...m...m..
    92a8:	00006dd5                                .m..

000092ac <vtable for sjsu::lpc40xx::SystemController>:
	...
    92b4:	0000093d 000009d9 00000a31 00000a55     =.......1...U...
    92c4:	00000a71 00000aad 00000ae1              q...........

000092d0 <vtable for sjsu::lpc40xx::Pin>:
	...
    92d8:	0000074d 00000781 000007f1 000007b5     M...............

000092e8 <vtable for sjsu::Pin>:
	...
    92f0:	00006dd5 00006dd5 00006dd5 00006dd5     .m...m...m...m..

00009300 <vUartTask(void*)::__PRETTY_FUNCTION__>:
    9300:	64696f76 61557620 61547472 76286b73     void vUartTask(v
    9310:	2a64696f ffff0029                       oid*)...

00009318 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    9318:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    9328:	6c3a3a75 30346370 3a3a7878 74737953     u::lpc40xx::Syst
    9338:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
    9348:	72655074 65687069 436c6172 6b636f6c     tPeripheralClock
    9358:	69766944 28726564 736e6f63 6a732074     Divider(const sj
    9368:	3a3a7573 74737953 6f436d65 6f72746e     su::SystemContro
    9378:	72656c6c 65503a3a 68706972 6c617265     ller::Peripheral
    9388:	2c264449 6e697520 745f3874 6f632029     ID&, uint8_t) co
    9398:	0074736e                                nst.

0000939c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    939c:	746e6975 745f3233 736a7320 6c3a3a75     uint32_t sjsu::l
    93ac:	30346370 3a3a7878 74737953 6f436d65     pc40xx::SystemCo
    93bc:	6f72746e 72656c6c 61433a3a 6c75636c     ntroller::Calcul
    93cc:	50657461 75286c6c 7374696e 72663a3a     atePll(units::fr
    93dc:	65757165 3a79636e 67656d3a 72656861     equency::megaher
    93ec:	745f7a74 6e75202c 3a737469 6572663a     tz_t, units::fre
    93fc:	6e657571 3a3a7963 6167656d 74726568     quency::megahert
    940c:	29745f7a 6e6f6320 ff007473              z_t) const..

00009418 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    9418:	64696f76 736a7320 6c3a3a75 30346370     void sjsu::lpc40
    9428:	3a3a7878 74737953 6f436d65 6f72746e     xx::SystemContro
    9438:	72656c6c 65533a3a 75704374 636f6c43     ller::SetCpuCloc
    9448:	7669446b 72656469 6e697528 745f3874     kDivider(uint8_t
    9458:	6f632029 0074736e                       ) const.

00009460 <vPotentiometerTask(void*)::__PRETTY_FUNCTION__>:
    9460:	64696f76 6f507620 746e6574 656d6f69     void vPotentiome
    9470:	54726574 286b7361 64696f76 ff00292a     terTask(void*)..

00009480 <vBrakeTask(void*)::__PRETTY_FUNCTION__>:
    9480:	64696f76 72427620 54656b61 286b7361     void vBrakeTask(
    9490:	64696f76 ff00292a                       void*)..

00009498 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    9498:	74617473 76206369 2064696f 75736a73     static void sjsu
    94a8:	6f633a3a 78657472 6e493a3a 72726574     ::cortex::Interr
    94b8:	43747075 72746e6f 656c6c6f 553a3a72     uptController::U
    94c8:	6765726e 65747369 49646572 7265746e     nregisteredInter
    94d8:	74707572 646e6148 2872656c ffff0029     ruptHandler()...

000094e8 <sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__>:
    94e8:	6c6f6f62 736a7320 6c3a3a75 30346370     bool sjsu::lpc40
    94f8:	3a3a7878 6f697047 61563a3a 5064696c     xx::Gpio::ValidP
    9508:	4374726f 6b636568 63202928 74736e6f     ortCheck() const
    9518:	ffffff00                                ....

0000951c <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__>:
    951c:	64696f76 736a7320 6c3a3a75 30346370     void sjsu::lpc40
    952c:	3a3a7878 6f697047 65533a3a 746e4974     xx::Gpio::SetInt
    953c:	75727265 64457470 73286567 3a75736a     erruptEdge(sjsu:
    954c:	6970473a 453a3a6f 29656764 6e6f6320     :Gpio::Edge) con
    955c:	ff007473 61766e69 0064696c 6c707061     st..invalid.appl
    956c:	74616369 006e6f69 74736f68 73657420     ication.host tes
    957c:	00000074 64252020 78302029 58383025     t...  %d) 0x%08X
    958c:	0000000a 25783020 00583830 64252020     .... 0x%08X.  %d
    959c:	78302029 000a7025 6e75520a 6874203a     ) 0x%p...Run: th
    95ac:	6f662065 776f6c6c 20676e69 6d6d6f63     e following comm
    95bc:	20646e61 79206e69 2072756f 6a6f7270     and in your proj
    95cc:	20746365 65726964 726f7463 00000079     ect directory...
    95dc:	20200a0a 3b315b1b 006d3733 656b616d     ..  .[1;37m.make
    95ec:	61747320 72746b63 2d656361 54207325      stacktrace-%s T
    95fc:	45434152 00223d53 25783020 00000070     RACES=". 0x%p...
    960c:	1b0a0a22 006d305b 73696854 6c697720     "...[0m.This wil
    961c:	6572206c 74726f70 65687420 6c696620     l report the fil
    962c:	6e612065 696c2064 6e20656e 65626d75     e and line numbe
    963c:	68742072 6c207461 74206465 6874206f     r that led to th
    964c:	66207369 74636e75 206e6f69 6e696562     is function bein
    965c:	61632067 64656c6c 0000002e 33345b1b     g called.....[43
    966c:	4157206d 4e494e52 305b1b47 6d34393b     m WARNING.[0;94m
    967c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    968c:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    969c:	69206f4e 7265746e 74707572 72657320     No interrupt ser
    96ac:	65636976 756f7220 656e6974 756f6620     vice routine fou
    96bc:	6620646e 7420726f 76206568 6f746365     nd for the vecto
    96cc:	64252072 69442021 6c626173 20676e69     r %d! Disabling 
    96dc:	1b525349 0a6d305b 00000000 31345b1b     ISR.[0m......[41
    96ec:	7261486d 61462064 20746c75 65637845     mHard Fault Exce
    96fc:	6f697470 634f206e 72727563 0a216465     ption Occurred!.
    970c:	6d305b1b 00000000 203a3072 30257830     .[0m....r0: 0x%0
    971c:	2c586c38 3a317220 25783020 586c3830     8lX, r1: 0x%08lX
    972c:	3272202c 7830203a 6c383025 72202c58     , r2: 0x%08lX, r
    973c:	30203a33 38302578 000a586c 3a323172     3: 0x%08lX..r12:
    974c:	25783020 586c3830 726c202c 7830203a      0x%08lX, lr: 0x
    975c:	6c383025 70202c58 30203a63 38302578     %08lX, pc: 0x%08
    976c:	202c586c 3a727370 25783020 586c3830     lX, psr: 0x%08lX
    977c:	0000000a 315b1b0a 6d37333b 32345b1b     ......[1;37m.[42
    978c:	6f72506d 6d617267 74655220 656e7275     mProgram Returne
    979c:	78452064 43207469 3a65646f 646c2520     d Exit Code: %ld
    97ac:	305b1b0a 0000006d 315b1b0a 6d37333b     ..[0m.....[1;37m
    97bc:	31345b1b 6f72506d 6d617267 74655220     .[41mProgram Ret
    97cc:	656e7275 78452064 43207469 3a65646f     urned Exit Code:
    97dc:	646c2520 305b1b0a ffff006d 454c4449      %ld..[0m...IDLE
    97ec:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
    97fc:	00000a0d 09752509 25752509 000a0d25     .....%u..%u%%...
    980c:	09752509 25313c09 000a0d25 ffff000a     .%u..<1%%.......

0000981c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    981c:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
    982c:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
    983c:	4cbebc20 4e6e6b28 0074743a 61766e69      ..L(knN:tt.inva
    984c:	0064696c 6c707061 74616369 006e6f69     lid.application.
    985c:	74736f68 73657420 00000074 64252020     host test...  %d
    986c:	78302029 58383025 0000000a 25783020     ) 0x%08X.... 0x%
    987c:	00583830 64252020 78302029 000a7025     08X.  %d) 0x%p..
    988c:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
    989c:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
    98ac:	2072756f 6a6f7270 20746365 65726964     our project dire
    98bc:	726f7463 00000079 20200a0a 3b315b1b     ctory.....  .[1;
    98cc:	006d3733 656b616d 61747320 72746b63     37m.make stacktr
    98dc:	2d656361 54207325 45434152 00223d53     ace-%s TRACES=".
    98ec:	25783020 00000070 1b0a0a22 006d305b      0x%p..."...[0m.
    98fc:	73696854 6c697720 6572206c 74726f70     This will report
    990c:	65687420 6c696620 6e612065 696c2064      the file and li
    991c:	6e20656e 65626d75 68742072 6c207461     ne number that l
    992c:	74206465 6874206f 66207369 74636e75     ed to this funct
    993c:	206e6f69 6e696562 61632067 64656c6c     ion being called
    994c:	0000002e 33345b1b 4157206d 4e494e52     .....[43m WARNIN
    995c:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
    996c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    997c:	305b1b20 6d37333b 69206f4e 7265746e      .[0;37mNo inter
    998c:	74707572 72657320 65636976 756f7220     rupt service rou
    999c:	656e6974 756f6620 6620646e 7420726f     tine found for t
    99ac:	76206568 6f746365 64252072 69442021     he vector %d! Di
    99bc:	6c626173 20676e69 1b525349 0a6d305b     sabling ISR.[0m.
    99cc:	00000000 ffffffff 000058a5 00000001     .........X......
    99dc:	ffffffff 35345b1b 2020206d 4f525245     .....[45m   ERRO
    99ec:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    99fc:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    9a0c:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    9a1c:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    9a2c:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
    9a3c:	68706972 6c617265 7669645f 72656469     ripheral_divider
    9a4c:	203d3c20 200a2934 20202020 20202020      <= 4).         
    9a5c:	76694420 72656469 73756d20 74276e74      Divider mustn't
    9a6c:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
    9a7c:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
    9a8c:	206b6361 63617254 000a3a65 35345b1b     ack Trace:...[45
    9a9c:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    9aac:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    9abc:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    9acc:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    9adc:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    9aec:	3a646574 65642820 65726973 72665f64     ted: (desired_fr
    9afc:	65757165 2079636e 3833203c 484d5f34     equency < 384_MH
    9b0c:	2626207a 73656420 64657269 6572665f     z && desired_fre
    9b1c:	6e657571 3e207963 5f323120 297a484d     quency > 12_MHz)
    9b2c:	2020200a 20202020 46202020 75716572     .          Frequ
    9b3c:	79636e65 73756d20 65622074 776f6c20     ency must be low
    9b4c:	74207265 206e6168 20343833 617a484d     er than 384 MHza
    9b5c:	6720646e 74616572 74207265 206e6168     nd greater than 
    9b6c:	6520726f 6c617571 206f7420 4d203231     or equal to 12 M
    9b7c:	5b1b7a48 5b1b6d30 000a6d30 35345b1b     Hz.[0m.[0m...[45
    9b8c:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    9b9c:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    9bac:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    9bbc:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    9bcc:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    9bdc:	3a646574 69642820 65646976 61765f72     ted: (divider_va
    9bec:	2065756c 2938203c 2020200a 20202020     lue < 8).       
    9bfc:	50202020 64204c4c 64697669 76207265        PLL divider v
    9c0c:	65756c61 6e657720 756f2074 666f2074     alue went out of
    9c1c:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
    9c2c:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
    9c3c:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    9c4c:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    9c5c:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    9c6c:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    9c7c:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
    9c8c:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
    9c9c:	20202020 20202020 69442020 65646976               Divide
    9cac:	756d2072 276e7473 78652074 64656563     r mustn't exceed
    9cbc:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
    9ccc:	fffffffb 00005e61 00000001 ffffffff     ....a^..........
    9cdc:	fffffffe 00005f71 00000001 ffffffff     ....q_..........
    9cec:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    9cfc:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    9d0c:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    9d1c:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    9d2c:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    9d3c:	73655420 3a646574 69742820 5f72656d      Tested: (timer_
    9d4c:	72617473 74735f74 73757461 203d3d20     start_status == 
    9d5c:	75736a73 74533a3a 73757461 536b3a3a     sjsu::Status::kS
    9d6c:	65636375 0a297373 20202020 20202020     uccess).        
    9d7c:	79532020 6d657473 6d695420 28207265       System Timer (
    9d8c:	64657375 20796220 65657246 534f5452     used by FreeRTOS
    9d9c:	61682029 41462073 44454c49 206f7420     ) has FAILED to 
    9dac:	72617473 5b1b2174 5b1b6d30 000a6d30     start!.[0m.[0m..
    9dbc:	ffffffff                                ....

00009dc0 <std::integral_constant<long long, 1ll>::value>:
    9dc0:	00000001 00000000                       ........

00009dc8 <config::kSystemClockRateMhz>:
    9dc8:	42400000                                ..@B

00009dcc <config::kRtosFrequency>:
    9dcc:	447a0000                                ..zD

00009dd0 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    9dd0:	00009220                                 ...

00009dd4 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    9dd4:	000092d8 00000200                       ........

00009ddc <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    9ddc:	000092d8 00000300                       ........

00009de4 <sjsu::lpc40xx::Uart::Port::kUart0>:
    9de4:	4000c000 00000003 00009dd4 00009ddc     ...@............
    9df4:	00000009                                ....

00009df8 <sjsu::InitializePlatform()::file>:
    9df8:	72617473 2e707574 00707063              startup.cpp.

00009e04 <vtable for sjsu::cortex::SystemTimer>:
	...
    9e0c:	00005911 00005925 00005a2d 00005945     .Y..%Y..-Z..EY..

00009e1c <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    9e1c:	64696f76 736a7320 493a3a75 6974696e     void sjsu::Initi
    9e2c:	7a696c61 616c5065 726f6674 0029286d     alizePlatform().
    9e3c:	20726d54 00637653 51726d54 ffffff00     Tmr Svc.TmrQ....

00009e4c <__sf_fake_stderr>:
	...

00009e6c <__sf_fake_stdin>:
	...

00009e8c <__sf_fake_stdout>:
	...
