
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000029b9

Program Header:
0x70000001 off    0x0001726c vaddr 0x0000726c paddr 0x0000726c align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007324 memsz 0x00007324 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00007324 align 2**16
         filesz 0x000000ec memsz 0x000000ec flags rw-
    LOAD off    0x000200f0 vaddr 0x100000f0 paddr 0x100000f0 align 2**16
         filesz 0x00000000 memsz 0x00000244 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00007254  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000ec  10000000  00007324  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200ec  2**2  CONTENTS
  3 .bss             00000244  100000f0  100000f0  000200f0  2**3  ALLOC
  4 .ARM.extab       00000018  00007254  00007254  00017254  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  0000726c  0000726c  0001726c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200ec  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200ec  2**2  CONTENTS
  8 .noinit          00000000  10000334  10000334  000200ec  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200ec  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  0002011c  2**0  CONTENTS, READONLY
 11 .debug_info      0006b096  00000000  00000000  0002019a  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00003f1e  00000000  00000000  0008b230  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000cd8  00000000  00000000  0008f14e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000c58  00000000  00000000  0008fe26  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00006352  00000000  00000000  00090a7e  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002ac80  00000000  00000000  00096dd0  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00004360  00000000  00000000  000c1a50  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f0 l    d  .bss	00000000 .bss
00007254 l    d  .ARM.extab	00000000 .ARM.extab
0000726c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000334 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00003dcc l     F .text	00000030 NVIC_EnableIRQ
00003dfc l     F .text	00000030 NVIC_DisableIRQ
00003e2c l     F .text	00000054 NVIC_SetPriority
00007170 l     O .text	00000004 config::kSystemClockRateMhz
00007174 l     O .text	00000004 config::kRtosFrequency
00003f38 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003f54 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
10000074 l     O .data	00000004 (anonymous namespace)::system_controller
10000320 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000324 l     O .bss	0000000c (anonymous namespace)::uart0
10000078 l     O .data	0000000c (anonymous namespace)::system_timer
00004344 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00004368 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
000071a0 l     O .text	0000000c sjsu::InitializePlatform()::file
000071d4 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00004498 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
000045a8 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/ControlSystems2020/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000f0 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000f4 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003ec l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000408 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000044e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000046a l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000048e l     F .text	00000026 _Unwind_GetGR
00000758 l     F .text	00000030 NVIC_DisableIRQ
00000998 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000009b4 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000067a8 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
0000682c l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000068a8 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
000013ec l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
000068f0 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
000066dc l     O .text	00000009 main::file
000066e8 l     O .text	00000009 main::file
000066f4 l     O .text	00000009 main::file
0000679c l     O .text	0000000b main::__PRETTY_FUNCTION__
000024d2 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002582 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000025a8 l     F .text	00000240 __static_initialization_and_destruction_0(int, int)
000027e8 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
000029a8 l       .text	00000000 handler2_address_const
00002a0c l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00002a50 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
1000029c l     O .bss	00000064 pxReadyTasksLists
10000300 l     O .bss	00000004 uxTopReadyPriority
10000304 l     O .bss	00000004 xYieldPending
10000308 l     O .bss	00000004 uxSchedulerSuspended
1000030c l     O .bss	00000004 ulTaskSwitchedInTime
10000310 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00002ba8 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00002bc4 l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
00002bea l     F .text	0000002e _strlen(char const*)
00002c18 l     F .text	00000028 _is_digit(char)
00002c40 l     F .text	00000048 _atoi(char const**)
00002c88 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00002eca l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00002f9a l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00006bcc l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
0000307c l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
000034c0 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
000045e0 l       .text	00000000 pxCurrentTCBConst2
00004650 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00005048 l     F .text	00000012 selfrel_offset31
0000505c l     F .text	00000060 search_EIT_table
000050bc l     F .text	00000028 __gnu_unwind_get_pr_addr
000050e4 l     F .text	000000a4 get_eit_entry
00005188 l     F .text	00000058 restore_non_core_regs
000051e0 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000051ec l     F .text	00000004 __gnu_unwind_24bit.isra.1
000051f0 l     F .text	00000002 _Unwind_DebugHook
000051f4 l     F .text	0000003e unwind_phase2
00005234 l     F .text	000000c6 unwind_phase2_forced
00005404 l     F .text	00000018 _Unwind_GetGR
00005448 l     F .text	0000001a _Unwind_SetGR
000054d4 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005be0 l     F .text	00000038 next_unwind_byte
00005c18 l     F .text	0000001a _Unwind_GetGR.constprop.0
00005c34 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
1000008c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000004f4  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005b98 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00005300 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000040f8  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00002278  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00002894  w    F .text	0000006c sjsu::InitializeBssSection()
00002b30 g     F .text	00000010 _getpid
000046c8 g     F .text	00000024 _putchar
000065f8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00001e58  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004140  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
00006654  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00003f0c  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
0000097e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
10000060  w    O .data	00000004 sjsu::newlib::in
00004a34 g     F .text	0000005a .hidden __floatdidf
10000274  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
0000090c  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00006714  w    O .text	00000014 vtable for sjsu::Adc
00006038 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00003d94 g     F .text	00000038 printf
00000000 g       *ABS*	00000000 __vectors_start__
00002134  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000020bc  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001b44  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
0000409c  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00000580  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
00005a54 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005b74 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00007324 g       .ARM.exidx	00000000 __exidx_end
000065d8  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
0000439c g     F .text	00000014 ThreadRuntimeCounter
000057a8 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
1000006c  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00001da8  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
000066c0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel4
00000b54  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
10000298 g     O .bss	00000004 pxCurrentTCB
00005f24 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005b74 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
000065f0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000669c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10000330 g     O .bss	00000004 errno
00007324 g       .ARM.exidx	00000000 _etext
000021c8  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000085c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000c4c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00005bbc g     F .text	00000022 .hidden _Unwind_Backtrace
00007178  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
10000118  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00004b3c g     F .text	00000160 .hidden __aeabi_fadd
10000318  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00004b38 g     F .text	00000164 .hidden __subsf3
000066a4  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000d18  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000667c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00005a34 g     F .text	00000018 .hidden __restore_core_regs
00005a74 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000065e8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00006728  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00003fb4  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
000065dc  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00001128  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000052fc g     F .text	00000004 .hidden _Unwind_GetCFA
00005fb0 g     F .text	00000016 memcpy
00000e50  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004670 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
0000541c g     F .text	0000002a .hidden _Unwind_VRS_Set
000049bc g     F .text	00000022 .hidden __floatsidf
1000027c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00004d4c g     F .text	00000000 .hidden __aeabi_uldivmod
10000334 g       .noinit	00000000 _noinit
00000d30  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000668  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
00002b5c g     F .text	0000004c puts
000019b8  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000011a8  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
000021a4  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
000066b8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4
10000070  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000a80  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
000015d8  w    F .text	00000020 sjsu::Uart::Uart()
00005fd6 g     F .text	00000050 _raise_r
00004ca4 g     F .text	0000001c .hidden __aeabi_i2f
00001964  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
00001934  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
000045f0 g     F .text	00000066 xPortPendSVHandler
10000000 g       *ABS*	00000000 __base_RamLoc64
000003aa  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000820  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
0000605c g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00005464 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00002096  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
0000499c g     F .text	0000001e .hidden __aeabi_ui2d
10010000 g       *ABS*	00000000 StackTop
00000dec  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00004d7c g     F .text	000002cc .hidden __udivmoddi4
00004718 g     F .text	00000000 .hidden __aeabi_drsub
000000fc g       .text	00000000 bss_section_table
000065e0  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00004268  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000067e  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
00005a64 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000015f8  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000057b4 g     F .text	0000027e .hidden _Unwind_VRS_Pop
000057b0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
00004198  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
1000026c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005bbc g     F .text	00000022 .hidden ___Unwind_Backtrace
00000624  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
0000181c  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
0000053c  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
000049e0 g     F .text	00000042 .hidden __extendsfdf2
00006694  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00004724 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
10000314  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
0000726c g       .ARM.extab	00000000 __exidx_start
00005f68 g     F .text	00000048 __libc_init_array
00001320  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00005b2c g     F .text	00000022 .hidden ___Unwind_RaiseException
000013c8  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00001bf4  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
00005f58 g     F .text	0000000e abort
00005b50 g     F .text	00000022 .hidden ___Unwind_Resume
000013b0  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000499c g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
10000268  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00001de0  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
0000134c  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00004658 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
000065e4  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
000024ee  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
000017c6  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
0000470c g     F .text	0000000a std::terminate()
00004a90 g     F .text	0000009e .hidden __aeabi_d2f
00005a7c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000065ec  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
00001e8c  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00004b38 g     F .text	00000164 .hidden __aeabi_fsub
000016ec  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
0000215a  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00002990 g     F .text	00000026 ArmHardFaultHandler
10000278  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000224  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000dca  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000334 g       .bss	00000000 _ebss
00001778  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00006760  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
000022b8  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000afc  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00004164  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
0000042c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004cd0 g     F .text	0000007c .hidden __floatdisf
00007184  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00002914 g     F .text	0000007c GetRegistersFromStack
000066a8  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
000015f8  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00004724 g     F .text	00000276 .hidden __aeabi_dadd
00001964  w    F .text	00000020 sjsu::Adc::Adc()
00004a24 g     F .text	0000006a .hidden __aeabi_ul2d
00005a4c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
000043b0  w    F .text	000000b8 sjsu::InitializePlatform()
00001fd8  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
000071f4 g     O .text	00000020 __sf_fake_stderr
00003fd4  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
000046fc g     F .text	00000010 std::get_terminate()
000015d8  w    F .text	00000020 sjsu::Uart::Uart()
00005b50 g     F .text	00000022 .hidden _Unwind_Resume
00001cb8  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
000053cc g     F .text	0000000c .hidden _Unwind_DeleteException
000071c4  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
000053c8 g     F .text	00000002 .hidden _Unwind_Complete
00000c04  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000264  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
000071ac  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00006608  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
10010000 g       *ABS*	00000000 __top_RamLoc64
10000270  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
000023d0  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000f0 g       .bss	00000000 _bss
00004720 g     F .text	0000027a .hidden __aeabi_dsub
0000663c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001b94  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
000066ac  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
00004a24 g     F .text	0000006a .hidden __floatundidf
000046ec g     F .text	00000006 __cxa_pure_virtual
00000e28  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00004ca4 g     F .text	0000001c .hidden __floatsisf
0000666c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
1000011c  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00005c38 g     F .text	000002c4 .hidden __gnu_unwind_execute
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000280  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000009e4  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005a5c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000007a0  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002420  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
0000095c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00006070  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
10000334 g       .noinit	00000000 _end_noinit
10000124  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000ad8  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00002a60 g     F .text	000000c4 vTaskSwitchContext
00001170  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
000065f4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000040c4  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
000066cc  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00005374 g     F .text	00000044 .hidden __gnu_Unwind_Resume
1000023c  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
000040dc  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00003e80  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
10000288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
000049bc g     F .text	00000022 .hidden __aeabi_i2d
000066a0  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
00006674  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
00005a6c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00004280  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000284  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00004cc0 g     F .text	0000008c .hidden __floatundisf
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00005b2c g     F .text	00000022 .hidden _Unwind_RaiseException
00005f54  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00002900  w    F .text	00000014 sjsu::SystemInitialize()
00001a10  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00004c9c g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
10000110  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
1000028c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00004688 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
0000037e  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00007214 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
000010ac  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00005fc6 g     F .text	00000010 memset
00001ea8 g     F .text	00000130 main
00003ec4  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001cc8  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
000066b4  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00004cd0 g     F .text	0000007c .hidden __aeabi_l2f
0000200e  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00004048  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00003ee4  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000718c  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00006784  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004a90 g     F .text	0000009e .hidden __truncdfsf2
000022dc  w    F .text	0000009a float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)
0000031c g       .text	00000000 __init_array_end
000045c0 g     F .text	00000026 vPortSVCHandler
00004a34 g     F .text	0000005a .hidden __aeabi_l2d
00006600  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000064  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004cc0 g     F .text	0000008c .hidden __aeabi_ul2f
00003f78  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001184  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
00005360 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00001dc4  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000020f8  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000053b8 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
1000005c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00007168  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
0000222c  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
00005a34 g     F .text	00000018 .hidden restore_core_regs
00000b18  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00005b18 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
0000668c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00004178  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00002020  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00001910  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00004b30 g     F .text	0000016c .hidden __aeabi_frsub
00005f4c g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000088 g     O .data	00000004 _impure_ptr
00006604  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000d54  w    F .text	0000001e units::linear_scale<float>::operator()() const
000066b0  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000cdc  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004010  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
00001d90  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
00000890  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00006700  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
000021fe  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
0000422c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
10000290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00005f30 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00006624  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001984  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
000029b8 g     F .text	00000054 ArmResetHandler
0000225a  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
00001984  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
10000294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
000053d8 g     F .text	0000002a .hidden _Unwind_VRS_Get
00003fec  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000084 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005b04 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000b88  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00000690  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000bbc  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00005efc g     F .text	00000028 .hidden __gnu_unwind_frame
00001bac  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00005b98 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000ec g       .data	00000000 _edata
000018ec  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00001a28  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00004468  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000120  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00001d04  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
0000660c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000d72  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00004c9c g     F .text	00000024 .hidden __floatunsisf
000046f2 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005ac0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00002b40 g     F .text	0000001a _kill
000027f8  w    F .text	0000009c sjsu::InitializeDataSection()
0000252a  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00000648  w    F .text	00000020 sjsu::DefaultUptime()
00007234 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
000066c8  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
0000030c g       .text	00000000 __init_array_start
00005f54  w    F .text	00000002 .hidden __aeabi_idiv0
0000217e  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00002b24 g     F .text	0000000c _exit
00006684  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
000003cc  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00001288  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
0000073c  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000788  w    F .text	00000018 sjsu::Pin::GetPort() const
00006060 g     F .text	00000010 strlen
000007b8  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000000  w    O .data	00000004 sjsu::Uptime
000057ac  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00002376  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000fe4  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000046a8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000004b4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
000049e0 g     F .text	00000042 .hidden __aeabi_f2d
00005f44 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000012d4  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
0000247a  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
000007ec  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00004720 g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
00000c94  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00002048  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001d1c  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
000065fc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00006744  w    O .text	0000001c vtable for sjsu::Uart
00004b3c g     F .text	00000160 .hidden __addsf3
00002296  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
0000717c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
10000068  w    O .data	00000004 sjsu::cortex::DwtCounter::core
0000162c  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00006028 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 b9 29 00 00 11 40 00 00 91 29 00 00     .....)...@...)..
      10:	11 40 00 00 11 40 00 00 11 40 00 00 00 00 00 00     .@...@...@......
	...
      2c:	c1 45 00 00 11 40 00 00 00 00 00 00 f1 45 00 00     .E...@.......E..
      3c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      4c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      5c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      6c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      7c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      8c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      9c:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      ac:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      bc:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      cc:	11 40 00 00 11 40 00 00 11 40 00 00 11 40 00 00     .@...@...@...@..
      dc:	11 40 00 00 11 40 00 00                             .@...@..

000000e4 <data_section_table>:
      e4:	00007324 	.word	0x00007324
      e8:	10000000 	.word	0x10000000
      ec:	000000ec 	.word	0x000000ec
      f0:	00007324 	.word	0x00007324
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f0 	.word	0x100000f0
     100:	00000244 	.word	0x00000244
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	000027e9 	.word	0x000027e9
     314:	00002a51 	.word	0x00002a51
     318:	000045a9 	.word	0x000045a9

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000f0 	.word	0x100000f0
     344:	00000000 	.word	0x00000000
     348:	0000726c 	.word	0x0000726c

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000f4 	.word	0x100000f4
     364:	0000726c 	.word	0x0000726c

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     37e:	b580      	push	{r7, lr}
     380:	b084      	sub	sp, #16
     382:	af00      	add	r7, sp, #0
     384:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the system clock speed for the LPC4078 in MHz
#if !defined(SJ2_SYSTEM_CLOCK_RATE_MHZ)
#define SJ2_SYSTEM_CLOCK_RATE_MHZ 48_MHz
#endif  // !defined(SJ2_SYSTEM_CLOCK_RATE)
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     388:	e9d7 0100 	ldrd	r0, r1, [r7]
     38c:	f004 fc98 	bl	4cc0 <__aeabi_ul2f>
     390:	4602      	mov	r2, r0
     392:	f107 030c 	add.w	r3, r7, #12
     396:	ee00 2a10 	vmov	s0, r2
     39a:	4618      	mov	r0, r3
     39c:	f000 f805 	bl	3aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	4618      	mov	r0, r3
     3a4:	3710      	adds	r7, #16
     3a6:	46bd      	mov	sp, r7
     3a8:	bd80      	pop	{r7, pc}

000003aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     3aa:	b580      	push	{r7, lr}
     3ac:	b082      	sub	sp, #8
     3ae:	af00      	add	r7, sp, #0
     3b0:	6078      	str	r0, [r7, #4]
     3b2:	ed87 0a00 	vstr	s0, [r7]
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	463a      	mov	r2, r7
     3ba:	4611      	mov	r1, r2
     3bc:	4618      	mov	r0, r3
     3be:	f000 f805 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	4618      	mov	r0, r3
     3c6:	3708      	adds	r7, #8
     3c8:	46bd      	mov	sp, r7
     3ca:	bd80      	pop	{r7, pc}

000003cc <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     3cc:	b480      	push	{r7}
     3ce:	b083      	sub	sp, #12
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	683b      	ldr	r3, [r7, #0]
     3d8:	681a      	ldr	r2, [r3, #0]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	601a      	str	r2, [r3, #0]
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	4618      	mov	r0, r3
     3e2:	370c      	adds	r7, #12
     3e4:	46bd      	mov	sp, r7
     3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ea:	4770      	bx	lr

000003ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     3ec:	b580      	push	{r7, lr}
     3ee:	b086      	sub	sp, #24
     3f0:	af00      	add	r7, sp, #0
     3f2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     3f4:	6878      	ldr	r0, [r7, #4]
     3f6:	f000 f807 	bl	408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     3fa:	eef0 7a40 	vmov.f32	s15, s0
	}
     3fe:	eeb0 0a67 	vmov.f32	s0, s15
     402:	3718      	adds	r7, #24
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}

00000408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	7239      	strb	r1, [r7, #8]
     412:	713a      	strb	r2, [r7, #4]
     414:	703b      	strb	r3, [r7, #0]
			return value;
     416:	68fb      	ldr	r3, [r7, #12]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	ee07 3a90 	vmov	s15, r3
		}
     41e:	eeb0 0a67 	vmov.f32	s0, s15
     422:	3714      	adds	r7, #20
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     42c:	b580      	push	{r7, lr}
     42e:	b082      	sub	sp, #8
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	ed87 0a00 	vstr	s0, [r7]
     438:	687b      	ldr	r3, [r7, #4]
     43a:	463a      	mov	r2, r7
     43c:	4611      	mov	r1, r2
     43e:	4618      	mov	r0, r3
     440:	f7ff ffc4 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     444:	687b      	ldr	r3, [r7, #4]
     446:	4618      	mov	r0, r3
     448:	3708      	adds	r7, #8
     44a:	46bd      	mov	sp, r7
     44c:	bd80      	pop	{r7, pc}

0000044e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     44e:	b580      	push	{r7, lr}
     450:	b086      	sub	sp, #24
     452:	af00      	add	r7, sp, #0
     454:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     456:	6878      	ldr	r0, [r7, #4]
     458:	f000 f807 	bl	46a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     45c:	eef0 7a40 	vmov.f32	s15, s0
	}
     460:	eeb0 0a67 	vmov.f32	s0, s15
     464:	3718      	adds	r7, #24
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}

0000046a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     46a:	b480      	push	{r7}
     46c:	b085      	sub	sp, #20
     46e:	af00      	add	r7, sp, #0
     470:	60f8      	str	r0, [r7, #12]
     472:	7239      	strb	r1, [r7, #8]
     474:	713a      	strb	r2, [r7, #4]
     476:	703b      	strb	r3, [r7, #0]
			return value;
     478:	68fb      	ldr	r3, [r7, #12]
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	ee07 3a90 	vmov	s15, r3
		}
     480:	eeb0 0a67 	vmov.f32	s0, s15
     484:	3714      	adds	r7, #20
     486:	46bd      	mov	sp, r7
     488:	f85d 7b04 	ldr.w	r7, [sp], #4
     48c:	4770      	bx	lr

0000048e <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     48e:	b580      	push	{r7, lr}
     490:	b086      	sub	sp, #24
     492:	af02      	add	r7, sp, #8
     494:	6078      	str	r0, [r7, #4]
     496:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     498:	683a      	ldr	r2, [r7, #0]
     49a:	f107 030c 	add.w	r3, r7, #12
     49e:	9300      	str	r3, [sp, #0]
     4a0:	2300      	movs	r3, #0
     4a2:	2100      	movs	r1, #0
     4a4:	6878      	ldr	r0, [r7, #4]
     4a6:	f004 ff97 	bl	53d8 <_Unwind_VRS_Get>
      return val;
     4aa:	68fb      	ldr	r3, [r7, #12]
    }
     4ac:	4618      	mov	r0, r3
     4ae:	3710      	adds	r7, #16
     4b0:	46bd      	mov	sp, r7
     4b2:	bd80      	pop	{r7, pc}

000004b4 <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
     4b4:	b480      	push	{r7}
     4b6:	b085      	sub	sp, #20
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     4be:	60fb      	str	r3, [r7, #12]
  switch (target)
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d002      	beq.n	4cc <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     4c6:	2b01      	cmp	r3, #1
     4c8:	d003      	beq.n	4d2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     4ca:	e005      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     4cc:	4b07      	ldr	r3, [pc, #28]	; (4ec <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     4ce:	60fb      	str	r3, [r7, #12]
     4d0:	e002      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     4d4:	60fb      	str	r3, [r7, #12]
     4d6:	bf00      	nop
  }
  return result;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	4618      	mov	r0, r3
     4dc:	3714      	adds	r7, #20
     4de:	46bd      	mov	sp, r7
     4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	00006078 	.word	0x00006078
     4ec:	00006080 	.word	0x00006080
     4f0:	0000608c 	.word	0x0000608c

000004f4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     502:	210f      	movs	r1, #15
     504:	6878      	ldr	r0, [r7, #4]
     506:	f7ff ffc2 	bl	48e <_Unwind_GetGR>
     50a:	4603      	mov	r3, r0
     50c:	f023 0301 	bic.w	r3, r3, #1
     510:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     512:	68fb      	ldr	r3, [r7, #12]
     514:	6819      	ldr	r1, [r3, #0]
     516:	68bb      	ldr	r3, [r7, #8]
     518:	3b04      	subs	r3, #4
     51a:	461a      	mov	r2, r3
     51c:	4806      	ldr	r0, [pc, #24]	; (538 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     51e:	f003 fc39 	bl	3d94 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     522:	68fb      	ldr	r3, [r7, #12]
     524:	681b      	ldr	r3, [r3, #0]
     526:	1c5a      	adds	r2, r3, #1
     528:	68fb      	ldr	r3, [r7, #12]
     52a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     52c:	2300      	movs	r3, #0
}
     52e:	4618      	mov	r0, r3
     530:	3710      	adds	r7, #16
     532:	46bd      	mov	sp, r7
     534:	bd80      	pop	{r7, pc}
     536:	bf00      	nop
     538:	00006098 	.word	0x00006098

0000053c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     53c:	b580      	push	{r7, lr}
     53e:	b084      	sub	sp, #16
     540:	af00      	add	r7, sp, #0
     542:	6078      	str	r0, [r7, #4]
     544:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     546:	683b      	ldr	r3, [r7, #0]
     548:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     54a:	210f      	movs	r1, #15
     54c:	6878      	ldr	r0, [r7, #4]
     54e:	f7ff ff9e 	bl	48e <_Unwind_GetGR>
     552:	4603      	mov	r3, r0
     554:	f023 0301 	bic.w	r3, r3, #1
     558:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	3b04      	subs	r3, #4
     55e:	4619      	mov	r1, r3
     560:	4806      	ldr	r0, [pc, #24]	; (57c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     562:	f003 fc17 	bl	3d94 <printf>
  (*depth)++;
     566:	68fb      	ldr	r3, [r7, #12]
     568:	681b      	ldr	r3, [r3, #0]
     56a:	1c5a      	adds	r2, r3, #1
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     570:	2300      	movs	r3, #0
}
     572:	4618      	mov	r0, r3
     574:	3710      	adds	r7, #16
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop
     57c:	000060a8 	.word	0x000060a8

00000580 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     580:	b580      	push	{r7, lr}
     582:	b084      	sub	sp, #16
     584:	af00      	add	r7, sp, #0
     586:	4603      	mov	r3, r0
     588:	6039      	str	r1, [r7, #0]
     58a:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     58c:	2300      	movs	r3, #0
     58e:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     590:	f107 030c 	add.w	r3, r7, #12
     594:	4619      	mov	r1, r3
     596:	481a      	ldr	r0, [pc, #104]	; (600 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     598:	f005 fb10 	bl	5bbc <_Unwind_Backtrace>
    if (final_address)
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	683a      	ldr	r2, [r7, #0]
     5a6:	4619      	mov	r1, r3
     5a8:	4816      	ldr	r0, [pc, #88]	; (604 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     5aa:	f003 fbf3 	bl	3d94 <printf>
    }

    if (show_make_command)
     5ae:	79fb      	ldrb	r3, [r7, #7]
     5b0:	2b00      	cmp	r3, #0
     5b2:	d020      	beq.n	5f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     5b4:	4814      	ldr	r0, [pc, #80]	; (608 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     5b6:	f003 fbed 	bl	3d94 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     5ba:	4814      	ldr	r0, [pc, #80]	; (60c <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     5bc:	f003 fbea 	bl	3d94 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     5c0:	2000      	movs	r0, #0
     5c2:	f7ff ff77 	bl	4b4 <sjsu::build::Stringify(sjsu::build::Target)>
     5c6:	4603      	mov	r3, r0
     5c8:	4619      	mov	r1, r3
     5ca:	4811      	ldr	r0, [pc, #68]	; (610 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     5cc:	f003 fbe2 	bl	3d94 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     5d0:	f107 030c 	add.w	r3, r7, #12
     5d4:	4619      	mov	r1, r3
     5d6:	480f      	ldr	r0, [pc, #60]	; (614 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     5d8:	f005 faf0 	bl	5bbc <_Unwind_Backtrace>
      if (final_address)
     5dc:	683b      	ldr	r3, [r7, #0]
     5de:	2b00      	cmp	r3, #0
     5e0:	d003      	beq.n	5ea <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     5e2:	6839      	ldr	r1, [r7, #0]
     5e4:	480c      	ldr	r0, [pc, #48]	; (618 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     5e6:	f003 fbd5 	bl	3d94 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     5ea:	480c      	ldr	r0, [pc, #48]	; (61c <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     5ec:	f003 fbd2 	bl	3d94 <printf>
      printf(
     5f0:	480b      	ldr	r0, [pc, #44]	; (620 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     5f2:	f002 fab3 	bl	2b5c <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     5f6:	bf00      	nop
     5f8:	3710      	adds	r7, #16
     5fa:	46bd      	mov	sp, r7
     5fc:	bd80      	pop	{r7, pc}
     5fe:	bf00      	nop
     600:	000004f5 	.word	0x000004f5
     604:	000060b0 	.word	0x000060b0
     608:	000060bc 	.word	0x000060bc
     60c:	000060f4 	.word	0x000060f4
     610:	00006100 	.word	0x00006100
     614:	0000053d 	.word	0x0000053d
     618:	0000611c 	.word	0x0000611c
     61c:	00006124 	.word	0x00006124
     620:	0000612c 	.word	0x0000612c

00000624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     624:	b490      	push	{r4, r7}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     62e:	683b      	ldr	r3, [r7, #0]
     630:	e9d3 3400 	ldrd	r3, r4, [r3]
     634:	687a      	ldr	r2, [r7, #4]
     636:	e9c2 3400 	strd	r3, r4, [r2]
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bc90      	pop	{r4, r7}
     644:	4770      	bx	lr
     646:	Address 0x0000000000000646 is out of bounds.


00000648 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	4903      	ldr	r1, [pc, #12]	; (664 <sjsu::DefaultUptime()+0x1c>)
     656:	4618      	mov	r0, r3
     658:	f001 fcbe 	bl	1fd8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     65c:	6878      	ldr	r0, [r7, #4]
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	10000110 	.word	0x10000110

00000668 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     668:	b480      	push	{r7}
     66a:	b083      	sub	sp, #12
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
     670:	2300      	movs	r3, #0
     672:	4618      	mov	r0, r3
     674:	370c      	adds	r7, #12
     676:	46bd      	mov	sp, r7
     678:	f85d 7b04 	ldr.w	r7, [sp], #4
     67c:	4770      	bx	lr

0000067e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     67e:	b580      	push	{r7, lr}
     680:	af00      	add	r7, sp, #0
     682:	2000      	movs	r0, #0
     684:	f7ff fff0 	bl	668 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     688:	4603      	mov	r3, r0
     68a:	4618      	mov	r0, r3
     68c:	bd80      	pop	{r7, pc}
     68e:	Address 0x000000000000068e is out of bounds.


00000690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     690:	b590      	push	{r4, r7, lr}
     692:	b093      	sub	sp, #76	; 0x4c
     694:	af00      	add	r7, sp, #0
     696:	e9c7 0102 	strd	r0, r1, [r7, #8]
     69a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     69e:	e9c7 3406 	strd	r3, r4, [r7, #24]
     6a2:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     6a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
     6aa:	4618      	mov	r0, r3
     6ac:	f001 fcb8 	bl	2020 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     6b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
     6b4:	f107 0318 	add.w	r3, r7, #24
     6b8:	4611      	mov	r1, r2
     6ba:	4618      	mov	r0, r3
     6bc:	f001 fcc4 	bl	2048 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6c0:	4603      	mov	r3, r0
     6c2:	2b00      	cmp	r3, #0
     6c4:	d004      	beq.n	6d0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     6c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     6ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
     6ce:	e011      	b.n	6f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     6d0:	4b19      	ldr	r3, [pc, #100]	; (738 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
     6d8:	4610      	mov	r0, r2
     6da:	4798      	blx	r3
     6dc:	463b      	mov	r3, r7
     6de:	f107 0218 	add.w	r2, r7, #24
     6e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
     6e6:	4618      	mov	r0, r3
     6e8:	f001 fe45 	bl	2376 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6ec:	e9d7 3400 	ldrd	r3, r4, [r7]
     6f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     6f4:	2301      	movs	r3, #1
     6f6:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     6f8:	4b0f      	ldr	r3, [pc, #60]	; (738 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
     700:	4610      	mov	r0, r2
     702:	4798      	blx	r3
     704:	f107 0210 	add.w	r2, r7, #16
     708:	f107 0328 	add.w	r3, r7, #40	; 0x28
     70c:	4611      	mov	r1, r2
     70e:	4618      	mov	r0, r3
     710:	f001 fe5e 	bl	23d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     714:	4603      	mov	r3, r0
     716:	2b00      	cmp	r3, #0
     718:	d009      	beq.n	72e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
     71e:	4618      	mov	r0, r3
     720:	f7ff ffa2 	bl	668 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     724:	4603      	mov	r3, r0
     726:	2b00      	cmp	r3, #0
     728:	d0e6      	beq.n	6f8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     72a:	2300      	movs	r3, #0
     72c:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     730:	4618      	mov	r0, r3
     732:	374c      	adds	r7, #76	; 0x4c
     734:	46bd      	mov	sp, r7
     736:	bd90      	pop	{r4, r7, pc}
     738:	10000000 	.word	0x10000000

0000073c <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     73c:	b580      	push	{r7, lr}
     73e:	b082      	sub	sp, #8
     740:	af00      	add	r7, sp, #0
     742:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     746:	e9d7 0100 	ldrd	r0, r1, [r7]
     74a:	f7ff ffa1 	bl	690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     74e:	bf00      	nop
     750:	3708      	adds	r7, #8
     752:	46bd      	mov	sp, r7
     754:	bd80      	pop	{r7, pc}
     756:	Address 0x0000000000000756 is out of bounds.


00000758 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     758:	b480      	push	{r7}
     75a:	b083      	sub	sp, #12
     75c:	af00      	add	r7, sp, #0
     75e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     760:	687b      	ldr	r3, [r7, #4]
     762:	f003 021f 	and.w	r2, r3, #31
     766:	4907      	ldr	r1, [pc, #28]	; (784 <NVIC_DisableIRQ+0x2c>)
     768:	687b      	ldr	r3, [r7, #4]
     76a:	095b      	lsrs	r3, r3, #5
     76c:	2001      	movs	r0, #1
     76e:	fa00 f202 	lsl.w	r2, r0, r2
     772:	3320      	adds	r3, #32
     774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     778:	bf00      	nop
     77a:	370c      	adds	r7, #12
     77c:	46bd      	mov	sp, r7
     77e:	f85d 7b04 	ldr.w	r7, [sp], #4
     782:	4770      	bx	lr
     784:	e000e100 	.word	0xe000e100

00000788 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     788:	b480      	push	{r7}
     78a:	b083      	sub	sp, #12
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     790:	687b      	ldr	r3, [r7, #4]
     792:	791b      	ldrb	r3, [r3, #4]
  }
     794:	4618      	mov	r0, r3
     796:	370c      	adds	r7, #12
     798:	46bd      	mov	sp, r7
     79a:	f85d 7b04 	ldr.w	r7, [sp], #4
     79e:	4770      	bx	lr

000007a0 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     7a0:	b480      	push	{r7}
     7a2:	b083      	sub	sp, #12
     7a4:	af00      	add	r7, sp, #0
     7a6:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	795b      	ldrb	r3, [r3, #5]
  }
     7ac:	4618      	mov	r0, r3
     7ae:	370c      	adds	r7, #12
     7b0:	46bd      	mov	sp, r7
     7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b6:	4770      	bx	lr

000007b8 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     7b8:	b580      	push	{r7, lr}
     7ba:	b082      	sub	sp, #8
     7bc:	af00      	add	r7, sp, #0
     7be:	6078      	str	r0, [r7, #4]
     7c0:	460b      	mov	r3, r1
     7c2:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     7c4:	4b08      	ldr	r3, [pc, #32]	; (7e8 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     7c6:	78f9      	ldrb	r1, [r7, #3]
     7c8:	781a      	ldrb	r2, [r3, #0]
     7ca:	785b      	ldrb	r3, [r3, #1]
     7cc:	021b      	lsls	r3, r3, #8
     7ce:	431a      	orrs	r2, r3
     7d0:	2300      	movs	r3, #0
     7d2:	f362 030f 	bfi	r3, r2, #0, #16
     7d6:	461a      	mov	r2, r3
     7d8:	6878      	ldr	r0, [r7, #4]
     7da:	f000 f859 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     7de:	bf00      	nop
     7e0:	3708      	adds	r7, #8
     7e2:	46bd      	mov	sp, r7
     7e4:	bd80      	pop	{r7, pc}
     7e6:	bf00      	nop
     7e8:	000065d8 	.word	0x000065d8

000007ec <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     7ec:	b580      	push	{r7, lr}
     7ee:	b082      	sub	sp, #8
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
     7f4:	460b      	mov	r3, r1
     7f6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     7f8:	4b08      	ldr	r3, [pc, #32]	; (81c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     7fa:	78f9      	ldrb	r1, [r7, #3]
     7fc:	781a      	ldrb	r2, [r3, #0]
     7fe:	785b      	ldrb	r3, [r3, #1]
     800:	021b      	lsls	r3, r3, #8
     802:	431a      	orrs	r2, r3
     804:	2300      	movs	r3, #0
     806:	f362 030f 	bfi	r3, r2, #0, #16
     80a:	461a      	mov	r2, r3
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	f000 f83f 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     812:	bf00      	nop
     814:	3708      	adds	r7, #8
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	bf00      	nop
     81c:	000065dc 	.word	0x000065dc

00000820 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     820:	b580      	push	{r7, lr}
     822:	b082      	sub	sp, #8
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
     828:	460b      	mov	r3, r1
     82a:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     82c:	78fb      	ldrb	r3, [r7, #3]
     82e:	f083 0301 	eor.w	r3, r3, #1
     832:	b2db      	uxtb	r3, r3
     834:	4619      	mov	r1, r3
     836:	4b08      	ldr	r3, [pc, #32]	; (858 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     838:	781a      	ldrb	r2, [r3, #0]
     83a:	785b      	ldrb	r3, [r3, #1]
     83c:	021b      	lsls	r3, r3, #8
     83e:	431a      	orrs	r2, r3
     840:	2300      	movs	r3, #0
     842:	f362 030f 	bfi	r3, r2, #0, #16
     846:	461a      	mov	r2, r3
     848:	6878      	ldr	r0, [r7, #4]
     84a:	f000 f821 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     84e:	bf00      	nop
     850:	3708      	adds	r7, #8
     852:	46bd      	mov	sp, r7
     854:	bd80      	pop	{r7, pc}
     856:	bf00      	nop
     858:	000065e0 	.word	0x000065e0

0000085c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     85c:	b580      	push	{r7, lr}
     85e:	b082      	sub	sp, #8
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	460b      	mov	r3, r1
     866:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     868:	78f9      	ldrb	r1, [r7, #3]
     86a:	4b08      	ldr	r3, [pc, #32]	; (88c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     86c:	781a      	ldrb	r2, [r3, #0]
     86e:	785b      	ldrb	r3, [r3, #1]
     870:	021b      	lsls	r3, r3, #8
     872:	431a      	orrs	r2, r3
     874:	2300      	movs	r3, #0
     876:	f362 030f 	bfi	r3, r2, #0, #16
     87a:	461a      	mov	r2, r3
     87c:	6878      	ldr	r0, [r7, #4]
     87e:	f000 f807 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     882:	bf00      	nop
     884:	3708      	adds	r7, #8
     886:	46bd      	mov	sp, r7
     888:	bd80      	pop	{r7, pc}
     88a:	bf00      	nop
     88c:	000065e4 	.word	0x000065e4

00000890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	b087      	sub	sp, #28
     894:	af00      	add	r7, sp, #0
     896:	60f8      	str	r0, [r7, #12]
     898:	460b      	mov	r3, r1
     89a:	80ba      	strh	r2, [r7, #4]
     89c:	72fb      	strb	r3, [r7, #11]
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     8a2:	4b19      	ldr	r3, [pc, #100]	; (908 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     8a4:	681c      	ldr	r4, [r3, #0]
     8a6:	693b      	ldr	r3, [r7, #16]
     8a8:	4618      	mov	r0, r3
     8aa:	f7ff ff6d 	bl	788 <sjsu::Pin::GetPort() const>
     8ae:	4603      	mov	r3, r0
     8b0:	461d      	mov	r5, r3
     8b2:	693b      	ldr	r3, [r7, #16]
     8b4:	4618      	mov	r0, r3
     8b6:	f7ff ff73 	bl	7a0 <sjsu::Pin::GetPin() const>
     8ba:	4603      	mov	r3, r0
     8bc:	461a      	mov	r2, r3
     8be:	016b      	lsls	r3, r5, #5
     8c0:	4413      	add	r3, r2
     8c2:	009b      	lsls	r3, r3, #2
     8c4:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	7af9      	ldrb	r1, [r7, #11]
     8ca:	687a      	ldr	r2, [r7, #4]
     8cc:	4618      	mov	r0, r3
     8ce:	f001 fbe2 	bl	2096 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     8d2:	4605      	mov	r5, r0
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     8d8:	4b0b      	ldr	r3, [pc, #44]	; (908 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     8da:	681c      	ldr	r4, [r3, #0]
     8dc:	697b      	ldr	r3, [r7, #20]
     8de:	4618      	mov	r0, r3
     8e0:	f7ff ff52 	bl	788 <sjsu::Pin::GetPort() const>
     8e4:	4603      	mov	r3, r0
     8e6:	461e      	mov	r6, r3
     8e8:	697b      	ldr	r3, [r7, #20]
     8ea:	4618      	mov	r0, r3
     8ec:	f7ff ff58 	bl	7a0 <sjsu::Pin::GetPin() const>
     8f0:	4603      	mov	r3, r0
     8f2:	461a      	mov	r2, r3
     8f4:	0173      	lsls	r3, r6, #5
     8f6:	4413      	add	r3, r2
     8f8:	009b      	lsls	r3, r3, #2
     8fa:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     8fc:	601d      	str	r5, [r3, #0]
  }
     8fe:	bf00      	nop
     900:	371c      	adds	r7, #28
     902:	46bd      	mov	sp, r7
     904:	bdf0      	pop	{r4, r5, r6, r7, pc}
     906:	bf00      	nop
     908:	10000118 	.word	0x10000118

0000090c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     90c:	b580      	push	{r7, lr}
     90e:	b086      	sub	sp, #24
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
     914:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     916:	687b      	ldr	r3, [r7, #4]
     918:	681b      	ldr	r3, [r3, #0]
     91a:	3308      	adds	r3, #8
     91c:	681b      	ldr	r3, [r3, #0]
     91e:	6839      	ldr	r1, [r7, #0]
     920:	6878      	ldr	r0, [r7, #4]
     922:	4798      	blx	r3
     924:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     926:	f04f 0300 	mov.w	r3, #0
     92a:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     92c:	697b      	ldr	r3, [r7, #20]
     92e:	2b00      	cmp	r3, #0
     930:	d00f      	beq.n	952 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     932:	687b      	ldr	r3, [r7, #4]
     934:	681b      	ldr	r3, [r3, #0]
     936:	330c      	adds	r3, #12
     938:	681b      	ldr	r3, [r3, #0]
     93a:	6878      	ldr	r0, [r7, #4]
     93c:	4798      	blx	r3
     93e:	4603      	mov	r3, r0
     940:	613b      	str	r3, [r7, #16]
     942:	f107 0310 	add.w	r3, r7, #16
     946:	6979      	ldr	r1, [r7, #20]
     948:	4618      	mov	r0, r3
     94a:	f001 fbb7 	bl	20bc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     94e:	4603      	mov	r3, r0
     950:	60fb      	str	r3, [r7, #12]
    }
    return result;
     952:	68fb      	ldr	r3, [r7, #12]
  }
     954:	4618      	mov	r0, r3
     956:	3718      	adds	r7, #24
     958:	46bd      	mov	sp, r7
     95a:	bd80      	pop	{r7, pc}

0000095c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     95c:	b490      	push	{r4, r7}
     95e:	b082      	sub	sp, #8
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
     964:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     966:	683b      	ldr	r3, [r7, #0]
     968:	e9d3 3400 	ldrd	r3, r4, [r3]
     96c:	687a      	ldr	r2, [r7, #4]
     96e:	e9c2 3400 	strd	r3, r4, [r2]
     972:	687b      	ldr	r3, [r7, #4]
     974:	4618      	mov	r0, r3
     976:	3708      	adds	r7, #8
     978:	46bd      	mov	sp, r7
     97a:	bc90      	pop	{r4, r7}
     97c:	4770      	bx	lr

0000097e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     97e:	b490      	push	{r4, r7}
     980:	b082      	sub	sp, #8
     982:	af00      	add	r7, sp, #0
     984:	6078      	str	r0, [r7, #4]
	{ return __r; }
     986:	687b      	ldr	r3, [r7, #4]
     988:	e9d3 3400 	ldrd	r3, r4, [r3]
     98c:	4618      	mov	r0, r3
     98e:	4621      	mov	r1, r4
     990:	3708      	adds	r7, #8
     992:	46bd      	mov	sp, r7
     994:	bc90      	pop	{r4, r7}
     996:	4770      	bx	lr

00000998 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     998:	b580      	push	{r7, lr}
     99a:	b086      	sub	sp, #24
     99c:	af00      	add	r7, sp, #0
     99e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     9a0:	6878      	ldr	r0, [r7, #4]
     9a2:	f000 f807 	bl	9b4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     9a6:	eef0 7a40 	vmov.f32	s15, s0
	}
     9aa:	eeb0 0a67 	vmov.f32	s0, s15
     9ae:	3718      	adds	r7, #24
     9b0:	46bd      	mov	sp, r7
     9b2:	bd80      	pop	{r7, pc}

000009b4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     9b4:	b480      	push	{r7}
     9b6:	b085      	sub	sp, #20
     9b8:	af00      	add	r7, sp, #0
     9ba:	60f8      	str	r0, [r7, #12]
     9bc:	7239      	strb	r1, [r7, #8]
     9be:	713a      	strb	r2, [r7, #4]
     9c0:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	edd3 7a00 	vldr	s15, [r3]
     9c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9e0 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     9cc:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     9d0:	eeb0 0a67 	vmov.f32	s0, s15
     9d4:	3714      	adds	r7, #20
     9d6:	46bd      	mov	sp, r7
     9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9dc:	4770      	bx	lr
     9de:	bf00      	nop
     9e0:	49742400 	.word	0x49742400

000009e4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     9e4:	b580      	push	{r7, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
     9ec:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     9ee:	2100      	movs	r1, #0
     9f0:	6878      	ldr	r0, [r7, #4]
     9f2:	f000 f8e3 	bl	bbc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     9f6:	f04f 000c 	mov.w	r0, #12
     9fa:	f04f 0100 	mov.w	r1, #0
     9fe:	f7ff fcbe 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     a02:	4603      	mov	r3, r0
     a04:	60bb      	str	r3, [r7, #8]
     a06:	f107 0208 	add.w	r2, r7, #8
     a0a:	463b      	mov	r3, r7
     a0c:	4611      	mov	r1, r2
     a0e:	4618      	mov	r0, r3
     a10:	f001 fb72 	bl	20f8 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     a14:	4603      	mov	r3, r0
     a16:	2b00      	cmp	r3, #0
     a18:	d00f      	beq.n	a3a <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     a1a:	4b16      	ldr	r3, [pc, #88]	; (a74 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     a1c:	683a      	ldr	r2, [r7, #0]
     a1e:	6819      	ldr	r1, [r3, #0]
     a20:	6878      	ldr	r0, [r7, #4]
     a22:	f000 fadf 	bl	fe4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     a26:	2101      	movs	r1, #1
     a28:	6878      	ldr	r0, [r7, #4]
     a2a:	f000 f8eb 	bl	c04 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     a2e:	463b      	mov	r3, r7
     a30:	4619      	mov	r1, r3
     a32:	4811      	ldr	r0, [pc, #68]	; (a78 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a34:	f001 fb7e 	bl	2134 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     a38:	e007      	b.n	a4a <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     a3a:	2100      	movs	r1, #0
     a3c:	6878      	ldr	r0, [r7, #4]
     a3e:	f000 f8e1 	bl	c04 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     a42:	490e      	ldr	r1, [pc, #56]	; (a7c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     a44:	480c      	ldr	r0, [pc, #48]	; (a78 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     a46:	f001 fb75 	bl	2134 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     a4a:	2101      	movs	r1, #1
     a4c:	6878      	ldr	r0, [r7, #4]
     a4e:	f000 fb2d 	bl	10ac <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     a52:	23ff      	movs	r3, #255	; 0xff
     a54:	733b      	strb	r3, [r7, #12]
     a56:	f107 030c 	add.w	r3, r7, #12
     a5a:	2201      	movs	r2, #1
     a5c:	4619      	mov	r1, r3
     a5e:	6878      	ldr	r0, [r7, #4]
     a60:	f000 f80e 	bl	a80 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     a64:	2100      	movs	r1, #0
     a66:	6878      	ldr	r0, [r7, #4]
     a68:	f000 fb5e 	bl	1128 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     a6c:	bf00      	nop
     a6e:	3710      	adds	r7, #16
     a70:	46bd      	mov	sp, r7
     a72:	bd80      	pop	{r7, pc}
     a74:	000065e8 	.word	0x000065e8
     a78:	10000004 	.word	0x10000004
     a7c:	000065f0 	.word	0x000065f0

00000a80 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     a80:	b580      	push	{r7, lr}
     a82:	b084      	sub	sp, #16
     a84:	af00      	add	r7, sp, #0
     a86:	60f8      	str	r0, [r7, #12]
     a88:	60b9      	str	r1, [r7, #8]
     a8a:	4613      	mov	r3, r2
     a8c:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     a8e:	79fb      	ldrb	r3, [r7, #7]
     a90:	2b04      	cmp	r3, #4
     a92:	d90d      	bls.n	ab0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     a94:	23b2      	movs	r3, #178	; 0xb2
     a96:	4a0b      	ldr	r2, [pc, #44]	; (ac4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     a98:	490b      	ldr	r1, [pc, #44]	; (ac8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     a9a:	480c      	ldr	r0, [pc, #48]	; (acc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     a9c:	f003 f97a 	bl	3d94 <printf>
     aa0:	480b      	ldr	r0, [pc, #44]	; (ad0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     aa2:	f002 f85b 	bl	2b5c <puts>
     aa6:	2100      	movs	r1, #0
     aa8:	2001      	movs	r0, #1
     aaa:	f7ff fd69 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     aae:	e7fe      	b.n	aae <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     ab0:	4b08      	ldr	r3, [pc, #32]	; (ad4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	79fa      	ldrb	r2, [r7, #7]
     ab6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     aba:	bf00      	nop
     abc:	3710      	adds	r7, #16
     abe:	46bd      	mov	sp, r7
     ac0:	bd80      	pop	{r7, pc}
     ac2:	bf00      	nop
     ac4:	000067a8 	.word	0x000067a8
     ac8:	0000660c 	.word	0x0000660c
     acc:	00006180 	.word	0x00006180
     ad0:	00006220 	.word	0x00006220
     ad4:	1000011c 	.word	0x1000011c

00000ad8 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     ad8:	b480      	push	{r7}
     ada:	b083      	sub	sp, #12
     adc:	af00      	add	r7, sp, #0
     ade:	6078      	str	r0, [r7, #4]
     ae0:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     ae2:	4b05      	ldr	r3, [pc, #20]	; (af8 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     ae4:	681b      	ldr	r3, [r3, #0]
     ae6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     aea:	4618      	mov	r0, r3
     aec:	370c      	adds	r7, #12
     aee:	46bd      	mov	sp, r7
     af0:	f85d 7b04 	ldr.w	r7, [sp], #4
     af4:	4770      	bx	lr
     af6:	bf00      	nop
     af8:	1000011c 	.word	0x1000011c

00000afc <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     afc:	b480      	push	{r7}
     afe:	b083      	sub	sp, #12
     b00:	af00      	add	r7, sp, #0
     b02:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     b04:	4b03      	ldr	r3, [pc, #12]	; (b14 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     b06:	681b      	ldr	r3, [r3, #0]
  }
     b08:	4618      	mov	r0, r3
     b0a:	370c      	adds	r7, #12
     b0c:	46bd      	mov	sp, r7
     b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
     b12:	4770      	bx	lr
     b14:	10000004 	.word	0x10000004

00000b18 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     b18:	b480      	push	{r7}
     b1a:	b085      	sub	sp, #20
     b1c:	af00      	add	r7, sp, #0
     b1e:	6078      	str	r0, [r7, #4]
     b20:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     b22:	4b0b      	ldr	r3, [pc, #44]	; (b50 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     b2a:	683a      	ldr	r2, [r7, #0]
     b2c:	7812      	ldrb	r2, [r2, #0]
     b2e:	4611      	mov	r1, r2
     b30:	2201      	movs	r2, #1
     b32:	408a      	lsls	r2, r1
     b34:	4013      	ands	r3, r2
     b36:	2b00      	cmp	r3, #0
     b38:	bf14      	ite	ne
     b3a:	2301      	movne	r3, #1
     b3c:	2300      	moveq	r3, #0
     b3e:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     b40:	7bfb      	ldrb	r3, [r7, #15]
  }
     b42:	4618      	mov	r0, r3
     b44:	3714      	adds	r7, #20
     b46:	46bd      	mov	sp, r7
     b48:	f85d 7b04 	ldr.w	r7, [sp], #4
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop
     b50:	1000011c 	.word	0x1000011c

00000b54 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     b54:	b590      	push	{r4, r7, lr}
     b56:	b083      	sub	sp, #12
     b58:	af00      	add	r7, sp, #0
     b5a:	6078      	str	r0, [r7, #4]
     b5c:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b5e:	4b09      	ldr	r3, [pc, #36]	; (b84 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     b66:	683b      	ldr	r3, [r7, #0]
     b68:	781b      	ldrb	r3, [r3, #0]
     b6a:	4619      	mov	r1, r3
    system_controller->PCONP =
     b6c:	4b05      	ldr	r3, [pc, #20]	; (b84 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b6e:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     b70:	4610      	mov	r0, r2
     b72:	f001 faf2 	bl	215a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     b76:	4603      	mov	r3, r0
    system_controller->PCONP =
     b78:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     b7c:	bf00      	nop
     b7e:	370c      	adds	r7, #12
     b80:	46bd      	mov	sp, r7
     b82:	bd90      	pop	{r4, r7, pc}
     b84:	1000011c 	.word	0x1000011c

00000b88 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     b88:	b590      	push	{r4, r7, lr}
     b8a:	b083      	sub	sp, #12
     b8c:	af00      	add	r7, sp, #0
     b8e:	6078      	str	r0, [r7, #4]
     b90:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     b92:	4b09      	ldr	r3, [pc, #36]	; (bb8 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     b94:	681b      	ldr	r3, [r3, #0]
     b96:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	781b      	ldrb	r3, [r3, #0]
     b9e:	4619      	mov	r1, r3
    system_controller->PCONP =
     ba0:	4b05      	ldr	r3, [pc, #20]	; (bb8 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     ba2:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     ba4:	4610      	mov	r0, r2
     ba6:	f001 faea 	bl	217e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     baa:	4603      	mov	r3, r0
    system_controller->PCONP =
     bac:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     bb0:	bf00      	nop
     bb2:	370c      	adds	r7, #12
     bb4:	46bd      	mov	sp, r7
     bb6:	bd90      	pop	{r4, r7, pc}
     bb8:	1000011c 	.word	0x1000011c

00000bbc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     bbc:	b590      	push	{r4, r7, lr}
     bbe:	b083      	sub	sp, #12
     bc0:	af00      	add	r7, sp, #0
     bc2:	6078      	str	r0, [r7, #4]
     bc4:	460b      	mov	r3, r1
     bc6:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     bc8:	4b0c      	ldr	r3, [pc, #48]	; (bfc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     bd0:	8879      	ldrh	r1, [r7, #2]
     bd2:	4b0a      	ldr	r3, [pc, #40]	; (bfc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     bd4:	681c      	ldr	r4, [r3, #0]
     bd6:	4b0a      	ldr	r3, [pc, #40]	; (c00 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     bd8:	781a      	ldrb	r2, [r3, #0]
     bda:	785b      	ldrb	r3, [r3, #1]
     bdc:	021b      	lsls	r3, r3, #8
     bde:	431a      	orrs	r2, r3
     be0:	2300      	movs	r3, #0
     be2:	f362 030f 	bfi	r3, r2, #0, #16
     be6:	461a      	mov	r2, r3
     be8:	f001 fadc 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     bec:	4603      	mov	r3, r0
     bee:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     bf2:	bf00      	nop
     bf4:	370c      	adds	r7, #12
     bf6:	46bd      	mov	sp, r7
     bf8:	bd90      	pop	{r4, r7, pc}
     bfa:	bf00      	nop
     bfc:	1000011c 	.word	0x1000011c
     c00:	000065f4 	.word	0x000065f4

00000c04 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     c04:	b590      	push	{r4, r7, lr}
     c06:	b083      	sub	sp, #12
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
     c0c:	460b      	mov	r3, r1
     c0e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     c10:	4b0c      	ldr	r3, [pc, #48]	; (c44 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     c18:	8879      	ldrh	r1, [r7, #2]
     c1a:	4b0a      	ldr	r3, [pc, #40]	; (c44 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     c1c:	681c      	ldr	r4, [r3, #0]
     c1e:	4b0a      	ldr	r3, [pc, #40]	; (c48 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     c20:	781a      	ldrb	r2, [r3, #0]
     c22:	785b      	ldrb	r3, [r3, #1]
     c24:	021b      	lsls	r3, r3, #8
     c26:	431a      	orrs	r2, r3
     c28:	2300      	movs	r3, #0
     c2a:	f362 030f 	bfi	r3, r2, #0, #16
     c2e:	461a      	mov	r2, r3
     c30:	f001 fab8 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c34:	4603      	mov	r3, r0
     c36:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     c3a:	bf00      	nop
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	bd90      	pop	{r4, r7, pc}
     c42:	bf00      	nop
     c44:	1000011c 	.word	0x1000011c
     c48:	00006600 	.word	0x00006600

00000c4c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     c4c:	b590      	push	{r4, r7, lr}
     c4e:	b083      	sub	sp, #12
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
     c54:	460b      	mov	r3, r1
     c56:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     c58:	4b0c      	ldr	r3, [pc, #48]	; (c8c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     c60:	8879      	ldrh	r1, [r7, #2]
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     c64:	681c      	ldr	r4, [r3, #0]
     c66:	4b0a      	ldr	r3, [pc, #40]	; (c90 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     c68:	781a      	ldrb	r2, [r3, #0]
     c6a:	785b      	ldrb	r3, [r3, #1]
     c6c:	021b      	lsls	r3, r3, #8
     c6e:	431a      	orrs	r2, r3
     c70:	2300      	movs	r3, #0
     c72:	f362 030f 	bfi	r3, r2, #0, #16
     c76:	461a      	mov	r2, r3
     c78:	f001 fa94 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     c7c:	4603      	mov	r3, r0
     c7e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     c82:	bf00      	nop
     c84:	370c      	adds	r7, #12
     c86:	46bd      	mov	sp, r7
     c88:	bd90      	pop	{r4, r7, pc}
     c8a:	bf00      	nop
     c8c:	1000011c 	.word	0x1000011c
     c90:	00006604 	.word	0x00006604

00000c94 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     c94:	b590      	push	{r4, r7, lr}
     c96:	b083      	sub	sp, #12
     c98:	af00      	add	r7, sp, #0
     c9a:	6078      	str	r0, [r7, #4]
     c9c:	460b      	mov	r3, r1
     c9e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     ca0:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     ca8:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     caa:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     cac:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     cae:	4b0a      	ldr	r3, [pc, #40]	; (cd8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     cb0:	781a      	ldrb	r2, [r3, #0]
     cb2:	785b      	ldrb	r3, [r3, #1]
     cb4:	021b      	lsls	r3, r3, #8
     cb6:	431a      	orrs	r2, r3
     cb8:	2300      	movs	r3, #0
     cba:	f362 030f 	bfi	r3, r2, #0, #16
     cbe:	461a      	mov	r2, r3
     cc0:	f001 fa70 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     cc4:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     cc6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     cca:	bf00      	nop
     ccc:	370c      	adds	r7, #12
     cce:	46bd      	mov	sp, r7
     cd0:	bd90      	pop	{r4, r7, pc}
     cd2:	bf00      	nop
     cd4:	1000011c 	.word	0x1000011c
     cd8:	00006608 	.word	0x00006608

00000cdc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     cdc:	b580      	push	{r7, lr}
     cde:	ed2d 8b02 	vpush	{d8}
     ce2:	b082      	sub	sp, #8
     ce4:	af00      	add	r7, sp, #0
     ce6:	6078      	str	r0, [r7, #4]
     ce8:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	ed93 8a00 	vldr	s16, [r3]
     cf0:	683b      	ldr	r3, [r7, #0]
     cf2:	4618      	mov	r0, r3
     cf4:	f7ff fb7a 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     cf8:	eef0 7a40 	vmov.f32	s15, s0
     cfc:	eeb4 8ae7 	vcmpe.f32	s16, s15
     d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d04:	bf4c      	ite	mi
     d06:	2301      	movmi	r3, #1
     d08:	2300      	movpl	r3, #0
     d0a:	b2db      	uxtb	r3, r3
		}
     d0c:	4618      	mov	r0, r3
     d0e:	3708      	adds	r7, #8
     d10:	46bd      	mov	sp, r7
     d12:	ecbd 8b02 	vpop	{d8}
     d16:	bd80      	pop	{r7, pc}

00000d18 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     d20:	6878      	ldr	r0, [r7, #4]
     d22:	f000 f805 	bl	d30 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     d26:	4603      	mov	r3, r0
		}
     d28:	4618      	mov	r0, r3
     d2a:	3708      	adds	r7, #8
     d2c:	46bd      	mov	sp, r7
     d2e:	bd80      	pop	{r7, pc}

00000d30 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	4618      	mov	r0, r3
     d3c:	f000 f80a 	bl	d54 <units::linear_scale<float>::operator()() const>
     d40:	eef0 7a40 	vmov.f32	s15, s0
     d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d48:	ee17 3a90 	vmov	r3, s15
		}
     d4c:	4618      	mov	r0, r3
     d4e:	3708      	adds	r7, #8
     d50:	46bd      	mov	sp, r7
     d52:	bd80      	pop	{r7, pc}

00000d54 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     d54:	b480      	push	{r7}
     d56:	b083      	sub	sp, #12
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	ee07 3a90 	vmov	s15, r3
     d64:	eeb0 0a67 	vmov.f32	s0, s15
     d68:	370c      	adds	r7, #12
     d6a:	46bd      	mov	sp, r7
     d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d70:	4770      	bx	lr

00000d72 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     d72:	b580      	push	{r7, lr}
     d74:	ed2d 8b02 	vpush	{d8}
     d78:	b084      	sub	sp, #16
     d7a:	af00      	add	r7, sp, #0
     d7c:	6078      	str	r0, [r7, #4]
     d7e:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	4618      	mov	r0, r3
     d84:	f7ff ffe6 	bl	d54 <units::linear_scale<float>::operator()() const>
     d88:	eeb0 8a40 	vmov.f32	s16, s0
     d8c:	683b      	ldr	r3, [r7, #0]
     d8e:	4618      	mov	r0, r3
     d90:	f7ff ffe0 	bl	d54 <units::linear_scale<float>::operator()() const>
     d94:	eef0 7a40 	vmov.f32	s15, s0
     d98:	edc7 7a03 	vstr	s15, [r7, #12]
     d9c:	f107 030c 	add.w	r3, r7, #12
     da0:	4618      	mov	r0, r3
     da2:	f7ff fb23 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     da6:	eeb0 7a40 	vmov.f32	s14, s0
     daa:	eec8 7a07 	vdiv.f32	s15, s16, s14
     dae:	f107 0308 	add.w	r3, r7, #8
     db2:	eeb0 0a67 	vmov.f32	s0, s15
     db6:	4618      	mov	r0, r3
     db8:	f000 f807 	bl	dca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     dbc:	68bb      	ldr	r3, [r7, #8]
	}
     dbe:	4618      	mov	r0, r3
     dc0:	3710      	adds	r7, #16
     dc2:	46bd      	mov	sp, r7
     dc4:	ecbd 8b02 	vpop	{d8}
     dc8:	bd80      	pop	{r7, pc}

00000dca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     dca:	b580      	push	{r7, lr}
     dcc:	b082      	sub	sp, #8
     dce:	af00      	add	r7, sp, #0
     dd0:	6078      	str	r0, [r7, #4]
     dd2:	ed87 0a00 	vstr	s0, [r7]
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	463a      	mov	r2, r7
     dda:	4611      	mov	r1, r2
     ddc:	4618      	mov	r0, r3
     dde:	f7ff faf5 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	4618      	mov	r0, r3
     de6:	3708      	adds	r7, #8
     de8:	46bd      	mov	sp, r7
     dea:	bd80      	pop	{r7, pc}

00000dec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     dec:	b580      	push	{r7, lr}
     dee:	b084      	sub	sp, #16
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
     df4:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	4618      	mov	r0, r3
     dfa:	f7ff ffab 	bl	d54 <units::linear_scale<float>::operator()() const>
     dfe:	eeb0 7a40 	vmov.f32	s14, s0
     e02:	683b      	ldr	r3, [r7, #0]
     e04:	ee07 3a90 	vmov	s15, r3
     e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
     e10:	f107 030c 	add.w	r3, r7, #12
     e14:	eeb0 0a67 	vmov.f32	s0, s15
     e18:	4618      	mov	r0, r3
     e1a:	f7ff ffd6 	bl	dca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     e1e:	68fb      	ldr	r3, [r7, #12]
	}
     e20:	4618      	mov	r0, r3
     e22:	3710      	adds	r7, #16
     e24:	46bd      	mov	sp, r7
     e26:	bd80      	pop	{r7, pc}

00000e28 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e28:	b580      	push	{r7, lr}
     e2a:	b082      	sub	sp, #8
     e2c:	af00      	add	r7, sp, #0
     e2e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	4618      	mov	r0, r3
     e34:	f7ff ff8e 	bl	d54 <units::linear_scale<float>::operator()() const>
     e38:	eef0 7a40 	vmov.f32	s15, s0
     e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e40:	ee17 3a90 	vmov	r3, s15
     e44:	b29b      	uxth	r3, r3
		}
     e46:	4618      	mov	r0, r3
     e48:	3708      	adds	r7, #8
     e4a:	46bd      	mov	sp, r7
     e4c:	bd80      	pop	{r7, pc}
     e4e:	Address 0x0000000000000e4e is out of bounds.


00000e50 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     e50:	b590      	push	{r4, r7, lr}
     e52:	b08d      	sub	sp, #52	; 0x34
     e54:	af00      	add	r7, sp, #0
     e56:	60f8      	str	r0, [r7, #12]
     e58:	60b9      	str	r1, [r7, #8]
     e5a:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     e5c:	f44f 70c0 	mov.w	r0, #384	; 0x180
     e60:	f04f 0100 	mov.w	r1, #0
     e64:	f7ff fa8b 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     e68:	4603      	mov	r3, r0
     e6a:	613b      	str	r3, [r7, #16]
     e6c:	f107 0210 	add.w	r2, r7, #16
     e70:	1d3b      	adds	r3, r7, #4
     e72:	4611      	mov	r1, r2
     e74:	4618      	mov	r0, r3
     e76:	f7ff ff31 	bl	cdc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     e7a:	4603      	mov	r3, r0
     e7c:	f083 0301 	eor.w	r3, r3, #1
     e80:	b2db      	uxtb	r3, r3
     e82:	2b00      	cmp	r3, #0
     e84:	d114      	bne.n	eb0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     e86:	f04f 000c 	mov.w	r0, #12
     e8a:	f04f 0100 	mov.w	r1, #0
     e8e:	f7ff fa76 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     e92:	4603      	mov	r3, r0
     e94:	617b      	str	r3, [r7, #20]
     e96:	f107 0214 	add.w	r2, r7, #20
     e9a:	1d3b      	adds	r3, r7, #4
     e9c:	4611      	mov	r1, r2
     e9e:	4618      	mov	r0, r3
     ea0:	f001 f92a 	bl	20f8 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     ea4:	4603      	mov	r3, r0
     ea6:	f083 0301 	eor.w	r3, r3, #1
     eaa:	b2db      	uxtb	r3, r3
     eac:	2b00      	cmp	r3, #0
     eae:	d001      	beq.n	eb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     eb0:	2301      	movs	r3, #1
     eb2:	e000      	b.n	eb6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     eb4:	2300      	movs	r3, #0
     eb6:	2b00      	cmp	r3, #0
     eb8:	d00d      	beq.n	ed6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     eba:	23f6      	movs	r3, #246	; 0xf6
     ebc:	4a43      	ldr	r2, [pc, #268]	; (fcc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     ebe:	4944      	ldr	r1, [pc, #272]	; (fd0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     ec0:	4844      	ldr	r0, [pc, #272]	; (fd4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     ec2:	f002 ff67 	bl	3d94 <printf>
     ec6:	4844      	ldr	r0, [pc, #272]	; (fd8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     ec8:	f001 fe48 	bl	2b5c <puts>
     ecc:	2100      	movs	r1, #0
     ece:	2001      	movs	r0, #1
     ed0:	f7ff fb56 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     ed4:	e7fe      	b.n	ed4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     ed6:	2301      	movs	r3, #1
     ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     edc:	1d3b      	adds	r3, r7, #4
     ede:	4618      	mov	r0, r3
     ee0:	f7ff ff1a 	bl	d18 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     ee4:	4604      	mov	r4, r0
     ee6:	f107 0308 	add.w	r3, r7, #8
     eea:	4618      	mov	r0, r3
     eec:	f7ff ff14 	bl	d18 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     ef0:	4603      	mov	r3, r0
     ef2:	fbb4 f2f3 	udiv	r2, r4, r3
     ef6:	fb03 f302 	mul.w	r3, r3, r2
     efa:	1ae3      	subs	r3, r4, r3
     efc:	2b00      	cmp	r3, #0
     efe:	bf14      	ite	ne
     f00:	2301      	movne	r3, #1
     f02:	2300      	moveq	r3, #0
     f04:	b2db      	uxtb	r3, r3
     f06:	2b00      	cmp	r3, #0
     f08:	d017      	beq.n	f3a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     f0a:	f107 0208 	add.w	r2, r7, #8
     f0e:	1d3b      	adds	r3, r7, #4
     f10:	4611      	mov	r1, r2
     f12:	4618      	mov	r0, r3
     f14:	f7ff ff2d 	bl	d72 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f18:	4603      	mov	r3, r0
     f1a:	61fb      	str	r3, [r7, #28]
     f1c:	f107 031c 	add.w	r3, r7, #28
     f20:	2101      	movs	r1, #1
     f22:	4618      	mov	r0, r3
     f24:	f7ff ff62 	bl	dec <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     f28:	4603      	mov	r3, r0
     f2a:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     f2c:	f107 0318 	add.w	r3, r7, #24
     f30:	4618      	mov	r0, r3
     f32:	f001 f949 	bl	21c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f36:	62b8      	str	r0, [r7, #40]	; 0x28
     f38:	e00e      	b.n	f58 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     f3a:	f107 0208 	add.w	r2, r7, #8
     f3e:	1d3b      	adds	r3, r7, #4
     f40:	4611      	mov	r1, r2
     f42:	4618      	mov	r0, r3
     f44:	f7ff ff15 	bl	d72 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     f48:	4603      	mov	r3, r0
     f4a:	623b      	str	r3, [r7, #32]
      multiplier_value =
     f4c:	f107 0320 	add.w	r3, r7, #32
     f50:	4618      	mov	r0, r3
     f52:	f001 f939 	bl	21c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     f56:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     f58:	2301      	movs	r3, #1
     f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f60:	2b00      	cmp	r3, #0
     f62:	d02d      	beq.n	fc0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     f64:	f107 0308 	add.w	r3, r7, #8
     f68:	4618      	mov	r0, r3
     f6a:	f7ff ff5d 	bl	e28 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     f6e:	4603      	mov	r3, r0
     f70:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f74:	b29b      	uxth	r3, r3
     f76:	fb12 f303 	smulbb	r3, r2, r3
     f7a:	b29b      	uxth	r3, r3
     f7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     f7e:	fb12 f303 	smulbb	r3, r2, r3
     f82:	b29b      	uxth	r3, r3
     f84:	005b      	lsls	r3, r3, #1
     f86:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     f8a:	2b9b      	cmp	r3, #155	; 0x9b
     f8c:	d903      	bls.n	f96 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     f8e:	2300      	movs	r3, #0
     f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     f94:	e7e2      	b.n	f5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     f98:	005b      	lsls	r3, r3, #1
     f9a:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     f9e:	2b07      	cmp	r3, #7
     fa0:	d9dc      	bls.n	f5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     fa2:	f44f 7389 	mov.w	r3, #274	; 0x112
     fa6:	4a09      	ldr	r2, [pc, #36]	; (fcc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     fa8:	490c      	ldr	r1, [pc, #48]	; (fdc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     faa:	480d      	ldr	r0, [pc, #52]	; (fe0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     fac:	f002 fef2 	bl	3d94 <printf>
     fb0:	4809      	ldr	r0, [pc, #36]	; (fd8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     fb2:	f001 fdd3 	bl	2b5c <puts>
     fb6:	2100      	movs	r1, #0
     fb8:	2001      	movs	r0, #1
     fba:	f7ff fae1 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     fbe:	e7fe      	b.n	fbe <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     fc2:	4618      	mov	r0, r3
     fc4:	3734      	adds	r7, #52	; 0x34
     fc6:	46bd      	mov	sp, r7
     fc8:	bd90      	pop	{r4, r7, pc}
     fca:	bf00      	nop
     fcc:	0000682c 	.word	0x0000682c
     fd0:	00006624 	.word	0x00006624
     fd4:	00006238 	.word	0x00006238
     fd8:	00006220 	.word	0x00006220
     fdc:	0000663c 	.word	0x0000663c
     fe0:	00006328 	.word	0x00006328

00000fe4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     fe4:	b580      	push	{r7, lr}
     fe6:	b086      	sub	sp, #24
     fe8:	af00      	add	r7, sp, #0
     fea:	60f8      	str	r0, [r7, #12]
     fec:	60b9      	str	r1, [r7, #8]
     fee:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
     ff0:	2301      	movs	r3, #1
     ff2:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
     ff4:	687a      	ldr	r2, [r7, #4]
     ff6:	68b9      	ldr	r1, [r7, #8]
     ff8:	68f8      	ldr	r0, [r7, #12]
     ffa:	f7ff ff29 	bl	e50 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
     ffe:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    1000:	2100      	movs	r1, #0
    1002:	68f8      	ldr	r0, [r7, #12]
    1004:	f7ff fdda 	bl	bbc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1008:	2100      	movs	r1, #0
    100a:	68f8      	ldr	r0, [r7, #12]
    100c:	f7ff fdfa 	bl	c04 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    1010:	2100      	movs	r1, #0
    1012:	68f8      	ldr	r0, [r7, #12]
    1014:	f7ff fe1a 	bl	c4c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1018:	2100      	movs	r1, #0
    101a:	68f8      	ldr	r0, [r7, #12]
    101c:	f7ff fe3a 	bl	c94 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1020:	4b21      	ldr	r3, [pc, #132]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1028:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    102c:	693b      	ldr	r3, [r7, #16]
    102e:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    1030:	4b1d      	ldr	r3, [pc, #116]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1032:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1034:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    1036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    103a:	4b1b      	ldr	r3, [pc, #108]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1042:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    1046:	8afb      	ldrh	r3, [r7, #22]
    1048:	015b      	lsls	r3, r3, #5
    104a:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    104c:	4b16      	ldr	r3, [pc, #88]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    104e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1050:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    1052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    1056:	4b14      	ldr	r3, [pc, #80]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    105e:	4b12      	ldr	r3, [pc, #72]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	f042 0201 	orr.w	r2, r2, #1
    1066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    106a:	4b0f      	ldr	r3, [pc, #60]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	22aa      	movs	r2, #170	; 0xaa
    1070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    1074:	4b0c      	ldr	r3, [pc, #48]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2255      	movs	r2, #85	; 0x55
    107a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    107e:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1086:	210a      	movs	r1, #10
    1088:	4618      	mov	r0, r3
    108a:	f001 f8b8 	bl	21fe <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    108e:	4603      	mov	r3, r0
    1090:	f083 0301 	eor.w	r3, r3, #1
    1094:	b2db      	uxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d001      	beq.n	109e <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    109a:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    109c:	e7ef      	b.n	107e <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    109e:	bf00      	nop
    10a0:	3718      	adds	r7, #24
    10a2:	46bd      	mov	sp, r7
    10a4:	bd80      	pop	{r7, pc}
    10a6:	bf00      	nop
    10a8:	1000011c 	.word	0x1000011c

000010ac <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    10ac:	b590      	push	{r4, r7, lr}
    10ae:	b083      	sub	sp, #12
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
    10b4:	460b      	mov	r3, r1
    10b6:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    10b8:	78fb      	ldrb	r3, [r7, #3]
    10ba:	2b1f      	cmp	r3, #31
    10bc:	d90e      	bls.n	10dc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    10be:	f44f 73a9 	mov.w	r3, #338	; 0x152
    10c2:	4a13      	ldr	r2, [pc, #76]	; (1110 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    10c4:	4913      	ldr	r1, [pc, #76]	; (1114 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    10c6:	4814      	ldr	r0, [pc, #80]	; (1118 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    10c8:	f002 fe64 	bl	3d94 <printf>
    10cc:	4813      	ldr	r0, [pc, #76]	; (111c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    10ce:	f001 fd45 	bl	2b5c <puts>
    10d2:	2100      	movs	r1, #0
    10d4:	2001      	movs	r0, #1
    10d6:	f7ff fa53 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    10da:	e7fe      	b.n	10da <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    10dc:	4b10      	ldr	r3, [pc, #64]	; (1120 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10de:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    10e0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    10e4:	4b0e      	ldr	r3, [pc, #56]	; (1120 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    10e6:	681c      	ldr	r4, [r3, #0]
    10e8:	4b0e      	ldr	r3, [pc, #56]	; (1124 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    10ea:	78f9      	ldrb	r1, [r7, #3]
    10ec:	781a      	ldrb	r2, [r3, #0]
    10ee:	785b      	ldrb	r3, [r3, #1]
    10f0:	021b      	lsls	r3, r3, #8
    10f2:	431a      	orrs	r2, r3
    10f4:	2300      	movs	r3, #0
    10f6:	f362 030f 	bfi	r3, r2, #0, #16
    10fa:	461a      	mov	r2, r3
    10fc:	f000 ffcb 	bl	2096 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1100:	4603      	mov	r3, r0
    1102:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    1106:	bf00      	nop
    1108:	370c      	adds	r7, #12
    110a:	46bd      	mov	sp, r7
    110c:	bd90      	pop	{r4, r7, pc}
    110e:	bf00      	nop
    1110:	000068a8 	.word	0x000068a8
    1114:	00006654 	.word	0x00006654
    1118:	000063d0 	.word	0x000063d0
    111c:	00006220 	.word	0x00006220
    1120:	1000011c 	.word	0x1000011c
    1124:	000065fc 	.word	0x000065fc

00001128 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1128:	b590      	push	{r4, r7, lr}
    112a:	b083      	sub	sp, #12
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
    1130:	460b      	mov	r3, r1
    1132:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    1134:	4b0c      	ldr	r3, [pc, #48]	; (1168 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    113c:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    113e:	4b0a      	ldr	r3, [pc, #40]	; (1168 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1140:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    1142:	4b0a      	ldr	r3, [pc, #40]	; (116c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    1144:	781a      	ldrb	r2, [r3, #0]
    1146:	785b      	ldrb	r3, [r3, #1]
    1148:	021b      	lsls	r3, r3, #8
    114a:	431a      	orrs	r2, r3
    114c:	2300      	movs	r3, #0
    114e:	f362 030f 	bfi	r3, r2, #0, #16
    1152:	461a      	mov	r2, r3
    1154:	f001 f826 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1158:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    115a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    115e:	bf00      	nop
    1160:	370c      	adds	r7, #12
    1162:	46bd      	mov	sp, r7
    1164:	bd90      	pop	{r4, r7, pc}
    1166:	bf00      	nop
    1168:	1000011c 	.word	0x1000011c
    116c:	000065f8 	.word	0x000065f8

00001170 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    1170:	b480      	push	{r7}
    1172:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    1174:	4b02      	ldr	r3, [pc, #8]	; (1180 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    1176:	4618      	mov	r0, r3
    1178:	46bd      	mov	sp, r7
    117a:	f85d 7b04 	ldr.w	r7, [sp], #4
    117e:	4770      	bx	lr
    1180:	10000008 	.word	0x10000008

00001184 <sjsu::Uart::Write(unsigned char) const>:
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  /// @param byte - Write a single byte to the UART port.
  void Write(uint8_t byte) const
    1184:	b580      	push	{r7, lr}
    1186:	b082      	sub	sp, #8
    1188:	af00      	add	r7, sp, #0
    118a:	6078      	str	r0, [r7, #4]
    118c:	460b      	mov	r3, r1
    118e:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	3308      	adds	r3, #8
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	1cf9      	adds	r1, r7, #3
    119a:	2201      	movs	r2, #1
    119c:	6878      	ldr	r0, [r7, #4]
    119e:	4798      	blx	r3
  }
    11a0:	bf00      	nop
    11a2:	3708      	adds	r7, #8
    11a4:	46bd      	mov	sp, r7
    11a6:	bd80      	pop	{r7, pc}

000011a8 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    11a8:	b480      	push	{r7}
    11aa:	b089      	sub	sp, #36	; 0x24
    11ac:	af00      	add	r7, sp, #0
    11ae:	6078      	str	r0, [r7, #4]
    11b0:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	2200      	movs	r2, #0
    11b8:	601a      	str	r2, [r3, #0]
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	2200      	movs	r2, #0
    11be:	605a      	str	r2, [r3, #4]
    11c0:	687b      	ldr	r3, [r7, #4]
    11c2:	2201      	movs	r2, #1
    11c4:	609a      	str	r2, [r3, #8]
  bool finished = false;
    11c6:	2300      	movs	r3, #0
    11c8:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    11ca:	2300      	movs	r3, #0
    11cc:	61bb      	str	r3, [r7, #24]
    11ce:	69bb      	ldr	r3, [r7, #24]
    11d0:	2b0e      	cmp	r3, #14
    11d2:	dc4f      	bgt.n	1274 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    11d4:	7ffb      	ldrb	r3, [r7, #31]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d14c      	bne.n	1274 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    11da:	69bb      	ldr	r3, [r7, #24]
    11dc:	3301      	adds	r3, #1
    11de:	617b      	str	r3, [r7, #20]
    11e0:	697b      	ldr	r3, [r7, #20]
    11e2:	2b0e      	cmp	r3, #14
    11e4:	dc42      	bgt.n	126c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    11e6:	7ffb      	ldrb	r3, [r7, #31]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d13f      	bne.n	126c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    11ec:	69bb      	ldr	r3, [r7, #24]
    11ee:	ee07 3a90 	vmov	s15, r3
    11f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    11f6:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    11fa:	697b      	ldr	r3, [r7, #20]
    11fc:	ee07 3a90 	vmov	s15, r3
    1200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1204:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    1208:	edd7 6a04 	vldr	s13, [r7, #16]
    120c:	ed97 7a03 	vldr	s14, [r7, #12]
    1210:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1218:	ee77 7a87 	vadd.f32	s15, s15, s14
    121c:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    1220:	edd7 7a02 	vldr	s15, [r7, #8]
    1224:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1284 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1228:	ee77 7a87 	vadd.f32	s15, s15, s14
    122c:	ed97 7a00 	vldr	s14, [r7]
    1230:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1238:	d814      	bhi.n	1264 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    123a:	edd7 7a02 	vldr	s15, [r7, #8]
    123e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1284 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1242:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    1246:	ed97 7a00 	vldr	s14, [r7]
    124a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1252:	db07      	blt.n	1264 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    1254:	69ba      	ldr	r2, [r7, #24]
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    125a:	697a      	ldr	r2, [r7, #20]
    125c:	687b      	ldr	r3, [r7, #4]
    125e:	609a      	str	r2, [r3, #8]
        finished          = true;
    1260:	2301      	movs	r3, #1
    1262:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1264:	697b      	ldr	r3, [r7, #20]
    1266:	3301      	adds	r3, #1
    1268:	617b      	str	r3, [r7, #20]
    126a:	e7b9      	b.n	11e0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    126c:	69bb      	ldr	r3, [r7, #24]
    126e:	3301      	adds	r3, #1
    1270:	61bb      	str	r3, [r7, #24]
    1272:	e7ac      	b.n	11ce <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    1274:	bf00      	nop
}
    1276:	6878      	ldr	r0, [r7, #4]
    1278:	3724      	adds	r7, #36	; 0x24
    127a:	46bd      	mov	sp, r7
    127c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1280:	4770      	bx	lr
    1282:	bf00      	nop
    1284:	3d4ccccd 	.word	0x3d4ccccd

00001288 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    1288:	b480      	push	{r7}
    128a:	b087      	sub	sp, #28
    128c:	af00      	add	r7, sp, #0
    128e:	ed87 0a03 	vstr	s0, [r7, #12]
    1292:	edc7 0a02 	vstr	s1, [r7, #8]
    1296:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    1298:	687b      	ldr	r3, [r7, #4]
    129a:	ee07 3a90 	vmov	s15, r3
    129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12a2:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    12a6:	edd7 7a03 	vldr	s15, [r7, #12]
    12aa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    12ae:	ee27 7a87 	vmul.f32	s14, s15, s14
    12b2:	edd7 7a02 	vldr	s15, [r7, #8]
    12b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    12ba:	ed97 7a05 	vldr	s14, [r7, #20]
    12be:	eec7 6a27 	vdiv.f32	s13, s14, s15
    12c2:	eef0 7a66 	vmov.f32	s15, s13
}
    12c6:	eeb0 0a67 	vmov.f32	s0, s15
    12ca:	371c      	adds	r7, #28
    12cc:	46bd      	mov	sp, r7
    12ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    12d2:	4770      	bx	lr

000012d4 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    12d4:	b480      	push	{r7}
    12d6:	b087      	sub	sp, #28
    12d8:	af00      	add	r7, sp, #0
    12da:	ed87 0a03 	vstr	s0, [r7, #12]
    12de:	edc7 0a02 	vstr	s1, [r7, #8]
    12e2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	ee07 3a90 	vmov	s15, r3
    12ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12ee:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    12f2:	edd7 7a03 	vldr	s15, [r7, #12]
    12f6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    12fa:	ee27 7a87 	vmul.f32	s14, s15, s14
    12fe:	edd7 7a02 	vldr	s15, [r7, #8]
    1302:	ee67 7a27 	vmul.f32	s15, s14, s15
    1306:	ed97 7a05 	vldr	s14, [r7, #20]
    130a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    130e:	eef0 7a66 	vmov.f32	s15, s13
}
    1312:	eeb0 0a67 	vmov.f32	s0, s15
    1316:	371c      	adds	r7, #28
    1318:	46bd      	mov	sp, r7
    131a:	f85d 7b04 	ldr.w	r7, [sp], #4
    131e:	4770      	bx	lr

00001320 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    1320:	b480      	push	{r7}
    1322:	b083      	sub	sp, #12
    1324:	af00      	add	r7, sp, #0
    1326:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    132a:	edd7 7a01 	vldr	s15, [r7, #4]
    132e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1332:	ee77 7a87 	vadd.f32	s15, s15, s14
    1336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    133e:	eeb0 0a67 	vmov.f32	s0, s15
    1342:	370c      	adds	r7, #12
    1344:	46bd      	mov	sp, r7
    1346:	f85d 7b04 	ldr.w	r7, [sp], #4
    134a:	4770      	bx	lr

0000134c <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    134c:	b580      	push	{r7, lr}
    134e:	b086      	sub	sp, #24
    1350:	af00      	add	r7, sp, #0
    1352:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    1356:	2300      	movs	r3, #0
    1358:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    135a:	ed97 0a01 	vldr	s0, [r7, #4]
    135e:	f7ff ffdf 	bl	1320 <sjsu::lpc40xx::uart::RoundFloat(float)>
    1362:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    1366:	ed97 7a01 	vldr	s14, [r7, #4]
    136a:	edd7 7a04 	vldr	s15, [r7, #16]
    136e:	ee77 7a67 	vsub.f32	s15, s14, s15
    1372:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    1376:	edd7 7a03 	vldr	s15, [r7, #12]
    137a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 13a8 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    137e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1386:	db0a      	blt.n	139e <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    1388:	edd7 7a03 	vldr	s15, [r7, #12]
    138c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 13ac <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    1390:	eef4 7ac7 	vcmpe.f32	s15, s14
    1394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1398:	d801      	bhi.n	139e <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    139a:	2301      	movs	r3, #1
    139c:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    139e:	7dfb      	ldrb	r3, [r7, #23]
}
    13a0:	4618      	mov	r0, r3
    13a2:	3718      	adds	r7, #24
    13a4:	46bd      	mov	sp, r7
    13a6:	bd80      	pop	{r7, pc}
    13a8:	bd4ccccd 	.word	0xbd4ccccd
    13ac:	3d4ccccd 	.word	0x3d4ccccd

000013b0 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    13b0:	b580      	push	{r7, lr}
    13b2:	b082      	sub	sp, #8
    13b4:	af00      	add	r7, sp, #0
    13b6:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    13b8:	6878      	ldr	r0, [r7, #4]
    13ba:	f000 f805 	bl	13c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    13be:	4603      	mov	r3, r0
	}
    13c0:	4618      	mov	r0, r3
    13c2:	3708      	adds	r7, #8
    13c4:	46bd      	mov	sp, r7
    13c6:	bd80      	pop	{r7, pc}

000013c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    13c8:	b580      	push	{r7, lr}
    13ca:	b082      	sub	sp, #8
    13cc:	af00      	add	r7, sp, #0
    13ce:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	4618      	mov	r0, r3
    13d4:	f7ff fcbe 	bl	d54 <units::linear_scale<float>::operator()() const>
    13d8:	eef0 7a40 	vmov.f32	s15, s0
    13dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    13e0:	ee17 3a90 	vmov	r3, s15
		}
    13e4:	4618      	mov	r0, r3
    13e6:	3708      	adds	r7, #8
    13e8:	46bd      	mov	sp, r7
    13ea:	bd80      	pop	{r7, pc}

000013ec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    13ec:	b590      	push	{r4, r7, lr}
    13ee:	b091      	sub	sp, #68	; 0x44
    13f0:	af00      	add	r7, sp, #0
    13f2:	61f8      	str	r0, [r7, #28]
    13f4:	61b9      	str	r1, [r7, #24]
    13f6:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    13f8:	f107 0314 	add.w	r3, r7, #20
    13fc:	4618      	mov	r0, r3
    13fe:	f7ff ffd7 	bl	13b0 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1402:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    1404:	2300      	movs	r3, #0
    1406:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    1408:	69fb      	ldr	r3, [r7, #28]
    140a:	2200      	movs	r2, #0
    140c:	601a      	str	r2, [r3, #0]
    140e:	69fb      	ldr	r3, [r7, #28]
    1410:	2200      	movs	r2, #0
    1412:	605a      	str	r2, [r3, #4]
    1414:	69fb      	ldr	r3, [r7, #28]
    1416:	2201      	movs	r2, #1
    1418:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    141a:	69bb      	ldr	r3, [r7, #24]
    141c:	ee07 3a90 	vmov	s15, r3
    1420:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1424:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    1428:	f04f 0300 	mov.w	r3, #0
    142c:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    142e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    1432:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1434:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    1438:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    143a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    1440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1442:	2b04      	cmp	r3, #4
    1444:	f000 80be 	beq.w	15c4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    1448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    144a:	2b03      	cmp	r3, #3
    144c:	f200 80b8 	bhi.w	15c0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    1450:	a201      	add	r2, pc, #4	; (adr r2, 1458 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    1452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1456:	bf00      	nop
    1458:	00001469 	.word	0x00001469
    145c:	000014c3 	.word	0x000014c3
    1460:	00001523 	.word	0x00001523
    1464:	00001593 	.word	0x00001593
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    1468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    146a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    146e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1472:	f7ff ff09 	bl	1288 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    1476:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    147a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    147e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1482:	eef4 7ac7 	vcmpe.f32	s15, s14
    1486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    148a:	d505      	bpl.n	1498 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    148c:	69fb      	ldr	r3, [r7, #28]
    148e:	2200      	movs	r2, #0
    1490:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    1492:	2304      	movs	r3, #4
    1494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    1496:	e094      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    1498:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    149c:	f7ff ff56 	bl	134c <sjsu::lpc40xx::uart::IsDecmial(float)>
    14a0:	4603      	mov	r3, r0
    14a2:	2b00      	cmp	r3, #0
    14a4:	d00a      	beq.n	14bc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    14a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    14aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    14ae:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    14b2:	69fb      	ldr	r3, [r7, #28]
    14b4:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    14b6:	2304      	movs	r3, #4
    14b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    14ba:	e082      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    14bc:	2301      	movs	r3, #1
    14be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    14c0:	e07f      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    14c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14c4:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    14c8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    14cc:	f7ff fedc 	bl	1288 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    14d0:	eef0 7a40 	vmov.f32	s15, s0
    14d4:	eeb0 0a67 	vmov.f32	s0, s15
    14d8:	f7ff ff22 	bl	1320 <sjsu::lpc40xx::uart::RoundFloat(float)>
    14dc:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    14e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    14e2:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    14e6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    14ea:	f7ff fef3 	bl	12d4 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    14ee:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    14f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    14f6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 15d0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    14fa:	eef4 7ac7 	vcmpe.f32	s15, s14
    14fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1502:	db0b      	blt.n	151c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    1504:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1508:	ed9f 7a32 	vldr	s14, [pc, #200]	; 15d4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    150c:	eef4 7ac7 	vcmpe.f32	s15, s14
    1510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1514:	d802      	bhi.n	151c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    1516:	2303      	movs	r3, #3
    1518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    151a:	e052      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    151c:	2302      	movs	r3, #2
    151e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1520:	e04f      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    1522:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    152a:	ee77 7a87 	vadd.f32	s15, s15, s14
    152e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    1532:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1536:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    153a:	eef4 7ac7 	vcmpe.f32	s15, s14
    153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1542:	dd02      	ble.n	154a <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    1544:	2304      	movs	r3, #4
    1546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    1548:	e03b      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    154a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    154e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1552:	eef4 7ac7 	vcmpe.f32	s15, s14
    1556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    155a:	dd0f      	ble.n	157c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    155c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1564:	ee77 7a87 	vadd.f32	s15, s15, s14
    1568:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    156c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1574:	ee77 7a87 	vadd.f32	s15, s15, s14
    1578:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    157c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    1580:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    1584:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1588:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    158c:	2301      	movs	r3, #1
    158e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1590:	e017      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    1592:	69fc      	ldr	r4, [r7, #28]
    1594:	463b      	mov	r3, r7
    1596:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    159a:	4618      	mov	r0, r3
    159c:	f7ff fe04 	bl	11a8 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    15a0:	463b      	mov	r3, r7
    15a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    15a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    15aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    15ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    15b2:	ee17 2a90 	vmov	r2, s15
    15b6:	69fb      	ldr	r3, [r7, #28]
    15b8:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    15ba:	2304      	movs	r3, #4
    15bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15be:	e000      	b.n	15c2 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    15c0:	bf00      	nop
  while (state != States::kDone)
    15c2:	e73d      	b.n	1440 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    15c4:	bf00      	nop
}
    15c6:	69f8      	ldr	r0, [r7, #28]
    15c8:	3744      	adds	r7, #68	; 0x44
    15ca:	46bd      	mov	sp, r7
    15cc:	bd90      	pop	{r4, r7, pc}
    15ce:	bf00      	nop
    15d0:	3f8ccccd 	.word	0x3f8ccccd
    15d4:	3ff33333 	.word	0x3ff33333

000015d8 <sjsu::Uart::Uart()>:
class Uart
    15d8:	b480      	push	{r7}
    15da:	b083      	sub	sp, #12
    15dc:	af00      	add	r7, sp, #0
    15de:	6078      	str	r0, [r7, #4]
    15e0:	4a04      	ldr	r2, [pc, #16]	; (15f4 <sjsu::Uart::Uart()+0x1c>)
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	601a      	str	r2, [r3, #0]
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	4618      	mov	r0, r3
    15ea:	370c      	adds	r7, #12
    15ec:	46bd      	mov	sp, r7
    15ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f2:	4770      	bx	lr
    15f4:	0000674c 	.word	0x0000674c

000015f8 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    15f8:	b580      	push	{r7, lr}
    15fa:	b084      	sub	sp, #16
    15fc:	af00      	add	r7, sp, #0
    15fe:	60f8      	str	r0, [r7, #12]
    1600:	60b9      	str	r1, [r7, #8]
    1602:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	4618      	mov	r0, r3
    1608:	f7ff ffe6 	bl	15d8 <sjsu::Uart::Uart()>
    160c:	4a06      	ldr	r2, [pc, #24]	; (1628 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	601a      	str	r2, [r3, #0]
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	68ba      	ldr	r2, [r7, #8]
    1616:	605a      	str	r2, [r3, #4]
    1618:	68fb      	ldr	r3, [r7, #12]
    161a:	687a      	ldr	r2, [r7, #4]
    161c:	609a      	str	r2, [r3, #8]
  {
  }
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	4618      	mov	r0, r3
    1622:	3710      	adds	r7, #16
    1624:	46bd      	mov	sp, r7
    1626:	bd80      	pop	{r7, pc}
    1628:	00006730 	.word	0x00006730

0000162c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    162c:	b580      	push	{r7, lr}
    162e:	b084      	sub	sp, #16
    1630:	af00      	add	r7, sp, #0
    1632:	6078      	str	r0, [r7, #4]
    1634:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    1636:	2307      	movs	r3, #7
    1638:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	6898      	ldr	r0, [r3, #8]
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	689b      	ldr	r3, [r3, #8]
    1642:	681b      	ldr	r3, [r3, #0]
    1644:	3314      	adds	r3, #20
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	687a      	ldr	r2, [r7, #4]
    164a:	6852      	ldr	r2, [r2, #4]
    164c:	3204      	adds	r2, #4
    164e:	4611      	mov	r1, r2
    1650:	4798      	blx	r3

    SetBaudRate(baud_rate);
    1652:	6839      	ldr	r1, [r7, #0]
    1654:	6878      	ldr	r0, [r7, #4]
    1656:	f000 f849 	bl	16ec <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	685b      	ldr	r3, [r3, #4]
    165e:	68d8      	ldr	r0, [r3, #12]
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	685b      	ldr	r3, [r3, #4]
    1664:	68db      	ldr	r3, [r3, #12]
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	6852      	ldr	r2, [r2, #4]
    166e:	7c12      	ldrb	r2, [r2, #16]
    1670:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1674:	b2d2      	uxtb	r2, r2
    1676:	4611      	mov	r1, r2
    1678:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	685b      	ldr	r3, [r3, #4]
    167e:	6898      	ldr	r0, [r3, #8]
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	685b      	ldr	r3, [r3, #4]
    1684:	689b      	ldr	r3, [r3, #8]
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	681b      	ldr	r3, [r3, #0]
    168a:	687a      	ldr	r2, [r7, #4]
    168c:	6852      	ldr	r2, [r2, #4]
    168e:	7c12      	ldrb	r2, [r2, #16]
    1690:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1694:	b2d2      	uxtb	r2, r2
    1696:	4611      	mov	r1, r2
    1698:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	685b      	ldr	r3, [r3, #4]
    169e:	68da      	ldr	r2, [r3, #12]
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	685b      	ldr	r3, [r3, #4]
    16a4:	68db      	ldr	r3, [r3, #12]
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	3304      	adds	r3, #4
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	2102      	movs	r1, #2
    16ae:	4610      	mov	r0, r2
    16b0:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	685b      	ldr	r3, [r3, #4]
    16b6:	689a      	ldr	r2, [r3, #8]
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	685b      	ldr	r3, [r3, #4]
    16bc:	689b      	ldr	r3, [r3, #8]
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	3304      	adds	r3, #4
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	2102      	movs	r1, #2
    16c6:	4610      	mov	r0, r2
    16c8:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	685b      	ldr	r3, [r3, #4]
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	7a1b      	ldrb	r3, [r3, #8]
    16d2:	b2da      	uxtb	r2, r3
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	685b      	ldr	r3, [r3, #4]
    16d8:	681b      	ldr	r3, [r3, #0]
    16da:	f042 0207 	orr.w	r2, r2, #7
    16de:	b2d2      	uxtb	r2, r2
    16e0:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    16e2:	2300      	movs	r3, #0
  }
    16e4:	4618      	mov	r0, r3
    16e6:	3710      	adds	r7, #16
    16e8:	46bd      	mov	sp, r7
    16ea:	bd80      	pop	{r7, pc}

000016ec <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    16ec:	b580      	push	{r7, lr}
    16ee:	b086      	sub	sp, #24
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
    16f4:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	689a      	ldr	r2, [r3, #8]
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	685b      	ldr	r3, [r3, #4]
    16fe:	3304      	adds	r3, #4
    1700:	4619      	mov	r1, r3
    1702:	4610      	mov	r0, r2
    1704:	f7ff f902 	bl	90c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1708:	4602      	mov	r2, r0
    170a:	f107 0308 	add.w	r3, r7, #8
    170e:	6839      	ldr	r1, [r7, #0]
    1710:	4618      	mov	r0, r3
    1712:	f7ff fe6b 	bl	13ec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    1716:	2380      	movs	r3, #128	; 0x80
    1718:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    171a:	68bb      	ldr	r3, [r7, #8]
    171c:	0a1b      	lsrs	r3, r3, #8
    171e:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    1720:	68bb      	ldr	r3, [r7, #8]
    1722:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1724:	693b      	ldr	r3, [r7, #16]
    1726:	b2db      	uxtb	r3, r3
    1728:	011b      	lsls	r3, r3, #4
    172a:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    172c:	68fb      	ldr	r3, [r7, #12]
    172e:	b2db      	uxtb	r3, r3
    1730:	f003 030f 	and.w	r3, r3, #15
    1734:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1736:	4313      	orrs	r3, r2
    1738:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	685b      	ldr	r3, [r3, #4]
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	2280      	movs	r2, #128	; 0x80
    1742:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	685b      	ldr	r3, [r3, #4]
    1748:	681b      	ldr	r3, [r3, #0]
    174a:	7dba      	ldrb	r2, [r7, #22]
    174c:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    174e:	687b      	ldr	r3, [r7, #4]
    1750:	685b      	ldr	r3, [r3, #4]
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	7d7a      	ldrb	r2, [r7, #21]
    1756:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	685b      	ldr	r3, [r3, #4]
    175c:	681b      	ldr	r3, [r3, #0]
    175e:	7d3a      	ldrb	r2, [r7, #20]
    1760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    1764:	687b      	ldr	r3, [r7, #4]
    1766:	685b      	ldr	r3, [r3, #4]
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	2203      	movs	r2, #3
    176c:	731a      	strb	r2, [r3, #12]
    return true;
    176e:	2301      	movs	r3, #1
  }
    1770:	4618      	mov	r0, r3
    1772:	3718      	adds	r7, #24
    1774:	46bd      	mov	sp, r7
    1776:	bd80      	pop	{r7, pc}

00001778 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    1778:	b580      	push	{r7, lr}
    177a:	b086      	sub	sp, #24
    177c:	af00      	add	r7, sp, #0
    177e:	60f8      	str	r0, [r7, #12]
    1780:	60b9      	str	r1, [r7, #8]
    1782:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    1784:	2300      	movs	r3, #0
    1786:	617b      	str	r3, [r7, #20]
    1788:	697a      	ldr	r2, [r7, #20]
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	429a      	cmp	r2, r3
    178e:	d216      	bcs.n	17be <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    1790:	68ba      	ldr	r2, [r7, #8]
    1792:	697b      	ldr	r3, [r7, #20]
    1794:	441a      	add	r2, r3
    1796:	68fb      	ldr	r3, [r7, #12]
    1798:	685b      	ldr	r3, [r3, #4]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	7812      	ldrb	r2, [r2, #0]
    179e:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    17a0:	68f8      	ldr	r0, [r7, #12]
    17a2:	f000 f8b5 	bl	1910 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    17a6:	4603      	mov	r3, r0
    17a8:	f083 0301 	eor.w	r3, r3, #1
    17ac:	b2db      	uxtb	r3, r3
    17ae:	2b00      	cmp	r3, #0
    17b0:	d001      	beq.n	17b6 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    17b2:	bf00      	nop
      while (!TransmissionComplete())
    17b4:	e7f4      	b.n	17a0 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    17b6:	697b      	ldr	r3, [r7, #20]
    17b8:	3301      	adds	r3, #1
    17ba:	617b      	str	r3, [r7, #20]
    17bc:	e7e4      	b.n	1788 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    17be:	bf00      	nop
    17c0:	3718      	adds	r7, #24
    17c2:	46bd      	mov	sp, r7
    17c4:	bd80      	pop	{r7, pc}

000017c6 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17c6:	b590      	push	{r4, r7, lr}
    17c8:	b083      	sub	sp, #12
    17ca:	af00      	add	r7, sp, #0
    17cc:	6078      	str	r0, [r7, #4]
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    17d2:	4618      	mov	r0, r3
    17d4:	f000 f88a 	bl	18ec <sjsu::lpc40xx::Uart::HasData() const>
    17d8:	4603      	mov	r3, r0
    17da:	2b00      	cmp	r3, #0
    17dc:	d010      	beq.n	1800 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    17e2:	685b      	ldr	r3, [r3, #4]
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    17ee:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    17f4:	6813      	ldr	r3, [r2, #0]
    17f6:	1c58      	adds	r0, r3, #1
    17f8:	6010      	str	r0, [r2, #0]
    17fa:	440b      	add	r3, r1
    17fc:	4622      	mov	r2, r4
    17fe:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    1804:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    180a:	429a      	cmp	r2, r3
    180c:	d301      	bcc.n	1812 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    180e:	2301      	movs	r3, #1
    1810:	e000      	b.n	1814 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    1812:	2300      	movs	r3, #0
    });
    1814:	4618      	mov	r0, r3
    1816:	370c      	adds	r7, #12
    1818:	46bd      	mov	sp, r7
    181a:	bd90      	pop	{r4, r7, pc}

0000181c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    181c:	b590      	push	{r4, r7, lr}
    181e:	b09d      	sub	sp, #116	; 0x74
    1820:	af00      	add	r7, sp, #0
    1822:	6178      	str	r0, [r7, #20]
    1824:	6139      	str	r1, [r7, #16]
    1826:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    1828:	2300      	movs	r3, #0
    182a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    182c:	697b      	ldr	r3, [r7, #20]
    182e:	643b      	str	r3, [r7, #64]	; 0x40
    1830:	f107 0310 	add.w	r3, r7, #16
    1834:	647b      	str	r3, [r7, #68]	; 0x44
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	64bb      	str	r3, [r7, #72]	; 0x48
    183a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    183e:	64fb      	str	r3, [r7, #76]	; 0x4c
    1840:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    1844:	e9c7 3408 	strd	r3, r4, [r7, #32]
    1848:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    184c:	f107 0340 	add.w	r3, r7, #64	; 0x40
    1850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    1856:	f107 0360 	add.w	r3, r7, #96	; 0x60
    185a:	4618      	mov	r0, r3
    185c:	f000 fbe0 	bl	2020 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    1860:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1864:	f107 0320 	add.w	r3, r7, #32
    1868:	4611      	mov	r1, r2
    186a:	4618      	mov	r0, r3
    186c:	f000 fbec 	bl	2048 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1870:	4603      	mov	r3, r0
    1872:	2b00      	cmp	r3, #0
    1874:	d004      	beq.n	1880 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    1876:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    187a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    187e:	e011      	b.n	18a4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    1880:	4b19      	ldr	r3, [pc, #100]	; (18e8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1882:	681b      	ldr	r3, [r3, #0]
    1884:	f107 0258 	add.w	r2, r7, #88	; 0x58
    1888:	4610      	mov	r0, r2
    188a:	4798      	blx	r3
    188c:	463b      	mov	r3, r7
    188e:	f107 0220 	add.w	r2, r7, #32
    1892:	f107 0158 	add.w	r1, r7, #88	; 0x58
    1896:	4618      	mov	r0, r3
    1898:	f000 fd6d 	bl	2376 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    189c:	e9d7 3400 	ldrd	r3, r4, [r7]
    18a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    18a4:	2301      	movs	r3, #1
    18a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    18a8:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
    18b0:	4610      	mov	r0, r2
    18b2:	4798      	blx	r3
    18b4:	f107 0218 	add.w	r2, r7, #24
    18b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    18bc:	4611      	mov	r1, r2
    18be:	4618      	mov	r0, r3
    18c0:	f000 fd86 	bl	23d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    18c4:	4603      	mov	r3, r0
    18c6:	2b00      	cmp	r3, #0
    18c8:	d009      	beq.n	18de <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    18ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    18ce:	4618      	mov	r0, r3
    18d0:	f7ff ff79 	bl	17c6 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    18d4:	4603      	mov	r3, r0
    18d6:	2b00      	cmp	r3, #0
    18d8:	d0e6      	beq.n	18a8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    18da:	2300      	movs	r3, #0
    18dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    18de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    18e0:	4618      	mov	r0, r3
    18e2:	3774      	adds	r7, #116	; 0x74
    18e4:	46bd      	mov	sp, r7
    18e6:	bd90      	pop	{r4, r7, pc}
    18e8:	10000000 	.word	0x10000000

000018ec <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    18ec:	b580      	push	{r7, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	685b      	ldr	r3, [r3, #4]
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	7d1b      	ldrb	r3, [r3, #20]
    18fc:	b2db      	uxtb	r3, r3
    18fe:	2100      	movs	r1, #0
    1900:	4618      	mov	r0, r3
    1902:	f000 fc93 	bl	222c <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1906:	4603      	mov	r3, r0
  }
    1908:	4618      	mov	r0, r3
    190a:	3708      	adds	r7, #8
    190c:	46bd      	mov	sp, r7
    190e:	bd80      	pop	{r7, pc}

00001910 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    1910:	b580      	push	{r7, lr}
    1912:	b082      	sub	sp, #8
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	685b      	ldr	r3, [r3, #4]
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	7d1b      	ldrb	r3, [r3, #20]
    1920:	b2db      	uxtb	r3, r3
    1922:	2105      	movs	r1, #5
    1924:	4618      	mov	r0, r3
    1926:	f000 fc81 	bl	222c <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    192a:	4603      	mov	r3, r0
  }
    192c:	4618      	mov	r0, r3
    192e:	3708      	adds	r7, #8
    1930:	46bd      	mov	sp, r7
    1932:	bd80      	pop	{r7, pc}

00001934 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
  }
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    1934:	b580      	push	{r7, lr}
    1936:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    1938:	4b08      	ldr	r3, [pc, #32]	; (195c <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    193a:	681b      	ldr	r3, [r3, #0]
    193c:	6818      	ldr	r0, [r3, #0]
    193e:	4b08      	ldr	r3, [pc, #32]	; (1960 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    1940:	781a      	ldrb	r2, [r3, #0]
    1942:	785b      	ldrb	r3, [r3, #1]
    1944:	021b      	lsls	r3, r3, #8
    1946:	431a      	orrs	r2, r3
    1948:	2300      	movs	r3, #0
    194a:	f362 030f 	bfi	r3, r2, #0, #16
    194e:	4619      	mov	r1, r3
    1950:	f000 fc83 	bl	225a <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1954:	4603      	mov	r3, r0
  }
    1956:	4618      	mov	r0, r3
    1958:	bd80      	pop	{r7, pc}
    195a:	bf00      	nop
    195c:	10000120 	.word	0x10000120
    1960:	000066a4 	.word	0x000066a4

00001964 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    1964:	b480      	push	{r7}
    1966:	b083      	sub	sp, #12
    1968:	af00      	add	r7, sp, #0
    196a:	6078      	str	r0, [r7, #4]
    196c:	4a04      	ldr	r2, [pc, #16]	; (1980 <sjsu::Adc::Adc()+0x1c>)
    196e:	687b      	ldr	r3, [r7, #4]
    1970:	601a      	str	r2, [r3, #0]
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	4618      	mov	r0, r3
    1976:	370c      	adds	r7, #12
    1978:	46bd      	mov	sp, r7
    197a:	f85d 7b04 	ldr.w	r7, [sp], #4
    197e:	4770      	bx	lr
    1980:	0000671c 	.word	0x0000671c

00001984 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    1984:	b580      	push	{r7, lr}
    1986:	b084      	sub	sp, #16
    1988:	af00      	add	r7, sp, #0
    198a:	60f8      	str	r0, [r7, #12]
    198c:	60b9      	str	r1, [r7, #8]
    198e:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1990:	68fb      	ldr	r3, [r7, #12]
    1992:	4618      	mov	r0, r3
    1994:	f7ff ffe6 	bl	1964 <sjsu::Adc::Adc()>
    1998:	4a06      	ldr	r2, [pc, #24]	; (19b4 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    199a:	68fb      	ldr	r3, [r7, #12]
    199c:	601a      	str	r2, [r3, #0]
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	68ba      	ldr	r2, [r7, #8]
    19a2:	605a      	str	r2, [r3, #4]
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	687a      	ldr	r2, [r7, #4]
    19a8:	609a      	str	r2, [r3, #8]
  {
  }
    19aa:	68fb      	ldr	r3, [r7, #12]
    19ac:	4618      	mov	r0, r3
    19ae:	3710      	adds	r7, #16
    19b0:	46bd      	mov	sp, r7
    19b2:	bd80      	pop	{r7, pc}
    19b4:	00006708 	.word	0x00006708

000019b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    19b8:	b580      	push	{r7, lr}
    19ba:	ed2d 8b02 	vpush	{d8}
    19be:	b084      	sub	sp, #16
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	4618      	mov	r0, r3
    19ca:	f7ff f9c3 	bl	d54 <units::linear_scale<float>::operator()() const>
    19ce:	eeb0 8a40 	vmov.f32	s16, s0
    19d2:	683b      	ldr	r3, [r7, #0]
    19d4:	4618      	mov	r0, r3
    19d6:	f7ff f9bd 	bl	d54 <units::linear_scale<float>::operator()() const>
    19da:	eef0 7a40 	vmov.f32	s15, s0
    19de:	edc7 7a03 	vstr	s15, [r7, #12]
    19e2:	f107 030c 	add.w	r3, r7, #12
    19e6:	4618      	mov	r0, r3
    19e8:	f7fe fd31 	bl	44e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    19ec:	eeb0 7a40 	vmov.f32	s14, s0
    19f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
    19f4:	f107 0308 	add.w	r3, r7, #8
    19f8:	eeb0 0a67 	vmov.f32	s0, s15
    19fc:	4618      	mov	r0, r3
    19fe:	f7ff f9e4 	bl	dca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1a02:	68bb      	ldr	r3, [r7, #8]
	}
    1a04:	4618      	mov	r0, r3
    1a06:	3710      	adds	r7, #16
    1a08:	46bd      	mov	sp, r7
    1a0a:	ecbd 8b02 	vpop	{d8}
    1a0e:	bd80      	pop	{r7, pc}

00001a10 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    1a10:	b580      	push	{r7, lr}
    1a12:	b082      	sub	sp, #8
    1a14:	af00      	add	r7, sp, #0
    1a16:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1a18:	6878      	ldr	r0, [r7, #4]
    1a1a:	f000 fbd5 	bl	21c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1a1e:	4603      	mov	r3, r0
		}
    1a20:	4618      	mov	r0, r3
    1a22:	3708      	adds	r7, #8
    1a24:	46bd      	mov	sp, r7
    1a26:	bd80      	pop	{r7, pc}

00001a28 <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    1a28:	b580      	push	{r7, lr}
    1a2a:	b086      	sub	sp, #24
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	689a      	ldr	r2, [r3, #8]
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1a38:	681b      	ldr	r3, [r3, #0]
    1a3a:	3314      	adds	r3, #20
    1a3c:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    1a3e:	493c      	ldr	r1, [pc, #240]	; (1b30 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1a40:	4610      	mov	r0, r2
    1a42:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	685b      	ldr	r3, [r3, #4]
    1a48:	6818      	ldr	r0, [r3, #0]
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	685b      	ldr	r3, [r3, #4]
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	687a      	ldr	r2, [r7, #4]
    1a56:	6852      	ldr	r2, [r2, #4]
    1a58:	7912      	ldrb	r2, [r2, #4]
    1a5a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1a5e:	b2d2      	uxtb	r2, r2
    1a60:	4611      	mov	r1, r2
    1a62:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	685b      	ldr	r3, [r3, #4]
    1a68:	681a      	ldr	r2, [r3, #0]
    1a6a:	687b      	ldr	r3, [r7, #4]
    1a6c:	685b      	ldr	r3, [r3, #4]
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	3304      	adds	r3, #4
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	2100      	movs	r1, #0
    1a78:	4610      	mov	r0, r2
    1a7a:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	685b      	ldr	r3, [r3, #4]
    1a80:	681a      	ldr	r2, [r3, #0]
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	685b      	ldr	r3, [r3, #4]
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	330c      	adds	r3, #12
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	2101      	movs	r1, #1
    1a90:	4610      	mov	r0, r2
    1a92:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1a98:	4925      	ldr	r1, [pc, #148]	; (1b30 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1a9a:	4618      	mov	r0, r3
    1a9c:	f7fe ff36 	bl	90c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1aa0:	4603      	mov	r3, r0
    1aa2:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1aa4:	f107 0308 	add.w	r3, r7, #8
    1aa8:	4922      	ldr	r1, [pc, #136]	; (1b34 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    1aaa:	4618      	mov	r0, r3
    1aac:	f7ff ff84 	bl	19b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1ab0:	4603      	mov	r3, r0
    1ab2:	60fb      	str	r3, [r7, #12]
    1ab4:	f107 030c 	add.w	r3, r7, #12
    1ab8:	4618      	mov	r0, r3
    1aba:	f7ff ffa9 	bl	1a10 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1abe:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1ac0:	4b1d      	ldr	r3, [pc, #116]	; (1b38 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1ac2:	681b      	ldr	r3, [r3, #0]
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    1ac8:	4b1c      	ldr	r3, [pc, #112]	; (1b3c <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    1aca:	781a      	ldrb	r2, [r3, #0]
    1acc:	785b      	ldrb	r3, [r3, #1]
    1ace:	021b      	lsls	r3, r3, #8
    1ad0:	431a      	orrs	r2, r3
    1ad2:	2300      	movs	r3, #0
    1ad4:	f362 030f 	bfi	r3, r2, #0, #16
    1ad8:	4619      	mov	r1, r3
    1ada:	6978      	ldr	r0, [r7, #20]
    1adc:	f000 fbcc 	bl	2278 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1ae0:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    1ae2:	4b17      	ldr	r3, [pc, #92]	; (1b40 <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    1ae4:	781a      	ldrb	r2, [r3, #0]
    1ae6:	785b      	ldrb	r3, [r3, #1]
    1ae8:	021b      	lsls	r3, r3, #8
    1aea:	431a      	orrs	r2, r3
    1aec:	2300      	movs	r3, #0
    1aee:	f362 030f 	bfi	r3, r2, #0, #16
    1af2:	461a      	mov	r2, r3
    1af4:	6939      	ldr	r1, [r7, #16]
    1af6:	6978      	ldr	r0, [r7, #20]
    1af8:	f000 fb54 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1afc:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    1afe:	f7ff ff19 	bl	1934 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1b02:	4603      	mov	r3, r0
    1b04:	2b00      	cmp	r3, #0
    1b06:	d00a      	beq.n	1b1e <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	685b      	ldr	r3, [r3, #4]
    1b0c:	791b      	ldrb	r3, [r3, #4]
    1b0e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b12:	b2db      	uxtb	r3, r3
    1b14:	4619      	mov	r1, r3
    1b16:	6978      	ldr	r0, [r7, #20]
    1b18:	f000 fb1f 	bl	215a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1b1c:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    1b1e:	4b06      	ldr	r3, [pc, #24]	; (1b38 <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	697a      	ldr	r2, [r7, #20]
    1b24:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    1b26:	2300      	movs	r3, #0
  }
    1b28:	4618      	mov	r0, r3
    1b2a:	3718      	adds	r7, #24
    1b2c:	46bd      	mov	sp, r7
    1b2e:	bd80      	pop	{r7, pc}
    1b30:	000065ec 	.word	0x000065ec
    1b34:	000066c8 	.word	0x000066c8
    1b38:	10000120 	.word	0x10000120
    1b3c:	000066a8 	.word	0x000066a8
    1b40:	000066a0 	.word	0x000066a0

00001b44 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1b44:	b580      	push	{r7, lr}
    1b46:	b084      	sub	sp, #16
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1b4c:	6878      	ldr	r0, [r7, #4]
    1b4e:	f000 f851 	bl	1bf4 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1b52:	4b0e      	ldr	r3, [pc, #56]	; (1b8c <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	687a      	ldr	r2, [r7, #4]
    1b58:	6852      	ldr	r2, [r2, #4]
    1b5a:	7912      	ldrb	r2, [r2, #4]
    1b5c:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1b60:	b2d2      	uxtb	r2, r2
    1b62:	3204      	adds	r2, #4
    1b64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1b68:	4b09      	ldr	r3, [pc, #36]	; (1b90 <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1b6a:	781a      	ldrb	r2, [r3, #0]
    1b6c:	785b      	ldrb	r3, [r3, #1]
    1b6e:	021b      	lsls	r3, r3, #8
    1b70:	431a      	orrs	r2, r3
    1b72:	2300      	movs	r3, #0
    1b74:	f362 030f 	bfi	r3, r2, #0, #16
    1b78:	4619      	mov	r1, r3
    1b7a:	f000 fb8c 	bl	2296 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1b7e:	60f8      	str	r0, [r7, #12]
    return result;
    1b80:	68fb      	ldr	r3, [r7, #12]
  }
    1b82:	4618      	mov	r0, r3
    1b84:	3710      	adds	r7, #16
    1b86:	46bd      	mov	sp, r7
    1b88:	bd80      	pop	{r7, pc}
    1b8a:	bf00      	nop
    1b8c:	10000120 	.word	0x10000120
    1b90:	000066b0 	.word	0x000066b0

00001b94 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1b94:	b480      	push	{r7}
    1b96:	b083      	sub	sp, #12
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1b9c:	230c      	movs	r3, #12
  }
    1b9e:	4618      	mov	r0, r3
    1ba0:	370c      	adds	r7, #12
    1ba2:	46bd      	mov	sp, r7
    1ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ba8:	4770      	bx	lr
    1baa:	Address 0x0000000000001baa is out of bounds.


00001bac <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1bb4:	4b0d      	ldr	r3, [pc, #52]	; (1bec <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	687a      	ldr	r2, [r7, #4]
    1bba:	6852      	ldr	r2, [r2, #4]
    1bbc:	7912      	ldrb	r2, [r2, #4]
    1bbe:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1bc2:	b2d2      	uxtb	r2, r2
    1bc4:	3204      	adds	r2, #4
    1bc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1bca:	4b09      	ldr	r3, [pc, #36]	; (1bf0 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1bcc:	781a      	ldrb	r2, [r3, #0]
    1bce:	785b      	ldrb	r3, [r3, #1]
    1bd0:	021b      	lsls	r3, r3, #8
    1bd2:	431a      	orrs	r2, r3
    1bd4:	2300      	movs	r3, #0
    1bd6:	f362 030f 	bfi	r3, r2, #0, #16
    1bda:	4619      	mov	r1, r3
    1bdc:	f000 fb3d 	bl	225a <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1be0:	4603      	mov	r3, r0
  }
    1be2:	4618      	mov	r0, r3
    1be4:	3708      	adds	r7, #8
    1be6:	46bd      	mov	sp, r7
    1be8:	bd80      	pop	{r7, pc}
    1bea:	bf00      	nop
    1bec:	10000120 	.word	0x10000120
    1bf0:	000066b4 	.word	0x000066b4

00001bf4 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1bf4:	b590      	push	{r4, r7, lr}
    1bf6:	b085      	sub	sp, #20
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1bfc:	f7ff fe9a 	bl	1934 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1c00:	4603      	mov	r3, r0
    1c02:	2b00      	cmp	r3, #0
    1c04:	d013      	beq.n	1c2e <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1c06:	4b29      	ldr	r3, [pc, #164]	; (1cac <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	6818      	ldr	r0, [r3, #0]
    1c0c:	4b27      	ldr	r3, [pc, #156]	; (1cac <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c0e:	681c      	ldr	r4, [r3, #0]
    1c10:	4b27      	ldr	r3, [pc, #156]	; (1cb0 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1c12:	781a      	ldrb	r2, [r3, #0]
    1c14:	785b      	ldrb	r3, [r3, #1]
    1c16:	021b      	lsls	r3, r3, #8
    1c18:	431a      	orrs	r2, r3
    1c1a:	2300      	movs	r3, #0
    1c1c:	f362 030f 	bfi	r3, r2, #0, #16
    1c20:	461a      	mov	r2, r3
    1c22:	2100      	movs	r1, #0
    1c24:	f000 fb48 	bl	22b8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1c28:	4603      	mov	r3, r0
    1c2a:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1c2c:	e03a      	b.n	1ca4 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	685b      	ldr	r3, [r3, #4]
    1c32:	791b      	ldrb	r3, [r3, #4]
    1c34:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1c38:	b2db      	uxtb	r3, r3
    1c3a:	461a      	mov	r2, r3
    1c3c:	2301      	movs	r3, #1
    1c3e:	4093      	lsls	r3, r2
    1c40:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1c42:	4b1a      	ldr	r3, [pc, #104]	; (1cac <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1c48:	4b18      	ldr	r3, [pc, #96]	; (1cac <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c4a:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1c4c:	4b19      	ldr	r3, [pc, #100]	; (1cb4 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1c4e:	781a      	ldrb	r2, [r3, #0]
    1c50:	785b      	ldrb	r3, [r3, #1]
    1c52:	021b      	lsls	r3, r3, #8
    1c54:	431a      	orrs	r2, r3
    1c56:	2300      	movs	r3, #0
    1c58:	f362 030f 	bfi	r3, r2, #0, #16
    1c5c:	461a      	mov	r2, r3
    1c5e:	68f9      	ldr	r1, [r7, #12]
    1c60:	f000 faa0 	bl	21a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1c64:	4603      	mov	r3, r0
      adc_base->CR =
    1c66:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1c68:	4b10      	ldr	r3, [pc, #64]	; (1cac <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c6a:	681b      	ldr	r3, [r3, #0]
    1c6c:	6818      	ldr	r0, [r3, #0]
    1c6e:	4b0f      	ldr	r3, [pc, #60]	; (1cac <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1c70:	681c      	ldr	r4, [r3, #0]
    1c72:	4b0f      	ldr	r3, [pc, #60]	; (1cb0 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1c74:	781a      	ldrb	r2, [r3, #0]
    1c76:	785b      	ldrb	r3, [r3, #1]
    1c78:	021b      	lsls	r3, r3, #8
    1c7a:	431a      	orrs	r2, r3
    1c7c:	2300      	movs	r3, #0
    1c7e:	f362 030f 	bfi	r3, r2, #0, #16
    1c82:	461a      	mov	r2, r3
    1c84:	2101      	movs	r1, #1
    1c86:	f000 fb17 	bl	22b8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1c8a:	4603      	mov	r3, r0
    1c8c:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1c8e:	6878      	ldr	r0, [r7, #4]
    1c90:	f7ff ff8c 	bl	1bac <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1c94:	4603      	mov	r3, r0
    1c96:	f083 0301 	eor.w	r3, r3, #1
    1c9a:	b2db      	uxtb	r3, r3
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d001      	beq.n	1ca4 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1ca0:	bf00      	nop
      while (!HasConversionFinished())
    1ca2:	e7f4      	b.n	1c8e <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1ca4:	bf00      	nop
    1ca6:	3714      	adds	r7, #20
    1ca8:	46bd      	mov	sp, r7
    1caa:	bd90      	pop	{r4, r7, pc}
    1cac:	10000120 	.word	0x10000120
    1cb0:	000066ac 	.word	0x000066ac
    1cb4:	0000669c 	.word	0x0000669c

00001cb8 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1cb8:	b480      	push	{r7}
    1cba:	af00      	add	r7, sp, #0
    1cbc:	bf00      	nop
    1cbe:	46bd      	mov	sp, r7
    1cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc4:	4770      	bx	lr
    1cc6:	Address 0x0000000000001cc6 is out of bounds.


00001cc8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1cc8:	b580      	push	{r7, lr}
    1cca:	b082      	sub	sp, #8
    1ccc:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1cce:	4b09      	ldr	r3, [pc, #36]	; (1cf4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1cd0:	681b      	ldr	r3, [r3, #0]
    1cd2:	9300      	str	r3, [sp, #0]
    1cd4:	231d      	movs	r3, #29
    1cd6:	4a08      	ldr	r2, [pc, #32]	; (1cf8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1cd8:	4908      	ldr	r1, [pc, #32]	; (1cfc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1cda:	4809      	ldr	r0, [pc, #36]	; (1d00 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1cdc:	f002 f85a 	bl	3d94 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1ce0:	4b04      	ldr	r3, [pc, #16]	; (1cf4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1ce2:	681b      	ldr	r3, [r3, #0]
    1ce4:	3b10      	subs	r3, #16
    1ce6:	4618      	mov	r0, r3
    1ce8:	f7fe fd36 	bl	758 <NVIC_DisableIRQ>
  }
    1cec:	bf00      	nop
    1cee:	46bd      	mov	sp, r7
    1cf0:	bd80      	pop	{r7, pc}
    1cf2:	bf00      	nop
    1cf4:	10000048 	.word	0x10000048
    1cf8:	000068f0 	.word	0x000068f0
    1cfc:	000066cc 	.word	0x000066cc
    1d00:	0000646c 	.word	0x0000646c

00001d04 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1d04:	b480      	push	{r7}
    1d06:	b083      	sub	sp, #12
    1d08:	af00      	add	r7, sp, #0
    1d0a:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1d0c:	2340      	movs	r3, #64	; 0x40
    1d0e:	4618      	mov	r0, r3
    1d10:	370c      	adds	r7, #12
    1d12:	46bd      	mov	sp, r7
    1d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d18:	4770      	bx	lr
    1d1a:	Address 0x0000000000001d1a is out of bounds.


00001d1c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b084      	sub	sp, #16
    1d20:	af00      	add	r7, sp, #0
    1d22:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	4618      	mov	r0, r3
    1d28:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d2c:	461a      	mov	r2, r3
    1d2e:	2100      	movs	r1, #0
    1d30:	f004 f949 	bl	5fc6 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d34:	2300      	movs	r3, #0
    1d36:	60fb      	str	r3, [r7, #12]
    1d38:	68fb      	ldr	r3, [r7, #12]
    1d3a:	2b0f      	cmp	r3, #15
    1d3c:	d808      	bhi.n	1d50 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	68fa      	ldr	r2, [r7, #12]
    1d42:	4911      	ldr	r1, [pc, #68]	; (1d88 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	3301      	adds	r3, #1
    1d4c:	60fb      	str	r3, [r7, #12]
    1d4e:	e7f3      	b.n	1d38 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1d50:	2310      	movs	r3, #16
    1d52:	60bb      	str	r3, [r7, #8]
    1d54:	6878      	ldr	r0, [r7, #4]
    1d56:	f7ff ffd5 	bl	1d04 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1d5a:	4602      	mov	r2, r0
    1d5c:	68bb      	ldr	r3, [r7, #8]
    1d5e:	4293      	cmp	r3, r2
    1d60:	bf34      	ite	cc
    1d62:	2301      	movcc	r3, #1
    1d64:	2300      	movcs	r3, #0
    1d66:	b2db      	uxtb	r3, r3
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d008      	beq.n	1d7e <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	68ba      	ldr	r2, [r7, #8]
    1d70:	4906      	ldr	r1, [pc, #24]	; (1d8c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1d76:	68bb      	ldr	r3, [r7, #8]
    1d78:	3301      	adds	r3, #1
    1d7a:	60bb      	str	r3, [r7, #8]
    1d7c:	e7ea      	b.n	1d54 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1d7e:	bf00      	nop
    }
    1d80:	6878      	ldr	r0, [r7, #4]
    1d82:	3710      	adds	r7, #16
    1d84:	46bd      	mov	sp, r7
    1d86:	bd80      	pop	{r7, pc}
    1d88:	00001cb9 	.word	0x00001cb9
    1d8c:	00001cc9 	.word	0x00001cc9

00001d90 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	4618      	mov	r0, r3
    1d9c:	f000 f804 	bl	1da8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
    1da0:	6878      	ldr	r0, [r7, #4]
    1da2:	3708      	adds	r7, #8
    1da4:	46bd      	mov	sp, r7
    1da6:	bd80      	pop	{r7, pc}

00001da8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    1da8:	b580      	push	{r7, lr}
    1daa:	b082      	sub	sp, #8
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    1db0:	4903      	ldr	r1, [pc, #12]	; (1dc0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
    1db2:	6878      	ldr	r0, [r7, #4]
    1db4:	f7fe fdd2 	bl	95c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    1db8:	6878      	ldr	r0, [r7, #4]
    1dba:	3708      	adds	r7, #8
    1dbc:	46bd      	mov	sp, r7
    1dbe:	bd80      	pop	{r7, pc}
    1dc0:	00006070 	.word	0x00006070

00001dc4 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
    1dcc:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	6839      	ldr	r1, [r7, #0]
    1dd2:	4618      	mov	r0, r3
    1dd4:	f000 f804 	bl	1de0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    1dd8:	6878      	ldr	r0, [r7, #4]
    1dda:	3708      	adds	r7, #8
    1ddc:	46bd      	mov	sp, r7
    1dde:	bd80      	pop	{r7, pc}

00001de0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    1de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1de2:	b085      	sub	sp, #20
    1de4:	af00      	add	r7, sp, #0
    1de6:	6078      	str	r0, [r7, #4]
    1de8:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    1dea:	6838      	ldr	r0, [r7, #0]
    1dec:	f7fe fdc7 	bl	97e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    1df0:	4605      	mov	r5, r0
    1df2:	460e      	mov	r6, r1
    1df4:	462b      	mov	r3, r5
    1df6:	4634      	mov	r4, r6
    1df8:	f04f 0100 	mov.w	r1, #0
    1dfc:	f04f 0200 	mov.w	r2, #0
    1e00:	0162      	lsls	r2, r4, #5
    1e02:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    1e06:	0159      	lsls	r1, r3, #5
    1e08:	460b      	mov	r3, r1
    1e0a:	4614      	mov	r4, r2
    1e0c:	1b5b      	subs	r3, r3, r5
    1e0e:	eb64 0406 	sbc.w	r4, r4, r6
    1e12:	f04f 0100 	mov.w	r1, #0
    1e16:	f04f 0200 	mov.w	r2, #0
    1e1a:	00a2      	lsls	r2, r4, #2
    1e1c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    1e20:	0099      	lsls	r1, r3, #2
    1e22:	460b      	mov	r3, r1
    1e24:	4614      	mov	r4, r2
    1e26:	195b      	adds	r3, r3, r5
    1e28:	eb44 0406 	adc.w	r4, r4, r6
    1e2c:	f04f 0100 	mov.w	r1, #0
    1e30:	f04f 0200 	mov.w	r2, #0
    1e34:	00e2      	lsls	r2, r4, #3
    1e36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    1e3a:	00d9      	lsls	r1, r3, #3
    1e3c:	460b      	mov	r3, r1
    1e3e:	4614      	mov	r4, r2
    1e40:	e9c7 3402 	strd	r3, r4, [r7, #8]
    1e44:	f107 0308 	add.w	r3, r7, #8
    1e48:	4619      	mov	r1, r3
    1e4a:	6878      	ldr	r0, [r7, #4]
    1e4c:	f7fe fbea 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    1e50:	6878      	ldr	r0, [r7, #4]
    1e52:	3714      	adds	r7, #20
    1e54:	46bd      	mov	sp, r7
    1e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e58 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    1e58:	b590      	push	{r4, r7, lr}
    1e5a:	b085      	sub	sp, #20
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
    1e60:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    1e62:	f107 0308 	add.w	r3, r7, #8
    1e66:	6839      	ldr	r1, [r7, #0]
    1e68:	4618      	mov	r0, r3
    1e6a:	f7ff ffab 	bl	1dc4 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1e6e:	f107 0308 	add.w	r3, r7, #8
    1e72:	4618      	mov	r0, r3
    1e74:	f000 f80a 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1e78:	4603      	mov	r3, r0
    1e7a:	460c      	mov	r4, r1
    1e7c:	687a      	ldr	r2, [r7, #4]
    1e7e:	e9c2 3400 	strd	r3, r4, [r2]
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	4618      	mov	r0, r3
    1e86:	3714      	adds	r7, #20
    1e88:	46bd      	mov	sp, r7
    1e8a:	bd90      	pop	{r4, r7, pc}

00001e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    1e8c:	b490      	push	{r4, r7}
    1e8e:	b082      	sub	sp, #8
    1e90:	af00      	add	r7, sp, #0
    1e92:	6078      	str	r0, [r7, #4]
	{ return __r; }
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	e9d3 3400 	ldrd	r3, r4, [r3]
    1e9a:	4618      	mov	r0, r3
    1e9c:	4621      	mov	r1, r4
    1e9e:	3708      	adds	r7, #8
    1ea0:	46bd      	mov	sp, r7
    1ea2:	bc90      	pop	{r4, r7}
    1ea4:	4770      	bx	lr
    1ea6:	Address 0x0000000000001ea6 is out of bounds.


00001ea8 <main>:
#include "utility/log.hpp"
#include "utility/map.hpp"
#include "utility/time.hpp"

int main()
{
    1ea8:	b590      	push	{r4, r7, lr}
    1eaa:	b093      	sub	sp, #76	; 0x4c
    1eac:	af02      	add	r7, sp, #8
                              DefaultSystemController())
    1eae:	f7ff f95f 	bl	1170 <sjsu::lpc40xx::DefaultSystemController()>
    1eb2:	4603      	mov	r3, r0
    float f;
    uint32_t ui;
  }sen;

  // Declare peripheral objects
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    1eb4:	461a      	mov	r2, r3
    1eb6:	f107 0310 	add.w	r3, r7, #16
    1eba:	493c      	ldr	r1, [pc, #240]	; (1fac <main+0x104>)
    1ebc:	4618      	mov	r0, r3
    1ebe:	f7ff fb9b 	bl	15f8 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    1ec2:	f7ff f955 	bl	1170 <sjsu::lpc40xx::DefaultSystemController()>
    1ec6:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc4(sjsu::lpc40xx::Adc::Channel::kChannel4);
    1ec8:	461a      	mov	r2, r3
    1eca:	1d3b      	adds	r3, r7, #4
    1ecc:	4938      	ldr	r1, [pc, #224]	; (1fb0 <main+0x108>)
    1ece:	4618      	mov	r0, r3
    1ed0:	f7ff fd58 	bl	1984 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>

  adc4.Initialize();
    1ed4:	1d3b      	adds	r3, r7, #4
    1ed6:	4618      	mov	r0, r3
    1ed8:	f7ff fda6 	bl	1a28 <sjsu::lpc40xx::Adc::Initialize() const>
  //adc4.BurstMode(true);
  LOG_INFO("adc4 initialized");
    1edc:	231b      	movs	r3, #27
    1ede:	4a35      	ldr	r2, [pc, #212]	; (1fb4 <main+0x10c>)
    1ee0:	4935      	ldr	r1, [pc, #212]	; (1fb8 <main+0x110>)
    1ee2:	4836      	ldr	r0, [pc, #216]	; (1fbc <main+0x114>)
    1ee4:	f001 ff56 	bl	3d94 <printf>
  uart2.Initialize(38400);
    1ee8:	f107 0310 	add.w	r3, r7, #16
    1eec:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    1ef0:	4618      	mov	r0, r3
    1ef2:	f7ff fb9b 	bl	162c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    1ef6:	231d      	movs	r3, #29
    1ef8:	4a2e      	ldr	r2, [pc, #184]	; (1fb4 <main+0x10c>)
    1efa:	4931      	ldr	r1, [pc, #196]	; (1fc0 <main+0x118>)
    1efc:	4831      	ldr	r0, [pc, #196]	; (1fc4 <main+0x11c>)
    1efe:	f001 ff49 	bl	3d94 <printf>
  uint32_t glove_position = 0;
    1f02:	2300      	movs	r3, #0
    1f04:	63bb      	str	r3, [r7, #56]	; 0x38

  while (true)
  {
    glove_position = adc4.Read();
    1f06:	1d3b      	adds	r3, r7, #4
    1f08:	4618      	mov	r0, r3
    1f0a:	f7ff fe1b 	bl	1b44 <sjsu::lpc40xx::Adc::Read() const>
    1f0e:	63b8      	str	r0, [r7, #56]	; 0x38
    // Map the data from the glove to proper voltages
    sen.f = sjsu::Map(glove_position, 0, 4095, 0.0f, 3.3f);
    1f10:	eddf 0a2d 	vldr	s1, [pc, #180]	; 1fc8 <main+0x120>
    1f14:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 1fcc <main+0x124>
    1f18:	f640 72ff 	movw	r2, #4095	; 0xfff
    1f1c:	2100      	movs	r1, #0
    1f1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1f20:	f000 f9dc 	bl	22dc <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>
    1f24:	eef0 7a40 	vmov.f32	s15, s0
    1f28:	edc7 7a07 	vstr	s15, [r7, #28]
    // Send a float (Glove data) over UART
    for(size_t i = 24; i > 0; i -= 8)
    1f2c:	2318      	movs	r3, #24
    1f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f32:	2b00      	cmp	r3, #0
    1f34:	d011      	beq.n	1f5a <main+0xb2>
    {
      uint8_t sendval = sen.ui >> i; 
    1f36:	69fa      	ldr	r2, [r7, #28]
    1f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f3a:	fa22 f303 	lsr.w	r3, r2, r3
    1f3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      uart2.Write(sendval);
    1f42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
    1f46:	f107 0310 	add.w	r3, r7, #16
    1f4a:	4611      	mov	r1, r2
    1f4c:	4618      	mov	r0, r3
    1f4e:	f7ff f919 	bl	1184 <sjsu::Uart::Write(unsigned char) const>
    for(size_t i = 24; i > 0; i -= 8)
    1f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f54:	3b08      	subs	r3, #8
    1f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f58:	e7ea      	b.n	1f30 <main+0x88>
    }
    uart2.Write((uint8_t) sen.ui);
    1f5a:	69fb      	ldr	r3, [r7, #28]
    1f5c:	b2da      	uxtb	r2, r3
    1f5e:	f107 0310 	add.w	r3, r7, #16
    1f62:	4611      	mov	r1, r2
    1f64:	4618      	mov	r0, r3
    1f66:	f7ff f90d 	bl	1184 <sjsu::Uart::Write(unsigned char) const>
    LOG_INFO("Sent value %f over UART", sen.f);
    1f6a:	69fb      	ldr	r3, [r7, #28]
    1f6c:	4618      	mov	r0, r3
    1f6e:	f002 fd37 	bl	49e0 <__aeabi_f2d>
    1f72:	4603      	mov	r3, r0
    1f74:	460c      	mov	r4, r1
    1f76:	e9cd 3400 	strd	r3, r4, [sp]
    1f7a:	232c      	movs	r3, #44	; 0x2c
    1f7c:	4a0d      	ldr	r2, [pc, #52]	; (1fb4 <main+0x10c>)
    1f7e:	4914      	ldr	r1, [pc, #80]	; (1fd0 <main+0x128>)
    1f80:	4814      	ldr	r0, [pc, #80]	; (1fd4 <main+0x12c>)
    1f82:	f001 ff07 	bl	3d94 <printf>
    // Delay 100 ms
    sjsu::Delay(100ms);
    1f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
    1f8a:	4618      	mov	r0, r3
    1f8c:	f7ff ff00 	bl	1d90 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
    1f90:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1f94:	f107 0320 	add.w	r3, r7, #32
    1f98:	4611      	mov	r1, r2
    1f9a:	4618      	mov	r0, r3
    1f9c:	f7ff ff5c 	bl	1e58 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1fa0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    1fa4:	f7fe fbca 	bl	73c <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
    1fa8:	e7ad      	b.n	1f06 <main+0x5e>
    1faa:	bf00      	nop
    1fac:	1000000c 	.word	0x1000000c
    1fb0:	000066c0 	.word	0x000066c0
    1fb4:	0000679c 	.word	0x0000679c
    1fb8:	000066dc 	.word	0x000066dc
    1fbc:	000064ec 	.word	0x000064ec
    1fc0:	000066e8 	.word	0x000066e8
    1fc4:	00006538 	.word	0x00006538
    1fc8:	40533333 	.word	0x40533333
    1fcc:	00000000 	.word	0x00000000
    1fd0:	000066f4 	.word	0x000066f4
    1fd4:	00006584 	.word	0x00006584

00001fd8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    1fd8:	b590      	push	{r4, r7, lr}
    1fda:	b087      	sub	sp, #28
    1fdc:	af00      	add	r7, sp, #0
    1fde:	60f8      	str	r0, [r7, #12]
    1fe0:	60b9      	str	r1, [r7, #8]
    1fe2:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    1fe4:	68bb      	ldr	r3, [r7, #8]
    1fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
    1fea:	1c59      	adds	r1, r3, #1
    1fec:	f144 0200 	adc.w	r2, r4, #0
    1ff0:	68b8      	ldr	r0, [r7, #8]
    1ff2:	e9c0 1200 	strd	r1, r2, [r0]
    1ff6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    1ffa:	f107 0310 	add.w	r3, r7, #16
    1ffe:	4619      	mov	r1, r3
    2000:	68f8      	ldr	r0, [r7, #12]
    2002:	f7fe fb0f 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2006:	68f8      	ldr	r0, [r7, #12]
    2008:	371c      	adds	r7, #28
    200a:	46bd      	mov	sp, r7
    200c:	bd90      	pop	{r4, r7, pc}

0000200e <std::chrono::duration_values<long long>::max()>:
	max()
    200e:	b598      	push	{r3, r4, r7, lr}
    2010:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    2012:	f7fe f9a9 	bl	368 <std::numeric_limits<long long>::max()>
    2016:	4603      	mov	r3, r0
    2018:	460c      	mov	r4, r1
    201a:	4618      	mov	r0, r3
    201c:	4621      	mov	r1, r4
    201e:	bd98      	pop	{r3, r4, r7, pc}

00002020 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
    2020:	b590      	push	{r4, r7, lr}
    2022:	b085      	sub	sp, #20
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    2028:	f7ff fff1 	bl	200e <std::chrono::duration_values<long long>::max()>
    202c:	4603      	mov	r3, r0
    202e:	460c      	mov	r4, r1
    2030:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2034:	f107 0308 	add.w	r3, r7, #8
    2038:	4619      	mov	r1, r3
    203a:	6878      	ldr	r0, [r7, #4]
    203c:	f7fe faf2 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2040:	6878      	ldr	r0, [r7, #4]
    2042:	3714      	adds	r7, #20
    2044:	46bd      	mov	sp, r7
    2046:	bd90      	pop	{r4, r7, pc}

00002048 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	b087      	sub	sp, #28
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
    2050:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    2052:	687b      	ldr	r3, [r7, #4]
    2054:	e9d3 3400 	ldrd	r3, r4, [r3]
    2058:	e9c7 3402 	strd	r3, r4, [r7, #8]
    205c:	f107 0308 	add.w	r3, r7, #8
    2060:	4618      	mov	r0, r3
    2062:	f7ff ff13 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2066:	4605      	mov	r5, r0
    2068:	460e      	mov	r6, r1
    206a:	683b      	ldr	r3, [r7, #0]
    206c:	e9d3 3400 	ldrd	r3, r4, [r3]
    2070:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2074:	f107 0310 	add.w	r3, r7, #16
    2078:	4618      	mov	r0, r3
    207a:	f7ff ff07 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    207e:	4603      	mov	r3, r0
    2080:	460c      	mov	r4, r1
    2082:	42a6      	cmp	r6, r4
    2084:	bf06      	itte	eq
    2086:	429d      	cmpeq	r5, r3
    2088:	2301      	moveq	r3, #1
    208a:	2300      	movne	r3, #0
    208c:	b2db      	uxtb	r3, r3
      }
    208e:	4618      	mov	r0, r3
    2090:	371c      	adds	r7, #28
    2092:	46bd      	mov	sp, r7
    2094:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002096 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2096:	b580      	push	{r7, lr}
    2098:	b084      	sub	sp, #16
    209a:	af00      	add	r7, sp, #0
    209c:	60f8      	str	r0, [r7, #12]
    209e:	460b      	mov	r3, r1
    20a0:	80ba      	strh	r2, [r7, #4]
    20a2:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    20a4:	793b      	ldrb	r3, [r7, #4]
    20a6:	461a      	mov	r2, r3
    20a8:	797b      	ldrb	r3, [r7, #5]
    20aa:	7af9      	ldrb	r1, [r7, #11]
    20ac:	68f8      	ldr	r0, [r7, #12]
    20ae:	f000 f9b7 	bl	2420 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    20b2:	4603      	mov	r3, r0
}
    20b4:	4618      	mov	r0, r3
    20b6:	3710      	adds	r7, #16
    20b8:	46bd      	mov	sp, r7
    20ba:	bd80      	pop	{r7, pc}

000020bc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    20bc:	b580      	push	{r7, lr}
    20be:	b084      	sub	sp, #16
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
    20c4:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	4618      	mov	r0, r3
    20ca:	f7fe fe43 	bl	d54 <units::linear_scale<float>::operator()() const>
    20ce:	eef0 6a40 	vmov.f32	s13, s0
    20d2:	683b      	ldr	r3, [r7, #0]
    20d4:	ee07 3a90 	vmov	s15, r3
    20d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    20e0:	f107 030c 	add.w	r3, r7, #12
    20e4:	eeb0 0a47 	vmov.f32	s0, s14
    20e8:	4618      	mov	r0, r3
    20ea:	f7fe f99f 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    20ee:	68fb      	ldr	r3, [r7, #12]
	}
    20f0:	4618      	mov	r0, r3
    20f2:	3710      	adds	r7, #16
    20f4:	46bd      	mov	sp, r7
    20f6:	bd80      	pop	{r7, pc}

000020f8 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    20f8:	b580      	push	{r7, lr}
    20fa:	ed2d 8b02 	vpush	{d8}
    20fe:	b082      	sub	sp, #8
    2100:	af00      	add	r7, sp, #0
    2102:	6078      	str	r0, [r7, #4]
    2104:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	ed93 8a00 	vldr	s16, [r3]
    210c:	683b      	ldr	r3, [r7, #0]
    210e:	4618      	mov	r0, r3
    2110:	f7fe f96c 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2114:	eef0 7a40 	vmov.f32	s15, s0
    2118:	eeb4 8ae7 	vcmpe.f32	s16, s15
    211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2120:	bfcc      	ite	gt
    2122:	2301      	movgt	r3, #1
    2124:	2300      	movle	r3, #0
    2126:	b2db      	uxtb	r3, r3
		}
    2128:	4618      	mov	r0, r3
    212a:	3708      	adds	r7, #8
    212c:	46bd      	mov	sp, r7
    212e:	ecbd 8b02 	vpop	{d8}
    2132:	bd80      	pop	{r7, pc}

00002134 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    2134:	b580      	push	{r7, lr}
    2136:	b082      	sub	sp, #8
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
    213c:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    213e:	683b      	ldr	r3, [r7, #0]
    2140:	4618      	mov	r0, r3
    2142:	f7fe fc29 	bl	998 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2146:	eef0 7a40 	vmov.f32	s15, s0
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    2150:	687b      	ldr	r3, [r7, #4]
		}
    2152:	4618      	mov	r0, r3
    2154:	3708      	adds	r7, #8
    2156:	46bd      	mov	sp, r7
    2158:	bd80      	pop	{r7, pc}

0000215a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    215a:	b480      	push	{r7}
    215c:	b083      	sub	sp, #12
    215e:	af00      	add	r7, sp, #0
    2160:	6078      	str	r0, [r7, #4]
    2162:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    2164:	2201      	movs	r2, #1
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	fa02 f303 	lsl.w	r3, r2, r3
    216c:	461a      	mov	r2, r3
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	4313      	orrs	r3, r2
}
    2172:	4618      	mov	r0, r3
    2174:	370c      	adds	r7, #12
    2176:	46bd      	mov	sp, r7
    2178:	f85d 7b04 	ldr.w	r7, [sp], #4
    217c:	4770      	bx	lr

0000217e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    217e:	b480      	push	{r7}
    2180:	b083      	sub	sp, #12
    2182:	af00      	add	r7, sp, #0
    2184:	6078      	str	r0, [r7, #4]
    2186:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    2188:	2201      	movs	r2, #1
    218a:	683b      	ldr	r3, [r7, #0]
    218c:	fa02 f303 	lsl.w	r3, r2, r3
    2190:	43db      	mvns	r3, r3
    2192:	461a      	mov	r2, r3
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	4013      	ands	r3, r2
}
    2198:	4618      	mov	r0, r3
    219a:	370c      	adds	r7, #12
    219c:	46bd      	mov	sp, r7
    219e:	f85d 7b04 	ldr.w	r7, [sp], #4
    21a2:	4770      	bx	lr

000021a4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    21a4:	b580      	push	{r7, lr}
    21a6:	b084      	sub	sp, #16
    21a8:	af00      	add	r7, sp, #0
    21aa:	60f8      	str	r0, [r7, #12]
    21ac:	60b9      	str	r1, [r7, #8]
    21ae:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    21b0:	793b      	ldrb	r3, [r7, #4]
    21b2:	461a      	mov	r2, r3
    21b4:	797b      	ldrb	r3, [r7, #5]
    21b6:	68b9      	ldr	r1, [r7, #8]
    21b8:	68f8      	ldr	r0, [r7, #12]
    21ba:	f000 f95e 	bl	247a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    21be:	4603      	mov	r3, r0
}
    21c0:	4618      	mov	r0, r3
    21c2:	3710      	adds	r7, #16
    21c4:	46bd      	mov	sp, r7
    21c6:	bd80      	pop	{r7, pc}

000021c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    21c8:	b580      	push	{r7, lr}
    21ca:	b084      	sub	sp, #16
    21cc:	af00      	add	r7, sp, #0
    21ce:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	4618      	mov	r0, r3
    21d4:	f7fe fdbe 	bl	d54 <units::linear_scale<float>::operator()() const>
    21d8:	eef0 7a40 	vmov.f32	s15, s0
    21dc:	edc7 7a03 	vstr	s15, [r7, #12]
    21e0:	f107 030c 	add.w	r3, r7, #12
    21e4:	4618      	mov	r0, r3
    21e6:	f000 f974 	bl	24d2 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    21ea:	eef0 7a40 	vmov.f32	s15, s0
    21ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    21f2:	ee17 3a90 	vmov	r3, s15
		}
    21f6:	4618      	mov	r0, r3
    21f8:	3710      	adds	r7, #16
    21fa:	46bd      	mov	sp, r7
    21fc:	bd80      	pop	{r7, pc}

000021fe <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    21fe:	b480      	push	{r7}
    2200:	b083      	sub	sp, #12
    2202:	af00      	add	r7, sp, #0
    2204:	6078      	str	r0, [r7, #4]
    2206:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    2208:	2201      	movs	r2, #1
    220a:	683b      	ldr	r3, [r7, #0]
    220c:	fa02 f303 	lsl.w	r3, r2, r3
    2210:	461a      	mov	r2, r3
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	4013      	ands	r3, r2
    2216:	2b00      	cmp	r3, #0
    2218:	bf14      	ite	ne
    221a:	2301      	movne	r3, #1
    221c:	2300      	moveq	r3, #0
    221e:	b2db      	uxtb	r3, r3
}
    2220:	4618      	mov	r0, r3
    2222:	370c      	adds	r7, #12
    2224:	46bd      	mov	sp, r7
    2226:	f85d 7b04 	ldr.w	r7, [sp], #4
    222a:	4770      	bx	lr

0000222c <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    222c:	b480      	push	{r7}
    222e:	b083      	sub	sp, #12
    2230:	af00      	add	r7, sp, #0
    2232:	4603      	mov	r3, r0
    2234:	6039      	str	r1, [r7, #0]
    2236:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    2238:	79fa      	ldrb	r2, [r7, #7]
    223a:	683b      	ldr	r3, [r7, #0]
    223c:	fa42 f303 	asr.w	r3, r2, r3
    2240:	f003 0301 	and.w	r3, r3, #1
    2244:	2b00      	cmp	r3, #0
    2246:	bf14      	ite	ne
    2248:	2301      	movne	r3, #1
    224a:	2300      	moveq	r3, #0
    224c:	b2db      	uxtb	r3, r3
}
    224e:	4618      	mov	r0, r3
    2250:	370c      	adds	r7, #12
    2252:	46bd      	mov	sp, r7
    2254:	f85d 7b04 	ldr.w	r7, [sp], #4
    2258:	4770      	bx	lr

0000225a <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    225a:	b580      	push	{r7, lr}
    225c:	b082      	sub	sp, #8
    225e:	af00      	add	r7, sp, #0
    2260:	6078      	str	r0, [r7, #4]
    2262:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    2264:	783b      	ldrb	r3, [r7, #0]
    2266:	4619      	mov	r1, r3
    2268:	6878      	ldr	r0, [r7, #4]
    226a:	f7ff ffc8 	bl	21fe <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    226e:	4603      	mov	r3, r0
}
    2270:	4618      	mov	r0, r3
    2272:	3708      	adds	r7, #8
    2274:	46bd      	mov	sp, r7
    2276:	bd80      	pop	{r7, pc}

00002278 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    2278:	b580      	push	{r7, lr}
    227a:	b082      	sub	sp, #8
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
    2280:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    2282:	783b      	ldrb	r3, [r7, #0]
    2284:	4619      	mov	r1, r3
    2286:	6878      	ldr	r0, [r7, #4]
    2288:	f7ff ff67 	bl	215a <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    228c:	4603      	mov	r3, r0
}
    228e:	4618      	mov	r0, r3
    2290:	3708      	adds	r7, #8
    2292:	46bd      	mov	sp, r7
    2294:	bd80      	pop	{r7, pc}

00002296 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    2296:	b580      	push	{r7, lr}
    2298:	b082      	sub	sp, #8
    229a:	af00      	add	r7, sp, #0
    229c:	6078      	str	r0, [r7, #4]
    229e:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    22a0:	783b      	ldrb	r3, [r7, #0]
    22a2:	4619      	mov	r1, r3
    22a4:	787b      	ldrb	r3, [r7, #1]
    22a6:	461a      	mov	r2, r3
    22a8:	6878      	ldr	r0, [r7, #4]
    22aa:	f000 f920 	bl	24ee <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    22ae:	4603      	mov	r3, r0
}
    22b0:	4618      	mov	r0, r3
    22b2:	3708      	adds	r7, #8
    22b4:	46bd      	mov	sp, r7
    22b6:	bd80      	pop	{r7, pc}

000022b8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    22b8:	b580      	push	{r7, lr}
    22ba:	b084      	sub	sp, #16
    22bc:	af00      	add	r7, sp, #0
    22be:	60f8      	str	r0, [r7, #12]
    22c0:	60b9      	str	r1, [r7, #8]
    22c2:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    22c4:	793b      	ldrb	r3, [r7, #4]
    22c6:	461a      	mov	r2, r3
    22c8:	797b      	ldrb	r3, [r7, #5]
    22ca:	68b9      	ldr	r1, [r7, #8]
    22cc:	68f8      	ldr	r0, [r7, #12]
    22ce:	f000 f92c 	bl	252a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    22d2:	4603      	mov	r3, r0
}
    22d4:	4618      	mov	r0, r3
    22d6:	3710      	adds	r7, #16
    22d8:	46bd      	mov	sp, r7
    22da:	bd80      	pop	{r7, pc}

000022dc <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>:
/// @param current_minimum current minimum value that the value can reach
/// @param current_maximum current maximum value that the value can reach
/// @param new_minimum the new minimum value to scale and shift the old value to
/// @param new_maximum the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    22dc:	b480      	push	{r7}
    22de:	b08f      	sub	sp, #60	; 0x3c
    22e0:	af00      	add	r7, sp, #0
    22e2:	6178      	str	r0, [r7, #20]
    22e4:	6139      	str	r1, [r7, #16]
    22e6:	60fa      	str	r2, [r7, #12]
    22e8:	ed87 0a02 	vstr	s0, [r7, #8]
    22ec:	edc7 0a01 	vstr	s1, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    22f0:	697b      	ldr	r3, [r7, #20]
    22f2:	ee07 3a90 	vmov	s15, r3
    22f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22fa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    22fe:	693b      	ldr	r3, [r7, #16]
    2300:	ee07 3a90 	vmov	s15, r3
    2304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2308:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    230c:	68fb      	ldr	r3, [r7, #12]
    230e:	ee07 3a90 	vmov	s15, r3
    2312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2316:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    231a:	68bb      	ldr	r3, [r7, #8]
    231c:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    2322:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    2326:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    232a:	ee77 6a67 	vsub.f32	s13, s14, s15
    232e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    2332:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    2336:	ee37 7a67 	vsub.f32	s14, s14, s15
    233a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    233e:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    2342:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    2346:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    234a:	ee37 7a67 	vsub.f32	s14, s14, s15
    234e:	edd7 7a08 	vldr	s15, [r7, #32]
    2352:	ee67 7a27 	vmul.f32	s15, s14, s15
    2356:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    235a:	ee77 7a27 	vadd.f32	s15, s14, s15
    235e:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    2362:	69fb      	ldr	r3, [r7, #28]
    2364:	ee07 3a90 	vmov	s15, r3
};
    2368:	eeb0 0a67 	vmov.f32	s0, s15
    236c:	373c      	adds	r7, #60	; 0x3c
    236e:	46bd      	mov	sp, r7
    2370:	f85d 7b04 	ldr.w	r7, [sp], #4
    2374:	4770      	bx	lr

00002376 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    2376:	b5f0      	push	{r4, r5, r6, r7, lr}
    2378:	b08b      	sub	sp, #44	; 0x2c
    237a:	af00      	add	r7, sp, #0
    237c:	60f8      	str	r0, [r7, #12]
    237e:	60b9      	str	r1, [r7, #8]
    2380:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    2382:	68bb      	ldr	r3, [r7, #8]
    2384:	e9d3 3400 	ldrd	r3, r4, [r3]
    2388:	e9c7 3406 	strd	r3, r4, [r7, #24]
    238c:	f107 0318 	add.w	r3, r7, #24
    2390:	4618      	mov	r0, r3
    2392:	f7ff fd7b 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2396:	4605      	mov	r5, r0
    2398:	460e      	mov	r6, r1
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	e9d3 3400 	ldrd	r3, r4, [r3]
    23a0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    23a4:	f107 0320 	add.w	r3, r7, #32
    23a8:	4618      	mov	r0, r3
    23aa:	f7ff fd6f 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    23ae:	460a      	mov	r2, r1
    23b0:	4601      	mov	r1, r0
    23b2:	194b      	adds	r3, r1, r5
    23b4:	eb42 0406 	adc.w	r4, r2, r6
    23b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    23bc:	f107 0310 	add.w	r3, r7, #16
    23c0:	4619      	mov	r1, r3
    23c2:	68f8      	ldr	r0, [r7, #12]
    23c4:	f7fe f92e 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    23c8:	68f8      	ldr	r0, [r7, #12]
    23ca:	372c      	adds	r7, #44	; 0x2c
    23cc:	46bd      	mov	sp, r7
    23ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000023d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    23d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d2:	b087      	sub	sp, #28
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
    23d8:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	e9d3 3400 	ldrd	r3, r4, [r3]
    23e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
    23e4:	f107 0308 	add.w	r3, r7, #8
    23e8:	4618      	mov	r0, r3
    23ea:	f7ff fd4f 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    23ee:	4605      	mov	r5, r0
    23f0:	460e      	mov	r6, r1
    23f2:	683b      	ldr	r3, [r7, #0]
    23f4:	e9d3 3400 	ldrd	r3, r4, [r3]
    23f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    23fc:	f107 0310 	add.w	r3, r7, #16
    2400:	4618      	mov	r0, r3
    2402:	f7ff fd43 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2406:	4603      	mov	r3, r0
    2408:	460c      	mov	r4, r1
    240a:	429d      	cmp	r5, r3
    240c:	eb76 0304 	sbcs.w	r3, r6, r4
    2410:	bfb4      	ite	lt
    2412:	2301      	movlt	r3, #1
    2414:	2300      	movge	r3, #0
    2416:	b2db      	uxtb	r3, r3
      }
    2418:	4618      	mov	r0, r3
    241a:	371c      	adds	r7, #28
    241c:	46bd      	mov	sp, r7
    241e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002420 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2420:	b480      	push	{r7}
    2422:	b089      	sub	sp, #36	; 0x24
    2424:	af00      	add	r7, sp, #0
    2426:	60f8      	str	r0, [r7, #12]
    2428:	607a      	str	r2, [r7, #4]
    242a:	603b      	str	r3, [r7, #0]
    242c:	460b      	mov	r3, r1
    242e:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2434:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2436:	2320      	movs	r3, #32
    2438:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	f1c3 0320 	rsb	r3, r3, #32
    2440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2444:	fa22 f303 	lsr.w	r3, r2, r3
    2448:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    244a:	697a      	ldr	r2, [r7, #20]
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	fa02 f303 	lsl.w	r3, r2, r3
    2452:	43db      	mvns	r3, r3
    2454:	68fa      	ldr	r2, [r7, #12]
    2456:	4013      	ands	r3, r2
    2458:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    245a:	7afa      	ldrb	r2, [r7, #11]
    245c:	697b      	ldr	r3, [r7, #20]
    245e:	401a      	ands	r2, r3
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	fa02 f303 	lsl.w	r3, r2, r3
    2466:	68fa      	ldr	r2, [r7, #12]
    2468:	4313      	orrs	r3, r2
    246a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    246c:	68fb      	ldr	r3, [r7, #12]
}
    246e:	4618      	mov	r0, r3
    2470:	3724      	adds	r7, #36	; 0x24
    2472:	46bd      	mov	sp, r7
    2474:	f85d 7b04 	ldr.w	r7, [sp], #4
    2478:	4770      	bx	lr

0000247a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    247a:	b480      	push	{r7}
    247c:	b089      	sub	sp, #36	; 0x24
    247e:	af00      	add	r7, sp, #0
    2480:	60f8      	str	r0, [r7, #12]
    2482:	60b9      	str	r1, [r7, #8]
    2484:	607a      	str	r2, [r7, #4]
    2486:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    248c:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    248e:	2320      	movs	r3, #32
    2490:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2492:	683b      	ldr	r3, [r7, #0]
    2494:	f1c3 0320 	rsb	r3, r3, #32
    2498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    249c:	fa22 f303 	lsr.w	r3, r2, r3
    24a0:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    24a2:	697a      	ldr	r2, [r7, #20]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	fa02 f303 	lsl.w	r3, r2, r3
    24aa:	43db      	mvns	r3, r3
    24ac:	68fa      	ldr	r2, [r7, #12]
    24ae:	4013      	ands	r3, r2
    24b0:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    24b2:	68ba      	ldr	r2, [r7, #8]
    24b4:	697b      	ldr	r3, [r7, #20]
    24b6:	401a      	ands	r2, r3
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	fa02 f303 	lsl.w	r3, r2, r3
    24be:	68fa      	ldr	r2, [r7, #12]
    24c0:	4313      	orrs	r3, r2
    24c2:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    24c4:	68fb      	ldr	r3, [r7, #12]
}
    24c6:	4618      	mov	r0, r3
    24c8:	3724      	adds	r7, #36	; 0x24
    24ca:	46bd      	mov	sp, r7
    24cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    24d0:	4770      	bx	lr

000024d2 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    24d2:	b580      	push	{r7, lr}
    24d4:	b086      	sub	sp, #24
    24d6:	af00      	add	r7, sp, #0
    24d8:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    24da:	6878      	ldr	r0, [r7, #4]
    24dc:	f000 f851 	bl	2582 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    24e0:	eef0 7a40 	vmov.f32	s15, s0
	}
    24e4:	eeb0 0a67 	vmov.f32	s0, s15
    24e8:	3718      	adds	r7, #24
    24ea:	46bd      	mov	sp, r7
    24ec:	bd80      	pop	{r7, pc}

000024ee <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    24ee:	b480      	push	{r7}
    24f0:	b089      	sub	sp, #36	; 0x24
    24f2:	af00      	add	r7, sp, #0
    24f4:	60f8      	str	r0, [r7, #12]
    24f6:	60b9      	str	r1, [r7, #8]
    24f8:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    24fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24fe:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2500:	2320      	movs	r3, #32
    2502:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	f1c3 0320 	rsb	r3, r3, #32
    250a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    250e:	fa22 f303 	lsr.w	r3, r2, r3
    2512:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    2514:	68fa      	ldr	r2, [r7, #12]
    2516:	68bb      	ldr	r3, [r7, #8]
    2518:	40da      	lsrs	r2, r3
    251a:	697b      	ldr	r3, [r7, #20]
    251c:	4013      	ands	r3, r2
}
    251e:	4618      	mov	r0, r3
    2520:	3724      	adds	r7, #36	; 0x24
    2522:	46bd      	mov	sp, r7
    2524:	f85d 7b04 	ldr.w	r7, [sp], #4
    2528:	4770      	bx	lr

0000252a <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    252a:	b480      	push	{r7}
    252c:	b089      	sub	sp, #36	; 0x24
    252e:	af00      	add	r7, sp, #0
    2530:	60f8      	str	r0, [r7, #12]
    2532:	60b9      	str	r1, [r7, #8]
    2534:	607a      	str	r2, [r7, #4]
    2536:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    253c:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    253e:	2320      	movs	r3, #32
    2540:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2542:	683b      	ldr	r3, [r7, #0]
    2544:	f1c3 0320 	rsb	r3, r3, #32
    2548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    254c:	fa22 f303 	lsr.w	r3, r2, r3
    2550:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2552:	697a      	ldr	r2, [r7, #20]
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	fa02 f303 	lsl.w	r3, r2, r3
    255a:	43db      	mvns	r3, r3
    255c:	68fa      	ldr	r2, [r7, #12]
    255e:	4013      	ands	r3, r2
    2560:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2562:	68ba      	ldr	r2, [r7, #8]
    2564:	697b      	ldr	r3, [r7, #20]
    2566:	401a      	ands	r2, r3
    2568:	687b      	ldr	r3, [r7, #4]
    256a:	fa02 f303 	lsl.w	r3, r2, r3
    256e:	68fa      	ldr	r2, [r7, #12]
    2570:	4313      	orrs	r3, r2
    2572:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2574:	68fb      	ldr	r3, [r7, #12]
}
    2576:	4618      	mov	r0, r3
    2578:	3724      	adds	r7, #36	; 0x24
    257a:	46bd      	mov	sp, r7
    257c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2580:	4770      	bx	lr

00002582 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2582:	b480      	push	{r7}
    2584:	b085      	sub	sp, #20
    2586:	af00      	add	r7, sp, #0
    2588:	60f8      	str	r0, [r7, #12]
    258a:	7239      	strb	r1, [r7, #8]
    258c:	713a      	strb	r2, [r7, #4]
    258e:	703b      	strb	r3, [r7, #0]
			return value;
    2590:	68fb      	ldr	r3, [r7, #12]
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	ee07 3a90 	vmov	s15, r3
		}
    2598:	eeb0 0a67 	vmov.f32	s0, s15
    259c:	3714      	adds	r7, #20
    259e:	46bd      	mov	sp, r7
    25a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a4:	4770      	bx	lr
    25a6:	Address 0x00000000000025a6 is out of bounds.


000025a8 <__static_initialization_and_destruction_0(int, int)>:
  return 0;
}
    25a8:	b580      	push	{r7, lr}
    25aa:	b082      	sub	sp, #8
    25ac:	af00      	add	r7, sp, #0
    25ae:	6078      	str	r0, [r7, #4]
    25b0:	6039      	str	r1, [r7, #0]
    25b2:	687b      	ldr	r3, [r7, #4]
    25b4:	2b01      	cmp	r3, #1
    25b6:	f040 80c4 	bne.w	2742 <__static_initialization_and_destruction_0(int, int)+0x19a>
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    25c0:	4293      	cmp	r3, r2
    25c2:	f040 80be 	bne.w	2742 <__static_initialization_and_destruction_0(int, int)+0x19a>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    25c6:	4b61      	ldr	r3, [pc, #388]	; (274c <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	f003 0301 	and.w	r3, r3, #1
    25ce:	2b00      	cmp	r3, #0
    25d0:	d105      	bne.n	25de <__static_initialization_and_destruction_0(int, int)+0x36>
    25d2:	4b5e      	ldr	r3, [pc, #376]	; (274c <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    25d4:	2201      	movs	r2, #1
    25d6:	601a      	str	r2, [r3, #0]
    25d8:	4a5d      	ldr	r2, [pc, #372]	; (2750 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    25da:	4b5e      	ldr	r3, [pc, #376]	; (2754 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    25dc:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    25de:	4b5e      	ldr	r3, [pc, #376]	; (2758 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	f003 0301 	and.w	r3, r3, #1
    25e6:	2b00      	cmp	r3, #0
    25e8:	d105      	bne.n	25f6 <__static_initialization_and_destruction_0(int, int)+0x4e>
    25ea:	4b5b      	ldr	r3, [pc, #364]	; (2758 <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    25ec:	2201      	movs	r2, #1
    25ee:	601a      	str	r2, [r3, #0]
    25f0:	4a5a      	ldr	r2, [pc, #360]	; (275c <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    25f2:	4b5b      	ldr	r3, [pc, #364]	; (2760 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    25f4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    25f6:	4b5b      	ldr	r3, [pc, #364]	; (2764 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	f003 0301 	and.w	r3, r3, #1
    25fe:	2b00      	cmp	r3, #0
    2600:	d105      	bne.n	260e <__static_initialization_and_destruction_0(int, int)+0x66>
    2602:	4b58      	ldr	r3, [pc, #352]	; (2764 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    2604:	2201      	movs	r2, #1
    2606:	601a      	str	r2, [r3, #0]
    };
    2608:	4a57      	ldr	r2, [pc, #348]	; (2768 <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    260a:	4b58      	ldr	r3, [pc, #352]	; (276c <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    260c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    260e:	4b58      	ldr	r3, [pc, #352]	; (2770 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2610:	681b      	ldr	r3, [r3, #0]
    2612:	f003 0301 	and.w	r3, r3, #1
    2616:	2b00      	cmp	r3, #0
    2618:	d105      	bne.n	2626 <__static_initialization_and_destruction_0(int, int)+0x7e>
    261a:	4b55      	ldr	r3, [pc, #340]	; (2770 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    261c:	2201      	movs	r2, #1
    261e:	601a      	str	r2, [r3, #0]
    };
    2620:	4a54      	ldr	r2, [pc, #336]	; (2774 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    2622:	4b55      	ldr	r3, [pc, #340]	; (2778 <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    2624:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    2626:	4b55      	ldr	r3, [pc, #340]	; (277c <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	f003 0301 	and.w	r3, r3, #1
    262e:	2b00      	cmp	r3, #0
    2630:	d105      	bne.n	263e <__static_initialization_and_destruction_0(int, int)+0x96>
    2632:	4b52      	ldr	r3, [pc, #328]	; (277c <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2634:	2201      	movs	r2, #1
    2636:	601a      	str	r2, [r3, #0]
    };
    2638:	4a51      	ldr	r2, [pc, #324]	; (2780 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    263a:	4b52      	ldr	r3, [pc, #328]	; (2784 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    263c:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    263e:	4b52      	ldr	r3, [pc, #328]	; (2788 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2640:	681b      	ldr	r3, [r3, #0]
    2642:	f003 0301 	and.w	r3, r3, #1
    2646:	2b00      	cmp	r3, #0
    2648:	d105      	bne.n	2656 <__static_initialization_and_destruction_0(int, int)+0xae>
    264a:	4b4f      	ldr	r3, [pc, #316]	; (2788 <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    264c:	2201      	movs	r2, #1
    264e:	601a      	str	r2, [r3, #0]
    2650:	4a4e      	ldr	r2, [pc, #312]	; (278c <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    2652:	4b4f      	ldr	r3, [pc, #316]	; (2790 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    2654:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    2656:	4b4f      	ldr	r3, [pc, #316]	; (2794 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	f003 0301 	and.w	r3, r3, #1
    265e:	2b00      	cmp	r3, #0
    2660:	d106      	bne.n	2670 <__static_initialization_and_destruction_0(int, int)+0xc8>
    2662:	4b4c      	ldr	r3, [pc, #304]	; (2794 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2664:	2201      	movs	r2, #1
    2666:	601a      	str	r2, [r3, #0]
    2668:	4b4b      	ldr	r3, [pc, #300]	; (2798 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    266a:	4618      	mov	r0, r3
    266c:	f7ff fb56 	bl	1d1c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    2670:	4b4a      	ldr	r3, [pc, #296]	; (279c <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	f003 0301 	and.w	r3, r3, #1
    2678:	2b00      	cmp	r3, #0
    267a:	d114      	bne.n	26a6 <__static_initialization_and_destruction_0(int, int)+0xfe>
    267c:	4b47      	ldr	r3, [pc, #284]	; (279c <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    267e:	2201      	movs	r2, #1
    2680:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    2682:	4a47      	ldr	r2, [pc, #284]	; (27a0 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    2684:	4b47      	ldr	r3, [pc, #284]	; (27a4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2686:	601a      	str	r2, [r3, #0]
    2688:	4a47      	ldr	r2, [pc, #284]	; (27a8 <__static_initialization_and_destruction_0(int, int)+0x200>)
    268a:	4b46      	ldr	r3, [pc, #280]	; (27a4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    268c:	605a      	str	r2, [r3, #4]
    268e:	4a47      	ldr	r2, [pc, #284]	; (27ac <__static_initialization_and_destruction_0(int, int)+0x204>)
    2690:	4b44      	ldr	r3, [pc, #272]	; (27a4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2692:	609a      	str	r2, [r3, #8]
    2694:	4a46      	ldr	r2, [pc, #280]	; (27b0 <__static_initialization_and_destruction_0(int, int)+0x208>)
    2696:	4b43      	ldr	r3, [pc, #268]	; (27a4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    2698:	60da      	str	r2, [r3, #12]
    269a:	4a46      	ldr	r2, [pc, #280]	; (27b4 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    269c:	4b41      	ldr	r3, [pc, #260]	; (27a4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    269e:	611a      	str	r2, [r3, #16]
    26a0:	4a45      	ldr	r2, [pc, #276]	; (27b8 <__static_initialization_and_destruction_0(int, int)+0x210>)
    26a2:	4b40      	ldr	r3, [pc, #256]	; (27a4 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    26a4:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    26a6:	4b45      	ldr	r3, [pc, #276]	; (27bc <__static_initialization_and_destruction_0(int, int)+0x214>)
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	f003 0301 	and.w	r3, r3, #1
    26ae:	2b00      	cmp	r3, #0
    26b0:	d122      	bne.n	26f8 <__static_initialization_and_destruction_0(int, int)+0x150>
    26b2:	4b42      	ldr	r3, [pc, #264]	; (27bc <__static_initialization_and_destruction_0(int, int)+0x214>)
    26b4:	2201      	movs	r2, #1
    26b6:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26b8:	4b41      	ldr	r3, [pc, #260]	; (27c0 <__static_initialization_and_destruction_0(int, int)+0x218>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    26ba:	4a42      	ldr	r2, [pc, #264]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26bc:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26be:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    26c0:	4a40      	ldr	r2, [pc, #256]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26c2:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26c4:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    26c6:	4a3f      	ldr	r2, [pc, #252]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26c8:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26ca:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    26cc:	4a3d      	ldr	r2, [pc, #244]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26ce:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26d0:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    26d2:	4a3c      	ldr	r2, [pc, #240]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26d4:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26d6:	611a      	str	r2, [r3, #16]
    26d8:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    26da:	4a3a      	ldr	r2, [pc, #232]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26dc:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26de:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    26e0:	4a38      	ldr	r2, [pc, #224]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26e2:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26e4:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    26e6:	4a37      	ldr	r2, [pc, #220]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26e8:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26ea:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    26ec:	4a35      	ldr	r2, [pc, #212]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26ee:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    26f0:	60da      	str	r2, [r3, #12]
    26f2:	4a34      	ldr	r2, [pc, #208]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    26f4:	3234      	adds	r2, #52	; 0x34
    26f6:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    26f8:	4b33      	ldr	r3, [pc, #204]	; (27c8 <__static_initialization_and_destruction_0(int, int)+0x220>)
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	f003 0301 	and.w	r3, r3, #1
    2700:	2b00      	cmp	r3, #0
    2702:	d106      	bne.n	2712 <__static_initialization_and_destruction_0(int, int)+0x16a>
    2704:	4b30      	ldr	r3, [pc, #192]	; (27c8 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2706:	2201      	movs	r2, #1
    2708:	601a      	str	r2, [r3, #0]
    270a:	4b2e      	ldr	r3, [pc, #184]	; (27c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    270c:	461a      	mov	r2, r3
    270e:	4b2f      	ldr	r3, [pc, #188]	; (27cc <__static_initialization_and_destruction_0(int, int)+0x224>)
    2710:	601a      	str	r2, [r3, #0]
    inline static const sjsu::lpc40xx::Pin kPwmPin5 =
        sjsu::lpc40xx::Pin::CreatePin<2, 5>();

   public:
    /// Definition of the PWM 0 peripheral.
    inline static const Peripheral_t kPwm0Peripheral = {
    2712:	4b2f      	ldr	r3, [pc, #188]	; (27d0 <__static_initialization_and_destruction_0(int, int)+0x228>)
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	f003 0301 	and.w	r3, r3, #1
    271a:	2b00      	cmp	r3, #0
    271c:	d105      	bne.n	272a <__static_initialization_and_destruction_0(int, int)+0x182>
    271e:	4b2c      	ldr	r3, [pc, #176]	; (27d0 <__static_initialization_and_destruction_0(int, int)+0x228>)
    2720:	2201      	movs	r2, #1
    2722:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM0,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    2724:	4a2b      	ldr	r2, [pc, #172]	; (27d4 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2726:	4b2c      	ldr	r3, [pc, #176]	; (27d8 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2728:	601a      	str	r2, [r3, #0]
    /// Definition of the PWM 1 peripheral.
    inline static const Peripheral_t kPwm1Peripheral = {
    272a:	4b2c      	ldr	r3, [pc, #176]	; (27dc <__static_initialization_and_destruction_0(int, int)+0x234>)
    272c:	681b      	ldr	r3, [r3, #0]
    272e:	f003 0301 	and.w	r3, r3, #1
    2732:	2b00      	cmp	r3, #0
    2734:	d105      	bne.n	2742 <__static_initialization_and_destruction_0(int, int)+0x19a>
    2736:	4b29      	ldr	r3, [pc, #164]	; (27dc <__static_initialization_and_destruction_0(int, int)+0x234>)
    2738:	2201      	movs	r2, #1
    273a:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM1,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    273c:	4a28      	ldr	r2, [pc, #160]	; (27e0 <__static_initialization_and_destruction_0(int, int)+0x238>)
    273e:	4b29      	ldr	r3, [pc, #164]	; (27e4 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    2740:	601a      	str	r2, [r3, #0]
    2742:	bf00      	nop
    2744:	3708      	adds	r7, #8
    2746:	46bd      	mov	sp, r7
    2748:	bd80      	pop	{r7, pc}
    274a:	bf00      	nop
    274c:	10000268 	.word	0x10000268
    2750:	4002c000 	.word	0x4002c000
    2754:	10000118 	.word	0x10000118
    2758:	1000026c 	.word	0x1000026c
    275c:	400fc000 	.word	0x400fc000
    2760:	1000011c 	.word	0x1000011c
    2764:	10000270 	.word	0x10000270
    2768:	40098000 	.word	0x40098000
    276c:	1000000c 	.word	0x1000000c
    2770:	10000274 	.word	0x10000274
    2774:	4009c000 	.word	0x4009c000
    2778:	10000020 	.word	0x10000020
    277c:	10000278 	.word	0x10000278
    2780:	400a4000 	.word	0x400a4000
    2784:	10000034 	.word	0x10000034
    2788:	1000027c 	.word	0x1000027c
    278c:	40034000 	.word	0x40034000
    2790:	10000120 	.word	0x10000120
    2794:	10000280 	.word	0x10000280
    2798:	10000124 	.word	0x10000124
    279c:	10000284 	.word	0x10000284
    27a0:	20098000 	.word	0x20098000
    27a4:	10000224 	.word	0x10000224
    27a8:	20098020 	.word	0x20098020
    27ac:	20098040 	.word	0x20098040
    27b0:	20098060 	.word	0x20098060
    27b4:	20098080 	.word	0x20098080
    27b8:	200980a0 	.word	0x200980a0
    27bc:	10000288 	.word	0x10000288
    27c0:	1000023c 	.word	0x1000023c
    27c4:	40028080 	.word	0x40028080
    27c8:	1000028c 	.word	0x1000028c
    27cc:	10000264 	.word	0x10000264
    27d0:	10000290 	.word	0x10000290
    27d4:	40014000 	.word	0x40014000
    27d8:	1000004c 	.word	0x1000004c
    27dc:	10000294 	.word	0x10000294
    27e0:	40018000 	.word	0x40018000
    27e4:	10000054 	.word	0x10000054

000027e8 <_GLOBAL__sub_I_main>:
    27e8:	b580      	push	{r7, lr}
    27ea:	af00      	add	r7, sp, #0
    27ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    27f0:	2001      	movs	r0, #1
    27f2:	f7ff fed9 	bl	25a8 <__static_initialization_and_destruction_0(int, int)>
    27f6:	bd80      	pop	{r7, pc}

000027f8 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    27f8:	b480      	push	{r7}
    27fa:	b087      	sub	sp, #28
    27fc:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    27fe:	2300      	movs	r3, #0
    2800:	617b      	str	r3, [r7, #20]
    2802:	697a      	ldr	r2, [r7, #20]
    2804:	4613      	mov	r3, r2
    2806:	005b      	lsls	r3, r3, #1
    2808:	4413      	add	r3, r2
    280a:	009b      	lsls	r3, r3, #2
    280c:	4a1f      	ldr	r2, [pc, #124]	; (288c <sjsu::InitializeDataSection()+0x94>)
    280e:	4413      	add	r3, r2
    2810:	4a1f      	ldr	r2, [pc, #124]	; (2890 <sjsu::InitializeDataSection()+0x98>)
    2812:	4293      	cmp	r3, r2
    2814:	d233      	bcs.n	287e <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    2816:	491d      	ldr	r1, [pc, #116]	; (288c <sjsu::InitializeDataSection()+0x94>)
    2818:	697a      	ldr	r2, [r7, #20]
    281a:	4613      	mov	r3, r2
    281c:	005b      	lsls	r3, r3, #1
    281e:	4413      	add	r3, r2
    2820:	009b      	lsls	r3, r3, #2
    2822:	440b      	add	r3, r1
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    2828:	4918      	ldr	r1, [pc, #96]	; (288c <sjsu::InitializeDataSection()+0x94>)
    282a:	697a      	ldr	r2, [r7, #20]
    282c:	4613      	mov	r3, r2
    282e:	005b      	lsls	r3, r3, #1
    2830:	4413      	add	r3, r2
    2832:	009b      	lsls	r3, r3, #2
    2834:	440b      	add	r3, r1
    2836:	685b      	ldr	r3, [r3, #4]
    2838:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    283a:	4914      	ldr	r1, [pc, #80]	; (288c <sjsu::InitializeDataSection()+0x94>)
    283c:	697a      	ldr	r2, [r7, #20]
    283e:	4613      	mov	r3, r2
    2840:	005b      	lsls	r3, r3, #1
    2842:	4413      	add	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	440b      	add	r3, r1
    2848:	3308      	adds	r3, #8
    284a:	681b      	ldr	r3, [r3, #0]
    284c:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    284e:	2300      	movs	r3, #0
    2850:	613b      	str	r3, [r7, #16]
    2852:	693a      	ldr	r2, [r7, #16]
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	429a      	cmp	r2, r3
    2858:	d20d      	bcs.n	2876 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    285a:	693b      	ldr	r3, [r7, #16]
    285c:	009b      	lsls	r3, r3, #2
    285e:	68fa      	ldr	r2, [r7, #12]
    2860:	441a      	add	r2, r3
    2862:	693b      	ldr	r3, [r7, #16]
    2864:	009b      	lsls	r3, r3, #2
    2866:	68b9      	ldr	r1, [r7, #8]
    2868:	440b      	add	r3, r1
    286a:	6812      	ldr	r2, [r2, #0]
    286c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    286e:	693b      	ldr	r3, [r7, #16]
    2870:	3301      	adds	r3, #1
    2872:	613b      	str	r3, [r7, #16]
    2874:	e7ed      	b.n	2852 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2876:	697b      	ldr	r3, [r7, #20]
    2878:	3301      	adds	r3, #1
    287a:	617b      	str	r3, [r7, #20]
    287c:	e7c1      	b.n	2802 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    287e:	bf00      	nop
    2880:	371c      	adds	r7, #28
    2882:	46bd      	mov	sp, r7
    2884:	f85d 7b04 	ldr.w	r7, [sp], #4
    2888:	4770      	bx	lr
    288a:	bf00      	nop
    288c:	000000e4 	.word	0x000000e4
    2890:	000000fc 	.word	0x000000fc

00002894 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    2894:	b480      	push	{r7}
    2896:	b085      	sub	sp, #20
    2898:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    289a:	2300      	movs	r3, #0
    289c:	60fb      	str	r3, [r7, #12]
    289e:	68fb      	ldr	r3, [r7, #12]
    28a0:	00db      	lsls	r3, r3, #3
    28a2:	4a15      	ldr	r2, [pc, #84]	; (28f8 <sjsu::InitializeBssSection()+0x64>)
    28a4:	4413      	add	r3, r2
    28a6:	4a15      	ldr	r2, [pc, #84]	; (28fc <sjsu::InitializeBssSection()+0x68>)
    28a8:	4293      	cmp	r3, r2
    28aa:	d21e      	bcs.n	28ea <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    28ac:	4a12      	ldr	r2, [pc, #72]	; (28f8 <sjsu::InitializeBssSection()+0x64>)
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    28b4:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    28b6:	4a10      	ldr	r2, [pc, #64]	; (28f8 <sjsu::InitializeBssSection()+0x64>)
    28b8:	68fb      	ldr	r3, [r7, #12]
    28ba:	00db      	lsls	r3, r3, #3
    28bc:	4413      	add	r3, r2
    28be:	685b      	ldr	r3, [r3, #4]
    28c0:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    28c2:	2300      	movs	r3, #0
    28c4:	60bb      	str	r3, [r7, #8]
    28c6:	68ba      	ldr	r2, [r7, #8]
    28c8:	683b      	ldr	r3, [r7, #0]
    28ca:	429a      	cmp	r2, r3
    28cc:	d209      	bcs.n	28e2 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	009b      	lsls	r3, r3, #2
    28d2:	687a      	ldr	r2, [r7, #4]
    28d4:	4413      	add	r3, r2
    28d6:	2200      	movs	r2, #0
    28d8:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    28da:	68bb      	ldr	r3, [r7, #8]
    28dc:	3301      	adds	r3, #1
    28de:	60bb      	str	r3, [r7, #8]
    28e0:	e7f1      	b.n	28c6 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    28e2:	68fb      	ldr	r3, [r7, #12]
    28e4:	3301      	adds	r3, #1
    28e6:	60fb      	str	r3, [r7, #12]
    28e8:	e7d9      	b.n	289e <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    28ea:	bf00      	nop
    28ec:	3714      	adds	r7, #20
    28ee:	46bd      	mov	sp, r7
    28f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    28f4:	4770      	bx	lr
    28f6:	bf00      	nop
    28f8:	000000fc 	.word	0x000000fc
    28fc:	0000010c 	.word	0x0000010c

00002900 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    2900:	b580      	push	{r7, lr}
    2902:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    2904:	f7ff ff78 	bl	27f8 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    2908:	f7ff ffc4 	bl	2894 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    290c:	f003 fb2c 	bl	5f68 <__libc_init_array>
}
    2910:	bf00      	nop
    2912:	bd80      	pop	{r7, pc}

00002914 <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    2914:	b580      	push	{r7, lr}
    2916:	b08c      	sub	sp, #48	; 0x30
    2918:	af02      	add	r7, sp, #8
    291a:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	685b      	ldr	r3, [r3, #4]
    2926:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	689b      	ldr	r3, [r3, #8]
    292c:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	68db      	ldr	r3, [r3, #12]
    2932:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	691b      	ldr	r3, [r3, #16]
    2938:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	695b      	ldr	r3, [r3, #20]
    293e:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	699b      	ldr	r3, [r3, #24]
    2944:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	69db      	ldr	r3, [r3, #28]
    294a:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    294c:	480d      	ldr	r0, [pc, #52]	; (2984 <GetRegistersFromStack+0x70>)
    294e:	f001 fa21 	bl	3d94 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    2952:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2954:	6a3a      	ldr	r2, [r7, #32]
    2956:	69f8      	ldr	r0, [r7, #28]
    2958:	69bb      	ldr	r3, [r7, #24]
    295a:	9300      	str	r3, [sp, #0]
    295c:	4603      	mov	r3, r0
    295e:	480a      	ldr	r0, [pc, #40]	; (2988 <GetRegistersFromStack+0x74>)
    2960:	f001 fa18 	bl	3d94 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    2964:	6979      	ldr	r1, [r7, #20]
    2966:	693a      	ldr	r2, [r7, #16]
    2968:	68f8      	ldr	r0, [r7, #12]
    296a:	68bb      	ldr	r3, [r7, #8]
    296c:	9300      	str	r3, [sp, #0]
    296e:	4603      	mov	r3, r0
    2970:	4806      	ldr	r0, [pc, #24]	; (298c <GetRegistersFromStack+0x78>)
    2972:	f001 fa0f 	bl	3d94 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    2976:	68fb      	ldr	r3, [r7, #12]
    2978:	4619      	mov	r1, r3
    297a:	2001      	movs	r0, #1
    297c:	f7fd fe00 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    2980:	e7fe      	b.n	2980 <GetRegistersFromStack+0x6c>
    2982:	bf00      	nop
    2984:	00006ac8 	.word	0x00006ac8
    2988:	00006af4 	.word	0x00006af4
    298c:	00006b28 	.word	0x00006b28

00002990 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    2990:	b480      	push	{r7}
    2992:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    2994:	f01e 0f04 	tst.w	lr, #4
    2998:	bf0c      	ite	eq
    299a:	f3ef 8008 	mrseq	r0, MSP
    299e:	f3ef 8009 	mrsne	r0, PSP
    29a2:	6981      	ldr	r1, [r0, #24]
    29a4:	4a00      	ldr	r2, [pc, #0]	; (29a8 <handler2_address_const>)
    29a6:	4710      	bx	r2

000029a8 <handler2_address_const>:
    29a8:	00002915 	.word	0x00002915
    }
  }
    29ac:	bf00      	nop
    29ae:	46bd      	mov	sp, r7
    29b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    29b4:	4770      	bx	lr
    29b6:	Address 0x00000000000029b6 is out of bounds.


000029b8 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    29b8:	b580      	push	{r7, lr}
    29ba:	b084      	sub	sp, #16
    29bc:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    29be:	4b10      	ldr	r3, [pc, #64]	; (2a00 <ArmResetHandler+0x48>)
    29c0:	60fb      	str	r3, [r7, #12]
    29c2:	68fb      	ldr	r3, [r7, #12]
    29c4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	f383 8809 	msr	PSP, r3
    29cc:	68fb      	ldr	r3, [r7, #12]
    29ce:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    29d6:	f7ff ff93 	bl	2900 <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    29da:	f001 fce9 	bl	43b0 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    29de:	f7ff fa63 	bl	1ea8 <main>
    29e2:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	2b00      	cmp	r3, #0
    29e8:	db04      	blt.n	29f4 <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    29ea:	68b9      	ldr	r1, [r7, #8]
    29ec:	4805      	ldr	r0, [pc, #20]	; (2a04 <ArmResetHandler+0x4c>)
    29ee:	f001 f9d1 	bl	3d94 <printf>
    29f2:	e003      	b.n	29fc <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    29f4:	68b9      	ldr	r1, [r7, #8]
    29f6:	4804      	ldr	r0, [pc, #16]	; (2a08 <ArmResetHandler+0x50>)
    29f8:	f001 f9cc 	bl	3d94 <printf>
    29fc:	e7fe      	b.n	29fc <ArmResetHandler+0x44>
    29fe:	bf00      	nop
    2a00:	10010000 	.word	0x10010000
    2a04:	00006b60 	.word	0x00006b60
    2a08:	00006b94 	.word	0x00006b94

00002a0c <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b082      	sub	sp, #8
    2a10:	af00      	add	r7, sp, #0
    2a12:	6078      	str	r0, [r7, #4]
    2a14:	6039      	str	r1, [r7, #0]
    2a16:	687b      	ldr	r3, [r7, #4]
    2a18:	2b01      	cmp	r3, #1
    2a1a:	d111      	bne.n	2a40 <__static_initialization_and_destruction_0(int, int)+0x34>
    2a1c:	683b      	ldr	r3, [r7, #0]
    2a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2a22:	4293      	cmp	r3, r2
    2a24:	d10c      	bne.n	2a40 <__static_initialization_and_destruction_0(int, int)+0x34>
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	f003 0301 	and.w	r3, r3, #1
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d106      	bne.n	2a40 <__static_initialization_and_destruction_0(int, int)+0x34>
    2a32:	4b05      	ldr	r3, [pc, #20]	; (2a48 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2a34:	2201      	movs	r2, #1
    2a36:	601a      	str	r2, [r3, #0]
    2a38:	4b04      	ldr	r3, [pc, #16]	; (2a4c <__static_initialization_and_destruction_0(int, int)+0x40>)
    2a3a:	4618      	mov	r0, r3
    2a3c:	f7ff f96e 	bl	1d1c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    2a40:	bf00      	nop
    2a42:	3708      	adds	r7, #8
    2a44:	46bd      	mov	sp, r7
    2a46:	bd80      	pop	{r7, pc}
    2a48:	10000280 	.word	0x10000280
    2a4c:	10000124 	.word	0x10000124

00002a50 <_GLOBAL__sub_I_GetRegistersFromStack>:
    2a50:	b580      	push	{r7, lr}
    2a52:	af00      	add	r7, sp, #0
    2a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2a58:	2001      	movs	r0, #1
    2a5a:	f7ff ffd7 	bl	2a0c <__static_initialization_and_destruction_0(int, int)>
    2a5e:	bd80      	pop	{r7, pc}

00002a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2a60:	b580      	push	{r7, lr}
    2a62:	b084      	sub	sp, #16
    2a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2a66:	4b28      	ldr	r3, [pc, #160]	; (2b08 <vTaskSwitchContext+0xa8>)
    2a68:	681b      	ldr	r3, [r3, #0]
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d003      	beq.n	2a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2a6e:	4b27      	ldr	r3, [pc, #156]	; (2b0c <vTaskSwitchContext+0xac>)
    2a70:	2201      	movs	r2, #1
    2a72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2a74:	e043      	b.n	2afe <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    2a76:	4b25      	ldr	r3, [pc, #148]	; (2b0c <vTaskSwitchContext+0xac>)
    2a78:	2200      	movs	r2, #0
    2a7a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    2a7c:	f001 fc8e 	bl	439c <ThreadRuntimeCounter>
    2a80:	4602      	mov	r2, r0
    2a82:	4b23      	ldr	r3, [pc, #140]	; (2b10 <vTaskSwitchContext+0xb0>)
    2a84:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    2a86:	4b22      	ldr	r3, [pc, #136]	; (2b10 <vTaskSwitchContext+0xb0>)
    2a88:	681a      	ldr	r2, [r3, #0]
    2a8a:	4b22      	ldr	r3, [pc, #136]	; (2b14 <vTaskSwitchContext+0xb4>)
    2a8c:	681b      	ldr	r3, [r3, #0]
    2a8e:	429a      	cmp	r2, r3
    2a90:	d909      	bls.n	2aa6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    2a92:	4b21      	ldr	r3, [pc, #132]	; (2b18 <vTaskSwitchContext+0xb8>)
    2a94:	681b      	ldr	r3, [r3, #0]
    2a96:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2a98:	4a1d      	ldr	r2, [pc, #116]	; (2b10 <vTaskSwitchContext+0xb0>)
    2a9a:	6810      	ldr	r0, [r2, #0]
    2a9c:	4a1d      	ldr	r2, [pc, #116]	; (2b14 <vTaskSwitchContext+0xb4>)
    2a9e:	6812      	ldr	r2, [r2, #0]
    2aa0:	1a82      	subs	r2, r0, r2
    2aa2:	440a      	add	r2, r1
    2aa4:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    2aa6:	4b1a      	ldr	r3, [pc, #104]	; (2b10 <vTaskSwitchContext+0xb0>)
    2aa8:	681b      	ldr	r3, [r3, #0]
    2aaa:	4a1a      	ldr	r2, [pc, #104]	; (2b14 <vTaskSwitchContext+0xb4>)
    2aac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2aae:	4b1b      	ldr	r3, [pc, #108]	; (2b1c <vTaskSwitchContext+0xbc>)
    2ab0:	681b      	ldr	r3, [r3, #0]
    2ab2:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	fab3 f383 	clz	r3, r3
    2aba:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    2abc:	78fb      	ldrb	r3, [r7, #3]
    2abe:	f1c3 031f 	rsb	r3, r3, #31
    2ac2:	60fb      	str	r3, [r7, #12]
    2ac4:	68fa      	ldr	r2, [r7, #12]
    2ac6:	4613      	mov	r3, r2
    2ac8:	009b      	lsls	r3, r3, #2
    2aca:	4413      	add	r3, r2
    2acc:	009b      	lsls	r3, r3, #2
    2ace:	4a14      	ldr	r2, [pc, #80]	; (2b20 <vTaskSwitchContext+0xc0>)
    2ad0:	4413      	add	r3, r2
    2ad2:	60bb      	str	r3, [r7, #8]
    2ad4:	68bb      	ldr	r3, [r7, #8]
    2ad6:	685b      	ldr	r3, [r3, #4]
    2ad8:	685a      	ldr	r2, [r3, #4]
    2ada:	68bb      	ldr	r3, [r7, #8]
    2adc:	605a      	str	r2, [r3, #4]
    2ade:	68bb      	ldr	r3, [r7, #8]
    2ae0:	685a      	ldr	r2, [r3, #4]
    2ae2:	68bb      	ldr	r3, [r7, #8]
    2ae4:	3308      	adds	r3, #8
    2ae6:	429a      	cmp	r2, r3
    2ae8:	d104      	bne.n	2af4 <vTaskSwitchContext+0x94>
    2aea:	68bb      	ldr	r3, [r7, #8]
    2aec:	685b      	ldr	r3, [r3, #4]
    2aee:	685a      	ldr	r2, [r3, #4]
    2af0:	68bb      	ldr	r3, [r7, #8]
    2af2:	605a      	str	r2, [r3, #4]
    2af4:	68bb      	ldr	r3, [r7, #8]
    2af6:	685b      	ldr	r3, [r3, #4]
    2af8:	68db      	ldr	r3, [r3, #12]
    2afa:	4a07      	ldr	r2, [pc, #28]	; (2b18 <vTaskSwitchContext+0xb8>)
    2afc:	6013      	str	r3, [r2, #0]
}
    2afe:	bf00      	nop
    2b00:	3710      	adds	r7, #16
    2b02:	46bd      	mov	sp, r7
    2b04:	bd80      	pop	{r7, pc}
    2b06:	bf00      	nop
    2b08:	10000308 	.word	0x10000308
    2b0c:	10000304 	.word	0x10000304
    2b10:	10000310 	.word	0x10000310
    2b14:	1000030c 	.word	0x1000030c
    2b18:	10000298 	.word	0x10000298
    2b1c:	10000300 	.word	0x10000300
    2b20:	1000029c 	.word	0x1000029c

00002b24 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    2b24:	b480      	push	{r7}
    2b26:	b083      	sub	sp, #12
    2b28:	af00      	add	r7, sp, #0
    2b2a:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    2b2c:	bf00      	nop
    while (1)
    2b2e:	e7fd      	b.n	2b2c <_exit+0x8>

00002b30 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    2b30:	b480      	push	{r7}
    2b32:	af00      	add	r7, sp, #0
    return 1;
    2b34:	2301      	movs	r3, #1
  }
    2b36:	4618      	mov	r0, r3
    2b38:	46bd      	mov	sp, r7
    2b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b3e:	4770      	bx	lr

00002b40 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    2b40:	b480      	push	{r7}
    2b42:	b083      	sub	sp, #12
    2b44:	af00      	add	r7, sp, #0
    2b46:	6078      	str	r0, [r7, #4]
    2b48:	6039      	str	r1, [r7, #0]
    return -1;
    2b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    2b4e:	4618      	mov	r0, r3
    2b50:	370c      	adds	r7, #12
    2b52:	46bd      	mov	sp, r7
    2b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b58:	4770      	bx	lr
    2b5a:	Address 0x0000000000002b5a is out of bounds.


00002b5c <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b084      	sub	sp, #16
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    2b64:	6878      	ldr	r0, [r7, #4]
    2b66:	f003 fa7b 	bl	6060 <strlen>
    2b6a:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    2b6c:	2300      	movs	r3, #0
    2b6e:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    2b70:	4b0b      	ldr	r3, [pc, #44]	; (2ba0 <puts+0x44>)
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	68f9      	ldr	r1, [r7, #12]
    2b76:	6878      	ldr	r0, [r7, #4]
    2b78:	4798      	blx	r3
    2b7a:	4602      	mov	r2, r0
    2b7c:	68bb      	ldr	r3, [r7, #8]
    2b7e:	4413      	add	r3, r2
    2b80:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    2b82:	4b07      	ldr	r3, [pc, #28]	; (2ba0 <puts+0x44>)
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	2101      	movs	r1, #1
    2b88:	4806      	ldr	r0, [pc, #24]	; (2ba4 <puts+0x48>)
    2b8a:	4798      	blx	r3
    2b8c:	4602      	mov	r2, r0
    2b8e:	68bb      	ldr	r3, [r7, #8]
    2b90:	4413      	add	r3, r2
    2b92:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    2b94:	68bb      	ldr	r3, [r7, #8]
  }
    2b96:	4618      	mov	r0, r3
    2b98:	3710      	adds	r7, #16
    2b9a:	46bd      	mov	sp, r7
    2b9c:	bd80      	pop	{r7, pc}
    2b9e:	bf00      	nop
    2ba0:	1000005c 	.word	0x1000005c
    2ba4:	00006bc8 	.word	0x00006bc8

00002ba8 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    2ba8:	b480      	push	{r7}
    2baa:	b085      	sub	sp, #20
    2bac:	af00      	add	r7, sp, #0
    2bae:	60b9      	str	r1, [r7, #8]
    2bb0:	607a      	str	r2, [r7, #4]
    2bb2:	603b      	str	r3, [r7, #0]
    2bb4:	4603      	mov	r3, r0
    2bb6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    2bb8:	bf00      	nop
    2bba:	3714      	adds	r7, #20
    2bbc:	46bd      	mov	sp, r7
    2bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc2:	4770      	bx	lr

00002bc4 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	b084      	sub	sp, #16
    2bc8:	af00      	add	r7, sp, #0
    2bca:	60b9      	str	r1, [r7, #8]
    2bcc:	607a      	str	r2, [r7, #4]
    2bce:	603b      	str	r3, [r7, #0]
    2bd0:	4603      	mov	r3, r0
    2bd2:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    2bd4:	7bfb      	ldrb	r3, [r7, #15]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d003      	beq.n	2be2 <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    2bda:	7bfb      	ldrb	r3, [r7, #15]
    2bdc:	4618      	mov	r0, r3
    2bde:	f001 fd73 	bl	46c8 <_putchar>
  }
}
    2be2:	bf00      	nop
    2be4:	3710      	adds	r7, #16
    2be6:	46bd      	mov	sp, r7
    2be8:	bd80      	pop	{r7, pc}

00002bea <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    2bea:	b480      	push	{r7}
    2bec:	b085      	sub	sp, #20
    2bee:	af00      	add	r7, sp, #0
    2bf0:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	60fb      	str	r3, [r7, #12]
    2bf6:	68fb      	ldr	r3, [r7, #12]
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d003      	beq.n	2c06 <_strlen(char const*)+0x1c>
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	3301      	adds	r3, #1
    2c02:	60fb      	str	r3, [r7, #12]
    2c04:	e7f7      	b.n	2bf6 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    2c06:	68fa      	ldr	r2, [r7, #12]
    2c08:	687b      	ldr	r3, [r7, #4]
    2c0a:	1ad3      	subs	r3, r2, r3
}
    2c0c:	4618      	mov	r0, r3
    2c0e:	3714      	adds	r7, #20
    2c10:	46bd      	mov	sp, r7
    2c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c16:	4770      	bx	lr

00002c18 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    2c18:	b480      	push	{r7}
    2c1a:	b083      	sub	sp, #12
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	4603      	mov	r3, r0
    2c20:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    2c22:	79fb      	ldrb	r3, [r7, #7]
    2c24:	2b2f      	cmp	r3, #47	; 0x2f
    2c26:	d904      	bls.n	2c32 <_is_digit(char)+0x1a>
    2c28:	79fb      	ldrb	r3, [r7, #7]
    2c2a:	2b39      	cmp	r3, #57	; 0x39
    2c2c:	d801      	bhi.n	2c32 <_is_digit(char)+0x1a>
    2c2e:	2301      	movs	r3, #1
    2c30:	e000      	b.n	2c34 <_is_digit(char)+0x1c>
    2c32:	2300      	movs	r3, #0
}
    2c34:	4618      	mov	r0, r3
    2c36:	370c      	adds	r7, #12
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b084      	sub	sp, #16
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    2c48:	2300      	movs	r3, #0
    2c4a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	4618      	mov	r0, r3
    2c54:	f7ff ffe0 	bl	2c18 <_is_digit(char)>
    2c58:	4603      	mov	r3, r0
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d00f      	beq.n	2c7e <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c5e:	68fa      	ldr	r2, [r7, #12]
    2c60:	4613      	mov	r3, r2
    2c62:	009b      	lsls	r3, r3, #2
    2c64:	4413      	add	r3, r2
    2c66:	005b      	lsls	r3, r3, #1
    2c68:	4618      	mov	r0, r3
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	681b      	ldr	r3, [r3, #0]
    2c6e:	1c59      	adds	r1, r3, #1
    2c70:	687a      	ldr	r2, [r7, #4]
    2c72:	6011      	str	r1, [r2, #0]
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	4403      	add	r3, r0
    2c78:	3b30      	subs	r3, #48	; 0x30
    2c7a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    2c7c:	e7e6      	b.n	2c4c <_atoi(char const**)+0xc>
  }
  return i;
    2c7e:	68fb      	ldr	r3, [r7, #12]
}
    2c80:	4618      	mov	r0, r3
    2c82:	3710      	adds	r7, #16
    2c84:	46bd      	mov	sp, r7
    2c86:	bd80      	pop	{r7, pc}

00002c88 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2c88:	b590      	push	{r4, r7, lr}
    2c8a:	b089      	sub	sp, #36	; 0x24
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	60f8      	str	r0, [r7, #12]
    2c90:	60b9      	str	r1, [r7, #8]
    2c92:	607a      	str	r2, [r7, #4]
    2c94:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c9c:	f003 0302 	and.w	r3, r3, #2
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d10e      	bne.n	2cc2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    2ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ca8:	429a      	cmp	r2, r3
    2caa:	d20a      	bcs.n	2cc2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    2cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2cae:	2b1f      	cmp	r3, #31
    2cb0:	d807      	bhi.n	2cc2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    2cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2cb4:	1c5a      	adds	r2, r3, #1
    2cb6:	637a      	str	r2, [r7, #52]	; 0x34
    2cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2cba:	4413      	add	r3, r2
    2cbc:	2230      	movs	r2, #48	; 0x30
    2cbe:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2cc0:	e7eb      	b.n	2c9a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2cc4:	f003 0302 	and.w	r3, r3, #2
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d113      	bne.n	2cf4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    2ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2cce:	f003 0301 	and.w	r3, r3, #1
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d00e      	beq.n	2cf4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    2cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2cda:	429a      	cmp	r2, r3
    2cdc:	d20a      	bcs.n	2cf4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    2cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ce0:	2b1f      	cmp	r3, #31
    2ce2:	d807      	bhi.n	2cf4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    2ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ce6:	1c5a      	adds	r2, r3, #1
    2ce8:	637a      	str	r2, [r7, #52]	; 0x34
    2cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2cec:	4413      	add	r3, r2
    2cee:	2230      	movs	r2, #48	; 0x30
    2cf0:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2cf2:	e7e6      	b.n	2cc2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    2cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2cf6:	f003 0310 	and.w	r3, r3, #16
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d058      	beq.n	2db0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2d04:	2b00      	cmp	r3, #0
    2d06:	d116      	bne.n	2d36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    2d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d013      	beq.n	2d36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    2d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2d12:	429a      	cmp	r2, r3
    2d14:	d003      	beq.n	2d1e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    2d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2d1a:	429a      	cmp	r2, r3
    2d1c:	d10b      	bne.n	2d36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    2d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d20:	3b01      	subs	r3, #1
    2d22:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    2d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d26:	2b00      	cmp	r3, #0
    2d28:	d005      	beq.n	2d36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    2d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d2c:	2b10      	cmp	r3, #16
    2d2e:	d102      	bne.n	2d36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    2d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d32:	3b01      	subs	r3, #1
    2d34:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d38:	2b10      	cmp	r3, #16
    2d3a:	d10f      	bne.n	2d5c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    2d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d3e:	f003 0320 	and.w	r3, r3, #32
    2d42:	2b00      	cmp	r3, #0
    2d44:	d10a      	bne.n	2d5c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    2d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d48:	2b1f      	cmp	r3, #31
    2d4a:	d807      	bhi.n	2d5c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    2d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d4e:	1c5a      	adds	r2, r3, #1
    2d50:	637a      	str	r2, [r7, #52]	; 0x34
    2d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d54:	4413      	add	r3, r2
    2d56:	2278      	movs	r2, #120	; 0x78
    2d58:	701a      	strb	r2, [r3, #0]
    2d5a:	e01f      	b.n	2d9c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d5e:	2b10      	cmp	r3, #16
    2d60:	d10f      	bne.n	2d82 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    2d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d64:	f003 0320 	and.w	r3, r3, #32
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d00a      	beq.n	2d82 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    2d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d6e:	2b1f      	cmp	r3, #31
    2d70:	d807      	bhi.n	2d82 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    2d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d74:	1c5a      	adds	r2, r3, #1
    2d76:	637a      	str	r2, [r7, #52]	; 0x34
    2d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d7a:	4413      	add	r3, r2
    2d7c:	2258      	movs	r2, #88	; 0x58
    2d7e:	701a      	strb	r2, [r3, #0]
    2d80:	e00c      	b.n	2d9c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d84:	2b02      	cmp	r3, #2
    2d86:	d109      	bne.n	2d9c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    2d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d8a:	2b1f      	cmp	r3, #31
    2d8c:	d806      	bhi.n	2d9c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    2d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d90:	1c5a      	adds	r2, r3, #1
    2d92:	637a      	str	r2, [r7, #52]	; 0x34
    2d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d96:	4413      	add	r3, r2
    2d98:	2262      	movs	r2, #98	; 0x62
    2d9a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d9e:	2b1f      	cmp	r3, #31
    2da0:	d806      	bhi.n	2db0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    2da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2da4:	1c5a      	adds	r2, r3, #1
    2da6:	637a      	str	r2, [r7, #52]	; 0x34
    2da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2daa:	4413      	add	r3, r2
    2dac:	2230      	movs	r2, #48	; 0x30
    2dae:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    2db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2db2:	2b00      	cmp	r3, #0
    2db4:	d014      	beq.n	2de0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    2db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2dba:	429a      	cmp	r2, r3
    2dbc:	d110      	bne.n	2de0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    2dbe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d109      	bne.n	2dda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    2dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2dc8:	f003 0304 	and.w	r3, r3, #4
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d104      	bne.n	2dda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    2dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2dd2:	f003 0308 	and.w	r3, r3, #8
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d002      	beq.n	2de0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    2dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ddc:	3b01      	subs	r3, #1
    2dde:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2de2:	2b1f      	cmp	r3, #31
    2de4:	d824      	bhi.n	2e30 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    2de6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    2dea:	2b00      	cmp	r3, #0
    2dec:	d007      	beq.n	2dfe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    2dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2df0:	1c5a      	adds	r2, r3, #1
    2df2:	637a      	str	r2, [r7, #52]	; 0x34
    2df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2df6:	4413      	add	r3, r2
    2df8:	222d      	movs	r2, #45	; 0x2d
    2dfa:	701a      	strb	r2, [r3, #0]
    2dfc:	e018      	b.n	2e30 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    2dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e00:	f003 0304 	and.w	r3, r3, #4
    2e04:	2b00      	cmp	r3, #0
    2e06:	d007      	beq.n	2e18 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e0a:	1c5a      	adds	r2, r3, #1
    2e0c:	637a      	str	r2, [r7, #52]	; 0x34
    2e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e10:	4413      	add	r3, r2
    2e12:	222b      	movs	r2, #43	; 0x2b
    2e14:	701a      	strb	r2, [r3, #0]
    2e16:	e00b      	b.n	2e30 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    2e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e1a:	f003 0308 	and.w	r3, r3, #8
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d006      	beq.n	2e30 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    2e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e24:	1c5a      	adds	r2, r3, #1
    2e26:	637a      	str	r2, [r7, #52]	; 0x34
    2e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e2a:	4413      	add	r3, r2
    2e2c:	2220      	movs	r2, #32
    2e2e:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e32:	f003 0302 	and.w	r3, r3, #2
    2e36:	2b00      	cmp	r3, #0
    2e38:	d116      	bne.n	2e68 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    2e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e3c:	f003 0301 	and.w	r3, r3, #1
    2e40:	2b00      	cmp	r3, #0
    2e42:	d111      	bne.n	2e68 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    2e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e46:	61fb      	str	r3, [r7, #28]
    2e48:	69fa      	ldr	r2, [r7, #28]
    2e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2e4c:	429a      	cmp	r2, r3
    2e4e:	d20b      	bcs.n	2e68 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    2e50:	687a      	ldr	r2, [r7, #4]
    2e52:	1c53      	adds	r3, r2, #1
    2e54:	607b      	str	r3, [r7, #4]
    2e56:	68fc      	ldr	r4, [r7, #12]
    2e58:	683b      	ldr	r3, [r7, #0]
    2e5a:	68b9      	ldr	r1, [r7, #8]
    2e5c:	2020      	movs	r0, #32
    2e5e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    2e60:	69fb      	ldr	r3, [r7, #28]
    2e62:	3301      	adds	r3, #1
    2e64:	61fb      	str	r3, [r7, #28]
    2e66:	e7ef      	b.n	2e48 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    2e68:	2300      	movs	r3, #0
    2e6a:	61bb      	str	r3, [r7, #24]
    2e6c:	69ba      	ldr	r2, [r7, #24]
    2e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e70:	429a      	cmp	r2, r3
    2e72:	d211      	bcs.n	2e98 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    2e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2e76:	69bb      	ldr	r3, [r7, #24]
    2e78:	1ad3      	subs	r3, r2, r3
    2e7a:	3b01      	subs	r3, #1
    2e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e7e:	4413      	add	r3, r2
    2e80:	7818      	ldrb	r0, [r3, #0]
    2e82:	687a      	ldr	r2, [r7, #4]
    2e84:	1c53      	adds	r3, r2, #1
    2e86:	607b      	str	r3, [r7, #4]
    2e88:	68fc      	ldr	r4, [r7, #12]
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	68b9      	ldr	r1, [r7, #8]
    2e8e:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    2e90:	69bb      	ldr	r3, [r7, #24]
    2e92:	3301      	adds	r3, #1
    2e94:	61bb      	str	r3, [r7, #24]
    2e96:	e7e9      	b.n	2e6c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    2e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e9a:	f003 0302 	and.w	r3, r3, #2
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d00e      	beq.n	2ec0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    2ea2:	687a      	ldr	r2, [r7, #4]
    2ea4:	697b      	ldr	r3, [r7, #20]
    2ea6:	1ad3      	subs	r3, r2, r3
    2ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2eaa:	429a      	cmp	r2, r3
    2eac:	d908      	bls.n	2ec0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    2eae:	687a      	ldr	r2, [r7, #4]
    2eb0:	1c53      	adds	r3, r2, #1
    2eb2:	607b      	str	r3, [r7, #4]
    2eb4:	68fc      	ldr	r4, [r7, #12]
    2eb6:	683b      	ldr	r3, [r7, #0]
    2eb8:	68b9      	ldr	r1, [r7, #8]
    2eba:	2020      	movs	r0, #32
    2ebc:	47a0      	blx	r4
    while (idx - start_idx < width) {
    2ebe:	e7f0      	b.n	2ea2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    2ec0:	687b      	ldr	r3, [r7, #4]
}
    2ec2:	4618      	mov	r0, r3
    2ec4:	3724      	adds	r7, #36	; 0x24
    2ec6:	46bd      	mov	sp, r7
    2ec8:	bd90      	pop	{r4, r7, pc}

00002eca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2eca:	b580      	push	{r7, lr}
    2ecc:	b096      	sub	sp, #88	; 0x58
    2ece:	af08      	add	r7, sp, #32
    2ed0:	60f8      	str	r0, [r7, #12]
    2ed2:	60b9      	str	r1, [r7, #8]
    2ed4:	607a      	str	r2, [r7, #4]
    2ed6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    2ed8:	2300      	movs	r3, #0
    2eda:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    2edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d103      	bne.n	2eea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    2ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2ee4:	f023 0310 	bic.w	r3, r3, #16
    2ee8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d002      	beq.n	2efa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    2ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d034      	beq.n	2f64 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    2efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2efe:	fbb3 f2f2 	udiv	r2, r3, r2
    2f02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    2f04:	fb01 f202 	mul.w	r2, r1, r2
    2f08:	1a9b      	subs	r3, r3, r2
    2f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2f12:	2b09      	cmp	r3, #9
    2f14:	d804      	bhi.n	2f20 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    2f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2f1a:	3330      	adds	r3, #48	; 0x30
    2f1c:	b2da      	uxtb	r2, r3
    2f1e:	e00d      	b.n	2f3c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    2f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f22:	f003 0320 	and.w	r3, r3, #32
    2f26:	2b00      	cmp	r3, #0
    2f28:	d001      	beq.n	2f2e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    2f2a:	2241      	movs	r2, #65	; 0x41
    2f2c:	e000      	b.n	2f30 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    2f2e:	2261      	movs	r2, #97	; 0x61
    2f30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2f34:	4413      	add	r3, r2
    2f36:	b2db      	uxtb	r3, r3
    2f38:	3b0a      	subs	r3, #10
    2f3a:	b2da      	uxtb	r2, r3
    2f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f3e:	1c59      	adds	r1, r3, #1
    2f40:	6379      	str	r1, [r7, #52]	; 0x34
    2f42:	f107 0138 	add.w	r1, r7, #56	; 0x38
    2f46:	440b      	add	r3, r1
    2f48:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    2f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2f50:	fbb2 f3f3 	udiv	r3, r2, r3
    2f54:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d003      	beq.n	2f64 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    2f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f5e:	2b1f      	cmp	r3, #31
    2f60:	d800      	bhi.n	2f64 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    2f62:	e7ca      	b.n	2efa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f66:	9306      	str	r3, [sp, #24]
    2f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2f6a:	9305      	str	r3, [sp, #20]
    2f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2f6e:	9304      	str	r3, [sp, #16]
    2f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2f72:	9303      	str	r3, [sp, #12]
    2f74:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    2f78:	9302      	str	r3, [sp, #8]
    2f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f7c:	9301      	str	r3, [sp, #4]
    2f7e:	f107 0310 	add.w	r3, r7, #16
    2f82:	9300      	str	r3, [sp, #0]
    2f84:	683b      	ldr	r3, [r7, #0]
    2f86:	687a      	ldr	r2, [r7, #4]
    2f88:	68b9      	ldr	r1, [r7, #8]
    2f8a:	68f8      	ldr	r0, [r7, #12]
    2f8c:	f7ff fe7c 	bl	2c88 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    2f90:	4603      	mov	r3, r0
}
    2f92:	4618      	mov	r0, r3
    2f94:	3738      	adds	r7, #56	; 0x38
    2f96:	46bd      	mov	sp, r7
    2f98:	bd80      	pop	{r7, pc}

00002f9a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2f9a:	b590      	push	{r4, r7, lr}
    2f9c:	b097      	sub	sp, #92	; 0x5c
    2f9e:	af08      	add	r7, sp, #32
    2fa0:	60f8      	str	r0, [r7, #12]
    2fa2:	60b9      	str	r1, [r7, #8]
    2fa4:	607a      	str	r2, [r7, #4]
    2fa6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    2fa8:	2300      	movs	r3, #0
    2faa:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    2fac:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    2fb0:	4323      	orrs	r3, r4
    2fb2:	d103      	bne.n	2fbc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    2fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2fb6:	f023 0310 	bic.w	r3, r3, #16
    2fba:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d003      	beq.n	2fce <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    2fc6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    2fca:	4323      	orrs	r3, r4
    2fcc:	d03a      	beq.n	3044 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    2fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    2fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    2fd6:	f001 feb9 	bl	4d4c <__aeabi_uldivmod>
    2fda:	461c      	mov	r4, r3
    2fdc:	4613      	mov	r3, r2
    2fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2fe6:	2b09      	cmp	r3, #9
    2fe8:	d804      	bhi.n	2ff4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    2fea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2fee:	3330      	adds	r3, #48	; 0x30
    2ff0:	b2da      	uxtb	r2, r3
    2ff2:	e00d      	b.n	3010 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    2ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2ff6:	f003 0320 	and.w	r3, r3, #32
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d001      	beq.n	3002 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    2ffe:	2241      	movs	r2, #65	; 0x41
    3000:	e000      	b.n	3004 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    3002:	2261      	movs	r2, #97	; 0x61
    3004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3008:	4413      	add	r3, r2
    300a:	b2db      	uxtb	r3, r3
    300c:	3b0a      	subs	r3, #10
    300e:	b2da      	uxtb	r2, r3
    3010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3012:	1c59      	adds	r1, r3, #1
    3014:	6379      	str	r1, [r7, #52]	; 0x34
    3016:	f107 0138 	add.w	r1, r7, #56	; 0x38
    301a:	440b      	add	r3, r1
    301c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    3024:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    3028:	f001 fe90 	bl	4d4c <__aeabi_uldivmod>
    302c:	4603      	mov	r3, r0
    302e:	460c      	mov	r4, r1
    3030:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3034:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    3038:	4323      	orrs	r3, r4
    303a:	d003      	beq.n	3044 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    303e:	2b1f      	cmp	r3, #31
    3040:	d800      	bhi.n	3044 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    3042:	e7c4      	b.n	2fce <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3046:	6eba      	ldr	r2, [r7, #104]	; 0x68
    3048:	9206      	str	r2, [sp, #24]
    304a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    304c:	9205      	str	r2, [sp, #20]
    304e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3050:	9204      	str	r2, [sp, #16]
    3052:	9303      	str	r3, [sp, #12]
    3054:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    3058:	9302      	str	r3, [sp, #8]
    305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    305c:	9301      	str	r3, [sp, #4]
    305e:	f107 0310 	add.w	r3, r7, #16
    3062:	9300      	str	r3, [sp, #0]
    3064:	683b      	ldr	r3, [r7, #0]
    3066:	687a      	ldr	r2, [r7, #4]
    3068:	68b9      	ldr	r1, [r7, #8]
    306a:	68f8      	ldr	r0, [r7, #12]
    306c:	f7ff fe0c 	bl	2c88 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3070:	4603      	mov	r3, r0
}
    3072:	4618      	mov	r0, r3
    3074:	373c      	adds	r7, #60	; 0x3c
    3076:	46bd      	mov	sp, r7
    3078:	bd90      	pop	{r4, r7, pc}
    307a:	Address 0x000000000000307a is out of bounds.


0000307c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    307c:	b590      	push	{r4, r7, lr}
    307e:	b09b      	sub	sp, #108	; 0x6c
    3080:	af00      	add	r7, sp, #0
    3082:	6178      	str	r0, [r7, #20]
    3084:	6139      	str	r1, [r7, #16]
    3086:	60fa      	str	r2, [r7, #12]
    3088:	60bb      	str	r3, [r7, #8]
    308a:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    308e:	68fb      	ldr	r3, [r7, #12]
    3090:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3092:	e9d7 0100 	ldrd	r0, r1, [r7]
    3096:	f001 fcfb 	bl	4a90 <__aeabi_d2f>
    309a:	4603      	mov	r3, r0
    309c:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    309e:	2300      	movs	r3, #0
    30a0:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    30a2:	f04f 0300 	mov.w	r3, #0
    30a6:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    30a8:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    30ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    30ae:	2300      	movs	r3, #0
    30b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    30b4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    30b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    30bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    30c0:	d50a      	bpl.n	30d8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    30c2:	2301      	movs	r3, #1
    30c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    30c8:	ed9f 7aab 	vldr	s14, [pc, #684]	; 3378 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    30cc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    30d0:	ee77 7a67 	vsub.f32	s15, s14, s15
    30d4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    30d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    30dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    30e0:	2b00      	cmp	r3, #0
    30e2:	d101      	bne.n	30e8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    30e4:	2306      	movs	r3, #6
    30e6:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    30e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    30ea:	2b1f      	cmp	r3, #31
    30ec:	d80f      	bhi.n	310e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    30ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    30f0:	2b09      	cmp	r3, #9
    30f2:	d90c      	bls.n	310e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    30f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    30f6:	1c5a      	adds	r2, r3, #1
    30f8:	663a      	str	r2, [r7, #96]	; 0x60
    30fa:	f107 0268 	add.w	r2, r7, #104	; 0x68
    30fe:	4413      	add	r3, r2
    3100:	2230      	movs	r2, #48	; 0x30
    3102:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3108:	3b01      	subs	r3, #1
    310a:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    310c:	e7ec      	b.n	30e8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    310e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3116:	ee17 3a90 	vmov	r3, s15
    311a:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    311c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    311e:	ee07 3a90 	vmov	s15, r3
    3122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3126:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    312a:	ee37 7a67 	vsub.f32	s14, s14, s15
    312e:	4a93      	ldr	r2, [pc, #588]	; (337c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3132:	009b      	lsls	r3, r3, #2
    3134:	4413      	add	r3, r2
    3136:	edd3 7a00 	vldr	s15, [r3]
    313a:	ee67 7a27 	vmul.f32	s15, s14, s15
    313e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    3142:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    314a:	ee17 3a90 	vmov	r3, s15
    314e:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    3150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3152:	ee07 3a90 	vmov	s15, r3
    3156:	eef8 7a67 	vcvt.f32.u32	s15, s15
    315a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    315e:	ee77 7a67 	vsub.f32	s15, s14, s15
    3162:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    3166:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    316a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    316e:	eef4 7ac7 	vcmpe.f32	s15, s14
    3172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3176:	dd18      	ble.n	31aa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    317a:	3301      	adds	r3, #1
    317c:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    317e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3180:	ee07 3a90 	vmov	s15, r3
    3184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3188:	4a7c      	ldr	r2, [pc, #496]	; (337c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    318a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    318c:	009b      	lsls	r3, r3, #2
    318e:	4413      	add	r3, r2
    3190:	edd3 7a00 	vldr	s15, [r3]
    3194:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    319c:	db19      	blt.n	31d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    319e:	2300      	movs	r3, #0
    31a0:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    31a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    31a4:	3301      	adds	r3, #1
    31a6:	65bb      	str	r3, [r7, #88]	; 0x58
    31a8:	e013      	b.n	31d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    31aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    31ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    31b2:	eef4 7a47 	vcmp.f32	s15, s14
    31b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    31ba:	d10a      	bne.n	31d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    31bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    31be:	2b00      	cmp	r3, #0
    31c0:	d004      	beq.n	31cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    31c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    31c4:	f003 0301 	and.w	r3, r3, #1
    31c8:	2b00      	cmp	r3, #0
    31ca:	d002      	beq.n	31d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    31cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    31ce:	3301      	adds	r3, #1
    31d0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    31d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    31d6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3380 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    31da:	eef4 7ac7 	vcmpe.f32	s15, s14
    31de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    31e2:	dd01      	ble.n	31e8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    31e4:	2300      	movs	r3, #0
    31e6:	e166      	b.n	34b6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    31e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    31ea:	2b00      	cmp	r3, #0
    31ec:	d129      	bne.n	3242 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    31ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    31f0:	ee07 3a90 	vmov	s15, r3
    31f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    31f8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    31fc:	ee77 7a67 	vsub.f32	s15, s14, s15
    3200:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3204:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3208:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    320c:	eef4 7ac7 	vcmpe.f32	s15, s14
    3210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3214:	dd03      	ble.n	321e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    3216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3218:	3301      	adds	r3, #1
    321a:	65bb      	str	r3, [r7, #88]	; 0x58
    321c:	e062      	b.n	32e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    321e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3222:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3226:	eef4 7a47 	vcmp.f32	s15, s14
    322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    322e:	d159      	bne.n	32e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    3230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3232:	f003 0301 	and.w	r3, r3, #1
    3236:	2b00      	cmp	r3, #0
    3238:	d054      	beq.n	32e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    323a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    323c:	3301      	adds	r3, #1
    323e:	65bb      	str	r3, [r7, #88]	; 0x58
    3240:	e050      	b.n	32e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    3242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3244:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3248:	2b1f      	cmp	r3, #31
    324a:	d828      	bhi.n	329e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    324c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    324e:	3b01      	subs	r3, #1
    3250:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    3252:	6d79      	ldr	r1, [r7, #84]	; 0x54
    3254:	4b4b      	ldr	r3, [pc, #300]	; (3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3256:	fba3 2301 	umull	r2, r3, r3, r1
    325a:	08da      	lsrs	r2, r3, #3
    325c:	4613      	mov	r3, r2
    325e:	009b      	lsls	r3, r3, #2
    3260:	4413      	add	r3, r2
    3262:	005b      	lsls	r3, r3, #1
    3264:	1aca      	subs	r2, r1, r3
    3266:	b2d3      	uxtb	r3, r2
    3268:	3330      	adds	r3, #48	; 0x30
    326a:	b2d9      	uxtb	r1, r3
    326c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    326e:	1c5a      	adds	r2, r3, #1
    3270:	663a      	str	r2, [r7, #96]	; 0x60
    3272:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3276:	4413      	add	r3, r2
    3278:	460a      	mov	r2, r1
    327a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3280:	4a40      	ldr	r2, [pc, #256]	; (3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3282:	fba2 2303 	umull	r2, r3, r2, r3
    3286:	08db      	lsrs	r3, r3, #3
    3288:	657b      	str	r3, [r7, #84]	; 0x54
    328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    328c:	2b00      	cmp	r3, #0
    328e:	bf0c      	ite	eq
    3290:	2301      	moveq	r3, #1
    3292:	2300      	movne	r3, #0
    3294:	b2db      	uxtb	r3, r3
    3296:	2b00      	cmp	r3, #0
    3298:	d100      	bne.n	329c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    329a:	e7d4      	b.n	3246 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    329c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    329e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    32a0:	2b1f      	cmp	r3, #31
    32a2:	d806      	bhi.n	32b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    32a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32a6:	1e5a      	subs	r2, r3, #1
    32a8:	653a      	str	r2, [r7, #80]	; 0x50
    32aa:	2b00      	cmp	r3, #0
    32ac:	d001      	beq.n	32b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    32ae:	2301      	movs	r3, #1
    32b0:	e000      	b.n	32b4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    32b2:	2300      	movs	r3, #0
    32b4:	2b00      	cmp	r3, #0
    32b6:	d009      	beq.n	32cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    32b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    32ba:	1c5a      	adds	r2, r3, #1
    32bc:	663a      	str	r2, [r7, #96]	; 0x60
    32be:	f107 0268 	add.w	r2, r7, #104	; 0x68
    32c2:	4413      	add	r3, r2
    32c4:	2230      	movs	r2, #48	; 0x30
    32c6:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    32ca:	e7e8      	b.n	329e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    32cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    32ce:	2b1f      	cmp	r3, #31
    32d0:	d808      	bhi.n	32e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    32d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    32d4:	1c5a      	adds	r2, r3, #1
    32d6:	663a      	str	r2, [r7, #96]	; 0x60
    32d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
    32dc:	4413      	add	r3, r2
    32de:	222e      	movs	r2, #46	; 0x2e
    32e0:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    32e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    32e6:	2b1f      	cmp	r3, #31
    32e8:	d829      	bhi.n	333e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    32ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
    32ec:	4b26      	ldr	r3, [pc, #152]	; (3388 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    32ee:	fb83 1302 	smull	r1, r3, r3, r2
    32f2:	1099      	asrs	r1, r3, #2
    32f4:	17d3      	asrs	r3, r2, #31
    32f6:	1ac9      	subs	r1, r1, r3
    32f8:	460b      	mov	r3, r1
    32fa:	009b      	lsls	r3, r3, #2
    32fc:	440b      	add	r3, r1
    32fe:	005b      	lsls	r3, r3, #1
    3300:	1ad1      	subs	r1, r2, r3
    3302:	b2cb      	uxtb	r3, r1
    3304:	3330      	adds	r3, #48	; 0x30
    3306:	b2d9      	uxtb	r1, r3
    3308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    330a:	1c5a      	adds	r2, r3, #1
    330c:	663a      	str	r2, [r7, #96]	; 0x60
    330e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3312:	4413      	add	r3, r2
    3314:	460a      	mov	r2, r1
    3316:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    331a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    331c:	4a1a      	ldr	r2, [pc, #104]	; (3388 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    331e:	fb82 1203 	smull	r1, r2, r2, r3
    3322:	1092      	asrs	r2, r2, #2
    3324:	17db      	asrs	r3, r3, #31
    3326:	1ad3      	subs	r3, r2, r3
    3328:	65bb      	str	r3, [r7, #88]	; 0x58
    332a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    332c:	2b00      	cmp	r3, #0
    332e:	bf0c      	ite	eq
    3330:	2301      	moveq	r3, #1
    3332:	2300      	movne	r3, #0
    3334:	b2db      	uxtb	r3, r3
    3336:	2b00      	cmp	r3, #0
    3338:	d100      	bne.n	333c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    333a:	e7d3      	b.n	32e4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    333c:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    333e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3342:	f003 0302 	and.w	r3, r3, #2
    3346:	2b00      	cmp	r3, #0
    3348:	d120      	bne.n	338c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    334a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    334e:	f003 0301 	and.w	r3, r3, #1
    3352:	2b00      	cmp	r3, #0
    3354:	d01a      	beq.n	338c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    335a:	429a      	cmp	r2, r3
    335c:	d216      	bcs.n	338c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    335e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3360:	2b1f      	cmp	r3, #31
    3362:	d813      	bhi.n	338c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    3364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3366:	1c5a      	adds	r2, r3, #1
    3368:	663a      	str	r2, [r7, #96]	; 0x60
    336a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    336e:	4413      	add	r3, r2
    3370:	2230      	movs	r2, #48	; 0x30
    3372:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3376:	e7e2      	b.n	333e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    3378:	00000000 	.word	0x00000000
    337c:	00006bcc 	.word	0x00006bcc
    3380:	4f000000 	.word	0x4f000000
    3384:	cccccccd 	.word	0xcccccccd
    3388:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    338c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    338e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3390:	429a      	cmp	r2, r3
    3392:	d112      	bne.n	33ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3398:	2b00      	cmp	r3, #0
    339a:	d10b      	bne.n	33b4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    339c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33a0:	f003 0304 	and.w	r3, r3, #4
    33a4:	2b00      	cmp	r3, #0
    33a6:	d105      	bne.n	33b4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    33a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33ac:	f003 0308 	and.w	r3, r3, #8
    33b0:	2b00      	cmp	r3, #0
    33b2:	d002      	beq.n	33ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    33b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    33b6:	3b01      	subs	r3, #1
    33b8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    33ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    33bc:	2b1f      	cmp	r3, #31
    33be:	d82c      	bhi.n	341a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    33c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    33c4:	2b00      	cmp	r3, #0
    33c6:	d009      	beq.n	33dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    33c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    33ca:	1c5a      	adds	r2, r3, #1
    33cc:	663a      	str	r2, [r7, #96]	; 0x60
    33ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
    33d2:	4413      	add	r3, r2
    33d4:	222d      	movs	r2, #45	; 0x2d
    33d6:	f803 2c50 	strb.w	r2, [r3, #-80]
    33da:	e01e      	b.n	341a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    33dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33e0:	f003 0304 	and.w	r3, r3, #4
    33e4:	2b00      	cmp	r3, #0
    33e6:	d009      	beq.n	33fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    33e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    33ea:	1c5a      	adds	r2, r3, #1
    33ec:	663a      	str	r2, [r7, #96]	; 0x60
    33ee:	f107 0268 	add.w	r2, r7, #104	; 0x68
    33f2:	4413      	add	r3, r2
    33f4:	222b      	movs	r2, #43	; 0x2b
    33f6:	f803 2c50 	strb.w	r2, [r3, #-80]
    33fa:	e00e      	b.n	341a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    33fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3400:	f003 0308 	and.w	r3, r3, #8
    3404:	2b00      	cmp	r3, #0
    3406:	d008      	beq.n	341a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    3408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    340a:	1c5a      	adds	r2, r3, #1
    340c:	663a      	str	r2, [r7, #96]	; 0x60
    340e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3412:	4413      	add	r3, r2
    3414:	2220      	movs	r2, #32
    3416:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    341a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    341e:	f003 0302 	and.w	r3, r3, #2
    3422:	2b00      	cmp	r3, #0
    3424:	d117      	bne.n	3456 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    3426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    342a:	f003 0301 	and.w	r3, r3, #1
    342e:	2b00      	cmp	r3, #0
    3430:	d111      	bne.n	3456 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    3432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3434:	64fb      	str	r3, [r7, #76]	; 0x4c
    3436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    343a:	429a      	cmp	r2, r3
    343c:	d20b      	bcs.n	3456 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    343e:	68fa      	ldr	r2, [r7, #12]
    3440:	1c53      	adds	r3, r2, #1
    3442:	60fb      	str	r3, [r7, #12]
    3444:	697c      	ldr	r4, [r7, #20]
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	6939      	ldr	r1, [r7, #16]
    344a:	2020      	movs	r0, #32
    344c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    344e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3450:	3301      	adds	r3, #1
    3452:	64fb      	str	r3, [r7, #76]	; 0x4c
    3454:	e7ef      	b.n	3436 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3456:	2300      	movs	r3, #0
    3458:	64bb      	str	r3, [r7, #72]	; 0x48
    345a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    345c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    345e:	429a      	cmp	r2, r3
    3460:	d213      	bcs.n	348a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3462:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3466:	1ad3      	subs	r3, r2, r3
    3468:	3b01      	subs	r3, #1
    346a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    346e:	4413      	add	r3, r2
    3470:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    3474:	68fa      	ldr	r2, [r7, #12]
    3476:	1c53      	adds	r3, r2, #1
    3478:	60fb      	str	r3, [r7, #12]
    347a:	697c      	ldr	r4, [r7, #20]
    347c:	68bb      	ldr	r3, [r7, #8]
    347e:	6939      	ldr	r1, [r7, #16]
    3480:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3484:	3301      	adds	r3, #1
    3486:	64bb      	str	r3, [r7, #72]	; 0x48
    3488:	e7e7      	b.n	345a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    348a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    348e:	f003 0302 	and.w	r3, r3, #2
    3492:	2b00      	cmp	r3, #0
    3494:	d00e      	beq.n	34b4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    3496:	68fa      	ldr	r2, [r7, #12]
    3498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    349a:	1ad3      	subs	r3, r2, r3
    349c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    349e:	429a      	cmp	r2, r3
    34a0:	d908      	bls.n	34b4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    34a2:	68fa      	ldr	r2, [r7, #12]
    34a4:	1c53      	adds	r3, r2, #1
    34a6:	60fb      	str	r3, [r7, #12]
    34a8:	697c      	ldr	r4, [r7, #20]
    34aa:	68bb      	ldr	r3, [r7, #8]
    34ac:	6939      	ldr	r1, [r7, #16]
    34ae:	2020      	movs	r0, #32
    34b0:	47a0      	blx	r4
    while (idx - start_idx < width) {
    34b2:	e7f0      	b.n	3496 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    34b4:	68fb      	ldr	r3, [r7, #12]
}
    34b6:	4618      	mov	r0, r3
    34b8:	376c      	adds	r7, #108	; 0x6c
    34ba:	46bd      	mov	sp, r7
    34bc:	bd90      	pop	{r4, r7, pc}
    34be:	bf00      	nop

000034c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    34c0:	b5b0      	push	{r4, r5, r7, lr}
    34c2:	b0a0      	sub	sp, #128	; 0x80
    34c4:	af0a      	add	r7, sp, #40	; 0x28
    34c6:	60f8      	str	r0, [r7, #12]
    34c8:	60b9      	str	r1, [r7, #8]
    34ca:	607a      	str	r2, [r7, #4]
    34cc:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    34ce:	2300      	movs	r3, #0
    34d0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    34d2:	68bb      	ldr	r3, [r7, #8]
    34d4:	2b00      	cmp	r3, #0
    34d6:	d101      	bne.n	34dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    34d8:	4ba2      	ldr	r3, [pc, #648]	; (3764 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    34da:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    34dc:	683b      	ldr	r3, [r7, #0]
    34de:	781b      	ldrb	r3, [r3, #0]
    34e0:	2b00      	cmp	r3, #0
    34e2:	f000 8445 	beq.w	3d70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    34e6:	683b      	ldr	r3, [r7, #0]
    34e8:	781b      	ldrb	r3, [r3, #0]
    34ea:	2b25      	cmp	r3, #37	; 0x25
    34ec:	d00d      	beq.n	350a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    34ee:	683b      	ldr	r3, [r7, #0]
    34f0:	7818      	ldrb	r0, [r3, #0]
    34f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    34f4:	1c53      	adds	r3, r2, #1
    34f6:	647b      	str	r3, [r7, #68]	; 0x44
    34f8:	68fc      	ldr	r4, [r7, #12]
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	68b9      	ldr	r1, [r7, #8]
    34fe:	47a0      	blx	r4
      format++;
    3500:	683b      	ldr	r3, [r7, #0]
    3502:	3301      	adds	r3, #1
    3504:	603b      	str	r3, [r7, #0]
      continue;
    3506:	f000 bc31 	b.w	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    350a:	683b      	ldr	r3, [r7, #0]
    350c:	3301      	adds	r3, #1
    350e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    3510:	2300      	movs	r3, #0
    3512:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    3514:	683b      	ldr	r3, [r7, #0]
    3516:	781b      	ldrb	r3, [r3, #0]
    3518:	3b20      	subs	r3, #32
    351a:	2b10      	cmp	r3, #16
    351c:	d856      	bhi.n	35cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    351e:	a201      	add	r2, pc, #4	; (adr r2, 3524 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    3520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3524:	000035a5 	.word	0x000035a5
    3528:	000035cd 	.word	0x000035cd
    352c:	000035cd 	.word	0x000035cd
    3530:	000035b9 	.word	0x000035b9
    3534:	000035cd 	.word	0x000035cd
    3538:	000035cd 	.word	0x000035cd
    353c:	000035cd 	.word	0x000035cd
    3540:	000035cd 	.word	0x000035cd
    3544:	000035cd 	.word	0x000035cd
    3548:	000035cd 	.word	0x000035cd
    354c:	000035cd 	.word	0x000035cd
    3550:	00003591 	.word	0x00003591
    3554:	000035cd 	.word	0x000035cd
    3558:	0000357d 	.word	0x0000357d
    355c:	000035cd 	.word	0x000035cd
    3560:	000035cd 	.word	0x000035cd
    3564:	00003569 	.word	0x00003569
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    356a:	f043 0301 	orr.w	r3, r3, #1
    356e:	657b      	str	r3, [r7, #84]	; 0x54
    3570:	683b      	ldr	r3, [r7, #0]
    3572:	3301      	adds	r3, #1
    3574:	603b      	str	r3, [r7, #0]
    3576:	2301      	movs	r3, #1
    3578:	64bb      	str	r3, [r7, #72]	; 0x48
    357a:	e02a      	b.n	35d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    357e:	f043 0302 	orr.w	r3, r3, #2
    3582:	657b      	str	r3, [r7, #84]	; 0x54
    3584:	683b      	ldr	r3, [r7, #0]
    3586:	3301      	adds	r3, #1
    3588:	603b      	str	r3, [r7, #0]
    358a:	2301      	movs	r3, #1
    358c:	64bb      	str	r3, [r7, #72]	; 0x48
    358e:	e020      	b.n	35d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3592:	f043 0304 	orr.w	r3, r3, #4
    3596:	657b      	str	r3, [r7, #84]	; 0x54
    3598:	683b      	ldr	r3, [r7, #0]
    359a:	3301      	adds	r3, #1
    359c:	603b      	str	r3, [r7, #0]
    359e:	2301      	movs	r3, #1
    35a0:	64bb      	str	r3, [r7, #72]	; 0x48
    35a2:	e016      	b.n	35d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    35a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    35a6:	f043 0308 	orr.w	r3, r3, #8
    35aa:	657b      	str	r3, [r7, #84]	; 0x54
    35ac:	683b      	ldr	r3, [r7, #0]
    35ae:	3301      	adds	r3, #1
    35b0:	603b      	str	r3, [r7, #0]
    35b2:	2301      	movs	r3, #1
    35b4:	64bb      	str	r3, [r7, #72]	; 0x48
    35b6:	e00c      	b.n	35d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    35b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    35ba:	f043 0310 	orr.w	r3, r3, #16
    35be:	657b      	str	r3, [r7, #84]	; 0x54
    35c0:	683b      	ldr	r3, [r7, #0]
    35c2:	3301      	adds	r3, #1
    35c4:	603b      	str	r3, [r7, #0]
    35c6:	2301      	movs	r3, #1
    35c8:	64bb      	str	r3, [r7, #72]	; 0x48
    35ca:	e002      	b.n	35d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    35cc:	2300      	movs	r3, #0
    35ce:	64bb      	str	r3, [r7, #72]	; 0x48
    35d0:	bf00      	nop
      }
    } while (n);
    35d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35d4:	2b00      	cmp	r3, #0
    35d6:	d000      	beq.n	35da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    35d8:	e79c      	b.n	3514 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    35da:	2300      	movs	r3, #0
    35dc:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    35de:	683b      	ldr	r3, [r7, #0]
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	4618      	mov	r0, r3
    35e4:	f7ff fb18 	bl	2c18 <_is_digit(char)>
    35e8:	4603      	mov	r3, r0
    35ea:	2b00      	cmp	r3, #0
    35ec:	d005      	beq.n	35fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    35ee:	463b      	mov	r3, r7
    35f0:	4618      	mov	r0, r3
    35f2:	f7ff fb25 	bl	2c40 <_atoi(char const**)>
    35f6:	6538      	str	r0, [r7, #80]	; 0x50
    35f8:	e018      	b.n	362c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    35fa:	683b      	ldr	r3, [r7, #0]
    35fc:	781b      	ldrb	r3, [r3, #0]
    35fe:	2b2a      	cmp	r3, #42	; 0x2a
    3600:	d114      	bne.n	362c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    3602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3604:	1d1a      	adds	r2, r3, #4
    3606:	66ba      	str	r2, [r7, #104]	; 0x68
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    360e:	2b00      	cmp	r3, #0
    3610:	da07      	bge.n	3622 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    3612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3614:	f043 0302 	orr.w	r3, r3, #2
    3618:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    361c:	425b      	negs	r3, r3
    361e:	653b      	str	r3, [r7, #80]	; 0x50
    3620:	e001      	b.n	3626 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    3622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3624:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    3626:	683b      	ldr	r3, [r7, #0]
    3628:	3301      	adds	r3, #1
    362a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    362c:	2300      	movs	r3, #0
    362e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    3630:	683b      	ldr	r3, [r7, #0]
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	2b2e      	cmp	r3, #46	; 0x2e
    3636:	d124      	bne.n	3682 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    3638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    363a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    363e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    3640:	683b      	ldr	r3, [r7, #0]
    3642:	3301      	adds	r3, #1
    3644:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    3646:	683b      	ldr	r3, [r7, #0]
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	4618      	mov	r0, r3
    364c:	f7ff fae4 	bl	2c18 <_is_digit(char)>
    3650:	4603      	mov	r3, r0
    3652:	2b00      	cmp	r3, #0
    3654:	d005      	beq.n	3662 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    3656:	463b      	mov	r3, r7
    3658:	4618      	mov	r0, r3
    365a:	f7ff faf1 	bl	2c40 <_atoi(char const**)>
    365e:	64f8      	str	r0, [r7, #76]	; 0x4c
    3660:	e00f      	b.n	3682 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    3662:	683b      	ldr	r3, [r7, #0]
    3664:	781b      	ldrb	r3, [r3, #0]
    3666:	2b2a      	cmp	r3, #42	; 0x2a
    3668:	d10b      	bne.n	3682 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    366a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    366c:	1d1a      	adds	r2, r3, #4
    366e:	66ba      	str	r2, [r7, #104]	; 0x68
    3670:	681b      	ldr	r3, [r3, #0]
    3672:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    367a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    367c:	683b      	ldr	r3, [r7, #0]
    367e:	3301      	adds	r3, #1
    3680:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    3682:	683b      	ldr	r3, [r7, #0]
    3684:	781b      	ldrb	r3, [r3, #0]
    3686:	3b68      	subs	r3, #104	; 0x68
    3688:	2b12      	cmp	r3, #18
    368a:	d867      	bhi.n	375c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    368c:	a201      	add	r2, pc, #4	; (adr r2, 3694 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3692:	bf00      	nop
    3694:	00003707 	.word	0x00003707
    3698:	0000375d 	.word	0x0000375d
    369c:	0000373d 	.word	0x0000373d
    36a0:	0000375d 	.word	0x0000375d
    36a4:	000036e1 	.word	0x000036e1
    36a8:	0000375d 	.word	0x0000375d
    36ac:	0000375d 	.word	0x0000375d
    36b0:	0000375d 	.word	0x0000375d
    36b4:	0000375d 	.word	0x0000375d
    36b8:	0000375d 	.word	0x0000375d
    36bc:	0000375d 	.word	0x0000375d
    36c0:	0000375d 	.word	0x0000375d
    36c4:	0000372d 	.word	0x0000372d
    36c8:	0000375d 	.word	0x0000375d
    36cc:	0000375d 	.word	0x0000375d
    36d0:	0000375d 	.word	0x0000375d
    36d4:	0000375d 	.word	0x0000375d
    36d8:	0000375d 	.word	0x0000375d
    36dc:	0000374d 	.word	0x0000374d
      case 'l' :
        flags |= FLAGS_LONG;
    36e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    36e6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    36e8:	683b      	ldr	r3, [r7, #0]
    36ea:	3301      	adds	r3, #1
    36ec:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    36ee:	683b      	ldr	r3, [r7, #0]
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	2b6c      	cmp	r3, #108	; 0x6c
    36f4:	d134      	bne.n	3760 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    36f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    36fc:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    36fe:	683b      	ldr	r3, [r7, #0]
    3700:	3301      	adds	r3, #1
    3702:	603b      	str	r3, [r7, #0]
        }
        break;
    3704:	e02c      	b.n	3760 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    3706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    370c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    370e:	683b      	ldr	r3, [r7, #0]
    3710:	3301      	adds	r3, #1
    3712:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    3714:	683b      	ldr	r3, [r7, #0]
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	2b68      	cmp	r3, #104	; 0x68
    371a:	d125      	bne.n	3768 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    371c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    371e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3722:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3724:	683b      	ldr	r3, [r7, #0]
    3726:	3301      	adds	r3, #1
    3728:	603b      	str	r3, [r7, #0]
        }
        break;
    372a:	e01d      	b.n	3768 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    372c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3732:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3734:	683b      	ldr	r3, [r7, #0]
    3736:	3301      	adds	r3, #1
    3738:	603b      	str	r3, [r7, #0]
        break;
    373a:	e016      	b.n	376a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    373c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    373e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3742:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3744:	683b      	ldr	r3, [r7, #0]
    3746:	3301      	adds	r3, #1
    3748:	603b      	str	r3, [r7, #0]
        break;
    374a:	e00e      	b.n	376a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3752:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	3301      	adds	r3, #1
    3758:	603b      	str	r3, [r7, #0]
        break;
    375a:	e006      	b.n	376a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    375c:	bf00      	nop
    375e:	e004      	b.n	376a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    3760:	bf00      	nop
    3762:	e002      	b.n	376a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    3764:	00002ba9 	.word	0x00002ba9
        break;
    3768:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    376a:	683b      	ldr	r3, [r7, #0]
    376c:	781b      	ldrb	r3, [r3, #0]
    376e:	3b25      	subs	r3, #37	; 0x25
    3770:	2b53      	cmp	r3, #83	; 0x53
    3772:	f200 82ee 	bhi.w	3d52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    3776:	a201      	add	r2, pc, #4	; (adr r2, 377c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    3778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    377c:	00003d3b 	.word	0x00003d3b
    3780:	00003d53 	.word	0x00003d53
    3784:	00003d53 	.word	0x00003d53
    3788:	00003d53 	.word	0x00003d53
    378c:	00003d53 	.word	0x00003d53
    3790:	00003d53 	.word	0x00003d53
    3794:	00003d53 	.word	0x00003d53
    3798:	00003d53 	.word	0x00003d53
    379c:	00003d53 	.word	0x00003d53
    37a0:	00003d53 	.word	0x00003d53
    37a4:	00003d53 	.word	0x00003d53
    37a8:	00003d53 	.word	0x00003d53
    37ac:	00003d53 	.word	0x00003d53
    37b0:	00003d53 	.word	0x00003d53
    37b4:	00003d53 	.word	0x00003d53
    37b8:	00003d53 	.word	0x00003d53
    37bc:	00003d53 	.word	0x00003d53
    37c0:	00003d53 	.word	0x00003d53
    37c4:	00003d53 	.word	0x00003d53
    37c8:	00003d53 	.word	0x00003d53
    37cc:	00003d53 	.word	0x00003d53
    37d0:	00003d53 	.word	0x00003d53
    37d4:	00003d53 	.word	0x00003d53
    37d8:	00003d53 	.word	0x00003d53
    37dc:	00003d53 	.word	0x00003d53
    37e0:	00003d53 	.word	0x00003d53
    37e4:	00003d53 	.word	0x00003d53
    37e8:	00003d53 	.word	0x00003d53
    37ec:	00003d53 	.word	0x00003d53
    37f0:	00003d53 	.word	0x00003d53
    37f4:	00003d53 	.word	0x00003d53
    37f8:	00003d53 	.word	0x00003d53
    37fc:	00003d53 	.word	0x00003d53
    3800:	00003b59 	.word	0x00003b59
    3804:	00003d53 	.word	0x00003d53
    3808:	00003d53 	.word	0x00003d53
    380c:	00003d53 	.word	0x00003d53
    3810:	00003d53 	.word	0x00003d53
    3814:	00003d53 	.word	0x00003d53
    3818:	00003d53 	.word	0x00003d53
    381c:	00003d53 	.word	0x00003d53
    3820:	00003d53 	.word	0x00003d53
    3824:	00003d53 	.word	0x00003d53
    3828:	00003d53 	.word	0x00003d53
    382c:	00003d53 	.word	0x00003d53
    3830:	00003d53 	.word	0x00003d53
    3834:	00003d53 	.word	0x00003d53
    3838:	00003d53 	.word	0x00003d53
    383c:	00003d53 	.word	0x00003d53
    3840:	00003d53 	.word	0x00003d53
    3844:	00003d53 	.word	0x00003d53
    3848:	000038cd 	.word	0x000038cd
    384c:	00003d53 	.word	0x00003d53
    3850:	00003d53 	.word	0x00003d53
    3854:	00003d53 	.word	0x00003d53
    3858:	00003d53 	.word	0x00003d53
    385c:	00003d53 	.word	0x00003d53
    3860:	00003d53 	.word	0x00003d53
    3864:	00003d53 	.word	0x00003d53
    3868:	00003d53 	.word	0x00003d53
    386c:	00003d53 	.word	0x00003d53
    3870:	000038cd 	.word	0x000038cd
    3874:	00003b95 	.word	0x00003b95
    3878:	000038cd 	.word	0x000038cd
    387c:	00003d53 	.word	0x00003d53
    3880:	00003b59 	.word	0x00003b59
    3884:	00003d53 	.word	0x00003d53
    3888:	00003d53 	.word	0x00003d53
    388c:	000038cd 	.word	0x000038cd
    3890:	00003d53 	.word	0x00003d53
    3894:	00003d53 	.word	0x00003d53
    3898:	00003d53 	.word	0x00003d53
    389c:	00003d53 	.word	0x00003d53
    38a0:	00003d53 	.word	0x00003d53
    38a4:	000038cd 	.word	0x000038cd
    38a8:	00003cf3 	.word	0x00003cf3
    38ac:	00003d53 	.word	0x00003d53
    38b0:	00003d53 	.word	0x00003d53
    38b4:	00003c1d 	.word	0x00003c1d
    38b8:	00003d53 	.word	0x00003d53
    38bc:	000038cd 	.word	0x000038cd
    38c0:	00003d53 	.word	0x00003d53
    38c4:	00003d53 	.word	0x00003d53
    38c8:	000038cd 	.word	0x000038cd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    38cc:	683b      	ldr	r3, [r7, #0]
    38ce:	781b      	ldrb	r3, [r3, #0]
    38d0:	2b78      	cmp	r3, #120	; 0x78
    38d2:	d003      	beq.n	38dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	781b      	ldrb	r3, [r3, #0]
    38d8:	2b58      	cmp	r3, #88	; 0x58
    38da:	d102      	bne.n	38e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    38dc:	2310      	movs	r3, #16
    38de:	643b      	str	r3, [r7, #64]	; 0x40
    38e0:	e013      	b.n	390a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    38e2:	683b      	ldr	r3, [r7, #0]
    38e4:	781b      	ldrb	r3, [r3, #0]
    38e6:	2b6f      	cmp	r3, #111	; 0x6f
    38e8:	d102      	bne.n	38f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    38ea:	2308      	movs	r3, #8
    38ec:	643b      	str	r3, [r7, #64]	; 0x40
    38ee:	e00c      	b.n	390a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    38f0:	683b      	ldr	r3, [r7, #0]
    38f2:	781b      	ldrb	r3, [r3, #0]
    38f4:	2b62      	cmp	r3, #98	; 0x62
    38f6:	d102      	bne.n	38fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    38f8:	2302      	movs	r3, #2
    38fa:	643b      	str	r3, [r7, #64]	; 0x40
    38fc:	e005      	b.n	390a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    38fe:	230a      	movs	r3, #10
    3900:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    3902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3904:	f023 0310 	bic.w	r3, r3, #16
    3908:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    390a:	683b      	ldr	r3, [r7, #0]
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	2b58      	cmp	r3, #88	; 0x58
    3910:	d103      	bne.n	391a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    3912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3914:	f043 0320 	orr.w	r3, r3, #32
    3918:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	781b      	ldrb	r3, [r3, #0]
    391e:	2b69      	cmp	r3, #105	; 0x69
    3920:	d007      	beq.n	3932 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    3922:	683b      	ldr	r3, [r7, #0]
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	2b64      	cmp	r3, #100	; 0x64
    3928:	d003      	beq.n	3932 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    392a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    392c:	f023 030c 	bic.w	r3, r3, #12
    3930:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    3932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3938:	2b00      	cmp	r3, #0
    393a:	d003      	beq.n	3944 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    393e:	f023 0301 	bic.w	r3, r3, #1
    3942:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    3944:	683b      	ldr	r3, [r7, #0]
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	2b69      	cmp	r3, #105	; 0x69
    394a:	d004      	beq.n	3956 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	781b      	ldrb	r3, [r3, #0]
    3950:	2b64      	cmp	r3, #100	; 0x64
    3952:	f040 808d 	bne.w	3a70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    3956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3958:	f403 7300 	and.w	r3, r3, #512	; 0x200
    395c:	2b00      	cmp	r3, #0
    395e:	d02e      	beq.n	39be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    3960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3962:	3307      	adds	r3, #7
    3964:	f023 0307 	bic.w	r3, r3, #7
    3968:	f103 0208 	add.w	r2, r3, #8
    396c:	66ba      	str	r2, [r7, #104]	; 0x68
    396e:	e9d3 3400 	ldrd	r3, r4, [r3]
    3972:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3976:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    397a:	2b00      	cmp	r3, #0
    397c:	f174 0200 	sbcs.w	r2, r4, #0
    3980:	da02      	bge.n	3988 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    3982:	425b      	negs	r3, r3
    3984:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    3988:	4619      	mov	r1, r3
    398a:	4622      	mov	r2, r4
    398c:	697b      	ldr	r3, [r7, #20]
    398e:	0fdb      	lsrs	r3, r3, #31
    3990:	b2d8      	uxtb	r0, r3
    3992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3994:	f04f 0400 	mov.w	r4, #0
    3998:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    399a:	9508      	str	r5, [sp, #32]
    399c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    399e:	9507      	str	r5, [sp, #28]
    39a0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    39a2:	9506      	str	r5, [sp, #24]
    39a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    39a8:	9002      	str	r0, [sp, #8]
    39aa:	e9cd 1200 	strd	r1, r2, [sp]
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    39b2:	68b9      	ldr	r1, [r7, #8]
    39b4:	68f8      	ldr	r0, [r7, #12]
    39b6:	f7ff faf0 	bl	2f9a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    39ba:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    39bc:	e0c8      	b.n	3b50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    39be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    39c4:	2b00      	cmp	r3, #0
    39c6:	d01e      	beq.n	3a06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    39c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    39ca:	1d1a      	adds	r2, r3, #4
    39cc:	66ba      	str	r2, [r7, #104]	; 0x68
    39ce:	681b      	ldr	r3, [r3, #0]
    39d0:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    39d2:	69fb      	ldr	r3, [r7, #28]
    39d4:	2b00      	cmp	r3, #0
    39d6:	bfb8      	it	lt
    39d8:	425b      	neglt	r3, r3
    39da:	4619      	mov	r1, r3
    39dc:	69fb      	ldr	r3, [r7, #28]
    39de:	0fdb      	lsrs	r3, r3, #31
    39e0:	b2db      	uxtb	r3, r3
    39e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    39e4:	9205      	str	r2, [sp, #20]
    39e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    39e8:	9204      	str	r2, [sp, #16]
    39ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    39ec:	9203      	str	r2, [sp, #12]
    39ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    39f0:	9202      	str	r2, [sp, #8]
    39f2:	9301      	str	r3, [sp, #4]
    39f4:	9100      	str	r1, [sp, #0]
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    39fa:	68b9      	ldr	r1, [r7, #8]
    39fc:	68f8      	ldr	r0, [r7, #12]
    39fe:	f7ff fa64 	bl	2eca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3a02:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3a04:	e0a4      	b.n	3b50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d005      	beq.n	3a1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    3a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a12:	1d1a      	adds	r2, r3, #4
    3a14:	66ba      	str	r2, [r7, #104]	; 0x68
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	b2db      	uxtb	r3, r3
    3a1a:	e00e      	b.n	3a3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    3a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3a22:	2b00      	cmp	r3, #0
    3a24:	d005      	beq.n	3a32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    3a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a28:	1d1a      	adds	r2, r3, #4
    3a2a:	66ba      	str	r2, [r7, #104]	; 0x68
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	b21b      	sxth	r3, r3
    3a30:	e003      	b.n	3a3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    3a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a34:	1d1a      	adds	r2, r3, #4
    3a36:	66ba      	str	r2, [r7, #104]	; 0x68
    3a38:	681b      	ldr	r3, [r3, #0]
    3a3a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3a3c:	6a3b      	ldr	r3, [r7, #32]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	bfb8      	it	lt
    3a42:	425b      	neglt	r3, r3
    3a44:	4619      	mov	r1, r3
    3a46:	6a3b      	ldr	r3, [r7, #32]
    3a48:	0fdb      	lsrs	r3, r3, #31
    3a4a:	b2db      	uxtb	r3, r3
    3a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3a4e:	9205      	str	r2, [sp, #20]
    3a50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3a52:	9204      	str	r2, [sp, #16]
    3a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3a56:	9203      	str	r2, [sp, #12]
    3a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3a5a:	9202      	str	r2, [sp, #8]
    3a5c:	9301      	str	r3, [sp, #4]
    3a5e:	9100      	str	r1, [sp, #0]
    3a60:	687b      	ldr	r3, [r7, #4]
    3a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3a64:	68b9      	ldr	r1, [r7, #8]
    3a66:	68f8      	ldr	r0, [r7, #12]
    3a68:	f7ff fa2f 	bl	2eca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3a6c:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3a6e:	e06f      	b.n	3b50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    3a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3a76:	2b00      	cmp	r3, #0
    3a78:	d020      	beq.n	3abc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a7c:	3307      	adds	r3, #7
    3a7e:	f023 0307 	bic.w	r3, r3, #7
    3a82:	f103 0208 	add.w	r2, r3, #8
    3a86:	66ba      	str	r2, [r7, #104]	; 0x68
    3a88:	e9d3 3400 	ldrd	r3, r4, [r3]
    3a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3a8e:	4611      	mov	r1, r2
    3a90:	f04f 0200 	mov.w	r2, #0
    3a94:	6d78      	ldr	r0, [r7, #84]	; 0x54
    3a96:	9008      	str	r0, [sp, #32]
    3a98:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3a9a:	9007      	str	r0, [sp, #28]
    3a9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3a9e:	9006      	str	r0, [sp, #24]
    3aa0:	e9cd 1204 	strd	r1, r2, [sp, #16]
    3aa4:	2200      	movs	r2, #0
    3aa6:	9202      	str	r2, [sp, #8]
    3aa8:	e9cd 3400 	strd	r3, r4, [sp]
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ab0:	68b9      	ldr	r1, [r7, #8]
    3ab2:	68f8      	ldr	r0, [r7, #12]
    3ab4:	f7ff fa71 	bl	2f9a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3ab8:	6478      	str	r0, [r7, #68]	; 0x44
    3aba:	e049      	b.n	3b50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    3abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d016      	beq.n	3af4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ac8:	1d1a      	adds	r2, r3, #4
    3aca:	66ba      	str	r2, [r7, #104]	; 0x68
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3ad0:	9205      	str	r2, [sp, #20]
    3ad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3ad4:	9204      	str	r2, [sp, #16]
    3ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3ad8:	9203      	str	r2, [sp, #12]
    3ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3adc:	9202      	str	r2, [sp, #8]
    3ade:	2200      	movs	r2, #0
    3ae0:	9201      	str	r2, [sp, #4]
    3ae2:	9300      	str	r3, [sp, #0]
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ae8:	68b9      	ldr	r1, [r7, #8]
    3aea:	68f8      	ldr	r0, [r7, #12]
    3aec:	f7ff f9ed 	bl	2eca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3af0:	6478      	str	r0, [r7, #68]	; 0x44
    3af2:	e02d      	b.n	3b50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3afa:	2b00      	cmp	r3, #0
    3afc:	d005      	beq.n	3b0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    3afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b00:	1d1a      	adds	r2, r3, #4
    3b02:	66ba      	str	r2, [r7, #104]	; 0x68
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	b2db      	uxtb	r3, r3
    3b08:	e00e      	b.n	3b28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    3b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3b10:	2b00      	cmp	r3, #0
    3b12:	d005      	beq.n	3b20 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    3b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b16:	1d1a      	adds	r2, r3, #4
    3b18:	66ba      	str	r2, [r7, #104]	; 0x68
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	b29b      	uxth	r3, r3
    3b1e:	e003      	b.n	3b28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    3b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b22:	1d1a      	adds	r2, r3, #4
    3b24:	66ba      	str	r2, [r7, #104]	; 0x68
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b2c:	9305      	str	r3, [sp, #20]
    3b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3b30:	9304      	str	r3, [sp, #16]
    3b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3b34:	9303      	str	r3, [sp, #12]
    3b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3b38:	9302      	str	r3, [sp, #8]
    3b3a:	2300      	movs	r3, #0
    3b3c:	9301      	str	r3, [sp, #4]
    3b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b40:	9300      	str	r3, [sp, #0]
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3b46:	68b9      	ldr	r1, [r7, #8]
    3b48:	68f8      	ldr	r0, [r7, #12]
    3b4a:	f7ff f9be 	bl	2eca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3b4e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    3b50:	683b      	ldr	r3, [r7, #0]
    3b52:	3301      	adds	r3, #1
    3b54:	603b      	str	r3, [r7, #0]
        break;
    3b56:	e109      	b.n	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b5a:	3307      	adds	r3, #7
    3b5c:	f023 0307 	bic.w	r3, r3, #7
    3b60:	f103 0208 	add.w	r2, r3, #8
    3b64:	66ba      	str	r2, [r7, #104]	; 0x68
    3b66:	ed93 7b00 	vldr	d7, [r3]
    3b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b6c:	9302      	str	r3, [sp, #8]
    3b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3b70:	9301      	str	r3, [sp, #4]
    3b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3b74:	9300      	str	r3, [sp, #0]
    3b76:	eeb0 0a47 	vmov.f32	s0, s14
    3b7a:	eef0 0a67 	vmov.f32	s1, s15
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3b82:	68b9      	ldr	r1, [r7, #8]
    3b84:	68f8      	ldr	r0, [r7, #12]
    3b86:	f7ff fa79 	bl	307c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    3b8a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    3b8c:	683b      	ldr	r3, [r7, #0]
    3b8e:	3301      	adds	r3, #1
    3b90:	603b      	str	r3, [r7, #0]
        break;
    3b92:	e0eb      	b.n	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    3b94:	2301      	movs	r3, #1
    3b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    3b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b9a:	f003 0302 	and.w	r3, r3, #2
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d113      	bne.n	3bca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    3ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ba4:	1c5a      	adds	r2, r3, #1
    3ba6:	63fa      	str	r2, [r7, #60]	; 0x3c
    3ba8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3baa:	429a      	cmp	r2, r3
    3bac:	bf8c      	ite	hi
    3bae:	2301      	movhi	r3, #1
    3bb0:	2300      	movls	r3, #0
    3bb2:	b2db      	uxtb	r3, r3
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d008      	beq.n	3bca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    3bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3bba:	1c53      	adds	r3, r2, #1
    3bbc:	647b      	str	r3, [r7, #68]	; 0x44
    3bbe:	68fc      	ldr	r4, [r7, #12]
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	68b9      	ldr	r1, [r7, #8]
    3bc4:	2020      	movs	r0, #32
    3bc6:	47a0      	blx	r4
          while (l++ < width) {
    3bc8:	e7eb      	b.n	3ba2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3bcc:	1d1a      	adds	r2, r3, #4
    3bce:	66ba      	str	r2, [r7, #104]	; 0x68
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	b2d8      	uxtb	r0, r3
    3bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3bd6:	1c53      	adds	r3, r2, #1
    3bd8:	647b      	str	r3, [r7, #68]	; 0x44
    3bda:	68fc      	ldr	r4, [r7, #12]
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	68b9      	ldr	r1, [r7, #8]
    3be0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    3be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3be4:	f003 0302 	and.w	r3, r3, #2
    3be8:	2b00      	cmp	r3, #0
    3bea:	d013      	beq.n	3c14 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    3bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bee:	1c5a      	adds	r2, r3, #1
    3bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
    3bf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3bf4:	429a      	cmp	r2, r3
    3bf6:	bf8c      	ite	hi
    3bf8:	2301      	movhi	r3, #1
    3bfa:	2300      	movls	r3, #0
    3bfc:	b2db      	uxtb	r3, r3
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d008      	beq.n	3c14 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    3c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3c04:	1c53      	adds	r3, r2, #1
    3c06:	647b      	str	r3, [r7, #68]	; 0x44
    3c08:	68fc      	ldr	r4, [r7, #12]
    3c0a:	687b      	ldr	r3, [r7, #4]
    3c0c:	68b9      	ldr	r1, [r7, #8]
    3c0e:	2020      	movs	r0, #32
    3c10:	47a0      	blx	r4
          while (l++ < width) {
    3c12:	e7eb      	b.n	3bec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    3c14:	683b      	ldr	r3, [r7, #0]
    3c16:	3301      	adds	r3, #1
    3c18:	603b      	str	r3, [r7, #0]
        break;
    3c1a:	e0a7      	b.n	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    3c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c1e:	1d1a      	adds	r2, r3, #4
    3c20:	66ba      	str	r2, [r7, #104]	; 0x68
    3c22:	681b      	ldr	r3, [r3, #0]
    3c24:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    3c26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3c28:	f7fe ffdf 	bl	2bea <_strlen(char const*)>
    3c2c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    3c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3c34:	2b00      	cmp	r3, #0
    3c36:	d007      	beq.n	3c48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    3c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c3c:	429a      	cmp	r2, r3
    3c3e:	d201      	bcs.n	3c44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    3c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c42:	e000      	b.n	3c46 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    3c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    3c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c4a:	f003 0302 	and.w	r3, r3, #2
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d113      	bne.n	3c7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    3c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c54:	1c5a      	adds	r2, r3, #1
    3c56:	637a      	str	r2, [r7, #52]	; 0x34
    3c58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3c5a:	429a      	cmp	r2, r3
    3c5c:	bf8c      	ite	hi
    3c5e:	2301      	movhi	r3, #1
    3c60:	2300      	movls	r3, #0
    3c62:	b2db      	uxtb	r3, r3
    3c64:	2b00      	cmp	r3, #0
    3c66:	d008      	beq.n	3c7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    3c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3c6a:	1c53      	adds	r3, r2, #1
    3c6c:	647b      	str	r3, [r7, #68]	; 0x44
    3c6e:	68fc      	ldr	r4, [r7, #12]
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	68b9      	ldr	r1, [r7, #8]
    3c74:	2020      	movs	r0, #32
    3c76:	47a0      	blx	r4
          while (l++ < width) {
    3c78:	e7eb      	b.n	3c52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c7c:	781b      	ldrb	r3, [r3, #0]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d00b      	beq.n	3c9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    3c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d004      	beq.n	3c96 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    3c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c8e:	1e5a      	subs	r2, r3, #1
    3c90:	64fa      	str	r2, [r7, #76]	; 0x4c
    3c92:	2b00      	cmp	r3, #0
    3c94:	d001      	beq.n	3c9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    3c96:	2301      	movs	r3, #1
    3c98:	e000      	b.n	3c9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    3c9a:	2300      	movs	r3, #0
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d00b      	beq.n	3cb8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    3ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ca2:	1c5a      	adds	r2, r3, #1
    3ca4:	63ba      	str	r2, [r7, #56]	; 0x38
    3ca6:	7818      	ldrb	r0, [r3, #0]
    3ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3caa:	1c53      	adds	r3, r2, #1
    3cac:	647b      	str	r3, [r7, #68]	; 0x44
    3cae:	68fc      	ldr	r4, [r7, #12]
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	68b9      	ldr	r1, [r7, #8]
    3cb4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3cb6:	e7e0      	b.n	3c7a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    3cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cba:	f003 0302 	and.w	r3, r3, #2
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d013      	beq.n	3cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    3cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3cc4:	1c5a      	adds	r2, r3, #1
    3cc6:	637a      	str	r2, [r7, #52]	; 0x34
    3cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3cca:	429a      	cmp	r2, r3
    3ccc:	bf8c      	ite	hi
    3cce:	2301      	movhi	r3, #1
    3cd0:	2300      	movls	r3, #0
    3cd2:	b2db      	uxtb	r3, r3
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	d008      	beq.n	3cea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    3cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3cda:	1c53      	adds	r3, r2, #1
    3cdc:	647b      	str	r3, [r7, #68]	; 0x44
    3cde:	68fc      	ldr	r4, [r7, #12]
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	68b9      	ldr	r1, [r7, #8]
    3ce4:	2020      	movs	r0, #32
    3ce6:	47a0      	blx	r4
          while (l++ < width) {
    3ce8:	e7eb      	b.n	3cc2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    3cea:	683b      	ldr	r3, [r7, #0]
    3cec:	3301      	adds	r3, #1
    3cee:	603b      	str	r3, [r7, #0]
        break;
    3cf0:	e03c      	b.n	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    3cf2:	2308      	movs	r3, #8
    3cf4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    3cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cf8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    3cfc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    3cfe:	2300      	movs	r3, #0
    3d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d06:	1d1a      	adds	r2, r3, #4
    3d08:	66ba      	str	r2, [r7, #104]	; 0x68
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	461a      	mov	r2, r3
    3d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d10:	9305      	str	r3, [sp, #20]
    3d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3d14:	9304      	str	r3, [sp, #16]
    3d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d18:	9303      	str	r3, [sp, #12]
    3d1a:	2310      	movs	r3, #16
    3d1c:	9302      	str	r3, [sp, #8]
    3d1e:	2300      	movs	r3, #0
    3d20:	9301      	str	r3, [sp, #4]
    3d22:	9200      	str	r2, [sp, #0]
    3d24:	687b      	ldr	r3, [r7, #4]
    3d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d28:	68b9      	ldr	r1, [r7, #8]
    3d2a:	68f8      	ldr	r0, [r7, #12]
    3d2c:	f7ff f8cd 	bl	2eca <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3d30:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    3d32:	683b      	ldr	r3, [r7, #0]
    3d34:	3301      	adds	r3, #1
    3d36:	603b      	str	r3, [r7, #0]
        break;
    3d38:	e018      	b.n	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    3d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d3c:	1c53      	adds	r3, r2, #1
    3d3e:	647b      	str	r3, [r7, #68]	; 0x44
    3d40:	68fc      	ldr	r4, [r7, #12]
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	68b9      	ldr	r1, [r7, #8]
    3d46:	2025      	movs	r0, #37	; 0x25
    3d48:	47a0      	blx	r4
        format++;
    3d4a:	683b      	ldr	r3, [r7, #0]
    3d4c:	3301      	adds	r3, #1
    3d4e:	603b      	str	r3, [r7, #0]
        break;
    3d50:	e00c      	b.n	3d6c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    3d52:	683b      	ldr	r3, [r7, #0]
    3d54:	7818      	ldrb	r0, [r3, #0]
    3d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d58:	1c53      	adds	r3, r2, #1
    3d5a:	647b      	str	r3, [r7, #68]	; 0x44
    3d5c:	68fc      	ldr	r4, [r7, #12]
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	68b9      	ldr	r1, [r7, #8]
    3d62:	47a0      	blx	r4
        format++;
    3d64:	683b      	ldr	r3, [r7, #0]
    3d66:	3301      	adds	r3, #1
    3d68:	603b      	str	r3, [r7, #0]
        break;
    3d6a:	bf00      	nop
  while (*format)
    3d6c:	f7ff bbb6 	b.w	34dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    3d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	429a      	cmp	r2, r3
    3d76:	d302      	bcc.n	3d7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	1e5a      	subs	r2, r3, #1
    3d7c:	e000      	b.n	3d80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    3d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d80:	68fc      	ldr	r4, [r7, #12]
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	68b9      	ldr	r1, [r7, #8]
    3d86:	2000      	movs	r0, #0
    3d88:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    3d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    3d8c:	4618      	mov	r0, r3
    3d8e:	3758      	adds	r7, #88	; 0x58
    3d90:	46bd      	mov	sp, r7
    3d92:	bdb0      	pop	{r4, r5, r7, pc}

00003d94 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    3d94:	b40f      	push	{r0, r1, r2, r3}
    3d96:	b580      	push	{r7, lr}
    3d98:	b086      	sub	sp, #24
    3d9a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    3d9c:	f107 031c 	add.w	r3, r7, #28
    3da0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3da2:	1d39      	adds	r1, r7, #4
    3da4:	68bb      	ldr	r3, [r7, #8]
    3da6:	9300      	str	r3, [sp, #0]
    3da8:	69bb      	ldr	r3, [r7, #24]
    3daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3dae:	4806      	ldr	r0, [pc, #24]	; (3dc8 <printf+0x34>)
    3db0:	f7ff fb86 	bl	34c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    3db4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    3db6:	68fb      	ldr	r3, [r7, #12]
}
    3db8:	4618      	mov	r0, r3
    3dba:	3710      	adds	r7, #16
    3dbc:	46bd      	mov	sp, r7
    3dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    3dc2:	b004      	add	sp, #16
    3dc4:	4770      	bx	lr
    3dc6:	bf00      	nop
    3dc8:	00002bc5 	.word	0x00002bc5

00003dcc <NVIC_EnableIRQ>:
{
    3dcc:	b480      	push	{r7}
    3dce:	b083      	sub	sp, #12
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	f003 021f 	and.w	r2, r3, #31
    3dda:	4907      	ldr	r1, [pc, #28]	; (3df8 <NVIC_EnableIRQ+0x2c>)
    3ddc:	687b      	ldr	r3, [r7, #4]
    3dde:	095b      	lsrs	r3, r3, #5
    3de0:	2001      	movs	r0, #1
    3de2:	fa00 f202 	lsl.w	r2, r0, r2
    3de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3dea:	bf00      	nop
    3dec:	370c      	adds	r7, #12
    3dee:	46bd      	mov	sp, r7
    3df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop
    3df8:	e000e100 	.word	0xe000e100

00003dfc <NVIC_DisableIRQ>:
{
    3dfc:	b480      	push	{r7}
    3dfe:	b083      	sub	sp, #12
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	f003 021f 	and.w	r2, r3, #31
    3e0a:	4907      	ldr	r1, [pc, #28]	; (3e28 <NVIC_DisableIRQ+0x2c>)
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	095b      	lsrs	r3, r3, #5
    3e10:	2001      	movs	r0, #1
    3e12:	fa00 f202 	lsl.w	r2, r0, r2
    3e16:	3320      	adds	r3, #32
    3e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3e1c:	bf00      	nop
    3e1e:	370c      	adds	r7, #12
    3e20:	46bd      	mov	sp, r7
    3e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e26:	4770      	bx	lr
    3e28:	e000e100 	.word	0xe000e100

00003e2c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3e2c:	b480      	push	{r7}
    3e2e:	b083      	sub	sp, #12
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
    3e34:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	2b00      	cmp	r3, #0
    3e3a:	da0b      	bge.n	3e54 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e3c:	683b      	ldr	r3, [r7, #0]
    3e3e:	b2da      	uxtb	r2, r3
    3e40:	490d      	ldr	r1, [pc, #52]	; (3e78 <NVIC_SetPriority+0x4c>)
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	f003 030f 	and.w	r3, r3, #15
    3e48:	3b04      	subs	r3, #4
    3e4a:	0152      	lsls	r2, r2, #5
    3e4c:	b2d2      	uxtb	r2, r2
    3e4e:	440b      	add	r3, r1
    3e50:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    3e52:	e00a      	b.n	3e6a <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e54:	683b      	ldr	r3, [r7, #0]
    3e56:	b2db      	uxtb	r3, r3
    3e58:	4a08      	ldr	r2, [pc, #32]	; (3e7c <NVIC_SetPriority+0x50>)
    3e5a:	6879      	ldr	r1, [r7, #4]
    3e5c:	4608      	mov	r0, r1
    3e5e:	015b      	lsls	r3, r3, #5
    3e60:	b2d9      	uxtb	r1, r3
    3e62:	1813      	adds	r3, r2, r0
    3e64:	460a      	mov	r2, r1
    3e66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    3e6a:	bf00      	nop
    3e6c:	370c      	adds	r7, #12
    3e6e:	46bd      	mov	sp, r7
    3e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e74:	4770      	bx	lr
    3e76:	bf00      	nop
    3e78:	e000ed00 	.word	0xe000ed00
    3e7c:	e000e100 	.word	0xe000e100

00003e80 <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    3e80:	b480      	push	{r7}
    3e82:	b083      	sub	sp, #12
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    3e88:	4b0c      	ldr	r3, [pc, #48]	; (3ebc <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	68da      	ldr	r2, [r3, #12]
    3e8e:	4b0b      	ldr	r3, [pc, #44]	; (3ebc <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3e96:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    3e98:	4b09      	ldr	r3, [pc, #36]	; (3ec0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	2200      	movs	r2, #0
    3e9e:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    3ea0:	4b07      	ldr	r3, [pc, #28]	; (3ec0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	681a      	ldr	r2, [r3, #0]
    3ea6:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	f042 0201 	orr.w	r2, r2, #1
    3eae:	601a      	str	r2, [r3, #0]
  }
    3eb0:	bf00      	nop
    3eb2:	370c      	adds	r7, #12
    3eb4:	46bd      	mov	sp, r7
    3eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eba:	4770      	bx	lr
    3ebc:	10000068 	.word	0x10000068
    3ec0:	10000064 	.word	0x10000064

00003ec4 <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    3ec4:	b480      	push	{r7}
    3ec6:	b083      	sub	sp, #12
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    3ecc:	4b04      	ldr	r3, [pc, #16]	; (3ee0 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	685b      	ldr	r3, [r3, #4]
  }
    3ed2:	4618      	mov	r0, r3
    3ed4:	370c      	adds	r7, #12
    3ed6:	46bd      	mov	sp, r7
    3ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3edc:	4770      	bx	lr
    3ede:	bf00      	nop
    3ee0:	10000064 	.word	0x10000064

00003ee4 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    3ee4:	b480      	push	{r7}
    3ee6:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    3ee8:	f8df 001c 	ldr.w	r0, [pc, #28]	; 3f08 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    3eec:	6801      	ldr	r1, [r0, #0]
    3eee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3ef2:	6001      	str	r1, [r0, #0]
    3ef4:	f3bf 8f4f 	dsb	sy
    3ef8:	f3bf 8f6f 	isb	sy
  }
}
    3efc:	bf00      	nop
    3efe:	46bd      	mov	sp, r7
    3f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f04:	4770      	bx	lr
    3f06:	0000      	.short	0x0000
    3f08:	e000ed88 	.word	0xe000ed88

00003f0c <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    3f0c:	b580      	push	{r7, lr}
    3f0e:	b084      	sub	sp, #16
    3f10:	af00      	add	r7, sp, #0
    3f12:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    3f16:	e9d7 0100 	ldrd	r0, r1, [r7]
    3f1a:	f000 fed1 	bl	4cc0 <__aeabi_ul2f>
    3f1e:	4602      	mov	r2, r0
    3f20:	f107 030c 	add.w	r3, r7, #12
    3f24:	ee00 2a10 	vmov	s0, r2
    3f28:	4618      	mov	r0, r3
    3f2a:	f7fc fa7f 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3f2e:	68fb      	ldr	r3, [r7, #12]
    3f30:	4618      	mov	r0, r3
    3f32:	3710      	adds	r7, #16
    3f34:	46bd      	mov	sp, r7
    3f36:	bd80      	pop	{r7, pc}

00003f38 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3f38:	b580      	push	{r7, lr}
    3f3a:	b086      	sub	sp, #24
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3f40:	6878      	ldr	r0, [r7, #4]
    3f42:	f000 f807 	bl	3f54 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3f46:	eef0 7a40 	vmov.f32	s15, s0
	}
    3f4a:	eeb0 0a67 	vmov.f32	s0, s15
    3f4e:	3718      	adds	r7, #24
    3f50:	46bd      	mov	sp, r7
    3f52:	bd80      	pop	{r7, pc}

00003f54 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3f54:	b480      	push	{r7}
    3f56:	b085      	sub	sp, #20
    3f58:	af00      	add	r7, sp, #0
    3f5a:	60f8      	str	r0, [r7, #12]
    3f5c:	7239      	strb	r1, [r7, #8]
    3f5e:	713a      	strb	r2, [r7, #4]
    3f60:	703b      	strb	r3, [r7, #0]
			return value;
    3f62:	68fb      	ldr	r3, [r7, #12]
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	ee07 3a90 	vmov	s15, r3
		}
    3f6a:	eeb0 0a67 	vmov.f32	s0, s15
    3f6e:	3714      	adds	r7, #20
    3f70:	46bd      	mov	sp, r7
    3f72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f76:	4770      	bx	lr

00003f78 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3f78:	b580      	push	{r7, lr}
    3f7a:	ed2d 8b02 	vpush	{d8}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	ed93 8a00 	vldr	s16, [r3]
    3f8c:	683b      	ldr	r3, [r7, #0]
    3f8e:	4618      	mov	r0, r3
    3f90:	f7ff ffd2 	bl	3f38 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3f94:	eef0 7a40 	vmov.f32	s15, s0
    3f98:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3fa0:	bf94      	ite	ls
    3fa2:	2301      	movls	r3, #1
    3fa4:	2300      	movhi	r3, #0
    3fa6:	b2db      	uxtb	r3, r3
		}
    3fa8:	4618      	mov	r0, r3
    3faa:	3708      	adds	r7, #8
    3fac:	46bd      	mov	sp, r7
    3fae:	ecbd 8b02 	vpop	{d8}
    3fb2:	bd80      	pop	{r7, pc}

00003fb4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    3fb4:	b480      	push	{r7}
    3fb6:	b083      	sub	sp, #12
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    3fbc:	4a04      	ldr	r2, [pc, #16]	; (3fd0 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	6013      	str	r3, [r2, #0]
}
    3fc2:	bf00      	nop
    3fc4:	370c      	adds	r7, #12
    3fc6:	46bd      	mov	sp, r7
    3fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	10000000 	.word	0x10000000

00003fd4 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    3fd4:	b480      	push	{r7}
    3fd6:	b083      	sub	sp, #12
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	3310      	adds	r3, #16
  }
    3fe0:	4618      	mov	r0, r3
    3fe2:	370c      	adds	r7, #12
    3fe4:	46bd      	mov	sp, r7
    3fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fea:	4770      	bx	lr

00003fec <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    3fec:	b580      	push	{r7, lr}
    3fee:	b082      	sub	sp, #8
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    3ff4:	6878      	ldr	r0, [r7, #4]
    3ff6:	f7ff ffed 	bl	3fd4 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    3ffa:	4603      	mov	r3, r0
    3ffc:	009b      	lsls	r3, r3, #2
    3ffe:	4a03      	ldr	r2, [pc, #12]	; (400c <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    4000:	4413      	add	r3, r2
  }
    4002:	4618      	mov	r0, r3
    4004:	3708      	adds	r7, #8
    4006:	46bd      	mov	sp, r7
    4008:	bd80      	pop	{r7, pc}
    400a:	bf00      	nop
    400c:	10000124 	.word	0x10000124

00004010 <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    4010:	b580      	push	{r7, lr}
    4012:	b082      	sub	sp, #8
    4014:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    4016:	4b09      	ldr	r3, [pc, #36]	; (403c <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	685b      	ldr	r3, [r3, #4]
    401c:	b2db      	uxtb	r3, r3
    401e:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    4020:	4a07      	ldr	r2, [pc, #28]	; (4040 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    4022:	687b      	ldr	r3, [r7, #4]
    4024:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    4026:	4a07      	ldr	r2, [pc, #28]	; (4044 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    402e:	603b      	str	r3, [r7, #0]
    isr();
    4030:	683b      	ldr	r3, [r7, #0]
    4032:	4798      	blx	r3
  }
    4034:	bf00      	nop
    4036:	3708      	adds	r7, #8
    4038:	46bd      	mov	sp, r7
    403a:	bd80      	pop	{r7, pc}
    403c:	1000006c 	.word	0x1000006c
    4040:	10000048 	.word	0x10000048
    4044:	10000124 	.word	0x10000124

00004048 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    4048:	b084      	sub	sp, #16
    404a:	b590      	push	{r4, r7, lr}
    404c:	b085      	sub	sp, #20
    404e:	af00      	add	r7, sp, #0
    4050:	6078      	str	r0, [r7, #4]
    4052:	f107 0024 	add.w	r0, r7, #36	; 0x24
    4056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    405c:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    405e:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4060:	68f8      	ldr	r0, [r7, #12]
    4062:	f7ff ffc3 	bl	3fec <sjsu::cortex::InterruptController::GetVector(int)>
    4066:	4603      	mov	r3, r0
    4068:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    406a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    406e:	2b00      	cmp	r3, #0
    4070:	d005      	beq.n	407e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    4072:	68fb      	ldr	r3, [r7, #12]
    4074:	2b00      	cmp	r3, #0
    4076:	db02      	blt.n	407e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    4078:	68f8      	ldr	r0, [r7, #12]
    407a:	f7ff fea7 	bl	3dcc <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4080:	2b00      	cmp	r3, #0
    4082:	db04      	blt.n	408e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    4084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4086:	4619      	mov	r1, r3
    4088:	68f8      	ldr	r0, [r7, #12]
    408a:	f7ff fecf 	bl	3e2c <NVIC_SetPriority>
    }
  }
    408e:	bf00      	nop
    4090:	3714      	adds	r7, #20
    4092:	46bd      	mov	sp, r7
    4094:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    4098:	b004      	add	sp, #16
    409a:	4770      	bx	lr

0000409c <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    409c:	b580      	push	{r7, lr}
    409e:	b082      	sub	sp, #8
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
    40a4:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    40a6:	6838      	ldr	r0, [r7, #0]
    40a8:	f7ff fea8 	bl	3dfc <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    40ac:	6838      	ldr	r0, [r7, #0]
    40ae:	f7ff ff9d 	bl	3fec <sjsu::cortex::InterruptController::GetVector(int)>
    40b2:	4602      	mov	r2, r0
    40b4:	4b02      	ldr	r3, [pc, #8]	; (40c0 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    40b6:	6013      	str	r3, [r2, #0]
  }
    40b8:	bf00      	nop
    40ba:	3708      	adds	r7, #8
    40bc:	46bd      	mov	sp, r7
    40be:	bd80      	pop	{r7, pc}
    40c0:	00001cc9 	.word	0x00001cc9

000040c4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    40c4:	b580      	push	{r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	4618      	mov	r0, r3
    40d0:	f000 f804 	bl	40dc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    40d4:	6878      	ldr	r0, [r7, #4]
    40d6:	3708      	adds	r7, #8
    40d8:	46bd      	mov	sp, r7
    40da:	bd80      	pop	{r7, pc}

000040dc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    40dc:	b580      	push	{r7, lr}
    40de:	b082      	sub	sp, #8
    40e0:	af00      	add	r7, sp, #0
    40e2:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    40e4:	4903      	ldr	r1, [pc, #12]	; (40f4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    40e6:	6878      	ldr	r0, [r7, #4]
    40e8:	f7fc fc38 	bl	95c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    40ec:	6878      	ldr	r0, [r7, #4]
    40ee:	3708      	adds	r7, #8
    40f0:	46bd      	mov	sp, r7
    40f2:	bd80      	pop	{r7, pc}
    40f4:	00007168 	.word	0x00007168

000040f8 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    40f8:	b580      	push	{r7, lr}
    40fa:	b084      	sub	sp, #16
    40fc:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    40fe:	f107 0308 	add.w	r3, r7, #8
    4102:	4618      	mov	r0, r3
    4104:	f7ff ffde 	bl	40c4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    4108:	f107 0208 	add.w	r2, r7, #8
    410c:	463b      	mov	r3, r7
    410e:	4611      	mov	r1, r2
    4110:	4618      	mov	r0, r3
    4112:	f7fd fea1 	bl	1e58 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    4116:	463b      	mov	r3, r7
    4118:	4619      	mov	r1, r3
    411a:	4807      	ldr	r0, [pc, #28]	; (4138 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    411c:	f000 f9a4 	bl	4468 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    4120:	4b06      	ldr	r3, [pc, #24]	; (413c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4122:	681b      	ldr	r3, [r3, #0]
    4124:	2b00      	cmp	r3, #0
    4126:	d002      	beq.n	412e <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    4128:	4b04      	ldr	r3, [pc, #16]	; (413c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    412a:	681b      	ldr	r3, [r3, #0]
    412c:	4798      	blx	r3
    }
  }
    412e:	bf00      	nop
    4130:	3710      	adds	r7, #16
    4132:	46bd      	mov	sp, r7
    4134:	bd80      	pop	{r7, pc}
    4136:	bf00      	nop
    4138:	10000318 	.word	0x10000318
    413c:	10000314 	.word	0x10000314

00004140 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    4140:	b490      	push	{r4, r7}
    4142:	b082      	sub	sp, #8
    4144:	af00      	add	r7, sp, #0
    4146:	6078      	str	r0, [r7, #4]
  {
    return counter;
    4148:	687a      	ldr	r2, [r7, #4]
    414a:	4b05      	ldr	r3, [pc, #20]	; (4160 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    414c:	e9d3 3400 	ldrd	r3, r4, [r3]
    4150:	e9c2 3400 	strd	r3, r4, [r2]
  }
    4154:	6878      	ldr	r0, [r7, #4]
    4156:	3708      	adds	r7, #8
    4158:	46bd      	mov	sp, r7
    415a:	bc90      	pop	{r4, r7}
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	10000318 	.word	0x10000318

00004164 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr

00004178 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
    4180:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    4182:	4a04      	ldr	r2, [pc, #16]	; (4194 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    4184:	683b      	ldr	r3, [r7, #0]
    4186:	6013      	str	r3, [r2, #0]
  }
    4188:	bf00      	nop
    418a:	370c      	adds	r7, #12
    418c:	46bd      	mov	sp, r7
    418e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4192:	4770      	bx	lr
    4194:	10000314 	.word	0x10000314

00004198 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    4198:	b5f0      	push	{r4, r5, r6, r7, lr}
    419a:	b08b      	sub	sp, #44	; 0x2c
    419c:	af02      	add	r7, sp, #8
    419e:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    41a0:	2304      	movs	r3, #4
    41a2:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    41a4:	4b1f      	ldr	r3, [pc, #124]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41a6:	681b      	ldr	r3, [r3, #0]
    41a8:	685b      	ldr	r3, [r3, #4]
    41aa:	2b00      	cmp	r3, #0
    41ac:	bf14      	ite	ne
    41ae:	2301      	movne	r3, #1
    41b0:	2300      	moveq	r3, #0
    41b2:	b2db      	uxtb	r3, r3
    41b4:	2b00      	cmp	r3, #0
    41b6:	d030      	beq.n	421a <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    41b8:	4b1a      	ldr	r3, [pc, #104]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41ba:	681b      	ldr	r3, [r3, #0]
    41bc:	2200      	movs	r2, #0
    41be:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    41c0:	4b18      	ldr	r3, [pc, #96]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	681a      	ldr	r2, [r3, #0]
    41c6:	4b17      	ldr	r3, [pc, #92]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41c8:	681b      	ldr	r3, [r3, #0]
    41ca:	f042 0202 	orr.w	r2, r2, #2
    41ce:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    41d0:	4b14      	ldr	r3, [pc, #80]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41d2:	681b      	ldr	r3, [r3, #0]
    41d4:	681a      	ldr	r2, [r3, #0]
    41d6:	4b13      	ldr	r3, [pc, #76]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	f042 0201 	orr.w	r2, r2, #1
    41de:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    41e0:	4b10      	ldr	r3, [pc, #64]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41e2:	681b      	ldr	r3, [r3, #0]
    41e4:	681a      	ldr	r2, [r3, #0]
    41e6:	4b0f      	ldr	r3, [pc, #60]	; (4224 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	f042 0204 	orr.w	r2, r2, #4
    41ee:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    41f0:	687b      	ldr	r3, [r7, #4]
    41f2:	689e      	ldr	r6, [r3, #8]
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    41f8:	681b      	ldr	r3, [r3, #0]
    41fa:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    41fc:	4b0a      	ldr	r3, [pc, #40]	; (4228 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    41fe:	f107 040c 	add.w	r4, r7, #12
    4202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    4208:	69bb      	ldr	r3, [r7, #24]
    420a:	9300      	str	r3, [sp, #0]
    420c:	f107 030c 	add.w	r3, r7, #12
    4210:	cb0e      	ldmia	r3, {r1, r2, r3}
    4212:	4630      	mov	r0, r6
    4214:	47a8      	blx	r5
      status = Status::kSuccess;
    4216:	2300      	movs	r3, #0
    4218:	61fb      	str	r3, [r7, #28]
    }

    return status;
    421a:	69fb      	ldr	r3, [r7, #28]
  }
    421c:	4618      	mov	r0, r3
    421e:	3724      	adds	r7, #36	; 0x24
    4220:	46bd      	mov	sp, r7
    4222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4224:	10000070 	.word	0x10000070
    4228:	00006d7c 	.word	0x00006d7c

0000422c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    422c:	b580      	push	{r7, lr}
    422e:	b084      	sub	sp, #16
    4230:	af00      	add	r7, sp, #0
    4232:	6078      	str	r0, [r7, #4]
    4234:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	4618      	mov	r0, r3
    423a:	f7fc fd8b 	bl	d54 <units::linear_scale<float>::operator()() const>
    423e:	eeb0 7a40 	vmov.f32	s14, s0
    4242:	683b      	ldr	r3, [r7, #0]
    4244:	ee07 3a90 	vmov	s15, r3
    4248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    424c:	ee77 7a67 	vsub.f32	s15, s14, s15
    4250:	f107 030c 	add.w	r3, r7, #12
    4254:	eeb0 0a67 	vmov.f32	s0, s15
    4258:	4618      	mov	r0, r3
    425a:	f7fc fdb6 	bl	dca <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    425e:	68fb      	ldr	r3, [r7, #12]
	}
    4260:	4618      	mov	r0, r3
    4262:	3710      	adds	r7, #16
    4264:	46bd      	mov	sp, r7
    4266:	bd80      	pop	{r7, pc}

00004268 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    4268:	b580      	push	{r7, lr}
    426a:	b082      	sub	sp, #8
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    4270:	6878      	ldr	r0, [r7, #4]
    4272:	f7fd ffa9 	bl	21c8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4276:	4603      	mov	r3, r0
	}
    4278:	4618      	mov	r0, r3
    427a:	3708      	adds	r7, #8
    427c:	46bd      	mov	sp, r7
    427e:	bd80      	pop	{r7, pc}

00004280 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    4280:	b590      	push	{r4, r7, lr}
    4282:	b089      	sub	sp, #36	; 0x24
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    428a:	f04f 0001 	mov.w	r0, #1
    428e:	f04f 0100 	mov.w	r1, #0
    4292:	f7ff fe3b 	bl	3f0c <units::literals::operator"" _Hz(unsigned long long)>
    4296:	4603      	mov	r3, r0
    4298:	60fb      	str	r3, [r7, #12]
    429a:	f107 020c 	add.w	r2, r7, #12
    429e:	463b      	mov	r3, r7
    42a0:	4611      	mov	r1, r2
    42a2:	4618      	mov	r0, r3
    42a4:	f7ff fe68 	bl	3f78 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    42a8:	4603      	mov	r3, r0
    42aa:	2b00      	cmp	r3, #0
    42ac:	d002      	beq.n	42b4 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    42ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    42b2:	e041      	b.n	4338 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	685a      	ldr	r2, [r3, #4]
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	685b      	ldr	r3, [r3, #4]
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	330c      	adds	r3, #12
    42c0:	681b      	ldr	r3, [r3, #0]
    42c2:	4610      	mov	r0, r2
    42c4:	4798      	blx	r3
    42c6:	4603      	mov	r3, r0
    42c8:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    42ca:	463a      	mov	r2, r7
    42cc:	f107 0308 	add.w	r3, r7, #8
    42d0:	4611      	mov	r1, r2
    42d2:	4618      	mov	r0, r3
    42d4:	f7fd fb70 	bl	19b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    42d8:	4603      	mov	r3, r0
    42da:	617b      	str	r3, [r7, #20]
    42dc:	f107 0314 	add.w	r3, r7, #20
    42e0:	2101      	movs	r1, #1
    42e2:	4618      	mov	r0, r3
    42e4:	f7ff ffa2 	bl	422c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    42e8:	4603      	mov	r3, r0
    42ea:	613b      	str	r3, [r7, #16]
    42ec:	f107 0310 	add.w	r3, r7, #16
    42f0:	4618      	mov	r0, r3
    42f2:	f7ff ffb9 	bl	4268 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    42f6:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    42f8:	f107 0308 	add.w	r3, r7, #8
    42fc:	4618      	mov	r0, r3
    42fe:	f7fd f857 	bl	13b0 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4302:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    4304:	463b      	mov	r3, r7
    4306:	4618      	mov	r0, r3
    4308:	f7fd f852 	bl	13b0 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    430c:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    430e:	fbb4 f2f3 	udiv	r2, r4, r3
    4312:	fb03 f302 	mul.w	r3, r3, r2
    4316:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    4318:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    431a:	69fb      	ldr	r3, [r7, #28]
    431c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4320:	d305      	bcc.n	432e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    4322:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4326:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    4328:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    432c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    432e:	4b04      	ldr	r3, [pc, #16]	; (4340 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	69fa      	ldr	r2, [r7, #28]
    4334:	605a      	str	r2, [r3, #4]
    return remainder;
    4336:	69bb      	ldr	r3, [r7, #24]
  }
    4338:	4618      	mov	r0, r3
    433a:	3724      	adds	r7, #36	; 0x24
    433c:	46bd      	mov	sp, r7
    433e:	bd90      	pop	{r4, r7, pc}
    4340:	10000070 	.word	0x10000070

00004344 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    4344:	b580      	push	{r7, lr}
    4346:	b082      	sub	sp, #8
    4348:	af00      	add	r7, sp, #0
    434a:	6078      	str	r0, [r7, #4]
    434c:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    434e:	683a      	ldr	r2, [r7, #0]
    4350:	6879      	ldr	r1, [r7, #4]
    4352:	4804      	ldr	r0, [pc, #16]	; (4364 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    4354:	f7fd fa10 	bl	1778 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    4358:	683b      	ldr	r3, [r7, #0]
}
    435a:	4618      	mov	r0, r3
    435c:	3708      	adds	r7, #8
    435e:	46bd      	mov	sp, r7
    4360:	bd80      	pop	{r7, pc}
    4362:	bf00      	nop
    4364:	10000324 	.word	0x10000324

00004368 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    4368:	b590      	push	{r4, r7, lr}
    436a:	b087      	sub	sp, #28
    436c:	af02      	add	r7, sp, #8
    436e:	6078      	str	r0, [r7, #4]
    4370:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    4372:	f107 0308 	add.w	r3, r7, #8
    4376:	4618      	mov	r0, r3
    4378:	f7fd fe52 	bl	2020 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    437c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    4380:	e9cd 3400 	strd	r3, r4, [sp]
    4384:	683a      	ldr	r2, [r7, #0]
    4386:	6879      	ldr	r1, [r7, #4]
    4388:	4803      	ldr	r0, [pc, #12]	; (4398 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    438a:	f7fd fa47 	bl	181c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    438e:	683b      	ldr	r3, [r7, #0]
}
    4390:	4618      	mov	r0, r3
    4392:	3714      	adds	r7, #20
    4394:	46bd      	mov	sp, r7
    4396:	bd90      	pop	{r4, r7, pc}
    4398:	10000324 	.word	0x10000324

0000439c <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    439c:	b580      	push	{r7, lr}
    439e:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    43a0:	4802      	ldr	r0, [pc, #8]	; (43ac <ThreadRuntimeCounter+0x10>)
    43a2:	f7ff fd8f 	bl	3ec4 <sjsu::cortex::DwtCounter::GetCount()>
    43a6:	4603      	mov	r3, r0
}
    43a8:	4618      	mov	r0, r3
    43aa:	bd80      	pop	{r7, pc}
    43ac:	10000320 	.word	0x10000320

000043b0 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b082      	sub	sp, #8
    43b4:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    43b6:	f7ff fd95 	bl	3ee4 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    43ba:	4b1e      	ldr	r3, [pc, #120]	; (4434 <sjsu::InitializePlatform()+0x84>)
    43bc:	6819      	ldr	r1, [r3, #0]
    43be:	481e      	ldr	r0, [pc, #120]	; (4438 <sjsu::InitializePlatform()+0x88>)
    43c0:	f7fc fb10 	bl	9e4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    43c4:	23ff      	movs	r3, #255	; 0xff
    43c6:	703b      	strb	r3, [r7, #0]
    43c8:	463b      	mov	r3, r7
    43ca:	2201      	movs	r2, #1
    43cc:	4619      	mov	r1, r3
    43ce:	481a      	ldr	r0, [pc, #104]	; (4438 <sjsu::InitializePlatform()+0x88>)
    43d0:	f7fc fb56 	bl	a80 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    43d4:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    43d8:	4818      	ldr	r0, [pc, #96]	; (443c <sjsu::InitializePlatform()+0x8c>)
    43da:	f7fd f927 	bl	162c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    43de:	4818      	ldr	r0, [pc, #96]	; (4440 <sjsu::InitializePlatform()+0x90>)
    43e0:	f000 f952 	bl	4688 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    43e4:	4817      	ldr	r0, [pc, #92]	; (4444 <sjsu::InitializePlatform()+0x94>)
    43e6:	f000 f95f 	bl	46a8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    43ea:	4b17      	ldr	r3, [pc, #92]	; (4448 <sjsu::InitializePlatform()+0x98>)
    43ec:	6819      	ldr	r1, [r3, #0]
    43ee:	4817      	ldr	r0, [pc, #92]	; (444c <sjsu::InitializePlatform()+0x9c>)
    43f0:	f7ff ff46 	bl	4280 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    43f4:	4815      	ldr	r0, [pc, #84]	; (444c <sjsu::InitializePlatform()+0x9c>)
    43f6:	f7ff fecf 	bl	4198 <sjsu::cortex::SystemTimer::StartTimer() const>
    43fa:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	2b00      	cmp	r3, #0
    4400:	d00d      	beq.n	441e <sjsu::InitializePlatform()+0x6e>
    4402:	23d6      	movs	r3, #214	; 0xd6
    4404:	4a12      	ldr	r2, [pc, #72]	; (4450 <sjsu::InitializePlatform()+0xa0>)
    4406:	4913      	ldr	r1, [pc, #76]	; (4454 <sjsu::InitializePlatform()+0xa4>)
    4408:	4813      	ldr	r0, [pc, #76]	; (4458 <sjsu::InitializePlatform()+0xa8>)
    440a:	f7ff fcc3 	bl	3d94 <printf>
    440e:	4813      	ldr	r0, [pc, #76]	; (445c <sjsu::InitializePlatform()+0xac>)
    4410:	f7fe fba4 	bl	2b5c <puts>
    4414:	2100      	movs	r1, #0
    4416:	2001      	movs	r0, #1
    4418:	f7fc f8b2 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    441c:	e7fe      	b.n	441c <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    441e:	4810      	ldr	r0, [pc, #64]	; (4460 <sjsu::InitializePlatform()+0xb0>)
    4420:	f7ff fd2e 	bl	3e80 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    4424:	480f      	ldr	r0, [pc, #60]	; (4464 <sjsu::InitializePlatform()+0xb4>)
    4426:	f7ff fdc5 	bl	3fb4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    442a:	bf00      	nop
    442c:	3708      	adds	r7, #8
    442e:	46bd      	mov	sp, r7
    4430:	bd80      	pop	{r7, pc}
    4432:	bf00      	nop
    4434:	00007170 	.word	0x00007170
    4438:	10000074 	.word	0x10000074
    443c:	10000324 	.word	0x10000324
    4440:	00004345 	.word	0x00004345
    4444:	00004369 	.word	0x00004369
    4448:	00007174 	.word	0x00007174
    444c:	10000078 	.word	0x10000078
    4450:	000071d4 	.word	0x000071d4
    4454:	000071a0 	.word	0x000071a0
    4458:	00007098 	.word	0x00007098
    445c:	00006e2c 	.word	0x00006e2c
    4460:	10000320 	.word	0x10000320
    4464:	00004141 	.word	0x00004141

00004468 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    4468:	b5f0      	push	{r4, r5, r6, r7, lr}
    446a:	b083      	sub	sp, #12
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
    4470:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4472:	6838      	ldr	r0, [r7, #0]
    4474:	f7fd fd0a 	bl	1e8c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4478:	460a      	mov	r2, r1
    447a:	4601      	mov	r1, r0
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	e9d3 5600 	ldrd	r5, r6, [r3]
    4482:	186b      	adds	r3, r5, r1
    4484:	eb46 0402 	adc.w	r4, r6, r2
    4488:	687a      	ldr	r2, [r7, #4]
    448a:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    448e:	687b      	ldr	r3, [r7, #4]
	}
    4490:	4618      	mov	r0, r3
    4492:	370c      	adds	r7, #12
    4494:	46bd      	mov	sp, r7
    4496:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004498 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    4498:	b580      	push	{r7, lr}
    449a:	b082      	sub	sp, #8
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
    44a0:	6039      	str	r1, [r7, #0]
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	2b01      	cmp	r3, #1
    44a6:	d155      	bne.n	4554 <__static_initialization_and_destruction_0(int, int)+0xbc>
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    44ae:	4293      	cmp	r3, r2
    44b0:	d150      	bne.n	4554 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    44b2:	4b2a      	ldr	r3, [pc, #168]	; (455c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	f003 0301 	and.w	r3, r3, #1
    44ba:	2b00      	cmp	r3, #0
    44bc:	d106      	bne.n	44cc <__static_initialization_and_destruction_0(int, int)+0x34>
    44be:	4b27      	ldr	r3, [pc, #156]	; (455c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    44c0:	2201      	movs	r2, #1
    44c2:	601a      	str	r2, [r3, #0]
    44c4:	4b26      	ldr	r3, [pc, #152]	; (4560 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    44c6:	4618      	mov	r0, r3
    44c8:	f7fd fc28 	bl	1d1c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    44cc:	4b25      	ldr	r3, [pc, #148]	; (4564 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	f003 0301 	and.w	r3, r3, #1
    44d4:	2b00      	cmp	r3, #0
    44d6:	d105      	bne.n	44e4 <__static_initialization_and_destruction_0(int, int)+0x4c>
    44d8:	4b22      	ldr	r3, [pc, #136]	; (4564 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    44da:	2201      	movs	r2, #1
    44dc:	601a      	str	r2, [r3, #0]
    44de:	4a22      	ldr	r2, [pc, #136]	; (4568 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    44e0:	4b22      	ldr	r3, [pc, #136]	; (456c <__static_initialization_and_destruction_0(int, int)+0xd4>)
    44e2:	601a      	str	r2, [r3, #0]
    44e4:	4b22      	ldr	r3, [pc, #136]	; (4570 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    44e6:	681b      	ldr	r3, [r3, #0]
    44e8:	f003 0301 	and.w	r3, r3, #1
    44ec:	2b00      	cmp	r3, #0
    44ee:	d105      	bne.n	44fc <__static_initialization_and_destruction_0(int, int)+0x64>
    44f0:	4b1f      	ldr	r3, [pc, #124]	; (4570 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    44f2:	2201      	movs	r2, #1
    44f4:	601a      	str	r2, [r3, #0]
    44f6:	4a1f      	ldr	r2, [pc, #124]	; (4574 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    44f8:	4b1f      	ldr	r3, [pc, #124]	; (4578 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    44fa:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    44fc:	4b1f      	ldr	r3, [pc, #124]	; (457c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	f003 0301 	and.w	r3, r3, #1
    4504:	2b00      	cmp	r3, #0
    4506:	d105      	bne.n	4514 <__static_initialization_and_destruction_0(int, int)+0x7c>
    4508:	4b1c      	ldr	r3, [pc, #112]	; (457c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    450a:	2201      	movs	r2, #1
    450c:	601a      	str	r2, [r3, #0]
    };
    450e:	4a1c      	ldr	r2, [pc, #112]	; (4580 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    4510:	4b1c      	ldr	r3, [pc, #112]	; (4584 <__static_initialization_and_destruction_0(int, int)+0xec>)
    4512:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    4514:	4b1c      	ldr	r3, [pc, #112]	; (4588 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    4516:	681b      	ldr	r3, [r3, #0]
    4518:	f003 0301 	and.w	r3, r3, #1
    451c:	2b00      	cmp	r3, #0
    451e:	d105      	bne.n	452c <__static_initialization_and_destruction_0(int, int)+0x94>
    4520:	4b19      	ldr	r3, [pc, #100]	; (4588 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    4522:	2201      	movs	r2, #1
    4524:	601a      	str	r2, [r3, #0]
    };
    4526:	4a19      	ldr	r2, [pc, #100]	; (458c <__static_initialization_and_destruction_0(int, int)+0xf4>)
    4528:	4b19      	ldr	r3, [pc, #100]	; (4590 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    452a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    452c:	4b19      	ldr	r3, [pc, #100]	; (4594 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	f003 0301 	and.w	r3, r3, #1
    4534:	2b00      	cmp	r3, #0
    4536:	d105      	bne.n	4544 <__static_initialization_and_destruction_0(int, int)+0xac>
    4538:	4b16      	ldr	r3, [pc, #88]	; (4594 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    453a:	2201      	movs	r2, #1
    453c:	601a      	str	r2, [r3, #0]
    };
    453e:	4a16      	ldr	r2, [pc, #88]	; (4598 <__static_initialization_and_destruction_0(int, int)+0x100>)
    4540:	4b16      	ldr	r3, [pc, #88]	; (459c <__static_initialization_and_destruction_0(int, int)+0x104>)
    4542:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    4544:	f7fc fe14 	bl	1170 <sjsu::lpc40xx::DefaultSystemController()>
    4548:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    454a:	461a      	mov	r2, r3
    454c:	4914      	ldr	r1, [pc, #80]	; (45a0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    454e:	4815      	ldr	r0, [pc, #84]	; (45a4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    4550:	f7fd f852 	bl	15f8 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    4554:	bf00      	nop
    4556:	3708      	adds	r7, #8
    4558:	46bd      	mov	sp, r7
    455a:	bd80      	pop	{r7, pc}
    455c:	10000280 	.word	0x10000280
    4560:	10000124 	.word	0x10000124
    4564:	1000026c 	.word	0x1000026c
    4568:	400fc000 	.word	0x400fc000
    456c:	1000011c 	.word	0x1000011c
    4570:	10000268 	.word	0x10000268
    4574:	4002c000 	.word	0x4002c000
    4578:	10000118 	.word	0x10000118
    457c:	10000270 	.word	0x10000270
    4580:	40098000 	.word	0x40098000
    4584:	1000000c 	.word	0x1000000c
    4588:	10000274 	.word	0x10000274
    458c:	4009c000 	.word	0x4009c000
    4590:	10000020 	.word	0x10000020
    4594:	10000278 	.word	0x10000278
    4598:	400a4000 	.word	0x400a4000
    459c:	10000034 	.word	0x10000034
    45a0:	0000718c 	.word	0x0000718c
    45a4:	10000324 	.word	0x10000324

000045a8 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    45a8:	b580      	push	{r7, lr}
    45aa:	af00      	add	r7, sp, #0
    45ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    45b0:	2001      	movs	r0, #1
    45b2:	f7ff ff71 	bl	4498 <__static_initialization_and_destruction_0(int, int)>
    45b6:	bd80      	pop	{r7, pc}
    45b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    45bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000045c0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    45c0:	4b07      	ldr	r3, [pc, #28]	; (45e0 <pxCurrentTCBConst2>)
    45c2:	6819      	ldr	r1, [r3, #0]
    45c4:	6808      	ldr	r0, [r1, #0]
    45c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45ca:	f380 8809 	msr	PSP, r0
    45ce:	f3bf 8f6f 	isb	sy
    45d2:	f04f 0000 	mov.w	r0, #0
    45d6:	f380 8811 	msr	BASEPRI, r0
    45da:	4770      	bx	lr
    45dc:	f3af 8000 	nop.w

000045e0 <pxCurrentTCBConst2>:
    45e0:	10000298 	.word	0x10000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    45e4:	bf00      	nop
    45e6:	bf00      	nop
    45e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    45ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000045f0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    45f0:	f3ef 8009 	mrs	r0, PSP
    45f4:	f3bf 8f6f 	isb	sy
    45f8:	4b15      	ldr	r3, [pc, #84]	; (4650 <pxCurrentTCBConst>)
    45fa:	681a      	ldr	r2, [r3, #0]
    45fc:	f01e 0f10 	tst.w	lr, #16
    4600:	bf08      	it	eq
    4602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    460a:	6010      	str	r0, [r2, #0]
    460c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4610:	f04f 0028 	mov.w	r0, #40	; 0x28
    4614:	f380 8811 	msr	BASEPRI, r0
    4618:	f3bf 8f4f 	dsb	sy
    461c:	f3bf 8f6f 	isb	sy
    4620:	f7fe fa1e 	bl	2a60 <vTaskSwitchContext>
    4624:	f04f 0000 	mov.w	r0, #0
    4628:	f380 8811 	msr	BASEPRI, r0
    462c:	bc09      	pop	{r0, r3}
    462e:	6819      	ldr	r1, [r3, #0]
    4630:	6808      	ldr	r0, [r1, #0]
    4632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4636:	f01e 0f10 	tst.w	lr, #16
    463a:	bf08      	it	eq
    463c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4640:	f380 8809 	msr	PSP, r0
    4644:	f3bf 8f6f 	isb	sy
    4648:	4770      	bx	lr
    464a:	bf00      	nop
    464c:	f3af 8000 	nop.w

00004650 <pxCurrentTCBConst>:
    4650:	10000298 	.word	0x10000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    4654:	bf00      	nop
    4656:	bf00      	nop

00004658 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    4658:	b480      	push	{r7}
    465a:	b083      	sub	sp, #12
    465c:	af00      	add	r7, sp, #0
    465e:	6078      	str	r0, [r7, #4]
    4660:	6039      	str	r1, [r7, #0]
  return 1;
    4662:	2301      	movs	r3, #1
}
    4664:	4618      	mov	r0, r3
    4666:	370c      	adds	r7, #12
    4668:	46bd      	mov	sp, r7
    466a:	f85d 7b04 	ldr.w	r7, [sp], #4
    466e:	4770      	bx	lr

00004670 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    4670:	b480      	push	{r7}
    4672:	b083      	sub	sp, #12
    4674:	af00      	add	r7, sp, #0
    4676:	6078      	str	r0, [r7, #4]
    4678:	6039      	str	r1, [r7, #0]
  return 0;
    467a:	2300      	movs	r3, #0
}
    467c:	4618      	mov	r0, r3
    467e:	370c      	adds	r7, #12
    4680:	46bd      	mov	sp, r7
    4682:	f85d 7b04 	ldr.w	r7, [sp], #4
    4686:	4770      	bx	lr

00004688 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4688:	b480      	push	{r7}
    468a:	b083      	sub	sp, #12
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    4690:	4a04      	ldr	r2, [pc, #16]	; (46a4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6013      	str	r3, [r2, #0]
}
    4696:	bf00      	nop
    4698:	370c      	adds	r7, #12
    469a:	46bd      	mov	sp, r7
    469c:	f85d 7b04 	ldr.w	r7, [sp], #4
    46a0:	4770      	bx	lr
    46a2:	bf00      	nop
    46a4:	1000005c 	.word	0x1000005c

000046a8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    46a8:	b480      	push	{r7}
    46aa:	b083      	sub	sp, #12
    46ac:	af00      	add	r7, sp, #0
    46ae:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    46b0:	4a04      	ldr	r2, [pc, #16]	; (46c4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	6013      	str	r3, [r2, #0]
}
    46b6:	bf00      	nop
    46b8:	370c      	adds	r7, #12
    46ba:	46bd      	mov	sp, r7
    46bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c0:	4770      	bx	lr
    46c2:	bf00      	nop
    46c4:	10000060 	.word	0x10000060

000046c8 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    46c8:	b580      	push	{r7, lr}
    46ca:	b082      	sub	sp, #8
    46cc:	af00      	add	r7, sp, #0
    46ce:	4603      	mov	r3, r0
    46d0:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    46d2:	4b05      	ldr	r3, [pc, #20]	; (46e8 <_putchar+0x20>)
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	1dfa      	adds	r2, r7, #7
    46d8:	2101      	movs	r1, #1
    46da:	4610      	mov	r0, r2
    46dc:	4798      	blx	r3
}
    46de:	bf00      	nop
    46e0:	3708      	adds	r7, #8
    46e2:	46bd      	mov	sp, r7
    46e4:	bd80      	pop	{r7, pc}
    46e6:	bf00      	nop
    46e8:	1000005c 	.word	0x1000005c

000046ec <__cxa_pure_virtual>:
    46ec:	b508      	push	{r3, lr}
    46ee:	f000 f80d 	bl	470c <std::terminate()>

000046f2 <__cxxabiv1::__terminate(void (*)())>:
    46f2:	b508      	push	{r3, lr}
    46f4:	4780      	blx	r0
    46f6:	f001 fc2f 	bl	5f58 <abort>
    46fa:	Address 0x00000000000046fa is out of bounds.


000046fc <std::get_terminate()>:
    46fc:	4b02      	ldr	r3, [pc, #8]	; (4708 <std::get_terminate()+0xc>)
    46fe:	6818      	ldr	r0, [r3, #0]
    4700:	f3bf 8f5b 	dmb	ish
    4704:	4770      	bx	lr
    4706:	bf00      	nop
    4708:	10000084 	.word	0x10000084

0000470c <std::terminate()>:
    470c:	b508      	push	{r3, lr}
    470e:	f7ff fff5 	bl	46fc <std::get_terminate()>
    4712:	f7ff ffee 	bl	46f2 <__cxxabiv1::__terminate(void (*)())>
    4716:	Address 0x0000000000004716 is out of bounds.


00004718 <__aeabi_drsub>:
    4718:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    471c:	e002      	b.n	4724 <__adddf3>
    471e:	bf00      	nop

00004720 <__aeabi_dsub>:
    4720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004724 <__adddf3>:
    4724:	b530      	push	{r4, r5, lr}
    4726:	ea4f 0441 	mov.w	r4, r1, lsl #1
    472a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    472e:	ea94 0f05 	teq	r4, r5
    4732:	bf08      	it	eq
    4734:	ea90 0f02 	teqeq	r0, r2
    4738:	bf1f      	itttt	ne
    473a:	ea54 0c00 	orrsne.w	ip, r4, r0
    473e:	ea55 0c02 	orrsne.w	ip, r5, r2
    4742:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4746:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    474a:	f000 80e2 	beq.w	4912 <__adddf3+0x1ee>
    474e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4752:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4756:	bfb8      	it	lt
    4758:	426d      	neglt	r5, r5
    475a:	dd0c      	ble.n	4776 <__adddf3+0x52>
    475c:	442c      	add	r4, r5
    475e:	ea80 0202 	eor.w	r2, r0, r2
    4762:	ea81 0303 	eor.w	r3, r1, r3
    4766:	ea82 0000 	eor.w	r0, r2, r0
    476a:	ea83 0101 	eor.w	r1, r3, r1
    476e:	ea80 0202 	eor.w	r2, r0, r2
    4772:	ea81 0303 	eor.w	r3, r1, r3
    4776:	2d36      	cmp	r5, #54	; 0x36
    4778:	bf88      	it	hi
    477a:	bd30      	pophi	{r4, r5, pc}
    477c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4780:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4784:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4788:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    478c:	d002      	beq.n	4794 <__adddf3+0x70>
    478e:	4240      	negs	r0, r0
    4790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4794:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4798:	ea4f 3303 	mov.w	r3, r3, lsl #12
    479c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    47a0:	d002      	beq.n	47a8 <__adddf3+0x84>
    47a2:	4252      	negs	r2, r2
    47a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    47a8:	ea94 0f05 	teq	r4, r5
    47ac:	f000 80a7 	beq.w	48fe <__adddf3+0x1da>
    47b0:	f1a4 0401 	sub.w	r4, r4, #1
    47b4:	f1d5 0e20 	rsbs	lr, r5, #32
    47b8:	db0d      	blt.n	47d6 <__adddf3+0xb2>
    47ba:	fa02 fc0e 	lsl.w	ip, r2, lr
    47be:	fa22 f205 	lsr.w	r2, r2, r5
    47c2:	1880      	adds	r0, r0, r2
    47c4:	f141 0100 	adc.w	r1, r1, #0
    47c8:	fa03 f20e 	lsl.w	r2, r3, lr
    47cc:	1880      	adds	r0, r0, r2
    47ce:	fa43 f305 	asr.w	r3, r3, r5
    47d2:	4159      	adcs	r1, r3
    47d4:	e00e      	b.n	47f4 <__adddf3+0xd0>
    47d6:	f1a5 0520 	sub.w	r5, r5, #32
    47da:	f10e 0e20 	add.w	lr, lr, #32
    47de:	2a01      	cmp	r2, #1
    47e0:	fa03 fc0e 	lsl.w	ip, r3, lr
    47e4:	bf28      	it	cs
    47e6:	f04c 0c02 	orrcs.w	ip, ip, #2
    47ea:	fa43 f305 	asr.w	r3, r3, r5
    47ee:	18c0      	adds	r0, r0, r3
    47f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    47f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    47f8:	d507      	bpl.n	480a <__adddf3+0xe6>
    47fa:	f04f 0e00 	mov.w	lr, #0
    47fe:	f1dc 0c00 	rsbs	ip, ip, #0
    4802:	eb7e 0000 	sbcs.w	r0, lr, r0
    4806:	eb6e 0101 	sbc.w	r1, lr, r1
    480a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    480e:	d31b      	bcc.n	4848 <__adddf3+0x124>
    4810:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4814:	d30c      	bcc.n	4830 <__adddf3+0x10c>
    4816:	0849      	lsrs	r1, r1, #1
    4818:	ea5f 0030 	movs.w	r0, r0, rrx
    481c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4820:	f104 0401 	add.w	r4, r4, #1
    4824:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4828:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    482c:	f080 809a 	bcs.w	4964 <__adddf3+0x240>
    4830:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4834:	bf08      	it	eq
    4836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    483a:	f150 0000 	adcs.w	r0, r0, #0
    483e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4842:	ea41 0105 	orr.w	r1, r1, r5
    4846:	bd30      	pop	{r4, r5, pc}
    4848:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    484c:	4140      	adcs	r0, r0
    484e:	eb41 0101 	adc.w	r1, r1, r1
    4852:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4856:	f1a4 0401 	sub.w	r4, r4, #1
    485a:	d1e9      	bne.n	4830 <__adddf3+0x10c>
    485c:	f091 0f00 	teq	r1, #0
    4860:	bf04      	itt	eq
    4862:	4601      	moveq	r1, r0
    4864:	2000      	moveq	r0, #0
    4866:	fab1 f381 	clz	r3, r1
    486a:	bf08      	it	eq
    486c:	3320      	addeq	r3, #32
    486e:	f1a3 030b 	sub.w	r3, r3, #11
    4872:	f1b3 0220 	subs.w	r2, r3, #32
    4876:	da0c      	bge.n	4892 <__adddf3+0x16e>
    4878:	320c      	adds	r2, #12
    487a:	dd08      	ble.n	488e <__adddf3+0x16a>
    487c:	f102 0c14 	add.w	ip, r2, #20
    4880:	f1c2 020c 	rsb	r2, r2, #12
    4884:	fa01 f00c 	lsl.w	r0, r1, ip
    4888:	fa21 f102 	lsr.w	r1, r1, r2
    488c:	e00c      	b.n	48a8 <__adddf3+0x184>
    488e:	f102 0214 	add.w	r2, r2, #20
    4892:	bfd8      	it	le
    4894:	f1c2 0c20 	rsble	ip, r2, #32
    4898:	fa01 f102 	lsl.w	r1, r1, r2
    489c:	fa20 fc0c 	lsr.w	ip, r0, ip
    48a0:	bfdc      	itt	le
    48a2:	ea41 010c 	orrle.w	r1, r1, ip
    48a6:	4090      	lslle	r0, r2
    48a8:	1ae4      	subs	r4, r4, r3
    48aa:	bfa2      	ittt	ge
    48ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    48b0:	4329      	orrge	r1, r5
    48b2:	bd30      	popge	{r4, r5, pc}
    48b4:	ea6f 0404 	mvn.w	r4, r4
    48b8:	3c1f      	subs	r4, #31
    48ba:	da1c      	bge.n	48f6 <__adddf3+0x1d2>
    48bc:	340c      	adds	r4, #12
    48be:	dc0e      	bgt.n	48de <__adddf3+0x1ba>
    48c0:	f104 0414 	add.w	r4, r4, #20
    48c4:	f1c4 0220 	rsb	r2, r4, #32
    48c8:	fa20 f004 	lsr.w	r0, r0, r4
    48cc:	fa01 f302 	lsl.w	r3, r1, r2
    48d0:	ea40 0003 	orr.w	r0, r0, r3
    48d4:	fa21 f304 	lsr.w	r3, r1, r4
    48d8:	ea45 0103 	orr.w	r1, r5, r3
    48dc:	bd30      	pop	{r4, r5, pc}
    48de:	f1c4 040c 	rsb	r4, r4, #12
    48e2:	f1c4 0220 	rsb	r2, r4, #32
    48e6:	fa20 f002 	lsr.w	r0, r0, r2
    48ea:	fa01 f304 	lsl.w	r3, r1, r4
    48ee:	ea40 0003 	orr.w	r0, r0, r3
    48f2:	4629      	mov	r1, r5
    48f4:	bd30      	pop	{r4, r5, pc}
    48f6:	fa21 f004 	lsr.w	r0, r1, r4
    48fa:	4629      	mov	r1, r5
    48fc:	bd30      	pop	{r4, r5, pc}
    48fe:	f094 0f00 	teq	r4, #0
    4902:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4906:	bf06      	itte	eq
    4908:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    490c:	3401      	addeq	r4, #1
    490e:	3d01      	subne	r5, #1
    4910:	e74e      	b.n	47b0 <__adddf3+0x8c>
    4912:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4916:	bf18      	it	ne
    4918:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    491c:	d029      	beq.n	4972 <__adddf3+0x24e>
    491e:	ea94 0f05 	teq	r4, r5
    4922:	bf08      	it	eq
    4924:	ea90 0f02 	teqeq	r0, r2
    4928:	d005      	beq.n	4936 <__adddf3+0x212>
    492a:	ea54 0c00 	orrs.w	ip, r4, r0
    492e:	bf04      	itt	eq
    4930:	4619      	moveq	r1, r3
    4932:	4610      	moveq	r0, r2
    4934:	bd30      	pop	{r4, r5, pc}
    4936:	ea91 0f03 	teq	r1, r3
    493a:	bf1e      	ittt	ne
    493c:	2100      	movne	r1, #0
    493e:	2000      	movne	r0, #0
    4940:	bd30      	popne	{r4, r5, pc}
    4942:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4946:	d105      	bne.n	4954 <__adddf3+0x230>
    4948:	0040      	lsls	r0, r0, #1
    494a:	4149      	adcs	r1, r1
    494c:	bf28      	it	cs
    494e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4952:	bd30      	pop	{r4, r5, pc}
    4954:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4958:	bf3c      	itt	cc
    495a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    495e:	bd30      	popcc	{r4, r5, pc}
    4960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4964:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    496c:	f04f 0000 	mov.w	r0, #0
    4970:	bd30      	pop	{r4, r5, pc}
    4972:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4976:	bf1a      	itte	ne
    4978:	4619      	movne	r1, r3
    497a:	4610      	movne	r0, r2
    497c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4980:	bf1c      	itt	ne
    4982:	460b      	movne	r3, r1
    4984:	4602      	movne	r2, r0
    4986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    498a:	bf06      	itte	eq
    498c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4990:	ea91 0f03 	teqeq	r1, r3
    4994:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4998:	bd30      	pop	{r4, r5, pc}
    499a:	bf00      	nop

0000499c <__aeabi_ui2d>:
    499c:	f090 0f00 	teq	r0, #0
    49a0:	bf04      	itt	eq
    49a2:	2100      	moveq	r1, #0
    49a4:	4770      	bxeq	lr
    49a6:	b530      	push	{r4, r5, lr}
    49a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    49ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
    49b0:	f04f 0500 	mov.w	r5, #0
    49b4:	f04f 0100 	mov.w	r1, #0
    49b8:	e750      	b.n	485c <__adddf3+0x138>
    49ba:	bf00      	nop

000049bc <__aeabi_i2d>:
    49bc:	f090 0f00 	teq	r0, #0
    49c0:	bf04      	itt	eq
    49c2:	2100      	moveq	r1, #0
    49c4:	4770      	bxeq	lr
    49c6:	b530      	push	{r4, r5, lr}
    49c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    49cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    49d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    49d4:	bf48      	it	mi
    49d6:	4240      	negmi	r0, r0
    49d8:	f04f 0100 	mov.w	r1, #0
    49dc:	e73e      	b.n	485c <__adddf3+0x138>
    49de:	bf00      	nop

000049e0 <__aeabi_f2d>:
    49e0:	0042      	lsls	r2, r0, #1
    49e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    49e6:	ea4f 0131 	mov.w	r1, r1, rrx
    49ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
    49ee:	bf1f      	itttt	ne
    49f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    49f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    49f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    49fc:	4770      	bxne	lr
    49fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    4a02:	bf08      	it	eq
    4a04:	4770      	bxeq	lr
    4a06:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    4a0a:	bf04      	itt	eq
    4a0c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    4a10:	4770      	bxeq	lr
    4a12:	b530      	push	{r4, r5, lr}
    4a14:	f44f 7460 	mov.w	r4, #896	; 0x380
    4a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4a20:	e71c      	b.n	485c <__adddf3+0x138>
    4a22:	bf00      	nop

00004a24 <__aeabi_ul2d>:
    4a24:	ea50 0201 	orrs.w	r2, r0, r1
    4a28:	bf08      	it	eq
    4a2a:	4770      	bxeq	lr
    4a2c:	b530      	push	{r4, r5, lr}
    4a2e:	f04f 0500 	mov.w	r5, #0
    4a32:	e00a      	b.n	4a4a <__aeabi_l2d+0x16>

00004a34 <__aeabi_l2d>:
    4a34:	ea50 0201 	orrs.w	r2, r0, r1
    4a38:	bf08      	it	eq
    4a3a:	4770      	bxeq	lr
    4a3c:	b530      	push	{r4, r5, lr}
    4a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4a42:	d502      	bpl.n	4a4a <__aeabi_l2d+0x16>
    4a44:	4240      	negs	r0, r0
    4a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4a56:	f43f aed8 	beq.w	480a <__adddf3+0xe6>
    4a5a:	f04f 0203 	mov.w	r2, #3
    4a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4a62:	bf18      	it	ne
    4a64:	3203      	addne	r2, #3
    4a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4a6a:	bf18      	it	ne
    4a6c:	3203      	addne	r2, #3
    4a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4a72:	f1c2 0320 	rsb	r3, r2, #32
    4a76:	fa00 fc03 	lsl.w	ip, r0, r3
    4a7a:	fa20 f002 	lsr.w	r0, r0, r2
    4a7e:	fa01 fe03 	lsl.w	lr, r1, r3
    4a82:	ea40 000e 	orr.w	r0, r0, lr
    4a86:	fa21 f102 	lsr.w	r1, r1, r2
    4a8a:	4414      	add	r4, r2
    4a8c:	e6bd      	b.n	480a <__adddf3+0xe6>
    4a8e:	bf00      	nop

00004a90 <__aeabi_d2f>:
    4a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4a98:	bf24      	itt	cs
    4a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4aa2:	d90d      	bls.n	4ac0 <__aeabi_d2f+0x30>
    4aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4ab8:	bf08      	it	eq
    4aba:	f020 0001 	biceq.w	r0, r0, #1
    4abe:	4770      	bx	lr
    4ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4ac4:	d121      	bne.n	4b0a <__aeabi_d2f+0x7a>
    4ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4aca:	bfbc      	itt	lt
    4acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4ad0:	4770      	bxlt	lr
    4ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4ada:	f1c2 0218 	rsb	r2, r2, #24
    4ade:	f1c2 0c20 	rsb	ip, r2, #32
    4ae2:	fa10 f30c 	lsls.w	r3, r0, ip
    4ae6:	fa20 f002 	lsr.w	r0, r0, r2
    4aea:	bf18      	it	ne
    4aec:	f040 0001 	orrne.w	r0, r0, #1
    4af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4af8:	fa03 fc0c 	lsl.w	ip, r3, ip
    4afc:	ea40 000c 	orr.w	r0, r0, ip
    4b00:	fa23 f302 	lsr.w	r3, r3, r2
    4b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4b08:	e7cc      	b.n	4aa4 <__aeabi_d2f+0x14>
    4b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4b0e:	d107      	bne.n	4b20 <__aeabi_d2f+0x90>
    4b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4b14:	bf1e      	ittt	ne
    4b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4b1e:	4770      	bxne	lr
    4b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop

00004b30 <__aeabi_frsub>:
    4b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4b34:	e002      	b.n	4b3c <__addsf3>
    4b36:	bf00      	nop

00004b38 <__aeabi_fsub>:
    4b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004b3c <__addsf3>:
    4b3c:	0042      	lsls	r2, r0, #1
    4b3e:	bf1f      	itttt	ne
    4b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4b44:	ea92 0f03 	teqne	r2, r3
    4b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4b50:	d06a      	beq.n	4c28 <__addsf3+0xec>
    4b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4b5a:	bfc1      	itttt	gt
    4b5c:	18d2      	addgt	r2, r2, r3
    4b5e:	4041      	eorgt	r1, r0
    4b60:	4048      	eorgt	r0, r1
    4b62:	4041      	eorgt	r1, r0
    4b64:	bfb8      	it	lt
    4b66:	425b      	neglt	r3, r3
    4b68:	2b19      	cmp	r3, #25
    4b6a:	bf88      	it	hi
    4b6c:	4770      	bxhi	lr
    4b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4b7a:	bf18      	it	ne
    4b7c:	4240      	negne	r0, r0
    4b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4b8a:	bf18      	it	ne
    4b8c:	4249      	negne	r1, r1
    4b8e:	ea92 0f03 	teq	r2, r3
    4b92:	d03f      	beq.n	4c14 <__addsf3+0xd8>
    4b94:	f1a2 0201 	sub.w	r2, r2, #1
    4b98:	fa41 fc03 	asr.w	ip, r1, r3
    4b9c:	eb10 000c 	adds.w	r0, r0, ip
    4ba0:	f1c3 0320 	rsb	r3, r3, #32
    4ba4:	fa01 f103 	lsl.w	r1, r1, r3
    4ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4bac:	d502      	bpl.n	4bb4 <__addsf3+0x78>
    4bae:	4249      	negs	r1, r1
    4bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4bb8:	d313      	bcc.n	4be2 <__addsf3+0xa6>
    4bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4bbe:	d306      	bcc.n	4bce <__addsf3+0x92>
    4bc0:	0840      	lsrs	r0, r0, #1
    4bc2:	ea4f 0131 	mov.w	r1, r1, rrx
    4bc6:	f102 0201 	add.w	r2, r2, #1
    4bca:	2afe      	cmp	r2, #254	; 0xfe
    4bcc:	d251      	bcs.n	4c72 <__addsf3+0x136>
    4bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4bd6:	bf08      	it	eq
    4bd8:	f020 0001 	biceq.w	r0, r0, #1
    4bdc:	ea40 0003 	orr.w	r0, r0, r3
    4be0:	4770      	bx	lr
    4be2:	0049      	lsls	r1, r1, #1
    4be4:	eb40 0000 	adc.w	r0, r0, r0
    4be8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4bec:	f1a2 0201 	sub.w	r2, r2, #1
    4bf0:	d1ed      	bne.n	4bce <__addsf3+0x92>
    4bf2:	fab0 fc80 	clz	ip, r0
    4bf6:	f1ac 0c08 	sub.w	ip, ip, #8
    4bfa:	ebb2 020c 	subs.w	r2, r2, ip
    4bfe:	fa00 f00c 	lsl.w	r0, r0, ip
    4c02:	bfaa      	itet	ge
    4c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4c08:	4252      	neglt	r2, r2
    4c0a:	4318      	orrge	r0, r3
    4c0c:	bfbc      	itt	lt
    4c0e:	40d0      	lsrlt	r0, r2
    4c10:	4318      	orrlt	r0, r3
    4c12:	4770      	bx	lr
    4c14:	f092 0f00 	teq	r2, #0
    4c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4c1c:	bf06      	itte	eq
    4c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4c22:	3201      	addeq	r2, #1
    4c24:	3b01      	subne	r3, #1
    4c26:	e7b5      	b.n	4b94 <__addsf3+0x58>
    4c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4c30:	bf18      	it	ne
    4c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4c36:	d021      	beq.n	4c7c <__addsf3+0x140>
    4c38:	ea92 0f03 	teq	r2, r3
    4c3c:	d004      	beq.n	4c48 <__addsf3+0x10c>
    4c3e:	f092 0f00 	teq	r2, #0
    4c42:	bf08      	it	eq
    4c44:	4608      	moveq	r0, r1
    4c46:	4770      	bx	lr
    4c48:	ea90 0f01 	teq	r0, r1
    4c4c:	bf1c      	itt	ne
    4c4e:	2000      	movne	r0, #0
    4c50:	4770      	bxne	lr
    4c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4c56:	d104      	bne.n	4c62 <__addsf3+0x126>
    4c58:	0040      	lsls	r0, r0, #1
    4c5a:	bf28      	it	cs
    4c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4c60:	4770      	bx	lr
    4c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4c66:	bf3c      	itt	cc
    4c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4c6c:	4770      	bxcc	lr
    4c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c7a:	4770      	bx	lr
    4c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4c80:	bf16      	itet	ne
    4c82:	4608      	movne	r0, r1
    4c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4c88:	4601      	movne	r1, r0
    4c8a:	0242      	lsls	r2, r0, #9
    4c8c:	bf06      	itte	eq
    4c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4c92:	ea90 0f01 	teqeq	r0, r1
    4c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4c9a:	4770      	bx	lr

00004c9c <__aeabi_ui2f>:
    4c9c:	f04f 0300 	mov.w	r3, #0
    4ca0:	e004      	b.n	4cac <__aeabi_i2f+0x8>
    4ca2:	bf00      	nop

00004ca4 <__aeabi_i2f>:
    4ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4ca8:	bf48      	it	mi
    4caa:	4240      	negmi	r0, r0
    4cac:	ea5f 0c00 	movs.w	ip, r0
    4cb0:	bf08      	it	eq
    4cb2:	4770      	bxeq	lr
    4cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4cb8:	4601      	mov	r1, r0
    4cba:	f04f 0000 	mov.w	r0, #0
    4cbe:	e01c      	b.n	4cfa <__aeabi_l2f+0x2a>

00004cc0 <__aeabi_ul2f>:
    4cc0:	ea50 0201 	orrs.w	r2, r0, r1
    4cc4:	bf08      	it	eq
    4cc6:	4770      	bxeq	lr
    4cc8:	f04f 0300 	mov.w	r3, #0
    4ccc:	e00a      	b.n	4ce4 <__aeabi_l2f+0x14>
    4cce:	bf00      	nop

00004cd0 <__aeabi_l2f>:
    4cd0:	ea50 0201 	orrs.w	r2, r0, r1
    4cd4:	bf08      	it	eq
    4cd6:	4770      	bxeq	lr
    4cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4cdc:	d502      	bpl.n	4ce4 <__aeabi_l2f+0x14>
    4cde:	4240      	negs	r0, r0
    4ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4ce4:	ea5f 0c01 	movs.w	ip, r1
    4ce8:	bf02      	ittt	eq
    4cea:	4684      	moveq	ip, r0
    4cec:	4601      	moveq	r1, r0
    4cee:	2000      	moveq	r0, #0
    4cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4cf4:	bf08      	it	eq
    4cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4cfe:	fabc f28c 	clz	r2, ip
    4d02:	3a08      	subs	r2, #8
    4d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4d08:	db10      	blt.n	4d2c <__aeabi_l2f+0x5c>
    4d0a:	fa01 fc02 	lsl.w	ip, r1, r2
    4d0e:	4463      	add	r3, ip
    4d10:	fa00 fc02 	lsl.w	ip, r0, r2
    4d14:	f1c2 0220 	rsb	r2, r2, #32
    4d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4d1c:	fa20 f202 	lsr.w	r2, r0, r2
    4d20:	eb43 0002 	adc.w	r0, r3, r2
    4d24:	bf08      	it	eq
    4d26:	f020 0001 	biceq.w	r0, r0, #1
    4d2a:	4770      	bx	lr
    4d2c:	f102 0220 	add.w	r2, r2, #32
    4d30:	fa01 fc02 	lsl.w	ip, r1, r2
    4d34:	f1c2 0220 	rsb	r2, r2, #32
    4d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4d3c:	fa21 f202 	lsr.w	r2, r1, r2
    4d40:	eb43 0002 	adc.w	r0, r3, r2
    4d44:	bf08      	it	eq
    4d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4d4a:	4770      	bx	lr

00004d4c <__aeabi_uldivmod>:
    4d4c:	b953      	cbnz	r3, 4d64 <__aeabi_uldivmod+0x18>
    4d4e:	b94a      	cbnz	r2, 4d64 <__aeabi_uldivmod+0x18>
    4d50:	2900      	cmp	r1, #0
    4d52:	bf08      	it	eq
    4d54:	2800      	cmpeq	r0, #0
    4d56:	bf1c      	itt	ne
    4d58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4d5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4d60:	f001 b8f8 	b.w	5f54 <__aeabi_idiv0>
    4d64:	f1ad 0c08 	sub.w	ip, sp, #8
    4d68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4d6c:	f000 f806 	bl	4d7c <__udivmoddi4>
    4d70:	f8dd e004 	ldr.w	lr, [sp, #4]
    4d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4d78:	b004      	add	sp, #16
    4d7a:	4770      	bx	lr

00004d7c <__udivmoddi4>:
    4d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d80:	9e08      	ldr	r6, [sp, #32]
    4d82:	4604      	mov	r4, r0
    4d84:	4688      	mov	r8, r1
    4d86:	2b00      	cmp	r3, #0
    4d88:	d14b      	bne.n	4e22 <__udivmoddi4+0xa6>
    4d8a:	428a      	cmp	r2, r1
    4d8c:	4615      	mov	r5, r2
    4d8e:	d967      	bls.n	4e60 <__udivmoddi4+0xe4>
    4d90:	fab2 f282 	clz	r2, r2
    4d94:	b14a      	cbz	r2, 4daa <__udivmoddi4+0x2e>
    4d96:	f1c2 0720 	rsb	r7, r2, #32
    4d9a:	fa01 f302 	lsl.w	r3, r1, r2
    4d9e:	fa20 f707 	lsr.w	r7, r0, r7
    4da2:	4095      	lsls	r5, r2
    4da4:	ea47 0803 	orr.w	r8, r7, r3
    4da8:	4094      	lsls	r4, r2
    4daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4dae:	0c23      	lsrs	r3, r4, #16
    4db0:	fbb8 f7fe 	udiv	r7, r8, lr
    4db4:	fa1f fc85 	uxth.w	ip, r5
    4db8:	fb0e 8817 	mls	r8, lr, r7, r8
    4dbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4dc0:	fb07 f10c 	mul.w	r1, r7, ip
    4dc4:	4299      	cmp	r1, r3
    4dc6:	d909      	bls.n	4ddc <__udivmoddi4+0x60>
    4dc8:	18eb      	adds	r3, r5, r3
    4dca:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    4dce:	f080 811b 	bcs.w	5008 <__udivmoddi4+0x28c>
    4dd2:	4299      	cmp	r1, r3
    4dd4:	f240 8118 	bls.w	5008 <__udivmoddi4+0x28c>
    4dd8:	3f02      	subs	r7, #2
    4dda:	442b      	add	r3, r5
    4ddc:	1a5b      	subs	r3, r3, r1
    4dde:	b2a4      	uxth	r4, r4
    4de0:	fbb3 f0fe 	udiv	r0, r3, lr
    4de4:	fb0e 3310 	mls	r3, lr, r0, r3
    4de8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4dec:	fb00 fc0c 	mul.w	ip, r0, ip
    4df0:	45a4      	cmp	ip, r4
    4df2:	d909      	bls.n	4e08 <__udivmoddi4+0x8c>
    4df4:	192c      	adds	r4, r5, r4
    4df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4dfa:	f080 8107 	bcs.w	500c <__udivmoddi4+0x290>
    4dfe:	45a4      	cmp	ip, r4
    4e00:	f240 8104 	bls.w	500c <__udivmoddi4+0x290>
    4e04:	3802      	subs	r0, #2
    4e06:	442c      	add	r4, r5
    4e08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    4e0c:	eba4 040c 	sub.w	r4, r4, ip
    4e10:	2700      	movs	r7, #0
    4e12:	b11e      	cbz	r6, 4e1c <__udivmoddi4+0xa0>
    4e14:	40d4      	lsrs	r4, r2
    4e16:	2300      	movs	r3, #0
    4e18:	e9c6 4300 	strd	r4, r3, [r6]
    4e1c:	4639      	mov	r1, r7
    4e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e22:	428b      	cmp	r3, r1
    4e24:	d909      	bls.n	4e3a <__udivmoddi4+0xbe>
    4e26:	2e00      	cmp	r6, #0
    4e28:	f000 80eb 	beq.w	5002 <__udivmoddi4+0x286>
    4e2c:	2700      	movs	r7, #0
    4e2e:	e9c6 0100 	strd	r0, r1, [r6]
    4e32:	4638      	mov	r0, r7
    4e34:	4639      	mov	r1, r7
    4e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e3a:	fab3 f783 	clz	r7, r3
    4e3e:	2f00      	cmp	r7, #0
    4e40:	d147      	bne.n	4ed2 <__udivmoddi4+0x156>
    4e42:	428b      	cmp	r3, r1
    4e44:	d302      	bcc.n	4e4c <__udivmoddi4+0xd0>
    4e46:	4282      	cmp	r2, r0
    4e48:	f200 80fa 	bhi.w	5040 <__udivmoddi4+0x2c4>
    4e4c:	1a84      	subs	r4, r0, r2
    4e4e:	eb61 0303 	sbc.w	r3, r1, r3
    4e52:	2001      	movs	r0, #1
    4e54:	4698      	mov	r8, r3
    4e56:	2e00      	cmp	r6, #0
    4e58:	d0e0      	beq.n	4e1c <__udivmoddi4+0xa0>
    4e5a:	e9c6 4800 	strd	r4, r8, [r6]
    4e5e:	e7dd      	b.n	4e1c <__udivmoddi4+0xa0>
    4e60:	b902      	cbnz	r2, 4e64 <__udivmoddi4+0xe8>
    4e62:	deff      	udf	#255	; 0xff
    4e64:	fab2 f282 	clz	r2, r2
    4e68:	2a00      	cmp	r2, #0
    4e6a:	f040 808f 	bne.w	4f8c <__udivmoddi4+0x210>
    4e6e:	1b49      	subs	r1, r1, r5
    4e70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4e74:	fa1f f885 	uxth.w	r8, r5
    4e78:	2701      	movs	r7, #1
    4e7a:	fbb1 fcfe 	udiv	ip, r1, lr
    4e7e:	0c23      	lsrs	r3, r4, #16
    4e80:	fb0e 111c 	mls	r1, lr, ip, r1
    4e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4e88:	fb08 f10c 	mul.w	r1, r8, ip
    4e8c:	4299      	cmp	r1, r3
    4e8e:	d907      	bls.n	4ea0 <__udivmoddi4+0x124>
    4e90:	18eb      	adds	r3, r5, r3
    4e92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    4e96:	d202      	bcs.n	4e9e <__udivmoddi4+0x122>
    4e98:	4299      	cmp	r1, r3
    4e9a:	f200 80cd 	bhi.w	5038 <__udivmoddi4+0x2bc>
    4e9e:	4684      	mov	ip, r0
    4ea0:	1a59      	subs	r1, r3, r1
    4ea2:	b2a3      	uxth	r3, r4
    4ea4:	fbb1 f0fe 	udiv	r0, r1, lr
    4ea8:	fb0e 1410 	mls	r4, lr, r0, r1
    4eac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4eb0:	fb08 f800 	mul.w	r8, r8, r0
    4eb4:	45a0      	cmp	r8, r4
    4eb6:	d907      	bls.n	4ec8 <__udivmoddi4+0x14c>
    4eb8:	192c      	adds	r4, r5, r4
    4eba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4ebe:	d202      	bcs.n	4ec6 <__udivmoddi4+0x14a>
    4ec0:	45a0      	cmp	r8, r4
    4ec2:	f200 80b6 	bhi.w	5032 <__udivmoddi4+0x2b6>
    4ec6:	4618      	mov	r0, r3
    4ec8:	eba4 0408 	sub.w	r4, r4, r8
    4ecc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4ed0:	e79f      	b.n	4e12 <__udivmoddi4+0x96>
    4ed2:	f1c7 0c20 	rsb	ip, r7, #32
    4ed6:	40bb      	lsls	r3, r7
    4ed8:	fa22 fe0c 	lsr.w	lr, r2, ip
    4edc:	ea4e 0e03 	orr.w	lr, lr, r3
    4ee0:	fa01 f407 	lsl.w	r4, r1, r7
    4ee4:	fa20 f50c 	lsr.w	r5, r0, ip
    4ee8:	fa21 f30c 	lsr.w	r3, r1, ip
    4eec:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4ef0:	4325      	orrs	r5, r4
    4ef2:	fbb3 f9f8 	udiv	r9, r3, r8
    4ef6:	0c2c      	lsrs	r4, r5, #16
    4ef8:	fb08 3319 	mls	r3, r8, r9, r3
    4efc:	fa1f fa8e 	uxth.w	sl, lr
    4f00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4f04:	fb09 f40a 	mul.w	r4, r9, sl
    4f08:	429c      	cmp	r4, r3
    4f0a:	fa02 f207 	lsl.w	r2, r2, r7
    4f0e:	fa00 f107 	lsl.w	r1, r0, r7
    4f12:	d90b      	bls.n	4f2c <__udivmoddi4+0x1b0>
    4f14:	eb1e 0303 	adds.w	r3, lr, r3
    4f18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    4f1c:	f080 8087 	bcs.w	502e <__udivmoddi4+0x2b2>
    4f20:	429c      	cmp	r4, r3
    4f22:	f240 8084 	bls.w	502e <__udivmoddi4+0x2b2>
    4f26:	f1a9 0902 	sub.w	r9, r9, #2
    4f2a:	4473      	add	r3, lr
    4f2c:	1b1b      	subs	r3, r3, r4
    4f2e:	b2ad      	uxth	r5, r5
    4f30:	fbb3 f0f8 	udiv	r0, r3, r8
    4f34:	fb08 3310 	mls	r3, r8, r0, r3
    4f38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    4f3c:	fb00 fa0a 	mul.w	sl, r0, sl
    4f40:	45a2      	cmp	sl, r4
    4f42:	d908      	bls.n	4f56 <__udivmoddi4+0x1da>
    4f44:	eb1e 0404 	adds.w	r4, lr, r4
    4f48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4f4c:	d26b      	bcs.n	5026 <__udivmoddi4+0x2aa>
    4f4e:	45a2      	cmp	sl, r4
    4f50:	d969      	bls.n	5026 <__udivmoddi4+0x2aa>
    4f52:	3802      	subs	r0, #2
    4f54:	4474      	add	r4, lr
    4f56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4f5a:	fba0 8902 	umull	r8, r9, r0, r2
    4f5e:	eba4 040a 	sub.w	r4, r4, sl
    4f62:	454c      	cmp	r4, r9
    4f64:	46c2      	mov	sl, r8
    4f66:	464b      	mov	r3, r9
    4f68:	d354      	bcc.n	5014 <__udivmoddi4+0x298>
    4f6a:	d051      	beq.n	5010 <__udivmoddi4+0x294>
    4f6c:	2e00      	cmp	r6, #0
    4f6e:	d069      	beq.n	5044 <__udivmoddi4+0x2c8>
    4f70:	ebb1 050a 	subs.w	r5, r1, sl
    4f74:	eb64 0403 	sbc.w	r4, r4, r3
    4f78:	fa04 fc0c 	lsl.w	ip, r4, ip
    4f7c:	40fd      	lsrs	r5, r7
    4f7e:	40fc      	lsrs	r4, r7
    4f80:	ea4c 0505 	orr.w	r5, ip, r5
    4f84:	e9c6 5400 	strd	r5, r4, [r6]
    4f88:	2700      	movs	r7, #0
    4f8a:	e747      	b.n	4e1c <__udivmoddi4+0xa0>
    4f8c:	f1c2 0320 	rsb	r3, r2, #32
    4f90:	fa20 f703 	lsr.w	r7, r0, r3
    4f94:	4095      	lsls	r5, r2
    4f96:	fa01 f002 	lsl.w	r0, r1, r2
    4f9a:	fa21 f303 	lsr.w	r3, r1, r3
    4f9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4fa2:	4338      	orrs	r0, r7
    4fa4:	0c01      	lsrs	r1, r0, #16
    4fa6:	fbb3 f7fe 	udiv	r7, r3, lr
    4faa:	fa1f f885 	uxth.w	r8, r5
    4fae:	fb0e 3317 	mls	r3, lr, r7, r3
    4fb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4fb6:	fb07 f308 	mul.w	r3, r7, r8
    4fba:	428b      	cmp	r3, r1
    4fbc:	fa04 f402 	lsl.w	r4, r4, r2
    4fc0:	d907      	bls.n	4fd2 <__udivmoddi4+0x256>
    4fc2:	1869      	adds	r1, r5, r1
    4fc4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    4fc8:	d22f      	bcs.n	502a <__udivmoddi4+0x2ae>
    4fca:	428b      	cmp	r3, r1
    4fcc:	d92d      	bls.n	502a <__udivmoddi4+0x2ae>
    4fce:	3f02      	subs	r7, #2
    4fd0:	4429      	add	r1, r5
    4fd2:	1acb      	subs	r3, r1, r3
    4fd4:	b281      	uxth	r1, r0
    4fd6:	fbb3 f0fe 	udiv	r0, r3, lr
    4fda:	fb0e 3310 	mls	r3, lr, r0, r3
    4fde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4fe2:	fb00 f308 	mul.w	r3, r0, r8
    4fe6:	428b      	cmp	r3, r1
    4fe8:	d907      	bls.n	4ffa <__udivmoddi4+0x27e>
    4fea:	1869      	adds	r1, r5, r1
    4fec:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    4ff0:	d217      	bcs.n	5022 <__udivmoddi4+0x2a6>
    4ff2:	428b      	cmp	r3, r1
    4ff4:	d915      	bls.n	5022 <__udivmoddi4+0x2a6>
    4ff6:	3802      	subs	r0, #2
    4ff8:	4429      	add	r1, r5
    4ffa:	1ac9      	subs	r1, r1, r3
    4ffc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    5000:	e73b      	b.n	4e7a <__udivmoddi4+0xfe>
    5002:	4637      	mov	r7, r6
    5004:	4630      	mov	r0, r6
    5006:	e709      	b.n	4e1c <__udivmoddi4+0xa0>
    5008:	4607      	mov	r7, r0
    500a:	e6e7      	b.n	4ddc <__udivmoddi4+0x60>
    500c:	4618      	mov	r0, r3
    500e:	e6fb      	b.n	4e08 <__udivmoddi4+0x8c>
    5010:	4541      	cmp	r1, r8
    5012:	d2ab      	bcs.n	4f6c <__udivmoddi4+0x1f0>
    5014:	ebb8 0a02 	subs.w	sl, r8, r2
    5018:	eb69 020e 	sbc.w	r2, r9, lr
    501c:	3801      	subs	r0, #1
    501e:	4613      	mov	r3, r2
    5020:	e7a4      	b.n	4f6c <__udivmoddi4+0x1f0>
    5022:	4660      	mov	r0, ip
    5024:	e7e9      	b.n	4ffa <__udivmoddi4+0x27e>
    5026:	4618      	mov	r0, r3
    5028:	e795      	b.n	4f56 <__udivmoddi4+0x1da>
    502a:	4667      	mov	r7, ip
    502c:	e7d1      	b.n	4fd2 <__udivmoddi4+0x256>
    502e:	4681      	mov	r9, r0
    5030:	e77c      	b.n	4f2c <__udivmoddi4+0x1b0>
    5032:	3802      	subs	r0, #2
    5034:	442c      	add	r4, r5
    5036:	e747      	b.n	4ec8 <__udivmoddi4+0x14c>
    5038:	f1ac 0c02 	sub.w	ip, ip, #2
    503c:	442b      	add	r3, r5
    503e:	e72f      	b.n	4ea0 <__udivmoddi4+0x124>
    5040:	4638      	mov	r0, r7
    5042:	e708      	b.n	4e56 <__udivmoddi4+0xda>
    5044:	4637      	mov	r7, r6
    5046:	e6e9      	b.n	4e1c <__udivmoddi4+0xa0>

00005048 <selfrel_offset31>:
    5048:	6803      	ldr	r3, [r0, #0]
    504a:	005a      	lsls	r2, r3, #1
    504c:	bf4c      	ite	mi
    504e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    5052:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    5056:	4418      	add	r0, r3
    5058:	4770      	bx	lr
    505a:	bf00      	nop

0000505c <search_EIT_table>:
    505c:	b361      	cbz	r1, 50b8 <search_EIT_table+0x5c>
    505e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5062:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    5066:	4690      	mov	r8, r2
    5068:	4606      	mov	r6, r0
    506a:	46d1      	mov	r9, sl
    506c:	2700      	movs	r7, #0
    506e:	eb07 0409 	add.w	r4, r7, r9
    5072:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    5076:	1064      	asrs	r4, r4, #1
    5078:	00e5      	lsls	r5, r4, #3
    507a:	1971      	adds	r1, r6, r5
    507c:	4608      	mov	r0, r1
    507e:	f7ff ffe3 	bl	5048 <selfrel_offset31>
    5082:	45a2      	cmp	sl, r4
    5084:	4683      	mov	fp, r0
    5086:	f105 0008 	add.w	r0, r5, #8
    508a:	4430      	add	r0, r6
    508c:	d009      	beq.n	50a2 <search_EIT_table+0x46>
    508e:	f7ff ffdb 	bl	5048 <selfrel_offset31>
    5092:	45c3      	cmp	fp, r8
    5094:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    5098:	d805      	bhi.n	50a6 <search_EIT_table+0x4a>
    509a:	4540      	cmp	r0, r8
    509c:	d209      	bcs.n	50b2 <search_EIT_table+0x56>
    509e:	1c67      	adds	r7, r4, #1
    50a0:	e7e5      	b.n	506e <search_EIT_table+0x12>
    50a2:	45c3      	cmp	fp, r8
    50a4:	d905      	bls.n	50b2 <search_EIT_table+0x56>
    50a6:	42a7      	cmp	r7, r4
    50a8:	d002      	beq.n	50b0 <search_EIT_table+0x54>
    50aa:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    50ae:	e7de      	b.n	506e <search_EIT_table+0x12>
    50b0:	2100      	movs	r1, #0
    50b2:	4608      	mov	r0, r1
    50b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50b8:	4608      	mov	r0, r1
    50ba:	4770      	bx	lr

000050bc <__gnu_unwind_get_pr_addr>:
    50bc:	2801      	cmp	r0, #1
    50be:	d007      	beq.n	50d0 <__gnu_unwind_get_pr_addr+0x14>
    50c0:	2802      	cmp	r0, #2
    50c2:	d007      	beq.n	50d4 <__gnu_unwind_get_pr_addr+0x18>
    50c4:	4b04      	ldr	r3, [pc, #16]	; (50d8 <__gnu_unwind_get_pr_addr+0x1c>)
    50c6:	2800      	cmp	r0, #0
    50c8:	bf0c      	ite	eq
    50ca:	4618      	moveq	r0, r3
    50cc:	2000      	movne	r0, #0
    50ce:	4770      	bx	lr
    50d0:	4802      	ldr	r0, [pc, #8]	; (50dc <__gnu_unwind_get_pr_addr+0x20>)
    50d2:	4770      	bx	lr
    50d4:	4802      	ldr	r0, [pc, #8]	; (50e0 <__gnu_unwind_get_pr_addr+0x24>)
    50d6:	4770      	bx	lr
    50d8:	000057a9 	.word	0x000057a9
    50dc:	000057ad 	.word	0x000057ad
    50e0:	000057b1 	.word	0x000057b1

000050e4 <get_eit_entry>:
    50e4:	b530      	push	{r4, r5, lr}
    50e6:	4b25      	ldr	r3, [pc, #148]	; (517c <get_eit_entry+0x98>)
    50e8:	b083      	sub	sp, #12
    50ea:	4604      	mov	r4, r0
    50ec:	1e8d      	subs	r5, r1, #2
    50ee:	b34b      	cbz	r3, 5144 <get_eit_entry+0x60>
    50f0:	a901      	add	r1, sp, #4
    50f2:	4628      	mov	r0, r5
    50f4:	f3af 8000 	nop.w
    50f8:	b1f0      	cbz	r0, 5138 <get_eit_entry+0x54>
    50fa:	9901      	ldr	r1, [sp, #4]
    50fc:	462a      	mov	r2, r5
    50fe:	f7ff ffad 	bl	505c <search_EIT_table>
    5102:	4601      	mov	r1, r0
    5104:	b1c0      	cbz	r0, 5138 <get_eit_entry+0x54>
    5106:	f7ff ff9f 	bl	5048 <selfrel_offset31>
    510a:	684b      	ldr	r3, [r1, #4]
    510c:	64a0      	str	r0, [r4, #72]	; 0x48
    510e:	2b01      	cmp	r3, #1
    5110:	d02e      	beq.n	5170 <get_eit_entry+0x8c>
    5112:	2b00      	cmp	r3, #0
    5114:	f101 0004 	add.w	r0, r1, #4
    5118:	db26      	blt.n	5168 <get_eit_entry+0x84>
    511a:	f7ff ff95 	bl	5048 <selfrel_offset31>
    511e:	2300      	movs	r3, #0
    5120:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5124:	6803      	ldr	r3, [r0, #0]
    5126:	2b00      	cmp	r3, #0
    5128:	db12      	blt.n	5150 <get_eit_entry+0x6c>
    512a:	f7ff ff8d 	bl	5048 <selfrel_offset31>
    512e:	2300      	movs	r3, #0
    5130:	6120      	str	r0, [r4, #16]
    5132:	4618      	mov	r0, r3
    5134:	b003      	add	sp, #12
    5136:	bd30      	pop	{r4, r5, pc}
    5138:	2300      	movs	r3, #0
    513a:	6123      	str	r3, [r4, #16]
    513c:	2309      	movs	r3, #9
    513e:	4618      	mov	r0, r3
    5140:	b003      	add	sp, #12
    5142:	bd30      	pop	{r4, r5, pc}
    5144:	490e      	ldr	r1, [pc, #56]	; (5180 <get_eit_entry+0x9c>)
    5146:	480f      	ldr	r0, [pc, #60]	; (5184 <get_eit_entry+0xa0>)
    5148:	1a09      	subs	r1, r1, r0
    514a:	10c9      	asrs	r1, r1, #3
    514c:	9101      	str	r1, [sp, #4]
    514e:	e7d5      	b.n	50fc <get_eit_entry+0x18>
    5150:	f3c3 6003 	ubfx	r0, r3, #24, #4
    5154:	f7ff ffb2 	bl	50bc <__gnu_unwind_get_pr_addr>
    5158:	2800      	cmp	r0, #0
    515a:	bf14      	ite	ne
    515c:	2300      	movne	r3, #0
    515e:	2309      	moveq	r3, #9
    5160:	6120      	str	r0, [r4, #16]
    5162:	4618      	mov	r0, r3
    5164:	b003      	add	sp, #12
    5166:	bd30      	pop	{r4, r5, pc}
    5168:	2301      	movs	r3, #1
    516a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    516e:	e7d9      	b.n	5124 <get_eit_entry+0x40>
    5170:	2300      	movs	r3, #0
    5172:	6123      	str	r3, [r4, #16]
    5174:	2305      	movs	r3, #5
    5176:	4618      	mov	r0, r3
    5178:	b003      	add	sp, #12
    517a:	bd30      	pop	{r4, r5, pc}
    517c:	00000000 	.word	0x00000000
    5180:	00007324 	.word	0x00007324
    5184:	0000726c 	.word	0x0000726c

00005188 <restore_non_core_regs>:
    5188:	6803      	ldr	r3, [r0, #0]
    518a:	07da      	lsls	r2, r3, #31
    518c:	b510      	push	{r4, lr}
    518e:	4604      	mov	r4, r0
    5190:	d406      	bmi.n	51a0 <restore_non_core_regs+0x18>
    5192:	079b      	lsls	r3, r3, #30
    5194:	f100 0048 	add.w	r0, r0, #72	; 0x48
    5198:	d509      	bpl.n	51ae <restore_non_core_regs+0x26>
    519a:	f000 fc5f 	bl	5a5c <__gnu_Unwind_Restore_VFP_D>
    519e:	6823      	ldr	r3, [r4, #0]
    51a0:	0759      	lsls	r1, r3, #29
    51a2:	d509      	bpl.n	51b8 <restore_non_core_regs+0x30>
    51a4:	071a      	lsls	r2, r3, #28
    51a6:	d50e      	bpl.n	51c6 <restore_non_core_regs+0x3e>
    51a8:	06db      	lsls	r3, r3, #27
    51aa:	d513      	bpl.n	51d4 <restore_non_core_regs+0x4c>
    51ac:	bd10      	pop	{r4, pc}
    51ae:	f000 fc4d 	bl	5a4c <__gnu_Unwind_Restore_VFP>
    51b2:	6823      	ldr	r3, [r4, #0]
    51b4:	0759      	lsls	r1, r3, #29
    51b6:	d4f5      	bmi.n	51a4 <restore_non_core_regs+0x1c>
    51b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    51bc:	f000 fc56 	bl	5a6c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    51c0:	6823      	ldr	r3, [r4, #0]
    51c2:	071a      	lsls	r2, r3, #28
    51c4:	d4f0      	bmi.n	51a8 <restore_non_core_regs+0x20>
    51c6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    51ca:	f000 fc57 	bl	5a7c <__gnu_Unwind_Restore_WMMXD>
    51ce:	6823      	ldr	r3, [r4, #0]
    51d0:	06db      	lsls	r3, r3, #27
    51d2:	d4eb      	bmi.n	51ac <restore_non_core_regs+0x24>
    51d4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    51d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51dc:	f000 bc92 	b.w	5b04 <__gnu_Unwind_Restore_WMMXC>

000051e0 <_Unwind_decode_typeinfo_ptr.isra.0>:
    51e0:	6803      	ldr	r3, [r0, #0]
    51e2:	b103      	cbz	r3, 51e6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    51e4:	4403      	add	r3, r0
    51e6:	4618      	mov	r0, r3
    51e8:	4770      	bx	lr
    51ea:	bf00      	nop

000051ec <__gnu_unwind_24bit.isra.1>:
    51ec:	2009      	movs	r0, #9
    51ee:	4770      	bx	lr

000051f0 <_Unwind_DebugHook>:
    51f0:	4770      	bx	lr
    51f2:	bf00      	nop

000051f4 <unwind_phase2>:
    51f4:	b570      	push	{r4, r5, r6, lr}
    51f6:	4604      	mov	r4, r0
    51f8:	460d      	mov	r5, r1
    51fa:	e008      	b.n	520e <unwind_phase2+0x1a>
    51fc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    51fe:	6163      	str	r3, [r4, #20]
    5200:	462a      	mov	r2, r5
    5202:	6923      	ldr	r3, [r4, #16]
    5204:	4621      	mov	r1, r4
    5206:	2001      	movs	r0, #1
    5208:	4798      	blx	r3
    520a:	2808      	cmp	r0, #8
    520c:	d108      	bne.n	5220 <unwind_phase2+0x2c>
    520e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5210:	4620      	mov	r0, r4
    5212:	f7ff ff67 	bl	50e4 <get_eit_entry>
    5216:	4606      	mov	r6, r0
    5218:	2800      	cmp	r0, #0
    521a:	d0ef      	beq.n	51fc <unwind_phase2+0x8>
    521c:	f000 fe9c 	bl	5f58 <abort>
    5220:	2807      	cmp	r0, #7
    5222:	d1fb      	bne.n	521c <unwind_phase2+0x28>
    5224:	4630      	mov	r0, r6
    5226:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5228:	f7ff ffe2 	bl	51f0 <_Unwind_DebugHook>
    522c:	1d28      	adds	r0, r5, #4
    522e:	f000 fc01 	bl	5a34 <__restore_core_regs>
    5232:	bf00      	nop

00005234 <unwind_phase2_forced>:
    5234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5238:	1d0c      	adds	r4, r1, #4
    523a:	4605      	mov	r5, r0
    523c:	4617      	mov	r7, r2
    523e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5240:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    5244:	ae03      	add	r6, sp, #12
    5246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    524a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    524c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    524e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5250:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5254:	ac02      	add	r4, sp, #8
    5256:	f8d5 800c 	ldr.w	r8, [r5, #12]
    525a:	f8d5 9018 	ldr.w	r9, [r5, #24]
    525e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    5262:	2300      	movs	r3, #0
    5264:	6023      	str	r3, [r4, #0]
    5266:	e021      	b.n	52ac <unwind_phase2_forced+0x78>
    5268:	6c23      	ldr	r3, [r4, #64]	; 0x40
    526a:	616b      	str	r3, [r5, #20]
    526c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5270:	4621      	mov	r1, r4
    5272:	a87a      	add	r0, sp, #488	; 0x1e8
    5274:	f000 fe9c 	bl	5fb0 <memcpy>
    5278:	692b      	ldr	r3, [r5, #16]
    527a:	aa7a      	add	r2, sp, #488	; 0x1e8
    527c:	4629      	mov	r1, r5
    527e:	4630      	mov	r0, r6
    5280:	4798      	blx	r3
    5282:	9b88      	ldr	r3, [sp, #544]	; 0x220
    5284:	e9cd 4900 	strd	r4, r9, [sp]
    5288:	4682      	mov	sl, r0
    528a:	6463      	str	r3, [r4, #68]	; 0x44
    528c:	4631      	mov	r1, r6
    528e:	462b      	mov	r3, r5
    5290:	462a      	mov	r2, r5
    5292:	2001      	movs	r0, #1
    5294:	47c0      	blx	r8
    5296:	4607      	mov	r7, r0
    5298:	b9f8      	cbnz	r0, 52da <unwind_phase2_forced+0xa6>
    529a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    529e:	a97a      	add	r1, sp, #488	; 0x1e8
    52a0:	4620      	mov	r0, r4
    52a2:	f000 fe85 	bl	5fb0 <memcpy>
    52a6:	f1ba 0f08 	cmp.w	sl, #8
    52aa:	d11c      	bne.n	52e6 <unwind_phase2_forced+0xb2>
    52ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
    52ae:	4628      	mov	r0, r5
    52b0:	f7ff ff18 	bl	50e4 <get_eit_entry>
    52b4:	2f00      	cmp	r7, #0
    52b6:	bf08      	it	eq
    52b8:	2609      	moveq	r6, #9
    52ba:	4607      	mov	r7, r0
    52bc:	bf18      	it	ne
    52be:	260a      	movne	r6, #10
    52c0:	2800      	cmp	r0, #0
    52c2:	d0d1      	beq.n	5268 <unwind_phase2_forced+0x34>
    52c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    52c6:	f046 0110 	orr.w	r1, r6, #16
    52ca:	e9cd 4900 	strd	r4, r9, [sp]
    52ce:	462a      	mov	r2, r5
    52d0:	6463      	str	r3, [r4, #68]	; 0x44
    52d2:	2001      	movs	r0, #1
    52d4:	462b      	mov	r3, r5
    52d6:	47c0      	blx	r8
    52d8:	b100      	cbz	r0, 52dc <unwind_phase2_forced+0xa8>
    52da:	2709      	movs	r7, #9
    52dc:	4638      	mov	r0, r7
    52de:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    52e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52e6:	f1ba 0f07 	cmp.w	sl, #7
    52ea:	d1f6      	bne.n	52da <unwind_phase2_forced+0xa6>
    52ec:	4638      	mov	r0, r7
    52ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
    52f0:	f7ff ff7e 	bl	51f0 <_Unwind_DebugHook>
    52f4:	a803      	add	r0, sp, #12
    52f6:	f000 fb9d 	bl	5a34 <__restore_core_regs>
    52fa:	bf00      	nop

000052fc <_Unwind_GetCFA>:
    52fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
    52fe:	4770      	bx	lr

00005300 <__gnu_Unwind_RaiseException>:
    5300:	b5f0      	push	{r4, r5, r6, r7, lr}
    5302:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5304:	640b      	str	r3, [r1, #64]	; 0x40
    5306:	1d0d      	adds	r5, r1, #4
    5308:	460f      	mov	r7, r1
    530a:	4606      	mov	r6, r0
    530c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    530e:	b0f9      	sub	sp, #484	; 0x1e4
    5310:	ac01      	add	r4, sp, #4
    5312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    531a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    531c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5320:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5328:	9500      	str	r5, [sp, #0]
    532a:	e006      	b.n	533a <__gnu_Unwind_RaiseException+0x3a>
    532c:	6933      	ldr	r3, [r6, #16]
    532e:	466a      	mov	r2, sp
    5330:	4631      	mov	r1, r6
    5332:	4798      	blx	r3
    5334:	2808      	cmp	r0, #8
    5336:	4604      	mov	r4, r0
    5338:	d108      	bne.n	534c <__gnu_Unwind_RaiseException+0x4c>
    533a:	9910      	ldr	r1, [sp, #64]	; 0x40
    533c:	4630      	mov	r0, r6
    533e:	f7ff fed1 	bl	50e4 <get_eit_entry>
    5342:	2800      	cmp	r0, #0
    5344:	d0f2      	beq.n	532c <__gnu_Unwind_RaiseException+0x2c>
    5346:	2009      	movs	r0, #9
    5348:	b079      	add	sp, #484	; 0x1e4
    534a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    534c:	4668      	mov	r0, sp
    534e:	f7ff ff1b 	bl	5188 <restore_non_core_regs>
    5352:	2c06      	cmp	r4, #6
    5354:	d1f7      	bne.n	5346 <__gnu_Unwind_RaiseException+0x46>
    5356:	4639      	mov	r1, r7
    5358:	4630      	mov	r0, r6
    535a:	f7ff ff4b 	bl	51f4 <unwind_phase2>
    535e:	bf00      	nop

00005360 <__gnu_Unwind_ForcedUnwind>:
    5360:	b430      	push	{r4, r5}
    5362:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5364:	60c1      	str	r1, [r0, #12]
    5366:	6182      	str	r2, [r0, #24]
    5368:	4619      	mov	r1, r3
    536a:	641d      	str	r5, [r3, #64]	; 0x40
    536c:	2200      	movs	r2, #0
    536e:	bc30      	pop	{r4, r5}
    5370:	e760      	b.n	5234 <unwind_phase2_forced>
    5372:	bf00      	nop

00005374 <__gnu_Unwind_Resume>:
    5374:	b570      	push	{r4, r5, r6, lr}
    5376:	68c6      	ldr	r6, [r0, #12]
    5378:	6943      	ldr	r3, [r0, #20]
    537a:	640b      	str	r3, [r1, #64]	; 0x40
    537c:	b9be      	cbnz	r6, 53ae <__gnu_Unwind_Resume+0x3a>
    537e:	6903      	ldr	r3, [r0, #16]
    5380:	460a      	mov	r2, r1
    5382:	4604      	mov	r4, r0
    5384:	460d      	mov	r5, r1
    5386:	4601      	mov	r1, r0
    5388:	2002      	movs	r0, #2
    538a:	4798      	blx	r3
    538c:	2807      	cmp	r0, #7
    538e:	d007      	beq.n	53a0 <__gnu_Unwind_Resume+0x2c>
    5390:	2808      	cmp	r0, #8
    5392:	d103      	bne.n	539c <__gnu_Unwind_Resume+0x28>
    5394:	4629      	mov	r1, r5
    5396:	4620      	mov	r0, r4
    5398:	f7ff ff2c 	bl	51f4 <unwind_phase2>
    539c:	f000 fddc 	bl	5f58 <abort>
    53a0:	4630      	mov	r0, r6
    53a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    53a4:	f7ff ff24 	bl	51f0 <_Unwind_DebugHook>
    53a8:	1d28      	adds	r0, r5, #4
    53aa:	f000 fb43 	bl	5a34 <__restore_core_regs>
    53ae:	2201      	movs	r2, #1
    53b0:	f7ff ff40 	bl	5234 <unwind_phase2_forced>
    53b4:	f000 fdd0 	bl	5f58 <abort>

000053b8 <__gnu_Unwind_Resume_or_Rethrow>:
    53b8:	68c2      	ldr	r2, [r0, #12]
    53ba:	b11a      	cbz	r2, 53c4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    53bc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    53be:	640a      	str	r2, [r1, #64]	; 0x40
    53c0:	2200      	movs	r2, #0
    53c2:	e737      	b.n	5234 <unwind_phase2_forced>
    53c4:	e79c      	b.n	5300 <__gnu_Unwind_RaiseException>
    53c6:	bf00      	nop

000053c8 <_Unwind_Complete>:
    53c8:	4770      	bx	lr
    53ca:	bf00      	nop

000053cc <_Unwind_DeleteException>:
    53cc:	6883      	ldr	r3, [r0, #8]
    53ce:	b113      	cbz	r3, 53d6 <_Unwind_DeleteException+0xa>
    53d0:	4601      	mov	r1, r0
    53d2:	2001      	movs	r0, #1
    53d4:	4718      	bx	r3
    53d6:	4770      	bx	lr

000053d8 <_Unwind_VRS_Get>:
    53d8:	2904      	cmp	r1, #4
    53da:	d807      	bhi.n	53ec <_Unwind_VRS_Get+0x14>
    53dc:	e8df f001 	tbb	[pc, r1]
    53e0:	08060803 	.word	0x08060803
    53e4:	08          	.byte	0x08
    53e5:	00          	.byte	0x00
    53e6:	b90b      	cbnz	r3, 53ec <_Unwind_VRS_Get+0x14>
    53e8:	2a0f      	cmp	r2, #15
    53ea:	d903      	bls.n	53f4 <_Unwind_VRS_Get+0x1c>
    53ec:	2002      	movs	r0, #2
    53ee:	4770      	bx	lr
    53f0:	2001      	movs	r0, #1
    53f2:	4770      	bx	lr
    53f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    53f8:	4618      	mov	r0, r3
    53fa:	6853      	ldr	r3, [r2, #4]
    53fc:	9a00      	ldr	r2, [sp, #0]
    53fe:	6013      	str	r3, [r2, #0]
    5400:	4770      	bx	lr
    5402:	bf00      	nop

00005404 <_Unwind_GetGR>:
    5404:	b510      	push	{r4, lr}
    5406:	b084      	sub	sp, #16
    5408:	2300      	movs	r3, #0
    540a:	ac03      	add	r4, sp, #12
    540c:	460a      	mov	r2, r1
    540e:	9400      	str	r4, [sp, #0]
    5410:	4619      	mov	r1, r3
    5412:	f7ff ffe1 	bl	53d8 <_Unwind_VRS_Get>
    5416:	9803      	ldr	r0, [sp, #12]
    5418:	b004      	add	sp, #16
    541a:	bd10      	pop	{r4, pc}

0000541c <_Unwind_VRS_Set>:
    541c:	2904      	cmp	r1, #4
    541e:	d807      	bhi.n	5430 <_Unwind_VRS_Set+0x14>
    5420:	e8df f001 	tbb	[pc, r1]
    5424:	08060803 	.word	0x08060803
    5428:	08          	.byte	0x08
    5429:	00          	.byte	0x00
    542a:	b90b      	cbnz	r3, 5430 <_Unwind_VRS_Set+0x14>
    542c:	2a0f      	cmp	r2, #15
    542e:	d903      	bls.n	5438 <_Unwind_VRS_Set+0x1c>
    5430:	2002      	movs	r0, #2
    5432:	4770      	bx	lr
    5434:	2001      	movs	r0, #1
    5436:	4770      	bx	lr
    5438:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    543c:	9a00      	ldr	r2, [sp, #0]
    543e:	6812      	ldr	r2, [r2, #0]
    5440:	6042      	str	r2, [r0, #4]
    5442:	4618      	mov	r0, r3
    5444:	4770      	bx	lr
    5446:	bf00      	nop

00005448 <_Unwind_SetGR>:
    5448:	b510      	push	{r4, lr}
    544a:	b084      	sub	sp, #16
    544c:	ac04      	add	r4, sp, #16
    544e:	2300      	movs	r3, #0
    5450:	f844 2d04 	str.w	r2, [r4, #-4]!
    5454:	460a      	mov	r2, r1
    5456:	9400      	str	r4, [sp, #0]
    5458:	4619      	mov	r1, r3
    545a:	f7ff ffdf 	bl	541c <_Unwind_VRS_Set>
    545e:	b004      	add	sp, #16
    5460:	bd10      	pop	{r4, pc}
    5462:	bf00      	nop

00005464 <__gnu_Unwind_Backtrace>:
    5464:	b5f0      	push	{r4, r5, r6, r7, lr}
    5466:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    5468:	6413      	str	r3, [r2, #64]	; 0x40
    546a:	1d15      	adds	r5, r2, #4
    546c:	4607      	mov	r7, r0
    546e:	460e      	mov	r6, r1
    5470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5472:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    5476:	ac17      	add	r4, sp, #92	; 0x5c
    5478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    547a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    547c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    547e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5482:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5486:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    548a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    548e:	9516      	str	r5, [sp, #88]	; 0x58
    5490:	e010      	b.n	54b4 <__gnu_Unwind_Backtrace+0x50>
    5492:	a816      	add	r0, sp, #88	; 0x58
    5494:	f7ff ffd8 	bl	5448 <_Unwind_SetGR>
    5498:	4631      	mov	r1, r6
    549a:	a816      	add	r0, sp, #88	; 0x58
    549c:	47b8      	blx	r7
    549e:	aa16      	add	r2, sp, #88	; 0x58
    54a0:	4669      	mov	r1, sp
    54a2:	b978      	cbnz	r0, 54c4 <__gnu_Unwind_Backtrace+0x60>
    54a4:	9b04      	ldr	r3, [sp, #16]
    54a6:	2008      	movs	r0, #8
    54a8:	4798      	blx	r3
    54aa:	2805      	cmp	r0, #5
    54ac:	4604      	mov	r4, r0
    54ae:	d00a      	beq.n	54c6 <__gnu_Unwind_Backtrace+0x62>
    54b0:	2809      	cmp	r0, #9
    54b2:	d007      	beq.n	54c4 <__gnu_Unwind_Backtrace+0x60>
    54b4:	9926      	ldr	r1, [sp, #152]	; 0x98
    54b6:	4668      	mov	r0, sp
    54b8:	f7ff fe14 	bl	50e4 <get_eit_entry>
    54bc:	466a      	mov	r2, sp
    54be:	210c      	movs	r1, #12
    54c0:	2800      	cmp	r0, #0
    54c2:	d0e6      	beq.n	5492 <__gnu_Unwind_Backtrace+0x2e>
    54c4:	2409      	movs	r4, #9
    54c6:	a816      	add	r0, sp, #88	; 0x58
    54c8:	f7ff fe5e 	bl	5188 <restore_non_core_regs>
    54cc:	4620      	mov	r0, r4
    54ce:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    54d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000054d4 <__gnu_unwind_pr_common>:
    54d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d8:	460d      	mov	r5, r1
    54da:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    54dc:	b089      	sub	sp, #36	; 0x24
    54de:	1d0c      	adds	r4, r1, #4
    54e0:	4616      	mov	r6, r2
    54e2:	f000 0b03 	and.w	fp, r0, #3
    54e6:	680a      	ldr	r2, [r1, #0]
    54e8:	9406      	str	r4, [sp, #24]
    54ea:	461f      	mov	r7, r3
    54ec:	2b00      	cmp	r3, #0
    54ee:	d068      	beq.n	55c2 <__gnu_unwind_pr_common+0xee>
    54f0:	0c13      	lsrs	r3, r2, #16
    54f2:	b2d9      	uxtb	r1, r3
    54f4:	0412      	lsls	r2, r2, #16
    54f6:	f88d 301d 	strb.w	r3, [sp, #29]
    54fa:	2302      	movs	r3, #2
    54fc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    5500:	9205      	str	r2, [sp, #20]
    5502:	f88d 301c 	strb.w	r3, [sp, #28]
    5506:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    5508:	f1bb 0f02 	cmp.w	fp, #2
    550c:	bf08      	it	eq
    550e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    5510:	f013 0301 	ands.w	r3, r3, #1
    5514:	d146      	bne.n	55a4 <__gnu_unwind_pr_common+0xd0>
    5516:	9301      	str	r3, [sp, #4]
    5518:	f000 0308 	and.w	r3, r0, #8
    551c:	9300      	str	r3, [sp, #0]
    551e:	f8d4 9000 	ldr.w	r9, [r4]
    5522:	f1b9 0f00 	cmp.w	r9, #0
    5526:	f000 80f3 	beq.w	5710 <__gnu_unwind_pr_common+0x23c>
    552a:	2f02      	cmp	r7, #2
    552c:	d045      	beq.n	55ba <__gnu_unwind_pr_common+0xe6>
    552e:	f8b4 9000 	ldrh.w	r9, [r4]
    5532:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    5536:	3404      	adds	r4, #4
    5538:	6cab      	ldr	r3, [r5, #72]	; 0x48
    553a:	f028 0a01 	bic.w	sl, r8, #1
    553e:	210f      	movs	r1, #15
    5540:	4630      	mov	r0, r6
    5542:	449a      	add	sl, r3
    5544:	f7ff ff5e 	bl	5404 <_Unwind_GetGR>
    5548:	4582      	cmp	sl, r0
    554a:	d834      	bhi.n	55b6 <__gnu_unwind_pr_common+0xe2>
    554c:	f029 0301 	bic.w	r3, r9, #1
    5550:	4453      	add	r3, sl
    5552:	4283      	cmp	r3, r0
    5554:	bf94      	ite	ls
    5556:	2000      	movls	r0, #0
    5558:	2001      	movhi	r0, #1
    555a:	ea4f 0848 	mov.w	r8, r8, lsl #1
    555e:	f008 0802 	and.w	r8, r8, #2
    5562:	f009 0901 	and.w	r9, r9, #1
    5566:	ea48 0809 	orr.w	r8, r8, r9
    556a:	f1b8 0f01 	cmp.w	r8, #1
    556e:	d03a      	beq.n	55e6 <__gnu_unwind_pr_common+0x112>
    5570:	d331      	bcc.n	55d6 <__gnu_unwind_pr_common+0x102>
    5572:	f1b8 0f02 	cmp.w	r8, #2
    5576:	d11a      	bne.n	55ae <__gnu_unwind_pr_common+0xda>
    5578:	6823      	ldr	r3, [r4, #0]
    557a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    557e:	f1bb 0f00 	cmp.w	fp, #0
    5582:	d166      	bne.n	5652 <__gnu_unwind_pr_common+0x17e>
    5584:	b130      	cbz	r0, 5594 <__gnu_unwind_pr_common+0xc0>
    5586:	9a00      	ldr	r2, [sp, #0]
    5588:	2a00      	cmp	r2, #0
    558a:	d06c      	beq.n	5666 <__gnu_unwind_pr_common+0x192>
    558c:	f1ba 0f00 	cmp.w	sl, #0
    5590:	f000 8090 	beq.w	56b4 <__gnu_unwind_pr_common+0x1e0>
    5594:	2b00      	cmp	r3, #0
    5596:	da00      	bge.n	559a <__gnu_unwind_pr_common+0xc6>
    5598:	3404      	adds	r4, #4
    559a:	f10a 0301 	add.w	r3, sl, #1
    559e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    55a2:	e7bc      	b.n	551e <__gnu_unwind_pr_common+0x4a>
    55a4:	4630      	mov	r0, r6
    55a6:	a905      	add	r1, sp, #20
    55a8:	f000 fb46 	bl	5c38 <__gnu_unwind_execute>
    55ac:	b178      	cbz	r0, 55ce <__gnu_unwind_pr_common+0xfa>
    55ae:	2009      	movs	r0, #9
    55b0:	b009      	add	sp, #36	; 0x24
    55b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55b6:	2000      	movs	r0, #0
    55b8:	e7cf      	b.n	555a <__gnu_unwind_pr_common+0x86>
    55ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
    55be:	3408      	adds	r4, #8
    55c0:	e7ba      	b.n	5538 <__gnu_unwind_pr_common+0x64>
    55c2:	0212      	lsls	r2, r2, #8
    55c4:	2303      	movs	r3, #3
    55c6:	9205      	str	r2, [sp, #20]
    55c8:	f8ad 301c 	strh.w	r3, [sp, #28]
    55cc:	e79b      	b.n	5506 <__gnu_unwind_pr_common+0x32>
    55ce:	2008      	movs	r0, #8
    55d0:	b009      	add	sp, #36	; 0x24
    55d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55d6:	f1bb 0f00 	cmp.w	fp, #0
    55da:	d002      	beq.n	55e2 <__gnu_unwind_pr_common+0x10e>
    55dc:	2800      	cmp	r0, #0
    55de:	f040 80b4 	bne.w	574a <__gnu_unwind_pr_common+0x276>
    55e2:	3404      	adds	r4, #4
    55e4:	e79b      	b.n	551e <__gnu_unwind_pr_common+0x4a>
    55e6:	f1bb 0f00 	cmp.w	fp, #0
    55ea:	d118      	bne.n	561e <__gnu_unwind_pr_common+0x14a>
    55ec:	b1a8      	cbz	r0, 561a <__gnu_unwind_pr_common+0x146>
    55ee:	e9d4 2300 	ldrd	r2, r3, [r4]
    55f2:	1c99      	adds	r1, r3, #2
    55f4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    55f8:	d0d9      	beq.n	55ae <__gnu_unwind_pr_common+0xda>
    55fa:	f105 0158 	add.w	r1, r5, #88	; 0x58
    55fe:	3301      	adds	r3, #1
    5600:	9104      	str	r1, [sp, #16]
    5602:	f000 80b5 	beq.w	5770 <__gnu_unwind_pr_common+0x29c>
    5606:	1d20      	adds	r0, r4, #4
    5608:	f7ff fdea 	bl	51e0 <_Unwind_decode_typeinfo_ptr.isra.0>
    560c:	ab04      	add	r3, sp, #16
    560e:	4601      	mov	r1, r0
    5610:	4628      	mov	r0, r5
    5612:	f3af 8000 	nop.w
    5616:	2800      	cmp	r0, #0
    5618:	d167      	bne.n	56ea <__gnu_unwind_pr_common+0x216>
    561a:	3408      	adds	r4, #8
    561c:	e77f      	b.n	551e <__gnu_unwind_pr_common+0x4a>
    561e:	210d      	movs	r1, #13
    5620:	4630      	mov	r0, r6
    5622:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5626:	f7ff feed 	bl	5404 <_Unwind_GetGR>
    562a:	4580      	cmp	r8, r0
    562c:	d1f5      	bne.n	561a <__gnu_unwind_pr_common+0x146>
    562e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5630:	429c      	cmp	r4, r3
    5632:	d1f2      	bne.n	561a <__gnu_unwind_pr_common+0x146>
    5634:	4620      	mov	r0, r4
    5636:	f7ff fd07 	bl	5048 <selfrel_offset31>
    563a:	210f      	movs	r1, #15
    563c:	4602      	mov	r2, r0
    563e:	4630      	mov	r0, r6
    5640:	f7ff ff02 	bl	5448 <_Unwind_SetGR>
    5644:	4630      	mov	r0, r6
    5646:	462a      	mov	r2, r5
    5648:	2100      	movs	r1, #0
    564a:	f7ff fefd 	bl	5448 <_Unwind_SetGR>
    564e:	2007      	movs	r0, #7
    5650:	e7ae      	b.n	55b0 <__gnu_unwind_pr_common+0xdc>
    5652:	210d      	movs	r1, #13
    5654:	4630      	mov	r0, r6
    5656:	f8d5 8020 	ldr.w	r8, [r5, #32]
    565a:	f7ff fed3 	bl	5404 <_Unwind_GetGR>
    565e:	4580      	cmp	r8, r0
    5660:	d032      	beq.n	56c8 <__gnu_unwind_pr_common+0x1f4>
    5662:	6823      	ldr	r3, [r4, #0]
    5664:	e796      	b.n	5594 <__gnu_unwind_pr_common+0xc0>
    5666:	f1ba 0f00 	cmp.w	sl, #0
    566a:	d023      	beq.n	56b4 <__gnu_unwind_pr_common+0x1e0>
    566c:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5670:	f104 0804 	add.w	r8, r4, #4
    5674:	f8cd b008 	str.w	fp, [sp, #8]
    5678:	f8dd 9000 	ldr.w	r9, [sp]
    567c:	9703      	str	r7, [sp, #12]
    567e:	46a3      	mov	fp, r4
    5680:	461c      	mov	r4, r3
    5682:	e002      	b.n	568a <__gnu_unwind_pr_common+0x1b6>
    5684:	4557      	cmp	r7, sl
    5686:	46b9      	mov	r9, r7
    5688:	d040      	beq.n	570c <__gnu_unwind_pr_common+0x238>
    568a:	4640      	mov	r0, r8
    568c:	9404      	str	r4, [sp, #16]
    568e:	f7ff fda7 	bl	51e0 <_Unwind_decode_typeinfo_ptr.isra.0>
    5692:	ab04      	add	r3, sp, #16
    5694:	4601      	mov	r1, r0
    5696:	2200      	movs	r2, #0
    5698:	4628      	mov	r0, r5
    569a:	f3af 8000 	nop.w
    569e:	f109 0701 	add.w	r7, r9, #1
    56a2:	f108 0804 	add.w	r8, r8, #4
    56a6:	2800      	cmp	r0, #0
    56a8:	d0ec      	beq.n	5684 <__gnu_unwind_pr_common+0x1b0>
    56aa:	45d1      	cmp	r9, sl
    56ac:	465c      	mov	r4, fp
    56ae:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    56b2:	d1d6      	bne.n	5662 <__gnu_unwind_pr_common+0x18e>
    56b4:	4630      	mov	r0, r6
    56b6:	210d      	movs	r1, #13
    56b8:	f7ff fea4 	bl	5404 <_Unwind_GetGR>
    56bc:	9b04      	ldr	r3, [sp, #16]
    56be:	6228      	str	r0, [r5, #32]
    56c0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    56c4:	2006      	movs	r0, #6
    56c6:	e773      	b.n	55b0 <__gnu_unwind_pr_common+0xdc>
    56c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    56ca:	429c      	cmp	r4, r3
    56cc:	d1c9      	bne.n	5662 <__gnu_unwind_pr_common+0x18e>
    56ce:	2204      	movs	r2, #4
    56d0:	f04f 0800 	mov.w	r8, #0
    56d4:	18a3      	adds	r3, r4, r2
    56d6:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    56da:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    56de:	6823      	ldr	r3, [r4, #0]
    56e0:	4543      	cmp	r3, r8
    56e2:	db4d      	blt.n	5780 <__gnu_unwind_pr_common+0x2ac>
    56e4:	2301      	movs	r3, #1
    56e6:	9301      	str	r3, [sp, #4]
    56e8:	e757      	b.n	559a <__gnu_unwind_pr_common+0xc6>
    56ea:	4680      	mov	r8, r0
    56ec:	210d      	movs	r1, #13
    56ee:	4630      	mov	r0, r6
    56f0:	f7ff fe88 	bl	5404 <_Unwind_GetGR>
    56f4:	f1b8 0f02 	cmp.w	r8, #2
    56f8:	6228      	str	r0, [r5, #32]
    56fa:	d13e      	bne.n	577a <__gnu_unwind_pr_common+0x2a6>
    56fc:	462b      	mov	r3, r5
    56fe:	9a04      	ldr	r2, [sp, #16]
    5700:	f843 2f2c 	str.w	r2, [r3, #44]!
    5704:	626b      	str	r3, [r5, #36]	; 0x24
    5706:	62ac      	str	r4, [r5, #40]	; 0x28
    5708:	2006      	movs	r0, #6
    570a:	e751      	b.n	55b0 <__gnu_unwind_pr_common+0xdc>
    570c:	465c      	mov	r4, fp
    570e:	e7d1      	b.n	56b4 <__gnu_unwind_pr_common+0x1e0>
    5710:	a905      	add	r1, sp, #20
    5712:	4630      	mov	r0, r6
    5714:	f000 fa90 	bl	5c38 <__gnu_unwind_execute>
    5718:	2800      	cmp	r0, #0
    571a:	f47f af48 	bne.w	55ae <__gnu_unwind_pr_common+0xda>
    571e:	9b01      	ldr	r3, [sp, #4]
    5720:	2b00      	cmp	r3, #0
    5722:	f43f af54 	beq.w	55ce <__gnu_unwind_pr_common+0xfa>
    5726:	210f      	movs	r1, #15
    5728:	4630      	mov	r0, r6
    572a:	f7ff fe6b 	bl	5404 <_Unwind_GetGR>
    572e:	210e      	movs	r1, #14
    5730:	4602      	mov	r2, r0
    5732:	4630      	mov	r0, r6
    5734:	f7ff fe88 	bl	5448 <_Unwind_SetGR>
    5738:	4630      	mov	r0, r6
    573a:	4a1a      	ldr	r2, [pc, #104]	; (57a4 <__gnu_unwind_pr_common+0x2d0>)
    573c:	210f      	movs	r1, #15
    573e:	f7ff fe83 	bl	5448 <_Unwind_SetGR>
    5742:	2007      	movs	r0, #7
    5744:	b009      	add	sp, #36	; 0x24
    5746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    574a:	4620      	mov	r0, r4
    574c:	f7ff fc7c 	bl	5048 <selfrel_offset31>
    5750:	3404      	adds	r4, #4
    5752:	4607      	mov	r7, r0
    5754:	63ac      	str	r4, [r5, #56]	; 0x38
    5756:	4628      	mov	r0, r5
    5758:	f3af 8000 	nop.w
    575c:	2800      	cmp	r0, #0
    575e:	f43f af26 	beq.w	55ae <__gnu_unwind_pr_common+0xda>
    5762:	4630      	mov	r0, r6
    5764:	463a      	mov	r2, r7
    5766:	210f      	movs	r1, #15
    5768:	f7ff fe6e 	bl	5448 <_Unwind_SetGR>
    576c:	2007      	movs	r0, #7
    576e:	e71f      	b.n	55b0 <__gnu_unwind_pr_common+0xdc>
    5770:	4630      	mov	r0, r6
    5772:	210d      	movs	r1, #13
    5774:	f7ff fe46 	bl	5404 <_Unwind_GetGR>
    5778:	6228      	str	r0, [r5, #32]
    577a:	9b04      	ldr	r3, [sp, #16]
    577c:	626b      	str	r3, [r5, #36]	; 0x24
    577e:	e7c2      	b.n	5706 <__gnu_unwind_pr_common+0x232>
    5780:	f10a 0001 	add.w	r0, sl, #1
    5784:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5788:	f7ff fc5e 	bl	5048 <selfrel_offset31>
    578c:	210f      	movs	r1, #15
    578e:	4602      	mov	r2, r0
    5790:	4630      	mov	r0, r6
    5792:	f7ff fe59 	bl	5448 <_Unwind_SetGR>
    5796:	4630      	mov	r0, r6
    5798:	462a      	mov	r2, r5
    579a:	4641      	mov	r1, r8
    579c:	f7ff fe54 	bl	5448 <_Unwind_SetGR>
    57a0:	2007      	movs	r0, #7
    57a2:	e705      	b.n	55b0 <__gnu_unwind_pr_common+0xdc>
    57a4:	00000000 	.word	0x00000000

000057a8 <__aeabi_unwind_cpp_pr0>:
    57a8:	2300      	movs	r3, #0
    57aa:	e693      	b.n	54d4 <__gnu_unwind_pr_common>

000057ac <__aeabi_unwind_cpp_pr1>:
    57ac:	2301      	movs	r3, #1
    57ae:	e691      	b.n	54d4 <__gnu_unwind_pr_common>

000057b0 <__aeabi_unwind_cpp_pr2>:
    57b0:	2302      	movs	r3, #2
    57b2:	e68f      	b.n	54d4 <__gnu_unwind_pr_common>

000057b4 <_Unwind_VRS_Pop>:
    57b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57b8:	4605      	mov	r5, r0
    57ba:	b0c4      	sub	sp, #272	; 0x110
    57bc:	2904      	cmp	r1, #4
    57be:	d806      	bhi.n	57ce <_Unwind_VRS_Pop+0x1a>
    57c0:	e8df f001 	tbb	[pc, r1]
    57c4:	03052b4d 	.word	0x03052b4d
    57c8:	09          	.byte	0x09
    57c9:	00          	.byte	0x00
    57ca:	2b03      	cmp	r3, #3
    57cc:	d05f      	beq.n	588e <_Unwind_VRS_Pop+0xda>
    57ce:	2002      	movs	r0, #2
    57d0:	b044      	add	sp, #272	; 0x110
    57d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57d6:	2b00      	cmp	r3, #0
    57d8:	d1f9      	bne.n	57ce <_Unwind_VRS_Pop+0x1a>
    57da:	2a10      	cmp	r2, #16
    57dc:	d8f7      	bhi.n	57ce <_Unwind_VRS_Pop+0x1a>
    57de:	682b      	ldr	r3, [r5, #0]
    57e0:	06dc      	lsls	r4, r3, #27
    57e2:	f100 80f4 	bmi.w	59ce <_Unwind_VRS_Pop+0x21a>
    57e6:	ac22      	add	r4, sp, #136	; 0x88
    57e8:	4620      	mov	r0, r4
    57ea:	9201      	str	r2, [sp, #4]
    57ec:	f000 f994 	bl	5b18 <__gnu_Unwind_Save_WMMXC>
    57f0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    57f2:	9a01      	ldr	r2, [sp, #4]
    57f4:	2300      	movs	r3, #0
    57f6:	2601      	movs	r6, #1
    57f8:	fa06 f103 	lsl.w	r1, r6, r3
    57fc:	4211      	tst	r1, r2
    57fe:	d003      	beq.n	5808 <_Unwind_VRS_Pop+0x54>
    5800:	6801      	ldr	r1, [r0, #0]
    5802:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    5806:	3004      	adds	r0, #4
    5808:	3301      	adds	r3, #1
    580a:	2b04      	cmp	r3, #4
    580c:	d1f4      	bne.n	57f8 <_Unwind_VRS_Pop+0x44>
    580e:	63a8      	str	r0, [r5, #56]	; 0x38
    5810:	4620      	mov	r0, r4
    5812:	f000 f977 	bl	5b04 <__gnu_Unwind_Restore_WMMXC>
    5816:	2000      	movs	r0, #0
    5818:	e7da      	b.n	57d0 <_Unwind_VRS_Pop+0x1c>
    581a:	2b01      	cmp	r3, #1
    581c:	ea4f 4612 	mov.w	r6, r2, lsr #16
    5820:	b297      	uxth	r7, r2
    5822:	d052      	beq.n	58ca <_Unwind_VRS_Pop+0x116>
    5824:	2b05      	cmp	r3, #5
    5826:	d1d2      	bne.n	57ce <_Unwind_VRS_Pop+0x1a>
    5828:	eb06 0807 	add.w	r8, r6, r7
    582c:	f1b8 0f20 	cmp.w	r8, #32
    5830:	d8cd      	bhi.n	57ce <_Unwind_VRS_Pop+0x1a>
    5832:	2e0f      	cmp	r6, #15
    5834:	f240 8099 	bls.w	596a <_Unwind_VRS_Pop+0x1b6>
    5838:	46b8      	mov	r8, r7
    583a:	2f00      	cmp	r7, #0
    583c:	f040 80db 	bne.w	59f6 <_Unwind_VRS_Pop+0x242>
    5840:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5842:	63aa      	str	r2, [r5, #56]	; 0x38
    5844:	2e0f      	cmp	r6, #15
    5846:	f240 80be 	bls.w	59c6 <_Unwind_VRS_Pop+0x212>
    584a:	f1b8 0f00 	cmp.w	r8, #0
    584e:	d002      	beq.n	5856 <_Unwind_VRS_Pop+0xa2>
    5850:	a802      	add	r0, sp, #8
    5852:	f000 f90b 	bl	5a6c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5856:	2000      	movs	r0, #0
    5858:	b044      	add	sp, #272	; 0x110
    585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    585e:	2b00      	cmp	r3, #0
    5860:	d1b5      	bne.n	57ce <_Unwind_VRS_Pop+0x1a>
    5862:	6bac      	ldr	r4, [r5, #56]	; 0x38
    5864:	b297      	uxth	r7, r2
    5866:	1d28      	adds	r0, r5, #4
    5868:	2601      	movs	r6, #1
    586a:	fa06 f103 	lsl.w	r1, r6, r3
    586e:	4239      	tst	r1, r7
    5870:	f103 0301 	add.w	r3, r3, #1
    5874:	d002      	beq.n	587c <_Unwind_VRS_Pop+0xc8>
    5876:	6821      	ldr	r1, [r4, #0]
    5878:	6001      	str	r1, [r0, #0]
    587a:	3404      	adds	r4, #4
    587c:	2b10      	cmp	r3, #16
    587e:	f100 0004 	add.w	r0, r0, #4
    5882:	d1f2      	bne.n	586a <_Unwind_VRS_Pop+0xb6>
    5884:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5888:	d1e5      	bne.n	5856 <_Unwind_VRS_Pop+0xa2>
    588a:	63ac      	str	r4, [r5, #56]	; 0x38
    588c:	e7a0      	b.n	57d0 <_Unwind_VRS_Pop+0x1c>
    588e:	0c16      	lsrs	r6, r2, #16
    5890:	b297      	uxth	r7, r2
    5892:	19f3      	adds	r3, r6, r7
    5894:	2b10      	cmp	r3, #16
    5896:	d89a      	bhi.n	57ce <_Unwind_VRS_Pop+0x1a>
    5898:	682b      	ldr	r3, [r5, #0]
    589a:	071a      	lsls	r2, r3, #28
    589c:	d45d      	bmi.n	595a <_Unwind_VRS_Pop+0x1a6>
    589e:	ac22      	add	r4, sp, #136	; 0x88
    58a0:	4620      	mov	r0, r4
    58a2:	f000 f90d 	bl	5ac0 <__gnu_Unwind_Save_WMMXD>
    58a6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    58aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
    58ac:	b13f      	cbz	r7, 58be <_Unwind_VRS_Pop+0x10a>
    58ae:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    58b2:	6818      	ldr	r0, [r3, #0]
    58b4:	f841 0b04 	str.w	r0, [r1], #4
    58b8:	3304      	adds	r3, #4
    58ba:	4293      	cmp	r3, r2
    58bc:	d1f9      	bne.n	58b2 <_Unwind_VRS_Pop+0xfe>
    58be:	4620      	mov	r0, r4
    58c0:	63ab      	str	r3, [r5, #56]	; 0x38
    58c2:	f000 f8db 	bl	5a7c <__gnu_Unwind_Restore_WMMXD>
    58c6:	2000      	movs	r0, #0
    58c8:	e782      	b.n	57d0 <_Unwind_VRS_Pop+0x1c>
    58ca:	19f2      	adds	r2, r6, r7
    58cc:	2a10      	cmp	r2, #16
    58ce:	f63f af7e 	bhi.w	57ce <_Unwind_VRS_Pop+0x1a>
    58d2:	2e0f      	cmp	r6, #15
    58d4:	f63f af7b 	bhi.w	57ce <_Unwind_VRS_Pop+0x1a>
    58d8:	682a      	ldr	r2, [r5, #0]
    58da:	07d1      	lsls	r1, r2, #31
    58dc:	d508      	bpl.n	58f0 <_Unwind_VRS_Pop+0x13c>
    58de:	4628      	mov	r0, r5
    58e0:	f022 0203 	bic.w	r2, r2, #3
    58e4:	f840 2b48 	str.w	r2, [r0], #72
    58e8:	9301      	str	r3, [sp, #4]
    58ea:	f000 f8b3 	bl	5a54 <__gnu_Unwind_Save_VFP>
    58ee:	9b01      	ldr	r3, [sp, #4]
    58f0:	9301      	str	r3, [sp, #4]
    58f2:	ac22      	add	r4, sp, #136	; 0x88
    58f4:	4620      	mov	r0, r4
    58f6:	f000 f8ad 	bl	5a54 <__gnu_Unwind_Save_VFP>
    58fa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    58fc:	9b01      	ldr	r3, [sp, #4]
    58fe:	2f00      	cmp	r7, #0
    5900:	f000 8095 	beq.w	5a2e <_Unwind_VRS_Pop+0x27a>
    5904:	007f      	lsls	r7, r7, #1
    5906:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    590a:	f04f 0800 	mov.w	r8, #0
    590e:	3c04      	subs	r4, #4
    5910:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    5914:	f851 0b04 	ldr.w	r0, [r1], #4
    5918:	f844 0f04 	str.w	r0, [r4, #4]!
    591c:	4291      	cmp	r1, r2
    591e:	d1f9      	bne.n	5914 <_Unwind_VRS_Pop+0x160>
    5920:	f1b8 0f00 	cmp.w	r8, #0
    5924:	d00f      	beq.n	5946 <_Unwind_VRS_Pop+0x192>
    5926:	ac02      	add	r4, sp, #8
    5928:	2e10      	cmp	r6, #16
    592a:	4631      	mov	r1, r6
    592c:	bf38      	it	cc
    592e:	2110      	movcc	r1, #16
    5930:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5934:	3984      	subs	r1, #132	; 0x84
    5936:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    593a:	f852 0b04 	ldr.w	r0, [r2], #4
    593e:	f841 0f04 	str.w	r0, [r1, #4]!
    5942:	4294      	cmp	r4, r2
    5944:	d1f9      	bne.n	593a <_Unwind_VRS_Pop+0x186>
    5946:	2b01      	cmp	r3, #1
    5948:	f47f af7b 	bne.w	5842 <_Unwind_VRS_Pop+0x8e>
    594c:	ac22      	add	r4, sp, #136	; 0x88
    594e:	3204      	adds	r2, #4
    5950:	63aa      	str	r2, [r5, #56]	; 0x38
    5952:	4620      	mov	r0, r4
    5954:	f000 f87a 	bl	5a4c <__gnu_Unwind_Restore_VFP>
    5958:	e77d      	b.n	5856 <_Unwind_VRS_Pop+0xa2>
    595a:	f023 0308 	bic.w	r3, r3, #8
    595e:	602b      	str	r3, [r5, #0]
    5960:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    5964:	f000 f8ac 	bl	5ac0 <__gnu_Unwind_Save_WMMXD>
    5968:	e799      	b.n	589e <_Unwind_VRS_Pop+0xea>
    596a:	f1b8 0f10 	cmp.w	r8, #16
    596e:	682a      	ldr	r2, [r5, #0]
    5970:	d943      	bls.n	59fa <_Unwind_VRS_Pop+0x246>
    5972:	07d0      	lsls	r0, r2, #31
    5974:	f1a8 0810 	sub.w	r8, r8, #16
    5978:	d50b      	bpl.n	5992 <_Unwind_VRS_Pop+0x1de>
    597a:	4628      	mov	r0, r5
    597c:	f022 0201 	bic.w	r2, r2, #1
    5980:	f042 0202 	orr.w	r2, r2, #2
    5984:	f840 2b48 	str.w	r2, [r0], #72
    5988:	9301      	str	r3, [sp, #4]
    598a:	f000 f86b 	bl	5a64 <__gnu_Unwind_Save_VFP_D>
    598e:	682a      	ldr	r2, [r5, #0]
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	0751      	lsls	r1, r2, #29
    5994:	d425      	bmi.n	59e2 <_Unwind_VRS_Pop+0x22e>
    5996:	2e0f      	cmp	r6, #15
    5998:	d804      	bhi.n	59a4 <_Unwind_VRS_Pop+0x1f0>
    599a:	a822      	add	r0, sp, #136	; 0x88
    599c:	9301      	str	r3, [sp, #4]
    599e:	f000 f861 	bl	5a64 <__gnu_Unwind_Save_VFP_D>
    59a2:	9b01      	ldr	r3, [sp, #4]
    59a4:	9301      	str	r3, [sp, #4]
    59a6:	ac02      	add	r4, sp, #8
    59a8:	4620      	mov	r0, r4
    59aa:	f000 f863 	bl	5a74 <__gnu_Unwind_Save_VFP_D_16_to_31>
    59ae:	f1c6 0110 	rsb	r1, r6, #16
    59b2:	2900      	cmp	r1, #0
    59b4:	6baa      	ldr	r2, [r5, #56]	; 0x38
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	ddb6      	ble.n	5928 <_Unwind_VRS_Pop+0x174>
    59ba:	ac22      	add	r4, sp, #136	; 0x88
    59bc:	004f      	lsls	r7, r1, #1
    59be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    59c2:	4611      	mov	r1, r2
    59c4:	e7a3      	b.n	590e <_Unwind_VRS_Pop+0x15a>
    59c6:	a822      	add	r0, sp, #136	; 0x88
    59c8:	f000 f848 	bl	5a5c <__gnu_Unwind_Restore_VFP_D>
    59cc:	e73d      	b.n	584a <_Unwind_VRS_Pop+0x96>
    59ce:	f023 0310 	bic.w	r3, r3, #16
    59d2:	602b      	str	r3, [r5, #0]
    59d4:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    59d8:	9201      	str	r2, [sp, #4]
    59da:	f000 f89d 	bl	5b18 <__gnu_Unwind_Save_WMMXC>
    59de:	9a01      	ldr	r2, [sp, #4]
    59e0:	e701      	b.n	57e6 <_Unwind_VRS_Pop+0x32>
    59e2:	4628      	mov	r0, r5
    59e4:	f022 0204 	bic.w	r2, r2, #4
    59e8:	f840 2bd0 	str.w	r2, [r0], #208
    59ec:	9301      	str	r3, [sp, #4]
    59ee:	f000 f841 	bl	5a74 <__gnu_Unwind_Save_VFP_D_16_to_31>
    59f2:	9b01      	ldr	r3, [sp, #4]
    59f4:	e7cf      	b.n	5996 <_Unwind_VRS_Pop+0x1e2>
    59f6:	682a      	ldr	r2, [r5, #0]
    59f8:	e7cb      	b.n	5992 <_Unwind_VRS_Pop+0x1de>
    59fa:	07d0      	lsls	r0, r2, #31
    59fc:	d50a      	bpl.n	5a14 <_Unwind_VRS_Pop+0x260>
    59fe:	4628      	mov	r0, r5
    5a00:	f022 0201 	bic.w	r2, r2, #1
    5a04:	f042 0202 	orr.w	r2, r2, #2
    5a08:	f840 2b48 	str.w	r2, [r0], #72
    5a0c:	9301      	str	r3, [sp, #4]
    5a0e:	f000 f829 	bl	5a64 <__gnu_Unwind_Save_VFP_D>
    5a12:	9b01      	ldr	r3, [sp, #4]
    5a14:	9301      	str	r3, [sp, #4]
    5a16:	ac22      	add	r4, sp, #136	; 0x88
    5a18:	4620      	mov	r0, r4
    5a1a:	f000 f823 	bl	5a64 <__gnu_Unwind_Save_VFP_D>
    5a1e:	46b8      	mov	r8, r7
    5a20:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5a22:	9b01      	ldr	r3, [sp, #4]
    5a24:	2f00      	cmp	r7, #0
    5a26:	f47f af6d 	bne.w	5904 <_Unwind_VRS_Pop+0x150>
    5a2a:	460a      	mov	r2, r1
    5a2c:	e709      	b.n	5842 <_Unwind_VRS_Pop+0x8e>
    5a2e:	460a      	mov	r2, r1
    5a30:	e78d      	b.n	594e <_Unwind_VRS_Pop+0x19a>
    5a32:	bf00      	nop

00005a34 <__restore_core_regs>:
    5a34:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5a38:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    5a3c:	469c      	mov	ip, r3
    5a3e:	46a6      	mov	lr, r4
    5a40:	f84c 5d04 	str.w	r5, [ip, #-4]!
    5a44:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    5a48:	46e5      	mov	sp, ip
    5a4a:	bd00      	pop	{pc}

00005a4c <__gnu_Unwind_Restore_VFP>:
    5a4c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop

00005a54 <__gnu_Unwind_Save_VFP>:
    5a54:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    5a58:	4770      	bx	lr
    5a5a:	bf00      	nop

00005a5c <__gnu_Unwind_Restore_VFP_D>:
    5a5c:	ec90 0b20 	vldmia	r0, {d0-d15}
    5a60:	4770      	bx	lr
    5a62:	bf00      	nop

00005a64 <__gnu_Unwind_Save_VFP_D>:
    5a64:	ec80 0b20 	vstmia	r0, {d0-d15}
    5a68:	4770      	bx	lr
    5a6a:	bf00      	nop

00005a6c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5a6c:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5a70:	4770      	bx	lr
    5a72:	bf00      	nop

00005a74 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5a74:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5a78:	4770      	bx	lr
    5a7a:	bf00      	nop

00005a7c <__gnu_Unwind_Restore_WMMXD>:
    5a7c:	ecf0 0102 	ldfe	f0, [r0], #8
    5a80:	ecf0 1102 	ldfe	f1, [r0], #8
    5a84:	ecf0 2102 	ldfe	f2, [r0], #8
    5a88:	ecf0 3102 	ldfe	f3, [r0], #8
    5a8c:	ecf0 4102 	ldfe	f4, [r0], #8
    5a90:	ecf0 5102 	ldfe	f5, [r0], #8
    5a94:	ecf0 6102 	ldfe	f6, [r0], #8
    5a98:	ecf0 7102 	ldfe	f7, [r0], #8
    5a9c:	ecf0 8102 	ldfp	f0, [r0], #8
    5aa0:	ecf0 9102 	ldfp	f1, [r0], #8
    5aa4:	ecf0 a102 	ldfp	f2, [r0], #8
    5aa8:	ecf0 b102 	ldfp	f3, [r0], #8
    5aac:	ecf0 c102 	ldfp	f4, [r0], #8
    5ab0:	ecf0 d102 	ldfp	f5, [r0], #8
    5ab4:	ecf0 e102 	ldfp	f6, [r0], #8
    5ab8:	ecf0 f102 	ldfp	f7, [r0], #8
    5abc:	4770      	bx	lr
    5abe:	bf00      	nop

00005ac0 <__gnu_Unwind_Save_WMMXD>:
    5ac0:	ece0 0102 	stfe	f0, [r0], #8
    5ac4:	ece0 1102 	stfe	f1, [r0], #8
    5ac8:	ece0 2102 	stfe	f2, [r0], #8
    5acc:	ece0 3102 	stfe	f3, [r0], #8
    5ad0:	ece0 4102 	stfe	f4, [r0], #8
    5ad4:	ece0 5102 	stfe	f5, [r0], #8
    5ad8:	ece0 6102 	stfe	f6, [r0], #8
    5adc:	ece0 7102 	stfe	f7, [r0], #8
    5ae0:	ece0 8102 	stfp	f0, [r0], #8
    5ae4:	ece0 9102 	stfp	f1, [r0], #8
    5ae8:	ece0 a102 	stfp	f2, [r0], #8
    5aec:	ece0 b102 	stfp	f3, [r0], #8
    5af0:	ece0 c102 	stfp	f4, [r0], #8
    5af4:	ece0 d102 	stfp	f5, [r0], #8
    5af8:	ece0 e102 	stfp	f6, [r0], #8
    5afc:	ece0 f102 	stfp	f7, [r0], #8
    5b00:	4770      	bx	lr
    5b02:	bf00      	nop

00005b04 <__gnu_Unwind_Restore_WMMXC>:
    5b04:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    5b08:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    5b0c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    5b10:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    5b14:	4770      	bx	lr
    5b16:	bf00      	nop

00005b18 <__gnu_Unwind_Save_WMMXC>:
    5b18:	fca0 8101 	stc2	1, cr8, [r0], #4
    5b1c:	fca0 9101 	stc2	1, cr9, [r0], #4
    5b20:	fca0 a101 	stc2	1, cr10, [r0], #4
    5b24:	fca0 b101 	stc2	1, cr11, [r0], #4
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop

00005b2c <_Unwind_RaiseException>:
    5b2c:	46ec      	mov	ip, sp
    5b2e:	b500      	push	{lr}
    5b30:	e92d 5000 	stmdb	sp!, {ip, lr}
    5b34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5b38:	f04f 0300 	mov.w	r3, #0
    5b3c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5b40:	a901      	add	r1, sp, #4
    5b42:	f7ff fbdd 	bl	5300 <__gnu_Unwind_RaiseException>
    5b46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5b4a:	b012      	add	sp, #72	; 0x48
    5b4c:	4770      	bx	lr
    5b4e:	bf00      	nop

00005b50 <_Unwind_Resume>:
    5b50:	46ec      	mov	ip, sp
    5b52:	b500      	push	{lr}
    5b54:	e92d 5000 	stmdb	sp!, {ip, lr}
    5b58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5b5c:	f04f 0300 	mov.w	r3, #0
    5b60:	e92d 000c 	stmdb	sp!, {r2, r3}
    5b64:	a901      	add	r1, sp, #4
    5b66:	f7ff fc05 	bl	5374 <__gnu_Unwind_Resume>
    5b6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5b6e:	b012      	add	sp, #72	; 0x48
    5b70:	4770      	bx	lr
    5b72:	bf00      	nop

00005b74 <_Unwind_Resume_or_Rethrow>:
    5b74:	46ec      	mov	ip, sp
    5b76:	b500      	push	{lr}
    5b78:	e92d 5000 	stmdb	sp!, {ip, lr}
    5b7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5b80:	f04f 0300 	mov.w	r3, #0
    5b84:	e92d 000c 	stmdb	sp!, {r2, r3}
    5b88:	a901      	add	r1, sp, #4
    5b8a:	f7ff fc15 	bl	53b8 <__gnu_Unwind_Resume_or_Rethrow>
    5b8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5b92:	b012      	add	sp, #72	; 0x48
    5b94:	4770      	bx	lr
    5b96:	bf00      	nop

00005b98 <_Unwind_ForcedUnwind>:
    5b98:	46ec      	mov	ip, sp
    5b9a:	b500      	push	{lr}
    5b9c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5ba0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5ba4:	f04f 0300 	mov.w	r3, #0
    5ba8:	e92d 000c 	stmdb	sp!, {r2, r3}
    5bac:	ab01      	add	r3, sp, #4
    5bae:	f7ff fbd7 	bl	5360 <__gnu_Unwind_ForcedUnwind>
    5bb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5bb6:	b012      	add	sp, #72	; 0x48
    5bb8:	4770      	bx	lr
    5bba:	bf00      	nop

00005bbc <_Unwind_Backtrace>:
    5bbc:	46ec      	mov	ip, sp
    5bbe:	b500      	push	{lr}
    5bc0:	e92d 5000 	stmdb	sp!, {ip, lr}
    5bc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5bc8:	f04f 0300 	mov.w	r3, #0
    5bcc:	e92d 000c 	stmdb	sp!, {r2, r3}
    5bd0:	aa01      	add	r2, sp, #4
    5bd2:	f7ff fc47 	bl	5464 <__gnu_Unwind_Backtrace>
    5bd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5bda:	b012      	add	sp, #72	; 0x48
    5bdc:	4770      	bx	lr
    5bde:	bf00      	nop

00005be0 <next_unwind_byte>:
    5be0:	7a02      	ldrb	r2, [r0, #8]
    5be2:	b982      	cbnz	r2, 5c06 <next_unwind_byte+0x26>
    5be4:	7a43      	ldrb	r3, [r0, #9]
    5be6:	b1ab      	cbz	r3, 5c14 <next_unwind_byte+0x34>
    5be8:	6842      	ldr	r2, [r0, #4]
    5bea:	3b01      	subs	r3, #1
    5bec:	b410      	push	{r4}
    5bee:	7243      	strb	r3, [r0, #9]
    5bf0:	6813      	ldr	r3, [r2, #0]
    5bf2:	2103      	movs	r1, #3
    5bf4:	1d14      	adds	r4, r2, #4
    5bf6:	7201      	strb	r1, [r0, #8]
    5bf8:	021a      	lsls	r2, r3, #8
    5bfa:	6044      	str	r4, [r0, #4]
    5bfc:	6002      	str	r2, [r0, #0]
    5bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
    5c02:	0e18      	lsrs	r0, r3, #24
    5c04:	4770      	bx	lr
    5c06:	6803      	ldr	r3, [r0, #0]
    5c08:	3a01      	subs	r2, #1
    5c0a:	7202      	strb	r2, [r0, #8]
    5c0c:	021a      	lsls	r2, r3, #8
    5c0e:	6002      	str	r2, [r0, #0]
    5c10:	0e18      	lsrs	r0, r3, #24
    5c12:	4770      	bx	lr
    5c14:	20b0      	movs	r0, #176	; 0xb0
    5c16:	4770      	bx	lr

00005c18 <_Unwind_GetGR.constprop.0>:
    5c18:	b500      	push	{lr}
    5c1a:	b085      	sub	sp, #20
    5c1c:	aa03      	add	r2, sp, #12
    5c1e:	2300      	movs	r3, #0
    5c20:	9200      	str	r2, [sp, #0]
    5c22:	4619      	mov	r1, r3
    5c24:	220c      	movs	r2, #12
    5c26:	f7ff fbd7 	bl	53d8 <_Unwind_VRS_Get>
    5c2a:	9803      	ldr	r0, [sp, #12]
    5c2c:	b005      	add	sp, #20
    5c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    5c32:	bf00      	nop

00005c34 <unwind_UCB_from_context>:
    5c34:	e7f0      	b.n	5c18 <_Unwind_GetGR.constprop.0>
    5c36:	bf00      	nop

00005c38 <__gnu_unwind_execute>:
    5c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c3c:	4605      	mov	r5, r0
    5c3e:	b085      	sub	sp, #20
    5c40:	460e      	mov	r6, r1
    5c42:	f04f 0800 	mov.w	r8, #0
    5c46:	4630      	mov	r0, r6
    5c48:	f7ff ffca 	bl	5be0 <next_unwind_byte>
    5c4c:	28b0      	cmp	r0, #176	; 0xb0
    5c4e:	4604      	mov	r4, r0
    5c50:	f000 80b1 	beq.w	5db6 <__gnu_unwind_execute+0x17e>
    5c54:	0607      	lsls	r7, r0, #24
    5c56:	d520      	bpl.n	5c9a <__gnu_unwind_execute+0x62>
    5c58:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    5c5c:	2b80      	cmp	r3, #128	; 0x80
    5c5e:	d065      	beq.n	5d2c <__gnu_unwind_execute+0xf4>
    5c60:	2b90      	cmp	r3, #144	; 0x90
    5c62:	d036      	beq.n	5cd2 <__gnu_unwind_execute+0x9a>
    5c64:	2ba0      	cmp	r3, #160	; 0xa0
    5c66:	d078      	beq.n	5d5a <__gnu_unwind_execute+0x122>
    5c68:	2bb0      	cmp	r3, #176	; 0xb0
    5c6a:	d047      	beq.n	5cfc <__gnu_unwind_execute+0xc4>
    5c6c:	2bc0      	cmp	r3, #192	; 0xc0
    5c6e:	f000 808a 	beq.w	5d86 <__gnu_unwind_execute+0x14e>
    5c72:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5c76:	2bd0      	cmp	r3, #208	; 0xd0
    5c78:	d10b      	bne.n	5c92 <__gnu_unwind_execute+0x5a>
    5c7a:	f000 0207 	and.w	r2, r0, #7
    5c7e:	3201      	adds	r2, #1
    5c80:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5c84:	2305      	movs	r3, #5
    5c86:	2101      	movs	r1, #1
    5c88:	4628      	mov	r0, r5
    5c8a:	f7ff fd93 	bl	57b4 <_Unwind_VRS_Pop>
    5c8e:	2800      	cmp	r0, #0
    5c90:	d0d9      	beq.n	5c46 <__gnu_unwind_execute+0xe>
    5c92:	2009      	movs	r0, #9
    5c94:	b005      	add	sp, #20
    5c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5c9a:	f10d 090c 	add.w	r9, sp, #12
    5c9e:	2300      	movs	r3, #0
    5ca0:	4619      	mov	r1, r3
    5ca2:	0087      	lsls	r7, r0, #2
    5ca4:	f8cd 9000 	str.w	r9, [sp]
    5ca8:	220d      	movs	r2, #13
    5caa:	4628      	mov	r0, r5
    5cac:	f7ff fb94 	bl	53d8 <_Unwind_VRS_Get>
    5cb0:	b2ff      	uxtb	r7, r7
    5cb2:	9b03      	ldr	r3, [sp, #12]
    5cb4:	f8cd 9000 	str.w	r9, [sp]
    5cb8:	3704      	adds	r7, #4
    5cba:	0660      	lsls	r0, r4, #25
    5cbc:	bf4c      	ite	mi
    5cbe:	1bdf      	submi	r7, r3, r7
    5cc0:	18ff      	addpl	r7, r7, r3
    5cc2:	2300      	movs	r3, #0
    5cc4:	4619      	mov	r1, r3
    5cc6:	220d      	movs	r2, #13
    5cc8:	4628      	mov	r0, r5
    5cca:	9703      	str	r7, [sp, #12]
    5ccc:	f7ff fba6 	bl	541c <_Unwind_VRS_Set>
    5cd0:	e7b9      	b.n	5c46 <__gnu_unwind_execute+0xe>
    5cd2:	f000 030d 	and.w	r3, r0, #13
    5cd6:	2b0d      	cmp	r3, #13
    5cd8:	d0db      	beq.n	5c92 <__gnu_unwind_execute+0x5a>
    5cda:	af03      	add	r7, sp, #12
    5cdc:	2300      	movs	r3, #0
    5cde:	f000 020f 	and.w	r2, r0, #15
    5ce2:	4619      	mov	r1, r3
    5ce4:	9700      	str	r7, [sp, #0]
    5ce6:	4628      	mov	r0, r5
    5ce8:	f7ff fb76 	bl	53d8 <_Unwind_VRS_Get>
    5cec:	2300      	movs	r3, #0
    5cee:	9700      	str	r7, [sp, #0]
    5cf0:	4619      	mov	r1, r3
    5cf2:	220d      	movs	r2, #13
    5cf4:	4628      	mov	r0, r5
    5cf6:	f7ff fb91 	bl	541c <_Unwind_VRS_Set>
    5cfa:	e7a4      	b.n	5c46 <__gnu_unwind_execute+0xe>
    5cfc:	28b1      	cmp	r0, #177	; 0xb1
    5cfe:	d05f      	beq.n	5dc0 <__gnu_unwind_execute+0x188>
    5d00:	28b2      	cmp	r0, #178	; 0xb2
    5d02:	f000 80cc 	beq.w	5e9e <__gnu_unwind_execute+0x266>
    5d06:	28b3      	cmp	r0, #179	; 0xb3
    5d08:	d07e      	beq.n	5e08 <__gnu_unwind_execute+0x1d0>
    5d0a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    5d0e:	2bb4      	cmp	r3, #180	; 0xb4
    5d10:	d0bf      	beq.n	5c92 <__gnu_unwind_execute+0x5a>
    5d12:	f000 0207 	and.w	r2, r0, #7
    5d16:	3201      	adds	r2, #1
    5d18:	2301      	movs	r3, #1
    5d1a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5d1e:	4619      	mov	r1, r3
    5d20:	4628      	mov	r0, r5
    5d22:	f7ff fd47 	bl	57b4 <_Unwind_VRS_Pop>
    5d26:	2800      	cmp	r0, #0
    5d28:	d08d      	beq.n	5c46 <__gnu_unwind_execute+0xe>
    5d2a:	e7b2      	b.n	5c92 <__gnu_unwind_execute+0x5a>
    5d2c:	4630      	mov	r0, r6
    5d2e:	f7ff ff57 	bl	5be0 <next_unwind_byte>
    5d32:	0224      	lsls	r4, r4, #8
    5d34:	4304      	orrs	r4, r0
    5d36:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5d3a:	d0aa      	beq.n	5c92 <__gnu_unwind_execute+0x5a>
    5d3c:	0124      	lsls	r4, r4, #4
    5d3e:	2300      	movs	r3, #0
    5d40:	b2a2      	uxth	r2, r4
    5d42:	4619      	mov	r1, r3
    5d44:	4628      	mov	r0, r5
    5d46:	f7ff fd35 	bl	57b4 <_Unwind_VRS_Pop>
    5d4a:	2800      	cmp	r0, #0
    5d4c:	d1a1      	bne.n	5c92 <__gnu_unwind_execute+0x5a>
    5d4e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    5d52:	bf18      	it	ne
    5d54:	f04f 0801 	movne.w	r8, #1
    5d58:	e775      	b.n	5c46 <__gnu_unwind_execute+0xe>
    5d5a:	43c2      	mvns	r2, r0
    5d5c:	f002 0307 	and.w	r3, r2, #7
    5d60:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    5d64:	411a      	asrs	r2, r3
    5d66:	0701      	lsls	r1, r0, #28
    5d68:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    5d6c:	f04f 0300 	mov.w	r3, #0
    5d70:	bf48      	it	mi
    5d72:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    5d76:	4619      	mov	r1, r3
    5d78:	4628      	mov	r0, r5
    5d7a:	f7ff fd1b 	bl	57b4 <_Unwind_VRS_Pop>
    5d7e:	2800      	cmp	r0, #0
    5d80:	f43f af61 	beq.w	5c46 <__gnu_unwind_execute+0xe>
    5d84:	e785      	b.n	5c92 <__gnu_unwind_execute+0x5a>
    5d86:	28c6      	cmp	r0, #198	; 0xc6
    5d88:	d051      	beq.n	5e2e <__gnu_unwind_execute+0x1f6>
    5d8a:	28c7      	cmp	r0, #199	; 0xc7
    5d8c:	d05a      	beq.n	5e44 <__gnu_unwind_execute+0x20c>
    5d8e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5d92:	2bc0      	cmp	r3, #192	; 0xc0
    5d94:	d069      	beq.n	5e6a <__gnu_unwind_execute+0x232>
    5d96:	28c8      	cmp	r0, #200	; 0xc8
    5d98:	d075      	beq.n	5e86 <__gnu_unwind_execute+0x24e>
    5d9a:	28c9      	cmp	r0, #201	; 0xc9
    5d9c:	f47f af79 	bne.w	5c92 <__gnu_unwind_execute+0x5a>
    5da0:	4630      	mov	r0, r6
    5da2:	f7ff ff1d 	bl	5be0 <next_unwind_byte>
    5da6:	0302      	lsls	r2, r0, #12
    5da8:	f000 000f 	and.w	r0, r0, #15
    5dac:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    5db0:	3001      	adds	r0, #1
    5db2:	4302      	orrs	r2, r0
    5db4:	e766      	b.n	5c84 <__gnu_unwind_execute+0x4c>
    5db6:	f1b8 0f00 	cmp.w	r8, #0
    5dba:	d014      	beq.n	5de6 <__gnu_unwind_execute+0x1ae>
    5dbc:	2000      	movs	r0, #0
    5dbe:	e769      	b.n	5c94 <__gnu_unwind_execute+0x5c>
    5dc0:	4630      	mov	r0, r6
    5dc2:	f7ff ff0d 	bl	5be0 <next_unwind_byte>
    5dc6:	2800      	cmp	r0, #0
    5dc8:	f43f af63 	beq.w	5c92 <__gnu_unwind_execute+0x5a>
    5dcc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5dd0:	f47f af5f 	bne.w	5c92 <__gnu_unwind_execute+0x5a>
    5dd4:	4602      	mov	r2, r0
    5dd6:	4619      	mov	r1, r3
    5dd8:	4628      	mov	r0, r5
    5dda:	f7ff fceb 	bl	57b4 <_Unwind_VRS_Pop>
    5dde:	2800      	cmp	r0, #0
    5de0:	f43f af31 	beq.w	5c46 <__gnu_unwind_execute+0xe>
    5de4:	e755      	b.n	5c92 <__gnu_unwind_execute+0x5a>
    5de6:	ac03      	add	r4, sp, #12
    5de8:	4643      	mov	r3, r8
    5dea:	220e      	movs	r2, #14
    5dec:	4641      	mov	r1, r8
    5dee:	9400      	str	r4, [sp, #0]
    5df0:	4628      	mov	r0, r5
    5df2:	f7ff faf1 	bl	53d8 <_Unwind_VRS_Get>
    5df6:	9400      	str	r4, [sp, #0]
    5df8:	4628      	mov	r0, r5
    5dfa:	4643      	mov	r3, r8
    5dfc:	220f      	movs	r2, #15
    5dfe:	4641      	mov	r1, r8
    5e00:	f7ff fb0c 	bl	541c <_Unwind_VRS_Set>
    5e04:	4640      	mov	r0, r8
    5e06:	e745      	b.n	5c94 <__gnu_unwind_execute+0x5c>
    5e08:	4630      	mov	r0, r6
    5e0a:	f7ff fee9 	bl	5be0 <next_unwind_byte>
    5e0e:	0301      	lsls	r1, r0, #12
    5e10:	f000 000f 	and.w	r0, r0, #15
    5e14:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5e18:	1c42      	adds	r2, r0, #1
    5e1a:	2301      	movs	r3, #1
    5e1c:	430a      	orrs	r2, r1
    5e1e:	4628      	mov	r0, r5
    5e20:	4619      	mov	r1, r3
    5e22:	f7ff fcc7 	bl	57b4 <_Unwind_VRS_Pop>
    5e26:	2800      	cmp	r0, #0
    5e28:	f43f af0d 	beq.w	5c46 <__gnu_unwind_execute+0xe>
    5e2c:	e731      	b.n	5c92 <__gnu_unwind_execute+0x5a>
    5e2e:	4630      	mov	r0, r6
    5e30:	f7ff fed6 	bl	5be0 <next_unwind_byte>
    5e34:	0301      	lsls	r1, r0, #12
    5e36:	f000 000f 	and.w	r0, r0, #15
    5e3a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5e3e:	1c42      	adds	r2, r0, #1
    5e40:	2303      	movs	r3, #3
    5e42:	e7eb      	b.n	5e1c <__gnu_unwind_execute+0x1e4>
    5e44:	4630      	mov	r0, r6
    5e46:	f7ff fecb 	bl	5be0 <next_unwind_byte>
    5e4a:	4602      	mov	r2, r0
    5e4c:	2800      	cmp	r0, #0
    5e4e:	f43f af20 	beq.w	5c92 <__gnu_unwind_execute+0x5a>
    5e52:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5e56:	f47f af1c 	bne.w	5c92 <__gnu_unwind_execute+0x5a>
    5e5a:	2104      	movs	r1, #4
    5e5c:	4628      	mov	r0, r5
    5e5e:	f7ff fca9 	bl	57b4 <_Unwind_VRS_Pop>
    5e62:	2800      	cmp	r0, #0
    5e64:	f43f aeef 	beq.w	5c46 <__gnu_unwind_execute+0xe>
    5e68:	e713      	b.n	5c92 <__gnu_unwind_execute+0x5a>
    5e6a:	f000 020f 	and.w	r2, r0, #15
    5e6e:	3201      	adds	r2, #1
    5e70:	2303      	movs	r3, #3
    5e72:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    5e76:	4619      	mov	r1, r3
    5e78:	4628      	mov	r0, r5
    5e7a:	f7ff fc9b 	bl	57b4 <_Unwind_VRS_Pop>
    5e7e:	2800      	cmp	r0, #0
    5e80:	f43f aee1 	beq.w	5c46 <__gnu_unwind_execute+0xe>
    5e84:	e705      	b.n	5c92 <__gnu_unwind_execute+0x5a>
    5e86:	4630      	mov	r0, r6
    5e88:	f7ff feaa 	bl	5be0 <next_unwind_byte>
    5e8c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    5e90:	f000 030f 	and.w	r3, r0, #15
    5e94:	3210      	adds	r2, #16
    5e96:	3301      	adds	r3, #1
    5e98:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    5e9c:	e6f2      	b.n	5c84 <__gnu_unwind_execute+0x4c>
    5e9e:	2300      	movs	r3, #0
    5ea0:	f10d 090c 	add.w	r9, sp, #12
    5ea4:	220d      	movs	r2, #13
    5ea6:	4619      	mov	r1, r3
    5ea8:	f8cd 9000 	str.w	r9, [sp]
    5eac:	4628      	mov	r0, r5
    5eae:	f7ff fa93 	bl	53d8 <_Unwind_VRS_Get>
    5eb2:	4630      	mov	r0, r6
    5eb4:	f7ff fe94 	bl	5be0 <next_unwind_byte>
    5eb8:	0602      	lsls	r2, r0, #24
    5eba:	f04f 0702 	mov.w	r7, #2
    5ebe:	d50c      	bpl.n	5eda <__gnu_unwind_execute+0x2a2>
    5ec0:	9b03      	ldr	r3, [sp, #12]
    5ec2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5ec6:	40b8      	lsls	r0, r7
    5ec8:	4403      	add	r3, r0
    5eca:	4630      	mov	r0, r6
    5ecc:	9303      	str	r3, [sp, #12]
    5ece:	f7ff fe87 	bl	5be0 <next_unwind_byte>
    5ed2:	0603      	lsls	r3, r0, #24
    5ed4:	f107 0707 	add.w	r7, r7, #7
    5ed8:	d4f2      	bmi.n	5ec0 <__gnu_unwind_execute+0x288>
    5eda:	9b03      	ldr	r3, [sp, #12]
    5edc:	f8cd 9000 	str.w	r9, [sp]
    5ee0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    5ee4:	f503 7201 	add.w	r2, r3, #516	; 0x204
    5ee8:	40bc      	lsls	r4, r7
    5eea:	2300      	movs	r3, #0
    5eec:	4414      	add	r4, r2
    5eee:	4619      	mov	r1, r3
    5ef0:	220d      	movs	r2, #13
    5ef2:	4628      	mov	r0, r5
    5ef4:	9403      	str	r4, [sp, #12]
    5ef6:	f7ff fa91 	bl	541c <_Unwind_VRS_Set>
    5efa:	e6a4      	b.n	5c46 <__gnu_unwind_execute+0xe>

00005efc <__gnu_unwind_frame>:
    5efc:	b510      	push	{r4, lr}
    5efe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5f00:	b084      	sub	sp, #16
    5f02:	685a      	ldr	r2, [r3, #4]
    5f04:	2003      	movs	r0, #3
    5f06:	f88d 000c 	strb.w	r0, [sp, #12]
    5f0a:	79dc      	ldrb	r4, [r3, #7]
    5f0c:	f88d 400d 	strb.w	r4, [sp, #13]
    5f10:	0212      	lsls	r2, r2, #8
    5f12:	3308      	adds	r3, #8
    5f14:	4608      	mov	r0, r1
    5f16:	a901      	add	r1, sp, #4
    5f18:	9201      	str	r2, [sp, #4]
    5f1a:	9302      	str	r3, [sp, #8]
    5f1c:	f7ff fe8c 	bl	5c38 <__gnu_unwind_execute>
    5f20:	b004      	add	sp, #16
    5f22:	bd10      	pop	{r4, pc}

00005f24 <_Unwind_GetRegionStart>:
    5f24:	b508      	push	{r3, lr}
    5f26:	f7ff fe85 	bl	5c34 <unwind_UCB_from_context>
    5f2a:	6c80      	ldr	r0, [r0, #72]	; 0x48
    5f2c:	bd08      	pop	{r3, pc}
    5f2e:	bf00      	nop

00005f30 <_Unwind_GetLanguageSpecificData>:
    5f30:	b508      	push	{r3, lr}
    5f32:	f7ff fe7f 	bl	5c34 <unwind_UCB_from_context>
    5f36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    5f38:	79c3      	ldrb	r3, [r0, #7]
    5f3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5f3e:	3008      	adds	r0, #8
    5f40:	bd08      	pop	{r3, pc}
    5f42:	bf00      	nop

00005f44 <_Unwind_GetDataRelBase>:
    5f44:	b508      	push	{r3, lr}
    5f46:	f000 f807 	bl	5f58 <abort>
    5f4a:	bf00      	nop

00005f4c <_Unwind_GetTextRelBase>:
    5f4c:	b508      	push	{r3, lr}
    5f4e:	f7ff fff9 	bl	5f44 <_Unwind_GetDataRelBase>
    5f52:	bf00      	nop

00005f54 <__aeabi_idiv0>:
    5f54:	4770      	bx	lr
    5f56:	bf00      	nop

00005f58 <abort>:
    5f58:	b508      	push	{r3, lr}
    5f5a:	2006      	movs	r0, #6
    5f5c:	f000 f864 	bl	6028 <raise>
    5f60:	2001      	movs	r0, #1
    5f62:	f7fc fddf 	bl	2b24 <_exit>
    5f66:	Address 0x0000000000005f66 is out of bounds.


00005f68 <__libc_init_array>:
    5f68:	b570      	push	{r4, r5, r6, lr}
    5f6a:	4e0d      	ldr	r6, [pc, #52]	; (5fa0 <__libc_init_array+0x38>)
    5f6c:	4c0d      	ldr	r4, [pc, #52]	; (5fa4 <__libc_init_array+0x3c>)
    5f6e:	1ba4      	subs	r4, r4, r6
    5f70:	10a4      	asrs	r4, r4, #2
    5f72:	2500      	movs	r5, #0
    5f74:	42a5      	cmp	r5, r4
    5f76:	d109      	bne.n	5f8c <__libc_init_array+0x24>
    5f78:	4e0b      	ldr	r6, [pc, #44]	; (5fa8 <__libc_init_array+0x40>)
    5f7a:	4c0c      	ldr	r4, [pc, #48]	; (5fac <__libc_init_array+0x44>)
    5f7c:	f7fa f9c0 	bl	300 <_init>
    5f80:	1ba4      	subs	r4, r4, r6
    5f82:	10a4      	asrs	r4, r4, #2
    5f84:	2500      	movs	r5, #0
    5f86:	42a5      	cmp	r5, r4
    5f88:	d105      	bne.n	5f96 <__libc_init_array+0x2e>
    5f8a:	bd70      	pop	{r4, r5, r6, pc}
    5f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5f90:	4798      	blx	r3
    5f92:	3501      	adds	r5, #1
    5f94:	e7ee      	b.n	5f74 <__libc_init_array+0xc>
    5f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5f9a:	4798      	blx	r3
    5f9c:	3501      	adds	r5, #1
    5f9e:	e7f2      	b.n	5f86 <__libc_init_array+0x1e>
    5fa0:	0000030c 	.word	0x0000030c
    5fa4:	0000030c 	.word	0x0000030c
    5fa8:	0000030c 	.word	0x0000030c
    5fac:	0000031c 	.word	0x0000031c

00005fb0 <memcpy>:
    5fb0:	b510      	push	{r4, lr}
    5fb2:	1e43      	subs	r3, r0, #1
    5fb4:	440a      	add	r2, r1
    5fb6:	4291      	cmp	r1, r2
    5fb8:	d100      	bne.n	5fbc <memcpy+0xc>
    5fba:	bd10      	pop	{r4, pc}
    5fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
    5fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
    5fc4:	e7f7      	b.n	5fb6 <memcpy+0x6>

00005fc6 <memset>:
    5fc6:	4402      	add	r2, r0
    5fc8:	4603      	mov	r3, r0
    5fca:	4293      	cmp	r3, r2
    5fcc:	d100      	bne.n	5fd0 <memset+0xa>
    5fce:	4770      	bx	lr
    5fd0:	f803 1b01 	strb.w	r1, [r3], #1
    5fd4:	e7f9      	b.n	5fca <memset+0x4>

00005fd6 <_raise_r>:
    5fd6:	291f      	cmp	r1, #31
    5fd8:	b538      	push	{r3, r4, r5, lr}
    5fda:	4604      	mov	r4, r0
    5fdc:	460d      	mov	r5, r1
    5fde:	d904      	bls.n	5fea <_raise_r+0x14>
    5fe0:	2316      	movs	r3, #22
    5fe2:	6003      	str	r3, [r0, #0]
    5fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5fe8:	bd38      	pop	{r3, r4, r5, pc}
    5fea:	6c42      	ldr	r2, [r0, #68]	; 0x44
    5fec:	b112      	cbz	r2, 5ff4 <_raise_r+0x1e>
    5fee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5ff2:	b94b      	cbnz	r3, 6008 <_raise_r+0x32>
    5ff4:	4620      	mov	r0, r4
    5ff6:	f000 f831 	bl	605c <_getpid_r>
    5ffa:	462a      	mov	r2, r5
    5ffc:	4601      	mov	r1, r0
    5ffe:	4620      	mov	r0, r4
    6000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6004:	f000 b818 	b.w	6038 <_kill_r>
    6008:	2b01      	cmp	r3, #1
    600a:	d00a      	beq.n	6022 <_raise_r+0x4c>
    600c:	1c59      	adds	r1, r3, #1
    600e:	d103      	bne.n	6018 <_raise_r+0x42>
    6010:	2316      	movs	r3, #22
    6012:	6003      	str	r3, [r0, #0]
    6014:	2001      	movs	r0, #1
    6016:	e7e7      	b.n	5fe8 <_raise_r+0x12>
    6018:	2400      	movs	r4, #0
    601a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    601e:	4628      	mov	r0, r5
    6020:	4798      	blx	r3
    6022:	2000      	movs	r0, #0
    6024:	e7e0      	b.n	5fe8 <_raise_r+0x12>
    6026:	Address 0x0000000000006026 is out of bounds.


00006028 <raise>:
    6028:	4b02      	ldr	r3, [pc, #8]	; (6034 <raise+0xc>)
    602a:	4601      	mov	r1, r0
    602c:	6818      	ldr	r0, [r3, #0]
    602e:	f7ff bfd2 	b.w	5fd6 <_raise_r>
    6032:	bf00      	nop
    6034:	10000088 	.word	0x10000088

00006038 <_kill_r>:
    6038:	b538      	push	{r3, r4, r5, lr}
    603a:	4c07      	ldr	r4, [pc, #28]	; (6058 <_kill_r+0x20>)
    603c:	2300      	movs	r3, #0
    603e:	4605      	mov	r5, r0
    6040:	4608      	mov	r0, r1
    6042:	4611      	mov	r1, r2
    6044:	6023      	str	r3, [r4, #0]
    6046:	f7fc fd7b 	bl	2b40 <_kill>
    604a:	1c43      	adds	r3, r0, #1
    604c:	d102      	bne.n	6054 <_kill_r+0x1c>
    604e:	6823      	ldr	r3, [r4, #0]
    6050:	b103      	cbz	r3, 6054 <_kill_r+0x1c>
    6052:	602b      	str	r3, [r5, #0]
    6054:	bd38      	pop	{r3, r4, r5, pc}
    6056:	bf00      	nop
    6058:	10000330 	.word	0x10000330

0000605c <_getpid_r>:
    605c:	f7fc bd68 	b.w	2b30 <_getpid>

00006060 <strlen>:
    6060:	4603      	mov	r3, r0
    6062:	f813 2b01 	ldrb.w	r2, [r3], #1
    6066:	2a00      	cmp	r2, #0
    6068:	d1fb      	bne.n	6062 <strlen+0x2>
    606a:	1a18      	subs	r0, r3, r0
    606c:	3801      	subs	r0, #1
    606e:	4770      	bx	lr

00006070 <std::integral_constant<long long, 100ll>::value>:
    6070:	0064 0000 0000 0000 6e69 6176 696c 0064     d.......invalid.
    6080:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    6090:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    60a0:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    60b0:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    60c0:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    60d0:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    60e0:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    60f0:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    6100:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6110:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6120:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6130:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    6140:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    6150:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    6160:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    6170:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    6180:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6190:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    61a0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    61b0:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    61c0:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    61d0:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    61e0:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    61f0:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    6200:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    6210:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    6220:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    6230:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    6240:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6250:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6260:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6270:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6280:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6290:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    62a0:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    62b0:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    62c0:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    62d0:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    62e0:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    62f0:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    6300:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    6310:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    6320:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    6330:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6340:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6350:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6360:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6370:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6380:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    6390:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    63a0:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    63b0:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    63c0:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    63d0:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    63e0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    63f0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6400:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6410:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6420:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    6430:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    6440:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    6450:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    6460:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3334     [0m.[0m......[43
    6470:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
    6480:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6490:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    64a0:	6f4e 6920 746e 7265 7572 7470 7320 7265     No interrupt ser
    64b0:	6976 6563 7220 756f 6974 656e 6620 756f     vice routine fou
    64c0:	646e 6620 726f 7420 6568 7620 6365 6f74     nd for the vecto
    64d0:	2072 6425 2021 6944 6173 6c62 6e69 2067     r %d! Disabling 
    64e0:	5349 1b52 305b 0a6d 0000 0000 5b1b 3234     ISR.[0m......[42
    64f0:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    6500:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6510:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6520:	6461 3463 6920 696e 6974 6c61 7a69 6465     adc4 initialized
    6530:	5b1b 6d30 000a 0000 5b1b 3234 206d 2020     .[0m.....[42m   
    6540:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    6550:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6560:	256d 3e64 1b20 305b 333b 6d37 6175 7472     m%d> .[0;37muart
    6570:	6920 696e 6974 6c61 7a69 6465 5b1b 6d30      initialized.[0m
    6580:	000a 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    6590:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    65a0:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    65b0:	1b20 305b 333b 6d37 6553 746e 7620 6c61      .[0;37mSent val
    65c0:	6575 2520 2066 766f 7265 5520 5241 1b54     ue %f over UART.
    65d0:	305b 0a6d ff00 ffff                         [0m.....

000065d8 <sjsu::lpc40xx::Pin::kFunction>:
    65d8:	0300 ffff                                   ....

000065dc <sjsu::lpc40xx::Pin::kResistor>:
    65dc:	0203 ffff                                   ....

000065e0 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    65e0:	0107 ffff                                   ....

000065e4 <sjsu::lpc40xx::Pin::kOpenDrain>:
    65e4:	010a ffff                                   ....

000065e8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    65e8:	0000 4140                                   ..@A

000065ec <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    65ec:	ff0c ffff                                   ....

000065f0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    65f0:	0000 4140                                   ..@A

000065f4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    65f4:	0100 ffff                                   ....

000065f8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    65f8:	0100 ffff                                   ....

000065fc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    65fc:	0500 ffff                                   ....

00006600 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    6600:	0108 ffff                                   ....

00006604 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    6604:	0208 ffff                                   ....

00006608 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    6608:	0208 ffff                                   ....

0000660c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    660c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    661c:	2e72 7068 0070 ffff                         r.hpp...

00006624 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    6624:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    6634:	2e72 7068 0070 ffff                         r.hpp...

0000663c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    663c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    664c:	2e72 7068 0070 ffff                         r.hpp...

00006654 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    6654:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    6664:	2e72 7068 0070 ffff                         r.hpp...

0000666c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    666c:	678c 0000 0802 0000                         .g......

00006674 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    6674:	678c 0000 0902 0000                         .g......

0000667c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    667c:	678c 0000 1c04 0000                         .g......

00006684 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    6684:	678c 0000 1d04 0000                         .g......

0000668c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    668c:	678c 0000 1d01 0000                         .g......

00006694 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    6694:	678c 0000 0902 0000                         .g......

0000669c <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    669c:	0800 ffff                                   ....

000066a0 <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    66a0:	0808 ffff                                   ....

000066a4 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    66a4:	0110 ffff                                   ....

000066a8 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    66a8:	0115 ffff                                   ....

000066ac <sjsu::lpc40xx::Adc::Control::kStartCode>:
    66ac:	0318 ffff                                   ....

000066b0 <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    66b0:	0c04 ffff                                   ....

000066b4 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    66b4:	011f ffff                                   ....

000066b8 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4>:
    66b8:	678c 0000 1e01 0000                         .g......

000066c0 <sjsu::lpc40xx::Adc::Channel::kChannel4>:
    66c0:	66b8 0000 001c 0000                         .f......

000066c8 <sjsu::lpc40xx::Adc::kClockFrequency>:
    66c8:	2400 4974                                   .$tI

000066cc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    66cc:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

000066dc <main::file>:
    66dc:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000066e8 <main::file>:
    66e8:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000066f4 <main::file>:
    66f4:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00006700 <vtable for sjsu::lpc40xx::Adc>:
	...
    6708:	1a29 0000 1b45 0000 1b95 0000               )...E.......

00006714 <vtable for sjsu::Adc>:
	...
    671c:	46ed 0000 46ed 0000 46ed 0000               .F...F...F..

00006728 <vtable for sjsu::lpc40xx::Uart>:
	...
    6730:	162d 0000 16ed 0000 1779 0000 181d 0000     -.......y.......
    6740:	18ed 0000                                   ....

00006744 <vtable for sjsu::Uart>:
	...
    674c:	46ed 0000 46ed 0000 46ed 0000 46ed 0000     .F...F...F...F..
    675c:	46ed 0000                                   .F..

00006760 <vtable for sjsu::lpc40xx::SystemController>:
	...
    6768:	09e5 0000 0a81 0000 0ad9 0000 0afd 0000     ................
    6778:	0b19 0000 0b55 0000 0b89 0000               ....U.......

00006784 <vtable for sjsu::lpc40xx::Pin>:
	...
    678c:	07b9 0000 07ed 0000 085d 0000 0821 0000     ........]...!...

0000679c <main::__PRETTY_FUNCTION__>:
    679c:	6e69 2074 616d 6e69 2928 ff00               int main()..

000067a8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    67a8:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    67b8:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    67c8:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    67d8:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    67e8:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    67f8:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    6808:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    6818:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    6828:	736e 0074                                   nst.

0000682c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    682c:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    683c:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    684c:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    685c:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    686c:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    687c:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    688c:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    689c:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

000068a8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    68a8:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    68b8:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    68c8:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    68d8:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    68e8:	2029 6f63 736e 0074                         ) const.

000068f0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    68f0:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    6900:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    6910:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    6920:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    6930:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    6940:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    6950:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    6960:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    6970:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    6980:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    6990:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    69a0:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    69b0:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    69c0:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    69d0:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    69e0:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    69f0:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    6a00:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    6a10:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    6a20:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    6a30:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    6a40:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    6a50:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    6a60:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6a70:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    6a80:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    6a90:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    6aa0:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    6ab0:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    6ac0:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    6ad0:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    6ae0:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    6af0:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    6b00:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    6b10:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    6b20:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    6b30:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    6b40:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    6b50:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    6b60:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    6b70:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    6b80:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    6b90:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    6ba0:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    6bb0:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    6bc0:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00006bcc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    6bcc:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    6bdc:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    6bec:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    6bfc:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    6c0c:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    6c1c:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    6c2c:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    6c3c:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    6c4c:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    6c5c:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    6c6c:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    6c7c:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6c8c:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6c9c:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6cac:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    6cbc:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    6ccc:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    6cdc:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    6cec:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    6cfc:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6d0c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6d1c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6d2c:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    6d3c:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    6d4c:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    6d5c:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    6d6c:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    6d7c:	ffff ffff 40f9 0000 0001 0000 ffff ffff     .....@..........
    6d8c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6d9c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6dac:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6dbc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6dcc:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6ddc:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    6dec:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    6dfc:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    6e0c:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    6e1c:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    6e2c:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    6e3c:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    6e4c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6e5c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6e6c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6e7c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6e8c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6e9c:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    6eac:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    6ebc:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    6ecc:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    6edc:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    6eec:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    6efc:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    6f0c:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    6f1c:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    6f2c:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    6f3c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6f4c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6f5c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6f6c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6f7c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6f8c:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    6f9c:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    6fac:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    6fbc:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    6fcc:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    6fdc:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6fec:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6ffc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    700c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    701c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    702c:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    703c:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    704c:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    705c:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    706c:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    707c:	45c1 0000 0001 0000 ffff ffff fffe ffff     .E..............
    708c:	45f1 0000 0001 0000 ffff ffff 5b1b 3134     .E...........[41
    709c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    70ac:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    70bc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    70cc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    70dc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    70ec:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    70fc:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    710c:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    711c:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    712c:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    713c:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    714c:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    715c:	2174 5b1b 6d30 5b1b 6d30 000a               t!.[0m.[0m..

00007168 <std::integral_constant<long long, 1ll>::value>:
    7168:	0001 0000 0000 0000                         ........

00007170 <config::kSystemClockRateMhz>:
    7170:	0000 4240                                   ..@B

00007174 <config::kRtosFrequency>:
    7174:	0000 447a                                   ..zD

00007178 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    7178:	71cc 0000                                   .q..

0000717c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    717c:	678c 0000 0200 0000                         .g......

00007184 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    7184:	678c 0000 0300 0000                         .g......

0000718c <sjsu::lpc40xx::Uart::Port::kUart0>:
    718c:	c000 4000 0003 0000 717c 0000 7184 0000     ...@....|q...q..
    719c:	0009 0000                                   ....

000071a0 <sjsu::InitializePlatform()::file>:
    71a0:	7473 7261 7574 2e70 7063 0070               startup.cpp.

000071ac <vtable for sjsu::cortex::SystemTimer>:
	...
    71b4:	4165 0000 4179 0000 4281 0000 4199 0000     eA..yA...B...A..

000071c4 <vtable for sjsu::cortex::InterruptController>:
	...
    71cc:	4049 0000 409d 0000                         I@...@..

000071d4 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    71d4:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    71e4:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

000071f4 <__sf_fake_stderr>:
	...

00007214 <__sf_fake_stdin>:
	...

00007234 <__sf_fake_stdout>:
	...
