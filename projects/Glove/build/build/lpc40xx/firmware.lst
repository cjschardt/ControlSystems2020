
build/build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/build/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002a59

Program Header:
0x70000001 off    0x0001736c vaddr 0x0000736c paddr 0x0000736c align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007424 memsz 0x00007424 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00007424 align 2**16
         filesz 0x000000d8 memsz 0x000000d8 flags rw-
    LOAD off    0x000200d8 vaddr 0x100000d8 paddr 0x100000d8 align 2**16
         filesz 0x00000000 memsz 0x00000250 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00007354  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000d8  10000000  00007424  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200d8  2**2  CONTENTS
  3 .bss             00000250  100000d8  100000d8  000200d8  2**3  ALLOC
  4 .ARM.extab       00000018  00007354  00007354  00017354  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  0000736c  0000736c  0001736c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200d8  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200d8  2**2  CONTENTS
  8 .noinit          00000000  10000328  10000328  000200d8  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200d8  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020108  2**0  CONTENTS, READONLY
 11 .debug_info      0006bb0d  00000000  00000000  00020186  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00003efa  00000000  00000000  0008bc93  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000cf8  00000000  00000000  0008fb8d  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000c78  00000000  00000000  00090885  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      0000605a  00000000  00000000  000914fd  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002bf52  00000000  00000000  00097557  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     000043f8  00000000  00000000  000c34ac  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000d8 l    d  .bss	00000000 .bss
00007354 l    d  .ARM.extab	00000000 .ARM.extab
0000736c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000328 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00003e6c l     F .text	00000030 NVIC_EnableIRQ
00003e9c l     F .text	00000030 NVIC_DisableIRQ
00003ecc l     F .text	00000054 NVIC_SetPriority
00007260 l     O .text	00000004 config::kSystemClockRateMhz
00007264 l     O .text	00000004 config::kRtosFrequency
00003fd8 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003ff4 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
1000006c l     O .data	00000004 (anonymous namespace)::system_controller
10000308 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
1000030c l     O .bss	0000000c (anonymous namespace)::uart0
10000318 l     O .bss	0000000c (anonymous namespace)::system_timer
00004424 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00004448 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00007290 l     O .text	0000000c sjsu::InitializePlatform()::file
000072d4 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00004578 l     F .text	00000128 __static_initialization_and_destruction_0(int, int)
000046a0 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000d8 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000dc l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003ec l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000408 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000044e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000046a l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000048e l     F .text	00000026 _Unwind_GetGR
00000788 l     F .text	00000030 NVIC_DisableIRQ
000069e0 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00000ae2 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000b00 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00006898 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
0000691c l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00006998 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
000014f8 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
000067cc l     O .text	00000009 main::file
000067d8 l     O .text	00000009 main::file
000067e4 l     O .text	00000009 main::file
0000688c l     O .text	0000000b main::__PRETTY_FUNCTION__
000024e4 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002646 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000266c l     F .text	0000021c __static_initialization_and_destruction_0(int, int)
00002888 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
00002a48 l       .text	00000000 handler2_address_const
00002aac l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00002af0 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
10000280 l     O .bss	00000064 pxReadyTasksLists
100002e4 l     O .bss	00000004 uxTopReadyPriority
100002e8 l     O .bss	00000004 xYieldPending
100002ec l     O .bss	00000004 uxSchedulerSuspended
100002f0 l     O .bss	00000004 ulTaskSwitchedInTime
100002f4 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00002c48 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00002c64 l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
00002c8a l     F .text	0000002e _strlen(char const*)
00002cb8 l     F .text	00000028 _is_digit(char)
00002ce0 l     F .text	00000048 _atoi(char const**)
00002d28 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00002f6a l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
0000303a l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00006cbc l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
0000311c l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00003560 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
000046d0 l       .text	00000000 pxCurrentTCBConst2
00004740 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00005138 l     F .text	00000012 selfrel_offset31
0000514c l     F .text	00000060 search_EIT_table
000051ac l     F .text	00000028 __gnu_unwind_get_pr_addr
000051d4 l     F .text	000000a4 get_eit_entry
00005278 l     F .text	00000058 restore_non_core_regs
000052d0 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000052dc l     F .text	00000004 __gnu_unwind_24bit.isra.1
000052e0 l     F .text	00000002 _Unwind_DebugHook
000052e4 l     F .text	0000003e unwind_phase2
00005324 l     F .text	000000c6 unwind_phase2_forced
000054f4 l     F .text	00000018 _Unwind_GetGR
00005538 l     F .text	0000001a _Unwind_SetGR
000055c4 l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005cd0 l     F .text	00000038 next_unwind_byte
00005d08 l     F .text	0000001a _Unwind_GetGR.constprop.0
00005d24 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000078 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000004f4  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005c88 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000053f0 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000041ec  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
000022e2  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00002934  w    F .text	0000006c sjsu::InitializeBssSection()
00002bd0 g     F .text	00000010 _getpid
000047b8 g     F .text	00000024 _putchar
000066f8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
10000278  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1PeripheralCommon
00001eb4  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004234  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
00006754  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00003fac  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00000ac8  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
10000058  w    O .data	00000004 sjsu::newlib::in
00004b24 g     F .text	0000005a .hidden __floatdidf
1000026c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00000a56  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00006804  w    O .text	00000014 vtable for sjsu::Adc
00006128 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00003e34 g     F .text	00000038 printf
00000000 g       *ABS*	00000000 __vectors_start__
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1PeripheralCommon
00002226  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000021ae  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001c78  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
0000413c  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
00000580  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
00005b44 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005c64 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00007424 g       .ARM.exidx	00000000 __exidx_end
000066c8  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
0000447c g     F .text	00000014 ThreadRuntimeCounter
00005898 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000064  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00001e04  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()
00000ca0  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
1000027c g     O .bss	00000004 pxCurrentTCB
00006014 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005c64 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
000066f0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000679c  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10000324 g     O .bss	00000004 errno
00007424 g       .ARM.exidx	00000000 _etext
00002178  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000085c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000d98  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00005cac g     F .text	00000022 .hidden _Unwind_Backtrace
00007268  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
10000100  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00004c2c g     F .text	00000160 .hidden __aeabi_fadd
10000300  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00004c28 g     F .text	00000164 .hidden __subsf3
000067a4  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000e64  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000677c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00005b24 g     F .text	00000018 .hidden __restore_core_regs
00005b64 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00002558  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000066e8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00006818  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00004054  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
000066cc  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00001234  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000053ec g     F .text	00000004 .hidden _Unwind_GetCFA
000060a0 g     F .text	00000016 memcpy
00000f5c  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004760 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
0000550c g     F .text	0000002a .hidden _Unwind_VRS_Set
00004aac g     F .text	00000022 .hidden __floatsidf
10000274  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00004e3c g     F .text	00000000 .hidden __aeabi_uldivmod
10000328 g       .noinit	00000000 _noinit
00000e7c  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000668  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
00002bfc g     F .text	0000004c puts
00001b04  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000012b4  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
0000224c  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
10000068  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000bcc  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
000016e4  w    F .text	00000020 sjsu::Uart::Uart()
000067b8  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
000060c6 g     F .text	00000050 _raise_r
00004d94 g     F .text	0000001c .hidden __aeabi_i2f
00001ab0  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
00001a80  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
000046e0 g     F .text	00000066 xPortPendSVHandler
10000000 g       *ABS*	00000000 __base_RamLoc64
000003aa  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000820  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
0000614c g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
00005554 g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
000020da  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00004a8c g     F .text	0000001e .hidden __aeabi_ui2d
00004184  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
10010000 g       *ABS*	00000000 StackTop
00000ef8  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00004e6c g     F .text	000002cc .hidden __udivmoddi4
00004808 g     F .text	00000000 .hidden __aeabi_drsub
000000fc g       .text	00000000 bss_section_table
000066d0  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00004348  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00001a40  w    F .text	00000040 sjsu::lpc40xx::Adc::BurstMode(bool)
0000067e  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
00005b54 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00001704  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000058a4 g     F .text	0000027e .hidden _Unwind_VRS_Pop
000058a0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
00004278  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000264  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005cac g     F .text	00000022 .hidden ___Unwind_Backtrace
00000624  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00001928  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
0000053c  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00004ad0 g     F .text	00000042 .hidden __extendsfdf2
00006794  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00004814 g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100002f8  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
0000736c g       .ARM.extab	00000000 __exidx_start
00006058 g     F .text	00000048 __libc_init_array
0000142c  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00005c1c g     F .text	00000022 .hidden ___Unwind_RaiseException
000014d4  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00004164  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00001d28  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
00006048 g     F .text	0000000e abort
00005c40 g     F .text	00000022 .hidden ___Unwind_Resume
000014bc  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00004a8c g     F .text	0000001e .hidden __floatunsidf
10000038  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
10000250  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00001e3c  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00001458  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00004748 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
000066d4  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
000025b2  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
000018d2  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
000047fc g     F .text	0000000a std::terminate()
00004b80 g     F .text	0000009e .hidden __aeabi_d2f
00005b6c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000066ec  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
00000a3c  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00004c28 g     F .text	00000164 .hidden __aeabi_fsub
000017f8  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00002126  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00002a30 g     F .text	00000026 ArmHardFaultHandler
10000270  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
10000204  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000a02  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000328 g       .bss	00000000 _ebss
00001884  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00006850  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00002322  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00000c48  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
0000042c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004dc0 g     F .text	0000007c .hidden __floatdisf
00007274  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
000029b4 g     F .text	0000007c GetRegistersFromStack
000067a8  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
00001704  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00004814 g     F .text	00000276 .hidden __aeabi_dadd
00001ab0  w    F .text	00000020 sjsu::Adc::Adc()
00004b14 g     F .text	0000006a .hidden __aeabi_ul2d
00005b3c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00004490  w    F .text	000000b8 sjsu::InitializePlatform()
0000201c  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
000072f4 g     O .text	00000020 __sf_fake_stderr
00004074  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
000047ec g     F .text	00000010 std::get_terminate()
000016e4  w    F .text	00000020 sjsu::Uart::Uart()
00005c40 g     F .text	00000022 .hidden _Unwind_Resume
0000090c  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
000054bc g     F .text	0000000c .hidden _Unwind_DeleteException
000072c4  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
000054b8 g     F .text	00000002 .hidden _Unwind_Complete
00000d50  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000244  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
0000729c  w    O .text	00000014 vtable for sjsu::cortex::SystemTimer
000072b0  w    O .text	00000014 vtable for sjsu::SystemTimer
00006708  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
10010000 g       *ABS*	00000000 __top_RamLoc64
10000268  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
0000243a  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000d8 g       .bss	00000000 _bss
00004810 g     F .text	0000027a .hidden __aeabi_dsub
0000673c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001cc8  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
000067ac  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
00004b14 g     F .text	0000006a .hidden __floatundidf
000047dc g     F .text	00000006 __cxa_pure_virtual
00000f34  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00004d94 g     F .text	0000001c .hidden __floatsisf
0000676c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000248  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00005d28 g     F .text	000002c4 .hidden __gnu_unwind_execute
1000000c  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000254  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
00000b30  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005b4c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
0000076e  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
0000248a  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00000aa6  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00006160  w    O .text	00000008 std::integral_constant<long long, 100ll>::value
10000328 g       .noinit	00000000 _end_noinit
10000104  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00000c24  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00002b00 g     F .text	000000c4 vTaskSwitchContext
0000127c  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
000066f4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000041b8  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
000066d8  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00005464 g     F .text	00000044 .hidden __gnu_Unwind_Resume
1000021c  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
000041d0  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00003f20  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
1000025c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
00004aac g     F .text	00000022 .hidden __aeabi_i2d
000067a0  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
00006774  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
00005b5c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00004360  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000258  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00004db0 g     F .text	0000008c .hidden __floatundisf
00005c1c g     F .text	00000022 .hidden _Unwind_RaiseException
00006044  w    F .text	00000002 .hidden __aeabi_ldiv0
10000010  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
000029a0  w    F .text	00000014 sjsu::SystemInitialize()
00000a24  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00004d8c g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
100000f8  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
10000260  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00004778 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
0000037e  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00007314 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
000011b8  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00004184  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
000060b6 g     F .text	00000010 memset
00001ee8 g     F .text	00000134 main
00003f64  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
0000091c  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
000067b4  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00004dc0 g     F .text	0000007c .hidden __aeabi_l2f
00002052  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
000040e8  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00003f84  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000727c  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00006874  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004b80 g     F .text	0000009e .hidden __truncdfsf2
00002346  w    F .text	0000009a float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)
0000031c g       .text	00000000 __init_array_end
000046b0 g     F .text	00000026 vPortSVCHandler
00004b24 g     F .text	0000005a .hidden __aeabi_l2d
00006700  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
1000005c  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004db0 g     F .text	0000008c .hidden __aeabi_ul2f
00004164  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00004018  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001290  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
00005450 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00001e20  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000021ea  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000054a8 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000054  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00007258  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00002270  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
00005b24 g     F .text	00000018 .hidden restore_core_regs
00000c64  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00005c08 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
0000678c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00004258  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00002064  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000024  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00001a1c  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00004c20 g     F .text	0000016c .hidden __aeabi_frsub
0000603c g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000074 g     O .data	00000004 _impure_ptr
00006704  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
000009e4  w    F .text	0000001e units::linear_scale<float>::operator()() const
000067b0  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000e28  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000040b0  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
00001dec  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()
00000890  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
000067f0  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
0000214a  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
0000430c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00006020 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00006724  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001ad0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
00002a58 g     F .text	00000054 ArmResetHandler
000022c4  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
00001ad0  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
000054c8 g     F .text	0000002a .hidden _Unwind_VRS_Get
0000408c  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000070 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005bf4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000cd4  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00000690  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000d08  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00005fec g     F .text	00000028 .hidden __gnu_unwind_frame
00001ce0  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00005c88 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000d8 g       .data	00000000 _edata
000019f8  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
00001b5c  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00004548  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
1000024c  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00000958  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
0000670c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000ea0  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00004d8c g     F .text	00000024 .hidden __floatunsisf
000047e2 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005bb0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00002be0 g     F .text	0000001a _kill
00002898  w    F .text	0000009c sjsu::InitializeDataSection()
000025ee  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00000648  w    F .text	00000020 sjsu::DefaultUptime()
00007334 g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
000067c8  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
0000030c g       .text	00000000 __init_array_start
00006044  w    F .text	00000002 .hidden __aeabi_idiv0
000067c0  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
00002100  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00002bc4 g     F .text	0000000c _exit
00006784  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000008  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
000003cc  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00001394  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
0000073c  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000756  w    F .text	00000018 sjsu::Pin::GetPort() const
00006150 g     F .text	00000010 strlen
000007b8  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000000  w    O .data	00000004 sjsu::Uptime
0000589c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
000023e0  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000010f0  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004798 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000004b4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00004ad0 g     F .text	00000042 .hidden __aeabi_f2d
00006034 g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000013e0  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
00002500  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
000007ec  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00004810 g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
00000de0  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
0000208c  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000970  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
000066fc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00006834  w    O .text	0000001c vtable for sjsu::Uart
00004c2c g     F .text	00000160 .hidden __addsf3
00002300  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
0000229e  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
0000726c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
10000060  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001738  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00006118 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 59 2a 00 00 b1 40 00 00 31 2a 00 00     ....Y*...@..1*..
      10:	b1 40 00 00 b1 40 00 00 b1 40 00 00 00 00 00 00     .@...@...@......
	...
      2c:	b1 46 00 00 b1 40 00 00 00 00 00 00 e1 46 00 00     .F...@.......F..
      3c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      4c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      5c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      6c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      7c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      8c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      9c:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      ac:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      bc:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      cc:	b1 40 00 00 b1 40 00 00 b1 40 00 00 b1 40 00 00     .@...@...@...@..
      dc:	b1 40 00 00 b1 40 00 00                             .@...@..

000000e4 <data_section_table>:
      e4:	00007424 	.word	0x00007424
      e8:	10000000 	.word	0x10000000
      ec:	000000d8 	.word	0x000000d8
      f0:	00007424 	.word	0x00007424
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000d8 	.word	0x100000d8
     100:	00000250 	.word	0x00000250
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	00002889 	.word	0x00002889
     314:	00002af1 	.word	0x00002af1
     318:	000046a1 	.word	0x000046a1

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000d8 	.word	0x100000d8
     344:	00000000 	.word	0x00000000
     348:	0000736c 	.word	0x0000736c

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000dc 	.word	0x100000dc
     364:	0000736c 	.word	0x0000736c

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     37e:	b580      	push	{r7, lr}
     380:	b084      	sub	sp, #16
     382:	af00      	add	r7, sp, #0
     384:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the system clock speed for the LPC4078 in MHz
#if !defined(SJ2_SYSTEM_CLOCK_RATE_MHZ)
#define SJ2_SYSTEM_CLOCK_RATE_MHZ 48_MHz
#endif  // !defined(SJ2_SYSTEM_CLOCK_RATE)
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     388:	e9d7 0100 	ldrd	r0, r1, [r7]
     38c:	f004 fd10 	bl	4db0 <__aeabi_ul2f>
     390:	4602      	mov	r2, r0
     392:	f107 030c 	add.w	r3, r7, #12
     396:	ee00 2a10 	vmov	s0, r2
     39a:	4618      	mov	r0, r3
     39c:	f000 f805 	bl	3aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	4618      	mov	r0, r3
     3a4:	3710      	adds	r7, #16
     3a6:	46bd      	mov	sp, r7
     3a8:	bd80      	pop	{r7, pc}

000003aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     3aa:	b580      	push	{r7, lr}
     3ac:	b082      	sub	sp, #8
     3ae:	af00      	add	r7, sp, #0
     3b0:	6078      	str	r0, [r7, #4]
     3b2:	ed87 0a00 	vstr	s0, [r7]
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	463a      	mov	r2, r7
     3ba:	4611      	mov	r1, r2
     3bc:	4618      	mov	r0, r3
     3be:	f000 f805 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	4618      	mov	r0, r3
     3c6:	3708      	adds	r7, #8
     3c8:	46bd      	mov	sp, r7
     3ca:	bd80      	pop	{r7, pc}

000003cc <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     3cc:	b480      	push	{r7}
     3ce:	b083      	sub	sp, #12
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	683b      	ldr	r3, [r7, #0]
     3d8:	681a      	ldr	r2, [r3, #0]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	601a      	str	r2, [r3, #0]
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	4618      	mov	r0, r3
     3e2:	370c      	adds	r7, #12
     3e4:	46bd      	mov	sp, r7
     3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ea:	4770      	bx	lr

000003ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     3ec:	b580      	push	{r7, lr}
     3ee:	b086      	sub	sp, #24
     3f0:	af00      	add	r7, sp, #0
     3f2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     3f4:	6878      	ldr	r0, [r7, #4]
     3f6:	f000 f807 	bl	408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     3fa:	eef0 7a40 	vmov.f32	s15, s0
	}
     3fe:	eeb0 0a67 	vmov.f32	s0, s15
     402:	3718      	adds	r7, #24
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}

00000408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	7239      	strb	r1, [r7, #8]
     412:	713a      	strb	r2, [r7, #4]
     414:	703b      	strb	r3, [r7, #0]
			return value;
     416:	68fb      	ldr	r3, [r7, #12]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	ee07 3a90 	vmov	s15, r3
		}
     41e:	eeb0 0a67 	vmov.f32	s0, s15
     422:	3714      	adds	r7, #20
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     42c:	b580      	push	{r7, lr}
     42e:	b082      	sub	sp, #8
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	ed87 0a00 	vstr	s0, [r7]
     438:	687b      	ldr	r3, [r7, #4]
     43a:	463a      	mov	r2, r7
     43c:	4611      	mov	r1, r2
     43e:	4618      	mov	r0, r3
     440:	f7ff ffc4 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     444:	687b      	ldr	r3, [r7, #4]
     446:	4618      	mov	r0, r3
     448:	3708      	adds	r7, #8
     44a:	46bd      	mov	sp, r7
     44c:	bd80      	pop	{r7, pc}

0000044e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     44e:	b580      	push	{r7, lr}
     450:	b086      	sub	sp, #24
     452:	af00      	add	r7, sp, #0
     454:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     456:	6878      	ldr	r0, [r7, #4]
     458:	f000 f807 	bl	46a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     45c:	eef0 7a40 	vmov.f32	s15, s0
	}
     460:	eeb0 0a67 	vmov.f32	s0, s15
     464:	3718      	adds	r7, #24
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}

0000046a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     46a:	b480      	push	{r7}
     46c:	b085      	sub	sp, #20
     46e:	af00      	add	r7, sp, #0
     470:	60f8      	str	r0, [r7, #12]
     472:	7239      	strb	r1, [r7, #8]
     474:	713a      	strb	r2, [r7, #4]
     476:	703b      	strb	r3, [r7, #0]
			return value;
     478:	68fb      	ldr	r3, [r7, #12]
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	ee07 3a90 	vmov	s15, r3
		}
     480:	eeb0 0a67 	vmov.f32	s0, s15
     484:	3714      	adds	r7, #20
     486:	46bd      	mov	sp, r7
     488:	f85d 7b04 	ldr.w	r7, [sp], #4
     48c:	4770      	bx	lr

0000048e <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     48e:	b580      	push	{r7, lr}
     490:	b086      	sub	sp, #24
     492:	af02      	add	r7, sp, #8
     494:	6078      	str	r0, [r7, #4]
     496:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     498:	683a      	ldr	r2, [r7, #0]
     49a:	f107 030c 	add.w	r3, r7, #12
     49e:	9300      	str	r3, [sp, #0]
     4a0:	2300      	movs	r3, #0
     4a2:	2100      	movs	r1, #0
     4a4:	6878      	ldr	r0, [r7, #4]
     4a6:	f005 f80f 	bl	54c8 <_Unwind_VRS_Get>
      return val;
     4aa:	68fb      	ldr	r3, [r7, #12]
    }
     4ac:	4618      	mov	r0, r3
     4ae:	3710      	adds	r7, #16
     4b0:	46bd      	mov	sp, r7
     4b2:	bd80      	pop	{r7, pc}

000004b4 <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
     4b4:	b480      	push	{r7}
     4b6:	b085      	sub	sp, #20
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     4be:	60fb      	str	r3, [r7, #12]
  switch (target)
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d002      	beq.n	4cc <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     4c6:	2b01      	cmp	r3, #1
     4c8:	d003      	beq.n	4d2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     4ca:	e005      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     4cc:	4b07      	ldr	r3, [pc, #28]	; (4ec <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     4ce:	60fb      	str	r3, [r7, #12]
     4d0:	e002      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     4d4:	60fb      	str	r3, [r7, #12]
     4d6:	bf00      	nop
  }
  return result;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	4618      	mov	r0, r3
     4dc:	3714      	adds	r7, #20
     4de:	46bd      	mov	sp, r7
     4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	00006168 	.word	0x00006168
     4ec:	00006170 	.word	0x00006170
     4f0:	0000617c 	.word	0x0000617c

000004f4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     502:	210f      	movs	r1, #15
     504:	6878      	ldr	r0, [r7, #4]
     506:	f7ff ffc2 	bl	48e <_Unwind_GetGR>
     50a:	4603      	mov	r3, r0
     50c:	f023 0301 	bic.w	r3, r3, #1
     510:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     512:	68fb      	ldr	r3, [r7, #12]
     514:	6819      	ldr	r1, [r3, #0]
     516:	68bb      	ldr	r3, [r7, #8]
     518:	3b04      	subs	r3, #4
     51a:	461a      	mov	r2, r3
     51c:	4806      	ldr	r0, [pc, #24]	; (538 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     51e:	f003 fc89 	bl	3e34 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     522:	68fb      	ldr	r3, [r7, #12]
     524:	681b      	ldr	r3, [r3, #0]
     526:	1c5a      	adds	r2, r3, #1
     528:	68fb      	ldr	r3, [r7, #12]
     52a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     52c:	2300      	movs	r3, #0
}
     52e:	4618      	mov	r0, r3
     530:	3710      	adds	r7, #16
     532:	46bd      	mov	sp, r7
     534:	bd80      	pop	{r7, pc}
     536:	bf00      	nop
     538:	00006188 	.word	0x00006188

0000053c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     53c:	b580      	push	{r7, lr}
     53e:	b084      	sub	sp, #16
     540:	af00      	add	r7, sp, #0
     542:	6078      	str	r0, [r7, #4]
     544:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     546:	683b      	ldr	r3, [r7, #0]
     548:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     54a:	210f      	movs	r1, #15
     54c:	6878      	ldr	r0, [r7, #4]
     54e:	f7ff ff9e 	bl	48e <_Unwind_GetGR>
     552:	4603      	mov	r3, r0
     554:	f023 0301 	bic.w	r3, r3, #1
     558:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	3b04      	subs	r3, #4
     55e:	4619      	mov	r1, r3
     560:	4806      	ldr	r0, [pc, #24]	; (57c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     562:	f003 fc67 	bl	3e34 <printf>
  (*depth)++;
     566:	68fb      	ldr	r3, [r7, #12]
     568:	681b      	ldr	r3, [r3, #0]
     56a:	1c5a      	adds	r2, r3, #1
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     570:	2300      	movs	r3, #0
}
     572:	4618      	mov	r0, r3
     574:	3710      	adds	r7, #16
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop
     57c:	00006198 	.word	0x00006198

00000580 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     580:	b580      	push	{r7, lr}
     582:	b084      	sub	sp, #16
     584:	af00      	add	r7, sp, #0
     586:	4603      	mov	r3, r0
     588:	6039      	str	r1, [r7, #0]
     58a:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     58c:	2300      	movs	r3, #0
     58e:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     590:	f107 030c 	add.w	r3, r7, #12
     594:	4619      	mov	r1, r3
     596:	481a      	ldr	r0, [pc, #104]	; (600 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     598:	f005 fb88 	bl	5cac <_Unwind_Backtrace>
    if (final_address)
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	683a      	ldr	r2, [r7, #0]
     5a6:	4619      	mov	r1, r3
     5a8:	4816      	ldr	r0, [pc, #88]	; (604 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     5aa:	f003 fc43 	bl	3e34 <printf>
    }

    if (show_make_command)
     5ae:	79fb      	ldrb	r3, [r7, #7]
     5b0:	2b00      	cmp	r3, #0
     5b2:	d020      	beq.n	5f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     5b4:	4814      	ldr	r0, [pc, #80]	; (608 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     5b6:	f003 fc3d 	bl	3e34 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     5ba:	4814      	ldr	r0, [pc, #80]	; (60c <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     5bc:	f003 fc3a 	bl	3e34 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     5c0:	2000      	movs	r0, #0
     5c2:	f7ff ff77 	bl	4b4 <sjsu::build::Stringify(sjsu::build::Target)>
     5c6:	4603      	mov	r3, r0
     5c8:	4619      	mov	r1, r3
     5ca:	4811      	ldr	r0, [pc, #68]	; (610 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     5cc:	f003 fc32 	bl	3e34 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     5d0:	f107 030c 	add.w	r3, r7, #12
     5d4:	4619      	mov	r1, r3
     5d6:	480f      	ldr	r0, [pc, #60]	; (614 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     5d8:	f005 fb68 	bl	5cac <_Unwind_Backtrace>
      if (final_address)
     5dc:	683b      	ldr	r3, [r7, #0]
     5de:	2b00      	cmp	r3, #0
     5e0:	d003      	beq.n	5ea <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     5e2:	6839      	ldr	r1, [r7, #0]
     5e4:	480c      	ldr	r0, [pc, #48]	; (618 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     5e6:	f003 fc25 	bl	3e34 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     5ea:	480c      	ldr	r0, [pc, #48]	; (61c <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     5ec:	f003 fc22 	bl	3e34 <printf>
      printf(
     5f0:	480b      	ldr	r0, [pc, #44]	; (620 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     5f2:	f002 fb03 	bl	2bfc <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     5f6:	bf00      	nop
     5f8:	3710      	adds	r7, #16
     5fa:	46bd      	mov	sp, r7
     5fc:	bd80      	pop	{r7, pc}
     5fe:	bf00      	nop
     600:	000004f5 	.word	0x000004f5
     604:	000061a0 	.word	0x000061a0
     608:	000061ac 	.word	0x000061ac
     60c:	000061e4 	.word	0x000061e4
     610:	000061f0 	.word	0x000061f0
     614:	0000053d 	.word	0x0000053d
     618:	0000620c 	.word	0x0000620c
     61c:	00006214 	.word	0x00006214
     620:	0000621c 	.word	0x0000621c

00000624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     624:	b490      	push	{r4, r7}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     62e:	683b      	ldr	r3, [r7, #0]
     630:	e9d3 3400 	ldrd	r3, r4, [r3]
     634:	687a      	ldr	r2, [r7, #4]
     636:	e9c2 3400 	strd	r3, r4, [r2]
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bc90      	pop	{r4, r7}
     644:	4770      	bx	lr
     646:	Address 0x0000000000000646 is out of bounds.


00000648 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	4903      	ldr	r1, [pc, #12]	; (664 <sjsu::DefaultUptime()+0x1c>)
     656:	4618      	mov	r0, r3
     658:	f001 fce0 	bl	201c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     65c:	6878      	ldr	r0, [r7, #4]
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	100000f8 	.word	0x100000f8

00000668 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     668:	b480      	push	{r7}
     66a:	b083      	sub	sp, #12
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
     670:	2300      	movs	r3, #0
     672:	4618      	mov	r0, r3
     674:	370c      	adds	r7, #12
     676:	46bd      	mov	sp, r7
     678:	f85d 7b04 	ldr.w	r7, [sp], #4
     67c:	4770      	bx	lr

0000067e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     67e:	b580      	push	{r7, lr}
     680:	af00      	add	r7, sp, #0
     682:	2000      	movs	r0, #0
     684:	f7ff fff0 	bl	668 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     688:	4603      	mov	r3, r0
     68a:	4618      	mov	r0, r3
     68c:	bd80      	pop	{r7, pc}
     68e:	Address 0x000000000000068e is out of bounds.


00000690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     690:	b590      	push	{r4, r7, lr}
     692:	b093      	sub	sp, #76	; 0x4c
     694:	af00      	add	r7, sp, #0
     696:	e9c7 0102 	strd	r0, r1, [r7, #8]
     69a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     69e:	e9c7 3406 	strd	r3, r4, [r7, #24]
     6a2:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     6a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
     6aa:	4618      	mov	r0, r3
     6ac:	f001 fcda 	bl	2064 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     6b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
     6b4:	f107 0318 	add.w	r3, r7, #24
     6b8:	4611      	mov	r1, r2
     6ba:	4618      	mov	r0, r3
     6bc:	f001 fce6 	bl	208c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6c0:	4603      	mov	r3, r0
     6c2:	2b00      	cmp	r3, #0
     6c4:	d004      	beq.n	6d0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     6c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     6ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
     6ce:	e011      	b.n	6f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     6d0:	4b19      	ldr	r3, [pc, #100]	; (738 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
     6d8:	4610      	mov	r0, r2
     6da:	4798      	blx	r3
     6dc:	463b      	mov	r3, r7
     6de:	f107 0218 	add.w	r2, r7, #24
     6e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
     6e6:	4618      	mov	r0, r3
     6e8:	f001 fe7a 	bl	23e0 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6ec:	e9d7 3400 	ldrd	r3, r4, [r7]
     6f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     6f4:	2301      	movs	r3, #1
     6f6:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     6f8:	4b0f      	ldr	r3, [pc, #60]	; (738 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
     700:	4610      	mov	r0, r2
     702:	4798      	blx	r3
     704:	f107 0210 	add.w	r2, r7, #16
     708:	f107 0328 	add.w	r3, r7, #40	; 0x28
     70c:	4611      	mov	r1, r2
     70e:	4618      	mov	r0, r3
     710:	f001 fe93 	bl	243a <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     714:	4603      	mov	r3, r0
     716:	2b00      	cmp	r3, #0
     718:	d009      	beq.n	72e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
     71e:	4618      	mov	r0, r3
     720:	f7ff ffa2 	bl	668 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     724:	4603      	mov	r3, r0
     726:	2b00      	cmp	r3, #0
     728:	d0e6      	beq.n	6f8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     72a:	2300      	movs	r3, #0
     72c:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     730:	4618      	mov	r0, r3
     732:	374c      	adds	r7, #76	; 0x4c
     734:	46bd      	mov	sp, r7
     736:	bd90      	pop	{r4, r7, pc}
     738:	10000000 	.word	0x10000000

0000073c <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     73c:	b580      	push	{r7, lr}
     73e:	b082      	sub	sp, #8
     740:	af00      	add	r7, sp, #0
     742:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     746:	e9d7 0100 	ldrd	r0, r1, [r7]
     74a:	f7ff ffa1 	bl	690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     74e:	bf00      	nop
     750:	3708      	adds	r7, #8
     752:	46bd      	mov	sp, r7
     754:	bd80      	pop	{r7, pc}

00000756 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     756:	b480      	push	{r7}
     758:	b083      	sub	sp, #12
     75a:	af00      	add	r7, sp, #0
     75c:	6078      	str	r0, [r7, #4]
  {
    return port_;
     75e:	687b      	ldr	r3, [r7, #4]
     760:	791b      	ldrb	r3, [r3, #4]
  }
     762:	4618      	mov	r0, r3
     764:	370c      	adds	r7, #12
     766:	46bd      	mov	sp, r7
     768:	f85d 7b04 	ldr.w	r7, [sp], #4
     76c:	4770      	bx	lr

0000076e <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     76e:	b480      	push	{r7}
     770:	b083      	sub	sp, #12
     772:	af00      	add	r7, sp, #0
     774:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     776:	687b      	ldr	r3, [r7, #4]
     778:	795b      	ldrb	r3, [r3, #5]
  }
     77a:	4618      	mov	r0, r3
     77c:	370c      	adds	r7, #12
     77e:	46bd      	mov	sp, r7
     780:	f85d 7b04 	ldr.w	r7, [sp], #4
     784:	4770      	bx	lr
     786:	Address 0x0000000000000786 is out of bounds.


00000788 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     788:	b480      	push	{r7}
     78a:	b083      	sub	sp, #12
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     790:	687b      	ldr	r3, [r7, #4]
     792:	f003 021f 	and.w	r2, r3, #31
     796:	4907      	ldr	r1, [pc, #28]	; (7b4 <NVIC_DisableIRQ+0x2c>)
     798:	687b      	ldr	r3, [r7, #4]
     79a:	095b      	lsrs	r3, r3, #5
     79c:	2001      	movs	r0, #1
     79e:	fa00 f202 	lsl.w	r2, r0, r2
     7a2:	3320      	adds	r3, #32
     7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     7a8:	bf00      	nop
     7aa:	370c      	adds	r7, #12
     7ac:	46bd      	mov	sp, r7
     7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b2:	4770      	bx	lr
     7b4:	e000e100 	.word	0xe000e100

000007b8 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     7b8:	b580      	push	{r7, lr}
     7ba:	b082      	sub	sp, #8
     7bc:	af00      	add	r7, sp, #0
     7be:	6078      	str	r0, [r7, #4]
     7c0:	460b      	mov	r3, r1
     7c2:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     7c4:	4b08      	ldr	r3, [pc, #32]	; (7e8 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     7c6:	78f9      	ldrb	r1, [r7, #3]
     7c8:	781a      	ldrb	r2, [r3, #0]
     7ca:	785b      	ldrb	r3, [r3, #1]
     7cc:	021b      	lsls	r3, r3, #8
     7ce:	431a      	orrs	r2, r3
     7d0:	2300      	movs	r3, #0
     7d2:	f362 030f 	bfi	r3, r2, #0, #16
     7d6:	461a      	mov	r2, r3
     7d8:	6878      	ldr	r0, [r7, #4]
     7da:	f000 f859 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     7de:	bf00      	nop
     7e0:	3708      	adds	r7, #8
     7e2:	46bd      	mov	sp, r7
     7e4:	bd80      	pop	{r7, pc}
     7e6:	bf00      	nop
     7e8:	000066c8 	.word	0x000066c8

000007ec <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     7ec:	b580      	push	{r7, lr}
     7ee:	b082      	sub	sp, #8
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
     7f4:	460b      	mov	r3, r1
     7f6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     7f8:	4b08      	ldr	r3, [pc, #32]	; (81c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     7fa:	78f9      	ldrb	r1, [r7, #3]
     7fc:	781a      	ldrb	r2, [r3, #0]
     7fe:	785b      	ldrb	r3, [r3, #1]
     800:	021b      	lsls	r3, r3, #8
     802:	431a      	orrs	r2, r3
     804:	2300      	movs	r3, #0
     806:	f362 030f 	bfi	r3, r2, #0, #16
     80a:	461a      	mov	r2, r3
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	f000 f83f 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     812:	bf00      	nop
     814:	3708      	adds	r7, #8
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	bf00      	nop
     81c:	000066cc 	.word	0x000066cc

00000820 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     820:	b580      	push	{r7, lr}
     822:	b082      	sub	sp, #8
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
     828:	460b      	mov	r3, r1
     82a:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     82c:	78fb      	ldrb	r3, [r7, #3]
     82e:	f083 0301 	eor.w	r3, r3, #1
     832:	b2db      	uxtb	r3, r3
     834:	4619      	mov	r1, r3
     836:	4b08      	ldr	r3, [pc, #32]	; (858 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     838:	781a      	ldrb	r2, [r3, #0]
     83a:	785b      	ldrb	r3, [r3, #1]
     83c:	021b      	lsls	r3, r3, #8
     83e:	431a      	orrs	r2, r3
     840:	2300      	movs	r3, #0
     842:	f362 030f 	bfi	r3, r2, #0, #16
     846:	461a      	mov	r2, r3
     848:	6878      	ldr	r0, [r7, #4]
     84a:	f000 f821 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     84e:	bf00      	nop
     850:	3708      	adds	r7, #8
     852:	46bd      	mov	sp, r7
     854:	bd80      	pop	{r7, pc}
     856:	bf00      	nop
     858:	000066d0 	.word	0x000066d0

0000085c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     85c:	b580      	push	{r7, lr}
     85e:	b082      	sub	sp, #8
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	460b      	mov	r3, r1
     866:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     868:	78f9      	ldrb	r1, [r7, #3]
     86a:	4b08      	ldr	r3, [pc, #32]	; (88c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     86c:	781a      	ldrb	r2, [r3, #0]
     86e:	785b      	ldrb	r3, [r3, #1]
     870:	021b      	lsls	r3, r3, #8
     872:	431a      	orrs	r2, r3
     874:	2300      	movs	r3, #0
     876:	f362 030f 	bfi	r3, r2, #0, #16
     87a:	461a      	mov	r2, r3
     87c:	6878      	ldr	r0, [r7, #4]
     87e:	f000 f807 	bl	890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     882:	bf00      	nop
     884:	3708      	adds	r7, #8
     886:	46bd      	mov	sp, r7
     888:	bd80      	pop	{r7, pc}
     88a:	bf00      	nop
     88c:	000066d4 	.word	0x000066d4

00000890 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	b087      	sub	sp, #28
     894:	af00      	add	r7, sp, #0
     896:	60f8      	str	r0, [r7, #12]
     898:	460b      	mov	r3, r1
     89a:	80ba      	strh	r2, [r7, #4]
     89c:	72fb      	strb	r3, [r7, #11]
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     8a2:	4b19      	ldr	r3, [pc, #100]	; (908 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     8a4:	681c      	ldr	r4, [r3, #0]
     8a6:	693b      	ldr	r3, [r7, #16]
     8a8:	4618      	mov	r0, r3
     8aa:	f7ff ff54 	bl	756 <sjsu::Pin::GetPort() const>
     8ae:	4603      	mov	r3, r0
     8b0:	461d      	mov	r5, r3
     8b2:	693b      	ldr	r3, [r7, #16]
     8b4:	4618      	mov	r0, r3
     8b6:	f7ff ff5a 	bl	76e <sjsu::Pin::GetPin() const>
     8ba:	4603      	mov	r3, r0
     8bc:	461a      	mov	r2, r3
     8be:	016b      	lsls	r3, r5, #5
     8c0:	4413      	add	r3, r2
     8c2:	009b      	lsls	r3, r3, #2
     8c4:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	7af9      	ldrb	r1, [r7, #11]
     8ca:	687a      	ldr	r2, [r7, #4]
     8cc:	4618      	mov	r0, r3
     8ce:	f001 fc04 	bl	20da <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     8d2:	4605      	mov	r5, r0
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     8d8:	4b0b      	ldr	r3, [pc, #44]	; (908 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     8da:	681c      	ldr	r4, [r3, #0]
     8dc:	697b      	ldr	r3, [r7, #20]
     8de:	4618      	mov	r0, r3
     8e0:	f7ff ff39 	bl	756 <sjsu::Pin::GetPort() const>
     8e4:	4603      	mov	r3, r0
     8e6:	461e      	mov	r6, r3
     8e8:	697b      	ldr	r3, [r7, #20]
     8ea:	4618      	mov	r0, r3
     8ec:	f7ff ff3f 	bl	76e <sjsu::Pin::GetPin() const>
     8f0:	4603      	mov	r3, r0
     8f2:	461a      	mov	r2, r3
     8f4:	0173      	lsls	r3, r6, #5
     8f6:	4413      	add	r3, r2
     8f8:	009b      	lsls	r3, r3, #2
     8fa:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     8fc:	601d      	str	r5, [r3, #0]
  }
     8fe:	bf00      	nop
     900:	371c      	adds	r7, #28
     902:	46bd      	mov	sp, r7
     904:	bdf0      	pop	{r4, r5, r6, r7, pc}
     906:	bf00      	nop
     908:	10000100 	.word	0x10000100

0000090c <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     90c:	b480      	push	{r7}
     90e:	af00      	add	r7, sp, #0
     910:	bf00      	nop
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	Address 0x000000000000091a is out of bounds.


0000091c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     91c:	b580      	push	{r7, lr}
     91e:	b082      	sub	sp, #8
     920:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     922:	4b09      	ldr	r3, [pc, #36]	; (948 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     924:	681b      	ldr	r3, [r3, #0]
     926:	9300      	str	r3, [sp, #0]
     928:	231d      	movs	r3, #29
     92a:	4a08      	ldr	r2, [pc, #32]	; (94c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     92c:	4908      	ldr	r1, [pc, #32]	; (950 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     92e:	4809      	ldr	r0, [pc, #36]	; (954 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     930:	f003 fa80 	bl	3e34 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     934:	4b04      	ldr	r3, [pc, #16]	; (948 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     936:	681b      	ldr	r3, [r3, #0]
     938:	3b10      	subs	r3, #16
     93a:	4618      	mov	r0, r3
     93c:	f7ff ff24 	bl	788 <NVIC_DisableIRQ>
  }
     940:	bf00      	nop
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	10000004 	.word	0x10000004
     94c:	000069e0 	.word	0x000069e0
     950:	000066d8 	.word	0x000066d8
     954:	00006270 	.word	0x00006270

00000958 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     958:	b480      	push	{r7}
     95a:	b083      	sub	sp, #12
     95c:	af00      	add	r7, sp, #0
     95e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     960:	2340      	movs	r3, #64	; 0x40
     962:	4618      	mov	r0, r3
     964:	370c      	adds	r7, #12
     966:	46bd      	mov	sp, r7
     968:	f85d 7b04 	ldr.w	r7, [sp], #4
     96c:	4770      	bx	lr
     96e:	Address 0x000000000000096e is out of bounds.


00000970 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     970:	b580      	push	{r7, lr}
     972:	b084      	sub	sp, #16
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     978:	687b      	ldr	r3, [r7, #4]
     97a:	4618      	mov	r0, r3
     97c:	f44f 7380 	mov.w	r3, #256	; 0x100
     980:	461a      	mov	r2, r3
     982:	2100      	movs	r1, #0
     984:	f005 fb97 	bl	60b6 <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     988:	2300      	movs	r3, #0
     98a:	60fb      	str	r3, [r7, #12]
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	2b0f      	cmp	r3, #15
     990:	d808      	bhi.n	9a4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     992:	687b      	ldr	r3, [r7, #4]
     994:	68fa      	ldr	r2, [r7, #12]
     996:	4911      	ldr	r1, [pc, #68]	; (9dc <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     99c:	68fb      	ldr	r3, [r7, #12]
     99e:	3301      	adds	r3, #1
     9a0:	60fb      	str	r3, [r7, #12]
     9a2:	e7f3      	b.n	98c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     9a4:	2310      	movs	r3, #16
     9a6:	60bb      	str	r3, [r7, #8]
     9a8:	6878      	ldr	r0, [r7, #4]
     9aa:	f7ff ffd5 	bl	958 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     9ae:	4602      	mov	r2, r0
     9b0:	68bb      	ldr	r3, [r7, #8]
     9b2:	4293      	cmp	r3, r2
     9b4:	bf34      	ite	cc
     9b6:	2301      	movcc	r3, #1
     9b8:	2300      	movcs	r3, #0
     9ba:	b2db      	uxtb	r3, r3
     9bc:	2b00      	cmp	r3, #0
     9be:	d008      	beq.n	9d2 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	68ba      	ldr	r2, [r7, #8]
     9c4:	4906      	ldr	r1, [pc, #24]	; (9e0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     9c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     9ca:	68bb      	ldr	r3, [r7, #8]
     9cc:	3301      	adds	r3, #1
     9ce:	60bb      	str	r3, [r7, #8]
     9d0:	e7ea      	b.n	9a8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     9d2:	bf00      	nop
    }
     9d4:	6878      	ldr	r0, [r7, #4]
     9d6:	3710      	adds	r7, #16
     9d8:	46bd      	mov	sp, r7
     9da:	bd80      	pop	{r7, pc}
     9dc:	0000090d 	.word	0x0000090d
     9e0:	0000091d 	.word	0x0000091d

000009e4 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     9e4:	b480      	push	{r7}
     9e6:	b083      	sub	sp, #12
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	ee07 3a90 	vmov	s15, r3
     9f4:	eeb0 0a67 	vmov.f32	s0, s15
     9f8:	370c      	adds	r7, #12
     9fa:	46bd      	mov	sp, r7
     9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     a00:	4770      	bx	lr

00000a02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     a02:	b580      	push	{r7, lr}
     a04:	b082      	sub	sp, #8
     a06:	af00      	add	r7, sp, #0
     a08:	6078      	str	r0, [r7, #4]
     a0a:	ed87 0a00 	vstr	s0, [r7]
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	463a      	mov	r2, r7
     a12:	4611      	mov	r1, r2
     a14:	4618      	mov	r0, r3
     a16:	f7ff fcd9 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	4618      	mov	r0, r3
     a1e:	3708      	adds	r7, #8
     a20:	46bd      	mov	sp, r7
     a22:	bd80      	pop	{r7, pc}

00000a24 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     a24:	b580      	push	{r7, lr}
     a26:	b082      	sub	sp, #8
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     a2c:	6878      	ldr	r0, [r7, #4]
     a2e:	f001 fba3 	bl	2178 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     a32:	4603      	mov	r3, r0
		}
     a34:	4618      	mov	r0, r3
     a36:	3708      	adds	r7, #8
     a38:	46bd      	mov	sp, r7
     a3a:	bd80      	pop	{r7, pc}

00000a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     a3c:	b490      	push	{r4, r7}
     a3e:	b082      	sub	sp, #8
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
	{ return __r; }
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	e9d3 3400 	ldrd	r3, r4, [r3]
     a4a:	4618      	mov	r0, r3
     a4c:	4621      	mov	r1, r4
     a4e:	3708      	adds	r7, #8
     a50:	46bd      	mov	sp, r7
     a52:	bc90      	pop	{r4, r7}
     a54:	4770      	bx	lr

00000a56 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     a56:	b580      	push	{r7, lr}
     a58:	b086      	sub	sp, #24
     a5a:	af00      	add	r7, sp, #0
     a5c:	6078      	str	r0, [r7, #4]
     a5e:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	3308      	adds	r3, #8
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	6839      	ldr	r1, [r7, #0]
     a6a:	6878      	ldr	r0, [r7, #4]
     a6c:	4798      	blx	r3
     a6e:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     a70:	f04f 0300 	mov.w	r3, #0
     a74:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     a76:	697b      	ldr	r3, [r7, #20]
     a78:	2b00      	cmp	r3, #0
     a7a:	d00f      	beq.n	a9c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     a7c:	687b      	ldr	r3, [r7, #4]
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	330c      	adds	r3, #12
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	6878      	ldr	r0, [r7, #4]
     a86:	4798      	blx	r3
     a88:	4603      	mov	r3, r0
     a8a:	613b      	str	r3, [r7, #16]
     a8c:	f107 0310 	add.w	r3, r7, #16
     a90:	6979      	ldr	r1, [r7, #20]
     a92:	4618      	mov	r0, r3
     a94:	f001 fb8b 	bl	21ae <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     a98:	4603      	mov	r3, r0
     a9a:	60fb      	str	r3, [r7, #12]
    }
    return result;
     a9c:	68fb      	ldr	r3, [r7, #12]
  }
     a9e:	4618      	mov	r0, r3
     aa0:	3718      	adds	r7, #24
     aa2:	46bd      	mov	sp, r7
     aa4:	bd80      	pop	{r7, pc}

00000aa6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     aa6:	b490      	push	{r4, r7}
     aa8:	b082      	sub	sp, #8
     aaa:	af00      	add	r7, sp, #0
     aac:	6078      	str	r0, [r7, #4]
     aae:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     ab0:	683b      	ldr	r3, [r7, #0]
     ab2:	e9d3 3400 	ldrd	r3, r4, [r3]
     ab6:	687a      	ldr	r2, [r7, #4]
     ab8:	e9c2 3400 	strd	r3, r4, [r2]
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	4618      	mov	r0, r3
     ac0:	3708      	adds	r7, #8
     ac2:	46bd      	mov	sp, r7
     ac4:	bc90      	pop	{r4, r7}
     ac6:	4770      	bx	lr

00000ac8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
     ac8:	b490      	push	{r4, r7}
     aca:	b082      	sub	sp, #8
     acc:	af00      	add	r7, sp, #0
     ace:	6078      	str	r0, [r7, #4]
	{ return __r; }
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	e9d3 3400 	ldrd	r3, r4, [r3]
     ad6:	4618      	mov	r0, r3
     ad8:	4621      	mov	r1, r4
     ada:	3708      	adds	r7, #8
     adc:	46bd      	mov	sp, r7
     ade:	bc90      	pop	{r4, r7}
     ae0:	4770      	bx	lr

00000ae2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     ae2:	b580      	push	{r7, lr}
     ae4:	b086      	sub	sp, #24
     ae6:	af00      	add	r7, sp, #0
     ae8:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     aea:	6878      	ldr	r0, [r7, #4]
     aec:	f000 f808 	bl	b00 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     af0:	eef0 7a40 	vmov.f32	s15, s0
	}
     af4:	eeb0 0a67 	vmov.f32	s0, s15
     af8:	3718      	adds	r7, #24
     afa:	46bd      	mov	sp, r7
     afc:	bd80      	pop	{r7, pc}
     afe:	Address 0x0000000000000afe is out of bounds.


00000b00 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     b00:	b480      	push	{r7}
     b02:	b085      	sub	sp, #20
     b04:	af00      	add	r7, sp, #0
     b06:	60f8      	str	r0, [r7, #12]
     b08:	7239      	strb	r1, [r7, #8]
     b0a:	713a      	strb	r2, [r7, #4]
     b0c:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	edd3 7a00 	vldr	s15, [r3]
     b14:	ed9f 7a05 	vldr	s14, [pc, #20]	; b2c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     b18:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     b1c:	eeb0 0a67 	vmov.f32	s0, s15
     b20:	3714      	adds	r7, #20
     b22:	46bd      	mov	sp, r7
     b24:	f85d 7b04 	ldr.w	r7, [sp], #4
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	49742400 	.word	0x49742400

00000b30 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     b30:	b580      	push	{r7, lr}
     b32:	b084      	sub	sp, #16
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     b3a:	2100      	movs	r1, #0
     b3c:	6878      	ldr	r0, [r7, #4]
     b3e:	f000 f8e3 	bl	d08 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     b42:	f04f 000c 	mov.w	r0, #12
     b46:	f04f 0100 	mov.w	r1, #0
     b4a:	f7ff fc18 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     b4e:	4603      	mov	r3, r0
     b50:	60bb      	str	r3, [r7, #8]
     b52:	f107 0208 	add.w	r2, r7, #8
     b56:	463b      	mov	r3, r7
     b58:	4611      	mov	r1, r2
     b5a:	4618      	mov	r0, r3
     b5c:	f001 fb45 	bl	21ea <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     b60:	4603      	mov	r3, r0
     b62:	2b00      	cmp	r3, #0
     b64:	d00f      	beq.n	b86 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     b66:	4b16      	ldr	r3, [pc, #88]	; (bc0 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     b68:	683a      	ldr	r2, [r7, #0]
     b6a:	6819      	ldr	r1, [r3, #0]
     b6c:	6878      	ldr	r0, [r7, #4]
     b6e:	f000 fabf 	bl	10f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     b72:	2101      	movs	r1, #1
     b74:	6878      	ldr	r0, [r7, #4]
     b76:	f000 f8eb 	bl	d50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     b7a:	463b      	mov	r3, r7
     b7c:	4619      	mov	r1, r3
     b7e:	4811      	ldr	r0, [pc, #68]	; (bc4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     b80:	f001 fb51 	bl	2226 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     b84:	e007      	b.n	b96 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     b86:	2100      	movs	r1, #0
     b88:	6878      	ldr	r0, [r7, #4]
     b8a:	f000 f8e1 	bl	d50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     b8e:	490e      	ldr	r1, [pc, #56]	; (bc8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     b90:	480c      	ldr	r0, [pc, #48]	; (bc4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     b92:	f001 fb48 	bl	2226 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     b96:	2101      	movs	r1, #1
     b98:	6878      	ldr	r0, [r7, #4]
     b9a:	f000 fb0d 	bl	11b8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     b9e:	23ff      	movs	r3, #255	; 0xff
     ba0:	733b      	strb	r3, [r7, #12]
     ba2:	f107 030c 	add.w	r3, r7, #12
     ba6:	2201      	movs	r2, #1
     ba8:	4619      	mov	r1, r3
     baa:	6878      	ldr	r0, [r7, #4]
     bac:	f000 f80e 	bl	bcc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     bb0:	2100      	movs	r1, #0
     bb2:	6878      	ldr	r0, [r7, #4]
     bb4:	f000 fb3e 	bl	1234 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     bb8:	bf00      	nop
     bba:	3710      	adds	r7, #16
     bbc:	46bd      	mov	sp, r7
     bbe:	bd80      	pop	{r7, pc}
     bc0:	000066e8 	.word	0x000066e8
     bc4:	10000008 	.word	0x10000008
     bc8:	000066f0 	.word	0x000066f0

00000bcc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     bcc:	b580      	push	{r7, lr}
     bce:	b084      	sub	sp, #16
     bd0:	af00      	add	r7, sp, #0
     bd2:	60f8      	str	r0, [r7, #12]
     bd4:	60b9      	str	r1, [r7, #8]
     bd6:	4613      	mov	r3, r2
     bd8:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     bda:	79fb      	ldrb	r3, [r7, #7]
     bdc:	2b04      	cmp	r3, #4
     bde:	d90d      	bls.n	bfc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     be0:	23b2      	movs	r3, #178	; 0xb2
     be2:	4a0b      	ldr	r2, [pc, #44]	; (c10 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     be4:	490b      	ldr	r1, [pc, #44]	; (c14 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     be6:	480c      	ldr	r0, [pc, #48]	; (c18 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     be8:	f003 f924 	bl	3e34 <printf>
     bec:	480b      	ldr	r0, [pc, #44]	; (c1c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     bee:	f002 f805 	bl	2bfc <puts>
     bf2:	2100      	movs	r1, #0
     bf4:	2001      	movs	r0, #1
     bf6:	f7ff fcc3 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     bfa:	e7fe      	b.n	bfa <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     bfc:	4b08      	ldr	r3, [pc, #32]	; (c20 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	79fa      	ldrb	r2, [r7, #7]
     c02:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     c06:	bf00      	nop
     c08:	3710      	adds	r7, #16
     c0a:	46bd      	mov	sp, r7
     c0c:	bd80      	pop	{r7, pc}
     c0e:	bf00      	nop
     c10:	00006898 	.word	0x00006898
     c14:	0000670c 	.word	0x0000670c
     c18:	000062f0 	.word	0x000062f0
     c1c:	00006390 	.word	0x00006390
     c20:	10000248 	.word	0x10000248

00000c24 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     c24:	b480      	push	{r7}
     c26:	b083      	sub	sp, #12
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
     c2c:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     c2e:	4b05      	ldr	r3, [pc, #20]	; (c44 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     c36:	4618      	mov	r0, r3
     c38:	370c      	adds	r7, #12
     c3a:	46bd      	mov	sp, r7
     c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c40:	4770      	bx	lr
     c42:	bf00      	nop
     c44:	10000248 	.word	0x10000248

00000c48 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     c48:	b480      	push	{r7}
     c4a:	b083      	sub	sp, #12
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     c50:	4b03      	ldr	r3, [pc, #12]	; (c60 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     c52:	681b      	ldr	r3, [r3, #0]
  }
     c54:	4618      	mov	r0, r3
     c56:	370c      	adds	r7, #12
     c58:	46bd      	mov	sp, r7
     c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c5e:	4770      	bx	lr
     c60:	10000008 	.word	0x10000008

00000c64 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     c64:	b480      	push	{r7}
     c66:	b085      	sub	sp, #20
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     c6e:	4b0b      	ldr	r3, [pc, #44]	; (c9c <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     c76:	683a      	ldr	r2, [r7, #0]
     c78:	7812      	ldrb	r2, [r2, #0]
     c7a:	4611      	mov	r1, r2
     c7c:	2201      	movs	r2, #1
     c7e:	408a      	lsls	r2, r1
     c80:	4013      	ands	r3, r2
     c82:	2b00      	cmp	r3, #0
     c84:	bf14      	ite	ne
     c86:	2301      	movne	r3, #1
     c88:	2300      	moveq	r3, #0
     c8a:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     c8c:	7bfb      	ldrb	r3, [r7, #15]
  }
     c8e:	4618      	mov	r0, r3
     c90:	3714      	adds	r7, #20
     c92:	46bd      	mov	sp, r7
     c94:	f85d 7b04 	ldr.w	r7, [sp], #4
     c98:	4770      	bx	lr
     c9a:	bf00      	nop
     c9c:	10000248 	.word	0x10000248

00000ca0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     ca0:	b590      	push	{r4, r7, lr}
     ca2:	b083      	sub	sp, #12
     ca4:	af00      	add	r7, sp, #0
     ca6:	6078      	str	r0, [r7, #4]
     ca8:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     caa:	4b09      	ldr	r3, [pc, #36]	; (cd0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     cb2:	683b      	ldr	r3, [r7, #0]
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	4619      	mov	r1, r3
    system_controller->PCONP =
     cb8:	4b05      	ldr	r3, [pc, #20]	; (cd0 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     cba:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     cbc:	4610      	mov	r0, r2
     cbe:	f001 fa32 	bl	2126 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     cc2:	4603      	mov	r3, r0
    system_controller->PCONP =
     cc4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     cc8:	bf00      	nop
     cca:	370c      	adds	r7, #12
     ccc:	46bd      	mov	sp, r7
     cce:	bd90      	pop	{r4, r7, pc}
     cd0:	10000248 	.word	0x10000248

00000cd4 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     cd4:	b590      	push	{r4, r7, lr}
     cd6:	b083      	sub	sp, #12
     cd8:	af00      	add	r7, sp, #0
     cda:	6078      	str	r0, [r7, #4]
     cdc:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     cde:	4b09      	ldr	r3, [pc, #36]	; (d04 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     ce6:	683b      	ldr	r3, [r7, #0]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	4619      	mov	r1, r3
    system_controller->PCONP =
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     cee:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     cf0:	4610      	mov	r0, r2
     cf2:	f001 fa05 	bl	2100 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     cf6:	4603      	mov	r3, r0
    system_controller->PCONP =
     cf8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     cfc:	bf00      	nop
     cfe:	370c      	adds	r7, #12
     d00:	46bd      	mov	sp, r7
     d02:	bd90      	pop	{r4, r7, pc}
     d04:	10000248 	.word	0x10000248

00000d08 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     d08:	b590      	push	{r4, r7, lr}
     d0a:	b083      	sub	sp, #12
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
     d10:	460b      	mov	r3, r1
     d12:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     d14:	4b0c      	ldr	r3, [pc, #48]	; (d48 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     d1c:	8879      	ldrh	r1, [r7, #2]
     d1e:	4b0a      	ldr	r3, [pc, #40]	; (d48 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     d20:	681c      	ldr	r4, [r3, #0]
     d22:	4b0a      	ldr	r3, [pc, #40]	; (d4c <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     d24:	781a      	ldrb	r2, [r3, #0]
     d26:	785b      	ldrb	r3, [r3, #1]
     d28:	021b      	lsls	r3, r3, #8
     d2a:	431a      	orrs	r2, r3
     d2c:	2300      	movs	r3, #0
     d2e:	f362 030f 	bfi	r3, r2, #0, #16
     d32:	461a      	mov	r2, r3
     d34:	f001 fa8a 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     d38:	4603      	mov	r3, r0
     d3a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     d3e:	bf00      	nop
     d40:	370c      	adds	r7, #12
     d42:	46bd      	mov	sp, r7
     d44:	bd90      	pop	{r4, r7, pc}
     d46:	bf00      	nop
     d48:	10000248 	.word	0x10000248
     d4c:	000066f4 	.word	0x000066f4

00000d50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     d50:	b590      	push	{r4, r7, lr}
     d52:	b083      	sub	sp, #12
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
     d58:	460b      	mov	r3, r1
     d5a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     d5c:	4b0c      	ldr	r3, [pc, #48]	; (d90 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     d64:	8879      	ldrh	r1, [r7, #2]
     d66:	4b0a      	ldr	r3, [pc, #40]	; (d90 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     d68:	681c      	ldr	r4, [r3, #0]
     d6a:	4b0a      	ldr	r3, [pc, #40]	; (d94 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     d6c:	781a      	ldrb	r2, [r3, #0]
     d6e:	785b      	ldrb	r3, [r3, #1]
     d70:	021b      	lsls	r3, r3, #8
     d72:	431a      	orrs	r2, r3
     d74:	2300      	movs	r3, #0
     d76:	f362 030f 	bfi	r3, r2, #0, #16
     d7a:	461a      	mov	r2, r3
     d7c:	f001 fa66 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     d80:	4603      	mov	r3, r0
     d82:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     d86:	bf00      	nop
     d88:	370c      	adds	r7, #12
     d8a:	46bd      	mov	sp, r7
     d8c:	bd90      	pop	{r4, r7, pc}
     d8e:	bf00      	nop
     d90:	10000248 	.word	0x10000248
     d94:	00006700 	.word	0x00006700

00000d98 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     d98:	b590      	push	{r4, r7, lr}
     d9a:	b083      	sub	sp, #12
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
     da0:	460b      	mov	r3, r1
     da2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     da4:	4b0c      	ldr	r3, [pc, #48]	; (dd8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     dac:	8879      	ldrh	r1, [r7, #2]
     dae:	4b0a      	ldr	r3, [pc, #40]	; (dd8 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     db0:	681c      	ldr	r4, [r3, #0]
     db2:	4b0a      	ldr	r3, [pc, #40]	; (ddc <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     db4:	781a      	ldrb	r2, [r3, #0]
     db6:	785b      	ldrb	r3, [r3, #1]
     db8:	021b      	lsls	r3, r3, #8
     dba:	431a      	orrs	r2, r3
     dbc:	2300      	movs	r3, #0
     dbe:	f362 030f 	bfi	r3, r2, #0, #16
     dc2:	461a      	mov	r2, r3
     dc4:	f001 fa42 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     dc8:	4603      	mov	r3, r0
     dca:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     dce:	bf00      	nop
     dd0:	370c      	adds	r7, #12
     dd2:	46bd      	mov	sp, r7
     dd4:	bd90      	pop	{r4, r7, pc}
     dd6:	bf00      	nop
     dd8:	10000248 	.word	0x10000248
     ddc:	00006704 	.word	0x00006704

00000de0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     de0:	b590      	push	{r4, r7, lr}
     de2:	b083      	sub	sp, #12
     de4:	af00      	add	r7, sp, #0
     de6:	6078      	str	r0, [r7, #4]
     de8:	460b      	mov	r3, r1
     dea:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     dec:	4b0c      	ldr	r3, [pc, #48]	; (e20 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     df4:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     df6:	4b0a      	ldr	r3, [pc, #40]	; (e20 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     df8:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     dfa:	4b0a      	ldr	r3, [pc, #40]	; (e24 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     dfc:	781a      	ldrb	r2, [r3, #0]
     dfe:	785b      	ldrb	r3, [r3, #1]
     e00:	021b      	lsls	r3, r3, #8
     e02:	431a      	orrs	r2, r3
     e04:	2300      	movs	r3, #0
     e06:	f362 030f 	bfi	r3, r2, #0, #16
     e0a:	461a      	mov	r2, r3
     e0c:	f001 fa1e 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     e10:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     e12:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     e16:	bf00      	nop
     e18:	370c      	adds	r7, #12
     e1a:	46bd      	mov	sp, r7
     e1c:	bd90      	pop	{r4, r7, pc}
     e1e:	bf00      	nop
     e20:	10000248 	.word	0x10000248
     e24:	00006708 	.word	0x00006708

00000e28 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     e28:	b580      	push	{r7, lr}
     e2a:	ed2d 8b02 	vpush	{d8}
     e2e:	b082      	sub	sp, #8
     e30:	af00      	add	r7, sp, #0
     e32:	6078      	str	r0, [r7, #4]
     e34:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	ed93 8a00 	vldr	s16, [r3]
     e3c:	683b      	ldr	r3, [r7, #0]
     e3e:	4618      	mov	r0, r3
     e40:	f7ff fad4 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     e44:	eef0 7a40 	vmov.f32	s15, s0
     e48:	eeb4 8ae7 	vcmpe.f32	s16, s15
     e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e50:	bf4c      	ite	mi
     e52:	2301      	movmi	r3, #1
     e54:	2300      	movpl	r3, #0
     e56:	b2db      	uxtb	r3, r3
		}
     e58:	4618      	mov	r0, r3
     e5a:	3708      	adds	r7, #8
     e5c:	46bd      	mov	sp, r7
     e5e:	ecbd 8b02 	vpop	{d8}
     e62:	bd80      	pop	{r7, pc}

00000e64 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     e64:	b580      	push	{r7, lr}
     e66:	b082      	sub	sp, #8
     e68:	af00      	add	r7, sp, #0
     e6a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     e6c:	6878      	ldr	r0, [r7, #4]
     e6e:	f000 f805 	bl	e7c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     e72:	4603      	mov	r3, r0
		}
     e74:	4618      	mov	r0, r3
     e76:	3708      	adds	r7, #8
     e78:	46bd      	mov	sp, r7
     e7a:	bd80      	pop	{r7, pc}

00000e7c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     e7c:	b580      	push	{r7, lr}
     e7e:	b082      	sub	sp, #8
     e80:	af00      	add	r7, sp, #0
     e82:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	4618      	mov	r0, r3
     e88:	f7ff fdac 	bl	9e4 <units::linear_scale<float>::operator()() const>
     e8c:	eef0 7a40 	vmov.f32	s15, s0
     e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e94:	ee17 3a90 	vmov	r3, s15
		}
     e98:	4618      	mov	r0, r3
     e9a:	3708      	adds	r7, #8
     e9c:	46bd      	mov	sp, r7
     e9e:	bd80      	pop	{r7, pc}

00000ea0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     ea0:	b580      	push	{r7, lr}
     ea2:	ed2d 8b02 	vpush	{d8}
     ea6:	b084      	sub	sp, #16
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
     eac:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	4618      	mov	r0, r3
     eb2:	f7ff fd97 	bl	9e4 <units::linear_scale<float>::operator()() const>
     eb6:	eeb0 8a40 	vmov.f32	s16, s0
     eba:	683b      	ldr	r3, [r7, #0]
     ebc:	4618      	mov	r0, r3
     ebe:	f7ff fd91 	bl	9e4 <units::linear_scale<float>::operator()() const>
     ec2:	eef0 7a40 	vmov.f32	s15, s0
     ec6:	edc7 7a03 	vstr	s15, [r7, #12]
     eca:	f107 030c 	add.w	r3, r7, #12
     ece:	4618      	mov	r0, r3
     ed0:	f7ff fa8c 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     ed4:	eeb0 7a40 	vmov.f32	s14, s0
     ed8:	eec8 7a07 	vdiv.f32	s15, s16, s14
     edc:	f107 0308 	add.w	r3, r7, #8
     ee0:	eeb0 0a67 	vmov.f32	s0, s15
     ee4:	4618      	mov	r0, r3
     ee6:	f7ff fd8c 	bl	a02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     eea:	68bb      	ldr	r3, [r7, #8]
	}
     eec:	4618      	mov	r0, r3
     eee:	3710      	adds	r7, #16
     ef0:	46bd      	mov	sp, r7
     ef2:	ecbd 8b02 	vpop	{d8}
     ef6:	bd80      	pop	{r7, pc}

00000ef8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     ef8:	b580      	push	{r7, lr}
     efa:	b084      	sub	sp, #16
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
     f00:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	4618      	mov	r0, r3
     f06:	f7ff fd6d 	bl	9e4 <units::linear_scale<float>::operator()() const>
     f0a:	eeb0 7a40 	vmov.f32	s14, s0
     f0e:	683b      	ldr	r3, [r7, #0]
     f10:	ee07 3a90 	vmov	s15, r3
     f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     f18:	ee77 7a27 	vadd.f32	s15, s14, s15
     f1c:	f107 030c 	add.w	r3, r7, #12
     f20:	eeb0 0a67 	vmov.f32	s0, s15
     f24:	4618      	mov	r0, r3
     f26:	f7ff fd6c 	bl	a02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     f2a:	68fb      	ldr	r3, [r7, #12]
	}
     f2c:	4618      	mov	r0, r3
     f2e:	3710      	adds	r7, #16
     f30:	46bd      	mov	sp, r7
     f32:	bd80      	pop	{r7, pc}

00000f34 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     f34:	b580      	push	{r7, lr}
     f36:	b082      	sub	sp, #8
     f38:	af00      	add	r7, sp, #0
     f3a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	4618      	mov	r0, r3
     f40:	f7ff fd50 	bl	9e4 <units::linear_scale<float>::operator()() const>
     f44:	eef0 7a40 	vmov.f32	s15, s0
     f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     f4c:	ee17 3a90 	vmov	r3, s15
     f50:	b29b      	uxth	r3, r3
		}
     f52:	4618      	mov	r0, r3
     f54:	3708      	adds	r7, #8
     f56:	46bd      	mov	sp, r7
     f58:	bd80      	pop	{r7, pc}
     f5a:	Address 0x0000000000000f5a is out of bounds.


00000f5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     f5c:	b590      	push	{r4, r7, lr}
     f5e:	b08d      	sub	sp, #52	; 0x34
     f60:	af00      	add	r7, sp, #0
     f62:	60f8      	str	r0, [r7, #12]
     f64:	60b9      	str	r1, [r7, #8]
     f66:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     f68:	f44f 70c0 	mov.w	r0, #384	; 0x180
     f6c:	f04f 0100 	mov.w	r1, #0
     f70:	f7ff fa05 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     f74:	4603      	mov	r3, r0
     f76:	613b      	str	r3, [r7, #16]
     f78:	f107 0210 	add.w	r2, r7, #16
     f7c:	1d3b      	adds	r3, r7, #4
     f7e:	4611      	mov	r1, r2
     f80:	4618      	mov	r0, r3
     f82:	f7ff ff51 	bl	e28 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     f86:	4603      	mov	r3, r0
     f88:	f083 0301 	eor.w	r3, r3, #1
     f8c:	b2db      	uxtb	r3, r3
     f8e:	2b00      	cmp	r3, #0
     f90:	d114      	bne.n	fbc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     f92:	f04f 000c 	mov.w	r0, #12
     f96:	f04f 0100 	mov.w	r1, #0
     f9a:	f7ff f9f0 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     f9e:	4603      	mov	r3, r0
     fa0:	617b      	str	r3, [r7, #20]
     fa2:	f107 0214 	add.w	r2, r7, #20
     fa6:	1d3b      	adds	r3, r7, #4
     fa8:	4611      	mov	r1, r2
     faa:	4618      	mov	r0, r3
     fac:	f001 f91d 	bl	21ea <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     fb0:	4603      	mov	r3, r0
     fb2:	f083 0301 	eor.w	r3, r3, #1
     fb6:	b2db      	uxtb	r3, r3
     fb8:	2b00      	cmp	r3, #0
     fba:	d001      	beq.n	fc0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     fbc:	2301      	movs	r3, #1
     fbe:	e000      	b.n	fc2 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     fc0:	2300      	movs	r3, #0
     fc2:	2b00      	cmp	r3, #0
     fc4:	d00d      	beq.n	fe2 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     fc6:	23f6      	movs	r3, #246	; 0xf6
     fc8:	4a43      	ldr	r2, [pc, #268]	; (10d8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     fca:	4944      	ldr	r1, [pc, #272]	; (10dc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     fcc:	4844      	ldr	r0, [pc, #272]	; (10e0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     fce:	f002 ff31 	bl	3e34 <printf>
     fd2:	4844      	ldr	r0, [pc, #272]	; (10e4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     fd4:	f001 fe12 	bl	2bfc <puts>
     fd8:	2100      	movs	r1, #0
     fda:	2001      	movs	r0, #1
     fdc:	f7ff fad0 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     fe0:	e7fe      	b.n	fe0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     fe2:	2301      	movs	r3, #1
     fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     fe8:	1d3b      	adds	r3, r7, #4
     fea:	4618      	mov	r0, r3
     fec:	f7ff ff3a 	bl	e64 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     ff0:	4604      	mov	r4, r0
     ff2:	f107 0308 	add.w	r3, r7, #8
     ff6:	4618      	mov	r0, r3
     ff8:	f7ff ff34 	bl	e64 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     ffc:	4603      	mov	r3, r0
     ffe:	fbb4 f2f3 	udiv	r2, r4, r3
    1002:	fb03 f302 	mul.w	r3, r3, r2
    1006:	1ae3      	subs	r3, r4, r3
    1008:	2b00      	cmp	r3, #0
    100a:	bf14      	ite	ne
    100c:	2301      	movne	r3, #1
    100e:	2300      	moveq	r3, #0
    1010:	b2db      	uxtb	r3, r3
    1012:	2b00      	cmp	r3, #0
    1014:	d017      	beq.n	1046 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    1016:	f107 0208 	add.w	r2, r7, #8
    101a:	1d3b      	adds	r3, r7, #4
    101c:	4611      	mov	r1, r2
    101e:	4618      	mov	r0, r3
    1020:	f7ff ff3e 	bl	ea0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1024:	4603      	mov	r3, r0
    1026:	61fb      	str	r3, [r7, #28]
    1028:	f107 031c 	add.w	r3, r7, #28
    102c:	2101      	movs	r1, #1
    102e:	4618      	mov	r0, r3
    1030:	f7ff ff62 	bl	ef8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    1034:	4603      	mov	r3, r0
    1036:	61bb      	str	r3, [r7, #24]
      multiplier_value =
    1038:	f107 0318 	add.w	r3, r7, #24
    103c:	4618      	mov	r0, r3
    103e:	f001 f89b 	bl	2178 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1042:	62b8      	str	r0, [r7, #40]	; 0x28
    1044:	e00e      	b.n	1064 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    1046:	f107 0208 	add.w	r2, r7, #8
    104a:	1d3b      	adds	r3, r7, #4
    104c:	4611      	mov	r1, r2
    104e:	4618      	mov	r0, r3
    1050:	f7ff ff26 	bl	ea0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1054:	4603      	mov	r3, r0
    1056:	623b      	str	r3, [r7, #32]
      multiplier_value =
    1058:	f107 0320 	add.w	r3, r7, #32
    105c:	4618      	mov	r0, r3
    105e:	f001 f88b 	bl	2178 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1062:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    1064:	2301      	movs	r3, #1
    1066:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    1068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    106c:	2b00      	cmp	r3, #0
    106e:	d02d      	beq.n	10cc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    1070:	f107 0308 	add.w	r3, r7, #8
    1074:	4618      	mov	r0, r3
    1076:	f7ff ff5d 	bl	f34 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    107a:	4603      	mov	r3, r0
    107c:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1080:	b29b      	uxth	r3, r3
    1082:	fb12 f303 	smulbb	r3, r2, r3
    1086:	b29b      	uxth	r3, r3
    1088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    108a:	fb12 f303 	smulbb	r3, r2, r3
    108e:	b29b      	uxth	r3, r3
    1090:	005b      	lsls	r3, r3, #1
    1092:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    1094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    1096:	2b9b      	cmp	r3, #155	; 0x9b
    1098:	d903      	bls.n	10a2 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
    109a:	2300      	movs	r3, #0
    109c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    10a0:	e7e2      	b.n	1068 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    10a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    10a4:	005b      	lsls	r3, r3, #1
    10a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    10a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    10aa:	2b07      	cmp	r3, #7
    10ac:	d9dc      	bls.n	1068 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
    10ae:	f44f 7389 	mov.w	r3, #274	; 0x112
    10b2:	4a09      	ldr	r2, [pc, #36]	; (10d8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    10b4:	490c      	ldr	r1, [pc, #48]	; (10e8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    10b6:	480d      	ldr	r0, [pc, #52]	; (10ec <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    10b8:	f002 febc 	bl	3e34 <printf>
    10bc:	4809      	ldr	r0, [pc, #36]	; (10e4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    10be:	f001 fd9d 	bl	2bfc <puts>
    10c2:	2100      	movs	r1, #0
    10c4:	2001      	movs	r0, #1
    10c6:	f7ff fa5b 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    10ca:	e7fe      	b.n	10ca <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    10cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    10ce:	4618      	mov	r0, r3
    10d0:	3734      	adds	r7, #52	; 0x34
    10d2:	46bd      	mov	sp, r7
    10d4:	bd90      	pop	{r4, r7, pc}
    10d6:	bf00      	nop
    10d8:	0000691c 	.word	0x0000691c
    10dc:	00006724 	.word	0x00006724
    10e0:	000063a8 	.word	0x000063a8
    10e4:	00006390 	.word	0x00006390
    10e8:	0000673c 	.word	0x0000673c
    10ec:	00006498 	.word	0x00006498

000010f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    10f0:	b580      	push	{r7, lr}
    10f2:	b086      	sub	sp, #24
    10f4:	af00      	add	r7, sp, #0
    10f6:	60f8      	str	r0, [r7, #12]
    10f8:	60b9      	str	r1, [r7, #8]
    10fa:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    10fc:	2301      	movs	r3, #1
    10fe:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    1100:	687a      	ldr	r2, [r7, #4]
    1102:	68b9      	ldr	r1, [r7, #8]
    1104:	68f8      	ldr	r0, [r7, #12]
    1106:	f7ff ff29 	bl	f5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    110a:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    110c:	2100      	movs	r1, #0
    110e:	68f8      	ldr	r0, [r7, #12]
    1110:	f7ff fdfa 	bl	d08 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    1114:	2100      	movs	r1, #0
    1116:	68f8      	ldr	r0, [r7, #12]
    1118:	f7ff fe1a 	bl	d50 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    111c:	2100      	movs	r1, #0
    111e:	68f8      	ldr	r0, [r7, #12]
    1120:	f7ff fe3a 	bl	d98 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    1124:	2100      	movs	r1, #0
    1126:	68f8      	ldr	r0, [r7, #12]
    1128:	f7ff fe5a 	bl	de0 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    112c:	4b21      	ldr	r3, [pc, #132]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1134:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    1138:	693b      	ldr	r3, [r7, #16]
    113a:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    113c:	4b1d      	ldr	r3, [pc, #116]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    113e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    1140:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    1142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    1146:	4b1b      	ldr	r3, [pc, #108]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    114e:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    1152:	8afb      	ldrh	r3, [r7, #22]
    1154:	015b      	lsls	r3, r3, #5
    1156:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    1158:	4b16      	ldr	r3, [pc, #88]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    115a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    115c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    115e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    1162:	4b14      	ldr	r3, [pc, #80]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    116a:	4b12      	ldr	r3, [pc, #72]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	f042 0201 	orr.w	r2, r2, #1
    1172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    1176:	4b0f      	ldr	r3, [pc, #60]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1178:	681b      	ldr	r3, [r3, #0]
    117a:	22aa      	movs	r2, #170	; 0xaa
    117c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    1180:	4b0c      	ldr	r3, [pc, #48]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	2255      	movs	r2, #85	; 0x55
    1186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    118a:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    118c:	681b      	ldr	r3, [r3, #0]
    118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1192:	210a      	movs	r1, #10
    1194:	4618      	mov	r0, r3
    1196:	f000 ffd8 	bl	214a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    119a:	4603      	mov	r3, r0
    119c:	f083 0301 	eor.w	r3, r3, #1
    11a0:	b2db      	uxtb	r3, r3
    11a2:	2b00      	cmp	r3, #0
    11a4:	d001      	beq.n	11aa <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    11a6:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    11a8:	e7ef      	b.n	118a <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    11aa:	bf00      	nop
    11ac:	3718      	adds	r7, #24
    11ae:	46bd      	mov	sp, r7
    11b0:	bd80      	pop	{r7, pc}
    11b2:	bf00      	nop
    11b4:	10000248 	.word	0x10000248

000011b8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    11b8:	b590      	push	{r4, r7, lr}
    11ba:	b083      	sub	sp, #12
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
    11c0:	460b      	mov	r3, r1
    11c2:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    11c4:	78fb      	ldrb	r3, [r7, #3]
    11c6:	2b1f      	cmp	r3, #31
    11c8:	d90e      	bls.n	11e8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    11ca:	f44f 73a9 	mov.w	r3, #338	; 0x152
    11ce:	4a13      	ldr	r2, [pc, #76]	; (121c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    11d0:	4913      	ldr	r1, [pc, #76]	; (1220 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    11d2:	4814      	ldr	r0, [pc, #80]	; (1224 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    11d4:	f002 fe2e 	bl	3e34 <printf>
    11d8:	4813      	ldr	r0, [pc, #76]	; (1228 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    11da:	f001 fd0f 	bl	2bfc <puts>
    11de:	2100      	movs	r1, #0
    11e0:	2001      	movs	r0, #1
    11e2:	f7ff f9cd 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    11e6:	e7fe      	b.n	11e6 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    11e8:	4b10      	ldr	r3, [pc, #64]	; (122c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    11ea:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    11ec:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    11f0:	4b0e      	ldr	r3, [pc, #56]	; (122c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    11f2:	681c      	ldr	r4, [r3, #0]
    11f4:	4b0e      	ldr	r3, [pc, #56]	; (1230 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    11f6:	78f9      	ldrb	r1, [r7, #3]
    11f8:	781a      	ldrb	r2, [r3, #0]
    11fa:	785b      	ldrb	r3, [r3, #1]
    11fc:	021b      	lsls	r3, r3, #8
    11fe:	431a      	orrs	r2, r3
    1200:	2300      	movs	r3, #0
    1202:	f362 030f 	bfi	r3, r2, #0, #16
    1206:	461a      	mov	r2, r3
    1208:	f000 ff67 	bl	20da <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    120c:	4603      	mov	r3, r0
    120e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    1212:	bf00      	nop
    1214:	370c      	adds	r7, #12
    1216:	46bd      	mov	sp, r7
    1218:	bd90      	pop	{r4, r7, pc}
    121a:	bf00      	nop
    121c:	00006998 	.word	0x00006998
    1220:	00006754 	.word	0x00006754
    1224:	00006540 	.word	0x00006540
    1228:	00006390 	.word	0x00006390
    122c:	10000248 	.word	0x10000248
    1230:	000066fc 	.word	0x000066fc

00001234 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    1234:	b590      	push	{r4, r7, lr}
    1236:	b083      	sub	sp, #12
    1238:	af00      	add	r7, sp, #0
    123a:	6078      	str	r0, [r7, #4]
    123c:	460b      	mov	r3, r1
    123e:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    1240:	4b0c      	ldr	r3, [pc, #48]	; (1274 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1248:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    124a:	4b0a      	ldr	r3, [pc, #40]	; (1274 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    124c:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    124e:	4b0a      	ldr	r3, [pc, #40]	; (1278 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    1250:	781a      	ldrb	r2, [r3, #0]
    1252:	785b      	ldrb	r3, [r3, #1]
    1254:	021b      	lsls	r3, r3, #8
    1256:	431a      	orrs	r2, r3
    1258:	2300      	movs	r3, #0
    125a:	f362 030f 	bfi	r3, r2, #0, #16
    125e:	461a      	mov	r2, r3
    1260:	f000 fff4 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1264:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    1266:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    126a:	bf00      	nop
    126c:	370c      	adds	r7, #12
    126e:	46bd      	mov	sp, r7
    1270:	bd90      	pop	{r4, r7, pc}
    1272:	bf00      	nop
    1274:	10000248 	.word	0x10000248
    1278:	000066f8 	.word	0x000066f8

0000127c <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    127c:	b480      	push	{r7}
    127e:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    1280:	4b02      	ldr	r3, [pc, #8]	; (128c <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    1282:	4618      	mov	r0, r3
    1284:	46bd      	mov	sp, r7
    1286:	f85d 7b04 	ldr.w	r7, [sp], #4
    128a:	4770      	bx	lr
    128c:	1000000c 	.word	0x1000000c

00001290 <sjsu::Uart::Write(unsigned char) const>:
  // ================
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  void Write(uint8_t byte) const
    1290:	b580      	push	{r7, lr}
    1292:	b082      	sub	sp, #8
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
    1298:	460b      	mov	r3, r1
    129a:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	681b      	ldr	r3, [r3, #0]
    12a0:	3308      	adds	r3, #8
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	1cf9      	adds	r1, r7, #3
    12a6:	2201      	movs	r2, #1
    12a8:	6878      	ldr	r0, [r7, #4]
    12aa:	4798      	blx	r3
  }
    12ac:	bf00      	nop
    12ae:	3708      	adds	r7, #8
    12b0:	46bd      	mov	sp, r7
    12b2:	bd80      	pop	{r7, pc}

000012b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
  uint32_t divide_add   = 0;
  uint32_t multiply     = 1;
};

constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    12b4:	b480      	push	{r7}
    12b6:	b089      	sub	sp, #36	; 0x24
    12b8:	af00      	add	r7, sp, #0
    12ba:	6078      	str	r0, [r7, #4]
    12bc:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	2200      	movs	r2, #0
    12c4:	601a      	str	r2, [r3, #0]
    12c6:	687b      	ldr	r3, [r7, #4]
    12c8:	2200      	movs	r2, #0
    12ca:	605a      	str	r2, [r3, #4]
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	2201      	movs	r2, #1
    12d0:	609a      	str	r2, [r3, #8]
  bool finished = false;
    12d2:	2300      	movs	r3, #0
    12d4:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    12d6:	2300      	movs	r3, #0
    12d8:	61bb      	str	r3, [r7, #24]
    12da:	69bb      	ldr	r3, [r7, #24]
    12dc:	2b0e      	cmp	r3, #14
    12de:	dc4f      	bgt.n	1380 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    12e0:	7ffb      	ldrb	r3, [r7, #31]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d14c      	bne.n	1380 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    12e6:	69bb      	ldr	r3, [r7, #24]
    12e8:	3301      	adds	r3, #1
    12ea:	617b      	str	r3, [r7, #20]
    12ec:	697b      	ldr	r3, [r7, #20]
    12ee:	2b0e      	cmp	r3, #14
    12f0:	dc42      	bgt.n	1378 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    12f2:	7ffb      	ldrb	r3, [r7, #31]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d13f      	bne.n	1378 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    12f8:	69bb      	ldr	r3, [r7, #24]
    12fa:	ee07 3a90 	vmov	s15, r3
    12fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1302:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    1306:	697b      	ldr	r3, [r7, #20]
    1308:	ee07 3a90 	vmov	s15, r3
    130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1310:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    1314:	edd7 6a04 	vldr	s13, [r7, #16]
    1318:	ed97 7a03 	vldr	s14, [r7, #12]
    131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1324:	ee77 7a87 	vadd.f32	s15, s15, s14
    1328:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    132c:	edd7 7a02 	vldr	s15, [r7, #8]
    1330:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1390 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1334:	ee77 7a87 	vadd.f32	s15, s15, s14
    1338:	ed97 7a00 	vldr	s14, [r7]
    133c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1344:	d814      	bhi.n	1370 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    1346:	edd7 7a02 	vldr	s15, [r7, #8]
    134a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1390 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    134e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    1352:	ed97 7a00 	vldr	s14, [r7]
    1356:	eeb4 7ae7 	vcmpe.f32	s14, s15
    135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    135e:	db07      	blt.n	1370 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    1360:	69ba      	ldr	r2, [r7, #24]
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    1366:	697a      	ldr	r2, [r7, #20]
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	609a      	str	r2, [r3, #8]
        finished          = true;
    136c:	2301      	movs	r3, #1
    136e:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1370:	697b      	ldr	r3, [r7, #20]
    1372:	3301      	adds	r3, #1
    1374:	617b      	str	r3, [r7, #20]
    1376:	e7b9      	b.n	12ec <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    1378:	69bb      	ldr	r3, [r7, #24]
    137a:	3301      	adds	r3, #1
    137c:	61bb      	str	r3, [r7, #24]
    137e:	e7ac      	b.n	12da <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    1380:	bf00      	nop
}
    1382:	6878      	ldr	r0, [r7, #4]
    1384:	3724      	adds	r7, #36	; 0x24
    1386:	46bd      	mov	sp, r7
    1388:	f85d 7b04 	ldr.w	r7, [sp], #4
    138c:	4770      	bx	lr
    138e:	bf00      	nop
    1390:	3d4ccccd 	.word	0x3d4ccccd

00001394 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:

constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    1394:	b480      	push	{r7}
    1396:	b087      	sub	sp, #28
    1398:	af00      	add	r7, sp, #0
    139a:	ed87 0a03 	vstr	s0, [r7, #12]
    139e:	edc7 0a02 	vstr	s1, [r7, #8]
    13a2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	ee07 3a90 	vmov	s15, r3
    13aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    13ae:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    13b2:	edd7 7a03 	vldr	s15, [r7, #12]
    13b6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    13ba:	ee27 7a87 	vmul.f32	s14, s15, s14
    13be:	edd7 7a02 	vldr	s15, [r7, #8]
    13c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    13c6:	ed97 7a05 	vldr	s14, [r7, #20]
    13ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
    13ce:	eef0 7a66 	vmov.f32	s15, s13
}
    13d2:	eeb0 0a67 	vmov.f32	s0, s15
    13d6:	371c      	adds	r7, #28
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:

constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    13e0:	b480      	push	{r7}
    13e2:	b087      	sub	sp, #28
    13e4:	af00      	add	r7, sp, #0
    13e6:	ed87 0a03 	vstr	s0, [r7, #12]
    13ea:	edc7 0a02 	vstr	s1, [r7, #8]
    13ee:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	ee07 3a90 	vmov	s15, r3
    13f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    13fa:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    13fe:	edd7 7a03 	vldr	s15, [r7, #12]
    1402:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1406:	ee27 7a87 	vmul.f32	s14, s15, s14
    140a:	edd7 7a02 	vldr	s15, [r7, #8]
    140e:	ee67 7a27 	vmul.f32	s15, s14, s15
    1412:	ed97 7a05 	vldr	s14, [r7, #20]
    1416:	eec7 6a27 	vdiv.f32	s13, s14, s15
    141a:	eef0 7a66 	vmov.f32	s15, s13
}
    141e:	eeb0 0a67 	vmov.f32	s0, s15
    1422:	371c      	adds	r7, #28
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <sjsu::lpc40xx::uart::RoundFloat(float)>:

constexpr float RoundFloat(float value)
{
    142c:	b480      	push	{r7}
    142e:	b083      	sub	sp, #12
    1430:	af00      	add	r7, sp, #0
    1432:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    1436:	edd7 7a01 	vldr	s15, [r7, #4]
    143a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    143e:	ee77 7a87 	vadd.f32	s15, s15, s14
    1442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    144a:	eeb0 0a67 	vmov.f32	s0, s15
    144e:	370c      	adds	r7, #12
    1450:	46bd      	mov	sp, r7
    1452:	f85d 7b04 	ldr.w	r7, [sp], #4
    1456:	4770      	bx	lr

00001458 <sjsu::lpc40xx::uart::IsDecmial(float)>:

constexpr bool IsDecmial(float value)
{
    1458:	b580      	push	{r7, lr}
    145a:	b086      	sub	sp, #24
    145c:	af00      	add	r7, sp, #0
    145e:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    1462:	2300      	movs	r3, #0
    1464:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    1466:	ed97 0a01 	vldr	s0, [r7, #4]
    146a:	f7ff ffdf 	bl	142c <sjsu::lpc40xx::uart::RoundFloat(float)>
    146e:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    1472:	ed97 7a01 	vldr	s14, [r7, #4]
    1476:	edd7 7a04 	vldr	s15, [r7, #16]
    147a:	ee77 7a67 	vsub.f32	s15, s14, s15
    147e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    1482:	edd7 7a03 	vldr	s15, [r7, #12]
    1486:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 14b4 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    148a:	eef4 7ac7 	vcmpe.f32	s15, s14
    148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1492:	db0a      	blt.n	14aa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    1494:	edd7 7a03 	vldr	s15, [r7, #12]
    1498:	ed9f 7a07 	vldr	s14, [pc, #28]	; 14b8 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    149c:	eef4 7ac7 	vcmpe.f32	s15, s14
    14a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14a4:	d801      	bhi.n	14aa <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    14a6:	2301      	movs	r3, #1
    14a8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    14aa:	7dfb      	ldrb	r3, [r7, #23]
}
    14ac:	4618      	mov	r0, r3
    14ae:	3718      	adds	r7, #24
    14b0:	46bd      	mov	sp, r7
    14b2:	bd80      	pop	{r7, pc}
    14b4:	bd4ccccd 	.word	0xbd4ccccd
    14b8:	3d4ccccd 	.word	0x3d4ccccd

000014bc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    14bc:	b580      	push	{r7, lr}
    14be:	b082      	sub	sp, #8
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    14c4:	6878      	ldr	r0, [r7, #4]
    14c6:	f000 f805 	bl	14d4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    14ca:	4603      	mov	r3, r0
	}
    14cc:	4618      	mov	r0, r3
    14ce:	3708      	adds	r7, #8
    14d0:	46bd      	mov	sp, r7
    14d2:	bd80      	pop	{r7, pc}

000014d4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	4618      	mov	r0, r3
    14e0:	f7ff fa80 	bl	9e4 <units::linear_scale<float>::operator()() const>
    14e4:	eef0 7a40 	vmov.f32	s15, s0
    14e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    14ec:	ee17 3a90 	vmov	r3, s15
		}
    14f0:	4618      	mov	r0, r3
    14f2:	3708      	adds	r7, #8
    14f4:	46bd      	mov	sp, r7
    14f6:	bd80      	pop	{r7, pc}

000014f8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
  kDone
};

constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    14f8:	b590      	push	{r4, r7, lr}
    14fa:	b091      	sub	sp, #68	; 0x44
    14fc:	af00      	add	r7, sp, #0
    14fe:	61f8      	str	r0, [r7, #28]
    1500:	61b9      	str	r1, [r7, #24]
    1502:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    1504:	f107 0314 	add.w	r3, r7, #20
    1508:	4618      	mov	r0, r3
    150a:	f7ff ffd7 	bl	14bc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    150e:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    1510:	2300      	movs	r3, #0
    1512:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    1514:	69fb      	ldr	r3, [r7, #28]
    1516:	2200      	movs	r2, #0
    1518:	601a      	str	r2, [r3, #0]
    151a:	69fb      	ldr	r3, [r7, #28]
    151c:	2200      	movs	r2, #0
    151e:	605a      	str	r2, [r3, #4]
    1520:	69fb      	ldr	r3, [r7, #28]
    1522:	2201      	movs	r2, #1
    1524:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    1526:	69bb      	ldr	r3, [r7, #24]
    1528:	ee07 3a90 	vmov	s15, r3
    152c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1530:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    1534:	f04f 0300 	mov.w	r3, #0
    1538:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    153a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    153e:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1540:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    1544:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    1546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    154c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    154e:	2b04      	cmp	r3, #4
    1550:	f000 80be 	beq.w	16d0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    1554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1556:	2b03      	cmp	r3, #3
    1558:	f200 80b8 	bhi.w	16cc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    155c:	a201      	add	r2, pc, #4	; (adr r2, 1564 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1562:	bf00      	nop
    1564:	00001575 	.word	0x00001575
    1568:	000015cf 	.word	0x000015cf
    156c:	0000162f 	.word	0x0000162f
    1570:	0000169f 	.word	0x0000169f
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    1574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1576:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    157a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    157e:	f7ff ff09 	bl	1394 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    1582:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    1586:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    158a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    158e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1596:	d505      	bpl.n	15a4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    1598:	69fb      	ldr	r3, [r7, #28]
    159a:	2200      	movs	r2, #0
    159c:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    159e:	2304      	movs	r3, #4
    15a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    15a2:	e094      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    15a4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    15a8:	f7ff ff56 	bl	1458 <sjsu::lpc40xx::uart::IsDecmial(float)>
    15ac:	4603      	mov	r3, r0
    15ae:	2b00      	cmp	r3, #0
    15b0:	d00a      	beq.n	15c8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    15b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    15b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    15ba:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    15be:	69fb      	ldr	r3, [r7, #28]
    15c0:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    15c2:	2304      	movs	r3, #4
    15c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15c6:	e082      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    15c8:	2301      	movs	r3, #1
    15ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    15cc:	e07f      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    15ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    15d0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    15d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    15d8:	f7ff fedc 	bl	1394 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    15dc:	eef0 7a40 	vmov.f32	s15, s0
    15e0:	eeb0 0a67 	vmov.f32	s0, s15
    15e4:	f7ff ff22 	bl	142c <sjsu::lpc40xx::uart::RoundFloat(float)>
    15e8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    15ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    15ee:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    15f2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    15f6:	f7ff fef3 	bl	13e0 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    15fa:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    15fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1602:	ed9f 7a36 	vldr	s14, [pc, #216]	; 16dc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    1606:	eef4 7ac7 	vcmpe.f32	s15, s14
    160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    160e:	db0b      	blt.n	1628 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    1610:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    1614:	ed9f 7a32 	vldr	s14, [pc, #200]	; 16e0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    1618:	eef4 7ac7 	vcmpe.f32	s15, s14
    161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1620:	d802      	bhi.n	1628 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    1622:	2303      	movs	r3, #3
    1624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    1626:	e052      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    1628:	2302      	movs	r3, #2
    162a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    162c:	e04f      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    162e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1636:	ee77 7a87 	vadd.f32	s15, s15, s14
    163a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    163e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1642:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1646:	eef4 7ac7 	vcmpe.f32	s15, s14
    164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    164e:	dd02      	ble.n	1656 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    1650:	2304      	movs	r3, #4
    1652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    1654:	e03b      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    1656:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    165a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    165e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1666:	dd0f      	ble.n	1688 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    1668:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    166c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1670:	ee77 7a87 	vadd.f32	s15, s15, s14
    1674:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    1678:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    167c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1680:	ee77 7a87 	vadd.f32	s15, s15, s14
    1684:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    1688:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    168c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    1690:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1694:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    1698:	2301      	movs	r3, #1
    169a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    169c:	e017      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    169e:	69fc      	ldr	r4, [r7, #28]
    16a0:	463b      	mov	r3, r7
    16a2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    16a6:	4618      	mov	r0, r3
    16a8:	f7ff fe04 	bl	12b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    16ac:	463b      	mov	r3, r7
    16ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    16b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    16b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    16ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    16be:	ee17 2a90 	vmov	r2, s15
    16c2:	69fb      	ldr	r3, [r7, #28]
    16c4:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    16c6:	2304      	movs	r3, #4
    16c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    16ca:	e000      	b.n	16ce <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    16cc:	bf00      	nop
  while (state != States::kDone)
    16ce:	e73d      	b.n	154c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    16d0:	bf00      	nop
}
    16d2:	69f8      	ldr	r0, [r7, #28]
    16d4:	3744      	adds	r7, #68	; 0x44
    16d6:	46bd      	mov	sp, r7
    16d8:	bd90      	pop	{r4, r7, pc}
    16da:	bf00      	nop
    16dc:	3f8ccccd 	.word	0x3f8ccccd
    16e0:	3ff33333 	.word	0x3ff33333

000016e4 <sjsu::Uart::Uart()>:
class Uart
    16e4:	b480      	push	{r7}
    16e6:	b083      	sub	sp, #12
    16e8:	af00      	add	r7, sp, #0
    16ea:	6078      	str	r0, [r7, #4]
    16ec:	4a04      	ldr	r2, [pc, #16]	; (1700 <sjsu::Uart::Uart()+0x1c>)
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	601a      	str	r2, [r3, #0]
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	4618      	mov	r0, r3
    16f6:	370c      	adds	r7, #12
    16f8:	46bd      	mov	sp, r7
    16fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    16fe:	4770      	bx	lr
    1700:	0000683c 	.word	0x0000683c

00001704 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
      .tx_function_id = 0b101,
      .rx_function_id = 0b011,
    };
  };

  explicit constexpr Uart(const Port_t & port,
    1704:	b580      	push	{r7, lr}
    1706:	b084      	sub	sp, #16
    1708:	af00      	add	r7, sp, #0
    170a:	60f8      	str	r0, [r7, #12]
    170c:	60b9      	str	r1, [r7, #8]
    170e:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	4618      	mov	r0, r3
    1714:	f7ff ffe6 	bl	16e4 <sjsu::Uart::Uart()>
    1718:	4a06      	ldr	r2, [pc, #24]	; (1734 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	601a      	str	r2, [r3, #0]
    171e:	68fb      	ldr	r3, [r7, #12]
    1720:	68ba      	ldr	r2, [r7, #8]
    1722:	605a      	str	r2, [r3, #4]
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	687a      	ldr	r2, [r7, #4]
    1728:	609a      	str	r2, [r3, #8]
  {
  }
    172a:	68fb      	ldr	r3, [r7, #12]
    172c:	4618      	mov	r0, r3
    172e:	3710      	adds	r7, #16
    1730:	46bd      	mov	sp, r7
    1732:	bd80      	pop	{r7, pc}
    1734:	00006820 	.word	0x00006820

00001738 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1738:	b580      	push	{r7, lr}
    173a:	b084      	sub	sp, #16
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    1742:	2307      	movs	r3, #7
    1744:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    1746:	687b      	ldr	r3, [r7, #4]
    1748:	6898      	ldr	r0, [r3, #8]
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	689b      	ldr	r3, [r3, #8]
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	3314      	adds	r3, #20
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	687a      	ldr	r2, [r7, #4]
    1756:	6852      	ldr	r2, [r2, #4]
    1758:	3204      	adds	r2, #4
    175a:	4611      	mov	r1, r2
    175c:	4798      	blx	r3

    SetBaudRate(baud_rate);
    175e:	6839      	ldr	r1, [r7, #0]
    1760:	6878      	ldr	r0, [r7, #4]
    1762:	f000 f849 	bl	17f8 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	685b      	ldr	r3, [r3, #4]
    176a:	68d8      	ldr	r0, [r3, #12]
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	685b      	ldr	r3, [r3, #4]
    1770:	68db      	ldr	r3, [r3, #12]
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	681b      	ldr	r3, [r3, #0]
    1776:	687a      	ldr	r2, [r7, #4]
    1778:	6852      	ldr	r2, [r2, #4]
    177a:	7c12      	ldrb	r2, [r2, #16]
    177c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1780:	b2d2      	uxtb	r2, r2
    1782:	4611      	mov	r1, r2
    1784:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	685b      	ldr	r3, [r3, #4]
    178a:	6898      	ldr	r0, [r3, #8]
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	685b      	ldr	r3, [r3, #4]
    1790:	689b      	ldr	r3, [r3, #8]
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	687a      	ldr	r2, [r7, #4]
    1798:	6852      	ldr	r2, [r2, #4]
    179a:	7c12      	ldrb	r2, [r2, #16]
    179c:	f3c2 0202 	ubfx	r2, r2, #0, #3
    17a0:	b2d2      	uxtb	r2, r2
    17a2:	4611      	mov	r1, r2
    17a4:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	685b      	ldr	r3, [r3, #4]
    17aa:	68da      	ldr	r2, [r3, #12]
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	685b      	ldr	r3, [r3, #4]
    17b0:	68db      	ldr	r3, [r3, #12]
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	3304      	adds	r3, #4
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	2102      	movs	r1, #2
    17ba:	4610      	mov	r0, r2
    17bc:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	689a      	ldr	r2, [r3, #8]
    17c4:	687b      	ldr	r3, [r7, #4]
    17c6:	685b      	ldr	r3, [r3, #4]
    17c8:	689b      	ldr	r3, [r3, #8]
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	3304      	adds	r3, #4
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	2102      	movs	r1, #2
    17d2:	4610      	mov	r0, r2
    17d4:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	685b      	ldr	r3, [r3, #4]
    17da:	681b      	ldr	r3, [r3, #0]
    17dc:	7a1b      	ldrb	r3, [r3, #8]
    17de:	b2da      	uxtb	r2, r3
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	685b      	ldr	r3, [r3, #4]
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	f042 0207 	orr.w	r2, r2, #7
    17ea:	b2d2      	uxtb	r2, r2
    17ec:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    17ee:	2300      	movs	r3, #0
  }
    17f0:	4618      	mov	r0, r3
    17f2:	3710      	adds	r7, #16
    17f4:	46bd      	mov	sp, r7
    17f6:	bd80      	pop	{r7, pc}

000017f8 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    17f8:	b580      	push	{r7, lr}
    17fa:	b086      	sub	sp, #24
    17fc:	af00      	add	r7, sp, #0
    17fe:	6078      	str	r0, [r7, #4]
    1800:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	689a      	ldr	r2, [r3, #8]
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	685b      	ldr	r3, [r3, #4]
    180a:	3304      	adds	r3, #4
    180c:	4619      	mov	r1, r3
    180e:	4610      	mov	r0, r2
    1810:	f7ff f921 	bl	a56 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1814:	4602      	mov	r2, r0
    1816:	f107 0308 	add.w	r3, r7, #8
    181a:	6839      	ldr	r1, [r7, #0]
    181c:	4618      	mov	r0, r3
    181e:	f7ff fe6b 	bl	14f8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    1822:	2380      	movs	r3, #128	; 0x80
    1824:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    1826:	68bb      	ldr	r3, [r7, #8]
    1828:	0a1b      	lsrs	r3, r3, #8
    182a:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    182c:	68bb      	ldr	r3, [r7, #8]
    182e:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1830:	693b      	ldr	r3, [r7, #16]
    1832:	b2db      	uxtb	r3, r3
    1834:	011b      	lsls	r3, r3, #4
    1836:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	b2db      	uxtb	r3, r3
    183c:	f003 030f 	and.w	r3, r3, #15
    1840:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    1842:	4313      	orrs	r3, r2
    1844:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	685b      	ldr	r3, [r3, #4]
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	2280      	movs	r2, #128	; 0x80
    184e:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	685b      	ldr	r3, [r3, #4]
    1854:	681b      	ldr	r3, [r3, #0]
    1856:	7dba      	ldrb	r2, [r7, #22]
    1858:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	685b      	ldr	r3, [r3, #4]
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	7d7a      	ldrb	r2, [r7, #21]
    1862:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	685b      	ldr	r3, [r3, #4]
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	7d3a      	ldrb	r2, [r7, #20]
    186c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	685b      	ldr	r3, [r3, #4]
    1874:	681b      	ldr	r3, [r3, #0]
    1876:	2203      	movs	r2, #3
    1878:	731a      	strb	r2, [r3, #12]
    return true;
    187a:	2301      	movs	r3, #1
  }
    187c:	4618      	mov	r0, r3
    187e:	3718      	adds	r7, #24
    1880:	46bd      	mov	sp, r7
    1882:	bd80      	pop	{r7, pc}

00001884 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    1884:	b580      	push	{r7, lr}
    1886:	b086      	sub	sp, #24
    1888:	af00      	add	r7, sp, #0
    188a:	60f8      	str	r0, [r7, #12]
    188c:	60b9      	str	r1, [r7, #8]
    188e:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    1890:	2300      	movs	r3, #0
    1892:	617b      	str	r3, [r7, #20]
    1894:	697a      	ldr	r2, [r7, #20]
    1896:	687b      	ldr	r3, [r7, #4]
    1898:	429a      	cmp	r2, r3
    189a:	d216      	bcs.n	18ca <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    189c:	68ba      	ldr	r2, [r7, #8]
    189e:	697b      	ldr	r3, [r7, #20]
    18a0:	441a      	add	r2, r3
    18a2:	68fb      	ldr	r3, [r7, #12]
    18a4:	685b      	ldr	r3, [r3, #4]
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	7812      	ldrb	r2, [r2, #0]
    18aa:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    18ac:	68f8      	ldr	r0, [r7, #12]
    18ae:	f000 f8b5 	bl	1a1c <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    18b2:	4603      	mov	r3, r0
    18b4:	f083 0301 	eor.w	r3, r3, #1
    18b8:	b2db      	uxtb	r3, r3
    18ba:	2b00      	cmp	r3, #0
    18bc:	d001      	beq.n	18c2 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    18be:	bf00      	nop
      while (!TransmissionComplete())
    18c0:	e7f4      	b.n	18ac <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    18c2:	697b      	ldr	r3, [r7, #20]
    18c4:	3301      	adds	r3, #1
    18c6:	617b      	str	r3, [r7, #20]
    18c8:	e7e4      	b.n	1894 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    18ca:	bf00      	nop
    18cc:	3718      	adds	r7, #24
    18ce:	46bd      	mov	sp, r7
    18d0:	bd80      	pop	{r7, pc}

000018d2 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    18d2:	b590      	push	{r4, r7, lr}
    18d4:	b083      	sub	sp, #12
    18d6:	af00      	add	r7, sp, #0
    18d8:	6078      	str	r0, [r7, #4]
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    18de:	4618      	mov	r0, r3
    18e0:	f000 f88a 	bl	19f8 <sjsu::lpc40xx::Uart::HasData() const>
    18e4:	4603      	mov	r3, r0
    18e6:	2b00      	cmp	r3, #0
    18e8:	d010      	beq.n	190c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    18ee:	685b      	ldr	r3, [r3, #4]
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    18fa:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    18fc:	687b      	ldr	r3, [r7, #4]
    18fe:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    1900:	6813      	ldr	r3, [r2, #0]
    1902:	1c58      	adds	r0, r3, #1
    1904:	6010      	str	r0, [r2, #0]
    1906:	440b      	add	r3, r1
    1908:	4622      	mov	r2, r4
    190a:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    1910:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    1916:	429a      	cmp	r2, r3
    1918:	d301      	bcc.n	191e <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    191a:	2301      	movs	r3, #1
    191c:	e000      	b.n	1920 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    191e:	2300      	movs	r3, #0
    });
    1920:	4618      	mov	r0, r3
    1922:	370c      	adds	r7, #12
    1924:	46bd      	mov	sp, r7
    1926:	bd90      	pop	{r4, r7, pc}

00001928 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    1928:	b590      	push	{r4, r7, lr}
    192a:	b09d      	sub	sp, #116	; 0x74
    192c:	af00      	add	r7, sp, #0
    192e:	6178      	str	r0, [r7, #20]
    1930:	6139      	str	r1, [r7, #16]
    1932:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    1934:	2300      	movs	r3, #0
    1936:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1938:	697b      	ldr	r3, [r7, #20]
    193a:	643b      	str	r3, [r7, #64]	; 0x40
    193c:	f107 0310 	add.w	r3, r7, #16
    1940:	647b      	str	r3, [r7, #68]	; 0x44
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	64bb      	str	r3, [r7, #72]	; 0x48
    1946:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    194a:	64fb      	str	r3, [r7, #76]	; 0x4c
    194c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    1950:	e9c7 3408 	strd	r3, r4, [r7, #32]
    1954:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    1958:	f107 0340 	add.w	r3, r7, #64	; 0x40
    195c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    195e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    1962:	f107 0360 	add.w	r3, r7, #96	; 0x60
    1966:	4618      	mov	r0, r3
    1968:	f000 fb7c 	bl	2064 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    196c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1970:	f107 0320 	add.w	r3, r7, #32
    1974:	4611      	mov	r1, r2
    1976:	4618      	mov	r0, r3
    1978:	f000 fb88 	bl	208c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    197c:	4603      	mov	r3, r0
    197e:	2b00      	cmp	r3, #0
    1980:	d004      	beq.n	198c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    1982:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    1986:	e9c7 3406 	strd	r3, r4, [r7, #24]
    198a:	e011      	b.n	19b0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    198c:	4b19      	ldr	r3, [pc, #100]	; (19f4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    198e:	681b      	ldr	r3, [r3, #0]
    1990:	f107 0258 	add.w	r2, r7, #88	; 0x58
    1994:	4610      	mov	r0, r2
    1996:	4798      	blx	r3
    1998:	463b      	mov	r3, r7
    199a:	f107 0220 	add.w	r2, r7, #32
    199e:	f107 0158 	add.w	r1, r7, #88	; 0x58
    19a2:	4618      	mov	r0, r3
    19a4:	f000 fd1c 	bl	23e0 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    19a8:	e9d7 3400 	ldrd	r3, r4, [r7]
    19ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    19b0:	2301      	movs	r3, #1
    19b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    19b4:	4b0f      	ldr	r3, [pc, #60]	; (19f4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
    19bc:	4610      	mov	r0, r2
    19be:	4798      	blx	r3
    19c0:	f107 0218 	add.w	r2, r7, #24
    19c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
    19c8:	4611      	mov	r1, r2
    19ca:	4618      	mov	r0, r3
    19cc:	f000 fd35 	bl	243a <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    19d0:	4603      	mov	r3, r0
    19d2:	2b00      	cmp	r3, #0
    19d4:	d009      	beq.n	19ea <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    19d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    19da:	4618      	mov	r0, r3
    19dc:	f7ff ff79 	bl	18d2 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    19e0:	4603      	mov	r3, r0
    19e2:	2b00      	cmp	r3, #0
    19e4:	d0e6      	beq.n	19b4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    19e6:	2300      	movs	r3, #0
    19e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    19ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    19ec:	4618      	mov	r0, r3
    19ee:	3774      	adds	r7, #116	; 0x74
    19f0:	46bd      	mov	sp, r7
    19f2:	bd90      	pop	{r4, r7, pc}
    19f4:	10000000 	.word	0x10000000

000019f8 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	685b      	ldr	r3, [r3, #4]
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	7d1b      	ldrb	r3, [r3, #20]
    1a08:	b2db      	uxtb	r3, r3
    1a0a:	2100      	movs	r1, #0
    1a0c:	4618      	mov	r0, r3
    1a0e:	f000 fc2f 	bl	2270 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1a12:	4603      	mov	r3, r0
  }
    1a14:	4618      	mov	r0, r3
    1a16:	3708      	adds	r7, #8
    1a18:	46bd      	mov	sp, r7
    1a1a:	bd80      	pop	{r7, pc}

00001a1c <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  bool TransmissionComplete() const
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	685b      	ldr	r3, [r3, #4]
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	7d1b      	ldrb	r3, [r3, #20]
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	2105      	movs	r1, #5
    1a30:	4618      	mov	r0, r3
    1a32:	f000 fc1d 	bl	2270 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    1a36:	4603      	mov	r3, r0
  }
    1a38:	4618      	mov	r0, r3
    1a3a:	3708      	adds	r7, #8
    1a3c:	46bd      	mov	sp, r7
    1a3e:	bd80      	pop	{r7, pc}

00001a40 <sjsu::lpc40xx::Adc::BurstMode(bool)>:
  /// it's input channels without CPU intervention, meaning that the CPU can
  /// simply read back the value in the conversion register to get the current
  /// converted voltage.
  ///
  /// @param turn_burst_mode_on: if true, will turn on burst mode.
  static void BurstMode(bool turn_burst_mode_on = true)
    1a40:	b590      	push	{r4, r7, lr}
    1a42:	b083      	sub	sp, #12
    1a44:	af00      	add	r7, sp, #0
    1a46:	4603      	mov	r3, r0
    1a48:	71fb      	strb	r3, [r7, #7]
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
    1a4a:	4b0b      	ldr	r3, [pc, #44]	; (1a78 <sjsu::lpc40xx::Adc::BurstMode(bool)+0x38>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	6818      	ldr	r0, [r3, #0]
    adc_base->CR =
    1a50:	4b09      	ldr	r3, [pc, #36]	; (1a78 <sjsu::lpc40xx::Adc::BurstMode(bool)+0x38>)
    1a52:	681c      	ldr	r4, [r3, #0]
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
    1a54:	4b09      	ldr	r3, [pc, #36]	; (1a7c <sjsu::lpc40xx::Adc::BurstMode(bool)+0x3c>)
    1a56:	79f9      	ldrb	r1, [r7, #7]
    1a58:	781a      	ldrb	r2, [r3, #0]
    1a5a:	785b      	ldrb	r3, [r3, #1]
    1a5c:	021b      	lsls	r3, r3, #8
    1a5e:	431a      	orrs	r2, r3
    1a60:	2300      	movs	r3, #0
    1a62:	f362 030f 	bfi	r3, r2, #0, #16
    1a66:	461a      	mov	r2, r3
    1a68:	f000 fc19 	bl	229e <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    1a6c:	4603      	mov	r3, r0
    adc_base->CR =
    1a6e:	6023      	str	r3, [r4, #0]
  }
    1a70:	bf00      	nop
    1a72:	370c      	adds	r7, #12
    1a74:	46bd      	mov	sp, r7
    1a76:	bd90      	pop	{r4, r7, pc}
    1a78:	1000024c 	.word	0x1000024c
    1a7c:	000067a4 	.word	0x000067a4

00001a80 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    1a80:	b580      	push	{r7, lr}
    1a82:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    1a84:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	6818      	ldr	r0, [r3, #0]
    1a8a:	4b08      	ldr	r3, [pc, #32]	; (1aac <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    1a8c:	781a      	ldrb	r2, [r3, #0]
    1a8e:	785b      	ldrb	r3, [r3, #1]
    1a90:	021b      	lsls	r3, r3, #8
    1a92:	431a      	orrs	r2, r3
    1a94:	2300      	movs	r3, #0
    1a96:	f362 030f 	bfi	r3, r2, #0, #16
    1a9a:	4619      	mov	r1, r3
    1a9c:	f000 fc12 	bl	22c4 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1aa0:	4603      	mov	r3, r0
  }
    1aa2:	4618      	mov	r0, r3
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	bf00      	nop
    1aa8:	1000024c 	.word	0x1000024c
    1aac:	000067a4 	.word	0x000067a4

00001ab0 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    1ab0:	b480      	push	{r7}
    1ab2:	b083      	sub	sp, #12
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
    1ab8:	4a04      	ldr	r2, [pc, #16]	; (1acc <sjsu::Adc::Adc()+0x1c>)
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	601a      	str	r2, [r3, #0]
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	4618      	mov	r0, r3
    1ac2:	370c      	adds	r7, #12
    1ac4:	46bd      	mov	sp, r7
    1ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1aca:	4770      	bx	lr
    1acc:	0000680c 	.word	0x0000680c

00001ad0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b084      	sub	sp, #16
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	60f8      	str	r0, [r7, #12]
    1ad8:	60b9      	str	r1, [r7, #8]
    1ada:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1adc:	68fb      	ldr	r3, [r7, #12]
    1ade:	4618      	mov	r0, r3
    1ae0:	f7ff ffe6 	bl	1ab0 <sjsu::Adc::Adc()>
    1ae4:	4a06      	ldr	r2, [pc, #24]	; (1b00 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	601a      	str	r2, [r3, #0]
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	68ba      	ldr	r2, [r7, #8]
    1aee:	605a      	str	r2, [r3, #4]
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	687a      	ldr	r2, [r7, #4]
    1af4:	609a      	str	r2, [r3, #8]
  {
  }
    1af6:	68fb      	ldr	r3, [r7, #12]
    1af8:	4618      	mov	r0, r3
    1afa:	3710      	adds	r7, #16
    1afc:	46bd      	mov	sp, r7
    1afe:	bd80      	pop	{r7, pc}
    1b00:	000067f8 	.word	0x000067f8

00001b04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1b04:	b580      	push	{r7, lr}
    1b06:	ed2d 8b02 	vpush	{d8}
    1b0a:	b084      	sub	sp, #16
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	6078      	str	r0, [r7, #4]
    1b10:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	4618      	mov	r0, r3
    1b16:	f7fe ff65 	bl	9e4 <units::linear_scale<float>::operator()() const>
    1b1a:	eeb0 8a40 	vmov.f32	s16, s0
    1b1e:	683b      	ldr	r3, [r7, #0]
    1b20:	4618      	mov	r0, r3
    1b22:	f7fe ff5f 	bl	9e4 <units::linear_scale<float>::operator()() const>
    1b26:	eef0 7a40 	vmov.f32	s15, s0
    1b2a:	edc7 7a03 	vstr	s15, [r7, #12]
    1b2e:	f107 030c 	add.w	r3, r7, #12
    1b32:	4618      	mov	r0, r3
    1b34:	f7fe fc8b 	bl	44e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1b38:	eeb0 7a40 	vmov.f32	s14, s0
    1b3c:	eec8 7a07 	vdiv.f32	s15, s16, s14
    1b40:	f107 0308 	add.w	r3, r7, #8
    1b44:	eeb0 0a67 	vmov.f32	s0, s15
    1b48:	4618      	mov	r0, r3
    1b4a:	f7fe ff5a 	bl	a02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1b4e:	68bb      	ldr	r3, [r7, #8]
	}
    1b50:	4618      	mov	r0, r3
    1b52:	3710      	adds	r7, #16
    1b54:	46bd      	mov	sp, r7
    1b56:	ecbd 8b02 	vpop	{d8}
    1b5a:	bd80      	pop	{r7, pc}

00001b5c <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b086      	sub	sp, #24
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	689a      	ldr	r2, [r3, #8]
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	3314      	adds	r3, #20
    1b70:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    1b72:	493c      	ldr	r1, [pc, #240]	; (1c64 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1b74:	4610      	mov	r0, r2
    1b76:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	685b      	ldr	r3, [r3, #4]
    1b7c:	6818      	ldr	r0, [r3, #0]
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	685b      	ldr	r3, [r3, #4]
    1b82:	681b      	ldr	r3, [r3, #0]
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	687a      	ldr	r2, [r7, #4]
    1b8a:	6852      	ldr	r2, [r2, #4]
    1b8c:	7912      	ldrb	r2, [r2, #4]
    1b8e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1b92:	b2d2      	uxtb	r2, r2
    1b94:	4611      	mov	r1, r2
    1b96:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	685b      	ldr	r3, [r3, #4]
    1b9c:	681a      	ldr	r2, [r3, #0]
    1b9e:	687b      	ldr	r3, [r7, #4]
    1ba0:	685b      	ldr	r3, [r3, #4]
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	3304      	adds	r3, #4
    1ba8:	681b      	ldr	r3, [r3, #0]
    1baa:	2100      	movs	r1, #0
    1bac:	4610      	mov	r0, r2
    1bae:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	685b      	ldr	r3, [r3, #4]
    1bb4:	681a      	ldr	r2, [r3, #0]
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	685b      	ldr	r3, [r3, #4]
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	681b      	ldr	r3, [r3, #0]
    1bbe:	330c      	adds	r3, #12
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	2101      	movs	r1, #1
    1bc4:	4610      	mov	r0, r2
    1bc6:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    1bcc:	4925      	ldr	r1, [pc, #148]	; (1c64 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1bce:	4618      	mov	r0, r3
    1bd0:	f7fe ff41 	bl	a56 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1bd4:	4603      	mov	r3, r0
    1bd6:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1bd8:	f107 0308 	add.w	r3, r7, #8
    1bdc:	4922      	ldr	r1, [pc, #136]	; (1c68 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    1bde:	4618      	mov	r0, r3
    1be0:	f7ff ff90 	bl	1b04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1be4:	4603      	mov	r3, r0
    1be6:	60fb      	str	r3, [r7, #12]
    1be8:	f107 030c 	add.w	r3, r7, #12
    1bec:	4618      	mov	r0, r3
    1bee:	f7fe ff19 	bl	a24 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1bf2:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1bf4:	4b1d      	ldr	r3, [pc, #116]	; (1c6c <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    1bfc:	4b1c      	ldr	r3, [pc, #112]	; (1c70 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    1bfe:	781a      	ldrb	r2, [r3, #0]
    1c00:	785b      	ldrb	r3, [r3, #1]
    1c02:	021b      	lsls	r3, r3, #8
    1c04:	431a      	orrs	r2, r3
    1c06:	2300      	movs	r3, #0
    1c08:	f362 030f 	bfi	r3, r2, #0, #16
    1c0c:	4619      	mov	r1, r3
    1c0e:	6978      	ldr	r0, [r7, #20]
    1c10:	f000 fb67 	bl	22e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1c14:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    1c16:	4b17      	ldr	r3, [pc, #92]	; (1c74 <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    1c18:	781a      	ldrb	r2, [r3, #0]
    1c1a:	785b      	ldrb	r3, [r3, #1]
    1c1c:	021b      	lsls	r3, r3, #8
    1c1e:	431a      	orrs	r2, r3
    1c20:	2300      	movs	r3, #0
    1c22:	f362 030f 	bfi	r3, r2, #0, #16
    1c26:	461a      	mov	r2, r3
    1c28:	6939      	ldr	r1, [r7, #16]
    1c2a:	6978      	ldr	r0, [r7, #20]
    1c2c:	f000 fb0e 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1c30:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    1c32:	f7ff ff25 	bl	1a80 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1c36:	4603      	mov	r3, r0
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d00a      	beq.n	1c52 <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	685b      	ldr	r3, [r3, #4]
    1c40:	791b      	ldrb	r3, [r3, #4]
    1c42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1c46:	b2db      	uxtb	r3, r3
    1c48:	4619      	mov	r1, r3
    1c4a:	6978      	ldr	r0, [r7, #20]
    1c4c:	f000 fa6b 	bl	2126 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1c50:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	697a      	ldr	r2, [r7, #20]
    1c58:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    1c5a:	2300      	movs	r3, #0
  }
    1c5c:	4618      	mov	r0, r3
    1c5e:	3718      	adds	r7, #24
    1c60:	46bd      	mov	sp, r7
    1c62:	bd80      	pop	{r7, pc}
    1c64:	000066ec 	.word	0x000066ec
    1c68:	000067c8 	.word	0x000067c8
    1c6c:	1000024c 	.word	0x1000024c
    1c70:	000067a8 	.word	0x000067a8
    1c74:	000067a0 	.word	0x000067a0

00001c78 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1c78:	b580      	push	{r7, lr}
    1c7a:	b084      	sub	sp, #16
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1c80:	6878      	ldr	r0, [r7, #4]
    1c82:	f000 f851 	bl	1d28 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1c86:	4b0e      	ldr	r3, [pc, #56]	; (1cc0 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	687a      	ldr	r2, [r7, #4]
    1c8c:	6852      	ldr	r2, [r2, #4]
    1c8e:	7912      	ldrb	r2, [r2, #4]
    1c90:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1c94:	b2d2      	uxtb	r2, r2
    1c96:	3204      	adds	r2, #4
    1c98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1c9c:	4b09      	ldr	r3, [pc, #36]	; (1cc4 <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1c9e:	781a      	ldrb	r2, [r3, #0]
    1ca0:	785b      	ldrb	r3, [r3, #1]
    1ca2:	021b      	lsls	r3, r3, #8
    1ca4:	431a      	orrs	r2, r3
    1ca6:	2300      	movs	r3, #0
    1ca8:	f362 030f 	bfi	r3, r2, #0, #16
    1cac:	4619      	mov	r1, r3
    1cae:	f000 fb27 	bl	2300 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1cb2:	60f8      	str	r0, [r7, #12]
    return result;
    1cb4:	68fb      	ldr	r3, [r7, #12]
  }
    1cb6:	4618      	mov	r0, r3
    1cb8:	3710      	adds	r7, #16
    1cba:	46bd      	mov	sp, r7
    1cbc:	bd80      	pop	{r7, pc}
    1cbe:	bf00      	nop
    1cc0:	1000024c 	.word	0x1000024c
    1cc4:	000067b0 	.word	0x000067b0

00001cc8 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1cd0:	230c      	movs	r3, #12
  }
    1cd2:	4618      	mov	r0, r3
    1cd4:	370c      	adds	r7, #12
    1cd6:	46bd      	mov	sp, r7
    1cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cdc:	4770      	bx	lr
    1cde:	Address 0x0000000000001cde is out of bounds.


00001ce0 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1ce8:	4b0d      	ldr	r3, [pc, #52]	; (1d20 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	687a      	ldr	r2, [r7, #4]
    1cee:	6852      	ldr	r2, [r2, #4]
    1cf0:	7912      	ldrb	r2, [r2, #4]
    1cf2:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1cf6:	b2d2      	uxtb	r2, r2
    1cf8:	3204      	adds	r2, #4
    1cfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1cfe:	4b09      	ldr	r3, [pc, #36]	; (1d24 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1d00:	781a      	ldrb	r2, [r3, #0]
    1d02:	785b      	ldrb	r3, [r3, #1]
    1d04:	021b      	lsls	r3, r3, #8
    1d06:	431a      	orrs	r2, r3
    1d08:	2300      	movs	r3, #0
    1d0a:	f362 030f 	bfi	r3, r2, #0, #16
    1d0e:	4619      	mov	r1, r3
    1d10:	f000 fad8 	bl	22c4 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1d14:	4603      	mov	r3, r0
  }
    1d16:	4618      	mov	r0, r3
    1d18:	3708      	adds	r7, #8
    1d1a:	46bd      	mov	sp, r7
    1d1c:	bd80      	pop	{r7, pc}
    1d1e:	bf00      	nop
    1d20:	1000024c 	.word	0x1000024c
    1d24:	000067b4 	.word	0x000067b4

00001d28 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1d28:	b590      	push	{r4, r7, lr}
    1d2a:	b085      	sub	sp, #20
    1d2c:	af00      	add	r7, sp, #0
    1d2e:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1d30:	f7ff fea6 	bl	1a80 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1d34:	4603      	mov	r3, r0
    1d36:	2b00      	cmp	r3, #0
    1d38:	d013      	beq.n	1d62 <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1d3a:	4b29      	ldr	r3, [pc, #164]	; (1de0 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	6818      	ldr	r0, [r3, #0]
    1d40:	4b27      	ldr	r3, [pc, #156]	; (1de0 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1d42:	681c      	ldr	r4, [r3, #0]
    1d44:	4b27      	ldr	r3, [pc, #156]	; (1de4 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1d46:	781a      	ldrb	r2, [r3, #0]
    1d48:	785b      	ldrb	r3, [r3, #1]
    1d4a:	021b      	lsls	r3, r3, #8
    1d4c:	431a      	orrs	r2, r3
    1d4e:	2300      	movs	r3, #0
    1d50:	f362 030f 	bfi	r3, r2, #0, #16
    1d54:	461a      	mov	r2, r3
    1d56:	2100      	movs	r1, #0
    1d58:	f000 fae3 	bl	2322 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1d5c:	4603      	mov	r3, r0
    1d5e:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1d60:	e03a      	b.n	1dd8 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	685b      	ldr	r3, [r3, #4]
    1d66:	791b      	ldrb	r3, [r3, #4]
    1d68:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d6c:	b2db      	uxtb	r3, r3
    1d6e:	461a      	mov	r2, r3
    1d70:	2301      	movs	r3, #1
    1d72:	4093      	lsls	r3, r2
    1d74:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1d76:	4b1a      	ldr	r3, [pc, #104]	; (1de0 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1d78:	681b      	ldr	r3, [r3, #0]
    1d7a:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1d7c:	4b18      	ldr	r3, [pc, #96]	; (1de0 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1d7e:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1d80:	4b19      	ldr	r3, [pc, #100]	; (1de8 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1d82:	781a      	ldrb	r2, [r3, #0]
    1d84:	785b      	ldrb	r3, [r3, #1]
    1d86:	021b      	lsls	r3, r3, #8
    1d88:	431a      	orrs	r2, r3
    1d8a:	2300      	movs	r3, #0
    1d8c:	f362 030f 	bfi	r3, r2, #0, #16
    1d90:	461a      	mov	r2, r3
    1d92:	68f9      	ldr	r1, [r7, #12]
    1d94:	f000 fa5a 	bl	224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1d98:	4603      	mov	r3, r0
      adc_base->CR =
    1d9a:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1d9c:	4b10      	ldr	r3, [pc, #64]	; (1de0 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	6818      	ldr	r0, [r3, #0]
    1da2:	4b0f      	ldr	r3, [pc, #60]	; (1de0 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1da4:	681c      	ldr	r4, [r3, #0]
    1da6:	4b0f      	ldr	r3, [pc, #60]	; (1de4 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1da8:	781a      	ldrb	r2, [r3, #0]
    1daa:	785b      	ldrb	r3, [r3, #1]
    1dac:	021b      	lsls	r3, r3, #8
    1dae:	431a      	orrs	r2, r3
    1db0:	2300      	movs	r3, #0
    1db2:	f362 030f 	bfi	r3, r2, #0, #16
    1db6:	461a      	mov	r2, r3
    1db8:	2101      	movs	r1, #1
    1dba:	f000 fab2 	bl	2322 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1dbe:	4603      	mov	r3, r0
    1dc0:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1dc2:	6878      	ldr	r0, [r7, #4]
    1dc4:	f7ff ff8c 	bl	1ce0 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1dc8:	4603      	mov	r3, r0
    1dca:	f083 0301 	eor.w	r3, r3, #1
    1dce:	b2db      	uxtb	r3, r3
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d001      	beq.n	1dd8 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1dd4:	bf00      	nop
      while (!HasConversionFinished())
    1dd6:	e7f4      	b.n	1dc2 <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1dd8:	bf00      	nop
    1dda:	3714      	adds	r7, #20
    1ddc:	46bd      	mov	sp, r7
    1dde:	bd90      	pop	{r4, r7, pc}
    1de0:	1000024c 	.word	0x1000024c
    1de4:	000067ac 	.word	0x000067ac
    1de8:	0000679c 	.word	0x0000679c

00001dec <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    1dec:	b580      	push	{r7, lr}
    1dee:	b082      	sub	sp, #8
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	4618      	mov	r0, r3
    1df8:	f000 f804 	bl	1e04 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>
    1dfc:	6878      	ldr	r0, [r7, #4]
    1dfe:	3708      	adds	r7, #8
    1e00:	46bd      	mov	sp, r7
    1e02:	bd80      	pop	{r7, pc}

00001e04 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    1e04:	b580      	push	{r7, lr}
    1e06:	b082      	sub	sp, #8
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    1e0c:	4903      	ldr	r1, [pc, #12]	; (1e1c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49, (char)48, (char)48>()+0x18>)
    1e0e:	6878      	ldr	r0, [r7, #4]
    1e10:	f7fe fe49 	bl	aa6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    1e14:	6878      	ldr	r0, [r7, #4]
    1e16:	3708      	adds	r7, #8
    1e18:	46bd      	mov	sp, r7
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	00006160 	.word	0x00006160

00001e20 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    1e20:	b580      	push	{r7, lr}
    1e22:	b082      	sub	sp, #8
    1e24:	af00      	add	r7, sp, #0
    1e26:	6078      	str	r0, [r7, #4]
    1e28:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	6839      	ldr	r1, [r7, #0]
    1e2e:	4618      	mov	r0, r3
    1e30:	f000 f804 	bl	1e3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    1e34:	6878      	ldr	r0, [r7, #4]
    1e36:	3708      	adds	r7, #8
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd80      	pop	{r7, pc}

00001e3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    1e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3e:	b085      	sub	sp, #20
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
    1e44:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    1e46:	6838      	ldr	r0, [r7, #0]
    1e48:	f7fe fe3e 	bl	ac8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    1e4c:	4605      	mov	r5, r0
    1e4e:	460e      	mov	r6, r1
    1e50:	462b      	mov	r3, r5
    1e52:	4634      	mov	r4, r6
    1e54:	f04f 0100 	mov.w	r1, #0
    1e58:	f04f 0200 	mov.w	r2, #0
    1e5c:	0162      	lsls	r2, r4, #5
    1e5e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    1e62:	0159      	lsls	r1, r3, #5
    1e64:	460b      	mov	r3, r1
    1e66:	4614      	mov	r4, r2
    1e68:	1b5b      	subs	r3, r3, r5
    1e6a:	eb64 0406 	sbc.w	r4, r4, r6
    1e6e:	f04f 0100 	mov.w	r1, #0
    1e72:	f04f 0200 	mov.w	r2, #0
    1e76:	00a2      	lsls	r2, r4, #2
    1e78:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    1e7c:	0099      	lsls	r1, r3, #2
    1e7e:	460b      	mov	r3, r1
    1e80:	4614      	mov	r4, r2
    1e82:	195b      	adds	r3, r3, r5
    1e84:	eb44 0406 	adc.w	r4, r4, r6
    1e88:	f04f 0100 	mov.w	r1, #0
    1e8c:	f04f 0200 	mov.w	r2, #0
    1e90:	00e2      	lsls	r2, r4, #3
    1e92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    1e96:	00d9      	lsls	r1, r3, #3
    1e98:	460b      	mov	r3, r1
    1e9a:	4614      	mov	r4, r2
    1e9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    1ea0:	f107 0308 	add.w	r3, r7, #8
    1ea4:	4619      	mov	r1, r3
    1ea6:	6878      	ldr	r0, [r7, #4]
    1ea8:	f7fe fbbc 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    1eac:	6878      	ldr	r0, [r7, #4]
    1eae:	3714      	adds	r7, #20
    1eb0:	46bd      	mov	sp, r7
    1eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001eb4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    1eb4:	b590      	push	{r4, r7, lr}
    1eb6:	b085      	sub	sp, #20
    1eb8:	af00      	add	r7, sp, #0
    1eba:	6078      	str	r0, [r7, #4]
    1ebc:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    1ebe:	f107 0308 	add.w	r3, r7, #8
    1ec2:	6839      	ldr	r1, [r7, #0]
    1ec4:	4618      	mov	r0, r3
    1ec6:	f7ff ffab 	bl	1e20 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1eca:	f107 0308 	add.w	r3, r7, #8
    1ece:	4618      	mov	r0, r3
    1ed0:	f7fe fdb4 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1ed4:	4603      	mov	r3, r0
    1ed6:	460c      	mov	r4, r1
    1ed8:	687a      	ldr	r2, [r7, #4]
    1eda:	e9c2 3400 	strd	r3, r4, [r2]
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	4618      	mov	r0, r3
    1ee2:	3714      	adds	r7, #20
    1ee4:	46bd      	mov	sp, r7
    1ee6:	bd90      	pop	{r4, r7, pc}

00001ee8 <main>:
#include "utility/log.hpp"
#include "utility/map.hpp"
#include "utility/time.hpp"

int main()
{
    1ee8:	b590      	push	{r4, r7, lr}
    1eea:	b093      	sub	sp, #76	; 0x4c
    1eec:	af02      	add	r7, sp, #8
                              DefaultSystemController())
    1eee:	f7ff f9c5 	bl	127c <sjsu::lpc40xx::DefaultSystemController()>
    1ef2:	4603      	mov	r3, r0
    float f;
    uint32_t ui;
  }sen;

  // Declare peripheral objects
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    1ef4:	461a      	mov	r2, r3
    1ef6:	f107 0310 	add.w	r3, r7, #16
    1efa:	493d      	ldr	r1, [pc, #244]	; (1ff0 <main+0x108>)
    1efc:	4618      	mov	r0, r3
    1efe:	f7ff fc01 	bl	1704 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
                             DefaultSystemController())
    1f02:	f7ff f9bb 	bl	127c <sjsu::lpc40xx::DefaultSystemController()>
    1f06:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    1f08:	461a      	mov	r2, r3
    1f0a:	1d3b      	adds	r3, r7, #4
    1f0c:	4939      	ldr	r1, [pc, #228]	; (1ff4 <main+0x10c>)
    1f0e:	4618      	mov	r0, r3
    1f10:	f7ff fdde 	bl	1ad0 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>

  adc2.Initialize();
    1f14:	1d3b      	adds	r3, r7, #4
    1f16:	4618      	mov	r0, r3
    1f18:	f7ff fe20 	bl	1b5c <sjsu::lpc40xx::Adc::Initialize() const>
  adc2.BurstMode(true);
    1f1c:	2001      	movs	r0, #1
    1f1e:	f7ff fd8f 	bl	1a40 <sjsu::lpc40xx::Adc::BurstMode(bool)>
  LOG_INFO("adc2 initialized");
    1f22:	231c      	movs	r3, #28
    1f24:	4a34      	ldr	r2, [pc, #208]	; (1ff8 <main+0x110>)
    1f26:	4935      	ldr	r1, [pc, #212]	; (1ffc <main+0x114>)
    1f28:	4835      	ldr	r0, [pc, #212]	; (2000 <main+0x118>)
    1f2a:	f001 ff83 	bl	3e34 <printf>
  uart2.Initialize(38400);
    1f2e:	f107 0310 	add.w	r3, r7, #16
    1f32:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    1f36:	4618      	mov	r0, r3
    1f38:	f7ff fbfe 	bl	1738 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    1f3c:	231e      	movs	r3, #30
    1f3e:	4a2e      	ldr	r2, [pc, #184]	; (1ff8 <main+0x110>)
    1f40:	4930      	ldr	r1, [pc, #192]	; (2004 <main+0x11c>)
    1f42:	4831      	ldr	r0, [pc, #196]	; (2008 <main+0x120>)
    1f44:	f001 ff76 	bl	3e34 <printf>
  uint32_t glove_position = 0;
    1f48:	2300      	movs	r3, #0
    1f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  //uint32_t LA_position = 0;

  while (true)
  {
    glove_position = adc2.Read();
    1f4c:	1d3b      	adds	r3, r7, #4
    1f4e:	4618      	mov	r0, r3
    1f50:	f7ff fe92 	bl	1c78 <sjsu::lpc40xx::Adc::Read() const>
    1f54:	63b8      	str	r0, [r7, #56]	; 0x38
    // Map the data from the glove and Liinear Actuator to proper voltages
    sen.f = sjsu::Map(glove_position, 0, 4095, 0.0f, 3.3f);
    1f56:	eddf 0a2d 	vldr	s1, [pc, #180]	; 200c <main+0x124>
    1f5a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 2010 <main+0x128>
    1f5e:	f640 72ff 	movw	r2, #4095	; 0xfff
    1f62:	2100      	movs	r1, #0
    1f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1f66:	f000 f9ee 	bl	2346 <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>
    1f6a:	eef0 7a40 	vmov.f32	s15, s0
    1f6e:	edc7 7a07 	vstr	s15, [r7, #28]
    // Send a float (Glove data) over UART
    for(size_t i = 24; i > 0; i -= 8)
    1f72:	2318      	movs	r3, #24
    1f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d011      	beq.n	1fa0 <main+0xb8>
    {
      uint8_t sendval = sen.ui >> i; 
    1f7c:	69fa      	ldr	r2, [r7, #28]
    1f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f80:	fa22 f303 	lsr.w	r3, r2, r3
    1f84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      uart2.Write(sendval);
    1f88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
    1f8c:	f107 0310 	add.w	r3, r7, #16
    1f90:	4611      	mov	r1, r2
    1f92:	4618      	mov	r0, r3
    1f94:	f7ff f97c 	bl	1290 <sjsu::Uart::Write(unsigned char) const>
    for(size_t i = 24; i > 0; i -= 8)
    1f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f9a:	3b08      	subs	r3, #8
    1f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f9e:	e7ea      	b.n	1f76 <main+0x8e>
    }
    uart2.Write((uint8_t) sen.ui);
    1fa0:	69fb      	ldr	r3, [r7, #28]
    1fa2:	b2da      	uxtb	r2, r3
    1fa4:	f107 0310 	add.w	r3, r7, #16
    1fa8:	4611      	mov	r1, r2
    1faa:	4618      	mov	r0, r3
    1fac:	f7ff f970 	bl	1290 <sjsu::Uart::Write(unsigned char) const>
    LOG_INFO("Sent value %f over UART", sen.f);
    1fb0:	69fb      	ldr	r3, [r7, #28]
    1fb2:	4618      	mov	r0, r3
    1fb4:	f002 fd8c 	bl	4ad0 <__aeabi_f2d>
    1fb8:	4603      	mov	r3, r0
    1fba:	460c      	mov	r4, r1
    1fbc:	e9cd 3400 	strd	r3, r4, [sp]
    1fc0:	232e      	movs	r3, #46	; 0x2e
    1fc2:	4a0d      	ldr	r2, [pc, #52]	; (1ff8 <main+0x110>)
    1fc4:	4913      	ldr	r1, [pc, #76]	; (2014 <main+0x12c>)
    1fc6:	4814      	ldr	r0, [pc, #80]	; (2018 <main+0x130>)
    1fc8:	f001 ff34 	bl	3e34 <printf>
    // Delay 100 ms
    sjsu::Delay(100ms);
    1fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    1fd0:	4618      	mov	r0, r3
    1fd2:	f7ff ff0b 	bl	1dec <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49, (char)48, (char)48>()>
    1fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1fda:	f107 0320 	add.w	r3, r7, #32
    1fde:	4611      	mov	r1, r2
    1fe0:	4618      	mov	r0, r3
    1fe2:	f7ff ff67 	bl	1eb4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1fe6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    1fea:	f7fe fba7 	bl	73c <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
    1fee:	e7ad      	b.n	1f4c <main+0x64>
    1ff0:	10000010 	.word	0x10000010
    1ff4:	000067c0 	.word	0x000067c0
    1ff8:	0000688c 	.word	0x0000688c
    1ffc:	000067cc 	.word	0x000067cc
    2000:	000065dc 	.word	0x000065dc
    2004:	000067d8 	.word	0x000067d8
    2008:	00006628 	.word	0x00006628
    200c:	40533333 	.word	0x40533333
    2010:	00000000 	.word	0x00000000
    2014:	000067e4 	.word	0x000067e4
    2018:	00006674 	.word	0x00006674

0000201c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    201c:	b590      	push	{r4, r7, lr}
    201e:	b087      	sub	sp, #28
    2020:	af00      	add	r7, sp, #0
    2022:	60f8      	str	r0, [r7, #12]
    2024:	60b9      	str	r1, [r7, #8]
    2026:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    2028:	68bb      	ldr	r3, [r7, #8]
    202a:	e9d3 3400 	ldrd	r3, r4, [r3]
    202e:	1c59      	adds	r1, r3, #1
    2030:	f144 0200 	adc.w	r2, r4, #0
    2034:	68b8      	ldr	r0, [r7, #8]
    2036:	e9c0 1200 	strd	r1, r2, [r0]
    203a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    203e:	f107 0310 	add.w	r3, r7, #16
    2042:	4619      	mov	r1, r3
    2044:	68f8      	ldr	r0, [r7, #12]
    2046:	f7fe faed 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    204a:	68f8      	ldr	r0, [r7, #12]
    204c:	371c      	adds	r7, #28
    204e:	46bd      	mov	sp, r7
    2050:	bd90      	pop	{r4, r7, pc}

00002052 <std::chrono::duration_values<long long>::max()>:
	max()
    2052:	b598      	push	{r3, r4, r7, lr}
    2054:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    2056:	f7fe f987 	bl	368 <std::numeric_limits<long long>::max()>
    205a:	4603      	mov	r3, r0
    205c:	460c      	mov	r4, r1
    205e:	4618      	mov	r0, r3
    2060:	4621      	mov	r1, r4
    2062:	bd98      	pop	{r3, r4, r7, pc}

00002064 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
    2064:	b590      	push	{r4, r7, lr}
    2066:	b085      	sub	sp, #20
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    206c:	f7ff fff1 	bl	2052 <std::chrono::duration_values<long long>::max()>
    2070:	4603      	mov	r3, r0
    2072:	460c      	mov	r4, r1
    2074:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2078:	f107 0308 	add.w	r3, r7, #8
    207c:	4619      	mov	r1, r3
    207e:	6878      	ldr	r0, [r7, #4]
    2080:	f7fe fad0 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    2084:	6878      	ldr	r0, [r7, #4]
    2086:	3714      	adds	r7, #20
    2088:	46bd      	mov	sp, r7
    208a:	bd90      	pop	{r4, r7, pc}

0000208c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    208c:	b5f0      	push	{r4, r5, r6, r7, lr}
    208e:	b087      	sub	sp, #28
    2090:	af00      	add	r7, sp, #0
    2092:	6078      	str	r0, [r7, #4]
    2094:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	e9d3 3400 	ldrd	r3, r4, [r3]
    209c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    20a0:	f107 0308 	add.w	r3, r7, #8
    20a4:	4618      	mov	r0, r3
    20a6:	f7fe fcc9 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    20aa:	4605      	mov	r5, r0
    20ac:	460e      	mov	r6, r1
    20ae:	683b      	ldr	r3, [r7, #0]
    20b0:	e9d3 3400 	ldrd	r3, r4, [r3]
    20b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    20b8:	f107 0310 	add.w	r3, r7, #16
    20bc:	4618      	mov	r0, r3
    20be:	f7fe fcbd 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    20c2:	4603      	mov	r3, r0
    20c4:	460c      	mov	r4, r1
    20c6:	42a6      	cmp	r6, r4
    20c8:	bf06      	itte	eq
    20ca:	429d      	cmpeq	r5, r3
    20cc:	2301      	moveq	r3, #1
    20ce:	2300      	movne	r3, #0
    20d0:	b2db      	uxtb	r3, r3
      }
    20d2:	4618      	mov	r0, r3
    20d4:	371c      	adds	r7, #28
    20d6:	46bd      	mov	sp, r7
    20d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000020da <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    20da:	b580      	push	{r7, lr}
    20dc:	b084      	sub	sp, #16
    20de:	af00      	add	r7, sp, #0
    20e0:	60f8      	str	r0, [r7, #12]
    20e2:	460b      	mov	r3, r1
    20e4:	80ba      	strh	r2, [r7, #4]
    20e6:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    20e8:	793b      	ldrb	r3, [r7, #4]
    20ea:	461a      	mov	r2, r3
    20ec:	797b      	ldrb	r3, [r7, #5]
    20ee:	7af9      	ldrb	r1, [r7, #11]
    20f0:	68f8      	ldr	r0, [r7, #12]
    20f2:	f000 f9ca 	bl	248a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    20f6:	4603      	mov	r3, r0
}
    20f8:	4618      	mov	r0, r3
    20fa:	3710      	adds	r7, #16
    20fc:	46bd      	mov	sp, r7
    20fe:	bd80      	pop	{r7, pc}

00002100 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    2100:	b480      	push	{r7}
    2102:	b083      	sub	sp, #12
    2104:	af00      	add	r7, sp, #0
    2106:	6078      	str	r0, [r7, #4]
    2108:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    210a:	2201      	movs	r2, #1
    210c:	683b      	ldr	r3, [r7, #0]
    210e:	fa02 f303 	lsl.w	r3, r2, r3
    2112:	43db      	mvns	r3, r3
    2114:	461a      	mov	r2, r3
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	4013      	ands	r3, r2
}
    211a:	4618      	mov	r0, r3
    211c:	370c      	adds	r7, #12
    211e:	46bd      	mov	sp, r7
    2120:	f85d 7b04 	ldr.w	r7, [sp], #4
    2124:	4770      	bx	lr

00002126 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    2126:	b480      	push	{r7}
    2128:	b083      	sub	sp, #12
    212a:	af00      	add	r7, sp, #0
    212c:	6078      	str	r0, [r7, #4]
    212e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    2130:	2201      	movs	r2, #1
    2132:	683b      	ldr	r3, [r7, #0]
    2134:	fa02 f303 	lsl.w	r3, r2, r3
    2138:	461a      	mov	r2, r3
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	4313      	orrs	r3, r2
}
    213e:	4618      	mov	r0, r3
    2140:	370c      	adds	r7, #12
    2142:	46bd      	mov	sp, r7
    2144:	f85d 7b04 	ldr.w	r7, [sp], #4
    2148:	4770      	bx	lr

0000214a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    214a:	b480      	push	{r7}
    214c:	b083      	sub	sp, #12
    214e:	af00      	add	r7, sp, #0
    2150:	6078      	str	r0, [r7, #4]
    2152:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    2154:	2201      	movs	r2, #1
    2156:	683b      	ldr	r3, [r7, #0]
    2158:	fa02 f303 	lsl.w	r3, r2, r3
    215c:	461a      	mov	r2, r3
    215e:	687b      	ldr	r3, [r7, #4]
    2160:	4013      	ands	r3, r2
    2162:	2b00      	cmp	r3, #0
    2164:	bf14      	ite	ne
    2166:	2301      	movne	r3, #1
    2168:	2300      	moveq	r3, #0
    216a:	b2db      	uxtb	r3, r3
}
    216c:	4618      	mov	r0, r3
    216e:	370c      	adds	r7, #12
    2170:	46bd      	mov	sp, r7
    2172:	f85d 7b04 	ldr.w	r7, [sp], #4
    2176:	4770      	bx	lr

00002178 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    2178:	b580      	push	{r7, lr}
    217a:	b084      	sub	sp, #16
    217c:	af00      	add	r7, sp, #0
    217e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	4618      	mov	r0, r3
    2184:	f7fe fc2e 	bl	9e4 <units::linear_scale<float>::operator()() const>
    2188:	eef0 7a40 	vmov.f32	s15, s0
    218c:	edc7 7a03 	vstr	s15, [r7, #12]
    2190:	f107 030c 	add.w	r3, r7, #12
    2194:	4618      	mov	r0, r3
    2196:	f000 f9a5 	bl	24e4 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    219a:	eef0 7a40 	vmov.f32	s15, s0
    219e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    21a2:	ee17 3a90 	vmov	r3, s15
		}
    21a6:	4618      	mov	r0, r3
    21a8:	3710      	adds	r7, #16
    21aa:	46bd      	mov	sp, r7
    21ac:	bd80      	pop	{r7, pc}

000021ae <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    21ae:	b580      	push	{r7, lr}
    21b0:	b084      	sub	sp, #16
    21b2:	af00      	add	r7, sp, #0
    21b4:	6078      	str	r0, [r7, #4]
    21b6:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	4618      	mov	r0, r3
    21bc:	f7fe fc12 	bl	9e4 <units::linear_scale<float>::operator()() const>
    21c0:	eef0 6a40 	vmov.f32	s13, s0
    21c4:	683b      	ldr	r3, [r7, #0]
    21c6:	ee07 3a90 	vmov	s15, r3
    21ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    21d2:	f107 030c 	add.w	r3, r7, #12
    21d6:	eeb0 0a47 	vmov.f32	s0, s14
    21da:	4618      	mov	r0, r3
    21dc:	f7fe f926 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    21e0:	68fb      	ldr	r3, [r7, #12]
	}
    21e2:	4618      	mov	r0, r3
    21e4:	3710      	adds	r7, #16
    21e6:	46bd      	mov	sp, r7
    21e8:	bd80      	pop	{r7, pc}

000021ea <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    21ea:	b580      	push	{r7, lr}
    21ec:	ed2d 8b02 	vpush	{d8}
    21f0:	b082      	sub	sp, #8
    21f2:	af00      	add	r7, sp, #0
    21f4:	6078      	str	r0, [r7, #4]
    21f6:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	ed93 8a00 	vldr	s16, [r3]
    21fe:	683b      	ldr	r3, [r7, #0]
    2200:	4618      	mov	r0, r3
    2202:	f7fe f8f3 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2206:	eef0 7a40 	vmov.f32	s15, s0
    220a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2212:	bfcc      	ite	gt
    2214:	2301      	movgt	r3, #1
    2216:	2300      	movle	r3, #0
    2218:	b2db      	uxtb	r3, r3
		}
    221a:	4618      	mov	r0, r3
    221c:	3708      	adds	r7, #8
    221e:	46bd      	mov	sp, r7
    2220:	ecbd 8b02 	vpop	{d8}
    2224:	bd80      	pop	{r7, pc}

00002226 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    2226:	b580      	push	{r7, lr}
    2228:	b082      	sub	sp, #8
    222a:	af00      	add	r7, sp, #0
    222c:	6078      	str	r0, [r7, #4]
    222e:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	4618      	mov	r0, r3
    2234:	f7fe fc55 	bl	ae2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2238:	eef0 7a40 	vmov.f32	s15, s0
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    2242:	687b      	ldr	r3, [r7, #4]
		}
    2244:	4618      	mov	r0, r3
    2246:	3708      	adds	r7, #8
    2248:	46bd      	mov	sp, r7
    224a:	bd80      	pop	{r7, pc}

0000224c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    224c:	b580      	push	{r7, lr}
    224e:	b084      	sub	sp, #16
    2250:	af00      	add	r7, sp, #0
    2252:	60f8      	str	r0, [r7, #12]
    2254:	60b9      	str	r1, [r7, #8]
    2256:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2258:	793b      	ldrb	r3, [r7, #4]
    225a:	461a      	mov	r2, r3
    225c:	797b      	ldrb	r3, [r7, #5]
    225e:	68b9      	ldr	r1, [r7, #8]
    2260:	68f8      	ldr	r0, [r7, #12]
    2262:	f000 f94d 	bl	2500 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    2266:	4603      	mov	r3, r0
}
    2268:	4618      	mov	r0, r3
    226a:	3710      	adds	r7, #16
    226c:	46bd      	mov	sp, r7
    226e:	bd80      	pop	{r7, pc}

00002270 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2270:	b480      	push	{r7}
    2272:	b083      	sub	sp, #12
    2274:	af00      	add	r7, sp, #0
    2276:	4603      	mov	r3, r0
    2278:	6039      	str	r1, [r7, #0]
    227a:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    227c:	79fa      	ldrb	r2, [r7, #7]
    227e:	683b      	ldr	r3, [r7, #0]
    2280:	fa42 f303 	asr.w	r3, r2, r3
    2284:	f003 0301 	and.w	r3, r3, #1
    2288:	2b00      	cmp	r3, #0
    228a:	bf14      	ite	ne
    228c:	2301      	movne	r3, #1
    228e:	2300      	moveq	r3, #0
    2290:	b2db      	uxtb	r3, r3
}
    2292:	4618      	mov	r0, r3
    2294:	370c      	adds	r7, #12
    2296:	46bd      	mov	sp, r7
    2298:	f85d 7b04 	ldr.w	r7, [sp], #4
    229c:	4770      	bx	lr

0000229e <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    229e:	b580      	push	{r7, lr}
    22a0:	b084      	sub	sp, #16
    22a2:	af00      	add	r7, sp, #0
    22a4:	60f8      	str	r0, [r7, #12]
    22a6:	460b      	mov	r3, r1
    22a8:	80ba      	strh	r2, [r7, #4]
    22aa:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    22ac:	793b      	ldrb	r3, [r7, #4]
    22ae:	461a      	mov	r2, r3
    22b0:	797b      	ldrb	r3, [r7, #5]
    22b2:	7af9      	ldrb	r1, [r7, #11]
    22b4:	68f8      	ldr	r0, [r7, #12]
    22b6:	f000 f94f 	bl	2558 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    22ba:	4603      	mov	r3, r0
}
    22bc:	4618      	mov	r0, r3
    22be:	3710      	adds	r7, #16
    22c0:	46bd      	mov	sp, r7
    22c2:	bd80      	pop	{r7, pc}

000022c4 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    22c4:	b580      	push	{r7, lr}
    22c6:	b082      	sub	sp, #8
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
    22cc:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    22ce:	783b      	ldrb	r3, [r7, #0]
    22d0:	4619      	mov	r1, r3
    22d2:	6878      	ldr	r0, [r7, #4]
    22d4:	f7ff ff39 	bl	214a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    22d8:	4603      	mov	r3, r0
}
    22da:	4618      	mov	r0, r3
    22dc:	3708      	adds	r7, #8
    22de:	46bd      	mov	sp, r7
    22e0:	bd80      	pop	{r7, pc}

000022e2 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    22e2:	b580      	push	{r7, lr}
    22e4:	b082      	sub	sp, #8
    22e6:	af00      	add	r7, sp, #0
    22e8:	6078      	str	r0, [r7, #4]
    22ea:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    22ec:	783b      	ldrb	r3, [r7, #0]
    22ee:	4619      	mov	r1, r3
    22f0:	6878      	ldr	r0, [r7, #4]
    22f2:	f7ff ff18 	bl	2126 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    22f6:	4603      	mov	r3, r0
}
    22f8:	4618      	mov	r0, r3
    22fa:	3708      	adds	r7, #8
    22fc:	46bd      	mov	sp, r7
    22fe:	bd80      	pop	{r7, pc}

00002300 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    2300:	b580      	push	{r7, lr}
    2302:	b082      	sub	sp, #8
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
    2308:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    230a:	783b      	ldrb	r3, [r7, #0]
    230c:	4619      	mov	r1, r3
    230e:	787b      	ldrb	r3, [r7, #1]
    2310:	461a      	mov	r2, r3
    2312:	6878      	ldr	r0, [r7, #4]
    2314:	f000 f94d 	bl	25b2 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    2318:	4603      	mov	r3, r0
}
    231a:	4618      	mov	r0, r3
    231c:	3708      	adds	r7, #8
    231e:	46bd      	mov	sp, r7
    2320:	bd80      	pop	{r7, pc}

00002322 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2322:	b580      	push	{r7, lr}
    2324:	b084      	sub	sp, #16
    2326:	af00      	add	r7, sp, #0
    2328:	60f8      	str	r0, [r7, #12]
    232a:	60b9      	str	r1, [r7, #8]
    232c:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    232e:	793b      	ldrb	r3, [r7, #4]
    2330:	461a      	mov	r2, r3
    2332:	797b      	ldrb	r3, [r7, #5]
    2334:	68b9      	ldr	r1, [r7, #8]
    2336:	68f8      	ldr	r0, [r7, #12]
    2338:	f000 f959 	bl	25ee <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    233c:	4603      	mov	r3, r0
}
    233e:	4618      	mov	r0, r3
    2340:	3710      	adds	r7, #16
    2342:	46bd      	mov	sp, r7
    2344:	bd80      	pop	{r7, pc}

00002346 <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>:
/// @param current_minimum current minimum value that the value can reach
/// @param current_maximum current maximum value that the value can reach
/// @param new_minimum the new minimum value to scale and shift the old value to
/// @param new_maximum the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    2346:	b480      	push	{r7}
    2348:	b08f      	sub	sp, #60	; 0x3c
    234a:	af00      	add	r7, sp, #0
    234c:	6178      	str	r0, [r7, #20]
    234e:	6139      	str	r1, [r7, #16]
    2350:	60fa      	str	r2, [r7, #12]
    2352:	ed87 0a02 	vstr	s0, [r7, #8]
    2356:	edc7 0a01 	vstr	s1, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	ee07 3a90 	vmov	s15, r3
    2360:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2364:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    2368:	693b      	ldr	r3, [r7, #16]
    236a:	ee07 3a90 	vmov	s15, r3
    236e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2372:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    2376:	68fb      	ldr	r3, [r7, #12]
    2378:	ee07 3a90 	vmov	s15, r3
    237c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    2384:	68bb      	ldr	r3, [r7, #8]
    2386:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    238c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    2390:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    2394:	ee77 6a67 	vsub.f32	s13, s14, s15
    2398:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    239c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    23a0:	ee37 7a67 	vsub.f32	s14, s14, s15
    23a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
    23a8:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    23ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    23b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    23b4:	ee37 7a67 	vsub.f32	s14, s14, s15
    23b8:	edd7 7a08 	vldr	s15, [r7, #32]
    23bc:	ee67 7a27 	vmul.f32	s15, s14, s15
    23c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    23c4:	ee77 7a27 	vadd.f32	s15, s14, s15
    23c8:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    23cc:	69fb      	ldr	r3, [r7, #28]
    23ce:	ee07 3a90 	vmov	s15, r3
};
    23d2:	eeb0 0a67 	vmov.f32	s0, s15
    23d6:	373c      	adds	r7, #60	; 0x3c
    23d8:	46bd      	mov	sp, r7
    23da:	f85d 7b04 	ldr.w	r7, [sp], #4
    23de:	4770      	bx	lr

000023e0 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    23e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e2:	b08b      	sub	sp, #44	; 0x2c
    23e4:	af00      	add	r7, sp, #0
    23e6:	60f8      	str	r0, [r7, #12]
    23e8:	60b9      	str	r1, [r7, #8]
    23ea:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    23ec:	68bb      	ldr	r3, [r7, #8]
    23ee:	e9d3 3400 	ldrd	r3, r4, [r3]
    23f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    23f6:	f107 0318 	add.w	r3, r7, #24
    23fa:	4618      	mov	r0, r3
    23fc:	f7fe fb1e 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2400:	4605      	mov	r5, r0
    2402:	460e      	mov	r6, r1
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	e9d3 3400 	ldrd	r3, r4, [r3]
    240a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    240e:	f107 0320 	add.w	r3, r7, #32
    2412:	4618      	mov	r0, r3
    2414:	f7fe fb12 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2418:	460a      	mov	r2, r1
    241a:	4601      	mov	r1, r0
    241c:	194b      	adds	r3, r1, r5
    241e:	eb42 0406 	adc.w	r4, r2, r6
    2422:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2426:	f107 0310 	add.w	r3, r7, #16
    242a:	4619      	mov	r1, r3
    242c:	68f8      	ldr	r0, [r7, #12]
    242e:	f7fe f8f9 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    2432:	68f8      	ldr	r0, [r7, #12]
    2434:	372c      	adds	r7, #44	; 0x2c
    2436:	46bd      	mov	sp, r7
    2438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000243a <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    243a:	b5f0      	push	{r4, r5, r6, r7, lr}
    243c:	b087      	sub	sp, #28
    243e:	af00      	add	r7, sp, #0
    2440:	6078      	str	r0, [r7, #4]
    2442:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	e9d3 3400 	ldrd	r3, r4, [r3]
    244a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    244e:	f107 0308 	add.w	r3, r7, #8
    2452:	4618      	mov	r0, r3
    2454:	f7fe faf2 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2458:	4605      	mov	r5, r0
    245a:	460e      	mov	r6, r1
    245c:	683b      	ldr	r3, [r7, #0]
    245e:	e9d3 3400 	ldrd	r3, r4, [r3]
    2462:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2466:	f107 0310 	add.w	r3, r7, #16
    246a:	4618      	mov	r0, r3
    246c:	f7fe fae6 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2470:	4603      	mov	r3, r0
    2472:	460c      	mov	r4, r1
    2474:	429d      	cmp	r5, r3
    2476:	eb76 0304 	sbcs.w	r3, r6, r4
    247a:	bfb4      	ite	lt
    247c:	2301      	movlt	r3, #1
    247e:	2300      	movge	r3, #0
    2480:	b2db      	uxtb	r3, r3
      }
    2482:	4618      	mov	r0, r3
    2484:	371c      	adds	r7, #28
    2486:	46bd      	mov	sp, r7
    2488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000248a <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    248a:	b480      	push	{r7}
    248c:	b089      	sub	sp, #36	; 0x24
    248e:	af00      	add	r7, sp, #0
    2490:	60f8      	str	r0, [r7, #12]
    2492:	607a      	str	r2, [r7, #4]
    2494:	603b      	str	r3, [r7, #0]
    2496:	460b      	mov	r3, r1
    2498:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    249a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    249e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    24a0:	2320      	movs	r3, #32
    24a2:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    24a4:	683b      	ldr	r3, [r7, #0]
    24a6:	f1c3 0320 	rsb	r3, r3, #32
    24aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    24ae:	fa22 f303 	lsr.w	r3, r2, r3
    24b2:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    24b4:	697a      	ldr	r2, [r7, #20]
    24b6:	687b      	ldr	r3, [r7, #4]
    24b8:	fa02 f303 	lsl.w	r3, r2, r3
    24bc:	43db      	mvns	r3, r3
    24be:	68fa      	ldr	r2, [r7, #12]
    24c0:	4013      	ands	r3, r2
    24c2:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    24c4:	7afa      	ldrb	r2, [r7, #11]
    24c6:	697b      	ldr	r3, [r7, #20]
    24c8:	401a      	ands	r2, r3
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	fa02 f303 	lsl.w	r3, r2, r3
    24d0:	68fa      	ldr	r2, [r7, #12]
    24d2:	4313      	orrs	r3, r2
    24d4:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    24d6:	68fb      	ldr	r3, [r7, #12]
}
    24d8:	4618      	mov	r0, r3
    24da:	3724      	adds	r7, #36	; 0x24
    24dc:	46bd      	mov	sp, r7
    24de:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e2:	4770      	bx	lr

000024e4 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    24e4:	b580      	push	{r7, lr}
    24e6:	b086      	sub	sp, #24
    24e8:	af00      	add	r7, sp, #0
    24ea:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    24ec:	6878      	ldr	r0, [r7, #4]
    24ee:	f000 f8aa 	bl	2646 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    24f2:	eef0 7a40 	vmov.f32	s15, s0
	}
    24f6:	eeb0 0a67 	vmov.f32	s0, s15
    24fa:	3718      	adds	r7, #24
    24fc:	46bd      	mov	sp, r7
    24fe:	bd80      	pop	{r7, pc}

00002500 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2500:	b480      	push	{r7}
    2502:	b089      	sub	sp, #36	; 0x24
    2504:	af00      	add	r7, sp, #0
    2506:	60f8      	str	r0, [r7, #12]
    2508:	60b9      	str	r1, [r7, #8]
    250a:	607a      	str	r2, [r7, #4]
    250c:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2512:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2514:	2320      	movs	r3, #32
    2516:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2518:	683b      	ldr	r3, [r7, #0]
    251a:	f1c3 0320 	rsb	r3, r3, #32
    251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2522:	fa22 f303 	lsr.w	r3, r2, r3
    2526:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2528:	697a      	ldr	r2, [r7, #20]
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	fa02 f303 	lsl.w	r3, r2, r3
    2530:	43db      	mvns	r3, r3
    2532:	68fa      	ldr	r2, [r7, #12]
    2534:	4013      	ands	r3, r2
    2536:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2538:	68ba      	ldr	r2, [r7, #8]
    253a:	697b      	ldr	r3, [r7, #20]
    253c:	401a      	ands	r2, r3
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	fa02 f303 	lsl.w	r3, r2, r3
    2544:	68fa      	ldr	r2, [r7, #12]
    2546:	4313      	orrs	r3, r2
    2548:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    254a:	68fb      	ldr	r3, [r7, #12]
}
    254c:	4618      	mov	r0, r3
    254e:	3724      	adds	r7, #36	; 0x24
    2550:	46bd      	mov	sp, r7
    2552:	f85d 7b04 	ldr.w	r7, [sp], #4
    2556:	4770      	bx	lr

00002558 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2558:	b480      	push	{r7}
    255a:	b089      	sub	sp, #36	; 0x24
    255c:	af00      	add	r7, sp, #0
    255e:	60f8      	str	r0, [r7, #12]
    2560:	607a      	str	r2, [r7, #4]
    2562:	603b      	str	r3, [r7, #0]
    2564:	460b      	mov	r3, r1
    2566:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    256c:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    256e:	2320      	movs	r3, #32
    2570:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2572:	683b      	ldr	r3, [r7, #0]
    2574:	f1c3 0320 	rsb	r3, r3, #32
    2578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    257c:	fa22 f303 	lsr.w	r3, r2, r3
    2580:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2582:	697a      	ldr	r2, [r7, #20]
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	fa02 f303 	lsl.w	r3, r2, r3
    258a:	43db      	mvns	r3, r3
    258c:	68fa      	ldr	r2, [r7, #12]
    258e:	4013      	ands	r3, r2
    2590:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2592:	7afa      	ldrb	r2, [r7, #11]
    2594:	697b      	ldr	r3, [r7, #20]
    2596:	401a      	ands	r2, r3
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	fa02 f303 	lsl.w	r3, r2, r3
    259e:	68fa      	ldr	r2, [r7, #12]
    25a0:	4313      	orrs	r3, r2
    25a2:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    25a4:	68fb      	ldr	r3, [r7, #12]
}
    25a6:	4618      	mov	r0, r3
    25a8:	3724      	adds	r7, #36	; 0x24
    25aa:	46bd      	mov	sp, r7
    25ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    25b0:	4770      	bx	lr

000025b2 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    25b2:	b480      	push	{r7}
    25b4:	b089      	sub	sp, #36	; 0x24
    25b6:	af00      	add	r7, sp, #0
    25b8:	60f8      	str	r0, [r7, #12]
    25ba:	60b9      	str	r1, [r7, #8]
    25bc:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    25be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    25c2:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    25c4:	2320      	movs	r3, #32
    25c6:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	f1c3 0320 	rsb	r3, r3, #32
    25ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    25d2:	fa22 f303 	lsr.w	r3, r2, r3
    25d6:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    25d8:	68fa      	ldr	r2, [r7, #12]
    25da:	68bb      	ldr	r3, [r7, #8]
    25dc:	40da      	lsrs	r2, r3
    25de:	697b      	ldr	r3, [r7, #20]
    25e0:	4013      	ands	r3, r2
}
    25e2:	4618      	mov	r0, r3
    25e4:	3724      	adds	r7, #36	; 0x24
    25e6:	46bd      	mov	sp, r7
    25e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25ec:	4770      	bx	lr

000025ee <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    25ee:	b480      	push	{r7}
    25f0:	b089      	sub	sp, #36	; 0x24
    25f2:	af00      	add	r7, sp, #0
    25f4:	60f8      	str	r0, [r7, #12]
    25f6:	60b9      	str	r1, [r7, #8]
    25f8:	607a      	str	r2, [r7, #4]
    25fa:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    25fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2600:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2602:	2320      	movs	r3, #32
    2604:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	f1c3 0320 	rsb	r3, r3, #32
    260c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2610:	fa22 f303 	lsr.w	r3, r2, r3
    2614:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2616:	697a      	ldr	r2, [r7, #20]
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	fa02 f303 	lsl.w	r3, r2, r3
    261e:	43db      	mvns	r3, r3
    2620:	68fa      	ldr	r2, [r7, #12]
    2622:	4013      	ands	r3, r2
    2624:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2626:	68ba      	ldr	r2, [r7, #8]
    2628:	697b      	ldr	r3, [r7, #20]
    262a:	401a      	ands	r2, r3
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	fa02 f303 	lsl.w	r3, r2, r3
    2632:	68fa      	ldr	r2, [r7, #12]
    2634:	4313      	orrs	r3, r2
    2636:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2638:	68fb      	ldr	r3, [r7, #12]
}
    263a:	4618      	mov	r0, r3
    263c:	3724      	adds	r7, #36	; 0x24
    263e:	46bd      	mov	sp, r7
    2640:	f85d 7b04 	ldr.w	r7, [sp], #4
    2644:	4770      	bx	lr

00002646 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2646:	b480      	push	{r7}
    2648:	b085      	sub	sp, #20
    264a:	af00      	add	r7, sp, #0
    264c:	60f8      	str	r0, [r7, #12]
    264e:	7239      	strb	r1, [r7, #8]
    2650:	713a      	strb	r2, [r7, #4]
    2652:	703b      	strb	r3, [r7, #0]
			return value;
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	681b      	ldr	r3, [r3, #0]
    2658:	ee07 3a90 	vmov	s15, r3
		}
    265c:	eeb0 0a67 	vmov.f32	s0, s15
    2660:	3714      	adds	r7, #20
    2662:	46bd      	mov	sp, r7
    2664:	f85d 7b04 	ldr.w	r7, [sp], #4
    2668:	4770      	bx	lr
    266a:	Address 0x000000000000266a is out of bounds.


0000266c <__static_initialization_and_destruction_0(int, int)>:
  return 0;
}
    266c:	b580      	push	{r7, lr}
    266e:	b082      	sub	sp, #8
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
    2674:	6039      	str	r1, [r7, #0]
    2676:	687b      	ldr	r3, [r7, #4]
    2678:	2b01      	cmp	r3, #1
    267a:	f040 80b8 	bne.w	27ee <__static_initialization_and_destruction_0(int, int)+0x182>
    267e:	683b      	ldr	r3, [r7, #0]
    2680:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2684:	4293      	cmp	r3, r2
    2686:	f040 80b2 	bne.w	27ee <__static_initialization_and_destruction_0(int, int)+0x182>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    268a:	4b5b      	ldr	r3, [pc, #364]	; (27f8 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    268c:	681b      	ldr	r3, [r3, #0]
    268e:	f003 0301 	and.w	r3, r3, #1
    2692:	2b00      	cmp	r3, #0
    2694:	d105      	bne.n	26a2 <__static_initialization_and_destruction_0(int, int)+0x36>
    2696:	4b58      	ldr	r3, [pc, #352]	; (27f8 <__static_initialization_and_destruction_0(int, int)+0x18c>)
    2698:	2201      	movs	r2, #1
    269a:	601a      	str	r2, [r3, #0]
    269c:	4a57      	ldr	r2, [pc, #348]	; (27fc <__static_initialization_and_destruction_0(int, int)+0x190>)
    269e:	4b58      	ldr	r3, [pc, #352]	; (2800 <__static_initialization_and_destruction_0(int, int)+0x194>)
    26a0:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    26a2:	4b58      	ldr	r3, [pc, #352]	; (2804 <__static_initialization_and_destruction_0(int, int)+0x198>)
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	f003 0301 	and.w	r3, r3, #1
    26aa:	2b00      	cmp	r3, #0
    26ac:	d106      	bne.n	26bc <__static_initialization_and_destruction_0(int, int)+0x50>
    26ae:	4b55      	ldr	r3, [pc, #340]	; (2804 <__static_initialization_and_destruction_0(int, int)+0x198>)
    26b0:	2201      	movs	r2, #1
    26b2:	601a      	str	r2, [r3, #0]
    26b4:	4b54      	ldr	r3, [pc, #336]	; (2808 <__static_initialization_and_destruction_0(int, int)+0x19c>)
    26b6:	4618      	mov	r0, r3
    26b8:	f7fe f95a 	bl	970 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  static constexpr uint8_t kNumberOfPins  = 32;
  static constexpr uint8_t kNumberOfPorts = 2;
  // Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  // Table of GPIO ports located in LPC memory map
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    26bc:	4b53      	ldr	r3, [pc, #332]	; (280c <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    26be:	681b      	ldr	r3, [r3, #0]
    26c0:	f003 0301 	and.w	r3, r3, #1
    26c4:	2b00      	cmp	r3, #0
    26c6:	d114      	bne.n	26f2 <__static_initialization_and_destruction_0(int, int)+0x86>
    26c8:	4b50      	ldr	r3, [pc, #320]	; (280c <__static_initialization_and_destruction_0(int, int)+0x1a0>)
    26ca:	2201      	movs	r2, #1
    26cc:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    26ce:	4a50      	ldr	r2, [pc, #320]	; (2810 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    26d0:	4b50      	ldr	r3, [pc, #320]	; (2814 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    26d2:	601a      	str	r2, [r3, #0]
    26d4:	4a50      	ldr	r2, [pc, #320]	; (2818 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    26d6:	4b4f      	ldr	r3, [pc, #316]	; (2814 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    26d8:	605a      	str	r2, [r3, #4]
    26da:	4a50      	ldr	r2, [pc, #320]	; (281c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    26dc:	4b4d      	ldr	r3, [pc, #308]	; (2814 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    26de:	609a      	str	r2, [r3, #8]
    26e0:	4a4f      	ldr	r2, [pc, #316]	; (2820 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    26e2:	4b4c      	ldr	r3, [pc, #304]	; (2814 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    26e4:	60da      	str	r2, [r3, #12]
    26e6:	4a4f      	ldr	r2, [pc, #316]	; (2824 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    26e8:	4b4a      	ldr	r3, [pc, #296]	; (2814 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    26ea:	611a      	str	r2, [r3, #16]
    26ec:	4a4e      	ldr	r2, [pc, #312]	; (2828 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    26ee:	4b49      	ldr	r3, [pc, #292]	; (2814 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    26f0:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_rising_edge  = nullptr;
    volatile uint32_t * enable_falling_edge = nullptr;
  };

  // An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfPorts] = {
    26f2:	4b4e      	ldr	r3, [pc, #312]	; (282c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	f003 0301 	and.w	r3, r3, #1
    26fa:	2b00      	cmp	r3, #0
    26fc:	d122      	bne.n	2744 <__static_initialization_and_destruction_0(int, int)+0xd8>
    26fe:	4b4b      	ldr	r3, [pc, #300]	; (282c <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    2700:	2201      	movs	r2, #1
    2702:	601a      	str	r2, [r3, #0]
    { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
      .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
      .clear               = &(LPC_GPIOINT->IO2IntClr),
      .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
      .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) }
  };
    2704:	4b4a      	ldr	r3, [pc, #296]	; (2830 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    2706:	4a4b      	ldr	r2, [pc, #300]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2708:	3204      	adds	r2, #4
  };
    270a:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    270c:	4a49      	ldr	r2, [pc, #292]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    270e:	3208      	adds	r2, #8
  };
    2710:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO0IntClr),
    2712:	4a48      	ldr	r2, [pc, #288]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2714:	320c      	adds	r2, #12
  };
    2716:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    2718:	4a46      	ldr	r2, [pc, #280]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    271a:	3210      	adds	r2, #16
  };
    271c:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    271e:	4a45      	ldr	r2, [pc, #276]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2720:	3214      	adds	r2, #20
  };
    2722:	611a      	str	r2, [r3, #16]
    2724:	3314      	adds	r3, #20
    { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    2726:	4a43      	ldr	r2, [pc, #268]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2728:	3224      	adds	r2, #36	; 0x24
  };
    272a:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    272c:	4a41      	ldr	r2, [pc, #260]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    272e:	3228      	adds	r2, #40	; 0x28
  };
    2730:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO2IntClr),
    2732:	4a40      	ldr	r2, [pc, #256]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2734:	322c      	adds	r2, #44	; 0x2c
  };
    2736:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    2738:	4a3e      	ldr	r2, [pc, #248]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    273a:	3230      	adds	r2, #48	; 0x30
  };
    273c:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) }
    273e:	4a3d      	ldr	r2, [pc, #244]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2740:	3234      	adds	r2, #52	; 0x34
  };
    2742:	611a      	str	r2, [r3, #16]

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    2744:	4b3c      	ldr	r3, [pc, #240]	; (2838 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    2746:	681b      	ldr	r3, [r3, #0]
    2748:	f003 0301 	and.w	r3, r3, #1
    274c:	2b00      	cmp	r3, #0
    274e:	d106      	bne.n	275e <__static_initialization_and_destruction_0(int, int)+0xf2>
    2750:	4b39      	ldr	r3, [pc, #228]	; (2838 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    2752:	2201      	movs	r2, #1
    2754:	601a      	str	r2, [r3, #0]
    2756:	4b37      	ldr	r3, [pc, #220]	; (2834 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2758:	461a      	mov	r2, r3
    275a:	4b38      	ldr	r3, [pc, #224]	; (283c <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    275c:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    275e:	4b38      	ldr	r3, [pc, #224]	; (2840 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	f003 0301 	and.w	r3, r3, #1
    2766:	2b00      	cmp	r3, #0
    2768:	d105      	bne.n	2776 <__static_initialization_and_destruction_0(int, int)+0x10a>
    276a:	4b35      	ldr	r3, [pc, #212]	; (2840 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    276c:	2201      	movs	r2, #1
    276e:	601a      	str	r2, [r3, #0]
    2770:	4a34      	ldr	r2, [pc, #208]	; (2844 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    2772:	4b35      	ldr	r3, [pc, #212]	; (2848 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    2774:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    2776:	4b35      	ldr	r3, [pc, #212]	; (284c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	f003 0301 	and.w	r3, r3, #1
    277e:	2b00      	cmp	r3, #0
    2780:	d105      	bne.n	278e <__static_initialization_and_destruction_0(int, int)+0x122>
    2782:	4b32      	ldr	r3, [pc, #200]	; (284c <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2784:	2201      	movs	r2, #1
    2786:	601a      	str	r2, [r3, #0]
    };
    2788:	4a31      	ldr	r2, [pc, #196]	; (2850 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    278a:	4b32      	ldr	r3, [pc, #200]	; (2854 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    278c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    278e:	4b32      	ldr	r3, [pc, #200]	; (2858 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    2790:	681b      	ldr	r3, [r3, #0]
    2792:	f003 0301 	and.w	r3, r3, #1
    2796:	2b00      	cmp	r3, #0
    2798:	d105      	bne.n	27a6 <__static_initialization_and_destruction_0(int, int)+0x13a>
    279a:	4b2f      	ldr	r3, [pc, #188]	; (2858 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    279c:	2201      	movs	r2, #1
    279e:	601a      	str	r2, [r3, #0]
    };
    27a0:	4a2e      	ldr	r2, [pc, #184]	; (285c <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    27a2:	4b2f      	ldr	r3, [pc, #188]	; (2860 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    27a4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    27a6:	4b2f      	ldr	r3, [pc, #188]	; (2864 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    27a8:	681b      	ldr	r3, [r3, #0]
    27aa:	f003 0301 	and.w	r3, r3, #1
    27ae:	2b00      	cmp	r3, #0
    27b0:	d105      	bne.n	27be <__static_initialization_and_destruction_0(int, int)+0x152>
    27b2:	4b2c      	ldr	r3, [pc, #176]	; (2864 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    27b4:	2201      	movs	r2, #1
    27b6:	601a      	str	r2, [r3, #0]
    };
    27b8:	4a2b      	ldr	r2, [pc, #172]	; (2868 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    27ba:	4b2c      	ldr	r3, [pc, #176]	; (286c <__static_initialization_and_destruction_0(int, int)+0x200>)
    27bc:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    27be:	4b2c      	ldr	r3, [pc, #176]	; (2870 <__static_initialization_and_destruction_0(int, int)+0x204>)
    27c0:	681b      	ldr	r3, [r3, #0]
    27c2:	f003 0301 	and.w	r3, r3, #1
    27c6:	2b00      	cmp	r3, #0
    27c8:	d105      	bne.n	27d6 <__static_initialization_and_destruction_0(int, int)+0x16a>
    27ca:	4b29      	ldr	r3, [pc, #164]	; (2870 <__static_initialization_and_destruction_0(int, int)+0x204>)
    27cc:	2201      	movs	r2, #1
    27ce:	601a      	str	r2, [r3, #0]
    27d0:	4a28      	ldr	r2, [pc, #160]	; (2874 <__static_initialization_and_destruction_0(int, int)+0x208>)
    27d2:	4b29      	ldr	r3, [pc, #164]	; (2878 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    27d4:	601a      	str	r2, [r3, #0]
  };

  struct Channel  // NOLINT
  {
   public:
    inline static const Peripheral_t kPwm1PeripheralCommon = {
    27d6:	4b29      	ldr	r3, [pc, #164]	; (287c <__static_initialization_and_destruction_0(int, int)+0x210>)
    27d8:	681b      	ldr	r3, [r3, #0]
    27da:	f003 0301 	and.w	r3, r3, #1
    27de:	2b00      	cmp	r3, #0
    27e0:	d105      	bne.n	27ee <__static_initialization_and_destruction_0(int, int)+0x182>
    27e2:	4b26      	ldr	r3, [pc, #152]	; (287c <__static_initialization_and_destruction_0(int, int)+0x210>)
    27e4:	2201      	movs	r2, #1
    27e6:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM1,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    27e8:	4a25      	ldr	r2, [pc, #148]	; (2880 <__static_initialization_and_destruction_0(int, int)+0x214>)
    27ea:	4b26      	ldr	r3, [pc, #152]	; (2884 <__static_initialization_and_destruction_0(int, int)+0x218>)
    27ec:	601a      	str	r2, [r3, #0]
    27ee:	bf00      	nop
    27f0:	3708      	adds	r7, #8
    27f2:	46bd      	mov	sp, r7
    27f4:	bd80      	pop	{r7, pc}
    27f6:	bf00      	nop
    27f8:	10000250 	.word	0x10000250
    27fc:	4002c000 	.word	0x4002c000
    2800:	10000100 	.word	0x10000100
    2804:	10000254 	.word	0x10000254
    2808:	10000104 	.word	0x10000104
    280c:	10000258 	.word	0x10000258
    2810:	20098000 	.word	0x20098000
    2814:	10000204 	.word	0x10000204
    2818:	20098020 	.word	0x20098020
    281c:	20098040 	.word	0x20098040
    2820:	20098060 	.word	0x20098060
    2824:	20098080 	.word	0x20098080
    2828:	200980a0 	.word	0x200980a0
    282c:	1000025c 	.word	0x1000025c
    2830:	1000021c 	.word	0x1000021c
    2834:	40028080 	.word	0x40028080
    2838:	10000260 	.word	0x10000260
    283c:	10000244 	.word	0x10000244
    2840:	10000264 	.word	0x10000264
    2844:	400fc000 	.word	0x400fc000
    2848:	10000248 	.word	0x10000248
    284c:	10000268 	.word	0x10000268
    2850:	40098000 	.word	0x40098000
    2854:	10000010 	.word	0x10000010
    2858:	1000026c 	.word	0x1000026c
    285c:	4009c000 	.word	0x4009c000
    2860:	10000024 	.word	0x10000024
    2864:	10000270 	.word	0x10000270
    2868:	400a4000 	.word	0x400a4000
    286c:	10000038 	.word	0x10000038
    2870:	10000274 	.word	0x10000274
    2874:	40034000 	.word	0x40034000
    2878:	1000024c 	.word	0x1000024c
    287c:	10000278 	.word	0x10000278
    2880:	40018000 	.word	0x40018000
    2884:	1000004c 	.word	0x1000004c

00002888 <_GLOBAL__sub_I_main>:
    2888:	b580      	push	{r7, lr}
    288a:	af00      	add	r7, sp, #0
    288c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2890:	2001      	movs	r0, #1
    2892:	f7ff feeb 	bl	266c <__static_initialization_and_destruction_0(int, int)>
    2896:	bd80      	pop	{r7, pc}

00002898 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    2898:	b480      	push	{r7}
    289a:	b087      	sub	sp, #28
    289c:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    289e:	2300      	movs	r3, #0
    28a0:	617b      	str	r3, [r7, #20]
    28a2:	697a      	ldr	r2, [r7, #20]
    28a4:	4613      	mov	r3, r2
    28a6:	005b      	lsls	r3, r3, #1
    28a8:	4413      	add	r3, r2
    28aa:	009b      	lsls	r3, r3, #2
    28ac:	4a1f      	ldr	r2, [pc, #124]	; (292c <sjsu::InitializeDataSection()+0x94>)
    28ae:	4413      	add	r3, r2
    28b0:	4a1f      	ldr	r2, [pc, #124]	; (2930 <sjsu::InitializeDataSection()+0x98>)
    28b2:	4293      	cmp	r3, r2
    28b4:	d233      	bcs.n	291e <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    28b6:	491d      	ldr	r1, [pc, #116]	; (292c <sjsu::InitializeDataSection()+0x94>)
    28b8:	697a      	ldr	r2, [r7, #20]
    28ba:	4613      	mov	r3, r2
    28bc:	005b      	lsls	r3, r3, #1
    28be:	4413      	add	r3, r2
    28c0:	009b      	lsls	r3, r3, #2
    28c2:	440b      	add	r3, r1
    28c4:	681b      	ldr	r3, [r3, #0]
    28c6:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    28c8:	4918      	ldr	r1, [pc, #96]	; (292c <sjsu::InitializeDataSection()+0x94>)
    28ca:	697a      	ldr	r2, [r7, #20]
    28cc:	4613      	mov	r3, r2
    28ce:	005b      	lsls	r3, r3, #1
    28d0:	4413      	add	r3, r2
    28d2:	009b      	lsls	r3, r3, #2
    28d4:	440b      	add	r3, r1
    28d6:	685b      	ldr	r3, [r3, #4]
    28d8:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    28da:	4914      	ldr	r1, [pc, #80]	; (292c <sjsu::InitializeDataSection()+0x94>)
    28dc:	697a      	ldr	r2, [r7, #20]
    28de:	4613      	mov	r3, r2
    28e0:	005b      	lsls	r3, r3, #1
    28e2:	4413      	add	r3, r2
    28e4:	009b      	lsls	r3, r3, #2
    28e6:	440b      	add	r3, r1
    28e8:	3308      	adds	r3, #8
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    28ee:	2300      	movs	r3, #0
    28f0:	613b      	str	r3, [r7, #16]
    28f2:	693a      	ldr	r2, [r7, #16]
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	429a      	cmp	r2, r3
    28f8:	d20d      	bcs.n	2916 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    28fa:	693b      	ldr	r3, [r7, #16]
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	68fa      	ldr	r2, [r7, #12]
    2900:	441a      	add	r2, r3
    2902:	693b      	ldr	r3, [r7, #16]
    2904:	009b      	lsls	r3, r3, #2
    2906:	68b9      	ldr	r1, [r7, #8]
    2908:	440b      	add	r3, r1
    290a:	6812      	ldr	r2, [r2, #0]
    290c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    290e:	693b      	ldr	r3, [r7, #16]
    2910:	3301      	adds	r3, #1
    2912:	613b      	str	r3, [r7, #16]
    2914:	e7ed      	b.n	28f2 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2916:	697b      	ldr	r3, [r7, #20]
    2918:	3301      	adds	r3, #1
    291a:	617b      	str	r3, [r7, #20]
    291c:	e7c1      	b.n	28a2 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    291e:	bf00      	nop
    2920:	371c      	adds	r7, #28
    2922:	46bd      	mov	sp, r7
    2924:	f85d 7b04 	ldr.w	r7, [sp], #4
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	000000e4 	.word	0x000000e4
    2930:	000000fc 	.word	0x000000fc

00002934 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    2934:	b480      	push	{r7}
    2936:	b085      	sub	sp, #20
    2938:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    293a:	2300      	movs	r3, #0
    293c:	60fb      	str	r3, [r7, #12]
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	00db      	lsls	r3, r3, #3
    2942:	4a15      	ldr	r2, [pc, #84]	; (2998 <sjsu::InitializeBssSection()+0x64>)
    2944:	4413      	add	r3, r2
    2946:	4a15      	ldr	r2, [pc, #84]	; (299c <sjsu::InitializeBssSection()+0x68>)
    2948:	4293      	cmp	r3, r2
    294a:	d21e      	bcs.n	298a <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    294c:	4a12      	ldr	r2, [pc, #72]	; (2998 <sjsu::InitializeBssSection()+0x64>)
    294e:	68fb      	ldr	r3, [r7, #12]
    2950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2954:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    2956:	4a10      	ldr	r2, [pc, #64]	; (2998 <sjsu::InitializeBssSection()+0x64>)
    2958:	68fb      	ldr	r3, [r7, #12]
    295a:	00db      	lsls	r3, r3, #3
    295c:	4413      	add	r3, r2
    295e:	685b      	ldr	r3, [r3, #4]
    2960:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    2962:	2300      	movs	r3, #0
    2964:	60bb      	str	r3, [r7, #8]
    2966:	68ba      	ldr	r2, [r7, #8]
    2968:	683b      	ldr	r3, [r7, #0]
    296a:	429a      	cmp	r2, r3
    296c:	d209      	bcs.n	2982 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    296e:	68bb      	ldr	r3, [r7, #8]
    2970:	009b      	lsls	r3, r3, #2
    2972:	687a      	ldr	r2, [r7, #4]
    2974:	4413      	add	r3, r2
    2976:	2200      	movs	r2, #0
    2978:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    297a:	68bb      	ldr	r3, [r7, #8]
    297c:	3301      	adds	r3, #1
    297e:	60bb      	str	r3, [r7, #8]
    2980:	e7f1      	b.n	2966 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2982:	68fb      	ldr	r3, [r7, #12]
    2984:	3301      	adds	r3, #1
    2986:	60fb      	str	r3, [r7, #12]
    2988:	e7d9      	b.n	293e <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    298a:	bf00      	nop
    298c:	3714      	adds	r7, #20
    298e:	46bd      	mov	sp, r7
    2990:	f85d 7b04 	ldr.w	r7, [sp], #4
    2994:	4770      	bx	lr
    2996:	bf00      	nop
    2998:	000000fc 	.word	0x000000fc
    299c:	0000010c 	.word	0x0000010c

000029a0 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    29a0:	b580      	push	{r7, lr}
    29a2:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    29a4:	f7ff ff78 	bl	2898 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    29a8:	f7ff ffc4 	bl	2934 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    29ac:	f003 fb54 	bl	6058 <__libc_init_array>
}
    29b0:	bf00      	nop
    29b2:	bd80      	pop	{r7, pc}

000029b4 <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    29b4:	b580      	push	{r7, lr}
    29b6:	b08c      	sub	sp, #48	; 0x30
    29b8:	af02      	add	r7, sp, #8
    29ba:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    29c2:	687b      	ldr	r3, [r7, #4]
    29c4:	685b      	ldr	r3, [r3, #4]
    29c6:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	689b      	ldr	r3, [r3, #8]
    29cc:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	68db      	ldr	r3, [r3, #12]
    29d2:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	691b      	ldr	r3, [r3, #16]
    29d8:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	695b      	ldr	r3, [r3, #20]
    29de:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	699b      	ldr	r3, [r3, #24]
    29e4:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	69db      	ldr	r3, [r3, #28]
    29ea:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    29ec:	480d      	ldr	r0, [pc, #52]	; (2a24 <GetRegistersFromStack+0x70>)
    29ee:	f001 fa21 	bl	3e34 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    29f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    29f4:	6a3a      	ldr	r2, [r7, #32]
    29f6:	69f8      	ldr	r0, [r7, #28]
    29f8:	69bb      	ldr	r3, [r7, #24]
    29fa:	9300      	str	r3, [sp, #0]
    29fc:	4603      	mov	r3, r0
    29fe:	480a      	ldr	r0, [pc, #40]	; (2a28 <GetRegistersFromStack+0x74>)
    2a00:	f001 fa18 	bl	3e34 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    2a04:	6979      	ldr	r1, [r7, #20]
    2a06:	693a      	ldr	r2, [r7, #16]
    2a08:	68f8      	ldr	r0, [r7, #12]
    2a0a:	68bb      	ldr	r3, [r7, #8]
    2a0c:	9300      	str	r3, [sp, #0]
    2a0e:	4603      	mov	r3, r0
    2a10:	4806      	ldr	r0, [pc, #24]	; (2a2c <GetRegistersFromStack+0x78>)
    2a12:	f001 fa0f 	bl	3e34 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    2a16:	68fb      	ldr	r3, [r7, #12]
    2a18:	4619      	mov	r1, r3
    2a1a:	2001      	movs	r0, #1
    2a1c:	f7fd fdb0 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    2a20:	e7fe      	b.n	2a20 <GetRegistersFromStack+0x6c>
    2a22:	bf00      	nop
    2a24:	00006bb8 	.word	0x00006bb8
    2a28:	00006be4 	.word	0x00006be4
    2a2c:	00006c18 	.word	0x00006c18

00002a30 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    2a30:	b480      	push	{r7}
    2a32:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    2a34:	f01e 0f04 	tst.w	lr, #4
    2a38:	bf0c      	ite	eq
    2a3a:	f3ef 8008 	mrseq	r0, MSP
    2a3e:	f3ef 8009 	mrsne	r0, PSP
    2a42:	6981      	ldr	r1, [r0, #24]
    2a44:	4a00      	ldr	r2, [pc, #0]	; (2a48 <handler2_address_const>)
    2a46:	4710      	bx	r2

00002a48 <handler2_address_const>:
    2a48:	000029b5 	.word	0x000029b5
    }
  }
    2a4c:	bf00      	nop
    2a4e:	46bd      	mov	sp, r7
    2a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a54:	4770      	bx	lr
    2a56:	Address 0x0000000000002a56 is out of bounds.


00002a58 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    2a58:	b580      	push	{r7, lr}
    2a5a:	b084      	sub	sp, #16
    2a5c:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    2a5e:	4b10      	ldr	r3, [pc, #64]	; (2aa0 <ArmResetHandler+0x48>)
    2a60:	60fb      	str	r3, [r7, #12]
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    2a66:	683b      	ldr	r3, [r7, #0]
    2a68:	f383 8809 	msr	PSP, r3
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    2a76:	f7ff ff93 	bl	29a0 <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    2a7a:	f001 fd09 	bl	4490 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    2a7e:	f7ff fa33 	bl	1ee8 <main>
    2a82:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    2a84:	68bb      	ldr	r3, [r7, #8]
    2a86:	2b00      	cmp	r3, #0
    2a88:	db04      	blt.n	2a94 <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    2a8a:	68b9      	ldr	r1, [r7, #8]
    2a8c:	4805      	ldr	r0, [pc, #20]	; (2aa4 <ArmResetHandler+0x4c>)
    2a8e:	f001 f9d1 	bl	3e34 <printf>
    2a92:	e003      	b.n	2a9c <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    2a94:	68b9      	ldr	r1, [r7, #8]
    2a96:	4804      	ldr	r0, [pc, #16]	; (2aa8 <ArmResetHandler+0x50>)
    2a98:	f001 f9cc 	bl	3e34 <printf>
    2a9c:	e7fe      	b.n	2a9c <ArmResetHandler+0x44>
    2a9e:	bf00      	nop
    2aa0:	10010000 	.word	0x10010000
    2aa4:	00006c50 	.word	0x00006c50
    2aa8:	00006c84 	.word	0x00006c84

00002aac <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    2aac:	b580      	push	{r7, lr}
    2aae:	b082      	sub	sp, #8
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	6078      	str	r0, [r7, #4]
    2ab4:	6039      	str	r1, [r7, #0]
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	2b01      	cmp	r3, #1
    2aba:	d111      	bne.n	2ae0 <__static_initialization_and_destruction_0(int, int)+0x34>
    2abc:	683b      	ldr	r3, [r7, #0]
    2abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2ac2:	4293      	cmp	r3, r2
    2ac4:	d10c      	bne.n	2ae0 <__static_initialization_and_destruction_0(int, int)+0x34>
    2ac6:	4b08      	ldr	r3, [pc, #32]	; (2ae8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	f003 0301 	and.w	r3, r3, #1
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d106      	bne.n	2ae0 <__static_initialization_and_destruction_0(int, int)+0x34>
    2ad2:	4b05      	ldr	r3, [pc, #20]	; (2ae8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2ad4:	2201      	movs	r2, #1
    2ad6:	601a      	str	r2, [r3, #0]
    2ad8:	4b04      	ldr	r3, [pc, #16]	; (2aec <__static_initialization_and_destruction_0(int, int)+0x40>)
    2ada:	4618      	mov	r0, r3
    2adc:	f7fd ff48 	bl	970 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    2ae0:	bf00      	nop
    2ae2:	3708      	adds	r7, #8
    2ae4:	46bd      	mov	sp, r7
    2ae6:	bd80      	pop	{r7, pc}
    2ae8:	10000254 	.word	0x10000254
    2aec:	10000104 	.word	0x10000104

00002af0 <_GLOBAL__sub_I_GetRegistersFromStack>:
    2af0:	b580      	push	{r7, lr}
    2af2:	af00      	add	r7, sp, #0
    2af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2af8:	2001      	movs	r0, #1
    2afa:	f7ff ffd7 	bl	2aac <__static_initialization_and_destruction_0(int, int)>
    2afe:	bd80      	pop	{r7, pc}

00002b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2b00:	b580      	push	{r7, lr}
    2b02:	b084      	sub	sp, #16
    2b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2b06:	4b28      	ldr	r3, [pc, #160]	; (2ba8 <vTaskSwitchContext+0xa8>)
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d003      	beq.n	2b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2b0e:	4b27      	ldr	r3, [pc, #156]	; (2bac <vTaskSwitchContext+0xac>)
    2b10:	2201      	movs	r2, #1
    2b12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2b14:	e043      	b.n	2b9e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    2b16:	4b25      	ldr	r3, [pc, #148]	; (2bac <vTaskSwitchContext+0xac>)
    2b18:	2200      	movs	r2, #0
    2b1a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    2b1c:	f001 fcae 	bl	447c <ThreadRuntimeCounter>
    2b20:	4602      	mov	r2, r0
    2b22:	4b23      	ldr	r3, [pc, #140]	; (2bb0 <vTaskSwitchContext+0xb0>)
    2b24:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    2b26:	4b22      	ldr	r3, [pc, #136]	; (2bb0 <vTaskSwitchContext+0xb0>)
    2b28:	681a      	ldr	r2, [r3, #0]
    2b2a:	4b22      	ldr	r3, [pc, #136]	; (2bb4 <vTaskSwitchContext+0xb4>)
    2b2c:	681b      	ldr	r3, [r3, #0]
    2b2e:	429a      	cmp	r2, r3
    2b30:	d909      	bls.n	2b46 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    2b32:	4b21      	ldr	r3, [pc, #132]	; (2bb8 <vTaskSwitchContext+0xb8>)
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2b38:	4a1d      	ldr	r2, [pc, #116]	; (2bb0 <vTaskSwitchContext+0xb0>)
    2b3a:	6810      	ldr	r0, [r2, #0]
    2b3c:	4a1d      	ldr	r2, [pc, #116]	; (2bb4 <vTaskSwitchContext+0xb4>)
    2b3e:	6812      	ldr	r2, [r2, #0]
    2b40:	1a82      	subs	r2, r0, r2
    2b42:	440a      	add	r2, r1
    2b44:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    2b46:	4b1a      	ldr	r3, [pc, #104]	; (2bb0 <vTaskSwitchContext+0xb0>)
    2b48:	681b      	ldr	r3, [r3, #0]
    2b4a:	4a1a      	ldr	r2, [pc, #104]	; (2bb4 <vTaskSwitchContext+0xb4>)
    2b4c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2b4e:	4b1b      	ldr	r3, [pc, #108]	; (2bbc <vTaskSwitchContext+0xbc>)
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    2b54:	687b      	ldr	r3, [r7, #4]
    2b56:	fab3 f383 	clz	r3, r3
    2b5a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    2b5c:	78fb      	ldrb	r3, [r7, #3]
    2b5e:	f1c3 031f 	rsb	r3, r3, #31
    2b62:	60fb      	str	r3, [r7, #12]
    2b64:	68fa      	ldr	r2, [r7, #12]
    2b66:	4613      	mov	r3, r2
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	4413      	add	r3, r2
    2b6c:	009b      	lsls	r3, r3, #2
    2b6e:	4a14      	ldr	r2, [pc, #80]	; (2bc0 <vTaskSwitchContext+0xc0>)
    2b70:	4413      	add	r3, r2
    2b72:	60bb      	str	r3, [r7, #8]
    2b74:	68bb      	ldr	r3, [r7, #8]
    2b76:	685b      	ldr	r3, [r3, #4]
    2b78:	685a      	ldr	r2, [r3, #4]
    2b7a:	68bb      	ldr	r3, [r7, #8]
    2b7c:	605a      	str	r2, [r3, #4]
    2b7e:	68bb      	ldr	r3, [r7, #8]
    2b80:	685a      	ldr	r2, [r3, #4]
    2b82:	68bb      	ldr	r3, [r7, #8]
    2b84:	3308      	adds	r3, #8
    2b86:	429a      	cmp	r2, r3
    2b88:	d104      	bne.n	2b94 <vTaskSwitchContext+0x94>
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	685b      	ldr	r3, [r3, #4]
    2b8e:	685a      	ldr	r2, [r3, #4]
    2b90:	68bb      	ldr	r3, [r7, #8]
    2b92:	605a      	str	r2, [r3, #4]
    2b94:	68bb      	ldr	r3, [r7, #8]
    2b96:	685b      	ldr	r3, [r3, #4]
    2b98:	68db      	ldr	r3, [r3, #12]
    2b9a:	4a07      	ldr	r2, [pc, #28]	; (2bb8 <vTaskSwitchContext+0xb8>)
    2b9c:	6013      	str	r3, [r2, #0]
}
    2b9e:	bf00      	nop
    2ba0:	3710      	adds	r7, #16
    2ba2:	46bd      	mov	sp, r7
    2ba4:	bd80      	pop	{r7, pc}
    2ba6:	bf00      	nop
    2ba8:	100002ec 	.word	0x100002ec
    2bac:	100002e8 	.word	0x100002e8
    2bb0:	100002f4 	.word	0x100002f4
    2bb4:	100002f0 	.word	0x100002f0
    2bb8:	1000027c 	.word	0x1000027c
    2bbc:	100002e4 	.word	0x100002e4
    2bc0:	10000280 	.word	0x10000280

00002bc4 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    2bc4:	b480      	push	{r7}
    2bc6:	b083      	sub	sp, #12
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    2bcc:	bf00      	nop
    while (1)
    2bce:	e7fd      	b.n	2bcc <_exit+0x8>

00002bd0 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    2bd0:	b480      	push	{r7}
    2bd2:	af00      	add	r7, sp, #0
    return 1;
    2bd4:	2301      	movs	r3, #1
  }
    2bd6:	4618      	mov	r0, r3
    2bd8:	46bd      	mov	sp, r7
    2bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bde:	4770      	bx	lr

00002be0 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    2be0:	b480      	push	{r7}
    2be2:	b083      	sub	sp, #12
    2be4:	af00      	add	r7, sp, #0
    2be6:	6078      	str	r0, [r7, #4]
    2be8:	6039      	str	r1, [r7, #0]
    return -1;
    2bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    2bee:	4618      	mov	r0, r3
    2bf0:	370c      	adds	r7, #12
    2bf2:	46bd      	mov	sp, r7
    2bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bf8:	4770      	bx	lr
    2bfa:	Address 0x0000000000002bfa is out of bounds.


00002bfc <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b084      	sub	sp, #16
    2c00:	af00      	add	r7, sp, #0
    2c02:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    2c04:	6878      	ldr	r0, [r7, #4]
    2c06:	f003 faa3 	bl	6150 <strlen>
    2c0a:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    2c0c:	2300      	movs	r3, #0
    2c0e:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    2c10:	4b0b      	ldr	r3, [pc, #44]	; (2c40 <puts+0x44>)
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	68f9      	ldr	r1, [r7, #12]
    2c16:	6878      	ldr	r0, [r7, #4]
    2c18:	4798      	blx	r3
    2c1a:	4602      	mov	r2, r0
    2c1c:	68bb      	ldr	r3, [r7, #8]
    2c1e:	4413      	add	r3, r2
    2c20:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    2c22:	4b07      	ldr	r3, [pc, #28]	; (2c40 <puts+0x44>)
    2c24:	681b      	ldr	r3, [r3, #0]
    2c26:	2101      	movs	r1, #1
    2c28:	4806      	ldr	r0, [pc, #24]	; (2c44 <puts+0x48>)
    2c2a:	4798      	blx	r3
    2c2c:	4602      	mov	r2, r0
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	4413      	add	r3, r2
    2c32:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    2c34:	68bb      	ldr	r3, [r7, #8]
  }
    2c36:	4618      	mov	r0, r3
    2c38:	3710      	adds	r7, #16
    2c3a:	46bd      	mov	sp, r7
    2c3c:	bd80      	pop	{r7, pc}
    2c3e:	bf00      	nop
    2c40:	10000054 	.word	0x10000054
    2c44:	00006cb8 	.word	0x00006cb8

00002c48 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    2c48:	b480      	push	{r7}
    2c4a:	b085      	sub	sp, #20
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	60b9      	str	r1, [r7, #8]
    2c50:	607a      	str	r2, [r7, #4]
    2c52:	603b      	str	r3, [r7, #0]
    2c54:	4603      	mov	r3, r0
    2c56:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    2c58:	bf00      	nop
    2c5a:	3714      	adds	r7, #20
    2c5c:	46bd      	mov	sp, r7
    2c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c62:	4770      	bx	lr

00002c64 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    2c64:	b580      	push	{r7, lr}
    2c66:	b084      	sub	sp, #16
    2c68:	af00      	add	r7, sp, #0
    2c6a:	60b9      	str	r1, [r7, #8]
    2c6c:	607a      	str	r2, [r7, #4]
    2c6e:	603b      	str	r3, [r7, #0]
    2c70:	4603      	mov	r3, r0
    2c72:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    2c74:	7bfb      	ldrb	r3, [r7, #15]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d003      	beq.n	2c82 <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    2c7a:	7bfb      	ldrb	r3, [r7, #15]
    2c7c:	4618      	mov	r0, r3
    2c7e:	f001 fd9b 	bl	47b8 <_putchar>
  }
}
    2c82:	bf00      	nop
    2c84:	3710      	adds	r7, #16
    2c86:	46bd      	mov	sp, r7
    2c88:	bd80      	pop	{r7, pc}

00002c8a <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    2c8a:	b480      	push	{r7}
    2c8c:	b085      	sub	sp, #20
    2c8e:	af00      	add	r7, sp, #0
    2c90:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	60fb      	str	r3, [r7, #12]
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d003      	beq.n	2ca6 <_strlen(char const*)+0x1c>
    2c9e:	68fb      	ldr	r3, [r7, #12]
    2ca0:	3301      	adds	r3, #1
    2ca2:	60fb      	str	r3, [r7, #12]
    2ca4:	e7f7      	b.n	2c96 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    2ca6:	68fa      	ldr	r2, [r7, #12]
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	1ad3      	subs	r3, r2, r3
}
    2cac:	4618      	mov	r0, r3
    2cae:	3714      	adds	r7, #20
    2cb0:	46bd      	mov	sp, r7
    2cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cb6:	4770      	bx	lr

00002cb8 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    2cb8:	b480      	push	{r7}
    2cba:	b083      	sub	sp, #12
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	4603      	mov	r3, r0
    2cc0:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    2cc2:	79fb      	ldrb	r3, [r7, #7]
    2cc4:	2b2f      	cmp	r3, #47	; 0x2f
    2cc6:	d904      	bls.n	2cd2 <_is_digit(char)+0x1a>
    2cc8:	79fb      	ldrb	r3, [r7, #7]
    2cca:	2b39      	cmp	r3, #57	; 0x39
    2ccc:	d801      	bhi.n	2cd2 <_is_digit(char)+0x1a>
    2cce:	2301      	movs	r3, #1
    2cd0:	e000      	b.n	2cd4 <_is_digit(char)+0x1c>
    2cd2:	2300      	movs	r3, #0
}
    2cd4:	4618      	mov	r0, r3
    2cd6:	370c      	adds	r7, #12
    2cd8:	46bd      	mov	sp, r7
    2cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cde:	4770      	bx	lr

00002ce0 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b084      	sub	sp, #16
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    2ce8:	2300      	movs	r3, #0
    2cea:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	4618      	mov	r0, r3
    2cf4:	f7ff ffe0 	bl	2cb8 <_is_digit(char)>
    2cf8:	4603      	mov	r3, r0
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d00f      	beq.n	2d1e <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2cfe:	68fa      	ldr	r2, [r7, #12]
    2d00:	4613      	mov	r3, r2
    2d02:	009b      	lsls	r3, r3, #2
    2d04:	4413      	add	r3, r2
    2d06:	005b      	lsls	r3, r3, #1
    2d08:	4618      	mov	r0, r3
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	1c59      	adds	r1, r3, #1
    2d10:	687a      	ldr	r2, [r7, #4]
    2d12:	6011      	str	r1, [r2, #0]
    2d14:	781b      	ldrb	r3, [r3, #0]
    2d16:	4403      	add	r3, r0
    2d18:	3b30      	subs	r3, #48	; 0x30
    2d1a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    2d1c:	e7e6      	b.n	2cec <_atoi(char const**)+0xc>
  }
  return i;
    2d1e:	68fb      	ldr	r3, [r7, #12]
}
    2d20:	4618      	mov	r0, r3
    2d22:	3710      	adds	r7, #16
    2d24:	46bd      	mov	sp, r7
    2d26:	bd80      	pop	{r7, pc}

00002d28 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2d28:	b590      	push	{r4, r7, lr}
    2d2a:	b089      	sub	sp, #36	; 0x24
    2d2c:	af00      	add	r7, sp, #0
    2d2e:	60f8      	str	r0, [r7, #12]
    2d30:	60b9      	str	r1, [r7, #8]
    2d32:	607a      	str	r2, [r7, #4]
    2d34:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d3c:	f003 0302 	and.w	r3, r3, #2
    2d40:	2b00      	cmp	r3, #0
    2d42:	d10e      	bne.n	2d62 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    2d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2d48:	429a      	cmp	r2, r3
    2d4a:	d20a      	bcs.n	2d62 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    2d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d4e:	2b1f      	cmp	r3, #31
    2d50:	d807      	bhi.n	2d62 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    2d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d54:	1c5a      	adds	r2, r3, #1
    2d56:	637a      	str	r2, [r7, #52]	; 0x34
    2d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d5a:	4413      	add	r3, r2
    2d5c:	2230      	movs	r2, #48	; 0x30
    2d5e:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d60:	e7eb      	b.n	2d3a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d64:	f003 0302 	and.w	r3, r3, #2
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d113      	bne.n	2d94 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    2d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d6e:	f003 0301 	and.w	r3, r3, #1
    2d72:	2b00      	cmp	r3, #0
    2d74:	d00e      	beq.n	2d94 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    2d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2d7a:	429a      	cmp	r2, r3
    2d7c:	d20a      	bcs.n	2d94 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    2d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d80:	2b1f      	cmp	r3, #31
    2d82:	d807      	bhi.n	2d94 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    2d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d86:	1c5a      	adds	r2, r3, #1
    2d88:	637a      	str	r2, [r7, #52]	; 0x34
    2d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d8c:	4413      	add	r3, r2
    2d8e:	2230      	movs	r2, #48	; 0x30
    2d90:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2d92:	e7e6      	b.n	2d62 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    2d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d96:	f003 0310 	and.w	r3, r3, #16
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d058      	beq.n	2e50 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2da4:	2b00      	cmp	r3, #0
    2da6:	d116      	bne.n	2dd6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    2da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2daa:	2b00      	cmp	r3, #0
    2dac:	d013      	beq.n	2dd6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    2dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2db2:	429a      	cmp	r2, r3
    2db4:	d003      	beq.n	2dbe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    2db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2dba:	429a      	cmp	r2, r3
    2dbc:	d10b      	bne.n	2dd6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    2dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dc0:	3b01      	subs	r3, #1
    2dc2:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    2dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d005      	beq.n	2dd6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    2dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dcc:	2b10      	cmp	r3, #16
    2dce:	d102      	bne.n	2dd6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    2dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dd2:	3b01      	subs	r3, #1
    2dd4:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dd8:	2b10      	cmp	r3, #16
    2dda:	d10f      	bne.n	2dfc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    2ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2dde:	f003 0320 	and.w	r3, r3, #32
    2de2:	2b00      	cmp	r3, #0
    2de4:	d10a      	bne.n	2dfc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    2de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2de8:	2b1f      	cmp	r3, #31
    2dea:	d807      	bhi.n	2dfc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    2dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dee:	1c5a      	adds	r2, r3, #1
    2df0:	637a      	str	r2, [r7, #52]	; 0x34
    2df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2df4:	4413      	add	r3, r2
    2df6:	2278      	movs	r2, #120	; 0x78
    2df8:	701a      	strb	r2, [r3, #0]
    2dfa:	e01f      	b.n	2e3c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dfe:	2b10      	cmp	r3, #16
    2e00:	d10f      	bne.n	2e22 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    2e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e04:	f003 0320 	and.w	r3, r3, #32
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d00a      	beq.n	2e22 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    2e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e0e:	2b1f      	cmp	r3, #31
    2e10:	d807      	bhi.n	2e22 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    2e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e14:	1c5a      	adds	r2, r3, #1
    2e16:	637a      	str	r2, [r7, #52]	; 0x34
    2e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e1a:	4413      	add	r3, r2
    2e1c:	2258      	movs	r2, #88	; 0x58
    2e1e:	701a      	strb	r2, [r3, #0]
    2e20:	e00c      	b.n	2e3c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e24:	2b02      	cmp	r3, #2
    2e26:	d109      	bne.n	2e3c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    2e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e2a:	2b1f      	cmp	r3, #31
    2e2c:	d806      	bhi.n	2e3c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    2e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e30:	1c5a      	adds	r2, r3, #1
    2e32:	637a      	str	r2, [r7, #52]	; 0x34
    2e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e36:	4413      	add	r3, r2
    2e38:	2262      	movs	r2, #98	; 0x62
    2e3a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e3e:	2b1f      	cmp	r3, #31
    2e40:	d806      	bhi.n	2e50 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    2e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e44:	1c5a      	adds	r2, r3, #1
    2e46:	637a      	str	r2, [r7, #52]	; 0x34
    2e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e4a:	4413      	add	r3, r2
    2e4c:	2230      	movs	r2, #48	; 0x30
    2e4e:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    2e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e52:	2b00      	cmp	r3, #0
    2e54:	d014      	beq.n	2e80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    2e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2e5a:	429a      	cmp	r2, r3
    2e5c:	d110      	bne.n	2e80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    2e5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    2e62:	2b00      	cmp	r3, #0
    2e64:	d109      	bne.n	2e7a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    2e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e68:	f003 0304 	and.w	r3, r3, #4
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d104      	bne.n	2e7a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    2e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2e72:	f003 0308 	and.w	r3, r3, #8
    2e76:	2b00      	cmp	r3, #0
    2e78:	d002      	beq.n	2e80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    2e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e7c:	3b01      	subs	r3, #1
    2e7e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e82:	2b1f      	cmp	r3, #31
    2e84:	d824      	bhi.n	2ed0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    2e86:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d007      	beq.n	2e9e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    2e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e90:	1c5a      	adds	r2, r3, #1
    2e92:	637a      	str	r2, [r7, #52]	; 0x34
    2e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e96:	4413      	add	r3, r2
    2e98:	222d      	movs	r2, #45	; 0x2d
    2e9a:	701a      	strb	r2, [r3, #0]
    2e9c:	e018      	b.n	2ed0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    2e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2ea0:	f003 0304 	and.w	r3, r3, #4
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d007      	beq.n	2eb8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2eaa:	1c5a      	adds	r2, r3, #1
    2eac:	637a      	str	r2, [r7, #52]	; 0x34
    2eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2eb0:	4413      	add	r3, r2
    2eb2:	222b      	movs	r2, #43	; 0x2b
    2eb4:	701a      	strb	r2, [r3, #0]
    2eb6:	e00b      	b.n	2ed0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    2eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2eba:	f003 0308 	and.w	r3, r3, #8
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d006      	beq.n	2ed0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    2ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ec4:	1c5a      	adds	r2, r3, #1
    2ec6:	637a      	str	r2, [r7, #52]	; 0x34
    2ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2eca:	4413      	add	r3, r2
    2ecc:	2220      	movs	r2, #32
    2ece:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2ed2:	f003 0302 	and.w	r3, r3, #2
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d116      	bne.n	2f08 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    2eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2edc:	f003 0301 	and.w	r3, r3, #1
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d111      	bne.n	2f08 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    2ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ee6:	61fb      	str	r3, [r7, #28]
    2ee8:	69fa      	ldr	r2, [r7, #28]
    2eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2eec:	429a      	cmp	r2, r3
    2eee:	d20b      	bcs.n	2f08 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    2ef0:	687a      	ldr	r2, [r7, #4]
    2ef2:	1c53      	adds	r3, r2, #1
    2ef4:	607b      	str	r3, [r7, #4]
    2ef6:	68fc      	ldr	r4, [r7, #12]
    2ef8:	683b      	ldr	r3, [r7, #0]
    2efa:	68b9      	ldr	r1, [r7, #8]
    2efc:	2020      	movs	r0, #32
    2efe:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    2f00:	69fb      	ldr	r3, [r7, #28]
    2f02:	3301      	adds	r3, #1
    2f04:	61fb      	str	r3, [r7, #28]
    2f06:	e7ef      	b.n	2ee8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    2f08:	2300      	movs	r3, #0
    2f0a:	61bb      	str	r3, [r7, #24]
    2f0c:	69ba      	ldr	r2, [r7, #24]
    2f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f10:	429a      	cmp	r2, r3
    2f12:	d211      	bcs.n	2f38 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    2f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2f16:	69bb      	ldr	r3, [r7, #24]
    2f18:	1ad3      	subs	r3, r2, r3
    2f1a:	3b01      	subs	r3, #1
    2f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2f1e:	4413      	add	r3, r2
    2f20:	7818      	ldrb	r0, [r3, #0]
    2f22:	687a      	ldr	r2, [r7, #4]
    2f24:	1c53      	adds	r3, r2, #1
    2f26:	607b      	str	r3, [r7, #4]
    2f28:	68fc      	ldr	r4, [r7, #12]
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	68b9      	ldr	r1, [r7, #8]
    2f2e:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    2f30:	69bb      	ldr	r3, [r7, #24]
    2f32:	3301      	adds	r3, #1
    2f34:	61bb      	str	r3, [r7, #24]
    2f36:	e7e9      	b.n	2f0c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    2f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2f3a:	f003 0302 	and.w	r3, r3, #2
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d00e      	beq.n	2f60 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    2f42:	687a      	ldr	r2, [r7, #4]
    2f44:	697b      	ldr	r3, [r7, #20]
    2f46:	1ad3      	subs	r3, r2, r3
    2f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2f4a:	429a      	cmp	r2, r3
    2f4c:	d908      	bls.n	2f60 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    2f4e:	687a      	ldr	r2, [r7, #4]
    2f50:	1c53      	adds	r3, r2, #1
    2f52:	607b      	str	r3, [r7, #4]
    2f54:	68fc      	ldr	r4, [r7, #12]
    2f56:	683b      	ldr	r3, [r7, #0]
    2f58:	68b9      	ldr	r1, [r7, #8]
    2f5a:	2020      	movs	r0, #32
    2f5c:	47a0      	blx	r4
    while (idx - start_idx < width) {
    2f5e:	e7f0      	b.n	2f42 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    2f60:	687b      	ldr	r3, [r7, #4]
}
    2f62:	4618      	mov	r0, r3
    2f64:	3724      	adds	r7, #36	; 0x24
    2f66:	46bd      	mov	sp, r7
    2f68:	bd90      	pop	{r4, r7, pc}

00002f6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2f6a:	b580      	push	{r7, lr}
    2f6c:	b096      	sub	sp, #88	; 0x58
    2f6e:	af08      	add	r7, sp, #32
    2f70:	60f8      	str	r0, [r7, #12]
    2f72:	60b9      	str	r1, [r7, #8]
    2f74:	607a      	str	r2, [r7, #4]
    2f76:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    2f78:	2300      	movs	r3, #0
    2f7a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    2f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d103      	bne.n	2f8a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    2f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f84:	f023 0310 	bic.w	r3, r3, #16
    2f88:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2f90:	2b00      	cmp	r3, #0
    2f92:	d002      	beq.n	2f9a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    2f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f96:	2b00      	cmp	r3, #0
    2f98:	d034      	beq.n	3004 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    2f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2f9e:	fbb3 f2f2 	udiv	r2, r3, r2
    2fa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    2fa4:	fb01 f202 	mul.w	r2, r1, r2
    2fa8:	1a9b      	subs	r3, r3, r2
    2faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2fae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2fb2:	2b09      	cmp	r3, #9
    2fb4:	d804      	bhi.n	2fc0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    2fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2fba:	3330      	adds	r3, #48	; 0x30
    2fbc:	b2da      	uxtb	r2, r3
    2fbe:	e00d      	b.n	2fdc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    2fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2fc2:	f003 0320 	and.w	r3, r3, #32
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d001      	beq.n	2fce <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    2fca:	2241      	movs	r2, #65	; 0x41
    2fcc:	e000      	b.n	2fd0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    2fce:	2261      	movs	r2, #97	; 0x61
    2fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2fd4:	4413      	add	r3, r2
    2fd6:	b2db      	uxtb	r3, r3
    2fd8:	3b0a      	subs	r3, #10
    2fda:	b2da      	uxtb	r2, r3
    2fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2fde:	1c59      	adds	r1, r3, #1
    2fe0:	6379      	str	r1, [r7, #52]	; 0x34
    2fe2:	f107 0138 	add.w	r1, r7, #56	; 0x38
    2fe6:	440b      	add	r3, r1
    2fe8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    2fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2ff0:	fbb2 f3f3 	udiv	r3, r2, r3
    2ff4:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ff8:	2b00      	cmp	r3, #0
    2ffa:	d003      	beq.n	3004 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    2ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ffe:	2b1f      	cmp	r3, #31
    3000:	d800      	bhi.n	3004 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    3002:	e7ca      	b.n	2f9a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3006:	9306      	str	r3, [sp, #24]
    3008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    300a:	9305      	str	r3, [sp, #20]
    300c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    300e:	9304      	str	r3, [sp, #16]
    3010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3012:	9303      	str	r3, [sp, #12]
    3014:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    3018:	9302      	str	r3, [sp, #8]
    301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    301c:	9301      	str	r3, [sp, #4]
    301e:	f107 0310 	add.w	r3, r7, #16
    3022:	9300      	str	r3, [sp, #0]
    3024:	683b      	ldr	r3, [r7, #0]
    3026:	687a      	ldr	r2, [r7, #4]
    3028:	68b9      	ldr	r1, [r7, #8]
    302a:	68f8      	ldr	r0, [r7, #12]
    302c:	f7ff fe7c 	bl	2d28 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3030:	4603      	mov	r3, r0
}
    3032:	4618      	mov	r0, r3
    3034:	3738      	adds	r7, #56	; 0x38
    3036:	46bd      	mov	sp, r7
    3038:	bd80      	pop	{r7, pc}

0000303a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    303a:	b590      	push	{r4, r7, lr}
    303c:	b097      	sub	sp, #92	; 0x5c
    303e:	af08      	add	r7, sp, #32
    3040:	60f8      	str	r0, [r7, #12]
    3042:	60b9      	str	r1, [r7, #8]
    3044:	607a      	str	r2, [r7, #4]
    3046:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3048:	2300      	movs	r3, #0
    304a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    304c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    3050:	4323      	orrs	r3, r4
    3052:	d103      	bne.n	305c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3056:	f023 0310 	bic.w	r3, r3, #16
    305a:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    305c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3062:	2b00      	cmp	r3, #0
    3064:	d003      	beq.n	306e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    3066:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    306a:	4323      	orrs	r3, r4
    306c:	d03a      	beq.n	30e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    306e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    3072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    3076:	f001 fee1 	bl	4e3c <__aeabi_uldivmod>
    307a:	461c      	mov	r4, r3
    307c:	4613      	mov	r3, r2
    307e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3086:	2b09      	cmp	r3, #9
    3088:	d804      	bhi.n	3094 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    308a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    308e:	3330      	adds	r3, #48	; 0x30
    3090:	b2da      	uxtb	r2, r3
    3092:	e00d      	b.n	30b0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    3094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3096:	f003 0320 	and.w	r3, r3, #32
    309a:	2b00      	cmp	r3, #0
    309c:	d001      	beq.n	30a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    309e:	2241      	movs	r2, #65	; 0x41
    30a0:	e000      	b.n	30a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    30a2:	2261      	movs	r2, #97	; 0x61
    30a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    30a8:	4413      	add	r3, r2
    30aa:	b2db      	uxtb	r3, r3
    30ac:	3b0a      	subs	r3, #10
    30ae:	b2da      	uxtb	r2, r3
    30b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30b2:	1c59      	adds	r1, r3, #1
    30b4:	6379      	str	r1, [r7, #52]	; 0x34
    30b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
    30ba:	440b      	add	r3, r1
    30bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    30c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    30c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    30c8:	f001 feb8 	bl	4e3c <__aeabi_uldivmod>
    30cc:	4603      	mov	r3, r0
    30ce:	460c      	mov	r4, r1
    30d0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    30d4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    30d8:	4323      	orrs	r3, r4
    30da:	d003      	beq.n	30e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    30dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30de:	2b1f      	cmp	r3, #31
    30e0:	d800      	bhi.n	30e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    30e2:	e7c4      	b.n	306e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    30e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    30e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    30e8:	9206      	str	r2, [sp, #24]
    30ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    30ec:	9205      	str	r2, [sp, #20]
    30ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    30f0:	9204      	str	r2, [sp, #16]
    30f2:	9303      	str	r3, [sp, #12]
    30f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    30f8:	9302      	str	r3, [sp, #8]
    30fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30fc:	9301      	str	r3, [sp, #4]
    30fe:	f107 0310 	add.w	r3, r7, #16
    3102:	9300      	str	r3, [sp, #0]
    3104:	683b      	ldr	r3, [r7, #0]
    3106:	687a      	ldr	r2, [r7, #4]
    3108:	68b9      	ldr	r1, [r7, #8]
    310a:	68f8      	ldr	r0, [r7, #12]
    310c:	f7ff fe0c 	bl	2d28 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3110:	4603      	mov	r3, r0
}
    3112:	4618      	mov	r0, r3
    3114:	373c      	adds	r7, #60	; 0x3c
    3116:	46bd      	mov	sp, r7
    3118:	bd90      	pop	{r4, r7, pc}
    311a:	Address 0x000000000000311a is out of bounds.


0000311c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    311c:	b590      	push	{r4, r7, lr}
    311e:	b09b      	sub	sp, #108	; 0x6c
    3120:	af00      	add	r7, sp, #0
    3122:	6178      	str	r0, [r7, #20]
    3124:	6139      	str	r1, [r7, #16]
    3126:	60fa      	str	r2, [r7, #12]
    3128:	60bb      	str	r3, [r7, #8]
    312a:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3132:	e9d7 0100 	ldrd	r0, r1, [r7]
    3136:	f001 fd23 	bl	4b80 <__aeabi_d2f>
    313a:	4603      	mov	r3, r0
    313c:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    313e:	2300      	movs	r3, #0
    3140:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    3142:	f04f 0300 	mov.w	r3, #0
    3146:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3148:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    314c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    314e:	2300      	movs	r3, #0
    3150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3154:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3158:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3160:	d50a      	bpl.n	3178 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3162:	2301      	movs	r3, #1
    3164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3168:	ed9f 7aab 	vldr	s14, [pc, #684]	; 3418 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    316c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3170:	ee77 7a67 	vsub.f32	s15, s14, s15
    3174:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3180:	2b00      	cmp	r3, #0
    3182:	d101      	bne.n	3188 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3184:	2306      	movs	r3, #6
    3186:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    318a:	2b1f      	cmp	r3, #31
    318c:	d80f      	bhi.n	31ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    318e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3190:	2b09      	cmp	r3, #9
    3192:	d90c      	bls.n	31ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3196:	1c5a      	adds	r2, r3, #1
    3198:	663a      	str	r2, [r7, #96]	; 0x60
    319a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    319e:	4413      	add	r3, r2
    31a0:	2230      	movs	r2, #48	; 0x30
    31a2:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    31a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    31a8:	3b01      	subs	r3, #1
    31aa:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    31ac:	e7ec      	b.n	3188 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    31ae:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    31b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    31b6:	ee17 3a90 	vmov	r3, s15
    31ba:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    31bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    31be:	ee07 3a90 	vmov	s15, r3
    31c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    31c6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    31ca:	ee37 7a67 	vsub.f32	s14, s14, s15
    31ce:	4a93      	ldr	r2, [pc, #588]	; (341c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    31d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    31d2:	009b      	lsls	r3, r3, #2
    31d4:	4413      	add	r3, r2
    31d6:	edd3 7a00 	vldr	s15, [r3]
    31da:	ee67 7a27 	vmul.f32	s15, s14, s15
    31de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    31e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    31e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    31ea:	ee17 3a90 	vmov	r3, s15
    31ee:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    31f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    31f2:	ee07 3a90 	vmov	s15, r3
    31f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    31fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    31fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    3202:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    3206:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    320a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    320e:	eef4 7ac7 	vcmpe.f32	s15, s14
    3212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3216:	dd18      	ble.n	324a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    321a:	3301      	adds	r3, #1
    321c:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    321e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3220:	ee07 3a90 	vmov	s15, r3
    3224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3228:	4a7c      	ldr	r2, [pc, #496]	; (341c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    322a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    322c:	009b      	lsls	r3, r3, #2
    322e:	4413      	add	r3, r2
    3230:	edd3 7a00 	vldr	s15, [r3]
    3234:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    323c:	db19      	blt.n	3272 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    323e:	2300      	movs	r3, #0
    3240:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3244:	3301      	adds	r3, #1
    3246:	65bb      	str	r3, [r7, #88]	; 0x58
    3248:	e013      	b.n	3272 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    324a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    324e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3252:	eef4 7a47 	vcmp.f32	s15, s14
    3256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    325a:	d10a      	bne.n	3272 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    325c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    325e:	2b00      	cmp	r3, #0
    3260:	d004      	beq.n	326c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3264:	f003 0301 	and.w	r3, r3, #1
    3268:	2b00      	cmp	r3, #0
    326a:	d002      	beq.n	3272 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    326c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    326e:	3301      	adds	r3, #1
    3270:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3272:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3276:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3420 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    327a:	eef4 7ac7 	vcmpe.f32	s15, s14
    327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3282:	dd01      	ble.n	3288 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3284:	2300      	movs	r3, #0
    3286:	e166      	b.n	3556 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    328a:	2b00      	cmp	r3, #0
    328c:	d129      	bne.n	32e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    328e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3290:	ee07 3a90 	vmov	s15, r3
    3294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3298:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    329c:	ee77 7a67 	vsub.f32	s15, s14, s15
    32a0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    32a4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    32a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    32ac:	eef4 7ac7 	vcmpe.f32	s15, s14
    32b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    32b4:	dd03      	ble.n	32be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    32b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    32b8:	3301      	adds	r3, #1
    32ba:	65bb      	str	r3, [r7, #88]	; 0x58
    32bc:	e062      	b.n	3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    32be:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    32c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    32c6:	eef4 7a47 	vcmp.f32	s15, s14
    32ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    32ce:	d159      	bne.n	3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    32d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    32d2:	f003 0301 	and.w	r3, r3, #1
    32d6:	2b00      	cmp	r3, #0
    32d8:	d054      	beq.n	3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    32da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    32dc:	3301      	adds	r3, #1
    32de:	65bb      	str	r3, [r7, #88]	; 0x58
    32e0:	e050      	b.n	3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    32e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    32e4:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    32e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    32e8:	2b1f      	cmp	r3, #31
    32ea:	d828      	bhi.n	333e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    32ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32ee:	3b01      	subs	r3, #1
    32f0:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    32f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
    32f4:	4b4b      	ldr	r3, [pc, #300]	; (3424 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    32f6:	fba3 2301 	umull	r2, r3, r3, r1
    32fa:	08da      	lsrs	r2, r3, #3
    32fc:	4613      	mov	r3, r2
    32fe:	009b      	lsls	r3, r3, #2
    3300:	4413      	add	r3, r2
    3302:	005b      	lsls	r3, r3, #1
    3304:	1aca      	subs	r2, r1, r3
    3306:	b2d3      	uxtb	r3, r2
    3308:	3330      	adds	r3, #48	; 0x30
    330a:	b2d9      	uxtb	r1, r3
    330c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    330e:	1c5a      	adds	r2, r3, #1
    3310:	663a      	str	r2, [r7, #96]	; 0x60
    3312:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3316:	4413      	add	r3, r2
    3318:	460a      	mov	r2, r1
    331a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3320:	4a40      	ldr	r2, [pc, #256]	; (3424 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3322:	fba2 2303 	umull	r2, r3, r2, r3
    3326:	08db      	lsrs	r3, r3, #3
    3328:	657b      	str	r3, [r7, #84]	; 0x54
    332a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    332c:	2b00      	cmp	r3, #0
    332e:	bf0c      	ite	eq
    3330:	2301      	moveq	r3, #1
    3332:	2300      	movne	r3, #0
    3334:	b2db      	uxtb	r3, r3
    3336:	2b00      	cmp	r3, #0
    3338:	d100      	bne.n	333c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    333a:	e7d4      	b.n	32e6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    333c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    333e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3340:	2b1f      	cmp	r3, #31
    3342:	d806      	bhi.n	3352 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3346:	1e5a      	subs	r2, r3, #1
    3348:	653a      	str	r2, [r7, #80]	; 0x50
    334a:	2b00      	cmp	r3, #0
    334c:	d001      	beq.n	3352 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    334e:	2301      	movs	r3, #1
    3350:	e000      	b.n	3354 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3352:	2300      	movs	r3, #0
    3354:	2b00      	cmp	r3, #0
    3356:	d009      	beq.n	336c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    3358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    335a:	1c5a      	adds	r2, r3, #1
    335c:	663a      	str	r2, [r7, #96]	; 0x60
    335e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3362:	4413      	add	r3, r2
    3364:	2230      	movs	r2, #48	; 0x30
    3366:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    336a:	e7e8      	b.n	333e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    336c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    336e:	2b1f      	cmp	r3, #31
    3370:	d808      	bhi.n	3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    3372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3374:	1c5a      	adds	r2, r3, #1
    3376:	663a      	str	r2, [r7, #96]	; 0x60
    3378:	f107 0268 	add.w	r2, r7, #104	; 0x68
    337c:	4413      	add	r3, r2
    337e:	222e      	movs	r2, #46	; 0x2e
    3380:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3386:	2b1f      	cmp	r3, #31
    3388:	d829      	bhi.n	33de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    338a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    338c:	4b26      	ldr	r3, [pc, #152]	; (3428 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    338e:	fb83 1302 	smull	r1, r3, r3, r2
    3392:	1099      	asrs	r1, r3, #2
    3394:	17d3      	asrs	r3, r2, #31
    3396:	1ac9      	subs	r1, r1, r3
    3398:	460b      	mov	r3, r1
    339a:	009b      	lsls	r3, r3, #2
    339c:	440b      	add	r3, r1
    339e:	005b      	lsls	r3, r3, #1
    33a0:	1ad1      	subs	r1, r2, r3
    33a2:	b2cb      	uxtb	r3, r1
    33a4:	3330      	adds	r3, #48	; 0x30
    33a6:	b2d9      	uxtb	r1, r3
    33a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    33aa:	1c5a      	adds	r2, r3, #1
    33ac:	663a      	str	r2, [r7, #96]	; 0x60
    33ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
    33b2:	4413      	add	r3, r2
    33b4:	460a      	mov	r2, r1
    33b6:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    33ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    33bc:	4a1a      	ldr	r2, [pc, #104]	; (3428 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    33be:	fb82 1203 	smull	r1, r2, r2, r3
    33c2:	1092      	asrs	r2, r2, #2
    33c4:	17db      	asrs	r3, r3, #31
    33c6:	1ad3      	subs	r3, r2, r3
    33c8:	65bb      	str	r3, [r7, #88]	; 0x58
    33ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    33cc:	2b00      	cmp	r3, #0
    33ce:	bf0c      	ite	eq
    33d0:	2301      	moveq	r3, #1
    33d2:	2300      	movne	r3, #0
    33d4:	b2db      	uxtb	r3, r3
    33d6:	2b00      	cmp	r3, #0
    33d8:	d100      	bne.n	33dc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    33da:	e7d3      	b.n	3384 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    33dc:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    33de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33e2:	f003 0302 	and.w	r3, r3, #2
    33e6:	2b00      	cmp	r3, #0
    33e8:	d120      	bne.n	342c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    33ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    33ee:	f003 0301 	and.w	r3, r3, #1
    33f2:	2b00      	cmp	r3, #0
    33f4:	d01a      	beq.n	342c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    33f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    33f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    33fa:	429a      	cmp	r2, r3
    33fc:	d216      	bcs.n	342c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    33fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3400:	2b1f      	cmp	r3, #31
    3402:	d813      	bhi.n	342c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    3404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3406:	1c5a      	adds	r2, r3, #1
    3408:	663a      	str	r2, [r7, #96]	; 0x60
    340a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    340e:	4413      	add	r3, r2
    3410:	2230      	movs	r2, #48	; 0x30
    3412:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3416:	e7e2      	b.n	33de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    3418:	00000000 	.word	0x00000000
    341c:	00006cbc 	.word	0x00006cbc
    3420:	4f000000 	.word	0x4f000000
    3424:	cccccccd 	.word	0xcccccccd
    3428:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    342c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    342e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3430:	429a      	cmp	r2, r3
    3432:	d112      	bne.n	345a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3438:	2b00      	cmp	r3, #0
    343a:	d10b      	bne.n	3454 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    343c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3440:	f003 0304 	and.w	r3, r3, #4
    3444:	2b00      	cmp	r3, #0
    3446:	d105      	bne.n	3454 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    344c:	f003 0308 	and.w	r3, r3, #8
    3450:	2b00      	cmp	r3, #0
    3452:	d002      	beq.n	345a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    3454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3456:	3b01      	subs	r3, #1
    3458:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    345a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    345c:	2b1f      	cmp	r3, #31
    345e:	d82c      	bhi.n	34ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    3460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3464:	2b00      	cmp	r3, #0
    3466:	d009      	beq.n	347c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    3468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    346a:	1c5a      	adds	r2, r3, #1
    346c:	663a      	str	r2, [r7, #96]	; 0x60
    346e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3472:	4413      	add	r3, r2
    3474:	222d      	movs	r2, #45	; 0x2d
    3476:	f803 2c50 	strb.w	r2, [r3, #-80]
    347a:	e01e      	b.n	34ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    347c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3480:	f003 0304 	and.w	r3, r3, #4
    3484:	2b00      	cmp	r3, #0
    3486:	d009      	beq.n	349c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3488:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    348a:	1c5a      	adds	r2, r3, #1
    348c:	663a      	str	r2, [r7, #96]	; 0x60
    348e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3492:	4413      	add	r3, r2
    3494:	222b      	movs	r2, #43	; 0x2b
    3496:	f803 2c50 	strb.w	r2, [r3, #-80]
    349a:	e00e      	b.n	34ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    349c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    34a0:	f003 0308 	and.w	r3, r3, #8
    34a4:	2b00      	cmp	r3, #0
    34a6:	d008      	beq.n	34ba <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    34a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    34aa:	1c5a      	adds	r2, r3, #1
    34ac:	663a      	str	r2, [r7, #96]	; 0x60
    34ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
    34b2:	4413      	add	r3, r2
    34b4:	2220      	movs	r2, #32
    34b6:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    34ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    34be:	f003 0302 	and.w	r3, r3, #2
    34c2:	2b00      	cmp	r3, #0
    34c4:	d117      	bne.n	34f6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    34c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    34ca:	f003 0301 	and.w	r3, r3, #1
    34ce:	2b00      	cmp	r3, #0
    34d0:	d111      	bne.n	34f6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    34d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    34d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    34d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    34d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    34da:	429a      	cmp	r2, r3
    34dc:	d20b      	bcs.n	34f6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    34de:	68fa      	ldr	r2, [r7, #12]
    34e0:	1c53      	adds	r3, r2, #1
    34e2:	60fb      	str	r3, [r7, #12]
    34e4:	697c      	ldr	r4, [r7, #20]
    34e6:	68bb      	ldr	r3, [r7, #8]
    34e8:	6939      	ldr	r1, [r7, #16]
    34ea:	2020      	movs	r0, #32
    34ec:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    34ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34f0:	3301      	adds	r3, #1
    34f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    34f4:	e7ef      	b.n	34d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    34f6:	2300      	movs	r3, #0
    34f8:	64bb      	str	r3, [r7, #72]	; 0x48
    34fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    34fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    34fe:	429a      	cmp	r2, r3
    3500:	d213      	bcs.n	352a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3502:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3506:	1ad3      	subs	r3, r2, r3
    3508:	3b01      	subs	r3, #1
    350a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    350e:	4413      	add	r3, r2
    3510:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    3514:	68fa      	ldr	r2, [r7, #12]
    3516:	1c53      	adds	r3, r2, #1
    3518:	60fb      	str	r3, [r7, #12]
    351a:	697c      	ldr	r4, [r7, #20]
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	6939      	ldr	r1, [r7, #16]
    3520:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3524:	3301      	adds	r3, #1
    3526:	64bb      	str	r3, [r7, #72]	; 0x48
    3528:	e7e7      	b.n	34fa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    352a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    352e:	f003 0302 	and.w	r3, r3, #2
    3532:	2b00      	cmp	r3, #0
    3534:	d00e      	beq.n	3554 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    3536:	68fa      	ldr	r2, [r7, #12]
    3538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    353a:	1ad3      	subs	r3, r2, r3
    353c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    353e:	429a      	cmp	r2, r3
    3540:	d908      	bls.n	3554 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    3542:	68fa      	ldr	r2, [r7, #12]
    3544:	1c53      	adds	r3, r2, #1
    3546:	60fb      	str	r3, [r7, #12]
    3548:	697c      	ldr	r4, [r7, #20]
    354a:	68bb      	ldr	r3, [r7, #8]
    354c:	6939      	ldr	r1, [r7, #16]
    354e:	2020      	movs	r0, #32
    3550:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3552:	e7f0      	b.n	3536 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    3554:	68fb      	ldr	r3, [r7, #12]
}
    3556:	4618      	mov	r0, r3
    3558:	376c      	adds	r7, #108	; 0x6c
    355a:	46bd      	mov	sp, r7
    355c:	bd90      	pop	{r4, r7, pc}
    355e:	bf00      	nop

00003560 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3560:	b5b0      	push	{r4, r5, r7, lr}
    3562:	b0a0      	sub	sp, #128	; 0x80
    3564:	af0a      	add	r7, sp, #40	; 0x28
    3566:	60f8      	str	r0, [r7, #12]
    3568:	60b9      	str	r1, [r7, #8]
    356a:	607a      	str	r2, [r7, #4]
    356c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    356e:	2300      	movs	r3, #0
    3570:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    3572:	68bb      	ldr	r3, [r7, #8]
    3574:	2b00      	cmp	r3, #0
    3576:	d101      	bne.n	357c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    3578:	4ba2      	ldr	r3, [pc, #648]	; (3804 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    357a:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    357c:	683b      	ldr	r3, [r7, #0]
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	2b00      	cmp	r3, #0
    3582:	f000 8445 	beq.w	3e10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    3586:	683b      	ldr	r3, [r7, #0]
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	2b25      	cmp	r3, #37	; 0x25
    358c:	d00d      	beq.n	35aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    358e:	683b      	ldr	r3, [r7, #0]
    3590:	7818      	ldrb	r0, [r3, #0]
    3592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3594:	1c53      	adds	r3, r2, #1
    3596:	647b      	str	r3, [r7, #68]	; 0x44
    3598:	68fc      	ldr	r4, [r7, #12]
    359a:	687b      	ldr	r3, [r7, #4]
    359c:	68b9      	ldr	r1, [r7, #8]
    359e:	47a0      	blx	r4
      format++;
    35a0:	683b      	ldr	r3, [r7, #0]
    35a2:	3301      	adds	r3, #1
    35a4:	603b      	str	r3, [r7, #0]
      continue;
    35a6:	f000 bc31 	b.w	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    35aa:	683b      	ldr	r3, [r7, #0]
    35ac:	3301      	adds	r3, #1
    35ae:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    35b0:	2300      	movs	r3, #0
    35b2:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    35b4:	683b      	ldr	r3, [r7, #0]
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	3b20      	subs	r3, #32
    35ba:	2b10      	cmp	r3, #16
    35bc:	d856      	bhi.n	366c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    35be:	a201      	add	r2, pc, #4	; (adr r2, 35c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    35c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35c4:	00003645 	.word	0x00003645
    35c8:	0000366d 	.word	0x0000366d
    35cc:	0000366d 	.word	0x0000366d
    35d0:	00003659 	.word	0x00003659
    35d4:	0000366d 	.word	0x0000366d
    35d8:	0000366d 	.word	0x0000366d
    35dc:	0000366d 	.word	0x0000366d
    35e0:	0000366d 	.word	0x0000366d
    35e4:	0000366d 	.word	0x0000366d
    35e8:	0000366d 	.word	0x0000366d
    35ec:	0000366d 	.word	0x0000366d
    35f0:	00003631 	.word	0x00003631
    35f4:	0000366d 	.word	0x0000366d
    35f8:	0000361d 	.word	0x0000361d
    35fc:	0000366d 	.word	0x0000366d
    3600:	0000366d 	.word	0x0000366d
    3604:	00003609 	.word	0x00003609
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    360a:	f043 0301 	orr.w	r3, r3, #1
    360e:	657b      	str	r3, [r7, #84]	; 0x54
    3610:	683b      	ldr	r3, [r7, #0]
    3612:	3301      	adds	r3, #1
    3614:	603b      	str	r3, [r7, #0]
    3616:	2301      	movs	r3, #1
    3618:	64bb      	str	r3, [r7, #72]	; 0x48
    361a:	e02a      	b.n	3672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    361e:	f043 0302 	orr.w	r3, r3, #2
    3622:	657b      	str	r3, [r7, #84]	; 0x54
    3624:	683b      	ldr	r3, [r7, #0]
    3626:	3301      	adds	r3, #1
    3628:	603b      	str	r3, [r7, #0]
    362a:	2301      	movs	r3, #1
    362c:	64bb      	str	r3, [r7, #72]	; 0x48
    362e:	e020      	b.n	3672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3632:	f043 0304 	orr.w	r3, r3, #4
    3636:	657b      	str	r3, [r7, #84]	; 0x54
    3638:	683b      	ldr	r3, [r7, #0]
    363a:	3301      	adds	r3, #1
    363c:	603b      	str	r3, [r7, #0]
    363e:	2301      	movs	r3, #1
    3640:	64bb      	str	r3, [r7, #72]	; 0x48
    3642:	e016      	b.n	3672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3646:	f043 0308 	orr.w	r3, r3, #8
    364a:	657b      	str	r3, [r7, #84]	; 0x54
    364c:	683b      	ldr	r3, [r7, #0]
    364e:	3301      	adds	r3, #1
    3650:	603b      	str	r3, [r7, #0]
    3652:	2301      	movs	r3, #1
    3654:	64bb      	str	r3, [r7, #72]	; 0x48
    3656:	e00c      	b.n	3672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    365a:	f043 0310 	orr.w	r3, r3, #16
    365e:	657b      	str	r3, [r7, #84]	; 0x54
    3660:	683b      	ldr	r3, [r7, #0]
    3662:	3301      	adds	r3, #1
    3664:	603b      	str	r3, [r7, #0]
    3666:	2301      	movs	r3, #1
    3668:	64bb      	str	r3, [r7, #72]	; 0x48
    366a:	e002      	b.n	3672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    366c:	2300      	movs	r3, #0
    366e:	64bb      	str	r3, [r7, #72]	; 0x48
    3670:	bf00      	nop
      }
    } while (n);
    3672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3674:	2b00      	cmp	r3, #0
    3676:	d000      	beq.n	367a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    3678:	e79c      	b.n	35b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    367a:	2300      	movs	r3, #0
    367c:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    367e:	683b      	ldr	r3, [r7, #0]
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	4618      	mov	r0, r3
    3684:	f7ff fb18 	bl	2cb8 <_is_digit(char)>
    3688:	4603      	mov	r3, r0
    368a:	2b00      	cmp	r3, #0
    368c:	d005      	beq.n	369a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    368e:	463b      	mov	r3, r7
    3690:	4618      	mov	r0, r3
    3692:	f7ff fb25 	bl	2ce0 <_atoi(char const**)>
    3696:	6538      	str	r0, [r7, #80]	; 0x50
    3698:	e018      	b.n	36cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    369a:	683b      	ldr	r3, [r7, #0]
    369c:	781b      	ldrb	r3, [r3, #0]
    369e:	2b2a      	cmp	r3, #42	; 0x2a
    36a0:	d114      	bne.n	36cc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    36a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    36a4:	1d1a      	adds	r2, r3, #4
    36a6:	66ba      	str	r2, [r7, #104]	; 0x68
    36a8:	681b      	ldr	r3, [r3, #0]
    36aa:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    36ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36ae:	2b00      	cmp	r3, #0
    36b0:	da07      	bge.n	36c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    36b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36b4:	f043 0302 	orr.w	r3, r3, #2
    36b8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    36ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36bc:	425b      	negs	r3, r3
    36be:	653b      	str	r3, [r7, #80]	; 0x50
    36c0:	e001      	b.n	36c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    36c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36c4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	3301      	adds	r3, #1
    36ca:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    36cc:	2300      	movs	r3, #0
    36ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    36d0:	683b      	ldr	r3, [r7, #0]
    36d2:	781b      	ldrb	r3, [r3, #0]
    36d4:	2b2e      	cmp	r3, #46	; 0x2e
    36d6:	d124      	bne.n	3722 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    36d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    36de:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    36e0:	683b      	ldr	r3, [r7, #0]
    36e2:	3301      	adds	r3, #1
    36e4:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	4618      	mov	r0, r3
    36ec:	f7ff fae4 	bl	2cb8 <_is_digit(char)>
    36f0:	4603      	mov	r3, r0
    36f2:	2b00      	cmp	r3, #0
    36f4:	d005      	beq.n	3702 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    36f6:	463b      	mov	r3, r7
    36f8:	4618      	mov	r0, r3
    36fa:	f7ff faf1 	bl	2ce0 <_atoi(char const**)>
    36fe:	64f8      	str	r0, [r7, #76]	; 0x4c
    3700:	e00f      	b.n	3722 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    3702:	683b      	ldr	r3, [r7, #0]
    3704:	781b      	ldrb	r3, [r3, #0]
    3706:	2b2a      	cmp	r3, #42	; 0x2a
    3708:	d10b      	bne.n	3722 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    370a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    370c:	1d1a      	adds	r2, r3, #4
    370e:	66ba      	str	r2, [r7, #104]	; 0x68
    3710:	681b      	ldr	r3, [r3, #0]
    3712:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3716:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    371a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    371c:	683b      	ldr	r3, [r7, #0]
    371e:	3301      	adds	r3, #1
    3720:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    3722:	683b      	ldr	r3, [r7, #0]
    3724:	781b      	ldrb	r3, [r3, #0]
    3726:	3b68      	subs	r3, #104	; 0x68
    3728:	2b12      	cmp	r3, #18
    372a:	d867      	bhi.n	37fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    372c:	a201      	add	r2, pc, #4	; (adr r2, 3734 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3732:	bf00      	nop
    3734:	000037a7 	.word	0x000037a7
    3738:	000037fd 	.word	0x000037fd
    373c:	000037dd 	.word	0x000037dd
    3740:	000037fd 	.word	0x000037fd
    3744:	00003781 	.word	0x00003781
    3748:	000037fd 	.word	0x000037fd
    374c:	000037fd 	.word	0x000037fd
    3750:	000037fd 	.word	0x000037fd
    3754:	000037fd 	.word	0x000037fd
    3758:	000037fd 	.word	0x000037fd
    375c:	000037fd 	.word	0x000037fd
    3760:	000037fd 	.word	0x000037fd
    3764:	000037cd 	.word	0x000037cd
    3768:	000037fd 	.word	0x000037fd
    376c:	000037fd 	.word	0x000037fd
    3770:	000037fd 	.word	0x000037fd
    3774:	000037fd 	.word	0x000037fd
    3778:	000037fd 	.word	0x000037fd
    377c:	000037ed 	.word	0x000037ed
      case 'l' :
        flags |= FLAGS_LONG;
    3780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3786:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3788:	683b      	ldr	r3, [r7, #0]
    378a:	3301      	adds	r3, #1
    378c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    378e:	683b      	ldr	r3, [r7, #0]
    3790:	781b      	ldrb	r3, [r3, #0]
    3792:	2b6c      	cmp	r3, #108	; 0x6c
    3794:	d134      	bne.n	3800 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    3796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    379c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    379e:	683b      	ldr	r3, [r7, #0]
    37a0:	3301      	adds	r3, #1
    37a2:	603b      	str	r3, [r7, #0]
        }
        break;
    37a4:	e02c      	b.n	3800 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    37a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    37ac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    37ae:	683b      	ldr	r3, [r7, #0]
    37b0:	3301      	adds	r3, #1
    37b2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    37b4:	683b      	ldr	r3, [r7, #0]
    37b6:	781b      	ldrb	r3, [r3, #0]
    37b8:	2b68      	cmp	r3, #104	; 0x68
    37ba:	d125      	bne.n	3808 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    37bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    37c2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    37c4:	683b      	ldr	r3, [r7, #0]
    37c6:	3301      	adds	r3, #1
    37c8:	603b      	str	r3, [r7, #0]
        }
        break;
    37ca:	e01d      	b.n	3808 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    37cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37d2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    37d4:	683b      	ldr	r3, [r7, #0]
    37d6:	3301      	adds	r3, #1
    37d8:	603b      	str	r3, [r7, #0]
        break;
    37da:	e016      	b.n	380a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    37dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    37e2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    37e4:	683b      	ldr	r3, [r7, #0]
    37e6:	3301      	adds	r3, #1
    37e8:	603b      	str	r3, [r7, #0]
        break;
    37ea:	e00e      	b.n	380a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    37ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37f2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    37f4:	683b      	ldr	r3, [r7, #0]
    37f6:	3301      	adds	r3, #1
    37f8:	603b      	str	r3, [r7, #0]
        break;
    37fa:	e006      	b.n	380a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    37fc:	bf00      	nop
    37fe:	e004      	b.n	380a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    3800:	bf00      	nop
    3802:	e002      	b.n	380a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    3804:	00002c49 	.word	0x00002c49
        break;
    3808:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    380a:	683b      	ldr	r3, [r7, #0]
    380c:	781b      	ldrb	r3, [r3, #0]
    380e:	3b25      	subs	r3, #37	; 0x25
    3810:	2b53      	cmp	r3, #83	; 0x53
    3812:	f200 82ee 	bhi.w	3df2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    3816:	a201      	add	r2, pc, #4	; (adr r2, 381c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    3818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    381c:	00003ddb 	.word	0x00003ddb
    3820:	00003df3 	.word	0x00003df3
    3824:	00003df3 	.word	0x00003df3
    3828:	00003df3 	.word	0x00003df3
    382c:	00003df3 	.word	0x00003df3
    3830:	00003df3 	.word	0x00003df3
    3834:	00003df3 	.word	0x00003df3
    3838:	00003df3 	.word	0x00003df3
    383c:	00003df3 	.word	0x00003df3
    3840:	00003df3 	.word	0x00003df3
    3844:	00003df3 	.word	0x00003df3
    3848:	00003df3 	.word	0x00003df3
    384c:	00003df3 	.word	0x00003df3
    3850:	00003df3 	.word	0x00003df3
    3854:	00003df3 	.word	0x00003df3
    3858:	00003df3 	.word	0x00003df3
    385c:	00003df3 	.word	0x00003df3
    3860:	00003df3 	.word	0x00003df3
    3864:	00003df3 	.word	0x00003df3
    3868:	00003df3 	.word	0x00003df3
    386c:	00003df3 	.word	0x00003df3
    3870:	00003df3 	.word	0x00003df3
    3874:	00003df3 	.word	0x00003df3
    3878:	00003df3 	.word	0x00003df3
    387c:	00003df3 	.word	0x00003df3
    3880:	00003df3 	.word	0x00003df3
    3884:	00003df3 	.word	0x00003df3
    3888:	00003df3 	.word	0x00003df3
    388c:	00003df3 	.word	0x00003df3
    3890:	00003df3 	.word	0x00003df3
    3894:	00003df3 	.word	0x00003df3
    3898:	00003df3 	.word	0x00003df3
    389c:	00003df3 	.word	0x00003df3
    38a0:	00003bf9 	.word	0x00003bf9
    38a4:	00003df3 	.word	0x00003df3
    38a8:	00003df3 	.word	0x00003df3
    38ac:	00003df3 	.word	0x00003df3
    38b0:	00003df3 	.word	0x00003df3
    38b4:	00003df3 	.word	0x00003df3
    38b8:	00003df3 	.word	0x00003df3
    38bc:	00003df3 	.word	0x00003df3
    38c0:	00003df3 	.word	0x00003df3
    38c4:	00003df3 	.word	0x00003df3
    38c8:	00003df3 	.word	0x00003df3
    38cc:	00003df3 	.word	0x00003df3
    38d0:	00003df3 	.word	0x00003df3
    38d4:	00003df3 	.word	0x00003df3
    38d8:	00003df3 	.word	0x00003df3
    38dc:	00003df3 	.word	0x00003df3
    38e0:	00003df3 	.word	0x00003df3
    38e4:	00003df3 	.word	0x00003df3
    38e8:	0000396d 	.word	0x0000396d
    38ec:	00003df3 	.word	0x00003df3
    38f0:	00003df3 	.word	0x00003df3
    38f4:	00003df3 	.word	0x00003df3
    38f8:	00003df3 	.word	0x00003df3
    38fc:	00003df3 	.word	0x00003df3
    3900:	00003df3 	.word	0x00003df3
    3904:	00003df3 	.word	0x00003df3
    3908:	00003df3 	.word	0x00003df3
    390c:	00003df3 	.word	0x00003df3
    3910:	0000396d 	.word	0x0000396d
    3914:	00003c35 	.word	0x00003c35
    3918:	0000396d 	.word	0x0000396d
    391c:	00003df3 	.word	0x00003df3
    3920:	00003bf9 	.word	0x00003bf9
    3924:	00003df3 	.word	0x00003df3
    3928:	00003df3 	.word	0x00003df3
    392c:	0000396d 	.word	0x0000396d
    3930:	00003df3 	.word	0x00003df3
    3934:	00003df3 	.word	0x00003df3
    3938:	00003df3 	.word	0x00003df3
    393c:	00003df3 	.word	0x00003df3
    3940:	00003df3 	.word	0x00003df3
    3944:	0000396d 	.word	0x0000396d
    3948:	00003d93 	.word	0x00003d93
    394c:	00003df3 	.word	0x00003df3
    3950:	00003df3 	.word	0x00003df3
    3954:	00003cbd 	.word	0x00003cbd
    3958:	00003df3 	.word	0x00003df3
    395c:	0000396d 	.word	0x0000396d
    3960:	00003df3 	.word	0x00003df3
    3964:	00003df3 	.word	0x00003df3
    3968:	0000396d 	.word	0x0000396d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    396c:	683b      	ldr	r3, [r7, #0]
    396e:	781b      	ldrb	r3, [r3, #0]
    3970:	2b78      	cmp	r3, #120	; 0x78
    3972:	d003      	beq.n	397c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    3974:	683b      	ldr	r3, [r7, #0]
    3976:	781b      	ldrb	r3, [r3, #0]
    3978:	2b58      	cmp	r3, #88	; 0x58
    397a:	d102      	bne.n	3982 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    397c:	2310      	movs	r3, #16
    397e:	643b      	str	r3, [r7, #64]	; 0x40
    3980:	e013      	b.n	39aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    3982:	683b      	ldr	r3, [r7, #0]
    3984:	781b      	ldrb	r3, [r3, #0]
    3986:	2b6f      	cmp	r3, #111	; 0x6f
    3988:	d102      	bne.n	3990 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    398a:	2308      	movs	r3, #8
    398c:	643b      	str	r3, [r7, #64]	; 0x40
    398e:	e00c      	b.n	39aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    3990:	683b      	ldr	r3, [r7, #0]
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	2b62      	cmp	r3, #98	; 0x62
    3996:	d102      	bne.n	399e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    3998:	2302      	movs	r3, #2
    399a:	643b      	str	r3, [r7, #64]	; 0x40
    399c:	e005      	b.n	39aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    399e:	230a      	movs	r3, #10
    39a0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    39a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39a4:	f023 0310 	bic.w	r3, r3, #16
    39a8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	781b      	ldrb	r3, [r3, #0]
    39ae:	2b58      	cmp	r3, #88	; 0x58
    39b0:	d103      	bne.n	39ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    39b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39b4:	f043 0320 	orr.w	r3, r3, #32
    39b8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    39ba:	683b      	ldr	r3, [r7, #0]
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	2b69      	cmp	r3, #105	; 0x69
    39c0:	d007      	beq.n	39d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    39c2:	683b      	ldr	r3, [r7, #0]
    39c4:	781b      	ldrb	r3, [r3, #0]
    39c6:	2b64      	cmp	r3, #100	; 0x64
    39c8:	d003      	beq.n	39d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    39ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39cc:	f023 030c 	bic.w	r3, r3, #12
    39d0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    39d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    39d8:	2b00      	cmp	r3, #0
    39da:	d003      	beq.n	39e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    39dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39de:	f023 0301 	bic.w	r3, r3, #1
    39e2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    39e4:	683b      	ldr	r3, [r7, #0]
    39e6:	781b      	ldrb	r3, [r3, #0]
    39e8:	2b69      	cmp	r3, #105	; 0x69
    39ea:	d004      	beq.n	39f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    39ec:	683b      	ldr	r3, [r7, #0]
    39ee:	781b      	ldrb	r3, [r3, #0]
    39f0:	2b64      	cmp	r3, #100	; 0x64
    39f2:	f040 808d 	bne.w	3b10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    39f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    39fc:	2b00      	cmp	r3, #0
    39fe:	d02e      	beq.n	3a5e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    3a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a02:	3307      	adds	r3, #7
    3a04:	f023 0307 	bic.w	r3, r3, #7
    3a08:	f103 0208 	add.w	r2, r3, #8
    3a0c:	66ba      	str	r2, [r7, #104]	; 0x68
    3a0e:	e9d3 3400 	ldrd	r3, r4, [r3]
    3a12:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3a16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	f174 0200 	sbcs.w	r2, r4, #0
    3a20:	da02      	bge.n	3a28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    3a22:	425b      	negs	r3, r3
    3a24:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    3a28:	4619      	mov	r1, r3
    3a2a:	4622      	mov	r2, r4
    3a2c:	697b      	ldr	r3, [r7, #20]
    3a2e:	0fdb      	lsrs	r3, r3, #31
    3a30:	b2d8      	uxtb	r0, r3
    3a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a34:	f04f 0400 	mov.w	r4, #0
    3a38:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    3a3a:	9508      	str	r5, [sp, #32]
    3a3c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    3a3e:	9507      	str	r5, [sp, #28]
    3a40:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    3a42:	9506      	str	r5, [sp, #24]
    3a44:	e9cd 3404 	strd	r3, r4, [sp, #16]
    3a48:	9002      	str	r0, [sp, #8]
    3a4a:	e9cd 1200 	strd	r1, r2, [sp]
    3a4e:	687b      	ldr	r3, [r7, #4]
    3a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3a52:	68b9      	ldr	r1, [r7, #8]
    3a54:	68f8      	ldr	r0, [r7, #12]
    3a56:	f7ff faf0 	bl	303a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3a5a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    3a5c:	e0c8      	b.n	3bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    3a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3a64:	2b00      	cmp	r3, #0
    3a66:	d01e      	beq.n	3aa6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    3a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a6a:	1d1a      	adds	r2, r3, #4
    3a6c:	66ba      	str	r2, [r7, #104]	; 0x68
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3a72:	69fb      	ldr	r3, [r7, #28]
    3a74:	2b00      	cmp	r3, #0
    3a76:	bfb8      	it	lt
    3a78:	425b      	neglt	r3, r3
    3a7a:	4619      	mov	r1, r3
    3a7c:	69fb      	ldr	r3, [r7, #28]
    3a7e:	0fdb      	lsrs	r3, r3, #31
    3a80:	b2db      	uxtb	r3, r3
    3a82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3a84:	9205      	str	r2, [sp, #20]
    3a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3a88:	9204      	str	r2, [sp, #16]
    3a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3a8c:	9203      	str	r2, [sp, #12]
    3a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3a90:	9202      	str	r2, [sp, #8]
    3a92:	9301      	str	r3, [sp, #4]
    3a94:	9100      	str	r1, [sp, #0]
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3a9a:	68b9      	ldr	r1, [r7, #8]
    3a9c:	68f8      	ldr	r0, [r7, #12]
    3a9e:	f7ff fa64 	bl	2f6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3aa2:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3aa4:	e0a4      	b.n	3bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3aac:	2b00      	cmp	r3, #0
    3aae:	d005      	beq.n	3abc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    3ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ab2:	1d1a      	adds	r2, r3, #4
    3ab4:	66ba      	str	r2, [r7, #104]	; 0x68
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	b2db      	uxtb	r3, r3
    3aba:	e00e      	b.n	3ada <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    3abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d005      	beq.n	3ad2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    3ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ac8:	1d1a      	adds	r2, r3, #4
    3aca:	66ba      	str	r2, [r7, #104]	; 0x68
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	b21b      	sxth	r3, r3
    3ad0:	e003      	b.n	3ada <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    3ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ad4:	1d1a      	adds	r2, r3, #4
    3ad6:	66ba      	str	r2, [r7, #104]	; 0x68
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3adc:	6a3b      	ldr	r3, [r7, #32]
    3ade:	2b00      	cmp	r3, #0
    3ae0:	bfb8      	it	lt
    3ae2:	425b      	neglt	r3, r3
    3ae4:	4619      	mov	r1, r3
    3ae6:	6a3b      	ldr	r3, [r7, #32]
    3ae8:	0fdb      	lsrs	r3, r3, #31
    3aea:	b2db      	uxtb	r3, r3
    3aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3aee:	9205      	str	r2, [sp, #20]
    3af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3af2:	9204      	str	r2, [sp, #16]
    3af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3af6:	9203      	str	r2, [sp, #12]
    3af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3afa:	9202      	str	r2, [sp, #8]
    3afc:	9301      	str	r3, [sp, #4]
    3afe:	9100      	str	r1, [sp, #0]
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3b04:	68b9      	ldr	r1, [r7, #8]
    3b06:	68f8      	ldr	r0, [r7, #12]
    3b08:	f7ff fa2f 	bl	2f6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3b0c:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3b0e:	e06f      	b.n	3bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    3b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3b16:	2b00      	cmp	r3, #0
    3b18:	d020      	beq.n	3b5c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b1c:	3307      	adds	r3, #7
    3b1e:	f023 0307 	bic.w	r3, r3, #7
    3b22:	f103 0208 	add.w	r2, r3, #8
    3b26:	66ba      	str	r2, [r7, #104]	; 0x68
    3b28:	e9d3 3400 	ldrd	r3, r4, [r3]
    3b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3b2e:	4611      	mov	r1, r2
    3b30:	f04f 0200 	mov.w	r2, #0
    3b34:	6d78      	ldr	r0, [r7, #84]	; 0x54
    3b36:	9008      	str	r0, [sp, #32]
    3b38:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3b3a:	9007      	str	r0, [sp, #28]
    3b3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3b3e:	9006      	str	r0, [sp, #24]
    3b40:	e9cd 1204 	strd	r1, r2, [sp, #16]
    3b44:	2200      	movs	r2, #0
    3b46:	9202      	str	r2, [sp, #8]
    3b48:	e9cd 3400 	strd	r3, r4, [sp]
    3b4c:	687b      	ldr	r3, [r7, #4]
    3b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3b50:	68b9      	ldr	r1, [r7, #8]
    3b52:	68f8      	ldr	r0, [r7, #12]
    3b54:	f7ff fa71 	bl	303a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3b58:	6478      	str	r0, [r7, #68]	; 0x44
    3b5a:	e049      	b.n	3bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    3b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3b62:	2b00      	cmp	r3, #0
    3b64:	d016      	beq.n	3b94 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b68:	1d1a      	adds	r2, r3, #4
    3b6a:	66ba      	str	r2, [r7, #104]	; 0x68
    3b6c:	681b      	ldr	r3, [r3, #0]
    3b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3b70:	9205      	str	r2, [sp, #20]
    3b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3b74:	9204      	str	r2, [sp, #16]
    3b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3b78:	9203      	str	r2, [sp, #12]
    3b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3b7c:	9202      	str	r2, [sp, #8]
    3b7e:	2200      	movs	r2, #0
    3b80:	9201      	str	r2, [sp, #4]
    3b82:	9300      	str	r3, [sp, #0]
    3b84:	687b      	ldr	r3, [r7, #4]
    3b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3b88:	68b9      	ldr	r1, [r7, #8]
    3b8a:	68f8      	ldr	r0, [r7, #12]
    3b8c:	f7ff f9ed 	bl	2f6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3b90:	6478      	str	r0, [r7, #68]	; 0x44
    3b92:	e02d      	b.n	3bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d005      	beq.n	3baa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    3b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ba0:	1d1a      	adds	r2, r3, #4
    3ba2:	66ba      	str	r2, [r7, #104]	; 0x68
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	b2db      	uxtb	r3, r3
    3ba8:	e00e      	b.n	3bc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    3baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d005      	beq.n	3bc0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    3bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3bb6:	1d1a      	adds	r2, r3, #4
    3bb8:	66ba      	str	r2, [r7, #104]	; 0x68
    3bba:	681b      	ldr	r3, [r3, #0]
    3bbc:	b29b      	uxth	r3, r3
    3bbe:	e003      	b.n	3bc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    3bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3bc2:	1d1a      	adds	r2, r3, #4
    3bc4:	66ba      	str	r2, [r7, #104]	; 0x68
    3bc6:	681b      	ldr	r3, [r3, #0]
    3bc8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3bcc:	9305      	str	r3, [sp, #20]
    3bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3bd0:	9304      	str	r3, [sp, #16]
    3bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3bd4:	9303      	str	r3, [sp, #12]
    3bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3bd8:	9302      	str	r3, [sp, #8]
    3bda:	2300      	movs	r3, #0
    3bdc:	9301      	str	r3, [sp, #4]
    3bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3be0:	9300      	str	r3, [sp, #0]
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3be6:	68b9      	ldr	r1, [r7, #8]
    3be8:	68f8      	ldr	r0, [r7, #12]
    3bea:	f7ff f9be 	bl	2f6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3bee:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    3bf0:	683b      	ldr	r3, [r7, #0]
    3bf2:	3301      	adds	r3, #1
    3bf4:	603b      	str	r3, [r7, #0]
        break;
    3bf6:	e109      	b.n	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3bfa:	3307      	adds	r3, #7
    3bfc:	f023 0307 	bic.w	r3, r3, #7
    3c00:	f103 0208 	add.w	r2, r3, #8
    3c04:	66ba      	str	r2, [r7, #104]	; 0x68
    3c06:	ed93 7b00 	vldr	d7, [r3]
    3c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c0c:	9302      	str	r3, [sp, #8]
    3c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3c10:	9301      	str	r3, [sp, #4]
    3c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c14:	9300      	str	r3, [sp, #0]
    3c16:	eeb0 0a47 	vmov.f32	s0, s14
    3c1a:	eef0 0a67 	vmov.f32	s1, s15
    3c1e:	687b      	ldr	r3, [r7, #4]
    3c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3c22:	68b9      	ldr	r1, [r7, #8]
    3c24:	68f8      	ldr	r0, [r7, #12]
    3c26:	f7ff fa79 	bl	311c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    3c2a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	3301      	adds	r3, #1
    3c30:	603b      	str	r3, [r7, #0]
        break;
    3c32:	e0eb      	b.n	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    3c34:	2301      	movs	r3, #1
    3c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    3c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c3a:	f003 0302 	and.w	r3, r3, #2
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d113      	bne.n	3c6a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    3c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c44:	1c5a      	adds	r2, r3, #1
    3c46:	63fa      	str	r2, [r7, #60]	; 0x3c
    3c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3c4a:	429a      	cmp	r2, r3
    3c4c:	bf8c      	ite	hi
    3c4e:	2301      	movhi	r3, #1
    3c50:	2300      	movls	r3, #0
    3c52:	b2db      	uxtb	r3, r3
    3c54:	2b00      	cmp	r3, #0
    3c56:	d008      	beq.n	3c6a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    3c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3c5a:	1c53      	adds	r3, r2, #1
    3c5c:	647b      	str	r3, [r7, #68]	; 0x44
    3c5e:	68fc      	ldr	r4, [r7, #12]
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	68b9      	ldr	r1, [r7, #8]
    3c64:	2020      	movs	r0, #32
    3c66:	47a0      	blx	r4
          while (l++ < width) {
    3c68:	e7eb      	b.n	3c42 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c6c:	1d1a      	adds	r2, r3, #4
    3c6e:	66ba      	str	r2, [r7, #104]	; 0x68
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	b2d8      	uxtb	r0, r3
    3c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3c76:	1c53      	adds	r3, r2, #1
    3c78:	647b      	str	r3, [r7, #68]	; 0x44
    3c7a:	68fc      	ldr	r4, [r7, #12]
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	68b9      	ldr	r1, [r7, #8]
    3c80:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    3c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c84:	f003 0302 	and.w	r3, r3, #2
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d013      	beq.n	3cb4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    3c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c8e:	1c5a      	adds	r2, r3, #1
    3c90:	63fa      	str	r2, [r7, #60]	; 0x3c
    3c92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3c94:	429a      	cmp	r2, r3
    3c96:	bf8c      	ite	hi
    3c98:	2301      	movhi	r3, #1
    3c9a:	2300      	movls	r3, #0
    3c9c:	b2db      	uxtb	r3, r3
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d008      	beq.n	3cb4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    3ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ca4:	1c53      	adds	r3, r2, #1
    3ca6:	647b      	str	r3, [r7, #68]	; 0x44
    3ca8:	68fc      	ldr	r4, [r7, #12]
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	68b9      	ldr	r1, [r7, #8]
    3cae:	2020      	movs	r0, #32
    3cb0:	47a0      	blx	r4
          while (l++ < width) {
    3cb2:	e7eb      	b.n	3c8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    3cb4:	683b      	ldr	r3, [r7, #0]
    3cb6:	3301      	adds	r3, #1
    3cb8:	603b      	str	r3, [r7, #0]
        break;
    3cba:	e0a7      	b.n	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    3cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3cbe:	1d1a      	adds	r2, r3, #4
    3cc0:	66ba      	str	r2, [r7, #104]	; 0x68
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    3cc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cc8:	f7fe ffdf 	bl	2c8a <_strlen(char const*)>
    3ccc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    3cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	d007      	beq.n	3ce8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    3cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cdc:	429a      	cmp	r2, r3
    3cde:	d201      	bcs.n	3ce4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    3ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ce2:	e000      	b.n	3ce6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    3ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ce6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    3ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cea:	f003 0302 	and.w	r3, r3, #2
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d113      	bne.n	3d1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    3cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3cf4:	1c5a      	adds	r2, r3, #1
    3cf6:	637a      	str	r2, [r7, #52]	; 0x34
    3cf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3cfa:	429a      	cmp	r2, r3
    3cfc:	bf8c      	ite	hi
    3cfe:	2301      	movhi	r3, #1
    3d00:	2300      	movls	r3, #0
    3d02:	b2db      	uxtb	r3, r3
    3d04:	2b00      	cmp	r3, #0
    3d06:	d008      	beq.n	3d1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    3d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d0a:	1c53      	adds	r3, r2, #1
    3d0c:	647b      	str	r3, [r7, #68]	; 0x44
    3d0e:	68fc      	ldr	r4, [r7, #12]
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	68b9      	ldr	r1, [r7, #8]
    3d14:	2020      	movs	r0, #32
    3d16:	47a0      	blx	r4
          while (l++ < width) {
    3d18:	e7eb      	b.n	3cf2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d1c:	781b      	ldrb	r3, [r3, #0]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d00b      	beq.n	3d3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    3d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d004      	beq.n	3d36 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    3d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d2e:	1e5a      	subs	r2, r3, #1
    3d30:	64fa      	str	r2, [r7, #76]	; 0x4c
    3d32:	2b00      	cmp	r3, #0
    3d34:	d001      	beq.n	3d3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    3d36:	2301      	movs	r3, #1
    3d38:	e000      	b.n	3d3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    3d3a:	2300      	movs	r3, #0
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d00b      	beq.n	3d58 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    3d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d42:	1c5a      	adds	r2, r3, #1
    3d44:	63ba      	str	r2, [r7, #56]	; 0x38
    3d46:	7818      	ldrb	r0, [r3, #0]
    3d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d4a:	1c53      	adds	r3, r2, #1
    3d4c:	647b      	str	r3, [r7, #68]	; 0x44
    3d4e:	68fc      	ldr	r4, [r7, #12]
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	68b9      	ldr	r1, [r7, #8]
    3d54:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3d56:	e7e0      	b.n	3d1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    3d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d5a:	f003 0302 	and.w	r3, r3, #2
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d013      	beq.n	3d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    3d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d64:	1c5a      	adds	r2, r3, #1
    3d66:	637a      	str	r2, [r7, #52]	; 0x34
    3d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3d6a:	429a      	cmp	r2, r3
    3d6c:	bf8c      	ite	hi
    3d6e:	2301      	movhi	r3, #1
    3d70:	2300      	movls	r3, #0
    3d72:	b2db      	uxtb	r3, r3
    3d74:	2b00      	cmp	r3, #0
    3d76:	d008      	beq.n	3d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    3d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3d7a:	1c53      	adds	r3, r2, #1
    3d7c:	647b      	str	r3, [r7, #68]	; 0x44
    3d7e:	68fc      	ldr	r4, [r7, #12]
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	68b9      	ldr	r1, [r7, #8]
    3d84:	2020      	movs	r0, #32
    3d86:	47a0      	blx	r4
          while (l++ < width) {
    3d88:	e7eb      	b.n	3d62 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    3d8a:	683b      	ldr	r3, [r7, #0]
    3d8c:	3301      	adds	r3, #1
    3d8e:	603b      	str	r3, [r7, #0]
        break;
    3d90:	e03c      	b.n	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    3d92:	2308      	movs	r3, #8
    3d94:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    3d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d98:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    3d9c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    3d9e:	2300      	movs	r3, #0
    3da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3da6:	1d1a      	adds	r2, r3, #4
    3da8:	66ba      	str	r2, [r7, #104]	; 0x68
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	461a      	mov	r2, r3
    3dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3db0:	9305      	str	r3, [sp, #20]
    3db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3db4:	9304      	str	r3, [sp, #16]
    3db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3db8:	9303      	str	r3, [sp, #12]
    3dba:	2310      	movs	r3, #16
    3dbc:	9302      	str	r3, [sp, #8]
    3dbe:	2300      	movs	r3, #0
    3dc0:	9301      	str	r3, [sp, #4]
    3dc2:	9200      	str	r2, [sp, #0]
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3dc8:	68b9      	ldr	r1, [r7, #8]
    3dca:	68f8      	ldr	r0, [r7, #12]
    3dcc:	f7ff f8cd 	bl	2f6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3dd0:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    3dd2:	683b      	ldr	r3, [r7, #0]
    3dd4:	3301      	adds	r3, #1
    3dd6:	603b      	str	r3, [r7, #0]
        break;
    3dd8:	e018      	b.n	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    3dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ddc:	1c53      	adds	r3, r2, #1
    3dde:	647b      	str	r3, [r7, #68]	; 0x44
    3de0:	68fc      	ldr	r4, [r7, #12]
    3de2:	687b      	ldr	r3, [r7, #4]
    3de4:	68b9      	ldr	r1, [r7, #8]
    3de6:	2025      	movs	r0, #37	; 0x25
    3de8:	47a0      	blx	r4
        format++;
    3dea:	683b      	ldr	r3, [r7, #0]
    3dec:	3301      	adds	r3, #1
    3dee:	603b      	str	r3, [r7, #0]
        break;
    3df0:	e00c      	b.n	3e0c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    3df2:	683b      	ldr	r3, [r7, #0]
    3df4:	7818      	ldrb	r0, [r3, #0]
    3df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3df8:	1c53      	adds	r3, r2, #1
    3dfa:	647b      	str	r3, [r7, #68]	; 0x44
    3dfc:	68fc      	ldr	r4, [r7, #12]
    3dfe:	687b      	ldr	r3, [r7, #4]
    3e00:	68b9      	ldr	r1, [r7, #8]
    3e02:	47a0      	blx	r4
        format++;
    3e04:	683b      	ldr	r3, [r7, #0]
    3e06:	3301      	adds	r3, #1
    3e08:	603b      	str	r3, [r7, #0]
        break;
    3e0a:	bf00      	nop
  while (*format)
    3e0c:	f7ff bbb6 	b.w	357c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    3e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e12:	687b      	ldr	r3, [r7, #4]
    3e14:	429a      	cmp	r2, r3
    3e16:	d302      	bcc.n	3e1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	1e5a      	subs	r2, r3, #1
    3e1c:	e000      	b.n	3e20 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    3e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e20:	68fc      	ldr	r4, [r7, #12]
    3e22:	687b      	ldr	r3, [r7, #4]
    3e24:	68b9      	ldr	r1, [r7, #8]
    3e26:	2000      	movs	r0, #0
    3e28:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    3e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    3e2c:	4618      	mov	r0, r3
    3e2e:	3758      	adds	r7, #88	; 0x58
    3e30:	46bd      	mov	sp, r7
    3e32:	bdb0      	pop	{r4, r5, r7, pc}

00003e34 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    3e34:	b40f      	push	{r0, r1, r2, r3}
    3e36:	b580      	push	{r7, lr}
    3e38:	b086      	sub	sp, #24
    3e3a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    3e3c:	f107 031c 	add.w	r3, r7, #28
    3e40:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3e42:	1d39      	adds	r1, r7, #4
    3e44:	68bb      	ldr	r3, [r7, #8]
    3e46:	9300      	str	r3, [sp, #0]
    3e48:	69bb      	ldr	r3, [r7, #24]
    3e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e4e:	4806      	ldr	r0, [pc, #24]	; (3e68 <printf+0x34>)
    3e50:	f7ff fb86 	bl	3560 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    3e54:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    3e56:	68fb      	ldr	r3, [r7, #12]
}
    3e58:	4618      	mov	r0, r3
    3e5a:	3710      	adds	r7, #16
    3e5c:	46bd      	mov	sp, r7
    3e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    3e62:	b004      	add	sp, #16
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop
    3e68:	00002c65 	.word	0x00002c65

00003e6c <NVIC_EnableIRQ>:
{
    3e6c:	b480      	push	{r7}
    3e6e:	b083      	sub	sp, #12
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	f003 021f 	and.w	r2, r3, #31
    3e7a:	4907      	ldr	r1, [pc, #28]	; (3e98 <NVIC_EnableIRQ+0x2c>)
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	095b      	lsrs	r3, r3, #5
    3e80:	2001      	movs	r0, #1
    3e82:	fa00 f202 	lsl.w	r2, r0, r2
    3e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3e8a:	bf00      	nop
    3e8c:	370c      	adds	r7, #12
    3e8e:	46bd      	mov	sp, r7
    3e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e94:	4770      	bx	lr
    3e96:	bf00      	nop
    3e98:	e000e100 	.word	0xe000e100

00003e9c <NVIC_DisableIRQ>:
{
    3e9c:	b480      	push	{r7}
    3e9e:	b083      	sub	sp, #12
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	f003 021f 	and.w	r2, r3, #31
    3eaa:	4907      	ldr	r1, [pc, #28]	; (3ec8 <NVIC_DisableIRQ+0x2c>)
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	095b      	lsrs	r3, r3, #5
    3eb0:	2001      	movs	r0, #1
    3eb2:	fa00 f202 	lsl.w	r2, r0, r2
    3eb6:	3320      	adds	r3, #32
    3eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3ebc:	bf00      	nop
    3ebe:	370c      	adds	r7, #12
    3ec0:	46bd      	mov	sp, r7
    3ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec6:	4770      	bx	lr
    3ec8:	e000e100 	.word	0xe000e100

00003ecc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3ecc:	b480      	push	{r7}
    3ece:	b083      	sub	sp, #12
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
    3ed4:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	da0b      	bge.n	3ef4 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3edc:	683b      	ldr	r3, [r7, #0]
    3ede:	b2da      	uxtb	r2, r3
    3ee0:	490d      	ldr	r1, [pc, #52]	; (3f18 <NVIC_SetPriority+0x4c>)
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	f003 030f 	and.w	r3, r3, #15
    3ee8:	3b04      	subs	r3, #4
    3eea:	0152      	lsls	r2, r2, #5
    3eec:	b2d2      	uxtb	r2, r2
    3eee:	440b      	add	r3, r1
    3ef0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    3ef2:	e00a      	b.n	3f0a <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ef4:	683b      	ldr	r3, [r7, #0]
    3ef6:	b2db      	uxtb	r3, r3
    3ef8:	4a08      	ldr	r2, [pc, #32]	; (3f1c <NVIC_SetPriority+0x50>)
    3efa:	6879      	ldr	r1, [r7, #4]
    3efc:	4608      	mov	r0, r1
    3efe:	015b      	lsls	r3, r3, #5
    3f00:	b2d9      	uxtb	r1, r3
    3f02:	1813      	adds	r3, r2, r0
    3f04:	460a      	mov	r2, r1
    3f06:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    3f0a:	bf00      	nop
    3f0c:	370c      	adds	r7, #12
    3f0e:	46bd      	mov	sp, r7
    3f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop
    3f18:	e000ed00 	.word	0xe000ed00
    3f1c:	e000e100 	.word	0xe000e100

00003f20 <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    3f28:	4b0c      	ldr	r3, [pc, #48]	; (3f5c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	68da      	ldr	r2, [r3, #12]
    3f2e:	4b0b      	ldr	r3, [pc, #44]	; (3f5c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    3f30:	681b      	ldr	r3, [r3, #0]
    3f32:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3f36:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    3f38:	4b09      	ldr	r3, [pc, #36]	; (3f60 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	2200      	movs	r2, #0
    3f3e:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    3f40:	4b07      	ldr	r3, [pc, #28]	; (3f60 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	681a      	ldr	r2, [r3, #0]
    3f46:	4b06      	ldr	r3, [pc, #24]	; (3f60 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	f042 0201 	orr.w	r2, r2, #1
    3f4e:	601a      	str	r2, [r3, #0]
  }
    3f50:	bf00      	nop
    3f52:	370c      	adds	r7, #12
    3f54:	46bd      	mov	sp, r7
    3f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f5a:	4770      	bx	lr
    3f5c:	10000060 	.word	0x10000060
    3f60:	1000005c 	.word	0x1000005c

00003f64 <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    3f64:	b480      	push	{r7}
    3f66:	b083      	sub	sp, #12
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    3f6c:	4b04      	ldr	r3, [pc, #16]	; (3f80 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	685b      	ldr	r3, [r3, #4]
  }
    3f72:	4618      	mov	r0, r3
    3f74:	370c      	adds	r7, #12
    3f76:	46bd      	mov	sp, r7
    3f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7c:	4770      	bx	lr
    3f7e:	bf00      	nop
    3f80:	1000005c 	.word	0x1000005c

00003f84 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    3f84:	b480      	push	{r7}
    3f86:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    3f88:	f8df 001c 	ldr.w	r0, [pc, #28]	; 3fa8 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    3f8c:	6801      	ldr	r1, [r0, #0]
    3f8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3f92:	6001      	str	r1, [r0, #0]
    3f94:	f3bf 8f4f 	dsb	sy
    3f98:	f3bf 8f6f 	isb	sy
  }
}
    3f9c:	bf00      	nop
    3f9e:	46bd      	mov	sp, r7
    3fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa4:	4770      	bx	lr
    3fa6:	0000      	.short	0x0000
    3fa8:	e000ed88 	.word	0xe000ed88

00003fac <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    3fac:	b580      	push	{r7, lr}
    3fae:	b084      	sub	sp, #16
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    3fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
    3fba:	f000 fef9 	bl	4db0 <__aeabi_ul2f>
    3fbe:	4602      	mov	r2, r0
    3fc0:	f107 030c 	add.w	r3, r7, #12
    3fc4:	ee00 2a10 	vmov	s0, r2
    3fc8:	4618      	mov	r0, r3
    3fca:	f7fc fa2f 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3fce:	68fb      	ldr	r3, [r7, #12]
    3fd0:	4618      	mov	r0, r3
    3fd2:	3710      	adds	r7, #16
    3fd4:	46bd      	mov	sp, r7
    3fd6:	bd80      	pop	{r7, pc}

00003fd8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3fd8:	b580      	push	{r7, lr}
    3fda:	b086      	sub	sp, #24
    3fdc:	af00      	add	r7, sp, #0
    3fde:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3fe0:	6878      	ldr	r0, [r7, #4]
    3fe2:	f000 f807 	bl	3ff4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3fe6:	eef0 7a40 	vmov.f32	s15, s0
	}
    3fea:	eeb0 0a67 	vmov.f32	s0, s15
    3fee:	3718      	adds	r7, #24
    3ff0:	46bd      	mov	sp, r7
    3ff2:	bd80      	pop	{r7, pc}

00003ff4 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3ff4:	b480      	push	{r7}
    3ff6:	b085      	sub	sp, #20
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	60f8      	str	r0, [r7, #12]
    3ffc:	7239      	strb	r1, [r7, #8]
    3ffe:	713a      	strb	r2, [r7, #4]
    4000:	703b      	strb	r3, [r7, #0]
			return value;
    4002:	68fb      	ldr	r3, [r7, #12]
    4004:	681b      	ldr	r3, [r3, #0]
    4006:	ee07 3a90 	vmov	s15, r3
		}
    400a:	eeb0 0a67 	vmov.f32	s0, s15
    400e:	3714      	adds	r7, #20
    4010:	46bd      	mov	sp, r7
    4012:	f85d 7b04 	ldr.w	r7, [sp], #4
    4016:	4770      	bx	lr

00004018 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4018:	b580      	push	{r7, lr}
    401a:	ed2d 8b02 	vpush	{d8}
    401e:	b082      	sub	sp, #8
    4020:	af00      	add	r7, sp, #0
    4022:	6078      	str	r0, [r7, #4]
    4024:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	ed93 8a00 	vldr	s16, [r3]
    402c:	683b      	ldr	r3, [r7, #0]
    402e:	4618      	mov	r0, r3
    4030:	f7ff ffd2 	bl	3fd8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4034:	eef0 7a40 	vmov.f32	s15, s0
    4038:	eeb4 8ae7 	vcmpe.f32	s16, s15
    403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4040:	bf94      	ite	ls
    4042:	2301      	movls	r3, #1
    4044:	2300      	movhi	r3, #0
    4046:	b2db      	uxtb	r3, r3
		}
    4048:	4618      	mov	r0, r3
    404a:	3708      	adds	r7, #8
    404c:	46bd      	mov	sp, r7
    404e:	ecbd 8b02 	vpop	{d8}
    4052:	bd80      	pop	{r7, pc}

00004054 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    4054:	b480      	push	{r7}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    405c:	4a04      	ldr	r2, [pc, #16]	; (4070 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	6013      	str	r3, [r2, #0]
}
    4062:	bf00      	nop
    4064:	370c      	adds	r7, #12
    4066:	46bd      	mov	sp, r7
    4068:	f85d 7b04 	ldr.w	r7, [sp], #4
    406c:	4770      	bx	lr
    406e:	bf00      	nop
    4070:	10000000 	.word	0x10000000

00004074 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    4074:	b480      	push	{r7}
    4076:	b083      	sub	sp, #12
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	3310      	adds	r3, #16
  }
    4080:	4618      	mov	r0, r3
    4082:	370c      	adds	r7, #12
    4084:	46bd      	mov	sp, r7
    4086:	f85d 7b04 	ldr.w	r7, [sp], #4
    408a:	4770      	bx	lr

0000408c <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    408c:	b580      	push	{r7, lr}
    408e:	b082      	sub	sp, #8
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    4094:	6878      	ldr	r0, [r7, #4]
    4096:	f7ff ffed 	bl	4074 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    409a:	4603      	mov	r3, r0
    409c:	009b      	lsls	r3, r3, #2
    409e:	4a03      	ldr	r2, [pc, #12]	; (40ac <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    40a0:	4413      	add	r3, r2
  }
    40a2:	4618      	mov	r0, r3
    40a4:	3708      	adds	r7, #8
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	bf00      	nop
    40ac:	10000104 	.word	0x10000104

000040b0 <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    40b0:	b580      	push	{r7, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    40b6:	4b09      	ldr	r3, [pc, #36]	; (40dc <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	685b      	ldr	r3, [r3, #4]
    40bc:	b2db      	uxtb	r3, r3
    40be:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    40c0:	4a07      	ldr	r2, [pc, #28]	; (40e0 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    40c6:	4a07      	ldr	r2, [pc, #28]	; (40e4 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    40ce:	603b      	str	r3, [r7, #0]
    isr();
    40d0:	683b      	ldr	r3, [r7, #0]
    40d2:	4798      	blx	r3
  }
    40d4:	bf00      	nop
    40d6:	3708      	adds	r7, #8
    40d8:	46bd      	mov	sp, r7
    40da:	bd80      	pop	{r7, pc}
    40dc:	10000064 	.word	0x10000064
    40e0:	10000004 	.word	0x10000004
    40e4:	10000104 	.word	0x10000104

000040e8 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    40e8:	b084      	sub	sp, #16
    40ea:	b590      	push	{r4, r7, lr}
    40ec:	b085      	sub	sp, #20
    40ee:	af00      	add	r7, sp, #0
    40f0:	6078      	str	r0, [r7, #4]
    40f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
    40f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    40fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40fc:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    40fe:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4100:	68f8      	ldr	r0, [r7, #12]
    4102:	f7ff ffc3 	bl	408c <sjsu::cortex::InterruptController::GetVector(int)>
    4106:	4603      	mov	r3, r0
    4108:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    410a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    410e:	2b00      	cmp	r3, #0
    4110:	d005      	beq.n	411e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	2b00      	cmp	r3, #0
    4116:	db02      	blt.n	411e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    4118:	68f8      	ldr	r0, [r7, #12]
    411a:	f7ff fea7 	bl	3e6c <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4120:	2b00      	cmp	r3, #0
    4122:	db04      	blt.n	412e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    4124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4126:	4619      	mov	r1, r3
    4128:	68f8      	ldr	r0, [r7, #12]
    412a:	f7ff fecf 	bl	3ecc <NVIC_SetPriority>
    }
  }
    412e:	bf00      	nop
    4130:	3714      	adds	r7, #20
    4132:	46bd      	mov	sp, r7
    4134:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    4138:	b004      	add	sp, #16
    413a:	4770      	bx	lr

0000413c <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
    4144:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    4146:	6838      	ldr	r0, [r7, #0]
    4148:	f7ff fea8 	bl	3e9c <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    414c:	6838      	ldr	r0, [r7, #0]
    414e:	f7ff ff9d 	bl	408c <sjsu::cortex::InterruptController::GetVector(int)>
    4152:	4602      	mov	r2, r0
    4154:	4b02      	ldr	r3, [pc, #8]	; (4160 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    4156:	6013      	str	r3, [r2, #0]
  }
    4158:	bf00      	nop
    415a:	3708      	adds	r7, #8
    415c:	46bd      	mov	sp, r7
    415e:	bd80      	pop	{r7, pc}
    4160:	0000091d 	.word	0x0000091d

00004164 <sjsu::SystemTimer::SystemTimer()>:
#include "utility/status.hpp"
#include "utility/units.hpp"

namespace sjsu
{
class SystemTimer
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
    416c:	4a04      	ldr	r2, [pc, #16]	; (4180 <sjsu::SystemTimer::SystemTimer()+0x1c>)
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	601a      	str	r2, [r3, #0]
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	4618      	mov	r0, r3
    4176:	370c      	adds	r7, #12
    4178:	46bd      	mov	sp, r7
    417a:	f85d 7b04 	ldr.w	r7, [sp], #4
    417e:	4770      	bx	lr
    4180:	000072b8 	.word	0x000072b8

00004184 <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>:
  /// milliseconds counter.
  inline static std::chrono::microseconds counter = 0us;
  inline static const sjsu::cortex::InterruptController
      kCortexInterruptController = sjsu::cortex::InterruptController();

  explicit SystemTimer(const sjsu::SystemController & system_controller,
    4184:	b580      	push	{r7, lr}
    4186:	b084      	sub	sp, #16
    4188:	af00      	add	r7, sp, #0
    418a:	60f8      	str	r0, [r7, #12]
    418c:	60b9      	str	r1, [r7, #8]
    418e:	607a      	str	r2, [r7, #4]
                       const sjsu::InterruptController & interrupt_controller =
                           kCortexInterruptController)
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	4618      	mov	r0, r3
    4194:	f7ff ffe6 	bl	4164 <sjsu::SystemTimer::SystemTimer()>
    4198:	4a06      	ldr	r2, [pc, #24]	; (41b4 <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)+0x30>)
    419a:	68fb      	ldr	r3, [r7, #12]
    419c:	601a      	str	r2, [r3, #0]
    419e:	68fb      	ldr	r3, [r7, #12]
    41a0:	68ba      	ldr	r2, [r7, #8]
    41a2:	605a      	str	r2, [r3, #4]
    41a4:	68fb      	ldr	r3, [r7, #12]
    41a6:	687a      	ldr	r2, [r7, #4]
    41a8:	609a      	str	r2, [r3, #8]
  {
  }
    41aa:	68fb      	ldr	r3, [r7, #12]
    41ac:	4618      	mov	r0, r3
    41ae:	3710      	adds	r7, #16
    41b0:	46bd      	mov	sp, r7
    41b2:	bd80      	pop	{r7, pc}
    41b4:	000072a4 	.word	0x000072a4

000041b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    41b8:	b580      	push	{r7, lr}
    41ba:	b082      	sub	sp, #8
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	4618      	mov	r0, r3
    41c4:	f000 f804 	bl	41d0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    41c8:	6878      	ldr	r0, [r7, #4]
    41ca:	3708      	adds	r7, #8
    41cc:	46bd      	mov	sp, r7
    41ce:	bd80      	pop	{r7, pc}

000041d0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    41d0:	b580      	push	{r7, lr}
    41d2:	b082      	sub	sp, #8
    41d4:	af00      	add	r7, sp, #0
    41d6:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    41d8:	4903      	ldr	r1, [pc, #12]	; (41e8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    41da:	6878      	ldr	r0, [r7, #4]
    41dc:	f7fc fc63 	bl	aa6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    41e0:	6878      	ldr	r0, [r7, #4]
    41e2:	3708      	adds	r7, #8
    41e4:	46bd      	mov	sp, r7
    41e6:	bd80      	pop	{r7, pc}
    41e8:	00007258 	.word	0x00007258

000041ec <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
  {
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  static void SystemTimerHandler()
    41ec:	b580      	push	{r7, lr}
    41ee:	b084      	sub	sp, #16
    41f0:	af00      	add	r7, sp, #0
  {
    counter += 1ms;
    41f2:	f107 0308 	add.w	r3, r7, #8
    41f6:	4618      	mov	r0, r3
    41f8:	f7ff ffde 	bl	41b8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    41fc:	f107 0208 	add.w	r2, r7, #8
    4200:	463b      	mov	r3, r7
    4202:	4611      	mov	r1, r2
    4204:	4618      	mov	r0, r3
    4206:	f7fd fe55 	bl	1eb4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    420a:	463b      	mov	r3, r7
    420c:	4619      	mov	r1, r3
    420e:	4807      	ldr	r0, [pc, #28]	; (422c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    4210:	f000 f99a 	bl	4548 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
    4214:	4b06      	ldr	r3, [pc, #24]	; (4230 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4216:	681b      	ldr	r3, [r3, #0]
    4218:	2b00      	cmp	r3, #0
    421a:	d002      	beq.n	4222 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    421c:	4b04      	ldr	r3, [pc, #16]	; (4230 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    421e:	681b      	ldr	r3, [r3, #0]
    4220:	4798      	blx	r3
    }
  }
    4222:	bf00      	nop
    4224:	3710      	adds	r7, #16
    4226:	46bd      	mov	sp, r7
    4228:	bd80      	pop	{r7, pc}
    422a:	bf00      	nop
    422c:	10000300 	.word	0x10000300
    4230:	100002f8 	.word	0x100002f8

00004234 <sjsu::cortex::SystemTimer::GetCount()>:
  static std::chrono::microseconds GetCount()
    4234:	b490      	push	{r4, r7}
    4236:	b082      	sub	sp, #8
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
  {
    return counter;
    423c:	687a      	ldr	r2, [r7, #4]
    423e:	4b05      	ldr	r3, [pc, #20]	; (4254 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    4240:	e9d3 3400 	ldrd	r3, r4, [r3]
    4244:	e9c2 3400 	strd	r3, r4, [r2]
  }
    4248:	6878      	ldr	r0, [r7, #4]
    424a:	3708      	adds	r7, #8
    424c:	46bd      	mov	sp, r7
    424e:	bc90      	pop	{r4, r7}
    4250:	4770      	bx	lr
    4252:	bf00      	nop
    4254:	10000300 	.word	0x10000300

00004258 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    4258:	b480      	push	{r7}
    425a:	b083      	sub	sp, #12
    425c:	af00      	add	r7, sp, #0
    425e:	6078      	str	r0, [r7, #4]
    4260:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    4262:	4a04      	ldr	r2, [pc, #16]	; (4274 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    4264:	683b      	ldr	r3, [r7, #0]
    4266:	6013      	str	r3, [r2, #0]
  }
    4268:	bf00      	nop
    426a:	370c      	adds	r7, #12
    426c:	46bd      	mov	sp, r7
    426e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4272:	4770      	bx	lr
    4274:	100002f8 	.word	0x100002f8

00004278 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    4278:	b5f0      	push	{r4, r5, r6, r7, lr}
    427a:	b08b      	sub	sp, #44	; 0x2c
    427c:	af02      	add	r7, sp, #8
    427e:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    4280:	2304      	movs	r3, #4
    4282:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    4284:	4b1f      	ldr	r3, [pc, #124]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	685b      	ldr	r3, [r3, #4]
    428a:	2b00      	cmp	r3, #0
    428c:	bf14      	ite	ne
    428e:	2301      	movne	r3, #1
    4290:	2300      	moveq	r3, #0
    4292:	b2db      	uxtb	r3, r3
    4294:	2b00      	cmp	r3, #0
    4296:	d030      	beq.n	42fa <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    4298:	4b1a      	ldr	r3, [pc, #104]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    429a:	681b      	ldr	r3, [r3, #0]
    429c:	2200      	movs	r2, #0
    429e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    42a0:	4b18      	ldr	r3, [pc, #96]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	681a      	ldr	r2, [r3, #0]
    42a6:	4b17      	ldr	r3, [pc, #92]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	f042 0202 	orr.w	r2, r2, #2
    42ae:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    42b0:	4b14      	ldr	r3, [pc, #80]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	681a      	ldr	r2, [r3, #0]
    42b6:	4b13      	ldr	r3, [pc, #76]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	f042 0201 	orr.w	r2, r2, #1
    42be:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    42c0:	4b10      	ldr	r3, [pc, #64]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	681a      	ldr	r2, [r3, #0]
    42c6:	4b0f      	ldr	r3, [pc, #60]	; (4304 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	f042 0204 	orr.w	r2, r2, #4
    42ce:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	689e      	ldr	r6, [r3, #8]
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    42dc:	4b0a      	ldr	r3, [pc, #40]	; (4308 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    42de:	f107 040c 	add.w	r4, r7, #12
    42e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    42e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    42e8:	69bb      	ldr	r3, [r7, #24]
    42ea:	9300      	str	r3, [sp, #0]
    42ec:	f107 030c 	add.w	r3, r7, #12
    42f0:	cb0e      	ldmia	r3, {r1, r2, r3}
    42f2:	4630      	mov	r0, r6
    42f4:	47a8      	blx	r5
      status = Status::kSuccess;
    42f6:	2300      	movs	r3, #0
    42f8:	61fb      	str	r3, [r7, #28]
    }

    return status;
    42fa:	69fb      	ldr	r3, [r7, #28]
  }
    42fc:	4618      	mov	r0, r3
    42fe:	3724      	adds	r7, #36	; 0x24
    4300:	46bd      	mov	sp, r7
    4302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4304:	10000068 	.word	0x10000068
    4308:	00006e6c 	.word	0x00006e6c

0000430c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    430c:	b580      	push	{r7, lr}
    430e:	b084      	sub	sp, #16
    4310:	af00      	add	r7, sp, #0
    4312:	6078      	str	r0, [r7, #4]
    4314:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	4618      	mov	r0, r3
    431a:	f7fc fb63 	bl	9e4 <units::linear_scale<float>::operator()() const>
    431e:	eeb0 7a40 	vmov.f32	s14, s0
    4322:	683b      	ldr	r3, [r7, #0]
    4324:	ee07 3a90 	vmov	s15, r3
    4328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    432c:	ee77 7a67 	vsub.f32	s15, s14, s15
    4330:	f107 030c 	add.w	r3, r7, #12
    4334:	eeb0 0a67 	vmov.f32	s0, s15
    4338:	4618      	mov	r0, r3
    433a:	f7fc fb62 	bl	a02 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    433e:	68fb      	ldr	r3, [r7, #12]
	}
    4340:	4618      	mov	r0, r3
    4342:	3710      	adds	r7, #16
    4344:	46bd      	mov	sp, r7
    4346:	bd80      	pop	{r7, pc}

00004348 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
    434e:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    4350:	6878      	ldr	r0, [r7, #4]
    4352:	f7fd ff11 	bl	2178 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4356:	4603      	mov	r3, r0
	}
    4358:	4618      	mov	r0, r3
    435a:	3708      	adds	r7, #8
    435c:	46bd      	mov	sp, r7
    435e:	bd80      	pop	{r7, pc}

00004360 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    4360:	b590      	push	{r4, r7, lr}
    4362:	b089      	sub	sp, #36	; 0x24
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
    4368:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    436a:	f04f 0001 	mov.w	r0, #1
    436e:	f04f 0100 	mov.w	r1, #0
    4372:	f7ff fe1b 	bl	3fac <units::literals::operator"" _Hz(unsigned long long)>
    4376:	4603      	mov	r3, r0
    4378:	60fb      	str	r3, [r7, #12]
    437a:	f107 020c 	add.w	r2, r7, #12
    437e:	463b      	mov	r3, r7
    4380:	4611      	mov	r1, r2
    4382:	4618      	mov	r0, r3
    4384:	f7ff fe48 	bl	4018 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4388:	4603      	mov	r3, r0
    438a:	2b00      	cmp	r3, #0
    438c:	d002      	beq.n	4394 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    438e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4392:	e041      	b.n	4418 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	685a      	ldr	r2, [r3, #4]
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	685b      	ldr	r3, [r3, #4]
    439c:	681b      	ldr	r3, [r3, #0]
    439e:	330c      	adds	r3, #12
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	4610      	mov	r0, r2
    43a4:	4798      	blx	r3
    43a6:	4603      	mov	r3, r0
    43a8:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    43aa:	463a      	mov	r2, r7
    43ac:	f107 0308 	add.w	r3, r7, #8
    43b0:	4611      	mov	r1, r2
    43b2:	4618      	mov	r0, r3
    43b4:	f7fd fba6 	bl	1b04 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    43b8:	4603      	mov	r3, r0
    43ba:	617b      	str	r3, [r7, #20]
    43bc:	f107 0314 	add.w	r3, r7, #20
    43c0:	2101      	movs	r1, #1
    43c2:	4618      	mov	r0, r3
    43c4:	f7ff ffa2 	bl	430c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    43c8:	4603      	mov	r3, r0
    43ca:	613b      	str	r3, [r7, #16]
    43cc:	f107 0310 	add.w	r3, r7, #16
    43d0:	4618      	mov	r0, r3
    43d2:	f7ff ffb9 	bl	4348 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    43d6:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    43d8:	f107 0308 	add.w	r3, r7, #8
    43dc:	4618      	mov	r0, r3
    43de:	f7fd f86d 	bl	14bc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    43e2:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    43e4:	463b      	mov	r3, r7
    43e6:	4618      	mov	r0, r3
    43e8:	f7fd f868 	bl	14bc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    43ec:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    43ee:	fbb4 f2f3 	udiv	r2, r4, r3
    43f2:	fb03 f302 	mul.w	r3, r3, r2
    43f6:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    43f8:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    43fa:	69fb      	ldr	r3, [r7, #28]
    43fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4400:	d305      	bcc.n	440e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    4402:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4406:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    4408:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    440c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    440e:	4b04      	ldr	r3, [pc, #16]	; (4420 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    4410:	681b      	ldr	r3, [r3, #0]
    4412:	69fa      	ldr	r2, [r7, #28]
    4414:	605a      	str	r2, [r3, #4]
    return remainder;
    4416:	69bb      	ldr	r3, [r7, #24]
  }
    4418:	4618      	mov	r0, r3
    441a:	3724      	adds	r7, #36	; 0x24
    441c:	46bd      	mov	sp, r7
    441e:	bd90      	pop	{r4, r7, pc}
    4420:	10000068 	.word	0x10000068

00004424 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    4424:	b580      	push	{r7, lr}
    4426:	b082      	sub	sp, #8
    4428:	af00      	add	r7, sp, #0
    442a:	6078      	str	r0, [r7, #4]
    442c:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    442e:	683a      	ldr	r2, [r7, #0]
    4430:	6879      	ldr	r1, [r7, #4]
    4432:	4804      	ldr	r0, [pc, #16]	; (4444 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    4434:	f7fd fa26 	bl	1884 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    4438:	683b      	ldr	r3, [r7, #0]
}
    443a:	4618      	mov	r0, r3
    443c:	3708      	adds	r7, #8
    443e:	46bd      	mov	sp, r7
    4440:	bd80      	pop	{r7, pc}
    4442:	bf00      	nop
    4444:	1000030c 	.word	0x1000030c

00004448 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    4448:	b590      	push	{r4, r7, lr}
    444a:	b087      	sub	sp, #28
    444c:	af02      	add	r7, sp, #8
    444e:	6078      	str	r0, [r7, #4]
    4450:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    4452:	f107 0308 	add.w	r3, r7, #8
    4456:	4618      	mov	r0, r3
    4458:	f7fd fe04 	bl	2064 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    445c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    4460:	e9cd 3400 	strd	r3, r4, [sp]
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	6879      	ldr	r1, [r7, #4]
    4468:	4803      	ldr	r0, [pc, #12]	; (4478 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    446a:	f7fd fa5d 	bl	1928 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    446e:	683b      	ldr	r3, [r7, #0]
}
    4470:	4618      	mov	r0, r3
    4472:	3714      	adds	r7, #20
    4474:	46bd      	mov	sp, r7
    4476:	bd90      	pop	{r4, r7, pc}
    4478:	1000030c 	.word	0x1000030c

0000447c <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    447c:	b580      	push	{r7, lr}
    447e:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    4480:	4802      	ldr	r0, [pc, #8]	; (448c <ThreadRuntimeCounter+0x10>)
    4482:	f7ff fd6f 	bl	3f64 <sjsu::cortex::DwtCounter::GetCount()>
    4486:	4603      	mov	r3, r0
}
    4488:	4618      	mov	r0, r3
    448a:	bd80      	pop	{r7, pc}
    448c:	10000308 	.word	0x10000308

00004490 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    4490:	b580      	push	{r7, lr}
    4492:	b082      	sub	sp, #8
    4494:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    4496:	f7ff fd75 	bl	3f84 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    449a:	4b1e      	ldr	r3, [pc, #120]	; (4514 <sjsu::InitializePlatform()+0x84>)
    449c:	6819      	ldr	r1, [r3, #0]
    449e:	481e      	ldr	r0, [pc, #120]	; (4518 <sjsu::InitializePlatform()+0x88>)
    44a0:	f7fc fb46 	bl	b30 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    44a4:	23ff      	movs	r3, #255	; 0xff
    44a6:	703b      	strb	r3, [r7, #0]
    44a8:	463b      	mov	r3, r7
    44aa:	2201      	movs	r2, #1
    44ac:	4619      	mov	r1, r3
    44ae:	481a      	ldr	r0, [pc, #104]	; (4518 <sjsu::InitializePlatform()+0x88>)
    44b0:	f7fc fb8c 	bl	bcc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    44b4:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    44b8:	4818      	ldr	r0, [pc, #96]	; (451c <sjsu::InitializePlatform()+0x8c>)
    44ba:	f7fd f93d 	bl	1738 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    44be:	4818      	ldr	r0, [pc, #96]	; (4520 <sjsu::InitializePlatform()+0x90>)
    44c0:	f000 f95a 	bl	4778 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    44c4:	4817      	ldr	r0, [pc, #92]	; (4524 <sjsu::InitializePlatform()+0x94>)
    44c6:	f000 f967 	bl	4798 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    44ca:	4b17      	ldr	r3, [pc, #92]	; (4528 <sjsu::InitializePlatform()+0x98>)
    44cc:	6819      	ldr	r1, [r3, #0]
    44ce:	4817      	ldr	r0, [pc, #92]	; (452c <sjsu::InitializePlatform()+0x9c>)
    44d0:	f7ff ff46 	bl	4360 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    44d4:	4815      	ldr	r0, [pc, #84]	; (452c <sjsu::InitializePlatform()+0x9c>)
    44d6:	f7ff fecf 	bl	4278 <sjsu::cortex::SystemTimer::StartTimer() const>
    44da:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	2b00      	cmp	r3, #0
    44e0:	d00d      	beq.n	44fe <sjsu::InitializePlatform()+0x6e>
    44e2:	23d6      	movs	r3, #214	; 0xd6
    44e4:	4a12      	ldr	r2, [pc, #72]	; (4530 <sjsu::InitializePlatform()+0xa0>)
    44e6:	4913      	ldr	r1, [pc, #76]	; (4534 <sjsu::InitializePlatform()+0xa4>)
    44e8:	4813      	ldr	r0, [pc, #76]	; (4538 <sjsu::InitializePlatform()+0xa8>)
    44ea:	f7ff fca3 	bl	3e34 <printf>
    44ee:	4813      	ldr	r0, [pc, #76]	; (453c <sjsu::InitializePlatform()+0xac>)
    44f0:	f7fe fb84 	bl	2bfc <puts>
    44f4:	2100      	movs	r1, #0
    44f6:	2001      	movs	r0, #1
    44f8:	f7fc f842 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    44fc:	e7fe      	b.n	44fc <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    44fe:	4810      	ldr	r0, [pc, #64]	; (4540 <sjsu::InitializePlatform()+0xb0>)
    4500:	f7ff fd0e 	bl	3f20 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    4504:	480f      	ldr	r0, [pc, #60]	; (4544 <sjsu::InitializePlatform()+0xb4>)
    4506:	f7ff fda5 	bl	4054 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    450a:	bf00      	nop
    450c:	3708      	adds	r7, #8
    450e:	46bd      	mov	sp, r7
    4510:	bd80      	pop	{r7, pc}
    4512:	bf00      	nop
    4514:	00007260 	.word	0x00007260
    4518:	1000006c 	.word	0x1000006c
    451c:	1000030c 	.word	0x1000030c
    4520:	00004425 	.word	0x00004425
    4524:	00004449 	.word	0x00004449
    4528:	00007264 	.word	0x00007264
    452c:	10000318 	.word	0x10000318
    4530:	000072d4 	.word	0x000072d4
    4534:	00007290 	.word	0x00007290
    4538:	00007188 	.word	0x00007188
    453c:	00006f1c 	.word	0x00006f1c
    4540:	10000308 	.word	0x10000308
    4544:	00004235 	.word	0x00004235

00004548 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    4548:	b5f0      	push	{r4, r5, r6, r7, lr}
    454a:	b083      	sub	sp, #12
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
    4550:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4552:	6838      	ldr	r0, [r7, #0]
    4554:	f7fc fa72 	bl	a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4558:	460a      	mov	r2, r1
    455a:	4601      	mov	r1, r0
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	e9d3 5600 	ldrd	r5, r6, [r3]
    4562:	186b      	adds	r3, r5, r1
    4564:	eb46 0402 	adc.w	r4, r6, r2
    4568:	687a      	ldr	r2, [r7, #4]
    456a:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    456e:	687b      	ldr	r3, [r7, #4]
	}
    4570:	4618      	mov	r0, r3
    4572:	370c      	adds	r7, #12
    4574:	46bd      	mov	sp, r7
    4576:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004578 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    4578:	b580      	push	{r7, lr}
    457a:	b082      	sub	sp, #8
    457c:	af00      	add	r7, sp, #0
    457e:	6078      	str	r0, [r7, #4]
    4580:	6039      	str	r1, [r7, #0]
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	2b01      	cmp	r3, #1
    4586:	d15a      	bne.n	463e <__static_initialization_and_destruction_0(int, int)+0xc6>
    4588:	683b      	ldr	r3, [r7, #0]
    458a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    458e:	4293      	cmp	r3, r2
    4590:	d155      	bne.n	463e <__static_initialization_and_destruction_0(int, int)+0xc6>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    4592:	4b2d      	ldr	r3, [pc, #180]	; (4648 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	f003 0301 	and.w	r3, r3, #1
    459a:	2b00      	cmp	r3, #0
    459c:	d106      	bne.n	45ac <__static_initialization_and_destruction_0(int, int)+0x34>
    459e:	4b2a      	ldr	r3, [pc, #168]	; (4648 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    45a0:	2201      	movs	r2, #1
    45a2:	601a      	str	r2, [r3, #0]
    45a4:	4b29      	ldr	r3, [pc, #164]	; (464c <__static_initialization_and_destruction_0(int, int)+0xd4>)
    45a6:	4618      	mov	r0, r3
    45a8:	f7fc f9e2 	bl	970 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    45ac:	4b28      	ldr	r3, [pc, #160]	; (4650 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    45ae:	681b      	ldr	r3, [r3, #0]
    45b0:	f003 0301 	and.w	r3, r3, #1
    45b4:	2b00      	cmp	r3, #0
    45b6:	d105      	bne.n	45c4 <__static_initialization_and_destruction_0(int, int)+0x4c>
    45b8:	4b25      	ldr	r3, [pc, #148]	; (4650 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    45ba:	2201      	movs	r2, #1
    45bc:	601a      	str	r2, [r3, #0]
    45be:	4a25      	ldr	r2, [pc, #148]	; (4654 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    45c0:	4b25      	ldr	r3, [pc, #148]	; (4658 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    45c2:	601a      	str	r2, [r3, #0]
  static constexpr bit::Mask kI2cHighSpeed = bit::CreateMaskFromRange(8);
    45c4:	4b25      	ldr	r3, [pc, #148]	; (465c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    45c6:	681b      	ldr	r3, [r3, #0]
    45c8:	f003 0301 	and.w	r3, r3, #1
    45cc:	2b00      	cmp	r3, #0
    45ce:	d105      	bne.n	45dc <__static_initialization_and_destruction_0(int, int)+0x64>
    45d0:	4b22      	ldr	r3, [pc, #136]	; (465c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    45d2:	2201      	movs	r2, #1
    45d4:	601a      	str	r2, [r3, #0]
    45d6:	4a22      	ldr	r2, [pc, #136]	; (4660 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    45d8:	4b22      	ldr	r3, [pc, #136]	; (4664 <__static_initialization_and_destruction_0(int, int)+0xec>)
    45da:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    45dc:	4b22      	ldr	r3, [pc, #136]	; (4668 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    45de:	681b      	ldr	r3, [r3, #0]
    45e0:	f003 0301 	and.w	r3, r3, #1
    45e4:	2b00      	cmp	r3, #0
    45e6:	d105      	bne.n	45f4 <__static_initialization_and_destruction_0(int, int)+0x7c>
    45e8:	4b1f      	ldr	r3, [pc, #124]	; (4668 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    45ea:	2201      	movs	r2, #1
    45ec:	601a      	str	r2, [r3, #0]
    };
    45ee:	4a1f      	ldr	r2, [pc, #124]	; (466c <__static_initialization_and_destruction_0(int, int)+0xf4>)
    45f0:	4b1f      	ldr	r3, [pc, #124]	; (4670 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    45f2:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    45f4:	4b1f      	ldr	r3, [pc, #124]	; (4674 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	f003 0301 	and.w	r3, r3, #1
    45fc:	2b00      	cmp	r3, #0
    45fe:	d105      	bne.n	460c <__static_initialization_and_destruction_0(int, int)+0x94>
    4600:	4b1c      	ldr	r3, [pc, #112]	; (4674 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4602:	2201      	movs	r2, #1
    4604:	601a      	str	r2, [r3, #0]
    };
    4606:	4a1c      	ldr	r2, [pc, #112]	; (4678 <__static_initialization_and_destruction_0(int, int)+0x100>)
    4608:	4b1c      	ldr	r3, [pc, #112]	; (467c <__static_initialization_and_destruction_0(int, int)+0x104>)
    460a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    460c:	4b1c      	ldr	r3, [pc, #112]	; (4680 <__static_initialization_and_destruction_0(int, int)+0x108>)
    460e:	681b      	ldr	r3, [r3, #0]
    4610:	f003 0301 	and.w	r3, r3, #1
    4614:	2b00      	cmp	r3, #0
    4616:	d105      	bne.n	4624 <__static_initialization_and_destruction_0(int, int)+0xac>
    4618:	4b19      	ldr	r3, [pc, #100]	; (4680 <__static_initialization_and_destruction_0(int, int)+0x108>)
    461a:	2201      	movs	r2, #1
    461c:	601a      	str	r2, [r3, #0]
    };
    461e:	4a19      	ldr	r2, [pc, #100]	; (4684 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    4620:	4b19      	ldr	r3, [pc, #100]	; (4688 <__static_initialization_and_destruction_0(int, int)+0x110>)
    4622:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    4624:	f7fc fe2a 	bl	127c <sjsu::lpc40xx::DefaultSystemController()>
    4628:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    462a:	461a      	mov	r2, r3
    462c:	4917      	ldr	r1, [pc, #92]	; (468c <__static_initialization_and_destruction_0(int, int)+0x114>)
    462e:	4818      	ldr	r0, [pc, #96]	; (4690 <__static_initialization_and_destruction_0(int, int)+0x118>)
    4630:	f7fd f868 	bl	1704 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
sjsu::cortex::SystemTimer system_timer(system_controller);
    4634:	4a17      	ldr	r2, [pc, #92]	; (4694 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    4636:	4918      	ldr	r1, [pc, #96]	; (4698 <__static_initialization_and_destruction_0(int, int)+0x120>)
    4638:	4818      	ldr	r0, [pc, #96]	; (469c <__static_initialization_and_destruction_0(int, int)+0x124>)
    463a:	f7ff fda3 	bl	4184 <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>
}  // namespace sjsu
    463e:	bf00      	nop
    4640:	3708      	adds	r7, #8
    4642:	46bd      	mov	sp, r7
    4644:	bd80      	pop	{r7, pc}
    4646:	bf00      	nop
    4648:	10000254 	.word	0x10000254
    464c:	10000104 	.word	0x10000104
    4650:	10000264 	.word	0x10000264
    4654:	400fc000 	.word	0x400fc000
    4658:	10000248 	.word	0x10000248
    465c:	10000250 	.word	0x10000250
    4660:	4002c000 	.word	0x4002c000
    4664:	10000100 	.word	0x10000100
    4668:	10000268 	.word	0x10000268
    466c:	40098000 	.word	0x40098000
    4670:	10000010 	.word	0x10000010
    4674:	1000026c 	.word	0x1000026c
    4678:	4009c000 	.word	0x4009c000
    467c:	10000024 	.word	0x10000024
    4680:	10000270 	.word	0x10000270
    4684:	400a4000 	.word	0x400a4000
    4688:	10000038 	.word	0x10000038
    468c:	0000727c 	.word	0x0000727c
    4690:	1000030c 	.word	0x1000030c
    4694:	00007268 	.word	0x00007268
    4698:	1000006c 	.word	0x1000006c
    469c:	10000318 	.word	0x10000318

000046a0 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    46a0:	b580      	push	{r7, lr}
    46a2:	af00      	add	r7, sp, #0
    46a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    46a8:	2001      	movs	r0, #1
    46aa:	f7ff ff65 	bl	4578 <__static_initialization_and_destruction_0(int, int)>
    46ae:	bd80      	pop	{r7, pc}

000046b0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    46b0:	4b07      	ldr	r3, [pc, #28]	; (46d0 <pxCurrentTCBConst2>)
    46b2:	6819      	ldr	r1, [r3, #0]
    46b4:	6808      	ldr	r0, [r1, #0]
    46b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46ba:	f380 8809 	msr	PSP, r0
    46be:	f3bf 8f6f 	isb	sy
    46c2:	f04f 0000 	mov.w	r0, #0
    46c6:	f380 8811 	msr	BASEPRI, r0
    46ca:	4770      	bx	lr
    46cc:	f3af 8000 	nop.w

000046d0 <pxCurrentTCBConst2>:
    46d0:	1000027c 	.word	0x1000027c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    46d4:	bf00      	nop
    46d6:	bf00      	nop
    46d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    46dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000046e0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    46e0:	f3ef 8009 	mrs	r0, PSP
    46e4:	f3bf 8f6f 	isb	sy
    46e8:	4b15      	ldr	r3, [pc, #84]	; (4740 <pxCurrentTCBConst>)
    46ea:	681a      	ldr	r2, [r3, #0]
    46ec:	f01e 0f10 	tst.w	lr, #16
    46f0:	bf08      	it	eq
    46f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    46f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46fa:	6010      	str	r0, [r2, #0]
    46fc:	e92d 0009 	stmdb	sp!, {r0, r3}
    4700:	f04f 0028 	mov.w	r0, #40	; 0x28
    4704:	f380 8811 	msr	BASEPRI, r0
    4708:	f3bf 8f4f 	dsb	sy
    470c:	f3bf 8f6f 	isb	sy
    4710:	f7fe f9f6 	bl	2b00 <vTaskSwitchContext>
    4714:	f04f 0000 	mov.w	r0, #0
    4718:	f380 8811 	msr	BASEPRI, r0
    471c:	bc09      	pop	{r0, r3}
    471e:	6819      	ldr	r1, [r3, #0]
    4720:	6808      	ldr	r0, [r1, #0]
    4722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4726:	f01e 0f10 	tst.w	lr, #16
    472a:	bf08      	it	eq
    472c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4730:	f380 8809 	msr	PSP, r0
    4734:	f3bf 8f6f 	isb	sy
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	f3af 8000 	nop.w

00004740 <pxCurrentTCBConst>:
    4740:	1000027c 	.word	0x1000027c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    4744:	bf00      	nop
    4746:	bf00      	nop

00004748 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    4748:	b480      	push	{r7}
    474a:	b083      	sub	sp, #12
    474c:	af00      	add	r7, sp, #0
    474e:	6078      	str	r0, [r7, #4]
    4750:	6039      	str	r1, [r7, #0]
  return 1;
    4752:	2301      	movs	r3, #1
}
    4754:	4618      	mov	r0, r3
    4756:	370c      	adds	r7, #12
    4758:	46bd      	mov	sp, r7
    475a:	f85d 7b04 	ldr.w	r7, [sp], #4
    475e:	4770      	bx	lr

00004760 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    4760:	b480      	push	{r7}
    4762:	b083      	sub	sp, #12
    4764:	af00      	add	r7, sp, #0
    4766:	6078      	str	r0, [r7, #4]
    4768:	6039      	str	r1, [r7, #0]
  return 0;
    476a:	2300      	movs	r3, #0
}
    476c:	4618      	mov	r0, r3
    476e:	370c      	adds	r7, #12
    4770:	46bd      	mov	sp, r7
    4772:	f85d 7b04 	ldr.w	r7, [sp], #4
    4776:	4770      	bx	lr

00004778 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4778:	b480      	push	{r7}
    477a:	b083      	sub	sp, #12
    477c:	af00      	add	r7, sp, #0
    477e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    4780:	4a04      	ldr	r2, [pc, #16]	; (4794 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	6013      	str	r3, [r2, #0]
}
    4786:	bf00      	nop
    4788:	370c      	adds	r7, #12
    478a:	46bd      	mov	sp, r7
    478c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4790:	4770      	bx	lr
    4792:	bf00      	nop
    4794:	10000054 	.word	0x10000054

00004798 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    4798:	b480      	push	{r7}
    479a:	b083      	sub	sp, #12
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    47a0:	4a04      	ldr	r2, [pc, #16]	; (47b4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    47a2:	687b      	ldr	r3, [r7, #4]
    47a4:	6013      	str	r3, [r2, #0]
}
    47a6:	bf00      	nop
    47a8:	370c      	adds	r7, #12
    47aa:	46bd      	mov	sp, r7
    47ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop
    47b4:	10000058 	.word	0x10000058

000047b8 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    47b8:	b580      	push	{r7, lr}
    47ba:	b082      	sub	sp, #8
    47bc:	af00      	add	r7, sp, #0
    47be:	4603      	mov	r3, r0
    47c0:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    47c2:	4b05      	ldr	r3, [pc, #20]	; (47d8 <_putchar+0x20>)
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	1dfa      	adds	r2, r7, #7
    47c8:	2101      	movs	r1, #1
    47ca:	4610      	mov	r0, r2
    47cc:	4798      	blx	r3
}
    47ce:	bf00      	nop
    47d0:	3708      	adds	r7, #8
    47d2:	46bd      	mov	sp, r7
    47d4:	bd80      	pop	{r7, pc}
    47d6:	bf00      	nop
    47d8:	10000054 	.word	0x10000054

000047dc <__cxa_pure_virtual>:
    47dc:	b508      	push	{r3, lr}
    47de:	f000 f80d 	bl	47fc <std::terminate()>

000047e2 <__cxxabiv1::__terminate(void (*)())>:
    47e2:	b508      	push	{r3, lr}
    47e4:	4780      	blx	r0
    47e6:	f001 fc2f 	bl	6048 <abort>
    47ea:	Address 0x00000000000047ea is out of bounds.


000047ec <std::get_terminate()>:
    47ec:	4b02      	ldr	r3, [pc, #8]	; (47f8 <std::get_terminate()+0xc>)
    47ee:	6818      	ldr	r0, [r3, #0]
    47f0:	f3bf 8f5b 	dmb	ish
    47f4:	4770      	bx	lr
    47f6:	bf00      	nop
    47f8:	10000070 	.word	0x10000070

000047fc <std::terminate()>:
    47fc:	b508      	push	{r3, lr}
    47fe:	f7ff fff5 	bl	47ec <std::get_terminate()>
    4802:	f7ff ffee 	bl	47e2 <__cxxabiv1::__terminate(void (*)())>
    4806:	Address 0x0000000000004806 is out of bounds.


00004808 <__aeabi_drsub>:
    4808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    480c:	e002      	b.n	4814 <__adddf3>
    480e:	bf00      	nop

00004810 <__aeabi_dsub>:
    4810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004814 <__adddf3>:
    4814:	b530      	push	{r4, r5, lr}
    4816:	ea4f 0441 	mov.w	r4, r1, lsl #1
    481a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    481e:	ea94 0f05 	teq	r4, r5
    4822:	bf08      	it	eq
    4824:	ea90 0f02 	teqeq	r0, r2
    4828:	bf1f      	itttt	ne
    482a:	ea54 0c00 	orrsne.w	ip, r4, r0
    482e:	ea55 0c02 	orrsne.w	ip, r5, r2
    4832:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4836:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    483a:	f000 80e2 	beq.w	4a02 <__adddf3+0x1ee>
    483e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4842:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4846:	bfb8      	it	lt
    4848:	426d      	neglt	r5, r5
    484a:	dd0c      	ble.n	4866 <__adddf3+0x52>
    484c:	442c      	add	r4, r5
    484e:	ea80 0202 	eor.w	r2, r0, r2
    4852:	ea81 0303 	eor.w	r3, r1, r3
    4856:	ea82 0000 	eor.w	r0, r2, r0
    485a:	ea83 0101 	eor.w	r1, r3, r1
    485e:	ea80 0202 	eor.w	r2, r0, r2
    4862:	ea81 0303 	eor.w	r3, r1, r3
    4866:	2d36      	cmp	r5, #54	; 0x36
    4868:	bf88      	it	hi
    486a:	bd30      	pophi	{r4, r5, pc}
    486c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4870:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4874:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4878:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    487c:	d002      	beq.n	4884 <__adddf3+0x70>
    487e:	4240      	negs	r0, r0
    4880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4884:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4888:	ea4f 3303 	mov.w	r3, r3, lsl #12
    488c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4890:	d002      	beq.n	4898 <__adddf3+0x84>
    4892:	4252      	negs	r2, r2
    4894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4898:	ea94 0f05 	teq	r4, r5
    489c:	f000 80a7 	beq.w	49ee <__adddf3+0x1da>
    48a0:	f1a4 0401 	sub.w	r4, r4, #1
    48a4:	f1d5 0e20 	rsbs	lr, r5, #32
    48a8:	db0d      	blt.n	48c6 <__adddf3+0xb2>
    48aa:	fa02 fc0e 	lsl.w	ip, r2, lr
    48ae:	fa22 f205 	lsr.w	r2, r2, r5
    48b2:	1880      	adds	r0, r0, r2
    48b4:	f141 0100 	adc.w	r1, r1, #0
    48b8:	fa03 f20e 	lsl.w	r2, r3, lr
    48bc:	1880      	adds	r0, r0, r2
    48be:	fa43 f305 	asr.w	r3, r3, r5
    48c2:	4159      	adcs	r1, r3
    48c4:	e00e      	b.n	48e4 <__adddf3+0xd0>
    48c6:	f1a5 0520 	sub.w	r5, r5, #32
    48ca:	f10e 0e20 	add.w	lr, lr, #32
    48ce:	2a01      	cmp	r2, #1
    48d0:	fa03 fc0e 	lsl.w	ip, r3, lr
    48d4:	bf28      	it	cs
    48d6:	f04c 0c02 	orrcs.w	ip, ip, #2
    48da:	fa43 f305 	asr.w	r3, r3, r5
    48de:	18c0      	adds	r0, r0, r3
    48e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    48e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    48e8:	d507      	bpl.n	48fa <__adddf3+0xe6>
    48ea:	f04f 0e00 	mov.w	lr, #0
    48ee:	f1dc 0c00 	rsbs	ip, ip, #0
    48f2:	eb7e 0000 	sbcs.w	r0, lr, r0
    48f6:	eb6e 0101 	sbc.w	r1, lr, r1
    48fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    48fe:	d31b      	bcc.n	4938 <__adddf3+0x124>
    4900:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4904:	d30c      	bcc.n	4920 <__adddf3+0x10c>
    4906:	0849      	lsrs	r1, r1, #1
    4908:	ea5f 0030 	movs.w	r0, r0, rrx
    490c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4910:	f104 0401 	add.w	r4, r4, #1
    4914:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4918:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    491c:	f080 809a 	bcs.w	4a54 <__adddf3+0x240>
    4920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4924:	bf08      	it	eq
    4926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    492a:	f150 0000 	adcs.w	r0, r0, #0
    492e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4932:	ea41 0105 	orr.w	r1, r1, r5
    4936:	bd30      	pop	{r4, r5, pc}
    4938:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    493c:	4140      	adcs	r0, r0
    493e:	eb41 0101 	adc.w	r1, r1, r1
    4942:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4946:	f1a4 0401 	sub.w	r4, r4, #1
    494a:	d1e9      	bne.n	4920 <__adddf3+0x10c>
    494c:	f091 0f00 	teq	r1, #0
    4950:	bf04      	itt	eq
    4952:	4601      	moveq	r1, r0
    4954:	2000      	moveq	r0, #0
    4956:	fab1 f381 	clz	r3, r1
    495a:	bf08      	it	eq
    495c:	3320      	addeq	r3, #32
    495e:	f1a3 030b 	sub.w	r3, r3, #11
    4962:	f1b3 0220 	subs.w	r2, r3, #32
    4966:	da0c      	bge.n	4982 <__adddf3+0x16e>
    4968:	320c      	adds	r2, #12
    496a:	dd08      	ble.n	497e <__adddf3+0x16a>
    496c:	f102 0c14 	add.w	ip, r2, #20
    4970:	f1c2 020c 	rsb	r2, r2, #12
    4974:	fa01 f00c 	lsl.w	r0, r1, ip
    4978:	fa21 f102 	lsr.w	r1, r1, r2
    497c:	e00c      	b.n	4998 <__adddf3+0x184>
    497e:	f102 0214 	add.w	r2, r2, #20
    4982:	bfd8      	it	le
    4984:	f1c2 0c20 	rsble	ip, r2, #32
    4988:	fa01 f102 	lsl.w	r1, r1, r2
    498c:	fa20 fc0c 	lsr.w	ip, r0, ip
    4990:	bfdc      	itt	le
    4992:	ea41 010c 	orrle.w	r1, r1, ip
    4996:	4090      	lslle	r0, r2
    4998:	1ae4      	subs	r4, r4, r3
    499a:	bfa2      	ittt	ge
    499c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    49a0:	4329      	orrge	r1, r5
    49a2:	bd30      	popge	{r4, r5, pc}
    49a4:	ea6f 0404 	mvn.w	r4, r4
    49a8:	3c1f      	subs	r4, #31
    49aa:	da1c      	bge.n	49e6 <__adddf3+0x1d2>
    49ac:	340c      	adds	r4, #12
    49ae:	dc0e      	bgt.n	49ce <__adddf3+0x1ba>
    49b0:	f104 0414 	add.w	r4, r4, #20
    49b4:	f1c4 0220 	rsb	r2, r4, #32
    49b8:	fa20 f004 	lsr.w	r0, r0, r4
    49bc:	fa01 f302 	lsl.w	r3, r1, r2
    49c0:	ea40 0003 	orr.w	r0, r0, r3
    49c4:	fa21 f304 	lsr.w	r3, r1, r4
    49c8:	ea45 0103 	orr.w	r1, r5, r3
    49cc:	bd30      	pop	{r4, r5, pc}
    49ce:	f1c4 040c 	rsb	r4, r4, #12
    49d2:	f1c4 0220 	rsb	r2, r4, #32
    49d6:	fa20 f002 	lsr.w	r0, r0, r2
    49da:	fa01 f304 	lsl.w	r3, r1, r4
    49de:	ea40 0003 	orr.w	r0, r0, r3
    49e2:	4629      	mov	r1, r5
    49e4:	bd30      	pop	{r4, r5, pc}
    49e6:	fa21 f004 	lsr.w	r0, r1, r4
    49ea:	4629      	mov	r1, r5
    49ec:	bd30      	pop	{r4, r5, pc}
    49ee:	f094 0f00 	teq	r4, #0
    49f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    49f6:	bf06      	itte	eq
    49f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    49fc:	3401      	addeq	r4, #1
    49fe:	3d01      	subne	r5, #1
    4a00:	e74e      	b.n	48a0 <__adddf3+0x8c>
    4a02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4a06:	bf18      	it	ne
    4a08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4a0c:	d029      	beq.n	4a62 <__adddf3+0x24e>
    4a0e:	ea94 0f05 	teq	r4, r5
    4a12:	bf08      	it	eq
    4a14:	ea90 0f02 	teqeq	r0, r2
    4a18:	d005      	beq.n	4a26 <__adddf3+0x212>
    4a1a:	ea54 0c00 	orrs.w	ip, r4, r0
    4a1e:	bf04      	itt	eq
    4a20:	4619      	moveq	r1, r3
    4a22:	4610      	moveq	r0, r2
    4a24:	bd30      	pop	{r4, r5, pc}
    4a26:	ea91 0f03 	teq	r1, r3
    4a2a:	bf1e      	ittt	ne
    4a2c:	2100      	movne	r1, #0
    4a2e:	2000      	movne	r0, #0
    4a30:	bd30      	popne	{r4, r5, pc}
    4a32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4a36:	d105      	bne.n	4a44 <__adddf3+0x230>
    4a38:	0040      	lsls	r0, r0, #1
    4a3a:	4149      	adcs	r1, r1
    4a3c:	bf28      	it	cs
    4a3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4a42:	bd30      	pop	{r4, r5, pc}
    4a44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4a48:	bf3c      	itt	cc
    4a4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4a4e:	bd30      	popcc	{r4, r5, pc}
    4a50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4a54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4a58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4a5c:	f04f 0000 	mov.w	r0, #0
    4a60:	bd30      	pop	{r4, r5, pc}
    4a62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4a66:	bf1a      	itte	ne
    4a68:	4619      	movne	r1, r3
    4a6a:	4610      	movne	r0, r2
    4a6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4a70:	bf1c      	itt	ne
    4a72:	460b      	movne	r3, r1
    4a74:	4602      	movne	r2, r0
    4a76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4a7a:	bf06      	itte	eq
    4a7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4a80:	ea91 0f03 	teqeq	r1, r3
    4a84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4a88:	bd30      	pop	{r4, r5, pc}
    4a8a:	bf00      	nop

00004a8c <__aeabi_ui2d>:
    4a8c:	f090 0f00 	teq	r0, #0
    4a90:	bf04      	itt	eq
    4a92:	2100      	moveq	r1, #0
    4a94:	4770      	bxeq	lr
    4a96:	b530      	push	{r4, r5, lr}
    4a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4aa0:	f04f 0500 	mov.w	r5, #0
    4aa4:	f04f 0100 	mov.w	r1, #0
    4aa8:	e750      	b.n	494c <__adddf3+0x138>
    4aaa:	bf00      	nop

00004aac <__aeabi_i2d>:
    4aac:	f090 0f00 	teq	r0, #0
    4ab0:	bf04      	itt	eq
    4ab2:	2100      	moveq	r1, #0
    4ab4:	4770      	bxeq	lr
    4ab6:	b530      	push	{r4, r5, lr}
    4ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4ac0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4ac4:	bf48      	it	mi
    4ac6:	4240      	negmi	r0, r0
    4ac8:	f04f 0100 	mov.w	r1, #0
    4acc:	e73e      	b.n	494c <__adddf3+0x138>
    4ace:	bf00      	nop

00004ad0 <__aeabi_f2d>:
    4ad0:	0042      	lsls	r2, r0, #1
    4ad2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4ad6:	ea4f 0131 	mov.w	r1, r1, rrx
    4ada:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4ade:	bf1f      	itttt	ne
    4ae0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4ae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4ae8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4aec:	4770      	bxne	lr
    4aee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    4af2:	bf08      	it	eq
    4af4:	4770      	bxeq	lr
    4af6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    4afa:	bf04      	itt	eq
    4afc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    4b00:	4770      	bxeq	lr
    4b02:	b530      	push	{r4, r5, lr}
    4b04:	f44f 7460 	mov.w	r4, #896	; 0x380
    4b08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4b0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4b10:	e71c      	b.n	494c <__adddf3+0x138>
    4b12:	bf00      	nop

00004b14 <__aeabi_ul2d>:
    4b14:	ea50 0201 	orrs.w	r2, r0, r1
    4b18:	bf08      	it	eq
    4b1a:	4770      	bxeq	lr
    4b1c:	b530      	push	{r4, r5, lr}
    4b1e:	f04f 0500 	mov.w	r5, #0
    4b22:	e00a      	b.n	4b3a <__aeabi_l2d+0x16>

00004b24 <__aeabi_l2d>:
    4b24:	ea50 0201 	orrs.w	r2, r0, r1
    4b28:	bf08      	it	eq
    4b2a:	4770      	bxeq	lr
    4b2c:	b530      	push	{r4, r5, lr}
    4b2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4b32:	d502      	bpl.n	4b3a <__aeabi_l2d+0x16>
    4b34:	4240      	negs	r0, r0
    4b36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4b3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4b3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4b42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4b46:	f43f aed8 	beq.w	48fa <__adddf3+0xe6>
    4b4a:	f04f 0203 	mov.w	r2, #3
    4b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4b52:	bf18      	it	ne
    4b54:	3203      	addne	r2, #3
    4b56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4b5a:	bf18      	it	ne
    4b5c:	3203      	addne	r2, #3
    4b5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4b62:	f1c2 0320 	rsb	r3, r2, #32
    4b66:	fa00 fc03 	lsl.w	ip, r0, r3
    4b6a:	fa20 f002 	lsr.w	r0, r0, r2
    4b6e:	fa01 fe03 	lsl.w	lr, r1, r3
    4b72:	ea40 000e 	orr.w	r0, r0, lr
    4b76:	fa21 f102 	lsr.w	r1, r1, r2
    4b7a:	4414      	add	r4, r2
    4b7c:	e6bd      	b.n	48fa <__adddf3+0xe6>
    4b7e:	bf00      	nop

00004b80 <__aeabi_d2f>:
    4b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4b88:	bf24      	itt	cs
    4b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4b92:	d90d      	bls.n	4bb0 <__aeabi_d2f+0x30>
    4b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4ba8:	bf08      	it	eq
    4baa:	f020 0001 	biceq.w	r0, r0, #1
    4bae:	4770      	bx	lr
    4bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4bb4:	d121      	bne.n	4bfa <__aeabi_d2f+0x7a>
    4bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4bba:	bfbc      	itt	lt
    4bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4bc0:	4770      	bxlt	lr
    4bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4bca:	f1c2 0218 	rsb	r2, r2, #24
    4bce:	f1c2 0c20 	rsb	ip, r2, #32
    4bd2:	fa10 f30c 	lsls.w	r3, r0, ip
    4bd6:	fa20 f002 	lsr.w	r0, r0, r2
    4bda:	bf18      	it	ne
    4bdc:	f040 0001 	orrne.w	r0, r0, #1
    4be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4be8:	fa03 fc0c 	lsl.w	ip, r3, ip
    4bec:	ea40 000c 	orr.w	r0, r0, ip
    4bf0:	fa23 f302 	lsr.w	r3, r3, r2
    4bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4bf8:	e7cc      	b.n	4b94 <__aeabi_d2f+0x14>
    4bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4bfe:	d107      	bne.n	4c10 <__aeabi_d2f+0x90>
    4c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4c04:	bf1e      	ittt	ne
    4c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4c0e:	4770      	bxne	lr
    4c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c1c:	4770      	bx	lr
    4c1e:	bf00      	nop

00004c20 <__aeabi_frsub>:
    4c20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4c24:	e002      	b.n	4c2c <__addsf3>
    4c26:	bf00      	nop

00004c28 <__aeabi_fsub>:
    4c28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004c2c <__addsf3>:
    4c2c:	0042      	lsls	r2, r0, #1
    4c2e:	bf1f      	itttt	ne
    4c30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4c34:	ea92 0f03 	teqne	r2, r3
    4c38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4c3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4c40:	d06a      	beq.n	4d18 <__addsf3+0xec>
    4c42:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4c46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4c4a:	bfc1      	itttt	gt
    4c4c:	18d2      	addgt	r2, r2, r3
    4c4e:	4041      	eorgt	r1, r0
    4c50:	4048      	eorgt	r0, r1
    4c52:	4041      	eorgt	r1, r0
    4c54:	bfb8      	it	lt
    4c56:	425b      	neglt	r3, r3
    4c58:	2b19      	cmp	r3, #25
    4c5a:	bf88      	it	hi
    4c5c:	4770      	bxhi	lr
    4c5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4c62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4c6a:	bf18      	it	ne
    4c6c:	4240      	negne	r0, r0
    4c6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4c72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4c76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4c7a:	bf18      	it	ne
    4c7c:	4249      	negne	r1, r1
    4c7e:	ea92 0f03 	teq	r2, r3
    4c82:	d03f      	beq.n	4d04 <__addsf3+0xd8>
    4c84:	f1a2 0201 	sub.w	r2, r2, #1
    4c88:	fa41 fc03 	asr.w	ip, r1, r3
    4c8c:	eb10 000c 	adds.w	r0, r0, ip
    4c90:	f1c3 0320 	rsb	r3, r3, #32
    4c94:	fa01 f103 	lsl.w	r1, r1, r3
    4c98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4c9c:	d502      	bpl.n	4ca4 <__addsf3+0x78>
    4c9e:	4249      	negs	r1, r1
    4ca0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4ca4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4ca8:	d313      	bcc.n	4cd2 <__addsf3+0xa6>
    4caa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4cae:	d306      	bcc.n	4cbe <__addsf3+0x92>
    4cb0:	0840      	lsrs	r0, r0, #1
    4cb2:	ea4f 0131 	mov.w	r1, r1, rrx
    4cb6:	f102 0201 	add.w	r2, r2, #1
    4cba:	2afe      	cmp	r2, #254	; 0xfe
    4cbc:	d251      	bcs.n	4d62 <__addsf3+0x136>
    4cbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4cc6:	bf08      	it	eq
    4cc8:	f020 0001 	biceq.w	r0, r0, #1
    4ccc:	ea40 0003 	orr.w	r0, r0, r3
    4cd0:	4770      	bx	lr
    4cd2:	0049      	lsls	r1, r1, #1
    4cd4:	eb40 0000 	adc.w	r0, r0, r0
    4cd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4cdc:	f1a2 0201 	sub.w	r2, r2, #1
    4ce0:	d1ed      	bne.n	4cbe <__addsf3+0x92>
    4ce2:	fab0 fc80 	clz	ip, r0
    4ce6:	f1ac 0c08 	sub.w	ip, ip, #8
    4cea:	ebb2 020c 	subs.w	r2, r2, ip
    4cee:	fa00 f00c 	lsl.w	r0, r0, ip
    4cf2:	bfaa      	itet	ge
    4cf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4cf8:	4252      	neglt	r2, r2
    4cfa:	4318      	orrge	r0, r3
    4cfc:	bfbc      	itt	lt
    4cfe:	40d0      	lsrlt	r0, r2
    4d00:	4318      	orrlt	r0, r3
    4d02:	4770      	bx	lr
    4d04:	f092 0f00 	teq	r2, #0
    4d08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4d0c:	bf06      	itte	eq
    4d0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4d12:	3201      	addeq	r2, #1
    4d14:	3b01      	subne	r3, #1
    4d16:	e7b5      	b.n	4c84 <__addsf3+0x58>
    4d18:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4d1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4d20:	bf18      	it	ne
    4d22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4d26:	d021      	beq.n	4d6c <__addsf3+0x140>
    4d28:	ea92 0f03 	teq	r2, r3
    4d2c:	d004      	beq.n	4d38 <__addsf3+0x10c>
    4d2e:	f092 0f00 	teq	r2, #0
    4d32:	bf08      	it	eq
    4d34:	4608      	moveq	r0, r1
    4d36:	4770      	bx	lr
    4d38:	ea90 0f01 	teq	r0, r1
    4d3c:	bf1c      	itt	ne
    4d3e:	2000      	movne	r0, #0
    4d40:	4770      	bxne	lr
    4d42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4d46:	d104      	bne.n	4d52 <__addsf3+0x126>
    4d48:	0040      	lsls	r0, r0, #1
    4d4a:	bf28      	it	cs
    4d4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4d50:	4770      	bx	lr
    4d52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4d56:	bf3c      	itt	cc
    4d58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4d5c:	4770      	bxcc	lr
    4d5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4d62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4d66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4d6a:	4770      	bx	lr
    4d6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4d70:	bf16      	itet	ne
    4d72:	4608      	movne	r0, r1
    4d74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4d78:	4601      	movne	r1, r0
    4d7a:	0242      	lsls	r2, r0, #9
    4d7c:	bf06      	itte	eq
    4d7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4d82:	ea90 0f01 	teqeq	r0, r1
    4d86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4d8a:	4770      	bx	lr

00004d8c <__aeabi_ui2f>:
    4d8c:	f04f 0300 	mov.w	r3, #0
    4d90:	e004      	b.n	4d9c <__aeabi_i2f+0x8>
    4d92:	bf00      	nop

00004d94 <__aeabi_i2f>:
    4d94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4d98:	bf48      	it	mi
    4d9a:	4240      	negmi	r0, r0
    4d9c:	ea5f 0c00 	movs.w	ip, r0
    4da0:	bf08      	it	eq
    4da2:	4770      	bxeq	lr
    4da4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4da8:	4601      	mov	r1, r0
    4daa:	f04f 0000 	mov.w	r0, #0
    4dae:	e01c      	b.n	4dea <__aeabi_l2f+0x2a>

00004db0 <__aeabi_ul2f>:
    4db0:	ea50 0201 	orrs.w	r2, r0, r1
    4db4:	bf08      	it	eq
    4db6:	4770      	bxeq	lr
    4db8:	f04f 0300 	mov.w	r3, #0
    4dbc:	e00a      	b.n	4dd4 <__aeabi_l2f+0x14>
    4dbe:	bf00      	nop

00004dc0 <__aeabi_l2f>:
    4dc0:	ea50 0201 	orrs.w	r2, r0, r1
    4dc4:	bf08      	it	eq
    4dc6:	4770      	bxeq	lr
    4dc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4dcc:	d502      	bpl.n	4dd4 <__aeabi_l2f+0x14>
    4dce:	4240      	negs	r0, r0
    4dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4dd4:	ea5f 0c01 	movs.w	ip, r1
    4dd8:	bf02      	ittt	eq
    4dda:	4684      	moveq	ip, r0
    4ddc:	4601      	moveq	r1, r0
    4dde:	2000      	moveq	r0, #0
    4de0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4de4:	bf08      	it	eq
    4de6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4dea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4dee:	fabc f28c 	clz	r2, ip
    4df2:	3a08      	subs	r2, #8
    4df4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4df8:	db10      	blt.n	4e1c <__aeabi_l2f+0x5c>
    4dfa:	fa01 fc02 	lsl.w	ip, r1, r2
    4dfe:	4463      	add	r3, ip
    4e00:	fa00 fc02 	lsl.w	ip, r0, r2
    4e04:	f1c2 0220 	rsb	r2, r2, #32
    4e08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4e0c:	fa20 f202 	lsr.w	r2, r0, r2
    4e10:	eb43 0002 	adc.w	r0, r3, r2
    4e14:	bf08      	it	eq
    4e16:	f020 0001 	biceq.w	r0, r0, #1
    4e1a:	4770      	bx	lr
    4e1c:	f102 0220 	add.w	r2, r2, #32
    4e20:	fa01 fc02 	lsl.w	ip, r1, r2
    4e24:	f1c2 0220 	rsb	r2, r2, #32
    4e28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4e2c:	fa21 f202 	lsr.w	r2, r1, r2
    4e30:	eb43 0002 	adc.w	r0, r3, r2
    4e34:	bf08      	it	eq
    4e36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4e3a:	4770      	bx	lr

00004e3c <__aeabi_uldivmod>:
    4e3c:	b953      	cbnz	r3, 4e54 <__aeabi_uldivmod+0x18>
    4e3e:	b94a      	cbnz	r2, 4e54 <__aeabi_uldivmod+0x18>
    4e40:	2900      	cmp	r1, #0
    4e42:	bf08      	it	eq
    4e44:	2800      	cmpeq	r0, #0
    4e46:	bf1c      	itt	ne
    4e48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4e4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4e50:	f001 b8f8 	b.w	6044 <__aeabi_idiv0>
    4e54:	f1ad 0c08 	sub.w	ip, sp, #8
    4e58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4e5c:	f000 f806 	bl	4e6c <__udivmoddi4>
    4e60:	f8dd e004 	ldr.w	lr, [sp, #4]
    4e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e68:	b004      	add	sp, #16
    4e6a:	4770      	bx	lr

00004e6c <__udivmoddi4>:
    4e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e70:	9e08      	ldr	r6, [sp, #32]
    4e72:	4604      	mov	r4, r0
    4e74:	4688      	mov	r8, r1
    4e76:	2b00      	cmp	r3, #0
    4e78:	d14b      	bne.n	4f12 <__udivmoddi4+0xa6>
    4e7a:	428a      	cmp	r2, r1
    4e7c:	4615      	mov	r5, r2
    4e7e:	d967      	bls.n	4f50 <__udivmoddi4+0xe4>
    4e80:	fab2 f282 	clz	r2, r2
    4e84:	b14a      	cbz	r2, 4e9a <__udivmoddi4+0x2e>
    4e86:	f1c2 0720 	rsb	r7, r2, #32
    4e8a:	fa01 f302 	lsl.w	r3, r1, r2
    4e8e:	fa20 f707 	lsr.w	r7, r0, r7
    4e92:	4095      	lsls	r5, r2
    4e94:	ea47 0803 	orr.w	r8, r7, r3
    4e98:	4094      	lsls	r4, r2
    4e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4e9e:	0c23      	lsrs	r3, r4, #16
    4ea0:	fbb8 f7fe 	udiv	r7, r8, lr
    4ea4:	fa1f fc85 	uxth.w	ip, r5
    4ea8:	fb0e 8817 	mls	r8, lr, r7, r8
    4eac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4eb0:	fb07 f10c 	mul.w	r1, r7, ip
    4eb4:	4299      	cmp	r1, r3
    4eb6:	d909      	bls.n	4ecc <__udivmoddi4+0x60>
    4eb8:	18eb      	adds	r3, r5, r3
    4eba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    4ebe:	f080 811b 	bcs.w	50f8 <__udivmoddi4+0x28c>
    4ec2:	4299      	cmp	r1, r3
    4ec4:	f240 8118 	bls.w	50f8 <__udivmoddi4+0x28c>
    4ec8:	3f02      	subs	r7, #2
    4eca:	442b      	add	r3, r5
    4ecc:	1a5b      	subs	r3, r3, r1
    4ece:	b2a4      	uxth	r4, r4
    4ed0:	fbb3 f0fe 	udiv	r0, r3, lr
    4ed4:	fb0e 3310 	mls	r3, lr, r0, r3
    4ed8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4edc:	fb00 fc0c 	mul.w	ip, r0, ip
    4ee0:	45a4      	cmp	ip, r4
    4ee2:	d909      	bls.n	4ef8 <__udivmoddi4+0x8c>
    4ee4:	192c      	adds	r4, r5, r4
    4ee6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4eea:	f080 8107 	bcs.w	50fc <__udivmoddi4+0x290>
    4eee:	45a4      	cmp	ip, r4
    4ef0:	f240 8104 	bls.w	50fc <__udivmoddi4+0x290>
    4ef4:	3802      	subs	r0, #2
    4ef6:	442c      	add	r4, r5
    4ef8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    4efc:	eba4 040c 	sub.w	r4, r4, ip
    4f00:	2700      	movs	r7, #0
    4f02:	b11e      	cbz	r6, 4f0c <__udivmoddi4+0xa0>
    4f04:	40d4      	lsrs	r4, r2
    4f06:	2300      	movs	r3, #0
    4f08:	e9c6 4300 	strd	r4, r3, [r6]
    4f0c:	4639      	mov	r1, r7
    4f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f12:	428b      	cmp	r3, r1
    4f14:	d909      	bls.n	4f2a <__udivmoddi4+0xbe>
    4f16:	2e00      	cmp	r6, #0
    4f18:	f000 80eb 	beq.w	50f2 <__udivmoddi4+0x286>
    4f1c:	2700      	movs	r7, #0
    4f1e:	e9c6 0100 	strd	r0, r1, [r6]
    4f22:	4638      	mov	r0, r7
    4f24:	4639      	mov	r1, r7
    4f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f2a:	fab3 f783 	clz	r7, r3
    4f2e:	2f00      	cmp	r7, #0
    4f30:	d147      	bne.n	4fc2 <__udivmoddi4+0x156>
    4f32:	428b      	cmp	r3, r1
    4f34:	d302      	bcc.n	4f3c <__udivmoddi4+0xd0>
    4f36:	4282      	cmp	r2, r0
    4f38:	f200 80fa 	bhi.w	5130 <__udivmoddi4+0x2c4>
    4f3c:	1a84      	subs	r4, r0, r2
    4f3e:	eb61 0303 	sbc.w	r3, r1, r3
    4f42:	2001      	movs	r0, #1
    4f44:	4698      	mov	r8, r3
    4f46:	2e00      	cmp	r6, #0
    4f48:	d0e0      	beq.n	4f0c <__udivmoddi4+0xa0>
    4f4a:	e9c6 4800 	strd	r4, r8, [r6]
    4f4e:	e7dd      	b.n	4f0c <__udivmoddi4+0xa0>
    4f50:	b902      	cbnz	r2, 4f54 <__udivmoddi4+0xe8>
    4f52:	deff      	udf	#255	; 0xff
    4f54:	fab2 f282 	clz	r2, r2
    4f58:	2a00      	cmp	r2, #0
    4f5a:	f040 808f 	bne.w	507c <__udivmoddi4+0x210>
    4f5e:	1b49      	subs	r1, r1, r5
    4f60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4f64:	fa1f f885 	uxth.w	r8, r5
    4f68:	2701      	movs	r7, #1
    4f6a:	fbb1 fcfe 	udiv	ip, r1, lr
    4f6e:	0c23      	lsrs	r3, r4, #16
    4f70:	fb0e 111c 	mls	r1, lr, ip, r1
    4f74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4f78:	fb08 f10c 	mul.w	r1, r8, ip
    4f7c:	4299      	cmp	r1, r3
    4f7e:	d907      	bls.n	4f90 <__udivmoddi4+0x124>
    4f80:	18eb      	adds	r3, r5, r3
    4f82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    4f86:	d202      	bcs.n	4f8e <__udivmoddi4+0x122>
    4f88:	4299      	cmp	r1, r3
    4f8a:	f200 80cd 	bhi.w	5128 <__udivmoddi4+0x2bc>
    4f8e:	4684      	mov	ip, r0
    4f90:	1a59      	subs	r1, r3, r1
    4f92:	b2a3      	uxth	r3, r4
    4f94:	fbb1 f0fe 	udiv	r0, r1, lr
    4f98:	fb0e 1410 	mls	r4, lr, r0, r1
    4f9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4fa0:	fb08 f800 	mul.w	r8, r8, r0
    4fa4:	45a0      	cmp	r8, r4
    4fa6:	d907      	bls.n	4fb8 <__udivmoddi4+0x14c>
    4fa8:	192c      	adds	r4, r5, r4
    4faa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4fae:	d202      	bcs.n	4fb6 <__udivmoddi4+0x14a>
    4fb0:	45a0      	cmp	r8, r4
    4fb2:	f200 80b6 	bhi.w	5122 <__udivmoddi4+0x2b6>
    4fb6:	4618      	mov	r0, r3
    4fb8:	eba4 0408 	sub.w	r4, r4, r8
    4fbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4fc0:	e79f      	b.n	4f02 <__udivmoddi4+0x96>
    4fc2:	f1c7 0c20 	rsb	ip, r7, #32
    4fc6:	40bb      	lsls	r3, r7
    4fc8:	fa22 fe0c 	lsr.w	lr, r2, ip
    4fcc:	ea4e 0e03 	orr.w	lr, lr, r3
    4fd0:	fa01 f407 	lsl.w	r4, r1, r7
    4fd4:	fa20 f50c 	lsr.w	r5, r0, ip
    4fd8:	fa21 f30c 	lsr.w	r3, r1, ip
    4fdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4fe0:	4325      	orrs	r5, r4
    4fe2:	fbb3 f9f8 	udiv	r9, r3, r8
    4fe6:	0c2c      	lsrs	r4, r5, #16
    4fe8:	fb08 3319 	mls	r3, r8, r9, r3
    4fec:	fa1f fa8e 	uxth.w	sl, lr
    4ff0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4ff4:	fb09 f40a 	mul.w	r4, r9, sl
    4ff8:	429c      	cmp	r4, r3
    4ffa:	fa02 f207 	lsl.w	r2, r2, r7
    4ffe:	fa00 f107 	lsl.w	r1, r0, r7
    5002:	d90b      	bls.n	501c <__udivmoddi4+0x1b0>
    5004:	eb1e 0303 	adds.w	r3, lr, r3
    5008:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    500c:	f080 8087 	bcs.w	511e <__udivmoddi4+0x2b2>
    5010:	429c      	cmp	r4, r3
    5012:	f240 8084 	bls.w	511e <__udivmoddi4+0x2b2>
    5016:	f1a9 0902 	sub.w	r9, r9, #2
    501a:	4473      	add	r3, lr
    501c:	1b1b      	subs	r3, r3, r4
    501e:	b2ad      	uxth	r5, r5
    5020:	fbb3 f0f8 	udiv	r0, r3, r8
    5024:	fb08 3310 	mls	r3, r8, r0, r3
    5028:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    502c:	fb00 fa0a 	mul.w	sl, r0, sl
    5030:	45a2      	cmp	sl, r4
    5032:	d908      	bls.n	5046 <__udivmoddi4+0x1da>
    5034:	eb1e 0404 	adds.w	r4, lr, r4
    5038:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    503c:	d26b      	bcs.n	5116 <__udivmoddi4+0x2aa>
    503e:	45a2      	cmp	sl, r4
    5040:	d969      	bls.n	5116 <__udivmoddi4+0x2aa>
    5042:	3802      	subs	r0, #2
    5044:	4474      	add	r4, lr
    5046:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    504a:	fba0 8902 	umull	r8, r9, r0, r2
    504e:	eba4 040a 	sub.w	r4, r4, sl
    5052:	454c      	cmp	r4, r9
    5054:	46c2      	mov	sl, r8
    5056:	464b      	mov	r3, r9
    5058:	d354      	bcc.n	5104 <__udivmoddi4+0x298>
    505a:	d051      	beq.n	5100 <__udivmoddi4+0x294>
    505c:	2e00      	cmp	r6, #0
    505e:	d069      	beq.n	5134 <__udivmoddi4+0x2c8>
    5060:	ebb1 050a 	subs.w	r5, r1, sl
    5064:	eb64 0403 	sbc.w	r4, r4, r3
    5068:	fa04 fc0c 	lsl.w	ip, r4, ip
    506c:	40fd      	lsrs	r5, r7
    506e:	40fc      	lsrs	r4, r7
    5070:	ea4c 0505 	orr.w	r5, ip, r5
    5074:	e9c6 5400 	strd	r5, r4, [r6]
    5078:	2700      	movs	r7, #0
    507a:	e747      	b.n	4f0c <__udivmoddi4+0xa0>
    507c:	f1c2 0320 	rsb	r3, r2, #32
    5080:	fa20 f703 	lsr.w	r7, r0, r3
    5084:	4095      	lsls	r5, r2
    5086:	fa01 f002 	lsl.w	r0, r1, r2
    508a:	fa21 f303 	lsr.w	r3, r1, r3
    508e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5092:	4338      	orrs	r0, r7
    5094:	0c01      	lsrs	r1, r0, #16
    5096:	fbb3 f7fe 	udiv	r7, r3, lr
    509a:	fa1f f885 	uxth.w	r8, r5
    509e:	fb0e 3317 	mls	r3, lr, r7, r3
    50a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    50a6:	fb07 f308 	mul.w	r3, r7, r8
    50aa:	428b      	cmp	r3, r1
    50ac:	fa04 f402 	lsl.w	r4, r4, r2
    50b0:	d907      	bls.n	50c2 <__udivmoddi4+0x256>
    50b2:	1869      	adds	r1, r5, r1
    50b4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    50b8:	d22f      	bcs.n	511a <__udivmoddi4+0x2ae>
    50ba:	428b      	cmp	r3, r1
    50bc:	d92d      	bls.n	511a <__udivmoddi4+0x2ae>
    50be:	3f02      	subs	r7, #2
    50c0:	4429      	add	r1, r5
    50c2:	1acb      	subs	r3, r1, r3
    50c4:	b281      	uxth	r1, r0
    50c6:	fbb3 f0fe 	udiv	r0, r3, lr
    50ca:	fb0e 3310 	mls	r3, lr, r0, r3
    50ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    50d2:	fb00 f308 	mul.w	r3, r0, r8
    50d6:	428b      	cmp	r3, r1
    50d8:	d907      	bls.n	50ea <__udivmoddi4+0x27e>
    50da:	1869      	adds	r1, r5, r1
    50dc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    50e0:	d217      	bcs.n	5112 <__udivmoddi4+0x2a6>
    50e2:	428b      	cmp	r3, r1
    50e4:	d915      	bls.n	5112 <__udivmoddi4+0x2a6>
    50e6:	3802      	subs	r0, #2
    50e8:	4429      	add	r1, r5
    50ea:	1ac9      	subs	r1, r1, r3
    50ec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    50f0:	e73b      	b.n	4f6a <__udivmoddi4+0xfe>
    50f2:	4637      	mov	r7, r6
    50f4:	4630      	mov	r0, r6
    50f6:	e709      	b.n	4f0c <__udivmoddi4+0xa0>
    50f8:	4607      	mov	r7, r0
    50fa:	e6e7      	b.n	4ecc <__udivmoddi4+0x60>
    50fc:	4618      	mov	r0, r3
    50fe:	e6fb      	b.n	4ef8 <__udivmoddi4+0x8c>
    5100:	4541      	cmp	r1, r8
    5102:	d2ab      	bcs.n	505c <__udivmoddi4+0x1f0>
    5104:	ebb8 0a02 	subs.w	sl, r8, r2
    5108:	eb69 020e 	sbc.w	r2, r9, lr
    510c:	3801      	subs	r0, #1
    510e:	4613      	mov	r3, r2
    5110:	e7a4      	b.n	505c <__udivmoddi4+0x1f0>
    5112:	4660      	mov	r0, ip
    5114:	e7e9      	b.n	50ea <__udivmoddi4+0x27e>
    5116:	4618      	mov	r0, r3
    5118:	e795      	b.n	5046 <__udivmoddi4+0x1da>
    511a:	4667      	mov	r7, ip
    511c:	e7d1      	b.n	50c2 <__udivmoddi4+0x256>
    511e:	4681      	mov	r9, r0
    5120:	e77c      	b.n	501c <__udivmoddi4+0x1b0>
    5122:	3802      	subs	r0, #2
    5124:	442c      	add	r4, r5
    5126:	e747      	b.n	4fb8 <__udivmoddi4+0x14c>
    5128:	f1ac 0c02 	sub.w	ip, ip, #2
    512c:	442b      	add	r3, r5
    512e:	e72f      	b.n	4f90 <__udivmoddi4+0x124>
    5130:	4638      	mov	r0, r7
    5132:	e708      	b.n	4f46 <__udivmoddi4+0xda>
    5134:	4637      	mov	r7, r6
    5136:	e6e9      	b.n	4f0c <__udivmoddi4+0xa0>

00005138 <selfrel_offset31>:
    5138:	6803      	ldr	r3, [r0, #0]
    513a:	005a      	lsls	r2, r3, #1
    513c:	bf4c      	ite	mi
    513e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    5142:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    5146:	4418      	add	r0, r3
    5148:	4770      	bx	lr
    514a:	bf00      	nop

0000514c <search_EIT_table>:
    514c:	b361      	cbz	r1, 51a8 <search_EIT_table+0x5c>
    514e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5152:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    5156:	4690      	mov	r8, r2
    5158:	4606      	mov	r6, r0
    515a:	46d1      	mov	r9, sl
    515c:	2700      	movs	r7, #0
    515e:	eb07 0409 	add.w	r4, r7, r9
    5162:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    5166:	1064      	asrs	r4, r4, #1
    5168:	00e5      	lsls	r5, r4, #3
    516a:	1971      	adds	r1, r6, r5
    516c:	4608      	mov	r0, r1
    516e:	f7ff ffe3 	bl	5138 <selfrel_offset31>
    5172:	45a2      	cmp	sl, r4
    5174:	4683      	mov	fp, r0
    5176:	f105 0008 	add.w	r0, r5, #8
    517a:	4430      	add	r0, r6
    517c:	d009      	beq.n	5192 <search_EIT_table+0x46>
    517e:	f7ff ffdb 	bl	5138 <selfrel_offset31>
    5182:	45c3      	cmp	fp, r8
    5184:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    5188:	d805      	bhi.n	5196 <search_EIT_table+0x4a>
    518a:	4540      	cmp	r0, r8
    518c:	d209      	bcs.n	51a2 <search_EIT_table+0x56>
    518e:	1c67      	adds	r7, r4, #1
    5190:	e7e5      	b.n	515e <search_EIT_table+0x12>
    5192:	45c3      	cmp	fp, r8
    5194:	d905      	bls.n	51a2 <search_EIT_table+0x56>
    5196:	42a7      	cmp	r7, r4
    5198:	d002      	beq.n	51a0 <search_EIT_table+0x54>
    519a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    519e:	e7de      	b.n	515e <search_EIT_table+0x12>
    51a0:	2100      	movs	r1, #0
    51a2:	4608      	mov	r0, r1
    51a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51a8:	4608      	mov	r0, r1
    51aa:	4770      	bx	lr

000051ac <__gnu_unwind_get_pr_addr>:
    51ac:	2801      	cmp	r0, #1
    51ae:	d007      	beq.n	51c0 <__gnu_unwind_get_pr_addr+0x14>
    51b0:	2802      	cmp	r0, #2
    51b2:	d007      	beq.n	51c4 <__gnu_unwind_get_pr_addr+0x18>
    51b4:	4b04      	ldr	r3, [pc, #16]	; (51c8 <__gnu_unwind_get_pr_addr+0x1c>)
    51b6:	2800      	cmp	r0, #0
    51b8:	bf0c      	ite	eq
    51ba:	4618      	moveq	r0, r3
    51bc:	2000      	movne	r0, #0
    51be:	4770      	bx	lr
    51c0:	4802      	ldr	r0, [pc, #8]	; (51cc <__gnu_unwind_get_pr_addr+0x20>)
    51c2:	4770      	bx	lr
    51c4:	4802      	ldr	r0, [pc, #8]	; (51d0 <__gnu_unwind_get_pr_addr+0x24>)
    51c6:	4770      	bx	lr
    51c8:	00005899 	.word	0x00005899
    51cc:	0000589d 	.word	0x0000589d
    51d0:	000058a1 	.word	0x000058a1

000051d4 <get_eit_entry>:
    51d4:	b530      	push	{r4, r5, lr}
    51d6:	4b25      	ldr	r3, [pc, #148]	; (526c <get_eit_entry+0x98>)
    51d8:	b083      	sub	sp, #12
    51da:	4604      	mov	r4, r0
    51dc:	1e8d      	subs	r5, r1, #2
    51de:	b34b      	cbz	r3, 5234 <get_eit_entry+0x60>
    51e0:	a901      	add	r1, sp, #4
    51e2:	4628      	mov	r0, r5
    51e4:	f3af 8000 	nop.w
    51e8:	b1f0      	cbz	r0, 5228 <get_eit_entry+0x54>
    51ea:	9901      	ldr	r1, [sp, #4]
    51ec:	462a      	mov	r2, r5
    51ee:	f7ff ffad 	bl	514c <search_EIT_table>
    51f2:	4601      	mov	r1, r0
    51f4:	b1c0      	cbz	r0, 5228 <get_eit_entry+0x54>
    51f6:	f7ff ff9f 	bl	5138 <selfrel_offset31>
    51fa:	684b      	ldr	r3, [r1, #4]
    51fc:	64a0      	str	r0, [r4, #72]	; 0x48
    51fe:	2b01      	cmp	r3, #1
    5200:	d02e      	beq.n	5260 <get_eit_entry+0x8c>
    5202:	2b00      	cmp	r3, #0
    5204:	f101 0004 	add.w	r0, r1, #4
    5208:	db26      	blt.n	5258 <get_eit_entry+0x84>
    520a:	f7ff ff95 	bl	5138 <selfrel_offset31>
    520e:	2300      	movs	r3, #0
    5210:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5214:	6803      	ldr	r3, [r0, #0]
    5216:	2b00      	cmp	r3, #0
    5218:	db12      	blt.n	5240 <get_eit_entry+0x6c>
    521a:	f7ff ff8d 	bl	5138 <selfrel_offset31>
    521e:	2300      	movs	r3, #0
    5220:	6120      	str	r0, [r4, #16]
    5222:	4618      	mov	r0, r3
    5224:	b003      	add	sp, #12
    5226:	bd30      	pop	{r4, r5, pc}
    5228:	2300      	movs	r3, #0
    522a:	6123      	str	r3, [r4, #16]
    522c:	2309      	movs	r3, #9
    522e:	4618      	mov	r0, r3
    5230:	b003      	add	sp, #12
    5232:	bd30      	pop	{r4, r5, pc}
    5234:	490e      	ldr	r1, [pc, #56]	; (5270 <get_eit_entry+0x9c>)
    5236:	480f      	ldr	r0, [pc, #60]	; (5274 <get_eit_entry+0xa0>)
    5238:	1a09      	subs	r1, r1, r0
    523a:	10c9      	asrs	r1, r1, #3
    523c:	9101      	str	r1, [sp, #4]
    523e:	e7d5      	b.n	51ec <get_eit_entry+0x18>
    5240:	f3c3 6003 	ubfx	r0, r3, #24, #4
    5244:	f7ff ffb2 	bl	51ac <__gnu_unwind_get_pr_addr>
    5248:	2800      	cmp	r0, #0
    524a:	bf14      	ite	ne
    524c:	2300      	movne	r3, #0
    524e:	2309      	moveq	r3, #9
    5250:	6120      	str	r0, [r4, #16]
    5252:	4618      	mov	r0, r3
    5254:	b003      	add	sp, #12
    5256:	bd30      	pop	{r4, r5, pc}
    5258:	2301      	movs	r3, #1
    525a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    525e:	e7d9      	b.n	5214 <get_eit_entry+0x40>
    5260:	2300      	movs	r3, #0
    5262:	6123      	str	r3, [r4, #16]
    5264:	2305      	movs	r3, #5
    5266:	4618      	mov	r0, r3
    5268:	b003      	add	sp, #12
    526a:	bd30      	pop	{r4, r5, pc}
    526c:	00000000 	.word	0x00000000
    5270:	00007424 	.word	0x00007424
    5274:	0000736c 	.word	0x0000736c

00005278 <restore_non_core_regs>:
    5278:	6803      	ldr	r3, [r0, #0]
    527a:	07da      	lsls	r2, r3, #31
    527c:	b510      	push	{r4, lr}
    527e:	4604      	mov	r4, r0
    5280:	d406      	bmi.n	5290 <restore_non_core_regs+0x18>
    5282:	079b      	lsls	r3, r3, #30
    5284:	f100 0048 	add.w	r0, r0, #72	; 0x48
    5288:	d509      	bpl.n	529e <restore_non_core_regs+0x26>
    528a:	f000 fc5f 	bl	5b4c <__gnu_Unwind_Restore_VFP_D>
    528e:	6823      	ldr	r3, [r4, #0]
    5290:	0759      	lsls	r1, r3, #29
    5292:	d509      	bpl.n	52a8 <restore_non_core_regs+0x30>
    5294:	071a      	lsls	r2, r3, #28
    5296:	d50e      	bpl.n	52b6 <restore_non_core_regs+0x3e>
    5298:	06db      	lsls	r3, r3, #27
    529a:	d513      	bpl.n	52c4 <restore_non_core_regs+0x4c>
    529c:	bd10      	pop	{r4, pc}
    529e:	f000 fc4d 	bl	5b3c <__gnu_Unwind_Restore_VFP>
    52a2:	6823      	ldr	r3, [r4, #0]
    52a4:	0759      	lsls	r1, r3, #29
    52a6:	d4f5      	bmi.n	5294 <restore_non_core_regs+0x1c>
    52a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    52ac:	f000 fc56 	bl	5b5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    52b0:	6823      	ldr	r3, [r4, #0]
    52b2:	071a      	lsls	r2, r3, #28
    52b4:	d4f0      	bmi.n	5298 <restore_non_core_regs+0x20>
    52b6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    52ba:	f000 fc57 	bl	5b6c <__gnu_Unwind_Restore_WMMXD>
    52be:	6823      	ldr	r3, [r4, #0]
    52c0:	06db      	lsls	r3, r3, #27
    52c2:	d4eb      	bmi.n	529c <restore_non_core_regs+0x24>
    52c4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    52c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    52cc:	f000 bc92 	b.w	5bf4 <__gnu_Unwind_Restore_WMMXC>

000052d0 <_Unwind_decode_typeinfo_ptr.isra.0>:
    52d0:	6803      	ldr	r3, [r0, #0]
    52d2:	b103      	cbz	r3, 52d6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    52d4:	4403      	add	r3, r0
    52d6:	4618      	mov	r0, r3
    52d8:	4770      	bx	lr
    52da:	bf00      	nop

000052dc <__gnu_unwind_24bit.isra.1>:
    52dc:	2009      	movs	r0, #9
    52de:	4770      	bx	lr

000052e0 <_Unwind_DebugHook>:
    52e0:	4770      	bx	lr
    52e2:	bf00      	nop

000052e4 <unwind_phase2>:
    52e4:	b570      	push	{r4, r5, r6, lr}
    52e6:	4604      	mov	r4, r0
    52e8:	460d      	mov	r5, r1
    52ea:	e008      	b.n	52fe <unwind_phase2+0x1a>
    52ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    52ee:	6163      	str	r3, [r4, #20]
    52f0:	462a      	mov	r2, r5
    52f2:	6923      	ldr	r3, [r4, #16]
    52f4:	4621      	mov	r1, r4
    52f6:	2001      	movs	r0, #1
    52f8:	4798      	blx	r3
    52fa:	2808      	cmp	r0, #8
    52fc:	d108      	bne.n	5310 <unwind_phase2+0x2c>
    52fe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5300:	4620      	mov	r0, r4
    5302:	f7ff ff67 	bl	51d4 <get_eit_entry>
    5306:	4606      	mov	r6, r0
    5308:	2800      	cmp	r0, #0
    530a:	d0ef      	beq.n	52ec <unwind_phase2+0x8>
    530c:	f000 fe9c 	bl	6048 <abort>
    5310:	2807      	cmp	r0, #7
    5312:	d1fb      	bne.n	530c <unwind_phase2+0x28>
    5314:	4630      	mov	r0, r6
    5316:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5318:	f7ff ffe2 	bl	52e0 <_Unwind_DebugHook>
    531c:	1d28      	adds	r0, r5, #4
    531e:	f000 fc01 	bl	5b24 <__restore_core_regs>
    5322:	bf00      	nop

00005324 <unwind_phase2_forced>:
    5324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5328:	1d0c      	adds	r4, r1, #4
    532a:	4605      	mov	r5, r0
    532c:	4617      	mov	r7, r2
    532e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5330:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    5334:	ae03      	add	r6, sp, #12
    5336:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    533a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    533c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    533e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5344:	ac02      	add	r4, sp, #8
    5346:	f8d5 800c 	ldr.w	r8, [r5, #12]
    534a:	f8d5 9018 	ldr.w	r9, [r5, #24]
    534e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    5352:	2300      	movs	r3, #0
    5354:	6023      	str	r3, [r4, #0]
    5356:	e021      	b.n	539c <unwind_phase2_forced+0x78>
    5358:	6c23      	ldr	r3, [r4, #64]	; 0x40
    535a:	616b      	str	r3, [r5, #20]
    535c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5360:	4621      	mov	r1, r4
    5362:	a87a      	add	r0, sp, #488	; 0x1e8
    5364:	f000 fe9c 	bl	60a0 <memcpy>
    5368:	692b      	ldr	r3, [r5, #16]
    536a:	aa7a      	add	r2, sp, #488	; 0x1e8
    536c:	4629      	mov	r1, r5
    536e:	4630      	mov	r0, r6
    5370:	4798      	blx	r3
    5372:	9b88      	ldr	r3, [sp, #544]	; 0x220
    5374:	e9cd 4900 	strd	r4, r9, [sp]
    5378:	4682      	mov	sl, r0
    537a:	6463      	str	r3, [r4, #68]	; 0x44
    537c:	4631      	mov	r1, r6
    537e:	462b      	mov	r3, r5
    5380:	462a      	mov	r2, r5
    5382:	2001      	movs	r0, #1
    5384:	47c0      	blx	r8
    5386:	4607      	mov	r7, r0
    5388:	b9f8      	cbnz	r0, 53ca <unwind_phase2_forced+0xa6>
    538a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    538e:	a97a      	add	r1, sp, #488	; 0x1e8
    5390:	4620      	mov	r0, r4
    5392:	f000 fe85 	bl	60a0 <memcpy>
    5396:	f1ba 0f08 	cmp.w	sl, #8
    539a:	d11c      	bne.n	53d6 <unwind_phase2_forced+0xb2>
    539c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    539e:	4628      	mov	r0, r5
    53a0:	f7ff ff18 	bl	51d4 <get_eit_entry>
    53a4:	2f00      	cmp	r7, #0
    53a6:	bf08      	it	eq
    53a8:	2609      	moveq	r6, #9
    53aa:	4607      	mov	r7, r0
    53ac:	bf18      	it	ne
    53ae:	260a      	movne	r6, #10
    53b0:	2800      	cmp	r0, #0
    53b2:	d0d1      	beq.n	5358 <unwind_phase2_forced+0x34>
    53b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    53b6:	f046 0110 	orr.w	r1, r6, #16
    53ba:	e9cd 4900 	strd	r4, r9, [sp]
    53be:	462a      	mov	r2, r5
    53c0:	6463      	str	r3, [r4, #68]	; 0x44
    53c2:	2001      	movs	r0, #1
    53c4:	462b      	mov	r3, r5
    53c6:	47c0      	blx	r8
    53c8:	b100      	cbz	r0, 53cc <unwind_phase2_forced+0xa8>
    53ca:	2709      	movs	r7, #9
    53cc:	4638      	mov	r0, r7
    53ce:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    53d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53d6:	f1ba 0f07 	cmp.w	sl, #7
    53da:	d1f6      	bne.n	53ca <unwind_phase2_forced+0xa6>
    53dc:	4638      	mov	r0, r7
    53de:	6c21      	ldr	r1, [r4, #64]	; 0x40
    53e0:	f7ff ff7e 	bl	52e0 <_Unwind_DebugHook>
    53e4:	a803      	add	r0, sp, #12
    53e6:	f000 fb9d 	bl	5b24 <__restore_core_regs>
    53ea:	bf00      	nop

000053ec <_Unwind_GetCFA>:
    53ec:	6c40      	ldr	r0, [r0, #68]	; 0x44
    53ee:	4770      	bx	lr

000053f0 <__gnu_Unwind_RaiseException>:
    53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53f2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    53f4:	640b      	str	r3, [r1, #64]	; 0x40
    53f6:	1d0d      	adds	r5, r1, #4
    53f8:	460f      	mov	r7, r1
    53fa:	4606      	mov	r6, r0
    53fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    53fe:	b0f9      	sub	sp, #484	; 0x1e4
    5400:	ac01      	add	r4, sp, #4
    5402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    540a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    540c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5410:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5418:	9500      	str	r5, [sp, #0]
    541a:	e006      	b.n	542a <__gnu_Unwind_RaiseException+0x3a>
    541c:	6933      	ldr	r3, [r6, #16]
    541e:	466a      	mov	r2, sp
    5420:	4631      	mov	r1, r6
    5422:	4798      	blx	r3
    5424:	2808      	cmp	r0, #8
    5426:	4604      	mov	r4, r0
    5428:	d108      	bne.n	543c <__gnu_Unwind_RaiseException+0x4c>
    542a:	9910      	ldr	r1, [sp, #64]	; 0x40
    542c:	4630      	mov	r0, r6
    542e:	f7ff fed1 	bl	51d4 <get_eit_entry>
    5432:	2800      	cmp	r0, #0
    5434:	d0f2      	beq.n	541c <__gnu_Unwind_RaiseException+0x2c>
    5436:	2009      	movs	r0, #9
    5438:	b079      	add	sp, #484	; 0x1e4
    543a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    543c:	4668      	mov	r0, sp
    543e:	f7ff ff1b 	bl	5278 <restore_non_core_regs>
    5442:	2c06      	cmp	r4, #6
    5444:	d1f7      	bne.n	5436 <__gnu_Unwind_RaiseException+0x46>
    5446:	4639      	mov	r1, r7
    5448:	4630      	mov	r0, r6
    544a:	f7ff ff4b 	bl	52e4 <unwind_phase2>
    544e:	bf00      	nop

00005450 <__gnu_Unwind_ForcedUnwind>:
    5450:	b430      	push	{r4, r5}
    5452:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5454:	60c1      	str	r1, [r0, #12]
    5456:	6182      	str	r2, [r0, #24]
    5458:	4619      	mov	r1, r3
    545a:	641d      	str	r5, [r3, #64]	; 0x40
    545c:	2200      	movs	r2, #0
    545e:	bc30      	pop	{r4, r5}
    5460:	e760      	b.n	5324 <unwind_phase2_forced>
    5462:	bf00      	nop

00005464 <__gnu_Unwind_Resume>:
    5464:	b570      	push	{r4, r5, r6, lr}
    5466:	68c6      	ldr	r6, [r0, #12]
    5468:	6943      	ldr	r3, [r0, #20]
    546a:	640b      	str	r3, [r1, #64]	; 0x40
    546c:	b9be      	cbnz	r6, 549e <__gnu_Unwind_Resume+0x3a>
    546e:	6903      	ldr	r3, [r0, #16]
    5470:	460a      	mov	r2, r1
    5472:	4604      	mov	r4, r0
    5474:	460d      	mov	r5, r1
    5476:	4601      	mov	r1, r0
    5478:	2002      	movs	r0, #2
    547a:	4798      	blx	r3
    547c:	2807      	cmp	r0, #7
    547e:	d007      	beq.n	5490 <__gnu_Unwind_Resume+0x2c>
    5480:	2808      	cmp	r0, #8
    5482:	d103      	bne.n	548c <__gnu_Unwind_Resume+0x28>
    5484:	4629      	mov	r1, r5
    5486:	4620      	mov	r0, r4
    5488:	f7ff ff2c 	bl	52e4 <unwind_phase2>
    548c:	f000 fddc 	bl	6048 <abort>
    5490:	4630      	mov	r0, r6
    5492:	6c29      	ldr	r1, [r5, #64]	; 0x40
    5494:	f7ff ff24 	bl	52e0 <_Unwind_DebugHook>
    5498:	1d28      	adds	r0, r5, #4
    549a:	f000 fb43 	bl	5b24 <__restore_core_regs>
    549e:	2201      	movs	r2, #1
    54a0:	f7ff ff40 	bl	5324 <unwind_phase2_forced>
    54a4:	f000 fdd0 	bl	6048 <abort>

000054a8 <__gnu_Unwind_Resume_or_Rethrow>:
    54a8:	68c2      	ldr	r2, [r0, #12]
    54aa:	b11a      	cbz	r2, 54b4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    54ac:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    54ae:	640a      	str	r2, [r1, #64]	; 0x40
    54b0:	2200      	movs	r2, #0
    54b2:	e737      	b.n	5324 <unwind_phase2_forced>
    54b4:	e79c      	b.n	53f0 <__gnu_Unwind_RaiseException>
    54b6:	bf00      	nop

000054b8 <_Unwind_Complete>:
    54b8:	4770      	bx	lr
    54ba:	bf00      	nop

000054bc <_Unwind_DeleteException>:
    54bc:	6883      	ldr	r3, [r0, #8]
    54be:	b113      	cbz	r3, 54c6 <_Unwind_DeleteException+0xa>
    54c0:	4601      	mov	r1, r0
    54c2:	2001      	movs	r0, #1
    54c4:	4718      	bx	r3
    54c6:	4770      	bx	lr

000054c8 <_Unwind_VRS_Get>:
    54c8:	2904      	cmp	r1, #4
    54ca:	d807      	bhi.n	54dc <_Unwind_VRS_Get+0x14>
    54cc:	e8df f001 	tbb	[pc, r1]
    54d0:	08060803 	.word	0x08060803
    54d4:	08          	.byte	0x08
    54d5:	00          	.byte	0x00
    54d6:	b90b      	cbnz	r3, 54dc <_Unwind_VRS_Get+0x14>
    54d8:	2a0f      	cmp	r2, #15
    54da:	d903      	bls.n	54e4 <_Unwind_VRS_Get+0x1c>
    54dc:	2002      	movs	r0, #2
    54de:	4770      	bx	lr
    54e0:	2001      	movs	r0, #1
    54e2:	4770      	bx	lr
    54e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    54e8:	4618      	mov	r0, r3
    54ea:	6853      	ldr	r3, [r2, #4]
    54ec:	9a00      	ldr	r2, [sp, #0]
    54ee:	6013      	str	r3, [r2, #0]
    54f0:	4770      	bx	lr
    54f2:	bf00      	nop

000054f4 <_Unwind_GetGR>:
    54f4:	b510      	push	{r4, lr}
    54f6:	b084      	sub	sp, #16
    54f8:	2300      	movs	r3, #0
    54fa:	ac03      	add	r4, sp, #12
    54fc:	460a      	mov	r2, r1
    54fe:	9400      	str	r4, [sp, #0]
    5500:	4619      	mov	r1, r3
    5502:	f7ff ffe1 	bl	54c8 <_Unwind_VRS_Get>
    5506:	9803      	ldr	r0, [sp, #12]
    5508:	b004      	add	sp, #16
    550a:	bd10      	pop	{r4, pc}

0000550c <_Unwind_VRS_Set>:
    550c:	2904      	cmp	r1, #4
    550e:	d807      	bhi.n	5520 <_Unwind_VRS_Set+0x14>
    5510:	e8df f001 	tbb	[pc, r1]
    5514:	08060803 	.word	0x08060803
    5518:	08          	.byte	0x08
    5519:	00          	.byte	0x00
    551a:	b90b      	cbnz	r3, 5520 <_Unwind_VRS_Set+0x14>
    551c:	2a0f      	cmp	r2, #15
    551e:	d903      	bls.n	5528 <_Unwind_VRS_Set+0x1c>
    5520:	2002      	movs	r0, #2
    5522:	4770      	bx	lr
    5524:	2001      	movs	r0, #1
    5526:	4770      	bx	lr
    5528:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    552c:	9a00      	ldr	r2, [sp, #0]
    552e:	6812      	ldr	r2, [r2, #0]
    5530:	6042      	str	r2, [r0, #4]
    5532:	4618      	mov	r0, r3
    5534:	4770      	bx	lr
    5536:	bf00      	nop

00005538 <_Unwind_SetGR>:
    5538:	b510      	push	{r4, lr}
    553a:	b084      	sub	sp, #16
    553c:	ac04      	add	r4, sp, #16
    553e:	2300      	movs	r3, #0
    5540:	f844 2d04 	str.w	r2, [r4, #-4]!
    5544:	460a      	mov	r2, r1
    5546:	9400      	str	r4, [sp, #0]
    5548:	4619      	mov	r1, r3
    554a:	f7ff ffdf 	bl	550c <_Unwind_VRS_Set>
    554e:	b004      	add	sp, #16
    5550:	bd10      	pop	{r4, pc}
    5552:	bf00      	nop

00005554 <__gnu_Unwind_Backtrace>:
    5554:	b5f0      	push	{r4, r5, r6, r7, lr}
    5556:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    5558:	6413      	str	r3, [r2, #64]	; 0x40
    555a:	1d15      	adds	r5, r2, #4
    555c:	4607      	mov	r7, r0
    555e:	460e      	mov	r6, r1
    5560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5562:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    5566:	ac17      	add	r4, sp, #92	; 0x5c
    5568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    556a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    556c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    556e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5572:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5576:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    557a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    557e:	9516      	str	r5, [sp, #88]	; 0x58
    5580:	e010      	b.n	55a4 <__gnu_Unwind_Backtrace+0x50>
    5582:	a816      	add	r0, sp, #88	; 0x58
    5584:	f7ff ffd8 	bl	5538 <_Unwind_SetGR>
    5588:	4631      	mov	r1, r6
    558a:	a816      	add	r0, sp, #88	; 0x58
    558c:	47b8      	blx	r7
    558e:	aa16      	add	r2, sp, #88	; 0x58
    5590:	4669      	mov	r1, sp
    5592:	b978      	cbnz	r0, 55b4 <__gnu_Unwind_Backtrace+0x60>
    5594:	9b04      	ldr	r3, [sp, #16]
    5596:	2008      	movs	r0, #8
    5598:	4798      	blx	r3
    559a:	2805      	cmp	r0, #5
    559c:	4604      	mov	r4, r0
    559e:	d00a      	beq.n	55b6 <__gnu_Unwind_Backtrace+0x62>
    55a0:	2809      	cmp	r0, #9
    55a2:	d007      	beq.n	55b4 <__gnu_Unwind_Backtrace+0x60>
    55a4:	9926      	ldr	r1, [sp, #152]	; 0x98
    55a6:	4668      	mov	r0, sp
    55a8:	f7ff fe14 	bl	51d4 <get_eit_entry>
    55ac:	466a      	mov	r2, sp
    55ae:	210c      	movs	r1, #12
    55b0:	2800      	cmp	r0, #0
    55b2:	d0e6      	beq.n	5582 <__gnu_Unwind_Backtrace+0x2e>
    55b4:	2409      	movs	r4, #9
    55b6:	a816      	add	r0, sp, #88	; 0x58
    55b8:	f7ff fe5e 	bl	5278 <restore_non_core_regs>
    55bc:	4620      	mov	r0, r4
    55be:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    55c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000055c4 <__gnu_unwind_pr_common>:
    55c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55c8:	460d      	mov	r5, r1
    55ca:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    55cc:	b089      	sub	sp, #36	; 0x24
    55ce:	1d0c      	adds	r4, r1, #4
    55d0:	4616      	mov	r6, r2
    55d2:	f000 0b03 	and.w	fp, r0, #3
    55d6:	680a      	ldr	r2, [r1, #0]
    55d8:	9406      	str	r4, [sp, #24]
    55da:	461f      	mov	r7, r3
    55dc:	2b00      	cmp	r3, #0
    55de:	d068      	beq.n	56b2 <__gnu_unwind_pr_common+0xee>
    55e0:	0c13      	lsrs	r3, r2, #16
    55e2:	b2d9      	uxtb	r1, r3
    55e4:	0412      	lsls	r2, r2, #16
    55e6:	f88d 301d 	strb.w	r3, [sp, #29]
    55ea:	2302      	movs	r3, #2
    55ec:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    55f0:	9205      	str	r2, [sp, #20]
    55f2:	f88d 301c 	strb.w	r3, [sp, #28]
    55f6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    55f8:	f1bb 0f02 	cmp.w	fp, #2
    55fc:	bf08      	it	eq
    55fe:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    5600:	f013 0301 	ands.w	r3, r3, #1
    5604:	d146      	bne.n	5694 <__gnu_unwind_pr_common+0xd0>
    5606:	9301      	str	r3, [sp, #4]
    5608:	f000 0308 	and.w	r3, r0, #8
    560c:	9300      	str	r3, [sp, #0]
    560e:	f8d4 9000 	ldr.w	r9, [r4]
    5612:	f1b9 0f00 	cmp.w	r9, #0
    5616:	f000 80f3 	beq.w	5800 <__gnu_unwind_pr_common+0x23c>
    561a:	2f02      	cmp	r7, #2
    561c:	d045      	beq.n	56aa <__gnu_unwind_pr_common+0xe6>
    561e:	f8b4 9000 	ldrh.w	r9, [r4]
    5622:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    5626:	3404      	adds	r4, #4
    5628:	6cab      	ldr	r3, [r5, #72]	; 0x48
    562a:	f028 0a01 	bic.w	sl, r8, #1
    562e:	210f      	movs	r1, #15
    5630:	4630      	mov	r0, r6
    5632:	449a      	add	sl, r3
    5634:	f7ff ff5e 	bl	54f4 <_Unwind_GetGR>
    5638:	4582      	cmp	sl, r0
    563a:	d834      	bhi.n	56a6 <__gnu_unwind_pr_common+0xe2>
    563c:	f029 0301 	bic.w	r3, r9, #1
    5640:	4453      	add	r3, sl
    5642:	4283      	cmp	r3, r0
    5644:	bf94      	ite	ls
    5646:	2000      	movls	r0, #0
    5648:	2001      	movhi	r0, #1
    564a:	ea4f 0848 	mov.w	r8, r8, lsl #1
    564e:	f008 0802 	and.w	r8, r8, #2
    5652:	f009 0901 	and.w	r9, r9, #1
    5656:	ea48 0809 	orr.w	r8, r8, r9
    565a:	f1b8 0f01 	cmp.w	r8, #1
    565e:	d03a      	beq.n	56d6 <__gnu_unwind_pr_common+0x112>
    5660:	d331      	bcc.n	56c6 <__gnu_unwind_pr_common+0x102>
    5662:	f1b8 0f02 	cmp.w	r8, #2
    5666:	d11a      	bne.n	569e <__gnu_unwind_pr_common+0xda>
    5668:	6823      	ldr	r3, [r4, #0]
    566a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    566e:	f1bb 0f00 	cmp.w	fp, #0
    5672:	d166      	bne.n	5742 <__gnu_unwind_pr_common+0x17e>
    5674:	b130      	cbz	r0, 5684 <__gnu_unwind_pr_common+0xc0>
    5676:	9a00      	ldr	r2, [sp, #0]
    5678:	2a00      	cmp	r2, #0
    567a:	d06c      	beq.n	5756 <__gnu_unwind_pr_common+0x192>
    567c:	f1ba 0f00 	cmp.w	sl, #0
    5680:	f000 8090 	beq.w	57a4 <__gnu_unwind_pr_common+0x1e0>
    5684:	2b00      	cmp	r3, #0
    5686:	da00      	bge.n	568a <__gnu_unwind_pr_common+0xc6>
    5688:	3404      	adds	r4, #4
    568a:	f10a 0301 	add.w	r3, sl, #1
    568e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5692:	e7bc      	b.n	560e <__gnu_unwind_pr_common+0x4a>
    5694:	4630      	mov	r0, r6
    5696:	a905      	add	r1, sp, #20
    5698:	f000 fb46 	bl	5d28 <__gnu_unwind_execute>
    569c:	b178      	cbz	r0, 56be <__gnu_unwind_pr_common+0xfa>
    569e:	2009      	movs	r0, #9
    56a0:	b009      	add	sp, #36	; 0x24
    56a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56a6:	2000      	movs	r0, #0
    56a8:	e7cf      	b.n	564a <__gnu_unwind_pr_common+0x86>
    56aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
    56ae:	3408      	adds	r4, #8
    56b0:	e7ba      	b.n	5628 <__gnu_unwind_pr_common+0x64>
    56b2:	0212      	lsls	r2, r2, #8
    56b4:	2303      	movs	r3, #3
    56b6:	9205      	str	r2, [sp, #20]
    56b8:	f8ad 301c 	strh.w	r3, [sp, #28]
    56bc:	e79b      	b.n	55f6 <__gnu_unwind_pr_common+0x32>
    56be:	2008      	movs	r0, #8
    56c0:	b009      	add	sp, #36	; 0x24
    56c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56c6:	f1bb 0f00 	cmp.w	fp, #0
    56ca:	d002      	beq.n	56d2 <__gnu_unwind_pr_common+0x10e>
    56cc:	2800      	cmp	r0, #0
    56ce:	f040 80b4 	bne.w	583a <__gnu_unwind_pr_common+0x276>
    56d2:	3404      	adds	r4, #4
    56d4:	e79b      	b.n	560e <__gnu_unwind_pr_common+0x4a>
    56d6:	f1bb 0f00 	cmp.w	fp, #0
    56da:	d118      	bne.n	570e <__gnu_unwind_pr_common+0x14a>
    56dc:	b1a8      	cbz	r0, 570a <__gnu_unwind_pr_common+0x146>
    56de:	e9d4 2300 	ldrd	r2, r3, [r4]
    56e2:	1c99      	adds	r1, r3, #2
    56e4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    56e8:	d0d9      	beq.n	569e <__gnu_unwind_pr_common+0xda>
    56ea:	f105 0158 	add.w	r1, r5, #88	; 0x58
    56ee:	3301      	adds	r3, #1
    56f0:	9104      	str	r1, [sp, #16]
    56f2:	f000 80b5 	beq.w	5860 <__gnu_unwind_pr_common+0x29c>
    56f6:	1d20      	adds	r0, r4, #4
    56f8:	f7ff fdea 	bl	52d0 <_Unwind_decode_typeinfo_ptr.isra.0>
    56fc:	ab04      	add	r3, sp, #16
    56fe:	4601      	mov	r1, r0
    5700:	4628      	mov	r0, r5
    5702:	f3af 8000 	nop.w
    5706:	2800      	cmp	r0, #0
    5708:	d167      	bne.n	57da <__gnu_unwind_pr_common+0x216>
    570a:	3408      	adds	r4, #8
    570c:	e77f      	b.n	560e <__gnu_unwind_pr_common+0x4a>
    570e:	210d      	movs	r1, #13
    5710:	4630      	mov	r0, r6
    5712:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5716:	f7ff feed 	bl	54f4 <_Unwind_GetGR>
    571a:	4580      	cmp	r8, r0
    571c:	d1f5      	bne.n	570a <__gnu_unwind_pr_common+0x146>
    571e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5720:	429c      	cmp	r4, r3
    5722:	d1f2      	bne.n	570a <__gnu_unwind_pr_common+0x146>
    5724:	4620      	mov	r0, r4
    5726:	f7ff fd07 	bl	5138 <selfrel_offset31>
    572a:	210f      	movs	r1, #15
    572c:	4602      	mov	r2, r0
    572e:	4630      	mov	r0, r6
    5730:	f7ff ff02 	bl	5538 <_Unwind_SetGR>
    5734:	4630      	mov	r0, r6
    5736:	462a      	mov	r2, r5
    5738:	2100      	movs	r1, #0
    573a:	f7ff fefd 	bl	5538 <_Unwind_SetGR>
    573e:	2007      	movs	r0, #7
    5740:	e7ae      	b.n	56a0 <__gnu_unwind_pr_common+0xdc>
    5742:	210d      	movs	r1, #13
    5744:	4630      	mov	r0, r6
    5746:	f8d5 8020 	ldr.w	r8, [r5, #32]
    574a:	f7ff fed3 	bl	54f4 <_Unwind_GetGR>
    574e:	4580      	cmp	r8, r0
    5750:	d032      	beq.n	57b8 <__gnu_unwind_pr_common+0x1f4>
    5752:	6823      	ldr	r3, [r4, #0]
    5754:	e796      	b.n	5684 <__gnu_unwind_pr_common+0xc0>
    5756:	f1ba 0f00 	cmp.w	sl, #0
    575a:	d023      	beq.n	57a4 <__gnu_unwind_pr_common+0x1e0>
    575c:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5760:	f104 0804 	add.w	r8, r4, #4
    5764:	f8cd b008 	str.w	fp, [sp, #8]
    5768:	f8dd 9000 	ldr.w	r9, [sp]
    576c:	9703      	str	r7, [sp, #12]
    576e:	46a3      	mov	fp, r4
    5770:	461c      	mov	r4, r3
    5772:	e002      	b.n	577a <__gnu_unwind_pr_common+0x1b6>
    5774:	4557      	cmp	r7, sl
    5776:	46b9      	mov	r9, r7
    5778:	d040      	beq.n	57fc <__gnu_unwind_pr_common+0x238>
    577a:	4640      	mov	r0, r8
    577c:	9404      	str	r4, [sp, #16]
    577e:	f7ff fda7 	bl	52d0 <_Unwind_decode_typeinfo_ptr.isra.0>
    5782:	ab04      	add	r3, sp, #16
    5784:	4601      	mov	r1, r0
    5786:	2200      	movs	r2, #0
    5788:	4628      	mov	r0, r5
    578a:	f3af 8000 	nop.w
    578e:	f109 0701 	add.w	r7, r9, #1
    5792:	f108 0804 	add.w	r8, r8, #4
    5796:	2800      	cmp	r0, #0
    5798:	d0ec      	beq.n	5774 <__gnu_unwind_pr_common+0x1b0>
    579a:	45d1      	cmp	r9, sl
    579c:	465c      	mov	r4, fp
    579e:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    57a2:	d1d6      	bne.n	5752 <__gnu_unwind_pr_common+0x18e>
    57a4:	4630      	mov	r0, r6
    57a6:	210d      	movs	r1, #13
    57a8:	f7ff fea4 	bl	54f4 <_Unwind_GetGR>
    57ac:	9b04      	ldr	r3, [sp, #16]
    57ae:	6228      	str	r0, [r5, #32]
    57b0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    57b4:	2006      	movs	r0, #6
    57b6:	e773      	b.n	56a0 <__gnu_unwind_pr_common+0xdc>
    57b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    57ba:	429c      	cmp	r4, r3
    57bc:	d1c9      	bne.n	5752 <__gnu_unwind_pr_common+0x18e>
    57be:	2204      	movs	r2, #4
    57c0:	f04f 0800 	mov.w	r8, #0
    57c4:	18a3      	adds	r3, r4, r2
    57c6:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    57ca:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    57ce:	6823      	ldr	r3, [r4, #0]
    57d0:	4543      	cmp	r3, r8
    57d2:	db4d      	blt.n	5870 <__gnu_unwind_pr_common+0x2ac>
    57d4:	2301      	movs	r3, #1
    57d6:	9301      	str	r3, [sp, #4]
    57d8:	e757      	b.n	568a <__gnu_unwind_pr_common+0xc6>
    57da:	4680      	mov	r8, r0
    57dc:	210d      	movs	r1, #13
    57de:	4630      	mov	r0, r6
    57e0:	f7ff fe88 	bl	54f4 <_Unwind_GetGR>
    57e4:	f1b8 0f02 	cmp.w	r8, #2
    57e8:	6228      	str	r0, [r5, #32]
    57ea:	d13e      	bne.n	586a <__gnu_unwind_pr_common+0x2a6>
    57ec:	462b      	mov	r3, r5
    57ee:	9a04      	ldr	r2, [sp, #16]
    57f0:	f843 2f2c 	str.w	r2, [r3, #44]!
    57f4:	626b      	str	r3, [r5, #36]	; 0x24
    57f6:	62ac      	str	r4, [r5, #40]	; 0x28
    57f8:	2006      	movs	r0, #6
    57fa:	e751      	b.n	56a0 <__gnu_unwind_pr_common+0xdc>
    57fc:	465c      	mov	r4, fp
    57fe:	e7d1      	b.n	57a4 <__gnu_unwind_pr_common+0x1e0>
    5800:	a905      	add	r1, sp, #20
    5802:	4630      	mov	r0, r6
    5804:	f000 fa90 	bl	5d28 <__gnu_unwind_execute>
    5808:	2800      	cmp	r0, #0
    580a:	f47f af48 	bne.w	569e <__gnu_unwind_pr_common+0xda>
    580e:	9b01      	ldr	r3, [sp, #4]
    5810:	2b00      	cmp	r3, #0
    5812:	f43f af54 	beq.w	56be <__gnu_unwind_pr_common+0xfa>
    5816:	210f      	movs	r1, #15
    5818:	4630      	mov	r0, r6
    581a:	f7ff fe6b 	bl	54f4 <_Unwind_GetGR>
    581e:	210e      	movs	r1, #14
    5820:	4602      	mov	r2, r0
    5822:	4630      	mov	r0, r6
    5824:	f7ff fe88 	bl	5538 <_Unwind_SetGR>
    5828:	4630      	mov	r0, r6
    582a:	4a1a      	ldr	r2, [pc, #104]	; (5894 <__gnu_unwind_pr_common+0x2d0>)
    582c:	210f      	movs	r1, #15
    582e:	f7ff fe83 	bl	5538 <_Unwind_SetGR>
    5832:	2007      	movs	r0, #7
    5834:	b009      	add	sp, #36	; 0x24
    5836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    583a:	4620      	mov	r0, r4
    583c:	f7ff fc7c 	bl	5138 <selfrel_offset31>
    5840:	3404      	adds	r4, #4
    5842:	4607      	mov	r7, r0
    5844:	63ac      	str	r4, [r5, #56]	; 0x38
    5846:	4628      	mov	r0, r5
    5848:	f3af 8000 	nop.w
    584c:	2800      	cmp	r0, #0
    584e:	f43f af26 	beq.w	569e <__gnu_unwind_pr_common+0xda>
    5852:	4630      	mov	r0, r6
    5854:	463a      	mov	r2, r7
    5856:	210f      	movs	r1, #15
    5858:	f7ff fe6e 	bl	5538 <_Unwind_SetGR>
    585c:	2007      	movs	r0, #7
    585e:	e71f      	b.n	56a0 <__gnu_unwind_pr_common+0xdc>
    5860:	4630      	mov	r0, r6
    5862:	210d      	movs	r1, #13
    5864:	f7ff fe46 	bl	54f4 <_Unwind_GetGR>
    5868:	6228      	str	r0, [r5, #32]
    586a:	9b04      	ldr	r3, [sp, #16]
    586c:	626b      	str	r3, [r5, #36]	; 0x24
    586e:	e7c2      	b.n	57f6 <__gnu_unwind_pr_common+0x232>
    5870:	f10a 0001 	add.w	r0, sl, #1
    5874:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5878:	f7ff fc5e 	bl	5138 <selfrel_offset31>
    587c:	210f      	movs	r1, #15
    587e:	4602      	mov	r2, r0
    5880:	4630      	mov	r0, r6
    5882:	f7ff fe59 	bl	5538 <_Unwind_SetGR>
    5886:	4630      	mov	r0, r6
    5888:	462a      	mov	r2, r5
    588a:	4641      	mov	r1, r8
    588c:	f7ff fe54 	bl	5538 <_Unwind_SetGR>
    5890:	2007      	movs	r0, #7
    5892:	e705      	b.n	56a0 <__gnu_unwind_pr_common+0xdc>
    5894:	00000000 	.word	0x00000000

00005898 <__aeabi_unwind_cpp_pr0>:
    5898:	2300      	movs	r3, #0
    589a:	e693      	b.n	55c4 <__gnu_unwind_pr_common>

0000589c <__aeabi_unwind_cpp_pr1>:
    589c:	2301      	movs	r3, #1
    589e:	e691      	b.n	55c4 <__gnu_unwind_pr_common>

000058a0 <__aeabi_unwind_cpp_pr2>:
    58a0:	2302      	movs	r3, #2
    58a2:	e68f      	b.n	55c4 <__gnu_unwind_pr_common>

000058a4 <_Unwind_VRS_Pop>:
    58a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58a8:	4605      	mov	r5, r0
    58aa:	b0c4      	sub	sp, #272	; 0x110
    58ac:	2904      	cmp	r1, #4
    58ae:	d806      	bhi.n	58be <_Unwind_VRS_Pop+0x1a>
    58b0:	e8df f001 	tbb	[pc, r1]
    58b4:	03052b4d 	.word	0x03052b4d
    58b8:	09          	.byte	0x09
    58b9:	00          	.byte	0x00
    58ba:	2b03      	cmp	r3, #3
    58bc:	d05f      	beq.n	597e <_Unwind_VRS_Pop+0xda>
    58be:	2002      	movs	r0, #2
    58c0:	b044      	add	sp, #272	; 0x110
    58c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58c6:	2b00      	cmp	r3, #0
    58c8:	d1f9      	bne.n	58be <_Unwind_VRS_Pop+0x1a>
    58ca:	2a10      	cmp	r2, #16
    58cc:	d8f7      	bhi.n	58be <_Unwind_VRS_Pop+0x1a>
    58ce:	682b      	ldr	r3, [r5, #0]
    58d0:	06dc      	lsls	r4, r3, #27
    58d2:	f100 80f4 	bmi.w	5abe <_Unwind_VRS_Pop+0x21a>
    58d6:	ac22      	add	r4, sp, #136	; 0x88
    58d8:	4620      	mov	r0, r4
    58da:	9201      	str	r2, [sp, #4]
    58dc:	f000 f994 	bl	5c08 <__gnu_Unwind_Save_WMMXC>
    58e0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    58e2:	9a01      	ldr	r2, [sp, #4]
    58e4:	2300      	movs	r3, #0
    58e6:	2601      	movs	r6, #1
    58e8:	fa06 f103 	lsl.w	r1, r6, r3
    58ec:	4211      	tst	r1, r2
    58ee:	d003      	beq.n	58f8 <_Unwind_VRS_Pop+0x54>
    58f0:	6801      	ldr	r1, [r0, #0]
    58f2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    58f6:	3004      	adds	r0, #4
    58f8:	3301      	adds	r3, #1
    58fa:	2b04      	cmp	r3, #4
    58fc:	d1f4      	bne.n	58e8 <_Unwind_VRS_Pop+0x44>
    58fe:	63a8      	str	r0, [r5, #56]	; 0x38
    5900:	4620      	mov	r0, r4
    5902:	f000 f977 	bl	5bf4 <__gnu_Unwind_Restore_WMMXC>
    5906:	2000      	movs	r0, #0
    5908:	e7da      	b.n	58c0 <_Unwind_VRS_Pop+0x1c>
    590a:	2b01      	cmp	r3, #1
    590c:	ea4f 4612 	mov.w	r6, r2, lsr #16
    5910:	b297      	uxth	r7, r2
    5912:	d052      	beq.n	59ba <_Unwind_VRS_Pop+0x116>
    5914:	2b05      	cmp	r3, #5
    5916:	d1d2      	bne.n	58be <_Unwind_VRS_Pop+0x1a>
    5918:	eb06 0807 	add.w	r8, r6, r7
    591c:	f1b8 0f20 	cmp.w	r8, #32
    5920:	d8cd      	bhi.n	58be <_Unwind_VRS_Pop+0x1a>
    5922:	2e0f      	cmp	r6, #15
    5924:	f240 8099 	bls.w	5a5a <_Unwind_VRS_Pop+0x1b6>
    5928:	46b8      	mov	r8, r7
    592a:	2f00      	cmp	r7, #0
    592c:	f040 80db 	bne.w	5ae6 <_Unwind_VRS_Pop+0x242>
    5930:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5932:	63aa      	str	r2, [r5, #56]	; 0x38
    5934:	2e0f      	cmp	r6, #15
    5936:	f240 80be 	bls.w	5ab6 <_Unwind_VRS_Pop+0x212>
    593a:	f1b8 0f00 	cmp.w	r8, #0
    593e:	d002      	beq.n	5946 <_Unwind_VRS_Pop+0xa2>
    5940:	a802      	add	r0, sp, #8
    5942:	f000 f90b 	bl	5b5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5946:	2000      	movs	r0, #0
    5948:	b044      	add	sp, #272	; 0x110
    594a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    594e:	2b00      	cmp	r3, #0
    5950:	d1b5      	bne.n	58be <_Unwind_VRS_Pop+0x1a>
    5952:	6bac      	ldr	r4, [r5, #56]	; 0x38
    5954:	b297      	uxth	r7, r2
    5956:	1d28      	adds	r0, r5, #4
    5958:	2601      	movs	r6, #1
    595a:	fa06 f103 	lsl.w	r1, r6, r3
    595e:	4239      	tst	r1, r7
    5960:	f103 0301 	add.w	r3, r3, #1
    5964:	d002      	beq.n	596c <_Unwind_VRS_Pop+0xc8>
    5966:	6821      	ldr	r1, [r4, #0]
    5968:	6001      	str	r1, [r0, #0]
    596a:	3404      	adds	r4, #4
    596c:	2b10      	cmp	r3, #16
    596e:	f100 0004 	add.w	r0, r0, #4
    5972:	d1f2      	bne.n	595a <_Unwind_VRS_Pop+0xb6>
    5974:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5978:	d1e5      	bne.n	5946 <_Unwind_VRS_Pop+0xa2>
    597a:	63ac      	str	r4, [r5, #56]	; 0x38
    597c:	e7a0      	b.n	58c0 <_Unwind_VRS_Pop+0x1c>
    597e:	0c16      	lsrs	r6, r2, #16
    5980:	b297      	uxth	r7, r2
    5982:	19f3      	adds	r3, r6, r7
    5984:	2b10      	cmp	r3, #16
    5986:	d89a      	bhi.n	58be <_Unwind_VRS_Pop+0x1a>
    5988:	682b      	ldr	r3, [r5, #0]
    598a:	071a      	lsls	r2, r3, #28
    598c:	d45d      	bmi.n	5a4a <_Unwind_VRS_Pop+0x1a6>
    598e:	ac22      	add	r4, sp, #136	; 0x88
    5990:	4620      	mov	r0, r4
    5992:	f000 f90d 	bl	5bb0 <__gnu_Unwind_Save_WMMXD>
    5996:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    599a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    599c:	b13f      	cbz	r7, 59ae <_Unwind_VRS_Pop+0x10a>
    599e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    59a2:	6818      	ldr	r0, [r3, #0]
    59a4:	f841 0b04 	str.w	r0, [r1], #4
    59a8:	3304      	adds	r3, #4
    59aa:	4293      	cmp	r3, r2
    59ac:	d1f9      	bne.n	59a2 <_Unwind_VRS_Pop+0xfe>
    59ae:	4620      	mov	r0, r4
    59b0:	63ab      	str	r3, [r5, #56]	; 0x38
    59b2:	f000 f8db 	bl	5b6c <__gnu_Unwind_Restore_WMMXD>
    59b6:	2000      	movs	r0, #0
    59b8:	e782      	b.n	58c0 <_Unwind_VRS_Pop+0x1c>
    59ba:	19f2      	adds	r2, r6, r7
    59bc:	2a10      	cmp	r2, #16
    59be:	f63f af7e 	bhi.w	58be <_Unwind_VRS_Pop+0x1a>
    59c2:	2e0f      	cmp	r6, #15
    59c4:	f63f af7b 	bhi.w	58be <_Unwind_VRS_Pop+0x1a>
    59c8:	682a      	ldr	r2, [r5, #0]
    59ca:	07d1      	lsls	r1, r2, #31
    59cc:	d508      	bpl.n	59e0 <_Unwind_VRS_Pop+0x13c>
    59ce:	4628      	mov	r0, r5
    59d0:	f022 0203 	bic.w	r2, r2, #3
    59d4:	f840 2b48 	str.w	r2, [r0], #72
    59d8:	9301      	str	r3, [sp, #4]
    59da:	f000 f8b3 	bl	5b44 <__gnu_Unwind_Save_VFP>
    59de:	9b01      	ldr	r3, [sp, #4]
    59e0:	9301      	str	r3, [sp, #4]
    59e2:	ac22      	add	r4, sp, #136	; 0x88
    59e4:	4620      	mov	r0, r4
    59e6:	f000 f8ad 	bl	5b44 <__gnu_Unwind_Save_VFP>
    59ea:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    59ec:	9b01      	ldr	r3, [sp, #4]
    59ee:	2f00      	cmp	r7, #0
    59f0:	f000 8095 	beq.w	5b1e <_Unwind_VRS_Pop+0x27a>
    59f4:	007f      	lsls	r7, r7, #1
    59f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    59fa:	f04f 0800 	mov.w	r8, #0
    59fe:	3c04      	subs	r4, #4
    5a00:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    5a04:	f851 0b04 	ldr.w	r0, [r1], #4
    5a08:	f844 0f04 	str.w	r0, [r4, #4]!
    5a0c:	4291      	cmp	r1, r2
    5a0e:	d1f9      	bne.n	5a04 <_Unwind_VRS_Pop+0x160>
    5a10:	f1b8 0f00 	cmp.w	r8, #0
    5a14:	d00f      	beq.n	5a36 <_Unwind_VRS_Pop+0x192>
    5a16:	ac02      	add	r4, sp, #8
    5a18:	2e10      	cmp	r6, #16
    5a1a:	4631      	mov	r1, r6
    5a1c:	bf38      	it	cc
    5a1e:	2110      	movcc	r1, #16
    5a20:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5a24:	3984      	subs	r1, #132	; 0x84
    5a26:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    5a2a:	f852 0b04 	ldr.w	r0, [r2], #4
    5a2e:	f841 0f04 	str.w	r0, [r1, #4]!
    5a32:	4294      	cmp	r4, r2
    5a34:	d1f9      	bne.n	5a2a <_Unwind_VRS_Pop+0x186>
    5a36:	2b01      	cmp	r3, #1
    5a38:	f47f af7b 	bne.w	5932 <_Unwind_VRS_Pop+0x8e>
    5a3c:	ac22      	add	r4, sp, #136	; 0x88
    5a3e:	3204      	adds	r2, #4
    5a40:	63aa      	str	r2, [r5, #56]	; 0x38
    5a42:	4620      	mov	r0, r4
    5a44:	f000 f87a 	bl	5b3c <__gnu_Unwind_Restore_VFP>
    5a48:	e77d      	b.n	5946 <_Unwind_VRS_Pop+0xa2>
    5a4a:	f023 0308 	bic.w	r3, r3, #8
    5a4e:	602b      	str	r3, [r5, #0]
    5a50:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    5a54:	f000 f8ac 	bl	5bb0 <__gnu_Unwind_Save_WMMXD>
    5a58:	e799      	b.n	598e <_Unwind_VRS_Pop+0xea>
    5a5a:	f1b8 0f10 	cmp.w	r8, #16
    5a5e:	682a      	ldr	r2, [r5, #0]
    5a60:	d943      	bls.n	5aea <_Unwind_VRS_Pop+0x246>
    5a62:	07d0      	lsls	r0, r2, #31
    5a64:	f1a8 0810 	sub.w	r8, r8, #16
    5a68:	d50b      	bpl.n	5a82 <_Unwind_VRS_Pop+0x1de>
    5a6a:	4628      	mov	r0, r5
    5a6c:	f022 0201 	bic.w	r2, r2, #1
    5a70:	f042 0202 	orr.w	r2, r2, #2
    5a74:	f840 2b48 	str.w	r2, [r0], #72
    5a78:	9301      	str	r3, [sp, #4]
    5a7a:	f000 f86b 	bl	5b54 <__gnu_Unwind_Save_VFP_D>
    5a7e:	682a      	ldr	r2, [r5, #0]
    5a80:	9b01      	ldr	r3, [sp, #4]
    5a82:	0751      	lsls	r1, r2, #29
    5a84:	d425      	bmi.n	5ad2 <_Unwind_VRS_Pop+0x22e>
    5a86:	2e0f      	cmp	r6, #15
    5a88:	d804      	bhi.n	5a94 <_Unwind_VRS_Pop+0x1f0>
    5a8a:	a822      	add	r0, sp, #136	; 0x88
    5a8c:	9301      	str	r3, [sp, #4]
    5a8e:	f000 f861 	bl	5b54 <__gnu_Unwind_Save_VFP_D>
    5a92:	9b01      	ldr	r3, [sp, #4]
    5a94:	9301      	str	r3, [sp, #4]
    5a96:	ac02      	add	r4, sp, #8
    5a98:	4620      	mov	r0, r4
    5a9a:	f000 f863 	bl	5b64 <__gnu_Unwind_Save_VFP_D_16_to_31>
    5a9e:	f1c6 0110 	rsb	r1, r6, #16
    5aa2:	2900      	cmp	r1, #0
    5aa4:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5aa6:	9b01      	ldr	r3, [sp, #4]
    5aa8:	ddb6      	ble.n	5a18 <_Unwind_VRS_Pop+0x174>
    5aaa:	ac22      	add	r4, sp, #136	; 0x88
    5aac:	004f      	lsls	r7, r1, #1
    5aae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5ab2:	4611      	mov	r1, r2
    5ab4:	e7a3      	b.n	59fe <_Unwind_VRS_Pop+0x15a>
    5ab6:	a822      	add	r0, sp, #136	; 0x88
    5ab8:	f000 f848 	bl	5b4c <__gnu_Unwind_Restore_VFP_D>
    5abc:	e73d      	b.n	593a <_Unwind_VRS_Pop+0x96>
    5abe:	f023 0310 	bic.w	r3, r3, #16
    5ac2:	602b      	str	r3, [r5, #0]
    5ac4:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    5ac8:	9201      	str	r2, [sp, #4]
    5aca:	f000 f89d 	bl	5c08 <__gnu_Unwind_Save_WMMXC>
    5ace:	9a01      	ldr	r2, [sp, #4]
    5ad0:	e701      	b.n	58d6 <_Unwind_VRS_Pop+0x32>
    5ad2:	4628      	mov	r0, r5
    5ad4:	f022 0204 	bic.w	r2, r2, #4
    5ad8:	f840 2bd0 	str.w	r2, [r0], #208
    5adc:	9301      	str	r3, [sp, #4]
    5ade:	f000 f841 	bl	5b64 <__gnu_Unwind_Save_VFP_D_16_to_31>
    5ae2:	9b01      	ldr	r3, [sp, #4]
    5ae4:	e7cf      	b.n	5a86 <_Unwind_VRS_Pop+0x1e2>
    5ae6:	682a      	ldr	r2, [r5, #0]
    5ae8:	e7cb      	b.n	5a82 <_Unwind_VRS_Pop+0x1de>
    5aea:	07d0      	lsls	r0, r2, #31
    5aec:	d50a      	bpl.n	5b04 <_Unwind_VRS_Pop+0x260>
    5aee:	4628      	mov	r0, r5
    5af0:	f022 0201 	bic.w	r2, r2, #1
    5af4:	f042 0202 	orr.w	r2, r2, #2
    5af8:	f840 2b48 	str.w	r2, [r0], #72
    5afc:	9301      	str	r3, [sp, #4]
    5afe:	f000 f829 	bl	5b54 <__gnu_Unwind_Save_VFP_D>
    5b02:	9b01      	ldr	r3, [sp, #4]
    5b04:	9301      	str	r3, [sp, #4]
    5b06:	ac22      	add	r4, sp, #136	; 0x88
    5b08:	4620      	mov	r0, r4
    5b0a:	f000 f823 	bl	5b54 <__gnu_Unwind_Save_VFP_D>
    5b0e:	46b8      	mov	r8, r7
    5b10:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5b12:	9b01      	ldr	r3, [sp, #4]
    5b14:	2f00      	cmp	r7, #0
    5b16:	f47f af6d 	bne.w	59f4 <_Unwind_VRS_Pop+0x150>
    5b1a:	460a      	mov	r2, r1
    5b1c:	e709      	b.n	5932 <_Unwind_VRS_Pop+0x8e>
    5b1e:	460a      	mov	r2, r1
    5b20:	e78d      	b.n	5a3e <_Unwind_VRS_Pop+0x19a>
    5b22:	bf00      	nop

00005b24 <__restore_core_regs>:
    5b24:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5b28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    5b2c:	469c      	mov	ip, r3
    5b2e:	46a6      	mov	lr, r4
    5b30:	f84c 5d04 	str.w	r5, [ip, #-4]!
    5b34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    5b38:	46e5      	mov	sp, ip
    5b3a:	bd00      	pop	{pc}

00005b3c <__gnu_Unwind_Restore_VFP>:
    5b3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    5b40:	4770      	bx	lr
    5b42:	bf00      	nop

00005b44 <__gnu_Unwind_Save_VFP>:
    5b44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop

00005b4c <__gnu_Unwind_Restore_VFP_D>:
    5b4c:	ec90 0b20 	vldmia	r0, {d0-d15}
    5b50:	4770      	bx	lr
    5b52:	bf00      	nop

00005b54 <__gnu_Unwind_Save_VFP_D>:
    5b54:	ec80 0b20 	vstmia	r0, {d0-d15}
    5b58:	4770      	bx	lr
    5b5a:	bf00      	nop

00005b5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5b5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5b60:	4770      	bx	lr
    5b62:	bf00      	nop

00005b64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5b64:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5b68:	4770      	bx	lr
    5b6a:	bf00      	nop

00005b6c <__gnu_Unwind_Restore_WMMXD>:
    5b6c:	ecf0 0102 	ldfe	f0, [r0], #8
    5b70:	ecf0 1102 	ldfe	f1, [r0], #8
    5b74:	ecf0 2102 	ldfe	f2, [r0], #8
    5b78:	ecf0 3102 	ldfe	f3, [r0], #8
    5b7c:	ecf0 4102 	ldfe	f4, [r0], #8
    5b80:	ecf0 5102 	ldfe	f5, [r0], #8
    5b84:	ecf0 6102 	ldfe	f6, [r0], #8
    5b88:	ecf0 7102 	ldfe	f7, [r0], #8
    5b8c:	ecf0 8102 	ldfp	f0, [r0], #8
    5b90:	ecf0 9102 	ldfp	f1, [r0], #8
    5b94:	ecf0 a102 	ldfp	f2, [r0], #8
    5b98:	ecf0 b102 	ldfp	f3, [r0], #8
    5b9c:	ecf0 c102 	ldfp	f4, [r0], #8
    5ba0:	ecf0 d102 	ldfp	f5, [r0], #8
    5ba4:	ecf0 e102 	ldfp	f6, [r0], #8
    5ba8:	ecf0 f102 	ldfp	f7, [r0], #8
    5bac:	4770      	bx	lr
    5bae:	bf00      	nop

00005bb0 <__gnu_Unwind_Save_WMMXD>:
    5bb0:	ece0 0102 	stfe	f0, [r0], #8
    5bb4:	ece0 1102 	stfe	f1, [r0], #8
    5bb8:	ece0 2102 	stfe	f2, [r0], #8
    5bbc:	ece0 3102 	stfe	f3, [r0], #8
    5bc0:	ece0 4102 	stfe	f4, [r0], #8
    5bc4:	ece0 5102 	stfe	f5, [r0], #8
    5bc8:	ece0 6102 	stfe	f6, [r0], #8
    5bcc:	ece0 7102 	stfe	f7, [r0], #8
    5bd0:	ece0 8102 	stfp	f0, [r0], #8
    5bd4:	ece0 9102 	stfp	f1, [r0], #8
    5bd8:	ece0 a102 	stfp	f2, [r0], #8
    5bdc:	ece0 b102 	stfp	f3, [r0], #8
    5be0:	ece0 c102 	stfp	f4, [r0], #8
    5be4:	ece0 d102 	stfp	f5, [r0], #8
    5be8:	ece0 e102 	stfp	f6, [r0], #8
    5bec:	ece0 f102 	stfp	f7, [r0], #8
    5bf0:	4770      	bx	lr
    5bf2:	bf00      	nop

00005bf4 <__gnu_Unwind_Restore_WMMXC>:
    5bf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    5bf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    5bfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    5c00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    5c04:	4770      	bx	lr
    5c06:	bf00      	nop

00005c08 <__gnu_Unwind_Save_WMMXC>:
    5c08:	fca0 8101 	stc2	1, cr8, [r0], #4
    5c0c:	fca0 9101 	stc2	1, cr9, [r0], #4
    5c10:	fca0 a101 	stc2	1, cr10, [r0], #4
    5c14:	fca0 b101 	stc2	1, cr11, [r0], #4
    5c18:	4770      	bx	lr
    5c1a:	bf00      	nop

00005c1c <_Unwind_RaiseException>:
    5c1c:	46ec      	mov	ip, sp
    5c1e:	b500      	push	{lr}
    5c20:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c28:	f04f 0300 	mov.w	r3, #0
    5c2c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c30:	a901      	add	r1, sp, #4
    5c32:	f7ff fbdd 	bl	53f0 <__gnu_Unwind_RaiseException>
    5c36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c3a:	b012      	add	sp, #72	; 0x48
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop

00005c40 <_Unwind_Resume>:
    5c40:	46ec      	mov	ip, sp
    5c42:	b500      	push	{lr}
    5c44:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c4c:	f04f 0300 	mov.w	r3, #0
    5c50:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c54:	a901      	add	r1, sp, #4
    5c56:	f7ff fc05 	bl	5464 <__gnu_Unwind_Resume>
    5c5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c5e:	b012      	add	sp, #72	; 0x48
    5c60:	4770      	bx	lr
    5c62:	bf00      	nop

00005c64 <_Unwind_Resume_or_Rethrow>:
    5c64:	46ec      	mov	ip, sp
    5c66:	b500      	push	{lr}
    5c68:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c70:	f04f 0300 	mov.w	r3, #0
    5c74:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c78:	a901      	add	r1, sp, #4
    5c7a:	f7ff fc15 	bl	54a8 <__gnu_Unwind_Resume_or_Rethrow>
    5c7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c82:	b012      	add	sp, #72	; 0x48
    5c84:	4770      	bx	lr
    5c86:	bf00      	nop

00005c88 <_Unwind_ForcedUnwind>:
    5c88:	46ec      	mov	ip, sp
    5c8a:	b500      	push	{lr}
    5c8c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c94:	f04f 0300 	mov.w	r3, #0
    5c98:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c9c:	ab01      	add	r3, sp, #4
    5c9e:	f7ff fbd7 	bl	5450 <__gnu_Unwind_ForcedUnwind>
    5ca2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5ca6:	b012      	add	sp, #72	; 0x48
    5ca8:	4770      	bx	lr
    5caa:	bf00      	nop

00005cac <_Unwind_Backtrace>:
    5cac:	46ec      	mov	ip, sp
    5cae:	b500      	push	{lr}
    5cb0:	e92d 5000 	stmdb	sp!, {ip, lr}
    5cb4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5cb8:	f04f 0300 	mov.w	r3, #0
    5cbc:	e92d 000c 	stmdb	sp!, {r2, r3}
    5cc0:	aa01      	add	r2, sp, #4
    5cc2:	f7ff fc47 	bl	5554 <__gnu_Unwind_Backtrace>
    5cc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5cca:	b012      	add	sp, #72	; 0x48
    5ccc:	4770      	bx	lr
    5cce:	bf00      	nop

00005cd0 <next_unwind_byte>:
    5cd0:	7a02      	ldrb	r2, [r0, #8]
    5cd2:	b982      	cbnz	r2, 5cf6 <next_unwind_byte+0x26>
    5cd4:	7a43      	ldrb	r3, [r0, #9]
    5cd6:	b1ab      	cbz	r3, 5d04 <next_unwind_byte+0x34>
    5cd8:	6842      	ldr	r2, [r0, #4]
    5cda:	3b01      	subs	r3, #1
    5cdc:	b410      	push	{r4}
    5cde:	7243      	strb	r3, [r0, #9]
    5ce0:	6813      	ldr	r3, [r2, #0]
    5ce2:	2103      	movs	r1, #3
    5ce4:	1d14      	adds	r4, r2, #4
    5ce6:	7201      	strb	r1, [r0, #8]
    5ce8:	021a      	lsls	r2, r3, #8
    5cea:	6044      	str	r4, [r0, #4]
    5cec:	6002      	str	r2, [r0, #0]
    5cee:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cf2:	0e18      	lsrs	r0, r3, #24
    5cf4:	4770      	bx	lr
    5cf6:	6803      	ldr	r3, [r0, #0]
    5cf8:	3a01      	subs	r2, #1
    5cfa:	7202      	strb	r2, [r0, #8]
    5cfc:	021a      	lsls	r2, r3, #8
    5cfe:	6002      	str	r2, [r0, #0]
    5d00:	0e18      	lsrs	r0, r3, #24
    5d02:	4770      	bx	lr
    5d04:	20b0      	movs	r0, #176	; 0xb0
    5d06:	4770      	bx	lr

00005d08 <_Unwind_GetGR.constprop.0>:
    5d08:	b500      	push	{lr}
    5d0a:	b085      	sub	sp, #20
    5d0c:	aa03      	add	r2, sp, #12
    5d0e:	2300      	movs	r3, #0
    5d10:	9200      	str	r2, [sp, #0]
    5d12:	4619      	mov	r1, r3
    5d14:	220c      	movs	r2, #12
    5d16:	f7ff fbd7 	bl	54c8 <_Unwind_VRS_Get>
    5d1a:	9803      	ldr	r0, [sp, #12]
    5d1c:	b005      	add	sp, #20
    5d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    5d22:	bf00      	nop

00005d24 <unwind_UCB_from_context>:
    5d24:	e7f0      	b.n	5d08 <_Unwind_GetGR.constprop.0>
    5d26:	bf00      	nop

00005d28 <__gnu_unwind_execute>:
    5d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d2c:	4605      	mov	r5, r0
    5d2e:	b085      	sub	sp, #20
    5d30:	460e      	mov	r6, r1
    5d32:	f04f 0800 	mov.w	r8, #0
    5d36:	4630      	mov	r0, r6
    5d38:	f7ff ffca 	bl	5cd0 <next_unwind_byte>
    5d3c:	28b0      	cmp	r0, #176	; 0xb0
    5d3e:	4604      	mov	r4, r0
    5d40:	f000 80b1 	beq.w	5ea6 <__gnu_unwind_execute+0x17e>
    5d44:	0607      	lsls	r7, r0, #24
    5d46:	d520      	bpl.n	5d8a <__gnu_unwind_execute+0x62>
    5d48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    5d4c:	2b80      	cmp	r3, #128	; 0x80
    5d4e:	d065      	beq.n	5e1c <__gnu_unwind_execute+0xf4>
    5d50:	2b90      	cmp	r3, #144	; 0x90
    5d52:	d036      	beq.n	5dc2 <__gnu_unwind_execute+0x9a>
    5d54:	2ba0      	cmp	r3, #160	; 0xa0
    5d56:	d078      	beq.n	5e4a <__gnu_unwind_execute+0x122>
    5d58:	2bb0      	cmp	r3, #176	; 0xb0
    5d5a:	d047      	beq.n	5dec <__gnu_unwind_execute+0xc4>
    5d5c:	2bc0      	cmp	r3, #192	; 0xc0
    5d5e:	f000 808a 	beq.w	5e76 <__gnu_unwind_execute+0x14e>
    5d62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5d66:	2bd0      	cmp	r3, #208	; 0xd0
    5d68:	d10b      	bne.n	5d82 <__gnu_unwind_execute+0x5a>
    5d6a:	f000 0207 	and.w	r2, r0, #7
    5d6e:	3201      	adds	r2, #1
    5d70:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5d74:	2305      	movs	r3, #5
    5d76:	2101      	movs	r1, #1
    5d78:	4628      	mov	r0, r5
    5d7a:	f7ff fd93 	bl	58a4 <_Unwind_VRS_Pop>
    5d7e:	2800      	cmp	r0, #0
    5d80:	d0d9      	beq.n	5d36 <__gnu_unwind_execute+0xe>
    5d82:	2009      	movs	r0, #9
    5d84:	b005      	add	sp, #20
    5d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d8a:	f10d 090c 	add.w	r9, sp, #12
    5d8e:	2300      	movs	r3, #0
    5d90:	4619      	mov	r1, r3
    5d92:	0087      	lsls	r7, r0, #2
    5d94:	f8cd 9000 	str.w	r9, [sp]
    5d98:	220d      	movs	r2, #13
    5d9a:	4628      	mov	r0, r5
    5d9c:	f7ff fb94 	bl	54c8 <_Unwind_VRS_Get>
    5da0:	b2ff      	uxtb	r7, r7
    5da2:	9b03      	ldr	r3, [sp, #12]
    5da4:	f8cd 9000 	str.w	r9, [sp]
    5da8:	3704      	adds	r7, #4
    5daa:	0660      	lsls	r0, r4, #25
    5dac:	bf4c      	ite	mi
    5dae:	1bdf      	submi	r7, r3, r7
    5db0:	18ff      	addpl	r7, r7, r3
    5db2:	2300      	movs	r3, #0
    5db4:	4619      	mov	r1, r3
    5db6:	220d      	movs	r2, #13
    5db8:	4628      	mov	r0, r5
    5dba:	9703      	str	r7, [sp, #12]
    5dbc:	f7ff fba6 	bl	550c <_Unwind_VRS_Set>
    5dc0:	e7b9      	b.n	5d36 <__gnu_unwind_execute+0xe>
    5dc2:	f000 030d 	and.w	r3, r0, #13
    5dc6:	2b0d      	cmp	r3, #13
    5dc8:	d0db      	beq.n	5d82 <__gnu_unwind_execute+0x5a>
    5dca:	af03      	add	r7, sp, #12
    5dcc:	2300      	movs	r3, #0
    5dce:	f000 020f 	and.w	r2, r0, #15
    5dd2:	4619      	mov	r1, r3
    5dd4:	9700      	str	r7, [sp, #0]
    5dd6:	4628      	mov	r0, r5
    5dd8:	f7ff fb76 	bl	54c8 <_Unwind_VRS_Get>
    5ddc:	2300      	movs	r3, #0
    5dde:	9700      	str	r7, [sp, #0]
    5de0:	4619      	mov	r1, r3
    5de2:	220d      	movs	r2, #13
    5de4:	4628      	mov	r0, r5
    5de6:	f7ff fb91 	bl	550c <_Unwind_VRS_Set>
    5dea:	e7a4      	b.n	5d36 <__gnu_unwind_execute+0xe>
    5dec:	28b1      	cmp	r0, #177	; 0xb1
    5dee:	d05f      	beq.n	5eb0 <__gnu_unwind_execute+0x188>
    5df0:	28b2      	cmp	r0, #178	; 0xb2
    5df2:	f000 80cc 	beq.w	5f8e <__gnu_unwind_execute+0x266>
    5df6:	28b3      	cmp	r0, #179	; 0xb3
    5df8:	d07e      	beq.n	5ef8 <__gnu_unwind_execute+0x1d0>
    5dfa:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    5dfe:	2bb4      	cmp	r3, #180	; 0xb4
    5e00:	d0bf      	beq.n	5d82 <__gnu_unwind_execute+0x5a>
    5e02:	f000 0207 	and.w	r2, r0, #7
    5e06:	3201      	adds	r2, #1
    5e08:	2301      	movs	r3, #1
    5e0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5e0e:	4619      	mov	r1, r3
    5e10:	4628      	mov	r0, r5
    5e12:	f7ff fd47 	bl	58a4 <_Unwind_VRS_Pop>
    5e16:	2800      	cmp	r0, #0
    5e18:	d08d      	beq.n	5d36 <__gnu_unwind_execute+0xe>
    5e1a:	e7b2      	b.n	5d82 <__gnu_unwind_execute+0x5a>
    5e1c:	4630      	mov	r0, r6
    5e1e:	f7ff ff57 	bl	5cd0 <next_unwind_byte>
    5e22:	0224      	lsls	r4, r4, #8
    5e24:	4304      	orrs	r4, r0
    5e26:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5e2a:	d0aa      	beq.n	5d82 <__gnu_unwind_execute+0x5a>
    5e2c:	0124      	lsls	r4, r4, #4
    5e2e:	2300      	movs	r3, #0
    5e30:	b2a2      	uxth	r2, r4
    5e32:	4619      	mov	r1, r3
    5e34:	4628      	mov	r0, r5
    5e36:	f7ff fd35 	bl	58a4 <_Unwind_VRS_Pop>
    5e3a:	2800      	cmp	r0, #0
    5e3c:	d1a1      	bne.n	5d82 <__gnu_unwind_execute+0x5a>
    5e3e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    5e42:	bf18      	it	ne
    5e44:	f04f 0801 	movne.w	r8, #1
    5e48:	e775      	b.n	5d36 <__gnu_unwind_execute+0xe>
    5e4a:	43c2      	mvns	r2, r0
    5e4c:	f002 0307 	and.w	r3, r2, #7
    5e50:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    5e54:	411a      	asrs	r2, r3
    5e56:	0701      	lsls	r1, r0, #28
    5e58:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    5e5c:	f04f 0300 	mov.w	r3, #0
    5e60:	bf48      	it	mi
    5e62:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    5e66:	4619      	mov	r1, r3
    5e68:	4628      	mov	r0, r5
    5e6a:	f7ff fd1b 	bl	58a4 <_Unwind_VRS_Pop>
    5e6e:	2800      	cmp	r0, #0
    5e70:	f43f af61 	beq.w	5d36 <__gnu_unwind_execute+0xe>
    5e74:	e785      	b.n	5d82 <__gnu_unwind_execute+0x5a>
    5e76:	28c6      	cmp	r0, #198	; 0xc6
    5e78:	d051      	beq.n	5f1e <__gnu_unwind_execute+0x1f6>
    5e7a:	28c7      	cmp	r0, #199	; 0xc7
    5e7c:	d05a      	beq.n	5f34 <__gnu_unwind_execute+0x20c>
    5e7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5e82:	2bc0      	cmp	r3, #192	; 0xc0
    5e84:	d069      	beq.n	5f5a <__gnu_unwind_execute+0x232>
    5e86:	28c8      	cmp	r0, #200	; 0xc8
    5e88:	d075      	beq.n	5f76 <__gnu_unwind_execute+0x24e>
    5e8a:	28c9      	cmp	r0, #201	; 0xc9
    5e8c:	f47f af79 	bne.w	5d82 <__gnu_unwind_execute+0x5a>
    5e90:	4630      	mov	r0, r6
    5e92:	f7ff ff1d 	bl	5cd0 <next_unwind_byte>
    5e96:	0302      	lsls	r2, r0, #12
    5e98:	f000 000f 	and.w	r0, r0, #15
    5e9c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    5ea0:	3001      	adds	r0, #1
    5ea2:	4302      	orrs	r2, r0
    5ea4:	e766      	b.n	5d74 <__gnu_unwind_execute+0x4c>
    5ea6:	f1b8 0f00 	cmp.w	r8, #0
    5eaa:	d014      	beq.n	5ed6 <__gnu_unwind_execute+0x1ae>
    5eac:	2000      	movs	r0, #0
    5eae:	e769      	b.n	5d84 <__gnu_unwind_execute+0x5c>
    5eb0:	4630      	mov	r0, r6
    5eb2:	f7ff ff0d 	bl	5cd0 <next_unwind_byte>
    5eb6:	2800      	cmp	r0, #0
    5eb8:	f43f af63 	beq.w	5d82 <__gnu_unwind_execute+0x5a>
    5ebc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5ec0:	f47f af5f 	bne.w	5d82 <__gnu_unwind_execute+0x5a>
    5ec4:	4602      	mov	r2, r0
    5ec6:	4619      	mov	r1, r3
    5ec8:	4628      	mov	r0, r5
    5eca:	f7ff fceb 	bl	58a4 <_Unwind_VRS_Pop>
    5ece:	2800      	cmp	r0, #0
    5ed0:	f43f af31 	beq.w	5d36 <__gnu_unwind_execute+0xe>
    5ed4:	e755      	b.n	5d82 <__gnu_unwind_execute+0x5a>
    5ed6:	ac03      	add	r4, sp, #12
    5ed8:	4643      	mov	r3, r8
    5eda:	220e      	movs	r2, #14
    5edc:	4641      	mov	r1, r8
    5ede:	9400      	str	r4, [sp, #0]
    5ee0:	4628      	mov	r0, r5
    5ee2:	f7ff faf1 	bl	54c8 <_Unwind_VRS_Get>
    5ee6:	9400      	str	r4, [sp, #0]
    5ee8:	4628      	mov	r0, r5
    5eea:	4643      	mov	r3, r8
    5eec:	220f      	movs	r2, #15
    5eee:	4641      	mov	r1, r8
    5ef0:	f7ff fb0c 	bl	550c <_Unwind_VRS_Set>
    5ef4:	4640      	mov	r0, r8
    5ef6:	e745      	b.n	5d84 <__gnu_unwind_execute+0x5c>
    5ef8:	4630      	mov	r0, r6
    5efa:	f7ff fee9 	bl	5cd0 <next_unwind_byte>
    5efe:	0301      	lsls	r1, r0, #12
    5f00:	f000 000f 	and.w	r0, r0, #15
    5f04:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5f08:	1c42      	adds	r2, r0, #1
    5f0a:	2301      	movs	r3, #1
    5f0c:	430a      	orrs	r2, r1
    5f0e:	4628      	mov	r0, r5
    5f10:	4619      	mov	r1, r3
    5f12:	f7ff fcc7 	bl	58a4 <_Unwind_VRS_Pop>
    5f16:	2800      	cmp	r0, #0
    5f18:	f43f af0d 	beq.w	5d36 <__gnu_unwind_execute+0xe>
    5f1c:	e731      	b.n	5d82 <__gnu_unwind_execute+0x5a>
    5f1e:	4630      	mov	r0, r6
    5f20:	f7ff fed6 	bl	5cd0 <next_unwind_byte>
    5f24:	0301      	lsls	r1, r0, #12
    5f26:	f000 000f 	and.w	r0, r0, #15
    5f2a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5f2e:	1c42      	adds	r2, r0, #1
    5f30:	2303      	movs	r3, #3
    5f32:	e7eb      	b.n	5f0c <__gnu_unwind_execute+0x1e4>
    5f34:	4630      	mov	r0, r6
    5f36:	f7ff fecb 	bl	5cd0 <next_unwind_byte>
    5f3a:	4602      	mov	r2, r0
    5f3c:	2800      	cmp	r0, #0
    5f3e:	f43f af20 	beq.w	5d82 <__gnu_unwind_execute+0x5a>
    5f42:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5f46:	f47f af1c 	bne.w	5d82 <__gnu_unwind_execute+0x5a>
    5f4a:	2104      	movs	r1, #4
    5f4c:	4628      	mov	r0, r5
    5f4e:	f7ff fca9 	bl	58a4 <_Unwind_VRS_Pop>
    5f52:	2800      	cmp	r0, #0
    5f54:	f43f aeef 	beq.w	5d36 <__gnu_unwind_execute+0xe>
    5f58:	e713      	b.n	5d82 <__gnu_unwind_execute+0x5a>
    5f5a:	f000 020f 	and.w	r2, r0, #15
    5f5e:	3201      	adds	r2, #1
    5f60:	2303      	movs	r3, #3
    5f62:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    5f66:	4619      	mov	r1, r3
    5f68:	4628      	mov	r0, r5
    5f6a:	f7ff fc9b 	bl	58a4 <_Unwind_VRS_Pop>
    5f6e:	2800      	cmp	r0, #0
    5f70:	f43f aee1 	beq.w	5d36 <__gnu_unwind_execute+0xe>
    5f74:	e705      	b.n	5d82 <__gnu_unwind_execute+0x5a>
    5f76:	4630      	mov	r0, r6
    5f78:	f7ff feaa 	bl	5cd0 <next_unwind_byte>
    5f7c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    5f80:	f000 030f 	and.w	r3, r0, #15
    5f84:	3210      	adds	r2, #16
    5f86:	3301      	adds	r3, #1
    5f88:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    5f8c:	e6f2      	b.n	5d74 <__gnu_unwind_execute+0x4c>
    5f8e:	2300      	movs	r3, #0
    5f90:	f10d 090c 	add.w	r9, sp, #12
    5f94:	220d      	movs	r2, #13
    5f96:	4619      	mov	r1, r3
    5f98:	f8cd 9000 	str.w	r9, [sp]
    5f9c:	4628      	mov	r0, r5
    5f9e:	f7ff fa93 	bl	54c8 <_Unwind_VRS_Get>
    5fa2:	4630      	mov	r0, r6
    5fa4:	f7ff fe94 	bl	5cd0 <next_unwind_byte>
    5fa8:	0602      	lsls	r2, r0, #24
    5faa:	f04f 0702 	mov.w	r7, #2
    5fae:	d50c      	bpl.n	5fca <__gnu_unwind_execute+0x2a2>
    5fb0:	9b03      	ldr	r3, [sp, #12]
    5fb2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5fb6:	40b8      	lsls	r0, r7
    5fb8:	4403      	add	r3, r0
    5fba:	4630      	mov	r0, r6
    5fbc:	9303      	str	r3, [sp, #12]
    5fbe:	f7ff fe87 	bl	5cd0 <next_unwind_byte>
    5fc2:	0603      	lsls	r3, r0, #24
    5fc4:	f107 0707 	add.w	r7, r7, #7
    5fc8:	d4f2      	bmi.n	5fb0 <__gnu_unwind_execute+0x288>
    5fca:	9b03      	ldr	r3, [sp, #12]
    5fcc:	f8cd 9000 	str.w	r9, [sp]
    5fd0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    5fd4:	f503 7201 	add.w	r2, r3, #516	; 0x204
    5fd8:	40bc      	lsls	r4, r7
    5fda:	2300      	movs	r3, #0
    5fdc:	4414      	add	r4, r2
    5fde:	4619      	mov	r1, r3
    5fe0:	220d      	movs	r2, #13
    5fe2:	4628      	mov	r0, r5
    5fe4:	9403      	str	r4, [sp, #12]
    5fe6:	f7ff fa91 	bl	550c <_Unwind_VRS_Set>
    5fea:	e6a4      	b.n	5d36 <__gnu_unwind_execute+0xe>

00005fec <__gnu_unwind_frame>:
    5fec:	b510      	push	{r4, lr}
    5fee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5ff0:	b084      	sub	sp, #16
    5ff2:	685a      	ldr	r2, [r3, #4]
    5ff4:	2003      	movs	r0, #3
    5ff6:	f88d 000c 	strb.w	r0, [sp, #12]
    5ffa:	79dc      	ldrb	r4, [r3, #7]
    5ffc:	f88d 400d 	strb.w	r4, [sp, #13]
    6000:	0212      	lsls	r2, r2, #8
    6002:	3308      	adds	r3, #8
    6004:	4608      	mov	r0, r1
    6006:	a901      	add	r1, sp, #4
    6008:	9201      	str	r2, [sp, #4]
    600a:	9302      	str	r3, [sp, #8]
    600c:	f7ff fe8c 	bl	5d28 <__gnu_unwind_execute>
    6010:	b004      	add	sp, #16
    6012:	bd10      	pop	{r4, pc}

00006014 <_Unwind_GetRegionStart>:
    6014:	b508      	push	{r3, lr}
    6016:	f7ff fe85 	bl	5d24 <unwind_UCB_from_context>
    601a:	6c80      	ldr	r0, [r0, #72]	; 0x48
    601c:	bd08      	pop	{r3, pc}
    601e:	bf00      	nop

00006020 <_Unwind_GetLanguageSpecificData>:
    6020:	b508      	push	{r3, lr}
    6022:	f7ff fe7f 	bl	5d24 <unwind_UCB_from_context>
    6026:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    6028:	79c3      	ldrb	r3, [r0, #7]
    602a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    602e:	3008      	adds	r0, #8
    6030:	bd08      	pop	{r3, pc}
    6032:	bf00      	nop

00006034 <_Unwind_GetDataRelBase>:
    6034:	b508      	push	{r3, lr}
    6036:	f000 f807 	bl	6048 <abort>
    603a:	bf00      	nop

0000603c <_Unwind_GetTextRelBase>:
    603c:	b508      	push	{r3, lr}
    603e:	f7ff fff9 	bl	6034 <_Unwind_GetDataRelBase>
    6042:	bf00      	nop

00006044 <__aeabi_idiv0>:
    6044:	4770      	bx	lr
    6046:	bf00      	nop

00006048 <abort>:
    6048:	b508      	push	{r3, lr}
    604a:	2006      	movs	r0, #6
    604c:	f000 f864 	bl	6118 <raise>
    6050:	2001      	movs	r0, #1
    6052:	f7fc fdb7 	bl	2bc4 <_exit>
    6056:	Address 0x0000000000006056 is out of bounds.


00006058 <__libc_init_array>:
    6058:	b570      	push	{r4, r5, r6, lr}
    605a:	4e0d      	ldr	r6, [pc, #52]	; (6090 <__libc_init_array+0x38>)
    605c:	4c0d      	ldr	r4, [pc, #52]	; (6094 <__libc_init_array+0x3c>)
    605e:	1ba4      	subs	r4, r4, r6
    6060:	10a4      	asrs	r4, r4, #2
    6062:	2500      	movs	r5, #0
    6064:	42a5      	cmp	r5, r4
    6066:	d109      	bne.n	607c <__libc_init_array+0x24>
    6068:	4e0b      	ldr	r6, [pc, #44]	; (6098 <__libc_init_array+0x40>)
    606a:	4c0c      	ldr	r4, [pc, #48]	; (609c <__libc_init_array+0x44>)
    606c:	f7fa f948 	bl	300 <_init>
    6070:	1ba4      	subs	r4, r4, r6
    6072:	10a4      	asrs	r4, r4, #2
    6074:	2500      	movs	r5, #0
    6076:	42a5      	cmp	r5, r4
    6078:	d105      	bne.n	6086 <__libc_init_array+0x2e>
    607a:	bd70      	pop	{r4, r5, r6, pc}
    607c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6080:	4798      	blx	r3
    6082:	3501      	adds	r5, #1
    6084:	e7ee      	b.n	6064 <__libc_init_array+0xc>
    6086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    608a:	4798      	blx	r3
    608c:	3501      	adds	r5, #1
    608e:	e7f2      	b.n	6076 <__libc_init_array+0x1e>
    6090:	0000030c 	.word	0x0000030c
    6094:	0000030c 	.word	0x0000030c
    6098:	0000030c 	.word	0x0000030c
    609c:	0000031c 	.word	0x0000031c

000060a0 <memcpy>:
    60a0:	b510      	push	{r4, lr}
    60a2:	1e43      	subs	r3, r0, #1
    60a4:	440a      	add	r2, r1
    60a6:	4291      	cmp	r1, r2
    60a8:	d100      	bne.n	60ac <memcpy+0xc>
    60aa:	bd10      	pop	{r4, pc}
    60ac:	f811 4b01 	ldrb.w	r4, [r1], #1
    60b0:	f803 4f01 	strb.w	r4, [r3, #1]!
    60b4:	e7f7      	b.n	60a6 <memcpy+0x6>

000060b6 <memset>:
    60b6:	4402      	add	r2, r0
    60b8:	4603      	mov	r3, r0
    60ba:	4293      	cmp	r3, r2
    60bc:	d100      	bne.n	60c0 <memset+0xa>
    60be:	4770      	bx	lr
    60c0:	f803 1b01 	strb.w	r1, [r3], #1
    60c4:	e7f9      	b.n	60ba <memset+0x4>

000060c6 <_raise_r>:
    60c6:	291f      	cmp	r1, #31
    60c8:	b538      	push	{r3, r4, r5, lr}
    60ca:	4604      	mov	r4, r0
    60cc:	460d      	mov	r5, r1
    60ce:	d904      	bls.n	60da <_raise_r+0x14>
    60d0:	2316      	movs	r3, #22
    60d2:	6003      	str	r3, [r0, #0]
    60d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    60d8:	bd38      	pop	{r3, r4, r5, pc}
    60da:	6c42      	ldr	r2, [r0, #68]	; 0x44
    60dc:	b112      	cbz	r2, 60e4 <_raise_r+0x1e>
    60de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    60e2:	b94b      	cbnz	r3, 60f8 <_raise_r+0x32>
    60e4:	4620      	mov	r0, r4
    60e6:	f000 f831 	bl	614c <_getpid_r>
    60ea:	462a      	mov	r2, r5
    60ec:	4601      	mov	r1, r0
    60ee:	4620      	mov	r0, r4
    60f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    60f4:	f000 b818 	b.w	6128 <_kill_r>
    60f8:	2b01      	cmp	r3, #1
    60fa:	d00a      	beq.n	6112 <_raise_r+0x4c>
    60fc:	1c59      	adds	r1, r3, #1
    60fe:	d103      	bne.n	6108 <_raise_r+0x42>
    6100:	2316      	movs	r3, #22
    6102:	6003      	str	r3, [r0, #0]
    6104:	2001      	movs	r0, #1
    6106:	e7e7      	b.n	60d8 <_raise_r+0x12>
    6108:	2400      	movs	r4, #0
    610a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    610e:	4628      	mov	r0, r5
    6110:	4798      	blx	r3
    6112:	2000      	movs	r0, #0
    6114:	e7e0      	b.n	60d8 <_raise_r+0x12>
    6116:	Address 0x0000000000006116 is out of bounds.


00006118 <raise>:
    6118:	4b02      	ldr	r3, [pc, #8]	; (6124 <raise+0xc>)
    611a:	4601      	mov	r1, r0
    611c:	6818      	ldr	r0, [r3, #0]
    611e:	f7ff bfd2 	b.w	60c6 <_raise_r>
    6122:	bf00      	nop
    6124:	10000074 	.word	0x10000074

00006128 <_kill_r>:
    6128:	b538      	push	{r3, r4, r5, lr}
    612a:	4c07      	ldr	r4, [pc, #28]	; (6148 <_kill_r+0x20>)
    612c:	2300      	movs	r3, #0
    612e:	4605      	mov	r5, r0
    6130:	4608      	mov	r0, r1
    6132:	4611      	mov	r1, r2
    6134:	6023      	str	r3, [r4, #0]
    6136:	f7fc fd53 	bl	2be0 <_kill>
    613a:	1c43      	adds	r3, r0, #1
    613c:	d102      	bne.n	6144 <_kill_r+0x1c>
    613e:	6823      	ldr	r3, [r4, #0]
    6140:	b103      	cbz	r3, 6144 <_kill_r+0x1c>
    6142:	602b      	str	r3, [r5, #0]
    6144:	bd38      	pop	{r3, r4, r5, pc}
    6146:	bf00      	nop
    6148:	10000324 	.word	0x10000324

0000614c <_getpid_r>:
    614c:	f7fc bd40 	b.w	2bd0 <_getpid>

00006150 <strlen>:
    6150:	4603      	mov	r3, r0
    6152:	f813 2b01 	ldrb.w	r2, [r3], #1
    6156:	2a00      	cmp	r2, #0
    6158:	d1fb      	bne.n	6152 <strlen+0x2>
    615a:	1a18      	subs	r0, r3, r0
    615c:	3801      	subs	r0, #1
    615e:	4770      	bx	lr

00006160 <std::integral_constant<long long, 100ll>::value>:
    6160:	0064 0000 0000 0000 6e69 6176 696c 0064     d.......invalid.
    6170:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    6180:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    6190:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    61a0:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    61b0:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    61c0:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    61d0:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    61e0:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    61f0:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6200:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6210:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6220:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    6230:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    6240:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    6250:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    6260:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    6270:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6280:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6290:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    62a0:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    62b0:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    62c0:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    62d0:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    62e0:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    62f0:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6300:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6310:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6320:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6330:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6340:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    6350:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    6360:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    6370:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    6380:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    6390:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    63a0:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    63b0:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    63c0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    63d0:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    63e0:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    63f0:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6400:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    6410:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    6420:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    6430:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    6440:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    6450:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    6460:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    6470:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    6480:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    6490:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    64a0:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    64b0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    64c0:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    64d0:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    64e0:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    64f0:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    6500:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    6510:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    6520:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    6530:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    6540:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6550:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6560:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6570:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6580:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6590:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    65a0:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    65b0:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    65c0:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    65d0:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3234     [0m.[0m......[42
    65e0:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    65f0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6600:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6610:	6461 3263 6920 696e 6974 6c61 7a69 6465     adc2 initialized
    6620:	5b1b 6d30 000a 0000 5b1b 3234 206d 2020     .[0m.....[42m   
    6630:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    6640:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6650:	256d 3e64 1b20 305b 333b 6d37 6175 7472     m%d> .[0;37muart
    6660:	6920 696e 6974 6c61 7a69 6465 5b1b 6d30      initialized.[0m
    6670:	000a 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    6680:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    6690:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    66a0:	1b20 305b 333b 6d37 6553 746e 7620 6c61      .[0;37mSent val
    66b0:	6575 2520 2066 766f 7265 5520 5241 1b54     ue %f over UART.
    66c0:	305b 0a6d ff00 ffff                         [0m.....

000066c8 <sjsu::lpc40xx::Pin::kFunction>:
    66c8:	0300 ffff                                   ....

000066cc <sjsu::lpc40xx::Pin::kResistor>:
    66cc:	0203 ffff                                   ....

000066d0 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    66d0:	0107 ffff                                   ....

000066d4 <sjsu::lpc40xx::Pin::kOpenDrain>:
    66d4:	010a ffff                                   ....

000066d8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    66d8:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

000066e8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    66e8:	0000 4140                                   ..@A

000066ec <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    66ec:	ff0c ffff                                   ....

000066f0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    66f0:	0000 4140                                   ..@A

000066f4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    66f4:	0100 ffff                                   ....

000066f8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    66f8:	0100 ffff                                   ....

000066fc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    66fc:	0500 ffff                                   ....

00006700 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    6700:	0108 ffff                                   ....

00006704 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    6704:	0208 ffff                                   ....

00006708 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    6708:	0208 ffff                                   ....

0000670c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    670c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    671c:	2e72 7068 0070 ffff                         r.hpp...

00006724 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    6724:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    6734:	2e72 7068 0070 ffff                         r.hpp...

0000673c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    673c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    674c:	2e72 7068 0070 ffff                         r.hpp...

00006754 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    6754:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    6764:	2e72 7068 0070 ffff                         r.hpp...

0000676c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    676c:	687c 0000 0802 0000                         |h......

00006774 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    6774:	687c 0000 0902 0000                         |h......

0000677c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    677c:	687c 0000 1c04 0000                         |h......

00006784 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    6784:	687c 0000 1d04 0000                         |h......

0000678c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    678c:	687c 0000 1d01 0000                         |h......

00006794 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    6794:	687c 0000 0902 0000                         |h......

0000679c <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    679c:	0800 ffff                                   ....

000067a0 <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    67a0:	0808 ffff                                   ....

000067a4 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    67a4:	0110 ffff                                   ....

000067a8 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    67a8:	0115 ffff                                   ....

000067ac <sjsu::lpc40xx::Adc::Control::kStartCode>:
    67ac:	0318 ffff                                   ....

000067b0 <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    67b0:	0c04 ffff                                   ....

000067b4 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    67b4:	011f ffff                                   ....

000067b8 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    67b8:	687c 0000 1900 0000                         |h......

000067c0 <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    67c0:	67b8 0000 000a 0000                         .g......

000067c8 <sjsu::lpc40xx::Adc::kClockFrequency>:
    67c8:	2400 4974                                   .$tI

000067cc <main::file>:
    67cc:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000067d8 <main::file>:
    67d8:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000067e4 <main::file>:
    67e4:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000067f0 <vtable for sjsu::lpc40xx::Adc>:
	...
    67f8:	1b5d 0000 1c79 0000 1cc9 0000               ]...y.......

00006804 <vtable for sjsu::Adc>:
	...
    680c:	47dd 0000 47dd 0000 47dd 0000               .G...G...G..

00006818 <vtable for sjsu::lpc40xx::Uart>:
	...
    6820:	1739 0000 17f9 0000 1885 0000 1929 0000     9...........)...
    6830:	19f9 0000                                   ....

00006834 <vtable for sjsu::Uart>:
	...
    683c:	47dd 0000 47dd 0000 47dd 0000 47dd 0000     .G...G...G...G..
    684c:	47dd 0000                                   .G..

00006850 <vtable for sjsu::lpc40xx::SystemController>:
	...
    6858:	0b31 0000 0bcd 0000 0c25 0000 0c49 0000     1.......%...I...
    6868:	0c65 0000 0ca1 0000 0cd5 0000               e...........

00006874 <vtable for sjsu::lpc40xx::Pin>:
	...
    687c:	07b9 0000 07ed 0000 085d 0000 0821 0000     ........]...!...

0000688c <main::__PRETTY_FUNCTION__>:
    688c:	6e69 2074 616d 6e69 2928 ff00               int main()..

00006898 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    6898:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    68a8:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    68b8:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    68c8:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    68d8:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    68e8:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    68f8:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    6908:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    6918:	736e 0074                                   nst.

0000691c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    691c:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    692c:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    693c:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    694c:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    695c:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    696c:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    697c:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    698c:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00006998 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    6998:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    69a8:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    69b8:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    69c8:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    69d8:	2029 6f63 736e 0074                         ) const.

000069e0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    69e0:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    69f0:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    6a00:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    6a10:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    6a20:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...
    6a30:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    6a40:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    6a50:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    6a60:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    6a70:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    6a80:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    6a90:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    6aa0:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    6ab0:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    6ac0:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    6ad0:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    6ae0:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    6af0:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    6b00:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    6b10:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    6b20:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    6b30:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    6b40:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    6b50:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6b60:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    6b70:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    6b80:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    6b90:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    6ba0:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    6bb0:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    6bc0:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    6bd0:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    6be0:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    6bf0:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    6c00:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    6c10:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    6c20:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    6c30:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    6c40:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    6c50:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    6c60:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    6c70:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    6c80:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    6c90:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    6ca0:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    6cb0:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00006cbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    6cbc:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    6ccc:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    6cdc:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    6cec:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    6cfc:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    6d0c:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    6d1c:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    6d2c:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    6d3c:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    6d4c:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    6d5c:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    6d6c:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6d7c:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6d8c:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6d9c:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    6dac:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    6dbc:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    6dcc:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    6ddc:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    6dec:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6dfc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6e0c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6e1c:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    6e2c:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    6e3c:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    6e4c:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    6e5c:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    6e6c:	ffff ffff 41ed 0000 0001 0000 ffff ffff     .....A..........
    6e7c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6e8c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6e9c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6eac:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6ebc:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6ecc:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    6edc:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    6eec:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    6efc:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    6f0c:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    6f1c:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    6f2c:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    6f3c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6f4c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6f5c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6f6c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6f7c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6f8c:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    6f9c:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    6fac:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    6fbc:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    6fcc:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    6fdc:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    6fec:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    6ffc:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    700c:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    701c:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    702c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    703c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    704c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    705c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    706c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    707c:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    708c:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    709c:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    70ac:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    70bc:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    70cc:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    70dc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    70ec:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    70fc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    710c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    711c:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    712c:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    713c:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    714c:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    715c:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    716c:	46b1 0000 0001 0000 ffff ffff fffe ffff     .F..............
    717c:	46e1 0000 0001 0000 ffff ffff 5b1b 3134     .F...........[41
    718c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    719c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    71ac:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    71bc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    71cc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    71dc:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    71ec:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    71fc:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    720c:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    721c:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    722c:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    723c:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    724c:	2174 5b1b 6d30 5b1b 6d30 000a               t!.[0m.[0m..

00007258 <std::integral_constant<long long, 1ll>::value>:
    7258:	0001 0000 0000 0000                         ........

00007260 <config::kSystemClockRateMhz>:
    7260:	0000 4240                                   ..@B

00007264 <config::kRtosFrequency>:
    7264:	0000 447a                                   ..zD

00007268 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    7268:	72cc 0000                                   .r..

0000726c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    726c:	687c 0000 0200 0000                         |h......

00007274 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    7274:	687c 0000 0300 0000                         |h......

0000727c <sjsu::lpc40xx::Uart::Port::kUart0>:
    727c:	c000 4000 0003 0000 726c 0000 7274 0000     ...@....lr..tr..
    728c:	0009 0000                                   ....

00007290 <sjsu::InitializePlatform()::file>:
    7290:	7473 7261 7574 2e70 7063 0070               startup.cpp.

0000729c <vtable for sjsu::cortex::SystemTimer>:
	...
    72a4:	4259 0000 4361 0000 4279 0000               YB..aC..yB..

000072b0 <vtable for sjsu::SystemTimer>:
	...
    72b8:	47dd 0000 47dd 0000 47dd 0000               .G...G...G..

000072c4 <vtable for sjsu::cortex::InterruptController>:
	...
    72cc:	40e9 0000 413d 0000                         .@..=A..

000072d4 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    72d4:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    72e4:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

000072f4 <__sf_fake_stderr>:
	...

00007314 <__sf_fake_stdin>:
	...

00007334 <__sf_fake_stdout>:
	...
