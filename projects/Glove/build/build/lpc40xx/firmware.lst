
build/build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/build/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000028fd

Program Header:
0x70000001 off    0x00019334 vaddr 0x00009334 paddr 0x00009334 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000093ec memsz 0x000093ec flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x000093ec align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x000200f8 vaddr 0x100000f8 paddr 0x100000f8 align 2**16
         filesz 0x00000000 memsz 0x00000e40 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            0000931c  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000f8  10000000  000093ec  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200f8  2**2  CONTENTS
  3 .bss             00000e40  100000f8  100000f8  000200f8  2**3  ALLOC
  4 .ARM.extab       00000018  0000931c  0000931c  0001931c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  00009334  00009334  00019334  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200f8  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200f8  2**2  CONTENTS
  8 .noinit          00000000  10000f38  10000f38  000200f8  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200f8  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020128  2**0  CONTENTS, READONLY
 11 .debug_info      0007c9cb  00000000  00000000  000201a6  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    00005265  00000000  00000000  0009cb71  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000f78  00000000  00000000  000a1dd6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000e98  00000000  00000000  000a2d4e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00008387  00000000  00000000  000a3be6  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002cb41  00000000  00000000  000abf6d  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00004e44  00000000  00000000  000d8ab0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f8 l    d  .bss	00000000 .bss
0000931c l    d  .ARM.extab	00000000 .ARM.extab
00009334 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000f38 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00004c18 l     F .text	00000030 NVIC_EnableIRQ
00004c48 l     F .text	00000030 NVIC_DisableIRQ
00004c78 l     F .text	00000054 NVIC_SetPriority
00009228 l     O .text	00000004 config::kSystemClockRateMhz
0000922c l     O .text	00000004 config::kRtosFrequency
00004d84 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004da0 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
10000078 l     O .data	00000004 (anonymous namespace)::system_controller
100003c8 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100003cc l     O .bss	0000000c (anonymous namespace)::uart0
1000007c l     O .data	0000000c (anonymous namespace)::system_timer
10000088 l     O .data	00000004 (anonymous namespace)::interrupt_controller
00005294 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
000052b8 l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00009258 l     O .text	0000000c sjsu::InitializePlatform()::file
0000928c l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00005448 l     F .text	00000110 __static_initialization_and_destruction_0(int, int)
00005558 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/colin/Robotics2020/SeniorProject/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000f8 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000fc l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000003ec l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000408 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000044e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000046a l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000048e l     F .text	00000026 _Unwind_GetGR
00000668 l     F .text	00000030 NVIC_DisableIRQ
0000086c l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000888 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000880c l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00008890 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
0000890c l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
000012c0 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
00008974 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00008728 l     O .text	0000000f vUartTask(void*)::file
00008738 l     O .text	0000000f vUartTask(void*)::file
000087f4 l     O .text	00000016 vUartTask(void*)::__PRETTY_FUNCTION__
00008748 l     O .text	0000000f vPotentiometerTask(void*)::file
00008954 l     O .text	0000001f vPotentiometerTask(void*)::__PRETTY_FUNCTION__
00002416 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000024c6 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000024ec l     F .text	00000240 __static_initialization_and_destruction_0(int, int)
0000272c l     F .text	00000010 _GLOBAL__sub_I_xUartTaskHandle
00000000 l    df *ABS*	00000000 exceptions.cpp
000028ec l       .text	00000000 handler2_address_const
0000296c l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
000029b0 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
100002ac l     O .bss	00000064 pxReadyTasksLists
10000310 l     O .bss	00000014 xDelayedTaskList1
10000324 l     O .bss	00000014 xDelayedTaskList2
10000338 l     O .bss	00000004 pxDelayedTaskList
1000033c l     O .bss	00000004 pxOverflowDelayedTaskList
10000340 l     O .bss	00000014 xPendingReadyList
10000354 l     O .bss	00000014 xTasksWaitingTermination
10000368 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000036c l     O .bss	00000014 xSuspendedTaskList
10000380 l     O .bss	00000004 uxCurrentNumberOfTasks
10000384 l     O .bss	00000004 xTickCount
10000388 l     O .bss	00000004 uxTopReadyPriority
1000038c l     O .bss	00000004 xSchedulerRunning
10000390 l     O .bss	00000004 uxPendedTicks
10000394 l     O .bss	00000004 xYieldPending
10000398 l     O .bss	00000004 xNumOfOverflows
1000039c l     O .bss	00000004 uxTaskNumber
100003a0 l     O .bss	00000004 xNextTaskUnblockTime
100003a4 l     O .bss	00000004 xIdleTaskHandle
100003a8 l     O .bss	00000004 uxSchedulerSuspended
100003ac l     O .bss	00000004 ulTaskSwitchedInTime
100003b0 l     O .bss	00000004 ulTotalRunTime
00002c12 l     F .text	000000f4 prvInitialiseNewTask
00002d08 l     F .text	000000dc prvAddNewTaskToReadyList
0000343c l     F .text	00000080 prvInitialiseTaskLists
00003514 l     F .text	0000003c prvDeleteTCB
00003550 l     F .text	0000004c prvResetNextTaskUnblockTime
000036a0 l     F .text	000000cc prvAddCurrentTaskToDelayedList
0000342c l     F .text	0000000e prvIdleTask
000034bc l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00003918 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00003934 l     F .text	0000002e _strlen(char const*)
00003962 l     F .text	00000028 _is_digit(char)
0000398a l     F .text	00000048 _atoi(char const**)
000039d2 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00003c14 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00003ce4 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00008c80 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00003dc4 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00004208 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00004b4c l     F .text	000000cc _trace_write_semihosting_stdout(char const*, unsigned int)
100003b4 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
1000008c l     O .data	00000004 uxCriticalNesting
000055d0 l     F .text	00000030 prvTaskExitError
00005620 l       .text	00000000 pxCurrentTCBConst2
00005628 l     F .text	00000024 prvPortStartFirstTask
000057b8 l     F .text	00000010 vPortEnableVFP
00005770 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_common.cpp
100003d8 l     O .bss	00000060 idle_task_tcb
10000438 l     O .bss	00000140 idle_task_stack
10000578 l     O .bss	00000060 timer_task_tcb
100005d8 l     O .bss	00000800 timer_task_stack
00000000 l    df *ABS*	00000000 timers.c
10000dd8 l     O .bss	00000014 xActiveTimerList1
10000dec l     O .bss	00000014 xActiveTimerList2
10000e00 l     O .bss	00000004 pxCurrentTimerList
10000e04 l     O .bss	00000004 pxOverflowTimerList
10000e08 l     O .bss	00000004 xTimerQueue
10000e0c l     O .bss	00000004 xTimerTaskHandle
00005d28 l     F .text	00000080 prvCheckForValidListAndQueue
000059bc l     F .text	00000024 prvTimerTask
00005958 l     F .text	00000064 prvProcessExpiredTimer
00005b04 l     F .text	00000084 prvInsertTimerInActiveList
00005a7c l     F .text	00000048 prvGetNextExpireTime
000059e0 l     F .text	0000009c prvProcessTimerOrBlockTask
00005b88 l     F .text	000000f8 prvProcessReceivedCommands
00005ac4 l     F .text	00000040 prvSampleTimeNow
00005c80 l     F .text	000000a8 prvSwitchTimerLists
10000e10 l     O .bss	00000004 xLastTime.6731
10000e8c l     O .bss	00000050 xStaticTimerQueue.6776
10000e14 l     O .bss	00000078 ucStaticTimerQueueStorage.6777
00000000 l    df *ABS*	00000000 queue.c
00005e9a l     F .text	00000046 prvInitialiseNewQueue
0000622c l     F .text	000000d4 prvCopyDataToQueue
0000641c l     F .text	00000030 prvIsQueueFull
0000634c l     F .text	000000a4 prvUnlockQueue
00006300 l     F .text	0000004c prvCopyDataFromQueue
000063f0 l     F .text	0000002c prvIsQueueEmpty
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00006ed0 l     F .text	00000012 selfrel_offset31
00006ee4 l     F .text	00000060 search_EIT_table
00006f44 l     F .text	00000028 __gnu_unwind_get_pr_addr
00006f6c l     F .text	000000a4 get_eit_entry
00007010 l     F .text	00000058 restore_non_core_regs
00007068 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00007074 l     F .text	00000004 __gnu_unwind_24bit.isra.1
00007078 l     F .text	00000002 _Unwind_DebugHook
0000707c l     F .text	0000003e unwind_phase2
000070bc l     F .text	000000c6 unwind_phase2_forced
0000728c l     F .text	00000018 _Unwind_GetGR
000072d0 l     F .text	0000001a _Unwind_SetGR
0000735c l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00007a68 l     F .text	00000038 next_unwind_byte
00007aa0 l     F .text	0000001a _Unwind_GetGR.constprop.0
00007abc l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000004f4  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00007a20 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00007188 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00005048  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
000021bc  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
000027d8  w    F .text	0000006c sjsu::InitializeBssSection()
000037b4 g     F .text	00000010 _getpid
00008634  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00005014  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00005090  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
00008690  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00004d58  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00004f82  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
10000060  w    O .data	00000004 sjsu::newlib::in
000056d8 g     F .text	00000034 vPortExitCritical
000068bc g     F .text	0000005a .hidden __floatdidf
10000284  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
0000081c  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
0000876c  w    O .text	00000014 vtable for sjsu::Adc
00008050 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00004adc g     F .text	00000044 printf
0000649c g     F .text	00000068 vQueueWaitForMessageRestricted
00000000 g       *ABS*	00000000 __vectors_start__
0000808a g     F .text	00000002 __malloc_unlock
00002078  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00002000  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00001a18  w    F .text	00000050 sjsu::lpc40xx::Adc::Read() const
00004ee8  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
1000004c  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00000580  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
000078dc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
000079fc g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00006034 g     F .text	000000b2 xQueueGenericSendFromISR
000093ec g       .ARM.exidx	00000000 __exidx_end
00008614  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
000052ec g     F .text	00000014 ThreadRuntimeCounter
00007630 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000070  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00001d80  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
0000870c  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel4
00000a28  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
100002a8 g     O .bss	00000004 pxCurrentTCB
00007dac g     F .text	0000000a .hidden _Unwind_GetRegionStart
000079fc g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
0000862c  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
000086d8  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kChannelSelect
10010000 g       *ABS*	00000000 __top_SRAM
10000f34 g     O .bss	00000004 errno
000093ec g       .ARM.exidx	00000000 _etext
0000210c  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000076c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00000b20  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00007a44 g     F .text	00000022 .hidden _Unwind_Backtrace
00009230  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
10000120  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
000069c4 g     F .text	00000160 .hidden __aeabi_fadd
100003c0  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
000069c0 g     F .text	00000164 .hidden __subsf3
000086e0  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kBurstEnable
00000bec  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
000086b8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
0000335c g     F .text	0000002c vTaskInternalSetTimeOutState
000078bc g     F .text	00000018 .hidden __restore_core_regs
000078fc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00008624  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00008780  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00004e00  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00008618  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00005650 g     F .text	00000054 xPortStartScheduler
00000ffc  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00007184 g     F .text	00000004 .hidden _Unwind_GetCFA
00007e58 g     F .text	00000016 memcpy
0000324c g     F .text	0000002c vTaskPlaceOnEventList
00000d24  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
0000651c g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
000072a4 g     F .text	0000002a .hidden _Unwind_VRS_Set
00006844 g     F .text	00000022 .hidden __floatsidf
00005300 g     F .text	00000060 vPortSetupTimerInterrupt
1000028c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Adc::adc_base
00005778 g     F .text	00000040 xPortSysTickHandler
00006bd4 g     F .text	00000000 .hidden __aeabi_uldivmod
10000f38 g       .noinit	00000000 _noinit
00000c04  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00003854 g     F .text	00000048 puts
00003790 g     F .text	00000024 vPortFree
0000188c  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
0000107c  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
000020e8  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
000086fc  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4
10000074  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00000954  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
000014ac  w    F .text	00000020 sjsu::Uart::Uart()
00007e38 g     F .text	00000010 malloc
000086f4  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2
00007ff0 g     F .text	00000050 _raise_r
00006b2c g     F .text	0000001c .hidden __aeabi_i2f
00001838  w    F .text	00000020 sjsu::Adc::Adc()
10010000 g       *ABS*	00000000 __top_RAM
00001808  w    F .text	00000030 sjsu::lpc40xx::Adc::BurstModeIsEnabled()
00005710 g     F .text	00000066 xPortPendSVHandler
00002a1a g     F .text	00000048 vListInsertEnd
000003aa  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000730  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00008074 g     F .text	00000004 _getpid_r
000072ec g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00001fda  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00006824 g     F .text	0000001e .hidden __aeabi_ui2d
10010000 g       *ABS*	00000000 StackTop
00000cc0  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00006c04 g     F .text	000002cc .hidden __udivmoddi4
000065a0 g     F .text	00000000 .hidden __aeabi_drsub
00007fd0 g     F .text	00000020 _sbrk_r
000000fc g       .text	00000000 bss_section_table
0000861c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000051b8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000078ec g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000014cc  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00002a00 g     F .text	0000001a vListInitialiseItem
0000763c g     F .text	0000027e .hidden _Unwind_VRS_Pop
000060e8 g     F .text	00000144 xQueueReceive
00007638  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000ee4 g     O .bss	00000050 xQueueRegistry
000050e8  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
1000027c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00007a44 g     F .text	00000022 .hidden ___Unwind_Backtrace
00000624  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
000016f0  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
0000053c  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00006868 g     F .text	00000042 .hidden __extendsfdf2
000086d0  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00005830 g     F .text	00000034 vApplicationGetTimerTaskMemory
000065ac g     F .text	00000276 .hidden __adddf3
20000000 g       *ABS*	00000000 __user_heap_base
100003b8  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
00009334 g       .ARM.extab	00000000 __exidx_start
00007df0 g     F .text	00000048 __libc_init_array
000011f4  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
000079b4 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
0000129c  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00005818  w    F .text	00000018 unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])
00001ac8  w    F .text	000000c4 sjsu::lpc40xx::Adc::Conversion() const
00007de0 g     F .text	0000000e abort
000079d8 g     F .text	00000022 .hidden ___Unwind_Resume
00001284  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00006824 g     F .text	0000001e .hidden __floatunsidf
10000034  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
000037e0 g     F .text	00000044 _sbrk
0000376c g     F .text	00000024 pvPortMalloc
10000278  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00004f9c  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00001220  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00080000 g       *ABS*	00000000 __top_FLASH
000029c0 g     F .text	00000040 vListInitialise
00006504 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00008620  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00002432  w    F .text	0000003c unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
0000169a  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00006594 g     F .text	0000000a std::terminate()
00006918 g     F .text	0000009e .hidden __aeabi_d2f
00007904 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00008628  w    O .text	00000001 sjsu::lpc40xx::SystemController::Peripherals::kAdc
00003010 g     F .text	00000020 xTaskGetTickCount
00005ee0 g     F .text	00000154 xQueueGenericSend
00001c64  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
000069c0 g     F .text	00000164 .hidden __aeabi_fsub
000015c0  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
0000209e  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00001d5c  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
000028d4 g     F .text	00000026 ArmHardFaultHandler
10000288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000000e4 g       .text	00000000 section_table_start
1000022c  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00000c9e  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000f38 g       .bss	00000000 _ebss
0000164c  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
000087b8  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
000021fc  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
000009d0  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
000035d8 g     F .text	000000c8 xTaskPriorityDisinherit
000050b4  w    F .text	00000014 sjsu::cortex::SystemTimer::Initialize() const
0000042c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006b58 g     F .text	0000007c .hidden __floatdisf
0000923c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00002858 g     F .text	0000007c GetRegistersFromStack
000086e4  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kPowerEnable
000014cc  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
10000270 g     O .bss	00000004 xUartTaskHandle
000032b4 g     F .text	000000a8 xTaskRemoveFromEventList
000065ac g     F .text	00000276 .hidden __aeabi_dadd
00001838  w    F .text	00000020 sjsu::Adc::Adc()
000068ac g     F .text	0000006a .hidden __aeabi_ul2d
20008000 g       *ABS*	00000000 __top_SRAM_AHB
000078d4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00005360  w    F .text	000000b8 sjsu::InitializePlatform()
00001f1c  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
000092bc g     O .text	00000020 __sf_fake_stderr
00004e20  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00006584 g     F .text	00000010 std::get_terminate()
10000f38 g       .bss	00000000 end
10000274 g     O .bss	00000004 xPotentiometerTaskHandle
000014ac  w    F .text	00000020 sjsu::Uart::Uart()
000079d8 g     F .text	00000022 .hidden _Unwind_Resume
00001b8c  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00007254 g     F .text	0000000c .hidden _Unwind_DeleteException
0000927c  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
00007250 g     F .text	00000002 .hidden _Unwind_Complete
00000ad8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
1000026c  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
000038a8 g     F .text	00000070 _out_chunk(char, void*, unsigned int, unsigned int)
00009264  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00008644  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00003388 g     F .text	0000008c xTaskCheckForTimeOut
00007e80 g     F .text	0000009c _free_r
00004b2e g     F .text	0000001c trace_write
10000280  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00002314  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000f8 g       .bss	00000000 _bss
000065a8 g     F .text	0000027a .hidden __aeabi_dsub
00008678  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00001a68  w    F .text	00000016 sjsu::lpc40xx::Adc::GetActiveBits() const
00004b20 g     F .text	0000000e trace_initialize
00002ed8 g     F .text	0000001c vTaskSuspendAll
000086e8  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kStartCode
000068ac g     F .text	0000006a .hidden __floatundidf
00006574 g     F .text	00000006 __cxa_pure_virtual
00000cfc  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00006b2c g     F .text	0000001c .hidden __floatsisf
000086a8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000124  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007ac0 g     F .text	000002c4 .hidden __gnu_unwind_execute
00002ad4 g     F .text	00000054 uxListRemove
10000008  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000290  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000008b8  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000078e4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
000006b0  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002364  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00004f44  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00002b28 g     F .text	00000060 xTaskCreateStatic
10000f38 g       .noinit	00000000 _end_noinit
1000012c  w    O .bss	00000100 sjsu::cortex::InterruptController::table
000009ac  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00003188 g     F .text	000000c4 vTaskSwitchContext
00001044  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00008630  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00004f10  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00008718  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
00001d80  w    F .text	0000003c sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)
00005e5c g     F .text	0000003e xQueueGenericCreateStatic
000071fc g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000244  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
00003278 g     F .text	0000003c vTaskPlaceOnEventListRestricted
00004f28  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00004ccc  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
10000298  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
00006844 g     F .text	00000022 .hidden __aeabi_i2d
000086dc  w    O .text	00000002 sjsu::lpc40xx::Adc::Control::kClockDivider
000086b0  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
000078f4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
000051d0  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000057e4 g     F .text	00000034 vApplicationGetIdleTaskMemory
10000294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00006b48 g     F .text	0000008c .hidden __floatundisf
000058d8 g     F .text	00000080 xTimerGenericCommand
10000054  w    O .data	00000008 sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
000079b4 g     F .text	00000022 .hidden _Unwind_RaiseException
00007ddc  w    F .text	00000002 .hidden __aeabi_ldiv0
1000000c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00002844  w    F .text	00000014 sjsu::SystemInitialize()
000018e4  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00006b24 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
10000118  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00008088 g     F .text	00000002 __malloc_lock
1000029c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00006534 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
0000037e  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
000092dc g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00000f80  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00007e6e g     F .text	00000010 memset
00001ec0 g     F .text	0000005c main
00004d10  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001b9c  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
000086f0  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kDone
00006b58 g     F .text	0000007c .hidden __aeabi_l2f
00001f52  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00002a62 g     F .text	00000072 vListInsert
00004e94  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00004d30  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
00009244  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00005864 g     F .text	00000074 xTimerCreateTimerTask
000087dc  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00006918 g     F .text	0000009e .hidden __truncdfsf2
00002220  w    F .text	0000009a float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)
0000031c g       .text	00000000 __init_array_end
00005600 g     F .text	00000026 vPortSVCHandler
00007f1c g     F .text	000000b4 _malloc_r
00001dbc g     F .text	00000104 vPotentiometerTask(void*)
00000000 g       *ABS*	00000000 __base_FLASH
000068bc g     F .text	0000005a .hidden __aeabi_l2d
0000863c  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000068  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006b48 g     F .text	0000008c .hidden __aeabi_ul2f
00004dc4  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00001058  w    F .text	00000024 sjsu::Uart::Write(unsigned char) const
000071e8 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00004f66  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000203c  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00007240 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
1000005c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00009220  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00002170  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
000078bc g     F .text	00000018 .hidden restore_core_regs
000009ec  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
000079a0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00002ef4 g     F .text	0000011c xTaskResumeAll
000086c8  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00002e2c g     F .text	000000ac vTaskStartScheduler
000050c8  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00001f64  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
10000020  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
000017e4  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
000069b8 g     F .text	0000016c .hidden __aeabi_frsub
00007dd4 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
10000094 g     O .data	00000004 _impure_ptr
00008640  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00000c28  w    F .text	0000001e units::linear_scale<float>::operator()() const
000086ec  w    O .text	00000002 sjsu::lpc40xx::Adc::DataRegister::kResult
00000bb0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004e5c  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
000007a0  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00008758  w    O .text	00000014 vtable for sjsu::lpc40xx::Adc
10000000 g       .data	00000000 _data
00003414 g     F .text	00000018 vTaskMissedYield
00002142  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
0000517c  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
100002a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm0Peripheral
00001c80 g     F .text	000000dc vUartTask(void*)
00007db8 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00008660  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
0000644c g     F .text	00000050 vQueueAddToRegistry
00001858  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
000028fc g     F .text	00000070 ArmResetHandler
00003030 g     F .text	00000158 xTaskIncrementTick
0000219e  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
00001858  w    F .text	00000034 sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)
100002a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pwm::Channel::kPwm1Peripheral
00007260 g     F .text	0000002a .hidden _Unwind_VRS_Get
00004e38  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000090 g     O .data	00000004 __cxxabiv1::__terminate_handler
0000798c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00000a5c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00005da8 g     F .text	000000b4 xQueueGenericReset
00000a90  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00003824 g     F .text	00000030 _write
00007d84 g     F .text	00000028 .hidden __gnu_unwind_frame
00001a80  w    F .text	00000048 sjsu::lpc40xx::Adc::HasConversionFinished() const
00007a20 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000f8 g       .data	00000000 _edata
000017c0  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
000018fc  w    F .text	0000011c sjsu::lpc40xx::Adc::Initialize() const
00005418  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000128  w    O .bss	00000004 sjsu::lpc40xx::Adc::adc_base
00002b88 g     F .text	0000008a xTaskCreate
00001bd8  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
00008648  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00000c46  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
00006b24 g     F .text	00000024 .hidden __floatunsisf
0000657a g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00007948 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000057cc  w    F .text	00000016 unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])
000037c4 g     F .text	0000001a _kill
0000273c  w    F .text	0000009c sjsu::InitializeDataSection()
0000246e  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00002de4 g     F .text	00000048 vTaskDelay
00000648  w    F .text	00000020 sjsu::DefaultUptime()
000092fc g     O .text	00000020 __sf_fake_stdout
00000368  w    F .text	00000016 std::numeric_limits<long long>::max()
00008714  w    O .text	00000004 sjsu::lpc40xx::Adc::kClockFrequency
0000359c g     F .text	0000003c xTaskGetSchedulerState
00001d5c  w    F .text	00000024 sjsu::Adc::Adc(sjsu::Adc const&)
0000030c g       .text	00000000 __init_array_start
00007ddc  w    F .text	00000002 .hidden __aeabi_idiv0
00008704  w    O .text	00000008 sjsu::lpc40xx::Adc::Channel::kChannel2
000020c2  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
0000389c g     F .text	0000000c _exit
000086c0  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000004  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
000003cc  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
0000115c  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000698  w    F .text	00000018 sjsu::Pin::GetPort() const
00008078 g     F .text	00000010 strlen
00005568 g     F .text	00000068 pxPortInitialiseStack
000006c8  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000000  w    O .data	00000004 sjsu::Uptime
00007634  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
000022ba  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000ee0 g     O .bss	00000004 __malloc_sbrk_start
00000eb8  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006554 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000004b4  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00006868 g     F .text	00000042 .hidden __aeabi_f2d
000056a4 g     F .text	00000034 vPortEnterCritical
00007dcc g     F .text	00000006 .hidden _Unwind_GetDataRelBase
000011a8  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000edc g     O .bss	00000004 __malloc_free_list
10000048  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
000023be  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
000006fc  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
000065a8 g     F .text	0000027a .hidden __subdf3
0000030c g       .text	00000000 __preinit_array_start
10000064  w    O .data	00000004 heap_position
00000b68  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
00001f8c  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001bf0  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
00008638  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
0000879c  w    O .text	0000001c vtable for sjsu::Uart
000069c4 g     F .text	00000160 .hidden __addsf3
000021da  w    F .text	00000022 unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)
00009234  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
1000006c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00001500  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
00008040 g     F .text	00000010 raise
00007e48 g     F .text	00000010 free



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 fd 28 00 00 5d 4e 00 00 d5 28 00 00     .....(..]N...(..
      10:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 00 00 00 00     ]N..]N..]N......
	...
      2c:	01 56 00 00 5d 4e 00 00 00 00 00 00 11 57 00 00     .V..]N.......W..
      3c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      4c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      5c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      6c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      7c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      8c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      9c:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      ac:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      bc:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      cc:	5d 4e 00 00 5d 4e 00 00 5d 4e 00 00 5d 4e 00 00     ]N..]N..]N..]N..
      dc:	5d 4e 00 00 5d 4e 00 00                             ]N..]N..

000000e4 <data_section_table>:
      e4:	000093ec 	.word	0x000093ec
      e8:	10000000 	.word	0x10000000
      ec:	000000f8 	.word	0x000000f8
      f0:	000093ec 	.word	0x000093ec
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f8 	.word	0x100000f8
     100:	00000e40 	.word	0x00000e40
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	0000272d 	.word	0x0000272d
     314:	000029b1 	.word	0x000029b1
     318:	00005559 	.word	0x00005559

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000f8 	.word	0x100000f8
     344:	00000000 	.word	0x00000000
     348:	00009334 	.word	0x00009334

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000fc 	.word	0x100000fc
     364:	00009334 	.word	0x00009334

00000368 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     368:	b490      	push	{r4, r7}
     36a:	af00      	add	r7, sp, #0
     36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     374:	4618      	mov	r0, r3
     376:	4621      	mov	r1, r4
     378:	46bd      	mov	sp, r7
     37a:	bc90      	pop	{r4, r7}
     37c:	4770      	bx	lr

0000037e <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     37e:	b580      	push	{r7, lr}
     380:	b084      	sub	sp, #16
     382:	af00      	add	r7, sp, #0
     384:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the system clock speed for the LPC4078 in MHz
#if !defined(SJ2_SYSTEM_CLOCK_RATE_MHZ)
#define SJ2_SYSTEM_CLOCK_RATE_MHZ 48_MHz
#endif  // !defined(SJ2_SYSTEM_CLOCK_RATE)
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
     388:	e9d7 0100 	ldrd	r0, r1, [r7]
     38c:	f006 fbdc 	bl	6b48 <__aeabi_ul2f>
     390:	4602      	mov	r2, r0
     392:	f107 030c 	add.w	r3, r7, #12
     396:	ee00 2a10 	vmov	s0, r2
     39a:	4618      	mov	r0, r3
     39c:	f000 f805 	bl	3aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	4618      	mov	r0, r3
     3a4:	3710      	adds	r7, #16
     3a6:	46bd      	mov	sp, r7
     3a8:	bd80      	pop	{r7, pc}

000003aa <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     3aa:	b580      	push	{r7, lr}
     3ac:	b082      	sub	sp, #8
     3ae:	af00      	add	r7, sp, #0
     3b0:	6078      	str	r0, [r7, #4]
     3b2:	ed87 0a00 	vstr	s0, [r7]
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	463a      	mov	r2, r7
     3ba:	4611      	mov	r1, r2
     3bc:	4618      	mov	r0, r3
     3be:	f000 f805 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	4618      	mov	r0, r3
     3c6:	3708      	adds	r7, #8
     3c8:	46bd      	mov	sp, r7
     3ca:	bd80      	pop	{r7, pc}

000003cc <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     3cc:	b480      	push	{r7}
     3ce:	b083      	sub	sp, #12
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	683b      	ldr	r3, [r7, #0]
     3d8:	681a      	ldr	r2, [r3, #0]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	601a      	str	r2, [r3, #0]
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	4618      	mov	r0, r3
     3e2:	370c      	adds	r7, #12
     3e4:	46bd      	mov	sp, r7
     3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ea:	4770      	bx	lr

000003ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     3ec:	b580      	push	{r7, lr}
     3ee:	b086      	sub	sp, #24
     3f0:	af00      	add	r7, sp, #0
     3f2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     3f4:	6878      	ldr	r0, [r7, #4]
     3f6:	f000 f807 	bl	408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     3fa:	eef0 7a40 	vmov.f32	s15, s0
	}
     3fe:	eeb0 0a67 	vmov.f32	s0, s15
     402:	3718      	adds	r7, #24
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}

00000408 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	7239      	strb	r1, [r7, #8]
     412:	713a      	strb	r2, [r7, #4]
     414:	703b      	strb	r3, [r7, #0]
			return value;
     416:	68fb      	ldr	r3, [r7, #12]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	ee07 3a90 	vmov	s15, r3
		}
     41e:	eeb0 0a67 	vmov.f32	s0, s15
     422:	3714      	adds	r7, #20
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     42c:	b580      	push	{r7, lr}
     42e:	b082      	sub	sp, #8
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	ed87 0a00 	vstr	s0, [r7]
     438:	687b      	ldr	r3, [r7, #4]
     43a:	463a      	mov	r2, r7
     43c:	4611      	mov	r1, r2
     43e:	4618      	mov	r0, r3
     440:	f7ff ffc4 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     444:	687b      	ldr	r3, [r7, #4]
     446:	4618      	mov	r0, r3
     448:	3708      	adds	r7, #8
     44a:	46bd      	mov	sp, r7
     44c:	bd80      	pop	{r7, pc}

0000044e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     44e:	b580      	push	{r7, lr}
     450:	b086      	sub	sp, #24
     452:	af00      	add	r7, sp, #0
     454:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     456:	6878      	ldr	r0, [r7, #4]
     458:	f000 f807 	bl	46a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     45c:	eef0 7a40 	vmov.f32	s15, s0
	}
     460:	eeb0 0a67 	vmov.f32	s0, s15
     464:	3718      	adds	r7, #24
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}

0000046a <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     46a:	b480      	push	{r7}
     46c:	b085      	sub	sp, #20
     46e:	af00      	add	r7, sp, #0
     470:	60f8      	str	r0, [r7, #12]
     472:	7239      	strb	r1, [r7, #8]
     474:	713a      	strb	r2, [r7, #4]
     476:	703b      	strb	r3, [r7, #0]
			return value;
     478:	68fb      	ldr	r3, [r7, #12]
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	ee07 3a90 	vmov	s15, r3
		}
     480:	eeb0 0a67 	vmov.f32	s0, s15
     484:	3714      	adds	r7, #20
     486:	46bd      	mov	sp, r7
     488:	f85d 7b04 	ldr.w	r7, [sp], #4
     48c:	4770      	bx	lr

0000048e <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
     48e:	b580      	push	{r7, lr}
     490:	b086      	sub	sp, #24
     492:	af02      	add	r7, sp, #8
     494:	6078      	str	r0, [r7, #4]
     496:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
     498:	683a      	ldr	r2, [r7, #0]
     49a:	f107 030c 	add.w	r3, r7, #12
     49e:	9300      	str	r3, [sp, #0]
     4a0:	2300      	movs	r3, #0
     4a2:	2100      	movs	r1, #0
     4a4:	6878      	ldr	r0, [r7, #4]
     4a6:	f006 fedb 	bl	7260 <_Unwind_VRS_Get>
      return val;
     4aa:	68fb      	ldr	r3, [r7, #12]
    }
     4ac:	4618      	mov	r0, r3
     4ae:	3710      	adds	r7, #16
     4b0:	46bd      	mov	sp, r7
     4b2:	bd80      	pop	{r7, pc}

000004b4 <sjsu::build::Stringify(sjsu::build::Target)>:
constexpr const Platform kPlatform = Platform::PLATFORM;

/// @param target - the target to convert to a string
/// @return a string representation of the target.
constexpr const char * Stringify(Target target)
{
     4b4:	b480      	push	{r7}
     4b6:	b085      	sub	sp, #20
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
     4be:	60fb      	str	r3, [r7, #12]
  switch (target)
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d002      	beq.n	4cc <sjsu::build::Stringify(sjsu::build::Target)+0x18>
     4c6:	2b01      	cmp	r3, #1
     4c8:	d003      	beq.n	4d2 <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
     4ca:	e005      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
     4cc:	4b07      	ldr	r3, [pc, #28]	; (4ec <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
     4ce:	60fb      	str	r3, [r7, #12]
     4d0:	e002      	b.n	4d8 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
     4d4:	60fb      	str	r3, [r7, #12]
     4d6:	bf00      	nop
  }
  return result;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	4618      	mov	r0, r3
     4dc:	3714      	adds	r7, #20
     4de:	46bd      	mov	sp, r7
     4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	0000808c 	.word	0x0000808c
     4ec:	00008094 	.word	0x00008094
     4f0:	000080a0 	.word	0x000080a0

000004f4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     502:	210f      	movs	r1, #15
     504:	6878      	ldr	r0, [r7, #4]
     506:	f7ff ffc2 	bl	48e <_Unwind_GetGR>
     50a:	4603      	mov	r3, r0
     50c:	f023 0301 	bic.w	r3, r3, #1
     510:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
     512:	68fb      	ldr	r3, [r7, #12]
     514:	6819      	ldr	r1, [r3, #0]
     516:	68bb      	ldr	r3, [r7, #8]
     518:	3b04      	subs	r3, #4
     51a:	461a      	mov	r2, r3
     51c:	4806      	ldr	r0, [pc, #24]	; (538 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
     51e:	f004 fadd 	bl	4adc <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
     522:	68fb      	ldr	r3, [r7, #12]
     524:	681b      	ldr	r3, [r3, #0]
     526:	1c5a      	adds	r2, r3, #1
     528:	68fb      	ldr	r3, [r7, #12]
     52a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     52c:	2300      	movs	r3, #0
}
     52e:	4618      	mov	r0, r3
     530:	3710      	adds	r7, #16
     532:	46bd      	mov	sp, r7
     534:	bd80      	pop	{r7, pc}
     536:	bf00      	nop
     538:	000080ac 	.word	0x000080ac

0000053c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
     53c:	b580      	push	{r7, lr}
     53e:	b084      	sub	sp, #16
     540:	af00      	add	r7, sp, #0
     542:	6078      	str	r0, [r7, #4]
     544:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
     546:	683b      	ldr	r3, [r7, #0]
     548:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
     54a:	210f      	movs	r1, #15
     54c:	6878      	ldr	r0, [r7, #4]
     54e:	f7ff ff9e 	bl	48e <_Unwind_GetGR>
     552:	4603      	mov	r3, r0
     554:	f023 0301 	bic.w	r3, r3, #1
     558:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	3b04      	subs	r3, #4
     55e:	4619      	mov	r1, r3
     560:	4806      	ldr	r0, [pc, #24]	; (57c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
     562:	f004 fabb 	bl	4adc <printf>
  (*depth)++;
     566:	68fb      	ldr	r3, [r7, #12]
     568:	681b      	ldr	r3, [r3, #0]
     56a:	1c5a      	adds	r2, r3, #1
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
     570:	2300      	movs	r3, #0
}
     572:	4618      	mov	r0, r3
     574:	3710      	adds	r7, #16
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop
     57c:	000080bc 	.word	0x000080bc

00000580 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
     580:	b580      	push	{r7, lr}
     582:	b084      	sub	sp, #16
     584:	af00      	add	r7, sp, #0
     586:	4603      	mov	r3, r0
     588:	6039      	str	r1, [r7, #0]
     58a:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
     58c:	2300      	movs	r3, #0
     58e:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
     590:	f107 030c 	add.w	r3, r7, #12
     594:	4619      	mov	r1, r3
     596:	481a      	ldr	r0, [pc, #104]	; (600 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
     598:	f007 fa54 	bl	7a44 <_Unwind_Backtrace>
    if (final_address)
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	683a      	ldr	r2, [r7, #0]
     5a6:	4619      	mov	r1, r3
     5a8:	4816      	ldr	r0, [pc, #88]	; (604 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
     5aa:	f004 fa97 	bl	4adc <printf>
    }

    if (show_make_command)
     5ae:	79fb      	ldrb	r3, [r7, #7]
     5b0:	2b00      	cmp	r3, #0
     5b2:	d020      	beq.n	5f6 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
     5b4:	4814      	ldr	r0, [pc, #80]	; (608 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
     5b6:	f004 fa91 	bl	4adc <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
     5ba:	4814      	ldr	r0, [pc, #80]	; (60c <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
     5bc:	f004 fa8e 	bl	4adc <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
     5c0:	2000      	movs	r0, #0
     5c2:	f7ff ff77 	bl	4b4 <sjsu::build::Stringify(sjsu::build::Target)>
     5c6:	4603      	mov	r3, r0
     5c8:	4619      	mov	r1, r3
     5ca:	4811      	ldr	r0, [pc, #68]	; (610 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
     5cc:	f004 fa86 	bl	4adc <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
     5d0:	f107 030c 	add.w	r3, r7, #12
     5d4:	4619      	mov	r1, r3
     5d6:	480f      	ldr	r0, [pc, #60]	; (614 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
     5d8:	f007 fa34 	bl	7a44 <_Unwind_Backtrace>
      if (final_address)
     5dc:	683b      	ldr	r3, [r7, #0]
     5de:	2b00      	cmp	r3, #0
     5e0:	d003      	beq.n	5ea <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
     5e2:	6839      	ldr	r1, [r7, #0]
     5e4:	480c      	ldr	r0, [pc, #48]	; (618 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
     5e6:	f004 fa79 	bl	4adc <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
     5ea:	480c      	ldr	r0, [pc, #48]	; (61c <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
     5ec:	f004 fa76 	bl	4adc <printf>
      printf(
     5f0:	480b      	ldr	r0, [pc, #44]	; (620 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
     5f2:	f003 f92f 	bl	3854 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
     5f6:	bf00      	nop
     5f8:	3710      	adds	r7, #16
     5fa:	46bd      	mov	sp, r7
     5fc:	bd80      	pop	{r7, pc}
     5fe:	bf00      	nop
     600:	000004f5 	.word	0x000004f5
     604:	000080c4 	.word	0x000080c4
     608:	000080d0 	.word	0x000080d0
     60c:	00008108 	.word	0x00008108
     610:	00008114 	.word	0x00008114
     614:	0000053d 	.word	0x0000053d
     618:	00008130 	.word	0x00008130
     61c:	00008138 	.word	0x00008138
     620:	00008140 	.word	0x00008140

00000624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     624:	b490      	push	{r4, r7}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     62e:	683b      	ldr	r3, [r7, #0]
     630:	e9d3 3400 	ldrd	r3, r4, [r3]
     634:	687a      	ldr	r2, [r7, #4]
     636:	e9c2 3400 	strd	r3, r4, [r2]
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bc90      	pop	{r4, r7}
     644:	4770      	bx	lr
     646:	Address 0x0000000000000646 is out of bounds.


00000648 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	4903      	ldr	r1, [pc, #12]	; (664 <sjsu::DefaultUptime()+0x1c>)
     656:	4618      	mov	r0, r3
     658:	f001 fc60 	bl	1f1c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     65c:	6878      	ldr	r0, [r7, #4]
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	10000118 	.word	0x10000118

00000668 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     668:	b480      	push	{r7}
     66a:	b083      	sub	sp, #12
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     670:	687b      	ldr	r3, [r7, #4]
     672:	f003 021f 	and.w	r2, r3, #31
     676:	4907      	ldr	r1, [pc, #28]	; (694 <NVIC_DisableIRQ+0x2c>)
     678:	687b      	ldr	r3, [r7, #4]
     67a:	095b      	lsrs	r3, r3, #5
     67c:	2001      	movs	r0, #1
     67e:	fa00 f202 	lsl.w	r2, r0, r2
     682:	3320      	adds	r3, #32
     684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     688:	bf00      	nop
     68a:	370c      	adds	r7, #12
     68c:	46bd      	mov	sp, r7
     68e:	f85d 7b04 	ldr.w	r7, [sp], #4
     692:	4770      	bx	lr
     694:	e000e100 	.word	0xe000e100

00000698 <sjsu::Pin::GetPort() const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	791b      	ldrb	r3, [r3, #4]
  }
     6a4:	4618      	mov	r0, r3
     6a6:	370c      	adds	r7, #12
     6a8:	46bd      	mov	sp, r7
     6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ae:	4770      	bx	lr

000006b0 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     6b0:	b480      	push	{r7}
     6b2:	b083      	sub	sp, #12
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	795b      	ldrb	r3, [r3, #5]
  }
     6bc:	4618      	mov	r0, r3
     6be:	370c      	adds	r7, #12
     6c0:	46bd      	mov	sp, r7
     6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c6:	4770      	bx	lr

000006c8 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     6c8:	b580      	push	{r7, lr}
     6ca:	b082      	sub	sp, #8
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
     6d0:	460b      	mov	r3, r1
     6d2:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     6d4:	4b08      	ldr	r3, [pc, #32]	; (6f8 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     6d6:	78f9      	ldrb	r1, [r7, #3]
     6d8:	781a      	ldrb	r2, [r3, #0]
     6da:	785b      	ldrb	r3, [r3, #1]
     6dc:	021b      	lsls	r3, r3, #8
     6de:	431a      	orrs	r2, r3
     6e0:	2300      	movs	r3, #0
     6e2:	f362 030f 	bfi	r3, r2, #0, #16
     6e6:	461a      	mov	r2, r3
     6e8:	6878      	ldr	r0, [r7, #4]
     6ea:	f000 f859 	bl	7a0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     6ee:	bf00      	nop
     6f0:	3708      	adds	r7, #8
     6f2:	46bd      	mov	sp, r7
     6f4:	bd80      	pop	{r7, pc}
     6f6:	bf00      	nop
     6f8:	00008614 	.word	0x00008614

000006fc <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]
     704:	460b      	mov	r3, r1
     706:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     708:	4b08      	ldr	r3, [pc, #32]	; (72c <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     70a:	78f9      	ldrb	r1, [r7, #3]
     70c:	781a      	ldrb	r2, [r3, #0]
     70e:	785b      	ldrb	r3, [r3, #1]
     710:	021b      	lsls	r3, r3, #8
     712:	431a      	orrs	r2, r3
     714:	2300      	movs	r3, #0
     716:	f362 030f 	bfi	r3, r2, #0, #16
     71a:	461a      	mov	r2, r3
     71c:	6878      	ldr	r0, [r7, #4]
     71e:	f000 f83f 	bl	7a0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     722:	bf00      	nop
     724:	3708      	adds	r7, #8
     726:	46bd      	mov	sp, r7
     728:	bd80      	pop	{r7, pc}
     72a:	bf00      	nop
     72c:	00008618 	.word	0x00008618

00000730 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     730:	b580      	push	{r7, lr}
     732:	b082      	sub	sp, #8
     734:	af00      	add	r7, sp, #0
     736:	6078      	str	r0, [r7, #4]
     738:	460b      	mov	r3, r1
     73a:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     73c:	78fb      	ldrb	r3, [r7, #3]
     73e:	f083 0301 	eor.w	r3, r3, #1
     742:	b2db      	uxtb	r3, r3
     744:	4619      	mov	r1, r3
     746:	4b08      	ldr	r3, [pc, #32]	; (768 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     748:	781a      	ldrb	r2, [r3, #0]
     74a:	785b      	ldrb	r3, [r3, #1]
     74c:	021b      	lsls	r3, r3, #8
     74e:	431a      	orrs	r2, r3
     750:	2300      	movs	r3, #0
     752:	f362 030f 	bfi	r3, r2, #0, #16
     756:	461a      	mov	r2, r3
     758:	6878      	ldr	r0, [r7, #4]
     75a:	f000 f821 	bl	7a0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     75e:	bf00      	nop
     760:	3708      	adds	r7, #8
     762:	46bd      	mov	sp, r7
     764:	bd80      	pop	{r7, pc}
     766:	bf00      	nop
     768:	0000861c 	.word	0x0000861c

0000076c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
     774:	460b      	mov	r3, r1
     776:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     778:	78f9      	ldrb	r1, [r7, #3]
     77a:	4b08      	ldr	r3, [pc, #32]	; (79c <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     77c:	781a      	ldrb	r2, [r3, #0]
     77e:	785b      	ldrb	r3, [r3, #1]
     780:	021b      	lsls	r3, r3, #8
     782:	431a      	orrs	r2, r3
     784:	2300      	movs	r3, #0
     786:	f362 030f 	bfi	r3, r2, #0, #16
     78a:	461a      	mov	r2, r3
     78c:	6878      	ldr	r0, [r7, #4]
     78e:	f000 f807 	bl	7a0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     792:	bf00      	nop
     794:	3708      	adds	r7, #8
     796:	46bd      	mov	sp, r7
     798:	bd80      	pop	{r7, pc}
     79a:	bf00      	nop
     79c:	00008620 	.word	0x00008620

000007a0 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7a2:	b087      	sub	sp, #28
     7a4:	af00      	add	r7, sp, #0
     7a6:	60f8      	str	r0, [r7, #12]
     7a8:	460b      	mov	r3, r1
     7aa:	80ba      	strh	r2, [r7, #4]
     7ac:	72fb      	strb	r3, [r7, #11]
     7ae:	68fb      	ldr	r3, [r7, #12]
     7b0:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     7b2:	4b19      	ldr	r3, [pc, #100]	; (818 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     7b4:	681c      	ldr	r4, [r3, #0]
     7b6:	693b      	ldr	r3, [r7, #16]
     7b8:	4618      	mov	r0, r3
     7ba:	f7ff ff6d 	bl	698 <sjsu::Pin::GetPort() const>
     7be:	4603      	mov	r3, r0
     7c0:	461d      	mov	r5, r3
     7c2:	693b      	ldr	r3, [r7, #16]
     7c4:	4618      	mov	r0, r3
     7c6:	f7ff ff73 	bl	6b0 <sjsu::Pin::GetPin() const>
     7ca:	4603      	mov	r3, r0
     7cc:	461a      	mov	r2, r3
     7ce:	016b      	lsls	r3, r5, #5
     7d0:	4413      	add	r3, r2
     7d2:	009b      	lsls	r3, r3, #2
     7d4:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     7d6:	681b      	ldr	r3, [r3, #0]
     7d8:	7af9      	ldrb	r1, [r7, #11]
     7da:	687a      	ldr	r2, [r7, #4]
     7dc:	4618      	mov	r0, r3
     7de:	f001 fbfc 	bl	1fda <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     7e2:	4605      	mov	r5, r0
     7e4:	68fb      	ldr	r3, [r7, #12]
     7e6:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     7e8:	4b0b      	ldr	r3, [pc, #44]	; (818 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     7ea:	681c      	ldr	r4, [r3, #0]
     7ec:	697b      	ldr	r3, [r7, #20]
     7ee:	4618      	mov	r0, r3
     7f0:	f7ff ff52 	bl	698 <sjsu::Pin::GetPort() const>
     7f4:	4603      	mov	r3, r0
     7f6:	461e      	mov	r6, r3
     7f8:	697b      	ldr	r3, [r7, #20]
     7fa:	4618      	mov	r0, r3
     7fc:	f7ff ff58 	bl	6b0 <sjsu::Pin::GetPin() const>
     800:	4603      	mov	r3, r0
     802:	461a      	mov	r2, r3
     804:	0173      	lsls	r3, r6, #5
     806:	4413      	add	r3, r2
     808:	009b      	lsls	r3, r3, #2
     80a:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     80c:	601d      	str	r5, [r3, #0]
  }
     80e:	bf00      	nop
     810:	371c      	adds	r7, #28
     812:	46bd      	mov	sp, r7
     814:	bdf0      	pop	{r4, r5, r6, r7, pc}
     816:	bf00      	nop
     818:	10000120 	.word	0x10000120

0000081c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     81c:	b580      	push	{r7, lr}
     81e:	b086      	sub	sp, #24
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
     824:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     826:	687b      	ldr	r3, [r7, #4]
     828:	681b      	ldr	r3, [r3, #0]
     82a:	3308      	adds	r3, #8
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	6839      	ldr	r1, [r7, #0]
     830:	6878      	ldr	r0, [r7, #4]
     832:	4798      	blx	r3
     834:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     836:	f04f 0300 	mov.w	r3, #0
     83a:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     83c:	697b      	ldr	r3, [r7, #20]
     83e:	2b00      	cmp	r3, #0
     840:	d00f      	beq.n	862 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     842:	687b      	ldr	r3, [r7, #4]
     844:	681b      	ldr	r3, [r3, #0]
     846:	330c      	adds	r3, #12
     848:	681b      	ldr	r3, [r3, #0]
     84a:	6878      	ldr	r0, [r7, #4]
     84c:	4798      	blx	r3
     84e:	4603      	mov	r3, r0
     850:	613b      	str	r3, [r7, #16]
     852:	f107 0310 	add.w	r3, r7, #16
     856:	6979      	ldr	r1, [r7, #20]
     858:	4618      	mov	r0, r3
     85a:	f001 fbd1 	bl	2000 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     85e:	4603      	mov	r3, r0
     860:	60fb      	str	r3, [r7, #12]
    }
    return result;
     862:	68fb      	ldr	r3, [r7, #12]
  }
     864:	4618      	mov	r0, r3
     866:	3718      	adds	r7, #24
     868:	46bd      	mov	sp, r7
     86a:	bd80      	pop	{r7, pc}

0000086c <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     86c:	b580      	push	{r7, lr}
     86e:	b086      	sub	sp, #24
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     874:	6878      	ldr	r0, [r7, #4]
     876:	f000 f807 	bl	888 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     87a:	eef0 7a40 	vmov.f32	s15, s0
	}
     87e:	eeb0 0a67 	vmov.f32	s0, s15
     882:	3718      	adds	r7, #24
     884:	46bd      	mov	sp, r7
     886:	bd80      	pop	{r7, pc}

00000888 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
     888:	b480      	push	{r7}
     88a:	b085      	sub	sp, #20
     88c:	af00      	add	r7, sp, #0
     88e:	60f8      	str	r0, [r7, #12]
     890:	7239      	strb	r1, [r7, #8]
     892:	713a      	strb	r2, [r7, #4]
     894:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
     896:	68fb      	ldr	r3, [r7, #12]
     898:	edd3 7a00 	vldr	s15, [r3]
     89c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8b4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
     8a0:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
     8a4:	eeb0 0a67 	vmov.f32	s0, s15
     8a8:	3714      	adds	r7, #20
     8aa:	46bd      	mov	sp, r7
     8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b0:	4770      	bx	lr
     8b2:	bf00      	nop
     8b4:	49742400 	.word	0x49742400

000008b8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
     8b8:	b580      	push	{r7, lr}
     8ba:	b084      	sub	sp, #16
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
     8c2:	2100      	movs	r1, #0
     8c4:	6878      	ldr	r0, [r7, #4]
     8c6:	f000 f8e3 	bl	a90 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
     8ca:	f04f 000c 	mov.w	r0, #12
     8ce:	f04f 0100 	mov.w	r1, #0
     8d2:	f7ff fd54 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     8d6:	4603      	mov	r3, r0
     8d8:	60bb      	str	r3, [r7, #8]
     8da:	f107 0208 	add.w	r2, r7, #8
     8de:	463b      	mov	r3, r7
     8e0:	4611      	mov	r1, r2
     8e2:	4618      	mov	r0, r3
     8e4:	f001 fbaa 	bl	203c <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     8e8:	4603      	mov	r3, r0
     8ea:	2b00      	cmp	r3, #0
     8ec:	d00f      	beq.n	90e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
     8ee:	4b16      	ldr	r3, [pc, #88]	; (948 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
     8f0:	683a      	ldr	r2, [r7, #0]
     8f2:	6819      	ldr	r1, [r3, #0]
     8f4:	6878      	ldr	r0, [r7, #4]
     8f6:	f000 fadf 	bl	eb8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
     8fa:	2101      	movs	r1, #1
     8fc:	6878      	ldr	r0, [r7, #4]
     8fe:	f000 f8eb 	bl	ad8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
     902:	463b      	mov	r3, r7
     904:	4619      	mov	r1, r3
     906:	4811      	ldr	r0, [pc, #68]	; (94c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     908:	f001 fbb6 	bl	2078 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     90c:	e007      	b.n	91e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
     90e:	2100      	movs	r1, #0
     910:	6878      	ldr	r0, [r7, #4]
     912:	f000 f8e1 	bl	ad8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
     916:	490e      	ldr	r1, [pc, #56]	; (950 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
     918:	480c      	ldr	r0, [pc, #48]	; (94c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
     91a:	f001 fbad 	bl	2078 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
     91e:	2101      	movs	r1, #1
     920:	6878      	ldr	r0, [r7, #4]
     922:	f000 fb2d 	bl	f80 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
     926:	23ff      	movs	r3, #255	; 0xff
     928:	733b      	strb	r3, [r7, #12]
     92a:	f107 030c 	add.w	r3, r7, #12
     92e:	2201      	movs	r2, #1
     930:	4619      	mov	r1, r3
     932:	6878      	ldr	r0, [r7, #4]
     934:	f000 f80e 	bl	954 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
     938:	2100      	movs	r1, #0
     93a:	6878      	ldr	r0, [r7, #4]
     93c:	f000 fb5e 	bl	ffc <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
     940:	bf00      	nop
     942:	3710      	adds	r7, #16
     944:	46bd      	mov	sp, r7
     946:	bd80      	pop	{r7, pc}
     948:	00008624 	.word	0x00008624
     94c:	10000004 	.word	0x10000004
     950:	0000862c 	.word	0x0000862c

00000954 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
     954:	b580      	push	{r7, lr}
     956:	b084      	sub	sp, #16
     958:	af00      	add	r7, sp, #0
     95a:	60f8      	str	r0, [r7, #12]
     95c:	60b9      	str	r1, [r7, #8]
     95e:	4613      	mov	r3, r2
     960:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
     962:	79fb      	ldrb	r3, [r7, #7]
     964:	2b04      	cmp	r3, #4
     966:	d90d      	bls.n	984 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
     968:	23b2      	movs	r3, #178	; 0xb2
     96a:	4a0b      	ldr	r2, [pc, #44]	; (998 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
     96c:	490b      	ldr	r1, [pc, #44]	; (99c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
     96e:	480c      	ldr	r0, [pc, #48]	; (9a0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
     970:	f004 f8b4 	bl	4adc <printf>
     974:	480b      	ldr	r0, [pc, #44]	; (9a4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
     976:	f002 ff6d 	bl	3854 <puts>
     97a:	2100      	movs	r1, #0
     97c:	2001      	movs	r0, #1
     97e:	f7ff fdff 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     982:	e7fe      	b.n	982 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
     984:	4b08      	ldr	r3, [pc, #32]	; (9a8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
     986:	681b      	ldr	r3, [r3, #0]
     988:	79fa      	ldrb	r2, [r7, #7]
     98a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
     98e:	bf00      	nop
     990:	3710      	adds	r7, #16
     992:	46bd      	mov	sp, r7
     994:	bd80      	pop	{r7, pc}
     996:	bf00      	nop
     998:	0000880c 	.word	0x0000880c
     99c:	00008648 	.word	0x00008648
     9a0:	00008194 	.word	0x00008194
     9a4:	00008234 	.word	0x00008234
     9a8:	10000124 	.word	0x10000124

000009ac <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
     9ac:	b480      	push	{r7}
     9ae:	b083      	sub	sp, #12
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
     9b4:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
     9b6:	4b05      	ldr	r3, [pc, #20]	; (9cc <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
     9b8:	681b      	ldr	r3, [r3, #0]
     9ba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
     9be:	4618      	mov	r0, r3
     9c0:	370c      	adds	r7, #12
     9c2:	46bd      	mov	sp, r7
     9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop
     9cc:	10000124 	.word	0x10000124

000009d0 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
     9d0:	b480      	push	{r7}
     9d2:	b083      	sub	sp, #12
     9d4:	af00      	add	r7, sp, #0
     9d6:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
     9d8:	4b03      	ldr	r3, [pc, #12]	; (9e8 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
     9da:	681b      	ldr	r3, [r3, #0]
  }
     9dc:	4618      	mov	r0, r3
     9de:	370c      	adds	r7, #12
     9e0:	46bd      	mov	sp, r7
     9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e6:	4770      	bx	lr
     9e8:	10000004 	.word	0x10000004

000009ec <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
     9ec:	b480      	push	{r7}
     9ee:	b085      	sub	sp, #20
     9f0:	af00      	add	r7, sp, #0
     9f2:	6078      	str	r0, [r7, #4]
     9f4:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
     9f6:	4b0b      	ldr	r3, [pc, #44]	; (a24 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     9fe:	683a      	ldr	r2, [r7, #0]
     a00:	7812      	ldrb	r2, [r2, #0]
     a02:	4611      	mov	r1, r2
     a04:	2201      	movs	r2, #1
     a06:	408a      	lsls	r2, r1
     a08:	4013      	ands	r3, r2
     a0a:	2b00      	cmp	r3, #0
     a0c:	bf14      	ite	ne
     a0e:	2301      	movne	r3, #1
     a10:	2300      	moveq	r3, #0
     a12:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
     a14:	7bfb      	ldrb	r3, [r7, #15]
  }
     a16:	4618      	mov	r0, r3
     a18:	3714      	adds	r7, #20
     a1a:	46bd      	mov	sp, r7
     a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a20:	4770      	bx	lr
     a22:	bf00      	nop
     a24:	10000124 	.word	0x10000124

00000a28 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
     a28:	b590      	push	{r4, r7, lr}
     a2a:	b083      	sub	sp, #12
     a2c:	af00      	add	r7, sp, #0
     a2e:	6078      	str	r0, [r7, #4]
     a30:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     a32:	4b09      	ldr	r3, [pc, #36]	; (a58 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     a3a:	683b      	ldr	r3, [r7, #0]
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	4619      	mov	r1, r3
    system_controller->PCONP =
     a40:	4b05      	ldr	r3, [pc, #20]	; (a58 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     a42:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
     a44:	4610      	mov	r0, r2
     a46:	f001 fb2a 	bl	209e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     a4a:	4603      	mov	r3, r0
    system_controller->PCONP =
     a4c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     a50:	bf00      	nop
     a52:	370c      	adds	r7, #12
     a54:	46bd      	mov	sp, r7
     a56:	bd90      	pop	{r4, r7, pc}
     a58:	10000124 	.word	0x10000124

00000a5c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
     a5c:	b590      	push	{r4, r7, lr}
     a5e:	b083      	sub	sp, #12
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
     a64:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     a66:	4b09      	ldr	r3, [pc, #36]	; (a8c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     a68:	681b      	ldr	r3, [r3, #0]
     a6a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     a6e:	683b      	ldr	r3, [r7, #0]
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	4619      	mov	r1, r3
    system_controller->PCONP =
     a74:	4b05      	ldr	r3, [pc, #20]	; (a8c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
     a76:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
     a78:	4610      	mov	r0, r2
     a7a:	f001 fb22 	bl	20c2 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     a7e:	4603      	mov	r3, r0
    system_controller->PCONP =
     a80:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
     a84:	bf00      	nop
     a86:	370c      	adds	r7, #12
     a88:	46bd      	mov	sp, r7
     a8a:	bd90      	pop	{r4, r7, pc}
     a8c:	10000124 	.word	0x10000124

00000a90 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
     a90:	b590      	push	{r4, r7, lr}
     a92:	b083      	sub	sp, #12
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
     a98:	460b      	mov	r3, r1
     a9a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
     a9c:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     aa4:	8879      	ldrh	r1, [r7, #2]
     aa6:	4b0a      	ldr	r3, [pc, #40]	; (ad0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
     aa8:	681c      	ldr	r4, [r3, #0]
     aaa:	4b0a      	ldr	r3, [pc, #40]	; (ad4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
     aac:	781a      	ldrb	r2, [r3, #0]
     aae:	785b      	ldrb	r3, [r3, #1]
     ab0:	021b      	lsls	r3, r3, #8
     ab2:	431a      	orrs	r2, r3
     ab4:	2300      	movs	r3, #0
     ab6:	f362 030f 	bfi	r3, r2, #0, #16
     aba:	461a      	mov	r2, r3
     abc:	f001 fb14 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     ac0:	4603      	mov	r3, r0
     ac2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
     ac6:	bf00      	nop
     ac8:	370c      	adds	r7, #12
     aca:	46bd      	mov	sp, r7
     acc:	bd90      	pop	{r4, r7, pc}
     ace:	bf00      	nop
     ad0:	10000124 	.word	0x10000124
     ad4:	00008630 	.word	0x00008630

00000ad8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
     ad8:	b590      	push	{r4, r7, lr}
     ada:	b083      	sub	sp, #12
     adc:	af00      	add	r7, sp, #0
     ade:	6078      	str	r0, [r7, #4]
     ae0:	460b      	mov	r3, r1
     ae2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
     ae4:	4b0c      	ldr	r3, [pc, #48]	; (b18 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
     aec:	8879      	ldrh	r1, [r7, #2]
     aee:	4b0a      	ldr	r3, [pc, #40]	; (b18 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
     af0:	681c      	ldr	r4, [r3, #0]
     af2:	4b0a      	ldr	r3, [pc, #40]	; (b1c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
     af4:	781a      	ldrb	r2, [r3, #0]
     af6:	785b      	ldrb	r3, [r3, #1]
     af8:	021b      	lsls	r3, r3, #8
     afa:	431a      	orrs	r2, r3
     afc:	2300      	movs	r3, #0
     afe:	f362 030f 	bfi	r3, r2, #0, #16
     b02:	461a      	mov	r2, r3
     b04:	f001 faf0 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     b08:	4603      	mov	r3, r0
     b0a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
     b0e:	bf00      	nop
     b10:	370c      	adds	r7, #12
     b12:	46bd      	mov	sp, r7
     b14:	bd90      	pop	{r4, r7, pc}
     b16:	bf00      	nop
     b18:	10000124 	.word	0x10000124
     b1c:	0000863c 	.word	0x0000863c

00000b20 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
     b20:	b590      	push	{r4, r7, lr}
     b22:	b083      	sub	sp, #12
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
     b28:	460b      	mov	r3, r1
     b2a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
     b2c:	4b0c      	ldr	r3, [pc, #48]	; (b60 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     b2e:	681b      	ldr	r3, [r3, #0]
     b30:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
     b34:	8879      	ldrh	r1, [r7, #2]
     b36:	4b0a      	ldr	r3, [pc, #40]	; (b60 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
     b38:	681c      	ldr	r4, [r3, #0]
     b3a:	4b0a      	ldr	r3, [pc, #40]	; (b64 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
     b3c:	781a      	ldrb	r2, [r3, #0]
     b3e:	785b      	ldrb	r3, [r3, #1]
     b40:	021b      	lsls	r3, r3, #8
     b42:	431a      	orrs	r2, r3
     b44:	2300      	movs	r3, #0
     b46:	f362 030f 	bfi	r3, r2, #0, #16
     b4a:	461a      	mov	r2, r3
     b4c:	f001 facc 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     b50:	4603      	mov	r3, r0
     b52:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
     b56:	bf00      	nop
     b58:	370c      	adds	r7, #12
     b5a:	46bd      	mov	sp, r7
     b5c:	bd90      	pop	{r4, r7, pc}
     b5e:	bf00      	nop
     b60:	10000124 	.word	0x10000124
     b64:	00008640 	.word	0x00008640

00000b68 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
     b68:	b590      	push	{r4, r7, lr}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
     b70:	460b      	mov	r3, r1
     b72:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
     b74:	4b0c      	ldr	r3, [pc, #48]	; (ba8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
     b7c:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
     b7e:	4b0a      	ldr	r3, [pc, #40]	; (ba8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
     b80:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
     b82:	4b0a      	ldr	r3, [pc, #40]	; (bac <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
     b84:	781a      	ldrb	r2, [r3, #0]
     b86:	785b      	ldrb	r3, [r3, #1]
     b88:	021b      	lsls	r3, r3, #8
     b8a:	431a      	orrs	r2, r3
     b8c:	2300      	movs	r3, #0
     b8e:	f362 030f 	bfi	r3, r2, #0, #16
     b92:	461a      	mov	r2, r3
     b94:	f001 faa8 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
     b98:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
     b9a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
     b9e:	bf00      	nop
     ba0:	370c      	adds	r7, #12
     ba2:	46bd      	mov	sp, r7
     ba4:	bd90      	pop	{r4, r7, pc}
     ba6:	bf00      	nop
     ba8:	10000124 	.word	0x10000124
     bac:	00008644 	.word	0x00008644

00000bb0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
     bb0:	b580      	push	{r7, lr}
     bb2:	ed2d 8b02 	vpush	{d8}
     bb6:	b082      	sub	sp, #8
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
     bbc:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	ed93 8a00 	vldr	s16, [r3]
     bc4:	683b      	ldr	r3, [r7, #0]
     bc6:	4618      	mov	r0, r3
     bc8:	f7ff fc10 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     bcc:	eef0 7a40 	vmov.f32	s15, s0
     bd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
     bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bd8:	bf4c      	ite	mi
     bda:	2301      	movmi	r3, #1
     bdc:	2300      	movpl	r3, #0
     bde:	b2db      	uxtb	r3, r3
		}
     be0:	4618      	mov	r0, r3
     be2:	3708      	adds	r7, #8
     be4:	46bd      	mov	sp, r7
     be6:	ecbd 8b02 	vpop	{d8}
     bea:	bd80      	pop	{r7, pc}

00000bec <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
     bec:	b580      	push	{r7, lr}
     bee:	b082      	sub	sp, #8
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
     bf4:	6878      	ldr	r0, [r7, #4]
     bf6:	f000 f805 	bl	c04 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     bfa:	4603      	mov	r3, r0
		}
     bfc:	4618      	mov	r0, r3
     bfe:	3708      	adds	r7, #8
     c00:	46bd      	mov	sp, r7
     c02:	bd80      	pop	{r7, pc}

00000c04 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     c04:	b580      	push	{r7, lr}
     c06:	b082      	sub	sp, #8
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	4618      	mov	r0, r3
     c10:	f000 f80a 	bl	c28 <units::linear_scale<float>::operator()() const>
     c14:	eef0 7a40 	vmov.f32	s15, s0
     c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     c1c:	ee17 3a90 	vmov	r3, s15
		}
     c20:	4618      	mov	r0, r3
     c22:	3708      	adds	r7, #8
     c24:	46bd      	mov	sp, r7
     c26:	bd80      	pop	{r7, pc}

00000c28 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
     c28:	b480      	push	{r7}
     c2a:	b083      	sub	sp, #12
     c2c:	af00      	add	r7, sp, #0
     c2e:	6078      	str	r0, [r7, #4]
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	ee07 3a90 	vmov	s15, r3
     c38:	eeb0 0a67 	vmov.f32	s0, s15
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
     c46:	b580      	push	{r7, lr}
     c48:	ed2d 8b02 	vpush	{d8}
     c4c:	b084      	sub	sp, #16
     c4e:	af00      	add	r7, sp, #0
     c50:	6078      	str	r0, [r7, #4]
     c52:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	4618      	mov	r0, r3
     c58:	f7ff ffe6 	bl	c28 <units::linear_scale<float>::operator()() const>
     c5c:	eeb0 8a40 	vmov.f32	s16, s0
     c60:	683b      	ldr	r3, [r7, #0]
     c62:	4618      	mov	r0, r3
     c64:	f7ff ffe0 	bl	c28 <units::linear_scale<float>::operator()() const>
     c68:	eef0 7a40 	vmov.f32	s15, s0
     c6c:	edc7 7a03 	vstr	s15, [r7, #12]
     c70:	f107 030c 	add.w	r3, r7, #12
     c74:	4618      	mov	r0, r3
     c76:	f7ff fbb9 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     c7a:	eeb0 7a40 	vmov.f32	s14, s0
     c7e:	eec8 7a07 	vdiv.f32	s15, s16, s14
     c82:	f107 0308 	add.w	r3, r7, #8
     c86:	eeb0 0a67 	vmov.f32	s0, s15
     c8a:	4618      	mov	r0, r3
     c8c:	f000 f807 	bl	c9e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     c90:	68bb      	ldr	r3, [r7, #8]
	}
     c92:	4618      	mov	r0, r3
     c94:	3710      	adds	r7, #16
     c96:	46bd      	mov	sp, r7
     c98:	ecbd 8b02 	vpop	{d8}
     c9c:	bd80      	pop	{r7, pc}

00000c9e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     c9e:	b580      	push	{r7, lr}
     ca0:	b082      	sub	sp, #8
     ca2:	af00      	add	r7, sp, #0
     ca4:	6078      	str	r0, [r7, #4]
     ca6:	ed87 0a00 	vstr	s0, [r7]
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	463a      	mov	r2, r7
     cae:	4611      	mov	r1, r2
     cb0:	4618      	mov	r0, r3
     cb2:	f7ff fb8b 	bl	3cc <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	4618      	mov	r0, r3
     cba:	3708      	adds	r7, #8
     cbc:	46bd      	mov	sp, r7
     cbe:	bd80      	pop	{r7, pc}

00000cc0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
     cc0:	b580      	push	{r7, lr}
     cc2:	b084      	sub	sp, #16
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	4618      	mov	r0, r3
     cce:	f7ff ffab 	bl	c28 <units::linear_scale<float>::operator()() const>
     cd2:	eeb0 7a40 	vmov.f32	s14, s0
     cd6:	683b      	ldr	r3, [r7, #0]
     cd8:	ee07 3a90 	vmov	s15, r3
     cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
     ce4:	f107 030c 	add.w	r3, r7, #12
     ce8:	eeb0 0a67 	vmov.f32	s0, s15
     cec:	4618      	mov	r0, r3
     cee:	f7ff ffd6 	bl	c9e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     cf2:	68fb      	ldr	r3, [r7, #12]
	}
     cf4:	4618      	mov	r0, r3
     cf6:	3710      	adds	r7, #16
     cf8:	46bd      	mov	sp, r7
     cfa:	bd80      	pop	{r7, pc}

00000cfc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
     cfc:	b580      	push	{r7, lr}
     cfe:	b082      	sub	sp, #8
     d00:	af00      	add	r7, sp, #0
     d02:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	4618      	mov	r0, r3
     d08:	f7ff ff8e 	bl	c28 <units::linear_scale<float>::operator()() const>
     d0c:	eef0 7a40 	vmov.f32	s15, s0
     d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d14:	ee17 3a90 	vmov	r3, s15
     d18:	b29b      	uxth	r3, r3
		}
     d1a:	4618      	mov	r0, r3
     d1c:	3708      	adds	r7, #8
     d1e:	46bd      	mov	sp, r7
     d20:	bd80      	pop	{r7, pc}
     d22:	Address 0x0000000000000d22 is out of bounds.


00000d24 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
     d24:	b590      	push	{r4, r7, lr}
     d26:	b08d      	sub	sp, #52	; 0x34
     d28:	af00      	add	r7, sp, #0
     d2a:	60f8      	str	r0, [r7, #12]
     d2c:	60b9      	str	r1, [r7, #8]
     d2e:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
     d30:	f44f 70c0 	mov.w	r0, #384	; 0x180
     d34:	f04f 0100 	mov.w	r1, #0
     d38:	f7ff fb21 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     d3c:	4603      	mov	r3, r0
     d3e:	613b      	str	r3, [r7, #16]
     d40:	f107 0210 	add.w	r2, r7, #16
     d44:	1d3b      	adds	r3, r7, #4
     d46:	4611      	mov	r1, r2
     d48:	4618      	mov	r0, r3
     d4a:	f7ff ff31 	bl	bb0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     d4e:	4603      	mov	r3, r0
     d50:	f083 0301 	eor.w	r3, r3, #1
     d54:	b2db      	uxtb	r3, r3
     d56:	2b00      	cmp	r3, #0
     d58:	d114      	bne.n	d84 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
     d5a:	f04f 000c 	mov.w	r0, #12
     d5e:	f04f 0100 	mov.w	r1, #0
     d62:	f7ff fb0c 	bl	37e <units::literals::operator"" _MHz(unsigned long long)>
     d66:	4603      	mov	r3, r0
     d68:	617b      	str	r3, [r7, #20]
     d6a:	f107 0214 	add.w	r2, r7, #20
     d6e:	1d3b      	adds	r3, r7, #4
     d70:	4611      	mov	r1, r2
     d72:	4618      	mov	r0, r3
     d74:	f001 f962 	bl	203c <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
     d78:	4603      	mov	r3, r0
     d7a:	f083 0301 	eor.w	r3, r3, #1
     d7e:	b2db      	uxtb	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	d001      	beq.n	d88 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
     d84:	2301      	movs	r3, #1
     d86:	e000      	b.n	d8a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
     d88:	2300      	movs	r3, #0
     d8a:	2b00      	cmp	r3, #0
     d8c:	d00d      	beq.n	daa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
     d8e:	23f6      	movs	r3, #246	; 0xf6
     d90:	4a43      	ldr	r2, [pc, #268]	; (ea0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     d92:	4944      	ldr	r1, [pc, #272]	; (ea4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
     d94:	4844      	ldr	r0, [pc, #272]	; (ea8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
     d96:	f003 fea1 	bl	4adc <printf>
     d9a:	4844      	ldr	r0, [pc, #272]	; (eac <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     d9c:	f002 fd5a 	bl	3854 <puts>
     da0:	2100      	movs	r1, #0
     da2:	2001      	movs	r0, #1
     da4:	f7ff fbec 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     da8:	e7fe      	b.n	da8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
     daa:	2301      	movs	r3, #1
     dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
     db0:	1d3b      	adds	r3, r7, #4
     db2:	4618      	mov	r0, r3
     db4:	f7ff ff1a 	bl	bec <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     db8:	4604      	mov	r4, r0
     dba:	f107 0308 	add.w	r3, r7, #8
     dbe:	4618      	mov	r0, r3
     dc0:	f7ff ff14 	bl	bec <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
     dc4:	4603      	mov	r3, r0
     dc6:	fbb4 f2f3 	udiv	r2, r4, r3
     dca:	fb03 f302 	mul.w	r3, r3, r2
     dce:	1ae3      	subs	r3, r4, r3
     dd0:	2b00      	cmp	r3, #0
     dd2:	bf14      	ite	ne
     dd4:	2301      	movne	r3, #1
     dd6:	2300      	moveq	r3, #0
     dd8:	b2db      	uxtb	r3, r3
     dda:	2b00      	cmp	r3, #0
     ddc:	d017      	beq.n	e0e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
     dde:	f107 0208 	add.w	r2, r7, #8
     de2:	1d3b      	adds	r3, r7, #4
     de4:	4611      	mov	r1, r2
     de6:	4618      	mov	r0, r3
     de8:	f7ff ff2d 	bl	c46 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     dec:	4603      	mov	r3, r0
     dee:	61fb      	str	r3, [r7, #28]
     df0:	f107 031c 	add.w	r3, r7, #28
     df4:	2101      	movs	r1, #1
     df6:	4618      	mov	r0, r3
     df8:	f7ff ff62 	bl	cc0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
     dfc:	4603      	mov	r3, r0
     dfe:	61bb      	str	r3, [r7, #24]
      multiplier_value =
     e00:	f107 0318 	add.w	r3, r7, #24
     e04:	4618      	mov	r0, r3
     e06:	f001 f981 	bl	210c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     e0a:	62b8      	str	r0, [r7, #40]	; 0x28
     e0c:	e00e      	b.n	e2c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
     e0e:	f107 0208 	add.w	r2, r7, #8
     e12:	1d3b      	adds	r3, r7, #4
     e14:	4611      	mov	r1, r2
     e16:	4618      	mov	r0, r3
     e18:	f7ff ff15 	bl	c46 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
     e1c:	4603      	mov	r3, r0
     e1e:	623b      	str	r3, [r7, #32]
      multiplier_value =
     e20:	f107 0320 	add.w	r3, r7, #32
     e24:	4618      	mov	r0, r3
     e26:	f001 f971 	bl	210c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
     e2a:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
     e2c:	2301      	movs	r3, #1
     e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
     e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e34:	2b00      	cmp	r3, #0
     e36:	d02d      	beq.n	e94 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
     e38:	f107 0308 	add.w	r3, r7, #8
     e3c:	4618      	mov	r0, r3
     e3e:	f7ff ff5d 	bl	cfc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
     e42:	4603      	mov	r3, r0
     e44:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
     e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e48:	b29b      	uxth	r3, r3
     e4a:	fb12 f303 	smulbb	r3, r2, r3
     e4e:	b29b      	uxth	r3, r3
     e50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
     e52:	fb12 f303 	smulbb	r3, r2, r3
     e56:	b29b      	uxth	r3, r3
     e58:	005b      	lsls	r3, r3, #1
     e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
     e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
     e5e:	2b9b      	cmp	r3, #155	; 0x9b
     e60:	d903      	bls.n	e6a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
     e62:	2300      	movs	r3, #0
     e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     e68:	e7e2      	b.n	e30 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
     e6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     e6c:	005b      	lsls	r3, r3, #1
     e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
     e70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     e72:	2b07      	cmp	r3, #7
     e74:	d9dc      	bls.n	e30 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
     e76:	f44f 7389 	mov.w	r3, #274	; 0x112
     e7a:	4a09      	ldr	r2, [pc, #36]	; (ea0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
     e7c:	490c      	ldr	r1, [pc, #48]	; (eb0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
     e7e:	480d      	ldr	r0, [pc, #52]	; (eb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
     e80:	f003 fe2c 	bl	4adc <printf>
     e84:	4809      	ldr	r0, [pc, #36]	; (eac <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
     e86:	f002 fce5 	bl	3854 <puts>
     e8a:	2100      	movs	r1, #0
     e8c:	2001      	movs	r0, #1
     e8e:	f7ff fb77 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     e92:	e7fe      	b.n	e92 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
     e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
     e96:	4618      	mov	r0, r3
     e98:	3734      	adds	r7, #52	; 0x34
     e9a:	46bd      	mov	sp, r7
     e9c:	bd90      	pop	{r4, r7, pc}
     e9e:	bf00      	nop
     ea0:	00008890 	.word	0x00008890
     ea4:	00008660 	.word	0x00008660
     ea8:	0000824c 	.word	0x0000824c
     eac:	00008234 	.word	0x00008234
     eb0:	00008678 	.word	0x00008678
     eb4:	0000833c 	.word	0x0000833c

00000eb8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
     eb8:	b580      	push	{r7, lr}
     eba:	b086      	sub	sp, #24
     ebc:	af00      	add	r7, sp, #0
     ebe:	60f8      	str	r0, [r7, #12]
     ec0:	60b9      	str	r1, [r7, #8]
     ec2:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
     ec4:	2301      	movs	r3, #1
     ec6:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
     ec8:	687a      	ldr	r2, [r7, #4]
     eca:	68b9      	ldr	r1, [r7, #8]
     ecc:	68f8      	ldr	r0, [r7, #12]
     ece:	f7ff ff29 	bl	d24 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
     ed2:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
     ed4:	2100      	movs	r1, #0
     ed6:	68f8      	ldr	r0, [r7, #12]
     ed8:	f7ff fdda 	bl	a90 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
     edc:	2100      	movs	r1, #0
     ede:	68f8      	ldr	r0, [r7, #12]
     ee0:	f7ff fdfa 	bl	ad8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
     ee4:	2100      	movs	r1, #0
     ee6:	68f8      	ldr	r0, [r7, #12]
     ee8:	f7ff fe1a 	bl	b20 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
     eec:	2100      	movs	r1, #0
     eee:	68f8      	ldr	r0, [r7, #12]
     ef0:	f7ff fe3a 	bl	b68 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
     ef4:	4b21      	ldr	r3, [pc, #132]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
     efc:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
     f00:	693b      	ldr	r3, [r7, #16]
     f02:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
     f04:	4b1d      	ldr	r3, [pc, #116]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f06:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
     f08:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
     f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
     f0e:	4b1b      	ldr	r3, [pc, #108]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f10:	681b      	ldr	r3, [r3, #0]
     f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
     f16:	f023 0260 	bic.w	r2, r3, #96	; 0x60
     f1a:	8afb      	ldrh	r3, [r7, #22]
     f1c:	015b      	lsls	r3, r3, #5
     f1e:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
     f20:	4b16      	ldr	r3, [pc, #88]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f22:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
     f24:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
     f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
     f2a:	4b14      	ldr	r3, [pc, #80]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f2c:	681b      	ldr	r3, [r3, #0]
     f2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     f32:	4b12      	ldr	r3, [pc, #72]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	f042 0201 	orr.w	r2, r2, #1
     f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
     f3e:	4b0f      	ldr	r3, [pc, #60]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	22aa      	movs	r2, #170	; 0xaa
     f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
     f48:	4b0c      	ldr	r3, [pc, #48]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	2255      	movs	r2, #85	; 0x55
     f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
     f52:	4b0a      	ldr	r3, [pc, #40]	; (f7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     f5a:	210a      	movs	r1, #10
     f5c:	4618      	mov	r0, r3
     f5e:	f001 f8f0 	bl	2142 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     f62:	4603      	mov	r3, r0
     f64:	f083 0301 	eor.w	r3, r3, #1
     f68:	b2db      	uxtb	r3, r3
     f6a:	2b00      	cmp	r3, #0
     f6c:	d001      	beq.n	f72 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
     f6e:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
     f70:	e7ef      	b.n	f52 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
     f72:	bf00      	nop
     f74:	3718      	adds	r7, #24
     f76:	46bd      	mov	sp, r7
     f78:	bd80      	pop	{r7, pc}
     f7a:	bf00      	nop
     f7c:	10000124 	.word	0x10000124

00000f80 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
     f80:	b590      	push	{r4, r7, lr}
     f82:	b083      	sub	sp, #12
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	460b      	mov	r3, r1
     f8a:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
     f8c:	78fb      	ldrb	r3, [r7, #3]
     f8e:	2b1f      	cmp	r3, #31
     f90:	d90e      	bls.n	fb0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
     f92:	f44f 73a9 	mov.w	r3, #338	; 0x152
     f96:	4a13      	ldr	r2, [pc, #76]	; (fe4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
     f98:	4913      	ldr	r1, [pc, #76]	; (fe8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
     f9a:	4814      	ldr	r0, [pc, #80]	; (fec <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
     f9c:	f003 fd9e 	bl	4adc <printf>
     fa0:	4813      	ldr	r0, [pc, #76]	; (ff0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
     fa2:	f002 fc57 	bl	3854 <puts>
     fa6:	2100      	movs	r1, #0
     fa8:	2001      	movs	r0, #1
     faa:	f7ff fae9 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
     fae:	e7fe      	b.n	fae <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
     fb0:	4b10      	ldr	r3, [pc, #64]	; (ff4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
     fb2:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
     fb4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
     fb8:	4b0e      	ldr	r3, [pc, #56]	; (ff4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
     fba:	681c      	ldr	r4, [r3, #0]
     fbc:	4b0e      	ldr	r3, [pc, #56]	; (ff8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
     fbe:	78f9      	ldrb	r1, [r7, #3]
     fc0:	781a      	ldrb	r2, [r3, #0]
     fc2:	785b      	ldrb	r3, [r3, #1]
     fc4:	021b      	lsls	r3, r3, #8
     fc6:	431a      	orrs	r2, r3
     fc8:	2300      	movs	r3, #0
     fca:	f362 030f 	bfi	r3, r2, #0, #16
     fce:	461a      	mov	r2, r3
     fd0:	f001 f803 	bl	1fda <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     fd4:	4603      	mov	r3, r0
     fd6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
     fda:	bf00      	nop
     fdc:	370c      	adds	r7, #12
     fde:	46bd      	mov	sp, r7
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	bf00      	nop
     fe4:	0000890c 	.word	0x0000890c
     fe8:	00008690 	.word	0x00008690
     fec:	000083e4 	.word	0x000083e4
     ff0:	00008234 	.word	0x00008234
     ff4:	10000124 	.word	0x10000124
     ff8:	00008638 	.word	0x00008638

00000ffc <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
     ffc:	b590      	push	{r4, r7, lr}
     ffe:	b083      	sub	sp, #12
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	460b      	mov	r3, r1
    1006:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    1008:	4b0c      	ldr	r3, [pc, #48]	; (103c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    1010:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    1012:	4b0a      	ldr	r3, [pc, #40]	; (103c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    1014:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    1016:	4b0a      	ldr	r3, [pc, #40]	; (1040 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    1018:	781a      	ldrb	r2, [r3, #0]
    101a:	785b      	ldrb	r3, [r3, #1]
    101c:	021b      	lsls	r3, r3, #8
    101e:	431a      	orrs	r2, r3
    1020:	2300      	movs	r3, #0
    1022:	f362 030f 	bfi	r3, r2, #0, #16
    1026:	461a      	mov	r2, r3
    1028:	f001 f85e 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    102c:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    102e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    1032:	bf00      	nop
    1034:	370c      	adds	r7, #12
    1036:	46bd      	mov	sp, r7
    1038:	bd90      	pop	{r4, r7, pc}
    103a:	bf00      	nop
    103c:	10000124 	.word	0x10000124
    1040:	00008634 	.word	0x00008634

00001044 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    1044:	b480      	push	{r7}
    1046:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    1048:	4b02      	ldr	r3, [pc, #8]	; (1054 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    104a:	4618      	mov	r0, r3
    104c:	46bd      	mov	sp, r7
    104e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1052:	4770      	bx	lr
    1054:	10000008 	.word	0x10000008

00001058 <sjsu::Uart::Write(unsigned char) const>:
  // Utility Methods
  // ================

  /// Transmit just 1 byte
  /// @param byte - Write a single byte to the UART port.
  void Write(uint8_t byte) const
    1058:	b580      	push	{r7, lr}
    105a:	b082      	sub	sp, #8
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
    1060:	460b      	mov	r3, r1
    1062:	70fb      	strb	r3, [r7, #3]
  {
    Write(&byte, 1);
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	3308      	adds	r3, #8
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	1cf9      	adds	r1, r7, #3
    106e:	2201      	movs	r2, #1
    1070:	6878      	ldr	r0, [r7, #4]
    1072:	4798      	blx	r3
  }
    1074:	bf00      	nop
    1076:	3708      	adds	r7, #8
    1078:	46bd      	mov	sp, r7
    107a:	bd80      	pop	{r7, pc}

0000107c <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    107c:	b480      	push	{r7}
    107e:	b089      	sub	sp, #36	; 0x24
    1080:	af00      	add	r7, sp, #0
    1082:	6078      	str	r0, [r7, #4]
    1084:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	2200      	movs	r2, #0
    108c:	601a      	str	r2, [r3, #0]
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	2200      	movs	r2, #0
    1092:	605a      	str	r2, [r3, #4]
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	2201      	movs	r2, #1
    1098:	609a      	str	r2, [r3, #8]
  bool finished = false;
    109a:	2300      	movs	r3, #0
    109c:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    109e:	2300      	movs	r3, #0
    10a0:	61bb      	str	r3, [r7, #24]
    10a2:	69bb      	ldr	r3, [r7, #24]
    10a4:	2b0e      	cmp	r3, #14
    10a6:	dc4f      	bgt.n	1148 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    10a8:	7ffb      	ldrb	r3, [r7, #31]
    10aa:	2b00      	cmp	r3, #0
    10ac:	d14c      	bne.n	1148 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    10ae:	69bb      	ldr	r3, [r7, #24]
    10b0:	3301      	adds	r3, #1
    10b2:	617b      	str	r3, [r7, #20]
    10b4:	697b      	ldr	r3, [r7, #20]
    10b6:	2b0e      	cmp	r3, #14
    10b8:	dc42      	bgt.n	1140 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    10ba:	7ffb      	ldrb	r3, [r7, #31]
    10bc:	2b00      	cmp	r3, #0
    10be:	d13f      	bne.n	1140 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    10c0:	69bb      	ldr	r3, [r7, #24]
    10c2:	ee07 3a90 	vmov	s15, r3
    10c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    10ca:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    10ce:	697b      	ldr	r3, [r7, #20]
    10d0:	ee07 3a90 	vmov	s15, r3
    10d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    10d8:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    10dc:	edd7 6a04 	vldr	s13, [r7, #16]
    10e0:	ed97 7a03 	vldr	s14, [r7, #12]
    10e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
    10e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    10ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    10f0:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    10f4:	edd7 7a02 	vldr	s15, [r7, #8]
    10f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1158 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    10fc:	ee77 7a87 	vadd.f32	s15, s15, s14
    1100:	ed97 7a00 	vldr	s14, [r7]
    1104:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    110c:	d814      	bhi.n	1138 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    110e:	edd7 7a02 	vldr	s15, [r7, #8]
    1112:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1158 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    1116:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    111a:	ed97 7a00 	vldr	s14, [r7]
    111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1126:	db07      	blt.n	1138 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    1128:	69ba      	ldr	r2, [r7, #24]
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    112e:	697a      	ldr	r2, [r7, #20]
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	609a      	str	r2, [r3, #8]
        finished          = true;
    1134:	2301      	movs	r3, #1
    1136:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    1138:	697b      	ldr	r3, [r7, #20]
    113a:	3301      	adds	r3, #1
    113c:	617b      	str	r3, [r7, #20]
    113e:	e7b9      	b.n	10b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    1140:	69bb      	ldr	r3, [r7, #24]
    1142:	3301      	adds	r3, #1
    1144:	61bb      	str	r3, [r7, #24]
    1146:	e7ac      	b.n	10a2 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    1148:	bf00      	nop
}
    114a:	6878      	ldr	r0, [r7, #4]
    114c:	3724      	adds	r7, #36	; 0x24
    114e:	46bd      	mov	sp, r7
    1150:	f85d 7b04 	ldr.w	r7, [sp], #4
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	3d4ccccd 	.word	0x3d4ccccd

0000115c <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    115c:	b480      	push	{r7}
    115e:	b087      	sub	sp, #28
    1160:	af00      	add	r7, sp, #0
    1162:	ed87 0a03 	vstr	s0, [r7, #12]
    1166:	edc7 0a02 	vstr	s1, [r7, #8]
    116a:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	ee07 3a90 	vmov	s15, r3
    1172:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1176:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    117a:	edd7 7a03 	vldr	s15, [r7, #12]
    117e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1182:	ee27 7a87 	vmul.f32	s14, s15, s14
    1186:	edd7 7a02 	vldr	s15, [r7, #8]
    118a:	ee67 7a27 	vmul.f32	s15, s14, s15
    118e:	ed97 7a05 	vldr	s14, [r7, #20]
    1192:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1196:	eef0 7a66 	vmov.f32	s15, s13
}
    119a:	eeb0 0a67 	vmov.f32	s0, s15
    119e:	371c      	adds	r7, #28
    11a0:	46bd      	mov	sp, r7
    11a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    11a6:	4770      	bx	lr

000011a8 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    11a8:	b480      	push	{r7}
    11aa:	b087      	sub	sp, #28
    11ac:	af00      	add	r7, sp, #0
    11ae:	ed87 0a03 	vstr	s0, [r7, #12]
    11b2:	edc7 0a02 	vstr	s1, [r7, #8]
    11b6:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	ee07 3a90 	vmov	s15, r3
    11be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    11c2:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    11c6:	edd7 7a03 	vldr	s15, [r7, #12]
    11ca:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    11ce:	ee27 7a87 	vmul.f32	s14, s15, s14
    11d2:	edd7 7a02 	vldr	s15, [r7, #8]
    11d6:	ee67 7a27 	vmul.f32	s15, s14, s15
    11da:	ed97 7a05 	vldr	s14, [r7, #20]
    11de:	eec7 6a27 	vdiv.f32	s13, s14, s15
    11e2:	eef0 7a66 	vmov.f32	s15, s13
}
    11e6:	eeb0 0a67 	vmov.f32	s0, s15
    11ea:	371c      	adds	r7, #28
    11ec:	46bd      	mov	sp, r7
    11ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f2:	4770      	bx	lr

000011f4 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    11f4:	b480      	push	{r7}
    11f6:	b083      	sub	sp, #12
    11f8:	af00      	add	r7, sp, #0
    11fa:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    11fe:	edd7 7a01 	vldr	s15, [r7, #4]
    1202:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1206:	ee77 7a87 	vadd.f32	s15, s15, s14
    120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    120e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    1212:	eeb0 0a67 	vmov.f32	s0, s15
    1216:	370c      	adds	r7, #12
    1218:	46bd      	mov	sp, r7
    121a:	f85d 7b04 	ldr.w	r7, [sp], #4
    121e:	4770      	bx	lr

00001220 <sjsu::lpc40xx::uart::IsDecmial(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecmial(float value)
{
    1220:	b580      	push	{r7, lr}
    1222:	b086      	sub	sp, #24
    1224:	af00      	add	r7, sp, #0
    1226:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    122a:	2300      	movs	r3, #0
    122c:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    122e:	ed97 0a01 	vldr	s0, [r7, #4]
    1232:	f7ff ffdf 	bl	11f4 <sjsu::lpc40xx::uart::RoundFloat(float)>
    1236:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    123a:	ed97 7a01 	vldr	s14, [r7, #4]
    123e:	edd7 7a04 	vldr	s15, [r7, #16]
    1242:	ee77 7a67 	vsub.f32	s15, s14, s15
    1246:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    124a:	edd7 7a03 	vldr	s15, [r7, #12]
    124e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 127c <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    1252:	eef4 7ac7 	vcmpe.f32	s15, s14
    1256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    125a:	db0a      	blt.n	1272 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    125c:	edd7 7a03 	vldr	s15, [r7, #12]
    1260:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1280 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    1264:	eef4 7ac7 	vcmpe.f32	s15, s14
    1268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    126c:	d801      	bhi.n	1272 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    126e:	2301      	movs	r3, #1
    1270:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    1272:	7dfb      	ldrb	r3, [r7, #23]
}
    1274:	4618      	mov	r0, r3
    1276:	3718      	adds	r7, #24
    1278:	46bd      	mov	sp, r7
    127a:	bd80      	pop	{r7, pc}
    127c:	bd4ccccd 	.word	0xbd4ccccd
    1280:	3d4ccccd 	.word	0x3d4ccccd

00001284 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    1284:	b580      	push	{r7, lr}
    1286:	b082      	sub	sp, #8
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    128c:	6878      	ldr	r0, [r7, #4]
    128e:	f000 f805 	bl	129c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    1292:	4603      	mov	r3, r0
	}
    1294:	4618      	mov	r0, r3
    1296:	3708      	adds	r7, #8
    1298:	46bd      	mov	sp, r7
    129a:	bd80      	pop	{r7, pc}

0000129c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    129c:	b580      	push	{r7, lr}
    129e:	b082      	sub	sp, #8
    12a0:	af00      	add	r7, sp, #0
    12a2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	4618      	mov	r0, r3
    12a8:	f7ff fcbe 	bl	c28 <units::linear_scale<float>::operator()() const>
    12ac:	eef0 7a40 	vmov.f32	s15, s0
    12b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    12b4:	ee17 3a90 	vmov	r3, s15
		}
    12b8:	4618      	mov	r0, r3
    12ba:	3708      	adds	r7, #8
    12bc:	46bd      	mov	sp, r7
    12be:	bd80      	pop	{r7, pc}

000012c0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    12c0:	b590      	push	{r4, r7, lr}
    12c2:	b091      	sub	sp, #68	; 0x44
    12c4:	af00      	add	r7, sp, #0
    12c6:	61f8      	str	r0, [r7, #28]
    12c8:	61b9      	str	r1, [r7, #24]
    12ca:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    12cc:	f107 0314 	add.w	r3, r7, #20
    12d0:	4618      	mov	r0, r3
    12d2:	f7ff ffd7 	bl	1284 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    12d6:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    12d8:	2300      	movs	r3, #0
    12da:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    12dc:	69fb      	ldr	r3, [r7, #28]
    12de:	2200      	movs	r2, #0
    12e0:	601a      	str	r2, [r3, #0]
    12e2:	69fb      	ldr	r3, [r7, #28]
    12e4:	2200      	movs	r2, #0
    12e6:	605a      	str	r2, [r3, #4]
    12e8:	69fb      	ldr	r3, [r7, #28]
    12ea:	2201      	movs	r2, #1
    12ec:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    12ee:	69bb      	ldr	r3, [r7, #24]
    12f0:	ee07 3a90 	vmov	s15, r3
    12f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    12fc:	f04f 0300 	mov.w	r3, #0
    1300:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    1302:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    1306:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    1308:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    130c:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    130e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1312:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    1314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1316:	2b04      	cmp	r3, #4
    1318:	f000 80be 	beq.w	1498 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    131c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    131e:	2b03      	cmp	r3, #3
    1320:	f200 80b8 	bhi.w	1494 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    1324:	a201      	add	r2, pc, #4	; (adr r2, 132c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    1326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    132a:	bf00      	nop
    132c:	0000133d 	.word	0x0000133d
    1330:	00001397 	.word	0x00001397
    1334:	000013f7 	.word	0x000013f7
    1338:	00001467 	.word	0x00001467
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    133c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    133e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    1342:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    1346:	f7ff ff09 	bl	115c <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    134a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    134e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1356:	eef4 7ac7 	vcmpe.f32	s15, s14
    135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    135e:	d505      	bpl.n	136c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    1360:	69fb      	ldr	r3, [r7, #28]
    1362:	2200      	movs	r2, #0
    1364:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    1366:	2304      	movs	r3, #4
    1368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    136a:	e094      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    136c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    1370:	f7ff ff56 	bl	1220 <sjsu::lpc40xx::uart::IsDecmial(float)>
    1374:	4603      	mov	r3, r0
    1376:	2b00      	cmp	r3, #0
    1378:	d00a      	beq.n	1390 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    137a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1382:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    1386:	69fb      	ldr	r3, [r7, #28]
    1388:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    138a:	2304      	movs	r3, #4
    138c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    138e:	e082      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    1390:	2301      	movs	r3, #1
    1392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1394:	e07f      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    1396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1398:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    139c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    13a0:	f7ff fedc 	bl	115c <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    13a4:	eef0 7a40 	vmov.f32	s15, s0
    13a8:	eeb0 0a67 	vmov.f32	s0, s15
    13ac:	f7ff ff22 	bl	11f4 <sjsu::lpc40xx::uart::RoundFloat(float)>
    13b0:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    13b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    13b6:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    13ba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    13be:	f7ff fef3 	bl	11a8 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    13c2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    13c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    13ca:	ed9f 7a36 	vldr	s14, [pc, #216]	; 14a4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    13ce:	eef4 7ac7 	vcmpe.f32	s15, s14
    13d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13d6:	db0b      	blt.n	13f0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    13d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    13dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 14a8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    13e0:	eef4 7ac7 	vcmpe.f32	s15, s14
    13e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13e8:	d802      	bhi.n	13f0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    13ea:	2303      	movs	r3, #3
    13ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    13ee:	e052      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    13f0:	2302      	movs	r3, #2
    13f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    13f4:	e04f      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    13f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    13fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    13fe:	ee77 7a87 	vadd.f32	s15, s15, s14
    1402:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    1406:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    140a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    140e:	eef4 7ac7 	vcmpe.f32	s15, s14
    1412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1416:	dd02      	ble.n	141e <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    1418:	2304      	movs	r3, #4
    141a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    141c:	e03b      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    141e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    1422:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    1426:	eef4 7ac7 	vcmpe.f32	s15, s14
    142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    142e:	dd0f      	ble.n	1450 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    1430:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1438:	ee77 7a87 	vadd.f32	s15, s15, s14
    143c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    1440:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    1444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1448:	ee77 7a87 	vadd.f32	s15, s15, s14
    144c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    1450:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    1454:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    1458:	eec6 7a87 	vdiv.f32	s15, s13, s14
    145c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    1460:	2301      	movs	r3, #1
    1462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1464:	e017      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    1466:	69fc      	ldr	r4, [r7, #28]
    1468:	463b      	mov	r3, r7
    146a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    146e:	4618      	mov	r0, r3
    1470:	f7ff fe04 	bl	107c <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    1474:	463b      	mov	r3, r7
    1476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    147a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    147e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1486:	ee17 2a90 	vmov	r2, s15
    148a:	69fb      	ldr	r3, [r7, #28]
    148c:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    148e:	2304      	movs	r3, #4
    1490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    1492:	e000      	b.n	1496 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    1494:	bf00      	nop
  while (state != States::kDone)
    1496:	e73d      	b.n	1314 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    1498:	bf00      	nop
}
    149a:	69f8      	ldr	r0, [r7, #28]
    149c:	3744      	adds	r7, #68	; 0x44
    149e:	46bd      	mov	sp, r7
    14a0:	bd90      	pop	{r4, r7, pc}
    14a2:	bf00      	nop
    14a4:	3f8ccccd 	.word	0x3f8ccccd
    14a8:	3ff33333 	.word	0x3ff33333

000014ac <sjsu::Uart::Uart()>:
class Uart
    14ac:	b480      	push	{r7}
    14ae:	b083      	sub	sp, #12
    14b0:	af00      	add	r7, sp, #0
    14b2:	6078      	str	r0, [r7, #4]
    14b4:	4a04      	ldr	r2, [pc, #16]	; (14c8 <sjsu::Uart::Uart()+0x1c>)
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	601a      	str	r2, [r3, #0]
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	4618      	mov	r0, r3
    14be:	370c      	adds	r7, #12
    14c0:	46bd      	mov	sp, r7
    14c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14c6:	4770      	bx	lr
    14c8:	000087a4 	.word	0x000087a4

000014cc <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
  ///
  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  /// @param system_controller - reference to system controller. Uses the
  ///        default lpc40xx system controller. This is typically only used for
  ///        unit testing.
  explicit constexpr Uart(const Port_t & port,
    14cc:	b580      	push	{r7, lr}
    14ce:	b084      	sub	sp, #16
    14d0:	af00      	add	r7, sp, #0
    14d2:	60f8      	str	r0, [r7, #12]
    14d4:	60b9      	str	r1, [r7, #8]
    14d6:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	4618      	mov	r0, r3
    14dc:	f7ff ffe6 	bl	14ac <sjsu::Uart::Uart()>
    14e0:	4a06      	ldr	r2, [pc, #24]	; (14fc <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	601a      	str	r2, [r3, #0]
    14e6:	68fb      	ldr	r3, [r7, #12]
    14e8:	68ba      	ldr	r2, [r7, #8]
    14ea:	605a      	str	r2, [r3, #4]
    14ec:	68fb      	ldr	r3, [r7, #12]
    14ee:	687a      	ldr	r2, [r7, #4]
    14f0:	609a      	str	r2, [r3, #8]
  {
  }
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	4618      	mov	r0, r3
    14f6:	3710      	adds	r7, #16
    14f8:	46bd      	mov	sp, r7
    14fa:	bd80      	pop	{r7, pc}
    14fc:	00008788 	.word	0x00008788

00001500 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    1500:	b580      	push	{r7, lr}
    1502:	b084      	sub	sp, #16
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
    1508:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    150a:	2307      	movs	r3, #7
    150c:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	6898      	ldr	r0, [r3, #8]
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	689b      	ldr	r3, [r3, #8]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	3314      	adds	r3, #20
    151a:	681b      	ldr	r3, [r3, #0]
    151c:	687a      	ldr	r2, [r7, #4]
    151e:	6852      	ldr	r2, [r2, #4]
    1520:	3204      	adds	r2, #4
    1522:	4611      	mov	r1, r2
    1524:	4798      	blx	r3

    SetBaudRate(baud_rate);
    1526:	6839      	ldr	r1, [r7, #0]
    1528:	6878      	ldr	r0, [r7, #4]
    152a:	f000 f849 	bl	15c0 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	685b      	ldr	r3, [r3, #4]
    1532:	68d8      	ldr	r0, [r3, #12]
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	685b      	ldr	r3, [r3, #4]
    1538:	68db      	ldr	r3, [r3, #12]
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	687a      	ldr	r2, [r7, #4]
    1540:	6852      	ldr	r2, [r2, #4]
    1542:	7c12      	ldrb	r2, [r2, #16]
    1544:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1548:	b2d2      	uxtb	r2, r2
    154a:	4611      	mov	r1, r2
    154c:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	685b      	ldr	r3, [r3, #4]
    1552:	6898      	ldr	r0, [r3, #8]
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	685b      	ldr	r3, [r3, #4]
    1558:	689b      	ldr	r3, [r3, #8]
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	687a      	ldr	r2, [r7, #4]
    1560:	6852      	ldr	r2, [r2, #4]
    1562:	7c12      	ldrb	r2, [r2, #16]
    1564:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1568:	b2d2      	uxtb	r2, r2
    156a:	4611      	mov	r1, r2
    156c:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	685b      	ldr	r3, [r3, #4]
    1572:	68da      	ldr	r2, [r3, #12]
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	685b      	ldr	r3, [r3, #4]
    1578:	68db      	ldr	r3, [r3, #12]
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	3304      	adds	r3, #4
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	2102      	movs	r1, #2
    1582:	4610      	mov	r0, r2
    1584:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	685b      	ldr	r3, [r3, #4]
    158a:	689a      	ldr	r2, [r3, #8]
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	685b      	ldr	r3, [r3, #4]
    1590:	689b      	ldr	r3, [r3, #8]
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	3304      	adds	r3, #4
    1596:	681b      	ldr	r3, [r3, #0]
    1598:	2102      	movs	r1, #2
    159a:	4610      	mov	r0, r2
    159c:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	685b      	ldr	r3, [r3, #4]
    15a2:	681b      	ldr	r3, [r3, #0]
    15a4:	7a1b      	ldrb	r3, [r3, #8]
    15a6:	b2da      	uxtb	r2, r3
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	685b      	ldr	r3, [r3, #4]
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	f042 0207 	orr.w	r2, r2, #7
    15b2:	b2d2      	uxtb	r2, r2
    15b4:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    15b6:	2300      	movs	r3, #0
  }
    15b8:	4618      	mov	r0, r3
    15ba:	3710      	adds	r7, #16
    15bc:	46bd      	mov	sp, r7
    15be:	bd80      	pop	{r7, pc}

000015c0 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    15c0:	b580      	push	{r7, lr}
    15c2:	b086      	sub	sp, #24
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
    15c8:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	689a      	ldr	r2, [r3, #8]
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	685b      	ldr	r3, [r3, #4]
    15d2:	3304      	adds	r3, #4
    15d4:	4619      	mov	r1, r3
    15d6:	4610      	mov	r0, r2
    15d8:	f7ff f920 	bl	81c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    15dc:	4602      	mov	r2, r0
    15de:	f107 0308 	add.w	r3, r7, #8
    15e2:	6839      	ldr	r1, [r7, #0]
    15e4:	4618      	mov	r0, r3
    15e6:	f7ff fe6b 	bl	12c0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    15ee:	68bb      	ldr	r3, [r7, #8]
    15f0:	0a1b      	lsrs	r3, r3, #8
    15f2:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    15f4:	68bb      	ldr	r3, [r7, #8]
    15f6:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    15f8:	693b      	ldr	r3, [r7, #16]
    15fa:	b2db      	uxtb	r3, r3
    15fc:	011b      	lsls	r3, r3, #4
    15fe:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    1600:	68fb      	ldr	r3, [r7, #12]
    1602:	b2db      	uxtb	r3, r3
    1604:	f003 030f 	and.w	r3, r3, #15
    1608:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    160a:	4313      	orrs	r3, r2
    160c:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    160e:	687b      	ldr	r3, [r7, #4]
    1610:	685b      	ldr	r3, [r3, #4]
    1612:	681b      	ldr	r3, [r3, #0]
    1614:	2280      	movs	r2, #128	; 0x80
    1616:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	685b      	ldr	r3, [r3, #4]
    161c:	681b      	ldr	r3, [r3, #0]
    161e:	7dba      	ldrb	r2, [r7, #22]
    1620:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	685b      	ldr	r3, [r3, #4]
    1626:	681b      	ldr	r3, [r3, #0]
    1628:	7d7a      	ldrb	r2, [r7, #21]
    162a:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	685b      	ldr	r3, [r3, #4]
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	7d3a      	ldrb	r2, [r7, #20]
    1634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	685b      	ldr	r3, [r3, #4]
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	2203      	movs	r2, #3
    1640:	731a      	strb	r2, [r3, #12]
    return true;
    1642:	2301      	movs	r3, #1
  }
    1644:	4618      	mov	r0, r3
    1646:	3718      	adds	r7, #24
    1648:	46bd      	mov	sp, r7
    164a:	bd80      	pop	{r7, pc}

0000164c <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    164c:	b580      	push	{r7, lr}
    164e:	b086      	sub	sp, #24
    1650:	af00      	add	r7, sp, #0
    1652:	60f8      	str	r0, [r7, #12]
    1654:	60b9      	str	r1, [r7, #8]
    1656:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    1658:	2300      	movs	r3, #0
    165a:	617b      	str	r3, [r7, #20]
    165c:	697a      	ldr	r2, [r7, #20]
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	429a      	cmp	r2, r3
    1662:	d216      	bcs.n	1692 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    1664:	68ba      	ldr	r2, [r7, #8]
    1666:	697b      	ldr	r3, [r7, #20]
    1668:	441a      	add	r2, r3
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	685b      	ldr	r3, [r3, #4]
    166e:	681b      	ldr	r3, [r3, #0]
    1670:	7812      	ldrb	r2, [r2, #0]
    1672:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    1674:	68f8      	ldr	r0, [r7, #12]
    1676:	f000 f8b5 	bl	17e4 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    167a:	4603      	mov	r3, r0
    167c:	f083 0301 	eor.w	r3, r3, #1
    1680:	b2db      	uxtb	r3, r3
    1682:	2b00      	cmp	r3, #0
    1684:	d001      	beq.n	168a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    1686:	bf00      	nop
      while (!TransmissionComplete())
    1688:	e7f4      	b.n	1674 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    168a:	697b      	ldr	r3, [r7, #20]
    168c:	3301      	adds	r3, #1
    168e:	617b      	str	r3, [r7, #20]
    1690:	e7e4      	b.n	165c <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    1692:	bf00      	nop
    1694:	3718      	adds	r7, #24
    1696:	46bd      	mov	sp, r7
    1698:	bd80      	pop	{r7, pc}

0000169a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    169a:	b590      	push	{r4, r7, lr}
    169c:	b083      	sub	sp, #12
    169e:	af00      	add	r7, sp, #0
    16a0:	6078      	str	r0, [r7, #4]
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    16a6:	4618      	mov	r0, r3
    16a8:	f000 f88a 	bl	17c0 <sjsu::lpc40xx::Uart::HasData() const>
    16ac:	4603      	mov	r3, r0
    16ae:	2b00      	cmp	r3, #0
    16b0:	d010      	beq.n	16d4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    16b6:	685b      	ldr	r3, [r3, #4]
    16b8:	681b      	ldr	r3, [r3, #0]
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    16c2:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    16c8:	6813      	ldr	r3, [r2, #0]
    16ca:	1c58      	adds	r0, r3, #1
    16cc:	6010      	str	r0, [r2, #0]
    16ce:	440b      	add	r3, r1
    16d0:	4622      	mov	r2, r4
    16d2:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    16d8:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    16de:	429a      	cmp	r2, r3
    16e0:	d301      	bcc.n	16e6 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    16e2:	2301      	movs	r3, #1
    16e4:	e000      	b.n	16e8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    16e6:	2300      	movs	r3, #0
    });
    16e8:	4618      	mov	r0, r3
    16ea:	370c      	adds	r7, #12
    16ec:	46bd      	mov	sp, r7
    16ee:	bd90      	pop	{r4, r7, pc}

000016f0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    16f0:	b590      	push	{r4, r7, lr}
    16f2:	b09d      	sub	sp, #116	; 0x74
    16f4:	af00      	add	r7, sp, #0
    16f6:	6178      	str	r0, [r7, #20]
    16f8:	6139      	str	r1, [r7, #16]
    16fa:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    16fc:	2300      	movs	r3, #0
    16fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    1700:	697b      	ldr	r3, [r7, #20]
    1702:	643b      	str	r3, [r7, #64]	; 0x40
    1704:	f107 0310 	add.w	r3, r7, #16
    1708:	647b      	str	r3, [r7, #68]	; 0x44
    170a:	68fb      	ldr	r3, [r7, #12]
    170c:	64bb      	str	r3, [r7, #72]	; 0x48
    170e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    1712:	64fb      	str	r3, [r7, #76]	; 0x4c
    1714:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    1718:	e9c7 3408 	strd	r3, r4, [r7, #32]
    171c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    1720:	f107 0340 	add.w	r3, r7, #64	; 0x40
    1724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    172a:	f107 0360 	add.w	r3, r7, #96	; 0x60
    172e:	4618      	mov	r0, r3
    1730:	f000 fc18 	bl	1f64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    1734:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1738:	f107 0320 	add.w	r3, r7, #32
    173c:	4611      	mov	r1, r2
    173e:	4618      	mov	r0, r3
    1740:	f000 fc24 	bl	1f8c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1744:	4603      	mov	r3, r0
    1746:	2b00      	cmp	r3, #0
    1748:	d004      	beq.n	1754 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    174a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    174e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    1752:	e011      	b.n	1778 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    1754:	4b19      	ldr	r3, [pc, #100]	; (17bc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    1756:	681b      	ldr	r3, [r3, #0]
    1758:	f107 0258 	add.w	r2, r7, #88	; 0x58
    175c:	4610      	mov	r0, r2
    175e:	4798      	blx	r3
    1760:	463b      	mov	r3, r7
    1762:	f107 0220 	add.w	r2, r7, #32
    1766:	f107 0158 	add.w	r1, r7, #88	; 0x58
    176a:	4618      	mov	r0, r3
    176c:	f000 fda5 	bl	22ba <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1770:	e9d7 3400 	ldrd	r3, r4, [r7]
    1774:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    1778:	2301      	movs	r3, #1
    177a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    177c:	4b0f      	ldr	r3, [pc, #60]	; (17bc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1784:	4610      	mov	r0, r2
    1786:	4798      	blx	r3
    1788:	f107 0218 	add.w	r2, r7, #24
    178c:	f107 0350 	add.w	r3, r7, #80	; 0x50
    1790:	4611      	mov	r1, r2
    1792:	4618      	mov	r0, r3
    1794:	f000 fdbe 	bl	2314 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1798:	4603      	mov	r3, r0
    179a:	2b00      	cmp	r3, #0
    179c:	d009      	beq.n	17b2 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    179e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    17a2:	4618      	mov	r0, r3
    17a4:	f7ff ff79 	bl	169a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    17a8:	4603      	mov	r3, r0
    17aa:	2b00      	cmp	r3, #0
    17ac:	d0e6      	beq.n	177c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    17ae:	2300      	movs	r3, #0
    17b0:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    17b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    17b4:	4618      	mov	r0, r3
    17b6:	3774      	adds	r7, #116	; 0x74
    17b8:	46bd      	mov	sp, r7
    17ba:	bd90      	pop	{r4, r7, pc}
    17bc:	10000000 	.word	0x10000000

000017c0 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	685b      	ldr	r3, [r3, #4]
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	7d1b      	ldrb	r3, [r3, #20]
    17d0:	b2db      	uxtb	r3, r3
    17d2:	2100      	movs	r1, #0
    17d4:	4618      	mov	r0, r3
    17d6:	f000 fccb 	bl	2170 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    17da:	4603      	mov	r3, r0
  }
    17dc:	4618      	mov	r0, r3
    17de:	3708      	adds	r7, #8
    17e0:	46bd      	mov	sp, r7
    17e2:	bd80      	pop	{r7, pc}

000017e4 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    17e4:	b580      	push	{r7, lr}
    17e6:	b082      	sub	sp, #8
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	685b      	ldr	r3, [r3, #4]
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	7d1b      	ldrb	r3, [r3, #20]
    17f4:	b2db      	uxtb	r3, r3
    17f6:	2105      	movs	r1, #5
    17f8:	4618      	mov	r0, r3
    17fa:	f000 fcb9 	bl	2170 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    17fe:	4603      	mov	r3, r0
  }
    1800:	4618      	mov	r0, r3
    1802:	3708      	adds	r7, #8
    1804:	46bd      	mov	sp, r7
    1806:	bd80      	pop	{r7, pc}

00001808 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>:
  {
    adc_base->CR =
        bit::Insert(adc_base->CR, turn_burst_mode_on, Control::kBurstEnable);
  }
  /// @returns true if burst mode is enabled and false otherwise.
  static bool BurstModeIsEnabled()
    1808:	b580      	push	{r7, lr}
    180a:	af00      	add	r7, sp, #0
  {
    return bit::Read(adc_base->CR, Control::kBurstEnable);
    180c:	4b08      	ldr	r3, [pc, #32]	; (1830 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x28>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	6818      	ldr	r0, [r3, #0]
    1812:	4b08      	ldr	r3, [pc, #32]	; (1834 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()+0x2c>)
    1814:	781a      	ldrb	r2, [r3, #0]
    1816:	785b      	ldrb	r3, [r3, #1]
    1818:	021b      	lsls	r3, r3, #8
    181a:	431a      	orrs	r2, r3
    181c:	2300      	movs	r3, #0
    181e:	f362 030f 	bfi	r3, r2, #0, #16
    1822:	4619      	mov	r1, r3
    1824:	f000 fcbb 	bl	219e <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1828:	4603      	mov	r3, r0
  }
    182a:	4618      	mov	r0, r3
    182c:	bd80      	pop	{r7, pc}
    182e:	bf00      	nop
    1830:	10000128 	.word	0x10000128
    1834:	000086e0 	.word	0x000086e0

00001838 <sjsu::Adc::Adc()>:

namespace sjsu
{
/// Common abstraction interface for Analog-to-Digital (ADC) Converter. These
/// peripherals are used to sense a voltage and convert it to a numeric value.
class Adc
    1838:	b480      	push	{r7}
    183a:	b083      	sub	sp, #12
    183c:	af00      	add	r7, sp, #0
    183e:	6078      	str	r0, [r7, #4]
    1840:	4a04      	ldr	r2, [pc, #16]	; (1854 <sjsu::Adc::Adc()+0x1c>)
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	601a      	str	r2, [r3, #0]
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	4618      	mov	r0, r3
    184a:	370c      	adds	r7, #12
    184c:	46bd      	mov	sp, r7
    184e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1852:	4770      	bx	lr
    1854:	00008774 	.word	0x00008774

00001858 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>:
  ///
  /// @param system_controller: pass a system controller object to the ADC.
  ///        typically this parameter is used for testing this class and for
  ///        choosing the lpc17xx system controller when using this class on
  ///        that platform.
  explicit constexpr Adc(const Channel_t & channel,
    1858:	b580      	push	{r7, lr}
    185a:	b084      	sub	sp, #16
    185c:	af00      	add	r7, sp, #0
    185e:	60f8      	str	r0, [r7, #12]
    1860:	60b9      	str	r1, [r7, #8]
    1862:	607a      	str	r2, [r7, #4]
                         const sjsu::SystemController & system_controller =
                             DefaultSystemController())
      : channel_(channel), system_controller_(system_controller)
    1864:	68fb      	ldr	r3, [r7, #12]
    1866:	4618      	mov	r0, r3
    1868:	f7ff ffe6 	bl	1838 <sjsu::Adc::Adc()>
    186c:	4a06      	ldr	r2, [pc, #24]	; (1888 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)+0x30>)
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	601a      	str	r2, [r3, #0]
    1872:	68fb      	ldr	r3, [r7, #12]
    1874:	68ba      	ldr	r2, [r7, #8]
    1876:	605a      	str	r2, [r3, #4]
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	687a      	ldr	r2, [r7, #4]
    187c:	609a      	str	r2, [r3, #8]
  {
  }
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	4618      	mov	r0, r3
    1882:	3710      	adds	r7, #16
    1884:	46bd      	mov	sp, r7
    1886:	bd80      	pop	{r7, pc}
    1888:	00008760 	.word	0x00008760

0000188c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    188c:	b580      	push	{r7, lr}
    188e:	ed2d 8b02 	vpush	{d8}
    1892:	b084      	sub	sp, #16
    1894:	af00      	add	r7, sp, #0
    1896:	6078      	str	r0, [r7, #4]
    1898:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	4618      	mov	r0, r3
    189e:	f7ff f9c3 	bl	c28 <units::linear_scale<float>::operator()() const>
    18a2:	eeb0 8a40 	vmov.f32	s16, s0
    18a6:	683b      	ldr	r3, [r7, #0]
    18a8:	4618      	mov	r0, r3
    18aa:	f7ff f9bd 	bl	c28 <units::linear_scale<float>::operator()() const>
    18ae:	eef0 7a40 	vmov.f32	s15, s0
    18b2:	edc7 7a03 	vstr	s15, [r7, #12]
    18b6:	f107 030c 	add.w	r3, r7, #12
    18ba:	4618      	mov	r0, r3
    18bc:	f7fe fdc7 	bl	44e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    18c0:	eeb0 7a40 	vmov.f32	s14, s0
    18c4:	eec8 7a07 	vdiv.f32	s15, s16, s14
    18c8:	f107 0308 	add.w	r3, r7, #8
    18cc:	eeb0 0a67 	vmov.f32	s0, s15
    18d0:	4618      	mov	r0, r3
    18d2:	f7ff f9e4 	bl	c9e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    18d6:	68bb      	ldr	r3, [r7, #8]
	}
    18d8:	4618      	mov	r0, r3
    18da:	3710      	adds	r7, #16
    18dc:	46bd      	mov	sp, r7
    18de:	ecbd 8b02 	vpop	{d8}
    18e2:	bd80      	pop	{r7, pc}

000018e4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    18e4:	b580      	push	{r7, lr}
    18e6:	b082      	sub	sp, #8
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    18ec:	6878      	ldr	r0, [r7, #4]
    18ee:	f000 fc0d 	bl	210c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    18f2:	4603      	mov	r3, r0
		}
    18f4:	4618      	mov	r0, r3
    18f6:	3708      	adds	r7, #8
    18f8:	46bd      	mov	sp, r7
    18fa:	bd80      	pop	{r7, pc}

000018fc <sjsu::lpc40xx::Adc::Initialize() const>:
  Status Initialize() const override
    18fc:	b580      	push	{r7, lr}
    18fe:	b086      	sub	sp, #24
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
  {
    system_controller_.PowerUpPeripheral(
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	689a      	ldr	r2, [r3, #8]
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	689b      	ldr	r3, [r3, #8]
        sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    190c:	681b      	ldr	r3, [r3, #0]
    190e:	3314      	adds	r3, #20
    1910:	681b      	ldr	r3, [r3, #0]
    system_controller_.PowerUpPeripheral(
    1912:	493c      	ldr	r1, [pc, #240]	; (1a04 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    1914:	4610      	mov	r0, r2
    1916:	4798      	blx	r3

    channel_.adc_pin.SetPinFunction(channel_.pin_function);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	685b      	ldr	r3, [r3, #4]
    191c:	6818      	ldr	r0, [r3, #0]
    191e:	687b      	ldr	r3, [r7, #4]
    1920:	685b      	ldr	r3, [r3, #4]
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	681b      	ldr	r3, [r3, #0]
    1926:	681b      	ldr	r3, [r3, #0]
    1928:	687a      	ldr	r2, [r7, #4]
    192a:	6852      	ldr	r2, [r2, #4]
    192c:	7912      	ldrb	r2, [r2, #4]
    192e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    1932:	b2d2      	uxtb	r2, r2
    1934:	4611      	mov	r1, r2
    1936:	4798      	blx	r3
    channel_.adc_pin.SetPull(sjsu::Pin::Resistor::kNone);
    1938:	687b      	ldr	r3, [r7, #4]
    193a:	685b      	ldr	r3, [r3, #4]
    193c:	681a      	ldr	r2, [r3, #0]
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	685b      	ldr	r3, [r3, #4]
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	681b      	ldr	r3, [r3, #0]
    1946:	3304      	adds	r3, #4
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	2100      	movs	r1, #0
    194c:	4610      	mov	r0, r2
    194e:	4798      	blx	r3
    channel_.adc_pin.SetAsAnalogMode(true);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	681a      	ldr	r2, [r3, #0]
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	685b      	ldr	r3, [r3, #4]
    195a:	681b      	ldr	r3, [r3, #0]
    195c:	681b      	ldr	r3, [r3, #0]
    195e:	330c      	adds	r3, #12
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	2101      	movs	r1, #1
    1964:	4610      	mov	r0, r2
    1966:	4798      	blx	r3

    const units::frequency::hertz_t kPeripheralFrequency =
        system_controller_.GetPeripheralFrequency(
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	689b      	ldr	r3, [r3, #8]
            sjsu::lpc40xx::SystemController::Peripherals::kAdc);
    196c:	4925      	ldr	r1, [pc, #148]	; (1a04 <sjsu::lpc40xx::Adc::Initialize() const+0x108>)
    196e:	4618      	mov	r0, r3
    1970:	f7fe ff54 	bl	81c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1974:	4603      	mov	r3, r0
    1976:	60bb      	str	r3, [r7, #8]
    uint32_t clock_divider =
        (kPeripheralFrequency / kClockFrequency).to<uint32_t>();
    1978:	f107 0308 	add.w	r3, r7, #8
    197c:	4922      	ldr	r1, [pc, #136]	; (1a08 <sjsu::lpc40xx::Adc::Initialize() const+0x10c>)
    197e:	4618      	mov	r0, r3
    1980:	f7ff ff84 	bl	188c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1984:	4603      	mov	r3, r0
    1986:	60fb      	str	r3, [r7, #12]
    1988:	f107 030c 	add.w	r3, r7, #12
    198c:	4618      	mov	r0, r3
    198e:	f7ff ffa9 	bl	18e4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    1992:	6138      	str	r0, [r7, #16]

    uint32_t control = adc_base->CR;
    1994:	4b1d      	ldr	r3, [pc, #116]	; (1a0c <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	617b      	str	r3, [r7, #20]

    control = bit::Set(control, Control::kPowerEnable);
    199c:	4b1c      	ldr	r3, [pc, #112]	; (1a10 <sjsu::lpc40xx::Adc::Initialize() const+0x114>)
    199e:	781a      	ldrb	r2, [r3, #0]
    19a0:	785b      	ldrb	r3, [r3, #1]
    19a2:	021b      	lsls	r3, r3, #8
    19a4:	431a      	orrs	r2, r3
    19a6:	2300      	movs	r3, #0
    19a8:	f362 030f 	bfi	r3, r2, #0, #16
    19ac:	4619      	mov	r1, r3
    19ae:	6978      	ldr	r0, [r7, #20]
    19b0:	f000 fc04 	bl	21bc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    19b4:	6178      	str	r0, [r7, #20]
    control = bit::Insert(control, clock_divider, Control::kClockDivider);
    19b6:	4b17      	ldr	r3, [pc, #92]	; (1a14 <sjsu::lpc40xx::Adc::Initialize() const+0x118>)
    19b8:	781a      	ldrb	r2, [r3, #0]
    19ba:	785b      	ldrb	r3, [r3, #1]
    19bc:	021b      	lsls	r3, r3, #8
    19be:	431a      	orrs	r2, r3
    19c0:	2300      	movs	r3, #0
    19c2:	f362 030f 	bfi	r3, r2, #0, #16
    19c6:	461a      	mov	r2, r3
    19c8:	6939      	ldr	r1, [r7, #16]
    19ca:	6978      	ldr	r0, [r7, #20]
    19cc:	f000 fb8c 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    19d0:	6178      	str	r0, [r7, #20]

    // If burst mode is enabled, the bits in the select area of the control
    // register, are enables for each corrisponding ADC channel. Otherwise, this
    // field should only hold a single set 1 when using software conversion.
    if (BurstModeIsEnabled())
    19d2:	f7ff ff19 	bl	1808 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    19d6:	4603      	mov	r3, r0
    19d8:	2b00      	cmp	r3, #0
    19da:	d00a      	beq.n	19f2 <sjsu::lpc40xx::Adc::Initialize() const+0xf6>
    {
      control = bit::Set(control, channel_.channel);
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	685b      	ldr	r3, [r3, #4]
    19e0:	791b      	ldrb	r3, [r3, #4]
    19e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    19e6:	b2db      	uxtb	r3, r3
    19e8:	4619      	mov	r1, r3
    19ea:	6978      	ldr	r0, [r7, #20]
    19ec:	f000 fb57 	bl	209e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    19f0:	6178      	str	r0, [r7, #20]
    }

    adc_base->CR = control;
    19f2:	4b06      	ldr	r3, [pc, #24]	; (1a0c <sjsu::lpc40xx::Adc::Initialize() const+0x110>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	697a      	ldr	r2, [r7, #20]
    19f8:	601a      	str	r2, [r3, #0]

    return Status::kSuccess;
    19fa:	2300      	movs	r3, #0
  }
    19fc:	4618      	mov	r0, r3
    19fe:	3718      	adds	r7, #24
    1a00:	46bd      	mov	sp, r7
    1a02:	bd80      	pop	{r7, pc}
    1a04:	00008628 	.word	0x00008628
    1a08:	00008714 	.word	0x00008714
    1a0c:	10000128 	.word	0x10000128
    1a10:	000086e4 	.word	0x000086e4
    1a14:	000086dc 	.word	0x000086dc

00001a18 <sjsu::lpc40xx::Adc::Read() const>:
  uint32_t Read() const override
    1a18:	b580      	push	{r7, lr}
    1a1a:	b084      	sub	sp, #16
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
  {
    // Convert analog value from analog to a digital value
    Conversion();
    1a20:	6878      	ldr	r0, [r7, #4]
    1a22:	f000 f851 	bl	1ac8 <sjsu::lpc40xx::Adc::Conversion() const>
    uint32_t result =
        bit::Extract(adc_base->DR[channel_.channel], DataRegister::kResult);
    1a26:	4b0e      	ldr	r3, [pc, #56]	; (1a60 <sjsu::lpc40xx::Adc::Read() const+0x48>)
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	687a      	ldr	r2, [r7, #4]
    1a2c:	6852      	ldr	r2, [r2, #4]
    1a2e:	7912      	ldrb	r2, [r2, #4]
    1a30:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1a34:	b2d2      	uxtb	r2, r2
    1a36:	3204      	adds	r2, #4
    1a38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1a3c:	4b09      	ldr	r3, [pc, #36]	; (1a64 <sjsu::lpc40xx::Adc::Read() const+0x4c>)
    1a3e:	781a      	ldrb	r2, [r3, #0]
    1a40:	785b      	ldrb	r3, [r3, #1]
    1a42:	021b      	lsls	r3, r3, #8
    1a44:	431a      	orrs	r2, r3
    1a46:	2300      	movs	r3, #0
    1a48:	f362 030f 	bfi	r3, r2, #0, #16
    1a4c:	4619      	mov	r1, r3
    1a4e:	f000 fbc4 	bl	21da <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1a52:	60f8      	str	r0, [r7, #12]
    return result;
    1a54:	68fb      	ldr	r3, [r7, #12]
  }
    1a56:	4618      	mov	r0, r3
    1a58:	3710      	adds	r7, #16
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	bf00      	nop
    1a60:	10000128 	.word	0x10000128
    1a64:	000086ec 	.word	0x000086ec

00001a68 <sjsu::lpc40xx::Adc::GetActiveBits() const>:
  uint8_t GetActiveBits() const override
    1a68:	b480      	push	{r7}
    1a6a:	b083      	sub	sp, #12
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	6078      	str	r0, [r7, #4]
  {
    return kActiveBits;
    1a70:	230c      	movs	r3, #12
  }
    1a72:	4618      	mov	r0, r3
    1a74:	370c      	adds	r7, #12
    1a76:	46bd      	mov	sp, r7
    1a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a7c:	4770      	bx	lr
    1a7e:	Address 0x0000000000001a7e is out of bounds.


00001a80 <sjsu::lpc40xx::Adc::HasConversionFinished() const>:

 private:
  bool HasConversionFinished() const
    1a80:	b580      	push	{r7, lr}
    1a82:	b082      	sub	sp, #8
    1a84:	af00      	add	r7, sp, #0
    1a86:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(adc_base->DR[channel_.channel], DataRegister::kDone);
    1a88:	4b0d      	ldr	r3, [pc, #52]	; (1ac0 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x40>)
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	687a      	ldr	r2, [r7, #4]
    1a8e:	6852      	ldr	r2, [r2, #4]
    1a90:	7912      	ldrb	r2, [r2, #4]
    1a92:	f3c2 0202 	ubfx	r2, r2, #0, #3
    1a96:	b2d2      	uxtb	r2, r2
    1a98:	3204      	adds	r2, #4
    1a9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1a9e:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <sjsu::lpc40xx::Adc::HasConversionFinished() const+0x44>)
    1aa0:	781a      	ldrb	r2, [r3, #0]
    1aa2:	785b      	ldrb	r3, [r3, #1]
    1aa4:	021b      	lsls	r3, r3, #8
    1aa6:	431a      	orrs	r2, r3
    1aa8:	2300      	movs	r3, #0
    1aaa:	f362 030f 	bfi	r3, r2, #0, #16
    1aae:	4619      	mov	r1, r3
    1ab0:	f000 fb75 	bl	219e <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1ab4:	4603      	mov	r3, r0
  }
    1ab6:	4618      	mov	r0, r3
    1ab8:	3708      	adds	r7, #8
    1aba:	46bd      	mov	sp, r7
    1abc:	bd80      	pop	{r7, pc}
    1abe:	bf00      	nop
    1ac0:	10000128 	.word	0x10000128
    1ac4:	000086f0 	.word	0x000086f0

00001ac8 <sjsu::lpc40xx::Adc::Conversion() const>:
  void Conversion() const
    1ac8:	b590      	push	{r4, r7, lr}
    1aca:	b085      	sub	sp, #20
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
  {
    if (BurstModeIsEnabled())
    1ad0:	f7ff fe9a 	bl	1808 <sjsu::lpc40xx::Adc::BurstModeIsEnabled()>
    1ad4:	4603      	mov	r3, r0
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d013      	beq.n	1b02 <sjsu::lpc40xx::Adc::Conversion() const+0x3a>
    {
      // NOTE: If burst mode is enabled, conversion start must be set 0
      adc_base->CR = bit::Insert(adc_base->CR, 0, Control::kStartCode);
    1ada:	4b29      	ldr	r3, [pc, #164]	; (1b80 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	6818      	ldr	r0, [r3, #0]
    1ae0:	4b27      	ldr	r3, [pc, #156]	; (1b80 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1ae2:	681c      	ldr	r4, [r3, #0]
    1ae4:	4b27      	ldr	r3, [pc, #156]	; (1b84 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1ae6:	781a      	ldrb	r2, [r3, #0]
    1ae8:	785b      	ldrb	r3, [r3, #1]
    1aea:	021b      	lsls	r3, r3, #8
    1aec:	431a      	orrs	r2, r3
    1aee:	2300      	movs	r3, #0
    1af0:	f362 030f 	bfi	r3, r2, #0, #16
    1af4:	461a      	mov	r2, r3
    1af6:	2100      	movs	r1, #0
    1af8:	f000 fb80 	bl	21fc <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1afc:	4603      	mov	r3, r0
    1afe:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
      {
        continue;
      }
    }
  }
    1b00:	e03a      	b.n	1b78 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
      uint32_t channel_select = (1 << channel_.channel);
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	685b      	ldr	r3, [r3, #4]
    1b06:	791b      	ldrb	r3, [r3, #4]
    1b08:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b0c:	b2db      	uxtb	r3, r3
    1b0e:	461a      	mov	r2, r3
    1b10:	2301      	movs	r3, #1
    1b12:	4093      	lsls	r3, r2
    1b14:	60fb      	str	r3, [r7, #12]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1b16:	4b1a      	ldr	r3, [pc, #104]	; (1b80 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	6818      	ldr	r0, [r3, #0]
      adc_base->CR =
    1b1c:	4b18      	ldr	r3, [pc, #96]	; (1b80 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1b1e:	681c      	ldr	r4, [r3, #0]
          bit::Insert(adc_base->CR, channel_select, Control::kChannelSelect);
    1b20:	4b19      	ldr	r3, [pc, #100]	; (1b88 <sjsu::lpc40xx::Adc::Conversion() const+0xc0>)
    1b22:	781a      	ldrb	r2, [r3, #0]
    1b24:	785b      	ldrb	r3, [r3, #1]
    1b26:	021b      	lsls	r3, r3, #8
    1b28:	431a      	orrs	r2, r3
    1b2a:	2300      	movs	r3, #0
    1b2c:	f362 030f 	bfi	r3, r2, #0, #16
    1b30:	461a      	mov	r2, r3
    1b32:	68f9      	ldr	r1, [r7, #12]
    1b34:	f000 fad8 	bl	20e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    1b38:	4603      	mov	r3, r0
      adc_base->CR =
    1b3a:	6023      	str	r3, [r4, #0]
      adc_base->CR = bit::Insert(adc_base->CR, 0x01, Control::kStartCode);
    1b3c:	4b10      	ldr	r3, [pc, #64]	; (1b80 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	6818      	ldr	r0, [r3, #0]
    1b42:	4b0f      	ldr	r3, [pc, #60]	; (1b80 <sjsu::lpc40xx::Adc::Conversion() const+0xb8>)
    1b44:	681c      	ldr	r4, [r3, #0]
    1b46:	4b0f      	ldr	r3, [pc, #60]	; (1b84 <sjsu::lpc40xx::Adc::Conversion() const+0xbc>)
    1b48:	781a      	ldrb	r2, [r3, #0]
    1b4a:	785b      	ldrb	r3, [r3, #1]
    1b4c:	021b      	lsls	r3, r3, #8
    1b4e:	431a      	orrs	r2, r3
    1b50:	2300      	movs	r3, #0
    1b52:	f362 030f 	bfi	r3, r2, #0, #16
    1b56:	461a      	mov	r2, r3
    1b58:	2101      	movs	r1, #1
    1b5a:	f000 fb4f 	bl	21fc <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    1b5e:	4603      	mov	r3, r0
    1b60:	6023      	str	r3, [r4, #0]
      while (!HasConversionFinished())
    1b62:	6878      	ldr	r0, [r7, #4]
    1b64:	f7ff ff8c 	bl	1a80 <sjsu::lpc40xx::Adc::HasConversionFinished() const>
    1b68:	4603      	mov	r3, r0
    1b6a:	f083 0301 	eor.w	r3, r3, #1
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	d001      	beq.n	1b78 <sjsu::lpc40xx::Adc::Conversion() const+0xb0>
        continue;
    1b74:	bf00      	nop
      while (!HasConversionFinished())
    1b76:	e7f4      	b.n	1b62 <sjsu::lpc40xx::Adc::Conversion() const+0x9a>
  }
    1b78:	bf00      	nop
    1b7a:	3714      	adds	r7, #20
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd90      	pop	{r4, r7, pc}
    1b80:	10000128 	.word	0x10000128
    1b84:	000086e8 	.word	0x000086e8
    1b88:	000086d8 	.word	0x000086d8

00001b8c <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
    1b8c:	b480      	push	{r7}
    1b8e:	af00      	add	r7, sp, #0
    1b90:	bf00      	nop
    1b92:	46bd      	mov	sp, r7
    1b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b98:	4770      	bx	lr
    1b9a:	Address 0x0000000000001b9a is out of bounds.


00001b9c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
    1ba2:	4b09      	ldr	r3, [pc, #36]	; (1bc8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	9300      	str	r3, [sp, #0]
    1ba8:	231d      	movs	r3, #29
    1baa:	4a08      	ldr	r2, [pc, #32]	; (1bcc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
    1bac:	4908      	ldr	r1, [pc, #32]	; (1bd0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
    1bae:	4809      	ldr	r0, [pc, #36]	; (1bd4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
    1bb0:	f002 ff94 	bl	4adc <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	3b10      	subs	r3, #16
    1bba:	4618      	mov	r0, r3
    1bbc:	f7fe fd54 	bl	668 <NVIC_DisableIRQ>
  }
    1bc0:	bf00      	nop
    1bc2:	46bd      	mov	sp, r7
    1bc4:	bd80      	pop	{r7, pc}
    1bc6:	bf00      	nop
    1bc8:	10000048 	.word	0x10000048
    1bcc:	00008974 	.word	0x00008974
    1bd0:	00008718 	.word	0x00008718
    1bd4:	00008480 	.word	0x00008480

00001bd8 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    1be0:	2340      	movs	r3, #64	; 0x40
    1be2:	4618      	mov	r0, r3
    1be4:	370c      	adds	r7, #12
    1be6:	46bd      	mov	sp, r7
    1be8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bec:	4770      	bx	lr
    1bee:	Address 0x0000000000001bee is out of bounds.


00001bf0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b084      	sub	sp, #16
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	4618      	mov	r0, r3
    1bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
    1c00:	461a      	mov	r2, r3
    1c02:	2100      	movs	r1, #0
    1c04:	f006 f933 	bl	7e6e <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1c08:	2300      	movs	r3, #0
    1c0a:	60fb      	str	r3, [r7, #12]
    1c0c:	68fb      	ldr	r3, [r7, #12]
    1c0e:	2b0f      	cmp	r3, #15
    1c10:	d808      	bhi.n	1c24 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	68fa      	ldr	r2, [r7, #12]
    1c16:	4911      	ldr	r1, [pc, #68]	; (1c5c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
    1c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	3301      	adds	r3, #1
    1c20:	60fb      	str	r3, [r7, #12]
    1c22:	e7f3      	b.n	1c0c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1c24:	2310      	movs	r3, #16
    1c26:	60bb      	str	r3, [r7, #8]
    1c28:	6878      	ldr	r0, [r7, #4]
    1c2a:	f7ff ffd5 	bl	1bd8 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
    1c2e:	4602      	mov	r2, r0
    1c30:	68bb      	ldr	r3, [r7, #8]
    1c32:	4293      	cmp	r3, r2
    1c34:	bf34      	ite	cc
    1c36:	2301      	movcc	r3, #1
    1c38:	2300      	movcs	r3, #0
    1c3a:	b2db      	uxtb	r3, r3
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d008      	beq.n	1c52 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	68ba      	ldr	r2, [r7, #8]
    1c44:	4906      	ldr	r1, [pc, #24]	; (1c60 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
    1c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
    1c4a:	68bb      	ldr	r3, [r7, #8]
    1c4c:	3301      	adds	r3, #1
    1c4e:	60bb      	str	r3, [r7, #8]
    1c50:	e7ea      	b.n	1c28 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
    1c52:	bf00      	nop
    }
    1c54:	6878      	ldr	r0, [r7, #4]
    1c56:	3710      	adds	r7, #16
    1c58:	46bd      	mov	sp, r7
    1c5a:	bd80      	pop	{r7, pc}
    1c5c:	00001b8d 	.word	0x00001b8d
    1c60:	00001b9d 	.word	0x00001b9d

00001c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    1c64:	b490      	push	{r4, r7}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
	{ return __r; }
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	e9d3 3400 	ldrd	r3, r4, [r3]
    1c72:	4618      	mov	r0, r3
    1c74:	4621      	mov	r1, r4
    1c76:	3708      	adds	r7, #8
    1c78:	46bd      	mov	sp, r7
    1c7a:	bc90      	pop	{r4, r7}
    1c7c:	4770      	bx	lr
    1c7e:	Address 0x0000000000001c7e is out of bounds.


00001c80 <vUartTask(void*)>:

#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"

void vUartTask(void *pvParameters)
{
    1c80:	b590      	push	{r4, r7, lr}
    1c82:	b08d      	sub	sp, #52	; 0x34
    1c84:	af02      	add	r7, sp, #8
    1c86:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	61fb      	str	r3, [r7, #28]
                              DefaultSystemController())
    1c8c:	f7ff f9da 	bl	1044 <sjsu::lpc40xx::DefaultSystemController()>
    1c90:	4603      	mov	r3, r0
  sjsu::lpc40xx::Uart uart2(sjsu::lpc40xx::Uart::Port::kUart2);
    1c92:	461a      	mov	r2, r3
    1c94:	f107 030c 	add.w	r3, r7, #12
    1c98:	492a      	ldr	r1, [pc, #168]	; (1d44 <vUartTask(void*)+0xc4>)
    1c9a:	4618      	mov	r0, r3
    1c9c:	f7ff fc16 	bl	14cc <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
  uart2.Initialize(38400);
    1ca0:	f107 030c 	add.w	r3, r7, #12
    1ca4:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    1ca8:	4618      	mov	r0, r3
    1caa:	f7ff fc29 	bl	1500 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  LOG_INFO("uart initialized");
    1cae:	2318      	movs	r3, #24
    1cb0:	4a25      	ldr	r2, [pc, #148]	; (1d48 <vUartTask(void*)+0xc8>)
    1cb2:	4926      	ldr	r1, [pc, #152]	; (1d4c <vUartTask(void*)+0xcc>)
    1cb4:	4826      	ldr	r0, [pc, #152]	; (1d50 <vUartTask(void*)+0xd0>)
    1cb6:	f002 ff11 	bl	4adc <printf>

  while(1)
  {
    // Send a float (Glove data) over UART
    for(int i = 0; i < NUM_FINGERS; i++)
    1cba:	2300      	movs	r3, #0
    1cbc:	627b      	str	r3, [r7, #36]	; 0x24
    1cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cc0:	2b01      	cmp	r3, #1
    1cc2:	dc3b      	bgt.n	1d3c <vUartTask(void*)+0xbc>
    {
      for(size_t j = 24; j > 0; j -= 8)
    1cc4:	2318      	movs	r3, #24
    1cc6:	623b      	str	r3, [r7, #32]
    1cc8:	6a3b      	ldr	r3, [r7, #32]
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d013      	beq.n	1cf6 <vUartTask(void*)+0x76>
      {
        uint8_t sendval = shared_mem->sen[i].ui >> j; 
    1cce:	69fb      	ldr	r3, [r7, #28]
    1cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cd2:	3202      	adds	r2, #2
    1cd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1cd8:	6a3b      	ldr	r3, [r7, #32]
    1cda:	fa22 f303 	lsr.w	r3, r2, r3
    1cde:	76fb      	strb	r3, [r7, #27]
        uart2.Write(sendval);
    1ce0:	7efa      	ldrb	r2, [r7, #27]
    1ce2:	f107 030c 	add.w	r3, r7, #12
    1ce6:	4611      	mov	r1, r2
    1ce8:	4618      	mov	r0, r3
    1cea:	f7ff f9b5 	bl	1058 <sjsu::Uart::Write(unsigned char) const>
      for(size_t j = 24; j > 0; j -= 8)
    1cee:	6a3b      	ldr	r3, [r7, #32]
    1cf0:	3b08      	subs	r3, #8
    1cf2:	623b      	str	r3, [r7, #32]
    1cf4:	e7e8      	b.n	1cc8 <vUartTask(void*)+0x48>
      }
      uart2.Write((uint8_t) shared_mem->sen[i].ui);
    1cf6:	69fb      	ldr	r3, [r7, #28]
    1cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cfa:	3202      	adds	r2, #2
    1cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1d00:	b2da      	uxtb	r2, r3
    1d02:	f107 030c 	add.w	r3, r7, #12
    1d06:	4611      	mov	r1, r2
    1d08:	4618      	mov	r0, r3
    1d0a:	f7ff f9a5 	bl	1058 <sjsu::Uart::Write(unsigned char) const>
      LOG_INFO("Sent value %f over UART", shared_mem->sen[i].f);
    1d0e:	69fa      	ldr	r2, [r7, #28]
    1d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d12:	3302      	adds	r3, #2
    1d14:	009b      	lsls	r3, r3, #2
    1d16:	4413      	add	r3, r2
    1d18:	681b      	ldr	r3, [r3, #0]
    1d1a:	4618      	mov	r0, r3
    1d1c:	f004 fda4 	bl	6868 <__aeabi_f2d>
    1d20:	4603      	mov	r3, r0
    1d22:	460c      	mov	r4, r1
    1d24:	e9cd 3400 	strd	r3, r4, [sp]
    1d28:	2325      	movs	r3, #37	; 0x25
    1d2a:	4a07      	ldr	r2, [pc, #28]	; (1d48 <vUartTask(void*)+0xc8>)
    1d2c:	4909      	ldr	r1, [pc, #36]	; (1d54 <vUartTask(void*)+0xd4>)
    1d2e:	480a      	ldr	r0, [pc, #40]	; (1d58 <vUartTask(void*)+0xd8>)
    1d30:	f002 fed4 	bl	4adc <printf>
    for(int i = 0; i < NUM_FINGERS; i++)
    1d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d36:	3301      	adds	r3, #1
    1d38:	627b      	str	r3, [r7, #36]	; 0x24
    1d3a:	e7c0      	b.n	1cbe <vUartTask(void*)+0x3e>
    }
    vTaskDelay(100);
    1d3c:	2064      	movs	r0, #100	; 0x64
    1d3e:	f001 f851 	bl	2de4 <vTaskDelay>
  }
    1d42:	e7ba      	b.n	1cba <vUartTask(void*)+0x3a>
    1d44:	1000000c 	.word	0x1000000c
    1d48:	000087f4 	.word	0x000087f4
    1d4c:	00008728 	.word	0x00008728
    1d50:	00008500 	.word	0x00008500
    1d54:	00008738 	.word	0x00008738
    1d58:	0000854c 	.word	0x0000854c

00001d5c <sjsu::Adc::Adc(sjsu::Adc const&)>:
    1d5c:	b480      	push	{r7}
    1d5e:	b083      	sub	sp, #12
    1d60:	af00      	add	r7, sp, #0
    1d62:	6078      	str	r0, [r7, #4]
    1d64:	6039      	str	r1, [r7, #0]
    1d66:	4a05      	ldr	r2, [pc, #20]	; (1d7c <sjsu::Adc::Adc(sjsu::Adc const&)+0x20>)
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	601a      	str	r2, [r3, #0]
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	4618      	mov	r0, r3
    1d70:	370c      	adds	r7, #12
    1d72:	46bd      	mov	sp, r7
    1d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d78:	4770      	bx	lr
    1d7a:	bf00      	nop
    1d7c:	00008774 	.word	0x00008774

00001d80 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>:
class Adc final : public sjsu::Adc
    1d80:	b580      	push	{r7, lr}
    1d82:	b082      	sub	sp, #8
    1d84:	af00      	add	r7, sp, #0
    1d86:	6078      	str	r0, [r7, #4]
    1d88:	6039      	str	r1, [r7, #0]
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	683a      	ldr	r2, [r7, #0]
    1d8e:	4611      	mov	r1, r2
    1d90:	4618      	mov	r0, r3
    1d92:	f7ff ffe3 	bl	1d5c <sjsu::Adc::Adc(sjsu::Adc const&)>
    1d96:	4a08      	ldr	r2, [pc, #32]	; (1db8 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)+0x38>)
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	601a      	str	r2, [r3, #0]
    1d9c:	683b      	ldr	r3, [r7, #0]
    1d9e:	685a      	ldr	r2, [r3, #4]
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	605a      	str	r2, [r3, #4]
    1da4:	683b      	ldr	r3, [r7, #0]
    1da6:	689a      	ldr	r2, [r3, #8]
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	609a      	str	r2, [r3, #8]
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	4618      	mov	r0, r3
    1db0:	3708      	adds	r7, #8
    1db2:	46bd      	mov	sp, r7
    1db4:	bd80      	pop	{r7, pc}
    1db6:	bf00      	nop
    1db8:	00008760 	.word	0x00008760

00001dbc <vPotentiometerTask(void*)>:
}

void vPotentiometerTask(void *pvParameters)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b092      	sub	sp, #72	; 0x48
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
  paramsStruct *shared_mem = (paramsStruct *) pvParameters;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
                             DefaultSystemController())
    1dc8:	f7ff f93c 	bl	1044 <sjsu::lpc40xx::DefaultSystemController()>
    1dcc:	4603      	mov	r3, r0

  sjsu::lpc40xx::Adc adc2(sjsu::lpc40xx::Adc::Channel::kChannel2);
    1dce:	461a      	mov	r2, r3
    1dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    1dd4:	4933      	ldr	r1, [pc, #204]	; (1ea4 <vPotentiometerTask(void*)+0xe8>)
    1dd6:	4618      	mov	r0, r3
    1dd8:	f7ff fd3e 	bl	1858 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
    1ddc:	f7ff f932 	bl	1044 <sjsu::lpc40xx::DefaultSystemController()>
    1de0:	4603      	mov	r3, r0
  sjsu::lpc40xx::Adc adc4(sjsu::lpc40xx::Adc::Channel::kChannel4);
    1de2:	461a      	mov	r2, r3
    1de4:	f107 0320 	add.w	r3, r7, #32
    1de8:	492f      	ldr	r1, [pc, #188]	; (1ea8 <vPotentiometerTask(void*)+0xec>)
    1dea:	4618      	mov	r0, r3
    1dec:	f7ff fd34 	bl	1858 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc::Channel_t const&, sjsu::SystemController const&)>
  sjsu::lpc40xx::Adc adc_arr[NUM_FINGERS] = {adc2, adc4};
    1df0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    1df4:	f107 0308 	add.w	r3, r7, #8
    1df8:	4611      	mov	r1, r2
    1dfa:	4618      	mov	r0, r3
    1dfc:	f7ff ffc0 	bl	1d80 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
    1e00:	f107 0220 	add.w	r2, r7, #32
    1e04:	f107 0308 	add.w	r3, r7, #8
    1e08:	330c      	adds	r3, #12
    1e0a:	4611      	mov	r1, r2
    1e0c:	4618      	mov	r0, r3
    1e0e:	f7ff ffb7 	bl	1d80 <sjsu::lpc40xx::Adc::Adc(sjsu::lpc40xx::Adc const&)>
  for(int i = 0; i < NUM_FINGERS; i++)
    1e12:	2300      	movs	r3, #0
    1e14:	647b      	str	r3, [r7, #68]	; 0x44
    1e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e18:	2b01      	cmp	r3, #1
    1e1a:	dc0e      	bgt.n	1e3a <vPotentiometerTask(void*)+0x7e>
  {
    adc_arr[i].Initialize();
    1e1c:	f107 0108 	add.w	r1, r7, #8
    1e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1e22:	4613      	mov	r3, r2
    1e24:	005b      	lsls	r3, r3, #1
    1e26:	4413      	add	r3, r2
    1e28:	009b      	lsls	r3, r3, #2
    1e2a:	440b      	add	r3, r1
    1e2c:	4618      	mov	r0, r3
    1e2e:	f7ff fd65 	bl	18fc <sjsu::lpc40xx::Adc::Initialize() const>
  for(int i = 0; i < NUM_FINGERS; i++)
    1e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e34:	3301      	adds	r3, #1
    1e36:	647b      	str	r3, [r7, #68]	; 0x44
    1e38:	e7ed      	b.n	1e16 <vPotentiometerTask(void*)+0x5a>
  }
  LOG_INFO("adc channels initialized");
    1e3a:	2336      	movs	r3, #54	; 0x36
    1e3c:	4a1b      	ldr	r2, [pc, #108]	; (1eac <vPotentiometerTask(void*)+0xf0>)
    1e3e:	491c      	ldr	r1, [pc, #112]	; (1eb0 <vPotentiometerTask(void*)+0xf4>)
    1e40:	481c      	ldr	r0, [pc, #112]	; (1eb4 <vPotentiometerTask(void*)+0xf8>)
    1e42:	f002 fe4b 	bl	4adc <printf>
  uint32_t glove_position = 0;
    1e46:	2300      	movs	r3, #0
    1e48:	63bb      	str	r3, [r7, #56]	; 0x38
  while(1)
  {
    for(int i = 0; i < NUM_FINGERS; i++)
    1e4a:	2300      	movs	r3, #0
    1e4c:	643b      	str	r3, [r7, #64]	; 0x40
    1e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1e50:	2b01      	cmp	r3, #1
    1e52:	dc22      	bgt.n	1e9a <vPotentiometerTask(void*)+0xde>
    {
      glove_position = adc_arr[i].Read();
    1e54:	f107 0108 	add.w	r1, r7, #8
    1e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1e5a:	4613      	mov	r3, r2
    1e5c:	005b      	lsls	r3, r3, #1
    1e5e:	4413      	add	r3, r2
    1e60:	009b      	lsls	r3, r3, #2
    1e62:	440b      	add	r3, r1
    1e64:	4618      	mov	r0, r3
    1e66:	f7ff fdd7 	bl	1a18 <sjsu::lpc40xx::Adc::Read() const>
    1e6a:	63b8      	str	r0, [r7, #56]	; 0x38
      shared_mem->sen[i].f = sjsu::Map(glove_position, 0, 4095, 0.0f, 3.3f);
    1e6c:	eddf 0a12 	vldr	s1, [pc, #72]	; 1eb8 <vPotentiometerTask(void*)+0xfc>
    1e70:	ed9f 0a12 	vldr	s0, [pc, #72]	; 1ebc <vPotentiometerTask(void*)+0x100>
    1e74:	f640 72ff 	movw	r2, #4095	; 0xfff
    1e78:	2100      	movs	r1, #0
    1e7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1e7c:	f000 f9d0 	bl	2220 <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>
    1e80:	eef0 7a40 	vmov.f32	s15, s0
    1e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1e88:	3302      	adds	r3, #2
    1e8a:	009b      	lsls	r3, r3, #2
    1e8c:	4413      	add	r3, r2
    1e8e:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < NUM_FINGERS; i++)
    1e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1e94:	3301      	adds	r3, #1
    1e96:	643b      	str	r3, [r7, #64]	; 0x40
    1e98:	e7d9      	b.n	1e4e <vPotentiometerTask(void*)+0x92>
    }
    vTaskDelay(100);
    1e9a:	2064      	movs	r0, #100	; 0x64
    1e9c:	f000 ffa2 	bl	2de4 <vTaskDelay>
  }
    1ea0:	e7d3      	b.n	1e4a <vPotentiometerTask(void*)+0x8e>
    1ea2:	bf00      	nop
    1ea4:	00008704 	.word	0x00008704
    1ea8:	0000870c 	.word	0x0000870c
    1eac:	00008954 	.word	0x00008954
    1eb0:	00008748 	.word	0x00008748
    1eb4:	000085a0 	.word	0x000085a0
    1eb8:	40533333 	.word	0x40533333
    1ebc:	00000000 	.word	0x00000000

00001ec0 <main>:

#include "third_party/FreeRTOS/Source/include/FreeRTOS.h"
#include "third_party/FreeRTOS/Source/include/task.h"

int main()
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b086      	sub	sp, #24
    1ec4:	af02      	add	r7, sp, #8
  paramsStruct pvParameters;

  xTaskCreate(vUartTask, "uart_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 2, &xUartTaskHandle);
    1ec6:	463a      	mov	r2, r7
    1ec8:	4b0e      	ldr	r3, [pc, #56]	; (1f04 <main+0x44>)
    1eca:	9301      	str	r3, [sp, #4]
    1ecc:	2302      	movs	r3, #2
    1ece:	9300      	str	r3, [sp, #0]
    1ed0:	4613      	mov	r3, r2
    1ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1ed6:	490c      	ldr	r1, [pc, #48]	; (1f08 <main+0x48>)
    1ed8:	480c      	ldr	r0, [pc, #48]	; (1f0c <main+0x4c>)
    1eda:	f000 fe55 	bl	2b88 <xTaskCreate>
  xTaskCreate(vPotentiometerTask, "potentiometer_task", 1024, (void *) &pvParameters, tskIDLE_PRIORITY + 1, &xPotentiometerTaskHandle);
    1ede:	463a      	mov	r2, r7
    1ee0:	4b0b      	ldr	r3, [pc, #44]	; (1f10 <main+0x50>)
    1ee2:	9301      	str	r3, [sp, #4]
    1ee4:	2301      	movs	r3, #1
    1ee6:	9300      	str	r3, [sp, #0]
    1ee8:	4613      	mov	r3, r2
    1eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1eee:	4909      	ldr	r1, [pc, #36]	; (1f14 <main+0x54>)
    1ef0:	4809      	ldr	r0, [pc, #36]	; (1f18 <main+0x58>)
    1ef2:	f000 fe49 	bl	2b88 <xTaskCreate>

  vTaskStartScheduler();
    1ef6:	f000 ff99 	bl	2e2c <vTaskStartScheduler>
}
    1efa:	2300      	movs	r3, #0
    1efc:	4618      	mov	r0, r3
    1efe:	3710      	adds	r7, #16
    1f00:	46bd      	mov	sp, r7
    1f02:	bd80      	pop	{r7, pc}
    1f04:	10000270 	.word	0x10000270
    1f08:	000085f4 	.word	0x000085f4
    1f0c:	00001c81 	.word	0x00001c81
    1f10:	10000274 	.word	0x10000274
    1f14:	00008600 	.word	0x00008600
    1f18:	00001dbd 	.word	0x00001dbd

00001f1c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	  ++__r;
	  return *this;
	}

	_GLIBCXX17_CONSTEXPR duration
	operator++(int)
    1f1c:	b590      	push	{r4, r7, lr}
    1f1e:	b087      	sub	sp, #28
    1f20:	af00      	add	r7, sp, #0
    1f22:	60f8      	str	r0, [r7, #12]
    1f24:	60b9      	str	r1, [r7, #8]
    1f26:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    1f28:	68bb      	ldr	r3, [r7, #8]
    1f2a:	e9d3 3400 	ldrd	r3, r4, [r3]
    1f2e:	1c59      	adds	r1, r3, #1
    1f30:	f144 0200 	adc.w	r2, r4, #0
    1f34:	68b8      	ldr	r0, [r7, #8]
    1f36:	e9c0 1200 	strd	r1, r2, [r0]
    1f3a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    1f3e:	f107 0310 	add.w	r3, r7, #16
    1f42:	4619      	mov	r1, r3
    1f44:	68f8      	ldr	r0, [r7, #12]
    1f46:	f7fe fb6d 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    1f4a:	68f8      	ldr	r0, [r7, #12]
    1f4c:	371c      	adds	r7, #28
    1f4e:	46bd      	mov	sp, r7
    1f50:	bd90      	pop	{r4, r7, pc}

00001f52 <std::chrono::duration_values<long long>::max()>:
	max()
    1f52:	b598      	push	{r3, r4, r7, lr}
    1f54:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    1f56:	f7fe fa07 	bl	368 <std::numeric_limits<long long>::max()>
    1f5a:	4603      	mov	r3, r0
    1f5c:	460c      	mov	r4, r1
    1f5e:	4618      	mov	r0, r3
    1f60:	4621      	mov	r1, r4
    1f62:	bd98      	pop	{r3, r4, r7, pc}

00001f64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	static constexpr duration
	min()
	{ return duration(duration_values<rep>::min()); }

	static constexpr duration
	max()
    1f64:	b590      	push	{r4, r7, lr}
    1f66:	b085      	sub	sp, #20
    1f68:	af00      	add	r7, sp, #0
    1f6a:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    1f6c:	f7ff fff1 	bl	1f52 <std::chrono::duration_values<long long>::max()>
    1f70:	4603      	mov	r3, r0
    1f72:	460c      	mov	r4, r1
    1f74:	e9c7 3402 	strd	r3, r4, [r7, #8]
    1f78:	f107 0308 	add.w	r3, r7, #8
    1f7c:	4619      	mov	r1, r3
    1f7e:	6878      	ldr	r0, [r7, #4]
    1f80:	f7fe fb50 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    1f84:	6878      	ldr	r0, [r7, #4]
    1f86:	3714      	adds	r7, #20
    1f88:	46bd      	mov	sp, r7
    1f8a:	bd90      	pop	{r4, r7, pc}

00001f8c <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    // comparisons
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8e:	b087      	sub	sp, #28
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
    1f94:	6039      	str	r1, [r7, #0]
		 const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() == __ct(__rhs).count();
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	e9d3 3400 	ldrd	r3, r4, [r3]
    1f9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    1fa0:	f107 0308 	add.w	r3, r7, #8
    1fa4:	4618      	mov	r0, r3
    1fa6:	f7ff fe5d 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1faa:	4605      	mov	r5, r0
    1fac:	460e      	mov	r6, r1
    1fae:	683b      	ldr	r3, [r7, #0]
    1fb0:	e9d3 3400 	ldrd	r3, r4, [r3]
    1fb4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    1fb8:	f107 0310 	add.w	r3, r7, #16
    1fbc:	4618      	mov	r0, r3
    1fbe:	f7ff fe51 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1fc2:	4603      	mov	r3, r0
    1fc4:	460c      	mov	r4, r1
    1fc6:	42a6      	cmp	r6, r4
    1fc8:	bf06      	itte	eq
    1fca:	429d      	cmpeq	r5, r3
    1fcc:	2301      	moveq	r3, #1
    1fce:	2300      	movne	r3, #0
    1fd0:	b2db      	uxtb	r3, r3
      }
    1fd2:	4618      	mov	r0, r3
    1fd4:	371c      	adds	r7, #28
    1fd6:	46bd      	mov	sp, r7
    1fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fda <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1fda:	b580      	push	{r7, lr}
    1fdc:	b084      	sub	sp, #16
    1fde:	af00      	add	r7, sp, #0
    1fe0:	60f8      	str	r0, [r7, #12]
    1fe2:	460b      	mov	r3, r1
    1fe4:	80ba      	strh	r2, [r7, #4]
    1fe6:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    1fe8:	793b      	ldrb	r3, [r7, #4]
    1fea:	461a      	mov	r2, r3
    1fec:	797b      	ldrb	r3, [r7, #5]
    1fee:	7af9      	ldrb	r1, [r7, #11]
    1ff0:	68f8      	ldr	r0, [r7, #12]
    1ff2:	f000 f9b7 	bl	2364 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    1ff6:	4603      	mov	r3, r0
}
    1ff8:	4618      	mov	r0, r3
    1ffa:	3710      	adds	r7, #16
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bd80      	pop	{r7, pc}

00002000 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    2000:	b580      	push	{r7, lr}
    2002:	b084      	sub	sp, #16
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
    2008:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    200a:	687b      	ldr	r3, [r7, #4]
    200c:	4618      	mov	r0, r3
    200e:	f7fe fe0b 	bl	c28 <units::linear_scale<float>::operator()() const>
    2012:	eef0 6a40 	vmov.f32	s13, s0
    2016:	683b      	ldr	r3, [r7, #0]
    2018:	ee07 3a90 	vmov	s15, r3
    201c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    2024:	f107 030c 	add.w	r3, r7, #12
    2028:	eeb0 0a47 	vmov.f32	s0, s14
    202c:	4618      	mov	r0, r3
    202e:	f7fe f9fd 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2032:	68fb      	ldr	r3, [r7, #12]
	}
    2034:	4618      	mov	r0, r3
    2036:	3710      	adds	r7, #16
    2038:	46bd      	mov	sp, r7
    203a:	bd80      	pop	{r7, pc}

0000203c <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    203c:	b580      	push	{r7, lr}
    203e:	ed2d 8b02 	vpush	{d8}
    2042:	b082      	sub	sp, #8
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
    2048:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	ed93 8a00 	vldr	s16, [r3]
    2050:	683b      	ldr	r3, [r7, #0]
    2052:	4618      	mov	r0, r3
    2054:	f7fe f9ca 	bl	3ec <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2058:	eef0 7a40 	vmov.f32	s15, s0
    205c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2064:	bfcc      	ite	gt
    2066:	2301      	movgt	r3, #1
    2068:	2300      	movle	r3, #0
    206a:	b2db      	uxtb	r3, r3
		}
    206c:	4618      	mov	r0, r3
    206e:	3708      	adds	r7, #8
    2070:	46bd      	mov	sp, r7
    2072:	ecbd 8b02 	vpop	{d8}
    2076:	bd80      	pop	{r7, pc}

00002078 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    2078:	b580      	push	{r7, lr}
    207a:	b082      	sub	sp, #8
    207c:	af00      	add	r7, sp, #0
    207e:	6078      	str	r0, [r7, #4]
    2080:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    2082:	683b      	ldr	r3, [r7, #0]
    2084:	4618      	mov	r0, r3
    2086:	f7fe fbf1 	bl	86c <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    208a:	eef0 7a40 	vmov.f32	s15, s0
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    2094:	687b      	ldr	r3, [r7, #4]
		}
    2096:	4618      	mov	r0, r3
    2098:	3708      	adds	r7, #8
    209a:	46bd      	mov	sp, r7
    209c:	bd80      	pop	{r7, pc}

0000209e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0001'1001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 1
template <typename T>
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    209e:	b480      	push	{r7}
    20a0:	b083      	sub	sp, #12
    20a2:	af00      	add	r7, sp, #0
    20a4:	6078      	str	r0, [r7, #4]
    20a6:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return static_cast<T>(target | (1 << position));
    20a8:	2201      	movs	r2, #1
    20aa:	683b      	ldr	r3, [r7, #0]
    20ac:	fa02 f303 	lsl.w	r3, r2, r3
    20b0:	461a      	mov	r2, r3
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	4313      	orrs	r3, r2
}
    20b6:	4618      	mov	r0, r3
    20b8:	370c      	adds	r7, #12
    20ba:	46bd      	mov	sp, r7
    20bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    20c0:	4770      	bx	lr

000020c2 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    20c2:	b480      	push	{r7}
    20c4:	b083      	sub	sp, #12
    20c6:	af00      	add	r7, sp, #0
    20c8:	6078      	str	r0, [r7, #4]
    20ca:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    20cc:	2201      	movs	r2, #1
    20ce:	683b      	ldr	r3, [r7, #0]
    20d0:	fa02 f303 	lsl.w	r3, r2, r3
    20d4:	43db      	mvns	r3, r3
    20d6:	461a      	mov	r2, r3
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	4013      	ands	r3, r2
}
    20dc:	4618      	mov	r0, r3
    20de:	370c      	adds	r7, #12
    20e0:	46bd      	mov	sp, r7
    20e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    20e6:	4770      	bx	lr

000020e8 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    20e8:	b580      	push	{r7, lr}
    20ea:	b084      	sub	sp, #16
    20ec:	af00      	add	r7, sp, #0
    20ee:	60f8      	str	r0, [r7, #12]
    20f0:	60b9      	str	r1, [r7, #8]
    20f2:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    20f4:	793b      	ldrb	r3, [r7, #4]
    20f6:	461a      	mov	r2, r3
    20f8:	797b      	ldrb	r3, [r7, #5]
    20fa:	68b9      	ldr	r1, [r7, #8]
    20fc:	68f8      	ldr	r0, [r7, #12]
    20fe:	f000 f95e 	bl	23be <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    2102:	4603      	mov	r3, r0
}
    2104:	4618      	mov	r0, r3
    2106:	3710      	adds	r7, #16
    2108:	46bd      	mov	sp, r7
    210a:	bd80      	pop	{r7, pc}

0000210c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    210c:	b580      	push	{r7, lr}
    210e:	b084      	sub	sp, #16
    2110:	af00      	add	r7, sp, #0
    2112:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	4618      	mov	r0, r3
    2118:	f7fe fd86 	bl	c28 <units::linear_scale<float>::operator()() const>
    211c:	eef0 7a40 	vmov.f32	s15, s0
    2120:	edc7 7a03 	vstr	s15, [r7, #12]
    2124:	f107 030c 	add.w	r3, r7, #12
    2128:	4618      	mov	r0, r3
    212a:	f000 f974 	bl	2416 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    212e:	eef0 7a40 	vmov.f32	s15, s0
    2132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2136:	ee17 3a90 	vmov	r3, s15
		}
    213a:	4618      	mov	r0, r3
    213c:	3710      	adds	r7, #16
    213e:	46bd      	mov	sp, r7
    2140:	bd80      	pop	{r7, pc}

00002142 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2142:	b480      	push	{r7}
    2144:	b083      	sub	sp, #12
    2146:	af00      	add	r7, sp, #0
    2148:	6078      	str	r0, [r7, #4]
    214a:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    214c:	2201      	movs	r2, #1
    214e:	683b      	ldr	r3, [r7, #0]
    2150:	fa02 f303 	lsl.w	r3, r2, r3
    2154:	461a      	mov	r2, r3
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	4013      	ands	r3, r2
    215a:	2b00      	cmp	r3, #0
    215c:	bf14      	ite	ne
    215e:	2301      	movne	r3, #1
    2160:	2300      	moveq	r3, #0
    2162:	b2db      	uxtb	r3, r3
}
    2164:	4618      	mov	r0, r3
    2166:	370c      	adds	r7, #12
    2168:	46bd      	mov	sp, r7
    216a:	f85d 7b04 	ldr.w	r7, [sp], #4
    216e:	4770      	bx	lr

00002170 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2170:	b480      	push	{r7}
    2172:	b083      	sub	sp, #12
    2174:	af00      	add	r7, sp, #0
    2176:	4603      	mov	r3, r0
    2178:	6039      	str	r1, [r7, #0]
    217a:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    217c:	79fa      	ldrb	r2, [r7, #7]
    217e:	683b      	ldr	r3, [r7, #0]
    2180:	fa42 f303 	asr.w	r3, r2, r3
    2184:	f003 0301 	and.w	r3, r3, #1
    2188:	2b00      	cmp	r3, #0
    218a:	bf14      	ite	ne
    218c:	2301      	movne	r3, #1
    218e:	2300      	moveq	r3, #0
    2190:	b2db      	uxtb	r3, r3
}
    2192:	4618      	mov	r0, r3
    2194:	370c      	adds	r7, #12
    2196:	46bd      	mov	sp, r7
    2198:	f85d 7b04 	ldr.w	r7, [sp], #4
    219c:	4770      	bx	lr

0000219e <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// exmaple, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    219e:	b580      	push	{r7, lr}
    21a0:	b082      	sub	sp, #8
    21a2:	af00      	add	r7, sp, #0
    21a4:	6078      	str	r0, [r7, #4]
    21a6:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    21a8:	783b      	ldrb	r3, [r7, #0]
    21aa:	4619      	mov	r1, r3
    21ac:	6878      	ldr	r0, [r7, #4]
    21ae:	f7ff ffc8 	bl	2142 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    21b2:	4603      	mov	r3, r0
}
    21b4:	4618      	mov	r0, r3
    21b6:	3708      	adds	r7, #8
    21b8:	46bd      	mov	sp, r7
    21ba:	bd80      	pop	{r7, pc}

000021bc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    21bc:	b580      	push	{r7, lr}
    21be:	b082      	sub	sp, #8
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    21c6:	783b      	ldrb	r3, [r7, #0]
    21c8:	4619      	mov	r1, r3
    21ca:	6878      	ldr	r0, [r7, #4]
    21cc:	f7ff ff67 	bl	209e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    21d0:	4603      	mov	r3, r0
}
    21d2:	4618      	mov	r0, r3
    21d4:	3708      	adds	r7, #8
    21d6:	46bd      	mov	sp, r7
    21d8:	bd80      	pop	{r7, pc}

000021da <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Extract(T target, Mask bitmask)
    21da:	b580      	push	{r7, lr}
    21dc:	b082      	sub	sp, #8
    21de:	af00      	add	r7, sp, #0
    21e0:	6078      	str	r0, [r7, #4]
    21e2:	8039      	strh	r1, [r7, #0]
  return Extract(target, bitmask.position, bitmask.width);
    21e4:	783b      	ldrb	r3, [r7, #0]
    21e6:	4619      	mov	r1, r3
    21e8:	787b      	ldrb	r3, [r7, #1]
    21ea:	461a      	mov	r2, r3
    21ec:	6878      	ldr	r0, [r7, #4]
    21ee:	f000 f920 	bl	2432 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>
    21f2:	4603      	mov	r3, r0
}
    21f4:	4618      	mov	r0, r3
    21f6:	3708      	adds	r7, #8
    21f8:	46bd      	mov	sp, r7
    21fa:	bd80      	pop	{r7, pc}

000021fc <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    21fc:	b580      	push	{r7, lr}
    21fe:	b084      	sub	sp, #16
    2200:	af00      	add	r7, sp, #0
    2202:	60f8      	str	r0, [r7, #12]
    2204:	60b9      	str	r1, [r7, #8]
    2206:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    2208:	793b      	ldrb	r3, [r7, #4]
    220a:	461a      	mov	r2, r3
    220c:	797b      	ldrb	r3, [r7, #5]
    220e:	68b9      	ldr	r1, [r7, #8]
    2210:	68f8      	ldr	r0, [r7, #12]
    2212:	f000 f92c 	bl	246e <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    2216:	4603      	mov	r3, r0
}
    2218:	4618      	mov	r0, r3
    221a:	3710      	adds	r7, #16
    221c:	46bd      	mov	sp, r7
    221e:	bd80      	pop	{r7, pc}

00002220 <float sjsu::Map<unsigned long, int, float>(unsigned long, int, int, float, float)>:
/// @param min - current minimum value that the value can reach
/// @param max - current maximum value that the value can reach
/// @param new_min - the new minimum value to scale and shift the old value to
/// @param new_max - the new maximum value to scale and shift the old value to
template <typename Input, typename Range, typename NewRange>
constexpr NewRange Map(Input value, Range min, Range max, NewRange new_min,
    2220:	b480      	push	{r7}
    2222:	b08f      	sub	sp, #60	; 0x3c
    2224:	af00      	add	r7, sp, #0
    2226:	6178      	str	r0, [r7, #20]
    2228:	6139      	str	r1, [r7, #16]
    222a:	60fa      	str	r2, [r7, #12]
    222c:	ed87 0a02 	vstr	s0, [r7, #8]
    2230:	edc7 0a01 	vstr	s1, [r7, #4]
                "min and max variable types must be an arithmetic type (like "
                "int, char, float, etc).");
  static_assert(std::is_arithmetic<Range>::value,
                "new_min and new_max variable types must be an arithmetic type "
                "(like int, char, float, etc).");
  float map_value   = static_cast<float>(value);
    2234:	697b      	ldr	r3, [r7, #20]
    2236:	ee07 3a90 	vmov	s15, r3
    223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    223e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float map_min     = static_cast<float>(min);
    2242:	693b      	ldr	r3, [r7, #16]
    2244:	ee07 3a90 	vmov	s15, r3
    2248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    224c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float map_max     = static_cast<float>(max);
    2250:	68fb      	ldr	r3, [r7, #12]
    2252:	ee07 3a90 	vmov	s15, r3
    2256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    225a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float map_new_min = static_cast<float>(new_min);
    225e:	68bb      	ldr	r3, [r7, #8]
    2260:	62bb      	str	r3, [r7, #40]	; 0x28
  float map_new_max = static_cast<float>(new_max);
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	627b      	str	r3, [r7, #36]	; 0x24
  float range_ratio = (map_new_max - map_new_min) / (map_max - map_min);
    2266:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
    226a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    226e:	ee77 6a67 	vsub.f32	s13, s14, s15
    2272:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    2276:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    227a:	ee37 7a67 	vsub.f32	s14, s14, s15
    227e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    2282:	edc7 7a08 	vstr	s15, [r7, #32]
  float mapped      = ((map_value - map_min) * range_ratio) + map_new_min;
    2286:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
    228a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    228e:	ee37 7a67 	vsub.f32	s14, s14, s15
    2292:	edd7 7a08 	vldr	s15, [r7, #32]
    2296:	ee67 7a27 	vmul.f32	s15, s14, s15
    229a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    229e:	ee77 7a27 	vadd.f32	s15, s14, s15
    22a2:	edc7 7a07 	vstr	s15, [r7, #28]
  return static_cast<NewRange>(mapped);
    22a6:	69fb      	ldr	r3, [r7, #28]
    22a8:	ee07 3a90 	vmov	s15, r3
};
    22ac:	eeb0 0a67 	vmov.f32	s0, s15
    22b0:	373c      	adds	r7, #60	; 0x3c
    22b2:	46bd      	mov	sp, r7
    22b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    22b8:	4770      	bx	lr

000022ba <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    22ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    22bc:	b08b      	sub	sp, #44	; 0x2c
    22be:	af00      	add	r7, sp, #0
    22c0:	60f8      	str	r0, [r7, #12]
    22c2:	60b9      	str	r1, [r7, #8]
    22c4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    22c6:	68bb      	ldr	r3, [r7, #8]
    22c8:	e9d3 3400 	ldrd	r3, r4, [r3]
    22cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
    22d0:	f107 0318 	add.w	r3, r7, #24
    22d4:	4618      	mov	r0, r3
    22d6:	f7ff fcc5 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    22da:	4605      	mov	r5, r0
    22dc:	460e      	mov	r6, r1
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    22e4:	e9c7 3408 	strd	r3, r4, [r7, #32]
    22e8:	f107 0320 	add.w	r3, r7, #32
    22ec:	4618      	mov	r0, r3
    22ee:	f7ff fcb9 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    22f2:	460a      	mov	r2, r1
    22f4:	4601      	mov	r1, r0
    22f6:	194b      	adds	r3, r1, r5
    22f8:	eb42 0406 	adc.w	r4, r2, r6
    22fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2300:	f107 0310 	add.w	r3, r7, #16
    2304:	4619      	mov	r1, r3
    2306:	68f8      	ldr	r0, [r7, #12]
    2308:	f7fe f98c 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    230c:	68f8      	ldr	r0, [r7, #12]
    230e:	372c      	adds	r7, #44	; 0x2c
    2310:	46bd      	mov	sp, r7
    2312:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002314 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
    2314:	b5f0      	push	{r4, r5, r6, r7, lr}
    2316:	b087      	sub	sp, #28
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    231c:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	e9d3 3400 	ldrd	r3, r4, [r3]
    2324:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2328:	f107 0308 	add.w	r3, r7, #8
    232c:	4618      	mov	r0, r3
    232e:	f7ff fc99 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2332:	4605      	mov	r5, r0
    2334:	460e      	mov	r6, r1
    2336:	683b      	ldr	r3, [r7, #0]
    2338:	e9d3 3400 	ldrd	r3, r4, [r3]
    233c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    2340:	f107 0310 	add.w	r3, r7, #16
    2344:	4618      	mov	r0, r3
    2346:	f7ff fc8d 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    234a:	4603      	mov	r3, r0
    234c:	460c      	mov	r4, r1
    234e:	429d      	cmp	r5, r3
    2350:	eb76 0304 	sbcs.w	r3, r6, r4
    2354:	bfb4      	ite	lt
    2356:	2301      	movlt	r3, #1
    2358:	2300      	movge	r3, #0
    235a:	b2db      	uxtb	r3, r3
      }
    235c:	4618      	mov	r0, r3
    235e:	371c      	adds	r7, #28
    2360:	46bd      	mov	sp, r7
    2362:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002364 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2364:	b480      	push	{r7}
    2366:	b089      	sub	sp, #36	; 0x24
    2368:	af00      	add	r7, sp, #0
    236a:	60f8      	str	r0, [r7, #12]
    236c:	607a      	str	r2, [r7, #4]
    236e:	603b      	str	r3, [r7, #0]
    2370:	460b      	mov	r3, r1
    2372:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2378:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    237a:	2320      	movs	r3, #32
    237c:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    237e:	683b      	ldr	r3, [r7, #0]
    2380:	f1c3 0320 	rsb	r3, r3, #32
    2384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2388:	fa22 f303 	lsr.w	r3, r2, r3
    238c:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    238e:	697a      	ldr	r2, [r7, #20]
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	fa02 f303 	lsl.w	r3, r2, r3
    2396:	43db      	mvns	r3, r3
    2398:	68fa      	ldr	r2, [r7, #12]
    239a:	4013      	ands	r3, r2
    239c:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    239e:	7afa      	ldrb	r2, [r7, #11]
    23a0:	697b      	ldr	r3, [r7, #20]
    23a2:	401a      	ands	r2, r3
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	fa02 f303 	lsl.w	r3, r2, r3
    23aa:	68fa      	ldr	r2, [r7, #12]
    23ac:	4313      	orrs	r3, r2
    23ae:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    23b0:	68fb      	ldr	r3, [r7, #12]
}
    23b2:	4618      	mov	r0, r3
    23b4:	3724      	adds	r7, #36	; 0x24
    23b6:	46bd      	mov	sp, r7
    23b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23bc:	4770      	bx	lr

000023be <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    23be:	b480      	push	{r7}
    23c0:	b089      	sub	sp, #36	; 0x24
    23c2:	af00      	add	r7, sp, #0
    23c4:	60f8      	str	r0, [r7, #12]
    23c6:	60b9      	str	r1, [r7, #8]
    23c8:	607a      	str	r2, [r7, #4]
    23ca:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    23cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23d0:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    23d2:	2320      	movs	r3, #32
    23d4:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    23d6:	683b      	ldr	r3, [r7, #0]
    23d8:	f1c3 0320 	rsb	r3, r3, #32
    23dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    23e0:	fa22 f303 	lsr.w	r3, r2, r3
    23e4:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    23e6:	697a      	ldr	r2, [r7, #20]
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	fa02 f303 	lsl.w	r3, r2, r3
    23ee:	43db      	mvns	r3, r3
    23f0:	68fa      	ldr	r2, [r7, #12]
    23f2:	4013      	ands	r3, r2
    23f4:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    23f6:	68ba      	ldr	r2, [r7, #8]
    23f8:	697b      	ldr	r3, [r7, #20]
    23fa:	401a      	ands	r2, r3
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	fa02 f303 	lsl.w	r3, r2, r3
    2402:	68fa      	ldr	r2, [r7, #12]
    2404:	4313      	orrs	r3, r2
    2406:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2408:	68fb      	ldr	r3, [r7, #12]
}
    240a:	4618      	mov	r0, r3
    240c:	3724      	adds	r7, #36	; 0x24
    240e:	46bd      	mov	sp, r7
    2410:	f85d 7b04 	ldr.w	r7, [sp], #4
    2414:	4770      	bx	lr

00002416 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2416:	b580      	push	{r7, lr}
    2418:	b086      	sub	sp, #24
    241a:	af00      	add	r7, sp, #0
    241c:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    241e:	6878      	ldr	r0, [r7, #4]
    2420:	f000 f851 	bl	24c6 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2424:	eef0 7a40 	vmov.f32	s15, s0
	}
    2428:	eeb0 0a67 	vmov.f32	s0, s15
    242c:	3718      	adds	r7, #24
    242e:	46bd      	mov	sp, r7
    2430:	bd80      	pop	{r7, pc}

00002432 <unsigned long sjsu::bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Extract(T target,
    2432:	b480      	push	{r7}
    2434:	b089      	sub	sp, #36	; 0x24
    2436:	af00      	add	r7, sp, #0
    2438:	60f8      	str	r0, [r7, #12]
    243a:	60b9      	str	r1, [r7, #8]
    243c:	607a      	str	r2, [r7, #4]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2442:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2444:	2320      	movs	r3, #32
    2446:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	f1c3 0320 	rsb	r3, r3, #32
    244e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2452:	fa22 f303 	lsr.w	r3, r2, r3
    2456:	617b      	str	r3, [r7, #20]
  return static_cast<T>((target >> position) & mask);
    2458:	68fa      	ldr	r2, [r7, #12]
    245a:	68bb      	ldr	r3, [r7, #8]
    245c:	40da      	lsrs	r2, r3
    245e:	697b      	ldr	r3, [r7, #20]
    2460:	4013      	ands	r3, r2
}
    2462:	4618      	mov	r0, r3
    2464:	3724      	adds	r7, #36	; 0x24
    2466:	46bd      	mov	sp, r7
    2468:	f85d 7b04 	ldr.w	r7, [sp], #4
    246c:	4770      	bx	lr

0000246e <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    246e:	b480      	push	{r7}
    2470:	b089      	sub	sp, #36	; 0x24
    2472:	af00      	add	r7, sp, #0
    2474:	60f8      	str	r0, [r7, #12]
    2476:	60b9      	str	r1, [r7, #8]
    2478:	607a      	str	r2, [r7, #4]
    247a:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    247c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2480:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2482:	2320      	movs	r3, #32
    2484:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2486:	683b      	ldr	r3, [r7, #0]
    2488:	f1c3 0320 	rsb	r3, r3, #32
    248c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2490:	fa22 f303 	lsr.w	r3, r2, r3
    2494:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2496:	697a      	ldr	r2, [r7, #20]
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	fa02 f303 	lsl.w	r3, r2, r3
    249e:	43db      	mvns	r3, r3
    24a0:	68fa      	ldr	r2, [r7, #12]
    24a2:	4013      	ands	r3, r2
    24a4:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    24a6:	68ba      	ldr	r2, [r7, #8]
    24a8:	697b      	ldr	r3, [r7, #20]
    24aa:	401a      	ands	r2, r3
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	fa02 f303 	lsl.w	r3, r2, r3
    24b2:	68fa      	ldr	r2, [r7, #12]
    24b4:	4313      	orrs	r3, r2
    24b6:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    24b8:	68fb      	ldr	r3, [r7, #12]
}
    24ba:	4618      	mov	r0, r3
    24bc:	3724      	adds	r7, #36	; 0x24
    24be:	46bd      	mov	sp, r7
    24c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c4:	4770      	bx	lr

000024c6 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    24c6:	b480      	push	{r7}
    24c8:	b085      	sub	sp, #20
    24ca:	af00      	add	r7, sp, #0
    24cc:	60f8      	str	r0, [r7, #12]
    24ce:	7239      	strb	r1, [r7, #8]
    24d0:	713a      	strb	r2, [r7, #4]
    24d2:	703b      	strb	r3, [r7, #0]
			return value;
    24d4:	68fb      	ldr	r3, [r7, #12]
    24d6:	681b      	ldr	r3, [r3, #0]
    24d8:	ee07 3a90 	vmov	s15, r3
		}
    24dc:	eeb0 0a67 	vmov.f32	s0, s15
    24e0:	3714      	adds	r7, #20
    24e2:	46bd      	mov	sp, r7
    24e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e8:	4770      	bx	lr
    24ea:	Address 0x00000000000024ea is out of bounds.


000024ec <__static_initialization_and_destruction_0(int, int)>:
    24ec:	b580      	push	{r7, lr}
    24ee:	b082      	sub	sp, #8
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]
    24f4:	6039      	str	r1, [r7, #0]
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	2b01      	cmp	r3, #1
    24fa:	f040 80c4 	bne.w	2686 <__static_initialization_and_destruction_0(int, int)+0x19a>
    24fe:	683b      	ldr	r3, [r7, #0]
    2500:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2504:	4293      	cmp	r3, r2
    2506:	f040 80be 	bne.w	2686 <__static_initialization_and_destruction_0(int, int)+0x19a>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    250a:	4b61      	ldr	r3, [pc, #388]	; (2690 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	f003 0301 	and.w	r3, r3, #1
    2512:	2b00      	cmp	r3, #0
    2514:	d105      	bne.n	2522 <__static_initialization_and_destruction_0(int, int)+0x36>
    2516:	4b5e      	ldr	r3, [pc, #376]	; (2690 <__static_initialization_and_destruction_0(int, int)+0x1a4>)
    2518:	2201      	movs	r2, #1
    251a:	601a      	str	r2, [r3, #0]
    251c:	4a5d      	ldr	r2, [pc, #372]	; (2694 <__static_initialization_and_destruction_0(int, int)+0x1a8>)
    251e:	4b5e      	ldr	r3, [pc, #376]	; (2698 <__static_initialization_and_destruction_0(int, int)+0x1ac>)
    2520:	601a      	str	r2, [r3, #0]
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    2522:	4b5e      	ldr	r3, [pc, #376]	; (269c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	f003 0301 	and.w	r3, r3, #1
    252a:	2b00      	cmp	r3, #0
    252c:	d105      	bne.n	253a <__static_initialization_and_destruction_0(int, int)+0x4e>
    252e:	4b5b      	ldr	r3, [pc, #364]	; (269c <__static_initialization_and_destruction_0(int, int)+0x1b0>)
    2530:	2201      	movs	r2, #1
    2532:	601a      	str	r2, [r3, #0]
    2534:	4a5a      	ldr	r2, [pc, #360]	; (26a0 <__static_initialization_and_destruction_0(int, int)+0x1b4>)
    2536:	4b5b      	ldr	r3, [pc, #364]	; (26a4 <__static_initialization_and_destruction_0(int, int)+0x1b8>)
    2538:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    253a:	4b5b      	ldr	r3, [pc, #364]	; (26a8 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	f003 0301 	and.w	r3, r3, #1
    2542:	2b00      	cmp	r3, #0
    2544:	d105      	bne.n	2552 <__static_initialization_and_destruction_0(int, int)+0x66>
    2546:	4b58      	ldr	r3, [pc, #352]	; (26a8 <__static_initialization_and_destruction_0(int, int)+0x1bc>)
    2548:	2201      	movs	r2, #1
    254a:	601a      	str	r2, [r3, #0]
    };
    254c:	4a57      	ldr	r2, [pc, #348]	; (26ac <__static_initialization_and_destruction_0(int, int)+0x1c0>)
    254e:	4b58      	ldr	r3, [pc, #352]	; (26b0 <__static_initialization_and_destruction_0(int, int)+0x1c4>)
    2550:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    2552:	4b58      	ldr	r3, [pc, #352]	; (26b4 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2554:	681b      	ldr	r3, [r3, #0]
    2556:	f003 0301 	and.w	r3, r3, #1
    255a:	2b00      	cmp	r3, #0
    255c:	d105      	bne.n	256a <__static_initialization_and_destruction_0(int, int)+0x7e>
    255e:	4b55      	ldr	r3, [pc, #340]	; (26b4 <__static_initialization_and_destruction_0(int, int)+0x1c8>)
    2560:	2201      	movs	r2, #1
    2562:	601a      	str	r2, [r3, #0]
    };
    2564:	4a54      	ldr	r2, [pc, #336]	; (26b8 <__static_initialization_and_destruction_0(int, int)+0x1cc>)
    2566:	4b55      	ldr	r3, [pc, #340]	; (26bc <__static_initialization_and_destruction_0(int, int)+0x1d0>)
    2568:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    256a:	4b55      	ldr	r3, [pc, #340]	; (26c0 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    256c:	681b      	ldr	r3, [r3, #0]
    256e:	f003 0301 	and.w	r3, r3, #1
    2572:	2b00      	cmp	r3, #0
    2574:	d105      	bne.n	2582 <__static_initialization_and_destruction_0(int, int)+0x96>
    2576:	4b52      	ldr	r3, [pc, #328]	; (26c0 <__static_initialization_and_destruction_0(int, int)+0x1d4>)
    2578:	2201      	movs	r2, #1
    257a:	601a      	str	r2, [r3, #0]
    };
    257c:	4a51      	ldr	r2, [pc, #324]	; (26c4 <__static_initialization_and_destruction_0(int, int)+0x1d8>)
    257e:	4b52      	ldr	r3, [pc, #328]	; (26c8 <__static_initialization_and_destruction_0(int, int)+0x1dc>)
    2580:	601a      	str	r2, [r3, #0]
  inline static LPC_ADC_TypeDef * adc_base = LPC_ADC;
    2582:	4b52      	ldr	r3, [pc, #328]	; (26cc <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2584:	681b      	ldr	r3, [r3, #0]
    2586:	f003 0301 	and.w	r3, r3, #1
    258a:	2b00      	cmp	r3, #0
    258c:	d105      	bne.n	259a <__static_initialization_and_destruction_0(int, int)+0xae>
    258e:	4b4f      	ldr	r3, [pc, #316]	; (26cc <__static_initialization_and_destruction_0(int, int)+0x1e0>)
    2590:	2201      	movs	r2, #1
    2592:	601a      	str	r2, [r3, #0]
    2594:	4a4e      	ldr	r2, [pc, #312]	; (26d0 <__static_initialization_and_destruction_0(int, int)+0x1e4>)
    2596:	4b4f      	ldr	r3, [pc, #316]	; (26d4 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
    2598:	601a      	str	r2, [r3, #0]
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    259a:	4b4f      	ldr	r3, [pc, #316]	; (26d8 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    259c:	681b      	ldr	r3, [r3, #0]
    259e:	f003 0301 	and.w	r3, r3, #1
    25a2:	2b00      	cmp	r3, #0
    25a4:	d106      	bne.n	25b4 <__static_initialization_and_destruction_0(int, int)+0xc8>
    25a6:	4b4c      	ldr	r3, [pc, #304]	; (26d8 <__static_initialization_and_destruction_0(int, int)+0x1ec>)
    25a8:	2201      	movs	r2, #1
    25aa:	601a      	str	r2, [r3, #0]
    25ac:	4b4b      	ldr	r3, [pc, #300]	; (26dc <__static_initialization_and_destruction_0(int, int)+0x1f0>)
    25ae:	4618      	mov	r0, r3
    25b0:	f7ff fb1e 	bl	1bf0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  /// The number of ports that generate gpio interrupts.
  static constexpr uint8_t kNumberOfInterruptPorts = 2;
  /// Mode zero is the GPIO function for all pins.
  static constexpr uint8_t kGpioFunction = 0;
  /// Table of GPIO ports located in LPC memory map.
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    25b4:	4b4a      	ldr	r3, [pc, #296]	; (26e0 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	f003 0301 	and.w	r3, r3, #1
    25bc:	2b00      	cmp	r3, #0
    25be:	d114      	bne.n	25ea <__static_initialization_and_destruction_0(int, int)+0xfe>
    25c0:	4b47      	ldr	r3, [pc, #284]	; (26e0 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
    25c2:	2201      	movs	r2, #1
    25c4:	601a      	str	r2, [r3, #0]
    LPC_GPIO0, LPC_GPIO1, LPC_GPIO2, LPC_GPIO3, LPC_GPIO4, LPC_GPIO5
  };
    25c6:	4a47      	ldr	r2, [pc, #284]	; (26e4 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
    25c8:	4b47      	ldr	r3, [pc, #284]	; (26e8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    25ca:	601a      	str	r2, [r3, #0]
    25cc:	4a47      	ldr	r2, [pc, #284]	; (26ec <__static_initialization_and_destruction_0(int, int)+0x200>)
    25ce:	4b46      	ldr	r3, [pc, #280]	; (26e8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    25d0:	605a      	str	r2, [r3, #4]
    25d2:	4a47      	ldr	r2, [pc, #284]	; (26f0 <__static_initialization_and_destruction_0(int, int)+0x204>)
    25d4:	4b44      	ldr	r3, [pc, #272]	; (26e8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    25d6:	609a      	str	r2, [r3, #8]
    25d8:	4a46      	ldr	r2, [pc, #280]	; (26f4 <__static_initialization_and_destruction_0(int, int)+0x208>)
    25da:	4b43      	ldr	r3, [pc, #268]	; (26e8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    25dc:	60da      	str	r2, [r3, #12]
    25de:	4a46      	ldr	r2, [pc, #280]	; (26f8 <__static_initialization_and_destruction_0(int, int)+0x20c>)
    25e0:	4b41      	ldr	r3, [pc, #260]	; (26e8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    25e2:	611a      	str	r2, [r3, #16]
    25e4:	4a45      	ldr	r2, [pc, #276]	; (26fc <__static_initialization_and_destruction_0(int, int)+0x210>)
    25e6:	4b40      	ldr	r3, [pc, #256]	; (26e8 <__static_initialization_and_destruction_0(int, int)+0x1fc>)
    25e8:	615a      	str	r2, [r3, #20]
    volatile uint32_t * enable_falling_edge = nullptr;
    //! @endcond
  };

  /// An array that contains all the port specific gpio interrupt registers.
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfInterruptPorts] =
    25ea:	4b45      	ldr	r3, [pc, #276]	; (2700 <__static_initialization_and_destruction_0(int, int)+0x214>)
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	f003 0301 	and.w	r3, r3, #1
    25f2:	2b00      	cmp	r3, #0
    25f4:	d122      	bne.n	263c <__static_initialization_and_destruction_0(int, int)+0x150>
    25f6:	4b42      	ldr	r3, [pc, #264]	; (2700 <__static_initialization_and_destruction_0(int, int)+0x214>)
    25f8:	2201      	movs	r2, #1
    25fa:	601a      	str	r2, [r3, #0]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
          .clear               = &(LPC_GPIOINT->IO2IntClr),
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    25fc:	4b41      	ldr	r3, [pc, #260]	; (2704 <__static_initialization_and_destruction_0(int, int)+0x218>)
      { { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    25fe:	4a42      	ldr	r2, [pc, #264]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2600:	3204      	adds	r2, #4
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2602:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    2604:	4a40      	ldr	r2, [pc, #256]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2606:	3208      	adds	r2, #8
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2608:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO0IntClr),
    260a:	4a3f      	ldr	r2, [pc, #252]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    260c:	320c      	adds	r2, #12
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    260e:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    2610:	4a3d      	ldr	r2, [pc, #244]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2612:	3210      	adds	r2, #16
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2614:	60da      	str	r2, [r3, #12]
          .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    2616:	4a3c      	ldr	r2, [pc, #240]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2618:	3214      	adds	r2, #20
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    261a:	611a      	str	r2, [r3, #16]
    261c:	3314      	adds	r3, #20
        { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    261e:	4a3a      	ldr	r2, [pc, #232]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2620:	3224      	adds	r2, #36	; 0x24
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2622:	601a      	str	r2, [r3, #0]
          .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    2624:	4a38      	ldr	r2, [pc, #224]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2626:	3228      	adds	r2, #40	; 0x28
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2628:	605a      	str	r2, [r3, #4]
          .clear               = &(LPC_GPIOINT->IO2IntClr),
    262a:	4a37      	ldr	r2, [pc, #220]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    262c:	322c      	adds	r2, #44	; 0x2c
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    262e:	609a      	str	r2, [r3, #8]
          .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    2630:	4a35      	ldr	r2, [pc, #212]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2632:	3230      	adds	r2, #48	; 0x30
          .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) } };
    2634:	60da      	str	r2, [r3, #12]
    2636:	4a34      	ldr	r2, [pc, #208]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2638:	3234      	adds	r2, #52	; 0x34
    263a:	611a      	str	r2, [r3, #16]

  /// Pointer to the interrupt port status register. Holds a 1 at the 0th bit
  /// position if that port has a pending interrupt. For port 2, the 2nd bit
  /// will be set. All other bits will be zero.
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    263c:	4b33      	ldr	r3, [pc, #204]	; (270c <__static_initialization_and_destruction_0(int, int)+0x220>)
    263e:	681b      	ldr	r3, [r3, #0]
    2640:	f003 0301 	and.w	r3, r3, #1
    2644:	2b00      	cmp	r3, #0
    2646:	d106      	bne.n	2656 <__static_initialization_and_destruction_0(int, int)+0x16a>
    2648:	4b30      	ldr	r3, [pc, #192]	; (270c <__static_initialization_and_destruction_0(int, int)+0x220>)
    264a:	2201      	movs	r2, #1
    264c:	601a      	str	r2, [r3, #0]
    264e:	4b2e      	ldr	r3, [pc, #184]	; (2708 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2650:	461a      	mov	r2, r3
    2652:	4b2f      	ldr	r3, [pc, #188]	; (2710 <__static_initialization_and_destruction_0(int, int)+0x224>)
    2654:	601a      	str	r2, [r3, #0]
    inline static const sjsu::lpc40xx::Pin kPwmPin5 =
        sjsu::lpc40xx::Pin::CreatePin<2, 5>();

   public:
    /// Definition of the PWM 0 peripheral.
    inline static const Peripheral_t kPwm0Peripheral = {
    2656:	4b2f      	ldr	r3, [pc, #188]	; (2714 <__static_initialization_and_destruction_0(int, int)+0x228>)
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	f003 0301 	and.w	r3, r3, #1
    265e:	2b00      	cmp	r3, #0
    2660:	d105      	bne.n	266e <__static_initialization_and_destruction_0(int, int)+0x182>
    2662:	4b2c      	ldr	r3, [pc, #176]	; (2714 <__static_initialization_and_destruction_0(int, int)+0x228>)
    2664:	2201      	movs	r2, #1
    2666:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM0,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    2668:	4a2b      	ldr	r2, [pc, #172]	; (2718 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    266a:	4b2c      	ldr	r3, [pc, #176]	; (271c <__static_initialization_and_destruction_0(int, int)+0x230>)
    266c:	601a      	str	r2, [r3, #0]
    /// Definition of the PWM 1 peripheral.
    inline static const Peripheral_t kPwm1Peripheral = {
    266e:	4b2c      	ldr	r3, [pc, #176]	; (2720 <__static_initialization_and_destruction_0(int, int)+0x234>)
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	f003 0301 	and.w	r3, r3, #1
    2676:	2b00      	cmp	r3, #0
    2678:	d105      	bne.n	2686 <__static_initialization_and_destruction_0(int, int)+0x19a>
    267a:	4b29      	ldr	r3, [pc, #164]	; (2720 <__static_initialization_and_destruction_0(int, int)+0x234>)
    267c:	2201      	movs	r2, #1
    267e:	601a      	str	r2, [r3, #0]
      .registers   = LPC_PWM1,
      .power_on_id = sjsu::lpc40xx::SystemController::Peripherals::kPwm1,
    };
    2680:	4a28      	ldr	r2, [pc, #160]	; (2724 <__static_initialization_and_destruction_0(int, int)+0x238>)
    2682:	4b29      	ldr	r3, [pc, #164]	; (2728 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    2684:	601a      	str	r2, [r3, #0]
    2686:	bf00      	nop
    2688:	3708      	adds	r7, #8
    268a:	46bd      	mov	sp, r7
    268c:	bd80      	pop	{r7, pc}
    268e:	bf00      	nop
    2690:	10000278 	.word	0x10000278
    2694:	4002c000 	.word	0x4002c000
    2698:	10000120 	.word	0x10000120
    269c:	1000027c 	.word	0x1000027c
    26a0:	400fc000 	.word	0x400fc000
    26a4:	10000124 	.word	0x10000124
    26a8:	10000280 	.word	0x10000280
    26ac:	40098000 	.word	0x40098000
    26b0:	1000000c 	.word	0x1000000c
    26b4:	10000284 	.word	0x10000284
    26b8:	4009c000 	.word	0x4009c000
    26bc:	10000020 	.word	0x10000020
    26c0:	10000288 	.word	0x10000288
    26c4:	400a4000 	.word	0x400a4000
    26c8:	10000034 	.word	0x10000034
    26cc:	1000028c 	.word	0x1000028c
    26d0:	40034000 	.word	0x40034000
    26d4:	10000128 	.word	0x10000128
    26d8:	10000290 	.word	0x10000290
    26dc:	1000012c 	.word	0x1000012c
    26e0:	10000294 	.word	0x10000294
    26e4:	20098000 	.word	0x20098000
    26e8:	1000022c 	.word	0x1000022c
    26ec:	20098020 	.word	0x20098020
    26f0:	20098040 	.word	0x20098040
    26f4:	20098060 	.word	0x20098060
    26f8:	20098080 	.word	0x20098080
    26fc:	200980a0 	.word	0x200980a0
    2700:	10000298 	.word	0x10000298
    2704:	10000244 	.word	0x10000244
    2708:	40028080 	.word	0x40028080
    270c:	1000029c 	.word	0x1000029c
    2710:	1000026c 	.word	0x1000026c
    2714:	100002a0 	.word	0x100002a0
    2718:	40014000 	.word	0x40014000
    271c:	1000004c 	.word	0x1000004c
    2720:	100002a4 	.word	0x100002a4
    2724:	40018000 	.word	0x40018000
    2728:	10000054 	.word	0x10000054

0000272c <_GLOBAL__sub_I_xUartTaskHandle>:
    272c:	b580      	push	{r7, lr}
    272e:	af00      	add	r7, sp, #0
    2730:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2734:	2001      	movs	r0, #1
    2736:	f7ff fed9 	bl	24ec <__static_initialization_and_destruction_0(int, int)>
    273a:	bd80      	pop	{r7, pc}

0000273c <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    273c:	b480      	push	{r7}
    273e:	b087      	sub	sp, #28
    2740:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2742:	2300      	movs	r3, #0
    2744:	617b      	str	r3, [r7, #20]
    2746:	697a      	ldr	r2, [r7, #20]
    2748:	4613      	mov	r3, r2
    274a:	005b      	lsls	r3, r3, #1
    274c:	4413      	add	r3, r2
    274e:	009b      	lsls	r3, r3, #2
    2750:	4a1f      	ldr	r2, [pc, #124]	; (27d0 <sjsu::InitializeDataSection()+0x94>)
    2752:	4413      	add	r3, r2
    2754:	4a1f      	ldr	r2, [pc, #124]	; (27d4 <sjsu::InitializeDataSection()+0x98>)
    2756:	4293      	cmp	r3, r2
    2758:	d233      	bcs.n	27c2 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    275a:	491d      	ldr	r1, [pc, #116]	; (27d0 <sjsu::InitializeDataSection()+0x94>)
    275c:	697a      	ldr	r2, [r7, #20]
    275e:	4613      	mov	r3, r2
    2760:	005b      	lsls	r3, r3, #1
    2762:	4413      	add	r3, r2
    2764:	009b      	lsls	r3, r3, #2
    2766:	440b      	add	r3, r1
    2768:	681b      	ldr	r3, [r3, #0]
    276a:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    276c:	4918      	ldr	r1, [pc, #96]	; (27d0 <sjsu::InitializeDataSection()+0x94>)
    276e:	697a      	ldr	r2, [r7, #20]
    2770:	4613      	mov	r3, r2
    2772:	005b      	lsls	r3, r3, #1
    2774:	4413      	add	r3, r2
    2776:	009b      	lsls	r3, r3, #2
    2778:	440b      	add	r3, r1
    277a:	685b      	ldr	r3, [r3, #4]
    277c:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    277e:	4914      	ldr	r1, [pc, #80]	; (27d0 <sjsu::InitializeDataSection()+0x94>)
    2780:	697a      	ldr	r2, [r7, #20]
    2782:	4613      	mov	r3, r2
    2784:	005b      	lsls	r3, r3, #1
    2786:	4413      	add	r3, r2
    2788:	009b      	lsls	r3, r3, #2
    278a:	440b      	add	r3, r1
    278c:	3308      	adds	r3, #8
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    2792:	2300      	movs	r3, #0
    2794:	613b      	str	r3, [r7, #16]
    2796:	693a      	ldr	r2, [r7, #16]
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	429a      	cmp	r2, r3
    279c:	d20d      	bcs.n	27ba <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    279e:	693b      	ldr	r3, [r7, #16]
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	68fa      	ldr	r2, [r7, #12]
    27a4:	441a      	add	r2, r3
    27a6:	693b      	ldr	r3, [r7, #16]
    27a8:	009b      	lsls	r3, r3, #2
    27aa:	68b9      	ldr	r1, [r7, #8]
    27ac:	440b      	add	r3, r1
    27ae:	6812      	ldr	r2, [r2, #0]
    27b0:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    27b2:	693b      	ldr	r3, [r7, #16]
    27b4:	3301      	adds	r3, #1
    27b6:	613b      	str	r3, [r7, #16]
    27b8:	e7ed      	b.n	2796 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    27ba:	697b      	ldr	r3, [r7, #20]
    27bc:	3301      	adds	r3, #1
    27be:	617b      	str	r3, [r7, #20]
    27c0:	e7c1      	b.n	2746 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    27c2:	bf00      	nop
    27c4:	371c      	adds	r7, #28
    27c6:	46bd      	mov	sp, r7
    27c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27cc:	4770      	bx	lr
    27ce:	bf00      	nop
    27d0:	000000e4 	.word	0x000000e4
    27d4:	000000fc 	.word	0x000000fc

000027d8 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    27d8:	b480      	push	{r7}
    27da:	b085      	sub	sp, #20
    27dc:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    27de:	2300      	movs	r3, #0
    27e0:	60fb      	str	r3, [r7, #12]
    27e2:	68fb      	ldr	r3, [r7, #12]
    27e4:	00db      	lsls	r3, r3, #3
    27e6:	4a15      	ldr	r2, [pc, #84]	; (283c <sjsu::InitializeBssSection()+0x64>)
    27e8:	4413      	add	r3, r2
    27ea:	4a15      	ldr	r2, [pc, #84]	; (2840 <sjsu::InitializeBssSection()+0x68>)
    27ec:	4293      	cmp	r3, r2
    27ee:	d21e      	bcs.n	282e <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    27f0:	4a12      	ldr	r2, [pc, #72]	; (283c <sjsu::InitializeBssSection()+0x64>)
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    27f8:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    27fa:	4a10      	ldr	r2, [pc, #64]	; (283c <sjsu::InitializeBssSection()+0x64>)
    27fc:	68fb      	ldr	r3, [r7, #12]
    27fe:	00db      	lsls	r3, r3, #3
    2800:	4413      	add	r3, r2
    2802:	685b      	ldr	r3, [r3, #4]
    2804:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    2806:	2300      	movs	r3, #0
    2808:	60bb      	str	r3, [r7, #8]
    280a:	68ba      	ldr	r2, [r7, #8]
    280c:	683b      	ldr	r3, [r7, #0]
    280e:	429a      	cmp	r2, r3
    2810:	d209      	bcs.n	2826 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    2812:	68bb      	ldr	r3, [r7, #8]
    2814:	009b      	lsls	r3, r3, #2
    2816:	687a      	ldr	r2, [r7, #4]
    2818:	4413      	add	r3, r2
    281a:	2200      	movs	r2, #0
    281c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    281e:	68bb      	ldr	r3, [r7, #8]
    2820:	3301      	adds	r3, #1
    2822:	60bb      	str	r3, [r7, #8]
    2824:	e7f1      	b.n	280a <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2826:	68fb      	ldr	r3, [r7, #12]
    2828:	3301      	adds	r3, #1
    282a:	60fb      	str	r3, [r7, #12]
    282c:	e7d9      	b.n	27e2 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    282e:	bf00      	nop
    2830:	3714      	adds	r7, #20
    2832:	46bd      	mov	sp, r7
    2834:	f85d 7b04 	ldr.w	r7, [sp], #4
    2838:	4770      	bx	lr
    283a:	bf00      	nop
    283c:	000000fc 	.word	0x000000fc
    2840:	0000010c 	.word	0x0000010c

00002844 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    2844:	b580      	push	{r7, lr}
    2846:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    2848:	f7ff ff78 	bl	273c <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    284c:	f7ff ffc4 	bl	27d8 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    2850:	f005 face 	bl	7df0 <__libc_init_array>
}
    2854:	bf00      	nop
    2856:	bd80      	pop	{r7, pc}

00002858 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    2858:	b580      	push	{r7, lr}
    285a:	b08c      	sub	sp, #48	; 0x30
    285c:	af02      	add	r7, sp, #8
    285e:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	681b      	ldr	r3, [r3, #0]
    2864:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	685b      	ldr	r3, [r3, #4]
    286a:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	689b      	ldr	r3, [r3, #8]
    2870:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	68db      	ldr	r3, [r3, #12]
    2876:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	691b      	ldr	r3, [r3, #16]
    287c:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	695b      	ldr	r3, [r3, #20]
    2882:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	699b      	ldr	r3, [r3, #24]
    2888:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	69db      	ldr	r3, [r3, #28]
    288e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    2890:	480d      	ldr	r0, [pc, #52]	; (28c8 <GetRegistersFromStack+0x70>)
    2892:	f002 f923 	bl	4adc <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    2896:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2898:	6a3a      	ldr	r2, [r7, #32]
    289a:	69f8      	ldr	r0, [r7, #28]
    289c:	69bb      	ldr	r3, [r7, #24]
    289e:	9300      	str	r3, [sp, #0]
    28a0:	4603      	mov	r3, r0
    28a2:	480a      	ldr	r0, [pc, #40]	; (28cc <GetRegistersFromStack+0x74>)
    28a4:	f002 f91a 	bl	4adc <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    28a8:	6979      	ldr	r1, [r7, #20]
    28aa:	693a      	ldr	r2, [r7, #16]
    28ac:	68f8      	ldr	r0, [r7, #12]
    28ae:	68bb      	ldr	r3, [r7, #8]
    28b0:	9300      	str	r3, [sp, #0]
    28b2:	4603      	mov	r3, r0
    28b4:	4806      	ldr	r0, [pc, #24]	; (28d0 <GetRegistersFromStack+0x78>)
    28b6:	f002 f911 	bl	4adc <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	4619      	mov	r1, r3
    28be:	2001      	movs	r0, #1
    28c0:	f7fd fe5e 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    28c4:	e7fe      	b.n	28c4 <GetRegistersFromStack+0x6c>
    28c6:	bf00      	nop
    28c8:	00008b4c 	.word	0x00008b4c
    28cc:	00008b78 	.word	0x00008b78
    28d0:	00008bac 	.word	0x00008bac

000028d4 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    28d4:	b480      	push	{r7}
    28d6:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    28d8:	f01e 0f04 	tst.w	lr, #4
    28dc:	bf0c      	ite	eq
    28de:	f3ef 8008 	mrseq	r0, MSP
    28e2:	f3ef 8009 	mrsne	r0, PSP
    28e6:	6981      	ldr	r1, [r0, #24]
    28e8:	4a00      	ldr	r2, [pc, #0]	; (28ec <handler2_address_const>)
    28ea:	4710      	bx	r2

000028ec <handler2_address_const>:
    28ec:	00002859 	.word	0x00002859
    }
  }
    28f0:	bf00      	nop
    28f2:	46bd      	mov	sp, r7
    28f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28f8:	4770      	bx	lr
    28fa:	Address 0x00000000000028fa is out of bounds.


000028fc <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    28fc:	b580      	push	{r7, lr}
    28fe:	b084      	sub	sp, #16
    2900:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    2902:	4b16      	ldr	r3, [pc, #88]	; (295c <ArmResetHandler+0x60>)
    2904:	60fb      	str	r3, [r7, #12]
    2906:	68fb      	ldr	r3, [r7, #12]
    2908:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    290a:	683b      	ldr	r3, [r7, #0]
    290c:	f383 8809 	msr	PSP, r3
    2910:	68fb      	ldr	r3, [r7, #12]
    2912:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    291a:	f7ff ff93 	bl	2844 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    291e:	4b10      	ldr	r3, [pc, #64]	; (2960 <ArmResetHandler+0x64>)
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	f003 0301 	and.w	r3, r3, #1
    2926:	2b00      	cmp	r3, #0
    2928:	bf14      	ite	ne
    292a:	2301      	movne	r3, #1
    292c:	2300      	moveq	r3, #0
    292e:	b2db      	uxtb	r3, r3
    2930:	2b00      	cmp	r3, #0
    2932:	d001      	beq.n	2938 <ArmResetHandler+0x3c>
      {
          trace_initialize();  // Enable debug tracing
    2934:	f002 f8f4 	bl	4b20 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    2938:	f002 fd12 	bl	5360 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    293c:	f7ff fac0 	bl	1ec0 <main>
    2940:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    2942:	68bb      	ldr	r3, [r7, #8]
    2944:	2b00      	cmp	r3, #0
    2946:	db04      	blt.n	2952 <ArmResetHandler+0x56>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    2948:	68b9      	ldr	r1, [r7, #8]
    294a:	4806      	ldr	r0, [pc, #24]	; (2964 <ArmResetHandler+0x68>)
    294c:	f002 f8c6 	bl	4adc <printf>
    2950:	e003      	b.n	295a <ArmResetHandler+0x5e>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    2952:	68b9      	ldr	r1, [r7, #8]
    2954:	4804      	ldr	r0, [pc, #16]	; (2968 <ArmResetHandler+0x6c>)
    2956:	f002 f8c1 	bl	4adc <printf>
    295a:	e7fe      	b.n	295a <ArmResetHandler+0x5e>
    295c:	10010000 	.word	0x10010000
    2960:	e000edf0 	.word	0xe000edf0
    2964:	00008be4 	.word	0x00008be4
    2968:	00008c18 	.word	0x00008c18

0000296c <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    296c:	b580      	push	{r7, lr}
    296e:	b082      	sub	sp, #8
    2970:	af00      	add	r7, sp, #0
    2972:	6078      	str	r0, [r7, #4]
    2974:	6039      	str	r1, [r7, #0]
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	2b01      	cmp	r3, #1
    297a:	d111      	bne.n	29a0 <__static_initialization_and_destruction_0(int, int)+0x34>
    297c:	683b      	ldr	r3, [r7, #0]
    297e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2982:	4293      	cmp	r3, r2
    2984:	d10c      	bne.n	29a0 <__static_initialization_and_destruction_0(int, int)+0x34>
    2986:	4b08      	ldr	r3, [pc, #32]	; (29a8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	f003 0301 	and.w	r3, r3, #1
    298e:	2b00      	cmp	r3, #0
    2990:	d106      	bne.n	29a0 <__static_initialization_and_destruction_0(int, int)+0x34>
    2992:	4b05      	ldr	r3, [pc, #20]	; (29a8 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    2994:	2201      	movs	r2, #1
    2996:	601a      	str	r2, [r3, #0]
    2998:	4b04      	ldr	r3, [pc, #16]	; (29ac <__static_initialization_and_destruction_0(int, int)+0x40>)
    299a:	4618      	mov	r0, r3
    299c:	f7ff f928 	bl	1bf0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    29a0:	bf00      	nop
    29a2:	3708      	adds	r7, #8
    29a4:	46bd      	mov	sp, r7
    29a6:	bd80      	pop	{r7, pc}
    29a8:	10000290 	.word	0x10000290
    29ac:	1000012c 	.word	0x1000012c

000029b0 <_GLOBAL__sub_I_GetRegistersFromStack>:
    29b0:	b580      	push	{r7, lr}
    29b2:	af00      	add	r7, sp, #0
    29b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    29b8:	2001      	movs	r0, #1
    29ba:	f7ff ffd7 	bl	296c <__static_initialization_and_destruction_0(int, int)>
    29be:	bd80      	pop	{r7, pc}

000029c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    29c0:	b480      	push	{r7}
    29c2:	b083      	sub	sp, #12
    29c4:	af00      	add	r7, sp, #0
    29c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	f103 0208 	add.w	r2, r3, #8
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    29d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	f103 0208 	add.w	r2, r3, #8
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	f103 0208 	add.w	r2, r3, #8
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	2200      	movs	r2, #0
    29f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    29f4:	bf00      	nop
    29f6:	370c      	adds	r7, #12
    29f8:	46bd      	mov	sp, r7
    29fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29fe:	4770      	bx	lr

00002a00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    2a00:	b480      	push	{r7}
    2a02:	b083      	sub	sp, #12
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	2200      	movs	r2, #0
    2a0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2a0e:	bf00      	nop
    2a10:	370c      	adds	r7, #12
    2a12:	46bd      	mov	sp, r7
    2a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a18:	4770      	bx	lr

00002a1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2a1a:	b480      	push	{r7}
    2a1c:	b085      	sub	sp, #20
    2a1e:	af00      	add	r7, sp, #0
    2a20:	6078      	str	r0, [r7, #4]
    2a22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	685b      	ldr	r3, [r3, #4]
    2a28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2a2a:	683b      	ldr	r3, [r7, #0]
    2a2c:	68fa      	ldr	r2, [r7, #12]
    2a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	689a      	ldr	r2, [r3, #8]
    2a34:	683b      	ldr	r3, [r7, #0]
    2a36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2a38:	68fb      	ldr	r3, [r7, #12]
    2a3a:	689b      	ldr	r3, [r3, #8]
    2a3c:	683a      	ldr	r2, [r7, #0]
    2a3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	683a      	ldr	r2, [r7, #0]
    2a44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a46:	683b      	ldr	r3, [r7, #0]
    2a48:	687a      	ldr	r2, [r7, #4]
    2a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	1c5a      	adds	r2, r3, #1
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	601a      	str	r2, [r3, #0]
}
    2a56:	bf00      	nop
    2a58:	3714      	adds	r7, #20
    2a5a:	46bd      	mov	sp, r7
    2a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a60:	4770      	bx	lr

00002a62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2a62:	b480      	push	{r7}
    2a64:	b085      	sub	sp, #20
    2a66:	af00      	add	r7, sp, #0
    2a68:	6078      	str	r0, [r7, #4]
    2a6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2a6c:	683b      	ldr	r3, [r7, #0]
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2a72:	68bb      	ldr	r3, [r7, #8]
    2a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2a78:	d103      	bne.n	2a82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	691b      	ldr	r3, [r3, #16]
    2a7e:	60fb      	str	r3, [r7, #12]
    2a80:	e00c      	b.n	2a9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	3308      	adds	r3, #8
    2a86:	60fb      	str	r3, [r7, #12]
    2a88:	e002      	b.n	2a90 <vListInsert+0x2e>
    2a8a:	68fb      	ldr	r3, [r7, #12]
    2a8c:	685b      	ldr	r3, [r3, #4]
    2a8e:	60fb      	str	r3, [r7, #12]
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	685b      	ldr	r3, [r3, #4]
    2a94:	681b      	ldr	r3, [r3, #0]
    2a96:	68ba      	ldr	r2, [r7, #8]
    2a98:	429a      	cmp	r2, r3
    2a9a:	d2f6      	bcs.n	2a8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2a9c:	68fb      	ldr	r3, [r7, #12]
    2a9e:	685a      	ldr	r2, [r3, #4]
    2aa0:	683b      	ldr	r3, [r7, #0]
    2aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2aa4:	683b      	ldr	r3, [r7, #0]
    2aa6:	685b      	ldr	r3, [r3, #4]
    2aa8:	683a      	ldr	r2, [r7, #0]
    2aaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2aac:	683b      	ldr	r3, [r7, #0]
    2aae:	68fa      	ldr	r2, [r7, #12]
    2ab0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    2ab2:	68fb      	ldr	r3, [r7, #12]
    2ab4:	683a      	ldr	r2, [r7, #0]
    2ab6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2ab8:	683b      	ldr	r3, [r7, #0]
    2aba:	687a      	ldr	r2, [r7, #4]
    2abc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	1c5a      	adds	r2, r3, #1
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	601a      	str	r2, [r3, #0]
}
    2ac8:	bf00      	nop
    2aca:	3714      	adds	r7, #20
    2acc:	46bd      	mov	sp, r7
    2ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ad2:	4770      	bx	lr

00002ad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2ad4:	b480      	push	{r7}
    2ad6:	b085      	sub	sp, #20
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	691b      	ldr	r3, [r3, #16]
    2ae0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	685b      	ldr	r3, [r3, #4]
    2ae6:	687a      	ldr	r2, [r7, #4]
    2ae8:	6892      	ldr	r2, [r2, #8]
    2aea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	689b      	ldr	r3, [r3, #8]
    2af0:	687a      	ldr	r2, [r7, #4]
    2af2:	6852      	ldr	r2, [r2, #4]
    2af4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2af6:	68fb      	ldr	r3, [r7, #12]
    2af8:	685b      	ldr	r3, [r3, #4]
    2afa:	687a      	ldr	r2, [r7, #4]
    2afc:	429a      	cmp	r2, r3
    2afe:	d103      	bne.n	2b08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	689a      	ldr	r2, [r3, #8]
    2b04:	68fb      	ldr	r3, [r7, #12]
    2b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	2200      	movs	r2, #0
    2b0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2b0e:	68fb      	ldr	r3, [r7, #12]
    2b10:	681b      	ldr	r3, [r3, #0]
    2b12:	1e5a      	subs	r2, r3, #1
    2b14:	68fb      	ldr	r3, [r7, #12]
    2b16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	681b      	ldr	r3, [r3, #0]
}
    2b1c:	4618      	mov	r0, r3
    2b1e:	3714      	adds	r7, #20
    2b20:	46bd      	mov	sp, r7
    2b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b26:	4770      	bx	lr

00002b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    2b28:	b580      	push	{r7, lr}
    2b2a:	b08a      	sub	sp, #40	; 0x28
    2b2c:	af04      	add	r7, sp, #16
    2b2e:	60f8      	str	r0, [r7, #12]
    2b30:	60b9      	str	r1, [r7, #8]
    2b32:	607a      	str	r2, [r7, #4]
    2b34:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    2b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d01e      	beq.n	2b7a <xTaskCreateStatic+0x52>
    2b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d01b      	beq.n	2b7a <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    2b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b44:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    2b46:	697b      	ldr	r3, [r7, #20]
    2b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    2b4c:	697b      	ldr	r3, [r7, #20]
    2b4e:	2202      	movs	r2, #2
    2b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    2b54:	2300      	movs	r3, #0
    2b56:	9303      	str	r3, [sp, #12]
    2b58:	697b      	ldr	r3, [r7, #20]
    2b5a:	9302      	str	r3, [sp, #8]
    2b5c:	f107 0310 	add.w	r3, r7, #16
    2b60:	9301      	str	r3, [sp, #4]
    2b62:	6a3b      	ldr	r3, [r7, #32]
    2b64:	9300      	str	r3, [sp, #0]
    2b66:	683b      	ldr	r3, [r7, #0]
    2b68:	687a      	ldr	r2, [r7, #4]
    2b6a:	68b9      	ldr	r1, [r7, #8]
    2b6c:	68f8      	ldr	r0, [r7, #12]
    2b6e:	f000 f850 	bl	2c12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    2b72:	6978      	ldr	r0, [r7, #20]
    2b74:	f000 f8c8 	bl	2d08 <prvAddNewTaskToReadyList>
    2b78:	e001      	b.n	2b7e <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
    2b7a:	2300      	movs	r3, #0
    2b7c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
    2b7e:	693b      	ldr	r3, [r7, #16]
	}
    2b80:	4618      	mov	r0, r3
    2b82:	3718      	adds	r7, #24
    2b84:	46bd      	mov	sp, r7
    2b86:	bd80      	pop	{r7, pc}

00002b88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    2b88:	b580      	push	{r7, lr}
    2b8a:	b08c      	sub	sp, #48	; 0x30
    2b8c:	af04      	add	r7, sp, #16
    2b8e:	60f8      	str	r0, [r7, #12]
    2b90:	60b9      	str	r1, [r7, #8]
    2b92:	603b      	str	r3, [r7, #0]
    2b94:	4613      	mov	r3, r2
    2b96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2b98:	88fb      	ldrh	r3, [r7, #6]
    2b9a:	009b      	lsls	r3, r3, #2
    2b9c:	4618      	mov	r0, r3
    2b9e:	f000 fde5 	bl	376c <pvPortMalloc>
    2ba2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    2ba4:	697b      	ldr	r3, [r7, #20]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d00e      	beq.n	2bc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    2baa:	2060      	movs	r0, #96	; 0x60
    2bac:	f000 fdde 	bl	376c <pvPortMalloc>
    2bb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    2bb2:	69fb      	ldr	r3, [r7, #28]
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d003      	beq.n	2bc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    2bb8:	69fb      	ldr	r3, [r7, #28]
    2bba:	697a      	ldr	r2, [r7, #20]
    2bbc:	631a      	str	r2, [r3, #48]	; 0x30
    2bbe:	e005      	b.n	2bcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    2bc0:	6978      	ldr	r0, [r7, #20]
    2bc2:	f000 fde5 	bl	3790 <vPortFree>
    2bc6:	e001      	b.n	2bcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    2bc8:	2300      	movs	r3, #0
    2bca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    2bcc:	69fb      	ldr	r3, [r7, #28]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d017      	beq.n	2c02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    2bd2:	69fb      	ldr	r3, [r7, #28]
    2bd4:	2200      	movs	r2, #0
    2bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    2bda:	88fa      	ldrh	r2, [r7, #6]
    2bdc:	2300      	movs	r3, #0
    2bde:	9303      	str	r3, [sp, #12]
    2be0:	69fb      	ldr	r3, [r7, #28]
    2be2:	9302      	str	r3, [sp, #8]
    2be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2be6:	9301      	str	r3, [sp, #4]
    2be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bea:	9300      	str	r3, [sp, #0]
    2bec:	683b      	ldr	r3, [r7, #0]
    2bee:	68b9      	ldr	r1, [r7, #8]
    2bf0:	68f8      	ldr	r0, [r7, #12]
    2bf2:	f000 f80e 	bl	2c12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    2bf6:	69f8      	ldr	r0, [r7, #28]
    2bf8:	f000 f886 	bl	2d08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    2bfc:	2301      	movs	r3, #1
    2bfe:	61bb      	str	r3, [r7, #24]
    2c00:	e002      	b.n	2c08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    2c08:	69bb      	ldr	r3, [r7, #24]
	}
    2c0a:	4618      	mov	r0, r3
    2c0c:	3720      	adds	r7, #32
    2c0e:	46bd      	mov	sp, r7
    2c10:	bd80      	pop	{r7, pc}

00002c12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    2c12:	b580      	push	{r7, lr}
    2c14:	b086      	sub	sp, #24
    2c16:	af00      	add	r7, sp, #0
    2c18:	60f8      	str	r0, [r7, #12]
    2c1a:	60b9      	str	r1, [r7, #8]
    2c1c:	607a      	str	r2, [r7, #4]
    2c1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    2c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c22:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	009b      	lsls	r3, r3, #2
    2c28:	461a      	mov	r2, r3
    2c2a:	21a5      	movs	r1, #165	; 0xa5
    2c2c:	f005 f91f 	bl	7e6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    2c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2c3a:	3b01      	subs	r3, #1
    2c3c:	009b      	lsls	r3, r3, #2
    2c3e:	4413      	add	r3, r2
    2c40:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2c42:	693b      	ldr	r3, [r7, #16]
    2c44:	f023 0307 	bic.w	r3, r3, #7
    2c48:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2c4a:	2300      	movs	r3, #0
    2c4c:	617b      	str	r3, [r7, #20]
    2c4e:	e012      	b.n	2c76 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2c50:	68ba      	ldr	r2, [r7, #8]
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	4413      	add	r3, r2
    2c56:	7819      	ldrb	r1, [r3, #0]
    2c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c5a:	697b      	ldr	r3, [r7, #20]
    2c5c:	4413      	add	r3, r2
    2c5e:	3334      	adds	r3, #52	; 0x34
    2c60:	460a      	mov	r2, r1
    2c62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2c64:	68ba      	ldr	r2, [r7, #8]
    2c66:	697b      	ldr	r3, [r7, #20]
    2c68:	4413      	add	r3, r2
    2c6a:	781b      	ldrb	r3, [r3, #0]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d006      	beq.n	2c7e <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2c70:	697b      	ldr	r3, [r7, #20]
    2c72:	3301      	adds	r3, #1
    2c74:	617b      	str	r3, [r7, #20]
    2c76:	697b      	ldr	r3, [r7, #20]
    2c78:	2b0f      	cmp	r3, #15
    2c7a:	d9e9      	bls.n	2c50 <prvInitialiseNewTask+0x3e>
    2c7c:	e000      	b.n	2c80 <prvInitialiseNewTask+0x6e>
		{
			break;
    2c7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c82:	2200      	movs	r2, #0
    2c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    2c88:	6a3b      	ldr	r3, [r7, #32]
    2c8a:	2b04      	cmp	r3, #4
    2c8c:	d901      	bls.n	2c92 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    2c8e:	2304      	movs	r3, #4
    2c90:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    2c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c94:	6a3a      	ldr	r2, [r7, #32]
    2c96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    2c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c9a:	6a3a      	ldr	r2, [r7, #32]
    2c9c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    2c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ca0:	2200      	movs	r2, #0
    2ca2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ca6:	3304      	adds	r3, #4
    2ca8:	4618      	mov	r0, r3
    2caa:	f7ff fea9 	bl	2a00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cb0:	3318      	adds	r3, #24
    2cb2:	4618      	mov	r0, r3
    2cb4:	f7ff fea4 	bl	2a00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2cbe:	6a3b      	ldr	r3, [r7, #32]
    2cc0:	f1c3 0205 	rsb	r2, r3, #5
    2cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2ccc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    2cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cd0:	2200      	movs	r2, #0
    2cd2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    2cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cd6:	2200      	movs	r2, #0
    2cd8:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cdc:	2200      	movs	r2, #0
    2cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2ce2:	683a      	ldr	r2, [r7, #0]
    2ce4:	68f9      	ldr	r1, [r7, #12]
    2ce6:	6938      	ldr	r0, [r7, #16]
    2ce8:	f002 fc3e 	bl	5568 <pxPortInitialiseStack>
    2cec:	4602      	mov	r2, r0
    2cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cf0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    2cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d002      	beq.n	2cfe <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2cfe:	bf00      	nop
    2d00:	3718      	adds	r7, #24
    2d02:	46bd      	mov	sp, r7
    2d04:	bd80      	pop	{r7, pc}
    2d06:	Address 0x0000000000002d06 is out of bounds.


00002d08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    2d08:	b580      	push	{r7, lr}
    2d0a:	b082      	sub	sp, #8
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    2d10:	f002 fcc8 	bl	56a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    2d14:	4b2c      	ldr	r3, [pc, #176]	; (2dc8 <prvAddNewTaskToReadyList+0xc0>)
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	3301      	adds	r3, #1
    2d1a:	4a2b      	ldr	r2, [pc, #172]	; (2dc8 <prvAddNewTaskToReadyList+0xc0>)
    2d1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    2d1e:	4b2b      	ldr	r3, [pc, #172]	; (2dcc <prvAddNewTaskToReadyList+0xc4>)
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	2b00      	cmp	r3, #0
    2d24:	d109      	bne.n	2d3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    2d26:	4a29      	ldr	r2, [pc, #164]	; (2dcc <prvAddNewTaskToReadyList+0xc4>)
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2d2c:	4b26      	ldr	r3, [pc, #152]	; (2dc8 <prvAddNewTaskToReadyList+0xc0>)
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	2b01      	cmp	r3, #1
    2d32:	d110      	bne.n	2d56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    2d34:	f000 fb82 	bl	343c <prvInitialiseTaskLists>
    2d38:	e00d      	b.n	2d56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    2d3a:	4b25      	ldr	r3, [pc, #148]	; (2dd0 <prvAddNewTaskToReadyList+0xc8>)
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d109      	bne.n	2d56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2d42:	4b22      	ldr	r3, [pc, #136]	; (2dcc <prvAddNewTaskToReadyList+0xc4>)
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d4c:	429a      	cmp	r2, r3
    2d4e:	d802      	bhi.n	2d56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    2d50:	4a1e      	ldr	r2, [pc, #120]	; (2dcc <prvAddNewTaskToReadyList+0xc4>)
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    2d56:	4b1f      	ldr	r3, [pc, #124]	; (2dd4 <prvAddNewTaskToReadyList+0xcc>)
    2d58:	681b      	ldr	r3, [r3, #0]
    2d5a:	3301      	adds	r3, #1
    2d5c:	4a1d      	ldr	r2, [pc, #116]	; (2dd4 <prvAddNewTaskToReadyList+0xcc>)
    2d5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    2d60:	4b1c      	ldr	r3, [pc, #112]	; (2dd4 <prvAddNewTaskToReadyList+0xcc>)
    2d62:	681a      	ldr	r2, [r3, #0]
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d6c:	2201      	movs	r2, #1
    2d6e:	409a      	lsls	r2, r3
    2d70:	4b19      	ldr	r3, [pc, #100]	; (2dd8 <prvAddNewTaskToReadyList+0xd0>)
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	4313      	orrs	r3, r2
    2d76:	4a18      	ldr	r2, [pc, #96]	; (2dd8 <prvAddNewTaskToReadyList+0xd0>)
    2d78:	6013      	str	r3, [r2, #0]
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d7e:	4613      	mov	r3, r2
    2d80:	009b      	lsls	r3, r3, #2
    2d82:	4413      	add	r3, r2
    2d84:	009b      	lsls	r3, r3, #2
    2d86:	4a15      	ldr	r2, [pc, #84]	; (2ddc <prvAddNewTaskToReadyList+0xd4>)
    2d88:	441a      	add	r2, r3
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	3304      	adds	r3, #4
    2d8e:	4619      	mov	r1, r3
    2d90:	4610      	mov	r0, r2
    2d92:	f7ff fe42 	bl	2a1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    2d96:	f002 fc9f 	bl	56d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    2d9a:	4b0d      	ldr	r3, [pc, #52]	; (2dd0 <prvAddNewTaskToReadyList+0xc8>)
    2d9c:	681b      	ldr	r3, [r3, #0]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d00e      	beq.n	2dc0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2da2:	4b0a      	ldr	r3, [pc, #40]	; (2dcc <prvAddNewTaskToReadyList+0xc4>)
    2da4:	681b      	ldr	r3, [r3, #0]
    2da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2dac:	429a      	cmp	r2, r3
    2dae:	d207      	bcs.n	2dc0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
    2db0:	4b0b      	ldr	r3, [pc, #44]	; (2de0 <prvAddNewTaskToReadyList+0xd8>)
    2db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2db6:	601a      	str	r2, [r3, #0]
    2db8:	f3bf 8f4f 	dsb	sy
    2dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2dc0:	bf00      	nop
    2dc2:	3708      	adds	r7, #8
    2dc4:	46bd      	mov	sp, r7
    2dc6:	bd80      	pop	{r7, pc}
    2dc8:	10000380 	.word	0x10000380
    2dcc:	100002a8 	.word	0x100002a8
    2dd0:	1000038c 	.word	0x1000038c
    2dd4:	1000039c 	.word	0x1000039c
    2dd8:	10000388 	.word	0x10000388
    2ddc:	100002ac 	.word	0x100002ac
    2de0:	e000ed04 	.word	0xe000ed04

00002de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    2dec:	2300      	movs	r3, #0
    2dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d008      	beq.n	2e08 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2df6:	f000 f86f 	bl	2ed8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2dfa:	2100      	movs	r1, #0
    2dfc:	6878      	ldr	r0, [r7, #4]
    2dfe:	f000 fc4f 	bl	36a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2e02:	f000 f877 	bl	2ef4 <xTaskResumeAll>
    2e06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2e08:	68fb      	ldr	r3, [r7, #12]
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d107      	bne.n	2e1e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    2e0e:	4b06      	ldr	r3, [pc, #24]	; (2e28 <vTaskDelay+0x44>)
    2e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2e14:	601a      	str	r2, [r3, #0]
    2e16:	f3bf 8f4f 	dsb	sy
    2e1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2e1e:	bf00      	nop
    2e20:	3710      	adds	r7, #16
    2e22:	46bd      	mov	sp, r7
    2e24:	bd80      	pop	{r7, pc}
    2e26:	bf00      	nop
    2e28:	e000ed04 	.word	0xe000ed04

00002e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b08a      	sub	sp, #40	; 0x28
    2e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    2e32:	2300      	movs	r3, #0
    2e34:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    2e36:	2300      	movs	r3, #0
    2e38:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    2e3a:	1d3a      	adds	r2, r7, #4
    2e3c:	f107 0108 	add.w	r1, r7, #8
    2e40:	f107 030c 	add.w	r3, r7, #12
    2e44:	4618      	mov	r0, r3
    2e46:	f002 fccd 	bl	57e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    2e4a:	6879      	ldr	r1, [r7, #4]
    2e4c:	68bb      	ldr	r3, [r7, #8]
    2e4e:	68fa      	ldr	r2, [r7, #12]
    2e50:	9202      	str	r2, [sp, #8]
    2e52:	9301      	str	r3, [sp, #4]
    2e54:	2300      	movs	r3, #0
    2e56:	9300      	str	r3, [sp, #0]
    2e58:	2300      	movs	r3, #0
    2e5a:	460a      	mov	r2, r1
    2e5c:	4918      	ldr	r1, [pc, #96]	; (2ec0 <vTaskStartScheduler+0x94>)
    2e5e:	4819      	ldr	r0, [pc, #100]	; (2ec4 <vTaskStartScheduler+0x98>)
    2e60:	f7ff fe62 	bl	2b28 <xTaskCreateStatic>
    2e64:	4602      	mov	r2, r0
    2e66:	4b18      	ldr	r3, [pc, #96]	; (2ec8 <vTaskStartScheduler+0x9c>)
    2e68:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    2e6a:	4b17      	ldr	r3, [pc, #92]	; (2ec8 <vTaskStartScheduler+0x9c>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d002      	beq.n	2e78 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
    2e72:	2301      	movs	r3, #1
    2e74:	617b      	str	r3, [r7, #20]
    2e76:	e001      	b.n	2e7c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    2e78:	2300      	movs	r3, #0
    2e7a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2e7c:	697b      	ldr	r3, [r7, #20]
    2e7e:	2b01      	cmp	r3, #1
    2e80:	d102      	bne.n	2e88 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
    2e82:	f002 fcef 	bl	5864 <xTimerCreateTimerTask>
    2e86:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2e88:	697b      	ldr	r3, [r7, #20]
    2e8a:	2b01      	cmp	r3, #1
    2e8c:	d114      	bne.n	2eb8 <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    2e8e:	f04f 0328 	mov.w	r3, #40	; 0x28
    2e92:	f383 8811 	msr	BASEPRI, r3
    2e96:	f3bf 8f6f 	isb	sy
    2e9a:	f3bf 8f4f 	dsb	sy
    2e9e:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    2ea0:	4b0a      	ldr	r3, [pc, #40]	; (2ecc <vTaskStartScheduler+0xa0>)
    2ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ea6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    2ea8:	4b09      	ldr	r3, [pc, #36]	; (2ed0 <vTaskStartScheduler+0xa4>)
    2eaa:	2201      	movs	r2, #1
    2eac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2eae:	4b09      	ldr	r3, [pc, #36]	; (2ed4 <vTaskStartScheduler+0xa8>)
    2eb0:	2200      	movs	r2, #0
    2eb2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2eb4:	f002 fbcc 	bl	5650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    2eb8:	bf00      	nop
    2eba:	3718      	adds	r7, #24
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bd80      	pop	{r7, pc}
    2ec0:	00008c4c 	.word	0x00008c4c
    2ec4:	0000342d 	.word	0x0000342d
    2ec8:	100003a4 	.word	0x100003a4
    2ecc:	100003a0 	.word	0x100003a0
    2ed0:	1000038c 	.word	0x1000038c
    2ed4:	10000384 	.word	0x10000384

00002ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2ed8:	b480      	push	{r7}
    2eda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2edc:	4b04      	ldr	r3, [pc, #16]	; (2ef0 <vTaskSuspendAll+0x18>)
    2ede:	681b      	ldr	r3, [r3, #0]
    2ee0:	3301      	adds	r3, #1
    2ee2:	4a03      	ldr	r2, [pc, #12]	; (2ef0 <vTaskSuspendAll+0x18>)
    2ee4:	6013      	str	r3, [r2, #0]
}
    2ee6:	bf00      	nop
    2ee8:	46bd      	mov	sp, r7
    2eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eee:	4770      	bx	lr
    2ef0:	100003a8 	.word	0x100003a8

00002ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b084      	sub	sp, #16
    2ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    2efa:	2300      	movs	r3, #0
    2efc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    2efe:	2300      	movs	r3, #0
    2f00:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2f02:	f002 fbcf 	bl	56a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    2f06:	4b39      	ldr	r3, [pc, #228]	; (2fec <xTaskResumeAll+0xf8>)
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	3b01      	subs	r3, #1
    2f0c:	4a37      	ldr	r2, [pc, #220]	; (2fec <xTaskResumeAll+0xf8>)
    2f0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2f10:	4b36      	ldr	r3, [pc, #216]	; (2fec <xTaskResumeAll+0xf8>)
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d161      	bne.n	2fdc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2f18:	4b35      	ldr	r3, [pc, #212]	; (2ff0 <xTaskResumeAll+0xfc>)
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d05d      	beq.n	2fdc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2f20:	e02e      	b.n	2f80 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2f22:	4b34      	ldr	r3, [pc, #208]	; (2ff4 <xTaskResumeAll+0x100>)
    2f24:	68db      	ldr	r3, [r3, #12]
    2f26:	68db      	ldr	r3, [r3, #12]
    2f28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	3318      	adds	r3, #24
    2f2e:	4618      	mov	r0, r3
    2f30:	f7ff fdd0 	bl	2ad4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2f34:	68fb      	ldr	r3, [r7, #12]
    2f36:	3304      	adds	r3, #4
    2f38:	4618      	mov	r0, r3
    2f3a:	f7ff fdcb 	bl	2ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2f3e:	68fb      	ldr	r3, [r7, #12]
    2f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f42:	2201      	movs	r2, #1
    2f44:	409a      	lsls	r2, r3
    2f46:	4b2c      	ldr	r3, [pc, #176]	; (2ff8 <xTaskResumeAll+0x104>)
    2f48:	681b      	ldr	r3, [r3, #0]
    2f4a:	4313      	orrs	r3, r2
    2f4c:	4a2a      	ldr	r2, [pc, #168]	; (2ff8 <xTaskResumeAll+0x104>)
    2f4e:	6013      	str	r3, [r2, #0]
    2f50:	68fb      	ldr	r3, [r7, #12]
    2f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2f54:	4613      	mov	r3, r2
    2f56:	009b      	lsls	r3, r3, #2
    2f58:	4413      	add	r3, r2
    2f5a:	009b      	lsls	r3, r3, #2
    2f5c:	4a27      	ldr	r2, [pc, #156]	; (2ffc <xTaskResumeAll+0x108>)
    2f5e:	441a      	add	r2, r3
    2f60:	68fb      	ldr	r3, [r7, #12]
    2f62:	3304      	adds	r3, #4
    2f64:	4619      	mov	r1, r3
    2f66:	4610      	mov	r0, r2
    2f68:	f7ff fd57 	bl	2a1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2f70:	4b23      	ldr	r3, [pc, #140]	; (3000 <xTaskResumeAll+0x10c>)
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f76:	429a      	cmp	r2, r3
    2f78:	d302      	bcc.n	2f80 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    2f7a:	4b22      	ldr	r3, [pc, #136]	; (3004 <xTaskResumeAll+0x110>)
    2f7c:	2201      	movs	r2, #1
    2f7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2f80:	4b1c      	ldr	r3, [pc, #112]	; (2ff4 <xTaskResumeAll+0x100>)
    2f82:	681b      	ldr	r3, [r3, #0]
    2f84:	2b00      	cmp	r3, #0
    2f86:	d1cc      	bne.n	2f22 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    2f88:	68fb      	ldr	r3, [r7, #12]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d001      	beq.n	2f92 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    2f8e:	f000 fadf 	bl	3550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2f92:	4b1d      	ldr	r3, [pc, #116]	; (3008 <xTaskResumeAll+0x114>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d010      	beq.n	2fc0 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    2f9e:	f000 f847 	bl	3030 <xTaskIncrementTick>
    2fa2:	4603      	mov	r3, r0
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d002      	beq.n	2fae <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    2fa8:	4b16      	ldr	r3, [pc, #88]	; (3004 <xTaskResumeAll+0x110>)
    2faa:	2201      	movs	r2, #1
    2fac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	3b01      	subs	r3, #1
    2fb2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    2fb4:	687b      	ldr	r3, [r7, #4]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d1f1      	bne.n	2f9e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    2fba:	4b13      	ldr	r3, [pc, #76]	; (3008 <xTaskResumeAll+0x114>)
    2fbc:	2200      	movs	r2, #0
    2fbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    2fc0:	4b10      	ldr	r3, [pc, #64]	; (3004 <xTaskResumeAll+0x110>)
    2fc2:	681b      	ldr	r3, [r3, #0]
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d009      	beq.n	2fdc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    2fc8:	2301      	movs	r3, #1
    2fca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    2fcc:	4b0f      	ldr	r3, [pc, #60]	; (300c <xTaskResumeAll+0x118>)
    2fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2fd2:	601a      	str	r2, [r3, #0]
    2fd4:	f3bf 8f4f 	dsb	sy
    2fd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2fdc:	f002 fb7c 	bl	56d8 <vPortExitCritical>

	return xAlreadyYielded;
    2fe0:	68bb      	ldr	r3, [r7, #8]
}
    2fe2:	4618      	mov	r0, r3
    2fe4:	3710      	adds	r7, #16
    2fe6:	46bd      	mov	sp, r7
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	bf00      	nop
    2fec:	100003a8 	.word	0x100003a8
    2ff0:	10000380 	.word	0x10000380
    2ff4:	10000340 	.word	0x10000340
    2ff8:	10000388 	.word	0x10000388
    2ffc:	100002ac 	.word	0x100002ac
    3000:	100002a8 	.word	0x100002a8
    3004:	10000394 	.word	0x10000394
    3008:	10000390 	.word	0x10000390
    300c:	e000ed04 	.word	0xe000ed04

00003010 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3010:	b480      	push	{r7}
    3012:	b083      	sub	sp, #12
    3014:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    3016:	4b05      	ldr	r3, [pc, #20]	; (302c <xTaskGetTickCount+0x1c>)
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    301c:	687b      	ldr	r3, [r7, #4]
}
    301e:	4618      	mov	r0, r3
    3020:	370c      	adds	r7, #12
    3022:	46bd      	mov	sp, r7
    3024:	f85d 7b04 	ldr.w	r7, [sp], #4
    3028:	4770      	bx	lr
    302a:	bf00      	nop
    302c:	10000384 	.word	0x10000384

00003030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3030:	b580      	push	{r7, lr}
    3032:	b086      	sub	sp, #24
    3034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3036:	2300      	movs	r3, #0
    3038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    303a:	4b48      	ldr	r3, [pc, #288]	; (315c <xTaskIncrementTick+0x12c>)
    303c:	681b      	ldr	r3, [r3, #0]
    303e:	2b00      	cmp	r3, #0
    3040:	d17c      	bne.n	313c <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3042:	4b47      	ldr	r3, [pc, #284]	; (3160 <xTaskIncrementTick+0x130>)
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	3301      	adds	r3, #1
    3048:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    304a:	4a45      	ldr	r2, [pc, #276]	; (3160 <xTaskIncrementTick+0x130>)
    304c:	693b      	ldr	r3, [r7, #16]
    304e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3050:	693b      	ldr	r3, [r7, #16]
    3052:	2b00      	cmp	r3, #0
    3054:	d110      	bne.n	3078 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
    3056:	4b43      	ldr	r3, [pc, #268]	; (3164 <xTaskIncrementTick+0x134>)
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	60fb      	str	r3, [r7, #12]
    305c:	4b42      	ldr	r3, [pc, #264]	; (3168 <xTaskIncrementTick+0x138>)
    305e:	681b      	ldr	r3, [r3, #0]
    3060:	4a40      	ldr	r2, [pc, #256]	; (3164 <xTaskIncrementTick+0x134>)
    3062:	6013      	str	r3, [r2, #0]
    3064:	4a40      	ldr	r2, [pc, #256]	; (3168 <xTaskIncrementTick+0x138>)
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	6013      	str	r3, [r2, #0]
    306a:	4b40      	ldr	r3, [pc, #256]	; (316c <xTaskIncrementTick+0x13c>)
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	3301      	adds	r3, #1
    3070:	4a3e      	ldr	r2, [pc, #248]	; (316c <xTaskIncrementTick+0x13c>)
    3072:	6013      	str	r3, [r2, #0]
    3074:	f000 fa6c 	bl	3550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    3078:	4b3d      	ldr	r3, [pc, #244]	; (3170 <xTaskIncrementTick+0x140>)
    307a:	681b      	ldr	r3, [r3, #0]
    307c:	693a      	ldr	r2, [r7, #16]
    307e:	429a      	cmp	r2, r3
    3080:	d34d      	bcc.n	311e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3082:	4b38      	ldr	r3, [pc, #224]	; (3164 <xTaskIncrementTick+0x134>)
    3084:	681b      	ldr	r3, [r3, #0]
    3086:	681b      	ldr	r3, [r3, #0]
    3088:	2b00      	cmp	r3, #0
    308a:	d101      	bne.n	3090 <xTaskIncrementTick+0x60>
    308c:	2301      	movs	r3, #1
    308e:	e000      	b.n	3092 <xTaskIncrementTick+0x62>
    3090:	2300      	movs	r3, #0
    3092:	2b00      	cmp	r3, #0
    3094:	d004      	beq.n	30a0 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3096:	4b36      	ldr	r3, [pc, #216]	; (3170 <xTaskIncrementTick+0x140>)
    3098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    309c:	601a      	str	r2, [r3, #0]
					break;
    309e:	e03e      	b.n	311e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    30a0:	4b30      	ldr	r3, [pc, #192]	; (3164 <xTaskIncrementTick+0x134>)
    30a2:	681b      	ldr	r3, [r3, #0]
    30a4:	68db      	ldr	r3, [r3, #12]
    30a6:	68db      	ldr	r3, [r3, #12]
    30a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    30aa:	68bb      	ldr	r3, [r7, #8]
    30ac:	685b      	ldr	r3, [r3, #4]
    30ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    30b0:	693a      	ldr	r2, [r7, #16]
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	429a      	cmp	r2, r3
    30b6:	d203      	bcs.n	30c0 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    30b8:	4a2d      	ldr	r2, [pc, #180]	; (3170 <xTaskIncrementTick+0x140>)
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	6013      	str	r3, [r2, #0]
						break;
    30be:	e02e      	b.n	311e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    30c0:	68bb      	ldr	r3, [r7, #8]
    30c2:	3304      	adds	r3, #4
    30c4:	4618      	mov	r0, r3
    30c6:	f7ff fd05 	bl	2ad4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    30ca:	68bb      	ldr	r3, [r7, #8]
    30cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ce:	2b00      	cmp	r3, #0
    30d0:	d004      	beq.n	30dc <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    30d2:	68bb      	ldr	r3, [r7, #8]
    30d4:	3318      	adds	r3, #24
    30d6:	4618      	mov	r0, r3
    30d8:	f7ff fcfc 	bl	2ad4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    30dc:	68bb      	ldr	r3, [r7, #8]
    30de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30e0:	2201      	movs	r2, #1
    30e2:	409a      	lsls	r2, r3
    30e4:	4b23      	ldr	r3, [pc, #140]	; (3174 <xTaskIncrementTick+0x144>)
    30e6:	681b      	ldr	r3, [r3, #0]
    30e8:	4313      	orrs	r3, r2
    30ea:	4a22      	ldr	r2, [pc, #136]	; (3174 <xTaskIncrementTick+0x144>)
    30ec:	6013      	str	r3, [r2, #0]
    30ee:	68bb      	ldr	r3, [r7, #8]
    30f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    30f2:	4613      	mov	r3, r2
    30f4:	009b      	lsls	r3, r3, #2
    30f6:	4413      	add	r3, r2
    30f8:	009b      	lsls	r3, r3, #2
    30fa:	4a1f      	ldr	r2, [pc, #124]	; (3178 <xTaskIncrementTick+0x148>)
    30fc:	441a      	add	r2, r3
    30fe:	68bb      	ldr	r3, [r7, #8]
    3100:	3304      	adds	r3, #4
    3102:	4619      	mov	r1, r3
    3104:	4610      	mov	r0, r2
    3106:	f7ff fc88 	bl	2a1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    310a:	68bb      	ldr	r3, [r7, #8]
    310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    310e:	4b1b      	ldr	r3, [pc, #108]	; (317c <xTaskIncrementTick+0x14c>)
    3110:	681b      	ldr	r3, [r3, #0]
    3112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3114:	429a      	cmp	r2, r3
    3116:	d3b4      	bcc.n	3082 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
    3118:	2301      	movs	r3, #1
    311a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    311c:	e7b1      	b.n	3082 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    311e:	4b17      	ldr	r3, [pc, #92]	; (317c <xTaskIncrementTick+0x14c>)
    3120:	681b      	ldr	r3, [r3, #0]
    3122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3124:	4914      	ldr	r1, [pc, #80]	; (3178 <xTaskIncrementTick+0x148>)
    3126:	4613      	mov	r3, r2
    3128:	009b      	lsls	r3, r3, #2
    312a:	4413      	add	r3, r2
    312c:	009b      	lsls	r3, r3, #2
    312e:	440b      	add	r3, r1
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	2b01      	cmp	r3, #1
    3134:	d907      	bls.n	3146 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
    3136:	2301      	movs	r3, #1
    3138:	617b      	str	r3, [r7, #20]
    313a:	e004      	b.n	3146 <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    313c:	4b10      	ldr	r3, [pc, #64]	; (3180 <xTaskIncrementTick+0x150>)
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	3301      	adds	r3, #1
    3142:	4a0f      	ldr	r2, [pc, #60]	; (3180 <xTaskIncrementTick+0x150>)
    3144:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3146:	4b0f      	ldr	r3, [pc, #60]	; (3184 <xTaskIncrementTick+0x154>)
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d001      	beq.n	3152 <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
    314e:	2301      	movs	r3, #1
    3150:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    3152:	697b      	ldr	r3, [r7, #20]
}
    3154:	4618      	mov	r0, r3
    3156:	3718      	adds	r7, #24
    3158:	46bd      	mov	sp, r7
    315a:	bd80      	pop	{r7, pc}
    315c:	100003a8 	.word	0x100003a8
    3160:	10000384 	.word	0x10000384
    3164:	10000338 	.word	0x10000338
    3168:	1000033c 	.word	0x1000033c
    316c:	10000398 	.word	0x10000398
    3170:	100003a0 	.word	0x100003a0
    3174:	10000388 	.word	0x10000388
    3178:	100002ac 	.word	0x100002ac
    317c:	100002a8 	.word	0x100002a8
    3180:	10000390 	.word	0x10000390
    3184:	10000394 	.word	0x10000394

00003188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3188:	b580      	push	{r7, lr}
    318a:	b084      	sub	sp, #16
    318c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    318e:	4b28      	ldr	r3, [pc, #160]	; (3230 <vTaskSwitchContext+0xa8>)
    3190:	681b      	ldr	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d003      	beq.n	319e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3196:	4b27      	ldr	r3, [pc, #156]	; (3234 <vTaskSwitchContext+0xac>)
    3198:	2201      	movs	r2, #1
    319a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    319c:	e043      	b.n	3226 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    319e:	4b25      	ldr	r3, [pc, #148]	; (3234 <vTaskSwitchContext+0xac>)
    31a0:	2200      	movs	r2, #0
    31a2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    31a4:	f002 f8a2 	bl	52ec <ThreadRuntimeCounter>
    31a8:	4602      	mov	r2, r0
    31aa:	4b23      	ldr	r3, [pc, #140]	; (3238 <vTaskSwitchContext+0xb0>)
    31ac:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    31ae:	4b22      	ldr	r3, [pc, #136]	; (3238 <vTaskSwitchContext+0xb0>)
    31b0:	681a      	ldr	r2, [r3, #0]
    31b2:	4b22      	ldr	r3, [pc, #136]	; (323c <vTaskSwitchContext+0xb4>)
    31b4:	681b      	ldr	r3, [r3, #0]
    31b6:	429a      	cmp	r2, r3
    31b8:	d909      	bls.n	31ce <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    31ba:	4b21      	ldr	r3, [pc, #132]	; (3240 <vTaskSwitchContext+0xb8>)
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	6d59      	ldr	r1, [r3, #84]	; 0x54
    31c0:	4a1d      	ldr	r2, [pc, #116]	; (3238 <vTaskSwitchContext+0xb0>)
    31c2:	6810      	ldr	r0, [r2, #0]
    31c4:	4a1d      	ldr	r2, [pc, #116]	; (323c <vTaskSwitchContext+0xb4>)
    31c6:	6812      	ldr	r2, [r2, #0]
    31c8:	1a82      	subs	r2, r0, r2
    31ca:	440a      	add	r2, r1
    31cc:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    31ce:	4b1a      	ldr	r3, [pc, #104]	; (3238 <vTaskSwitchContext+0xb0>)
    31d0:	681b      	ldr	r3, [r3, #0]
    31d2:	4a1a      	ldr	r2, [pc, #104]	; (323c <vTaskSwitchContext+0xb4>)
    31d4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    31d6:	4b1b      	ldr	r3, [pc, #108]	; (3244 <vTaskSwitchContext+0xbc>)
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	fab3 f383 	clz	r3, r3
    31e2:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    31e4:	78fb      	ldrb	r3, [r7, #3]
    31e6:	f1c3 031f 	rsb	r3, r3, #31
    31ea:	60fb      	str	r3, [r7, #12]
    31ec:	68fa      	ldr	r2, [r7, #12]
    31ee:	4613      	mov	r3, r2
    31f0:	009b      	lsls	r3, r3, #2
    31f2:	4413      	add	r3, r2
    31f4:	009b      	lsls	r3, r3, #2
    31f6:	4a14      	ldr	r2, [pc, #80]	; (3248 <vTaskSwitchContext+0xc0>)
    31f8:	4413      	add	r3, r2
    31fa:	60bb      	str	r3, [r7, #8]
    31fc:	68bb      	ldr	r3, [r7, #8]
    31fe:	685b      	ldr	r3, [r3, #4]
    3200:	685a      	ldr	r2, [r3, #4]
    3202:	68bb      	ldr	r3, [r7, #8]
    3204:	605a      	str	r2, [r3, #4]
    3206:	68bb      	ldr	r3, [r7, #8]
    3208:	685a      	ldr	r2, [r3, #4]
    320a:	68bb      	ldr	r3, [r7, #8]
    320c:	3308      	adds	r3, #8
    320e:	429a      	cmp	r2, r3
    3210:	d104      	bne.n	321c <vTaskSwitchContext+0x94>
    3212:	68bb      	ldr	r3, [r7, #8]
    3214:	685b      	ldr	r3, [r3, #4]
    3216:	685a      	ldr	r2, [r3, #4]
    3218:	68bb      	ldr	r3, [r7, #8]
    321a:	605a      	str	r2, [r3, #4]
    321c:	68bb      	ldr	r3, [r7, #8]
    321e:	685b      	ldr	r3, [r3, #4]
    3220:	68db      	ldr	r3, [r3, #12]
    3222:	4a07      	ldr	r2, [pc, #28]	; (3240 <vTaskSwitchContext+0xb8>)
    3224:	6013      	str	r3, [r2, #0]
}
    3226:	bf00      	nop
    3228:	3710      	adds	r7, #16
    322a:	46bd      	mov	sp, r7
    322c:	bd80      	pop	{r7, pc}
    322e:	bf00      	nop
    3230:	100003a8 	.word	0x100003a8
    3234:	10000394 	.word	0x10000394
    3238:	100003b0 	.word	0x100003b0
    323c:	100003ac 	.word	0x100003ac
    3240:	100002a8 	.word	0x100002a8
    3244:	10000388 	.word	0x10000388
    3248:	100002ac 	.word	0x100002ac

0000324c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    324c:	b580      	push	{r7, lr}
    324e:	b082      	sub	sp, #8
    3250:	af00      	add	r7, sp, #0
    3252:	6078      	str	r0, [r7, #4]
    3254:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3256:	4b07      	ldr	r3, [pc, #28]	; (3274 <vTaskPlaceOnEventList+0x28>)
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	3318      	adds	r3, #24
    325c:	4619      	mov	r1, r3
    325e:	6878      	ldr	r0, [r7, #4]
    3260:	f7ff fbff 	bl	2a62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3264:	2101      	movs	r1, #1
    3266:	6838      	ldr	r0, [r7, #0]
    3268:	f000 fa1a 	bl	36a0 <prvAddCurrentTaskToDelayedList>
}
    326c:	bf00      	nop
    326e:	3708      	adds	r7, #8
    3270:	46bd      	mov	sp, r7
    3272:	bd80      	pop	{r7, pc}
    3274:	100002a8 	.word	0x100002a8

00003278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    3278:	b580      	push	{r7, lr}
    327a:	b084      	sub	sp, #16
    327c:	af00      	add	r7, sp, #0
    327e:	60f8      	str	r0, [r7, #12]
    3280:	60b9      	str	r1, [r7, #8]
    3282:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3284:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <vTaskPlaceOnEventListRestricted+0x38>)
    3286:	681b      	ldr	r3, [r3, #0]
    3288:	3318      	adds	r3, #24
    328a:	4619      	mov	r1, r3
    328c:	68f8      	ldr	r0, [r7, #12]
    328e:	f7ff fbc4 	bl	2a1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	2b00      	cmp	r3, #0
    3296:	d002      	beq.n	329e <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
    3298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    329c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    329e:	6879      	ldr	r1, [r7, #4]
    32a0:	68b8      	ldr	r0, [r7, #8]
    32a2:	f000 f9fd 	bl	36a0 <prvAddCurrentTaskToDelayedList>
	}
    32a6:	bf00      	nop
    32a8:	3710      	adds	r7, #16
    32aa:	46bd      	mov	sp, r7
    32ac:	bd80      	pop	{r7, pc}
    32ae:	bf00      	nop
    32b0:	100002a8 	.word	0x100002a8

000032b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b084      	sub	sp, #16
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	68db      	ldr	r3, [r3, #12]
    32c0:	68db      	ldr	r3, [r3, #12]
    32c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    32c4:	68bb      	ldr	r3, [r7, #8]
    32c6:	3318      	adds	r3, #24
    32c8:	4618      	mov	r0, r3
    32ca:	f7ff fc03 	bl	2ad4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    32ce:	4b1d      	ldr	r3, [pc, #116]	; (3344 <xTaskRemoveFromEventList+0x90>)
    32d0:	681b      	ldr	r3, [r3, #0]
    32d2:	2b00      	cmp	r3, #0
    32d4:	d11c      	bne.n	3310 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    32d6:	68bb      	ldr	r3, [r7, #8]
    32d8:	3304      	adds	r3, #4
    32da:	4618      	mov	r0, r3
    32dc:	f7ff fbfa 	bl	2ad4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    32e0:	68bb      	ldr	r3, [r7, #8]
    32e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32e4:	2201      	movs	r2, #1
    32e6:	409a      	lsls	r2, r3
    32e8:	4b17      	ldr	r3, [pc, #92]	; (3348 <xTaskRemoveFromEventList+0x94>)
    32ea:	681b      	ldr	r3, [r3, #0]
    32ec:	4313      	orrs	r3, r2
    32ee:	4a16      	ldr	r2, [pc, #88]	; (3348 <xTaskRemoveFromEventList+0x94>)
    32f0:	6013      	str	r3, [r2, #0]
    32f2:	68bb      	ldr	r3, [r7, #8]
    32f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    32f6:	4613      	mov	r3, r2
    32f8:	009b      	lsls	r3, r3, #2
    32fa:	4413      	add	r3, r2
    32fc:	009b      	lsls	r3, r3, #2
    32fe:	4a13      	ldr	r2, [pc, #76]	; (334c <xTaskRemoveFromEventList+0x98>)
    3300:	441a      	add	r2, r3
    3302:	68bb      	ldr	r3, [r7, #8]
    3304:	3304      	adds	r3, #4
    3306:	4619      	mov	r1, r3
    3308:	4610      	mov	r0, r2
    330a:	f7ff fb86 	bl	2a1a <vListInsertEnd>
    330e:	e005      	b.n	331c <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3310:	68bb      	ldr	r3, [r7, #8]
    3312:	3318      	adds	r3, #24
    3314:	4619      	mov	r1, r3
    3316:	480e      	ldr	r0, [pc, #56]	; (3350 <xTaskRemoveFromEventList+0x9c>)
    3318:	f7ff fb7f 	bl	2a1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    331c:	68bb      	ldr	r3, [r7, #8]
    331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3320:	4b0c      	ldr	r3, [pc, #48]	; (3354 <xTaskRemoveFromEventList+0xa0>)
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3326:	429a      	cmp	r2, r3
    3328:	d905      	bls.n	3336 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    332a:	2301      	movs	r3, #1
    332c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    332e:	4b0a      	ldr	r3, [pc, #40]	; (3358 <xTaskRemoveFromEventList+0xa4>)
    3330:	2201      	movs	r2, #1
    3332:	601a      	str	r2, [r3, #0]
    3334:	e001      	b.n	333a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    3336:	2300      	movs	r3, #0
    3338:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    333a:	68fb      	ldr	r3, [r7, #12]
}
    333c:	4618      	mov	r0, r3
    333e:	3710      	adds	r7, #16
    3340:	46bd      	mov	sp, r7
    3342:	bd80      	pop	{r7, pc}
    3344:	100003a8 	.word	0x100003a8
    3348:	10000388 	.word	0x10000388
    334c:	100002ac 	.word	0x100002ac
    3350:	10000340 	.word	0x10000340
    3354:	100002a8 	.word	0x100002a8
    3358:	10000394 	.word	0x10000394

0000335c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    335c:	b480      	push	{r7}
    335e:	b083      	sub	sp, #12
    3360:	af00      	add	r7, sp, #0
    3362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3364:	4b06      	ldr	r3, [pc, #24]	; (3380 <vTaskInternalSetTimeOutState+0x24>)
    3366:	681a      	ldr	r2, [r3, #0]
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    336c:	4b05      	ldr	r3, [pc, #20]	; (3384 <vTaskInternalSetTimeOutState+0x28>)
    336e:	681a      	ldr	r2, [r3, #0]
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	605a      	str	r2, [r3, #4]
}
    3374:	bf00      	nop
    3376:	370c      	adds	r7, #12
    3378:	46bd      	mov	sp, r7
    337a:	f85d 7b04 	ldr.w	r7, [sp], #4
    337e:	4770      	bx	lr
    3380:	10000398 	.word	0x10000398
    3384:	10000384 	.word	0x10000384

00003388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3388:	b580      	push	{r7, lr}
    338a:	b086      	sub	sp, #24
    338c:	af00      	add	r7, sp, #0
    338e:	6078      	str	r0, [r7, #4]
    3390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3392:	f002 f987 	bl	56a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3396:	4b1d      	ldr	r3, [pc, #116]	; (340c <xTaskCheckForTimeOut+0x84>)
    3398:	681b      	ldr	r3, [r3, #0]
    339a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	685b      	ldr	r3, [r3, #4]
    33a0:	693a      	ldr	r2, [r7, #16]
    33a2:	1ad3      	subs	r3, r2, r3
    33a4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    33a6:	683b      	ldr	r3, [r7, #0]
    33a8:	681b      	ldr	r3, [r3, #0]
    33aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    33ae:	d102      	bne.n	33b6 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    33b0:	2300      	movs	r3, #0
    33b2:	617b      	str	r3, [r7, #20]
    33b4:	e023      	b.n	33fe <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	681a      	ldr	r2, [r3, #0]
    33ba:	4b15      	ldr	r3, [pc, #84]	; (3410 <xTaskCheckForTimeOut+0x88>)
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	429a      	cmp	r2, r3
    33c0:	d007      	beq.n	33d2 <xTaskCheckForTimeOut+0x4a>
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	685b      	ldr	r3, [r3, #4]
    33c6:	693a      	ldr	r2, [r7, #16]
    33c8:	429a      	cmp	r2, r3
    33ca:	d302      	bcc.n	33d2 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    33cc:	2301      	movs	r3, #1
    33ce:	617b      	str	r3, [r7, #20]
    33d0:	e015      	b.n	33fe <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    33d2:	683b      	ldr	r3, [r7, #0]
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	68fa      	ldr	r2, [r7, #12]
    33d8:	429a      	cmp	r2, r3
    33da:	d20b      	bcs.n	33f4 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    33dc:	683b      	ldr	r3, [r7, #0]
    33de:	681a      	ldr	r2, [r3, #0]
    33e0:	68fb      	ldr	r3, [r7, #12]
    33e2:	1ad2      	subs	r2, r2, r3
    33e4:	683b      	ldr	r3, [r7, #0]
    33e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	f7ff ffb7 	bl	335c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    33ee:	2300      	movs	r3, #0
    33f0:	617b      	str	r3, [r7, #20]
    33f2:	e004      	b.n	33fe <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    33f4:	683b      	ldr	r3, [r7, #0]
    33f6:	2200      	movs	r2, #0
    33f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    33fa:	2301      	movs	r3, #1
    33fc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    33fe:	f002 f96b 	bl	56d8 <vPortExitCritical>

	return xReturn;
    3402:	697b      	ldr	r3, [r7, #20]
}
    3404:	4618      	mov	r0, r3
    3406:	3718      	adds	r7, #24
    3408:	46bd      	mov	sp, r7
    340a:	bd80      	pop	{r7, pc}
    340c:	10000384 	.word	0x10000384
    3410:	10000398 	.word	0x10000398

00003414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3414:	b480      	push	{r7}
    3416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    3418:	4b03      	ldr	r3, [pc, #12]	; (3428 <vTaskMissedYield+0x14>)
    341a:	2201      	movs	r2, #1
    341c:	601a      	str	r2, [r3, #0]
}
    341e:	bf00      	nop
    3420:	46bd      	mov	sp, r7
    3422:	f85d 7b04 	ldr.w	r7, [sp], #4
    3426:	4770      	bx	lr
    3428:	10000394 	.word	0x10000394

0000342c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    342c:	b580      	push	{r7, lr}
    342e:	b082      	sub	sp, #8
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3434:	f000 f842 	bl	34bc <prvCheckTasksWaitingTermination>
    3438:	e7fc      	b.n	3434 <prvIdleTask+0x8>
    343a:	Address 0x000000000000343a is out of bounds.


0000343c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    343c:	b580      	push	{r7, lr}
    343e:	b082      	sub	sp, #8
    3440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3442:	2300      	movs	r3, #0
    3444:	607b      	str	r3, [r7, #4]
    3446:	e00c      	b.n	3462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3448:	687a      	ldr	r2, [r7, #4]
    344a:	4613      	mov	r3, r2
    344c:	009b      	lsls	r3, r3, #2
    344e:	4413      	add	r3, r2
    3450:	009b      	lsls	r3, r3, #2
    3452:	4a12      	ldr	r2, [pc, #72]	; (349c <prvInitialiseTaskLists+0x60>)
    3454:	4413      	add	r3, r2
    3456:	4618      	mov	r0, r3
    3458:	f7ff fab2 	bl	29c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	3301      	adds	r3, #1
    3460:	607b      	str	r3, [r7, #4]
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	2b04      	cmp	r3, #4
    3466:	d9ef      	bls.n	3448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    3468:	480d      	ldr	r0, [pc, #52]	; (34a0 <prvInitialiseTaskLists+0x64>)
    346a:	f7ff faa9 	bl	29c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    346e:	480d      	ldr	r0, [pc, #52]	; (34a4 <prvInitialiseTaskLists+0x68>)
    3470:	f7ff faa6 	bl	29c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3474:	480c      	ldr	r0, [pc, #48]	; (34a8 <prvInitialiseTaskLists+0x6c>)
    3476:	f7ff faa3 	bl	29c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    347a:	480c      	ldr	r0, [pc, #48]	; (34ac <prvInitialiseTaskLists+0x70>)
    347c:	f7ff faa0 	bl	29c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3480:	480b      	ldr	r0, [pc, #44]	; (34b0 <prvInitialiseTaskLists+0x74>)
    3482:	f7ff fa9d 	bl	29c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3486:	4b0b      	ldr	r3, [pc, #44]	; (34b4 <prvInitialiseTaskLists+0x78>)
    3488:	4a05      	ldr	r2, [pc, #20]	; (34a0 <prvInitialiseTaskLists+0x64>)
    348a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    348c:	4b0a      	ldr	r3, [pc, #40]	; (34b8 <prvInitialiseTaskLists+0x7c>)
    348e:	4a05      	ldr	r2, [pc, #20]	; (34a4 <prvInitialiseTaskLists+0x68>)
    3490:	601a      	str	r2, [r3, #0]
}
    3492:	bf00      	nop
    3494:	3708      	adds	r7, #8
    3496:	46bd      	mov	sp, r7
    3498:	bd80      	pop	{r7, pc}
    349a:	bf00      	nop
    349c:	100002ac 	.word	0x100002ac
    34a0:	10000310 	.word	0x10000310
    34a4:	10000324 	.word	0x10000324
    34a8:	10000340 	.word	0x10000340
    34ac:	10000354 	.word	0x10000354
    34b0:	1000036c 	.word	0x1000036c
    34b4:	10000338 	.word	0x10000338
    34b8:	1000033c 	.word	0x1000033c

000034bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    34bc:	b580      	push	{r7, lr}
    34be:	b082      	sub	sp, #8
    34c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    34c2:	e019      	b.n	34f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    34c4:	f002 f8ee 	bl	56a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    34c8:	4b0f      	ldr	r3, [pc, #60]	; (3508 <prvCheckTasksWaitingTermination+0x4c>)
    34ca:	68db      	ldr	r3, [r3, #12]
    34cc:	68db      	ldr	r3, [r3, #12]
    34ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	3304      	adds	r3, #4
    34d4:	4618      	mov	r0, r3
    34d6:	f7ff fafd 	bl	2ad4 <uxListRemove>
				--uxCurrentNumberOfTasks;
    34da:	4b0c      	ldr	r3, [pc, #48]	; (350c <prvCheckTasksWaitingTermination+0x50>)
    34dc:	681b      	ldr	r3, [r3, #0]
    34de:	3b01      	subs	r3, #1
    34e0:	4a0a      	ldr	r2, [pc, #40]	; (350c <prvCheckTasksWaitingTermination+0x50>)
    34e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    34e4:	4b0a      	ldr	r3, [pc, #40]	; (3510 <prvCheckTasksWaitingTermination+0x54>)
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	3b01      	subs	r3, #1
    34ea:	4a09      	ldr	r2, [pc, #36]	; (3510 <prvCheckTasksWaitingTermination+0x54>)
    34ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    34ee:	f002 f8f3 	bl	56d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    34f2:	6878      	ldr	r0, [r7, #4]
    34f4:	f000 f80e 	bl	3514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    34f8:	4b05      	ldr	r3, [pc, #20]	; (3510 <prvCheckTasksWaitingTermination+0x54>)
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d1e1      	bne.n	34c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    3500:	bf00      	nop
    3502:	3708      	adds	r7, #8
    3504:	46bd      	mov	sp, r7
    3506:	bd80      	pop	{r7, pc}
    3508:	10000354 	.word	0x10000354
    350c:	10000380 	.word	0x10000380
    3510:	10000368 	.word	0x10000368

00003514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3514:	b580      	push	{r7, lr}
    3516:	b082      	sub	sp, #8
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    3522:	2b00      	cmp	r3, #0
    3524:	d108      	bne.n	3538 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    352a:	4618      	mov	r0, r3
    352c:	f000 f930 	bl	3790 <vPortFree>
				vPortFree( pxTCB );
    3530:	6878      	ldr	r0, [r7, #4]
    3532:	f000 f92d 	bl	3790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    3536:	e007      	b.n	3548 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    353e:	2b01      	cmp	r3, #1
    3540:	d102      	bne.n	3548 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
    3542:	6878      	ldr	r0, [r7, #4]
    3544:	f000 f924 	bl	3790 <vPortFree>
	}
    3548:	bf00      	nop
    354a:	3708      	adds	r7, #8
    354c:	46bd      	mov	sp, r7
    354e:	bd80      	pop	{r7, pc}

00003550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3550:	b480      	push	{r7}
    3552:	b083      	sub	sp, #12
    3554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3556:	4b0f      	ldr	r3, [pc, #60]	; (3594 <prvResetNextTaskUnblockTime+0x44>)
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	2b00      	cmp	r3, #0
    355e:	d101      	bne.n	3564 <prvResetNextTaskUnblockTime+0x14>
    3560:	2301      	movs	r3, #1
    3562:	e000      	b.n	3566 <prvResetNextTaskUnblockTime+0x16>
    3564:	2300      	movs	r3, #0
    3566:	2b00      	cmp	r3, #0
    3568:	d004      	beq.n	3574 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    356a:	4b0b      	ldr	r3, [pc, #44]	; (3598 <prvResetNextTaskUnblockTime+0x48>)
    356c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3570:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    3572:	e008      	b.n	3586 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3574:	4b07      	ldr	r3, [pc, #28]	; (3594 <prvResetNextTaskUnblockTime+0x44>)
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	68db      	ldr	r3, [r3, #12]
    357a:	68db      	ldr	r3, [r3, #12]
    357c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    357e:	687b      	ldr	r3, [r7, #4]
    3580:	685b      	ldr	r3, [r3, #4]
    3582:	4a05      	ldr	r2, [pc, #20]	; (3598 <prvResetNextTaskUnblockTime+0x48>)
    3584:	6013      	str	r3, [r2, #0]
}
    3586:	bf00      	nop
    3588:	370c      	adds	r7, #12
    358a:	46bd      	mov	sp, r7
    358c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3590:	4770      	bx	lr
    3592:	bf00      	nop
    3594:	10000338 	.word	0x10000338
    3598:	100003a0 	.word	0x100003a0

0000359c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    359c:	b480      	push	{r7}
    359e:	b083      	sub	sp, #12
    35a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    35a2:	4b0b      	ldr	r3, [pc, #44]	; (35d0 <xTaskGetSchedulerState+0x34>)
    35a4:	681b      	ldr	r3, [r3, #0]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d102      	bne.n	35b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    35aa:	2301      	movs	r3, #1
    35ac:	607b      	str	r3, [r7, #4]
    35ae:	e008      	b.n	35c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    35b0:	4b08      	ldr	r3, [pc, #32]	; (35d4 <xTaskGetSchedulerState+0x38>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d102      	bne.n	35be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    35b8:	2302      	movs	r3, #2
    35ba:	607b      	str	r3, [r7, #4]
    35bc:	e001      	b.n	35c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    35be:	2300      	movs	r3, #0
    35c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    35c2:	687b      	ldr	r3, [r7, #4]
	}
    35c4:	4618      	mov	r0, r3
    35c6:	370c      	adds	r7, #12
    35c8:	46bd      	mov	sp, r7
    35ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    35ce:	4770      	bx	lr
    35d0:	1000038c 	.word	0x1000038c
    35d4:	100003a8 	.word	0x100003a8

000035d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    35d8:	b580      	push	{r7, lr}
    35da:	b084      	sub	sp, #16
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    35e4:	2300      	movs	r3, #0
    35e6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d04f      	beq.n	368e <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    35ee:	68bb      	ldr	r3, [r7, #8]
    35f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    35f2:	1e5a      	subs	r2, r3, #1
    35f4:	68bb      	ldr	r3, [r7, #8]
    35f6:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    35f8:	68bb      	ldr	r3, [r7, #8]
    35fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35fc:	68bb      	ldr	r3, [r7, #8]
    35fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3600:	429a      	cmp	r2, r3
    3602:	d044      	beq.n	368e <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3604:	68bb      	ldr	r3, [r7, #8]
    3606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3608:	2b00      	cmp	r3, #0
    360a:	d140      	bne.n	368e <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    360c:	68bb      	ldr	r3, [r7, #8]
    360e:	3304      	adds	r3, #4
    3610:	4618      	mov	r0, r3
    3612:	f7ff fa5f 	bl	2ad4 <uxListRemove>
    3616:	4603      	mov	r3, r0
    3618:	2b00      	cmp	r3, #0
    361a:	d115      	bne.n	3648 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    361c:	68bb      	ldr	r3, [r7, #8]
    361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3620:	491d      	ldr	r1, [pc, #116]	; (3698 <xTaskPriorityDisinherit+0xc0>)
    3622:	4613      	mov	r3, r2
    3624:	009b      	lsls	r3, r3, #2
    3626:	4413      	add	r3, r2
    3628:	009b      	lsls	r3, r3, #2
    362a:	440b      	add	r3, r1
    362c:	681b      	ldr	r3, [r3, #0]
    362e:	2b00      	cmp	r3, #0
    3630:	d10a      	bne.n	3648 <xTaskPriorityDisinherit+0x70>
    3632:	68bb      	ldr	r3, [r7, #8]
    3634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3636:	2201      	movs	r2, #1
    3638:	fa02 f303 	lsl.w	r3, r2, r3
    363c:	43da      	mvns	r2, r3
    363e:	4b17      	ldr	r3, [pc, #92]	; (369c <xTaskPriorityDisinherit+0xc4>)
    3640:	681b      	ldr	r3, [r3, #0]
    3642:	4013      	ands	r3, r2
    3644:	4a15      	ldr	r2, [pc, #84]	; (369c <xTaskPriorityDisinherit+0xc4>)
    3646:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    3648:	68bb      	ldr	r3, [r7, #8]
    364a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    364c:	68bb      	ldr	r3, [r7, #8]
    364e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3650:	68bb      	ldr	r3, [r7, #8]
    3652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3654:	f1c3 0205 	rsb	r2, r3, #5
    3658:	68bb      	ldr	r3, [r7, #8]
    365a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    365c:	68bb      	ldr	r3, [r7, #8]
    365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3660:	2201      	movs	r2, #1
    3662:	409a      	lsls	r2, r3
    3664:	4b0d      	ldr	r3, [pc, #52]	; (369c <xTaskPriorityDisinherit+0xc4>)
    3666:	681b      	ldr	r3, [r3, #0]
    3668:	4313      	orrs	r3, r2
    366a:	4a0c      	ldr	r2, [pc, #48]	; (369c <xTaskPriorityDisinherit+0xc4>)
    366c:	6013      	str	r3, [r2, #0]
    366e:	68bb      	ldr	r3, [r7, #8]
    3670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3672:	4613      	mov	r3, r2
    3674:	009b      	lsls	r3, r3, #2
    3676:	4413      	add	r3, r2
    3678:	009b      	lsls	r3, r3, #2
    367a:	4a07      	ldr	r2, [pc, #28]	; (3698 <xTaskPriorityDisinherit+0xc0>)
    367c:	441a      	add	r2, r3
    367e:	68bb      	ldr	r3, [r7, #8]
    3680:	3304      	adds	r3, #4
    3682:	4619      	mov	r1, r3
    3684:	4610      	mov	r0, r2
    3686:	f7ff f9c8 	bl	2a1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    368a:	2301      	movs	r3, #1
    368c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    368e:	68fb      	ldr	r3, [r7, #12]
	}
    3690:	4618      	mov	r0, r3
    3692:	3710      	adds	r7, #16
    3694:	46bd      	mov	sp, r7
    3696:	bd80      	pop	{r7, pc}
    3698:	100002ac 	.word	0x100002ac
    369c:	10000388 	.word	0x10000388

000036a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    36a0:	b580      	push	{r7, lr}
    36a2:	b084      	sub	sp, #16
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
    36a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    36aa:	4b29      	ldr	r3, [pc, #164]	; (3750 <prvAddCurrentTaskToDelayedList+0xb0>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    36b0:	4b28      	ldr	r3, [pc, #160]	; (3754 <prvAddCurrentTaskToDelayedList+0xb4>)
    36b2:	681b      	ldr	r3, [r3, #0]
    36b4:	3304      	adds	r3, #4
    36b6:	4618      	mov	r0, r3
    36b8:	f7ff fa0c 	bl	2ad4 <uxListRemove>
    36bc:	4603      	mov	r3, r0
    36be:	2b00      	cmp	r3, #0
    36c0:	d10b      	bne.n	36da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    36c2:	4b24      	ldr	r3, [pc, #144]	; (3754 <prvAddCurrentTaskToDelayedList+0xb4>)
    36c4:	681b      	ldr	r3, [r3, #0]
    36c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36c8:	2201      	movs	r2, #1
    36ca:	fa02 f303 	lsl.w	r3, r2, r3
    36ce:	43da      	mvns	r2, r3
    36d0:	4b21      	ldr	r3, [pc, #132]	; (3758 <prvAddCurrentTaskToDelayedList+0xb8>)
    36d2:	681b      	ldr	r3, [r3, #0]
    36d4:	4013      	ands	r3, r2
    36d6:	4a20      	ldr	r2, [pc, #128]	; (3758 <prvAddCurrentTaskToDelayedList+0xb8>)
    36d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    36da:	687b      	ldr	r3, [r7, #4]
    36dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    36e0:	d10a      	bne.n	36f8 <prvAddCurrentTaskToDelayedList+0x58>
    36e2:	683b      	ldr	r3, [r7, #0]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d007      	beq.n	36f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    36e8:	4b1a      	ldr	r3, [pc, #104]	; (3754 <prvAddCurrentTaskToDelayedList+0xb4>)
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	3304      	adds	r3, #4
    36ee:	4619      	mov	r1, r3
    36f0:	481a      	ldr	r0, [pc, #104]	; (375c <prvAddCurrentTaskToDelayedList+0xbc>)
    36f2:	f7ff f992 	bl	2a1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    36f6:	e026      	b.n	3746 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    36f8:	68fa      	ldr	r2, [r7, #12]
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	4413      	add	r3, r2
    36fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3700:	4b14      	ldr	r3, [pc, #80]	; (3754 <prvAddCurrentTaskToDelayedList+0xb4>)
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	68ba      	ldr	r2, [r7, #8]
    3706:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    3708:	68ba      	ldr	r2, [r7, #8]
    370a:	68fb      	ldr	r3, [r7, #12]
    370c:	429a      	cmp	r2, r3
    370e:	d209      	bcs.n	3724 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3710:	4b13      	ldr	r3, [pc, #76]	; (3760 <prvAddCurrentTaskToDelayedList+0xc0>)
    3712:	681a      	ldr	r2, [r3, #0]
    3714:	4b0f      	ldr	r3, [pc, #60]	; (3754 <prvAddCurrentTaskToDelayedList+0xb4>)
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	3304      	adds	r3, #4
    371a:	4619      	mov	r1, r3
    371c:	4610      	mov	r0, r2
    371e:	f7ff f9a0 	bl	2a62 <vListInsert>
}
    3722:	e010      	b.n	3746 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3724:	4b0f      	ldr	r3, [pc, #60]	; (3764 <prvAddCurrentTaskToDelayedList+0xc4>)
    3726:	681a      	ldr	r2, [r3, #0]
    3728:	4b0a      	ldr	r3, [pc, #40]	; (3754 <prvAddCurrentTaskToDelayedList+0xb4>)
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	3304      	adds	r3, #4
    372e:	4619      	mov	r1, r3
    3730:	4610      	mov	r0, r2
    3732:	f7ff f996 	bl	2a62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    3736:	4b0c      	ldr	r3, [pc, #48]	; (3768 <prvAddCurrentTaskToDelayedList+0xc8>)
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	68ba      	ldr	r2, [r7, #8]
    373c:	429a      	cmp	r2, r3
    373e:	d202      	bcs.n	3746 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    3740:	4a09      	ldr	r2, [pc, #36]	; (3768 <prvAddCurrentTaskToDelayedList+0xc8>)
    3742:	68bb      	ldr	r3, [r7, #8]
    3744:	6013      	str	r3, [r2, #0]
}
    3746:	bf00      	nop
    3748:	3710      	adds	r7, #16
    374a:	46bd      	mov	sp, r7
    374c:	bd80      	pop	{r7, pc}
    374e:	bf00      	nop
    3750:	10000384 	.word	0x10000384
    3754:	100002a8 	.word	0x100002a8
    3758:	10000388 	.word	0x10000388
    375c:	1000036c 	.word	0x1000036c
    3760:	1000033c 	.word	0x1000033c
    3764:	10000338 	.word	0x10000338
    3768:	100003a0 	.word	0x100003a0

0000376c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    376c:	b580      	push	{r7, lr}
    376e:	b084      	sub	sp, #16
    3770:	af00      	add	r7, sp, #0
    3772:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    3774:	f7ff fbb0 	bl	2ed8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    3778:	6878      	ldr	r0, [r7, #4]
    377a:	f004 fb5d 	bl	7e38 <malloc>
    377e:	4603      	mov	r3, r0
    3780:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3782:	f7ff fbb7 	bl	2ef4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    3786:	68fb      	ldr	r3, [r7, #12]
}
    3788:	4618      	mov	r0, r3
    378a:	3710      	adds	r7, #16
    378c:	46bd      	mov	sp, r7
    378e:	bd80      	pop	{r7, pc}

00003790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3790:	b580      	push	{r7, lr}
    3792:	b082      	sub	sp, #8
    3794:	af00      	add	r7, sp, #0
    3796:	6078      	str	r0, [r7, #4]
	if( pv )
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	2b00      	cmp	r3, #0
    379c:	d006      	beq.n	37ac <vPortFree+0x1c>
	{
		vTaskSuspendAll();
    379e:	f7ff fb9b 	bl	2ed8 <vTaskSuspendAll>
		{
			free( pv );
    37a2:	6878      	ldr	r0, [r7, #4]
    37a4:	f004 fb50 	bl	7e48 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    37a8:	f7ff fba4 	bl	2ef4 <xTaskResumeAll>
	}
}
    37ac:	bf00      	nop
    37ae:	3708      	adds	r7, #8
    37b0:	46bd      	mov	sp, r7
    37b2:	bd80      	pop	{r7, pc}

000037b4 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    37b4:	b480      	push	{r7}
    37b6:	af00      	add	r7, sp, #0
    return 1;
    37b8:	2301      	movs	r3, #1
  }
    37ba:	4618      	mov	r0, r3
    37bc:	46bd      	mov	sp, r7
    37be:	f85d 7b04 	ldr.w	r7, [sp], #4
    37c2:	4770      	bx	lr

000037c4 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    37c4:	b480      	push	{r7}
    37c6:	b083      	sub	sp, #12
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
    37cc:	6039      	str	r1, [r7, #0]
    return -1;
    37ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    37d2:	4618      	mov	r0, r3
    37d4:	370c      	adds	r7, #12
    37d6:	46bd      	mov	sp, r7
    37d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    37dc:	4770      	bx	lr
    37de:	Address 0x00000000000037de is out of bounds.


000037e0 <_sbrk>:
    return 0;
  }
  // Implementation of sbrk for allocating and deallocating space for malloc.
  // NOLINTNEXTLINE(readability-identifier-naming)
  void * _sbrk(int increment)
  {
    37e0:	b480      	push	{r7}
    37e2:	b085      	sub	sp, #20
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
    void * previous_heap_position = static_cast<void *>(heap_position);
    37e8:	4b0c      	ldr	r3, [pc, #48]	; (381c <_sbrk+0x3c>)
    37ea:	681b      	ldr	r3, [r3, #0]
    37ec:	60fb      	str	r3, [r7, #12]
    // Check that by allocating this space, we do not exceed the heap area.
    if ((heap_position + increment) > &heap_end)
    37ee:	4b0b      	ldr	r3, [pc, #44]	; (381c <_sbrk+0x3c>)
    37f0:	681a      	ldr	r2, [r3, #0]
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	4413      	add	r3, r2
    37f6:	4a0a      	ldr	r2, [pc, #40]	; (3820 <_sbrk+0x40>)
    37f8:	4293      	cmp	r3, r2
    37fa:	d901      	bls.n	3800 <_sbrk+0x20>
    {
      previous_heap_position = nullptr;
    37fc:	2300      	movs	r3, #0
    37fe:	60fb      	str	r3, [r7, #12]
    }
    heap_position += increment;
    3800:	4b06      	ldr	r3, [pc, #24]	; (381c <_sbrk+0x3c>)
    3802:	681a      	ldr	r2, [r3, #0]
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	4413      	add	r3, r2
    3808:	4a04      	ldr	r2, [pc, #16]	; (381c <_sbrk+0x3c>)
    380a:	6013      	str	r3, [r2, #0]
    return previous_heap_position;
    380c:	68fb      	ldr	r3, [r7, #12]
  }
    380e:	4618      	mov	r0, r3
    3810:	3714      	adds	r7, #20
    3812:	46bd      	mov	sp, r7
    3814:	f85d 7b04 	ldr.w	r7, [sp], #4
    3818:	4770      	bx	lr
    381a:	bf00      	nop
    381c:	10000064 	.word	0x10000064
    3820:	20008000 	.word	0x20008000

00003824 <_write>:
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    3824:	b580      	push	{r7, lr}
    3826:	b084      	sub	sp, #16
    3828:	af00      	add	r7, sp, #0
    382a:	60f8      	str	r0, [r7, #12]
    382c:	60b9      	str	r1, [r7, #8]
    382e:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	4619      	mov	r1, r3
    3834:	68b8      	ldr	r0, [r7, #8]
    3836:	f001 f97a 	bl	4b2e <trace_write>
    return sjsu::newlib::out(ptr, length);
    383a:	4b05      	ldr	r3, [pc, #20]	; (3850 <_write+0x2c>)
    383c:	681b      	ldr	r3, [r3, #0]
    383e:	687a      	ldr	r2, [r7, #4]
    3840:	4611      	mov	r1, r2
    3842:	68b8      	ldr	r0, [r7, #8]
    3844:	4798      	blx	r3
    3846:	4603      	mov	r3, r0
  }
    3848:	4618      	mov	r0, r3
    384a:	3710      	adds	r7, #16
    384c:	46bd      	mov	sp, r7
    384e:	bd80      	pop	{r7, pc}
    3850:	1000005c 	.word	0x1000005c

00003854 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    3854:	b580      	push	{r7, lr}
    3856:	b084      	sub	sp, #16
    3858:	af00      	add	r7, sp, #0
    385a:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    385c:	6878      	ldr	r0, [r7, #4]
    385e:	f004 fc0b 	bl	8078 <strlen>
    3862:	4603      	mov	r3, r0
    3864:	60fb      	str	r3, [r7, #12]
    int result           = 0;
    3866:	2300      	movs	r3, #0
    3868:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    386a:	68fa      	ldr	r2, [r7, #12]
    386c:	6879      	ldr	r1, [r7, #4]
    386e:	2000      	movs	r0, #0
    3870:	f7ff ffd8 	bl	3824 <_write>
    3874:	4602      	mov	r2, r0
    3876:	68bb      	ldr	r3, [r7, #8]
    3878:	4413      	add	r3, r2
    387a:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    387c:	2201      	movs	r2, #1
    387e:	4906      	ldr	r1, [pc, #24]	; (3898 <puts+0x44>)
    3880:	2000      	movs	r0, #0
    3882:	f7ff ffcf 	bl	3824 <_write>
    3886:	4602      	mov	r2, r0
    3888:	68bb      	ldr	r3, [r7, #8]
    388a:	4413      	add	r3, r2
    388c:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    388e:	68bb      	ldr	r3, [r7, #8]
  }
    3890:	4618      	mov	r0, r3
    3892:	3710      	adds	r7, #16
    3894:	46bd      	mov	sp, r7
    3896:	bd80      	pop	{r7, pc}
    3898:	00008c7c 	.word	0x00008c7c

0000389c <_exit>:
#endif
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    389c:	b480      	push	{r7}
    389e:	b083      	sub	sp, #12
    38a0:	af00      	add	r7, sp, #0
    38a2:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    38a4:	bf00      	nop
    while (1)
    38a6:	e7fd      	b.n	38a4 <_exit+0x8>

000038a8 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    38a8:	b580      	push	{r7, lr}
    38aa:	b088      	sub	sp, #32
    38ac:	af00      	add	r7, sp, #0
    38ae:	60b9      	str	r1, [r7, #8]
    38b0:	607a      	str	r2, [r7, #4]
    38b2:	603b      	str	r3, [r7, #0]
    38b4:	4603      	mov	r3, r0
    38b6:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    38b8:	23fe      	movs	r3, #254	; 0xfe
    38ba:	617b      	str	r3, [r7, #20]
  size_t proper_index = idx % (string_limit);
    38bc:	697a      	ldr	r2, [r7, #20]
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	fbb3 f1f2 	udiv	r1, r3, r2
    38c4:	fb02 f201 	mul.w	r2, r2, r1
    38c8:	1a9b      	subs	r3, r3, r2
    38ca:	61fb      	str	r3, [r7, #28]
  ((char*)buffer)[proper_index] = character;
    38cc:	68ba      	ldr	r2, [r7, #8]
    38ce:	69fb      	ldr	r3, [r7, #28]
    38d0:	4413      	add	r3, r2
    38d2:	7bfa      	ldrb	r2, [r7, #15]
    38d4:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    38d6:	7bfb      	ldrb	r3, [r7, #15]
    38d8:	2b00      	cmp	r3, #0
    38da:	d106      	bne.n	38ea <_out_chunk(char, void*, unsigned int, unsigned int)+0x42>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    38dc:	69fb      	ldr	r3, [r7, #28]
    38de:	461a      	mov	r2, r3
    38e0:	68b9      	ldr	r1, [r7, #8]
    38e2:	2001      	movs	r0, #1
    38e4:	f7ff ff9e 	bl	3824 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    38e8:	e012      	b.n	3910 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
  } else if (proper_index + 1 == string_limit) {
    38ea:	69fb      	ldr	r3, [r7, #28]
    38ec:	1c5a      	adds	r2, r3, #1
    38ee:	697b      	ldr	r3, [r7, #20]
    38f0:	429a      	cmp	r2, r3
    38f2:	d10d      	bne.n	3910 <_out_chunk(char, void*, unsigned int, unsigned int)+0x68>
    size_t last_character = string_limit + 1;
    38f4:	697b      	ldr	r3, [r7, #20]
    38f6:	3301      	adds	r3, #1
    38f8:	61bb      	str	r3, [r7, #24]
    ((char*)buffer)[last_character] = '\0';
    38fa:	68ba      	ldr	r2, [r7, #8]
    38fc:	69bb      	ldr	r3, [r7, #24]
    38fe:	4413      	add	r3, r2
    3900:	2200      	movs	r2, #0
    3902:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    3904:	69bb      	ldr	r3, [r7, #24]
    3906:	461a      	mov	r2, r3
    3908:	68b9      	ldr	r1, [r7, #8]
    390a:	2001      	movs	r0, #1
    390c:	f7ff ff8a 	bl	3824 <_write>
}
    3910:	bf00      	nop
    3912:	3720      	adds	r7, #32
    3914:	46bd      	mov	sp, r7
    3916:	bd80      	pop	{r7, pc}

00003918 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    3918:	b480      	push	{r7}
    391a:	b085      	sub	sp, #20
    391c:	af00      	add	r7, sp, #0
    391e:	60b9      	str	r1, [r7, #8]
    3920:	607a      	str	r2, [r7, #4]
    3922:	603b      	str	r3, [r7, #0]
    3924:	4603      	mov	r3, r0
    3926:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3928:	bf00      	nop
    392a:	3714      	adds	r7, #20
    392c:	46bd      	mov	sp, r7
    392e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3932:	4770      	bx	lr

00003934 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    3934:	b480      	push	{r7}
    3936:	b085      	sub	sp, #20
    3938:	af00      	add	r7, sp, #0
    393a:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	60fb      	str	r3, [r7, #12]
    3940:	68fb      	ldr	r3, [r7, #12]
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	2b00      	cmp	r3, #0
    3946:	d003      	beq.n	3950 <_strlen(char const*)+0x1c>
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	3301      	adds	r3, #1
    394c:	60fb      	str	r3, [r7, #12]
    394e:	e7f7      	b.n	3940 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    3950:	68fa      	ldr	r2, [r7, #12]
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	1ad3      	subs	r3, r2, r3
}
    3956:	4618      	mov	r0, r3
    3958:	3714      	adds	r7, #20
    395a:	46bd      	mov	sp, r7
    395c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3960:	4770      	bx	lr

00003962 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    3962:	b480      	push	{r7}
    3964:	b083      	sub	sp, #12
    3966:	af00      	add	r7, sp, #0
    3968:	4603      	mov	r3, r0
    396a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    396c:	79fb      	ldrb	r3, [r7, #7]
    396e:	2b2f      	cmp	r3, #47	; 0x2f
    3970:	d904      	bls.n	397c <_is_digit(char)+0x1a>
    3972:	79fb      	ldrb	r3, [r7, #7]
    3974:	2b39      	cmp	r3, #57	; 0x39
    3976:	d801      	bhi.n	397c <_is_digit(char)+0x1a>
    3978:	2301      	movs	r3, #1
    397a:	e000      	b.n	397e <_is_digit(char)+0x1c>
    397c:	2300      	movs	r3, #0
}
    397e:	4618      	mov	r0, r3
    3980:	370c      	adds	r7, #12
    3982:	46bd      	mov	sp, r7
    3984:	f85d 7b04 	ldr.w	r7, [sp], #4
    3988:	4770      	bx	lr

0000398a <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    398a:	b580      	push	{r7, lr}
    398c:	b084      	sub	sp, #16
    398e:	af00      	add	r7, sp, #0
    3990:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    3992:	2300      	movs	r3, #0
    3994:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	781b      	ldrb	r3, [r3, #0]
    399c:	4618      	mov	r0, r3
    399e:	f7ff ffe0 	bl	3962 <_is_digit(char)>
    39a2:	4603      	mov	r3, r0
    39a4:	2b00      	cmp	r3, #0
    39a6:	d00f      	beq.n	39c8 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    39a8:	68fa      	ldr	r2, [r7, #12]
    39aa:	4613      	mov	r3, r2
    39ac:	009b      	lsls	r3, r3, #2
    39ae:	4413      	add	r3, r2
    39b0:	005b      	lsls	r3, r3, #1
    39b2:	4618      	mov	r0, r3
    39b4:	687b      	ldr	r3, [r7, #4]
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	1c59      	adds	r1, r3, #1
    39ba:	687a      	ldr	r2, [r7, #4]
    39bc:	6011      	str	r1, [r2, #0]
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	4403      	add	r3, r0
    39c2:	3b30      	subs	r3, #48	; 0x30
    39c4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    39c6:	e7e6      	b.n	3996 <_atoi(char const**)+0xc>
  }
  return i;
    39c8:	68fb      	ldr	r3, [r7, #12]
}
    39ca:	4618      	mov	r0, r3
    39cc:	3710      	adds	r7, #16
    39ce:	46bd      	mov	sp, r7
    39d0:	bd80      	pop	{r7, pc}

000039d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    39d2:	b590      	push	{r4, r7, lr}
    39d4:	b089      	sub	sp, #36	; 0x24
    39d6:	af00      	add	r7, sp, #0
    39d8:	60f8      	str	r0, [r7, #12]
    39da:	60b9      	str	r1, [r7, #8]
    39dc:	607a      	str	r2, [r7, #4]
    39de:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    39e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    39e6:	f003 0302 	and.w	r3, r3, #2
    39ea:	2b00      	cmp	r3, #0
    39ec:	d10e      	bne.n	3a0c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    39ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    39f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    39f2:	429a      	cmp	r2, r3
    39f4:	d20a      	bcs.n	3a0c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    39f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39f8:	2b1f      	cmp	r3, #31
    39fa:	d807      	bhi.n	3a0c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    39fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39fe:	1c5a      	adds	r2, r3, #1
    3a00:	637a      	str	r2, [r7, #52]	; 0x34
    3a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a04:	4413      	add	r3, r2
    3a06:	2230      	movs	r2, #48	; 0x30
    3a08:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a0a:	e7eb      	b.n	39e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a0e:	f003 0302 	and.w	r3, r3, #2
    3a12:	2b00      	cmp	r3, #0
    3a14:	d113      	bne.n	3a3e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a18:	f003 0301 	and.w	r3, r3, #1
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	d00e      	beq.n	3a3e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3a24:	429a      	cmp	r2, r3
    3a26:	d20a      	bcs.n	3a3e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a2a:	2b1f      	cmp	r3, #31
    3a2c:	d807      	bhi.n	3a3e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a30:	1c5a      	adds	r2, r3, #1
    3a32:	637a      	str	r2, [r7, #52]	; 0x34
    3a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a36:	4413      	add	r3, r2
    3a38:	2230      	movs	r2, #48	; 0x30
    3a3a:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a3c:	e7e6      	b.n	3a0c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a40:	f003 0310 	and.w	r3, r3, #16
    3a44:	2b00      	cmp	r3, #0
    3a46:	d058      	beq.n	3afa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d116      	bne.n	3a80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a54:	2b00      	cmp	r3, #0
    3a56:	d013      	beq.n	3a80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a5c:	429a      	cmp	r2, r3
    3a5e:	d003      	beq.n	3a68 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    3a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3a64:	429a      	cmp	r2, r3
    3a66:	d10b      	bne.n	3a80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    3a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a6a:	3b01      	subs	r3, #1
    3a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    3a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a70:	2b00      	cmp	r3, #0
    3a72:	d005      	beq.n	3a80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a76:	2b10      	cmp	r3, #16
    3a78:	d102      	bne.n	3a80 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    3a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a7c:	3b01      	subs	r3, #1
    3a7e:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a82:	2b10      	cmp	r3, #16
    3a84:	d10f      	bne.n	3aa6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    3a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a88:	f003 0320 	and.w	r3, r3, #32
    3a8c:	2b00      	cmp	r3, #0
    3a8e:	d10a      	bne.n	3aa6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    3a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a92:	2b1f      	cmp	r3, #31
    3a94:	d807      	bhi.n	3aa6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    3a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a98:	1c5a      	adds	r2, r3, #1
    3a9a:	637a      	str	r2, [r7, #52]	; 0x34
    3a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a9e:	4413      	add	r3, r2
    3aa0:	2278      	movs	r2, #120	; 0x78
    3aa2:	701a      	strb	r2, [r3, #0]
    3aa4:	e01f      	b.n	3ae6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3aa8:	2b10      	cmp	r3, #16
    3aaa:	d10f      	bne.n	3acc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    3aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3aae:	f003 0320 	and.w	r3, r3, #32
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d00a      	beq.n	3acc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    3ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ab8:	2b1f      	cmp	r3, #31
    3aba:	d807      	bhi.n	3acc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    3abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3abe:	1c5a      	adds	r2, r3, #1
    3ac0:	637a      	str	r2, [r7, #52]	; 0x34
    3ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ac4:	4413      	add	r3, r2
    3ac6:	2258      	movs	r2, #88	; 0x58
    3ac8:	701a      	strb	r2, [r3, #0]
    3aca:	e00c      	b.n	3ae6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ace:	2b02      	cmp	r3, #2
    3ad0:	d109      	bne.n	3ae6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    3ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ad4:	2b1f      	cmp	r3, #31
    3ad6:	d806      	bhi.n	3ae6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    3ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ada:	1c5a      	adds	r2, r3, #1
    3adc:	637a      	str	r2, [r7, #52]	; 0x34
    3ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ae0:	4413      	add	r3, r2
    3ae2:	2262      	movs	r2, #98	; 0x62
    3ae4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ae8:	2b1f      	cmp	r3, #31
    3aea:	d806      	bhi.n	3afa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    3aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3aee:	1c5a      	adds	r2, r3, #1
    3af0:	637a      	str	r2, [r7, #52]	; 0x34
    3af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3af4:	4413      	add	r3, r2
    3af6:	2230      	movs	r2, #48	; 0x30
    3af8:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3afc:	2b00      	cmp	r3, #0
    3afe:	d014      	beq.n	3b2a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b04:	429a      	cmp	r2, r3
    3b06:	d110      	bne.n	3b2a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3b08:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d109      	bne.n	3b24 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b12:	f003 0304 	and.w	r3, r3, #4
    3b16:	2b00      	cmp	r3, #0
    3b18:	d104      	bne.n	3b24 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b1c:	f003 0308 	and.w	r3, r3, #8
    3b20:	2b00      	cmp	r3, #0
    3b22:	d002      	beq.n	3b2a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    3b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b26:	3b01      	subs	r3, #1
    3b28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b2c:	2b1f      	cmp	r3, #31
    3b2e:	d824      	bhi.n	3b7a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    3b30:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3b34:	2b00      	cmp	r3, #0
    3b36:	d007      	beq.n	3b48 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    3b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b3a:	1c5a      	adds	r2, r3, #1
    3b3c:	637a      	str	r2, [r7, #52]	; 0x34
    3b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b40:	4413      	add	r3, r2
    3b42:	222d      	movs	r2, #45	; 0x2d
    3b44:	701a      	strb	r2, [r3, #0]
    3b46:	e018      	b.n	3b7a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    3b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b4a:	f003 0304 	and.w	r3, r3, #4
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d007      	beq.n	3b62 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b54:	1c5a      	adds	r2, r3, #1
    3b56:	637a      	str	r2, [r7, #52]	; 0x34
    3b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b5a:	4413      	add	r3, r2
    3b5c:	222b      	movs	r2, #43	; 0x2b
    3b5e:	701a      	strb	r2, [r3, #0]
    3b60:	e00b      	b.n	3b7a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    3b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b64:	f003 0308 	and.w	r3, r3, #8
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d006      	beq.n	3b7a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    3b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b6e:	1c5a      	adds	r2, r3, #1
    3b70:	637a      	str	r2, [r7, #52]	; 0x34
    3b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b74:	4413      	add	r3, r2
    3b76:	2220      	movs	r2, #32
    3b78:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b7c:	f003 0302 	and.w	r3, r3, #2
    3b80:	2b00      	cmp	r3, #0
    3b82:	d116      	bne.n	3bb2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    3b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b86:	f003 0301 	and.w	r3, r3, #1
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d111      	bne.n	3bb2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    3b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b90:	61fb      	str	r3, [r7, #28]
    3b92:	69fa      	ldr	r2, [r7, #28]
    3b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b96:	429a      	cmp	r2, r3
    3b98:	d20b      	bcs.n	3bb2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    3b9a:	687a      	ldr	r2, [r7, #4]
    3b9c:	1c53      	adds	r3, r2, #1
    3b9e:	607b      	str	r3, [r7, #4]
    3ba0:	68fc      	ldr	r4, [r7, #12]
    3ba2:	683b      	ldr	r3, [r7, #0]
    3ba4:	68b9      	ldr	r1, [r7, #8]
    3ba6:	2020      	movs	r0, #32
    3ba8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    3baa:	69fb      	ldr	r3, [r7, #28]
    3bac:	3301      	adds	r3, #1
    3bae:	61fb      	str	r3, [r7, #28]
    3bb0:	e7ef      	b.n	3b92 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3bb2:	2300      	movs	r3, #0
    3bb4:	61bb      	str	r3, [r7, #24]
    3bb6:	69ba      	ldr	r2, [r7, #24]
    3bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3bba:	429a      	cmp	r2, r3
    3bbc:	d211      	bcs.n	3be2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3bc0:	69bb      	ldr	r3, [r7, #24]
    3bc2:	1ad3      	subs	r3, r2, r3
    3bc4:	3b01      	subs	r3, #1
    3bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3bc8:	4413      	add	r3, r2
    3bca:	7818      	ldrb	r0, [r3, #0]
    3bcc:	687a      	ldr	r2, [r7, #4]
    3bce:	1c53      	adds	r3, r2, #1
    3bd0:	607b      	str	r3, [r7, #4]
    3bd2:	68fc      	ldr	r4, [r7, #12]
    3bd4:	683b      	ldr	r3, [r7, #0]
    3bd6:	68b9      	ldr	r1, [r7, #8]
    3bd8:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3bda:	69bb      	ldr	r3, [r7, #24]
    3bdc:	3301      	adds	r3, #1
    3bde:	61bb      	str	r3, [r7, #24]
    3be0:	e7e9      	b.n	3bb6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3be4:	f003 0302 	and.w	r3, r3, #2
    3be8:	2b00      	cmp	r3, #0
    3bea:	d00e      	beq.n	3c0a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    3bec:	687a      	ldr	r2, [r7, #4]
    3bee:	697b      	ldr	r3, [r7, #20]
    3bf0:	1ad3      	subs	r3, r2, r3
    3bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d908      	bls.n	3c0a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    3bf8:	687a      	ldr	r2, [r7, #4]
    3bfa:	1c53      	adds	r3, r2, #1
    3bfc:	607b      	str	r3, [r7, #4]
    3bfe:	68fc      	ldr	r4, [r7, #12]
    3c00:	683b      	ldr	r3, [r7, #0]
    3c02:	68b9      	ldr	r1, [r7, #8]
    3c04:	2020      	movs	r0, #32
    3c06:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3c08:	e7f0      	b.n	3bec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    3c0a:	687b      	ldr	r3, [r7, #4]
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	3724      	adds	r7, #36	; 0x24
    3c10:	46bd      	mov	sp, r7
    3c12:	bd90      	pop	{r4, r7, pc}

00003c14 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3c14:	b580      	push	{r7, lr}
    3c16:	b096      	sub	sp, #88	; 0x58
    3c18:	af08      	add	r7, sp, #32
    3c1a:	60f8      	str	r0, [r7, #12]
    3c1c:	60b9      	str	r1, [r7, #8]
    3c1e:	607a      	str	r2, [r7, #4]
    3c20:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3c22:	2300      	movs	r3, #0
    3c24:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d103      	bne.n	3c34 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    3c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c2e:	f023 0310 	bic.w	r3, r3, #16
    3c32:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d002      	beq.n	3c44 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    3c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c40:	2b00      	cmp	r3, #0
    3c42:	d034      	beq.n	3cae <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    3c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3c48:	fbb3 f2f2 	udiv	r2, r3, r2
    3c4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3c4e:	fb01 f202 	mul.w	r2, r1, r2
    3c52:	1a9b      	subs	r3, r3, r2
    3c54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3c5c:	2b09      	cmp	r3, #9
    3c5e:	d804      	bhi.n	3c6a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    3c60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3c64:	3330      	adds	r3, #48	; 0x30
    3c66:	b2da      	uxtb	r2, r3
    3c68:	e00d      	b.n	3c86 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    3c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c6c:	f003 0320 	and.w	r3, r3, #32
    3c70:	2b00      	cmp	r3, #0
    3c72:	d001      	beq.n	3c78 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    3c74:	2241      	movs	r2, #65	; 0x41
    3c76:	e000      	b.n	3c7a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    3c78:	2261      	movs	r2, #97	; 0x61
    3c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3c7e:	4413      	add	r3, r2
    3c80:	b2db      	uxtb	r3, r3
    3c82:	3b0a      	subs	r3, #10
    3c84:	b2da      	uxtb	r2, r3
    3c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c88:	1c59      	adds	r1, r3, #1
    3c8a:	6379      	str	r1, [r7, #52]	; 0x34
    3c8c:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3c90:	440b      	add	r3, r1
    3c92:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c9a:	fbb2 f3f3 	udiv	r3, r2, r3
    3c9e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d003      	beq.n	3cae <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    3ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ca8:	2b1f      	cmp	r3, #31
    3caa:	d800      	bhi.n	3cae <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    3cac:	e7ca      	b.n	3c44 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cb0:	9306      	str	r3, [sp, #24]
    3cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3cb4:	9305      	str	r3, [sp, #20]
    3cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cb8:	9304      	str	r3, [sp, #16]
    3cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cbc:	9303      	str	r3, [sp, #12]
    3cbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    3cc2:	9302      	str	r3, [sp, #8]
    3cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3cc6:	9301      	str	r3, [sp, #4]
    3cc8:	f107 0310 	add.w	r3, r7, #16
    3ccc:	9300      	str	r3, [sp, #0]
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	687a      	ldr	r2, [r7, #4]
    3cd2:	68b9      	ldr	r1, [r7, #8]
    3cd4:	68f8      	ldr	r0, [r7, #12]
    3cd6:	f7ff fe7c 	bl	39d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3cda:	4603      	mov	r3, r0
}
    3cdc:	4618      	mov	r0, r3
    3cde:	3738      	adds	r7, #56	; 0x38
    3ce0:	46bd      	mov	sp, r7
    3ce2:	bd80      	pop	{r7, pc}

00003ce4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3ce4:	b590      	push	{r4, r7, lr}
    3ce6:	b097      	sub	sp, #92	; 0x5c
    3ce8:	af08      	add	r7, sp, #32
    3cea:	60f8      	str	r0, [r7, #12]
    3cec:	60b9      	str	r1, [r7, #8]
    3cee:	607a      	str	r2, [r7, #4]
    3cf0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3cf2:	2300      	movs	r3, #0
    3cf4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3cf6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    3cfa:	4323      	orrs	r3, r4
    3cfc:	d103      	bne.n	3d06 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d00:	f023 0310 	bic.w	r3, r3, #16
    3d04:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d003      	beq.n	3d18 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    3d10:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    3d14:	4323      	orrs	r3, r4
    3d16:	d03a      	beq.n	3d8e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    3d18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    3d1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    3d20:	f002 ff58 	bl	6bd4 <__aeabi_uldivmod>
    3d24:	461c      	mov	r4, r3
    3d26:	4613      	mov	r3, r2
    3d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3d30:	2b09      	cmp	r3, #9
    3d32:	d804      	bhi.n	3d3e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    3d34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3d38:	3330      	adds	r3, #48	; 0x30
    3d3a:	b2da      	uxtb	r2, r3
    3d3c:	e00d      	b.n	3d5a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    3d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d40:	f003 0320 	and.w	r3, r3, #32
    3d44:	2b00      	cmp	r3, #0
    3d46:	d001      	beq.n	3d4c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    3d48:	2241      	movs	r2, #65	; 0x41
    3d4a:	e000      	b.n	3d4e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    3d4c:	2261      	movs	r2, #97	; 0x61
    3d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3d52:	4413      	add	r3, r2
    3d54:	b2db      	uxtb	r3, r3
    3d56:	3b0a      	subs	r3, #10
    3d58:	b2da      	uxtb	r2, r3
    3d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d5c:	1c59      	adds	r1, r3, #1
    3d5e:	6379      	str	r1, [r7, #52]	; 0x34
    3d60:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3d64:	440b      	add	r3, r1
    3d66:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    3d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    3d72:	f002 ff2f 	bl	6bd4 <__aeabi_uldivmod>
    3d76:	4603      	mov	r3, r0
    3d78:	460c      	mov	r4, r1
    3d7a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3d7e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    3d82:	4323      	orrs	r3, r4
    3d84:	d003      	beq.n	3d8e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    3d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d88:	2b1f      	cmp	r3, #31
    3d8a:	d800      	bhi.n	3d8e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    3d8c:	e7c4      	b.n	3d18 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d90:	6eba      	ldr	r2, [r7, #104]	; 0x68
    3d92:	9206      	str	r2, [sp, #24]
    3d94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3d96:	9205      	str	r2, [sp, #20]
    3d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3d9a:	9204      	str	r2, [sp, #16]
    3d9c:	9303      	str	r3, [sp, #12]
    3d9e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    3da2:	9302      	str	r3, [sp, #8]
    3da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3da6:	9301      	str	r3, [sp, #4]
    3da8:	f107 0310 	add.w	r3, r7, #16
    3dac:	9300      	str	r3, [sp, #0]
    3dae:	683b      	ldr	r3, [r7, #0]
    3db0:	687a      	ldr	r2, [r7, #4]
    3db2:	68b9      	ldr	r1, [r7, #8]
    3db4:	68f8      	ldr	r0, [r7, #12]
    3db6:	f7ff fe0c 	bl	39d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3dba:	4603      	mov	r3, r0
}
    3dbc:	4618      	mov	r0, r3
    3dbe:	373c      	adds	r7, #60	; 0x3c
    3dc0:	46bd      	mov	sp, r7
    3dc2:	bd90      	pop	{r4, r7, pc}

00003dc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    3dc4:	b590      	push	{r4, r7, lr}
    3dc6:	b09b      	sub	sp, #108	; 0x6c
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6178      	str	r0, [r7, #20]
    3dcc:	6139      	str	r1, [r7, #16]
    3dce:	60fa      	str	r2, [r7, #12]
    3dd0:	60bb      	str	r3, [r7, #8]
    3dd2:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    3dd6:	68fb      	ldr	r3, [r7, #12]
    3dd8:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3dda:	e9d7 0100 	ldrd	r0, r1, [r7]
    3dde:	f002 fd9b 	bl	6918 <__aeabi_d2f>
    3de2:	4603      	mov	r3, r0
    3de4:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    3de6:	2300      	movs	r3, #0
    3de8:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    3dea:	f04f 0300 	mov.w	r3, #0
    3dee:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3df0:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    3df4:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    3df6:	2300      	movs	r3, #0
    3df8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3dfc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e08:	d50a      	bpl.n	3e20 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3e0a:	2301      	movs	r3, #1
    3e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3e10:	ed9f 7aab 	vldr	s14, [pc, #684]	; 40c0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    3e14:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3e18:	ee77 7a67 	vsub.f32	s15, s14, s15
    3e1c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d101      	bne.n	3e30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3e2c:	2306      	movs	r3, #6
    3e2e:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e32:	2b1f      	cmp	r3, #31
    3e34:	d80f      	bhi.n	3e56 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    3e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e38:	2b09      	cmp	r3, #9
    3e3a:	d90c      	bls.n	3e56 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e3e:	1c5a      	adds	r2, r3, #1
    3e40:	663a      	str	r2, [r7, #96]	; 0x60
    3e42:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3e46:	4413      	add	r3, r2
    3e48:	2230      	movs	r2, #48	; 0x30
    3e4a:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e50:	3b01      	subs	r3, #1
    3e52:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3e54:	e7ec      	b.n	3e30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    3e56:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3e5e:	ee17 3a90 	vmov	r3, s15
    3e62:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    3e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e66:	ee07 3a90 	vmov	s15, r3
    3e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3e6e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3e72:	ee37 7a67 	vsub.f32	s14, s14, s15
    3e76:	4a93      	ldr	r2, [pc, #588]	; (40c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e7a:	009b      	lsls	r3, r3, #2
    3e7c:	4413      	add	r3, r2
    3e7e:	edd3 7a00 	vldr	s15, [r3]
    3e82:	ee67 7a27 	vmul.f32	s15, s14, s15
    3e86:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    3e8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3e92:	ee17 3a90 	vmov	r3, s15
    3e96:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    3e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e9a:	ee07 3a90 	vmov	s15, r3
    3e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3ea2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    3ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
    3eaa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    3eae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3eb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
    3eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ebe:	dd18      	ble.n	3ef2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ec2:	3301      	adds	r3, #1
    3ec4:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    3ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ec8:	ee07 3a90 	vmov	s15, r3
    3ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3ed0:	4a7c      	ldr	r2, [pc, #496]	; (40c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3ed4:	009b      	lsls	r3, r3, #2
    3ed6:	4413      	add	r3, r2
    3ed8:	edd3 7a00 	vldr	s15, [r3]
    3edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ee4:	db19      	blt.n	3f1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    3ee6:	2300      	movs	r3, #0
    3ee8:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3eec:	3301      	adds	r3, #1
    3eee:	65bb      	str	r3, [r7, #88]	; 0x58
    3ef0:	e013      	b.n	3f1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3ef2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3ef6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3efa:	eef4 7a47 	vcmp.f32	s15, s14
    3efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f02:	d10a      	bne.n	3f1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    3f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f06:	2b00      	cmp	r3, #0
    3f08:	d004      	beq.n	3f14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f0c:	f003 0301 	and.w	r3, r3, #1
    3f10:	2b00      	cmp	r3, #0
    3f12:	d002      	beq.n	3f1a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    3f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f16:	3301      	adds	r3, #1
    3f18:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3f1a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3f1e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 40c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    3f22:	eef4 7ac7 	vcmpe.f32	s15, s14
    3f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f2a:	dd01      	ble.n	3f30 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3f2c:	2300      	movs	r3, #0
    3f2e:	e166      	b.n	41fe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3f32:	2b00      	cmp	r3, #0
    3f34:	d129      	bne.n	3f8a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    3f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f38:	ee07 3a90 	vmov	s15, r3
    3f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f40:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3f44:	ee77 7a67 	vsub.f32	s15, s14, s15
    3f48:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3f4c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3f50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3f54:	eef4 7ac7 	vcmpe.f32	s15, s14
    3f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f5c:	dd03      	ble.n	3f66 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    3f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f60:	3301      	adds	r3, #1
    3f62:	65bb      	str	r3, [r7, #88]	; 0x58
    3f64:	e062      	b.n	402c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    3f66:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3f6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3f6e:	eef4 7a47 	vcmp.f32	s15, s14
    3f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f76:	d159      	bne.n	402c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    3f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f7a:	f003 0301 	and.w	r3, r3, #1
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d054      	beq.n	402c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    3f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f84:	3301      	adds	r3, #1
    3f86:	65bb      	str	r3, [r7, #88]	; 0x58
    3f88:	e050      	b.n	402c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    3f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3f8c:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f90:	2b1f      	cmp	r3, #31
    3f92:	d828      	bhi.n	3fe6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    3f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3f96:	3b01      	subs	r3, #1
    3f98:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    3f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
    3f9c:	4b4b      	ldr	r3, [pc, #300]	; (40cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3f9e:	fba3 2301 	umull	r2, r3, r3, r1
    3fa2:	08da      	lsrs	r2, r3, #3
    3fa4:	4613      	mov	r3, r2
    3fa6:	009b      	lsls	r3, r3, #2
    3fa8:	4413      	add	r3, r2
    3faa:	005b      	lsls	r3, r3, #1
    3fac:	1aca      	subs	r2, r1, r3
    3fae:	b2d3      	uxtb	r3, r2
    3fb0:	3330      	adds	r3, #48	; 0x30
    3fb2:	b2d9      	uxtb	r1, r3
    3fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fb6:	1c5a      	adds	r2, r3, #1
    3fb8:	663a      	str	r2, [r7, #96]	; 0x60
    3fba:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3fbe:	4413      	add	r3, r2
    3fc0:	460a      	mov	r2, r1
    3fc2:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    3fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fc8:	4a40      	ldr	r2, [pc, #256]	; (40cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3fca:	fba2 2303 	umull	r2, r3, r2, r3
    3fce:	08db      	lsrs	r3, r3, #3
    3fd0:	657b      	str	r3, [r7, #84]	; 0x54
    3fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	bf0c      	ite	eq
    3fd8:	2301      	moveq	r3, #1
    3fda:	2300      	movne	r3, #0
    3fdc:	b2db      	uxtb	r3, r3
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d100      	bne.n	3fe4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3fe2:	e7d4      	b.n	3f8e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    3fe4:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fe8:	2b1f      	cmp	r3, #31
    3fea:	d806      	bhi.n	3ffa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3fee:	1e5a      	subs	r2, r3, #1
    3ff0:	653a      	str	r2, [r7, #80]	; 0x50
    3ff2:	2b00      	cmp	r3, #0
    3ff4:	d001      	beq.n	3ffa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3ff6:	2301      	movs	r3, #1
    3ff8:	e000      	b.n	3ffc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3ffa:	2300      	movs	r3, #0
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d009      	beq.n	4014 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    4000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4002:	1c5a      	adds	r2, r3, #1
    4004:	663a      	str	r2, [r7, #96]	; 0x60
    4006:	f107 0268 	add.w	r2, r7, #104	; 0x68
    400a:	4413      	add	r3, r2
    400c:	2230      	movs	r2, #48	; 0x30
    400e:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4012:	e7e8      	b.n	3fe6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4016:	2b1f      	cmp	r3, #31
    4018:	d808      	bhi.n	402c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    401a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    401c:	1c5a      	adds	r2, r3, #1
    401e:	663a      	str	r2, [r7, #96]	; 0x60
    4020:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4024:	4413      	add	r3, r2
    4026:	222e      	movs	r2, #46	; 0x2e
    4028:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    402c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    402e:	2b1f      	cmp	r3, #31
    4030:	d829      	bhi.n	4086 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    4032:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4034:	4b26      	ldr	r3, [pc, #152]	; (40d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    4036:	fb83 1302 	smull	r1, r3, r3, r2
    403a:	1099      	asrs	r1, r3, #2
    403c:	17d3      	asrs	r3, r2, #31
    403e:	1ac9      	subs	r1, r1, r3
    4040:	460b      	mov	r3, r1
    4042:	009b      	lsls	r3, r3, #2
    4044:	440b      	add	r3, r1
    4046:	005b      	lsls	r3, r3, #1
    4048:	1ad1      	subs	r1, r2, r3
    404a:	b2cb      	uxtb	r3, r1
    404c:	3330      	adds	r3, #48	; 0x30
    404e:	b2d9      	uxtb	r1, r3
    4050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4052:	1c5a      	adds	r2, r3, #1
    4054:	663a      	str	r2, [r7, #96]	; 0x60
    4056:	f107 0268 	add.w	r2, r7, #104	; 0x68
    405a:	4413      	add	r3, r2
    405c:	460a      	mov	r2, r1
    405e:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    4062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4064:	4a1a      	ldr	r2, [pc, #104]	; (40d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    4066:	fb82 1203 	smull	r1, r2, r2, r3
    406a:	1092      	asrs	r2, r2, #2
    406c:	17db      	asrs	r3, r3, #31
    406e:	1ad3      	subs	r3, r2, r3
    4070:	65bb      	str	r3, [r7, #88]	; 0x58
    4072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4074:	2b00      	cmp	r3, #0
    4076:	bf0c      	ite	eq
    4078:	2301      	moveq	r3, #1
    407a:	2300      	movne	r3, #0
    407c:	b2db      	uxtb	r3, r3
    407e:	2b00      	cmp	r3, #0
    4080:	d100      	bne.n	4084 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4082:	e7d3      	b.n	402c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    4084:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    408a:	f003 0302 	and.w	r3, r3, #2
    408e:	2b00      	cmp	r3, #0
    4090:	d120      	bne.n	40d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4096:	f003 0301 	and.w	r3, r3, #1
    409a:	2b00      	cmp	r3, #0
    409c:	d01a      	beq.n	40d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    409e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    40a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    40a2:	429a      	cmp	r2, r3
    40a4:	d216      	bcs.n	40d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    40a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40a8:	2b1f      	cmp	r3, #31
    40aa:	d813      	bhi.n	40d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    40ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40ae:	1c5a      	adds	r2, r3, #1
    40b0:	663a      	str	r2, [r7, #96]	; 0x60
    40b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    40b6:	4413      	add	r3, r2
    40b8:	2230      	movs	r2, #48	; 0x30
    40ba:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    40be:	e7e2      	b.n	4086 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    40c0:	00000000 	.word	0x00000000
    40c4:	00008c80 	.word	0x00008c80
    40c8:	4f000000 	.word	0x4f000000
    40cc:	cccccccd 	.word	0xcccccccd
    40d0:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    40d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    40d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    40d8:	429a      	cmp	r2, r3
    40da:	d112      	bne.n	4102 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    40dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    40e0:	2b00      	cmp	r3, #0
    40e2:	d10b      	bne.n	40fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    40e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    40e8:	f003 0304 	and.w	r3, r3, #4
    40ec:	2b00      	cmp	r3, #0
    40ee:	d105      	bne.n	40fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    40f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    40f4:	f003 0308 	and.w	r3, r3, #8
    40f8:	2b00      	cmp	r3, #0
    40fa:	d002      	beq.n	4102 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    40fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40fe:	3b01      	subs	r3, #1
    4100:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4104:	2b1f      	cmp	r3, #31
    4106:	d82c      	bhi.n	4162 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    4108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    410c:	2b00      	cmp	r3, #0
    410e:	d009      	beq.n	4124 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    4110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4112:	1c5a      	adds	r2, r3, #1
    4114:	663a      	str	r2, [r7, #96]	; 0x60
    4116:	f107 0268 	add.w	r2, r7, #104	; 0x68
    411a:	4413      	add	r3, r2
    411c:	222d      	movs	r2, #45	; 0x2d
    411e:	f803 2c50 	strb.w	r2, [r3, #-80]
    4122:	e01e      	b.n	4162 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    4124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4128:	f003 0304 	and.w	r3, r3, #4
    412c:	2b00      	cmp	r3, #0
    412e:	d009      	beq.n	4144 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    4130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4132:	1c5a      	adds	r2, r3, #1
    4134:	663a      	str	r2, [r7, #96]	; 0x60
    4136:	f107 0268 	add.w	r2, r7, #104	; 0x68
    413a:	4413      	add	r3, r2
    413c:	222b      	movs	r2, #43	; 0x2b
    413e:	f803 2c50 	strb.w	r2, [r3, #-80]
    4142:	e00e      	b.n	4162 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    4144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4148:	f003 0308 	and.w	r3, r3, #8
    414c:	2b00      	cmp	r3, #0
    414e:	d008      	beq.n	4162 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    4150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4152:	1c5a      	adds	r2, r3, #1
    4154:	663a      	str	r2, [r7, #96]	; 0x60
    4156:	f107 0268 	add.w	r2, r7, #104	; 0x68
    415a:	4413      	add	r3, r2
    415c:	2220      	movs	r2, #32
    415e:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4162:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4166:	f003 0302 	and.w	r3, r3, #2
    416a:	2b00      	cmp	r3, #0
    416c:	d117      	bne.n	419e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    416e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4172:	f003 0301 	and.w	r3, r3, #1
    4176:	2b00      	cmp	r3, #0
    4178:	d111      	bne.n	419e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    417a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    417c:	64fb      	str	r3, [r7, #76]	; 0x4c
    417e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4182:	429a      	cmp	r2, r3
    4184:	d20b      	bcs.n	419e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    4186:	68fa      	ldr	r2, [r7, #12]
    4188:	1c53      	adds	r3, r2, #1
    418a:	60fb      	str	r3, [r7, #12]
    418c:	697c      	ldr	r4, [r7, #20]
    418e:	68bb      	ldr	r3, [r7, #8]
    4190:	6939      	ldr	r1, [r7, #16]
    4192:	2020      	movs	r0, #32
    4194:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    4196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4198:	3301      	adds	r3, #1
    419a:	64fb      	str	r3, [r7, #76]	; 0x4c
    419c:	e7ef      	b.n	417e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    419e:	2300      	movs	r3, #0
    41a0:	64bb      	str	r3, [r7, #72]	; 0x48
    41a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    41a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    41a6:	429a      	cmp	r2, r3
    41a8:	d213      	bcs.n	41d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    41aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    41ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41ae:	1ad3      	subs	r3, r2, r3
    41b0:	3b01      	subs	r3, #1
    41b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    41b6:	4413      	add	r3, r2
    41b8:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    41bc:	68fa      	ldr	r2, [r7, #12]
    41be:	1c53      	adds	r3, r2, #1
    41c0:	60fb      	str	r3, [r7, #12]
    41c2:	697c      	ldr	r4, [r7, #20]
    41c4:	68bb      	ldr	r3, [r7, #8]
    41c6:	6939      	ldr	r1, [r7, #16]
    41c8:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    41ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41cc:	3301      	adds	r3, #1
    41ce:	64bb      	str	r3, [r7, #72]	; 0x48
    41d0:	e7e7      	b.n	41a2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    41d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    41d6:	f003 0302 	and.w	r3, r3, #2
    41da:	2b00      	cmp	r3, #0
    41dc:	d00e      	beq.n	41fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    41de:	68fa      	ldr	r2, [r7, #12]
    41e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    41e2:	1ad3      	subs	r3, r2, r3
    41e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    41e6:	429a      	cmp	r2, r3
    41e8:	d908      	bls.n	41fc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    41ea:	68fa      	ldr	r2, [r7, #12]
    41ec:	1c53      	adds	r3, r2, #1
    41ee:	60fb      	str	r3, [r7, #12]
    41f0:	697c      	ldr	r4, [r7, #20]
    41f2:	68bb      	ldr	r3, [r7, #8]
    41f4:	6939      	ldr	r1, [r7, #16]
    41f6:	2020      	movs	r0, #32
    41f8:	47a0      	blx	r4
    while (idx - start_idx < width) {
    41fa:	e7f0      	b.n	41de <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    41fc:	68fb      	ldr	r3, [r7, #12]
}
    41fe:	4618      	mov	r0, r3
    4200:	376c      	adds	r7, #108	; 0x6c
    4202:	46bd      	mov	sp, r7
    4204:	bd90      	pop	{r4, r7, pc}
    4206:	bf00      	nop

00004208 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    4208:	b5b0      	push	{r4, r5, r7, lr}
    420a:	b0a0      	sub	sp, #128	; 0x80
    420c:	af0a      	add	r7, sp, #40	; 0x28
    420e:	60f8      	str	r0, [r7, #12]
    4210:	60b9      	str	r1, [r7, #8]
    4212:	607a      	str	r2, [r7, #4]
    4214:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    4216:	2300      	movs	r3, #0
    4218:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    421a:	68bb      	ldr	r3, [r7, #8]
    421c:	2b00      	cmp	r3, #0
    421e:	d101      	bne.n	4224 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    4220:	4ba2      	ldr	r3, [pc, #648]	; (44ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    4222:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    4224:	683b      	ldr	r3, [r7, #0]
    4226:	781b      	ldrb	r3, [r3, #0]
    4228:	2b00      	cmp	r3, #0
    422a:	f000 8445 	beq.w	4ab8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    422e:	683b      	ldr	r3, [r7, #0]
    4230:	781b      	ldrb	r3, [r3, #0]
    4232:	2b25      	cmp	r3, #37	; 0x25
    4234:	d00d      	beq.n	4252 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	7818      	ldrb	r0, [r3, #0]
    423a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    423c:	1c53      	adds	r3, r2, #1
    423e:	647b      	str	r3, [r7, #68]	; 0x44
    4240:	68fc      	ldr	r4, [r7, #12]
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	68b9      	ldr	r1, [r7, #8]
    4246:	47a0      	blx	r4
      format++;
    4248:	683b      	ldr	r3, [r7, #0]
    424a:	3301      	adds	r3, #1
    424c:	603b      	str	r3, [r7, #0]
      continue;
    424e:	f000 bc31 	b.w	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    4252:	683b      	ldr	r3, [r7, #0]
    4254:	3301      	adds	r3, #1
    4256:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    4258:	2300      	movs	r3, #0
    425a:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	781b      	ldrb	r3, [r3, #0]
    4260:	3b20      	subs	r3, #32
    4262:	2b10      	cmp	r3, #16
    4264:	d856      	bhi.n	4314 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    4266:	a201      	add	r2, pc, #4	; (adr r2, 426c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    4268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    426c:	000042ed 	.word	0x000042ed
    4270:	00004315 	.word	0x00004315
    4274:	00004315 	.word	0x00004315
    4278:	00004301 	.word	0x00004301
    427c:	00004315 	.word	0x00004315
    4280:	00004315 	.word	0x00004315
    4284:	00004315 	.word	0x00004315
    4288:	00004315 	.word	0x00004315
    428c:	00004315 	.word	0x00004315
    4290:	00004315 	.word	0x00004315
    4294:	00004315 	.word	0x00004315
    4298:	000042d9 	.word	0x000042d9
    429c:	00004315 	.word	0x00004315
    42a0:	000042c5 	.word	0x000042c5
    42a4:	00004315 	.word	0x00004315
    42a8:	00004315 	.word	0x00004315
    42ac:	000042b1 	.word	0x000042b1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    42b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42b2:	f043 0301 	orr.w	r3, r3, #1
    42b6:	657b      	str	r3, [r7, #84]	; 0x54
    42b8:	683b      	ldr	r3, [r7, #0]
    42ba:	3301      	adds	r3, #1
    42bc:	603b      	str	r3, [r7, #0]
    42be:	2301      	movs	r3, #1
    42c0:	64bb      	str	r3, [r7, #72]	; 0x48
    42c2:	e02a      	b.n	431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    42c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42c6:	f043 0302 	orr.w	r3, r3, #2
    42ca:	657b      	str	r3, [r7, #84]	; 0x54
    42cc:	683b      	ldr	r3, [r7, #0]
    42ce:	3301      	adds	r3, #1
    42d0:	603b      	str	r3, [r7, #0]
    42d2:	2301      	movs	r3, #1
    42d4:	64bb      	str	r3, [r7, #72]	; 0x48
    42d6:	e020      	b.n	431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    42d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42da:	f043 0304 	orr.w	r3, r3, #4
    42de:	657b      	str	r3, [r7, #84]	; 0x54
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	3301      	adds	r3, #1
    42e4:	603b      	str	r3, [r7, #0]
    42e6:	2301      	movs	r3, #1
    42e8:	64bb      	str	r3, [r7, #72]	; 0x48
    42ea:	e016      	b.n	431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    42ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42ee:	f043 0308 	orr.w	r3, r3, #8
    42f2:	657b      	str	r3, [r7, #84]	; 0x54
    42f4:	683b      	ldr	r3, [r7, #0]
    42f6:	3301      	adds	r3, #1
    42f8:	603b      	str	r3, [r7, #0]
    42fa:	2301      	movs	r3, #1
    42fc:	64bb      	str	r3, [r7, #72]	; 0x48
    42fe:	e00c      	b.n	431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    4300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4302:	f043 0310 	orr.w	r3, r3, #16
    4306:	657b      	str	r3, [r7, #84]	; 0x54
    4308:	683b      	ldr	r3, [r7, #0]
    430a:	3301      	adds	r3, #1
    430c:	603b      	str	r3, [r7, #0]
    430e:	2301      	movs	r3, #1
    4310:	64bb      	str	r3, [r7, #72]	; 0x48
    4312:	e002      	b.n	431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    4314:	2300      	movs	r3, #0
    4316:	64bb      	str	r3, [r7, #72]	; 0x48
    4318:	bf00      	nop
      }
    } while (n);
    431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    431c:	2b00      	cmp	r3, #0
    431e:	d000      	beq.n	4322 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    4320:	e79c      	b.n	425c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    4322:	2300      	movs	r3, #0
    4324:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    4326:	683b      	ldr	r3, [r7, #0]
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	4618      	mov	r0, r3
    432c:	f7ff fb19 	bl	3962 <_is_digit(char)>
    4330:	4603      	mov	r3, r0
    4332:	2b00      	cmp	r3, #0
    4334:	d005      	beq.n	4342 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    4336:	463b      	mov	r3, r7
    4338:	4618      	mov	r0, r3
    433a:	f7ff fb26 	bl	398a <_atoi(char const**)>
    433e:	6538      	str	r0, [r7, #80]	; 0x50
    4340:	e018      	b.n	4374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    4342:	683b      	ldr	r3, [r7, #0]
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	2b2a      	cmp	r3, #42	; 0x2a
    4348:	d114      	bne.n	4374 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    434a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    434c:	1d1a      	adds	r2, r3, #4
    434e:	66ba      	str	r2, [r7, #104]	; 0x68
    4350:	681b      	ldr	r3, [r3, #0]
    4352:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    4354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4356:	2b00      	cmp	r3, #0
    4358:	da07      	bge.n	436a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    435a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    435c:	f043 0302 	orr.w	r3, r3, #2
    4360:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    4362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4364:	425b      	negs	r3, r3
    4366:	653b      	str	r3, [r7, #80]	; 0x50
    4368:	e001      	b.n	436e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    436c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    436e:	683b      	ldr	r3, [r7, #0]
    4370:	3301      	adds	r3, #1
    4372:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    4374:	2300      	movs	r3, #0
    4376:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    4378:	683b      	ldr	r3, [r7, #0]
    437a:	781b      	ldrb	r3, [r3, #0]
    437c:	2b2e      	cmp	r3, #46	; 0x2e
    437e:	d124      	bne.n	43ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    4380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4386:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    4388:	683b      	ldr	r3, [r7, #0]
    438a:	3301      	adds	r3, #1
    438c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    438e:	683b      	ldr	r3, [r7, #0]
    4390:	781b      	ldrb	r3, [r3, #0]
    4392:	4618      	mov	r0, r3
    4394:	f7ff fae5 	bl	3962 <_is_digit(char)>
    4398:	4603      	mov	r3, r0
    439a:	2b00      	cmp	r3, #0
    439c:	d005      	beq.n	43aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    439e:	463b      	mov	r3, r7
    43a0:	4618      	mov	r0, r3
    43a2:	f7ff faf2 	bl	398a <_atoi(char const**)>
    43a6:	64f8      	str	r0, [r7, #76]	; 0x4c
    43a8:	e00f      	b.n	43ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    43aa:	683b      	ldr	r3, [r7, #0]
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b2a      	cmp	r3, #42	; 0x2a
    43b0:	d10b      	bne.n	43ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    43b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    43b4:	1d1a      	adds	r2, r3, #4
    43b6:	66ba      	str	r2, [r7, #104]	; 0x68
    43b8:	681b      	ldr	r3, [r3, #0]
    43ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    43bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    43c2:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    43c4:	683b      	ldr	r3, [r7, #0]
    43c6:	3301      	adds	r3, #1
    43c8:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    43ca:	683b      	ldr	r3, [r7, #0]
    43cc:	781b      	ldrb	r3, [r3, #0]
    43ce:	3b68      	subs	r3, #104	; 0x68
    43d0:	2b12      	cmp	r3, #18
    43d2:	d867      	bhi.n	44a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    43d4:	a201      	add	r2, pc, #4	; (adr r2, 43dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    43d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43da:	bf00      	nop
    43dc:	0000444f 	.word	0x0000444f
    43e0:	000044a5 	.word	0x000044a5
    43e4:	00004485 	.word	0x00004485
    43e8:	000044a5 	.word	0x000044a5
    43ec:	00004429 	.word	0x00004429
    43f0:	000044a5 	.word	0x000044a5
    43f4:	000044a5 	.word	0x000044a5
    43f8:	000044a5 	.word	0x000044a5
    43fc:	000044a5 	.word	0x000044a5
    4400:	000044a5 	.word	0x000044a5
    4404:	000044a5 	.word	0x000044a5
    4408:	000044a5 	.word	0x000044a5
    440c:	00004475 	.word	0x00004475
    4410:	000044a5 	.word	0x000044a5
    4414:	000044a5 	.word	0x000044a5
    4418:	000044a5 	.word	0x000044a5
    441c:	000044a5 	.word	0x000044a5
    4420:	000044a5 	.word	0x000044a5
    4424:	00004495 	.word	0x00004495
      case 'l' :
        flags |= FLAGS_LONG;
    4428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    442e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4430:	683b      	ldr	r3, [r7, #0]
    4432:	3301      	adds	r3, #1
    4434:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	781b      	ldrb	r3, [r3, #0]
    443a:	2b6c      	cmp	r3, #108	; 0x6c
    443c:	d134      	bne.n	44a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4444:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4446:	683b      	ldr	r3, [r7, #0]
    4448:	3301      	adds	r3, #1
    444a:	603b      	str	r3, [r7, #0]
        }
        break;
    444c:	e02c      	b.n	44a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4454:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4456:	683b      	ldr	r3, [r7, #0]
    4458:	3301      	adds	r3, #1
    445a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    445c:	683b      	ldr	r3, [r7, #0]
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	2b68      	cmp	r3, #104	; 0x68
    4462:	d125      	bne.n	44b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    4464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    446a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    446c:	683b      	ldr	r3, [r7, #0]
    446e:	3301      	adds	r3, #1
    4470:	603b      	str	r3, [r7, #0]
        }
        break;
    4472:	e01d      	b.n	44b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    447a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    447c:	683b      	ldr	r3, [r7, #0]
    447e:	3301      	adds	r3, #1
    4480:	603b      	str	r3, [r7, #0]
        break;
    4482:	e016      	b.n	44b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    448a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    448c:	683b      	ldr	r3, [r7, #0]
    448e:	3301      	adds	r3, #1
    4490:	603b      	str	r3, [r7, #0]
        break;
    4492:	e00e      	b.n	44b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    449a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    449c:	683b      	ldr	r3, [r7, #0]
    449e:	3301      	adds	r3, #1
    44a0:	603b      	str	r3, [r7, #0]
        break;
    44a2:	e006      	b.n	44b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    44a4:	bf00      	nop
    44a6:	e004      	b.n	44b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    44a8:	bf00      	nop
    44aa:	e002      	b.n	44b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    44ac:	00003919 	.word	0x00003919
        break;
    44b0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    44b2:	683b      	ldr	r3, [r7, #0]
    44b4:	781b      	ldrb	r3, [r3, #0]
    44b6:	3b25      	subs	r3, #37	; 0x25
    44b8:	2b53      	cmp	r3, #83	; 0x53
    44ba:	f200 82ee 	bhi.w	4a9a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    44be:	a201      	add	r2, pc, #4	; (adr r2, 44c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    44c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    44c4:	00004a83 	.word	0x00004a83
    44c8:	00004a9b 	.word	0x00004a9b
    44cc:	00004a9b 	.word	0x00004a9b
    44d0:	00004a9b 	.word	0x00004a9b
    44d4:	00004a9b 	.word	0x00004a9b
    44d8:	00004a9b 	.word	0x00004a9b
    44dc:	00004a9b 	.word	0x00004a9b
    44e0:	00004a9b 	.word	0x00004a9b
    44e4:	00004a9b 	.word	0x00004a9b
    44e8:	00004a9b 	.word	0x00004a9b
    44ec:	00004a9b 	.word	0x00004a9b
    44f0:	00004a9b 	.word	0x00004a9b
    44f4:	00004a9b 	.word	0x00004a9b
    44f8:	00004a9b 	.word	0x00004a9b
    44fc:	00004a9b 	.word	0x00004a9b
    4500:	00004a9b 	.word	0x00004a9b
    4504:	00004a9b 	.word	0x00004a9b
    4508:	00004a9b 	.word	0x00004a9b
    450c:	00004a9b 	.word	0x00004a9b
    4510:	00004a9b 	.word	0x00004a9b
    4514:	00004a9b 	.word	0x00004a9b
    4518:	00004a9b 	.word	0x00004a9b
    451c:	00004a9b 	.word	0x00004a9b
    4520:	00004a9b 	.word	0x00004a9b
    4524:	00004a9b 	.word	0x00004a9b
    4528:	00004a9b 	.word	0x00004a9b
    452c:	00004a9b 	.word	0x00004a9b
    4530:	00004a9b 	.word	0x00004a9b
    4534:	00004a9b 	.word	0x00004a9b
    4538:	00004a9b 	.word	0x00004a9b
    453c:	00004a9b 	.word	0x00004a9b
    4540:	00004a9b 	.word	0x00004a9b
    4544:	00004a9b 	.word	0x00004a9b
    4548:	000048a1 	.word	0x000048a1
    454c:	00004a9b 	.word	0x00004a9b
    4550:	00004a9b 	.word	0x00004a9b
    4554:	00004a9b 	.word	0x00004a9b
    4558:	00004a9b 	.word	0x00004a9b
    455c:	00004a9b 	.word	0x00004a9b
    4560:	00004a9b 	.word	0x00004a9b
    4564:	00004a9b 	.word	0x00004a9b
    4568:	00004a9b 	.word	0x00004a9b
    456c:	00004a9b 	.word	0x00004a9b
    4570:	00004a9b 	.word	0x00004a9b
    4574:	00004a9b 	.word	0x00004a9b
    4578:	00004a9b 	.word	0x00004a9b
    457c:	00004a9b 	.word	0x00004a9b
    4580:	00004a9b 	.word	0x00004a9b
    4584:	00004a9b 	.word	0x00004a9b
    4588:	00004a9b 	.word	0x00004a9b
    458c:	00004a9b 	.word	0x00004a9b
    4590:	00004615 	.word	0x00004615
    4594:	00004a9b 	.word	0x00004a9b
    4598:	00004a9b 	.word	0x00004a9b
    459c:	00004a9b 	.word	0x00004a9b
    45a0:	00004a9b 	.word	0x00004a9b
    45a4:	00004a9b 	.word	0x00004a9b
    45a8:	00004a9b 	.word	0x00004a9b
    45ac:	00004a9b 	.word	0x00004a9b
    45b0:	00004a9b 	.word	0x00004a9b
    45b4:	00004a9b 	.word	0x00004a9b
    45b8:	00004615 	.word	0x00004615
    45bc:	000048dd 	.word	0x000048dd
    45c0:	00004615 	.word	0x00004615
    45c4:	00004a9b 	.word	0x00004a9b
    45c8:	000048a1 	.word	0x000048a1
    45cc:	00004a9b 	.word	0x00004a9b
    45d0:	00004a9b 	.word	0x00004a9b
    45d4:	00004615 	.word	0x00004615
    45d8:	00004a9b 	.word	0x00004a9b
    45dc:	00004a9b 	.word	0x00004a9b
    45e0:	00004a9b 	.word	0x00004a9b
    45e4:	00004a9b 	.word	0x00004a9b
    45e8:	00004a9b 	.word	0x00004a9b
    45ec:	00004615 	.word	0x00004615
    45f0:	00004a3b 	.word	0x00004a3b
    45f4:	00004a9b 	.word	0x00004a9b
    45f8:	00004a9b 	.word	0x00004a9b
    45fc:	00004965 	.word	0x00004965
    4600:	00004a9b 	.word	0x00004a9b
    4604:	00004615 	.word	0x00004615
    4608:	00004a9b 	.word	0x00004a9b
    460c:	00004a9b 	.word	0x00004a9b
    4610:	00004615 	.word	0x00004615
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	781b      	ldrb	r3, [r3, #0]
    4618:	2b78      	cmp	r3, #120	; 0x78
    461a:	d003      	beq.n	4624 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    461c:	683b      	ldr	r3, [r7, #0]
    461e:	781b      	ldrb	r3, [r3, #0]
    4620:	2b58      	cmp	r3, #88	; 0x58
    4622:	d102      	bne.n	462a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    4624:	2310      	movs	r3, #16
    4626:	643b      	str	r3, [r7, #64]	; 0x40
    4628:	e013      	b.n	4652 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    462a:	683b      	ldr	r3, [r7, #0]
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	2b6f      	cmp	r3, #111	; 0x6f
    4630:	d102      	bne.n	4638 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    4632:	2308      	movs	r3, #8
    4634:	643b      	str	r3, [r7, #64]	; 0x40
    4636:	e00c      	b.n	4652 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    4638:	683b      	ldr	r3, [r7, #0]
    463a:	781b      	ldrb	r3, [r3, #0]
    463c:	2b62      	cmp	r3, #98	; 0x62
    463e:	d102      	bne.n	4646 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    4640:	2302      	movs	r3, #2
    4642:	643b      	str	r3, [r7, #64]	; 0x40
    4644:	e005      	b.n	4652 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    4646:	230a      	movs	r3, #10
    4648:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    464c:	f023 0310 	bic.w	r3, r3, #16
    4650:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    4652:	683b      	ldr	r3, [r7, #0]
    4654:	781b      	ldrb	r3, [r3, #0]
    4656:	2b58      	cmp	r3, #88	; 0x58
    4658:	d103      	bne.n	4662 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    465c:	f043 0320 	orr.w	r3, r3, #32
    4660:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    4662:	683b      	ldr	r3, [r7, #0]
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	2b69      	cmp	r3, #105	; 0x69
    4668:	d007      	beq.n	467a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    466a:	683b      	ldr	r3, [r7, #0]
    466c:	781b      	ldrb	r3, [r3, #0]
    466e:	2b64      	cmp	r3, #100	; 0x64
    4670:	d003      	beq.n	467a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    4672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4674:	f023 030c 	bic.w	r3, r3, #12
    4678:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    467a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4680:	2b00      	cmp	r3, #0
    4682:	d003      	beq.n	468c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    4684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4686:	f023 0301 	bic.w	r3, r3, #1
    468a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    468c:	683b      	ldr	r3, [r7, #0]
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	2b69      	cmp	r3, #105	; 0x69
    4692:	d004      	beq.n	469e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    4694:	683b      	ldr	r3, [r7, #0]
    4696:	781b      	ldrb	r3, [r3, #0]
    4698:	2b64      	cmp	r3, #100	; 0x64
    469a:	f040 808d 	bne.w	47b8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    469e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    46a4:	2b00      	cmp	r3, #0
    46a6:	d02e      	beq.n	4706 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    46a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    46aa:	3307      	adds	r3, #7
    46ac:	f023 0307 	bic.w	r3, r3, #7
    46b0:	f103 0208 	add.w	r2, r3, #8
    46b4:	66ba      	str	r2, [r7, #104]	; 0x68
    46b6:	e9d3 3400 	ldrd	r3, r4, [r3]
    46ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    46be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    46c2:	2b00      	cmp	r3, #0
    46c4:	f174 0200 	sbcs.w	r2, r4, #0
    46c8:	da02      	bge.n	46d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    46ca:	425b      	negs	r3, r3
    46cc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    46d0:	4619      	mov	r1, r3
    46d2:	4622      	mov	r2, r4
    46d4:	697b      	ldr	r3, [r7, #20]
    46d6:	0fdb      	lsrs	r3, r3, #31
    46d8:	b2d8      	uxtb	r0, r3
    46da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46dc:	f04f 0400 	mov.w	r4, #0
    46e0:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    46e2:	9508      	str	r5, [sp, #32]
    46e4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    46e6:	9507      	str	r5, [sp, #28]
    46e8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    46ea:	9506      	str	r5, [sp, #24]
    46ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
    46f0:	9002      	str	r0, [sp, #8]
    46f2:	e9cd 1200 	strd	r1, r2, [sp]
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46fa:	68b9      	ldr	r1, [r7, #8]
    46fc:	68f8      	ldr	r0, [r7, #12]
    46fe:	f7ff faf1 	bl	3ce4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4702:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    4704:	e0c8      	b.n	4898 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    4706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4708:	f403 7380 	and.w	r3, r3, #256	; 0x100
    470c:	2b00      	cmp	r3, #0
    470e:	d01e      	beq.n	474e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    4710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4712:	1d1a      	adds	r2, r3, #4
    4714:	66ba      	str	r2, [r7, #104]	; 0x68
    4716:	681b      	ldr	r3, [r3, #0]
    4718:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    471a:	69fb      	ldr	r3, [r7, #28]
    471c:	2b00      	cmp	r3, #0
    471e:	bfb8      	it	lt
    4720:	425b      	neglt	r3, r3
    4722:	4619      	mov	r1, r3
    4724:	69fb      	ldr	r3, [r7, #28]
    4726:	0fdb      	lsrs	r3, r3, #31
    4728:	b2db      	uxtb	r3, r3
    472a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    472c:	9205      	str	r2, [sp, #20]
    472e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4730:	9204      	str	r2, [sp, #16]
    4732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4734:	9203      	str	r2, [sp, #12]
    4736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4738:	9202      	str	r2, [sp, #8]
    473a:	9301      	str	r3, [sp, #4]
    473c:	9100      	str	r1, [sp, #0]
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4742:	68b9      	ldr	r1, [r7, #8]
    4744:	68f8      	ldr	r0, [r7, #12]
    4746:	f7ff fa65 	bl	3c14 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    474a:	6478      	str	r0, [r7, #68]	; 0x44
          }
    474c:	e0a4      	b.n	4898 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4750:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4754:	2b00      	cmp	r3, #0
    4756:	d005      	beq.n	4764 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    4758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    475a:	1d1a      	adds	r2, r3, #4
    475c:	66ba      	str	r2, [r7, #104]	; 0x68
    475e:	681b      	ldr	r3, [r3, #0]
    4760:	b2db      	uxtb	r3, r3
    4762:	e00e      	b.n	4782 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    4764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4766:	f003 0380 	and.w	r3, r3, #128	; 0x80
    476a:	2b00      	cmp	r3, #0
    476c:	d005      	beq.n	477a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    476e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4770:	1d1a      	adds	r2, r3, #4
    4772:	66ba      	str	r2, [r7, #104]	; 0x68
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	b21b      	sxth	r3, r3
    4778:	e003      	b.n	4782 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    477a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    477c:	1d1a      	adds	r2, r3, #4
    477e:	66ba      	str	r2, [r7, #104]	; 0x68
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4784:	6a3b      	ldr	r3, [r7, #32]
    4786:	2b00      	cmp	r3, #0
    4788:	bfb8      	it	lt
    478a:	425b      	neglt	r3, r3
    478c:	4619      	mov	r1, r3
    478e:	6a3b      	ldr	r3, [r7, #32]
    4790:	0fdb      	lsrs	r3, r3, #31
    4792:	b2db      	uxtb	r3, r3
    4794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4796:	9205      	str	r2, [sp, #20]
    4798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    479a:	9204      	str	r2, [sp, #16]
    479c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    479e:	9203      	str	r2, [sp, #12]
    47a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    47a2:	9202      	str	r2, [sp, #8]
    47a4:	9301      	str	r3, [sp, #4]
    47a6:	9100      	str	r1, [sp, #0]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    47ac:	68b9      	ldr	r1, [r7, #8]
    47ae:	68f8      	ldr	r0, [r7, #12]
    47b0:	f7ff fa30 	bl	3c14 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    47b4:	6478      	str	r0, [r7, #68]	; 0x44
          }
    47b6:	e06f      	b.n	4898 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    47b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
    47be:	2b00      	cmp	r3, #0
    47c0:	d020      	beq.n	4804 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    47c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    47c4:	3307      	adds	r3, #7
    47c6:	f023 0307 	bic.w	r3, r3, #7
    47ca:	f103 0208 	add.w	r2, r3, #8
    47ce:	66ba      	str	r2, [r7, #104]	; 0x68
    47d0:	e9d3 3400 	ldrd	r3, r4, [r3]
    47d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    47d6:	4611      	mov	r1, r2
    47d8:	f04f 0200 	mov.w	r2, #0
    47dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
    47de:	9008      	str	r0, [sp, #32]
    47e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    47e2:	9007      	str	r0, [sp, #28]
    47e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    47e6:	9006      	str	r0, [sp, #24]
    47e8:	e9cd 1204 	strd	r1, r2, [sp, #16]
    47ec:	2200      	movs	r2, #0
    47ee:	9202      	str	r2, [sp, #8]
    47f0:	e9cd 3400 	strd	r3, r4, [sp]
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    47f8:	68b9      	ldr	r1, [r7, #8]
    47fa:	68f8      	ldr	r0, [r7, #12]
    47fc:	f7ff fa72 	bl	3ce4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4800:	6478      	str	r0, [r7, #68]	; 0x44
    4802:	e049      	b.n	4898 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    4804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4806:	f403 7380 	and.w	r3, r3, #256	; 0x100
    480a:	2b00      	cmp	r3, #0
    480c:	d016      	beq.n	483c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    480e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4810:	1d1a      	adds	r2, r3, #4
    4812:	66ba      	str	r2, [r7, #104]	; 0x68
    4814:	681b      	ldr	r3, [r3, #0]
    4816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4818:	9205      	str	r2, [sp, #20]
    481a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    481c:	9204      	str	r2, [sp, #16]
    481e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4820:	9203      	str	r2, [sp, #12]
    4822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4824:	9202      	str	r2, [sp, #8]
    4826:	2200      	movs	r2, #0
    4828:	9201      	str	r2, [sp, #4]
    482a:	9300      	str	r3, [sp, #0]
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4830:	68b9      	ldr	r1, [r7, #8]
    4832:	68f8      	ldr	r0, [r7, #12]
    4834:	f7ff f9ee 	bl	3c14 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4838:	6478      	str	r0, [r7, #68]	; 0x44
    483a:	e02d      	b.n	4898 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4842:	2b00      	cmp	r3, #0
    4844:	d005      	beq.n	4852 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    4846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4848:	1d1a      	adds	r2, r3, #4
    484a:	66ba      	str	r2, [r7, #104]	; 0x68
    484c:	681b      	ldr	r3, [r3, #0]
    484e:	b2db      	uxtb	r3, r3
    4850:	e00e      	b.n	4870 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    4852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4854:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4858:	2b00      	cmp	r3, #0
    485a:	d005      	beq.n	4868 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    485c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    485e:	1d1a      	adds	r2, r3, #4
    4860:	66ba      	str	r2, [r7, #104]	; 0x68
    4862:	681b      	ldr	r3, [r3, #0]
    4864:	b29b      	uxth	r3, r3
    4866:	e003      	b.n	4870 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    4868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    486a:	1d1a      	adds	r2, r3, #4
    486c:	66ba      	str	r2, [r7, #104]	; 0x68
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4874:	9305      	str	r3, [sp, #20]
    4876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4878:	9304      	str	r3, [sp, #16]
    487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    487c:	9303      	str	r3, [sp, #12]
    487e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4880:	9302      	str	r3, [sp, #8]
    4882:	2300      	movs	r3, #0
    4884:	9301      	str	r3, [sp, #4]
    4886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4888:	9300      	str	r3, [sp, #0]
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    488e:	68b9      	ldr	r1, [r7, #8]
    4890:	68f8      	ldr	r0, [r7, #12]
    4892:	f7ff f9bf 	bl	3c14 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4896:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    4898:	683b      	ldr	r3, [r7, #0]
    489a:	3301      	adds	r3, #1
    489c:	603b      	str	r3, [r7, #0]
        break;
    489e:	e109      	b.n	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    48a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    48a2:	3307      	adds	r3, #7
    48a4:	f023 0307 	bic.w	r3, r3, #7
    48a8:	f103 0208 	add.w	r2, r3, #8
    48ac:	66ba      	str	r2, [r7, #104]	; 0x68
    48ae:	ed93 7b00 	vldr	d7, [r3]
    48b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48b4:	9302      	str	r3, [sp, #8]
    48b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    48b8:	9301      	str	r3, [sp, #4]
    48ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    48bc:	9300      	str	r3, [sp, #0]
    48be:	eeb0 0a47 	vmov.f32	s0, s14
    48c2:	eef0 0a67 	vmov.f32	s1, s15
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    48ca:	68b9      	ldr	r1, [r7, #8]
    48cc:	68f8      	ldr	r0, [r7, #12]
    48ce:	f7ff fa79 	bl	3dc4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    48d2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    48d4:	683b      	ldr	r3, [r7, #0]
    48d6:	3301      	adds	r3, #1
    48d8:	603b      	str	r3, [r7, #0]
        break;
    48da:	e0eb      	b.n	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    48dc:	2301      	movs	r3, #1
    48de:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    48e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48e2:	f003 0302 	and.w	r3, r3, #2
    48e6:	2b00      	cmp	r3, #0
    48e8:	d113      	bne.n	4912 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    48ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    48ec:	1c5a      	adds	r2, r3, #1
    48ee:	63fa      	str	r2, [r7, #60]	; 0x3c
    48f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    48f2:	429a      	cmp	r2, r3
    48f4:	bf8c      	ite	hi
    48f6:	2301      	movhi	r3, #1
    48f8:	2300      	movls	r3, #0
    48fa:	b2db      	uxtb	r3, r3
    48fc:	2b00      	cmp	r3, #0
    48fe:	d008      	beq.n	4912 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    4900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4902:	1c53      	adds	r3, r2, #1
    4904:	647b      	str	r3, [r7, #68]	; 0x44
    4906:	68fc      	ldr	r4, [r7, #12]
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	68b9      	ldr	r1, [r7, #8]
    490c:	2020      	movs	r0, #32
    490e:	47a0      	blx	r4
          while (l++ < width) {
    4910:	e7eb      	b.n	48ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4914:	1d1a      	adds	r2, r3, #4
    4916:	66ba      	str	r2, [r7, #104]	; 0x68
    4918:	681b      	ldr	r3, [r3, #0]
    491a:	b2d8      	uxtb	r0, r3
    491c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    491e:	1c53      	adds	r3, r2, #1
    4920:	647b      	str	r3, [r7, #68]	; 0x44
    4922:	68fc      	ldr	r4, [r7, #12]
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	68b9      	ldr	r1, [r7, #8]
    4928:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    492c:	f003 0302 	and.w	r3, r3, #2
    4930:	2b00      	cmp	r3, #0
    4932:	d013      	beq.n	495c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    4934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4936:	1c5a      	adds	r2, r3, #1
    4938:	63fa      	str	r2, [r7, #60]	; 0x3c
    493a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    493c:	429a      	cmp	r2, r3
    493e:	bf8c      	ite	hi
    4940:	2301      	movhi	r3, #1
    4942:	2300      	movls	r3, #0
    4944:	b2db      	uxtb	r3, r3
    4946:	2b00      	cmp	r3, #0
    4948:	d008      	beq.n	495c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    494a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    494c:	1c53      	adds	r3, r2, #1
    494e:	647b      	str	r3, [r7, #68]	; 0x44
    4950:	68fc      	ldr	r4, [r7, #12]
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	68b9      	ldr	r1, [r7, #8]
    4956:	2020      	movs	r0, #32
    4958:	47a0      	blx	r4
          while (l++ < width) {
    495a:	e7eb      	b.n	4934 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    495c:	683b      	ldr	r3, [r7, #0]
    495e:	3301      	adds	r3, #1
    4960:	603b      	str	r3, [r7, #0]
        break;
    4962:	e0a7      	b.n	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    4964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4966:	1d1a      	adds	r2, r3, #4
    4968:	66ba      	str	r2, [r7, #104]	; 0x68
    496a:	681b      	ldr	r3, [r3, #0]
    496c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    496e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4970:	f7fe ffe0 	bl	3934 <_strlen(char const*)>
    4974:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    4976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    497c:	2b00      	cmp	r3, #0
    497e:	d007      	beq.n	4990 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    4980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4984:	429a      	cmp	r2, r3
    4986:	d201      	bcs.n	498c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    4988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    498a:	e000      	b.n	498e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    498c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    498e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    4990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4992:	f003 0302 	and.w	r3, r3, #2
    4996:	2b00      	cmp	r3, #0
    4998:	d113      	bne.n	49c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    499c:	1c5a      	adds	r2, r3, #1
    499e:	637a      	str	r2, [r7, #52]	; 0x34
    49a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    49a2:	429a      	cmp	r2, r3
    49a4:	bf8c      	ite	hi
    49a6:	2301      	movhi	r3, #1
    49a8:	2300      	movls	r3, #0
    49aa:	b2db      	uxtb	r3, r3
    49ac:	2b00      	cmp	r3, #0
    49ae:	d008      	beq.n	49c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    49b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    49b2:	1c53      	adds	r3, r2, #1
    49b4:	647b      	str	r3, [r7, #68]	; 0x44
    49b6:	68fc      	ldr	r4, [r7, #12]
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	68b9      	ldr	r1, [r7, #8]
    49bc:	2020      	movs	r0, #32
    49be:	47a0      	blx	r4
          while (l++ < width) {
    49c0:	e7eb      	b.n	499a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    49c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	2b00      	cmp	r3, #0
    49c8:	d00b      	beq.n	49e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    49ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    49cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    49d0:	2b00      	cmp	r3, #0
    49d2:	d004      	beq.n	49de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    49d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    49d6:	1e5a      	subs	r2, r3, #1
    49d8:	64fa      	str	r2, [r7, #76]	; 0x4c
    49da:	2b00      	cmp	r3, #0
    49dc:	d001      	beq.n	49e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    49de:	2301      	movs	r3, #1
    49e0:	e000      	b.n	49e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    49e2:	2300      	movs	r3, #0
    49e4:	2b00      	cmp	r3, #0
    49e6:	d00b      	beq.n	4a00 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    49e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    49ea:	1c5a      	adds	r2, r3, #1
    49ec:	63ba      	str	r2, [r7, #56]	; 0x38
    49ee:	7818      	ldrb	r0, [r3, #0]
    49f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    49f2:	1c53      	adds	r3, r2, #1
    49f4:	647b      	str	r3, [r7, #68]	; 0x44
    49f6:	68fc      	ldr	r4, [r7, #12]
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	68b9      	ldr	r1, [r7, #8]
    49fc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    49fe:	e7e0      	b.n	49c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    4a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a02:	f003 0302 	and.w	r3, r3, #2
    4a06:	2b00      	cmp	r3, #0
    4a08:	d013      	beq.n	4a32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    4a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a0c:	1c5a      	adds	r2, r3, #1
    4a0e:	637a      	str	r2, [r7, #52]	; 0x34
    4a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4a12:	429a      	cmp	r2, r3
    4a14:	bf8c      	ite	hi
    4a16:	2301      	movhi	r3, #1
    4a18:	2300      	movls	r3, #0
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d008      	beq.n	4a32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    4a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a22:	1c53      	adds	r3, r2, #1
    4a24:	647b      	str	r3, [r7, #68]	; 0x44
    4a26:	68fc      	ldr	r4, [r7, #12]
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	68b9      	ldr	r1, [r7, #8]
    4a2c:	2020      	movs	r0, #32
    4a2e:	47a0      	blx	r4
          while (l++ < width) {
    4a30:	e7eb      	b.n	4a0a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    4a32:	683b      	ldr	r3, [r7, #0]
    4a34:	3301      	adds	r3, #1
    4a36:	603b      	str	r3, [r7, #0]
        break;
    4a38:	e03c      	b.n	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4a3a:	2308      	movs	r3, #8
    4a3c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a40:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    4a44:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    4a46:	2300      	movs	r3, #0
    4a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4a4e:	1d1a      	adds	r2, r3, #4
    4a50:	66ba      	str	r2, [r7, #104]	; 0x68
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	461a      	mov	r2, r3
    4a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a58:	9305      	str	r3, [sp, #20]
    4a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4a5c:	9304      	str	r3, [sp, #16]
    4a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4a60:	9303      	str	r3, [sp, #12]
    4a62:	2310      	movs	r3, #16
    4a64:	9302      	str	r3, [sp, #8]
    4a66:	2300      	movs	r3, #0
    4a68:	9301      	str	r3, [sp, #4]
    4a6a:	9200      	str	r2, [sp, #0]
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a70:	68b9      	ldr	r1, [r7, #8]
    4a72:	68f8      	ldr	r0, [r7, #12]
    4a74:	f7ff f8ce 	bl	3c14 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4a78:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    4a7a:	683b      	ldr	r3, [r7, #0]
    4a7c:	3301      	adds	r3, #1
    4a7e:	603b      	str	r3, [r7, #0]
        break;
    4a80:	e018      	b.n	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    4a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a84:	1c53      	adds	r3, r2, #1
    4a86:	647b      	str	r3, [r7, #68]	; 0x44
    4a88:	68fc      	ldr	r4, [r7, #12]
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	68b9      	ldr	r1, [r7, #8]
    4a8e:	2025      	movs	r0, #37	; 0x25
    4a90:	47a0      	blx	r4
        format++;
    4a92:	683b      	ldr	r3, [r7, #0]
    4a94:	3301      	adds	r3, #1
    4a96:	603b      	str	r3, [r7, #0]
        break;
    4a98:	e00c      	b.n	4ab4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    4a9a:	683b      	ldr	r3, [r7, #0]
    4a9c:	7818      	ldrb	r0, [r3, #0]
    4a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4aa0:	1c53      	adds	r3, r2, #1
    4aa2:	647b      	str	r3, [r7, #68]	; 0x44
    4aa4:	68fc      	ldr	r4, [r7, #12]
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	68b9      	ldr	r1, [r7, #8]
    4aaa:	47a0      	blx	r4
        format++;
    4aac:	683b      	ldr	r3, [r7, #0]
    4aae:	3301      	adds	r3, #1
    4ab0:	603b      	str	r3, [r7, #0]
        break;
    4ab2:	bf00      	nop
  while (*format)
    4ab4:	f7ff bbb6 	b.w	4224 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    4ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	429a      	cmp	r2, r3
    4abe:	d302      	bcc.n	4ac6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    4ac0:	687b      	ldr	r3, [r7, #4]
    4ac2:	1e5a      	subs	r2, r3, #1
    4ac4:	e000      	b.n	4ac8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    4ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4ac8:	68fc      	ldr	r4, [r7, #12]
    4aca:	687b      	ldr	r3, [r7, #4]
    4acc:	68b9      	ldr	r1, [r7, #8]
    4ace:	2000      	movs	r0, #0
    4ad0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    4ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    4ad4:	4618      	mov	r0, r3
    4ad6:	3758      	adds	r7, #88	; 0x58
    4ad8:	46bd      	mov	sp, r7
    4ada:	bdb0      	pop	{r4, r5, r7, pc}

00004adc <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    4adc:	b40f      	push	{r0, r1, r2, r3}
    4ade:	b580      	push	{r7, lr}
    4ae0:	b0c4      	sub	sp, #272	; 0x110
    4ae2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    4ae4:	f507 738a 	add.w	r3, r7, #276	; 0x114
    4ae8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    4aec:	4639      	mov	r1, r7
    4aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    4af2:	9300      	str	r3, [sp, #0]
    4af4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    4af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4afc:	4807      	ldr	r0, [pc, #28]	; (4b1c <printf+0x40>)
    4afe:	f7ff fb83 	bl	4208 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4b02:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    4b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    4b0a:	4618      	mov	r0, r3
    4b0c:	f507 7784 	add.w	r7, r7, #264	; 0x108
    4b10:	46bd      	mov	sp, r7
    4b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    4b16:	b004      	add	sp, #16
    4b18:	4770      	bx	lr
    4b1a:	bf00      	nop
    4b1c:	000038a9 	.word	0x000038a9

00004b20 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    4b20:	b480      	push	{r7}
    4b22:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    4b24:	bf00      	nop
    4b26:	46bd      	mov	sp, r7
    4b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2c:	4770      	bx	lr

00004b2e <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    4b2e:	b580      	push	{r7, lr}
    4b30:	b082      	sub	sp, #8
    4b32:	af00      	add	r7, sp, #0
    4b34:	6078      	str	r0, [r7, #4]
    4b36:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    4b38:	6839      	ldr	r1, [r7, #0]
    4b3a:	6878      	ldr	r0, [r7, #4]
    4b3c:	f000 f806 	bl	4b4c <_trace_write_semihosting_stdout(char const*, unsigned int)>
    4b40:	4603      	mov	r3, r0
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    4b42:	4618      	mov	r0, r3
    4b44:	3708      	adds	r7, #8
    4b46:	46bd      	mov	sp, r7
    4b48:	bd80      	pop	{r7, pc}
    4b4a:	Address 0x0000000000004b4a is out of bounds.


00004b4c <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    4b4c:	b5b0      	push	{r4, r5, r7, lr}
    4b4e:	b08c      	sub	sp, #48	; 0x30
    4b50:	af00      	add	r7, sp, #0
    4b52:	6078      	str	r0, [r7, #4]
    4b54:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    4b56:	4b2d      	ldr	r3, [pc, #180]	; (4c0c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4b58:	681b      	ldr	r3, [r3, #0]
    4b5a:	f003 0301 	and.w	r3, r3, #1
    4b5e:	2b00      	cmp	r3, #0
    4b60:	bf0c      	ite	eq
    4b62:	2301      	moveq	r3, #1
    4b64:	2300      	movne	r3, #0
    4b66:	b2db      	uxtb	r3, r3
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d001      	beq.n	4b70 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    4b6c:	683b      	ldr	r3, [r7, #0]
    4b6e:	e049      	b.n	4c04 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    4b70:	4b27      	ldr	r3, [pc, #156]	; (4c10 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d11d      	bne.n	4bb4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    4b78:	4b26      	ldr	r3, [pc, #152]	; (4c14 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc8>)
    4b7a:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    4b7c:	2304      	movs	r3, #4
    4b7e:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    4b80:	2303      	movs	r3, #3
    4b82:	613b      	str	r3, [r7, #16]
    4b84:	2301      	movs	r3, #1
    4b86:	62bb      	str	r3, [r7, #40]	; 0x28
    4b88:	f107 0308 	add.w	r3, r7, #8
    4b8c:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    4b8e:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4b90:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    4b92:	4620      	mov	r0, r4
    4b94:	4629      	mov	r1, r5
    4b96:	beab      	bkpt	0x00ab
    4b98:	4604      	mov	r4, r0
    4b9a:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    4b9c:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    4b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    4ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4ba6:	d102      	bne.n	4bae <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    4ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bac:	e02a      	b.n	4c04 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

      handle = ret;
    4bae:	4a18      	ldr	r2, [pc, #96]	; (4c10 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    4bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bb2:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    4bb4:	4b16      	ldr	r3, [pc, #88]	; (4c10 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    4bb6:	681b      	ldr	r3, [r3, #0]
    4bb8:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    4bbe:	683b      	ldr	r3, [r7, #0]
    4bc0:	613b      	str	r3, [r7, #16]
    4bc2:	2305      	movs	r3, #5
    4bc4:	61fb      	str	r3, [r7, #28]
    4bc6:	f107 0308 	add.w	r3, r7, #8
    4bca:	61bb      	str	r3, [r7, #24]
  );
    4bcc:	69fc      	ldr	r4, [r7, #28]
    4bce:	69bd      	ldr	r5, [r7, #24]
    4bd0:	4620      	mov	r0, r4
    4bd2:	4629      	mov	r1, r5
    4bd4:	beab      	bkpt	0x00ab
    4bd6:	4604      	mov	r4, r0
    4bd8:	617c      	str	r4, [r7, #20]
  return value;
    4bda:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    4bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    4bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4be4:	d102      	bne.n	4bec <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    4be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bea:	e00b      	b.n	4c04 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    4bec:	683b      	ldr	r3, [r7, #0]
    4bee:	461a      	mov	r2, r3
    4bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bf2:	4293      	cmp	r3, r2
    4bf4:	d102      	bne.n	4bfc <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb0>
    return -1;
    4bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bfa:	e003      	b.n	4c04 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb8>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    4bfc:	683b      	ldr	r3, [r7, #0]
    4bfe:	461a      	mov	r2, r3
    4c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c02:	1ad3      	subs	r3, r2, r3
}
    4c04:	4618      	mov	r0, r3
    4c06:	3730      	adds	r7, #48	; 0x30
    4c08:	46bd      	mov	sp, r7
    4c0a:	bdb0      	pop	{r4, r5, r7, pc}
    4c0c:	e000edf0 	.word	0xe000edf0
    4c10:	100003b4 	.word	0x100003b4
    4c14:	00008ca8 	.word	0x00008ca8

00004c18 <NVIC_EnableIRQ>:
{
    4c18:	b480      	push	{r7}
    4c1a:	b083      	sub	sp, #12
    4c1c:	af00      	add	r7, sp, #0
    4c1e:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	f003 021f 	and.w	r2, r3, #31
    4c26:	4907      	ldr	r1, [pc, #28]	; (4c44 <NVIC_EnableIRQ+0x2c>)
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	095b      	lsrs	r3, r3, #5
    4c2c:	2001      	movs	r0, #1
    4c2e:	fa00 f202 	lsl.w	r2, r0, r2
    4c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c36:	bf00      	nop
    4c38:	370c      	adds	r7, #12
    4c3a:	46bd      	mov	sp, r7
    4c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c40:	4770      	bx	lr
    4c42:	bf00      	nop
    4c44:	e000e100 	.word	0xe000e100

00004c48 <NVIC_DisableIRQ>:
{
    4c48:	b480      	push	{r7}
    4c4a:	b083      	sub	sp, #12
    4c4c:	af00      	add	r7, sp, #0
    4c4e:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	f003 021f 	and.w	r2, r3, #31
    4c56:	4907      	ldr	r1, [pc, #28]	; (4c74 <NVIC_DisableIRQ+0x2c>)
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	095b      	lsrs	r3, r3, #5
    4c5c:	2001      	movs	r0, #1
    4c5e:	fa00 f202 	lsl.w	r2, r0, r2
    4c62:	3320      	adds	r3, #32
    4c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c68:	bf00      	nop
    4c6a:	370c      	adds	r7, #12
    4c6c:	46bd      	mov	sp, r7
    4c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c72:	4770      	bx	lr
    4c74:	e000e100 	.word	0xe000e100

00004c78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    4c78:	b480      	push	{r7}
    4c7a:	b083      	sub	sp, #12
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	6078      	str	r0, [r7, #4]
    4c80:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	2b00      	cmp	r3, #0
    4c86:	da0b      	bge.n	4ca0 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4c88:	683b      	ldr	r3, [r7, #0]
    4c8a:	b2da      	uxtb	r2, r3
    4c8c:	490d      	ldr	r1, [pc, #52]	; (4cc4 <NVIC_SetPriority+0x4c>)
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	f003 030f 	and.w	r3, r3, #15
    4c94:	3b04      	subs	r3, #4
    4c96:	0152      	lsls	r2, r2, #5
    4c98:	b2d2      	uxtb	r2, r2
    4c9a:	440b      	add	r3, r1
    4c9c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    4c9e:	e00a      	b.n	4cb6 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ca0:	683b      	ldr	r3, [r7, #0]
    4ca2:	b2db      	uxtb	r3, r3
    4ca4:	4a08      	ldr	r2, [pc, #32]	; (4cc8 <NVIC_SetPriority+0x50>)
    4ca6:	6879      	ldr	r1, [r7, #4]
    4ca8:	4608      	mov	r0, r1
    4caa:	015b      	lsls	r3, r3, #5
    4cac:	b2d9      	uxtb	r1, r3
    4cae:	1813      	adds	r3, r2, r0
    4cb0:	460a      	mov	r2, r1
    4cb2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    4cb6:	bf00      	nop
    4cb8:	370c      	adds	r7, #12
    4cba:	46bd      	mov	sp, r7
    4cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc0:	4770      	bx	lr
    4cc2:	bf00      	nop
    4cc4:	e000ed00 	.word	0xe000ed00
    4cc8:	e000e100 	.word	0xe000e100

00004ccc <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    4ccc:	b480      	push	{r7}
    4cce:	b083      	sub	sp, #12
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    4cd4:	4b0c      	ldr	r3, [pc, #48]	; (4d08 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	68da      	ldr	r2, [r3, #12]
    4cda:	4b0b      	ldr	r3, [pc, #44]	; (4d08 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4cdc:	681b      	ldr	r3, [r3, #0]
    4cde:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4ce2:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    4ce4:	4b09      	ldr	r3, [pc, #36]	; (4d0c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4ce6:	681b      	ldr	r3, [r3, #0]
    4ce8:	2200      	movs	r2, #0
    4cea:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    4cec:	4b07      	ldr	r3, [pc, #28]	; (4d0c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	681a      	ldr	r2, [r3, #0]
    4cf2:	4b06      	ldr	r3, [pc, #24]	; (4d0c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4cf4:	681b      	ldr	r3, [r3, #0]
    4cf6:	f042 0201 	orr.w	r2, r2, #1
    4cfa:	601a      	str	r2, [r3, #0]
  }
    4cfc:	bf00      	nop
    4cfe:	370c      	adds	r7, #12
    4d00:	46bd      	mov	sp, r7
    4d02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d06:	4770      	bx	lr
    4d08:	1000006c 	.word	0x1000006c
    4d0c:	10000068 	.word	0x10000068

00004d10 <sjsu::cortex::DwtCounter::GetCount()>:
  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    4d10:	b480      	push	{r7}
    4d12:	b083      	sub	sp, #12
    4d14:	af00      	add	r7, sp, #0
    4d16:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    4d18:	4b04      	ldr	r3, [pc, #16]	; (4d2c <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	685b      	ldr	r3, [r3, #4]
  }
    4d1e:	4618      	mov	r0, r3
    4d20:	370c      	adds	r7, #12
    4d22:	46bd      	mov	sp, r7
    4d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d28:	4770      	bx	lr
    4d2a:	bf00      	nop
    4d2c:	10000068 	.word	0x10000068

00004d30 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    4d30:	b480      	push	{r7}
    4d32:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    4d34:	f8df 001c 	ldr.w	r0, [pc, #28]	; 4d54 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    4d38:	6801      	ldr	r1, [r0, #0]
    4d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4d3e:	6001      	str	r1, [r0, #0]
    4d40:	f3bf 8f4f 	dsb	sy
    4d44:	f3bf 8f6f 	isb	sy
  }
}
    4d48:	bf00      	nop
    4d4a:	46bd      	mov	sp, r7
    4d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d50:	4770      	bx	lr
    4d52:	0000      	.short	0x0000
    4d54:	e000ed88 	.word	0xe000ed88

00004d58 <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    4d58:	b580      	push	{r7, lr}
    4d5a:	b084      	sub	sp, #16
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    4d62:	e9d7 0100 	ldrd	r0, r1, [r7]
    4d66:	f001 feef 	bl	6b48 <__aeabi_ul2f>
    4d6a:	4602      	mov	r2, r0
    4d6c:	f107 030c 	add.w	r3, r7, #12
    4d70:	ee00 2a10 	vmov	s0, r2
    4d74:	4618      	mov	r0, r3
    4d76:	f7fb fb59 	bl	42c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4d7a:	68fb      	ldr	r3, [r7, #12]
    4d7c:	4618      	mov	r0, r3
    4d7e:	3710      	adds	r7, #16
    4d80:	46bd      	mov	sp, r7
    4d82:	bd80      	pop	{r7, pc}

00004d84 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4d84:	b580      	push	{r7, lr}
    4d86:	b086      	sub	sp, #24
    4d88:	af00      	add	r7, sp, #0
    4d8a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4d8c:	6878      	ldr	r0, [r7, #4]
    4d8e:	f000 f807 	bl	4da0 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4d92:	eef0 7a40 	vmov.f32	s15, s0
	}
    4d96:	eeb0 0a67 	vmov.f32	s0, s15
    4d9a:	3718      	adds	r7, #24
    4d9c:	46bd      	mov	sp, r7
    4d9e:	bd80      	pop	{r7, pc}

00004da0 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4da0:	b480      	push	{r7}
    4da2:	b085      	sub	sp, #20
    4da4:	af00      	add	r7, sp, #0
    4da6:	60f8      	str	r0, [r7, #12]
    4da8:	7239      	strb	r1, [r7, #8]
    4daa:	713a      	strb	r2, [r7, #4]
    4dac:	703b      	strb	r3, [r7, #0]
			return value;
    4dae:	68fb      	ldr	r3, [r7, #12]
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	ee07 3a90 	vmov	s15, r3
		}
    4db6:	eeb0 0a67 	vmov.f32	s0, s15
    4dba:	3714      	adds	r7, #20
    4dbc:	46bd      	mov	sp, r7
    4dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc2:	4770      	bx	lr

00004dc4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4dc4:	b580      	push	{r7, lr}
    4dc6:	ed2d 8b02 	vpush	{d8}
    4dca:	b082      	sub	sp, #8
    4dcc:	af00      	add	r7, sp, #0
    4dce:	6078      	str	r0, [r7, #4]
    4dd0:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	ed93 8a00 	vldr	s16, [r3]
    4dd8:	683b      	ldr	r3, [r7, #0]
    4dda:	4618      	mov	r0, r3
    4ddc:	f7ff ffd2 	bl	4d84 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4de0:	eef0 7a40 	vmov.f32	s15, s0
    4de4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dec:	bf94      	ite	ls
    4dee:	2301      	movls	r3, #1
    4df0:	2300      	movhi	r3, #0
    4df2:	b2db      	uxtb	r3, r3
		}
    4df4:	4618      	mov	r0, r3
    4df6:	3708      	adds	r7, #8
    4df8:	46bd      	mov	sp, r7
    4dfa:	ecbd 8b02 	vpop	{d8}
    4dfe:	bd80      	pop	{r7, pc}

00004e00 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    4e00:	b480      	push	{r7}
    4e02:	b083      	sub	sp, #12
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    4e08:	4a04      	ldr	r2, [pc, #16]	; (4e1c <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	6013      	str	r3, [r2, #0]
}
    4e0e:	bf00      	nop
    4e10:	370c      	adds	r7, #12
    4e12:	46bd      	mov	sp, r7
    4e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e18:	4770      	bx	lr
    4e1a:	bf00      	nop
    4e1c:	10000000 	.word	0x10000000

00004e20 <sjsu::cortex::InterruptController::IrqToIndex(int)>:

  static int IrqToIndex(int irq)
    4e20:	b480      	push	{r7}
    4e22:	b083      	sub	sp, #12
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	3310      	adds	r3, #16
  }
    4e2c:	4618      	mov	r0, r3
    4e2e:	370c      	adds	r7, #12
    4e30:	46bd      	mov	sp, r7
    4e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e36:	4770      	bx	lr

00004e38 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
    4e38:	b580      	push	{r7, lr}
    4e3a:	b082      	sub	sp, #8
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
    4e40:	6878      	ldr	r0, [r7, #4]
    4e42:	f7ff ffed 	bl	4e20 <sjsu::cortex::InterruptController::IrqToIndex(int)>
    4e46:	4603      	mov	r3, r0
    4e48:	009b      	lsls	r3, r3, #2
    4e4a:	4a03      	ldr	r2, [pc, #12]	; (4e58 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
    4e4c:	4413      	add	r3, r2
  }
    4e4e:	4618      	mov	r0, r3
    4e50:	3708      	adds	r7, #8
    4e52:	46bd      	mov	sp, r7
    4e54:	bd80      	pop	{r7, pc}
    4e56:	bf00      	nop
    4e58:	1000012c 	.word	0x1000012c

00004e5c <sjsu::cortex::InterruptController::LookupHandler()>:
  /// Program ends up here if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void LookupHandler()
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b082      	sub	sp, #8
    4e60:	af00      	add	r7, sp, #0
  {
    int active_isr = (scb->ICSR & 0xFF);
    4e62:	4b09      	ldr	r3, [pc, #36]	; (4e88 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    4e64:	681b      	ldr	r3, [r3, #0]
    4e66:	685b      	ldr	r3, [r3, #4]
    4e68:	b2db      	uxtb	r3, r3
    4e6a:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    4e6c:	4a07      	ldr	r2, [pc, #28]	; (4e8c <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    4e72:	4a07      	ldr	r2, [pc, #28]	; (4e90 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    4e74:	687b      	ldr	r3, [r7, #4]
    4e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e7a:	603b      	str	r3, [r7, #0]
    isr();
    4e7c:	683b      	ldr	r3, [r7, #0]
    4e7e:	4798      	blx	r3
  }
    4e80:	bf00      	nop
    4e82:	3708      	adds	r7, #8
    4e84:	46bd      	mov	sp, r7
    4e86:	bd80      	pop	{r7, pc}
    4e88:	10000070 	.word	0x10000070
    4e8c:	10000048 	.word	0x10000048
    4e90:	1000012c 	.word	0x1000012c

00004e94 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:

  void Register(RegistrationInfo_t register_info) const override
    4e94:	b084      	sub	sp, #16
    4e96:	b590      	push	{r4, r7, lr}
    4e98:	b085      	sub	sp, #20
    4e9a:	af00      	add	r7, sp, #0
    4e9c:	6078      	str	r0, [r7, #4]
    4e9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    4ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
    4ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ea8:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
    4eaa:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4eac:	68f8      	ldr	r0, [r7, #12]
    4eae:	f7ff ffc3 	bl	4e38 <sjsu::cortex::InterruptController::GetVector(int)>
    4eb2:	4603      	mov	r3, r0
    4eb4:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
    4eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4eba:	2b00      	cmp	r3, #0
    4ebc:	d005      	beq.n	4eca <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    4ebe:	68fb      	ldr	r3, [r7, #12]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	db02      	blt.n	4eca <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
    4ec4:	68f8      	ldr	r0, [r7, #12]
    4ec6:	f7ff fea7 	bl	4c18 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
    4eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ecc:	2b00      	cmp	r3, #0
    4ece:	db04      	blt.n	4eda <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
    4ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ed2:	4619      	mov	r1, r3
    4ed4:	68f8      	ldr	r0, [r7, #12]
    4ed6:	f7ff fecf 	bl	4c78 <NVIC_SetPriority>
    }
  }
    4eda:	bf00      	nop
    4edc:	3714      	adds	r7, #20
    4ede:	46bd      	mov	sp, r7
    4ee0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    4ee4:	b004      	add	sp, #16
    4ee6:	4770      	bx	lr

00004ee8 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
    4ee8:	b580      	push	{r7, lr}
    4eea:	b082      	sub	sp, #8
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
    4ef0:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
    4ef2:	6838      	ldr	r0, [r7, #0]
    4ef4:	f7ff fea8 	bl	4c48 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
    4ef8:	6838      	ldr	r0, [r7, #0]
    4efa:	f7ff ff9d 	bl	4e38 <sjsu::cortex::InterruptController::GetVector(int)>
    4efe:	4602      	mov	r2, r0
    4f00:	4b02      	ldr	r3, [pc, #8]	; (4f0c <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
    4f02:	6013      	str	r3, [r2, #0]
  }
    4f04:	bf00      	nop
    4f06:	3708      	adds	r7, #8
    4f08:	46bd      	mov	sp, r7
    4f0a:	bd80      	pop	{r7, pc}
    4f0c:	00001b9d 	.word	0x00001b9d

00004f10 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    4f10:	b580      	push	{r7, lr}
    4f12:	b082      	sub	sp, #8
    4f14:	af00      	add	r7, sp, #0
    4f16:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	4618      	mov	r0, r3
    4f1c:	f000 f804 	bl	4f28 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    4f20:	6878      	ldr	r0, [r7, #4]
    4f22:	3708      	adds	r7, #8
    4f24:	46bd      	mov	sp, r7
    4f26:	bd80      	pop	{r7, pc}

00004f28 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    4f28:	b580      	push	{r7, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    4f30:	4903      	ldr	r1, [pc, #12]	; (4f40 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    4f32:	6878      	ldr	r0, [r7, #4]
    4f34:	f000 f806 	bl	4f44 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    4f38:	6878      	ldr	r0, [r7, #4]
    4f3a:	3708      	adds	r7, #8
    4f3c:	46bd      	mov	sp, r7
    4f3e:	bd80      	pop	{r7, pc}
    4f40:	00009220 	.word	0x00009220

00004f44 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    4f44:	b490      	push	{r4, r7}
    4f46:	b082      	sub	sp, #8
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
    4f4c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    4f4e:	683b      	ldr	r3, [r7, #0]
    4f50:	e9d3 3400 	ldrd	r3, r4, [r3]
    4f54:	687a      	ldr	r2, [r7, #4]
    4f56:	e9c2 3400 	strd	r3, r4, [r2]
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	4618      	mov	r0, r3
    4f5e:	3708      	adds	r7, #8
    4f60:	46bd      	mov	sp, r7
    4f62:	bc90      	pop	{r4, r7}
    4f64:	4770      	bx	lr

00004f66 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    4f66:	b580      	push	{r7, lr}
    4f68:	b082      	sub	sp, #8
    4f6a:	af00      	add	r7, sp, #0
    4f6c:	6078      	str	r0, [r7, #4]
    4f6e:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    4f70:	687b      	ldr	r3, [r7, #4]
    4f72:	6839      	ldr	r1, [r7, #0]
    4f74:	4618      	mov	r0, r3
    4f76:	f000 f811 	bl	4f9c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    4f7a:	6878      	ldr	r0, [r7, #4]
    4f7c:	3708      	adds	r7, #8
    4f7e:	46bd      	mov	sp, r7
    4f80:	bd80      	pop	{r7, pc}

00004f82 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    4f82:	b490      	push	{r4, r7}
    4f84:	b082      	sub	sp, #8
    4f86:	af00      	add	r7, sp, #0
    4f88:	6078      	str	r0, [r7, #4]
	{ return __r; }
    4f8a:	687b      	ldr	r3, [r7, #4]
    4f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
    4f90:	4618      	mov	r0, r3
    4f92:	4621      	mov	r1, r4
    4f94:	3708      	adds	r7, #8
    4f96:	46bd      	mov	sp, r7
    4f98:	bc90      	pop	{r4, r7}
    4f9a:	4770      	bx	lr

00004f9c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9e:	b085      	sub	sp, #20
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
    4fa4:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    4fa6:	6838      	ldr	r0, [r7, #0]
    4fa8:	f7ff ffeb 	bl	4f82 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    4fac:	4605      	mov	r5, r0
    4fae:	460e      	mov	r6, r1
    4fb0:	462b      	mov	r3, r5
    4fb2:	4634      	mov	r4, r6
    4fb4:	f04f 0100 	mov.w	r1, #0
    4fb8:	f04f 0200 	mov.w	r2, #0
    4fbc:	0162      	lsls	r2, r4, #5
    4fbe:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    4fc2:	0159      	lsls	r1, r3, #5
    4fc4:	460b      	mov	r3, r1
    4fc6:	4614      	mov	r4, r2
    4fc8:	1b5b      	subs	r3, r3, r5
    4fca:	eb64 0406 	sbc.w	r4, r4, r6
    4fce:	f04f 0100 	mov.w	r1, #0
    4fd2:	f04f 0200 	mov.w	r2, #0
    4fd6:	00a2      	lsls	r2, r4, #2
    4fd8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    4fdc:	0099      	lsls	r1, r3, #2
    4fde:	460b      	mov	r3, r1
    4fe0:	4614      	mov	r4, r2
    4fe2:	195b      	adds	r3, r3, r5
    4fe4:	eb44 0406 	adc.w	r4, r4, r6
    4fe8:	f04f 0100 	mov.w	r1, #0
    4fec:	f04f 0200 	mov.w	r2, #0
    4ff0:	00e2      	lsls	r2, r4, #3
    4ff2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4ff6:	00d9      	lsls	r1, r3, #3
    4ff8:	460b      	mov	r3, r1
    4ffa:	4614      	mov	r4, r2
    4ffc:	e9c7 3402 	strd	r3, r4, [r7, #8]
    5000:	f107 0308 	add.w	r3, r7, #8
    5004:	4619      	mov	r1, r3
    5006:	6878      	ldr	r0, [r7, #4]
    5008:	f7fb fb0c 	bl	624 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    500c:	6878      	ldr	r0, [r7, #4]
    500e:	3714      	adds	r7, #20
    5010:	46bd      	mov	sp, r7
    5012:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005014 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    5014:	b590      	push	{r4, r7, lr}
    5016:	b085      	sub	sp, #20
    5018:	af00      	add	r7, sp, #0
    501a:	6078      	str	r0, [r7, #4]
    501c:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    501e:	f107 0308 	add.w	r3, r7, #8
    5022:	6839      	ldr	r1, [r7, #0]
    5024:	4618      	mov	r0, r3
    5026:	f7ff ff9e 	bl	4f66 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    502a:	f107 0308 	add.w	r3, r7, #8
    502e:	4618      	mov	r0, r3
    5030:	f7fc fe18 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    5034:	4603      	mov	r3, r0
    5036:	460c      	mov	r4, r1
    5038:	687a      	ldr	r2, [r7, #4]
    503a:	e9c2 3400 	strd	r3, r4, [r2]
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	4618      	mov	r0, r3
    5042:	3714      	adds	r7, #20
    5044:	46bd      	mov	sp, r7
    5046:	bd90      	pop	{r4, r7, pc}

00005048 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  /// Universal default system timer interrupt handler.
  static void SystemTimerHandler()
    5048:	b580      	push	{r7, lr}
    504a:	b084      	sub	sp, #16
    504c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    counter += 1ms;
    504e:	f107 0308 	add.w	r3, r7, #8
    5052:	4618      	mov	r0, r3
    5054:	f7ff ff5c 	bl	4f10 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    5058:	f107 0208 	add.w	r2, r7, #8
    505c:	463b      	mov	r3, r7
    505e:	4611      	mov	r1, r2
    5060:	4618      	mov	r0, r3
    5062:	f7ff ffd7 	bl	5014 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    5066:	463b      	mov	r3, r7
    5068:	4619      	mov	r1, r3
    506a:	4807      	ldr	r0, [pc, #28]	; (5088 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    506c:	f000 f9d4 	bl	5418 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    if (system_timer_isr != nullptr)
    5070:	4b06      	ldr	r3, [pc, #24]	; (508c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    5072:	681b      	ldr	r3, [r3, #0]
    5074:	2b00      	cmp	r3, #0
    5076:	d002      	beq.n	507e <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    5078:	4b04      	ldr	r3, [pc, #16]	; (508c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    507a:	681b      	ldr	r3, [r3, #0]
    507c:	4798      	blx	r3
    }
  }
    507e:	bf00      	nop
    5080:	3710      	adds	r7, #16
    5082:	46bd      	mov	sp, r7
    5084:	bd80      	pop	{r7, pc}
    5086:	bf00      	nop
    5088:	100003c0 	.word	0x100003c0
    508c:	100003b8 	.word	0x100003b8

00005090 <sjsu::cortex::SystemTimer::GetCount()>:
  /// @return returns the current system_timer counter value.
  static std::chrono::microseconds GetCount()
    5090:	b490      	push	{r4, r7}
    5092:	b082      	sub	sp, #8
    5094:	af00      	add	r7, sp, #0
    5096:	6078      	str	r0, [r7, #4]
  {
    return counter;
    5098:	687a      	ldr	r2, [r7, #4]
    509a:	4b05      	ldr	r3, [pc, #20]	; (50b0 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    509c:	e9d3 3400 	ldrd	r3, r4, [r3]
    50a0:	e9c2 3400 	strd	r3, r4, [r2]
  }
    50a4:	6878      	ldr	r0, [r7, #4]
    50a6:	3708      	adds	r7, #8
    50a8:	46bd      	mov	sp, r7
    50aa:	bc90      	pop	{r4, r7}
    50ac:	4770      	bx	lr
    50ae:	bf00      	nop
    50b0:	100003c0 	.word	0x100003c0

000050b4 <sjsu::cortex::SystemTimer::Initialize() const>:
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
  {
  }

  void Initialize() const override {}
    50b4:	b480      	push	{r7}
    50b6:	b083      	sub	sp, #12
    50b8:	af00      	add	r7, sp, #0
    50ba:	6078      	str	r0, [r7, #4]
    50bc:	bf00      	nop
    50be:	370c      	adds	r7, #12
    50c0:	46bd      	mov	sp, r7
    50c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c6:	4770      	bx	lr

000050c8 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    50c8:	b480      	push	{r7}
    50ca:	b083      	sub	sp, #12
    50cc:	af00      	add	r7, sp, #0
    50ce:	6078      	str	r0, [r7, #4]
    50d0:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    50d2:	4a04      	ldr	r2, [pc, #16]	; (50e4 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    50d4:	683b      	ldr	r3, [r7, #0]
    50d6:	6013      	str	r3, [r2, #0]
  }
    50d8:	bf00      	nop
    50da:	370c      	adds	r7, #12
    50dc:	46bd      	mov	sp, r7
    50de:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e2:	4770      	bx	lr
    50e4:	100003b8 	.word	0x100003b8

000050e8 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    50e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ea:	b08b      	sub	sp, #44	; 0x2c
    50ec:	af02      	add	r7, sp, #8
    50ee:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    50f0:	2304      	movs	r3, #4
    50f2:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    50f4:	4b1f      	ldr	r3, [pc, #124]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	685b      	ldr	r3, [r3, #4]
    50fa:	2b00      	cmp	r3, #0
    50fc:	bf14      	ite	ne
    50fe:	2301      	movne	r3, #1
    5100:	2300      	moveq	r3, #0
    5102:	b2db      	uxtb	r3, r3
    5104:	2b00      	cmp	r3, #0
    5106:	d030      	beq.n	516a <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    5108:	4b1a      	ldr	r3, [pc, #104]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    510a:	681b      	ldr	r3, [r3, #0]
    510c:	2200      	movs	r2, #0
    510e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    5110:	4b18      	ldr	r3, [pc, #96]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5112:	681b      	ldr	r3, [r3, #0]
    5114:	681a      	ldr	r2, [r3, #0]
    5116:	4b17      	ldr	r3, [pc, #92]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5118:	681b      	ldr	r3, [r3, #0]
    511a:	f042 0202 	orr.w	r2, r2, #2
    511e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    5120:	4b14      	ldr	r3, [pc, #80]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	681a      	ldr	r2, [r3, #0]
    5126:	4b13      	ldr	r3, [pc, #76]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	f042 0201 	orr.w	r2, r2, #1
    512e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    5130:	4b10      	ldr	r3, [pc, #64]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5132:	681b      	ldr	r3, [r3, #0]
    5134:	681a      	ldr	r2, [r3, #0]
    5136:	4b0f      	ldr	r3, [pc, #60]	; (5174 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	f042 0204 	orr.w	r2, r2, #4
    513e:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	689e      	ldr	r6, [r3, #8]
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    5148:	681b      	ldr	r3, [r3, #0]
    514a:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    514c:	4b0a      	ldr	r3, [pc, #40]	; (5178 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    514e:	f107 040c 	add.w	r4, r7, #12
    5152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5158:	69bb      	ldr	r3, [r7, #24]
    515a:	9300      	str	r3, [sp, #0]
    515c:	f107 030c 	add.w	r3, r7, #12
    5160:	cb0e      	ldmia	r3, {r1, r2, r3}
    5162:	4630      	mov	r0, r6
    5164:	47a8      	blx	r5
      status = Status::kSuccess;
    5166:	2300      	movs	r3, #0
    5168:	61fb      	str	r3, [r7, #28]
    }

    return status;
    516a:	69fb      	ldr	r3, [r7, #28]
  }
    516c:	4618      	mov	r0, r3
    516e:	3724      	adds	r7, #36	; 0x24
    5170:	46bd      	mov	sp, r7
    5172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5174:	10000074 	.word	0x10000074
    5178:	00008e34 	.word	0x00008e34

0000517c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    517c:	b580      	push	{r7, lr}
    517e:	b084      	sub	sp, #16
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
    5184:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    5186:	687b      	ldr	r3, [r7, #4]
    5188:	4618      	mov	r0, r3
    518a:	f7fb fd4d 	bl	c28 <units::linear_scale<float>::operator()() const>
    518e:	eeb0 7a40 	vmov.f32	s14, s0
    5192:	683b      	ldr	r3, [r7, #0]
    5194:	ee07 3a90 	vmov	s15, r3
    5198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    519c:	ee77 7a67 	vsub.f32	s15, s14, s15
    51a0:	f107 030c 	add.w	r3, r7, #12
    51a4:	eeb0 0a67 	vmov.f32	s0, s15
    51a8:	4618      	mov	r0, r3
    51aa:	f7fb fd78 	bl	c9e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    51ae:	68fb      	ldr	r3, [r7, #12]
	}
    51b0:	4618      	mov	r0, r3
    51b2:	3710      	adds	r7, #16
    51b4:	46bd      	mov	sp, r7
    51b6:	bd80      	pop	{r7, pc}

000051b8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    51b8:	b580      	push	{r7, lr}
    51ba:	b082      	sub	sp, #8
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    51c0:	6878      	ldr	r0, [r7, #4]
    51c2:	f7fc ffa3 	bl	210c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    51c6:	4603      	mov	r3, r0
	}
    51c8:	4618      	mov	r0, r3
    51ca:	3708      	adds	r7, #8
    51cc:	46bd      	mov	sp, r7
    51ce:	bd80      	pop	{r7, pc}

000051d0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    51d0:	b590      	push	{r4, r7, lr}
    51d2:	b089      	sub	sp, #36	; 0x24
    51d4:	af00      	add	r7, sp, #0
    51d6:	6078      	str	r0, [r7, #4]
    51d8:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    51da:	f04f 0001 	mov.w	r0, #1
    51de:	f04f 0100 	mov.w	r1, #0
    51e2:	f7ff fdb9 	bl	4d58 <units::literals::operator"" _Hz(unsigned long long)>
    51e6:	4603      	mov	r3, r0
    51e8:	60fb      	str	r3, [r7, #12]
    51ea:	f107 020c 	add.w	r2, r7, #12
    51ee:	463b      	mov	r3, r7
    51f0:	4611      	mov	r1, r2
    51f2:	4618      	mov	r0, r3
    51f4:	f7ff fde6 	bl	4dc4 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    51f8:	4603      	mov	r3, r0
    51fa:	2b00      	cmp	r3, #0
    51fc:	d002      	beq.n	5204 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    51fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5202:	e041      	b.n	5288 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	685a      	ldr	r2, [r3, #4]
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	685b      	ldr	r3, [r3, #4]
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	330c      	adds	r3, #12
    5210:	681b      	ldr	r3, [r3, #0]
    5212:	4610      	mov	r0, r2
    5214:	4798      	blx	r3
    5216:	4603      	mov	r3, r0
    5218:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    521a:	463a      	mov	r2, r7
    521c:	f107 0308 	add.w	r3, r7, #8
    5220:	4611      	mov	r1, r2
    5222:	4618      	mov	r0, r3
    5224:	f7fc fb32 	bl	188c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5228:	4603      	mov	r3, r0
    522a:	617b      	str	r3, [r7, #20]
    522c:	f107 0314 	add.w	r3, r7, #20
    5230:	2101      	movs	r1, #1
    5232:	4618      	mov	r0, r3
    5234:	f7ff ffa2 	bl	517c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    5238:	4603      	mov	r3, r0
    523a:	613b      	str	r3, [r7, #16]
    523c:	f107 0310 	add.w	r3, r7, #16
    5240:	4618      	mov	r0, r3
    5242:	f7ff ffb9 	bl	51b8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5246:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    5248:	f107 0308 	add.w	r3, r7, #8
    524c:	4618      	mov	r0, r3
    524e:	f7fc f819 	bl	1284 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5252:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    5254:	463b      	mov	r3, r7
    5256:	4618      	mov	r0, r3
    5258:	f7fc f814 	bl	1284 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    525c:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    525e:	fbb4 f2f3 	udiv	r2, r4, r3
    5262:	fb03 f302 	mul.w	r3, r3, r2
    5266:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    5268:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    526a:	69fb      	ldr	r3, [r7, #28]
    526c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    5270:	d305      	bcc.n	527e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    5272:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5276:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    5278:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    527c:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    527e:	4b04      	ldr	r3, [pc, #16]	; (5290 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    5280:	681b      	ldr	r3, [r3, #0]
    5282:	69fa      	ldr	r2, [r7, #28]
    5284:	605a      	str	r2, [r3, #4]
    return remainder;
    5286:	69bb      	ldr	r3, [r7, #24]
  }
    5288:	4618      	mov	r0, r3
    528a:	3724      	adds	r7, #36	; 0x24
    528c:	46bd      	mov	sp, r7
    528e:	bd90      	pop	{r4, r7, pc}
    5290:	10000074 	.word	0x10000074

00005294 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5294:	b580      	push	{r7, lr}
    5296:	b082      	sub	sp, #8
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]
    529c:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    529e:	683a      	ldr	r2, [r7, #0]
    52a0:	6879      	ldr	r1, [r7, #4]
    52a2:	4804      	ldr	r0, [pc, #16]	; (52b4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    52a4:	f7fc f9d2 	bl	164c <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    52a8:	683b      	ldr	r3, [r7, #0]
}
    52aa:	4618      	mov	r0, r3
    52ac:	3708      	adds	r7, #8
    52ae:	46bd      	mov	sp, r7
    52b0:	bd80      	pop	{r7, pc}
    52b2:	bf00      	nop
    52b4:	100003cc 	.word	0x100003cc

000052b8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    52b8:	b590      	push	{r4, r7, lr}
    52ba:	b087      	sub	sp, #28
    52bc:	af02      	add	r7, sp, #8
    52be:	6078      	str	r0, [r7, #4]
    52c0:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    52c2:	f107 0308 	add.w	r3, r7, #8
    52c6:	4618      	mov	r0, r3
    52c8:	f7fc fe4c 	bl	1f64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    52cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    52d0:	e9cd 3400 	strd	r3, r4, [sp]
    52d4:	683a      	ldr	r2, [r7, #0]
    52d6:	6879      	ldr	r1, [r7, #4]
    52d8:	4803      	ldr	r0, [pc, #12]	; (52e8 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    52da:	f7fc fa09 	bl	16f0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    52de:	683b      	ldr	r3, [r7, #0]
}
    52e0:	4618      	mov	r0, r3
    52e2:	3714      	adds	r7, #20
    52e4:	46bd      	mov	sp, r7
    52e6:	bd90      	pop	{r4, r7, pc}
    52e8:	100003cc 	.word	0x100003cc

000052ec <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    52ec:	b580      	push	{r7, lr}
    52ee:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    52f0:	4802      	ldr	r0, [pc, #8]	; (52fc <ThreadRuntimeCounter+0x10>)
    52f2:	f7ff fd0d 	bl	4d10 <sjsu::cortex::DwtCounter::GetCount()>
    52f6:	4603      	mov	r3, r0
}
    52f8:	4618      	mov	r0, r3
    52fa:	bd80      	pop	{r7, pc}
    52fc:	100003c8 	.word	0x100003c8

00005300 <vPortSetupTimerInterrupt>:
  // definitions.
  extern void ArmHardFaultHandler(void);
  extern void ArmResetHandler(void);

  void vPortSetupTimerInterrupt(void)  // NOLINT
  {
    5300:	b590      	push	{r4, r7, lr}
    5302:	b08b      	sub	sp, #44	; 0x2c
    5304:	af02      	add	r7, sp, #8
    interrupt_controller.Register({
    5306:	4b11      	ldr	r3, [pc, #68]	; (534c <vPortSetupTimerInterrupt+0x4c>)
    5308:	463c      	mov	r4, r7
    530a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    530c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5310:	68fb      	ldr	r3, [r7, #12]
    5312:	9300      	str	r3, [sp, #0]
    5314:	463b      	mov	r3, r7
    5316:	cb0e      	ldmia	r3, {r1, r2, r3}
    5318:	480d      	ldr	r0, [pc, #52]	; (5350 <vPortSetupTimerInterrupt+0x50>)
    531a:	f7ff fdbb 	bl	4e94 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
        .interrupt_request_number  = sjsu::cortex::SVCall_IRQn,
        .interrupt_service_routine = vPortSVCHandler,
    });
    interrupt_controller.Register({
    531e:	4b0d      	ldr	r3, [pc, #52]	; (5354 <vPortSetupTimerInterrupt+0x54>)
    5320:	f107 0410 	add.w	r4, r7, #16
    5324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    532a:	69fb      	ldr	r3, [r7, #28]
    532c:	9300      	str	r3, [sp, #0]
    532e:	f107 0310 	add.w	r3, r7, #16
    5332:	cb0e      	ldmia	r3, {r1, r2, r3}
    5334:	4806      	ldr	r0, [pc, #24]	; (5350 <vPortSetupTimerInterrupt+0x50>)
    5336:	f7ff fdad 	bl	4e94 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>
    });
    // Set the SystemTick frequency to the RTOS tick frequency
    // It is critical that this happens before you set the system_clock,
    // since The system_timer keeps the time that the system_clock uses to
    // delay itself.
    system_timer.SetInterrupt(xPortSysTickHandler);
    533a:	4907      	ldr	r1, [pc, #28]	; (5358 <vPortSetupTimerInterrupt+0x58>)
    533c:	4807      	ldr	r0, [pc, #28]	; (535c <vPortSetupTimerInterrupt+0x5c>)
    533e:	f7ff fec3 	bl	50c8 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>
  }
    5342:	bf00      	nop
    5344:	3724      	adds	r7, #36	; 0x24
    5346:	46bd      	mov	sp, r7
    5348:	bd90      	pop	{r4, r7, pc}
    534a:	bf00      	nop
    534c:	00009130 	.word	0x00009130
    5350:	10000088 	.word	0x10000088
    5354:	00009140 	.word	0x00009140
    5358:	00005779 	.word	0x00005779
    535c:	1000007c 	.word	0x1000007c

00005360 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5360:	b580      	push	{r7, lr}
    5362:	b082      	sub	sp, #8
    5364:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5366:	f7ff fce3 	bl	4d30 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    536a:	4b1e      	ldr	r3, [pc, #120]	; (53e4 <sjsu::InitializePlatform()+0x84>)
    536c:	6819      	ldr	r1, [r3, #0]
    536e:	481e      	ldr	r0, [pc, #120]	; (53e8 <sjsu::InitializePlatform()+0x88>)
    5370:	f7fb faa2 	bl	8b8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5374:	23ff      	movs	r3, #255	; 0xff
    5376:	703b      	strb	r3, [r7, #0]
    5378:	463b      	mov	r3, r7
    537a:	2201      	movs	r2, #1
    537c:	4619      	mov	r1, r3
    537e:	481a      	ldr	r0, [pc, #104]	; (53e8 <sjsu::InitializePlatform()+0x88>)
    5380:	f7fb fae8 	bl	954 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5384:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5388:	4818      	ldr	r0, [pc, #96]	; (53ec <sjsu::InitializePlatform()+0x8c>)
    538a:	f7fc f8b9 	bl	1500 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    538e:	4818      	ldr	r0, [pc, #96]	; (53f0 <sjsu::InitializePlatform()+0x90>)
    5390:	f001 f8d0 	bl	6534 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5394:	4817      	ldr	r0, [pc, #92]	; (53f4 <sjsu::InitializePlatform()+0x94>)
    5396:	f001 f8dd 	bl	6554 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    539a:	4b17      	ldr	r3, [pc, #92]	; (53f8 <sjsu::InitializePlatform()+0x98>)
    539c:	6819      	ldr	r1, [r3, #0]
    539e:	4817      	ldr	r0, [pc, #92]	; (53fc <sjsu::InitializePlatform()+0x9c>)
    53a0:	f7ff ff16 	bl	51d0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    53a4:	4815      	ldr	r0, [pc, #84]	; (53fc <sjsu::InitializePlatform()+0x9c>)
    53a6:	f7ff fe9f 	bl	50e8 <sjsu::cortex::SystemTimer::StartTimer() const>
    53aa:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    53ac:	687b      	ldr	r3, [r7, #4]
    53ae:	2b00      	cmp	r3, #0
    53b0:	d00d      	beq.n	53ce <sjsu::InitializePlatform()+0x6e>
    53b2:	23d6      	movs	r3, #214	; 0xd6
    53b4:	4a12      	ldr	r2, [pc, #72]	; (5400 <sjsu::InitializePlatform()+0xa0>)
    53b6:	4913      	ldr	r1, [pc, #76]	; (5404 <sjsu::InitializePlatform()+0xa4>)
    53b8:	4813      	ldr	r0, [pc, #76]	; (5408 <sjsu::InitializePlatform()+0xa8>)
    53ba:	f7ff fb8f 	bl	4adc <printf>
    53be:	4813      	ldr	r0, [pc, #76]	; (540c <sjsu::InitializePlatform()+0xac>)
    53c0:	f7fe fa48 	bl	3854 <puts>
    53c4:	2100      	movs	r1, #0
    53c6:	2001      	movs	r0, #1
    53c8:	f7fb f8da 	bl	580 <sjsu::debug::PrintBacktrace(bool, void*)>
    53cc:	e7fe      	b.n	53cc <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    53ce:	4810      	ldr	r0, [pc, #64]	; (5410 <sjsu::InitializePlatform()+0xb0>)
    53d0:	f7ff fc7c 	bl	4ccc <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    53d4:	480f      	ldr	r0, [pc, #60]	; (5414 <sjsu::InitializePlatform()+0xb4>)
    53d6:	f7ff fd13 	bl	4e00 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    53da:	bf00      	nop
    53dc:	3708      	adds	r7, #8
    53de:	46bd      	mov	sp, r7
    53e0:	bd80      	pop	{r7, pc}
    53e2:	bf00      	nop
    53e4:	00009228 	.word	0x00009228
    53e8:	10000078 	.word	0x10000078
    53ec:	100003cc 	.word	0x100003cc
    53f0:	00005295 	.word	0x00005295
    53f4:	000052b9 	.word	0x000052b9
    53f8:	0000922c 	.word	0x0000922c
    53fc:	1000007c 	.word	0x1000007c
    5400:	0000928c 	.word	0x0000928c
    5404:	00009258 	.word	0x00009258
    5408:	00009150 	.word	0x00009150
    540c:	00008ee4 	.word	0x00008ee4
    5410:	100003c8 	.word	0x100003c8
    5414:	00005091 	.word	0x00005091

00005418 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    5418:	b5f0      	push	{r4, r5, r6, r7, lr}
    541a:	b083      	sub	sp, #12
    541c:	af00      	add	r7, sp, #0
    541e:	6078      	str	r0, [r7, #4]
    5420:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    5422:	6838      	ldr	r0, [r7, #0]
    5424:	f7fc fc1e 	bl	1c64 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    5428:	460a      	mov	r2, r1
    542a:	4601      	mov	r1, r0
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	e9d3 5600 	ldrd	r5, r6, [r3]
    5432:	186b      	adds	r3, r5, r1
    5434:	eb46 0402 	adc.w	r4, r6, r2
    5438:	687a      	ldr	r2, [r7, #4]
    543a:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    543e:	687b      	ldr	r3, [r7, #4]
	}
    5440:	4618      	mov	r0, r3
    5442:	370c      	adds	r7, #12
    5444:	46bd      	mov	sp, r7
    5446:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005448 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    5448:	b580      	push	{r7, lr}
    544a:	b082      	sub	sp, #8
    544c:	af00      	add	r7, sp, #0
    544e:	6078      	str	r0, [r7, #4]
    5450:	6039      	str	r1, [r7, #0]
    5452:	687b      	ldr	r3, [r7, #4]
    5454:	2b01      	cmp	r3, #1
    5456:	d155      	bne.n	5504 <__static_initialization_and_destruction_0(int, int)+0xbc>
    5458:	683b      	ldr	r3, [r7, #0]
    545a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    545e:	4293      	cmp	r3, r2
    5460:	d150      	bne.n	5504 <__static_initialization_and_destruction_0(int, int)+0xbc>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    5462:	4b2a      	ldr	r3, [pc, #168]	; (550c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	f003 0301 	and.w	r3, r3, #1
    546a:	2b00      	cmp	r3, #0
    546c:	d106      	bne.n	547c <__static_initialization_and_destruction_0(int, int)+0x34>
    546e:	4b27      	ldr	r3, [pc, #156]	; (550c <__static_initialization_and_destruction_0(int, int)+0xc4>)
    5470:	2201      	movs	r2, #1
    5472:	601a      	str	r2, [r3, #0]
    5474:	4b26      	ldr	r3, [pc, #152]	; (5510 <__static_initialization_and_destruction_0(int, int)+0xc8>)
    5476:	4618      	mov	r0, r3
    5478:	f7fc fbba 	bl	1bf0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    547c:	4b25      	ldr	r3, [pc, #148]	; (5514 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	f003 0301 	and.w	r3, r3, #1
    5484:	2b00      	cmp	r3, #0
    5486:	d105      	bne.n	5494 <__static_initialization_and_destruction_0(int, int)+0x4c>
    5488:	4b22      	ldr	r3, [pc, #136]	; (5514 <__static_initialization_and_destruction_0(int, int)+0xcc>)
    548a:	2201      	movs	r2, #1
    548c:	601a      	str	r2, [r3, #0]
    548e:	4a22      	ldr	r2, [pc, #136]	; (5518 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    5490:	4b22      	ldr	r3, [pc, #136]	; (551c <__static_initialization_and_destruction_0(int, int)+0xd4>)
    5492:	601a      	str	r2, [r3, #0]
    5494:	4b22      	ldr	r3, [pc, #136]	; (5520 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	f003 0301 	and.w	r3, r3, #1
    549c:	2b00      	cmp	r3, #0
    549e:	d105      	bne.n	54ac <__static_initialization_and_destruction_0(int, int)+0x64>
    54a0:	4b1f      	ldr	r3, [pc, #124]	; (5520 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    54a2:	2201      	movs	r2, #1
    54a4:	601a      	str	r2, [r3, #0]
    54a6:	4a1f      	ldr	r2, [pc, #124]	; (5524 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    54a8:	4b1f      	ldr	r3, [pc, #124]	; (5528 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    54aa:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    54ac:	4b1f      	ldr	r3, [pc, #124]	; (552c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	f003 0301 	and.w	r3, r3, #1
    54b4:	2b00      	cmp	r3, #0
    54b6:	d105      	bne.n	54c4 <__static_initialization_and_destruction_0(int, int)+0x7c>
    54b8:	4b1c      	ldr	r3, [pc, #112]	; (552c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    54ba:	2201      	movs	r2, #1
    54bc:	601a      	str	r2, [r3, #0]
    };
    54be:	4a1c      	ldr	r2, [pc, #112]	; (5530 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    54c0:	4b1c      	ldr	r3, [pc, #112]	; (5534 <__static_initialization_and_destruction_0(int, int)+0xec>)
    54c2:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    54c4:	4b1c      	ldr	r3, [pc, #112]	; (5538 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	f003 0301 	and.w	r3, r3, #1
    54cc:	2b00      	cmp	r3, #0
    54ce:	d105      	bne.n	54dc <__static_initialization_and_destruction_0(int, int)+0x94>
    54d0:	4b19      	ldr	r3, [pc, #100]	; (5538 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    54d2:	2201      	movs	r2, #1
    54d4:	601a      	str	r2, [r3, #0]
    };
    54d6:	4a19      	ldr	r2, [pc, #100]	; (553c <__static_initialization_and_destruction_0(int, int)+0xf4>)
    54d8:	4b19      	ldr	r3, [pc, #100]	; (5540 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    54da:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    54dc:	4b19      	ldr	r3, [pc, #100]	; (5544 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	f003 0301 	and.w	r3, r3, #1
    54e4:	2b00      	cmp	r3, #0
    54e6:	d105      	bne.n	54f4 <__static_initialization_and_destruction_0(int, int)+0xac>
    54e8:	4b16      	ldr	r3, [pc, #88]	; (5544 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    54ea:	2201      	movs	r2, #1
    54ec:	601a      	str	r2, [r3, #0]
    };
    54ee:	4a16      	ldr	r2, [pc, #88]	; (5548 <__static_initialization_and_destruction_0(int, int)+0x100>)
    54f0:	4b16      	ldr	r3, [pc, #88]	; (554c <__static_initialization_and_destruction_0(int, int)+0x104>)
    54f2:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    54f4:	f7fb fda6 	bl	1044 <sjsu::lpc40xx::DefaultSystemController()>
    54f8:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    54fa:	461a      	mov	r2, r3
    54fc:	4914      	ldr	r1, [pc, #80]	; (5550 <__static_initialization_and_destruction_0(int, int)+0x108>)
    54fe:	4815      	ldr	r0, [pc, #84]	; (5554 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5500:	f7fb ffe4 	bl	14cc <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
}  // namespace sjsu
    5504:	bf00      	nop
    5506:	3708      	adds	r7, #8
    5508:	46bd      	mov	sp, r7
    550a:	bd80      	pop	{r7, pc}
    550c:	10000290 	.word	0x10000290
    5510:	1000012c 	.word	0x1000012c
    5514:	1000027c 	.word	0x1000027c
    5518:	400fc000 	.word	0x400fc000
    551c:	10000124 	.word	0x10000124
    5520:	10000278 	.word	0x10000278
    5524:	4002c000 	.word	0x4002c000
    5528:	10000120 	.word	0x10000120
    552c:	10000280 	.word	0x10000280
    5530:	40098000 	.word	0x40098000
    5534:	1000000c 	.word	0x1000000c
    5538:	10000284 	.word	0x10000284
    553c:	4009c000 	.word	0x4009c000
    5540:	10000020 	.word	0x10000020
    5544:	10000288 	.word	0x10000288
    5548:	400a4000 	.word	0x400a4000
    554c:	10000034 	.word	0x10000034
    5550:	00009244 	.word	0x00009244
    5554:	100003cc 	.word	0x100003cc

00005558 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    5558:	b580      	push	{r7, lr}
    555a:	af00      	add	r7, sp, #0
    555c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5560:	2001      	movs	r0, #1
    5562:	f7ff ff71 	bl	5448 <__static_initialization_and_destruction_0(int, int)>
    5566:	bd80      	pop	{r7, pc}

00005568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    5568:	b480      	push	{r7}
    556a:	b085      	sub	sp, #20
    556c:	af00      	add	r7, sp, #0
    556e:	60f8      	str	r0, [r7, #12]
    5570:	60b9      	str	r1, [r7, #8]
    5572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    5574:	68fb      	ldr	r3, [r7, #12]
    5576:	3b04      	subs	r3, #4
    5578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    557a:	68fb      	ldr	r3, [r7, #12]
    557c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5582:	68fb      	ldr	r3, [r7, #12]
    5584:	3b04      	subs	r3, #4
    5586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    5588:	68bb      	ldr	r3, [r7, #8]
    558a:	f023 0201 	bic.w	r2, r3, #1
    558e:	68fb      	ldr	r3, [r7, #12]
    5590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	3b04      	subs	r3, #4
    5596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    5598:	4a0c      	ldr	r2, [pc, #48]	; (55cc <pxPortInitialiseStack+0x64>)
    559a:	68fb      	ldr	r3, [r7, #12]
    559c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    559e:	68fb      	ldr	r3, [r7, #12]
    55a0:	3b14      	subs	r3, #20
    55a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    55a4:	687a      	ldr	r2, [r7, #4]
    55a6:	68fb      	ldr	r3, [r7, #12]
    55a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    55aa:	68fb      	ldr	r3, [r7, #12]
    55ac:	3b04      	subs	r3, #4
    55ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    55b0:	68fb      	ldr	r3, [r7, #12]
    55b2:	f06f 0202 	mvn.w	r2, #2
    55b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    55b8:	68fb      	ldr	r3, [r7, #12]
    55ba:	3b20      	subs	r3, #32
    55bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    55be:	68fb      	ldr	r3, [r7, #12]
}
    55c0:	4618      	mov	r0, r3
    55c2:	3714      	adds	r7, #20
    55c4:	46bd      	mov	sp, r7
    55c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ca:	4770      	bx	lr
    55cc:	000055d1 	.word	0x000055d1

000055d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    55d0:	b480      	push	{r7}
    55d2:	b083      	sub	sp, #12
    55d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    55d6:	2300      	movs	r3, #0
    55d8:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    55da:	f04f 0328 	mov.w	r3, #40	; 0x28
    55de:	f383 8811 	msr	BASEPRI, r3
    55e2:	f3bf 8f6f 	isb	sy
    55e6:	f3bf 8f4f 	dsb	sy
    55ea:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    55ec:	bf00      	nop
    55ee:	683b      	ldr	r3, [r7, #0]
    55f0:	2b00      	cmp	r3, #0
    55f2:	d0fc      	beq.n	55ee <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    55f4:	bf00      	nop
    55f6:	370c      	adds	r7, #12
    55f8:	46bd      	mov	sp, r7
    55fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fe:	4770      	bx	lr

00005600 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5600:	4b07      	ldr	r3, [pc, #28]	; (5620 <pxCurrentTCBConst2>)
    5602:	6819      	ldr	r1, [r3, #0]
    5604:	6808      	ldr	r0, [r1, #0]
    5606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    560a:	f380 8809 	msr	PSP, r0
    560e:	f3bf 8f6f 	isb	sy
    5612:	f04f 0000 	mov.w	r0, #0
    5616:	f380 8811 	msr	BASEPRI, r0
    561a:	4770      	bx	lr
    561c:	f3af 8000 	nop.w

00005620 <pxCurrentTCBConst2>:
    5620:	100002a8 	.word	0x100002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    5624:	bf00      	nop
    5626:	bf00      	nop

00005628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    5628:	4808      	ldr	r0, [pc, #32]	; (564c <prvPortStartFirstTask+0x24>)
    562a:	6800      	ldr	r0, [r0, #0]
    562c:	6800      	ldr	r0, [r0, #0]
    562e:	f380 8808 	msr	MSP, r0
    5632:	f04f 0000 	mov.w	r0, #0
    5636:	f380 8814 	msr	CONTROL, r0
    563a:	b662      	cpsie	i
    563c:	b661      	cpsie	f
    563e:	f3bf 8f4f 	dsb	sy
    5642:	f3bf 8f6f 	isb	sy
    5646:	df00      	svc	0
    5648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    564a:	bf00      	nop
    564c:	e000ed08 	.word	0xe000ed08

00005650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    5650:	b580      	push	{r7, lr}
    5652:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    5654:	4b10      	ldr	r3, [pc, #64]	; (5698 <xPortStartScheduler+0x48>)
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	4a0f      	ldr	r2, [pc, #60]	; (5698 <xPortStartScheduler+0x48>)
    565a:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    565e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    5660:	4b0d      	ldr	r3, [pc, #52]	; (5698 <xPortStartScheduler+0x48>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	4a0c      	ldr	r2, [pc, #48]	; (5698 <xPortStartScheduler+0x48>)
    5666:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
    566a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    566c:	f7ff fe48 	bl	5300 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5670:	4b0a      	ldr	r3, [pc, #40]	; (569c <xPortStartScheduler+0x4c>)
    5672:	2200      	movs	r2, #0
    5674:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    5676:	f000 f89f 	bl	57b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    567a:	4b09      	ldr	r3, [pc, #36]	; (56a0 <xPortStartScheduler+0x50>)
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	4a08      	ldr	r2, [pc, #32]	; (56a0 <xPortStartScheduler+0x50>)
    5680:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5684:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5686:	f7ff ffcf 	bl	5628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    568a:	f7fd fd7d 	bl	3188 <vTaskSwitchContext>
	prvTaskExitError();
    568e:	f7ff ff9f 	bl	55d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    5692:	2300      	movs	r3, #0
}
    5694:	4618      	mov	r0, r3
    5696:	bd80      	pop	{r7, pc}
    5698:	e000ed20 	.word	0xe000ed20
    569c:	1000008c 	.word	0x1000008c
    56a0:	e000ef34 	.word	0xe000ef34

000056a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    56a4:	b480      	push	{r7}
    56a6:	b083      	sub	sp, #12
    56a8:	af00      	add	r7, sp, #0
    56aa:	f04f 0328 	mov.w	r3, #40	; 0x28
    56ae:	f383 8811 	msr	BASEPRI, r3
    56b2:	f3bf 8f6f 	isb	sy
    56b6:	f3bf 8f4f 	dsb	sy
    56ba:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    56bc:	4b05      	ldr	r3, [pc, #20]	; (56d4 <vPortEnterCritical+0x30>)
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	3301      	adds	r3, #1
    56c2:	4a04      	ldr	r2, [pc, #16]	; (56d4 <vPortEnterCritical+0x30>)
    56c4:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    56c6:	bf00      	nop
    56c8:	370c      	adds	r7, #12
    56ca:	46bd      	mov	sp, r7
    56cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d0:	4770      	bx	lr
    56d2:	bf00      	nop
    56d4:	1000008c 	.word	0x1000008c

000056d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    56d8:	b480      	push	{r7}
    56da:	b083      	sub	sp, #12
    56dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    56de:	4b0a      	ldr	r3, [pc, #40]	; (5708 <vPortExitCritical+0x30>)
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	3b01      	subs	r3, #1
    56e4:	4a08      	ldr	r2, [pc, #32]	; (5708 <vPortExitCritical+0x30>)
    56e6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    56e8:	4b07      	ldr	r3, [pc, #28]	; (5708 <vPortExitCritical+0x30>)
    56ea:	681b      	ldr	r3, [r3, #0]
    56ec:	2b00      	cmp	r3, #0
    56ee:	d104      	bne.n	56fa <vPortExitCritical+0x22>
    56f0:	2300      	movs	r3, #0
    56f2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    56fa:	bf00      	nop
    56fc:	370c      	adds	r7, #12
    56fe:	46bd      	mov	sp, r7
    5700:	f85d 7b04 	ldr.w	r7, [sp], #4
    5704:	4770      	bx	lr
    5706:	bf00      	nop
    5708:	1000008c 	.word	0x1000008c
    570c:	ffffffff 	.word	0xffffffff

00005710 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5710:	f3ef 8009 	mrs	r0, PSP
    5714:	f3bf 8f6f 	isb	sy
    5718:	4b15      	ldr	r3, [pc, #84]	; (5770 <pxCurrentTCBConst>)
    571a:	681a      	ldr	r2, [r3, #0]
    571c:	f01e 0f10 	tst.w	lr, #16
    5720:	bf08      	it	eq
    5722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    5726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    572a:	6010      	str	r0, [r2, #0]
    572c:	e92d 0009 	stmdb	sp!, {r0, r3}
    5730:	f04f 0028 	mov.w	r0, #40	; 0x28
    5734:	f380 8811 	msr	BASEPRI, r0
    5738:	f3bf 8f4f 	dsb	sy
    573c:	f3bf 8f6f 	isb	sy
    5740:	f7fd fd22 	bl	3188 <vTaskSwitchContext>
    5744:	f04f 0000 	mov.w	r0, #0
    5748:	f380 8811 	msr	BASEPRI, r0
    574c:	bc09      	pop	{r0, r3}
    574e:	6819      	ldr	r1, [r3, #0]
    5750:	6808      	ldr	r0, [r1, #0]
    5752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5756:	f01e 0f10 	tst.w	lr, #16
    575a:	bf08      	it	eq
    575c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    5760:	f380 8809 	msr	PSP, r0
    5764:	f3bf 8f6f 	isb	sy
    5768:	4770      	bx	lr
    576a:	bf00      	nop
    576c:	f3af 8000 	nop.w

00005770 <pxCurrentTCBConst>:
    5770:	100002a8 	.word	0x100002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    5774:	bf00      	nop
    5776:	bf00      	nop

00005778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5778:	b580      	push	{r7, lr}
    577a:	b082      	sub	sp, #8
    577c:	af00      	add	r7, sp, #0
	__asm volatile
    577e:	f04f 0328 	mov.w	r3, #40	; 0x28
    5782:	f383 8811 	msr	BASEPRI, r3
    5786:	f3bf 8f6f 	isb	sy
    578a:	f3bf 8f4f 	dsb	sy
    578e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    5790:	f7fd fc4e 	bl	3030 <xTaskIncrementTick>
    5794:	4603      	mov	r3, r0
    5796:	2b00      	cmp	r3, #0
    5798:	d003      	beq.n	57a2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    579a:	4b06      	ldr	r3, [pc, #24]	; (57b4 <xPortSysTickHandler+0x3c>)
    579c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    57a0:	601a      	str	r2, [r3, #0]
    57a2:	2300      	movs	r3, #0
    57a4:	603b      	str	r3, [r7, #0]
	__asm volatile
    57a6:	683b      	ldr	r3, [r7, #0]
    57a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    57ac:	bf00      	nop
    57ae:	3708      	adds	r7, #8
    57b0:	46bd      	mov	sp, r7
    57b2:	bd80      	pop	{r7, pc}
    57b4:	e000ed04 	.word	0xe000ed04

000057b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    57b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 57c8 <vPortEnableVFP+0x10>
    57bc:	6801      	ldr	r1, [r0, #0]
    57be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    57c2:	6001      	str	r1, [r0, #0]
    57c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    57c6:	bf00      	nop
    57c8:	e000ed88 	.word	0xe000ed88

000057cc <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    57cc:	b480      	push	{r7}
    57ce:	b083      	sub	sp, #12
    57d0:	af00      	add	r7, sp, #0
    57d2:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    57d4:	2350      	movs	r3, #80	; 0x50
    57d6:	4618      	mov	r0, r3
    57d8:	370c      	adds	r7, #12
    57da:	46bd      	mov	sp, r7
    57dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e0:	4770      	bx	lr
    57e2:	Address 0x00000000000057e2 is out of bounds.


000057e4 <vApplicationGetIdleTaskMemory>:
static StackType_t idle_task_stack[configMINIMAL_STACK_SIZE];
extern "C" void vApplicationGetIdleTaskMemory(  // NOLINT
    StaticTask_t ** ppx_idle_task_tcb_buffer,
    StackType_t ** ppx_idle_task_stack_buffer,
    uint32_t * pul_idle_task_stack_size)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b084      	sub	sp, #16
    57e8:	af00      	add	r7, sp, #0
    57ea:	60f8      	str	r0, [r7, #12]
    57ec:	60b9      	str	r1, [r7, #8]
    57ee:	607a      	str	r2, [r7, #4]
  *ppx_idle_task_tcb_buffer   = &idle_task_tcb;
    57f0:	68fb      	ldr	r3, [r7, #12]
    57f2:	4a07      	ldr	r2, [pc, #28]	; (5810 <vApplicationGetIdleTaskMemory+0x2c>)
    57f4:	601a      	str	r2, [r3, #0]
  *ppx_idle_task_stack_buffer = idle_task_stack;
    57f6:	68bb      	ldr	r3, [r7, #8]
    57f8:	4a06      	ldr	r2, [pc, #24]	; (5814 <vApplicationGetIdleTaskMemory+0x30>)
    57fa:	601a      	str	r2, [r3, #0]
  *pul_idle_task_stack_size   = std::size(idle_task_stack);
    57fc:	4805      	ldr	r0, [pc, #20]	; (5814 <vApplicationGetIdleTaskMemory+0x30>)
    57fe:	f7ff ffe5 	bl	57cc <unsigned int std::size<unsigned long, 80u>(unsigned long const (&) [80u])>
    5802:	4602      	mov	r2, r0
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	601a      	str	r2, [r3, #0]
}
    5808:	bf00      	nop
    580a:	3710      	adds	r7, #16
    580c:	46bd      	mov	sp, r7
    580e:	bd80      	pop	{r7, pc}
    5810:	100003d8 	.word	0x100003d8
    5814:	10000438 	.word	0x10000438

00005818 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>:
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
    5818:	b480      	push	{r7}
    581a:	b083      	sub	sp, #12
    581c:	af00      	add	r7, sp, #0
    581e:	6078      	str	r0, [r7, #4]
    { return _Nm; }
    5820:	f44f 7300 	mov.w	r3, #512	; 0x200
    5824:	4618      	mov	r0, r3
    5826:	370c      	adds	r7, #12
    5828:	46bd      	mov	sp, r7
    582a:	f85d 7b04 	ldr.w	r7, [sp], #4
    582e:	4770      	bx	lr

00005830 <vApplicationGetTimerTaskMemory>:
static StackType_t timer_task_stack[configTIMER_TASK_STACK_DEPTH];
extern "C" void vApplicationGetTimerTaskMemory( // NOLINT
    StaticTask_t ** ppx_timer_task_tcb_buffer,
    StackType_t ** ppx_timer_task_stack_buffer,
    uint32_t * pul_timer_task_stack_size)
{
    5830:	b580      	push	{r7, lr}
    5832:	b084      	sub	sp, #16
    5834:	af00      	add	r7, sp, #0
    5836:	60f8      	str	r0, [r7, #12]
    5838:	60b9      	str	r1, [r7, #8]
    583a:	607a      	str	r2, [r7, #4]
    *ppx_timer_task_tcb_buffer = &timer_task_tcb;
    583c:	68fb      	ldr	r3, [r7, #12]
    583e:	4a07      	ldr	r2, [pc, #28]	; (585c <vApplicationGetTimerTaskMemory+0x2c>)
    5840:	601a      	str	r2, [r3, #0]
    *ppx_timer_task_stack_buffer = timer_task_stack;
    5842:	68bb      	ldr	r3, [r7, #8]
    5844:	4a06      	ldr	r2, [pc, #24]	; (5860 <vApplicationGetTimerTaskMemory+0x30>)
    5846:	601a      	str	r2, [r3, #0]
    *pul_timer_task_stack_size = std::size(timer_task_stack);
    5848:	4805      	ldr	r0, [pc, #20]	; (5860 <vApplicationGetTimerTaskMemory+0x30>)
    584a:	f7ff ffe5 	bl	5818 <unsigned int std::size<unsigned long, 512u>(unsigned long const (&) [512u])>
    584e:	4602      	mov	r2, r0
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	601a      	str	r2, [r3, #0]
}
    5854:	bf00      	nop
    5856:	3710      	adds	r7, #16
    5858:	46bd      	mov	sp, r7
    585a:	bd80      	pop	{r7, pc}
    585c:	10000578 	.word	0x10000578
    5860:	100005d8 	.word	0x100005d8

00005864 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    5864:	b580      	push	{r7, lr}
    5866:	b088      	sub	sp, #32
    5868:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    586a:	2300      	movs	r3, #0
    586c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    586e:	f000 fa5b 	bl	5d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    5872:	4b15      	ldr	r3, [pc, #84]	; (58c8 <xTimerCreateTimerTask+0x64>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	2b00      	cmp	r3, #0
    5878:	d020      	beq.n	58bc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    587a:	2300      	movs	r3, #0
    587c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    587e:	2300      	movs	r3, #0
    5880:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    5882:	463a      	mov	r2, r7
    5884:	1d39      	adds	r1, r7, #4
    5886:	f107 0308 	add.w	r3, r7, #8
    588a:	4618      	mov	r0, r3
    588c:	f7ff ffd0 	bl	5830 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    5890:	6839      	ldr	r1, [r7, #0]
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	68ba      	ldr	r2, [r7, #8]
    5896:	9202      	str	r2, [sp, #8]
    5898:	9301      	str	r3, [sp, #4]
    589a:	2304      	movs	r3, #4
    589c:	9300      	str	r3, [sp, #0]
    589e:	2300      	movs	r3, #0
    58a0:	460a      	mov	r2, r1
    58a2:	490a      	ldr	r1, [pc, #40]	; (58cc <xTimerCreateTimerTask+0x68>)
    58a4:	480a      	ldr	r0, [pc, #40]	; (58d0 <xTimerCreateTimerTask+0x6c>)
    58a6:	f7fd f93f 	bl	2b28 <xTaskCreateStatic>
    58aa:	4602      	mov	r2, r0
    58ac:	4b09      	ldr	r3, [pc, #36]	; (58d4 <xTimerCreateTimerTask+0x70>)
    58ae:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    58b0:	4b08      	ldr	r3, [pc, #32]	; (58d4 <xTimerCreateTimerTask+0x70>)
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	2b00      	cmp	r3, #0
    58b6:	d001      	beq.n	58bc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
    58b8:	2301      	movs	r3, #1
    58ba:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    58bc:	68fb      	ldr	r3, [r7, #12]
}
    58be:	4618      	mov	r0, r3
    58c0:	3710      	adds	r7, #16
    58c2:	46bd      	mov	sp, r7
    58c4:	bd80      	pop	{r7, pc}
    58c6:	bf00      	nop
    58c8:	10000e08 	.word	0x10000e08
    58cc:	000092ac 	.word	0x000092ac
    58d0:	000059bd 	.word	0x000059bd
    58d4:	10000e0c 	.word	0x10000e0c

000058d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    58d8:	b580      	push	{r7, lr}
    58da:	b088      	sub	sp, #32
    58dc:	af00      	add	r7, sp, #0
    58de:	60f8      	str	r0, [r7, #12]
    58e0:	60b9      	str	r1, [r7, #8]
    58e2:	607a      	str	r2, [r7, #4]
    58e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    58e6:	2300      	movs	r3, #0
    58e8:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    58ea:	4b1a      	ldr	r3, [pc, #104]	; (5954 <xTimerGenericCommand+0x7c>)
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	2b00      	cmp	r3, #0
    58f0:	d02a      	beq.n	5948 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    58f2:	68bb      	ldr	r3, [r7, #8]
    58f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    58fa:	68fb      	ldr	r3, [r7, #12]
    58fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    58fe:	68bb      	ldr	r3, [r7, #8]
    5900:	2b05      	cmp	r3, #5
    5902:	dc18      	bgt.n	5936 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    5904:	f7fd fe4a 	bl	359c <xTaskGetSchedulerState>
    5908:	4603      	mov	r3, r0
    590a:	2b02      	cmp	r3, #2
    590c:	d109      	bne.n	5922 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    590e:	4b11      	ldr	r3, [pc, #68]	; (5954 <xTimerGenericCommand+0x7c>)
    5910:	6818      	ldr	r0, [r3, #0]
    5912:	f107 0110 	add.w	r1, r7, #16
    5916:	2300      	movs	r3, #0
    5918:	6aba      	ldr	r2, [r7, #40]	; 0x28
    591a:	f000 fae1 	bl	5ee0 <xQueueGenericSend>
    591e:	61f8      	str	r0, [r7, #28]
    5920:	e012      	b.n	5948 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    5922:	4b0c      	ldr	r3, [pc, #48]	; (5954 <xTimerGenericCommand+0x7c>)
    5924:	6818      	ldr	r0, [r3, #0]
    5926:	f107 0110 	add.w	r1, r7, #16
    592a:	2300      	movs	r3, #0
    592c:	2200      	movs	r2, #0
    592e:	f000 fad7 	bl	5ee0 <xQueueGenericSend>
    5932:	61f8      	str	r0, [r7, #28]
    5934:	e008      	b.n	5948 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    5936:	4b07      	ldr	r3, [pc, #28]	; (5954 <xTimerGenericCommand+0x7c>)
    5938:	6818      	ldr	r0, [r3, #0]
    593a:	f107 0110 	add.w	r1, r7, #16
    593e:	2300      	movs	r3, #0
    5940:	683a      	ldr	r2, [r7, #0]
    5942:	f000 fb77 	bl	6034 <xQueueGenericSendFromISR>
    5946:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    5948:	69fb      	ldr	r3, [r7, #28]
}
    594a:	4618      	mov	r0, r3
    594c:	3720      	adds	r7, #32
    594e:	46bd      	mov	sp, r7
    5950:	bd80      	pop	{r7, pc}
    5952:	bf00      	nop
    5954:	10000e08 	.word	0x10000e08

00005958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    5958:	b580      	push	{r7, lr}
    595a:	b086      	sub	sp, #24
    595c:	af02      	add	r7, sp, #8
    595e:	6078      	str	r0, [r7, #4]
    5960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    5962:	4b15      	ldr	r3, [pc, #84]	; (59b8 <prvProcessExpiredTimer+0x60>)
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	68db      	ldr	r3, [r3, #12]
    5968:	68db      	ldr	r3, [r3, #12]
    596a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    596c:	68fb      	ldr	r3, [r7, #12]
    596e:	3304      	adds	r3, #4
    5970:	4618      	mov	r0, r3
    5972:	f7fd f8af 	bl	2ad4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5976:	68fb      	ldr	r3, [r7, #12]
    5978:	69db      	ldr	r3, [r3, #28]
    597a:	2b01      	cmp	r3, #1
    597c:	d114      	bne.n	59a8 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    597e:	68fb      	ldr	r3, [r7, #12]
    5980:	699a      	ldr	r2, [r3, #24]
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	18d1      	adds	r1, r2, r3
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	683a      	ldr	r2, [r7, #0]
    598a:	68f8      	ldr	r0, [r7, #12]
    598c:	f000 f8ba 	bl	5b04 <prvInsertTimerInActiveList>
    5990:	4603      	mov	r3, r0
    5992:	2b00      	cmp	r3, #0
    5994:	d008      	beq.n	59a8 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5996:	2300      	movs	r3, #0
    5998:	9300      	str	r3, [sp, #0]
    599a:	2300      	movs	r3, #0
    599c:	687a      	ldr	r2, [r7, #4]
    599e:	2100      	movs	r1, #0
    59a0:	68f8      	ldr	r0, [r7, #12]
    59a2:	f7ff ff99 	bl	58d8 <xTimerGenericCommand>
    59a6:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    59a8:	68fb      	ldr	r3, [r7, #12]
    59aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59ac:	68f8      	ldr	r0, [r7, #12]
    59ae:	4798      	blx	r3
}
    59b0:	bf00      	nop
    59b2:	3710      	adds	r7, #16
    59b4:	46bd      	mov	sp, r7
    59b6:	bd80      	pop	{r7, pc}
    59b8:	10000e00 	.word	0x10000e00

000059bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    59bc:	b580      	push	{r7, lr}
    59be:	b084      	sub	sp, #16
    59c0:	af00      	add	r7, sp, #0
    59c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    59c4:	f107 0308 	add.w	r3, r7, #8
    59c8:	4618      	mov	r0, r3
    59ca:	f000 f857 	bl	5a7c <prvGetNextExpireTime>
    59ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    59d0:	68bb      	ldr	r3, [r7, #8]
    59d2:	4619      	mov	r1, r3
    59d4:	68f8      	ldr	r0, [r7, #12]
    59d6:	f000 f803 	bl	59e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    59da:	f000 f8d5 	bl	5b88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    59de:	e7f1      	b.n	59c4 <prvTimerTask+0x8>

000059e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    59e0:	b580      	push	{r7, lr}
    59e2:	b084      	sub	sp, #16
    59e4:	af00      	add	r7, sp, #0
    59e6:	6078      	str	r0, [r7, #4]
    59e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    59ea:	f7fd fa75 	bl	2ed8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    59ee:	f107 0308 	add.w	r3, r7, #8
    59f2:	4618      	mov	r0, r3
    59f4:	f000 f866 	bl	5ac4 <prvSampleTimeNow>
    59f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    59fa:	68bb      	ldr	r3, [r7, #8]
    59fc:	2b00      	cmp	r3, #0
    59fe:	d130      	bne.n	5a62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5a00:	683b      	ldr	r3, [r7, #0]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d10a      	bne.n	5a1c <prvProcessTimerOrBlockTask+0x3c>
    5a06:	687a      	ldr	r2, [r7, #4]
    5a08:	68fb      	ldr	r3, [r7, #12]
    5a0a:	429a      	cmp	r2, r3
    5a0c:	d806      	bhi.n	5a1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    5a0e:	f7fd fa71 	bl	2ef4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5a12:	68f9      	ldr	r1, [r7, #12]
    5a14:	6878      	ldr	r0, [r7, #4]
    5a16:	f7ff ff9f 	bl	5958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    5a1a:	e024      	b.n	5a66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    5a1c:	683b      	ldr	r3, [r7, #0]
    5a1e:	2b00      	cmp	r3, #0
    5a20:	d008      	beq.n	5a34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5a22:	4b13      	ldr	r3, [pc, #76]	; (5a70 <prvProcessTimerOrBlockTask+0x90>)
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	681b      	ldr	r3, [r3, #0]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	bf0c      	ite	eq
    5a2c:	2301      	moveq	r3, #1
    5a2e:	2300      	movne	r3, #0
    5a30:	b2db      	uxtb	r3, r3
    5a32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5a34:	4b0f      	ldr	r3, [pc, #60]	; (5a74 <prvProcessTimerOrBlockTask+0x94>)
    5a36:	6818      	ldr	r0, [r3, #0]
    5a38:	687a      	ldr	r2, [r7, #4]
    5a3a:	68fb      	ldr	r3, [r7, #12]
    5a3c:	1ad3      	subs	r3, r2, r3
    5a3e:	683a      	ldr	r2, [r7, #0]
    5a40:	4619      	mov	r1, r3
    5a42:	f000 fd2b 	bl	649c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    5a46:	f7fd fa55 	bl	2ef4 <xTaskResumeAll>
    5a4a:	4603      	mov	r3, r0
    5a4c:	2b00      	cmp	r3, #0
    5a4e:	d10a      	bne.n	5a66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    5a50:	4b09      	ldr	r3, [pc, #36]	; (5a78 <prvProcessTimerOrBlockTask+0x98>)
    5a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a56:	601a      	str	r2, [r3, #0]
    5a58:	f3bf 8f4f 	dsb	sy
    5a5c:	f3bf 8f6f 	isb	sy
}
    5a60:	e001      	b.n	5a66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    5a62:	f7fd fa47 	bl	2ef4 <xTaskResumeAll>
}
    5a66:	bf00      	nop
    5a68:	3710      	adds	r7, #16
    5a6a:	46bd      	mov	sp, r7
    5a6c:	bd80      	pop	{r7, pc}
    5a6e:	bf00      	nop
    5a70:	10000e04 	.word	0x10000e04
    5a74:	10000e08 	.word	0x10000e08
    5a78:	e000ed04 	.word	0xe000ed04

00005a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    5a7c:	b480      	push	{r7}
    5a7e:	b085      	sub	sp, #20
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5a84:	4b0e      	ldr	r3, [pc, #56]	; (5ac0 <prvGetNextExpireTime+0x44>)
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	bf0c      	ite	eq
    5a8e:	2301      	moveq	r3, #1
    5a90:	2300      	movne	r3, #0
    5a92:	b2db      	uxtb	r3, r3
    5a94:	461a      	mov	r2, r3
    5a96:	687b      	ldr	r3, [r7, #4]
    5a98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d105      	bne.n	5aae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5aa2:	4b07      	ldr	r3, [pc, #28]	; (5ac0 <prvGetNextExpireTime+0x44>)
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	68db      	ldr	r3, [r3, #12]
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	60fb      	str	r3, [r7, #12]
    5aac:	e001      	b.n	5ab2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    5aae:	2300      	movs	r3, #0
    5ab0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    5ab2:	68fb      	ldr	r3, [r7, #12]
}
    5ab4:	4618      	mov	r0, r3
    5ab6:	3714      	adds	r7, #20
    5ab8:	46bd      	mov	sp, r7
    5aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5abe:	4770      	bx	lr
    5ac0:	10000e00 	.word	0x10000e00

00005ac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	b084      	sub	sp, #16
    5ac8:	af00      	add	r7, sp, #0
    5aca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    5acc:	f7fd faa0 	bl	3010 <xTaskGetTickCount>
    5ad0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    5ad2:	4b0b      	ldr	r3, [pc, #44]	; (5b00 <prvSampleTimeNow+0x3c>)
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	68fa      	ldr	r2, [r7, #12]
    5ad8:	429a      	cmp	r2, r3
    5ada:	d205      	bcs.n	5ae8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    5adc:	f000 f8d0 	bl	5c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    5ae0:	687b      	ldr	r3, [r7, #4]
    5ae2:	2201      	movs	r2, #1
    5ae4:	601a      	str	r2, [r3, #0]
    5ae6:	e002      	b.n	5aee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	2200      	movs	r2, #0
    5aec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    5aee:	4a04      	ldr	r2, [pc, #16]	; (5b00 <prvSampleTimeNow+0x3c>)
    5af0:	68fb      	ldr	r3, [r7, #12]
    5af2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    5af4:	68fb      	ldr	r3, [r7, #12]
}
    5af6:	4618      	mov	r0, r3
    5af8:	3710      	adds	r7, #16
    5afa:	46bd      	mov	sp, r7
    5afc:	bd80      	pop	{r7, pc}
    5afe:	bf00      	nop
    5b00:	10000e10 	.word	0x10000e10

00005b04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b086      	sub	sp, #24
    5b08:	af00      	add	r7, sp, #0
    5b0a:	60f8      	str	r0, [r7, #12]
    5b0c:	60b9      	str	r1, [r7, #8]
    5b0e:	607a      	str	r2, [r7, #4]
    5b10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    5b12:	2300      	movs	r3, #0
    5b14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5b16:	68fb      	ldr	r3, [r7, #12]
    5b18:	68ba      	ldr	r2, [r7, #8]
    5b1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5b1c:	68fb      	ldr	r3, [r7, #12]
    5b1e:	68fa      	ldr	r2, [r7, #12]
    5b20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    5b22:	68ba      	ldr	r2, [r7, #8]
    5b24:	687b      	ldr	r3, [r7, #4]
    5b26:	429a      	cmp	r2, r3
    5b28:	d812      	bhi.n	5b50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5b2a:	687a      	ldr	r2, [r7, #4]
    5b2c:	683b      	ldr	r3, [r7, #0]
    5b2e:	1ad2      	subs	r2, r2, r3
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	699b      	ldr	r3, [r3, #24]
    5b34:	429a      	cmp	r2, r3
    5b36:	d302      	bcc.n	5b3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5b38:	2301      	movs	r3, #1
    5b3a:	617b      	str	r3, [r7, #20]
    5b3c:	e01b      	b.n	5b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5b3e:	4b10      	ldr	r3, [pc, #64]	; (5b80 <prvInsertTimerInActiveList+0x7c>)
    5b40:	681a      	ldr	r2, [r3, #0]
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	3304      	adds	r3, #4
    5b46:	4619      	mov	r1, r3
    5b48:	4610      	mov	r0, r2
    5b4a:	f7fc ff8a 	bl	2a62 <vListInsert>
    5b4e:	e012      	b.n	5b76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5b50:	687a      	ldr	r2, [r7, #4]
    5b52:	683b      	ldr	r3, [r7, #0]
    5b54:	429a      	cmp	r2, r3
    5b56:	d206      	bcs.n	5b66 <prvInsertTimerInActiveList+0x62>
    5b58:	68ba      	ldr	r2, [r7, #8]
    5b5a:	683b      	ldr	r3, [r7, #0]
    5b5c:	429a      	cmp	r2, r3
    5b5e:	d302      	bcc.n	5b66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    5b60:	2301      	movs	r3, #1
    5b62:	617b      	str	r3, [r7, #20]
    5b64:	e007      	b.n	5b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5b66:	4b07      	ldr	r3, [pc, #28]	; (5b84 <prvInsertTimerInActiveList+0x80>)
    5b68:	681a      	ldr	r2, [r3, #0]
    5b6a:	68fb      	ldr	r3, [r7, #12]
    5b6c:	3304      	adds	r3, #4
    5b6e:	4619      	mov	r1, r3
    5b70:	4610      	mov	r0, r2
    5b72:	f7fc ff76 	bl	2a62 <vListInsert>
		}
	}

	return xProcessTimerNow;
    5b76:	697b      	ldr	r3, [r7, #20]
}
    5b78:	4618      	mov	r0, r3
    5b7a:	3718      	adds	r7, #24
    5b7c:	46bd      	mov	sp, r7
    5b7e:	bd80      	pop	{r7, pc}
    5b80:	10000e04 	.word	0x10000e04
    5b84:	10000e00 	.word	0x10000e00

00005b88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b08a      	sub	sp, #40	; 0x28
    5b8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5b8e:	e065      	b.n	5c5c <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    5b90:	68bb      	ldr	r3, [r7, #8]
    5b92:	2b00      	cmp	r3, #0
    5b94:	db61      	blt.n	5c5a <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5b96:	693b      	ldr	r3, [r7, #16]
    5b98:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    5b9a:	69fb      	ldr	r3, [r7, #28]
    5b9c:	695b      	ldr	r3, [r3, #20]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d004      	beq.n	5bac <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5ba2:	69fb      	ldr	r3, [r7, #28]
    5ba4:	3304      	adds	r3, #4
    5ba6:	4618      	mov	r0, r3
    5ba8:	f7fc ff94 	bl	2ad4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5bac:	1d3b      	adds	r3, r7, #4
    5bae:	4618      	mov	r0, r3
    5bb0:	f7ff ff88 	bl	5ac4 <prvSampleTimeNow>
    5bb4:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
    5bb6:	68bb      	ldr	r3, [r7, #8]
    5bb8:	2b09      	cmp	r3, #9
    5bba:	d84f      	bhi.n	5c5c <prvProcessReceivedCommands+0xd4>
    5bbc:	a201      	add	r2, pc, #4	; (adr r2, 5bc4 <prvProcessReceivedCommands+0x3c>)
    5bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5bc2:	bf00      	nop
    5bc4:	00005bed 	.word	0x00005bed
    5bc8:	00005bed 	.word	0x00005bed
    5bcc:	00005bed 	.word	0x00005bed
    5bd0:	00005c5d 	.word	0x00005c5d
    5bd4:	00005c2f 	.word	0x00005c2f
    5bd8:	00005c49 	.word	0x00005c49
    5bdc:	00005bed 	.word	0x00005bed
    5be0:	00005bed 	.word	0x00005bed
    5be4:	00005c5d 	.word	0x00005c5d
    5be8:	00005c2f 	.word	0x00005c2f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5bec:	68fa      	ldr	r2, [r7, #12]
    5bee:	69fb      	ldr	r3, [r7, #28]
    5bf0:	699b      	ldr	r3, [r3, #24]
    5bf2:	18d1      	adds	r1, r2, r3
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	69ba      	ldr	r2, [r7, #24]
    5bf8:	69f8      	ldr	r0, [r7, #28]
    5bfa:	f7ff ff83 	bl	5b04 <prvInsertTimerInActiveList>
    5bfe:	4603      	mov	r3, r0
    5c00:	2b00      	cmp	r3, #0
    5c02:	d02b      	beq.n	5c5c <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5c04:	69fb      	ldr	r3, [r7, #28]
    5c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c08:	69f8      	ldr	r0, [r7, #28]
    5c0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5c0c:	69fb      	ldr	r3, [r7, #28]
    5c0e:	69db      	ldr	r3, [r3, #28]
    5c10:	2b01      	cmp	r3, #1
    5c12:	d123      	bne.n	5c5c <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5c14:	68fa      	ldr	r2, [r7, #12]
    5c16:	69fb      	ldr	r3, [r7, #28]
    5c18:	699b      	ldr	r3, [r3, #24]
    5c1a:	441a      	add	r2, r3
    5c1c:	2300      	movs	r3, #0
    5c1e:	9300      	str	r3, [sp, #0]
    5c20:	2300      	movs	r3, #0
    5c22:	2100      	movs	r1, #0
    5c24:	69f8      	ldr	r0, [r7, #28]
    5c26:	f7ff fe57 	bl	58d8 <xTimerGenericCommand>
    5c2a:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    5c2c:	e016      	b.n	5c5c <prvProcessReceivedCommands+0xd4>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5c2e:	68fa      	ldr	r2, [r7, #12]
    5c30:	69fb      	ldr	r3, [r7, #28]
    5c32:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    5c34:	69fb      	ldr	r3, [r7, #28]
    5c36:	699a      	ldr	r2, [r3, #24]
    5c38:	69bb      	ldr	r3, [r7, #24]
    5c3a:	18d1      	adds	r1, r2, r3
    5c3c:	69bb      	ldr	r3, [r7, #24]
    5c3e:	69ba      	ldr	r2, [r7, #24]
    5c40:	69f8      	ldr	r0, [r7, #28]
    5c42:	f7ff ff5f 	bl	5b04 <prvInsertTimerInActiveList>
					break;
    5c46:	e009      	b.n	5c5c <prvProcessReceivedCommands+0xd4>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    5c48:	69fb      	ldr	r3, [r7, #28]
    5c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d104      	bne.n	5c5c <prvProcessReceivedCommands+0xd4>
						{
							vPortFree( pxTimer );
    5c52:	69f8      	ldr	r0, [r7, #28]
    5c54:	f7fd fd9c 	bl	3790 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    5c58:	e000      	b.n	5c5c <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    5c5a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5c5c:	4b07      	ldr	r3, [pc, #28]	; (5c7c <prvProcessReceivedCommands+0xf4>)
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	f107 0108 	add.w	r1, r7, #8
    5c64:	2200      	movs	r2, #0
    5c66:	4618      	mov	r0, r3
    5c68:	f000 fa3e 	bl	60e8 <xQueueReceive>
    5c6c:	4603      	mov	r3, r0
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d18e      	bne.n	5b90 <prvProcessReceivedCommands+0x8>
	}
}
    5c72:	bf00      	nop
    5c74:	3720      	adds	r7, #32
    5c76:	46bd      	mov	sp, r7
    5c78:	bd80      	pop	{r7, pc}
    5c7a:	bf00      	nop
    5c7c:	10000e08 	.word	0x10000e08

00005c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    5c80:	b580      	push	{r7, lr}
    5c82:	b088      	sub	sp, #32
    5c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5c86:	e037      	b.n	5cf8 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5c88:	4b25      	ldr	r3, [pc, #148]	; (5d20 <prvSwitchTimerLists+0xa0>)
    5c8a:	681b      	ldr	r3, [r3, #0]
    5c8c:	68db      	ldr	r3, [r3, #12]
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    5c92:	4b23      	ldr	r3, [pc, #140]	; (5d20 <prvSwitchTimerLists+0xa0>)
    5c94:	681b      	ldr	r3, [r3, #0]
    5c96:	68db      	ldr	r3, [r3, #12]
    5c98:	68db      	ldr	r3, [r3, #12]
    5c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5c9c:	68fb      	ldr	r3, [r7, #12]
    5c9e:	3304      	adds	r3, #4
    5ca0:	4618      	mov	r0, r3
    5ca2:	f7fc ff17 	bl	2ad4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5ca6:	68fb      	ldr	r3, [r7, #12]
    5ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5caa:	68f8      	ldr	r0, [r7, #12]
    5cac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5cae:	68fb      	ldr	r3, [r7, #12]
    5cb0:	69db      	ldr	r3, [r3, #28]
    5cb2:	2b01      	cmp	r3, #1
    5cb4:	d120      	bne.n	5cf8 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    5cb6:	68fb      	ldr	r3, [r7, #12]
    5cb8:	699b      	ldr	r3, [r3, #24]
    5cba:	693a      	ldr	r2, [r7, #16]
    5cbc:	4413      	add	r3, r2
    5cbe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    5cc0:	68ba      	ldr	r2, [r7, #8]
    5cc2:	693b      	ldr	r3, [r7, #16]
    5cc4:	429a      	cmp	r2, r3
    5cc6:	d90e      	bls.n	5ce6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    5cc8:	68fb      	ldr	r3, [r7, #12]
    5cca:	68ba      	ldr	r2, [r7, #8]
    5ccc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5cce:	68fb      	ldr	r3, [r7, #12]
    5cd0:	68fa      	ldr	r2, [r7, #12]
    5cd2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5cd4:	4b12      	ldr	r3, [pc, #72]	; (5d20 <prvSwitchTimerLists+0xa0>)
    5cd6:	681a      	ldr	r2, [r3, #0]
    5cd8:	68fb      	ldr	r3, [r7, #12]
    5cda:	3304      	adds	r3, #4
    5cdc:	4619      	mov	r1, r3
    5cde:	4610      	mov	r0, r2
    5ce0:	f7fc febf 	bl	2a62 <vListInsert>
    5ce4:	e008      	b.n	5cf8 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5ce6:	2300      	movs	r3, #0
    5ce8:	9300      	str	r3, [sp, #0]
    5cea:	2300      	movs	r3, #0
    5cec:	693a      	ldr	r2, [r7, #16]
    5cee:	2100      	movs	r1, #0
    5cf0:	68f8      	ldr	r0, [r7, #12]
    5cf2:	f7ff fdf1 	bl	58d8 <xTimerGenericCommand>
    5cf6:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5cf8:	4b09      	ldr	r3, [pc, #36]	; (5d20 <prvSwitchTimerLists+0xa0>)
    5cfa:	681b      	ldr	r3, [r3, #0]
    5cfc:	681b      	ldr	r3, [r3, #0]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d1c2      	bne.n	5c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    5d02:	4b07      	ldr	r3, [pc, #28]	; (5d20 <prvSwitchTimerLists+0xa0>)
    5d04:	681b      	ldr	r3, [r3, #0]
    5d06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    5d08:	4b06      	ldr	r3, [pc, #24]	; (5d24 <prvSwitchTimerLists+0xa4>)
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	4a04      	ldr	r2, [pc, #16]	; (5d20 <prvSwitchTimerLists+0xa0>)
    5d0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    5d10:	4a04      	ldr	r2, [pc, #16]	; (5d24 <prvSwitchTimerLists+0xa4>)
    5d12:	697b      	ldr	r3, [r7, #20]
    5d14:	6013      	str	r3, [r2, #0]
}
    5d16:	bf00      	nop
    5d18:	3718      	adds	r7, #24
    5d1a:	46bd      	mov	sp, r7
    5d1c:	bd80      	pop	{r7, pc}
    5d1e:	bf00      	nop
    5d20:	10000e00 	.word	0x10000e00
    5d24:	10000e04 	.word	0x10000e04

00005d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5d2e:	f7ff fcb9 	bl	56a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    5d32:	4b15      	ldr	r3, [pc, #84]	; (5d88 <prvCheckForValidListAndQueue+0x60>)
    5d34:	681b      	ldr	r3, [r3, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d120      	bne.n	5d7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    5d3a:	4814      	ldr	r0, [pc, #80]	; (5d8c <prvCheckForValidListAndQueue+0x64>)
    5d3c:	f7fc fe40 	bl	29c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5d40:	4813      	ldr	r0, [pc, #76]	; (5d90 <prvCheckForValidListAndQueue+0x68>)
    5d42:	f7fc fe3d 	bl	29c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    5d46:	4b13      	ldr	r3, [pc, #76]	; (5d94 <prvCheckForValidListAndQueue+0x6c>)
    5d48:	4a10      	ldr	r2, [pc, #64]	; (5d8c <prvCheckForValidListAndQueue+0x64>)
    5d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    5d4c:	4b12      	ldr	r3, [pc, #72]	; (5d98 <prvCheckForValidListAndQueue+0x70>)
    5d4e:	4a10      	ldr	r2, [pc, #64]	; (5d90 <prvCheckForValidListAndQueue+0x68>)
    5d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    5d52:	2300      	movs	r3, #0
    5d54:	9300      	str	r3, [sp, #0]
    5d56:	4b11      	ldr	r3, [pc, #68]	; (5d9c <prvCheckForValidListAndQueue+0x74>)
    5d58:	4a11      	ldr	r2, [pc, #68]	; (5da0 <prvCheckForValidListAndQueue+0x78>)
    5d5a:	210c      	movs	r1, #12
    5d5c:	200a      	movs	r0, #10
    5d5e:	f000 f87d 	bl	5e5c <xQueueGenericCreateStatic>
    5d62:	4602      	mov	r2, r0
    5d64:	4b08      	ldr	r3, [pc, #32]	; (5d88 <prvCheckForValidListAndQueue+0x60>)
    5d66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    5d68:	4b07      	ldr	r3, [pc, #28]	; (5d88 <prvCheckForValidListAndQueue+0x60>)
    5d6a:	681b      	ldr	r3, [r3, #0]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d005      	beq.n	5d7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    5d70:	4b05      	ldr	r3, [pc, #20]	; (5d88 <prvCheckForValidListAndQueue+0x60>)
    5d72:	681b      	ldr	r3, [r3, #0]
    5d74:	490b      	ldr	r1, [pc, #44]	; (5da4 <prvCheckForValidListAndQueue+0x7c>)
    5d76:	4618      	mov	r0, r3
    5d78:	f000 fb68 	bl	644c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5d7c:	f7ff fcac 	bl	56d8 <vPortExitCritical>
}
    5d80:	bf00      	nop
    5d82:	46bd      	mov	sp, r7
    5d84:	bd80      	pop	{r7, pc}
    5d86:	bf00      	nop
    5d88:	10000e08 	.word	0x10000e08
    5d8c:	10000dd8 	.word	0x10000dd8
    5d90:	10000dec 	.word	0x10000dec
    5d94:	10000e00 	.word	0x10000e00
    5d98:	10000e04 	.word	0x10000e04
    5d9c:	10000e8c 	.word	0x10000e8c
    5da0:	10000e14 	.word	0x10000e14
    5da4:	000092b4 	.word	0x000092b4

00005da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    5da8:	b580      	push	{r7, lr}
    5daa:	b084      	sub	sp, #16
    5dac:	af00      	add	r7, sp, #0
    5dae:	6078      	str	r0, [r7, #4]
    5db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    5db6:	f7ff fc75 	bl	56a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    5dba:	68fb      	ldr	r3, [r7, #12]
    5dbc:	681a      	ldr	r2, [r3, #0]
    5dbe:	68fb      	ldr	r3, [r7, #12]
    5dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5dc2:	68f9      	ldr	r1, [r7, #12]
    5dc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
    5dc6:	fb01 f303 	mul.w	r3, r1, r3
    5dca:	441a      	add	r2, r3
    5dcc:	68fb      	ldr	r3, [r7, #12]
    5dce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    5dd0:	68fb      	ldr	r3, [r7, #12]
    5dd2:	2200      	movs	r2, #0
    5dd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	681a      	ldr	r2, [r3, #0]
    5dda:	68fb      	ldr	r3, [r7, #12]
    5ddc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	681a      	ldr	r2, [r3, #0]
    5de2:	68fb      	ldr	r3, [r7, #12]
    5de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5de6:	3b01      	subs	r3, #1
    5de8:	68f9      	ldr	r1, [r7, #12]
    5dea:	6c09      	ldr	r1, [r1, #64]	; 0x40
    5dec:	fb01 f303 	mul.w	r3, r1, r3
    5df0:	441a      	add	r2, r3
    5df2:	68fb      	ldr	r3, [r7, #12]
    5df4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    5df6:	68fb      	ldr	r3, [r7, #12]
    5df8:	22ff      	movs	r2, #255	; 0xff
    5dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    5dfe:	68fb      	ldr	r3, [r7, #12]
    5e00:	22ff      	movs	r2, #255	; 0xff
    5e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    5e06:	683b      	ldr	r3, [r7, #0]
    5e08:	2b00      	cmp	r3, #0
    5e0a:	d114      	bne.n	5e36 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5e0c:	68fb      	ldr	r3, [r7, #12]
    5e0e:	691b      	ldr	r3, [r3, #16]
    5e10:	2b00      	cmp	r3, #0
    5e12:	d01a      	beq.n	5e4a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5e14:	68fb      	ldr	r3, [r7, #12]
    5e16:	3310      	adds	r3, #16
    5e18:	4618      	mov	r0, r3
    5e1a:	f7fd fa4b 	bl	32b4 <xTaskRemoveFromEventList>
    5e1e:	4603      	mov	r3, r0
    5e20:	2b00      	cmp	r3, #0
    5e22:	d012      	beq.n	5e4a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    5e24:	4b0c      	ldr	r3, [pc, #48]	; (5e58 <xQueueGenericReset+0xb0>)
    5e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e2a:	601a      	str	r2, [r3, #0]
    5e2c:	f3bf 8f4f 	dsb	sy
    5e30:	f3bf 8f6f 	isb	sy
    5e34:	e009      	b.n	5e4a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    5e36:	68fb      	ldr	r3, [r7, #12]
    5e38:	3310      	adds	r3, #16
    5e3a:	4618      	mov	r0, r3
    5e3c:	f7fc fdc0 	bl	29c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5e40:	68fb      	ldr	r3, [r7, #12]
    5e42:	3324      	adds	r3, #36	; 0x24
    5e44:	4618      	mov	r0, r3
    5e46:	f7fc fdbb 	bl	29c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    5e4a:	f7ff fc45 	bl	56d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    5e4e:	2301      	movs	r3, #1
}
    5e50:	4618      	mov	r0, r3
    5e52:	3710      	adds	r7, #16
    5e54:	46bd      	mov	sp, r7
    5e56:	bd80      	pop	{r7, pc}
    5e58:	e000ed04 	.word	0xe000ed04

00005e5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b088      	sub	sp, #32
    5e60:	af02      	add	r7, sp, #8
    5e62:	60f8      	str	r0, [r7, #12]
    5e64:	60b9      	str	r1, [r7, #8]
    5e66:	607a      	str	r2, [r7, #4]
    5e68:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    5e6a:	683b      	ldr	r3, [r7, #0]
    5e6c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
    5e6e:	697b      	ldr	r3, [r7, #20]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d00d      	beq.n	5e90 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    5e74:	697b      	ldr	r3, [r7, #20]
    5e76:	2201      	movs	r2, #1
    5e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    5e7c:	f897 2020 	ldrb.w	r2, [r7, #32]
    5e80:	697b      	ldr	r3, [r7, #20]
    5e82:	9300      	str	r3, [sp, #0]
    5e84:	4613      	mov	r3, r2
    5e86:	687a      	ldr	r2, [r7, #4]
    5e88:	68b9      	ldr	r1, [r7, #8]
    5e8a:	68f8      	ldr	r0, [r7, #12]
    5e8c:	f000 f805 	bl	5e9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    5e90:	697b      	ldr	r3, [r7, #20]
	}
    5e92:	4618      	mov	r0, r3
    5e94:	3718      	adds	r7, #24
    5e96:	46bd      	mov	sp, r7
    5e98:	bd80      	pop	{r7, pc}

00005e9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    5e9a:	b580      	push	{r7, lr}
    5e9c:	b084      	sub	sp, #16
    5e9e:	af00      	add	r7, sp, #0
    5ea0:	60f8      	str	r0, [r7, #12]
    5ea2:	60b9      	str	r1, [r7, #8]
    5ea4:	607a      	str	r2, [r7, #4]
    5ea6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    5ea8:	68bb      	ldr	r3, [r7, #8]
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d103      	bne.n	5eb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    5eae:	69bb      	ldr	r3, [r7, #24]
    5eb0:	69ba      	ldr	r2, [r7, #24]
    5eb2:	601a      	str	r2, [r3, #0]
    5eb4:	e002      	b.n	5ebc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    5eb6:	69bb      	ldr	r3, [r7, #24]
    5eb8:	687a      	ldr	r2, [r7, #4]
    5eba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    5ebc:	69bb      	ldr	r3, [r7, #24]
    5ebe:	68fa      	ldr	r2, [r7, #12]
    5ec0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    5ec2:	69bb      	ldr	r3, [r7, #24]
    5ec4:	68ba      	ldr	r2, [r7, #8]
    5ec6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    5ec8:	2101      	movs	r1, #1
    5eca:	69b8      	ldr	r0, [r7, #24]
    5ecc:	f7ff ff6c 	bl	5da8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    5ed0:	69bb      	ldr	r3, [r7, #24]
    5ed2:	78fa      	ldrb	r2, [r7, #3]
    5ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    5ed8:	bf00      	nop
    5eda:	3710      	adds	r7, #16
    5edc:	46bd      	mov	sp, r7
    5ede:	bd80      	pop	{r7, pc}

00005ee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b08a      	sub	sp, #40	; 0x28
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	60f8      	str	r0, [r7, #12]
    5ee8:	60b9      	str	r1, [r7, #8]
    5eea:	607a      	str	r2, [r7, #4]
    5eec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    5eee:	2300      	movs	r3, #0
    5ef0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5ef2:	68fb      	ldr	r3, [r7, #12]
    5ef4:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5ef6:	f7ff fbd5 	bl	56a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5efa:	6a3b      	ldr	r3, [r7, #32]
    5efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5efe:	6a3b      	ldr	r3, [r7, #32]
    5f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5f02:	429a      	cmp	r2, r3
    5f04:	d302      	bcc.n	5f0c <xQueueGenericSend+0x2c>
    5f06:	683b      	ldr	r3, [r7, #0]
    5f08:	2b02      	cmp	r3, #2
    5f0a:	d129      	bne.n	5f60 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5f0c:	683a      	ldr	r2, [r7, #0]
    5f0e:	68b9      	ldr	r1, [r7, #8]
    5f10:	6a38      	ldr	r0, [r7, #32]
    5f12:	f000 f98b 	bl	622c <prvCopyDataToQueue>
    5f16:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5f18:	6a3b      	ldr	r3, [r7, #32]
    5f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d010      	beq.n	5f42 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5f20:	6a3b      	ldr	r3, [r7, #32]
    5f22:	3324      	adds	r3, #36	; 0x24
    5f24:	4618      	mov	r0, r3
    5f26:	f7fd f9c5 	bl	32b4 <xTaskRemoveFromEventList>
    5f2a:	4603      	mov	r3, r0
    5f2c:	2b00      	cmp	r3, #0
    5f2e:	d013      	beq.n	5f58 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    5f30:	4b3f      	ldr	r3, [pc, #252]	; (6030 <xQueueGenericSend+0x150>)
    5f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5f36:	601a      	str	r2, [r3, #0]
    5f38:	f3bf 8f4f 	dsb	sy
    5f3c:	f3bf 8f6f 	isb	sy
    5f40:	e00a      	b.n	5f58 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    5f42:	69fb      	ldr	r3, [r7, #28]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d007      	beq.n	5f58 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    5f48:	4b39      	ldr	r3, [pc, #228]	; (6030 <xQueueGenericSend+0x150>)
    5f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5f4e:	601a      	str	r2, [r3, #0]
    5f50:	f3bf 8f4f 	dsb	sy
    5f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    5f58:	f7ff fbbe 	bl	56d8 <vPortExitCritical>
				return pdPASS;
    5f5c:	2301      	movs	r3, #1
    5f5e:	e063      	b.n	6028 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d103      	bne.n	5f6e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5f66:	f7ff fbb7 	bl	56d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    5f6a:	2300      	movs	r3, #0
    5f6c:	e05c      	b.n	6028 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    5f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f70:	2b00      	cmp	r3, #0
    5f72:	d106      	bne.n	5f82 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    5f74:	f107 0314 	add.w	r3, r7, #20
    5f78:	4618      	mov	r0, r3
    5f7a:	f7fd f9ef 	bl	335c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    5f7e:	2301      	movs	r3, #1
    5f80:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5f82:	f7ff fba9 	bl	56d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5f86:	f7fc ffa7 	bl	2ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5f8a:	f7ff fb8b 	bl	56a4 <vPortEnterCritical>
    5f8e:	6a3b      	ldr	r3, [r7, #32]
    5f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    5f94:	b25b      	sxtb	r3, r3
    5f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5f9a:	d103      	bne.n	5fa4 <xQueueGenericSend+0xc4>
    5f9c:	6a3b      	ldr	r3, [r7, #32]
    5f9e:	2200      	movs	r2, #0
    5fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    5fa4:	6a3b      	ldr	r3, [r7, #32]
    5fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    5faa:	b25b      	sxtb	r3, r3
    5fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5fb0:	d103      	bne.n	5fba <xQueueGenericSend+0xda>
    5fb2:	6a3b      	ldr	r3, [r7, #32]
    5fb4:	2200      	movs	r2, #0
    5fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    5fba:	f7ff fb8d 	bl	56d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5fbe:	1d3a      	adds	r2, r7, #4
    5fc0:	f107 0314 	add.w	r3, r7, #20
    5fc4:	4611      	mov	r1, r2
    5fc6:	4618      	mov	r0, r3
    5fc8:	f7fd f9de 	bl	3388 <xTaskCheckForTimeOut>
    5fcc:	4603      	mov	r3, r0
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d124      	bne.n	601c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    5fd2:	6a38      	ldr	r0, [r7, #32]
    5fd4:	f000 fa22 	bl	641c <prvIsQueueFull>
    5fd8:	4603      	mov	r3, r0
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d018      	beq.n	6010 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5fde:	6a3b      	ldr	r3, [r7, #32]
    5fe0:	3310      	adds	r3, #16
    5fe2:	687a      	ldr	r2, [r7, #4]
    5fe4:	4611      	mov	r1, r2
    5fe6:	4618      	mov	r0, r3
    5fe8:	f7fd f930 	bl	324c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    5fec:	6a38      	ldr	r0, [r7, #32]
    5fee:	f000 f9ad 	bl	634c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    5ff2:	f7fc ff7f 	bl	2ef4 <xTaskResumeAll>
    5ff6:	4603      	mov	r3, r0
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	f47f af7c 	bne.w	5ef6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    5ffe:	4b0c      	ldr	r3, [pc, #48]	; (6030 <xQueueGenericSend+0x150>)
    6000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6004:	601a      	str	r2, [r3, #0]
    6006:	f3bf 8f4f 	dsb	sy
    600a:	f3bf 8f6f 	isb	sy
    600e:	e772      	b.n	5ef6 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6010:	6a38      	ldr	r0, [r7, #32]
    6012:	f000 f99b 	bl	634c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6016:	f7fc ff6d 	bl	2ef4 <xTaskResumeAll>
    601a:	e76c      	b.n	5ef6 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    601c:	6a38      	ldr	r0, [r7, #32]
    601e:	f000 f995 	bl	634c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6022:	f7fc ff67 	bl	2ef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    6026:	2300      	movs	r3, #0
		}
	}
}
    6028:	4618      	mov	r0, r3
    602a:	3728      	adds	r7, #40	; 0x28
    602c:	46bd      	mov	sp, r7
    602e:	bd80      	pop	{r7, pc}
    6030:	e000ed04 	.word	0xe000ed04

00006034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    6034:	b580      	push	{r7, lr}
    6036:	b08c      	sub	sp, #48	; 0x30
    6038:	af00      	add	r7, sp, #0
    603a:	60f8      	str	r0, [r7, #12]
    603c:	60b9      	str	r1, [r7, #8]
    603e:	607a      	str	r2, [r7, #4]
    6040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6042:	68fb      	ldr	r3, [r7, #12]
    6044:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    6046:	f3ef 8211 	mrs	r2, BASEPRI
    604a:	f04f 0328 	mov.w	r3, #40	; 0x28
    604e:	f383 8811 	msr	BASEPRI, r3
    6052:	f3bf 8f6f 	isb	sy
    6056:	f3bf 8f4f 	dsb	sy
    605a:	61fa      	str	r2, [r7, #28]
    605c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    605e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6060:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6062:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6066:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    606a:	429a      	cmp	r2, r3
    606c:	d302      	bcc.n	6074 <xQueueGenericSendFromISR+0x40>
    606e:	683b      	ldr	r3, [r7, #0]
    6070:	2b02      	cmp	r3, #2
    6072:	d12c      	bne.n	60ce <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    6074:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    607e:	683a      	ldr	r2, [r7, #0]
    6080:	68b9      	ldr	r1, [r7, #8]
    6082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6084:	f000 f8d2 	bl	622c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    6088:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    608c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6090:	d112      	bne.n	60b8 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6092:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6096:	2b00      	cmp	r3, #0
    6098:	d016      	beq.n	60c8 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    609c:	3324      	adds	r3, #36	; 0x24
    609e:	4618      	mov	r0, r3
    60a0:	f7fd f908 	bl	32b4 <xTaskRemoveFromEventList>
    60a4:	4603      	mov	r3, r0
    60a6:	2b00      	cmp	r3, #0
    60a8:	d00e      	beq.n	60c8 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    60aa:	687b      	ldr	r3, [r7, #4]
    60ac:	2b00      	cmp	r3, #0
    60ae:	d00b      	beq.n	60c8 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	2201      	movs	r2, #1
    60b4:	601a      	str	r2, [r3, #0]
    60b6:	e007      	b.n	60c8 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    60b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    60bc:	3301      	adds	r3, #1
    60be:	b2db      	uxtb	r3, r3
    60c0:	b25a      	sxtb	r2, r3
    60c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    60c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    60c8:	2301      	movs	r3, #1
    60ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    60cc:	e001      	b.n	60d2 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    60ce:	2300      	movs	r3, #0
    60d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    60d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    60d6:	697b      	ldr	r3, [r7, #20]
    60d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    60dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    60de:	4618      	mov	r0, r3
    60e0:	3730      	adds	r7, #48	; 0x30
    60e2:	46bd      	mov	sp, r7
    60e4:	bd80      	pop	{r7, pc}
    60e6:	Address 0x00000000000060e6 is out of bounds.


000060e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    60e8:	b580      	push	{r7, lr}
    60ea:	b08a      	sub	sp, #40	; 0x28
    60ec:	af00      	add	r7, sp, #0
    60ee:	60f8      	str	r0, [r7, #12]
    60f0:	60b9      	str	r1, [r7, #8]
    60f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    60f4:	2300      	movs	r3, #0
    60f6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    60fc:	f7ff fad2 	bl	56a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6100:	6a3b      	ldr	r3, [r7, #32]
    6102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6104:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6106:	69fb      	ldr	r3, [r7, #28]
    6108:	2b00      	cmp	r3, #0
    610a:	d01f      	beq.n	614c <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    610c:	68b9      	ldr	r1, [r7, #8]
    610e:	6a38      	ldr	r0, [r7, #32]
    6110:	f000 f8f6 	bl	6300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    6114:	69fb      	ldr	r3, [r7, #28]
    6116:	1e5a      	subs	r2, r3, #1
    6118:	6a3b      	ldr	r3, [r7, #32]
    611a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    611c:	6a3b      	ldr	r3, [r7, #32]
    611e:	691b      	ldr	r3, [r3, #16]
    6120:	2b00      	cmp	r3, #0
    6122:	d00f      	beq.n	6144 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6124:	6a3b      	ldr	r3, [r7, #32]
    6126:	3310      	adds	r3, #16
    6128:	4618      	mov	r0, r3
    612a:	f7fd f8c3 	bl	32b4 <xTaskRemoveFromEventList>
    612e:	4603      	mov	r3, r0
    6130:	2b00      	cmp	r3, #0
    6132:	d007      	beq.n	6144 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    6134:	4b3c      	ldr	r3, [pc, #240]	; (6228 <xQueueReceive+0x140>)
    6136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    613a:	601a      	str	r2, [r3, #0]
    613c:	f3bf 8f4f 	dsb	sy
    6140:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    6144:	f7ff fac8 	bl	56d8 <vPortExitCritical>
				return pdPASS;
    6148:	2301      	movs	r3, #1
    614a:	e069      	b.n	6220 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	2b00      	cmp	r3, #0
    6150:	d103      	bne.n	615a <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6152:	f7ff fac1 	bl	56d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    6156:	2300      	movs	r3, #0
    6158:	e062      	b.n	6220 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    615c:	2b00      	cmp	r3, #0
    615e:	d106      	bne.n	616e <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6160:	f107 0314 	add.w	r3, r7, #20
    6164:	4618      	mov	r0, r3
    6166:	f7fd f8f9 	bl	335c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    616a:	2301      	movs	r3, #1
    616c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    616e:	f7ff fab3 	bl	56d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6172:	f7fc feb1 	bl	2ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6176:	f7ff fa95 	bl	56a4 <vPortEnterCritical>
    617a:	6a3b      	ldr	r3, [r7, #32]
    617c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    6180:	b25b      	sxtb	r3, r3
    6182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6186:	d103      	bne.n	6190 <xQueueReceive+0xa8>
    6188:	6a3b      	ldr	r3, [r7, #32]
    618a:	2200      	movs	r2, #0
    618c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    6190:	6a3b      	ldr	r3, [r7, #32]
    6192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    6196:	b25b      	sxtb	r3, r3
    6198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    619c:	d103      	bne.n	61a6 <xQueueReceive+0xbe>
    619e:	6a3b      	ldr	r3, [r7, #32]
    61a0:	2200      	movs	r2, #0
    61a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    61a6:	f7ff fa97 	bl	56d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    61aa:	1d3a      	adds	r2, r7, #4
    61ac:	f107 0314 	add.w	r3, r7, #20
    61b0:	4611      	mov	r1, r2
    61b2:	4618      	mov	r0, r3
    61b4:	f7fd f8e8 	bl	3388 <xTaskCheckForTimeOut>
    61b8:	4603      	mov	r3, r0
    61ba:	2b00      	cmp	r3, #0
    61bc:	d123      	bne.n	6206 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    61be:	6a38      	ldr	r0, [r7, #32]
    61c0:	f000 f916 	bl	63f0 <prvIsQueueEmpty>
    61c4:	4603      	mov	r3, r0
    61c6:	2b00      	cmp	r3, #0
    61c8:	d017      	beq.n	61fa <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    61ca:	6a3b      	ldr	r3, [r7, #32]
    61cc:	3324      	adds	r3, #36	; 0x24
    61ce:	687a      	ldr	r2, [r7, #4]
    61d0:	4611      	mov	r1, r2
    61d2:	4618      	mov	r0, r3
    61d4:	f7fd f83a 	bl	324c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    61d8:	6a38      	ldr	r0, [r7, #32]
    61da:	f000 f8b7 	bl	634c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    61de:	f7fc fe89 	bl	2ef4 <xTaskResumeAll>
    61e2:	4603      	mov	r3, r0
    61e4:	2b00      	cmp	r3, #0
    61e6:	d189      	bne.n	60fc <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    61e8:	4b0f      	ldr	r3, [pc, #60]	; (6228 <xQueueReceive+0x140>)
    61ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    61ee:	601a      	str	r2, [r3, #0]
    61f0:	f3bf 8f4f 	dsb	sy
    61f4:	f3bf 8f6f 	isb	sy
    61f8:	e780      	b.n	60fc <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    61fa:	6a38      	ldr	r0, [r7, #32]
    61fc:	f000 f8a6 	bl	634c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6200:	f7fc fe78 	bl	2ef4 <xTaskResumeAll>
    6204:	e77a      	b.n	60fc <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    6206:	6a38      	ldr	r0, [r7, #32]
    6208:	f000 f8a0 	bl	634c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    620c:	f7fc fe72 	bl	2ef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6210:	6a38      	ldr	r0, [r7, #32]
    6212:	f000 f8ed 	bl	63f0 <prvIsQueueEmpty>
    6216:	4603      	mov	r3, r0
    6218:	2b00      	cmp	r3, #0
    621a:	f43f af6f 	beq.w	60fc <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    621e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6220:	4618      	mov	r0, r3
    6222:	3728      	adds	r7, #40	; 0x28
    6224:	46bd      	mov	sp, r7
    6226:	bd80      	pop	{r7, pc}
    6228:	e000ed04 	.word	0xe000ed04

0000622c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    622c:	b580      	push	{r7, lr}
    622e:	b086      	sub	sp, #24
    6230:	af00      	add	r7, sp, #0
    6232:	60f8      	str	r0, [r7, #12]
    6234:	60b9      	str	r1, [r7, #8]
    6236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    6238:	2300      	movs	r3, #0
    623a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    623c:	68fb      	ldr	r3, [r7, #12]
    623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    6242:	68fb      	ldr	r3, [r7, #12]
    6244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6246:	2b00      	cmp	r3, #0
    6248:	d10d      	bne.n	6266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    624a:	68fb      	ldr	r3, [r7, #12]
    624c:	681b      	ldr	r3, [r3, #0]
    624e:	2b00      	cmp	r3, #0
    6250:	d14d      	bne.n	62ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    6252:	68fb      	ldr	r3, [r7, #12]
    6254:	685b      	ldr	r3, [r3, #4]
    6256:	4618      	mov	r0, r3
    6258:	f7fd f9be 	bl	35d8 <xTaskPriorityDisinherit>
    625c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    625e:	68fb      	ldr	r3, [r7, #12]
    6260:	2200      	movs	r2, #0
    6262:	605a      	str	r2, [r3, #4]
    6264:	e043      	b.n	62ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	2b00      	cmp	r3, #0
    626a:	d119      	bne.n	62a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    626c:	68fb      	ldr	r3, [r7, #12]
    626e:	6898      	ldr	r0, [r3, #8]
    6270:	68fb      	ldr	r3, [r7, #12]
    6272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6274:	461a      	mov	r2, r3
    6276:	68b9      	ldr	r1, [r7, #8]
    6278:	f001 fdee 	bl	7e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    627c:	68fb      	ldr	r3, [r7, #12]
    627e:	689a      	ldr	r2, [r3, #8]
    6280:	68fb      	ldr	r3, [r7, #12]
    6282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6284:	441a      	add	r2, r3
    6286:	68fb      	ldr	r3, [r7, #12]
    6288:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    628a:	68fb      	ldr	r3, [r7, #12]
    628c:	689a      	ldr	r2, [r3, #8]
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	685b      	ldr	r3, [r3, #4]
    6292:	429a      	cmp	r2, r3
    6294:	d32b      	bcc.n	62ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    6296:	68fb      	ldr	r3, [r7, #12]
    6298:	681a      	ldr	r2, [r3, #0]
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	609a      	str	r2, [r3, #8]
    629e:	e026      	b.n	62ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    62a0:	68fb      	ldr	r3, [r7, #12]
    62a2:	68d8      	ldr	r0, [r3, #12]
    62a4:	68fb      	ldr	r3, [r7, #12]
    62a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    62a8:	461a      	mov	r2, r3
    62aa:	68b9      	ldr	r1, [r7, #8]
    62ac:	f001 fdd4 	bl	7e58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    62b0:	68fb      	ldr	r3, [r7, #12]
    62b2:	68da      	ldr	r2, [r3, #12]
    62b4:	68fb      	ldr	r3, [r7, #12]
    62b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    62b8:	425b      	negs	r3, r3
    62ba:	441a      	add	r2, r3
    62bc:	68fb      	ldr	r3, [r7, #12]
    62be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    62c0:	68fb      	ldr	r3, [r7, #12]
    62c2:	68da      	ldr	r2, [r3, #12]
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	681b      	ldr	r3, [r3, #0]
    62c8:	429a      	cmp	r2, r3
    62ca:	d207      	bcs.n	62dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	685a      	ldr	r2, [r3, #4]
    62d0:	68fb      	ldr	r3, [r7, #12]
    62d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    62d4:	425b      	negs	r3, r3
    62d6:	441a      	add	r2, r3
    62d8:	68fb      	ldr	r3, [r7, #12]
    62da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	2b02      	cmp	r3, #2
    62e0:	d105      	bne.n	62ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    62e2:	693b      	ldr	r3, [r7, #16]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d002      	beq.n	62ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    62e8:	693b      	ldr	r3, [r7, #16]
    62ea:	3b01      	subs	r3, #1
    62ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    62ee:	693b      	ldr	r3, [r7, #16]
    62f0:	1c5a      	adds	r2, r3, #1
    62f2:	68fb      	ldr	r3, [r7, #12]
    62f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    62f6:	697b      	ldr	r3, [r7, #20]
}
    62f8:	4618      	mov	r0, r3
    62fa:	3718      	adds	r7, #24
    62fc:	46bd      	mov	sp, r7
    62fe:	bd80      	pop	{r7, pc}

00006300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    6300:	b580      	push	{r7, lr}
    6302:	b082      	sub	sp, #8
    6304:	af00      	add	r7, sp, #0
    6306:	6078      	str	r0, [r7, #4]
    6308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    630e:	2b00      	cmp	r3, #0
    6310:	d018      	beq.n	6344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	68da      	ldr	r2, [r3, #12]
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    631a:	441a      	add	r2, r3
    631c:	687b      	ldr	r3, [r7, #4]
    631e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	68da      	ldr	r2, [r3, #12]
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	685b      	ldr	r3, [r3, #4]
    6328:	429a      	cmp	r2, r3
    632a:	d303      	bcc.n	6334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    632c:	687b      	ldr	r3, [r7, #4]
    632e:	681a      	ldr	r2, [r3, #0]
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	68d9      	ldr	r1, [r3, #12]
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    633c:	461a      	mov	r2, r3
    633e:	6838      	ldr	r0, [r7, #0]
    6340:	f001 fd8a 	bl	7e58 <memcpy>
	}
}
    6344:	bf00      	nop
    6346:	3708      	adds	r7, #8
    6348:	46bd      	mov	sp, r7
    634a:	bd80      	pop	{r7, pc}

0000634c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    634c:	b580      	push	{r7, lr}
    634e:	b084      	sub	sp, #16
    6350:	af00      	add	r7, sp, #0
    6352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    6354:	f7ff f9a6 	bl	56a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    635e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6360:	e011      	b.n	6386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6362:	687b      	ldr	r3, [r7, #4]
    6364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6366:	2b00      	cmp	r3, #0
    6368:	d012      	beq.n	6390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	3324      	adds	r3, #36	; 0x24
    636e:	4618      	mov	r0, r3
    6370:	f7fc ffa0 	bl	32b4 <xTaskRemoveFromEventList>
    6374:	4603      	mov	r3, r0
    6376:	2b00      	cmp	r3, #0
    6378:	d001      	beq.n	637e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    637a:	f7fd f84b 	bl	3414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    637e:	7bfb      	ldrb	r3, [r7, #15]
    6380:	3b01      	subs	r3, #1
    6382:	b2db      	uxtb	r3, r3
    6384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    6386:	f997 300f 	ldrsb.w	r3, [r7, #15]
    638a:	2b00      	cmp	r3, #0
    638c:	dce9      	bgt.n	6362 <prvUnlockQueue+0x16>
    638e:	e000      	b.n	6392 <prvUnlockQueue+0x46>
					break;
    6390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	22ff      	movs	r2, #255	; 0xff
    6396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    639a:	f7ff f99d 	bl	56d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    639e:	f7ff f981 	bl	56a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    63a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    63aa:	e011      	b.n	63d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	691b      	ldr	r3, [r3, #16]
    63b0:	2b00      	cmp	r3, #0
    63b2:	d012      	beq.n	63da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    63b4:	687b      	ldr	r3, [r7, #4]
    63b6:	3310      	adds	r3, #16
    63b8:	4618      	mov	r0, r3
    63ba:	f7fc ff7b 	bl	32b4 <xTaskRemoveFromEventList>
    63be:	4603      	mov	r3, r0
    63c0:	2b00      	cmp	r3, #0
    63c2:	d001      	beq.n	63c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    63c4:	f7fd f826 	bl	3414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    63c8:	7bbb      	ldrb	r3, [r7, #14]
    63ca:	3b01      	subs	r3, #1
    63cc:	b2db      	uxtb	r3, r3
    63ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    63d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
    63d4:	2b00      	cmp	r3, #0
    63d6:	dce9      	bgt.n	63ac <prvUnlockQueue+0x60>
    63d8:	e000      	b.n	63dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    63da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	22ff      	movs	r2, #255	; 0xff
    63e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    63e4:	f7ff f978 	bl	56d8 <vPortExitCritical>
}
    63e8:	bf00      	nop
    63ea:	3710      	adds	r7, #16
    63ec:	46bd      	mov	sp, r7
    63ee:	bd80      	pop	{r7, pc}

000063f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    63f0:	b580      	push	{r7, lr}
    63f2:	b084      	sub	sp, #16
    63f4:	af00      	add	r7, sp, #0
    63f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    63f8:	f7ff f954 	bl	56a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6400:	2b00      	cmp	r3, #0
    6402:	d102      	bne.n	640a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    6404:	2301      	movs	r3, #1
    6406:	60fb      	str	r3, [r7, #12]
    6408:	e001      	b.n	640e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    640a:	2300      	movs	r3, #0
    640c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    640e:	f7ff f963 	bl	56d8 <vPortExitCritical>

	return xReturn;
    6412:	68fb      	ldr	r3, [r7, #12]
}
    6414:	4618      	mov	r0, r3
    6416:	3710      	adds	r7, #16
    6418:	46bd      	mov	sp, r7
    641a:	bd80      	pop	{r7, pc}

0000641c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    641c:	b580      	push	{r7, lr}
    641e:	b084      	sub	sp, #16
    6420:	af00      	add	r7, sp, #0
    6422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6424:	f7ff f93e 	bl	56a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6430:	429a      	cmp	r2, r3
    6432:	d102      	bne.n	643a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    6434:	2301      	movs	r3, #1
    6436:	60fb      	str	r3, [r7, #12]
    6438:	e001      	b.n	643e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    643a:	2300      	movs	r3, #0
    643c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    643e:	f7ff f94b 	bl	56d8 <vPortExitCritical>

	return xReturn;
    6442:	68fb      	ldr	r3, [r7, #12]
}
    6444:	4618      	mov	r0, r3
    6446:	3710      	adds	r7, #16
    6448:	46bd      	mov	sp, r7
    644a:	bd80      	pop	{r7, pc}

0000644c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    644c:	b480      	push	{r7}
    644e:	b085      	sub	sp, #20
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
    6454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    6456:	2300      	movs	r3, #0
    6458:	60fb      	str	r3, [r7, #12]
    645a:	e014      	b.n	6486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    645c:	4a0e      	ldr	r2, [pc, #56]	; (6498 <vQueueAddToRegistry+0x4c>)
    645e:	68fb      	ldr	r3, [r7, #12]
    6460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6464:	2b00      	cmp	r3, #0
    6466:	d10b      	bne.n	6480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    6468:	490b      	ldr	r1, [pc, #44]	; (6498 <vQueueAddToRegistry+0x4c>)
    646a:	68fb      	ldr	r3, [r7, #12]
    646c:	683a      	ldr	r2, [r7, #0]
    646e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    6472:	4a09      	ldr	r2, [pc, #36]	; (6498 <vQueueAddToRegistry+0x4c>)
    6474:	68fb      	ldr	r3, [r7, #12]
    6476:	00db      	lsls	r3, r3, #3
    6478:	4413      	add	r3, r2
    647a:	687a      	ldr	r2, [r7, #4]
    647c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    647e:	e005      	b.n	648c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    6480:	68fb      	ldr	r3, [r7, #12]
    6482:	3301      	adds	r3, #1
    6484:	60fb      	str	r3, [r7, #12]
    6486:	68fb      	ldr	r3, [r7, #12]
    6488:	2b09      	cmp	r3, #9
    648a:	d9e7      	bls.n	645c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    648c:	bf00      	nop
    648e:	3714      	adds	r7, #20
    6490:	46bd      	mov	sp, r7
    6492:	f85d 7b04 	ldr.w	r7, [sp], #4
    6496:	4770      	bx	lr
    6498:	10000ee4 	.word	0x10000ee4

0000649c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    649c:	b580      	push	{r7, lr}
    649e:	b086      	sub	sp, #24
    64a0:	af00      	add	r7, sp, #0
    64a2:	60f8      	str	r0, [r7, #12]
    64a4:	60b9      	str	r1, [r7, #8]
    64a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    64a8:	68fb      	ldr	r3, [r7, #12]
    64aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    64ac:	f7ff f8fa 	bl	56a4 <vPortEnterCritical>
    64b0:	697b      	ldr	r3, [r7, #20]
    64b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    64b6:	b25b      	sxtb	r3, r3
    64b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    64bc:	d103      	bne.n	64c6 <vQueueWaitForMessageRestricted+0x2a>
    64be:	697b      	ldr	r3, [r7, #20]
    64c0:	2200      	movs	r2, #0
    64c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    64c6:	697b      	ldr	r3, [r7, #20]
    64c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    64cc:	b25b      	sxtb	r3, r3
    64ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    64d2:	d103      	bne.n	64dc <vQueueWaitForMessageRestricted+0x40>
    64d4:	697b      	ldr	r3, [r7, #20]
    64d6:	2200      	movs	r2, #0
    64d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    64dc:	f7ff f8fc 	bl	56d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    64e0:	697b      	ldr	r3, [r7, #20]
    64e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    64e4:	2b00      	cmp	r3, #0
    64e6:	d106      	bne.n	64f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    64e8:	697b      	ldr	r3, [r7, #20]
    64ea:	3324      	adds	r3, #36	; 0x24
    64ec:	687a      	ldr	r2, [r7, #4]
    64ee:	68b9      	ldr	r1, [r7, #8]
    64f0:	4618      	mov	r0, r3
    64f2:	f7fc fec1 	bl	3278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    64f6:	6978      	ldr	r0, [r7, #20]
    64f8:	f7ff ff28 	bl	634c <prvUnlockQueue>
	}
    64fc:	bf00      	nop
    64fe:	3718      	adds	r7, #24
    6500:	46bd      	mov	sp, r7
    6502:	bd80      	pop	{r7, pc}

00006504 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6504:	b480      	push	{r7}
    6506:	b083      	sub	sp, #12
    6508:	af00      	add	r7, sp, #0
    650a:	6078      	str	r0, [r7, #4]
    650c:	6039      	str	r1, [r7, #0]
  return 1;
    650e:	2301      	movs	r3, #1
}
    6510:	4618      	mov	r0, r3
    6512:	370c      	adds	r7, #12
    6514:	46bd      	mov	sp, r7
    6516:	f85d 7b04 	ldr.w	r7, [sp], #4
    651a:	4770      	bx	lr

0000651c <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    651c:	b480      	push	{r7}
    651e:	b083      	sub	sp, #12
    6520:	af00      	add	r7, sp, #0
    6522:	6078      	str	r0, [r7, #4]
    6524:	6039      	str	r1, [r7, #0]
  return 0;
    6526:	2300      	movs	r3, #0
}
    6528:	4618      	mov	r0, r3
    652a:	370c      	adds	r7, #12
    652c:	46bd      	mov	sp, r7
    652e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6532:	4770      	bx	lr

00006534 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6534:	b480      	push	{r7}
    6536:	b083      	sub	sp, #12
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    653c:	4a04      	ldr	r2, [pc, #16]	; (6550 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	6013      	str	r3, [r2, #0]
}
    6542:	bf00      	nop
    6544:	370c      	adds	r7, #12
    6546:	46bd      	mov	sp, r7
    6548:	f85d 7b04 	ldr.w	r7, [sp], #4
    654c:	4770      	bx	lr
    654e:	bf00      	nop
    6550:	1000005c 	.word	0x1000005c

00006554 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    6554:	b480      	push	{r7}
    6556:	b083      	sub	sp, #12
    6558:	af00      	add	r7, sp, #0
    655a:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    655c:	4a04      	ldr	r2, [pc, #16]	; (6570 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	6013      	str	r3, [r2, #0]
}
    6562:	bf00      	nop
    6564:	370c      	adds	r7, #12
    6566:	46bd      	mov	sp, r7
    6568:	f85d 7b04 	ldr.w	r7, [sp], #4
    656c:	4770      	bx	lr
    656e:	bf00      	nop
    6570:	10000060 	.word	0x10000060

00006574 <__cxa_pure_virtual>:
    6574:	b508      	push	{r3, lr}
    6576:	f000 f80d 	bl	6594 <std::terminate()>

0000657a <__cxxabiv1::__terminate(void (*)())>:
    657a:	b508      	push	{r3, lr}
    657c:	4780      	blx	r0
    657e:	f001 fc2f 	bl	7de0 <abort>
    6582:	Address 0x0000000000006582 is out of bounds.


00006584 <std::get_terminate()>:
    6584:	4b02      	ldr	r3, [pc, #8]	; (6590 <std::get_terminate()+0xc>)
    6586:	6818      	ldr	r0, [r3, #0]
    6588:	f3bf 8f5b 	dmb	ish
    658c:	4770      	bx	lr
    658e:	bf00      	nop
    6590:	10000090 	.word	0x10000090

00006594 <std::terminate()>:
    6594:	b508      	push	{r3, lr}
    6596:	f7ff fff5 	bl	6584 <std::get_terminate()>
    659a:	f7ff ffee 	bl	657a <__cxxabiv1::__terminate(void (*)())>
    659e:	Address 0x000000000000659e is out of bounds.


000065a0 <__aeabi_drsub>:
    65a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    65a4:	e002      	b.n	65ac <__adddf3>
    65a6:	bf00      	nop

000065a8 <__aeabi_dsub>:
    65a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000065ac <__adddf3>:
    65ac:	b530      	push	{r4, r5, lr}
    65ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    65b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    65b6:	ea94 0f05 	teq	r4, r5
    65ba:	bf08      	it	eq
    65bc:	ea90 0f02 	teqeq	r0, r2
    65c0:	bf1f      	itttt	ne
    65c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    65c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    65ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    65ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    65d2:	f000 80e2 	beq.w	679a <__adddf3+0x1ee>
    65d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    65da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    65de:	bfb8      	it	lt
    65e0:	426d      	neglt	r5, r5
    65e2:	dd0c      	ble.n	65fe <__adddf3+0x52>
    65e4:	442c      	add	r4, r5
    65e6:	ea80 0202 	eor.w	r2, r0, r2
    65ea:	ea81 0303 	eor.w	r3, r1, r3
    65ee:	ea82 0000 	eor.w	r0, r2, r0
    65f2:	ea83 0101 	eor.w	r1, r3, r1
    65f6:	ea80 0202 	eor.w	r2, r0, r2
    65fa:	ea81 0303 	eor.w	r3, r1, r3
    65fe:	2d36      	cmp	r5, #54	; 0x36
    6600:	bf88      	it	hi
    6602:	bd30      	pophi	{r4, r5, pc}
    6604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6608:	ea4f 3101 	mov.w	r1, r1, lsl #12
    660c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6614:	d002      	beq.n	661c <__adddf3+0x70>
    6616:	4240      	negs	r0, r0
    6618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    661c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6620:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6628:	d002      	beq.n	6630 <__adddf3+0x84>
    662a:	4252      	negs	r2, r2
    662c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6630:	ea94 0f05 	teq	r4, r5
    6634:	f000 80a7 	beq.w	6786 <__adddf3+0x1da>
    6638:	f1a4 0401 	sub.w	r4, r4, #1
    663c:	f1d5 0e20 	rsbs	lr, r5, #32
    6640:	db0d      	blt.n	665e <__adddf3+0xb2>
    6642:	fa02 fc0e 	lsl.w	ip, r2, lr
    6646:	fa22 f205 	lsr.w	r2, r2, r5
    664a:	1880      	adds	r0, r0, r2
    664c:	f141 0100 	adc.w	r1, r1, #0
    6650:	fa03 f20e 	lsl.w	r2, r3, lr
    6654:	1880      	adds	r0, r0, r2
    6656:	fa43 f305 	asr.w	r3, r3, r5
    665a:	4159      	adcs	r1, r3
    665c:	e00e      	b.n	667c <__adddf3+0xd0>
    665e:	f1a5 0520 	sub.w	r5, r5, #32
    6662:	f10e 0e20 	add.w	lr, lr, #32
    6666:	2a01      	cmp	r2, #1
    6668:	fa03 fc0e 	lsl.w	ip, r3, lr
    666c:	bf28      	it	cs
    666e:	f04c 0c02 	orrcs.w	ip, ip, #2
    6672:	fa43 f305 	asr.w	r3, r3, r5
    6676:	18c0      	adds	r0, r0, r3
    6678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    667c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6680:	d507      	bpl.n	6692 <__adddf3+0xe6>
    6682:	f04f 0e00 	mov.w	lr, #0
    6686:	f1dc 0c00 	rsbs	ip, ip, #0
    668a:	eb7e 0000 	sbcs.w	r0, lr, r0
    668e:	eb6e 0101 	sbc.w	r1, lr, r1
    6692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    6696:	d31b      	bcc.n	66d0 <__adddf3+0x124>
    6698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    669c:	d30c      	bcc.n	66b8 <__adddf3+0x10c>
    669e:	0849      	lsrs	r1, r1, #1
    66a0:	ea5f 0030 	movs.w	r0, r0, rrx
    66a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    66a8:	f104 0401 	add.w	r4, r4, #1
    66ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    66b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    66b4:	f080 809a 	bcs.w	67ec <__adddf3+0x240>
    66b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    66bc:	bf08      	it	eq
    66be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    66c2:	f150 0000 	adcs.w	r0, r0, #0
    66c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    66ca:	ea41 0105 	orr.w	r1, r1, r5
    66ce:	bd30      	pop	{r4, r5, pc}
    66d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    66d4:	4140      	adcs	r0, r0
    66d6:	eb41 0101 	adc.w	r1, r1, r1
    66da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    66de:	f1a4 0401 	sub.w	r4, r4, #1
    66e2:	d1e9      	bne.n	66b8 <__adddf3+0x10c>
    66e4:	f091 0f00 	teq	r1, #0
    66e8:	bf04      	itt	eq
    66ea:	4601      	moveq	r1, r0
    66ec:	2000      	moveq	r0, #0
    66ee:	fab1 f381 	clz	r3, r1
    66f2:	bf08      	it	eq
    66f4:	3320      	addeq	r3, #32
    66f6:	f1a3 030b 	sub.w	r3, r3, #11
    66fa:	f1b3 0220 	subs.w	r2, r3, #32
    66fe:	da0c      	bge.n	671a <__adddf3+0x16e>
    6700:	320c      	adds	r2, #12
    6702:	dd08      	ble.n	6716 <__adddf3+0x16a>
    6704:	f102 0c14 	add.w	ip, r2, #20
    6708:	f1c2 020c 	rsb	r2, r2, #12
    670c:	fa01 f00c 	lsl.w	r0, r1, ip
    6710:	fa21 f102 	lsr.w	r1, r1, r2
    6714:	e00c      	b.n	6730 <__adddf3+0x184>
    6716:	f102 0214 	add.w	r2, r2, #20
    671a:	bfd8      	it	le
    671c:	f1c2 0c20 	rsble	ip, r2, #32
    6720:	fa01 f102 	lsl.w	r1, r1, r2
    6724:	fa20 fc0c 	lsr.w	ip, r0, ip
    6728:	bfdc      	itt	le
    672a:	ea41 010c 	orrle.w	r1, r1, ip
    672e:	4090      	lslle	r0, r2
    6730:	1ae4      	subs	r4, r4, r3
    6732:	bfa2      	ittt	ge
    6734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6738:	4329      	orrge	r1, r5
    673a:	bd30      	popge	{r4, r5, pc}
    673c:	ea6f 0404 	mvn.w	r4, r4
    6740:	3c1f      	subs	r4, #31
    6742:	da1c      	bge.n	677e <__adddf3+0x1d2>
    6744:	340c      	adds	r4, #12
    6746:	dc0e      	bgt.n	6766 <__adddf3+0x1ba>
    6748:	f104 0414 	add.w	r4, r4, #20
    674c:	f1c4 0220 	rsb	r2, r4, #32
    6750:	fa20 f004 	lsr.w	r0, r0, r4
    6754:	fa01 f302 	lsl.w	r3, r1, r2
    6758:	ea40 0003 	orr.w	r0, r0, r3
    675c:	fa21 f304 	lsr.w	r3, r1, r4
    6760:	ea45 0103 	orr.w	r1, r5, r3
    6764:	bd30      	pop	{r4, r5, pc}
    6766:	f1c4 040c 	rsb	r4, r4, #12
    676a:	f1c4 0220 	rsb	r2, r4, #32
    676e:	fa20 f002 	lsr.w	r0, r0, r2
    6772:	fa01 f304 	lsl.w	r3, r1, r4
    6776:	ea40 0003 	orr.w	r0, r0, r3
    677a:	4629      	mov	r1, r5
    677c:	bd30      	pop	{r4, r5, pc}
    677e:	fa21 f004 	lsr.w	r0, r1, r4
    6782:	4629      	mov	r1, r5
    6784:	bd30      	pop	{r4, r5, pc}
    6786:	f094 0f00 	teq	r4, #0
    678a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    678e:	bf06      	itte	eq
    6790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    6794:	3401      	addeq	r4, #1
    6796:	3d01      	subne	r5, #1
    6798:	e74e      	b.n	6638 <__adddf3+0x8c>
    679a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    679e:	bf18      	it	ne
    67a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    67a4:	d029      	beq.n	67fa <__adddf3+0x24e>
    67a6:	ea94 0f05 	teq	r4, r5
    67aa:	bf08      	it	eq
    67ac:	ea90 0f02 	teqeq	r0, r2
    67b0:	d005      	beq.n	67be <__adddf3+0x212>
    67b2:	ea54 0c00 	orrs.w	ip, r4, r0
    67b6:	bf04      	itt	eq
    67b8:	4619      	moveq	r1, r3
    67ba:	4610      	moveq	r0, r2
    67bc:	bd30      	pop	{r4, r5, pc}
    67be:	ea91 0f03 	teq	r1, r3
    67c2:	bf1e      	ittt	ne
    67c4:	2100      	movne	r1, #0
    67c6:	2000      	movne	r0, #0
    67c8:	bd30      	popne	{r4, r5, pc}
    67ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    67ce:	d105      	bne.n	67dc <__adddf3+0x230>
    67d0:	0040      	lsls	r0, r0, #1
    67d2:	4149      	adcs	r1, r1
    67d4:	bf28      	it	cs
    67d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    67da:	bd30      	pop	{r4, r5, pc}
    67dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    67e0:	bf3c      	itt	cc
    67e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    67e6:	bd30      	popcc	{r4, r5, pc}
    67e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    67ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    67f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    67f4:	f04f 0000 	mov.w	r0, #0
    67f8:	bd30      	pop	{r4, r5, pc}
    67fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    67fe:	bf1a      	itte	ne
    6800:	4619      	movne	r1, r3
    6802:	4610      	movne	r0, r2
    6804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    6808:	bf1c      	itt	ne
    680a:	460b      	movne	r3, r1
    680c:	4602      	movne	r2, r0
    680e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6812:	bf06      	itte	eq
    6814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6818:	ea91 0f03 	teqeq	r1, r3
    681c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6820:	bd30      	pop	{r4, r5, pc}
    6822:	bf00      	nop

00006824 <__aeabi_ui2d>:
    6824:	f090 0f00 	teq	r0, #0
    6828:	bf04      	itt	eq
    682a:	2100      	moveq	r1, #0
    682c:	4770      	bxeq	lr
    682e:	b530      	push	{r4, r5, lr}
    6830:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6834:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6838:	f04f 0500 	mov.w	r5, #0
    683c:	f04f 0100 	mov.w	r1, #0
    6840:	e750      	b.n	66e4 <__adddf3+0x138>
    6842:	bf00      	nop

00006844 <__aeabi_i2d>:
    6844:	f090 0f00 	teq	r0, #0
    6848:	bf04      	itt	eq
    684a:	2100      	moveq	r1, #0
    684c:	4770      	bxeq	lr
    684e:	b530      	push	{r4, r5, lr}
    6850:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6854:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    685c:	bf48      	it	mi
    685e:	4240      	negmi	r0, r0
    6860:	f04f 0100 	mov.w	r1, #0
    6864:	e73e      	b.n	66e4 <__adddf3+0x138>
    6866:	bf00      	nop

00006868 <__aeabi_f2d>:
    6868:	0042      	lsls	r2, r0, #1
    686a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    686e:	ea4f 0131 	mov.w	r1, r1, rrx
    6872:	ea4f 7002 	mov.w	r0, r2, lsl #28
    6876:	bf1f      	itttt	ne
    6878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    687c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    6884:	4770      	bxne	lr
    6886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    688a:	bf08      	it	eq
    688c:	4770      	bxeq	lr
    688e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    6892:	bf04      	itt	eq
    6894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    6898:	4770      	bxeq	lr
    689a:	b530      	push	{r4, r5, lr}
    689c:	f44f 7460 	mov.w	r4, #896	; 0x380
    68a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    68a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    68a8:	e71c      	b.n	66e4 <__adddf3+0x138>
    68aa:	bf00      	nop

000068ac <__aeabi_ul2d>:
    68ac:	ea50 0201 	orrs.w	r2, r0, r1
    68b0:	bf08      	it	eq
    68b2:	4770      	bxeq	lr
    68b4:	b530      	push	{r4, r5, lr}
    68b6:	f04f 0500 	mov.w	r5, #0
    68ba:	e00a      	b.n	68d2 <__aeabi_l2d+0x16>

000068bc <__aeabi_l2d>:
    68bc:	ea50 0201 	orrs.w	r2, r0, r1
    68c0:	bf08      	it	eq
    68c2:	4770      	bxeq	lr
    68c4:	b530      	push	{r4, r5, lr}
    68c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    68ca:	d502      	bpl.n	68d2 <__aeabi_l2d+0x16>
    68cc:	4240      	negs	r0, r0
    68ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    68d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    68d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    68da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    68de:	f43f aed8 	beq.w	6692 <__adddf3+0xe6>
    68e2:	f04f 0203 	mov.w	r2, #3
    68e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    68ea:	bf18      	it	ne
    68ec:	3203      	addne	r2, #3
    68ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    68f2:	bf18      	it	ne
    68f4:	3203      	addne	r2, #3
    68f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    68fa:	f1c2 0320 	rsb	r3, r2, #32
    68fe:	fa00 fc03 	lsl.w	ip, r0, r3
    6902:	fa20 f002 	lsr.w	r0, r0, r2
    6906:	fa01 fe03 	lsl.w	lr, r1, r3
    690a:	ea40 000e 	orr.w	r0, r0, lr
    690e:	fa21 f102 	lsr.w	r1, r1, r2
    6912:	4414      	add	r4, r2
    6914:	e6bd      	b.n	6692 <__adddf3+0xe6>
    6916:	bf00      	nop

00006918 <__aeabi_d2f>:
    6918:	ea4f 0241 	mov.w	r2, r1, lsl #1
    691c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6920:	bf24      	itt	cs
    6922:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6926:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    692a:	d90d      	bls.n	6948 <__aeabi_d2f+0x30>
    692c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6930:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6934:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6938:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    693c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6940:	bf08      	it	eq
    6942:	f020 0001 	biceq.w	r0, r0, #1
    6946:	4770      	bx	lr
    6948:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    694c:	d121      	bne.n	6992 <__aeabi_d2f+0x7a>
    694e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6952:	bfbc      	itt	lt
    6954:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6958:	4770      	bxlt	lr
    695a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    695e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6962:	f1c2 0218 	rsb	r2, r2, #24
    6966:	f1c2 0c20 	rsb	ip, r2, #32
    696a:	fa10 f30c 	lsls.w	r3, r0, ip
    696e:	fa20 f002 	lsr.w	r0, r0, r2
    6972:	bf18      	it	ne
    6974:	f040 0001 	orrne.w	r0, r0, #1
    6978:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    697c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6980:	fa03 fc0c 	lsl.w	ip, r3, ip
    6984:	ea40 000c 	orr.w	r0, r0, ip
    6988:	fa23 f302 	lsr.w	r3, r3, r2
    698c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6990:	e7cc      	b.n	692c <__aeabi_d2f+0x14>
    6992:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6996:	d107      	bne.n	69a8 <__aeabi_d2f+0x90>
    6998:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    699c:	bf1e      	ittt	ne
    699e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    69a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    69a6:	4770      	bxne	lr
    69a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    69ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    69b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    69b4:	4770      	bx	lr
    69b6:	bf00      	nop

000069b8 <__aeabi_frsub>:
    69b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    69bc:	e002      	b.n	69c4 <__addsf3>
    69be:	bf00      	nop

000069c0 <__aeabi_fsub>:
    69c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000069c4 <__addsf3>:
    69c4:	0042      	lsls	r2, r0, #1
    69c6:	bf1f      	itttt	ne
    69c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    69cc:	ea92 0f03 	teqne	r2, r3
    69d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    69d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    69d8:	d06a      	beq.n	6ab0 <__addsf3+0xec>
    69da:	ea4f 6212 	mov.w	r2, r2, lsr #24
    69de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    69e2:	bfc1      	itttt	gt
    69e4:	18d2      	addgt	r2, r2, r3
    69e6:	4041      	eorgt	r1, r0
    69e8:	4048      	eorgt	r0, r1
    69ea:	4041      	eorgt	r1, r0
    69ec:	bfb8      	it	lt
    69ee:	425b      	neglt	r3, r3
    69f0:	2b19      	cmp	r3, #25
    69f2:	bf88      	it	hi
    69f4:	4770      	bxhi	lr
    69f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    69fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    69fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6a02:	bf18      	it	ne
    6a04:	4240      	negne	r0, r0
    6a06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6a0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6a0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6a12:	bf18      	it	ne
    6a14:	4249      	negne	r1, r1
    6a16:	ea92 0f03 	teq	r2, r3
    6a1a:	d03f      	beq.n	6a9c <__addsf3+0xd8>
    6a1c:	f1a2 0201 	sub.w	r2, r2, #1
    6a20:	fa41 fc03 	asr.w	ip, r1, r3
    6a24:	eb10 000c 	adds.w	r0, r0, ip
    6a28:	f1c3 0320 	rsb	r3, r3, #32
    6a2c:	fa01 f103 	lsl.w	r1, r1, r3
    6a30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6a34:	d502      	bpl.n	6a3c <__addsf3+0x78>
    6a36:	4249      	negs	r1, r1
    6a38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6a3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6a40:	d313      	bcc.n	6a6a <__addsf3+0xa6>
    6a42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6a46:	d306      	bcc.n	6a56 <__addsf3+0x92>
    6a48:	0840      	lsrs	r0, r0, #1
    6a4a:	ea4f 0131 	mov.w	r1, r1, rrx
    6a4e:	f102 0201 	add.w	r2, r2, #1
    6a52:	2afe      	cmp	r2, #254	; 0xfe
    6a54:	d251      	bcs.n	6afa <__addsf3+0x136>
    6a56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6a5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6a5e:	bf08      	it	eq
    6a60:	f020 0001 	biceq.w	r0, r0, #1
    6a64:	ea40 0003 	orr.w	r0, r0, r3
    6a68:	4770      	bx	lr
    6a6a:	0049      	lsls	r1, r1, #1
    6a6c:	eb40 0000 	adc.w	r0, r0, r0
    6a70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    6a74:	f1a2 0201 	sub.w	r2, r2, #1
    6a78:	d1ed      	bne.n	6a56 <__addsf3+0x92>
    6a7a:	fab0 fc80 	clz	ip, r0
    6a7e:	f1ac 0c08 	sub.w	ip, ip, #8
    6a82:	ebb2 020c 	subs.w	r2, r2, ip
    6a86:	fa00 f00c 	lsl.w	r0, r0, ip
    6a8a:	bfaa      	itet	ge
    6a8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6a90:	4252      	neglt	r2, r2
    6a92:	4318      	orrge	r0, r3
    6a94:	bfbc      	itt	lt
    6a96:	40d0      	lsrlt	r0, r2
    6a98:	4318      	orrlt	r0, r3
    6a9a:	4770      	bx	lr
    6a9c:	f092 0f00 	teq	r2, #0
    6aa0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6aa4:	bf06      	itte	eq
    6aa6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6aaa:	3201      	addeq	r2, #1
    6aac:	3b01      	subne	r3, #1
    6aae:	e7b5      	b.n	6a1c <__addsf3+0x58>
    6ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6ab8:	bf18      	it	ne
    6aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6abe:	d021      	beq.n	6b04 <__addsf3+0x140>
    6ac0:	ea92 0f03 	teq	r2, r3
    6ac4:	d004      	beq.n	6ad0 <__addsf3+0x10c>
    6ac6:	f092 0f00 	teq	r2, #0
    6aca:	bf08      	it	eq
    6acc:	4608      	moveq	r0, r1
    6ace:	4770      	bx	lr
    6ad0:	ea90 0f01 	teq	r0, r1
    6ad4:	bf1c      	itt	ne
    6ad6:	2000      	movne	r0, #0
    6ad8:	4770      	bxne	lr
    6ada:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6ade:	d104      	bne.n	6aea <__addsf3+0x126>
    6ae0:	0040      	lsls	r0, r0, #1
    6ae2:	bf28      	it	cs
    6ae4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6ae8:	4770      	bx	lr
    6aea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6aee:	bf3c      	itt	cc
    6af0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6af4:	4770      	bxcc	lr
    6af6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6afa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6b02:	4770      	bx	lr
    6b04:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6b08:	bf16      	itet	ne
    6b0a:	4608      	movne	r0, r1
    6b0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6b10:	4601      	movne	r1, r0
    6b12:	0242      	lsls	r2, r0, #9
    6b14:	bf06      	itte	eq
    6b16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6b1a:	ea90 0f01 	teqeq	r0, r1
    6b1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6b22:	4770      	bx	lr

00006b24 <__aeabi_ui2f>:
    6b24:	f04f 0300 	mov.w	r3, #0
    6b28:	e004      	b.n	6b34 <__aeabi_i2f+0x8>
    6b2a:	bf00      	nop

00006b2c <__aeabi_i2f>:
    6b2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6b30:	bf48      	it	mi
    6b32:	4240      	negmi	r0, r0
    6b34:	ea5f 0c00 	movs.w	ip, r0
    6b38:	bf08      	it	eq
    6b3a:	4770      	bxeq	lr
    6b3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6b40:	4601      	mov	r1, r0
    6b42:	f04f 0000 	mov.w	r0, #0
    6b46:	e01c      	b.n	6b82 <__aeabi_l2f+0x2a>

00006b48 <__aeabi_ul2f>:
    6b48:	ea50 0201 	orrs.w	r2, r0, r1
    6b4c:	bf08      	it	eq
    6b4e:	4770      	bxeq	lr
    6b50:	f04f 0300 	mov.w	r3, #0
    6b54:	e00a      	b.n	6b6c <__aeabi_l2f+0x14>
    6b56:	bf00      	nop

00006b58 <__aeabi_l2f>:
    6b58:	ea50 0201 	orrs.w	r2, r0, r1
    6b5c:	bf08      	it	eq
    6b5e:	4770      	bxeq	lr
    6b60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6b64:	d502      	bpl.n	6b6c <__aeabi_l2f+0x14>
    6b66:	4240      	negs	r0, r0
    6b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6b6c:	ea5f 0c01 	movs.w	ip, r1
    6b70:	bf02      	ittt	eq
    6b72:	4684      	moveq	ip, r0
    6b74:	4601      	moveq	r1, r0
    6b76:	2000      	moveq	r0, #0
    6b78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6b7c:	bf08      	it	eq
    6b7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6b82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6b86:	fabc f28c 	clz	r2, ip
    6b8a:	3a08      	subs	r2, #8
    6b8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6b90:	db10      	blt.n	6bb4 <__aeabi_l2f+0x5c>
    6b92:	fa01 fc02 	lsl.w	ip, r1, r2
    6b96:	4463      	add	r3, ip
    6b98:	fa00 fc02 	lsl.w	ip, r0, r2
    6b9c:	f1c2 0220 	rsb	r2, r2, #32
    6ba0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6ba4:	fa20 f202 	lsr.w	r2, r0, r2
    6ba8:	eb43 0002 	adc.w	r0, r3, r2
    6bac:	bf08      	it	eq
    6bae:	f020 0001 	biceq.w	r0, r0, #1
    6bb2:	4770      	bx	lr
    6bb4:	f102 0220 	add.w	r2, r2, #32
    6bb8:	fa01 fc02 	lsl.w	ip, r1, r2
    6bbc:	f1c2 0220 	rsb	r2, r2, #32
    6bc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6bc4:	fa21 f202 	lsr.w	r2, r1, r2
    6bc8:	eb43 0002 	adc.w	r0, r3, r2
    6bcc:	bf08      	it	eq
    6bce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6bd2:	4770      	bx	lr

00006bd4 <__aeabi_uldivmod>:
    6bd4:	b953      	cbnz	r3, 6bec <__aeabi_uldivmod+0x18>
    6bd6:	b94a      	cbnz	r2, 6bec <__aeabi_uldivmod+0x18>
    6bd8:	2900      	cmp	r1, #0
    6bda:	bf08      	it	eq
    6bdc:	2800      	cmpeq	r0, #0
    6bde:	bf1c      	itt	ne
    6be0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6be4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6be8:	f001 b8f8 	b.w	7ddc <__aeabi_idiv0>
    6bec:	f1ad 0c08 	sub.w	ip, sp, #8
    6bf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6bf4:	f000 f806 	bl	6c04 <__udivmoddi4>
    6bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
    6bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6c00:	b004      	add	sp, #16
    6c02:	4770      	bx	lr

00006c04 <__udivmoddi4>:
    6c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c08:	9e08      	ldr	r6, [sp, #32]
    6c0a:	4604      	mov	r4, r0
    6c0c:	4688      	mov	r8, r1
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d14b      	bne.n	6caa <__udivmoddi4+0xa6>
    6c12:	428a      	cmp	r2, r1
    6c14:	4615      	mov	r5, r2
    6c16:	d967      	bls.n	6ce8 <__udivmoddi4+0xe4>
    6c18:	fab2 f282 	clz	r2, r2
    6c1c:	b14a      	cbz	r2, 6c32 <__udivmoddi4+0x2e>
    6c1e:	f1c2 0720 	rsb	r7, r2, #32
    6c22:	fa01 f302 	lsl.w	r3, r1, r2
    6c26:	fa20 f707 	lsr.w	r7, r0, r7
    6c2a:	4095      	lsls	r5, r2
    6c2c:	ea47 0803 	orr.w	r8, r7, r3
    6c30:	4094      	lsls	r4, r2
    6c32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6c36:	0c23      	lsrs	r3, r4, #16
    6c38:	fbb8 f7fe 	udiv	r7, r8, lr
    6c3c:	fa1f fc85 	uxth.w	ip, r5
    6c40:	fb0e 8817 	mls	r8, lr, r7, r8
    6c44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    6c48:	fb07 f10c 	mul.w	r1, r7, ip
    6c4c:	4299      	cmp	r1, r3
    6c4e:	d909      	bls.n	6c64 <__udivmoddi4+0x60>
    6c50:	18eb      	adds	r3, r5, r3
    6c52:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    6c56:	f080 811b 	bcs.w	6e90 <__udivmoddi4+0x28c>
    6c5a:	4299      	cmp	r1, r3
    6c5c:	f240 8118 	bls.w	6e90 <__udivmoddi4+0x28c>
    6c60:	3f02      	subs	r7, #2
    6c62:	442b      	add	r3, r5
    6c64:	1a5b      	subs	r3, r3, r1
    6c66:	b2a4      	uxth	r4, r4
    6c68:	fbb3 f0fe 	udiv	r0, r3, lr
    6c6c:	fb0e 3310 	mls	r3, lr, r0, r3
    6c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6c74:	fb00 fc0c 	mul.w	ip, r0, ip
    6c78:	45a4      	cmp	ip, r4
    6c7a:	d909      	bls.n	6c90 <__udivmoddi4+0x8c>
    6c7c:	192c      	adds	r4, r5, r4
    6c7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6c82:	f080 8107 	bcs.w	6e94 <__udivmoddi4+0x290>
    6c86:	45a4      	cmp	ip, r4
    6c88:	f240 8104 	bls.w	6e94 <__udivmoddi4+0x290>
    6c8c:	3802      	subs	r0, #2
    6c8e:	442c      	add	r4, r5
    6c90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    6c94:	eba4 040c 	sub.w	r4, r4, ip
    6c98:	2700      	movs	r7, #0
    6c9a:	b11e      	cbz	r6, 6ca4 <__udivmoddi4+0xa0>
    6c9c:	40d4      	lsrs	r4, r2
    6c9e:	2300      	movs	r3, #0
    6ca0:	e9c6 4300 	strd	r4, r3, [r6]
    6ca4:	4639      	mov	r1, r7
    6ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6caa:	428b      	cmp	r3, r1
    6cac:	d909      	bls.n	6cc2 <__udivmoddi4+0xbe>
    6cae:	2e00      	cmp	r6, #0
    6cb0:	f000 80eb 	beq.w	6e8a <__udivmoddi4+0x286>
    6cb4:	2700      	movs	r7, #0
    6cb6:	e9c6 0100 	strd	r0, r1, [r6]
    6cba:	4638      	mov	r0, r7
    6cbc:	4639      	mov	r1, r7
    6cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cc2:	fab3 f783 	clz	r7, r3
    6cc6:	2f00      	cmp	r7, #0
    6cc8:	d147      	bne.n	6d5a <__udivmoddi4+0x156>
    6cca:	428b      	cmp	r3, r1
    6ccc:	d302      	bcc.n	6cd4 <__udivmoddi4+0xd0>
    6cce:	4282      	cmp	r2, r0
    6cd0:	f200 80fa 	bhi.w	6ec8 <__udivmoddi4+0x2c4>
    6cd4:	1a84      	subs	r4, r0, r2
    6cd6:	eb61 0303 	sbc.w	r3, r1, r3
    6cda:	2001      	movs	r0, #1
    6cdc:	4698      	mov	r8, r3
    6cde:	2e00      	cmp	r6, #0
    6ce0:	d0e0      	beq.n	6ca4 <__udivmoddi4+0xa0>
    6ce2:	e9c6 4800 	strd	r4, r8, [r6]
    6ce6:	e7dd      	b.n	6ca4 <__udivmoddi4+0xa0>
    6ce8:	b902      	cbnz	r2, 6cec <__udivmoddi4+0xe8>
    6cea:	deff      	udf	#255	; 0xff
    6cec:	fab2 f282 	clz	r2, r2
    6cf0:	2a00      	cmp	r2, #0
    6cf2:	f040 808f 	bne.w	6e14 <__udivmoddi4+0x210>
    6cf6:	1b49      	subs	r1, r1, r5
    6cf8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6cfc:	fa1f f885 	uxth.w	r8, r5
    6d00:	2701      	movs	r7, #1
    6d02:	fbb1 fcfe 	udiv	ip, r1, lr
    6d06:	0c23      	lsrs	r3, r4, #16
    6d08:	fb0e 111c 	mls	r1, lr, ip, r1
    6d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6d10:	fb08 f10c 	mul.w	r1, r8, ip
    6d14:	4299      	cmp	r1, r3
    6d16:	d907      	bls.n	6d28 <__udivmoddi4+0x124>
    6d18:	18eb      	adds	r3, r5, r3
    6d1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    6d1e:	d202      	bcs.n	6d26 <__udivmoddi4+0x122>
    6d20:	4299      	cmp	r1, r3
    6d22:	f200 80cd 	bhi.w	6ec0 <__udivmoddi4+0x2bc>
    6d26:	4684      	mov	ip, r0
    6d28:	1a59      	subs	r1, r3, r1
    6d2a:	b2a3      	uxth	r3, r4
    6d2c:	fbb1 f0fe 	udiv	r0, r1, lr
    6d30:	fb0e 1410 	mls	r4, lr, r0, r1
    6d34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    6d38:	fb08 f800 	mul.w	r8, r8, r0
    6d3c:	45a0      	cmp	r8, r4
    6d3e:	d907      	bls.n	6d50 <__udivmoddi4+0x14c>
    6d40:	192c      	adds	r4, r5, r4
    6d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6d46:	d202      	bcs.n	6d4e <__udivmoddi4+0x14a>
    6d48:	45a0      	cmp	r8, r4
    6d4a:	f200 80b6 	bhi.w	6eba <__udivmoddi4+0x2b6>
    6d4e:	4618      	mov	r0, r3
    6d50:	eba4 0408 	sub.w	r4, r4, r8
    6d54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6d58:	e79f      	b.n	6c9a <__udivmoddi4+0x96>
    6d5a:	f1c7 0c20 	rsb	ip, r7, #32
    6d5e:	40bb      	lsls	r3, r7
    6d60:	fa22 fe0c 	lsr.w	lr, r2, ip
    6d64:	ea4e 0e03 	orr.w	lr, lr, r3
    6d68:	fa01 f407 	lsl.w	r4, r1, r7
    6d6c:	fa20 f50c 	lsr.w	r5, r0, ip
    6d70:	fa21 f30c 	lsr.w	r3, r1, ip
    6d74:	ea4f 481e 	mov.w	r8, lr, lsr #16
    6d78:	4325      	orrs	r5, r4
    6d7a:	fbb3 f9f8 	udiv	r9, r3, r8
    6d7e:	0c2c      	lsrs	r4, r5, #16
    6d80:	fb08 3319 	mls	r3, r8, r9, r3
    6d84:	fa1f fa8e 	uxth.w	sl, lr
    6d88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    6d8c:	fb09 f40a 	mul.w	r4, r9, sl
    6d90:	429c      	cmp	r4, r3
    6d92:	fa02 f207 	lsl.w	r2, r2, r7
    6d96:	fa00 f107 	lsl.w	r1, r0, r7
    6d9a:	d90b      	bls.n	6db4 <__udivmoddi4+0x1b0>
    6d9c:	eb1e 0303 	adds.w	r3, lr, r3
    6da0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    6da4:	f080 8087 	bcs.w	6eb6 <__udivmoddi4+0x2b2>
    6da8:	429c      	cmp	r4, r3
    6daa:	f240 8084 	bls.w	6eb6 <__udivmoddi4+0x2b2>
    6dae:	f1a9 0902 	sub.w	r9, r9, #2
    6db2:	4473      	add	r3, lr
    6db4:	1b1b      	subs	r3, r3, r4
    6db6:	b2ad      	uxth	r5, r5
    6db8:	fbb3 f0f8 	udiv	r0, r3, r8
    6dbc:	fb08 3310 	mls	r3, r8, r0, r3
    6dc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    6dc4:	fb00 fa0a 	mul.w	sl, r0, sl
    6dc8:	45a2      	cmp	sl, r4
    6dca:	d908      	bls.n	6dde <__udivmoddi4+0x1da>
    6dcc:	eb1e 0404 	adds.w	r4, lr, r4
    6dd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6dd4:	d26b      	bcs.n	6eae <__udivmoddi4+0x2aa>
    6dd6:	45a2      	cmp	sl, r4
    6dd8:	d969      	bls.n	6eae <__udivmoddi4+0x2aa>
    6dda:	3802      	subs	r0, #2
    6ddc:	4474      	add	r4, lr
    6dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    6de2:	fba0 8902 	umull	r8, r9, r0, r2
    6de6:	eba4 040a 	sub.w	r4, r4, sl
    6dea:	454c      	cmp	r4, r9
    6dec:	46c2      	mov	sl, r8
    6dee:	464b      	mov	r3, r9
    6df0:	d354      	bcc.n	6e9c <__udivmoddi4+0x298>
    6df2:	d051      	beq.n	6e98 <__udivmoddi4+0x294>
    6df4:	2e00      	cmp	r6, #0
    6df6:	d069      	beq.n	6ecc <__udivmoddi4+0x2c8>
    6df8:	ebb1 050a 	subs.w	r5, r1, sl
    6dfc:	eb64 0403 	sbc.w	r4, r4, r3
    6e00:	fa04 fc0c 	lsl.w	ip, r4, ip
    6e04:	40fd      	lsrs	r5, r7
    6e06:	40fc      	lsrs	r4, r7
    6e08:	ea4c 0505 	orr.w	r5, ip, r5
    6e0c:	e9c6 5400 	strd	r5, r4, [r6]
    6e10:	2700      	movs	r7, #0
    6e12:	e747      	b.n	6ca4 <__udivmoddi4+0xa0>
    6e14:	f1c2 0320 	rsb	r3, r2, #32
    6e18:	fa20 f703 	lsr.w	r7, r0, r3
    6e1c:	4095      	lsls	r5, r2
    6e1e:	fa01 f002 	lsl.w	r0, r1, r2
    6e22:	fa21 f303 	lsr.w	r3, r1, r3
    6e26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    6e2a:	4338      	orrs	r0, r7
    6e2c:	0c01      	lsrs	r1, r0, #16
    6e2e:	fbb3 f7fe 	udiv	r7, r3, lr
    6e32:	fa1f f885 	uxth.w	r8, r5
    6e36:	fb0e 3317 	mls	r3, lr, r7, r3
    6e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6e3e:	fb07 f308 	mul.w	r3, r7, r8
    6e42:	428b      	cmp	r3, r1
    6e44:	fa04 f402 	lsl.w	r4, r4, r2
    6e48:	d907      	bls.n	6e5a <__udivmoddi4+0x256>
    6e4a:	1869      	adds	r1, r5, r1
    6e4c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    6e50:	d22f      	bcs.n	6eb2 <__udivmoddi4+0x2ae>
    6e52:	428b      	cmp	r3, r1
    6e54:	d92d      	bls.n	6eb2 <__udivmoddi4+0x2ae>
    6e56:	3f02      	subs	r7, #2
    6e58:	4429      	add	r1, r5
    6e5a:	1acb      	subs	r3, r1, r3
    6e5c:	b281      	uxth	r1, r0
    6e5e:	fbb3 f0fe 	udiv	r0, r3, lr
    6e62:	fb0e 3310 	mls	r3, lr, r0, r3
    6e66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6e6a:	fb00 f308 	mul.w	r3, r0, r8
    6e6e:	428b      	cmp	r3, r1
    6e70:	d907      	bls.n	6e82 <__udivmoddi4+0x27e>
    6e72:	1869      	adds	r1, r5, r1
    6e74:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6e78:	d217      	bcs.n	6eaa <__udivmoddi4+0x2a6>
    6e7a:	428b      	cmp	r3, r1
    6e7c:	d915      	bls.n	6eaa <__udivmoddi4+0x2a6>
    6e7e:	3802      	subs	r0, #2
    6e80:	4429      	add	r1, r5
    6e82:	1ac9      	subs	r1, r1, r3
    6e84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    6e88:	e73b      	b.n	6d02 <__udivmoddi4+0xfe>
    6e8a:	4637      	mov	r7, r6
    6e8c:	4630      	mov	r0, r6
    6e8e:	e709      	b.n	6ca4 <__udivmoddi4+0xa0>
    6e90:	4607      	mov	r7, r0
    6e92:	e6e7      	b.n	6c64 <__udivmoddi4+0x60>
    6e94:	4618      	mov	r0, r3
    6e96:	e6fb      	b.n	6c90 <__udivmoddi4+0x8c>
    6e98:	4541      	cmp	r1, r8
    6e9a:	d2ab      	bcs.n	6df4 <__udivmoddi4+0x1f0>
    6e9c:	ebb8 0a02 	subs.w	sl, r8, r2
    6ea0:	eb69 020e 	sbc.w	r2, r9, lr
    6ea4:	3801      	subs	r0, #1
    6ea6:	4613      	mov	r3, r2
    6ea8:	e7a4      	b.n	6df4 <__udivmoddi4+0x1f0>
    6eaa:	4660      	mov	r0, ip
    6eac:	e7e9      	b.n	6e82 <__udivmoddi4+0x27e>
    6eae:	4618      	mov	r0, r3
    6eb0:	e795      	b.n	6dde <__udivmoddi4+0x1da>
    6eb2:	4667      	mov	r7, ip
    6eb4:	e7d1      	b.n	6e5a <__udivmoddi4+0x256>
    6eb6:	4681      	mov	r9, r0
    6eb8:	e77c      	b.n	6db4 <__udivmoddi4+0x1b0>
    6eba:	3802      	subs	r0, #2
    6ebc:	442c      	add	r4, r5
    6ebe:	e747      	b.n	6d50 <__udivmoddi4+0x14c>
    6ec0:	f1ac 0c02 	sub.w	ip, ip, #2
    6ec4:	442b      	add	r3, r5
    6ec6:	e72f      	b.n	6d28 <__udivmoddi4+0x124>
    6ec8:	4638      	mov	r0, r7
    6eca:	e708      	b.n	6cde <__udivmoddi4+0xda>
    6ecc:	4637      	mov	r7, r6
    6ece:	e6e9      	b.n	6ca4 <__udivmoddi4+0xa0>

00006ed0 <selfrel_offset31>:
    6ed0:	6803      	ldr	r3, [r0, #0]
    6ed2:	005a      	lsls	r2, r3, #1
    6ed4:	bf4c      	ite	mi
    6ed6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    6eda:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    6ede:	4418      	add	r0, r3
    6ee0:	4770      	bx	lr
    6ee2:	bf00      	nop

00006ee4 <search_EIT_table>:
    6ee4:	b361      	cbz	r1, 6f40 <search_EIT_table+0x5c>
    6ee6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eea:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    6eee:	4690      	mov	r8, r2
    6ef0:	4606      	mov	r6, r0
    6ef2:	46d1      	mov	r9, sl
    6ef4:	2700      	movs	r7, #0
    6ef6:	eb07 0409 	add.w	r4, r7, r9
    6efa:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    6efe:	1064      	asrs	r4, r4, #1
    6f00:	00e5      	lsls	r5, r4, #3
    6f02:	1971      	adds	r1, r6, r5
    6f04:	4608      	mov	r0, r1
    6f06:	f7ff ffe3 	bl	6ed0 <selfrel_offset31>
    6f0a:	45a2      	cmp	sl, r4
    6f0c:	4683      	mov	fp, r0
    6f0e:	f105 0008 	add.w	r0, r5, #8
    6f12:	4430      	add	r0, r6
    6f14:	d009      	beq.n	6f2a <search_EIT_table+0x46>
    6f16:	f7ff ffdb 	bl	6ed0 <selfrel_offset31>
    6f1a:	45c3      	cmp	fp, r8
    6f1c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    6f20:	d805      	bhi.n	6f2e <search_EIT_table+0x4a>
    6f22:	4540      	cmp	r0, r8
    6f24:	d209      	bcs.n	6f3a <search_EIT_table+0x56>
    6f26:	1c67      	adds	r7, r4, #1
    6f28:	e7e5      	b.n	6ef6 <search_EIT_table+0x12>
    6f2a:	45c3      	cmp	fp, r8
    6f2c:	d905      	bls.n	6f3a <search_EIT_table+0x56>
    6f2e:	42a7      	cmp	r7, r4
    6f30:	d002      	beq.n	6f38 <search_EIT_table+0x54>
    6f32:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    6f36:	e7de      	b.n	6ef6 <search_EIT_table+0x12>
    6f38:	2100      	movs	r1, #0
    6f3a:	4608      	mov	r0, r1
    6f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f40:	4608      	mov	r0, r1
    6f42:	4770      	bx	lr

00006f44 <__gnu_unwind_get_pr_addr>:
    6f44:	2801      	cmp	r0, #1
    6f46:	d007      	beq.n	6f58 <__gnu_unwind_get_pr_addr+0x14>
    6f48:	2802      	cmp	r0, #2
    6f4a:	d007      	beq.n	6f5c <__gnu_unwind_get_pr_addr+0x18>
    6f4c:	4b04      	ldr	r3, [pc, #16]	; (6f60 <__gnu_unwind_get_pr_addr+0x1c>)
    6f4e:	2800      	cmp	r0, #0
    6f50:	bf0c      	ite	eq
    6f52:	4618      	moveq	r0, r3
    6f54:	2000      	movne	r0, #0
    6f56:	4770      	bx	lr
    6f58:	4802      	ldr	r0, [pc, #8]	; (6f64 <__gnu_unwind_get_pr_addr+0x20>)
    6f5a:	4770      	bx	lr
    6f5c:	4802      	ldr	r0, [pc, #8]	; (6f68 <__gnu_unwind_get_pr_addr+0x24>)
    6f5e:	4770      	bx	lr
    6f60:	00007631 	.word	0x00007631
    6f64:	00007635 	.word	0x00007635
    6f68:	00007639 	.word	0x00007639

00006f6c <get_eit_entry>:
    6f6c:	b530      	push	{r4, r5, lr}
    6f6e:	4b25      	ldr	r3, [pc, #148]	; (7004 <get_eit_entry+0x98>)
    6f70:	b083      	sub	sp, #12
    6f72:	4604      	mov	r4, r0
    6f74:	1e8d      	subs	r5, r1, #2
    6f76:	b34b      	cbz	r3, 6fcc <get_eit_entry+0x60>
    6f78:	a901      	add	r1, sp, #4
    6f7a:	4628      	mov	r0, r5
    6f7c:	f3af 8000 	nop.w
    6f80:	b1f0      	cbz	r0, 6fc0 <get_eit_entry+0x54>
    6f82:	9901      	ldr	r1, [sp, #4]
    6f84:	462a      	mov	r2, r5
    6f86:	f7ff ffad 	bl	6ee4 <search_EIT_table>
    6f8a:	4601      	mov	r1, r0
    6f8c:	b1c0      	cbz	r0, 6fc0 <get_eit_entry+0x54>
    6f8e:	f7ff ff9f 	bl	6ed0 <selfrel_offset31>
    6f92:	684b      	ldr	r3, [r1, #4]
    6f94:	64a0      	str	r0, [r4, #72]	; 0x48
    6f96:	2b01      	cmp	r3, #1
    6f98:	d02e      	beq.n	6ff8 <get_eit_entry+0x8c>
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	f101 0004 	add.w	r0, r1, #4
    6fa0:	db26      	blt.n	6ff0 <get_eit_entry+0x84>
    6fa2:	f7ff ff95 	bl	6ed0 <selfrel_offset31>
    6fa6:	2300      	movs	r3, #0
    6fa8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6fac:	6803      	ldr	r3, [r0, #0]
    6fae:	2b00      	cmp	r3, #0
    6fb0:	db12      	blt.n	6fd8 <get_eit_entry+0x6c>
    6fb2:	f7ff ff8d 	bl	6ed0 <selfrel_offset31>
    6fb6:	2300      	movs	r3, #0
    6fb8:	6120      	str	r0, [r4, #16]
    6fba:	4618      	mov	r0, r3
    6fbc:	b003      	add	sp, #12
    6fbe:	bd30      	pop	{r4, r5, pc}
    6fc0:	2300      	movs	r3, #0
    6fc2:	6123      	str	r3, [r4, #16]
    6fc4:	2309      	movs	r3, #9
    6fc6:	4618      	mov	r0, r3
    6fc8:	b003      	add	sp, #12
    6fca:	bd30      	pop	{r4, r5, pc}
    6fcc:	490e      	ldr	r1, [pc, #56]	; (7008 <get_eit_entry+0x9c>)
    6fce:	480f      	ldr	r0, [pc, #60]	; (700c <get_eit_entry+0xa0>)
    6fd0:	1a09      	subs	r1, r1, r0
    6fd2:	10c9      	asrs	r1, r1, #3
    6fd4:	9101      	str	r1, [sp, #4]
    6fd6:	e7d5      	b.n	6f84 <get_eit_entry+0x18>
    6fd8:	f3c3 6003 	ubfx	r0, r3, #24, #4
    6fdc:	f7ff ffb2 	bl	6f44 <__gnu_unwind_get_pr_addr>
    6fe0:	2800      	cmp	r0, #0
    6fe2:	bf14      	ite	ne
    6fe4:	2300      	movne	r3, #0
    6fe6:	2309      	moveq	r3, #9
    6fe8:	6120      	str	r0, [r4, #16]
    6fea:	4618      	mov	r0, r3
    6fec:	b003      	add	sp, #12
    6fee:	bd30      	pop	{r4, r5, pc}
    6ff0:	2301      	movs	r3, #1
    6ff2:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6ff6:	e7d9      	b.n	6fac <get_eit_entry+0x40>
    6ff8:	2300      	movs	r3, #0
    6ffa:	6123      	str	r3, [r4, #16]
    6ffc:	2305      	movs	r3, #5
    6ffe:	4618      	mov	r0, r3
    7000:	b003      	add	sp, #12
    7002:	bd30      	pop	{r4, r5, pc}
    7004:	00000000 	.word	0x00000000
    7008:	000093ec 	.word	0x000093ec
    700c:	00009334 	.word	0x00009334

00007010 <restore_non_core_regs>:
    7010:	6803      	ldr	r3, [r0, #0]
    7012:	07da      	lsls	r2, r3, #31
    7014:	b510      	push	{r4, lr}
    7016:	4604      	mov	r4, r0
    7018:	d406      	bmi.n	7028 <restore_non_core_regs+0x18>
    701a:	079b      	lsls	r3, r3, #30
    701c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    7020:	d509      	bpl.n	7036 <restore_non_core_regs+0x26>
    7022:	f000 fc5f 	bl	78e4 <__gnu_Unwind_Restore_VFP_D>
    7026:	6823      	ldr	r3, [r4, #0]
    7028:	0759      	lsls	r1, r3, #29
    702a:	d509      	bpl.n	7040 <restore_non_core_regs+0x30>
    702c:	071a      	lsls	r2, r3, #28
    702e:	d50e      	bpl.n	704e <restore_non_core_regs+0x3e>
    7030:	06db      	lsls	r3, r3, #27
    7032:	d513      	bpl.n	705c <restore_non_core_regs+0x4c>
    7034:	bd10      	pop	{r4, pc}
    7036:	f000 fc4d 	bl	78d4 <__gnu_Unwind_Restore_VFP>
    703a:	6823      	ldr	r3, [r4, #0]
    703c:	0759      	lsls	r1, r3, #29
    703e:	d4f5      	bmi.n	702c <restore_non_core_regs+0x1c>
    7040:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    7044:	f000 fc56 	bl	78f4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7048:	6823      	ldr	r3, [r4, #0]
    704a:	071a      	lsls	r2, r3, #28
    704c:	d4f0      	bmi.n	7030 <restore_non_core_regs+0x20>
    704e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    7052:	f000 fc57 	bl	7904 <__gnu_Unwind_Restore_WMMXD>
    7056:	6823      	ldr	r3, [r4, #0]
    7058:	06db      	lsls	r3, r3, #27
    705a:	d4eb      	bmi.n	7034 <restore_non_core_regs+0x24>
    705c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    7060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7064:	f000 bc92 	b.w	798c <__gnu_Unwind_Restore_WMMXC>

00007068 <_Unwind_decode_typeinfo_ptr.isra.0>:
    7068:	6803      	ldr	r3, [r0, #0]
    706a:	b103      	cbz	r3, 706e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    706c:	4403      	add	r3, r0
    706e:	4618      	mov	r0, r3
    7070:	4770      	bx	lr
    7072:	bf00      	nop

00007074 <__gnu_unwind_24bit.isra.1>:
    7074:	2009      	movs	r0, #9
    7076:	4770      	bx	lr

00007078 <_Unwind_DebugHook>:
    7078:	4770      	bx	lr
    707a:	bf00      	nop

0000707c <unwind_phase2>:
    707c:	b570      	push	{r4, r5, r6, lr}
    707e:	4604      	mov	r4, r0
    7080:	460d      	mov	r5, r1
    7082:	e008      	b.n	7096 <unwind_phase2+0x1a>
    7084:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    7086:	6163      	str	r3, [r4, #20]
    7088:	462a      	mov	r2, r5
    708a:	6923      	ldr	r3, [r4, #16]
    708c:	4621      	mov	r1, r4
    708e:	2001      	movs	r0, #1
    7090:	4798      	blx	r3
    7092:	2808      	cmp	r0, #8
    7094:	d108      	bne.n	70a8 <unwind_phase2+0x2c>
    7096:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7098:	4620      	mov	r0, r4
    709a:	f7ff ff67 	bl	6f6c <get_eit_entry>
    709e:	4606      	mov	r6, r0
    70a0:	2800      	cmp	r0, #0
    70a2:	d0ef      	beq.n	7084 <unwind_phase2+0x8>
    70a4:	f000 fe9c 	bl	7de0 <abort>
    70a8:	2807      	cmp	r0, #7
    70aa:	d1fb      	bne.n	70a4 <unwind_phase2+0x28>
    70ac:	4630      	mov	r0, r6
    70ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
    70b0:	f7ff ffe2 	bl	7078 <_Unwind_DebugHook>
    70b4:	1d28      	adds	r0, r5, #4
    70b6:	f000 fc01 	bl	78bc <__restore_core_regs>
    70ba:	bf00      	nop

000070bc <unwind_phase2_forced>:
    70bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70c0:	1d0c      	adds	r4, r1, #4
    70c2:	4605      	mov	r5, r0
    70c4:	4617      	mov	r7, r2
    70c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    70c8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    70cc:	ae03      	add	r6, sp, #12
    70ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    70d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    70d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    70d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    70d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    70d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    70dc:	ac02      	add	r4, sp, #8
    70de:	f8d5 800c 	ldr.w	r8, [r5, #12]
    70e2:	f8d5 9018 	ldr.w	r9, [r5, #24]
    70e6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    70ea:	2300      	movs	r3, #0
    70ec:	6023      	str	r3, [r4, #0]
    70ee:	e021      	b.n	7134 <unwind_phase2_forced+0x78>
    70f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    70f2:	616b      	str	r3, [r5, #20]
    70f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    70f8:	4621      	mov	r1, r4
    70fa:	a87a      	add	r0, sp, #488	; 0x1e8
    70fc:	f000 feac 	bl	7e58 <memcpy>
    7100:	692b      	ldr	r3, [r5, #16]
    7102:	aa7a      	add	r2, sp, #488	; 0x1e8
    7104:	4629      	mov	r1, r5
    7106:	4630      	mov	r0, r6
    7108:	4798      	blx	r3
    710a:	9b88      	ldr	r3, [sp, #544]	; 0x220
    710c:	e9cd 4900 	strd	r4, r9, [sp]
    7110:	4682      	mov	sl, r0
    7112:	6463      	str	r3, [r4, #68]	; 0x44
    7114:	4631      	mov	r1, r6
    7116:	462b      	mov	r3, r5
    7118:	462a      	mov	r2, r5
    711a:	2001      	movs	r0, #1
    711c:	47c0      	blx	r8
    711e:	4607      	mov	r7, r0
    7120:	b9f8      	cbnz	r0, 7162 <unwind_phase2_forced+0xa6>
    7122:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7126:	a97a      	add	r1, sp, #488	; 0x1e8
    7128:	4620      	mov	r0, r4
    712a:	f000 fe95 	bl	7e58 <memcpy>
    712e:	f1ba 0f08 	cmp.w	sl, #8
    7132:	d11c      	bne.n	716e <unwind_phase2_forced+0xb2>
    7134:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7136:	4628      	mov	r0, r5
    7138:	f7ff ff18 	bl	6f6c <get_eit_entry>
    713c:	2f00      	cmp	r7, #0
    713e:	bf08      	it	eq
    7140:	2609      	moveq	r6, #9
    7142:	4607      	mov	r7, r0
    7144:	bf18      	it	ne
    7146:	260a      	movne	r6, #10
    7148:	2800      	cmp	r0, #0
    714a:	d0d1      	beq.n	70f0 <unwind_phase2_forced+0x34>
    714c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    714e:	f046 0110 	orr.w	r1, r6, #16
    7152:	e9cd 4900 	strd	r4, r9, [sp]
    7156:	462a      	mov	r2, r5
    7158:	6463      	str	r3, [r4, #68]	; 0x44
    715a:	2001      	movs	r0, #1
    715c:	462b      	mov	r3, r5
    715e:	47c0      	blx	r8
    7160:	b100      	cbz	r0, 7164 <unwind_phase2_forced+0xa8>
    7162:	2709      	movs	r7, #9
    7164:	4638      	mov	r0, r7
    7166:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    716e:	f1ba 0f07 	cmp.w	sl, #7
    7172:	d1f6      	bne.n	7162 <unwind_phase2_forced+0xa6>
    7174:	4638      	mov	r0, r7
    7176:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7178:	f7ff ff7e 	bl	7078 <_Unwind_DebugHook>
    717c:	a803      	add	r0, sp, #12
    717e:	f000 fb9d 	bl	78bc <__restore_core_regs>
    7182:	bf00      	nop

00007184 <_Unwind_GetCFA>:
    7184:	6c40      	ldr	r0, [r0, #68]	; 0x44
    7186:	4770      	bx	lr

00007188 <__gnu_Unwind_RaiseException>:
    7188:	b5f0      	push	{r4, r5, r6, r7, lr}
    718a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    718c:	640b      	str	r3, [r1, #64]	; 0x40
    718e:	1d0d      	adds	r5, r1, #4
    7190:	460f      	mov	r7, r1
    7192:	4606      	mov	r6, r0
    7194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7196:	b0f9      	sub	sp, #484	; 0x1e4
    7198:	ac01      	add	r4, sp, #4
    719a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    719c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    719e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    71a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    71a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    71a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    71a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    71ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    71b0:	9500      	str	r5, [sp, #0]
    71b2:	e006      	b.n	71c2 <__gnu_Unwind_RaiseException+0x3a>
    71b4:	6933      	ldr	r3, [r6, #16]
    71b6:	466a      	mov	r2, sp
    71b8:	4631      	mov	r1, r6
    71ba:	4798      	blx	r3
    71bc:	2808      	cmp	r0, #8
    71be:	4604      	mov	r4, r0
    71c0:	d108      	bne.n	71d4 <__gnu_Unwind_RaiseException+0x4c>
    71c2:	9910      	ldr	r1, [sp, #64]	; 0x40
    71c4:	4630      	mov	r0, r6
    71c6:	f7ff fed1 	bl	6f6c <get_eit_entry>
    71ca:	2800      	cmp	r0, #0
    71cc:	d0f2      	beq.n	71b4 <__gnu_Unwind_RaiseException+0x2c>
    71ce:	2009      	movs	r0, #9
    71d0:	b079      	add	sp, #484	; 0x1e4
    71d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71d4:	4668      	mov	r0, sp
    71d6:	f7ff ff1b 	bl	7010 <restore_non_core_regs>
    71da:	2c06      	cmp	r4, #6
    71dc:	d1f7      	bne.n	71ce <__gnu_Unwind_RaiseException+0x46>
    71de:	4639      	mov	r1, r7
    71e0:	4630      	mov	r0, r6
    71e2:	f7ff ff4b 	bl	707c <unwind_phase2>
    71e6:	bf00      	nop

000071e8 <__gnu_Unwind_ForcedUnwind>:
    71e8:	b430      	push	{r4, r5}
    71ea:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    71ec:	60c1      	str	r1, [r0, #12]
    71ee:	6182      	str	r2, [r0, #24]
    71f0:	4619      	mov	r1, r3
    71f2:	641d      	str	r5, [r3, #64]	; 0x40
    71f4:	2200      	movs	r2, #0
    71f6:	bc30      	pop	{r4, r5}
    71f8:	e760      	b.n	70bc <unwind_phase2_forced>
    71fa:	bf00      	nop

000071fc <__gnu_Unwind_Resume>:
    71fc:	b570      	push	{r4, r5, r6, lr}
    71fe:	68c6      	ldr	r6, [r0, #12]
    7200:	6943      	ldr	r3, [r0, #20]
    7202:	640b      	str	r3, [r1, #64]	; 0x40
    7204:	b9be      	cbnz	r6, 7236 <__gnu_Unwind_Resume+0x3a>
    7206:	6903      	ldr	r3, [r0, #16]
    7208:	460a      	mov	r2, r1
    720a:	4604      	mov	r4, r0
    720c:	460d      	mov	r5, r1
    720e:	4601      	mov	r1, r0
    7210:	2002      	movs	r0, #2
    7212:	4798      	blx	r3
    7214:	2807      	cmp	r0, #7
    7216:	d007      	beq.n	7228 <__gnu_Unwind_Resume+0x2c>
    7218:	2808      	cmp	r0, #8
    721a:	d103      	bne.n	7224 <__gnu_Unwind_Resume+0x28>
    721c:	4629      	mov	r1, r5
    721e:	4620      	mov	r0, r4
    7220:	f7ff ff2c 	bl	707c <unwind_phase2>
    7224:	f000 fddc 	bl	7de0 <abort>
    7228:	4630      	mov	r0, r6
    722a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    722c:	f7ff ff24 	bl	7078 <_Unwind_DebugHook>
    7230:	1d28      	adds	r0, r5, #4
    7232:	f000 fb43 	bl	78bc <__restore_core_regs>
    7236:	2201      	movs	r2, #1
    7238:	f7ff ff40 	bl	70bc <unwind_phase2_forced>
    723c:	f000 fdd0 	bl	7de0 <abort>

00007240 <__gnu_Unwind_Resume_or_Rethrow>:
    7240:	68c2      	ldr	r2, [r0, #12]
    7242:	b11a      	cbz	r2, 724c <__gnu_Unwind_Resume_or_Rethrow+0xc>
    7244:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    7246:	640a      	str	r2, [r1, #64]	; 0x40
    7248:	2200      	movs	r2, #0
    724a:	e737      	b.n	70bc <unwind_phase2_forced>
    724c:	e79c      	b.n	7188 <__gnu_Unwind_RaiseException>
    724e:	bf00      	nop

00007250 <_Unwind_Complete>:
    7250:	4770      	bx	lr
    7252:	bf00      	nop

00007254 <_Unwind_DeleteException>:
    7254:	6883      	ldr	r3, [r0, #8]
    7256:	b113      	cbz	r3, 725e <_Unwind_DeleteException+0xa>
    7258:	4601      	mov	r1, r0
    725a:	2001      	movs	r0, #1
    725c:	4718      	bx	r3
    725e:	4770      	bx	lr

00007260 <_Unwind_VRS_Get>:
    7260:	2904      	cmp	r1, #4
    7262:	d807      	bhi.n	7274 <_Unwind_VRS_Get+0x14>
    7264:	e8df f001 	tbb	[pc, r1]
    7268:	08060803 	.word	0x08060803
    726c:	08          	.byte	0x08
    726d:	00          	.byte	0x00
    726e:	b90b      	cbnz	r3, 7274 <_Unwind_VRS_Get+0x14>
    7270:	2a0f      	cmp	r2, #15
    7272:	d903      	bls.n	727c <_Unwind_VRS_Get+0x1c>
    7274:	2002      	movs	r0, #2
    7276:	4770      	bx	lr
    7278:	2001      	movs	r0, #1
    727a:	4770      	bx	lr
    727c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    7280:	4618      	mov	r0, r3
    7282:	6853      	ldr	r3, [r2, #4]
    7284:	9a00      	ldr	r2, [sp, #0]
    7286:	6013      	str	r3, [r2, #0]
    7288:	4770      	bx	lr
    728a:	bf00      	nop

0000728c <_Unwind_GetGR>:
    728c:	b510      	push	{r4, lr}
    728e:	b084      	sub	sp, #16
    7290:	2300      	movs	r3, #0
    7292:	ac03      	add	r4, sp, #12
    7294:	460a      	mov	r2, r1
    7296:	9400      	str	r4, [sp, #0]
    7298:	4619      	mov	r1, r3
    729a:	f7ff ffe1 	bl	7260 <_Unwind_VRS_Get>
    729e:	9803      	ldr	r0, [sp, #12]
    72a0:	b004      	add	sp, #16
    72a2:	bd10      	pop	{r4, pc}

000072a4 <_Unwind_VRS_Set>:
    72a4:	2904      	cmp	r1, #4
    72a6:	d807      	bhi.n	72b8 <_Unwind_VRS_Set+0x14>
    72a8:	e8df f001 	tbb	[pc, r1]
    72ac:	08060803 	.word	0x08060803
    72b0:	08          	.byte	0x08
    72b1:	00          	.byte	0x00
    72b2:	b90b      	cbnz	r3, 72b8 <_Unwind_VRS_Set+0x14>
    72b4:	2a0f      	cmp	r2, #15
    72b6:	d903      	bls.n	72c0 <_Unwind_VRS_Set+0x1c>
    72b8:	2002      	movs	r0, #2
    72ba:	4770      	bx	lr
    72bc:	2001      	movs	r0, #1
    72be:	4770      	bx	lr
    72c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    72c4:	9a00      	ldr	r2, [sp, #0]
    72c6:	6812      	ldr	r2, [r2, #0]
    72c8:	6042      	str	r2, [r0, #4]
    72ca:	4618      	mov	r0, r3
    72cc:	4770      	bx	lr
    72ce:	bf00      	nop

000072d0 <_Unwind_SetGR>:
    72d0:	b510      	push	{r4, lr}
    72d2:	b084      	sub	sp, #16
    72d4:	ac04      	add	r4, sp, #16
    72d6:	2300      	movs	r3, #0
    72d8:	f844 2d04 	str.w	r2, [r4, #-4]!
    72dc:	460a      	mov	r2, r1
    72de:	9400      	str	r4, [sp, #0]
    72e0:	4619      	mov	r1, r3
    72e2:	f7ff ffdf 	bl	72a4 <_Unwind_VRS_Set>
    72e6:	b004      	add	sp, #16
    72e8:	bd10      	pop	{r4, pc}
    72ea:	bf00      	nop

000072ec <__gnu_Unwind_Backtrace>:
    72ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    72f0:	6413      	str	r3, [r2, #64]	; 0x40
    72f2:	1d15      	adds	r5, r2, #4
    72f4:	4607      	mov	r7, r0
    72f6:	460e      	mov	r6, r1
    72f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72fa:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    72fe:	ac17      	add	r4, sp, #92	; 0x5c
    7300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    730a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    730e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7316:	9516      	str	r5, [sp, #88]	; 0x58
    7318:	e010      	b.n	733c <__gnu_Unwind_Backtrace+0x50>
    731a:	a816      	add	r0, sp, #88	; 0x58
    731c:	f7ff ffd8 	bl	72d0 <_Unwind_SetGR>
    7320:	4631      	mov	r1, r6
    7322:	a816      	add	r0, sp, #88	; 0x58
    7324:	47b8      	blx	r7
    7326:	aa16      	add	r2, sp, #88	; 0x58
    7328:	4669      	mov	r1, sp
    732a:	b978      	cbnz	r0, 734c <__gnu_Unwind_Backtrace+0x60>
    732c:	9b04      	ldr	r3, [sp, #16]
    732e:	2008      	movs	r0, #8
    7330:	4798      	blx	r3
    7332:	2805      	cmp	r0, #5
    7334:	4604      	mov	r4, r0
    7336:	d00a      	beq.n	734e <__gnu_Unwind_Backtrace+0x62>
    7338:	2809      	cmp	r0, #9
    733a:	d007      	beq.n	734c <__gnu_Unwind_Backtrace+0x60>
    733c:	9926      	ldr	r1, [sp, #152]	; 0x98
    733e:	4668      	mov	r0, sp
    7340:	f7ff fe14 	bl	6f6c <get_eit_entry>
    7344:	466a      	mov	r2, sp
    7346:	210c      	movs	r1, #12
    7348:	2800      	cmp	r0, #0
    734a:	d0e6      	beq.n	731a <__gnu_Unwind_Backtrace+0x2e>
    734c:	2409      	movs	r4, #9
    734e:	a816      	add	r0, sp, #88	; 0x58
    7350:	f7ff fe5e 	bl	7010 <restore_non_core_regs>
    7354:	4620      	mov	r0, r4
    7356:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    735a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000735c <__gnu_unwind_pr_common>:
    735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7360:	460d      	mov	r5, r1
    7362:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    7364:	b089      	sub	sp, #36	; 0x24
    7366:	1d0c      	adds	r4, r1, #4
    7368:	4616      	mov	r6, r2
    736a:	f000 0b03 	and.w	fp, r0, #3
    736e:	680a      	ldr	r2, [r1, #0]
    7370:	9406      	str	r4, [sp, #24]
    7372:	461f      	mov	r7, r3
    7374:	2b00      	cmp	r3, #0
    7376:	d068      	beq.n	744a <__gnu_unwind_pr_common+0xee>
    7378:	0c13      	lsrs	r3, r2, #16
    737a:	b2d9      	uxtb	r1, r3
    737c:	0412      	lsls	r2, r2, #16
    737e:	f88d 301d 	strb.w	r3, [sp, #29]
    7382:	2302      	movs	r3, #2
    7384:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    7388:	9205      	str	r2, [sp, #20]
    738a:	f88d 301c 	strb.w	r3, [sp, #28]
    738e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7390:	f1bb 0f02 	cmp.w	fp, #2
    7394:	bf08      	it	eq
    7396:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    7398:	f013 0301 	ands.w	r3, r3, #1
    739c:	d146      	bne.n	742c <__gnu_unwind_pr_common+0xd0>
    739e:	9301      	str	r3, [sp, #4]
    73a0:	f000 0308 	and.w	r3, r0, #8
    73a4:	9300      	str	r3, [sp, #0]
    73a6:	f8d4 9000 	ldr.w	r9, [r4]
    73aa:	f1b9 0f00 	cmp.w	r9, #0
    73ae:	f000 80f3 	beq.w	7598 <__gnu_unwind_pr_common+0x23c>
    73b2:	2f02      	cmp	r7, #2
    73b4:	d045      	beq.n	7442 <__gnu_unwind_pr_common+0xe6>
    73b6:	f8b4 9000 	ldrh.w	r9, [r4]
    73ba:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    73be:	3404      	adds	r4, #4
    73c0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    73c2:	f028 0a01 	bic.w	sl, r8, #1
    73c6:	210f      	movs	r1, #15
    73c8:	4630      	mov	r0, r6
    73ca:	449a      	add	sl, r3
    73cc:	f7ff ff5e 	bl	728c <_Unwind_GetGR>
    73d0:	4582      	cmp	sl, r0
    73d2:	d834      	bhi.n	743e <__gnu_unwind_pr_common+0xe2>
    73d4:	f029 0301 	bic.w	r3, r9, #1
    73d8:	4453      	add	r3, sl
    73da:	4283      	cmp	r3, r0
    73dc:	bf94      	ite	ls
    73de:	2000      	movls	r0, #0
    73e0:	2001      	movhi	r0, #1
    73e2:	ea4f 0848 	mov.w	r8, r8, lsl #1
    73e6:	f008 0802 	and.w	r8, r8, #2
    73ea:	f009 0901 	and.w	r9, r9, #1
    73ee:	ea48 0809 	orr.w	r8, r8, r9
    73f2:	f1b8 0f01 	cmp.w	r8, #1
    73f6:	d03a      	beq.n	746e <__gnu_unwind_pr_common+0x112>
    73f8:	d331      	bcc.n	745e <__gnu_unwind_pr_common+0x102>
    73fa:	f1b8 0f02 	cmp.w	r8, #2
    73fe:	d11a      	bne.n	7436 <__gnu_unwind_pr_common+0xda>
    7400:	6823      	ldr	r3, [r4, #0]
    7402:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    7406:	f1bb 0f00 	cmp.w	fp, #0
    740a:	d166      	bne.n	74da <__gnu_unwind_pr_common+0x17e>
    740c:	b130      	cbz	r0, 741c <__gnu_unwind_pr_common+0xc0>
    740e:	9a00      	ldr	r2, [sp, #0]
    7410:	2a00      	cmp	r2, #0
    7412:	d06c      	beq.n	74ee <__gnu_unwind_pr_common+0x192>
    7414:	f1ba 0f00 	cmp.w	sl, #0
    7418:	f000 8090 	beq.w	753c <__gnu_unwind_pr_common+0x1e0>
    741c:	2b00      	cmp	r3, #0
    741e:	da00      	bge.n	7422 <__gnu_unwind_pr_common+0xc6>
    7420:	3404      	adds	r4, #4
    7422:	f10a 0301 	add.w	r3, sl, #1
    7426:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    742a:	e7bc      	b.n	73a6 <__gnu_unwind_pr_common+0x4a>
    742c:	4630      	mov	r0, r6
    742e:	a905      	add	r1, sp, #20
    7430:	f000 fb46 	bl	7ac0 <__gnu_unwind_execute>
    7434:	b178      	cbz	r0, 7456 <__gnu_unwind_pr_common+0xfa>
    7436:	2009      	movs	r0, #9
    7438:	b009      	add	sp, #36	; 0x24
    743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    743e:	2000      	movs	r0, #0
    7440:	e7cf      	b.n	73e2 <__gnu_unwind_pr_common+0x86>
    7442:	f8d4 8004 	ldr.w	r8, [r4, #4]
    7446:	3408      	adds	r4, #8
    7448:	e7ba      	b.n	73c0 <__gnu_unwind_pr_common+0x64>
    744a:	0212      	lsls	r2, r2, #8
    744c:	2303      	movs	r3, #3
    744e:	9205      	str	r2, [sp, #20]
    7450:	f8ad 301c 	strh.w	r3, [sp, #28]
    7454:	e79b      	b.n	738e <__gnu_unwind_pr_common+0x32>
    7456:	2008      	movs	r0, #8
    7458:	b009      	add	sp, #36	; 0x24
    745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    745e:	f1bb 0f00 	cmp.w	fp, #0
    7462:	d002      	beq.n	746a <__gnu_unwind_pr_common+0x10e>
    7464:	2800      	cmp	r0, #0
    7466:	f040 80b4 	bne.w	75d2 <__gnu_unwind_pr_common+0x276>
    746a:	3404      	adds	r4, #4
    746c:	e79b      	b.n	73a6 <__gnu_unwind_pr_common+0x4a>
    746e:	f1bb 0f00 	cmp.w	fp, #0
    7472:	d118      	bne.n	74a6 <__gnu_unwind_pr_common+0x14a>
    7474:	b1a8      	cbz	r0, 74a2 <__gnu_unwind_pr_common+0x146>
    7476:	e9d4 2300 	ldrd	r2, r3, [r4]
    747a:	1c99      	adds	r1, r3, #2
    747c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    7480:	d0d9      	beq.n	7436 <__gnu_unwind_pr_common+0xda>
    7482:	f105 0158 	add.w	r1, r5, #88	; 0x58
    7486:	3301      	adds	r3, #1
    7488:	9104      	str	r1, [sp, #16]
    748a:	f000 80b5 	beq.w	75f8 <__gnu_unwind_pr_common+0x29c>
    748e:	1d20      	adds	r0, r4, #4
    7490:	f7ff fdea 	bl	7068 <_Unwind_decode_typeinfo_ptr.isra.0>
    7494:	ab04      	add	r3, sp, #16
    7496:	4601      	mov	r1, r0
    7498:	4628      	mov	r0, r5
    749a:	f3af 8000 	nop.w
    749e:	2800      	cmp	r0, #0
    74a0:	d167      	bne.n	7572 <__gnu_unwind_pr_common+0x216>
    74a2:	3408      	adds	r4, #8
    74a4:	e77f      	b.n	73a6 <__gnu_unwind_pr_common+0x4a>
    74a6:	210d      	movs	r1, #13
    74a8:	4630      	mov	r0, r6
    74aa:	f8d5 8020 	ldr.w	r8, [r5, #32]
    74ae:	f7ff feed 	bl	728c <_Unwind_GetGR>
    74b2:	4580      	cmp	r8, r0
    74b4:	d1f5      	bne.n	74a2 <__gnu_unwind_pr_common+0x146>
    74b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    74b8:	429c      	cmp	r4, r3
    74ba:	d1f2      	bne.n	74a2 <__gnu_unwind_pr_common+0x146>
    74bc:	4620      	mov	r0, r4
    74be:	f7ff fd07 	bl	6ed0 <selfrel_offset31>
    74c2:	210f      	movs	r1, #15
    74c4:	4602      	mov	r2, r0
    74c6:	4630      	mov	r0, r6
    74c8:	f7ff ff02 	bl	72d0 <_Unwind_SetGR>
    74cc:	4630      	mov	r0, r6
    74ce:	462a      	mov	r2, r5
    74d0:	2100      	movs	r1, #0
    74d2:	f7ff fefd 	bl	72d0 <_Unwind_SetGR>
    74d6:	2007      	movs	r0, #7
    74d8:	e7ae      	b.n	7438 <__gnu_unwind_pr_common+0xdc>
    74da:	210d      	movs	r1, #13
    74dc:	4630      	mov	r0, r6
    74de:	f8d5 8020 	ldr.w	r8, [r5, #32]
    74e2:	f7ff fed3 	bl	728c <_Unwind_GetGR>
    74e6:	4580      	cmp	r8, r0
    74e8:	d032      	beq.n	7550 <__gnu_unwind_pr_common+0x1f4>
    74ea:	6823      	ldr	r3, [r4, #0]
    74ec:	e796      	b.n	741c <__gnu_unwind_pr_common+0xc0>
    74ee:	f1ba 0f00 	cmp.w	sl, #0
    74f2:	d023      	beq.n	753c <__gnu_unwind_pr_common+0x1e0>
    74f4:	f105 0358 	add.w	r3, r5, #88	; 0x58
    74f8:	f104 0804 	add.w	r8, r4, #4
    74fc:	f8cd b008 	str.w	fp, [sp, #8]
    7500:	f8dd 9000 	ldr.w	r9, [sp]
    7504:	9703      	str	r7, [sp, #12]
    7506:	46a3      	mov	fp, r4
    7508:	461c      	mov	r4, r3
    750a:	e002      	b.n	7512 <__gnu_unwind_pr_common+0x1b6>
    750c:	4557      	cmp	r7, sl
    750e:	46b9      	mov	r9, r7
    7510:	d040      	beq.n	7594 <__gnu_unwind_pr_common+0x238>
    7512:	4640      	mov	r0, r8
    7514:	9404      	str	r4, [sp, #16]
    7516:	f7ff fda7 	bl	7068 <_Unwind_decode_typeinfo_ptr.isra.0>
    751a:	ab04      	add	r3, sp, #16
    751c:	4601      	mov	r1, r0
    751e:	2200      	movs	r2, #0
    7520:	4628      	mov	r0, r5
    7522:	f3af 8000 	nop.w
    7526:	f109 0701 	add.w	r7, r9, #1
    752a:	f108 0804 	add.w	r8, r8, #4
    752e:	2800      	cmp	r0, #0
    7530:	d0ec      	beq.n	750c <__gnu_unwind_pr_common+0x1b0>
    7532:	45d1      	cmp	r9, sl
    7534:	465c      	mov	r4, fp
    7536:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    753a:	d1d6      	bne.n	74ea <__gnu_unwind_pr_common+0x18e>
    753c:	4630      	mov	r0, r6
    753e:	210d      	movs	r1, #13
    7540:	f7ff fea4 	bl	728c <_Unwind_GetGR>
    7544:	9b04      	ldr	r3, [sp, #16]
    7546:	6228      	str	r0, [r5, #32]
    7548:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    754c:	2006      	movs	r0, #6
    754e:	e773      	b.n	7438 <__gnu_unwind_pr_common+0xdc>
    7550:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7552:	429c      	cmp	r4, r3
    7554:	d1c9      	bne.n	74ea <__gnu_unwind_pr_common+0x18e>
    7556:	2204      	movs	r2, #4
    7558:	f04f 0800 	mov.w	r8, #0
    755c:	18a3      	adds	r3, r4, r2
    755e:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    7562:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    7566:	6823      	ldr	r3, [r4, #0]
    7568:	4543      	cmp	r3, r8
    756a:	db4d      	blt.n	7608 <__gnu_unwind_pr_common+0x2ac>
    756c:	2301      	movs	r3, #1
    756e:	9301      	str	r3, [sp, #4]
    7570:	e757      	b.n	7422 <__gnu_unwind_pr_common+0xc6>
    7572:	4680      	mov	r8, r0
    7574:	210d      	movs	r1, #13
    7576:	4630      	mov	r0, r6
    7578:	f7ff fe88 	bl	728c <_Unwind_GetGR>
    757c:	f1b8 0f02 	cmp.w	r8, #2
    7580:	6228      	str	r0, [r5, #32]
    7582:	d13e      	bne.n	7602 <__gnu_unwind_pr_common+0x2a6>
    7584:	462b      	mov	r3, r5
    7586:	9a04      	ldr	r2, [sp, #16]
    7588:	f843 2f2c 	str.w	r2, [r3, #44]!
    758c:	626b      	str	r3, [r5, #36]	; 0x24
    758e:	62ac      	str	r4, [r5, #40]	; 0x28
    7590:	2006      	movs	r0, #6
    7592:	e751      	b.n	7438 <__gnu_unwind_pr_common+0xdc>
    7594:	465c      	mov	r4, fp
    7596:	e7d1      	b.n	753c <__gnu_unwind_pr_common+0x1e0>
    7598:	a905      	add	r1, sp, #20
    759a:	4630      	mov	r0, r6
    759c:	f000 fa90 	bl	7ac0 <__gnu_unwind_execute>
    75a0:	2800      	cmp	r0, #0
    75a2:	f47f af48 	bne.w	7436 <__gnu_unwind_pr_common+0xda>
    75a6:	9b01      	ldr	r3, [sp, #4]
    75a8:	2b00      	cmp	r3, #0
    75aa:	f43f af54 	beq.w	7456 <__gnu_unwind_pr_common+0xfa>
    75ae:	210f      	movs	r1, #15
    75b0:	4630      	mov	r0, r6
    75b2:	f7ff fe6b 	bl	728c <_Unwind_GetGR>
    75b6:	210e      	movs	r1, #14
    75b8:	4602      	mov	r2, r0
    75ba:	4630      	mov	r0, r6
    75bc:	f7ff fe88 	bl	72d0 <_Unwind_SetGR>
    75c0:	4630      	mov	r0, r6
    75c2:	4a1a      	ldr	r2, [pc, #104]	; (762c <__gnu_unwind_pr_common+0x2d0>)
    75c4:	210f      	movs	r1, #15
    75c6:	f7ff fe83 	bl	72d0 <_Unwind_SetGR>
    75ca:	2007      	movs	r0, #7
    75cc:	b009      	add	sp, #36	; 0x24
    75ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75d2:	4620      	mov	r0, r4
    75d4:	f7ff fc7c 	bl	6ed0 <selfrel_offset31>
    75d8:	3404      	adds	r4, #4
    75da:	4607      	mov	r7, r0
    75dc:	63ac      	str	r4, [r5, #56]	; 0x38
    75de:	4628      	mov	r0, r5
    75e0:	f3af 8000 	nop.w
    75e4:	2800      	cmp	r0, #0
    75e6:	f43f af26 	beq.w	7436 <__gnu_unwind_pr_common+0xda>
    75ea:	4630      	mov	r0, r6
    75ec:	463a      	mov	r2, r7
    75ee:	210f      	movs	r1, #15
    75f0:	f7ff fe6e 	bl	72d0 <_Unwind_SetGR>
    75f4:	2007      	movs	r0, #7
    75f6:	e71f      	b.n	7438 <__gnu_unwind_pr_common+0xdc>
    75f8:	4630      	mov	r0, r6
    75fa:	210d      	movs	r1, #13
    75fc:	f7ff fe46 	bl	728c <_Unwind_GetGR>
    7600:	6228      	str	r0, [r5, #32]
    7602:	9b04      	ldr	r3, [sp, #16]
    7604:	626b      	str	r3, [r5, #36]	; 0x24
    7606:	e7c2      	b.n	758e <__gnu_unwind_pr_common+0x232>
    7608:	f10a 0001 	add.w	r0, sl, #1
    760c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7610:	f7ff fc5e 	bl	6ed0 <selfrel_offset31>
    7614:	210f      	movs	r1, #15
    7616:	4602      	mov	r2, r0
    7618:	4630      	mov	r0, r6
    761a:	f7ff fe59 	bl	72d0 <_Unwind_SetGR>
    761e:	4630      	mov	r0, r6
    7620:	462a      	mov	r2, r5
    7622:	4641      	mov	r1, r8
    7624:	f7ff fe54 	bl	72d0 <_Unwind_SetGR>
    7628:	2007      	movs	r0, #7
    762a:	e705      	b.n	7438 <__gnu_unwind_pr_common+0xdc>
    762c:	00000000 	.word	0x00000000

00007630 <__aeabi_unwind_cpp_pr0>:
    7630:	2300      	movs	r3, #0
    7632:	e693      	b.n	735c <__gnu_unwind_pr_common>

00007634 <__aeabi_unwind_cpp_pr1>:
    7634:	2301      	movs	r3, #1
    7636:	e691      	b.n	735c <__gnu_unwind_pr_common>

00007638 <__aeabi_unwind_cpp_pr2>:
    7638:	2302      	movs	r3, #2
    763a:	e68f      	b.n	735c <__gnu_unwind_pr_common>

0000763c <_Unwind_VRS_Pop>:
    763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7640:	4605      	mov	r5, r0
    7642:	b0c4      	sub	sp, #272	; 0x110
    7644:	2904      	cmp	r1, #4
    7646:	d806      	bhi.n	7656 <_Unwind_VRS_Pop+0x1a>
    7648:	e8df f001 	tbb	[pc, r1]
    764c:	03052b4d 	.word	0x03052b4d
    7650:	09          	.byte	0x09
    7651:	00          	.byte	0x00
    7652:	2b03      	cmp	r3, #3
    7654:	d05f      	beq.n	7716 <_Unwind_VRS_Pop+0xda>
    7656:	2002      	movs	r0, #2
    7658:	b044      	add	sp, #272	; 0x110
    765a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    765e:	2b00      	cmp	r3, #0
    7660:	d1f9      	bne.n	7656 <_Unwind_VRS_Pop+0x1a>
    7662:	2a10      	cmp	r2, #16
    7664:	d8f7      	bhi.n	7656 <_Unwind_VRS_Pop+0x1a>
    7666:	682b      	ldr	r3, [r5, #0]
    7668:	06dc      	lsls	r4, r3, #27
    766a:	f100 80f4 	bmi.w	7856 <_Unwind_VRS_Pop+0x21a>
    766e:	ac22      	add	r4, sp, #136	; 0x88
    7670:	4620      	mov	r0, r4
    7672:	9201      	str	r2, [sp, #4]
    7674:	f000 f994 	bl	79a0 <__gnu_Unwind_Save_WMMXC>
    7678:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    767a:	9a01      	ldr	r2, [sp, #4]
    767c:	2300      	movs	r3, #0
    767e:	2601      	movs	r6, #1
    7680:	fa06 f103 	lsl.w	r1, r6, r3
    7684:	4211      	tst	r1, r2
    7686:	d003      	beq.n	7690 <_Unwind_VRS_Pop+0x54>
    7688:	6801      	ldr	r1, [r0, #0]
    768a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    768e:	3004      	adds	r0, #4
    7690:	3301      	adds	r3, #1
    7692:	2b04      	cmp	r3, #4
    7694:	d1f4      	bne.n	7680 <_Unwind_VRS_Pop+0x44>
    7696:	63a8      	str	r0, [r5, #56]	; 0x38
    7698:	4620      	mov	r0, r4
    769a:	f000 f977 	bl	798c <__gnu_Unwind_Restore_WMMXC>
    769e:	2000      	movs	r0, #0
    76a0:	e7da      	b.n	7658 <_Unwind_VRS_Pop+0x1c>
    76a2:	2b01      	cmp	r3, #1
    76a4:	ea4f 4612 	mov.w	r6, r2, lsr #16
    76a8:	b297      	uxth	r7, r2
    76aa:	d052      	beq.n	7752 <_Unwind_VRS_Pop+0x116>
    76ac:	2b05      	cmp	r3, #5
    76ae:	d1d2      	bne.n	7656 <_Unwind_VRS_Pop+0x1a>
    76b0:	eb06 0807 	add.w	r8, r6, r7
    76b4:	f1b8 0f20 	cmp.w	r8, #32
    76b8:	d8cd      	bhi.n	7656 <_Unwind_VRS_Pop+0x1a>
    76ba:	2e0f      	cmp	r6, #15
    76bc:	f240 8099 	bls.w	77f2 <_Unwind_VRS_Pop+0x1b6>
    76c0:	46b8      	mov	r8, r7
    76c2:	2f00      	cmp	r7, #0
    76c4:	f040 80db 	bne.w	787e <_Unwind_VRS_Pop+0x242>
    76c8:	6baa      	ldr	r2, [r5, #56]	; 0x38
    76ca:	63aa      	str	r2, [r5, #56]	; 0x38
    76cc:	2e0f      	cmp	r6, #15
    76ce:	f240 80be 	bls.w	784e <_Unwind_VRS_Pop+0x212>
    76d2:	f1b8 0f00 	cmp.w	r8, #0
    76d6:	d002      	beq.n	76de <_Unwind_VRS_Pop+0xa2>
    76d8:	a802      	add	r0, sp, #8
    76da:	f000 f90b 	bl	78f4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    76de:	2000      	movs	r0, #0
    76e0:	b044      	add	sp, #272	; 0x110
    76e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76e6:	2b00      	cmp	r3, #0
    76e8:	d1b5      	bne.n	7656 <_Unwind_VRS_Pop+0x1a>
    76ea:	6bac      	ldr	r4, [r5, #56]	; 0x38
    76ec:	b297      	uxth	r7, r2
    76ee:	1d28      	adds	r0, r5, #4
    76f0:	2601      	movs	r6, #1
    76f2:	fa06 f103 	lsl.w	r1, r6, r3
    76f6:	4239      	tst	r1, r7
    76f8:	f103 0301 	add.w	r3, r3, #1
    76fc:	d002      	beq.n	7704 <_Unwind_VRS_Pop+0xc8>
    76fe:	6821      	ldr	r1, [r4, #0]
    7700:	6001      	str	r1, [r0, #0]
    7702:	3404      	adds	r4, #4
    7704:	2b10      	cmp	r3, #16
    7706:	f100 0004 	add.w	r0, r0, #4
    770a:	d1f2      	bne.n	76f2 <_Unwind_VRS_Pop+0xb6>
    770c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    7710:	d1e5      	bne.n	76de <_Unwind_VRS_Pop+0xa2>
    7712:	63ac      	str	r4, [r5, #56]	; 0x38
    7714:	e7a0      	b.n	7658 <_Unwind_VRS_Pop+0x1c>
    7716:	0c16      	lsrs	r6, r2, #16
    7718:	b297      	uxth	r7, r2
    771a:	19f3      	adds	r3, r6, r7
    771c:	2b10      	cmp	r3, #16
    771e:	d89a      	bhi.n	7656 <_Unwind_VRS_Pop+0x1a>
    7720:	682b      	ldr	r3, [r5, #0]
    7722:	071a      	lsls	r2, r3, #28
    7724:	d45d      	bmi.n	77e2 <_Unwind_VRS_Pop+0x1a6>
    7726:	ac22      	add	r4, sp, #136	; 0x88
    7728:	4620      	mov	r0, r4
    772a:	f000 f90d 	bl	7948 <__gnu_Unwind_Save_WMMXD>
    772e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    7732:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7734:	b13f      	cbz	r7, 7746 <_Unwind_VRS_Pop+0x10a>
    7736:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    773a:	6818      	ldr	r0, [r3, #0]
    773c:	f841 0b04 	str.w	r0, [r1], #4
    7740:	3304      	adds	r3, #4
    7742:	4293      	cmp	r3, r2
    7744:	d1f9      	bne.n	773a <_Unwind_VRS_Pop+0xfe>
    7746:	4620      	mov	r0, r4
    7748:	63ab      	str	r3, [r5, #56]	; 0x38
    774a:	f000 f8db 	bl	7904 <__gnu_Unwind_Restore_WMMXD>
    774e:	2000      	movs	r0, #0
    7750:	e782      	b.n	7658 <_Unwind_VRS_Pop+0x1c>
    7752:	19f2      	adds	r2, r6, r7
    7754:	2a10      	cmp	r2, #16
    7756:	f63f af7e 	bhi.w	7656 <_Unwind_VRS_Pop+0x1a>
    775a:	2e0f      	cmp	r6, #15
    775c:	f63f af7b 	bhi.w	7656 <_Unwind_VRS_Pop+0x1a>
    7760:	682a      	ldr	r2, [r5, #0]
    7762:	07d1      	lsls	r1, r2, #31
    7764:	d508      	bpl.n	7778 <_Unwind_VRS_Pop+0x13c>
    7766:	4628      	mov	r0, r5
    7768:	f022 0203 	bic.w	r2, r2, #3
    776c:	f840 2b48 	str.w	r2, [r0], #72
    7770:	9301      	str	r3, [sp, #4]
    7772:	f000 f8b3 	bl	78dc <__gnu_Unwind_Save_VFP>
    7776:	9b01      	ldr	r3, [sp, #4]
    7778:	9301      	str	r3, [sp, #4]
    777a:	ac22      	add	r4, sp, #136	; 0x88
    777c:	4620      	mov	r0, r4
    777e:	f000 f8ad 	bl	78dc <__gnu_Unwind_Save_VFP>
    7782:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7784:	9b01      	ldr	r3, [sp, #4]
    7786:	2f00      	cmp	r7, #0
    7788:	f000 8095 	beq.w	78b6 <_Unwind_VRS_Pop+0x27a>
    778c:	007f      	lsls	r7, r7, #1
    778e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    7792:	f04f 0800 	mov.w	r8, #0
    7796:	3c04      	subs	r4, #4
    7798:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    779c:	f851 0b04 	ldr.w	r0, [r1], #4
    77a0:	f844 0f04 	str.w	r0, [r4, #4]!
    77a4:	4291      	cmp	r1, r2
    77a6:	d1f9      	bne.n	779c <_Unwind_VRS_Pop+0x160>
    77a8:	f1b8 0f00 	cmp.w	r8, #0
    77ac:	d00f      	beq.n	77ce <_Unwind_VRS_Pop+0x192>
    77ae:	ac02      	add	r4, sp, #8
    77b0:	2e10      	cmp	r6, #16
    77b2:	4631      	mov	r1, r6
    77b4:	bf38      	it	cc
    77b6:	2110      	movcc	r1, #16
    77b8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    77bc:	3984      	subs	r1, #132	; 0x84
    77be:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    77c2:	f852 0b04 	ldr.w	r0, [r2], #4
    77c6:	f841 0f04 	str.w	r0, [r1, #4]!
    77ca:	4294      	cmp	r4, r2
    77cc:	d1f9      	bne.n	77c2 <_Unwind_VRS_Pop+0x186>
    77ce:	2b01      	cmp	r3, #1
    77d0:	f47f af7b 	bne.w	76ca <_Unwind_VRS_Pop+0x8e>
    77d4:	ac22      	add	r4, sp, #136	; 0x88
    77d6:	3204      	adds	r2, #4
    77d8:	63aa      	str	r2, [r5, #56]	; 0x38
    77da:	4620      	mov	r0, r4
    77dc:	f000 f87a 	bl	78d4 <__gnu_Unwind_Restore_VFP>
    77e0:	e77d      	b.n	76de <_Unwind_VRS_Pop+0xa2>
    77e2:	f023 0308 	bic.w	r3, r3, #8
    77e6:	602b      	str	r3, [r5, #0]
    77e8:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    77ec:	f000 f8ac 	bl	7948 <__gnu_Unwind_Save_WMMXD>
    77f0:	e799      	b.n	7726 <_Unwind_VRS_Pop+0xea>
    77f2:	f1b8 0f10 	cmp.w	r8, #16
    77f6:	682a      	ldr	r2, [r5, #0]
    77f8:	d943      	bls.n	7882 <_Unwind_VRS_Pop+0x246>
    77fa:	07d0      	lsls	r0, r2, #31
    77fc:	f1a8 0810 	sub.w	r8, r8, #16
    7800:	d50b      	bpl.n	781a <_Unwind_VRS_Pop+0x1de>
    7802:	4628      	mov	r0, r5
    7804:	f022 0201 	bic.w	r2, r2, #1
    7808:	f042 0202 	orr.w	r2, r2, #2
    780c:	f840 2b48 	str.w	r2, [r0], #72
    7810:	9301      	str	r3, [sp, #4]
    7812:	f000 f86b 	bl	78ec <__gnu_Unwind_Save_VFP_D>
    7816:	682a      	ldr	r2, [r5, #0]
    7818:	9b01      	ldr	r3, [sp, #4]
    781a:	0751      	lsls	r1, r2, #29
    781c:	d425      	bmi.n	786a <_Unwind_VRS_Pop+0x22e>
    781e:	2e0f      	cmp	r6, #15
    7820:	d804      	bhi.n	782c <_Unwind_VRS_Pop+0x1f0>
    7822:	a822      	add	r0, sp, #136	; 0x88
    7824:	9301      	str	r3, [sp, #4]
    7826:	f000 f861 	bl	78ec <__gnu_Unwind_Save_VFP_D>
    782a:	9b01      	ldr	r3, [sp, #4]
    782c:	9301      	str	r3, [sp, #4]
    782e:	ac02      	add	r4, sp, #8
    7830:	4620      	mov	r0, r4
    7832:	f000 f863 	bl	78fc <__gnu_Unwind_Save_VFP_D_16_to_31>
    7836:	f1c6 0110 	rsb	r1, r6, #16
    783a:	2900      	cmp	r1, #0
    783c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    783e:	9b01      	ldr	r3, [sp, #4]
    7840:	ddb6      	ble.n	77b0 <_Unwind_VRS_Pop+0x174>
    7842:	ac22      	add	r4, sp, #136	; 0x88
    7844:	004f      	lsls	r7, r1, #1
    7846:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    784a:	4611      	mov	r1, r2
    784c:	e7a3      	b.n	7796 <_Unwind_VRS_Pop+0x15a>
    784e:	a822      	add	r0, sp, #136	; 0x88
    7850:	f000 f848 	bl	78e4 <__gnu_Unwind_Restore_VFP_D>
    7854:	e73d      	b.n	76d2 <_Unwind_VRS_Pop+0x96>
    7856:	f023 0310 	bic.w	r3, r3, #16
    785a:	602b      	str	r3, [r5, #0]
    785c:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    7860:	9201      	str	r2, [sp, #4]
    7862:	f000 f89d 	bl	79a0 <__gnu_Unwind_Save_WMMXC>
    7866:	9a01      	ldr	r2, [sp, #4]
    7868:	e701      	b.n	766e <_Unwind_VRS_Pop+0x32>
    786a:	4628      	mov	r0, r5
    786c:	f022 0204 	bic.w	r2, r2, #4
    7870:	f840 2bd0 	str.w	r2, [r0], #208
    7874:	9301      	str	r3, [sp, #4]
    7876:	f000 f841 	bl	78fc <__gnu_Unwind_Save_VFP_D_16_to_31>
    787a:	9b01      	ldr	r3, [sp, #4]
    787c:	e7cf      	b.n	781e <_Unwind_VRS_Pop+0x1e2>
    787e:	682a      	ldr	r2, [r5, #0]
    7880:	e7cb      	b.n	781a <_Unwind_VRS_Pop+0x1de>
    7882:	07d0      	lsls	r0, r2, #31
    7884:	d50a      	bpl.n	789c <_Unwind_VRS_Pop+0x260>
    7886:	4628      	mov	r0, r5
    7888:	f022 0201 	bic.w	r2, r2, #1
    788c:	f042 0202 	orr.w	r2, r2, #2
    7890:	f840 2b48 	str.w	r2, [r0], #72
    7894:	9301      	str	r3, [sp, #4]
    7896:	f000 f829 	bl	78ec <__gnu_Unwind_Save_VFP_D>
    789a:	9b01      	ldr	r3, [sp, #4]
    789c:	9301      	str	r3, [sp, #4]
    789e:	ac22      	add	r4, sp, #136	; 0x88
    78a0:	4620      	mov	r0, r4
    78a2:	f000 f823 	bl	78ec <__gnu_Unwind_Save_VFP_D>
    78a6:	46b8      	mov	r8, r7
    78a8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    78aa:	9b01      	ldr	r3, [sp, #4]
    78ac:	2f00      	cmp	r7, #0
    78ae:	f47f af6d 	bne.w	778c <_Unwind_VRS_Pop+0x150>
    78b2:	460a      	mov	r2, r1
    78b4:	e709      	b.n	76ca <_Unwind_VRS_Pop+0x8e>
    78b6:	460a      	mov	r2, r1
    78b8:	e78d      	b.n	77d6 <_Unwind_VRS_Pop+0x19a>
    78ba:	bf00      	nop

000078bc <__restore_core_regs>:
    78bc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    78c0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    78c4:	469c      	mov	ip, r3
    78c6:	46a6      	mov	lr, r4
    78c8:	f84c 5d04 	str.w	r5, [ip, #-4]!
    78cc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    78d0:	46e5      	mov	sp, ip
    78d2:	bd00      	pop	{pc}

000078d4 <__gnu_Unwind_Restore_VFP>:
    78d4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    78d8:	4770      	bx	lr
    78da:	bf00      	nop

000078dc <__gnu_Unwind_Save_VFP>:
    78dc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    78e0:	4770      	bx	lr
    78e2:	bf00      	nop

000078e4 <__gnu_Unwind_Restore_VFP_D>:
    78e4:	ec90 0b20 	vldmia	r0, {d0-d15}
    78e8:	4770      	bx	lr
    78ea:	bf00      	nop

000078ec <__gnu_Unwind_Save_VFP_D>:
    78ec:	ec80 0b20 	vstmia	r0, {d0-d15}
    78f0:	4770      	bx	lr
    78f2:	bf00      	nop

000078f4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    78f4:	ecd0 0b20 	vldmia	r0, {d16-d31}
    78f8:	4770      	bx	lr
    78fa:	bf00      	nop

000078fc <__gnu_Unwind_Save_VFP_D_16_to_31>:
    78fc:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7900:	4770      	bx	lr
    7902:	bf00      	nop

00007904 <__gnu_Unwind_Restore_WMMXD>:
    7904:	ecf0 0102 	ldfe	f0, [r0], #8
    7908:	ecf0 1102 	ldfe	f1, [r0], #8
    790c:	ecf0 2102 	ldfe	f2, [r0], #8
    7910:	ecf0 3102 	ldfe	f3, [r0], #8
    7914:	ecf0 4102 	ldfe	f4, [r0], #8
    7918:	ecf0 5102 	ldfe	f5, [r0], #8
    791c:	ecf0 6102 	ldfe	f6, [r0], #8
    7920:	ecf0 7102 	ldfe	f7, [r0], #8
    7924:	ecf0 8102 	ldfp	f0, [r0], #8
    7928:	ecf0 9102 	ldfp	f1, [r0], #8
    792c:	ecf0 a102 	ldfp	f2, [r0], #8
    7930:	ecf0 b102 	ldfp	f3, [r0], #8
    7934:	ecf0 c102 	ldfp	f4, [r0], #8
    7938:	ecf0 d102 	ldfp	f5, [r0], #8
    793c:	ecf0 e102 	ldfp	f6, [r0], #8
    7940:	ecf0 f102 	ldfp	f7, [r0], #8
    7944:	4770      	bx	lr
    7946:	bf00      	nop

00007948 <__gnu_Unwind_Save_WMMXD>:
    7948:	ece0 0102 	stfe	f0, [r0], #8
    794c:	ece0 1102 	stfe	f1, [r0], #8
    7950:	ece0 2102 	stfe	f2, [r0], #8
    7954:	ece0 3102 	stfe	f3, [r0], #8
    7958:	ece0 4102 	stfe	f4, [r0], #8
    795c:	ece0 5102 	stfe	f5, [r0], #8
    7960:	ece0 6102 	stfe	f6, [r0], #8
    7964:	ece0 7102 	stfe	f7, [r0], #8
    7968:	ece0 8102 	stfp	f0, [r0], #8
    796c:	ece0 9102 	stfp	f1, [r0], #8
    7970:	ece0 a102 	stfp	f2, [r0], #8
    7974:	ece0 b102 	stfp	f3, [r0], #8
    7978:	ece0 c102 	stfp	f4, [r0], #8
    797c:	ece0 d102 	stfp	f5, [r0], #8
    7980:	ece0 e102 	stfp	f6, [r0], #8
    7984:	ece0 f102 	stfp	f7, [r0], #8
    7988:	4770      	bx	lr
    798a:	bf00      	nop

0000798c <__gnu_Unwind_Restore_WMMXC>:
    798c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7990:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    7994:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7998:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    799c:	4770      	bx	lr
    799e:	bf00      	nop

000079a0 <__gnu_Unwind_Save_WMMXC>:
    79a0:	fca0 8101 	stc2	1, cr8, [r0], #4
    79a4:	fca0 9101 	stc2	1, cr9, [r0], #4
    79a8:	fca0 a101 	stc2	1, cr10, [r0], #4
    79ac:	fca0 b101 	stc2	1, cr11, [r0], #4
    79b0:	4770      	bx	lr
    79b2:	bf00      	nop

000079b4 <_Unwind_RaiseException>:
    79b4:	46ec      	mov	ip, sp
    79b6:	b500      	push	{lr}
    79b8:	e92d 5000 	stmdb	sp!, {ip, lr}
    79bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    79c0:	f04f 0300 	mov.w	r3, #0
    79c4:	e92d 000c 	stmdb	sp!, {r2, r3}
    79c8:	a901      	add	r1, sp, #4
    79ca:	f7ff fbdd 	bl	7188 <__gnu_Unwind_RaiseException>
    79ce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    79d2:	b012      	add	sp, #72	; 0x48
    79d4:	4770      	bx	lr
    79d6:	bf00      	nop

000079d8 <_Unwind_Resume>:
    79d8:	46ec      	mov	ip, sp
    79da:	b500      	push	{lr}
    79dc:	e92d 5000 	stmdb	sp!, {ip, lr}
    79e0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    79e4:	f04f 0300 	mov.w	r3, #0
    79e8:	e92d 000c 	stmdb	sp!, {r2, r3}
    79ec:	a901      	add	r1, sp, #4
    79ee:	f7ff fc05 	bl	71fc <__gnu_Unwind_Resume>
    79f2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    79f6:	b012      	add	sp, #72	; 0x48
    79f8:	4770      	bx	lr
    79fa:	bf00      	nop

000079fc <_Unwind_Resume_or_Rethrow>:
    79fc:	46ec      	mov	ip, sp
    79fe:	b500      	push	{lr}
    7a00:	e92d 5000 	stmdb	sp!, {ip, lr}
    7a04:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7a08:	f04f 0300 	mov.w	r3, #0
    7a0c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7a10:	a901      	add	r1, sp, #4
    7a12:	f7ff fc15 	bl	7240 <__gnu_Unwind_Resume_or_Rethrow>
    7a16:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7a1a:	b012      	add	sp, #72	; 0x48
    7a1c:	4770      	bx	lr
    7a1e:	bf00      	nop

00007a20 <_Unwind_ForcedUnwind>:
    7a20:	46ec      	mov	ip, sp
    7a22:	b500      	push	{lr}
    7a24:	e92d 5000 	stmdb	sp!, {ip, lr}
    7a28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7a2c:	f04f 0300 	mov.w	r3, #0
    7a30:	e92d 000c 	stmdb	sp!, {r2, r3}
    7a34:	ab01      	add	r3, sp, #4
    7a36:	f7ff fbd7 	bl	71e8 <__gnu_Unwind_ForcedUnwind>
    7a3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7a3e:	b012      	add	sp, #72	; 0x48
    7a40:	4770      	bx	lr
    7a42:	bf00      	nop

00007a44 <_Unwind_Backtrace>:
    7a44:	46ec      	mov	ip, sp
    7a46:	b500      	push	{lr}
    7a48:	e92d 5000 	stmdb	sp!, {ip, lr}
    7a4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7a50:	f04f 0300 	mov.w	r3, #0
    7a54:	e92d 000c 	stmdb	sp!, {r2, r3}
    7a58:	aa01      	add	r2, sp, #4
    7a5a:	f7ff fc47 	bl	72ec <__gnu_Unwind_Backtrace>
    7a5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7a62:	b012      	add	sp, #72	; 0x48
    7a64:	4770      	bx	lr
    7a66:	bf00      	nop

00007a68 <next_unwind_byte>:
    7a68:	7a02      	ldrb	r2, [r0, #8]
    7a6a:	b982      	cbnz	r2, 7a8e <next_unwind_byte+0x26>
    7a6c:	7a43      	ldrb	r3, [r0, #9]
    7a6e:	b1ab      	cbz	r3, 7a9c <next_unwind_byte+0x34>
    7a70:	6842      	ldr	r2, [r0, #4]
    7a72:	3b01      	subs	r3, #1
    7a74:	b410      	push	{r4}
    7a76:	7243      	strb	r3, [r0, #9]
    7a78:	6813      	ldr	r3, [r2, #0]
    7a7a:	2103      	movs	r1, #3
    7a7c:	1d14      	adds	r4, r2, #4
    7a7e:	7201      	strb	r1, [r0, #8]
    7a80:	021a      	lsls	r2, r3, #8
    7a82:	6044      	str	r4, [r0, #4]
    7a84:	6002      	str	r2, [r0, #0]
    7a86:	f85d 4b04 	ldr.w	r4, [sp], #4
    7a8a:	0e18      	lsrs	r0, r3, #24
    7a8c:	4770      	bx	lr
    7a8e:	6803      	ldr	r3, [r0, #0]
    7a90:	3a01      	subs	r2, #1
    7a92:	7202      	strb	r2, [r0, #8]
    7a94:	021a      	lsls	r2, r3, #8
    7a96:	6002      	str	r2, [r0, #0]
    7a98:	0e18      	lsrs	r0, r3, #24
    7a9a:	4770      	bx	lr
    7a9c:	20b0      	movs	r0, #176	; 0xb0
    7a9e:	4770      	bx	lr

00007aa0 <_Unwind_GetGR.constprop.0>:
    7aa0:	b500      	push	{lr}
    7aa2:	b085      	sub	sp, #20
    7aa4:	aa03      	add	r2, sp, #12
    7aa6:	2300      	movs	r3, #0
    7aa8:	9200      	str	r2, [sp, #0]
    7aaa:	4619      	mov	r1, r3
    7aac:	220c      	movs	r2, #12
    7aae:	f7ff fbd7 	bl	7260 <_Unwind_VRS_Get>
    7ab2:	9803      	ldr	r0, [sp, #12]
    7ab4:	b005      	add	sp, #20
    7ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    7aba:	bf00      	nop

00007abc <unwind_UCB_from_context>:
    7abc:	e7f0      	b.n	7aa0 <_Unwind_GetGR.constprop.0>
    7abe:	bf00      	nop

00007ac0 <__gnu_unwind_execute>:
    7ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ac4:	4605      	mov	r5, r0
    7ac6:	b085      	sub	sp, #20
    7ac8:	460e      	mov	r6, r1
    7aca:	f04f 0800 	mov.w	r8, #0
    7ace:	4630      	mov	r0, r6
    7ad0:	f7ff ffca 	bl	7a68 <next_unwind_byte>
    7ad4:	28b0      	cmp	r0, #176	; 0xb0
    7ad6:	4604      	mov	r4, r0
    7ad8:	f000 80b1 	beq.w	7c3e <__gnu_unwind_execute+0x17e>
    7adc:	0607      	lsls	r7, r0, #24
    7ade:	d520      	bpl.n	7b22 <__gnu_unwind_execute+0x62>
    7ae0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7ae4:	2b80      	cmp	r3, #128	; 0x80
    7ae6:	d065      	beq.n	7bb4 <__gnu_unwind_execute+0xf4>
    7ae8:	2b90      	cmp	r3, #144	; 0x90
    7aea:	d036      	beq.n	7b5a <__gnu_unwind_execute+0x9a>
    7aec:	2ba0      	cmp	r3, #160	; 0xa0
    7aee:	d078      	beq.n	7be2 <__gnu_unwind_execute+0x122>
    7af0:	2bb0      	cmp	r3, #176	; 0xb0
    7af2:	d047      	beq.n	7b84 <__gnu_unwind_execute+0xc4>
    7af4:	2bc0      	cmp	r3, #192	; 0xc0
    7af6:	f000 808a 	beq.w	7c0e <__gnu_unwind_execute+0x14e>
    7afa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7afe:	2bd0      	cmp	r3, #208	; 0xd0
    7b00:	d10b      	bne.n	7b1a <__gnu_unwind_execute+0x5a>
    7b02:	f000 0207 	and.w	r2, r0, #7
    7b06:	3201      	adds	r2, #1
    7b08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7b0c:	2305      	movs	r3, #5
    7b0e:	2101      	movs	r1, #1
    7b10:	4628      	mov	r0, r5
    7b12:	f7ff fd93 	bl	763c <_Unwind_VRS_Pop>
    7b16:	2800      	cmp	r0, #0
    7b18:	d0d9      	beq.n	7ace <__gnu_unwind_execute+0xe>
    7b1a:	2009      	movs	r0, #9
    7b1c:	b005      	add	sp, #20
    7b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7b22:	f10d 090c 	add.w	r9, sp, #12
    7b26:	2300      	movs	r3, #0
    7b28:	4619      	mov	r1, r3
    7b2a:	0087      	lsls	r7, r0, #2
    7b2c:	f8cd 9000 	str.w	r9, [sp]
    7b30:	220d      	movs	r2, #13
    7b32:	4628      	mov	r0, r5
    7b34:	f7ff fb94 	bl	7260 <_Unwind_VRS_Get>
    7b38:	b2ff      	uxtb	r7, r7
    7b3a:	9b03      	ldr	r3, [sp, #12]
    7b3c:	f8cd 9000 	str.w	r9, [sp]
    7b40:	3704      	adds	r7, #4
    7b42:	0660      	lsls	r0, r4, #25
    7b44:	bf4c      	ite	mi
    7b46:	1bdf      	submi	r7, r3, r7
    7b48:	18ff      	addpl	r7, r7, r3
    7b4a:	2300      	movs	r3, #0
    7b4c:	4619      	mov	r1, r3
    7b4e:	220d      	movs	r2, #13
    7b50:	4628      	mov	r0, r5
    7b52:	9703      	str	r7, [sp, #12]
    7b54:	f7ff fba6 	bl	72a4 <_Unwind_VRS_Set>
    7b58:	e7b9      	b.n	7ace <__gnu_unwind_execute+0xe>
    7b5a:	f000 030d 	and.w	r3, r0, #13
    7b5e:	2b0d      	cmp	r3, #13
    7b60:	d0db      	beq.n	7b1a <__gnu_unwind_execute+0x5a>
    7b62:	af03      	add	r7, sp, #12
    7b64:	2300      	movs	r3, #0
    7b66:	f000 020f 	and.w	r2, r0, #15
    7b6a:	4619      	mov	r1, r3
    7b6c:	9700      	str	r7, [sp, #0]
    7b6e:	4628      	mov	r0, r5
    7b70:	f7ff fb76 	bl	7260 <_Unwind_VRS_Get>
    7b74:	2300      	movs	r3, #0
    7b76:	9700      	str	r7, [sp, #0]
    7b78:	4619      	mov	r1, r3
    7b7a:	220d      	movs	r2, #13
    7b7c:	4628      	mov	r0, r5
    7b7e:	f7ff fb91 	bl	72a4 <_Unwind_VRS_Set>
    7b82:	e7a4      	b.n	7ace <__gnu_unwind_execute+0xe>
    7b84:	28b1      	cmp	r0, #177	; 0xb1
    7b86:	d05f      	beq.n	7c48 <__gnu_unwind_execute+0x188>
    7b88:	28b2      	cmp	r0, #178	; 0xb2
    7b8a:	f000 80cc 	beq.w	7d26 <__gnu_unwind_execute+0x266>
    7b8e:	28b3      	cmp	r0, #179	; 0xb3
    7b90:	d07e      	beq.n	7c90 <__gnu_unwind_execute+0x1d0>
    7b92:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7b96:	2bb4      	cmp	r3, #180	; 0xb4
    7b98:	d0bf      	beq.n	7b1a <__gnu_unwind_execute+0x5a>
    7b9a:	f000 0207 	and.w	r2, r0, #7
    7b9e:	3201      	adds	r2, #1
    7ba0:	2301      	movs	r3, #1
    7ba2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7ba6:	4619      	mov	r1, r3
    7ba8:	4628      	mov	r0, r5
    7baa:	f7ff fd47 	bl	763c <_Unwind_VRS_Pop>
    7bae:	2800      	cmp	r0, #0
    7bb0:	d08d      	beq.n	7ace <__gnu_unwind_execute+0xe>
    7bb2:	e7b2      	b.n	7b1a <__gnu_unwind_execute+0x5a>
    7bb4:	4630      	mov	r0, r6
    7bb6:	f7ff ff57 	bl	7a68 <next_unwind_byte>
    7bba:	0224      	lsls	r4, r4, #8
    7bbc:	4304      	orrs	r4, r0
    7bbe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    7bc2:	d0aa      	beq.n	7b1a <__gnu_unwind_execute+0x5a>
    7bc4:	0124      	lsls	r4, r4, #4
    7bc6:	2300      	movs	r3, #0
    7bc8:	b2a2      	uxth	r2, r4
    7bca:	4619      	mov	r1, r3
    7bcc:	4628      	mov	r0, r5
    7bce:	f7ff fd35 	bl	763c <_Unwind_VRS_Pop>
    7bd2:	2800      	cmp	r0, #0
    7bd4:	d1a1      	bne.n	7b1a <__gnu_unwind_execute+0x5a>
    7bd6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    7bda:	bf18      	it	ne
    7bdc:	f04f 0801 	movne.w	r8, #1
    7be0:	e775      	b.n	7ace <__gnu_unwind_execute+0xe>
    7be2:	43c2      	mvns	r2, r0
    7be4:	f002 0307 	and.w	r3, r2, #7
    7be8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    7bec:	411a      	asrs	r2, r3
    7bee:	0701      	lsls	r1, r0, #28
    7bf0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7bf4:	f04f 0300 	mov.w	r3, #0
    7bf8:	bf48      	it	mi
    7bfa:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    7bfe:	4619      	mov	r1, r3
    7c00:	4628      	mov	r0, r5
    7c02:	f7ff fd1b 	bl	763c <_Unwind_VRS_Pop>
    7c06:	2800      	cmp	r0, #0
    7c08:	f43f af61 	beq.w	7ace <__gnu_unwind_execute+0xe>
    7c0c:	e785      	b.n	7b1a <__gnu_unwind_execute+0x5a>
    7c0e:	28c6      	cmp	r0, #198	; 0xc6
    7c10:	d051      	beq.n	7cb6 <__gnu_unwind_execute+0x1f6>
    7c12:	28c7      	cmp	r0, #199	; 0xc7
    7c14:	d05a      	beq.n	7ccc <__gnu_unwind_execute+0x20c>
    7c16:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7c1a:	2bc0      	cmp	r3, #192	; 0xc0
    7c1c:	d069      	beq.n	7cf2 <__gnu_unwind_execute+0x232>
    7c1e:	28c8      	cmp	r0, #200	; 0xc8
    7c20:	d075      	beq.n	7d0e <__gnu_unwind_execute+0x24e>
    7c22:	28c9      	cmp	r0, #201	; 0xc9
    7c24:	f47f af79 	bne.w	7b1a <__gnu_unwind_execute+0x5a>
    7c28:	4630      	mov	r0, r6
    7c2a:	f7ff ff1d 	bl	7a68 <next_unwind_byte>
    7c2e:	0302      	lsls	r2, r0, #12
    7c30:	f000 000f 	and.w	r0, r0, #15
    7c34:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    7c38:	3001      	adds	r0, #1
    7c3a:	4302      	orrs	r2, r0
    7c3c:	e766      	b.n	7b0c <__gnu_unwind_execute+0x4c>
    7c3e:	f1b8 0f00 	cmp.w	r8, #0
    7c42:	d014      	beq.n	7c6e <__gnu_unwind_execute+0x1ae>
    7c44:	2000      	movs	r0, #0
    7c46:	e769      	b.n	7b1c <__gnu_unwind_execute+0x5c>
    7c48:	4630      	mov	r0, r6
    7c4a:	f7ff ff0d 	bl	7a68 <next_unwind_byte>
    7c4e:	2800      	cmp	r0, #0
    7c50:	f43f af63 	beq.w	7b1a <__gnu_unwind_execute+0x5a>
    7c54:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7c58:	f47f af5f 	bne.w	7b1a <__gnu_unwind_execute+0x5a>
    7c5c:	4602      	mov	r2, r0
    7c5e:	4619      	mov	r1, r3
    7c60:	4628      	mov	r0, r5
    7c62:	f7ff fceb 	bl	763c <_Unwind_VRS_Pop>
    7c66:	2800      	cmp	r0, #0
    7c68:	f43f af31 	beq.w	7ace <__gnu_unwind_execute+0xe>
    7c6c:	e755      	b.n	7b1a <__gnu_unwind_execute+0x5a>
    7c6e:	ac03      	add	r4, sp, #12
    7c70:	4643      	mov	r3, r8
    7c72:	220e      	movs	r2, #14
    7c74:	4641      	mov	r1, r8
    7c76:	9400      	str	r4, [sp, #0]
    7c78:	4628      	mov	r0, r5
    7c7a:	f7ff faf1 	bl	7260 <_Unwind_VRS_Get>
    7c7e:	9400      	str	r4, [sp, #0]
    7c80:	4628      	mov	r0, r5
    7c82:	4643      	mov	r3, r8
    7c84:	220f      	movs	r2, #15
    7c86:	4641      	mov	r1, r8
    7c88:	f7ff fb0c 	bl	72a4 <_Unwind_VRS_Set>
    7c8c:	4640      	mov	r0, r8
    7c8e:	e745      	b.n	7b1c <__gnu_unwind_execute+0x5c>
    7c90:	4630      	mov	r0, r6
    7c92:	f7ff fee9 	bl	7a68 <next_unwind_byte>
    7c96:	0301      	lsls	r1, r0, #12
    7c98:	f000 000f 	and.w	r0, r0, #15
    7c9c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7ca0:	1c42      	adds	r2, r0, #1
    7ca2:	2301      	movs	r3, #1
    7ca4:	430a      	orrs	r2, r1
    7ca6:	4628      	mov	r0, r5
    7ca8:	4619      	mov	r1, r3
    7caa:	f7ff fcc7 	bl	763c <_Unwind_VRS_Pop>
    7cae:	2800      	cmp	r0, #0
    7cb0:	f43f af0d 	beq.w	7ace <__gnu_unwind_execute+0xe>
    7cb4:	e731      	b.n	7b1a <__gnu_unwind_execute+0x5a>
    7cb6:	4630      	mov	r0, r6
    7cb8:	f7ff fed6 	bl	7a68 <next_unwind_byte>
    7cbc:	0301      	lsls	r1, r0, #12
    7cbe:	f000 000f 	and.w	r0, r0, #15
    7cc2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7cc6:	1c42      	adds	r2, r0, #1
    7cc8:	2303      	movs	r3, #3
    7cca:	e7eb      	b.n	7ca4 <__gnu_unwind_execute+0x1e4>
    7ccc:	4630      	mov	r0, r6
    7cce:	f7ff fecb 	bl	7a68 <next_unwind_byte>
    7cd2:	4602      	mov	r2, r0
    7cd4:	2800      	cmp	r0, #0
    7cd6:	f43f af20 	beq.w	7b1a <__gnu_unwind_execute+0x5a>
    7cda:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7cde:	f47f af1c 	bne.w	7b1a <__gnu_unwind_execute+0x5a>
    7ce2:	2104      	movs	r1, #4
    7ce4:	4628      	mov	r0, r5
    7ce6:	f7ff fca9 	bl	763c <_Unwind_VRS_Pop>
    7cea:	2800      	cmp	r0, #0
    7cec:	f43f aeef 	beq.w	7ace <__gnu_unwind_execute+0xe>
    7cf0:	e713      	b.n	7b1a <__gnu_unwind_execute+0x5a>
    7cf2:	f000 020f 	and.w	r2, r0, #15
    7cf6:	3201      	adds	r2, #1
    7cf8:	2303      	movs	r3, #3
    7cfa:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    7cfe:	4619      	mov	r1, r3
    7d00:	4628      	mov	r0, r5
    7d02:	f7ff fc9b 	bl	763c <_Unwind_VRS_Pop>
    7d06:	2800      	cmp	r0, #0
    7d08:	f43f aee1 	beq.w	7ace <__gnu_unwind_execute+0xe>
    7d0c:	e705      	b.n	7b1a <__gnu_unwind_execute+0x5a>
    7d0e:	4630      	mov	r0, r6
    7d10:	f7ff feaa 	bl	7a68 <next_unwind_byte>
    7d14:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    7d18:	f000 030f 	and.w	r3, r0, #15
    7d1c:	3210      	adds	r2, #16
    7d1e:	3301      	adds	r3, #1
    7d20:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    7d24:	e6f2      	b.n	7b0c <__gnu_unwind_execute+0x4c>
    7d26:	2300      	movs	r3, #0
    7d28:	f10d 090c 	add.w	r9, sp, #12
    7d2c:	220d      	movs	r2, #13
    7d2e:	4619      	mov	r1, r3
    7d30:	f8cd 9000 	str.w	r9, [sp]
    7d34:	4628      	mov	r0, r5
    7d36:	f7ff fa93 	bl	7260 <_Unwind_VRS_Get>
    7d3a:	4630      	mov	r0, r6
    7d3c:	f7ff fe94 	bl	7a68 <next_unwind_byte>
    7d40:	0602      	lsls	r2, r0, #24
    7d42:	f04f 0702 	mov.w	r7, #2
    7d46:	d50c      	bpl.n	7d62 <__gnu_unwind_execute+0x2a2>
    7d48:	9b03      	ldr	r3, [sp, #12]
    7d4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7d4e:	40b8      	lsls	r0, r7
    7d50:	4403      	add	r3, r0
    7d52:	4630      	mov	r0, r6
    7d54:	9303      	str	r3, [sp, #12]
    7d56:	f7ff fe87 	bl	7a68 <next_unwind_byte>
    7d5a:	0603      	lsls	r3, r0, #24
    7d5c:	f107 0707 	add.w	r7, r7, #7
    7d60:	d4f2      	bmi.n	7d48 <__gnu_unwind_execute+0x288>
    7d62:	9b03      	ldr	r3, [sp, #12]
    7d64:	f8cd 9000 	str.w	r9, [sp]
    7d68:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    7d6c:	f503 7201 	add.w	r2, r3, #516	; 0x204
    7d70:	40bc      	lsls	r4, r7
    7d72:	2300      	movs	r3, #0
    7d74:	4414      	add	r4, r2
    7d76:	4619      	mov	r1, r3
    7d78:	220d      	movs	r2, #13
    7d7a:	4628      	mov	r0, r5
    7d7c:	9403      	str	r4, [sp, #12]
    7d7e:	f7ff fa91 	bl	72a4 <_Unwind_VRS_Set>
    7d82:	e6a4      	b.n	7ace <__gnu_unwind_execute+0xe>

00007d84 <__gnu_unwind_frame>:
    7d84:	b510      	push	{r4, lr}
    7d86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    7d88:	b084      	sub	sp, #16
    7d8a:	685a      	ldr	r2, [r3, #4]
    7d8c:	2003      	movs	r0, #3
    7d8e:	f88d 000c 	strb.w	r0, [sp, #12]
    7d92:	79dc      	ldrb	r4, [r3, #7]
    7d94:	f88d 400d 	strb.w	r4, [sp, #13]
    7d98:	0212      	lsls	r2, r2, #8
    7d9a:	3308      	adds	r3, #8
    7d9c:	4608      	mov	r0, r1
    7d9e:	a901      	add	r1, sp, #4
    7da0:	9201      	str	r2, [sp, #4]
    7da2:	9302      	str	r3, [sp, #8]
    7da4:	f7ff fe8c 	bl	7ac0 <__gnu_unwind_execute>
    7da8:	b004      	add	sp, #16
    7daa:	bd10      	pop	{r4, pc}

00007dac <_Unwind_GetRegionStart>:
    7dac:	b508      	push	{r3, lr}
    7dae:	f7ff fe85 	bl	7abc <unwind_UCB_from_context>
    7db2:	6c80      	ldr	r0, [r0, #72]	; 0x48
    7db4:	bd08      	pop	{r3, pc}
    7db6:	bf00      	nop

00007db8 <_Unwind_GetLanguageSpecificData>:
    7db8:	b508      	push	{r3, lr}
    7dba:	f7ff fe7f 	bl	7abc <unwind_UCB_from_context>
    7dbe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    7dc0:	79c3      	ldrb	r3, [r0, #7]
    7dc2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7dc6:	3008      	adds	r0, #8
    7dc8:	bd08      	pop	{r3, pc}
    7dca:	bf00      	nop

00007dcc <_Unwind_GetDataRelBase>:
    7dcc:	b508      	push	{r3, lr}
    7dce:	f000 f807 	bl	7de0 <abort>
    7dd2:	bf00      	nop

00007dd4 <_Unwind_GetTextRelBase>:
    7dd4:	b508      	push	{r3, lr}
    7dd6:	f7ff fff9 	bl	7dcc <_Unwind_GetDataRelBase>
    7dda:	bf00      	nop

00007ddc <__aeabi_idiv0>:
    7ddc:	4770      	bx	lr
    7dde:	bf00      	nop

00007de0 <abort>:
    7de0:	b508      	push	{r3, lr}
    7de2:	2006      	movs	r0, #6
    7de4:	f000 f92c 	bl	8040 <raise>
    7de8:	2001      	movs	r0, #1
    7dea:	f7fb fd57 	bl	389c <_exit>
    7dee:	Address 0x0000000000007dee is out of bounds.


00007df0 <__libc_init_array>:
    7df0:	b570      	push	{r4, r5, r6, lr}
    7df2:	4e0d      	ldr	r6, [pc, #52]	; (7e28 <__libc_init_array+0x38>)
    7df4:	4c0d      	ldr	r4, [pc, #52]	; (7e2c <__libc_init_array+0x3c>)
    7df6:	1ba4      	subs	r4, r4, r6
    7df8:	10a4      	asrs	r4, r4, #2
    7dfa:	2500      	movs	r5, #0
    7dfc:	42a5      	cmp	r5, r4
    7dfe:	d109      	bne.n	7e14 <__libc_init_array+0x24>
    7e00:	4e0b      	ldr	r6, [pc, #44]	; (7e30 <__libc_init_array+0x40>)
    7e02:	4c0c      	ldr	r4, [pc, #48]	; (7e34 <__libc_init_array+0x44>)
    7e04:	f7f8 fa7c 	bl	300 <_init>
    7e08:	1ba4      	subs	r4, r4, r6
    7e0a:	10a4      	asrs	r4, r4, #2
    7e0c:	2500      	movs	r5, #0
    7e0e:	42a5      	cmp	r5, r4
    7e10:	d105      	bne.n	7e1e <__libc_init_array+0x2e>
    7e12:	bd70      	pop	{r4, r5, r6, pc}
    7e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7e18:	4798      	blx	r3
    7e1a:	3501      	adds	r5, #1
    7e1c:	e7ee      	b.n	7dfc <__libc_init_array+0xc>
    7e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7e22:	4798      	blx	r3
    7e24:	3501      	adds	r5, #1
    7e26:	e7f2      	b.n	7e0e <__libc_init_array+0x1e>
    7e28:	0000030c 	.word	0x0000030c
    7e2c:	0000030c 	.word	0x0000030c
    7e30:	0000030c 	.word	0x0000030c
    7e34:	0000031c 	.word	0x0000031c

00007e38 <malloc>:
    7e38:	4b02      	ldr	r3, [pc, #8]	; (7e44 <malloc+0xc>)
    7e3a:	4601      	mov	r1, r0
    7e3c:	6818      	ldr	r0, [r3, #0]
    7e3e:	f000 b86d 	b.w	7f1c <_malloc_r>
    7e42:	bf00      	nop
    7e44:	10000094 	.word	0x10000094

00007e48 <free>:
    7e48:	4b02      	ldr	r3, [pc, #8]	; (7e54 <free+0xc>)
    7e4a:	4601      	mov	r1, r0
    7e4c:	6818      	ldr	r0, [r3, #0]
    7e4e:	f000 b817 	b.w	7e80 <_free_r>
    7e52:	bf00      	nop
    7e54:	10000094 	.word	0x10000094

00007e58 <memcpy>:
    7e58:	b510      	push	{r4, lr}
    7e5a:	1e43      	subs	r3, r0, #1
    7e5c:	440a      	add	r2, r1
    7e5e:	4291      	cmp	r1, r2
    7e60:	d100      	bne.n	7e64 <memcpy+0xc>
    7e62:	bd10      	pop	{r4, pc}
    7e64:	f811 4b01 	ldrb.w	r4, [r1], #1
    7e68:	f803 4f01 	strb.w	r4, [r3, #1]!
    7e6c:	e7f7      	b.n	7e5e <memcpy+0x6>

00007e6e <memset>:
    7e6e:	4402      	add	r2, r0
    7e70:	4603      	mov	r3, r0
    7e72:	4293      	cmp	r3, r2
    7e74:	d100      	bne.n	7e78 <memset+0xa>
    7e76:	4770      	bx	lr
    7e78:	f803 1b01 	strb.w	r1, [r3], #1
    7e7c:	e7f9      	b.n	7e72 <memset+0x4>
    7e7e:	Address 0x0000000000007e7e is out of bounds.


00007e80 <_free_r>:
    7e80:	b538      	push	{r3, r4, r5, lr}
    7e82:	4605      	mov	r5, r0
    7e84:	2900      	cmp	r1, #0
    7e86:	d045      	beq.n	7f14 <_free_r+0x94>
    7e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7e8c:	1f0c      	subs	r4, r1, #4
    7e8e:	2b00      	cmp	r3, #0
    7e90:	bfb8      	it	lt
    7e92:	18e4      	addlt	r4, r4, r3
    7e94:	f000 f8f8 	bl	8088 <__malloc_lock>
    7e98:	4a1f      	ldr	r2, [pc, #124]	; (7f18 <_free_r+0x98>)
    7e9a:	6813      	ldr	r3, [r2, #0]
    7e9c:	4610      	mov	r0, r2
    7e9e:	b933      	cbnz	r3, 7eae <_free_r+0x2e>
    7ea0:	6063      	str	r3, [r4, #4]
    7ea2:	6014      	str	r4, [r2, #0]
    7ea4:	4628      	mov	r0, r5
    7ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7eaa:	f000 b8ee 	b.w	808a <__malloc_unlock>
    7eae:	42a3      	cmp	r3, r4
    7eb0:	d90c      	bls.n	7ecc <_free_r+0x4c>
    7eb2:	6821      	ldr	r1, [r4, #0]
    7eb4:	1862      	adds	r2, r4, r1
    7eb6:	4293      	cmp	r3, r2
    7eb8:	bf04      	itt	eq
    7eba:	681a      	ldreq	r2, [r3, #0]
    7ebc:	685b      	ldreq	r3, [r3, #4]
    7ebe:	6063      	str	r3, [r4, #4]
    7ec0:	bf04      	itt	eq
    7ec2:	1852      	addeq	r2, r2, r1
    7ec4:	6022      	streq	r2, [r4, #0]
    7ec6:	6004      	str	r4, [r0, #0]
    7ec8:	e7ec      	b.n	7ea4 <_free_r+0x24>
    7eca:	4613      	mov	r3, r2
    7ecc:	685a      	ldr	r2, [r3, #4]
    7ece:	b10a      	cbz	r2, 7ed4 <_free_r+0x54>
    7ed0:	42a2      	cmp	r2, r4
    7ed2:	d9fa      	bls.n	7eca <_free_r+0x4a>
    7ed4:	6819      	ldr	r1, [r3, #0]
    7ed6:	1858      	adds	r0, r3, r1
    7ed8:	42a0      	cmp	r0, r4
    7eda:	d10b      	bne.n	7ef4 <_free_r+0x74>
    7edc:	6820      	ldr	r0, [r4, #0]
    7ede:	4401      	add	r1, r0
    7ee0:	1858      	adds	r0, r3, r1
    7ee2:	4282      	cmp	r2, r0
    7ee4:	6019      	str	r1, [r3, #0]
    7ee6:	d1dd      	bne.n	7ea4 <_free_r+0x24>
    7ee8:	6810      	ldr	r0, [r2, #0]
    7eea:	6852      	ldr	r2, [r2, #4]
    7eec:	605a      	str	r2, [r3, #4]
    7eee:	4401      	add	r1, r0
    7ef0:	6019      	str	r1, [r3, #0]
    7ef2:	e7d7      	b.n	7ea4 <_free_r+0x24>
    7ef4:	d902      	bls.n	7efc <_free_r+0x7c>
    7ef6:	230c      	movs	r3, #12
    7ef8:	602b      	str	r3, [r5, #0]
    7efa:	e7d3      	b.n	7ea4 <_free_r+0x24>
    7efc:	6820      	ldr	r0, [r4, #0]
    7efe:	1821      	adds	r1, r4, r0
    7f00:	428a      	cmp	r2, r1
    7f02:	bf04      	itt	eq
    7f04:	6811      	ldreq	r1, [r2, #0]
    7f06:	6852      	ldreq	r2, [r2, #4]
    7f08:	6062      	str	r2, [r4, #4]
    7f0a:	bf04      	itt	eq
    7f0c:	1809      	addeq	r1, r1, r0
    7f0e:	6021      	streq	r1, [r4, #0]
    7f10:	605c      	str	r4, [r3, #4]
    7f12:	e7c7      	b.n	7ea4 <_free_r+0x24>
    7f14:	bd38      	pop	{r3, r4, r5, pc}
    7f16:	bf00      	nop
    7f18:	10000edc 	.word	0x10000edc

00007f1c <_malloc_r>:
    7f1c:	b570      	push	{r4, r5, r6, lr}
    7f1e:	1ccd      	adds	r5, r1, #3
    7f20:	f025 0503 	bic.w	r5, r5, #3
    7f24:	3508      	adds	r5, #8
    7f26:	2d0c      	cmp	r5, #12
    7f28:	bf38      	it	cc
    7f2a:	250c      	movcc	r5, #12
    7f2c:	2d00      	cmp	r5, #0
    7f2e:	4606      	mov	r6, r0
    7f30:	db01      	blt.n	7f36 <_malloc_r+0x1a>
    7f32:	42a9      	cmp	r1, r5
    7f34:	d903      	bls.n	7f3e <_malloc_r+0x22>
    7f36:	230c      	movs	r3, #12
    7f38:	6033      	str	r3, [r6, #0]
    7f3a:	2000      	movs	r0, #0
    7f3c:	bd70      	pop	{r4, r5, r6, pc}
    7f3e:	f000 f8a3 	bl	8088 <__malloc_lock>
    7f42:	4a21      	ldr	r2, [pc, #132]	; (7fc8 <_malloc_r+0xac>)
    7f44:	6814      	ldr	r4, [r2, #0]
    7f46:	4621      	mov	r1, r4
    7f48:	b991      	cbnz	r1, 7f70 <_malloc_r+0x54>
    7f4a:	4c20      	ldr	r4, [pc, #128]	; (7fcc <_malloc_r+0xb0>)
    7f4c:	6823      	ldr	r3, [r4, #0]
    7f4e:	b91b      	cbnz	r3, 7f58 <_malloc_r+0x3c>
    7f50:	4630      	mov	r0, r6
    7f52:	f000 f83d 	bl	7fd0 <_sbrk_r>
    7f56:	6020      	str	r0, [r4, #0]
    7f58:	4629      	mov	r1, r5
    7f5a:	4630      	mov	r0, r6
    7f5c:	f000 f838 	bl	7fd0 <_sbrk_r>
    7f60:	1c43      	adds	r3, r0, #1
    7f62:	d124      	bne.n	7fae <_malloc_r+0x92>
    7f64:	230c      	movs	r3, #12
    7f66:	6033      	str	r3, [r6, #0]
    7f68:	4630      	mov	r0, r6
    7f6a:	f000 f88e 	bl	808a <__malloc_unlock>
    7f6e:	e7e4      	b.n	7f3a <_malloc_r+0x1e>
    7f70:	680b      	ldr	r3, [r1, #0]
    7f72:	1b5b      	subs	r3, r3, r5
    7f74:	d418      	bmi.n	7fa8 <_malloc_r+0x8c>
    7f76:	2b0b      	cmp	r3, #11
    7f78:	d90f      	bls.n	7f9a <_malloc_r+0x7e>
    7f7a:	600b      	str	r3, [r1, #0]
    7f7c:	50cd      	str	r5, [r1, r3]
    7f7e:	18cc      	adds	r4, r1, r3
    7f80:	4630      	mov	r0, r6
    7f82:	f000 f882 	bl	808a <__malloc_unlock>
    7f86:	f104 000b 	add.w	r0, r4, #11
    7f8a:	1d23      	adds	r3, r4, #4
    7f8c:	f020 0007 	bic.w	r0, r0, #7
    7f90:	1ac3      	subs	r3, r0, r3
    7f92:	d0d3      	beq.n	7f3c <_malloc_r+0x20>
    7f94:	425a      	negs	r2, r3
    7f96:	50e2      	str	r2, [r4, r3]
    7f98:	e7d0      	b.n	7f3c <_malloc_r+0x20>
    7f9a:	428c      	cmp	r4, r1
    7f9c:	684b      	ldr	r3, [r1, #4]
    7f9e:	bf16      	itet	ne
    7fa0:	6063      	strne	r3, [r4, #4]
    7fa2:	6013      	streq	r3, [r2, #0]
    7fa4:	460c      	movne	r4, r1
    7fa6:	e7eb      	b.n	7f80 <_malloc_r+0x64>
    7fa8:	460c      	mov	r4, r1
    7faa:	6849      	ldr	r1, [r1, #4]
    7fac:	e7cc      	b.n	7f48 <_malloc_r+0x2c>
    7fae:	1cc4      	adds	r4, r0, #3
    7fb0:	f024 0403 	bic.w	r4, r4, #3
    7fb4:	42a0      	cmp	r0, r4
    7fb6:	d005      	beq.n	7fc4 <_malloc_r+0xa8>
    7fb8:	1a21      	subs	r1, r4, r0
    7fba:	4630      	mov	r0, r6
    7fbc:	f000 f808 	bl	7fd0 <_sbrk_r>
    7fc0:	3001      	adds	r0, #1
    7fc2:	d0cf      	beq.n	7f64 <_malloc_r+0x48>
    7fc4:	6025      	str	r5, [r4, #0]
    7fc6:	e7db      	b.n	7f80 <_malloc_r+0x64>
    7fc8:	10000edc 	.word	0x10000edc
    7fcc:	10000ee0 	.word	0x10000ee0

00007fd0 <_sbrk_r>:
    7fd0:	b538      	push	{r3, r4, r5, lr}
    7fd2:	4c06      	ldr	r4, [pc, #24]	; (7fec <_sbrk_r+0x1c>)
    7fd4:	2300      	movs	r3, #0
    7fd6:	4605      	mov	r5, r0
    7fd8:	4608      	mov	r0, r1
    7fda:	6023      	str	r3, [r4, #0]
    7fdc:	f7fb fc00 	bl	37e0 <_sbrk>
    7fe0:	1c43      	adds	r3, r0, #1
    7fe2:	d102      	bne.n	7fea <_sbrk_r+0x1a>
    7fe4:	6823      	ldr	r3, [r4, #0]
    7fe6:	b103      	cbz	r3, 7fea <_sbrk_r+0x1a>
    7fe8:	602b      	str	r3, [r5, #0]
    7fea:	bd38      	pop	{r3, r4, r5, pc}
    7fec:	10000f34 	.word	0x10000f34

00007ff0 <_raise_r>:
    7ff0:	291f      	cmp	r1, #31
    7ff2:	b538      	push	{r3, r4, r5, lr}
    7ff4:	4604      	mov	r4, r0
    7ff6:	460d      	mov	r5, r1
    7ff8:	d904      	bls.n	8004 <_raise_r+0x14>
    7ffa:	2316      	movs	r3, #22
    7ffc:	6003      	str	r3, [r0, #0]
    7ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8002:	bd38      	pop	{r3, r4, r5, pc}
    8004:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8006:	b112      	cbz	r2, 800e <_raise_r+0x1e>
    8008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    800c:	b94b      	cbnz	r3, 8022 <_raise_r+0x32>
    800e:	4620      	mov	r0, r4
    8010:	f000 f830 	bl	8074 <_getpid_r>
    8014:	462a      	mov	r2, r5
    8016:	4601      	mov	r1, r0
    8018:	4620      	mov	r0, r4
    801a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    801e:	f000 b817 	b.w	8050 <_kill_r>
    8022:	2b01      	cmp	r3, #1
    8024:	d00a      	beq.n	803c <_raise_r+0x4c>
    8026:	1c59      	adds	r1, r3, #1
    8028:	d103      	bne.n	8032 <_raise_r+0x42>
    802a:	2316      	movs	r3, #22
    802c:	6003      	str	r3, [r0, #0]
    802e:	2001      	movs	r0, #1
    8030:	e7e7      	b.n	8002 <_raise_r+0x12>
    8032:	2400      	movs	r4, #0
    8034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    8038:	4628      	mov	r0, r5
    803a:	4798      	blx	r3
    803c:	2000      	movs	r0, #0
    803e:	e7e0      	b.n	8002 <_raise_r+0x12>

00008040 <raise>:
    8040:	4b02      	ldr	r3, [pc, #8]	; (804c <raise+0xc>)
    8042:	4601      	mov	r1, r0
    8044:	6818      	ldr	r0, [r3, #0]
    8046:	f7ff bfd3 	b.w	7ff0 <_raise_r>
    804a:	bf00      	nop
    804c:	10000094 	.word	0x10000094

00008050 <_kill_r>:
    8050:	b538      	push	{r3, r4, r5, lr}
    8052:	4c07      	ldr	r4, [pc, #28]	; (8070 <_kill_r+0x20>)
    8054:	2300      	movs	r3, #0
    8056:	4605      	mov	r5, r0
    8058:	4608      	mov	r0, r1
    805a:	4611      	mov	r1, r2
    805c:	6023      	str	r3, [r4, #0]
    805e:	f7fb fbb1 	bl	37c4 <_kill>
    8062:	1c43      	adds	r3, r0, #1
    8064:	d102      	bne.n	806c <_kill_r+0x1c>
    8066:	6823      	ldr	r3, [r4, #0]
    8068:	b103      	cbz	r3, 806c <_kill_r+0x1c>
    806a:	602b      	str	r3, [r5, #0]
    806c:	bd38      	pop	{r3, r4, r5, pc}
    806e:	bf00      	nop
    8070:	10000f34 	.word	0x10000f34

00008074 <_getpid_r>:
    8074:	f7fb bb9e 	b.w	37b4 <_getpid>

00008078 <strlen>:
    8078:	4603      	mov	r3, r0
    807a:	f813 2b01 	ldrb.w	r2, [r3], #1
    807e:	2a00      	cmp	r2, #0
    8080:	d1fb      	bne.n	807a <strlen+0x2>
    8082:	1a18      	subs	r0, r3, r0
    8084:	3801      	subs	r0, #1
    8086:	4770      	bx	lr

00008088 <__malloc_lock>:
    8088:	4770      	bx	lr

0000808a <__malloc_unlock>:
    808a:	4770      	bx	lr
    808c:	61766e69 	.word	0x61766e69
    8090:	0064696c 	.word	0x0064696c
    8094:	6c707061 	.word	0x6c707061
    8098:	74616369 	.word	0x74616369
    809c:	006e6f69 	.word	0x006e6f69
    80a0:	74736f68 	.word	0x74736f68
    80a4:	73657420 	.word	0x73657420
    80a8:	00000074 	.word	0x00000074
    80ac:	64252020 	.word	0x64252020
    80b0:	78302029 	.word	0x78302029
    80b4:	58383025 	.word	0x58383025
    80b8:	0000000a 	.word	0x0000000a
    80bc:	25783020 	.word	0x25783020
    80c0:	00583830 	.word	0x00583830
    80c4:	64252020 	.word	0x64252020
    80c8:	78302029 	.word	0x78302029
    80cc:	000a7025 	.word	0x000a7025
    80d0:	6e75520a 	.word	0x6e75520a
    80d4:	6874203a 	.word	0x6874203a
    80d8:	6f662065 	.word	0x6f662065
    80dc:	776f6c6c 	.word	0x776f6c6c
    80e0:	20676e69 	.word	0x20676e69
    80e4:	6d6d6f63 	.word	0x6d6d6f63
    80e8:	20646e61 	.word	0x20646e61
    80ec:	79206e69 	.word	0x79206e69
    80f0:	2072756f 	.word	0x2072756f
    80f4:	6a6f7270 	.word	0x6a6f7270
    80f8:	20746365 	.word	0x20746365
    80fc:	65726964 	.word	0x65726964
    8100:	726f7463 	.word	0x726f7463
    8104:	00000079 	.word	0x00000079
    8108:	20200a0a 	.word	0x20200a0a
    810c:	3b315b1b 	.word	0x3b315b1b
    8110:	006d3733 	.word	0x006d3733
    8114:	656b616d 	.word	0x656b616d
    8118:	61747320 	.word	0x61747320
    811c:	72746b63 	.word	0x72746b63
    8120:	2d656361 	.word	0x2d656361
    8124:	54207325 	.word	0x54207325
    8128:	45434152 	.word	0x45434152
    812c:	00223d53 	.word	0x00223d53
    8130:	25783020 	.word	0x25783020
    8134:	00000070 	.word	0x00000070
    8138:	1b0a0a22 	.word	0x1b0a0a22
    813c:	006d305b 	.word	0x006d305b
    8140:	73696854 	.word	0x73696854
    8144:	6c697720 	.word	0x6c697720
    8148:	6572206c 	.word	0x6572206c
    814c:	74726f70 	.word	0x74726f70
    8150:	65687420 	.word	0x65687420
    8154:	6c696620 	.word	0x6c696620
    8158:	6e612065 	.word	0x6e612065
    815c:	696c2064 	.word	0x696c2064
    8160:	6e20656e 	.word	0x6e20656e
    8164:	65626d75 	.word	0x65626d75
    8168:	68742072 	.word	0x68742072
    816c:	6c207461 	.word	0x6c207461
    8170:	74206465 	.word	0x74206465
    8174:	6874206f 	.word	0x6874206f
    8178:	66207369 	.word	0x66207369
    817c:	74636e75 	.word	0x74636e75
    8180:	206e6f69 	.word	0x206e6f69
    8184:	6e696562 	.word	0x6e696562
    8188:	61632067 	.word	0x61632067
    818c:	64656c6c 	.word	0x64656c6c
    8190:	0000002e 	.word	0x0000002e
    8194:	35345b1b 	.word	0x35345b1b
    8198:	2020206d 	.word	0x2020206d
    819c:	4f525245 	.word	0x4f525245
    81a0:	305b1b52 	.word	0x305b1b52
    81a4:	6d34393b 	.word	0x6d34393b
    81a8:	3a73253a 	.word	0x3a73253a
    81ac:	3b305b1b 	.word	0x3b305b1b
    81b0:	256d3239 	.word	0x256d3239
    81b4:	5b1b3a73 	.word	0x5b1b3a73
    81b8:	33393b30 	.word	0x33393b30
    81bc:	3e64256d 	.word	0x3e64256d
    81c0:	305b1b20 	.word	0x305b1b20
    81c4:	6d37333b 	.word	0x6d37333b
    81c8:	65737341 	.word	0x65737341
    81cc:	6f697472 	.word	0x6f697472
    81d0:	6146206e 	.word	0x6146206e
    81d4:	72756c69 	.word	0x72756c69
    81d8:	43202c65 	.word	0x43202c65
    81dc:	69646e6f 	.word	0x69646e6f
    81e0:	6e6f6974 	.word	0x6e6f6974
    81e4:	73655420 	.word	0x73655420
    81e8:	3a646574 	.word	0x3a646574
    81ec:	65702820 	.word	0x65702820
    81f0:	68706972 	.word	0x68706972
    81f4:	6c617265 	.word	0x6c617265
    81f8:	7669645f 	.word	0x7669645f
    81fc:	72656469 	.word	0x72656469
    8200:	203d3c20 	.word	0x203d3c20
    8204:	200a2934 	.word	0x200a2934
    8208:	20202020 	.word	0x20202020
    820c:	20202020 	.word	0x20202020
    8210:	76694420 	.word	0x76694420
    8214:	72656469 	.word	0x72656469
    8218:	73756d20 	.word	0x73756d20
    821c:	74276e74 	.word	0x74276e74
    8220:	63786520 	.word	0x63786520
    8224:	20646565 	.word	0x20646565
    8228:	5b1b3233 	.word	0x5b1b3233
    822c:	5b1b6d30 	.word	0x5b1b6d30
    8230:	000a6d30 	.word	0x000a6d30
    8234:	6972500a 	.word	0x6972500a
    8238:	6e69746e 	.word	0x6e69746e
    823c:	74532067 	.word	0x74532067
    8240:	206b6361 	.word	0x206b6361
    8244:	63617254 	.word	0x63617254
    8248:	000a3a65 	.word	0x000a3a65
    824c:	35345b1b 	.word	0x35345b1b
    8250:	2020206d 	.word	0x2020206d
    8254:	4f525245 	.word	0x4f525245
    8258:	305b1b52 	.word	0x305b1b52
    825c:	6d34393b 	.word	0x6d34393b
    8260:	3a73253a 	.word	0x3a73253a
    8264:	3b305b1b 	.word	0x3b305b1b
    8268:	256d3239 	.word	0x256d3239
    826c:	5b1b3a73 	.word	0x5b1b3a73
    8270:	33393b30 	.word	0x33393b30
    8274:	3e64256d 	.word	0x3e64256d
    8278:	305b1b20 	.word	0x305b1b20
    827c:	6d37333b 	.word	0x6d37333b
    8280:	65737341 	.word	0x65737341
    8284:	6f697472 	.word	0x6f697472
    8288:	6146206e 	.word	0x6146206e
    828c:	72756c69 	.word	0x72756c69
    8290:	43202c65 	.word	0x43202c65
    8294:	69646e6f 	.word	0x69646e6f
    8298:	6e6f6974 	.word	0x6e6f6974
    829c:	73655420 	.word	0x73655420
    82a0:	3a646574 	.word	0x3a646574
    82a4:	65642820 	.word	0x65642820
    82a8:	65726973 	.word	0x65726973
    82ac:	72665f64 	.word	0x72665f64
    82b0:	65757165 	.word	0x65757165
    82b4:	2079636e 	.word	0x2079636e
    82b8:	3833203c 	.word	0x3833203c
    82bc:	484d5f34 	.word	0x484d5f34
    82c0:	2626207a 	.word	0x2626207a
    82c4:	73656420 	.word	0x73656420
    82c8:	64657269 	.word	0x64657269
    82cc:	6572665f 	.word	0x6572665f
    82d0:	6e657571 	.word	0x6e657571
    82d4:	3e207963 	.word	0x3e207963
    82d8:	5f323120 	.word	0x5f323120
    82dc:	297a484d 	.word	0x297a484d
    82e0:	2020200a 	.word	0x2020200a
    82e4:	20202020 	.word	0x20202020
    82e8:	46202020 	.word	0x46202020
    82ec:	75716572 	.word	0x75716572
    82f0:	79636e65 	.word	0x79636e65
    82f4:	73756d20 	.word	0x73756d20
    82f8:	65622074 	.word	0x65622074
    82fc:	776f6c20 	.word	0x776f6c20
    8300:	74207265 	.word	0x74207265
    8304:	206e6168 	.word	0x206e6168
    8308:	20343833 	.word	0x20343833
    830c:	617a484d 	.word	0x617a484d
    8310:	6720646e 	.word	0x6720646e
    8314:	74616572 	.word	0x74616572
    8318:	74207265 	.word	0x74207265
    831c:	206e6168 	.word	0x206e6168
    8320:	6520726f 	.word	0x6520726f
    8324:	6c617571 	.word	0x6c617571
    8328:	206f7420 	.word	0x206f7420
    832c:	4d203231 	.word	0x4d203231
    8330:	5b1b7a48 	.word	0x5b1b7a48
    8334:	5b1b6d30 	.word	0x5b1b6d30
    8338:	000a6d30 	.word	0x000a6d30
    833c:	35345b1b 	.word	0x35345b1b
    8340:	2020206d 	.word	0x2020206d
    8344:	4f525245 	.word	0x4f525245
    8348:	305b1b52 	.word	0x305b1b52
    834c:	6d34393b 	.word	0x6d34393b
    8350:	3a73253a 	.word	0x3a73253a
    8354:	3b305b1b 	.word	0x3b305b1b
    8358:	256d3239 	.word	0x256d3239
    835c:	5b1b3a73 	.word	0x5b1b3a73
    8360:	33393b30 	.word	0x33393b30
    8364:	3e64256d 	.word	0x3e64256d
    8368:	305b1b20 	.word	0x305b1b20
    836c:	6d37333b 	.word	0x6d37333b
    8370:	65737341 	.word	0x65737341
    8374:	6f697472 	.word	0x6f697472
    8378:	6146206e 	.word	0x6146206e
    837c:	72756c69 	.word	0x72756c69
    8380:	43202c65 	.word	0x43202c65
    8384:	69646e6f 	.word	0x69646e6f
    8388:	6e6f6974 	.word	0x6e6f6974
    838c:	73655420 	.word	0x73655420
    8390:	3a646574 	.word	0x3a646574
    8394:	69642820 	.word	0x69642820
    8398:	65646976 	.word	0x65646976
    839c:	61765f72 	.word	0x61765f72
    83a0:	2065756c 	.word	0x2065756c
    83a4:	2938203c 	.word	0x2938203c
    83a8:	2020200a 	.word	0x2020200a
    83ac:	20202020 	.word	0x20202020
    83b0:	50202020 	.word	0x50202020
    83b4:	64204c4c 	.word	0x64204c4c
    83b8:	64697669 	.word	0x64697669
    83bc:	76207265 	.word	0x76207265
    83c0:	65756c61 	.word	0x65756c61
    83c4:	6e657720 	.word	0x6e657720
    83c8:	756f2074 	.word	0x756f2074
    83cc:	666f2074 	.word	0x666f2074
    83d0:	756f6220 	.word	0x756f6220
    83d4:	1b73646e 	.word	0x1b73646e
    83d8:	1b6d305b 	.word	0x1b6d305b
    83dc:	0a6d305b 	.word	0x0a6d305b
    83e0:	00000000 	.word	0x00000000
    83e4:	35345b1b 	.word	0x35345b1b
    83e8:	2020206d 	.word	0x2020206d
    83ec:	4f525245 	.word	0x4f525245
    83f0:	305b1b52 	.word	0x305b1b52
    83f4:	6d34393b 	.word	0x6d34393b
    83f8:	3a73253a 	.word	0x3a73253a
    83fc:	3b305b1b 	.word	0x3b305b1b
    8400:	256d3239 	.word	0x256d3239
    8404:	5b1b3a73 	.word	0x5b1b3a73
    8408:	33393b30 	.word	0x33393b30
    840c:	3e64256d 	.word	0x3e64256d
    8410:	305b1b20 	.word	0x305b1b20
    8414:	6d37333b 	.word	0x6d37333b
    8418:	65737341 	.word	0x65737341
    841c:	6f697472 	.word	0x6f697472
    8420:	6146206e 	.word	0x6146206e
    8424:	72756c69 	.word	0x72756c69
    8428:	43202c65 	.word	0x43202c65
    842c:	69646e6f 	.word	0x69646e6f
    8430:	6e6f6974 	.word	0x6e6f6974
    8434:	73655420 	.word	0x73655420
    8438:	3a646574 	.word	0x3a646574
    843c:	70632820 	.word	0x70632820
    8440:	69645f75 	.word	0x69645f75
    8444:	65646976 	.word	0x65646976
    8448:	203c2072 	.word	0x203c2072
    844c:	0a293233 	.word	0x0a293233
    8450:	20202020 	.word	0x20202020
    8454:	20202020 	.word	0x20202020
    8458:	69442020 	.word	0x69442020
    845c:	65646976 	.word	0x65646976
    8460:	756d2072 	.word	0x756d2072
    8464:	276e7473 	.word	0x276e7473
    8468:	78652074 	.word	0x78652074
    846c:	64656563 	.word	0x64656563
    8470:	1b323320 	.word	0x1b323320
    8474:	1b6d305b 	.word	0x1b6d305b
    8478:	0a6d305b 	.word	0x0a6d305b
    847c:	00000000 	.word	0x00000000
    8480:	33345b1b 	.word	0x33345b1b
    8484:	4157206d 	.word	0x4157206d
    8488:	4e494e52 	.word	0x4e494e52
    848c:	305b1b47 	.word	0x305b1b47
    8490:	6d34393b 	.word	0x6d34393b
    8494:	3a73253a 	.word	0x3a73253a
    8498:	3b305b1b 	.word	0x3b305b1b
    849c:	256d3239 	.word	0x256d3239
    84a0:	5b1b3a73 	.word	0x5b1b3a73
    84a4:	33393b30 	.word	0x33393b30
    84a8:	3e64256d 	.word	0x3e64256d
    84ac:	305b1b20 	.word	0x305b1b20
    84b0:	6d37333b 	.word	0x6d37333b
    84b4:	69206f4e 	.word	0x69206f4e
    84b8:	7265746e 	.word	0x7265746e
    84bc:	74707572 	.word	0x74707572
    84c0:	72657320 	.word	0x72657320
    84c4:	65636976 	.word	0x65636976
    84c8:	756f7220 	.word	0x756f7220
    84cc:	656e6974 	.word	0x656e6974
    84d0:	756f6620 	.word	0x756f6620
    84d4:	6620646e 	.word	0x6620646e
    84d8:	7420726f 	.word	0x7420726f
    84dc:	76206568 	.word	0x76206568
    84e0:	6f746365 	.word	0x6f746365
    84e4:	64252072 	.word	0x64252072
    84e8:	69442021 	.word	0x69442021
    84ec:	6c626173 	.word	0x6c626173
    84f0:	20676e69 	.word	0x20676e69
    84f4:	1b525349 	.word	0x1b525349
    84f8:	0a6d305b 	.word	0x0a6d305b
    84fc:	00000000 	.word	0x00000000
    8500:	32345b1b 	.word	0x32345b1b
    8504:	2020206d 	.word	0x2020206d
    8508:	464e4920 	.word	0x464e4920
    850c:	305b1b4f 	.word	0x305b1b4f
    8510:	6d34393b 	.word	0x6d34393b
    8514:	3a73253a 	.word	0x3a73253a
    8518:	3b305b1b 	.word	0x3b305b1b
    851c:	256d3239 	.word	0x256d3239
    8520:	5b1b3a73 	.word	0x5b1b3a73
    8524:	33393b30 	.word	0x33393b30
    8528:	3e64256d 	.word	0x3e64256d
    852c:	305b1b20 	.word	0x305b1b20
    8530:	6d37333b 	.word	0x6d37333b
    8534:	74726175 	.word	0x74726175
    8538:	696e6920 	.word	0x696e6920
    853c:	6c616974 	.word	0x6c616974
    8540:	64657a69 	.word	0x64657a69
    8544:	6d305b1b 	.word	0x6d305b1b
    8548:	0000000a 	.word	0x0000000a
    854c:	32345b1b 	.word	0x32345b1b
    8550:	2020206d 	.word	0x2020206d
    8554:	464e4920 	.word	0x464e4920
    8558:	305b1b4f 	.word	0x305b1b4f
    855c:	6d34393b 	.word	0x6d34393b
    8560:	3a73253a 	.word	0x3a73253a
    8564:	3b305b1b 	.word	0x3b305b1b
    8568:	256d3239 	.word	0x256d3239
    856c:	5b1b3a73 	.word	0x5b1b3a73
    8570:	33393b30 	.word	0x33393b30
    8574:	3e64256d 	.word	0x3e64256d
    8578:	305b1b20 	.word	0x305b1b20
    857c:	6d37333b 	.word	0x6d37333b
    8580:	746e6553 	.word	0x746e6553
    8584:	6c617620 	.word	0x6c617620
    8588:	25206575 	.word	0x25206575
    858c:	766f2066 	.word	0x766f2066
    8590:	55207265 	.word	0x55207265
    8594:	1b545241 	.word	0x1b545241
    8598:	0a6d305b 	.word	0x0a6d305b
    859c:	00000000 	.word	0x00000000
    85a0:	32345b1b 	.word	0x32345b1b
    85a4:	2020206d 	.word	0x2020206d
    85a8:	464e4920 	.word	0x464e4920
    85ac:	305b1b4f 	.word	0x305b1b4f
    85b0:	6d34393b 	.word	0x6d34393b
    85b4:	3a73253a 	.word	0x3a73253a
    85b8:	3b305b1b 	.word	0x3b305b1b
    85bc:	256d3239 	.word	0x256d3239
    85c0:	5b1b3a73 	.word	0x5b1b3a73
    85c4:	33393b30 	.word	0x33393b30
    85c8:	3e64256d 	.word	0x3e64256d
    85cc:	305b1b20 	.word	0x305b1b20
    85d0:	6d37333b 	.word	0x6d37333b
    85d4:	20636461 	.word	0x20636461
    85d8:	6e616863 	.word	0x6e616863
    85dc:	736c656e 	.word	0x736c656e
    85e0:	696e6920 	.word	0x696e6920
    85e4:	6c616974 	.word	0x6c616974
    85e8:	64657a69 	.word	0x64657a69
    85ec:	6d305b1b 	.word	0x6d305b1b
    85f0:	0000000a 	.word	0x0000000a
    85f4:	74726175 	.word	0x74726175
    85f8:	7361745f 	.word	0x7361745f
    85fc:	0000006b 	.word	0x0000006b
    8600:	65746f70 	.word	0x65746f70
    8604:	6f69746e 	.word	0x6f69746e
    8608:	6574656d 	.word	0x6574656d
    860c:	61745f72 	.word	0x61745f72
    8610:	ff006b73 	.word	0xff006b73

00008614 <sjsu::lpc40xx::Pin::kFunction>:
    8614:	ffff0300                                ....

00008618 <sjsu::lpc40xx::Pin::kResistor>:
    8618:	ffff0203                                ....

0000861c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    861c:	ffff0107                                ....

00008620 <sjsu::lpc40xx::Pin::kOpenDrain>:
    8620:	ffff010a                                ....

00008624 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    8624:	41400000                                ..@A

00008628 <sjsu::lpc40xx::SystemController::Peripherals::kAdc>:
    8628:	ffffff0c                                ....

0000862c <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    862c:	41400000                                ..@A

00008630 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    8630:	ffff0100                                ....

00008634 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    8634:	ffff0100                                ....

00008638 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    8638:	ffff0500                                ....

0000863c <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    863c:	ffff0108                                ....

00008640 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    8640:	ffff0208                                ....

00008644 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    8644:	ffff0208                                ....

00008648 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    8648:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    8658:	70682e72 ffff0070                       r.hpp...

00008660 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8660:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    8670:	70682e72 ffff0070                       r.hpp...

00008678 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    8678:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    8688:	70682e72 ffff0070                       r.hpp...

00008690 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    8690:	74737973 635f6d65 72746e6f 656c6c6f     system_controlle
    86a0:	70682e72 ffff0070                       r.hpp...

000086a8 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    86a8:	000087e4 00000802                       ........

000086b0 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    86b0:	000087e4 00000902                       ........

000086b8 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    86b8:	000087e4 00001c04                       ........

000086c0 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    86c0:	000087e4 00001d04                       ........

000086c8 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    86c8:	000087e4 00001d01                       ........

000086d0 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    86d0:	000087e4 00000902                       ........

000086d8 <sjsu::lpc40xx::Adc::Control::kChannelSelect>:
    86d8:	ffff0800                                ....

000086dc <sjsu::lpc40xx::Adc::Control::kClockDivider>:
    86dc:	ffff0808                                ....

000086e0 <sjsu::lpc40xx::Adc::Control::kBurstEnable>:
    86e0:	ffff0110                                ....

000086e4 <sjsu::lpc40xx::Adc::Control::kPowerEnable>:
    86e4:	ffff0115                                ....

000086e8 <sjsu::lpc40xx::Adc::Control::kStartCode>:
    86e8:	ffff0318                                ....

000086ec <sjsu::lpc40xx::Adc::DataRegister::kResult>:
    86ec:	ffff0c04                                ....

000086f0 <sjsu::lpc40xx::Adc::DataRegister::kDone>:
    86f0:	ffff011f                                ....

000086f4 <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel2>:
    86f4:	000087e4 00001900                       ........

000086fc <sjsu::lpc40xx::Adc::Channel::kAdcPinChannel4>:
    86fc:	000087e4 00001e01                       ........

00008704 <sjsu::lpc40xx::Adc::Channel::kChannel2>:
    8704:	000086f4 0000000a                       ........

0000870c <sjsu::lpc40xx::Adc::Channel::kChannel4>:
    870c:	000086fc 0000001c                       ........

00008714 <sjsu::lpc40xx::Adc::kClockFrequency>:
    8714:	49742400                                .$tI

00008718 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    8718:	65746e69 70757272 70682e74 ffff0070     interrupt.hpp...

00008728 <vUartTask(void*)::file>:
    8728:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

00008738 <vUartTask(void*)::file>:
    8738:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

00008748 <vPotentiometerTask(void*)::file>:
    8748:	534f5452 7361545f 682e736b ff007070     RTOS_Tasks.hpp..

00008758 <vtable for sjsu::lpc40xx::Adc>:
	...
    8760:	000018fd 00001a19 00001a69              ........i...

0000876c <vtable for sjsu::Adc>:
	...
    8774:	00006575 00006575 00006575              ue..ue..ue..

00008780 <vtable for sjsu::lpc40xx::Uart>:
	...
    8788:	00001501 000015c1 0000164d 000016f1     ........M.......
    8798:	000017c1                                ....

0000879c <vtable for sjsu::Uart>:
	...
    87a4:	00006575 00006575 00006575 00006575     ue..ue..ue..ue..
    87b4:	00006575                                ue..

000087b8 <vtable for sjsu::lpc40xx::SystemController>:
	...
    87c0:	000008b9 00000955 000009ad 000009d1     ....U...........
    87d0:	000009ed 00000a29 00000a5d              ....)...]...

000087dc <vtable for sjsu::lpc40xx::Pin>:
	...
    87e4:	000006c9 000006fd 0000076d 00000731     ........m...1...

000087f4 <vUartTask(void*)::__PRETTY_FUNCTION__>:
    87f4:	64696f76 61557620 61547472 76286b73     void vUartTask(v
    8804:	2a64696f ffff0029                       oid*)...

0000880c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    880c:	74726976 206c6175 64696f76 736a7320     virtual void sjs
    881c:	6c3a3a75 30346370 3a3a7878 74737953     u::lpc40xx::Syst
    882c:	6f436d65 6f72746e 72656c6c 65533a3a     emController::Se
    883c:	72655074 65687069 436c6172 6b636f6c     tPeripheralClock
    884c:	69766944 28726564 736e6f63 6a732074     Divider(const sj
    885c:	3a3a7573 74737953 6f436d65 6f72746e     su::SystemContro
    886c:	72656c6c 65503a3a 68706972 6c617265     ller::Peripheral
    887c:	2c264449 6e697520 745f3874 6f632029     ID&, uint8_t) co
    888c:	0074736e                                nst.

00008890 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    8890:	746e6975 745f3233 736a7320 6c3a3a75     uint32_t sjsu::l
    88a0:	30346370 3a3a7878 74737953 6f436d65     pc40xx::SystemCo
    88b0:	6f72746e 72656c6c 61433a3a 6c75636c     ntroller::Calcul
    88c0:	50657461 75286c6c 7374696e 72663a3a     atePll(units::fr
    88d0:	65757165 3a79636e 67656d3a 72656861     equency::megaher
    88e0:	745f7a74 6e75202c 3a737469 6572663a     tz_t, units::fre
    88f0:	6e657571 3a3a7963 6167656d 74726568     quency::megahert
    8900:	29745f7a 6e6f6320 ff007473              z_t) const..

0000890c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    890c:	64696f76 736a7320 6c3a3a75 30346370     void sjsu::lpc40
    891c:	3a3a7878 74737953 6f436d65 6f72746e     xx::SystemContro
    892c:	72656c6c 65533a3a 75704374 636f6c43     ller::SetCpuCloc
    893c:	7669446b 72656469 6e697528 745f3874     kDivider(uint8_t
    894c:	6f632029 0074736e                       ) const.

00008954 <vPotentiometerTask(void*)::__PRETTY_FUNCTION__>:
    8954:	64696f76 6f507620 746e6574 656d6f69     void vPotentiome
    8964:	54726574 286b7361 64696f76 ff00292a     terTask(void*)..

00008974 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    8974:	74617473 76206369 2064696f 75736a73     static void sjsu
    8984:	6f633a3a 78657472 6e493a3a 72726574     ::cortex::Interr
    8994:	43747075 72746e6f 656c6c6f 553a3a72     uptController::U
    89a4:	6765726e 65747369 49646572 7265746e     nregisteredInter
    89b4:	74707572 646e6148 2872656c ffff0029     ruptHandler()...
    89c4:	61766e69 0064696c 6c707061 74616369     invalid.applicat
    89d4:	006e6f69 74736f68 73657420 00000074     ion.host test...
    89e4:	64252020 78302029 58383025 0000000a       %d) 0x%08X....
    89f4:	25783020 00583830 64252020 78302029      0x%08X.  %d) 0x
    8a04:	000a7025 6e75520a 6874203a 6f662065     %p...Run: the fo
    8a14:	776f6c6c 20676e69 6d6d6f63 20646e61     llowing command 
    8a24:	79206e69 2072756f 6a6f7270 20746365     in your project 
    8a34:	65726964 726f7463 00000079 20200a0a     directory.....  
    8a44:	3b315b1b 006d3733 656b616d 61747320     .[1;37m.make sta
    8a54:	72746b63 2d656361 54207325 45434152     cktrace-%s TRACE
    8a64:	00223d53 25783020 00000070 1b0a0a22     S=". 0x%p..."...
    8a74:	006d305b 73696854 6c697720 6572206c     [0m.This will re
    8a84:	74726f70 65687420 6c696620 6e612065     port the file an
    8a94:	696c2064 6e20656e 65626d75 68742072     d line number th
    8aa4:	6c207461 74206465 6874206f 66207369     at led to this f
    8ab4:	74636e75 206e6f69 6e696562 61632067     unction being ca
    8ac4:	64656c6c 0000002e 33345b1b 4157206d     lled.....[43m WA
    8ad4:	4e494e52 305b1b47 6d34393b 3a73253a     RNING.[0;94m:%s:
    8ae4:	3b305b1b 256d3239 5b1b3a73 33393b30     .[0;92m%s:.[0;93
    8af4:	3e64256d 305b1b20 6d37333b 69206f4e     m%d> .[0;37mNo i
    8b04:	7265746e 74707572 72657320 65636976     nterrupt service
    8b14:	756f7220 656e6974 756f6620 6620646e      routine found f
    8b24:	7420726f 76206568 6f746365 64252072     or the vector %d
    8b34:	69442021 6c626173 20676e69 1b525349     ! Disabling ISR.
    8b44:	0a6d305b 00000000 31345b1b 7261486d     [0m......[41mHar
    8b54:	61462064 20746c75 65637845 6f697470     d Fault Exceptio
    8b64:	634f206e 72727563 0a216465 6d305b1b     n Occurred!..[0m
    8b74:	00000000 203a3072 30257830 2c586c38     ....r0: 0x%08lX,
    8b84:	3a317220 25783020 586c3830 3272202c      r1: 0x%08lX, r2
    8b94:	7830203a 6c383025 72202c58 30203a33     : 0x%08lX, r3: 0
    8ba4:	38302578 000a586c 3a323172 25783020     x%08lX..r12: 0x%
    8bb4:	586c3830 726c202c 7830203a 6c383025     08lX, lr: 0x%08l
    8bc4:	70202c58 30203a63 38302578 202c586c     X, pc: 0x%08lX, 
    8bd4:	3a727370 25783020 586c3830 0000000a     psr: 0x%08lX....
    8be4:	315b1b0a 6d37333b 32345b1b 6f72506d     ..[1;37m.[42mPro
    8bf4:	6d617267 74655220 656e7275 78452064     gram Returned Ex
    8c04:	43207469 3a65646f 646c2520 305b1b0a     it Code: %ld..[0
    8c14:	0000006d 315b1b0a 6d37333b 31345b1b     m.....[1;37m.[41
    8c24:	6f72506d 6d617267 74655220 656e7275     mProgram Returne
    8c34:	78452064 43207469 3a65646f 646c2520     d Exit Code: %ld
    8c44:	305b1b0a ffff006d 454c4449 00000000     ..[0m...IDLE....
    8c54:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    8c64:	09752509 25752509 000a0d25 09752509     .%u..%u%%....%u.
    8c74:	25313c09 000a0d25 ffff000a              .<1%%.......

00008c80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    8c80:	3f800000 41200000 42c80000 447a0000     ...?.. A...B..zD
    8c90:	461c4000 47c35000 49742400 4b189680     .@.F.P.G.$tI...K
    8ca0:	4cbebc20 4e6e6b28 0074743a 61766e69      ..L(knN:tt.inva
    8cb0:	0064696c 6c707061 74616369 006e6f69     lid.application.
    8cc0:	74736f68 73657420 00000074 64252020     host test...  %d
    8cd0:	78302029 58383025 0000000a 25783020     ) 0x%08X.... 0x%
    8ce0:	00583830 64252020 78302029 000a7025     08X.  %d) 0x%p..
    8cf0:	6e75520a 6874203a 6f662065 776f6c6c     .Run: the follow
    8d00:	20676e69 6d6d6f63 20646e61 79206e69     ing command in y
    8d10:	2072756f 6a6f7270 20746365 65726964     our project dire
    8d20:	726f7463 00000079 20200a0a 3b315b1b     ctory.....  .[1;
    8d30:	006d3733 656b616d 61747320 72746b63     37m.make stacktr
    8d40:	2d656361 54207325 45434152 00223d53     ace-%s TRACES=".
    8d50:	25783020 00000070 1b0a0a22 006d305b      0x%p..."...[0m.
    8d60:	73696854 6c697720 6572206c 74726f70     This will report
    8d70:	65687420 6c696620 6e612065 696c2064      the file and li
    8d80:	6e20656e 65626d75 68742072 6c207461     ne number that l
    8d90:	74206465 6874206f 66207369 74636e75     ed to this funct
    8da0:	206e6f69 6e696562 61632067 64656c6c     ion being called
    8db0:	0000002e 33345b1b 4157206d 4e494e52     .....[43m WARNIN
    8dc0:	305b1b47 6d34393b 3a73253a 3b305b1b     G.[0;94m:%s:.[0;
    8dd0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    8de0:	305b1b20 6d37333b 69206f4e 7265746e      .[0;37mNo inter
    8df0:	74707572 72657320 65636976 756f7220     rupt service rou
    8e00:	656e6974 756f6620 6620646e 7420726f     tine found for t
    8e10:	76206568 6f746365 64252072 69442021     he vector %d! Di
    8e20:	6c626173 20676e69 1b525349 0a6d305b     sabling ISR.[0m.
    8e30:	00000000 ffffffff 00005049 00000001     ........IP......
    8e40:	ffffffff 35345b1b 2020206d 4f525245     .....[45m   ERRO
    8e50:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    8e60:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    8e70:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    8e80:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    8e90:	6e6f6974 73655420 3a646574 65702820     tion Tested: (pe
    8ea0:	68706972 6c617265 7669645f 72656469     ripheral_divider
    8eb0:	203d3c20 200a2934 20202020 20202020      <= 4).         
    8ec0:	76694420 72656469 73756d20 74276e74      Divider mustn't
    8ed0:	63786520 20646565 5b1b3233 5b1b6d30      exceed 32.[0m.[
    8ee0:	000a6d30 6972500a 6e69746e 74532067     0m...Printing St
    8ef0:	206b6361 63617254 000a3a65 35345b1b     ack Trace:...[45
    8f00:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    8f10:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    8f20:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    8f30:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    8f40:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    8f50:	3a646574 65642820 65726973 72665f64     ted: (desired_fr
    8f60:	65757165 2079636e 3833203c 484d5f34     equency < 384_MH
    8f70:	2626207a 73656420 64657269 6572665f     z && desired_fre
    8f80:	6e657571 3e207963 5f323120 297a484d     quency > 12_MHz)
    8f90:	2020200a 20202020 46202020 75716572     .          Frequ
    8fa0:	79636e65 73756d20 65622074 776f6c20     ency must be low
    8fb0:	74207265 206e6168 20343833 617a484d     er than 384 MHza
    8fc0:	6720646e 74616572 74207265 206e6168     nd greater than 
    8fd0:	6520726f 6c617571 206f7420 4d203231     or equal to 12 M
    8fe0:	5b1b7a48 5b1b6d30 000a6d30 35345b1b     Hz.[0m.[0m...[45
    8ff0:	2020206d 4f525245 305b1b52 6d34393b     m   ERROR.[0;94m
    9000:	3a73253a 3b305b1b 256d3239 5b1b3a73     :%s:.[0;92m%s:.[
    9010:	33393b30 3e64256d 305b1b20 6d37333b     0;93m%d> .[0;37m
    9020:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    9030:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    9040:	3a646574 69642820 65646976 61765f72     ted: (divider_va
    9050:	2065756c 2938203c 2020200a 20202020     lue < 8).       
    9060:	50202020 64204c4c 64697669 76207265        PLL divider v
    9070:	65756c61 6e657720 756f2074 666f2074     alue went out of
    9080:	756f6220 1b73646e 1b6d305b 0a6d305b      bounds.[0m.[0m.
    9090:	00000000 35345b1b 2020206d 4f525245     .....[45m   ERRO
    90a0:	305b1b52 6d34393b 3a73253a 3b305b1b     R.[0;94m:%s:.[0;
    90b0:	256d3239 5b1b3a73 33393b30 3e64256d     92m%s:.[0;93m%d>
    90c0:	305b1b20 6d37333b 65737341 6f697472      .[0;37mAssertio
    90d0:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    90e0:	6e6f6974 73655420 3a646574 70632820     tion Tested: (cp
    90f0:	69645f75 65646976 203c2072 0a293233     u_divider < 32).
    9100:	20202020 20202020 69442020 65646976               Divide
    9110:	756d2072 276e7473 78652074 64656563     r mustn't exceed
    9120:	1b323320 1b6d305b 0a6d305b 00000000      32.[0m.[0m.....
    9130:	fffffffb 00005601 00000001 ffffffff     .....V..........
    9140:	fffffffe 00005711 00000001 ffffffff     .....W..........
    9150:	35345b1b 2020206d 4f525245 305b1b52     .[45m   ERROR.[0
    9160:	6d34393b 3a73253a 3b305b1b 256d3239     ;94m:%s:.[0;92m%
    9170:	5b1b3a73 33393b30 3e64256d 305b1b20     s:.[0;93m%d> .[0
    9180:	6d37333b 65737341 6f697472 6146206e     ;37mAssertion Fa
    9190:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    91a0:	73655420 3a646574 69742820 5f72656d      Tested: (timer_
    91b0:	72617473 74735f74 73757461 203d3d20     start_status == 
    91c0:	75736a73 74533a3a 73757461 536b3a3a     sjsu::Status::kS
    91d0:	65636375 0a297373 20202020 20202020     uccess).        
    91e0:	79532020 6d657473 6d695420 28207265       System Timer (
    91f0:	64657375 20796220 65657246 534f5452     used by FreeRTOS
    9200:	61682029 41462073 44454c49 206f7420     ) has FAILED to 
    9210:	72617473 5b1b2174 5b1b6d30 000a6d30     start!.[0m.[0m..

00009220 <std::integral_constant<long long, 1ll>::value>:
    9220:	00000001 00000000                       ........

00009228 <config::kSystemClockRateMhz>:
    9228:	42400000                                ..@B

0000922c <config::kRtosFrequency>:
    922c:	447a0000                                ..zD

00009230 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    9230:	00009284                                ....

00009234 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    9234:	000087e4 00000200                       ........

0000923c <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    923c:	000087e4 00000300                       ........

00009244 <sjsu::lpc40xx::Uart::Port::kUart0>:
    9244:	4000c000 00000003 00009234 0000923c     ...@....4...<...
    9254:	00000009                                ....

00009258 <sjsu::InitializePlatform()::file>:
    9258:	72617473 2e707574 00707063              startup.cpp.

00009264 <vtable for sjsu::cortex::SystemTimer>:
	...
    926c:	000050b5 000050c9 000051d1 000050e9     .P...P...Q...P..

0000927c <vtable for sjsu::cortex::InterruptController>:
	...
    9284:	00004e95 00004ee9                       .N...N..

0000928c <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    928c:	64696f76 736a7320 493a3a75 6974696e     void sjsu::Initi
    929c:	7a696c61 616c5065 726f6674 0029286d     alizePlatform().
    92ac:	20726d54 00637653 51726d54 ffffff00     Tmr Svc.TmrQ....

000092bc <__sf_fake_stderr>:
	...

000092dc <__sf_fake_stdin>:
	...

000092fc <__sf_fake_stdout>:
	...
